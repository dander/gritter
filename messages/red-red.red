#(
    id: "59bae30a177fb9fe7ebfffb5"
    text: {@maximvl, I'm ready to be amazed as well. Really enjoyed your other CL-inspired gists.}
    sent: "2017-09-14T20:14:02.983Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b9eca2bac826f054b596f5"
    text: "@9214 Looks like an issue, worth a ticket."
    sent: "2017-09-14T02:42:42.981Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b9a572319100804e304465"
    text: {@dockimbel :point_up: should I make a wish (support case sensitivity for blocks), file an issue (see second example) or both?}
    sent: "2017-09-13T21:38:58.480Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9a494c101bc4e3ac32f75"
    text: {hm, so `/case` shouldn't be used for creation of case sensitive dialects? :confused: }
    sent: "2017-09-13T21:35:16.868Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9a422210ac269202a469e"
    text: {@9214 `parse/case` is for string parsing only, it should be ignored for block parsing, so I think that second example is a bug.}
    sent: "2017-09-13T21:33:22.910Z"
    editedAt: "2017-09-13T21:33:30.065Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b9a354b59d55b823f222b7"
    text: {and this one just looks suspicious:^/```text^/>> parse [a]['a]^/== true^/>> parse/case [a]['a]^/== false^/>> parse/case [a][quote a]^/== true^/```}
    sent: "2017-09-13T21:29:56.008Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9a2adcfeed2eb6506cab5"
    text: {question about `parse/case`:^/```text^/>> parse/case [a A]['a 'A]^/== false^/>> parse/case [a A][quote a quote A]^/== true^/```^/Is that intended? Can this rules be relaxed somehow so I can use `'` instead of `quote`?}
    sent: "2017-09-13T21:27:09.260Z"
    editedAt: "2017-09-13T21:27:49.088Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b93cc8c101bc4e3ac0baee"
    text: {There should be a more recent one IIRC, but maybe not in this room.}
    sent: "2017-09-13T14:12:24.048Z"
    editedAt: "2017-09-13T14:12:52.230Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b934051081499f1f283331"
    text: {I see some conversation on the subject on Nov 16th last year.}
    sent: "2017-09-13T13:35:01.844Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b93373319100804e2d931c"
    text: {Fixed the NULL bug there—so, yes, for now /FLAT mode preserves the fidelity of a JSON object.}
    sent: "2017-09-13T13:32:35.353Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b932eebac826f054b18fe6"
    text: {@rgchris I might have a solution for such cases in `map!`, though I need to dig through the chat history to retrieve it and the comments about it by @WiseGenius. We should really put those posts in a separate wiki page.}
    sent: "2017-09-13T13:30:22.913Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b93283c101bc4e3ac07855"
    text: {Loading in /FLAT mode does preserve the key with the NONE value, this is a similar workaround to where a JSON object contains duplicate key names.}
    sent: "2017-09-13T13:28:35.746Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b931ae1081499f1f282616"
    text: {At this point, I don't have a specific solution for that. You should be able to use the word 'none to create a null value in a block or map, but apparently (bug) that's creating a string with ^^@ in it.}
    sent: "2017-09-13T13:25:02.418Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b930eab59d55b823ef4eca"
    text: {@rgchris As I understand, you convert JS objects to Red maps, right? How do you handle `null` values in maps then?}
    sent: "2017-09-13T13:21:46.555Z"
    editedAt: "2017-09-13T13:22:03.405Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b92f60bc464729742b5a80"
    text: {Example: `load-json {"\uD83D\uDE00"}`}
    sent: "2017-09-13T13:15:12.960Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b92f14bac826f054b176d8"
    text: {[AltJSON v0.3.6.1 for Red](https://github.com/rgchris/Scripts/blob/master/red/altjson.red)^/Has many of the features from the Rebol 2 version, including handling of surrogate pairs for escaping characters higher than the BMP.}
    sent: "2017-09-13T13:13:56.928Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b911371081499f1f276733"
    text: {@dockimbel ^/> Encryption is implemented using OS API, it would be too expensive to do it ourselves. We try to minimize the Red codebase size by reusing the features provided by the OS. ^/^/Thank you for the clarification!^/^/^/}
    sent: "2017-09-13T11:06:31.801Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b8eded1081499f1f26ad5e"
    text: "@maximvl Looking forward to be amazed. ;-)"
    sent: "2017-09-13T08:35:57.542Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b8e993b59d55b823edabc9"
    text: {@greggirwin @dockimbel I saw it yesterday, yep I can handle this :D}
    sent: "2017-09-13T08:17:23.030Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b8d838bc46472974297184"
    text: {@greggirwin I was also thinking that one of the more experienced lispers here could find such task fun to do. ;-)}
    sent: "2017-09-13T07:03:20.173Z"
    editedAt: "2017-09-13T07:03:35.925Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b8c90cbac826f054af4d19"
    text: {@dockimbel, I saw the MAL project sometime back, and cloned it, but then wasn't sure if it was the best use of my time. I have one little project I want to do, then back on `format`. Maybe one of the Lisp-ish folks could tackle it. @maximvl? @JacobGood1?}
    sent: "2017-09-13T05:58:36.820Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b8c4c0614889d475efcda9"
    text: "@PeterWAWood Thanks a lot!! It is working now."
    sent: "2017-09-13T05:40:16.927Z"
    v: 1
    author: "59b88468d73408ce4f758151"
) #(
    id: "59b8c3eb210ac26920256931"
    text: "@dockimbel cool!"
    sent: "2017-09-13T05:36:43.050Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "59b8b4c51081499f1f259ed8"
    text: {@ajinkyakulkarni Remove the `/no-wait` from `view/no-wait win`.}
    sent: "2017-09-13T04:32:05.195Z"
    editedAt: "2017-09-13T04:32:16.964Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59b8b41cbac826f054aef277"
    text: {Anyone interested in making a Red entry for "Make a Lisp, in 68 languages"?^/ https://github.com/kanaka/mal}
    sent: "2017-09-13T04:29:16.445Z"
    editedAt: "2017-09-13T04:29:51.574Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b8afb6b59d55b823ec9c29"
    text: {@PeterWAWood - I am running it on MacOS.  I am able to run most of the examples in red/code repository without any problem. However with the mentioned logo turtle gist, I don't get any error when I run. }
    sent: "2017-09-13T04:10:30.981Z"
    editedAt: "2017-09-13T04:13:52.817Z"
    v: 2
    author: "59b88468d73408ce4f758151"
) #(
    id: "59b8aee8cfeed2eb65017667"
    text: {@Oldes Sorry for pushing the commit to red/red too late, I intended to sync the commits between the private and public repos on a weekly basis, but got too caught up by coding on pure Android parts. I will try to sync more frequently in the future.}
    sent: "2017-09-13T04:07:04.785Z"
    editedAt: "2017-09-13T04:08:25.230Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b8adfd1081499f1f258438"
    text: {@BeardPower ^/> but other features are implemented from scratch (e,g, encryption)^/^/Encryption is implemented using OS API, it would be too expensive to do it ourselves. We try to minimize the Red codebase size by reusing the features provided by the OS.}
    sent: "2017-09-13T04:03:09.879Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b8a961c101bc4e3abda055"
    text: {@ajinkyakulkarni Are you trying to run the on Linux? If so, the View GUI system has not yet been implemented for Linux. Work has started on an implementation by members of the community but it is yet ready to be included in the published Alpha releases.}
    sent: "2017-09-13T03:43:29.832Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59b8a1ecbac826f054aea988"
    text: {I am trying to run this logo turtle example https://gist.github.com/mydoghasworms/bd342a10f2b806f050ed903e5be435a0, however when I run "$./red-063 logo_turtle.red" nothing happens. I don't see the window as shown in the gist. Can anyone advice?  }
    sent: "2017-09-13T03:11:40.081Z"
    v: 1
    author: "59b88468d73408ce4f758151"
) #(
    id: "59b89d98bc46472974286c00"
    text: "`nirst`"
    sent: "2017-09-13T02:53:12.226Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b84fd0c101bc4e3abbfee8"
    text: "Thank you!"
    sent: "2017-09-12T21:21:20.514Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b84ed01081499f1f23d3fe"
    text: {@BeardPower btw... if you would like to implement own `native` function, this is example what must be done: https://github.com/red/red/pull/1105/files (my implementation may not be perfect - it was never reviewed)^/}
    sent: "2017-09-12T21:17:04.565Z"
    editedAt: "2017-09-12T21:18:32.343Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b8479ecfeed2eb65ff9133"
    text: {Ah, ok. (just read the BCD type on the task list) . I will male a list ASAP :)}
    sent: "2017-09-12T20:46:22.470Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b84161bac826f054acda35"
    text: {Money doesn't have to be BCD. Let's see what Nenad suggests. If you have a checklist of specific features, he may be able to go through them quickly. e.g. there is some zlib stuff being done already by Team Red.}
    sent: "2017-09-12T20:19:45.910Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b82cca177fb9fe7eb17393"
    text: {Yeah, I guess it's better to wait for a finalized version, so there is no duplicate work done.^/Sure :)^/ I guess there is also the usual issue with documentation: it's boring and no one really seems to like writing it^/^/^/}
    sent: "2017-09-12T18:51:54.406Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b82a5dcfeed2eb65fef004"
    text: {I understand, that  if we want to proceed quickly, it is better to write code than documentation:) }
    sent: "2017-09-12T18:41:33.168Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b829c9614889d475ece75e"
    text: {Thanks. I will look into it. Yes, money! is a little different, as it's also a BCD type.^/It would be of great benefit, if more specific design docs will be released in the future. E.g. about datatype/register, important steps, what needs to be considered/implemented and so on.}
    sent: "2017-09-12T18:39:05.266Z"
    editedAt: "2017-09-12T18:39:41.030Z"
    v: 2
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b82995c101bc4e3abb27a2"
    text: {There is also problem, that Red is now being developed in private branches and Nenad don't have time to review public repos.... and so you may end implementing something, what is already done, but we don't know it yet. For example 4 days ago I opened [this wish](https://github.com/red/red/issues/3018), made own implementation, and today Nenad pushed [commit](https://github.com/red/red/commit/84c2f43338c68dc8876cfb8f7af82ae42da8b05e) which is 24 days old where is implemented exactly what I wanted. (main difference will be, that he made it in minutes or seconds, while I spend hours on it)}
    sent: "2017-09-12T18:38:13.541Z"
    editedAt: "2017-09-12T18:46:00.624Z"
    v: 4
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b82832bc464729742612ac"
    text: {But I think it would be better if @dockimbel would answer your questions.}
    sent: "2017-09-12T18:32:18.947Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b8280ebac826f054ac46a8"
    text: {Regarding API vs scratch... I think it is mostly based if there are some common APIs in all systems without need to install anything.}
    sent: "2017-09-12T18:31:42.317Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b827d6bc46472974260eca"
    text: {@BeardPower I understand... I would also want to help. `money!` is not easy datatype, but for adding datatype... you can check this PR https://github.com/red/red/commit/d9040a169d39b7ca786e9151a9c52c2e5990cca1 where was added `handle!` datatype, which is on the other side very easy, as it is just not modifiable integer.}
    sent: "2017-09-12T18:30:46.846Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b821a7319100804e2832f4"
    text: {@Oldes Thanks for the information. I'm aware of the alpha version and the current flux of Red, that's why I hesitated from implementing some system specific things.^/What I want to achieve: I read on the task list, that the money! type maybe is coming to 1.0, if time allows it.  As I want to implement some DSL (finance) for a finance app with rich GUI and relying on the money! type (because it would be the best fit), I thought about implementing it and/or contributing other stuff. I also saw, that some things are implemented using calls to OS libraries (codecs for PNG, JPEG etc.), but other features are implemented from scratch (e,g, encryption). So if I want to code some codecs or something related to compression/encryption, it would be great to know, when to use OS API calls and when to implement from scratch. }
    sent: "2017-09-12T18:04:23.424Z"
    editedAt: "2017-09-12T18:09:06.077Z"
    v: 5
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b7eccdc101bc4e3ab9b0f8"
    text: {Hi @BeardPower ... unfortunately there is not much such an info. Red is still in alpha version and so many things are not stabilized yet. Not mentioning that the compiler is written in Rebol and is supposed to be rewritten in Red once it will be [on the task list](https://trello.com/b/FlQ6pzdB/red-tasks-overview). But maybe if you would be more concrete, what exactly you want to achieve now, maybe someone could help you.}
    sent: "2017-09-12T14:18:53.500Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b7d930614889d475eadac4"
    text: {Hi, everyone,^/^/I dug a little through the code, specs and docs, but could not find any info about the "inner workings/design" of Red / Red/System. Is there any documentation on how to implement datatypes or codecs (image, compression, encryption) and how they are connected internally? When to use OS API calls and when to port third party libs/code, e.g. zlib/lz4, AES (using the CPU extensions)?}
    sent: "2017-09-12T12:55:12.967Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b70d10319100804e226902"
    text: "Got it. thanks"
    sent: "2017-09-11T22:24:16.110Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "59b6f294cfeed2eb65f88a97"
    text: {In the first rule, it's trying to match a `string!` *followed by* another rule (`|number!`), which you haven't defined. But it never matches a string in your data, so it never tries to evaluate `|number!`:^/```^/>> parse ["1" 2 3 4][some [string! |number!]]^/*** Script Error: PARSE - invalid rule or usage of rule: |number!^/*** Where: parse^/*** Stack:  ^/```}
    sent: "2017-09-11T20:31:16.369Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b6f17cb59d55b823e38b40"
    text: {I have a typo in these two parse statements. No space after "OR" . How  come the first statement returns false and  the  second generates an error?^/`parse [1 2 3 4][some [string! |number!]]`^/false^/`parse [1 2 3 4][some [number! |string!]]`^/*** Script Error: PARSE - invalid rule or usage of rule: |string!^/*** Where: parse^/}
    sent: "2017-09-11T20:26:36.226Z"
    editedAt: "2017-09-11T20:28:01.809Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "59b6547a614889d475e2c7d6"
    text: {@Oldes thx, I just wanted to know if I was wrong in init values this way}
    sent: "2017-09-11T09:16:42.737Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "59b65307614889d475e2c0a3"
    text: {What about this: `foreach x ["W" "O" "R" "K" "S"] [ print rejoin [#" " x] ]` ?}
    sent: "2017-09-11T09:10:30.999Z"
    editedAt: "2017-09-11T09:10:56.022Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
)#(
    id: "59b65208b59d55b823dfd3e1"
    text: {@greggirwin THX, of course it is my mistake, I usually forget all is data (and I know it is), and usually I use colon to init values, this is the ballast I carry from other langs  :smile: Let me say your wiki helped me refresh my mind^/}
    sent: "2017-09-11T09:06:16.290Z"
    editedAt: "2017-09-11T09:08:50.855Z"
    v: 2
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "59b64cf9c101bc4e3ab0e669"
    text: {@419928194516 I'm also quite not sure.. if I should start with the hard work and write complete system over OpenGL in Red/System myself (as a part of self-learning), or if I should not write SDL binding.}
    sent: "2017-09-11T08:44:41.689Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b649e6bc464729741b976a"
    text: {@planetsizecpu: https://github.com/red/red/wiki/Why-do-I-have-to-copy-series-values%3F}
    sent: "2017-09-11T08:31:34.246Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b647a6c101bc4e3ab0c8e9"
    text: {May be it is my mistake, inside a `foreach` loop inisialitation is not working as outside? see this code:^/`Red []^/foreach x ["W" "O" "R" "K" "S"] [^/^-str: " "^/^-append str x^/^-print str^/]^/`^/}
    sent: "2017-09-11T08:21:58.910Z"
    editedAt: "2017-09-11T08:22:22.369Z"
    v: 2
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "59b641c5b59d55b823df7c55"
    text: {Regarding the Vulkan binding, I must warn you, that it may not be fully correct! So far I used it just to obtain an instance. And after that I decided, I should spend my time more on OpenGL, as it will need time to have Vulkan common and it is not on Mac, so one would need to have OpenGL version anyway.}
    sent: "2017-09-11T07:56:53.764Z"
    editedAt: "2017-09-11T07:57:38.675Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b64126c101bc4e3ab0a280"
    text: {@419928194516 at least for code I write, I use red/code/Library as a centralized place... I could easily do own repo for each library, but my plan is to use these binding together one day and so it is better to have them under one roof. Regarding C parser... I use **very ugly** code, which I specialize per header file I want to parse. It is so ugly that I did not published it. These scripts are one purpose scripts... and I didn't wanted to spend time on making them nice and capable to parse correctly everything. I write them as I read the header file. It is not automated process.}
    sent: "2017-09-11T07:54:14.826Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b623b5bac826f054a0ef74"
    text: {@onetom You can also install red from hard way from sources^/^/```^/$ git clone git://github.com/NixOS/nixpkgs.git^/$ cd nixpkgs^/$ nix-build -f . -iA red^/```}
    sent: "2017-09-11T05:48:37.443Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "59b622bb614889d475e1bd3f"
    text: {@onetom I use it with unstable channel^/^/```^/$ nix-channel --list^/nixpkgs https://nixos.org/channels/nixpkgs-unstable^/```^/^/Perhaps not yet added to stable branch.}
    sent: "2017-09-11T05:44:27.703Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "59b611acc101bc4e3aafc9ec"
    text: {@Oldes  So this weekend, I wrote an xml parser, then used it to parse the Normative Vulkan Spec into something approximating Red/System code, I was planning on asking here about some of the limitations of Red/System. (arrays, more datatypes) Only to notice that you just commited https://github.com/red/code/blob/master/Library/Vulkan/vulkan.reds 5 days ago (nice job!). It answered many of my questions, but raised another. Do you (or someone) have a red C/C++ header file parser floating around? I was going to have to write at least a partial parser to finish my work on the spec (since they inline a fair amount of C in the xml)^/Also, for everyone, is the general plan to centralize binding code of this type in red/code/Library?}
    sent: "2017-09-11T04:31:40.711Z"
    v: 1
    author: "5999b530d73408ce4f723366"
) #(
    id: "59b4b86c66c1c7c47733347b"
    text: {I was trying to find it on https://nixos.org/nixos/packages.html too but it's not there.^/Who can help me to move forward with this?}
    sent: "2017-09-10T03:58:36.910Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "59b4b81cb59d55b823d98e5f"
    text: {So i just saw [this tweet](https://twitter.com/red_lang/status/904651967519121408) about a Nix package for Red the other day and nenad also reminded me of it yesterday, so I thought I would try:^/```^/λ time nix-env -i red-v0.6.3                                                                                                                                                     11:51:06^/error: selector ‘red-v0.6.3’ matches no derivations^/       11.84 real         4.25 user         1.48 sys^/```}
    sent: "2017-09-10T03:57:16.625Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "59b4468a162adb6d2e850de2"
    text: {@rgchris Awesome. Digging into this now-- always a trove of parse tricks to learn from @rgchris code. Would-be students of parse: This is some of the best education you can get if you can stick with it.}
    sent: "2017-09-09T19:52:42.490Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59b4291151915d962af8efb6"
    text: {@pekr , version 0.4 should be out soon with improved performance (rewritten in Rust, IIRC)}
    sent: "2017-09-09T17:46:57.572Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "59b425d0177fb9fe7e9eb9a3"
    text: {Thanks for the link to Idyll @geekyi. And Eve is still alive. At least there are occasional posts on their ML to indicate that they're still working on it.}
    sent: "2017-09-09T17:33:04.734Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b3da91cfeed2eb65eb6d1a"
    text: {@Oldes ^/> The simple part is done already https://github.com/red/code/tree/master/Library/OpenGL^/  ^/Ah!!! Everything you wish for is already there in Red!!! :smile: }
    sent: "2017-09-09T12:12:01.793Z"
    editedAt: "2017-09-09T12:14:29.937Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59b39f82cfeed2eb65eaa60c"
    text: {Eve is still alive as a project, no? At least according to twitter messages they post.}
    sent: "2017-09-09T08:00:02.575Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59b39c78cfeed2eb65ea9c59"
    text: "@geekyi wonders what happened to *eve*"
    status: true
    sent: "2017-09-09T07:47:04.520Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59b39c3ab59d55b823d5d6bb"
    text: {https://idyll-lang.github.io/ : a web visualization tool like jupyter notebooks (with support for d3, etc), but with a simpler, markdown like format and less boilerplate. Still haven't looked too deeply at how it works}
    sent: "2017-09-09T07:46:02.996Z"
    editedAt: "2017-09-09T07:46:23.977Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59b30d0bc101bc4e3aa4eee2"
    text: {@tstrokes See `html-tools.red` and `xml.red` [here](https://github.com/rebolek/red-tools/tree/xml) for some web-scrapping stuff.}
    sent: "2017-09-08T21:35:07.592Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b2e6f3bac826f05495271f"
    text: {I was going to point to @rgchris's stuff. I do have a bunch of old stuff, built for a SaaS product. It was, indeed, all parse based. }
    sent: "2017-09-08T18:52:35.432Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2e4bcbc464729740ed94a"
    text: "@rgchris :+1: Very nice!"
    sent: "2017-09-08T18:43:08.828Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b2de43cfeed2eb65e7e526"
    text: {There's a little bit of [documentation](http://ross-gill.com/page/HTML_and_Rebol) here.}
    sent: "2017-09-08T18:15:31.674Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b2dd9fb16f2646421da747"
    text: "thanks  @rgchris !"
    sent: "2017-09-08T18:12:47.928Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b2dcfa162adb6d2e800a33"
    text: {Still a work in progress, but I have an [HTML5 parser in Red](https://github.com/rgchris/Scripts/blob/master/experimental/markup.reb). Can use to build a tree that is consistent with browser trees (LOAD-HTML), or just separate tags/text (LOAD-MARKUP).}
    sent: "2017-09-08T18:10:02.338Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b2d117cfeed2eb65e7a21c"
    text: {I bet someone already done some html/xml scraping script, @greggirwin, any tips?}
    sent: "2017-09-08T17:19:19.866Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b2d0fdb16f2646421d66c3"
    text: "@9214 yep, I'll look into that. Thanks again. "
    sent: "2017-09-08T17:18:53.564Z"
    v: 1
    author: "563916f816b6c7089cb95b57"
) #(
    id: "59b2d02b66c1c7c4772c4dcd"
    text: {http://www.red-lang.org/2013/11/041-introducing-parse.html}
    sent: "2017-09-08T17:15:23.733Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b2d0144e50cfde271a9c4e"
    text: "all roads lead to `parse`"
    sent: "2017-09-08T17:15:00.823Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b2d002cfeed2eb65e79dab"
    text: "@tstrokes you mean data scraping?"
    sent: "2017-09-08T17:14:42.650Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b2cfdc614889d475d562b4"
    text: {Does Red have anything like Beautiful Soup or Nokogiri}
    sent: "2017-09-08T17:14:04.422Z"
    v: 1
    author: "563916f816b6c7089cb95b57"
) #(
    id: "59b2cf80cfeed2eb65e79bbb"
    text: "@9214 thanks this is great."
    sent: "2017-09-08T17:12:32.239Z"
    v: 1
    author: "563916f816b6c7089cb95b57"
) #(
    id: "59b2cf4cb59d55b823d2df47"
    text: {@tstrokes checkout @rebolek's [gitter client](https://github.com/rebolek/gritter)}
    sent: "2017-09-08T17:11:40.043Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b2cee8ee5c9a4c5f4911e5"
    text: {New to red, wondering where I can find resources on making REST api calls.}
    sent: "2017-09-08T17:10:00.585Z"
    v: 1
    author: "563916f816b6c7089cb95b57"
) #(
    id: "59b248af66c1c7c47729c2eb"
    text: "@planetsizecpu :sweat_smile:"
    sent: "2017-09-08T07:37:19.979Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b2479ab16f2646421ae3d1"
    text: "@toomasv  hard work gives good results, good job"
    sent: "2017-09-08T07:32:42.798Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "59b23e69162adb6d2e7d2681"
    text: {To catch several matrices, they have to be in parens: ^/```^/matrix [(m1: 3x1[1 2 3]) (m2: 1x4[1 2 3 4])]^/matrix [m3: m1 x m2]^/== [^/    1 2 3 4 ^/    2 4 6 8 ^/    3 6 9 12^/]^/```}
    sent: "2017-09-08T06:53:29.738Z"
    editedAt: "2017-09-08T06:54:05.852Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b22748614889d475d262e1"
    text: {Ah, nice. I'll have to look at it for real when I can. }
    sent: "2017-09-08T05:14:48.831Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b20ed0bc464729740b03e8"
    text: {@greggirwin Currently a matrix with meta info can be get with set-word:^/```^/>> matrix [m: transpose 2x3[1 2 3 4 5 6]]^/== [^/    1 4 ^/    2 5 ^/    3 6^/]^/>> probe m^/make object! [^/    rows: 3^/    cols: 2^/    data: [1 4 2 5 3 6]^/    get-col: func [col][extract at data col cols]^/    get-row: func [row][copy/part at data row - 1 * cols + 1 cols]^/    get-idx: func [row col][pick data row - 1 * cols + col]^/    to-float: func [][forall data [data/1: system/words/to-float data/1]]^/]^/```}
    sent: "2017-09-08T03:30:24.068Z"
    editedAt: "2017-09-08T03:33:39.409Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b1a883162adb6d2e7ac822"
    text: {@toomasv, I just meant that if you get back ^/```^/[^/    1 2 3 ^/    4 5 6^/]^/```^/you either need to use new-line markers, sub-blocks, or meta info to know how many rows and cols there are, for saving/loading or further processing.}
    sent: "2017-09-07T20:13:55.531Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b181a8162adb6d2e7a1023"
    text: {@greggirwin Thanks! I'm not yet sure how to go on with new-lines, but I liked the expressivity. Matrices are implemented as objects, so the meta info (cols, rows) is kept there, if you meant that kind of info.^/ @9214 :runner: tempo! tempo!^/ @dockimbel Thanks! I thought nested blocks are more cumbersome to manipulate. :blush:}
    sent: "2017-09-07T17:28:08.211Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b17e2866c1c7c477266f65"
    text: {I'll make a note for `format` as well. Could be tricky, especially in the context of messaging, where formatting isn't always honored through a transport chain.}
    sent: "2017-09-07T17:13:12.036Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b17ddd210ac2692005dd63"
    text: {@greggirwin I wonder how viable it would be to use significant new-lines to delimit rows. Worth investigating.}
    sent: "2017-09-07T17:11:57.420Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b17d789acddb24071276d2"
    text: {btw, `extract` is handy when it comes to table-like structures}
    sent: "2017-09-07T17:10:16.768Z"
    editedAt: "2017-09-07T17:10:29.043Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b17d3d4e50cfde2714ca43"
    text: {I love the use of `new-line` in this. Is your design plan that you would scan for new-line markers to determine the rows and cols in a matrix, or to include meta info in results?}
    sent: "2017-09-07T17:09:17.478Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b17d3c66c1c7c477266ba7"
    text: {@toomasv Nice work indeed. What about using nested blocks to define rows, so you don't have to specify the dimensions upfront?}
    sent: "2017-09-07T17:09:16.580Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b17cd6c101bc4e3a9df2b5"
    text: {@toomasv why you're such a quicklearner? :turtle: }
    sent: "2017-09-07T17:07:34.360Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b17ca5ee5c9a4c5f433181"
    text: {@toomasv, very nice! I'm enjoying your excitement about Red, and seeing you express so many things so quickly.}
    sent: "2017-09-07T17:06:45.480Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b17ca3bac826f0548eb6cb"
    text: {> there is mentioned that I must made special stdcall version.^/^/The docs says *"If you need the stdcall ABI..." *.}
    sent: "2017-09-07T17:06:43.751Z"
    editedAt: "2017-09-07T17:06:47.368Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b17c44210ac2692005d6c2"
    text: "@Oldes First version works fine here, no error. "
    sent: "2017-09-07T17:05:08.968Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b177d34e50cfde2714afff"
    text: "@rebolek :) Fun"
    sent: "2017-09-07T16:46:11.578Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
)#(
    id: "59b177214e50cfde2714ab9d"
    text: {Take it as an user feedback (from someone who use Red quite a lot)}
    sent: "2017-09-07T16:43:13.123Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b17701162adb6d2e79ddda"
    text: {First one gives me above error and second... I don't have red binary and there is mentioned that I must made special `stdcall` version.}
    sent: "2017-09-07T16:42:41.322Z"
    editedAt: "2017-09-07T16:43:59.358Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b176d3bac826f0548e99b0"
    text: {@dockimbel Reading this:^/> or from Rebol’s console and Red sources:^/`rc "build libRed"`^/Those command-lines will build the libRed version for C language (using the cdecl ABI). If you need the stdcall ABI (for Microsoft apps compatibility), you need to use:^/`red build libRed stdcall`^/^/was confusing for me, as I was not able to build libRed.dll}
    sent: "2017-09-07T16:41:55.283Z"
    editedAt: "2017-09-07T16:42:01.123Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b175fe162adb6d2e79d697"
    text: "@toomasv cool!"
    sent: "2017-09-07T16:38:22.908Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b175ef614889d475cf6635"
    text: {@Oldes The docs are saying the same thing, what is confusing?}
    sent: "2017-09-07T16:38:07.183Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b1758c614889d475cf63da"
    text: {@dockimbel so the docs are very confusing then -> https://doc.red-lang.org/en/libred.html#_building_libred}
    sent: "2017-09-07T16:36:28.736Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b175598f4427b462e1be36"
    text: {I would also suppose, that if someone wants to build libRed from sources, than already have sources and should not need to download Red binary}
    sent: "2017-09-07T16:35:37.902Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b1753b8f4427b462e1bdc6"
    text: {@Oldes `cdecl` is the default convention for libRed, so you don't have to add anything for that.}
    sent: "2017-09-07T16:35:07.816Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b1750bc101bc4e3a9dca27"
    text: {@dockimbel I know... it is just not clear how I'm suppose to make the `cdecl` version on Windows using compiling from sources and mentioned `rc` command from the documentation does not works.}
    sent: "2017-09-07T16:34:19.982Z"
    editedAt: "2017-09-07T16:34:36.655Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b174c4bc46472974084395"
    text: {Exercise in DSL-creation: [matrix](https://gist.github.com/toomasv/4fcecbb54ed253e2c897bf44316d2a70) ^/* Operations supported:^/   `['+ | '- | '* | '/ | '% | '** | '>> | '<< | '>>> | 'and | 'or | 'xor | 'div | 'x]`^/   and unary op `transpose`^/* `div` turns args to floats^/* `x` is standard matrix multiplication op^/* `*` is Hadamard multiplication op^/* `X` is Kronecker multiplication op^/* also ops with scalar args^/* evaluation from left to right as usual^/* parens are supported^/* data can be prepared outside of DSL block ^/* intermediate results can be caught with set-words^/* lots of bugs (probably)}
    sent: "2017-09-07T16:33:08.953Z"
    editedAt: "2017-09-07T16:33:54.114Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b17436c101bc4e3a9dc5a1"
    text: "where is the `stdcall` in this command?"
    sent: "2017-09-07T16:30:46.717Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b17415c101bc4e3a9dc535"
    text: {Ah.. looks like this was working: `rebol-view-278-3-1.exe -cs %red.r -r -dlib %libred\libred.red` It just was just compiling 180s because I have only 10% of battery and so the notebook is a little bit slower.}
    sent: "2017-09-07T16:30:13.662Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b1740f8f4427b462e1b843"
    text: {@Oldes From sources:^/```lisp^/do/args %red.r "-r %libRed/libRed.red"^/```}
    sent: "2017-09-07T16:30:07.675Z"
    editedAt: "2017-09-07T16:30:57.098Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b1735b66c1c7c477263acb"
    text: "@9214 I don't have `red` just sources."
    sent: "2017-09-07T16:27:07.755Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b1734a66c1c7c477263a9e"
    text: "or `red build libred stdcall`"
    sent: "2017-09-07T16:26:50.726Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b17337bc46472974083b9d"
    text: {On the web is mentioned: `rc "build libred"`, but with it I get error:^/```^/*** Driver Internal Error: Access Error : Cannot open /C/dev/GIT/rs/projects/red/latest/libred/^/*** Where: load-targets^/*** Near:  [targets: load-cache %system/config.r^/```}
    sent: "2017-09-07T16:26:31.593Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b1732f9acddb2407124410"
    text: "@Oldes `red build libred`?"
    sent: "2017-09-07T16:26:23.130Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b172df614889d475cf57d1"
    text: {Although I was able to do it some month ago.. I cannot figure it out now.}
    sent: "2017-09-07T16:25:03.093Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b172c34e50cfde27149507"
    text: "Does anybody know how to build libRed.dll?"
    sent: "2017-09-07T16:24:35.783Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b0ec088f4427b462df3500"
    text: {@fvanzeveren Red doesn't have tail-call optimizations yet}
    sent: "2017-09-07T06:49:44.455Z"
    editedAt: "2017-09-07T06:52:33.761Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b0ce5a66c1c7c477234454"
    text: {@rgchris indeed, I think you are right... it overrides system/words/delete}
    sent: "2017-09-07T04:43:06.294Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59b0ccb2ee5c9a4c5f40188b"
    text: {@moliad I try to create a function to delete nested and non-empty folders. I redefine the word `delete` in a recursive way, calling system/words/delete when reaching a "leaf" or an empty folder.}
    sent: "2017-09-07T04:36:02.639Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59b06c68162adb6d2e75687b"
    text: {ah yes, you've got ```delete``` calling ```delete```}
    sent: "2017-09-06T21:45:12.606Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59b06c12614889d475cae4fb"
    text: {What is the context of `'delete` where you set it? No chance it overrides `system/words/delete`?}
    sent: "2017-09-06T21:43:46.646Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b05c3dee5c9a4c5f3e53ca"
    text: {Hello, I am wondering what is wrong with the following code. It generates a stack overflow, and I am unable to understand why?^/```^/set 'delete func [^/^-^-file [file!]^/^-^-/deep^/^-^-/local dir-items^/^-] [^/^-^-if all [deep dir? file] [^/^-^-^-dir-items: read file^/^-^-^-forall dir-items [^/^-^-^-^-delete/deep to-file reduce [file first dir-items]^/^-^-^-]^/^-^-] ^/^-^-system/words/delete file^/^-]^/```^/Thank you for your help.}
    sent: "2017-09-06T20:36:13.277Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59b020b2b16f26464211466f"
    text: {@WiseGenius Please open a ticket for that Parse issue, so we can see how to improve it.}
    sent: "2017-09-06T16:22:10.655Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b02040b16f264642114436"
    text: {@nc-x ^/>  Wrapping OpenGL API is a simple task, creating a complete abstraction layer on top of it is a big design work.^/^/The simple part is done already https://github.com/red/code/tree/master/Library/OpenGL}
    sent: "2017-09-06T16:20:16.350Z"
    editedAt: "2017-09-06T16:20:41.456Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b018ba4e50cfde270eaa0e"
    text: {@dockimbel Okay. Thanks for the info. Eagerly waiting for the android release :smile:}
    sent: "2017-09-06T15:48:10.673Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59aff89e210ac26920ff361a"
    text: {IMO adding a /safe refinement is a bit extreme, just like the /case refinement.  I prefer having different operators which allow both in the same parse rule.}
    sent: "2017-09-06T13:31:10.794Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff7af66c1c7c4771f76d8"
    text: {in some event driven code, I have rules which run on events and have ```wait``` in them.  Some of the subrules only trigger when a button triggers a cancel, for example.}
    sent: "2017-09-06T13:27:11.188Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff731bc46472974017431"
    text: {I'd add new keywords for the safe mode... cause I admit it would be useful, especially when testing rules.}
    sent: "2017-09-06T13:25:05.947Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff718b16f2646421063b9"
    text: {R3 added new keywords to use the old behavior (can't remember them of the top of my head).}
    sent: "2017-09-06T13:24:40.697Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff6f69acddb24070b883d"
    text: {if you write ```forever [] ``` in code do you expect the interpreter to stop it... if you write bad code, it should behave badly ;-)}
    sent: "2017-09-06T13:24:06.915Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff6f066c1c7c4771f713f"
    text: {because I agree, sometimes you want it to loop forever}
    sent: "2017-09-06T13:24:00.157Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59aff6dc210ac26920ff2c16"
    text: {ok, let's say can we add refinement `/safe` to prevent infinitive loops?}
    sent: "2017-09-06T13:23:40.450Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59aff6c7ee5c9a4c5f3c4454"
    text: {it doesn't hang... its actually running the rule in a loop.}
    sent: "2017-09-06T13:23:19.903Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff6af614889d475c87d56"
    text: "@moliad depends how you define an error"
    sent: "2017-09-06T13:22:55.420Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59aff6aec101bc4e3a971ee5"
    text: "that's what you ask it to do."
    sent: "2017-09-06T13:22:54.967Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff6a5162adb6d2e732248"
    text: "or is this a halting problem?"
    sent: "2017-09-06T13:22:45.136Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59aff6989acddb24070b86c9"
    text: "its not an error"
    sent: "2017-09-06T13:22:32.731Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff68f210ac26920ff2a56"
    text: "can we throw errors instead of hanging?"
    sent: "2017-09-06T13:22:23.563Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59aff68f210ac26920ff2a54"
    text: {as Red is R2 compatible, it uses the R2 semantics... this being said, adding another iteration operator which behaves like R3 would be trivial.}
    sent: "2017-09-06T13:22:23.033Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff65d210ac26920ff2921"
    text: "R2 does not."
    sent: "2017-09-06T13:21:33.298Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff654bac826f054879ec7"
    text: {R3 assumes that people write bad rules and interrupts them.}
    sent: "2017-09-06T13:21:24.631Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff647b16f26464210604e"
    text: {the rule ```[some [opt "a"]]``` is a bad construct.  ```opt "a"``` is always true.  what you want is to use  ```any "a"```  its why we have different parse operators.   }
    sent: "2017-09-06T13:21:11.549Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59aff5adc101bc4e3a97193e"
    text: {there where changes in semantics in R3 with the way rules fail (or don't).  problem with the assumption in R3 is that you always want a rule to advance the cursor... in many of my use cases, the cursor does not advance, on purpose.}
    sent: "2017-09-06T13:18:37.693Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59afe5e9614889d475c81bfd"
    text: {In Red, his hangs:^/^/```^/parse "abc" [some [opt "a"]]^/```^/^/In Red, this doesn't hang:^/^/```^/parse "bc" [some [opt "a"]]^/```^/^/In Rebol 2, both hang.^/In Rebol 3, both don't hang.^/^/Which is the correct/desired behaviour?}
    sent: "2017-09-06T12:11:21.778Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "59af8665210ac26920fcf80f"
    text: {@greggirwin later I saw these tickets rolling. Today's build is working right}
    sent: "2017-09-06T05:23:49.425Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "59af74c5bac826f054852242"
    text: {@nc-x ^/> BTW @dockimbel, how much performance penalty does the java bridge have? Also, will support for OpenGL ES api be provided in that release?^/^/Less than expected, and it depends on how intensively is the bridge used for a given feature. So far, Draw is the part making the highest number of calls through the bridge, and our early benchmarks (drawing 100k lines) are showing just about 20% performance penalty compared to pure Java. Support for OpenGL should not come in the first release. Wrapping OpenGL API is a simple task, creating a complete abstraction layer on top of it is a big design work.}
    sent: "2017-09-06T04:08:37.516Z"
    editedAt: "2017-09-06T04:10:00.773Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59af72a9162adb6d2e70c166"
    text: "@nc-x Yes, you're right."
    sent: "2017-09-06T03:59:37.604Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
)#(
    id: "59aeb6b3bac826f05481a64d"
    text: { "the (messy) Android API/SDK"^/My friend moved from writing android apps to learning swift to write ios apps for the exact same reason.^/Hope that Red will bring some ease in writing mobile apps. ^/^/BTW @dockimbel, how much performance penalty does the java bridge have? Also, will support for OpenGL ES api be provided in that release?}
    sent: "2017-09-05T14:37:39.069Z"
    editedAt: "2017-09-05T14:37:57.902Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59aeb4dc8f4427b462d539cd"
    text: {@greggirwin  @planetsizecpu I think [runtime/inflate.reds](https://github.com/red/red/blob/master/runtime/inflate.reds) needs to be added to [builds/includes.r](https://github.com/red/red/blob/master/build/includes.r)  so that the encapper includes the relevant file with the encapped binary.}
    sent: "2017-09-05T14:29:48.455Z"
    editedAt: "2017-09-05T14:31:00.308Z"
    v: 4
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59aeb495162adb6d2e6d4efc"
    text: {@planetsizecpu, I believe that's being worked on, based on some tickets and related messages.}
    sent: "2017-09-05T14:28:37.648Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59aeb4719acddb240705a0e0"
    text: {@dockimbel, but then I can't pull it out of my pocket and use my own apps. :^^)}
    sent: "2017-09-05T14:28:01.529Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59ae41c3c101bc4e3a8efb4d"
    text: {@dockimbel  today's automatic build is failing:^/^/C:\Downloads>red-05sep17-0f19dc1^/Compiling Red GUI console...^/*** Loading Error: file access error: %inflate.reds^/*** in file: %/C/Downloads/call.reds^/*** at line: 125^/}
    sent: "2017-09-05T06:18:43.306Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "59ae1ead66c1c7c47716c3a4"
    text: "red 0.6.4/5 for android support is so exciting!"
    sent: "2017-09-05T03:49:01.882Z"
    v: 1
    author: "5551a03d15522ed4b3e041bd"
) #(
    id: "59ae1e55614889d475bfae9e"
    text: {I am working on add an experimental llvm backend support for red/system compiler version 0.1, }
    sent: "2017-09-05T03:47:33.627Z"
    v: 1
    author: "5551a03d15522ed4b3e041bd"
) #(
    id: "59ae0603162adb6d2e6a2910"
    text: {You can always use the Android emulators for testing, Red supports Android/x86 too, so it can be fast enough.}
    sent: "2017-09-05T02:03:47.148Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59adb098210ac26920f4e295"
    text: {It's all very exciting. I got a couple little Android devices, so I could play when the time comes. I suppose I'll have to get a nicer one at some point. }
    sent: "2017-09-04T19:59:20.952Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59adae96ee5c9a4c5f31dfaa"
    text: {"View and VID will also receive significant upgrades" - maybe a bit bold, but seems like Qt is going to receive some competition :-)}
    sent: "2017-09-04T19:50:46.861Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59ad985fbac826f0547cbb3d"
    text: "@pekr i agree with 100%"
    sent: "2017-09-04T18:15:59.946Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59ad94e39acddb240700a5ba"
    text: {"After diving into the Android developement ecosystem for a month, I must say, I can't believe people are using Java and the (messy) Android API/SDK to build user apps, so many pain points, so much time wasted fighting with the tools and API to get even simple things done. Red will be a much bigger game-changer there than I first thought." - That should be quoted somewhere :-)}
    sent: "2017-09-04T18:01:07.929Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59ad9431210ac26920f46679"
    text: "Thanks for the info... So wait and see.."
    sent: "2017-09-04T17:58:09.003Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad936ac101bc4e3a8c6222"
    text: {@fvanzeveren https://trello.com/c/0u92C6fN/62-090-concurrency-support}
    sent: "2017-09-04T17:54:50.449Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad93518f4427b462d047d5"
    text: "ah, no, I believe not yet"
    sent: "2017-09-04T17:54:25.562Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad932c9acddb2407009f12"
    text: {Asynchronous execution with response handle when available}
    sent: "2017-09-04T17:53:48.031Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad92eb66c1c7c4771494e2"
    text: {I think I showed some prototype waaaay back in Feb}
    sent: "2017-09-04T17:52:43.753Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad92d5ee5c9a4c5f31674f"
    text: "@fvanzeveren you mean delayed evaluation?"
    sent: "2017-09-04T17:52:21.064Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad92beba0f0f6e3817551b"
    text: {Hello, a few days (or maybe weeks...) ago, I asked whether something similar to Promise exist in Red... I don't think anyone answered... But meybe I missed the answers... :smile: Cheers}
    sent: "2017-09-04T17:51:58.437Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad8225210ac26920f4160c"
    text: {I watched it at day+1, couldn't help it. ;-) S7 is short, but very enjoyable. And the good part is that Red will be so much bigger and mature when S8 will arrive. ;-)}
    sent: "2017-09-04T16:41:09.971Z"
    editedAt: "2017-09-04T16:43:00.699Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad8205614889d475bd43e2"
    text: "and I didn't even started with 7th season!"
    sent: "2017-09-04T16:40:37.254Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad81e9162adb6d2e681b6a"
    text: "@9214 Not even Bran can see it coming. ;-)"
    sent: "2017-09-04T16:40:09.143Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad81d39acddb2407004e7c"
    text: "one could say that we're the tribe of `do`thraki"
    sent: "2017-09-04T16:39:47.025Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad8196ba0f0f6e38170782"
    text: {"A prince is riding. I've heard the thunder of his hooves. Swift as the wind he rides. His enemies will cower before him... and their ~~wives~~  users will weep tears of ~~blood~~ joy... the ~~Stallion~~ Red `0.6.4` Who Mounts the (mobile developement) World."}
    sent: "2017-09-04T16:38:46.168Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad8155614889d475bd40cd"
    text: "hear hear!"
    sent: "2017-09-04T16:37:41.658Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad813b162adb6d2e68169c"
    text: {After diving into the Android developement ecosystem for a month, I must say, I can't believe people are using Java and the (messy) Android API/SDK to build user apps, so many pain points, so much time wasted fighting with the tools and API to get even simple things done. Red will be a much bigger game-changer there than I first thought.}
    sent: "2017-09-04T16:37:15.577Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad807eee5c9a4c5f3113ea"
    text: {Expect many new features to permeate in our other GUI backends in the next months. View and VID will also receive significant upgrades.}
    sent: "2017-09-04T16:34:06.440Z"
    editedAt: "2017-09-04T16:38:16.632Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad800dbac826f0547c53cb"
    text: {The work on the Android backend has progressed very fast, we should be able to make it on-par with our other backends in a few weeks. Though, that won't be enough, we need to add many extra widgets and abstraction layers to cover all the important features offered by such platform.}
    sent: "2017-09-04T16:32:13.325Z"
    editedAt: "2017-09-04T16:32:29.818Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad7f649acddb2407004128"
    text: {@9214 Haha, thanks. :smile:  I was still monitoring a few conversation here in the last weeks, just no spare time to post.}
    sent: "2017-09-04T16:29:24.325Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad7f2cee5c9a4c5f310e72"
    text: {@dockimbel ah, by the way, welcome home, we missed you :smile_cat: }
    sent: "2017-09-04T16:28:28.673Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad7efb210ac26920f4050b"
    text: {@Oldes I should come back to that very soon, maybe tomorrow, if I can finish tab-panel implementation for Android.}
    sent: "2017-09-04T16:27:39.299Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad7ec8c101bc4e3a8c0483"
    text: {I'm pretty sure [these parts](https://github.com/red/red/pull/3001) are begging for a little refresh.}
    sent: "2017-09-04T16:26:48.109Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad7e73210ac26920f402fe"
    text: {Maybe, but not consciously built, just accumulated knowledge over time, and each bug is an opportunity to refresh that knowledge.}
    sent: "2017-09-04T16:25:23.598Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad7e1b66c1c7c4771438ec"
    text: "@dockimbel mind palace? :thought_balloon: "
    sent: "2017-09-04T16:23:55.064Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad7de3ba0f0f6e3816f212"
    text: {@9214 I have a copy of the codebase in my head. ;-) At least, the parts I wrote.}
    sent: "2017-09-04T16:22:59.598Z"
    editedAt: "2017-09-04T16:23:15.305Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad7de266c1c7c4771437e0"
    text: "@Oldes :D oh boy"
    sent: "2017-09-04T16:22:58.082Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad7dd3bc46472974f5fd84"
    text: "@9214 I used ALT+F7 in Total Commander."
    sent: "2017-09-04T16:22:43.978Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad7c40614889d475bd29f6"
    text: "https://github.com/red/red/pull/3016"
    sent: "2017-09-04T16:16:00.350Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad7bb8210ac26920f3f516"
    text: {how do you guys manage to navigate the codebase and find bugs so quickly?}
    sent: "2017-09-04T16:13:44.546Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad7baa66c1c7c477142dcd"
    text: {Actually it is also in other file... I'm fixing it}
    sent: "2017-09-04T16:13:30.936Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad7a22c101bc4e3a8beee8"
    text: "@Oldes Correct. You can make the fix."
    sent: "2017-09-04T16:06:58.410Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59ad7a17bac826f0547c355e"
    text: {I can make a fix, if someone else don't do it. But have limited time now.}
    sent: "2017-09-04T16:06:47.946Z"
    editedAt: "2017-09-04T16:07:00.619Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad7a01210ac26920f3eba6"
    text: {@Oldes could you please reference this in bug report too?}
    sent: "2017-09-04T16:06:25.002Z"
    editedAt: "2017-09-04T16:06:39.604Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad79d066c1c7c4771425de"
    text: {It is set here https://github.com/red/red/blob/master/environment/console/engine.red#L177 using `set/any` which `function` does not detect as local.}
    sent: "2017-09-04T16:05:36.486Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad7858ee5c9a4c5f30ee31"
    text: {Yes... weird.... not possible to set `err` to any value... not error related.. and pretty old bug.. I can reproduce it in old console versions too.}
    sent: "2017-09-04T15:59:20.913Z"
    editedAt: "2017-09-04T16:03:20.548Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad7837c101bc4e3a8be5f3"
    text: {@Oldes :point_right: https://gitter.im/red/red?at=59ad72b39acddb24070001ba}
    sent: "2017-09-04T15:58:47.779Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad781466c1c7c477141c24"
    text: {```^/>> error? abc: try [1 / 0]^/== true^/>> abc^/*** Math Error: attempt to divide by zero^/*** Where: /^/*** Stack:  ^/^/>> error? err: try [1 / 0]^/== true^/>> err^/== none^/```}
    sent: "2017-09-04T15:58:12.162Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad77f5162adb6d2e67e807"
    text: "hm... it is notworking just for `err` variable."
    sent: "2017-09-04T15:57:41.941Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad77a066c1c7c477141aba"
    text: {I mean the error variable with more than one letter not working.}
    sent: "2017-09-04T15:56:16.969Z"
    editedAt: "2017-09-04T15:56:31.990Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad77959acddb2407001a92"
    text: {again, should I report it or is it already on the list?}
    sent: "2017-09-04T15:56:05.475Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "59ad77888f4427b462cfcde6"
    text: {@Oldes ah, you mean that example with reducing is a bug?}
    sent: "2017-09-04T15:55:52.845Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad775bc101bc4e3a8be2d1"
    text: {@Oldes THanks, indedd, I can append the error into a block without crashing the script. Excellent.}
    sent: "2017-09-04T15:55:07.738Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad76cd614889d475bd1177"
    text: "@Oldes :bug:"
    sent: "2017-09-04T15:52:45.552Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad76a9bac826f0547c25df"
    text: {@9214 it is a bug, @fvanzeveren the error is by default disarmed (when it works:-).}
    sent: "2017-09-04T15:52:09.340Z"
    editedAt: "2017-09-04T15:53:21.326Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59ad7518b16f26464204ce6a"
    text: {@fvanzeveren something like `reduce [try [1 / 0]]` maybe? Can't check how `disarm` works in R2, it refuses to work on my linux machine :confused: }
    sent: "2017-09-04T15:45:28.544Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad742e8f4427b462cfbfc0"
    text: {Is there some way to `disarm`  an error like in Rebol?}
    sent: "2017-09-04T15:41:34.987Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad731c162adb6d2e67d417"
    text: "There is no `err` in Red :)"
    sent: "2017-09-04T15:37:00.874Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad72fb66c1c7c47714034f"
    text: {Yes, indeed, I was trying the same :) This is more than weird... Do not call an error err!}
    sent: "2017-09-04T15:36:27.067Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad72d0c101bc4e3a8bce7d"
    text: "except for `err`"
    sent: "2017-09-04T15:35:44.137Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad72cb210ac26920f3cac2"
    text: "wait, it works with 3 letter words too"
    sent: "2017-09-04T15:35:39.513Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad72b39acddb24070001ba"
    text: "now that's really weird"
    sent: "2017-09-04T15:35:15.720Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad72a5210ac26920f3ca2a"
    text: "and 4 too ..."
    sent: "2017-09-04T15:35:01.590Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad728ac101bc4e3a8bcd68"
    text: "@fvanzeveren 2-letter words work too :)"
    sent: "2017-09-04T15:34:34.013Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad7276ee5c9a4c5f30d426"
    text: {@9214  Yes thank you. At least I have a workaround in the meantime. Thanks.}
    sent: "2017-09-04T15:34:14.544Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad725a162adb6d2e67d051"
    text: "should I file an issue for you?"
    sent: "2017-09-04T15:33:46.522Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad7223bac826f0547c0fc6"
    text: {@fvanzeveren interestingly, it works with one (or even two) letter words:^/```text^/>> y: try [1 / 0]^/*** Math Error: attempt to divide by zero^/*** Where: /^/*** Stack:  ^/^/>> ? y^/Y is an error! value: make error! [^/    code: 400^/    type: 'math^/    id: 'zero-divide^/    arg1: none^/    arg2: none^/    arg3: none^/    near: none^/    where: '/^/    stack: -160925784^/]^/```}
    sent: "2017-09-04T15:32:51.915Z"
    editedAt: "2017-09-04T15:34:20.436Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad72039acddb2407ffff0c"
    text: "And an annoying one :worried: "
    sent: "2017-09-04T15:32:19.881Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad71df162adb6d2e67cdae"
    text: "looks like a bug indeed"
    sent: "2017-09-04T15:31:43.836Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad71ac210ac26920f3c404"
    text: {`try` returns an `error!` but it isn't bound to a word^/```text^/>> err: probe try [1 / 0]^/make error! [^/    code: 400^/    type: 'math^/    id: 'zero-divide^/    arg1: none^/    arg2: none^/    arg3: none^/    near: none^/    where: '/^/    stack: -160925772^/]^/*** Math Error: attempt to divide by zero^/*** Where: /^/*** Stack: probe  ^/^/>> probe err^/none^/== none^/^/```}
    sent: "2017-09-04T15:30:52.245Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad71768f4427b462cfb2c3"
    text: "I think this is a bug that should be reported."
    sent: "2017-09-04T15:29:58.656Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59ad6f47b16f26464204af6c"
    text: {Hello, I have an issue with exception management.^/The following does not look good:^/```^/>> error? err: try [divide 1 0] [print "hello"]^/== [print "hello"]^/>> probe err^/none^/```^/At least it is not consistent with the explanation and example found here: http://www.red-lang.org/2015/03/051-new-console-and-errors-support.html^/^/Why does version 063 not return an error object?^/^/Thank you ^/}
    sent: "2017-09-04T15:20:39.286Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59ad1410b16f26464202f0ab"
    text: "@planetsizecpu :grinning:"
    sent: "2017-09-04T08:51:28.483Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ad0eb866c1c7c4771214ca"
    text: {@toomasv these names/adresses sounds familiar to me :smile:  good job, (and a lot of job to do!)}
    sent: "2017-09-04T08:28:40.632Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "59acf3a6162adb6d2e657011"
    text: {@dockimbel There are no personal pages, only a link to the github (https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/interpreters/red/default.nix) and package search engines https://nixos.org/nixos/packages.html (not updated yet)}
    sent: "2017-09-04T06:33:10.626Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "59acf0f88f4427b462cd58bd"
    text: {@uralbash Nice! Is there a Red package web page on Nix web site I could link to?}
    sent: "2017-09-04T06:21:44.068Z"
    editedAt: "2017-09-04T06:21:52.664Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59acef2b210ac26920f15af2"
    text: {Hi, I've build Nix (https://nixos.org/nix/) package of red-lang.  Now it can be installed on any Linux with command `nix-env -i red-v0.6.3`}
    sent: "2017-09-04T06:14:03.566Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "59ac48089acddb2407fb519c"
    text: "this is clone police :cop: :cop:, arrest this man"
    sent: "2017-09-03T18:20:56.596Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ac46f5b16f264642000a8f"
    text: "@greggirwin :)"
    sent: "2017-09-03T18:16:21.964Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59ac45fac101bc4e3a870f0c"
    text: "@greggirwin Whooaa!"
    sent: "2017-09-03T18:12:10.619Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ac45da210ac26920ef23e1"
    text: {@toomasv you forgot:^/```^/>> same? same 'same^/== true^/```^/:^^)}
    sent: "2017-09-03T18:11:38.705Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59ac3b09c101bc4e3a86e2f3"
    text: ":joy_cat:"
    sent: "2017-09-03T17:25:29.819Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ac3adaee5c9a4c5f2bfd5f"
    text: {[these things, they take time](https://www.youtube.com/watch?v=0d6yBHDvKUw)}
    sent: "2017-09-03T17:24:42.566Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ac3a959acddb2407fb1cfe"
    text: {Nope. There are so many unsolved problems, e.g. cyclic data, persistency, indexes, view ... :crying_cat_face: I have no idea how long it will take to figure these things out.}
    sent: "2017-09-03T17:23:33.504Z"
    editedAt: "2017-09-03T17:24:28.610Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ac3a0dba0f0f6e3811d986"
    text: "any ETA on plugging it into production DB?"
    sent: "2017-09-03T17:21:17.153Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ac39bdee5c9a4c5f2bf9bb"
    text: ":ant: :)"
    sent: "2017-09-03T17:19:57.024Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ac394bc101bc4e3a86daec"
    text: {that's very clever, you never stop to impress me @toomasv :O}
    sent: "2017-09-03T17:18:03.292Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ac38a5b16f264642ffd3c1"
    text: {I used it to treat same values in consecutive additions in `query`:^/```^/>> query [add person ["Javier" "Maduro" 14-6-1963 [[#(city: "Madrid" country: [#(name: "Spain")])] "Puerta del Sol" "12" none]]]^/== true^/>> query [add person ["Jacinta" same 10-12-1978 same]]^/== true^/>> query [print tabular properties of persons]^/^/id | first-name | family-name |   birthdate | address                          ^/-- | ---------- | ----------- | ----------- | -------------------------------- ^/...^/ 6 | Javier     | Maduro      | 14-Jun-1963 | Madrid, Puerta del Sol 12        ^/ 7 | Jacinta    | Maduro      | 10-Dec-1978 | Madrid, Puerta del Sol 12        ^/```}
    sent: "2017-09-03T17:15:16.989Z"
    editedAt: "2017-09-03T17:16:49.882Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ac27948f4427b462ca889c"
    text: ":sunglasses:"
    sent: "2017-09-03T16:02:28.055Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ac2769b16f264642ff9232"
    text: "@toomasv lol, good job"
    sent: "2017-09-03T16:01:45.037Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ac270abc46472974f08a6b"
    text: {Interesting (and useful) value:^/```^/>> same: 'same^/== same^/>> same^/== same^/>> get same^/== same^/>> get get same^/== same^/>> get get get same^/== same^/>> reduce same^/== same^/>> 'same = get same^/== true^/>> do same^/== same^/>> same = 'same^/== true^/>> equal? same 'same^/== true^/```}
    sent: "2017-09-03T16:00:10.258Z"
    editedAt: "2017-09-03T16:04:58.957Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59abb7f3c101bc4e3a851961"
    text: {@fvanzeveren pehaps `read/info` could help, but I have no idea about the spec}
    sent: "2017-09-03T08:06:11.803Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59abb66cee5c9a4c5f2a2fdb"
    text: {Hello, how can I reach in red the same result as `read/custom` in Rebol to call a cgi script on a web server from a Red client? Thank you.}
    sent: "2017-09-03T07:59:40.650Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59abb255ba0f0f6e380ff92a"
    text: "@toomasv Thanks"
    sent: "2017-09-03T07:42:13.073Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59ab97cbba0f0f6e380fabf9"
    text: {Because in this way you cannot add records if they are prepared with field-declaration parens.}
    sent: "2017-09-03T05:48:59.614Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ab901fee5c9a4c5f29bfe4"
    text: {@greggirwin Thanks!^/ @rebolek Currently it can be done with `compose/deep`:^/```^/recs: [#(first-name: "Igor" family-name: "Gabardyuk") ^/       #(first-name: "Aleksis" family-name: "Tuorila" ^/         address: [["Helsinki" ["Finland" none] none] "Aleksanterinkatu" "24-2" none])]^/query compose/deep [add persons [(recs)]]^/>> query [print tabular properties of person]^/id | first-name | family-name |   birthdate | address                          ^/-- | ---------- | ----------- | ----------- | -------------------------------- ^/ 1 | Timmu      | Tamm        | 24-Oct-1960 | Tallinn, Tulbi 7-3a              ^/ 2 | Oscar      | Brewer      | 24-Jun-1963 | London, Trafalgar Sq 22          ^/ 3 | Ivan       | Bezrodny    | 27-Jan-2004 | St. Petersburg, Sadovaya 18      ^/... ^/13 | Igor       | Gabardyuk   |        none | none, none none                  ^/14 | Aleksis    | Tuorila     |        none | Helsinki, Aleksanterinkatu 24-2^/```^/I plan to eliminate the need for `compose` though.}
    sent: "2017-09-03T05:16:15.120Z"
    editedAt: "2017-09-03T05:19:58.633Z"
    v: 6
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ab37f966c1c7c4770be3a4"
    text: { @toomasv Pretty cool! Is there some easy way how to convert block of maps (or objects) into query's table?}
    sent: "2017-09-02T23:00:09.240Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59ab359cc101bc4e3a83aa41"
    text: {Man, I need to make time to look more into `query`. Thanks @toomasv .}
    sent: "2017-09-02T22:50:04.514Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59aad3a3b16f264642fb3386"
    text: {@9214 :notes:^/Ah, of course, existing data in other tables can be connected by table defaults, e.g. after adding the above address, new person with same address may be added by:^/```^/query [add person ["Jacinta" "Maduro" 23-12-68 "Madrid, Puerta del Sol 12"]]^/```}
    sent: "2017-09-02T15:52:03.610Z"
    editedAt: "2017-09-02T15:54:28.740Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59aacc08ee5c9a4c5f27236a"
    text: "@toomasv :clap: "
    sent: "2017-09-02T15:19:36.417Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59aac54e210ac26920ea3552"
    text: {Added dealing with `none`values, and improved data adding in several formats to [query](https://github.com/toomasv/query):^/```^/query [add person family-name first-name ["Eller" "Heino" "Brown" "David" "Urantu" "Miguel"]]^/query [add person [#(family-name: "Escriva" first-name: "Javier") #(first-name: "Marco" address: [[(city) "Madrid"] "Puerta del Sol" "22" none] family-name:"Polo")]]^/; Following three ways have identical results:^/a) positionally:^/query [add person ["Javier" "Maduro" 14-6-1963 [["Madrid" ["Spain" none] none] "Puerta del Sol" "12" none]]]^/;OR by declared field names in parens (unnamed fields are set to `none` -- no default field values yet):^/query [add person ["Javier" "Maduro" 14-6-1963 [[(country city) [(name) "Spain"] "Madrid"] "Puerta del Sol" "12" none]]]^/;OR by individual field names in map:^/query [add person ["Javier" "Maduro" 14-6-1963 [[#(city: "Madrid" country: [#(name: "Spain")])] "Puerta del Sol" "12" none]]]^/```}
    sent: "2017-09-02T14:50:54.348Z"
    editedAt: "2017-09-02T14:51:33.926Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
)#(
    id: "59aa3b4cbc46472974e9e86c"
    text: "@JeannotCoginov Hi, nice to see you here."
    sent: "2017-09-02T05:02:04.458Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a8c011b16f264642f2f4c8"
    text: "...and I support that 😁"
    sent: "2017-09-01T02:04:01.665Z"
    v: 1
    author: "5907aeddd73408ce4f5c4132"
) #(
    id: "59a81f56b16f264642f007b6"
    text: {I might be a good test user for that when you're more complete in that dept.}
    sent: "2017-08-31T14:38:14.438Z"
    editedAt: "2017-08-31T14:38:39.231Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59a81efbc101bc4e3a773aab"
    text: {cool, it definitely is in the plans, since I will be porting all of my codebase.  For sure, I need the async i/o since I use R2 for the server part of stone.  }
    sent: "2017-08-31T14:36:43.606Z"
    editedAt: "2017-08-31T14:37:59.383Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59a7bc08614889d475a61185"
    text: {@moliad Do I smell something like Red/Stone integration? ;-)}
    sent: "2017-08-31T07:34:32.619Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a7bb5d210ac26920dd51c9"
    text: {Thanks, libRT and libRed are a big help indeed. For the GC, every datatype will be able to register a callback finalizer to do some custom clean-up. We need it for `image!` at least.}
    sent: "2017-08-31T07:31:41.251Z"
    editedAt: "2017-08-31T07:33:40.738Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a7b32d210ac26920dd3093"
    text: {BTW, great work on the libRT.  probably the biggest feature yet  :-)}
    sent: "2017-08-31T06:56:45.092Z"
    editedAt: "2017-08-31T06:57:00.610Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59a7b2b0614889d475a5e6fc"
    text: {( for now I can just use explicit cleanup calls at key points in the application lifecycle )}
    sent: "2017-08-31T06:54:40.175Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59a7b22bbac826f054653a9b"
    text: {thx for the quick response... so when the GC is complete, there will be an additional (usually null) action that allows us to call code when a value is about to be free'd?  this would allow me to cleanup external lookup tables and free external resources, stuff like that.}
    sent: "2017-08-31T06:52:27.441Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59a7b18bbc46472974de85cd"
    text: {I'm currently going through the whole beast, slowly.  I'm starting with adding a new simple datatype as my way of forcing me to address/learn stuff I might not have to if I was just toying around.}
    sent: "2017-08-31T06:49:47.545Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59a7b112210ac26920dd2937"
    text: {Values on the Red stack are marked as alive by the GC. Only manual freeing in R/S code can pop/destroy values on stack.}
    sent: "2017-08-31T06:47:46.329Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a7b0b09acddb2407e90a35"
    text: {it would be especially useful for data allocated on the evaluation stack (if that is possible... I haven't gotten that far yet).}
    sent: "2017-08-31T06:46:08.400Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59a7b05bc101bc4e3a752a50"
    text: {Then, no, we don't have that yet. But until the GC is plugged in, that shouldn't make a difference, as values are not destroyed for now.}
    sent: "2017-08-31T06:44:43.712Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a7b019b16f264642edee5e"
    text: {but I don't want to use objects, this is for a custom datatype.}
    sent: "2017-08-31T06:43:37.852Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59a7aff98f4427b462b902f3"
    text: {@moliad Not yet. Should come once we complete the work on the object events and merge the GC branch.}
    sent: "2017-08-31T06:43:05.021Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a7afa3ee5c9a4c5f1a031e"
    text: {is there a way to call some code when a value is destroyed/collected ? I can't see any datatype actions which equate to this type of event?}
    sent: "2017-08-31T06:41:39.988Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "59a7acb2614889d475a5ccca"
    text: {@kpeters58 From the tests I made with it, the only thing preventing it to work on Red yet, is the heavy usage of closures Gabriele is making in the code there (Rebol2 functions are closures by default). So, if someone wants to port it to Red, first add a proper closure implementation, and replace most of the function definition with a closure.}
    sent: "2017-08-31T06:29:06.081Z"
    editedAt: "2017-08-31T06:29:28.070Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a79ae1b16f264642ed994d"
    text: "Not that I know of."
    sent: "2017-08-31T05:13:05.815Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a76e08bc46472974dd8f74"
    text: "Has Gabriele's PDF-Maker ever been ported to Red?"
    sent: "2017-08-31T02:01:44.623Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a6f618ba0f0f6e38fccae3"
    text: "puny humans :alien:"
    sent: "2017-08-30T17:30:00.540Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6f5ec8f4427b462b615b5"
    text: {Once proven it can be done, others will try to follow.}
    sent: "2017-08-30T17:29:16.283Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a6f5b7ba0f0f6e38fcc894"
    text: "and the only one ;)"
    sent: "2017-08-30T17:28:23.110Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6f57bba0f0f6e38fcc710"
    text: "First in the Full Stack Space Race!"
    sent: "2017-08-30T17:27:23.580Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a647a4ee5c9a4c5f13b58f"
    text: "@honix Perfect! Love the sputnik. ;-) :+1:"
    sent: "2017-08-30T05:05:40.646Z"
    editedAt: "2017-08-30T05:08:48.370Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a631e6ba0f0f6e38f93a02"
    text: ":o it's portable"
    sent: "2017-08-30T03:32:54.823Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6197e162adb6d2e4a4e84"
    text: {There is Homebrew cask for the announced release and another for the daily builds.}
    sent: "2017-08-30T01:48:46.228Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a61924578b44a046013841"
    text: {You don't need to install it. Try to run it from the Terminal app.}
    sent: "2017-08-30T01:47:16.093Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a61699578b44a046013002"
    text: "i dont have any idea, how to install it , ?"
    sent: "2017-08-30T01:36:25.067Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6150a76a757f808f92b48"
    text: "is there any installation via brew?"
    sent: "2017-08-30T01:29:46.162Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a614aa210ac26920d61bf9"
    text: {`“red-063” can’t be opened because it is from an unidentified developer.` on osx}
    sent: "2017-08-30T01:28:10.545Z"
    editedAt: "2017-08-30T01:28:20.119Z"
    v: 2
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a614878f4427b462b204db"
    text: "Hi"
    sent: "2017-08-30T01:27:35.421Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a5d5b6578b44a046002645"
    text: ":^^)"
    sent: "2017-08-29T20:59:34.282Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a5c7cb210ac26920d4cdd9"
    text: "@9214 oh, maybe it IS hydrogen atom"
    status: true
    sent: "2017-08-29T20:00:11.286Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a5c4d4c101bc4e3a6ccdfc"
    text: {@honix although maybe it should be a tower of hanoi and hydrogen atom? ;) }
    sent: "2017-08-29T19:47:32.529Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a5c4a466c1c7c477f4a5e5"
    text: "@9214 For Truth, for Red!"
    sent: "2017-08-29T19:46:44.506Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59a5c483614889d4759d7e67"
    text: "@honix woohoo! :clap: "
    sent: "2017-08-29T19:46:11.539Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a5c45dc101bc4e3a6ccbc6"
    text: {[![red-poster.png](https://files.gitter.im/red/red/URPI/thumb/red-poster.png)](https://files.gitter.im/red/red/URPI/red-poster.png)}
    sent: "2017-08-29T19:45:33.766Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59a5b369c101bc4e3a6c7b29"
    text: {:scream_cat: @kpeters58^/Yes, `probe`, agreed.^/Well, `random` without `copy` in this code works in Rebol, but not in Red. This is what you get in Red without `copy`:^/```^/["user1" [96172 "ifcgdelbjhnmak" 19:53:30.730301] "user2" [69301 "ifcgdelbjhnmak" 11:59:20.582853] "user3" [48333 "ifcgdelbjhnmak" 20:53:15.894442]^/```^/(that is, with `rejoin ["user" n]`)}
    sent: "2017-08-29T18:33:13.702Z"
    editedAt: "2017-08-29T18:36:48.003Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a5a0f48f4427b462b004dc"
    text: {@toomasv   The generating takes 'no' time as well on my machine - the probe is the issue. BTW, the code I used was straight from the master himself:  http://www.rebol.com/article/0020.html  - all I did was replace the 'join' with 'form' as it seems to be absent from Red}
    sent: "2017-08-29T17:14:28.508Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a597599acddb2407dfe5f3"
    text: "that's smart!"
    sent: "2017-08-29T16:33:29.129Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a59740614889d4759ca3cd"
    text: {As an added note, the reason `random` returns the same results when given the same `/seed` is because otherwise you couldn't reproduce results for testing and verification. }
    sent: "2017-08-29T16:33:04.386Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a58f80210ac26920d3c42d"
    text: {@alqnop feel free to ask any questions in [`red/help`](https://gitter.im/red/help) or [`red/welcome`](https://gitter.im/red/welcome) rooms :book: }
    sent: "2017-08-29T16:00:00.075Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a58f4376a757f808f6d314"
    text: "Thanks, I need to read more"
    sent: "2017-08-29T15:58:59.229Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a58e92c101bc4e3a6bc883"
    text: {@alqnop ^/```text^/>> vars: collect [repeat i 6 [keep to word! rejoin ["var" i]]]^/== [var1 var2 var3 var4 var5 var6]^/>> rand: collect [repeat i 6 [keep i]]^/== [1 2 3 4 5 6]^/>> set vars random rand^/== [5 1 4 3 2 6]^/>> set vars random rand^/== [6 5 2 4 1 3]^/>> set vars random rand^/== [3 2 6 4 5 1]^/```}
    sent: "2017-08-29T15:56:02.222Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a58d9bc101bc4e3a6bc375"
    text: {Trying to have the variables (generated random numbers) returned into (ideally) an info field}
    sent: "2017-08-29T15:51:55.826Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a58ceb66c1c7c477f39d4b"
    text: {`random 6` would return an integer between 1 and 6 (1 and 6 included)}
    sent: "2017-08-29T15:48:59.629Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a57ef9bc46472974d4cfce"
    text: {That's a nice way of doing it, thanks.  I'll implement both and settle on one by the end of the project}
    sent: "2017-08-29T14:49:29.754Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a57e56ba0f0f6e38f61346"
    text: {@alqnop ?^/```text^/>> random/seed now/time^/>> loop 15 [probe random/only [1 2 3 4 5 6]]^/3^/6^/2^/...^/4^/3^/```}
    sent: "2017-08-29T14:46:46.158Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a57e0376a757f808f672bb"
    text: {My understanding is that I want the returned value to be [1,2,3,4,5,6], weighted equally... so I give the random/seed 123456}
    sent: "2017-08-29T14:45:23.406Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a57ddd578b44a046fe66bd"
    text: {It's working as intended, however I would change one working implementation for another per @maximvl 's suggestion if he may guide me on the path to initializing the seed with different values.}
    sent: "2017-08-29T14:44:45.778Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
)#(
    id: "59a57d83614889d4759c1c3f"
    text: {ah, wait, issue was about `now/precise` I believe :flushed: }
    sent: "2017-08-29T14:43:15.607Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a57d688f4427b462af50b4"
    text: "@alqnop you're welcome"
    sent: "2017-08-29T14:42:48.618Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a57d59162adb6d2e4777e6"
    text: "@9214 That was it, thanks so much"
    sent: "2017-08-29T14:42:33.547Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a57d46614889d4759c1adc"
    text: {well, initializing the seed with same value will produce you the same results}
    sent: "2017-08-29T14:42:14.310Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a57d059acddb2407df53a4"
    text: {I asked this question a year ago and have looked at some of the same resources before arriving here.}
    sent: "2017-08-29T14:41:09.539Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a57d04bc46472974d4c623"
    text: {@alqnop try to use `random/seed now/time`, I think this is a known issue.}
    sent: "2017-08-29T14:41:08.084Z"
    editedAt: "2017-08-29T14:41:14.591Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a57cf2162adb6d2e4774ff"
    text: {I explored red a while ago and had the same frustration, how exactly does one implement random numbers in scripts (I'm sure there are different ways)}
    sent: "2017-08-29T14:40:50.673Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a57cc0ba0f0f6e38f60b1e"
    text: {My variables v2, v3, v4 and i1 are the same numbers every time I run the program.}
    sent: "2017-08-29T14:40:00.031Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a57ca476a757f808f66bde"
    text: "Having some random/seed 123456 issues"
    sent: "2017-08-29T14:39:32.576Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a57c9e578b44a046fe61bb"
    text: "@alqnop welcome!"
    sent: "2017-08-29T14:39:26.124Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a57c8d162adb6d2e4773a3"
    text: "Good morning, all"
    sent: "2017-08-29T14:39:09.181Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a50837bc46472974d29b73"
    text: "@qtxie ^^---"
    sent: "2017-08-29T06:22:47.420Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a5081676a757f808f43fbb"
    text: {Basically the same as @toomasv here. It's the `probe` that takes the time, printing ~500K to the console. The new console should show progress, rather than not showing anything while it's working, as happens now.}
    sent: "2017-08-29T06:22:14.000Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a4ecedbc46472974d234c5"
    text: {@kpeters58 On my W10 (i7, 2.7GHz, 16GB) it took no time :ghost::^/```^/>> time-it [repeat n 10000 [append db new-record n]]^/== 0:00:00.031^/>> db^/== ["user" 1 [38912 "dnmgjkhlefabci" 7:09:32.022323] "user" 2 [70017 "mabngikdfelhjc" 19:44:41.700662] "user" 3 [9717 "ndlajfbmckiheg" 23:47:13.4...^/```^/BTW, you should use `random copy "abcdefghijklmn"` to get random permutations of the string, otherwise every string in your block is changed on each repeat, ie they all are actually pointers to the same string without `copy`.  }
    sent: "2017-08-29T04:26:21.250Z"
    editedAt: "2017-08-29T04:33:15.837Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a4e93eee5c9a4c5f0da14b"
    text: {I stand corrected - it just returned (after 20 minutes on a box with an i5 and 8GB of RAM)....}
    sent: "2017-08-29T04:10:38.741Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a4e89b162adb6d2e44dcf3"
    text: {```^/db: make block! 10000^/new-record: func [n] [^/    reduce [^/        form "user" n reduce [^/            random 100000 random "abcdefghijklmn" random 24:00^/        ]^/    ]^/]^/repeat n 10000 [append db new-record n]^/probe db^/```}
    sent: "2017-08-29T04:07:55.897Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a4e899162adb6d2e44dce0"
    text: {The following code sends any of the current consoles into nirwana on my Win 10 box - can someone verify this before I file a bug?}
    sent: "2017-08-29T04:07:53.903Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a491b376a757f808f281cc"
    text: "Nice @toomasv !"
    sent: "2017-08-28T21:57:07.535Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a480a1c101bc4e3a6737fa"
    text: {Added tabular output to [query](https://github.com/toomasv/query):^/```^/query [print tabular properties [first-name average age age-group: unique (rejoin ["" a: age / 10 * 10 "-" a + 9])] of persons collected by [(age / 10)]]^/^/first-name      | average age | age-group ^/--------------- | ----------- | --------- ^/Edward Ivan     |        15.5 | 10-19     ^/Xia Oscar Timmu |        55.0 | 50-59     ^/^/query [print tabular properties [first-name age] of persons]^/^/first-name | age ^/---------- | --- ^/Timmu      |  56 ^/Oscar      |  54 ^/Ivan       |  13 ^/Xia        |  55 ^/Edward     |  18 ^/```}
    sent: "2017-08-28T20:44:17.471Z"
    editedAt: "2017-08-28T20:46:14.072Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a467a5614889d47597598b"
    text: {If I change my script to: (removed content-type header)^/```^/Red/System []^/print ["OK" lf lf]^/```^/I got `malformed header from script 'test.exe': Bad header: OK` in the error log. So I think red CGI script somehow doesn't produce the correct output (or no output at all) otherwise I would see a different error than `premature end of script headers`.}
    sent: "2017-08-28T18:57:41.596Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a464ae8f4427b462aa72f8"
    text: {The output of above script (when redirected to a file) is:^/```^/43 6F 6E 74 65 6E 74 2D  74 79 70 65 3A 20 74 65^/78 74 2F 68 74 6D 6C 0D  0A 0D 0A 4F 4B 0D 0A ^/```^/`lf` becomes `0x0D0A`}
    sent: "2017-08-28T18:45:02.846Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a460479acddb2407da71e3"
    text: {```^/Red/System []^/print ["Content-type: text/html" lf lf]^/print ["OK" lf]^/```^/I compiled this script and it worked as CGI. ^/}
    sent: "2017-08-28T18:26:15.558Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a45f8c578b44a046f97937"
    text: {After `Accept-Language` there should be response but the is only (2 bytes) `\r\n` and then cgi-error.}
    sent: "2017-08-28T18:23:08.833Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a45f50c101bc4e3a668b82"
    text: {There is only one blank line after `%response`, here is the dumpio:^/```^/...^/[Mon Aug 28 21:16:44.678315 2017] [dumpio:trace7] [pid 1216:tid 1252] mod_dumpio.c(100): [client ::1:49921] mod_dumpio:  dumpio_in (data-HEAP): Accept-Language: tr-TR,tr;q=0.8,en-US;q=0.6,en;q=0.4\r\n^/[Mon Aug 28 21:16:44.678315 2017] [dumpio:trace7] [pid 1216:tid 1252] mod_dumpio.c(135): [client ::1:49921] mod_dumpio: dumpio_in [getline-blocking] 0 readbytes^/[Mon Aug 28 21:16:44.678315 2017] [dumpio:trace7] [pid 1216:tid 1252] mod_dumpio.c(58): [client ::1:49921] mod_dumpio:  dumpio_in (data-HEAP): 2 bytes^/[Mon Aug 28 21:16:44.678315 2017] [dumpio:trace7] [pid 1216:tid 1252] mod_dumpio.c(100): [client ::1:49921] mod_dumpio:  dumpio_in (data-HEAP): \r\n^/[Mon Aug 28 21:16:44.729608 2017] [cgi:error] [pid 1216:tid 1252] [client ::1:49921] Premature end of script headers: test.exe^/```}
    sent: "2017-08-28T18:22:08.706Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a45f0b76a757f808f183d9"
    text: {@PeterWAWood  @Oldes  @pekr I've configured apache module named `mod_dumpio` which dump request and response details in error log file and also configured `ScriptLog` to see the details of CGI script executions. It looks like red compiled exe doesn't produce any output at all:^/```^/%% [Mon Aug 28 21:16:44 2017] GET /cgi-bin/test.exe HTTP/1.1^/%% 500 C:/Users/endo/Documents/htdocs/cgi-bin/test.exe^/%request^/Host: localhost^/Connection: keep-alive^/Cache-Control: max-age=0^/Upgrade-Insecure-Requests: 1^/User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36^/Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8^/DNT: 1^/Accept-Encoding: gzip, deflate, br^/Accept-Language: tr-TR,tr;q=0.8,en-US;q=0.6,en;q=0.4^/%response^/^/```}
    sent: "2017-08-28T18:20:59.667Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a4477e8f4427b462a9e460"
    text: {@toomasv, yeah! Updated my gist. Need to get back on `format`...ahhh time.}
    sent: "2017-08-28T16:40:30.744Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a42948210ac26920cd8f6a"
    text: {I think that HTTP headers cannot be UTF-16 encoded.}
    sent: "2017-08-28T14:31:36.740Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a427a5614889d475961421"
    text: {"^^(FFFE)" should give a BOM for UTF-16 LE. }
    sent: "2017-08-28T14:24:37.933Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a42719614889d475961157"
    text: {@Oldes I think trying "^^(0D0A)" would show if it is an encoding issue.}
    sent: "2017-08-28T14:22:17.935Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a425068f4427b462a934bb"
    text: {I see.. but the rest will be as ucs2 anyway so the header would not be parsed correctly anyway.. i guess..  maybe uf something like that could be used for bom.. which could lead nowhere anyway.}
    sent: "2017-08-28T14:13:26.256Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a423efee5c9a4c5f0a376b"
    text: {@endo64 "^^(0D0A)" is not cr & lf, it is a single codepoint. If it is converted to UTF-16, it will be converted to binary 0D0A which Apache will interpret as cr lf.}
    sent: "2017-08-28T14:08:47.719Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a41c00c101bc4e3a653041"
    text: {I tried every combination of newline/cr/lf/crlf, output to a file was exactly same for Purebasic compiled CGI application which works, but Red compiled one doesn't. So the output of red compiled app could be different for CGI than redirecting to a file (as @Oldes said) or ... I don't know :)}
    sent: "2017-08-28T13:34:56.805Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a408f59acddb2407d8b0ee"
    text: {It is also possible that I'm completely wrong and there is no UCS2 output with Apache :)}
    sent: "2017-08-28T12:13:41.026Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a40654ee5c9a4c5f0999f5"
    text: {I don't need CGI under Windows nowadays, so not a priority here. Just tried to test myself, as I used it in the past. As I can see, the activity (according to Trello) is with the Android nowadays :-) ...}
    sent: "2017-08-28T12:02:28.560Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59a405d5ee5c9a4c5f09975c"
    text: {I would guess they tried every combination already... it is not hard to implement different output but first better to hear @dockimbel 's opinion on that and how it should be integrated. For example.. print of binary value could output exact content without modificatipn.}
    sent: "2017-08-28T12:00:21.746Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a4043076a757f808efcc01"
    text: {It would confirm or not if the problem is Red's console's UTF-16 output.}
    sent: "2017-08-28T11:53:20.622Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a4026b66c1c7c477ec9183"
    text: {Have you tried fooling Apache with "^^(0D0A)" instead of new lines?}
    sent: "2017-08-28T11:45:47.272Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a3fc65ba0f0f6e38ef2514"
    text: {Well, most probably a bad question anyway .... as Peter proved it works under the macOS ....}
    sent: "2017-08-28T11:20:05.605Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59a3fc3476a757f808efa1aa"
    text: {Can Red console get "piped" at all? E.g. command line arguments are coming in 0.6.4 next version, but that might be just different ....}
    sent: "2017-08-28T11:19:16.373Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59a3fa2bee5c9a4c5f09629d"
    text: {Btw.. I'm using Nginx as a server.. but what i know it supports only fastcgi}
    sent: "2017-08-28T11:10:35.763Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a3f98766c1c7c477ec6d17"
    text: {I don't know.. I don't have Apache and don't want to install it. The BOM could help.. one could send it from routine.. but maybe some cgi switch for red should be used to let it know that it is not in the dos console so no ucs2 encoding.}
    sent: "2017-08-28T11:07:51.972Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a3f7f3ee5c9a4c5f095a41"
    text: {@Oldes could we somehow check on this? From some -15years I remember Apache config having some charset directives? Are we able to set it to the UCS2? Shouldn't it work then?}
    sent: "2017-08-28T11:01:07.605Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59a3f72f210ac26920cc9247"
    text: {On 90% the reason is the ucs2 encoding used on windows as default output.}
    sent: "2017-08-28T10:57:51.093Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a3f6438f4427b462a8521b"
    text: {I checked the permissions of the console which allowed execution by any user. I set the permissions of the cgi file to allow execution by any user.}
    sent: "2017-08-28T10:53:55.962Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a3f5fe578b44a046f76b7a"
    text: {`test-console` is the name I use for a Red console compiled from source. I was lazy and copied to the `cgi-bin` directory.}
    sent: "2017-08-28T10:52:46.132Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a3f5be66c1c7c477ec5d4e"
    text: {@Pekr This code also ran:^/```^/#!./test-console^/^/Red[]^/prin "Content-type: text/html^^/^^/"^/print "OK!"^/```}
    sent: "2017-08-28T10:51:42.815Z"
    editedAt: "2017-08-28T10:51:50.270Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a3f27466c1c7c477ec4cc9"
    text: {What we are trying to do though, is to have console executable and getting it executed via the shebang line, passing it the cgi script ...}
    sent: "2017-08-28T10:37:40.737Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59a3f224ba0f0f6e38eefb04"
    text: {[![Screen Shot 2017-08-28 at 18.35.34.png](https://files.gitter.im/red/red/AYjV/thumb/Screen-Shot-2017-08-28-at-18.35.34.png)](https://files.gitter.im/red/red/AYjV/Screen-Shot-2017-08-28-at-18.35.34.png)}
    sent: "2017-08-28T10:36:20.695Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a3f21366c1c7c477ec4b6a"
    text: {I compiled the program (to test.cgi) and then transferred it to my cgi-bin directory. The first time I tried to access it, I got a 500 Server Error. By looking at the Apache Error Log, it was a file permissions issue. The issue was the the executable produced by Red only allowed execution by the file owner. I extended execution rights to all users and the cgi ran.^/^/ }
    sent: "2017-08-28T10:36:03.089Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a3f124bc46472974cdc8d3"
    text: {@Bitsoma This code worked for me running Apache on macOS.^/```text^/Red[]^/prin "Content-type: text/html^^/^^/"^/print "OK!"^/```}
    sent: "2017-08-28T10:32:04.252Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "59a3ec81c101bc4e3a6448cf"
    text: {@Oldes  No difference to ^/```^/Red[]^/print "Content-type: text/html^^/^^/"^/print "OK!"^/```^/}
    sent: "2017-08-28T10:12:17.019Z"
    editedAt: "2017-08-28T10:12:59.552Z"
    v: 2
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "59a3e9f576a757f808ef4d5a"
    text: "@Bitsoma no difference for what?"
    sent: "2017-08-28T10:01:25.153Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a3de64614889d47594b321"
    text: {:point_up: [August 24, 2017 6:14 AM](https://gitter.im/red/red?at=599e2876a7b406262dbe7c96) discussion on higher order functions by @419928194516 for ref}
    sent: "2017-08-28T09:12:04.257Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59a3d474578b44a046f6c5f7"
    text: {@419928194516 Thank you for the [interesting post](https://gitter.im/red/red?at=599ee2baba0f0f6e38db4ee5) about the comparative usage of functional concepts between Haskell and Red, good food for thought. The only thing missing in Red to make it work is closure support, which will be available in a future release (not scheduled yet). In the meantime, you can simulate them pretty easily:^/```lisp^/closure: func [vars spec body][bind body-of spec: func spec body context vars :spec]^/^/c: closure [f1: f2: none][f1 f2][func[a][f2 f1 a]]^/f1: func [a [integer!] return: [string!]][mold a]^/f2: func [b [string!]  return: [integer!]][length? b]^/^/f3: c :f1 :f2^/probe f3 12 ^/== 12^/```}
    sent: "2017-08-28T08:29:40.364Z"
    editedAt: "2017-08-28T08:31:08.690Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a3d02176a757f808eec7c0"
    text: "@honix :bowtie: "
    sent: "2017-08-28T08:11:13.121Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a3cf179acddb2407d79fe7"
    text: "@toomasv Cool!"
    sent: "2017-08-28T08:06:47.095Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59a3ca8466c1c7c477eb7d8b"
    text: {@Oldes No difference! I have the feeling the problem is not related to any output it seems the script gets aborted before any output is emitted.}
    sent: "2017-08-28T07:47:16.093Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "59a3c7bcc101bc4e3a639654"
    text: {@greggirwin Nice! How about adding memory-usage and tabular output:^/```^/compare-times: func [^/^-blocks "Block of code blocks to performance compare"^/^-/count ct^/^-/local t n baseline res blk stats1 memory time code template^/][^/^-ct: any [ct 1]^/^-t: now/time/precise^/^-loop ct [do []]^/^-baseline: now/time/precise - t^/^-res: collect [^/^-^-foreach blk blocks [^/^-^-^-t: now/time/precise^/^-^-^-stats1: stats^/^-^-^-loop ct [do blk]^/^-^-^-n: now/time/precise - t - baseline^/^-^-^-keep reduce [n stats - stats1 copy blk]^/^-^-]^/^-]^/^-;new-line/skip sort/skip res 3 on 3^/^-sort/skip res 3^/^-insert res ["Time" "Memory" Code]^/^-template: [pad (time) 12 #"|" pad (memory) 11 #"|" (mold code)]^/^-foreach [time memory code] res [^/^-^-print compose template^/^-]^/]^/>> compare-times/count [[flatten-levels copy b] [flatten-change copy b]] 100^/Time         | Memory     | Code^/0:00:00.246  | 4202496    | [flatten-change copy b]^/0:00:00.368  | 2183168    | [flatten-levels copy b]^/```}
    sent: "2017-08-28T07:35:24.649Z"
    editedAt: "2017-08-28T07:42:14.821Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a3976cc101bc4e3a62dbca"
    text: {Someone recently posted to HN - What makes a good REPL?^/ https://news.ycombinator.com/item?id=15113170 }
    sent: "2017-08-28T04:09:16.600Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59a3495dee5c9a4c5f06bfcc"
    text: {Recent chat with @toomasv  on a `flatten` func and perf testing reminded me that @honix recently posted a new time tester (https://gist.github.com/honix/261bfad3b1524a97440277e743186921). Inspired by that, I just hacked this up: https://gist.github.com/greggirwin/dd172d5dd1e3445b16052a89f000637f^/^/Haven't thought about it too much, but wanted to get something out for comment. Need to think more about how to tie various pieces together for ease of use and helpful output.}
    sent: "2017-08-27T22:36:13.268Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a288f8210ac26920c73745"
    text: "I didn't know that there is a bugs rooms. Thanks."
    sent: "2017-08-27T08:55:20.902Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a27b0976a757f808e9d8da"
    text: {@endo64 It is probably best to ask in the red/bugs channel}
    sent: "2017-08-27T07:55:53.820Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a2795766c1c7c477e69460"
    text: "Though `do [ ]` also returns unset in Rebol 2."
    sent: "2017-08-27T07:48:39.384Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a27916210ac26920c70072"
    text: {@endo64 I suspect the cause is this:^/```text^/>> type? do []^/== unset!^/```}
    sent: "2017-08-27T07:47:34.830Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a27869210ac26920c6fdf3"
    text: {Is this intentional?^/```^/>> foreach v [ ] [ ]^/== none (R2)^/^/>> foreach v [ ] [ ]^/== ( unset! ) (Red)^/```}
    sent: "2017-08-27T07:44:41.647Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a1bd3c66c1c7c477e4254f"
    text: {@rebolek When my second try the output was exactly the same: there was two 0x0A just after content-type header and 0x0D0A at the end, both same for Purebasic & Red compiled executable.^/So it must be what @Oldes say. ^/There is an debug application for apache that show what exactly comes in and what the output is. We can see the problem with that.}
    sent: "2017-08-26T18:26:04.055Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a1b3829acddb2407d01fbf"
    text: {@endo64 output to file is handled differently... check this source file: https://github.com/red/red/blob/master/runtime/platform/win32-cli.reds   especially `print-screen` and `print-file`}
    sent: "2017-08-26T17:44:34.110Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a19d8d66c1c7c477e3a605"
    text: {@9214 @endo64 Yes, they are different:^/```^/>> msgs: gitter/get-messages 'red/red^/== [#(^/    id: "599ec1c176a757f808dae6f6"^/    text: ^{Hello, I am confuse regarding error handling in Red. The case is a function checking for pre-requisites a...^/>> ecode: trim/all first get-code msgs/47^/== ^{436F6E74656E742D747970653A20746578742F68746D6C0A0A4F4B210D0A^}^/>> ncode: load next find first get-code msgs/50 "#"^/== ^{436F6E74656E742D747970653A20746578742F68746D6C0D0A4F4B210D0A^}^/>> equal? ncode ecode^/== false^/```}
    sent: "2017-08-26T16:10:53.864Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a19aacba0f0f6e38e657ac"
    text: {```^/>> to binary! rejoin ["Content-type: text/html" crlf "OK!" crlf]^/== #{436F6E74656E742D747970653A20746578742F68746D6C0D0A4F4B210D0A}^/```}
    sent: "2017-08-26T15:58:36.519Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a199ebba0f0f6e38e654bf"
    text: {@endo64 if you look at the hex values you pasted here, I can see `0D0A` (`crlf`) only at end and not after `Content-type: text/html`, where is only `lf` twice - `0A0A`.}
    sent: "2017-08-26T15:55:23.981Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a19971c101bc4e3a5bd6a9"
    text: {Nope, the problem is not about line endings, I have compiled a dos application using Purebasic, its output is exactly same with the one compiled with Red.}
    sent: "2017-08-26T15:53:21.733Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a191e9578b44a046ee76b1"
    text: {> Actually the output from `print` (on windows CLI version) is in UCS-2 so it is #{0D000A00} which may be the reason.^/^/ @Oldes I compiled your script and redirect its output into a file `test.exe > file.txt` then check it with hex editor, there is no 0x00 at the end.^/It is:^/```^/43 6F 6E 74 65 6E 74 2D  74 79 70 65 3A 20 74 65^/78 74 2F 68 74 6D 6C 0A  0A 4F 4B 21 0D 0A^/```}
    sent: "2017-08-26T15:21:13.927Z"
    editedAt: "2017-08-26T15:22:04.806Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a15bc5614889d4758b892e"
    text: {@PeterWAWood thanks. I need GUI though and have studied the options. It looks like what I'm trying to do is going to be easier to simply write in javascript and run in a fullscreen browser (dementia clock, I think I mentioned it)}
    sent: "2017-08-26T11:30:13.051Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "59a1503366c1c7c477e27066"
    text: {I haven't tried to build the GUI with GTK3 for Raspberry Pi yet}
    sent: "2017-08-26T10:40:51.567Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a14fad9acddb2407ceb16d"
    text: {When Carl released the alpha of Rebol2 that runs on Raspberry Pi, I was able to compile Red code directly on a Raspberry PI 2 (Rebol doesn't run on earlier models). I haven't tried for a long time.}
    sent: "2017-08-26T10:38:37.694Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a14f3c614889d4758b5fa9"
    text: {@henrikmk All the main Red and Red/System tests pass on Raspberry Pi.^/^/ You can easily cross-compile the Red console app without GUI to run on any raspberry pi using `-t RPi` option.  ^/^/(If you are using a really, really old Raspberry Pi and a very old version of Raspbian that does not use hardware float processing, you would need the `-t Linux-ARM' option).}
    sent: "2017-08-26T10:36:44.435Z"
    editedAt: "2017-08-26T10:41:50.926Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a11f03ba0f0f6e38e497c3"
    text: {thank you @sergeantWilson ,  I know this work. My scripts offer a control of the voice parameters (voice, rate, volume ...) . The most complete: mysay.red works on Mac OSx and on recent Windows versions (win 8.1, win 10). The other: simple-say.red works on older Windows versions (XP, win 7)}
    sent: "2017-08-26T07:10:59.801Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "59a0b18f76a757f808e38762"
    text: {Regarding voice things - I found this:   http://www.mycode4fun.co.uk/red-apps  -  if you move down the page there's  some voice stuff.}
    sent: "2017-08-25T23:23:59.402Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "59a08fb0a7b406262dc90324"
    text: "Thanks @jocko-jc!"
    sent: "2017-08-25T20:59:28.548Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a0803066c1c7c477df9b4c"
    text: "what was the state of red on raspberry pi?"
    sent: "2017-08-25T19:53:20.743Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "59a04e39ba0f0f6e38e176ae"
    text: {@dockimbel am I right? Maybe it could be fixed with BOM at the beginning, but have no idea how you could do it from Red level without corrupting the BOM by `print` conversion too. }
    sent: "2017-08-25T16:20:09.628Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a04b16614889d4758783f5"
    text: {Actually the output from `print` (on windows CLI version) is in UCS-2 so it is #{0D000A00} which may be the reason.}
    sent: "2017-08-25T16:06:46.606Z"
    editedAt: "2017-08-25T16:12:38.445Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a04947162adb6d2e33023b"
    text: {Note that on windows `print` always adds `CRLF` at the end. (While on Linux it is just `LF`)}
    sent: "2017-08-25T15:59:03.993Z"
    editedAt: "2017-08-25T15:59:20.649Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a0474fba0f0f6e38e157c3"
    text: {@endo64 @Bitsoma  what if you use:^/```^/Red []^/print "Content-type: text/html^^/^^/OK!"^/```}
    sent: "2017-08-25T15:50:39.084Z"
    editedAt: "2017-08-25T15:53:05.701Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a0443d162adb6d2e32e6f2"
    text: {It is years ago I used Apache last time, but I'm pretty sure it is possible to configure it to log verbose errors.}
    sent: "2017-08-25T15:37:33.765Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a03711614889d475871d73"
    text: {I tried 2 hours more with no luck. I've compiled my test file into .exe as MSDOS, it gives the necessary output on console but Apache still fails. Tried with all combinations of linefeeds (0x0A, 0x0D, 0x0D0A)^/```^/Red []^/print "Content-Type: text/plain"^/print ""^/print "OK!"^/wait 1^/print "Done"^/```^/I also read something that sometimes apache fails if the process ends too fast, so I put `wait`. I can see my .exe triggered by apache.exe in the background.}
    sent: "2017-08-25T14:41:21.179Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a00482c101bc4e3a559fc9"
    text: {@pekr  I tried the same as @endo64. Manually compiled console of Red 0.63 with and without --cli, Apache 2.4.7, W7.}
    sent: "2017-08-25T11:05:38.471Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599fe5ab162adb6d2e312e43"
    text: "with red.exe I tested with and without `--cli`."
    sent: "2017-08-25T08:54:03.795Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe58aa7b406262dc5f5ab"
    text: {I tested with latest console (not the gui console) and with red.exe, same error for both.}
    sent: "2017-08-25T08:53:30.157Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe536210ac26920bd3b53"
    text: {OK, I might give it a try too. Whyt Red are you using guys? You generate an MSDOS console, or?}
    sent: "2017-08-25T08:52:06.771Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599fe4e066c1c7c477dcb77f"
    text: {@endo64 Thanks for confirming this! I am currently running Apache 2.4.7, but the latest version is 2.4.27. I will test it again with this version next week.}
    sent: "2017-08-25T08:50:40.343Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599fe024ba0f0f6e38df7897"
    text: {@Bitsoma I also couldn't run Red as CGI with Apache on Windows, Red doesn't crash but somehow it doesn't work with Apache but works bir IIS.}
    sent: "2017-08-25T08:30:28.243Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fdaea162adb6d2e30f5fd"
    text: {Added a simple-say.red test file for older windows versions (i.e. XP, win7), as PowerShell is not always available on these platforms. instead, it uses a generated vbs script. Also parameters are changed through refinements (thanks to  @iceflow19 ) :  https://github.com/jocko-jc/red-tts }
    sent: "2017-08-25T08:08:10.747Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "599fb4a0578b44a046e6f0f6"
    text: {@9214  Thanks, It was my mistake ask here, sometimes when you click on a room the browser does not switch properly}
    sent: "2017-08-25T05:24:48.930Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "599f1a03a7b406262dc2b909"
    text: {@greggirwin  Thanks for `cause-error`. Works as expected.}
    sent: "2017-08-24T18:25:07.969Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599f00a8614889d47581e987"
    text: {We also have various experiments for creating refined versions of functions. Nenad cooked this one up some time back, as an example:^/```^/specialize: function [fun [function!] defs [block!]][^/    spec: copy/deep spec-of :fun^/    body: copy/deep body-of :fun^/^/    foreach [arg value] defs [^/        arg: to word! form arg^/        pos: find spec arg^/        remove/part pos pick [2 1] block? pos/2^/        parse body rule: [some [change only arg value | into rule | skip]]^/    ]^/    func spec body^/]^/e.g. [^/^-foo: func [x y][x + y]^/^-;== func [x y][x + y]^/^-bar: specialize :foo [x: 5]^/^-;== func [y][5 + y]^/^-bar 10^/^-;== 15^/^-pad8: specialize :pad [n: 8]^/^-;== func ["Pad a string on right side with spaces"...^/^-pad8 "hello"^/^-;== "hello   "^/^/^-entab: specialize :replace [pattern: space value: tab]^/^-;== func [series [series!] /all /local many? len pos][many?: any [system/words/a...^/^-entab "   hello^^/    world"^/^-;== "^^-  hello^^/    world"^/^-entab/all "   hello^^/    world"^/^-;== "^^-^^-^^-hello^^/^^-^^-^^-^^-world"^/^/^-{^/^-You can use source on the specialized functions to see that the source code is^/^-rewritten. Many improvements are possible, like specializing on refinements and^/^-optional arguments, or folding constant expressions resulting from fixing^/^-arguments.^/^-}^/]^/```}
    sent: "2017-08-24T16:36:56.312Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599effc4ba0f0f6e38dbdf0c"
    text: {So, you basically want to compose "trimmed down" versions of functions which recieve only one type of an argument and always spit out another type of an argument no matter what? And you also want to build (and save for future use) chains of such compositions, that way data will nicely flow from one type to another without troubles. Interesting, it kinda reminds me of concatenative PLs.}
    sent: "2017-08-24T16:33:08.310Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ef2ef162adb6d2e2d41ae"
    text: {@419928194516, would something like this work for you?^/```^/c: func[f1 f2][func[a] reduce [:f2 :f1 'a]]^/f1: func[a [integer!] return: [string!]][mold a]        ;integer! -> string!^/f2: func[b [string!]  return: [integer!]][length? b]    ;string! -> integer!^/probe f3: c :f1 :f2                                         ;integer! -> integer!^/probe f3 12^/```}
    sent: "2017-08-24T15:38:23.963Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599ef13f162adb6d2e2d38ef"
    text: {I don't have time to dig into it right now, but you may be able to do what you want with `context?`.}
    sent: "2017-08-24T15:31:11.513Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599ef09b614889d475819858"
    text: {OK, now I've read your posts and see what you're saying. Thanks *so much* for the Red examples of the Haskell. Really helps aid understanding. The key, then, is "a way to retain binding to their parent's argument block", which is where Red's binding model doesn't work that way by default. ^/^/Would you pull your last 2 posts out into a gist, or someplace, for later reference? It would be great not to lose them.}
    sent: "2017-08-24T15:28:27.684Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "599eef7676a757f808dbd4b4"
    text: {@419928194516, I haven't read all your latest posts in detail, but there are currently limitations when compiling functions in functions. A number of us have our own HOFs, but Nenad has a plan in mind as well. It's not on the roadmap yet though.}
    sent: "2017-08-24T15:23:34.560Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599eee4ac101bc4e3a510615"
    text: "@fvanzeveren  Use `cause-error`."
    sent: "2017-08-24T15:18:34.010Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599ee3679acddb2407c4bd73"
    text: {@PeterWAWood  the underlying question is: what is the best way to deal with function generating errors:^/```^/a: does [return make error! "Une erreur"]^/error? try [a]^/```^/or^/```^/a: does [throw make error! "Une erreur"]^/error? catch [a]^/```^/^/}
    sent: "2017-08-24T14:32:07.062Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ee2baba0f0f6e38db4ee5"
    text: {@9214^/Well, one way to think about monad/applicative/functor is they^/are just ways of formalizing patterns of (higher order) functions with certain well-behaved rules.^/The only machinery needed to 'create' them is HOF's, noticing they exist, and writing them down.^/*Handwaving begins*^/Functors give you a way of describing the transformation of the insides of a 'container',^/or alternatively, a way of lifting a transformation on parts of a thing, into a transformation of the whole thing.^/```^/Red []^/fmap-for-series: func[f s][^/    collect [ foreach v s [keep/only f v] ]^/]^/```^/^/Give me a (series or whatever) of integer and a function that transforms integers to strings^/If I can tell you how to make a (series or whatever) of strings, that process is fmap-for-series^/and I've just proven 'series' is a functor^/^/Monads say something about functions that an input and produce 'messy' results^/```^/messy1: func[a][make vector! reduce [a a a]] ; the mess here is vector^/messy2: func[b][make vector! reduce [b b]]^/```^/If the answer to the question:^/Can I pipeline/compose messy1 and messy2 together in a well-behaved way?^/then the mess (vector!) is a monad with respect to that pipeline/compose^/```^/pipeline: func[messy1 messy2][ ; flatmapping is an answer to the question^/    func[a][^/        flatten fmap-for-series :messy2 (messy1 a)^/    ]^/]^/```^/^/Haskell programmers typically write out type signtures like so:^/`comp : (a -> b) -> (b -> c) -> (a -> c)`^/which in English is^/comp is a function whose argument is (a function that takes 'a' and returns 'b')^/and returns^/    (a function whose argument is (a function that takes 'b' and returns a 'c')^/        and returns a function that takes 'a' and returns a 'c')^/And a concrete example in red^/```^/Red []^/; what haskell is really saying^/; give me 2 compatible functions, I'll give you a single function that combines their operation^/c: func[f1 f2][func[a][f2 f1 a]]^/c: func[f1 f2][func[a][f2 f1 a]]^/f1: func[a [integer!] return: [string!]][mold a]        ;integer! -> string!^/f2: func[b [string!]  return: [integer!]][length? b]    ;string! -> integer!^/; but this doesn't work:^/; f3: c :f1 :f2                                         ;integer! -> integer!^/; because c 'loses' f1 and f2 when it returns it's quoted body^/c: func[][func[a][f2 f1 a]] ; if we instead rely on the existing global binding^/probe f3: c^/probe f3 12 ; => 2 = length? mold 12 ; it all works out^/```^/So, without the ability to easily create 'functions that take and return functions' ^/that also have a way to retain binding to their parent's argument block^/I can't compose things (easily) in this way^/^/Whether you 'should' be able to is another matter.^/Doing this kind of composition can also be achieved as a transformtion of blocks, which red is good at.^/so I'm exploring that now for my own edification.^/^/but the getting back to the functor/monad thing.^/As soon as you have HOF, those things just 'exist' whether you want them to or not.^/In the same way that real field exists in Mathematics as soon as you define 'numbers' 'plus' and 'multiplication'^/to work the way they do.}
    sent: "2017-08-24T14:29:14.902Z"
    editedAt: "2017-08-24T14:30:02.145Z"
    v: 2
    author: "5999b530d73408ce4f723366"
) #(
    id: "599eda87210ac26920b8c951"
    text: {Hello all, yet another newbie question: does Red has a mechanism similar to the Promise in Javascript for asynchrone execution?}
    sent: "2017-08-24T13:54:15.717Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ed1c7a7b406262dc14c31"
    text: {@planetsizecpu this should work in theory, but it doesn't, try to ask in `gui-branch` room as I'm not a View expert :(^/```^/view/options/flags [][^/    actors: [^/        on-resizing: func [face event][probe face probe event]^/    ]^/] 'resize^/```^/}
    sent: "2017-08-24T13:16:55.450Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ecf19ee5c9a4c5ff4f5c7"
    text: {while with:^/```^/a: does [^/  do make error! "An error occured" ^/  return "No error"^/]^/```^/there is:^/```^/*** User Error: "An error occured"^/*** Where: do^/*** Stack: a ^/```}
    sent: "2017-08-24T13:05:29.039Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "599ecebbba0f0f6e38daeb4b"
    text: {It stinks as your version is not providing any info in the `where` field and not providing stack info:^/```^/*** User Error: "An error occured"^/*** Where: ???^/>> ^/```}
    sent: "2017-08-24T13:03:55.834Z"
    editedAt: "2017-08-24T13:04:08.748Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "599ec66a9acddb2407c42739"
    text: {@PeterWAWood ^/This code is really weird:^/```^/a: does [^/  make error! "An error occured" ^/  return "No error"^/]^/```^/`Rebol` bubbles the error, as expected.^/`Red` returns `No error`^/A solution is^/```^/a: does [^/  return make error! "An error occured"^/  return "No error"^/]^/```^/But is this good practice?^/}
    sent: "2017-08-24T12:28:26.930Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ec4bcc101bc4e3a503101"
    text: "The client has to handle the error itself"
    sent: "2017-08-24T12:21:16.543Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ec4b0578b44a046e2c958"
    text: {@PeterWAWood yes, I need to return the error from the function. Under rebol, I never used the `trow` and `catch` mechanism... }
    sent: "2017-08-24T12:21:04.824Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ec45076a757f808daf416"
    text: {@fvanzeveren I don't think you need to use `throw` but it looks as though you need to return the error from the function for it to be activated. This is different from Rebol 2 but I'm not sure if it is by design or a bug. (I will check in the red/bugs channel).}
    sent: "2017-08-24T12:19:28.319Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599ec3db210ac26920b8593d"
    text: "@fvanzeveren I run Apache 2.4 on W7."
    sent: "2017-08-24T12:17:31.226Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599ec375578b44a046e2c3dc"
    text: {@Bitsoma under IIS10, i had an issue with red that was not occuring with Rebol. The reason was that Red requires a the flag "use new console on every call" to be true... Maybe apache has some such flag?}
    sent: "2017-08-24T12:15:49.535Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ec2bc76a757f808daec8e"
    text: {@Bitsoma  from the first line if your script, I suppose you are running Linux... I am afraid I cannot help as I never ran red under Linux...}
    sent: "2017-08-24T12:12:44.190Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ec244162adb6d2e2c4840"
    text: {I sure tried the --cli option on both the precompiled and manually compiled console. No effect.}
    sent: "2017-08-24T12:10:44.556Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599ec1f8a7b406262dc1017b"
    text: "@Bitsoma did you specify the `--cli` options?"
    sent: "2017-08-24T12:09:28.076Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ec1c176a757f808dae6f6"
    text: {Hello, I am confuse regarding error handling in Red. The case is a function checking for pre-requisites and if those pre-requisites are not met, I would like to throw an error. Should I use `throw make error! "some message"` or simply `make error! "some message"`. WHen should `throw` be used and when not? The documentation is rather unclear. Cheers.}
    sent: "2017-08-24T12:08:33.695Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ec17e210ac26920b84d8e"
    text: {@fvanzeveren why do you use a manually compiled version of red?  Because with the precompiled version the CGI hangs, i.e. the web server waits forever for an answer and I have to terminate the execution with 'ESC'.}
    sent: "2017-08-24T12:07:26.904Z"
    editedAt: "2017-08-24T12:09:38.849Z"
    v: 3
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599ec0cc614889d47580a6a1"
    text: {with "official" red version}
    sent: "2017-08-24T12:04:28.456Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ec0959acddb2407c408f2"
    text: {@Bitsoma  I confirm your sample script works under IIS10 with red as cgi engine.}
    sent: "2017-08-24T12:03:33.571Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ebec1bc46472974b94fae"
    text: {@9214 In the event names doc `resize` and `resizing` are listed but twice are giving me invalid syntax, so how do you catch this event?}
    sent: "2017-08-24T11:55:45.587Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "599ebe52c101bc4e3a5012a9"
    text: {@Bitsoma why do you use a manually compiled version of red? It works perfectly well with the "official" version of red..^/Are you sure red access (read/write/execute) are properly set?^/}
    sent: "2017-08-24T11:53:54.040Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ebc139acddb2407c3f6f2"
    text: "@planetsizecpu maybe `on-resizing`?"
    sent: "2017-08-24T11:44:19.926Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599eb9fa66c1c7c477d7a3ea"
    text: {@all how can I catch main window resize events as "face on-resize [...]" is not triggered when you do resize it? so I can adapt widgets size to main window size. In fact it raises an error}
    sent: "2017-08-24T11:35:22.080Z"
    editedAt: "2017-08-24T11:38:23.644Z"
    v: 3
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "599eb85476a757f808dabe51"
    text: {It works fine from the command line. Don't know how to upload screenshot.}
    sent: "2017-08-24T11:28:20.469Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599eb759bc46472974b9305d"
    text: {Run the same script from the command line to see, if it crashes}
    sent: "2017-08-24T11:24:09.941Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599eb474c101bc4e3a4fe65e"
    text: {@rebolek Thanks, however^/```^/#!D:/Apache24/htdocs/cgi-bin/red^/Red[]^/prin "Content-type: text/html"^/prin #"^^(0D)"^/prin #"^^(0A)"^/prin #"^^(0D)"^/prin #"^^(0A)"^/prin "Hello world from Red"^/```^/Didn't change anything, still 'Premature end of script'^/With Rebol it works. I have the feeling for some reason Red crashes when it is invoked or immediately when it starts interpreting the script.}
    sent: "2017-08-24T11:11:48.848Z"
    editedAt: "2017-08-24T11:14:54.571Z"
    v: 4
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599e8c74bc46472974b85a98"
    text: {@Bitsoma It seems that *Premature end of script headers* is caused by wrong line-ends. Try replacing `print` with `prin` and `^^/` with two `crlf`s.}
    sent: "2017-08-24T08:21:08.995Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599e8ad0210ac26920b7490e"
    text: {put mouse on your message, then three dot on the right}
    sent: "2017-08-24T08:14:08.094Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "599e8ab1614889d4757f93f2"
    text: "you could edit your message "
    sent: "2017-08-24T08:13:37.207Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "599e8aa4578b44a046e1a6a9"
    text: "See the markdown help in bottom right corner [M]"
    sent: "2017-08-24T08:13:24.479Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599e8a80ee5c9a4c5ff39c96"
    text: {@Bitsoma enclose your code in three backticks: \`\`\`}
    sent: "2017-08-24T08:12:48.209Z"
    editedAt: "2017-08-24T08:12:58.394Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599e8a4fee5c9a4c5ff39b76"
    text: {Still no success using Red for CGIs (W7, Apache 2.4)^/(sorry for the poor formatting, but I am inexperienced with Gitter)^/Here is what I have done:^/Manually compiled Red 0.63 console and called it red.exe^/The CGI script ^/```^/#!D:/Apache24/htdocs/cgi-bin/red^/Red[]^/print "Content-type: text/html^^/"^/print "Hello world from Red"^/```^/produces 'Internal Server Error' ('Premature end of script headers')^/^/From DOS console the above script without the first line gives the expected output^/^/The CGI script^/```^/#!D:/Apache24/htdocs/cgi-bin/rebol -cs^/Rebol[]^/print "Content-type: text/html^^/"^/print "Hello world from Rebol"^/```^/works as expected!^/^/I activated the 'ScriptLog' directive for the server but this doesn't give any useful information.^/^/^/^/}
    sent: "2017-08-24T08:11:59.412Z"
    editedAt: "2017-08-24T08:15:11.908Z"
    v: 2
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599e87b9ba0f0f6e38d9955b"
    text: {selecting from `hash!` seems to be 10-15% faster than from `map!`}
    sent: "2017-08-24T08:00:57.093Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599e85edba0f0f6e38d98d2b"
    text: {@fvanzeveren with `map!`, key can be present only once. Not sure about speed, I can do some testing.}
    sent: "2017-08-24T07:53:17.799Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599e7fbe76a757f808d99c91"
    text: {hello, is there a benefit to use `map!` instead of `hash!` in term of performance? What if the same key could appear multiple times? Cheers.}
    sent: "2017-08-24T07:26:54.858Z"
    editedAt: "2017-08-24T07:27:16.713Z"
    v: 2
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599e6e4b2723db8d5ed8764a"
    text: {My feel is that Red (with it's Rebol/Lisp/Forth heritage) is problem-oriented language, so, then it comes to porting, it's better to think about what code actually _does_ and what problem it solves, not how it _looks_ like. It simplifies thing a lot (for me at least), but doesn't work really well if you're just studying and want to implement something as-is on conceptual level.}
    sent: "2017-08-24T06:12:27.209Z"
    editedAt: "2017-08-24T06:12:51.001Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599e6d88ba0f0f6e38d923a5"
    text: {@419928194516 I'll be very grateful if you'd explain what monad/applicative/functor/all-this-stuff is in terms of Red's `bind` and `context`s :D}
    sent: "2017-08-24T06:09:12.860Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599e6d43ba0f0f6e38d92309"
    text: {@pekr  The script is fine and the permissions are the same as with Rebol. }
    sent: "2017-08-24T06:08:03.467Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599e6d3f614889d4757f1d52"
    text: {@9214 Thanks for the link, I certainly do not expect red to be haskell, but when I learn a new language, I do some translations of programs to get a feel for what is idiomatic or possible, and what isn't. This little foray certain taught me something about red function 'scoping' and the limits of bind.}
    sent: "2017-08-24T06:07:59.525Z"
    v: 1
    author: "5999b530d73408ce4f723366"
) #(
    id: "599e6cf4c101bc4e3a4e8a5d"
    text: {@Oldes  I've done that of course and the output is as it should.}
    sent: "2017-08-24T06:06:44.589Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599e6a1d210ac26920b6c60d"
    text: {though I don't get why do you expect Red to be Haskell, the code above is neither idiomatic nor compile-able (I guess, since there're functions inside functions which return functions).}
    sent: "2017-08-24T05:54:37.007Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599e66c9ba0f0f6e38d9082d"
    text: {@419928194516 :point_up: [14 августа 2017 г., 10:13](https://gitter.im/red/red?at=59913181614889d4754657b4) }
    sent: "2017-08-24T05:40:25.211Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599e2876a7b406262dbe7c96"
    text: {Trying to use higher order functions is ..rough currently.^/Is there a plan/design/working area for implementations?^/Observe this monadic monstrosity that doesn't really work^/```^/; Continuations^/const: func[k][ does bind [k] context compose [k: (k)]]^/fmap: func[f a][func[b] bind [i: (b f)  a :i] context compose [f: (:f) a: (:a)]]^/join: func[arrr][^/    ctx1: context compose [arrr: (:arrr)]^/    func[ar]^/    bind [^/        ctx2: context compose [ar: (:ar)]^/        arrr^/        (func[arr]^/        bind [^/            arr :ar^/        ] ctx2)^/    ] ctx1^/]^/mbind: func[ma fab][ join (fmap :fab ma) ]^/```^/I was just trying to port some haskell code and it'd have be nice to start with a 1-1 before making serious alterations}
    sent: "2017-08-24T01:14:30.369Z"
    v: 1
    author: "5999b530d73408ce4f723366"
) #(
    id: "599df04d76a757f808d782d2"
    text: {@tanstaaf1  :point_up: [August 22, 2017 9:50 AM](https://gitter.im/red/red?at=599bb82ba7b406262db3aff5) @9214 was way ahead of me :smile:}
    sent: "2017-08-23T21:14:53.496Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599dec65a7b406262dbd9630"
    text: {@dockimbel http://graydon2.dreamwidth.org/253769.html starts the question: "After memory safety, what do you think is the next big step for compiled languages to take?"  Areas cited include Modules, Errors, Asynchronicity, Effect Systems, Extended Static Checking, etc. I was going to delete this reddit link but thought I'd pass it on to you as many of these topics are coming up in 0.7 and above.  It struck me how many of issues were obviously also on your mind.}
    sent: "2017-08-23T20:58:13.096Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "599ddfe4a7b406262dbd5e4c"
    text: {:alien: :car:^/```^/>> do %cadadaverous.red^/== ok^/>> cadaddr `(1 3 (5 7) 9)^/== 7^/>> caar `((7))^/== 7^/>> cadadadadadadr `(1 (2 (3 (4 (5 (6 7))))))^/== 7^/```^/https://gist.github.com/9214/c325d349195ba9054e18555ed51c9ed5^/(sorry for reposting, accidentally deleted gist)}
    sent: "2017-08-23T20:04:52.389Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599db37d578b44a046de4a6a"
    text: "@toomasv thanks!"
    sent: "2017-08-23T16:55:25.938Z"
    editedAt: "2017-08-23T16:55:31.085Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599db35f614889d4757c32dd"
    text: {Thanks, @greggirwin, happy playing!^/@9214 I used https://www.draw.io/ to make these. But to make [this](https://github.com/toomasv/red-graphviz/blob/master/types.png) I used dot-lang.red in [red-graphviz](https://github.com/toomasv/red-graphviz).}
    sent: "2017-08-23T16:54:55.648Z"
    editedAt: "2017-08-23T16:57:00.761Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
)#(
    id: "599dad6eba0f0f6e38d6137e"
    text: {@toomasv may I ask you what software do yo use to draw your [Red type hierarchy](https://github.com/toomasv/red-type-hierarchy) graphs?}
    sent: "2017-08-23T16:29:34.286Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599dac6a2723db8d5ed55439"
    text: "@toomasv rocks :rocket: "
    sent: "2017-08-23T16:25:14.216Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599da635162adb6d2e27991e"
    text: {Very cool @toomasv! More stuff I need to make time to play with. ^/^/@maximvl, after his regex work, @toomasv's `parse` code will only get more serious. :^^)}
    sent: "2017-08-23T15:58:45.429Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599d9fd12723db8d5ed51330"
    text: {I like the design, we need to connect it to actual databases asap :)}
    sent: "2017-08-23T15:31:29.376Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599d9fbec101bc4e3a4b4026"
    text: "I see, interesting approach"
    sent: "2017-08-23T15:31:10.571Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599d9f62210ac26920b3867e"
    text: {@maximvl Yes, defaults can be defined for tables. To see default for a table, use `query [probe table table-name default]`. Default can be used as criterion for search, and it is returned if fields are not specified, eg. `query [probe persons]`.}
    sent: "2017-08-23T15:29:38.045Z"
    editedAt: "2017-08-23T15:31:35.448Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "599d9590a7b406262dbbea21"
    text: "no worries :)"
    sent: "2017-08-23T14:47:44.535Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599d93e2578b44a046dda28d"
    text: "@maximvl Sorry, on phone now. Will answer later"
    sent: "2017-08-23T14:40:34.695Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "599d923bbc46472974b445a5"
    text: "is there some kind of default-fields-combination?"
    sent: "2017-08-23T14:33:31.768Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599d9229a7b406262dbbd7ff"
    text: {@toomasv  how is it possible to skip `with` in queries?^/```^/query [from persons print [address] of "Edward Kinnock"]^/query [print [street house] of person with [first-name = "Oscar"]]^/```}
    sent: "2017-08-23T14:33:13.912Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599d91d62723db8d5ed4c615"
    text: "oh wow, that's some serious parsing"
    sent: "2017-08-23T14:31:50.477Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599d9079578b44a046dd8f48"
    text: {Here's my try on a toy [database/query DSL](https://github.com/toomasv/query)}
    sent: "2017-08-23T14:26:01.183Z"
    editedAt: "2017-08-23T14:26:33.866Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "599d8ed0578b44a046dd8652"
    text: {In console and see what it prints out.. I would guess it will be some error}
    sent: "2017-08-23T14:18:56.997Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "599d8e53c101bc4e3a4adc8d"
    text: "@Bitsoma you may try to run the script "
    sent: "2017-08-23T14:16:51.368Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "599d8cb4ba0f0f6e38d560ce"
    text: {I am almost sure it is related to the script and/or interpreter permissions. Well, almost :-)}
    sent: "2017-08-23T14:09:56.301Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599d8bd8bc46472974b42409"
    text: {@Bitsoma You're not wasting my time, but I am afraid, I can't help you, I'm not sure what's the cause of this problem. I may try with Apache under W10 VM, when I find some time.}
    sent: "2017-08-23T14:06:16.516Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599d7f6bbc46472974b3e6f4"
    text: {@pekr  The Rebol and Red scripts are identical. Of course when you don't use the Rebol -cs switch you get the same 'Premature..' error. But there seems to be no Red commandline switch for CGI use. Maybe there's the problem.}
    sent: "2017-08-23T13:13:15.101Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599d4bccc101bc4e3a49a153"
    text: {I do remember that message from the Rebol past, but don't remember the solution :-(  Was it double end-of-line needed at the end of the script, or the user rights related, really can't remember now ...}
    sent: "2017-08-23T09:33:00.137Z"
    editedAt: "2017-08-23T09:33:38.440Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599d4b07578b44a046dc5313"
    text: {The error log of the server says: 'Premature end of script headers:'}
    sent: "2017-08-23T09:29:43.025Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599d476d578b44a046dc4241"
    text: {@rebolek Thanks, I manually compiled the console. At least now I get an 'Internal Server Error'. Before with the precompiled console the error was 'Script timed out before returning headers:' - I hope I don't waste your time.}
    sent: "2017-08-23T09:14:21.651Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599d3edfba0f0f6e38d3ee5e"
    text: {@Bitsoma to compile console yourself from Rebol console, do for example `do/args %red.r "-r environment/console/console.red"`}
    sent: "2017-08-23T08:37:51.345Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599d3bdb2723db8d5ed329f4"
    text: {@rebolek 'manually compiled console, not sure about precompiled version.' What could be the difference? Where can I find the doc to manually compile the console myself? Thanks again for the help.}
    sent: "2017-08-23T08:24:59.773Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599d39c09acddb2407bd4f42"
    text: "On mod/modulo: see #2674"
    sent: "2017-08-23T08:16:00.830Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599d24bda7b406262db9dab4"
    text: "@fvanzeveren no `secure` in Red yet."
    sent: "2017-08-23T06:46:21.002Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599d1560bc46472974b203d6"
    text: {For whoever has to approve it, but I guess that only would be an issue if we get a big influx.}
    sent: "2017-08-23T05:40:48.414Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "599d00f2bc46472974b1b251"
    text: {@qtxie Looking good,  but in the long run wouldn't it probably be better to have something more open? Submission being gated by merge requests seems a little controlling no? And time consuming.}
    sent: "2017-08-23T04:13:38.795Z"
    editedAt: "2017-08-23T04:13:55.486Z"
    v: 2
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "599cfe99a7b406262db944db"
    text: {So on line that complains about modulo handling, `(pos + dir + board) % board` works, and it's what I should have used, but the mod and modulo mezzanine functions are simply wrong for pairs, and likely tuples and vectors too.}
    sent: "2017-08-23T04:03:37.871Z"
    v: 1
    author: "5999b530d73408ce4f723366"
) #(
    id: "599cea8a162adb6d2e245dc0"
    text: {@CodingFiend_twitter  ^/Most of what you asked for, probably should have used a scaling matrix instead of manually scaling, that'd take care of all of the requested resize handling.^/```red^/Red [title: {snake}]^/state: context [^/    scale: 40 board: 24x24 body: []^/    dir: 0x0 pos: 4x4 len: 5^/    hi: score: 0 pause: no^/    do new-apple: [while [find body apple: random (board - 1)] []]; placed at a random location on the board.^/    beep: crunch: does[] ; could load from binary literal here, meh^/    mk-box: func[p tog round][compose [fill-pen (to-tuple either tog [#00FF00][#87F717]) box (p * scale) (1x1 + p * scale) (round)]]^/    key: func[e][^/        ; As soon as an arrow key is pressed, the snake begins to move in that direction^/        if v: switch e/key [left [-1x0] up [0x-1] right [1x0] down [0x1]][^/            pause: no if v + dir <> 0x0 [dir: v] ; the snake moves one cell per frame^/        ]^/        if all [e/key = #" " dir <> 0x0] [pause: not pause]^/    ]^/    hel: (make font! [size: 28 name: "Helvetica" color: as-rgba 255 255 255 75]) ;28 pt black text ... black on black?^/    step: does[^/        if pause [exit]^/        if dir = 0x0 [pause: yes] ; not moving (start of game), so stop drawing, limits len to 1 at start^/        ; because modulo doesn't work with pairs... ; The snake wraps around the board in all four directions.^/        insert body (pos: make pair! compose [(modulo (pos/1 + dir/1) board/1) (modulo (pos/2 + dir/2) board/2)] )^/        if (length? body) > len [take/last body]^/        if pos = apple [ len: len + 1 crunch  do new-apple ]^/        if all [dir <> 0x0 cross: find next body pos] [ beep len: index? cross clear cross ]^/        c/draw: compose [line-width 2 pen (to-tuple #006400) (mk-box first body (tog: yes) 12) pen black] ; rounded head, green outline^/        foreach link next body [append c/draw mk-box link (tog: not tog) 4]^/        append c/draw compose [^/            fill-pen crimson circle ((scale * apple) + (scale * 0.5)) (scale / 2) font hel ; The apple HTML color crimson, one cell drawn as a circle^/            text ((as-pair (board/2 / 2 - 2) 1) * scale)^/            (rejoin [(score: len - 5) "  high: " (hi: max hi score)])^/        ]^/    ]^/]^/view compose [^/    title "Snake"^/    c: base (state/scale * state/board + 1x1) black on-key [state/key event] ;playing board, drawn solid black^/    timer: base 0x0 rate 6 on-time [state/step] ; 6 fps^/]^/```}
    sent: "2017-08-23T02:38:02.081Z"
    editedAt: "2017-08-23T02:39:05.763Z"
    v: 2
    author: "5999b530d73408ce4f723366"
) #(
    id: "599cc223ba0f0f6e38d201aa"
    text: {@fvanzeveren just a suggestion code is best posted to https://gitter.im/red/help  :smile: }
    sent: "2017-08-22T23:45:39.760Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599c9dae614889d47577a62f"
    text: {@fvanzeveren, when you just want to match at the current index, as you do here, `find/match`is sometimes a nice alternative.}
    sent: "2017-08-22T21:10:06.183Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c96cb76a757f808d198fe"
    text: {Hello, in `Rebol`, there is native function `secure` to specify access levels and directories. Is there something similar in `Red`?}
    sent: "2017-08-22T20:40:43.127Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599c93632723db8d5ed0a30b"
    text: {@rebolek I exclusively use `func`, because I prefer to be in total control on what has to be local or global :)}
    sent: "2017-08-22T20:26:11.051Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599c92eba7b406262db79f2c"
    text: {You're right about `func` vs `function`, I sometime use `func` for debugging and forget to change it to function later :)}
    sent: "2017-08-22T20:24:11.319Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599c92c9ba0f0f6e38d13d4e"
    text: {@fvanzeveren Thanks, I take a look at it tomorrow.}
    sent: "2017-08-22T20:23:37.017Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599c9088578b44a046d9652e"
    text: {@rebolek and I also amended `get-headers` like this^/```^/get-headers: func [/local o] [^/^-either equal? system/platform 'Windows ^/^-^-[call/wait/output "set" o: ""] ^/^-^-[call/wait/output "printenv" o: ""]^/^-http-headers: parse-headers o^-^/]^/```}
    sent: "2017-08-22T20:14:00.406Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599c8f05614889d475776535"
    text: {@rebolek I am not use to github, so I prefer not to edit anything... But here is the code I added  in my local copy to reduce the number of environment variables:^/```^/^-keys: keys-of raw^/^-while [not tail? keys] [^/^-^-if not parse key: first keys [["HTTP_" | "HTTPS_" | "AUTH_" | "CERT_"] thru end] [^/^-^-^-raw/:key: none^/^-^-]^/^-^-keys: next keys^/^-]^/```^/I added it just before the line `headers/other-headers: raw`. It works fine.^/BTW, if you use `func` to define a function, I would suggest to define your local variables with `/local`, otherwise, the global context gets polluted with variables...^/Regards}
    sent: "2017-08-22T20:07:33.516Z"
    editedAt: "2017-08-22T20:08:28.200Z"
    v: 2
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599c723076a757f808d0ebb9"
    text: {@fvanzeveren why not, let's try it and see what's best. Feel free to do a pull request once you have your code ready.}
    sent: "2017-08-22T18:04:32.126Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599c71a1c101bc4e3a461566"
    text: {@rebolek I would rather suggest to parse the remaining`raw` map and remove all entries not starting with `HTTP_` . I will try it now. Good way to deepen my understanding of Red :)^/}
    sent: "2017-08-22T18:02:09.477Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599c6ebec101bc4e3a4608b8"
    text: {@fvanzeveren it needs to be rewritten using Red's `get-env` for required vars only.}
    sent: "2017-08-22T17:49:50.681Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599c675f76a757f808d0bd15"
    text: {@rebolek Ok, it seems to work with `set` but I thing is not secure because all environment variables are then readable...}
    sent: "2017-08-22T17:18:23.527Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599c6561a7b406262db6c9ca"
    text: {Perhaps not fair to criticize the JS live-code version too much, as raw speed was his goal. As soon as you have to account for DPI, you need devices available, and to test on them, etc. Good to have in the spec, though.}
    sent: "2017-08-22T17:09:53.943Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c64df9acddb2407ba008f"
    text: {@CodingFiend_twitter, thanks for such a detailed spec. If you have a site, or github repo with sound resources, that would make it easier for people to contribute alternate implemenations, in Red or other langs. Your spec will scroll off here very quickly, and be lost to time.}
    sent: "2017-08-22T17:07:43.676Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c64bd614889d475769bc2"
    text: {@fvanzeveren hi, looking at the code, it seems that the problem is in `get-header`, where I call `printenv`. I am on phone now, so I can't improve it. So you need to wait or try to fix it yourself :)}
    sent: "2017-08-22T17:07:09.248Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599c63dfee5c9a4c5fea8358"
    text: {:point_up: [August 22, 2017 1:21 AM](https://gitter.im/red/red?at=599bdb6f578b44a046d5e869) Looks very slick and modern @qtxie. Maybe we need a wiki page for code sharing, so people know where to put things, what should go where, etc. Between official Team Red repos, community, RBE, etc., there are already a lot of places, which may have different requirements, for consistency. Looks really nice though. +1}
    sent: "2017-08-22T17:03:27.088Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c6346ba0f0f6e38d06126"
    text: {@rebolek ^/Hi, I am trying to use your http-tools.red library with this little cgi script under IIS 10:^/```^/Red [ ^/^-Title: "CGI Options"^/]^/^/do %http-tools.red^/^/print "Content-Type: text/plain^^/"^/print mold http-headers ^/```^/This result in this:^/```^/make object! [^/    server-software: none^/    server-name: none^/    gateway-interface: none^/    server-protocol: none^/    server-port: none^/    request-method: none^/    path-info: none^/    path-translated: none^/    script-name: none^/    query-string: none^/    remote-host: none^/    remote-addr: none^/    auth-type: none^/    remote-user: none^/    remote-ident: none^/    content-type: none^/    content-length: none^/    user-agent: none^/    other-headers: #()^/]^/```^/while it should look like the rebol version:^/```^/make object! [^/    server-software: "Microsoft-IIS/10.0"^/    server-name: "www.redber.net"^/    gateway-interface: "CGI/1.1"^/    server-protocol: "HTTP/1.1"^/    server-port: "80"^/    request-method: "GET"^/    path-info: "/cgi-bin/cgi-options.r"^/    path-translated: "C:\www\redber\cgi-bin\cgi-options.r"^/    script-name: "/cgi-bin/cgi-options.r"^/    query-string: "a=12"^/    remote-host: "127.0.0.1"^/    remote-addr: "127.0.0.1"^/    auth-type: ""^/    remote-user: ""^/    remote-ident: none^/    Content-Type: ""^/    content-length: "0"^/    other-headers: ["HTTP_CONNECTION" "Keep-Alive" "HTTP_ACCEPT" "text/html, application/xhtml+xml, image/jxr, */*" "HTTP_ACCEPT_ENCODING" "gzip, deflate" "HTTP_ACCEPT_LANGUAGE" "fr-FR,fr-BE;q=0.7,fr;q=0.3" "HTTP_HOST" "www.redber.net" "HTTP_USER_AGENT" {Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063}]^/]^/```^/I guess I am missing something when using your library...^/Hope you can help.^/Cheers^/}
    sent: "2017-08-22T17:00:54.546Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599c3e532723db8d5ecf0a64"
    text: {@Bitsoma I use it on Linux Apache without problems, but I am using manually compiled console, not sure about precompiled version.}
    sent: "2017-08-22T14:23:15.194Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599c38562723db8d5ecee970"
    text: "I  forgot to mention: Apache, Windows, Red 063.^/"
    sent: "2017-08-22T13:57:42.528Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599c3684162adb6d2e2141ce"
    text: {However it doesn't work. The server log gives 504 timeout. Any ideas? Rebol scripts just work fine.^/^/}
    sent: "2017-08-22T13:49:56.153Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599c3626210ac26920ad5836"
    text: {I tried to use Red for CGI programming as described in https://github.com/red/red/wiki/Using-Red-as-CGI }
    sent: "2017-08-22T13:48:22.822Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599c2e28c101bc4e3a44c29f"
    text: {I don't think it demonstrates anything related to programming}
    sent: "2017-08-22T13:14:16.391Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "599c2df52723db8d5eceb743"
    text: "though I won't do a live streaming coding video"
    sent: "2017-08-22T13:13:25.529Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599c287ca7b406262db59489"
    text: {@maximvl make it shorter as possible, show the Red's power!}
    sent: "2017-08-22T12:50:04.538Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "599c108fbc46472974ad718c"
    text: "@qtxie So cool!"
    sent: "2017-08-22T11:07:59.917Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "599c0c59210ac26920ac982e"
    text: "@qtxie Nice! Could be useful."
    sent: "2017-08-22T10:50:01.906Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599bf675ee5c9a4c5fe8693c"
    text: {@CodingFiend_twitter sounds fun, I'll try on the weekend}
    sent: "2017-08-22T09:16:37.150Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599be37376a757f808ce41dd"
    text: {@CodingFiend_twitter are you sure that it's a good idea to bombardier us with wall of text like that? :confused: looks like an interesting challenge though, but we don't have any sound libs in Red right now, so, no beeping ;)}
    sent: "2017-08-22T07:55:31.385Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599be289c101bc4e3a4360ab"
    text: {If you can do it under an hour you are very good indeed.  Should come in under 800 words.}
    sent: "2017-08-22T07:51:37.467Z"
    v: 1
    author: "5784aa88c2f0db084a229500"
) #(
    id: "599be23b76a757f808ce3bf9"
    text: {the lack of sizing calculations in the JS version made it hard-coded to specific resolutions which is unrealistic given the huge range of devices today (80 to 800 dpi!), and also without a score it is not nearly as much fun. Also he didn't have a pause key, which is crucial. He also didn't have sound effects which are crucial, and would have shown a very ugly side of JS.}
    sent: "2017-08-22T07:50:19.499Z"
    editedAt: "2017-08-22T07:51:18.298Z"
    v: 2
    author: "5784aa88c2f0db084a229500"
) #(
    id: "599be1b99acddb2407b7922d"
    text: " @qtxie Nice :)"
    sent: "2017-08-22T07:48:09.258Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599be1b0614889d47574240f"
    text: {take the snake game challenge. PROGRAMMING CHALLENGE^/A Snake Game  / basic version^/^/specification by Edward de Jong, version 1^/^/The game runs at 6 frames per second, and the snake moves one cell per frame.  If the snake moves into the apple the length is increased by one, a crunch sound is emitted, and the apple is moved to a new cell. If the snake crosses over itself, then a beep is emitted and the part of the snake from that cell onward is erased. The snake wraps around the board in all four directions.^/^/The playing board, drawn solid black, is subdivided into square cells of 42 points at the screen resolution. Since the window size will not be an even number of cells, the cells are stretched slightly so that all screen space is used by the grid. At the start, the snake is set to length 1 and positioned at cell (4,4). The apple, which is the goal of the snake to eat, is one cell drawn as a circle in HTML color crimson, and is placed at a random location on the board. ^/^/At the start of the game the snake is paused. As soon as an arrow key is pressed, the snake begins to move in that direction, and leaves a trail behind. Initially the trail is limited to 5 cells total. If the snake moves into the Apple, the snake's length grows by 1. Once the apple is eaten, it is immediately respawned into a random new cell. The apple may end up on occasion placed inside the body of the snake, however, the snake only is considered to have eaten the apple if the head moves onto the apple.  The snake cells are drawn as 40 point squares with 2pts on the right and bottom to create a separation. The snake cells are drawn in alternating colors lime green and lawn green. The head of the snake is drawn as a rounded rectangle with a corner radius of 8 pt and a border of 2 pt dark green. The remaining cells of the snake are drawn as a rounded rectangle with 2 pt corner radius. If the snake cells had to be reduced from 42 pt due to window size limitations, then the radii and border thickness are reduced accordingly. ^/^/The only input to the game is the keyboard. The arrow keys change the direction of the snake, however, to prevent frustration the player is not allowed to move the snake head back into itself. So if the snake is traveling east, any attempted movement west is ignored. A command to move in the direction already in motion is ignored. To permit fast maneuvers the direction inputs are queued, so that the player can do WEST - SOUTH - EAST to perform a 180 degree turn in 3 consecutive frames.  Pressing the space bar pauses or resumes the game.^/^/As the snake grows and shrinks, the current size and high score is reported at the top of the screen as a topmost layer at 30% opacity, centered in 28 pt black text, for example: "8   high:22".^/^/The default starting window size is 700 x 700 interior pixels. If the user resizes the window, the game is reset back to the starting state.^/^/Note: since the window size will not usually be an even multiple of 42 points, the cells are slightly stretched to not have any dead space leftover.  If the given window size is too small to accommodate at least 10 cells in both directions, the cellsize is reduced. So the program must first figure out how many the proper cell size such that at least 10 cells can fit in the X and Y directions, but no larger than 42 pts in size, then divide the width and height by the number of cells in each direction, and then pad the cells by the leftover amount so that the cell grid fills the space perfectly.^/^-^/External resources:^/^-crunch.mp3 sound ^/^-beep.mp3 sound^/^-you are given a window size in pixels, and the resolution of the device.^/o^-device resolution might vary from 86 dpi (desktop), to 500+ dpi (mobile)^/^/An example of a subset of this game, written in real time in under 5 minutes in JavaScript can be seen on youtube at:  https://www.youtube.com/watch?v=xGmXxpIj6vs^/^/The 5 minute coding example has no scaling of the grid, doesn't keep score, and a few other things, but does show impressive coding speed.^/^/^/^/}
    sent: "2017-08-22T07:48:00.245Z"
    editedAt: "2017-08-22T07:48:50.896Z"
    v: 2
    author: "5784aa88c2f0db084a229500"
) #(
    id: "599be06b578b44a046d5fec9"
    text: {@qtxie oooh :smile: anyway, that's a good start for package managing site}
    sent: "2017-08-22T07:42:35.467Z"
    editedAt: "2017-08-22T07:42:51.743Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599be036ba0f0f6e38cde042"
    text: "It's fake data for now. ;-)"
    sent: "2017-08-22T07:41:42.157Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "599bdc2f210ac26920abc1fe"
    text: {@qtxie nice! Although none of the github links in Scripts/Libraries seems to work (and they look suspicious) :(}
    sent: "2017-08-22T07:24:31.428Z"
    editedAt: "2017-08-22T07:25:46.013Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599bdb6f578b44a046d5e869"
    text: {Hi, guys, I made a website for share red code last weekend.^/http://publisher-deserts-78166.netlify.com/^/It's a demo site. If you think it's useful, I'll polish it. :smile: }
    sent: "2017-08-22T07:21:19.655Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "599bd39fee5c9a4c5fe7cb85"
    text: {Good read. Just thinking about looking at some of the areas of research makes my head hurt. }
    sent: "2017-08-22T06:47:59.857Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599bd030bc46472974ac5560"
    text: {I hadn't seen it @geekyi, thanks! Going to check it out.}
    sent: "2017-08-22T06:33:20.925Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599bd00d2723db8d5ecd06e8"
    text: {@geekyi yes, also PMed a link to @dockimbel a couple of days ago, highly insightful}
    sent: "2017-08-22T06:32:45.395Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599bb82ba7b406262db3aff5"
    text: {>["After memory safety, what do you think is the next big step for compiled languages to take?"](http://graydon2.dreamwidth.org/253769.html)^/^/Graydon Hoare (creator of rust), writes about language futures; talking about lots of different concepts.^/Anyone else read about it? [hacker news discussion](https://news.ycombinator.com/item?id=15051645)}
    sent: "2017-08-22T04:50:51.670Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599b52c19acddb2407b58121"
    text: "btw offical repos uses ```red```"
    sent: "2017-08-21T21:38:09.575Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "599b523fba0f0f6e38cbc5d8"
    text: "lets use both! :smile: "
    sent: "2017-08-21T21:35:59.286Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "599b4d859acddb2407b56a59"
    text: {btw, should we label our projects as `red` or as `redlang`?}
    sent: "2017-08-21T21:15:49.750Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599b4d4d210ac26920a9b300"
    text: {also, recently @honix cooked up [painting app](https://github.com/honix/Redraw) and just yesterday @maximvl revealed [shell dialect](https://gitlab.com/maxvel/red-shell-dialect/tree/master)}
    sent: "2017-08-21T21:14:53.081Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599b4b682723db8d5ecb1bd8"
    text: "@9214  That's cool stuff :)"
    sent: "2017-08-21T21:06:48.077Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "599b4b0f162adb6d2e1d8543"
    text: {from what I've saw, there're also @ldci's [RedCV](https://github.com/ldci/redCV)  and @koba-yu's [RedOCR](https://github.com/koba-yu/RedOCR)}
    sent: "2017-08-21T21:05:19.408Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599b4970ee5c9a4c5fe5c997"
    text: {which boils down to the creation of a tiny hash decoder with nice looking minimal GUI}
    sent: "2017-08-21T20:58:24.887Z"
    editedAt: "2017-08-21T21:00:58.812Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599b49479acddb2407b5584e"
    text: {@AlexanderBaggett I'm currently writing blog post entry about some 13-year-old mystery from my childhood which I solved with Red (involves RE stuff, a pinch of cryptography and bit-twiddling trickery) ;)}
    sent: "2017-08-21T20:57:43.213Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599b48c176a757f808cc06f0"
    text: {What kinds of projects are people using Red for currently?}
    sent: "2017-08-21T20:55:29.576Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "599b36bc210ac26920a9508d"
    text: {:point_up: [August 21, 2017 3:31 AM](https://gitter.im/red/red?at=599aa883a7b406262daf2dc5) +1 Bolek. Really looks nice.}
    sent: "2017-08-21T19:38:36.670Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599b1ad1bc46472974a98a4b"
    text: {@fvanzeveren getting `http-headers` and `send-request` function is basically all what it does. The rest is some support, HTML form encoding and such stuff.}
    sent: "2017-08-21T17:39:29.644Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599b1a4c76a757f808cb3d0e"
    text: {@rebolek for now, I successfully displayed the `http-headers` object from a red cgi script... A good start to play around.}
    sent: "2017-08-21T17:37:16.874Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599b189176a757f808cb34d3"
    text: {@fvanzeveren No, I suck at documentation :book: :cry: I think it should be pretty self-explaining, but I will try to write something tomorrow.}
    sent: "2017-08-21T17:29:53.073Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599b1801162adb6d2e1c9b4a"
    text: {@rebolek ^/Is there some tutorials on how to use your `http-tools.red` library? ^/Thank you.}
    sent: "2017-08-21T17:27:29.319Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599ae9c4a7b406262db0654c"
    text: {@bear256 https://gitter.im/red/red/welcome is best for asking newbie questions^/http://www.red-by-example.org/vid.html for *VID* tutorials,^/https://github.com/red/red/wiki#beginners-guides for others^/}
    sent: "2017-08-21T14:10:12.940Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599ada4ec101bc4e3a3f1195"
    text: "Thanks for the info!"
    sent: "2017-08-21T13:04:14.802Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599ada07162adb6d2e1b68d6"
    text: {@Bitsoma https://github.com/red/red/wiki/Using-Red-as-CGI}
    sent: "2017-08-21T13:03:03.070Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ad9e12723db8d5ec91d8a"
    text: {Hello, I am wondering whether it's possible to use Red as a CGI-Script like it was possible with Rebol? Thanks in advance for the answer.}
    sent: "2017-08-21T13:02:25.279Z"
    v: 1
    author: "5703a74e187bb6f0eaddf05e"
) #(
    id: "599ab030162adb6d2e1a9fbd"
    text: {@maximvl  There are docs for text-box at https://github.com/qtxie/red/wiki/Text-box!-Usage}
    sent: "2017-08-21T10:04:32.824Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599aafdfa7b406262daf4e7b"
    text: "could you give an example how to use it?"
    sent: "2017-08-21T10:03:11.184Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599aafd7ee5c9a4c5fe2e5e3"
    text: "@rebolek I don't see `text-box!` in the docs"
    sent: "2017-08-21T10:03:03.623Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599aade176a757f808c92ef9"
    text: {I have rich-text widget (limited to monospace font), but `text-box!` solves this problem much better, so I am not developing it anymore.}
    sent: "2017-08-21T09:54:41.812Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599aad9cee5c9a4c5fe2da41"
    text: {@rebolek btw, do we have something like rich-text widget with styles, etc?}
    sent: "2017-08-21T09:53:32.190Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599aaaf1bc46472974a76220"
    text: {@pekr Thanks! The above graph is generated from flat block of values, the graph style is still work in progress (ie y-labels are slightly wrong and x-labels are just nonsense), so it needs some work before releasing. GC is such a problem for graph, it's not redrawn so often as text-table, where you can scroll.}
    sent: "2017-08-21T09:42:09.208Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599aaa69a7b406262daf3673"
    text: "@rebolek looks awesome"
    sent: "2017-08-21T09:39:53.043Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599aaa3f614889d4756efc20"
    text: {btw - any expected date of the data grid release? Or will you wait for the GC release first?}
    sent: "2017-08-21T09:39:11.159Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599aaa1cba0f0f6e38c8a8e5"
    text: {@rebolek  very nice! Any example of the code (dialect, if any), which created above output? Would create a post on FB :-)}
    sent: "2017-08-21T09:38:36.030Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599aa8bfee5c9a4c5fe2c2bf"
    text: "Yes, very nice. "
    sent: "2017-08-21T09:32:47.517Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599aa889210ac26920a6b66a"
    text: {[![graph.png](https://files.gitter.im/red/red/OdTh/thumb/graph.png)](https://files.gitter.im/red/red/OdTh/graph.png)}
    sent: "2017-08-21T09:31:53.443Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599aa883a7b406262daf2dc5"
    text: "Custom styles in Draw are fun"
    sent: "2017-08-21T09:31:47.563Z"
    editedAt: "2017-08-21T09:31:53.342Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599aa7ab162adb6d2e1a7c50"
    text: "@rebolek Sure, thanks"
    sent: "2017-08-21T09:28:11.006Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599aa784578b44a046d0bad7"
    text: {@bear256 see *graphical programming* here http://www.rebol.com/docs/docs.html}
    sent: "2017-08-21T09:27:32.738Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "599aa751162adb6d2e1a7b39"
    text: "Yes, let me find some links..."
    sent: "2017-08-21T09:26:41.506Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599aa642bc46472974a749cd"
    text: "@rebolek For Rebol2/View?"
    sent: "2017-08-21T09:22:10.183Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599aa62376a757f808c909eb"
    text: {@bear256 there are some docs for Rebol/View, Red is too young for good docs :)}
    sent: "2017-08-21T09:21:39.700Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599aa61c210ac26920a6aa3a"
    text: "@honix  Yes, I also used."
    sent: "2017-08-21T09:21:32.067Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599aa5f8ba0f0f6e38c8967a"
    text: {@bear256 i found ```probe some-face``` useful sometimes}
    sent: "2017-08-21T09:20:56.670Z"
    editedAt: "2017-08-21T09:23:04.798Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "599a9f81a7b406262daf03f1"
    text: {@rebolek I love Red/Rebol, but seems to hardly used, especially there is not any completed tutorial to explain these concepts & data structures for something like face.}
    sent: "2017-08-21T08:53:21.632Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599a9efa76a757f808c8e624"
    text: "You're welocme."
    sent: "2017-08-21T08:51:06.285Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599a9eb7ba0f0f6e38c87486"
    text: "@rebolek Thanks for your helps!"
    sent: "2017-08-21T08:49:59.807Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599a9e96ee5c9a4c5fe2939f"
    text: {@bear256 if you have any questions about custom styles, feel free to ask me}
    sent: "2017-08-21T08:49:26.428Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599a82a7578b44a046d00d66"
    text: {@pekr, I have not been able to use FastCGI so far... So you may be right and rebol uses a new console every time... But why this flag causes a problem for red and not for rebol?}
    sent: "2017-08-21T06:50:15.698Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599a81db578b44a046d008cc"
    text: {But Rebol imo uses new console for each invocation too. I can't imagine, how would it work otherwise, unless the interpreter supports FastCGI mode?}
    sent: "2017-08-21T06:46:51.596Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599a80929acddb2407b1b161"
    text: { @endo64 ^/Thank you very much!!! I was just missing the flag "Use new console for each invocation"! ^/I am just wondering why `Red`  needs this flag to be `true`, while `rebol` does not. I suspect that setting this flag to `true` has an advert impact on peeformance :worried:^/François}
    sent: "2017-08-21T06:41:22.151Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599a7fb3210ac26920a5f0cf"
    text: "@rebolek  Sure, thanks!"
    sent: "2017-08-21T06:37:39.298Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599a7f9ca7b406262dae6d1e"
    text: {No tutorials afaik, but you can learn from the scroller style, it is relatively easy}
    sent: "2017-08-21T06:37:16.919Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599a7c68a7b406262dae5b7a"
    text: {Any tutorials for creating custom face in vid/draw?}
    sent: "2017-08-21T06:23:36.880Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599a7b10c101bc4e3a3d5c92"
    text: "@rebolek  Thanks ！"
    sent: "2017-08-21T06:17:52.637Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599a7af9ba0f0f6e38c7c5d0"
    text: {@bear256 see my Gitter client https://github.com/rebolek/gritter for scroller style, it is in https://github.com/rebolek/gritter at line 161}
    sent: "2017-08-21T06:17:29.237Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599a7a9f76a757f808c83dc9"
    text: {@geekyi Correct rectangle should be around `Add Module Mapping`, I'll take correct screenshots and put them into wiki.}
    sent: "2017-08-21T06:15:59.429Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a7a9c162adb6d2e19aef2"
    text: {@greggirwin  OK, but I saw the area has the scroller. And could you post the link of  @rebolek  own implementation.}
    sent: "2017-08-21T06:15:56.654Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599a7a132723db8d5ec7542d"
    text: {@bear256, there is no standard scroller style in Red yet, though we hope to see it soon. @rebolek  has written his own, which is the only one I know of at this point. }
    sent: "2017-08-21T06:13:39.966Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599a792e9acddb2407b1904d"
    text: {@Endo, thanks for figuring that out and adding it to the wiki.}
    sent: "2017-08-21T06:09:50.860Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599a5a1e210ac26920a56a3a"
    text: {Hello, I'm a newbie for using Red. Anybody knows, how to create a scroller for a panel or other face and show it? Thanks}
    sent: "2017-08-21T03:57:18.270Z"
    v: 1
    author: "565bf21916b6c7089cbca986"
) #(
    id: "599a24afbc46472974a54a54"
    text: {@endo64  :point_up: [August 21, 2017 2:47 AM](https://gitter.im/red/red?at=599a0368578b44a046ce4012) did you mean to put a rectangle around `Add Module Mapping` actually? Just wondering, because I think your screenshots are nice and should be put in wiki too!}
    sent: "2017-08-21T00:09:19.317Z"
    editedAt: "2017-08-21T00:09:30.495Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "599a0bc8ba0f0f6e38c63956"
    text: {@rebolek  @fvanzeveren I edit the wiki accordingly. https://github.com/red/red/wiki/Using-Red-as-CGI}
    sent: "2017-08-20T22:23:04.617Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a0864210ac26920a44c3b"
    text: {You can also use `red.exe` if you set `Executable` to `C:\inetpub\wwwroot\red.exe --cli %s` no need to use compiled exe. But it still looks safer to me, I can be sure that it will not compile the console.}
    sent: "2017-08-20T22:08:36.614Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a0541bc46472974a4d565"
    text: {[![image.png](https://files.gitter.im/red/red/0BWE/thumb/image.png)](https://files.gitter.im/red/red/0BWE/image.png)}
    sent: "2017-08-20T21:55:13.955Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a04c7210ac26920a43f98"
    text: {Key points are:^/* You have to use the compiled red console executable (the one in `programdata`) just rename `console-2017-8-15-58189.exe` to `redconsole.exe`, put somewhere IIS can reach and IUSR account can execute it.^/* `Use New Console For Each Invocation` under `CGI` should be set to `true` otherwise it fails with `502.2 - Bad Gateway. SetConsoleTitle failed!`^/* Don't forget to put `%s` at the end of `Executable` settings (you may need to double quote it if your scripts are in a path with spaces: `redconsole.exe "%s"`)}
    sent: "2017-08-20T21:53:11.598Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a03c3614889d4756c670c"
    text: {[![image.png](https://files.gitter.im/red/red/VbyX/thumb/image.png)](https://files.gitter.im/red/red/VbyX/image.png)}
    sent: "2017-08-20T21:48:51.197Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a03739acddb2407aff62a"
    text: {[![image.png](https://files.gitter.im/red/red/Qx9V/thumb/image.png)](https://files.gitter.im/red/red/Qx9V/image.png)}
    sent: "2017-08-20T21:47:31.892Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a0368578b44a046ce4012"
    text: {Got it! I made it work. Here is how: (IIS 8.5 on Win8.1 x64)}
    sent: "2017-08-20T21:47:20.484Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a0233c101bc4e3a3bb0c7"
    text: {So I think, IIS expects a certain output but Red console outputs some text which leads to error.}
    sent: "2017-08-20T21:42:11.076Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a01f9ba0f0f6e38c61581"
    text: {@fvanzeveren I tested compiled red.exe to run as CGI on IIS, I get `502.2 - Bad Gateway. SetConsoleTitle failed!`.^/Then I set `Use New Console For Each Invocation` to `true` under `CGI` and I got `502.2 - Bad Gateway. --== Red 0.6.3 ==-- Type HELP for starting information. `}
    sent: "2017-08-20T21:41:13.380Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5999e912578b44a046cdd7e8"
    text: {ok. this works ```> red-063.exe -t Linux -dlib -o libRed.so libRed.red``` maybe its what i want..}
    sent: "2017-08-20T19:54:58.496Z"
    editedAt: "2017-08-20T19:57:16.576Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5999e214c101bc4e3a3b2cb0"
    text: "@powerconnector @meijeru Thanks. "
    sent: "2017-08-20T19:25:08.012Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5999e1ae9acddb2407af6a97"
    text: {@honix AFAIK first major version of Android support will be delivered in `0.6.4` or `0.6.5`}
    sent: "2017-08-20T19:23:26.690Z"
    editedAt: "2017-08-20T19:23:40.975Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5999e1529acddb2407af694c"
    text: {```> red-063.exe -t Android -c hello.red``` with super easy ```print "hello"``` starts to compile, but stuck with this ```... *** Compilation Error: invalid path value: image/encode ...```}
    sent: "2017-08-20T19:21:54.329Z"
    editedAt: "2017-08-20T19:22:28.582Z"
    v: 3
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5999e04ea7b406262dac2cc7"
    text: {sadly there is no info about cross libRed. but i think it is most wanted feature}
    sent: "2017-08-20T19:17:34.375Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5999df93c101bc4e3a3b22ab"
    text: {```^/> red-063.exe -t Android build libRed^/Cannot access source file: D:\MilkyWay\Programming\red\build^/```}
    sent: "2017-08-20T19:14:27.777Z"
    editedAt: "2017-08-20T19:14:55.870Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5999df77ba0f0f6e38c59401"
    text: "@honix yes, just use `-t <target-system>`"
    sent: "2017-08-20T19:13:59.610Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5999df43162adb6d2e1775da"
    text: "hey, it is possible to cross-compile libRed?"
    sent: "2017-08-20T19:13:07.349Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5999d8cf614889d4756bbb66"
    text: {@rebolek^/Actually, setting up rebol as CGI with IIS was painless... I do not understand why the same procedure does not work with Red :worried: ^/}
    sent: "2017-08-20T18:45:35.499Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5999cf5ea7b406262dabeece"
    text: {@fvanzeveren I have no experience with IIS, setting up Red as CGI in Apache was very easy, see https://github.com/red/red/wiki/Using-Red-as-CGI , if you can get it working under IIS, please add your experience to that wiki.}
    sent: "2017-08-20T18:05:18.884Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5999ce48ba0f0f6e38c54cda"
    text: {Hello,I am trying to configure IIS10 to execute cgi scripts using Red. I did it successfully with Rebol. So for red, I added a module mapping for *.red files with the following executable: `C:\www\red.exe --cli %s`. But I get an error message when trying to load the simple file^/```^/Red[]^/print "Content-type: text/html^^/"^/print rejoin ["Hello world from Red " system/version]^/```^/The server displays:^/```^/Erreur HTTP 502.2 - Bad Gateway^/L'application CGI spécifiée n'a pas renvoyé le jeu complet d'en-têtes HTTP. Les en-têtes effectivement retournés sont "".^/```^/Any idea what is going wrong?^/^/Thank you.^/}
    sent: "2017-08-20T18:00:40.407Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5999c1f3ee5c9a4c5fdf4679"
    text: "likewise: to `&&` corresponds `all`"
    sent: "2017-08-20T17:08:03.654Z"
    editedAt: "2017-08-20T17:08:19.448Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5999c06cba0f0f6e38c51156"
    text: {@unchartedworks  you could do `any [ true do [print "OK" true]]` }
    sent: "2017-08-20T17:01:32.762Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "5999b8a0162adb6d2e16d63b"
    text: {`(do [print "OK" true])` shouldn’t be evaluated, however it was evaluated.}
    sent: "2017-08-20T16:28:16.751Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5999b847210ac26920a3108a"
    text: {Is there any fuction/operator which works like the || in the other language?}
    sent: "2017-08-20T16:26:47.233Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5999b807162adb6d2e16d37f"
    text: {```^/true or (do [print "OK" true])^/```^/```^/OK^/== true^/```}
    sent: "2017-08-20T16:25:43.005Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5999b6b6162adb6d2e16cfda"
    text: {To be quite sure, doing `save mold :f` is adding an extra pair of quotes, so it isn't really a solution.We have to wait for the bug to be corrected.}
    sent: "2017-08-20T16:20:06.689Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599990ee2723db8d5ec3cce5"
    text: {I have now checked the source, and there IS a bug, see #2990 }
    sent: "2017-08-20T13:38:54.022Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
)#(
    id: "59998936578b44a046cc3748"
    text: {Though it is not clear to me if the need for explicit *molding* is a bug.}
    sent: "2017-08-20T13:05:58.963Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59998905210ac26920a24c93"
    text: {@endo64 On your recent question: `save mold :f` will also work.}
    sent: "2017-08-20T13:05:09.836Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599981fd80d90ca0241b5270"
    text: {Anyway, feel free to ask as many questions as needed. `red/help` room might be a better place for that, especially if you have many code snippets to share.}
    sent: "2017-08-20T12:35:09.957Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5999805f80d90ca0241b4c28"
    text: {The View engine and the face objects (used to represent graphic components) are already highly reactive, so there is no need to add any reactor there. The general reactive framework (based on `reactor!` and `deep-reactor!`) is there to cover non-GUI related reactive programming needs (like the reactive rules in the regex to Parse compiler written by @toomasv) . Well, it certainly would be easier with more than the few docs we only have for now.}
    sent: "2017-08-20T12:28:15.595Z"
    editedAt: "2017-08-20T12:32:51.606Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59997f8ec101bc4e3a399569"
    text: {@dockimbel Thanks a bunch. This is all very confusing. I'll keep learning, I'm sure. Red seems to be that level of clever  that makes me feel quite dim sometimes. }
    sent: "2017-08-20T12:24:46.025Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "59997f1c578b44a046cc0bf1"
    text: {View faces (`face!` objects) are deep reactors already (they use a specialized handler, more complex than the one used by the `deep-reactor!` object).}
    sent: "2017-08-20T12:22:52.042Z"
    editedAt: "2017-08-20T12:23:36.832Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59997ea72723db8d5ec3824d"
    text: {@radebrecht `react` requires at least one reactive source in its argument block. Reactive sources are identified among `path!` values, but there is none in the above argument block. Moreover, you don't need to wrap your VID code with a reactor if the purpose is to make the `text-list` react on changes of block `l`:^/```lisp^/l: ["qwe" "asd" "yxc"]^/view [^/^-text-list data l^/^-button "Add" [append l copy random "abc"]^/]^/```}
    sent: "2017-08-20T12:20:55.142Z"
    editedAt: "2017-08-20T12:22:22.561Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59997d3fc101bc4e3a398e29"
    text: {While we're at it:^/```^/a: make reactor! [^/   l: ["qwe" "asd" "yxc"]^/   win: layout [^/     text-list react [ face/data: l ]^/   ]^/]^/^/view a/win^/```^/opens with an empty list. So, how do I get a reaction inside a `layout` block listening to changes in the outside reactor?}
    sent: "2017-08-20T12:14:55.538Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "59997c9e578b44a046cc0130"
    text: "Thanks!"
    sent: "2017-08-20T12:12:14.137Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59997c99210ac26920a21a15"
    text: {@dockimbel  @radebrecht https://github.com/red/red/issues/2989}
    sent: "2017-08-20T12:12:09.096Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59997c829acddb2407add30b"
    text: {So shall I open an issue in https://github.com/red/red/issues or how does the ticket thing work?}
    sent: "2017-08-20T12:11:46.172Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "59997c1aee5c9a4c5fde2004"
    text: {@toomasv It should work with setting the word too (without the `self/` prefix). Not sure why it does not, so a ticket about that use-case would be welcome.}
    sent: "2017-08-20T12:10:02.157Z"
    editedAt: "2017-08-20T12:10:14.087Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59997a8d76a757f808c45344"
    text: {@dockimbel But why is it working with `self` only? That is, from inside functions.}
    sent: "2017-08-20T12:03:25.604Z"
    editedAt: "2017-08-20T12:04:39.266Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59997a2b9acddb2407adca10"
    text: {@toomasv Modification of the block referenced by `l` should trigger a reaction in a `deep-reactor!`. At first look, I can't tell  if that was left for later implementation, or if it is regression.}
    sent: "2017-08-20T12:01:47.036Z"
    editedAt: "2017-08-20T12:02:22.913Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59997949a7b406262daa8cdc"
    text: {@dockimbel It is similar with `reactor!` too, as I discovered while working on `regex`. I.e. from inside functions you have to assign values with `self` to trigger reaction.}
    sent: "2017-08-20T11:58:01.434Z"
    editedAt: "2017-08-20T11:59:43.864Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "599978f1bc46472974a29cb3"
    text: {Good answer from @toomasv. Though, I'm not sure why such code pattern would not trigger the reaction. I think it is worth a ticket, so I can give it a deeper look later.}
    sent: "2017-08-20T11:56:33.504Z"
    editedAt: "2017-08-20T11:56:41.862Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5999780a80d90ca0241b2c70"
    text: "@radebrecht You are welcome!"
    sent: "2017-08-20T11:52:42.982Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "599977f99acddb2407adc0ba"
    text: "That does it! A thousand thanks. "
    sent: "2017-08-20T11:52:25.230Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "599977b9bc46472974a29781"
    text: {@radebrecht Try `f: func [txt ] [ self/l: append l txt ]`}
    sent: "2017-08-20T11:51:21.751Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5999764c614889d4756a26ca"
    text: {Here's the code solo, in case you want to test it yourself:^/```^/a: make deep-reactor! [^/   l: ["qwe" "asd" "yxc"]^/   q: is [ collect [ foreach n l [ keep copy/part n 1 ] ] ]^/   f: func [txt ] [ l: append l txt ]^/]^/print a^/^/a/l: append a/l "rtz"^/print a^/a/f "problem"^/print a^/```}
    sent: "2017-08-20T11:45:16.736Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "599975c4a7b406262daa7fa3"
    text: {@dockimbel Yep, thought so myself. Doesn't work, though. I'll update the example}
    sent: "2017-08-20T11:43:00.824Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "59997576bc46472974a28cbb"
    text: {@radebrecht You need to use a `deep-reactor!` in that case.}
    sent: "2017-08-20T11:41:42.743Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59997551162adb6d2e15c10a"
    text: {reactors seem to ignore changes effected via functions^/```^/>> a: make deep-reactor! [^/[       l: ["qwe" "asd" "yxc"]^/[       q: is [ collect [ foreach n l [ keep copy/part n 1 ] ] ]^/[       f: func [txt ] [ l: append l txt ]^/[    ]^/== make object! [^/    l: ["qwe" "asd" "yxc"]^/    q: ["q" "a" "y"]^/    f: func [txt][l: app...^/>> print a^/l: ["qwe" "asd" "yxc"]^/q: ["q" "a" "y"]^/f: func [txt][l: append l txt]^/>> ^/>> a/l: append a/l "rtz"^/== ["qwe" "asd" "yxc" "rtz"]^/>> print a^/l: ["qwe" "asd" "yxc" "rtz"]^/q: ["q" "a" "y" "r"]^/f: func [txt][l: append l txt]^/>> a/f "problem"^/== ["qwe" "asd" "yxc" "rtz" "problem"]^/>> print a^/l: ["qwe" "asd" "yxc" "rtz" "problem"]^/q: ["q" "a" "y" "r"]^/f: func [txt][l: append l txt]^/```^/Am I misunderstanding something here or should the call to `a/f` trigger the reaction as well? }
    sent: "2017-08-20T11:41:05.341Z"
    editedAt: "2017-08-20T11:43:44.317Z"
    v: 3
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "5999740c614889d4756a2058"
    text: {I know that it is possible, just curious about the `save` issue.}
    sent: "2017-08-20T11:35:40.184Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59997314614889d4756a1c83"
    text: {@endo64 ^/```text^/>> f: func [a][a * 2]^/== func [a][a * 2]^/>> write %file.red :f^/>> read %file.red^/== "func [a][a * 2]"^/```}
    sent: "2017-08-20T11:31:32.108Z"
    editedAt: "2017-08-20T11:31:55.210Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5999725fa7b406262daa7249"
    text: {Is this a know bug (or not implemented yet)?^/```^/>> f: func [a] [a * 2]^/== func [a][a * 2]^/>> save %file.red :f^/```^/^/file.red looks like: (no brackets)^/```^/func aa * 2^/```^/}
    sent: "2017-08-20T11:28:31.520Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59994fce80d90ca0241a905d"
    text: {Indeed, this is the most used version... It was just to know if there is a kind ofcompatibility mode ;) But that is OK for me too!}
    sent: "2017-08-20T09:01:02.050Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59994f84a7b406262da9f489"
    text: {@fvanzeveren I don't think so. Personally, I've always used `parse/all`, so I am happy with the change :)}
    sent: "2017-08-20T08:59:48.206Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59994f5776a757f808c3ad0c"
    text: {Rebol2^/```text^/>> parse "a b c" none^/== ["a" "b" "c"]^/```^/Red^/```text^/>> split "a b c" space^/== ["a" "b" "c"]^/```^/Is that what you mean?}
    sent: "2017-08-20T08:59:03.281Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59994f3e80d90ca0241a8e6f"
    text: {@rebolek thanks, is there a way to switch to the "rebol" version?}
    sent: "2017-08-20T08:58:38.565Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59994f05a7b406262da9f28f"
    text: {@fvanzeveren No, you're not missing anything, it was decided that `parse/all` mode from Rebol should be default.}
    sent: "2017-08-20T08:57:41.183Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59994eb7578b44a046cb4dca"
    text: {Hello, I am looking at the `parse` fonction in Red, compared to the rebol version. In rebol, by default, blank characters are not parsed for srrings, making building rules easier. It is not the case with the Red version. Is there something I am missing here? Thank you;}
    sent: "2017-08-20T08:56:23.072Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5999463676a757f808c38c3f"
    text: { @powerconnector  or just `view [area disabled]` ;) welcome!}
    sent: "2017-08-20T08:20:06.484Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5999224c2723db8d5ec22a77"
    text: "glad you like it :)"
    sent: "2017-08-20T05:46:52.946Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5999213da7b406262da94e9d"
    text: "Thanks again! This language is awesome! "
    sent: "2017-08-20T05:42:21.899Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599920d7a7b406262da94da1"
    text: {@powerconnector for you second question: `view [area on-create [face/enabled?: false]]`}
    sent: "2017-08-20T05:40:39.339Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5999200d210ac26920a0c2b9"
    text: "no problem!"
    sent: "2017-08-20T05:37:17.596Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59991e93162adb6d2e1487dc"
    text: {thanks! that works great! I just saw that this is in the FAQ... sorry I somehow missed it there}
    sent: "2017-08-20T05:30:59.131Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "59991b909acddb2407ac718c"
    text: {@powerconnector compile with `-t Windows` to get rid of cmd window.}
    sent: "2017-08-20T05:18:08.652Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599917cf614889d47568c980"
    text: {First of all I've just discovered Rebol/Red and I think this language is the most beautiful thing i've ever seen. Well maybe not quite but it's like really close. :P It's like someone took lisp and improved it a bunch. I have two questions about building GUIs in Red:^/If I build the exe file of my red file and i start it i still get the windows cmd in the background how do i get rid of it?^/I can disable an area by setting area/enabled?: false but how do i disable a area on creation?^/area "hello world" enabled? false ^/did not work}
    sent: "2017-08-20T05:02:07.775Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "59982f3bc101bc4e3a34ced9"
    text: {Thanks. I didn’t know that try returns an error. I tried to use catch, it didn’t work as I expected.}
    sent: "2017-08-19T12:29:47.311Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59982b8e76a757f808bf817a"
    text: {As any other error, with `try`:^/```^/^/>> e: try [f]^/*** Script Error: incompatible argument for 1 of 2^/*** Where: do^/*** Stack: f cause-error  ^/^/>> type? e^/== error!^/>> probe e^/make error! [^/    code: none^/    type: 'script^/    id: 'not-related^/    arg1: 1^/    arg2: 2^/    arg3: none^/    near: none^/    where: 'do^/    stack: -189298728^/]^/```}
    sent: "2017-08-19T12:14:06.669Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599829482723db8d5ebe7b2b"
    text: {How to catch an error rasied by cause-error? For instance, ^/```^/f: func [][cause-error 'script 'not-related [1 2]]^/f^/```}
    sent: "2017-08-19T12:04:24.340Z"
    editedAt: "2017-08-19T12:04:59.477Z"
    v: 3
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599804a476a757f808bef1c8"
    text: "@helloyi you're welcome!"
    sent: "2017-08-19T09:28:04.686Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599804699acddb2407a872d7"
    text: {@rebolek Thank you very mach! I should complete the GUI system.}
    sent: "2017-08-19T09:27:05.068Z"
    v: 1
    author: "5997ff3cd73408ce4f72110e"
) #(
    id: "5998028080d90ca02415b88a"
    text: {@helloyi Background for whole face? just set the color of base face:^/```^/>> view [base 100x100 red draw [line 0x0 100x100]]^/```}
    sent: "2017-08-19T09:18:56.605Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599800bec101bc4e3a342683"
    text: {Hello, I saw the [draw dialect](https://doc.red-lang.org/en/draw.html), but did not find a description of setting background color. I am a novice. thanks!}
    sent: "2017-08-19T09:11:26.423Z"
    v: 1
    author: "5997ff3cd73408ce4f72110e"
) #(
    id: "59974a6c614889d4756218f4"
    text: "Never mind. :)"
    sent: "2017-08-18T20:13:32.866Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59974a4c9acddb2407a5accd"
    text: {Sorry I have to run. Will try to check back tomorrow.}
    sent: "2017-08-18T20:13:00.609Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59974a10bc464729749a7f3f"
    text: "Just duplicating your example."
    sent: "2017-08-18T20:12:00.876Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "59974a0b162adb6d2e0db3ba"
    text: {```^/twoCountersGUI :: IO ()^/twoCountersGUI = do^/    --VIEW^/    --Frame^/    f <- frame [text := "Two Counters"]^/^/    --Buttons^/    upButton <- button f [text := "Up"]^/    downButton <- button f [text := "Down"]^/    switchButton <- button f [text := "Switch Counters"]^/^/    --StaticTexts^/    counterTexts <- mapM (\x -> staticText f []) [1..numOfCounters]^/^/    --Layout^/^/    let buttonsLayout      = [[row 5 [widget upButton, widget downButton, widget switchButton]]]^/        counterTextsLayout = mapIndexed makeCounterLayout counterTexts^/    set f [layout := margin 10 $ grid 10 10 (buttonsLayout ++ counterTextsLayout)]^/^/    --NETWORK^/    let networkDescription :: MomentIO ()^/        networkDescription = mdo^/            --Buttons^/            eUp <- event0 upButton command^/            eDown <- event0 downButton command^/            eIndex <- event0 switchButton command^/^/            --StaticTexts^/            bIndex <- accumB 0 $ increaseCounterIndex <$ eIndex^/            bCounters <- accumB initialCounters $ unions [increment bIndex eUp, decrement bIndex eDown]^/^/            --Sinks^/            sink f [text :== show <$> bIndex]^/            mapMIndexed (sinkWithCounterText bCounters) counterTexts^/            return ()^/^/    network <- compile networkDescription^/    actuate network^/^/```}
    sent: "2017-08-18T20:11:55.293Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599749ed2723db8d5ebb2df7"
    text: "No, I'm not trying to be reactive at this point."
    sent: "2017-08-18T20:11:25.821Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599749a9162adb6d2e0db1e1"
    text: "I suppose it isn’t reactive programming. "
    sent: "2017-08-18T20:10:17.801Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59974905bc464729749a7bfb"
    text: {```^/Red [^/^-title:  "Multi counter"^/^-author: "Gregg Irwin"^/]^/^/num-counters: 9^/counters: copy []^/^/count: func [n /local c][^/^-c: get first counters^/^-c/data: c/data + n^/]^/switch-counters: does [^/^-counters: next counters^/^-if tail? counters [counters: head counters]^/]^/lay: [^/^-across^/^-button "Up" [count 1]^/^-button "Down" [count -1]^/^-button "Switch Counters" [switch-counters]^/^-return^/]^/repeat i num-counters [^/^-fld: to word! rejoin ['txt- i]^/^-repend lay [^/^-^-'text rejoin ["Counter No. " i] to set-word! fld 'text "0" 'return^/^-]^/^-append counters fld^/]^/view lay^/```}
    sent: "2017-08-18T20:07:33.967Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599747259acddb2407a59e93"
    text: "OK, it’s my mistake. "
    sent: "2017-08-18T19:59:33.318Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599746cd76a757f808bc1f4a"
    text: {Yes, `refresh` is there because it's not a reactive example app.}
    sent: "2017-08-18T19:58:05.584Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59974629a7b406262da28504"
    text: {I have a very similar example, it’s written in FRP as well. ^/```^/databaseGUI :: IO ()^/databaseGUI = do^/    --VIEW^/    -- Frame^/    f <- frame [text := "Database"]^/^/    -- Listbox^/    listBox <- singleListBox f []^/^/    -- Buttons^/    createButton <- button f [text := "Create"]^/    deleteButton <- button f [text := "Delete"]^/^/    -- Entries^/    firstnameEntry <- entry f []^/    lastnameEntry <- entry f []^/    searchEntry <- entry f []^/^/    -- Layout^/    let dataItem = grid 10 10 [[label "First Name:", widget firstnameEntry],^/                              [label "Last Name:", widget lastnameEntry]]^/    set f [layout := margin 5 $ grid 10 5 [[row 5 [label "Search", widget searchEntry], glue],^/                                     [minsize (sz 200 300) $ widget listBox, dataItem],^/                                     [row 5 [widget createButton, widget deleteButton], glue]]]^/^/    -- NETWORK^/    let networkDescription :: MomentIO ()^/        networkDescription = mdo^/            -- Buttons^/            eCreate <- event0 createButton command^/            eDelete <- event0 deleteButton command^/^/            -- ListBox^/            eSelectedIndex <- eventSelection listBox^/^/            -- Entries^/            bFirstname <- behaviorText firstnameEntry ""^/            bLastname <- behaviorText lastnameEntry ""^/            bSearch <- behaviorText searchEntry ""^/^/            -- Behaviors^/            let^/                eName = pair <$> bFirstname <*> bLastname <@ eCreate^/                bFilteredNames = filterNames <$> bSearch <*> bNames^/^/            bNames <- accumB [] $ append <$> eName^/            let eSelectedName = (\names i -> names !! i) <$> bFilteredNames <@> eSelectedIndex^/            bSelectedName <- stepper ("", "") eSelectedName^/^/            -- Sinks^/            sink f [text :== showName <$> bSelectedName]^/            sink listBox [items :== (map showName) <$> bFilteredNames]^/^/    network <- compile networkDescription^/    actuate network^/```^/}
    sent: "2017-08-18T19:55:20.918Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59974592c101bc4e3a3162b2"
    text: {I would say it works. However, you have to call refresh . ^/```^/cmd-create: does [append db make-rec  refresh]^/cmd-update: does [change find db selected-name make-rec  refresh]^/cmd-delete: does [remove find db selected-name  refresh]^/```}
    sent: "2017-08-18T19:52:50.358Z"
    editedAt: "2017-08-18T19:54:21.278Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599744fcbc464729749a69f7"
    text: {I am reading  crud.red. https://github.com/eugenkiss/7guis/blob/master/Red/crud.red}
    sent: "2017-08-18T19:50:20.064Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599744f92723db8d5ebb1683"
    text: "Thanks."
    sent: "2017-08-18T19:50:17.034Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599744cfbc464729749a696d"
    text: "Yes. "
    sent: "2017-08-18T19:49:35.035Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5997445376a757f808bc13cc"
    text: {Does `switch counter` step through each counter, wrapping at the end?}
    sent: "2017-08-18T19:47:31.437Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599743f076a757f808bc11c3"
    text: "Excellent, thanks."
    sent: "2017-08-18T19:45:52.122Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5997428ca7b406262da27386"
    text: {@greggirwin I have seen your 7guis. There is an example of counter. I made a counter as well. If you want, you can try to implement a counter like this. There are many counters, you can use switch counters button to switch  to the counter you want to control.}
    sent: "2017-08-18T19:39:56.805Z"
    editedAt: "2017-08-18T19:41:30.490Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59974200a7b406262da27185"
    text: {[![Screen Shot 2017-08-18 at 21.36.19.png](https://files.gitter.im/red/red/ceir/thumb/Screen-Shot-2017-08-18-at-21.36.19.png)](https://files.gitter.im/red/red/ceir/Screen-Shot-2017-08-18-at-21.36.19.png)}
    sent: "2017-08-18T19:37:36.237Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59974185162adb6d2e0d8ca9"
    text: {Maybe @9214's expression is what I'm trying to say. :^^)}
    sent: "2017-08-18T19:35:32.996Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59974150a7b406262da26e29"
    text: {@unchartedworks, thanks for the examples, though trying to fit it all together to find the "I want to..." design aspect isn't working for me from them. If you look at https://github.com/eugenkiss/7guis/wiki, the tasks are clearly spelled out from a requirements perspective, which was what I wanted to ask for, but didn't do very well. We don't have to be as verbose or detailed as that, but the "I want a function that..." or "I want to write an app that..." spec level is what I'm thinking.}
    sent: "2017-08-18T19:34:40.410Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59973b9a162adb6d2e0d71a9"
    text: {[![ERSiPwenMBU.jpg](https://files.gitter.im/red/red/2apo/thumb/ERSiPwenMBU.jpg)](https://files.gitter.im/red/red/2apo/ERSiPwenMBU.jpg)}
    sent: "2017-08-18T19:10:18.609Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59973af980d90ca02412c518"
    text: {[![Screenshot 2016-12-09 11.06.04.png](https://files.gitter.im/red/red/nzHK/thumb/Screenshot-2016-12-09-11.06.04.png)](https://files.gitter.im/red/red/nzHK/Screenshot-2016-12-09-11.06.04.png)}
    sent: "2017-08-18T19:07:37.788Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59973aea578b44a046c38dc0"
    text: {[![Screenshot 2016-12-09 11.47.59.png](https://files.gitter.im/red/red/T0W6/thumb/Screenshot-2016-12-09-11.47.59.png)](https://files.gitter.im/red/red/T0W6/Screenshot-2016-12-09-11.47.59.png)}
    sent: "2017-08-18T19:07:22.951Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59973adc9acddb2407a564a4"
    text: {[![Screenshot 2016-12-09 11.04.21.png](https://files.gitter.im/red/red/ecSs/thumb/Screenshot-2016-12-09-11.04.21.png)](https://files.gitter.im/red/red/ecSs/Screenshot-2016-12-09-11.04.21.png)}
    sent: "2017-08-18T19:07:08.326Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59973ac976a757f808bbe9b4"
    text: {[![Screenshot 2016-12-09 11.03.54.png](https://files.gitter.im/red/red/sR1T/thumb/Screenshot-2016-12-09-11.03.54.png)](https://files.gitter.im/red/red/sR1T/Screenshot-2016-12-09-11.03.54.png)}
    sent: "2017-08-18T19:06:49.101Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59973ab8a7b406262da25127"
    text: "Here is an example of FRP. "
    sent: "2017-08-18T19:06:32.471Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599737ed2723db8d5ebad5a3"
    text: {@greggirwin It’s difficult to describe it. So I use a simplified example. There are 2 solutions. the functionality of s1 and s2 are the same, the implementations are quite different.  I think many code is like the first one, maybe it’s easier to understand and many people do it like this, however it doesn’t mean there is no other better way to do it even they looks like very different from the common ways.}
    sent: "2017-08-18T18:54:37.919Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59973654162adb6d2e0d59b1"
    text: {[![Screenshot 2017-03-08 12.46.38.png](https://files.gitter.im/red/red/RC4g/thumb/Screenshot-2017-03-08-12.46.38.png)](https://files.gitter.im/red/red/RC4g/Screenshot-2017-03-08-12.46.38.png)}
    sent: "2017-08-18T18:47:48.205Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59972e769acddb2407a52b0b"
    text: {:point_up: [August 18, 2017 11:03 AM](https://gitter.im/red/red?at=59971dfb80d90ca024123a35)  ^/@unchartedworks, real world examples are more complex, agreed. Don't let fear rule the day though, or discount how much elegant and correct code has been written without functors and monads. I skimmed your link, but my brain hasn't opened it's Haskell receptors yet (or maybe Redbol deactivated them), so it doesn't appear at all elegant to me. "To me" is the important part there. ^/^/I love concrete examples because, for me, they facilitate discussion. What is a good, real world, example we can use as a basis for comparison? I like the 7GUIs idea, imperfect as it may be, because it does just this. But if there are others, let's put them in a doc and see how we'd approach the same problems in Red. }
    sent: "2017-08-18T18:14:14.413Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59972e53c101bc4e3a30f827"
    text: "well, yeah, it's just a matter of perspective :)"
    sent: "2017-08-18T18:13:39.620Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59972e21bc464729749a0507"
    text: {Is it really confusing? Both ways have their cons and pros:^/```^/>> print 1 + 1^/2^/```}
    sent: "2017-08-18T18:12:49.845Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59972af0578b44a046c34444"
    text: "@9214 yes, that's intended"
    sent: "2017-08-18T17:59:12.635Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599727d7a7b406262da200cf"
    text: {btw, is it intended that operators have precedence over functions?^/```text^/>> length? [1 2 3] + 4^/*** Script Error: + does not allow block! for its value1 argument^/*** Where: +^/*** Stack: ^/```^/I understand that it's equivalent to^/```text^/>> length? add [1 2 3] 4^/*** Script Error: add does not allow block! for its value1 argument^/*** Where: add^/*** Stack:  ^/```^/and `add` is evaluated first (so as `+`), but this is a little bit confusing}
    sent: "2017-08-18T17:45:59.868Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5997226f578b44a046c31e42"
    text: "It’s good to know. :)"
    sent: "2017-08-18T17:22:55.260Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599721929acddb2407a4ed2b"
    text: {but that's only mean that heavy functional stuff certainly never will be included in core language (though, again, you can easily create all this stuff by yourself and ship it as an upcoming `module!`)}
    sent: "2017-08-18T17:19:14.054Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599720ebc101bc4e3a30bb97"
    text: {one of the ideas (as I understand it) is to reduce complexity and avoid complicated abstractions and to remain accessible for people with different backgrounds}
    sent: "2017-08-18T17:16:27.682Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59972081210ac269209940fe"
    text: "http://www.red-lang.org/p/about.html"
    sent: "2017-08-18T17:14:41.898Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59972038c101bc4e3a30b92e"
    text: "@9214 what’s the core language idea?"
    sent: "2017-08-18T17:13:28.770Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59971f3480d90ca024123f3a"
    text: {regarding `-` issue - false alert, just checked on latest release}
    sent: "2017-08-18T17:09:08.065Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59971f0880d90ca024123e74"
    text: {It definitely will go against the core language idea _ with_ functors and monads if you ask me ;)}
    sent: "2017-08-18T17:08:24.568Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59971dfb80d90ca024123a35"
    text: {@greggirwin Regarding temperature.red,  I think it’s a good start. However many real world examples are much more complex than that, I am afraid the implementation won’t be elegant and correct at all without Functor/Applicative/Monad. http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html}
    sent: "2017-08-18T17:03:55.558Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59971dc376a757f808bb5ec2"
    text: {but this one is ok^/```text^/-: func [x y][x + y]^/probe x: - 2 3^/```}
    sent: "2017-08-18T17:02:59.346Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59971c36210ac26920992eb1"
    text: {seems that redefining `op!` as `function!` wreaks the havoc}
    sent: "2017-08-18T16:56:22.641Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59971b6576a757f808bb5456"
    text: {WAT^/```text^/-: func [x y][x + y]^/- 10 20^/```^/```text^/*** Script Error: - does not allow block! for its value1 argument^/*** Where: -^/*** Stack:^/```}
    sent: "2017-08-18T16:52:53.607Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599717b12723db8d5eba4257"
    text: "Especially when used with `switch/select`."
    sent: "2017-08-18T16:37:05.444Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59971792a7b406262da1b9de"
    text: "Yes."
    sent: "2017-08-18T16:36:34.723Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59971784614889d475612861"
    text: "@greggirwin you're talking about `type?/word` ?"
    sent: "2017-08-18T16:36:20.421Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59971752ee5c9a4c5fd5088d"
    text: {@9214 That's another rite of passage. Should probably be in the Primer if somone wants to add it.}
    sent: "2017-08-18T16:35:30.252Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59971736c101bc4e3a309088"
    text: "https://github.com/red/red/issues/2982"
    sent: "2017-08-18T16:35:02.546Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599717289acddb2407a4be0a"
    text: "@greggirwin kudos!"
    sent: "2017-08-18T16:34:48.122Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5997171dc101bc4e3a308f95"
    text: {```^/>> switch/default type?/word [][block! [print "it's a block"]][print "it's not a block"]^/it's a block^/```}
    sent: "2017-08-18T16:34:37.246Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599716f99acddb2407a4bd7e"
    text: {Ah, well it (%temperature.red) was designed to be minimal and clear for the target example. The BMR calc shows reactivity in play. However, Red gives you a lot of options in how to design things. It's good to get real-world examples, that show concretely how we might approach them in Red.}
    sent: "2017-08-18T16:34:01.953Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5997168f9acddb2407a4bbbb"
    text: {wat^/```text^/>> switch/default type? [][block! [print "it's a block"]][print "it's not a block"]^/it's not a block^/```}
    sent: "2017-08-18T16:32:15.357Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "5997162b76a757f808bb364f"
    text: {@greggirwin https://github.com/eugenkiss/7guis/blob/master/Red/temperature.red}
    sent: "2017-08-18T16:30:35.271Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5997160a9acddb2407a4b881"
    text: {> @greggirwin your example is interesting. I am not sure it can express complex logic. for example,  more text fields, or controls.^/^/@unchartedworks, you mean the BMR calculator?}
    sent: "2017-08-18T16:30:02.542Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5997160580d90ca0241215c8"
    text: "Me too..."
    sent: "2017-08-18T16:29:57.438Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599715f8c101bc4e3a308a7d"
    text: {Hm, I wanted to make an example how to expand `-`, but it crashes console.}
    sent: "2017-08-18T16:29:44.988Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5997147d9acddb2407a4b0a3"
    text: {and that's why you were given all the power of `parse` and `bind` - to alter the language so it fits your problem, not the other way around}
    sent: "2017-08-18T16:23:25.706Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599713e980d90ca024120c68"
    text: "That’s why I want to extend `-`."
    sent: "2017-08-18T16:20:57.103Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599713b376a757f808bb28a5"
    text: {well, you can change original `-` but then you can subtract only with, ehm, `subtract` :D}
    sent: "2017-08-18T16:20:03.698Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599713a7210ac269209909d4"
    text: "@9214 showed how to do it"
    sent: "2017-08-18T16:19:51.797Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59971398a7b406262da1a5f0"
    text: {@unchartedworks you can make matrix dialect and define operations you want ;)}
    sent: "2017-08-18T16:19:36.272Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59971355578b44a046c2cdd6"
    text: {@9214 [1 2 3] - [1 1 1] is simpler. no more no less. However you did it somehow. ;)}
    sent: "2017-08-18T16:18:29.284Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599712ec578b44a046c2cb48"
    text: {@greggirwin your example is interesting. I am not sure it can express complex logic. for example,  more text fields, or controls.}
    sent: "2017-08-18T16:16:44.275Z"
    editedAt: "2017-08-18T16:19:05.382Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59971209a7b406262da19e73"
    text: {@unchartedworks ^/```text^/matrix: context [^/    -: make op! func [x y][^/        if not equal? length? x length? y [^/            return none^/        ]^/^/        collect [forall x [keep subtract x/1 y/1]]^/    ]^/]^/^/probe do bind [[1 2 3] - [1 1 1]] matrix^/```}
    sent: "2017-08-18T16:12:57.242Z"
    editedAt: "2017-08-18T16:13:25.936Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599711c6578b44a046c2c6d9"
    text: {An equally valid design choice for subtract on blocks would be to work like `exclude`,  or as a non-set version of it, that works as in...elixir I think.}
    sent: "2017-08-18T16:11:50.409Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59971171c101bc4e3a307351"
    text: {https://github.com/eugenkiss/7guis/blob/master/Red/temperature.red isn't reactive, but you could make it so. Doc wants to improve the reactivity system a bit to make it easier to catch cycles, which is why it isn't used there.}
    sent: "2017-08-18T16:10:25.292Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599710db76a757f808bb17d7"
    text: {A `matrix!` type seems better, based on `vector!`. }
    sent: "2017-08-18T16:07:55.726Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5997108c76a757f808bb1621"
    text: "[1 2 3] - [1 1 1] == [0 1 2]"
    sent: "2017-08-18T16:06:36.407Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59971081614889d4756108c6"
    text: "or you can create a `matrix` dialect ;)"
    sent: "2017-08-18T16:06:25.266Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5997105b578b44a046c2be52"
    text: "@9214 Matrix Manipulation"
    sent: "2017-08-18T16:05:47.992Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59971058162adb6d2e0cad30"
    text: {@unchartedworks, to extend `-`, you have to modify the Red/System code. `Subtract` is an action, so you would need to modify the `block!` implementation to support it.}
    sent: "2017-08-18T16:05:44.620Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5997100d2723db8d5eba1d6c"
    text: {[![currency-converter-code.png](https://files.gitter.im/red/red/iYEW/thumb/currency-converter-code.png)](https://files.gitter.im/red/red/iYEW/currency-converter-code.png)}
    sent: "2017-08-18T16:04:29.144Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59971005c101bc4e3a306ad9"
    text: {@unchartedworks what do you want to achive by substracting one block from another?}
    sent: "2017-08-18T16:04:21.267Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59970fd92723db8d5eba1cbc"
    text: {```^/>> [1 2 3] - [1 2 3]^/*** Script Error: - does not allow block! for its value1 argument^/*** Where: -^/*** Stack^/```^/Is there any way I can extend- ?^/^/@greggirwin Let me show a real Reactive Programming (FRP).^/}
    sent: "2017-08-18T16:03:37.144Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59970fce614889d475610532"
    text: {[![currenty-converter.png](https://files.gitter.im/red/red/2ThZ/thumb/currenty-converter.png)](https://files.gitter.im/red/red/2ThZ/currenty-converter.png)}
    sent: "2017-08-18T16:03:26.610Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59970f5b614889d475610217"
    text: {https://gist.github.com/greggirwin/38883ca5109175a60896d2f406ee49f6 is something I did while playing with reactivity in Red early on.}
    sent: "2017-08-18T16:01:31.342Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59970ea1c101bc4e3a306392"
    text: {from docs on reactivity:^/> * Red’s reactive support could be extended in the future to support a "pull" model.^/> * *This is not a FRP framework*, though event streams could be supported in the future.^/> * The Red/View GUI engine relies on face! objects in order to operate on graphic objects. Faces are reactors, and they can be used for setting reactive relations between faces or with non-reactor objects.}
    sent: "2017-08-18T15:58:25.778Z"
    editedAt: "2017-08-18T15:59:17.017Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59970e7080d90ca02411f206"
    text: {Spreadsheets are a classic comparison: https://en.wikipedia.org/wiki/Reactive_programming}
    sent: "2017-08-18T15:57:36.988Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59970df7c101bc4e3a306047"
    text: {@unchartedworks, Red's reactive model is like https://en.wikipedia.org/wiki/Dataflow_programming, as opposed to FRP.}
    sent: "2017-08-18T15:55:35.580Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59970dd3c101bc4e3a305f86"
    text: "It’s reasonable."
    sent: "2017-08-18T15:54:59.836Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59970d5a210ac2692098e835"
    text: {My take is that Red's design should stay true to it's roots, but we can add features in dialects. For example, Red will have a standard GC, and mutability, but we could create a dialect that is based on immutability and uses reference counting.}
    sent: "2017-08-18T15:52:58.722Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59970d3a80d90ca02411ec26"
    text: {@greggirwin That means Red doesn’t support FRP, but Reactive Programming.}
    sent: "2017-08-18T15:52:26.753Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59970cedbc46472974996e3f"
    text: {It is possible we could add a typeset to make mutability a clear group.}
    sent: "2017-08-18T15:51:09.675Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59970c5cbc46472974996c4a"
    text: {@unchartedworks, immutable data is not a cornerstone of Red, as with some language's designs. Some datatypes are immutable, but not all. `immediate!` contains most of them, but some in there are mutable (`[pair tuple! time! date!]`).}
    sent: "2017-08-18T15:48:44.475Z"
    editedAt: "2017-08-18T15:50:14.794Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5996f418578b44a046c2254d"
    text: "credit goes to @rebolek :sparkles: "
    sent: "2017-08-18T14:05:12.619Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996f3e9162adb6d2e0c1b24"
    text: "@9214 Interesting!"
    sent: "2017-08-18T14:04:25.497Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996f39cee5c9a4c5fd44670"
    text: {@unchartedworks ^/```text^/>> inception: [we-need-to-go-deeper!]^/== [we-need-to-go-deeper!]^/>> insert/only tail inception inception^/== []^/>> inception^/== [we-need-to-go-deeper! [...]]^/>> second inception^/== [we-need-to-go-deeper! [...]]^/>> second second inception^/== [we-need-to-go-deeper! [...]]^/>> second second second inception^/== [we-need-to-go-deeper! [...]]^/```}
    sent: "2017-08-18T14:03:08.786Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996f26bbc4647297498df69"
    text: "I got it right finally."
    sent: "2017-08-18T13:58:03.881Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996f25b80d90ca024116219"
    text: {```^/>> hannah: func [x][hannah (x + 1)]^/== func [x][hannah (x + 1)]^/>> hannah 1^/*** Internal Error: stack overflow^/*** Where: hannah^/*** Stack: hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah hannah^/```^/}
    sent: "2017-08-18T13:57:47.082Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996f0f1578b44a046c21464"
    text: {@unchartedworks that's what https://doc.red-lang.org/ is ;)}
    sent: "2017-08-18T13:51:45.059Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996f0d5ee5c9a4c5fd437ac"
    text: {How about "you read a book chapter-by-chapter while it's being written and get the final eBook as soon as it's finished.”}
    sent: "2017-08-18T13:51:17.529Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996f078c101bc4e3a2fc9b4"
    text: "@PeterWAWood nice! :+1: "
    sent: "2017-08-18T13:49:44.863Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996f06d162adb6d2e0c05d5"
    text: {We have started working on one but it is not ready for even publishing a first draft yet.}
    sent: "2017-08-18T13:49:33.193Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996f0522723db8d5eb97a2e"
    text: {like in the first chapter of The Blue Smalltalk book}
    sent: "2017-08-18T13:49:06.542Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996f03e162adb6d2e0c056a"
    text: {I think that it would be very nice to have some sort of glossary of terms}
    sent: "2017-08-18T13:48:46.699Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996f020578b44a046c21010"
    text: ":+1: "
    sent: "2017-08-18T13:48:16.796Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996f00b578b44a046c20fdd"
    text: {`:word` means "get a value to which word is bound to without evaluating it", `word:` means "bound word to a value that follows it"}
    sent: "2017-08-18T13:47:55.766Z"
    editedAt: "2017-08-18T13:50:26.312Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996efdfee5c9a4c5fd433bc"
    text: "@9214 Alias?^/"
    sent: "2017-08-18T13:47:11.407Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996efb4210ac26920984a64"
    text: {`hannah: :hannah` doesn't mean "point to itself"}
    sent: "2017-08-18T13:46:28.980Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ef97162adb6d2e0c025a"
    text: {@unchartedworks yes, I see, but why do you think it should be recursive? :D}
    sent: "2017-08-18T13:45:59.272Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ef849acddb2407a3efef"
    text: "@9214 It isn’t a recursion."
    sent: "2017-08-18T13:45:40.605Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996ef7bc101bc4e3a2fc4f2"
    text: "you just rebounded `hannah` word to `1` value"
    sent: "2017-08-18T13:45:31.136Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "5996ef37a7b406262da0e5ff"
    text: "why should it be?"
    sent: "2017-08-18T13:44:23.801Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ef259acddb2407a3ee0c"
    text: {```^/>> hannah: 1^/== 1^/>> hannah: :hannah^/== 1^/>> hannah^/== 1^/```^/It isn't an Infinite loop as I expected.}
    sent: "2017-08-18T13:44:05.460Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996eeb4162adb6d2e0bfbe5"
    text: {@unchartedworks ^/> The behavior is like C language, buffer pointer can't be modified, but you still can append data to the buffer until you append a long engough data to the end of the buffer. I think it might be a problem.^/^/AFAIK `series!` buffers are dynamic and can change in size to fit its content, if that's what you mean. }
    sent: "2017-08-18T13:42:12.697Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ed5080d90ca0241147ea"
    text: {Anyway I will keep it in mind, I don’t want protect to bite me unexpectedly someday.}
    sent: "2017-08-18T13:36:16.544Z"
    editedAt: "2017-08-18T13:37:29.314Z"
    v: 3
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996ecc8ee5c9a4c5fd421bd"
    text: {I'm sure that @dockimbel will come up with the best practical solution.}
    sent: "2017-08-18T13:34:00.377Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996ecba162adb6d2e0bf1ad"
    text: {I think copy-on-write doesn’t have too much overhead.}
    sent: "2017-08-18T13:33:46.471Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996ec98162adb6d2e0bf12f"
    text: {That’s why I hope there is more strict protect function.}
    sent: "2017-08-18T13:33:12.289Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996ec96210ac26920983895"
    text: {In some of the very early discussions about Red, it was mentioned the overhead of copying large values was considered to be infeasible from a performance perspective.}
    sent: "2017-08-18T13:33:10.987Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996ec65ee5c9a4c5fd41ee8"
    text: {@PeterWAWood The behavior is like C language,  buffer pointer can't be modified, but you still can append data  to the buffer until you append a long engough data to the end of the buffer. I think it might be a problem.}
    sent: "2017-08-18T13:32:21.766Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996ec1f162adb6d2e0bed85"
    text: {I think @dockimbel considered to include `protect` dialect with some other "security" features}
    sent: "2017-08-18T13:31:11.159Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ebaf76a757f808ba510f"
    text: {It will work with values that are stored by value rather than by reference. I don't know if and how such a function might be included in Red.^/^/}
    sent: "2017-08-18T13:29:19.839Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996eaf1bc4647297498b4a1"
    text: {@unchartedworks  Rebol has a `protect` function which stops a `word!` being bound to a new value but the values to which it is bound is still mutable:^/```text^/>> a: "12345"  ^/== "12345"^/>> protect 'a^/>> a: "12345"^/** Script Error: Word a is protected, cannot modify^/** Near: a: "12345"^/>> append a "6"^/== "123456"^/```}
    sent: "2017-08-18T13:26:09.230Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996eaf0162adb6d2e0be891"
    text: {@unchartedworks ^/```text^/>> str1: "abc"^/== "abc"^/>> str2: reverse str1^/== "cba"^/>> str1^/== "cba"^/>> reverse str1^/== "abc"^/>> str2^/== "abc"^/>> ; immutability^/>> str1: "abc"^/== "abc"^/>> str2: reverse COPY str1^/== "cba"^/>> str1^/== "abc"^/>> reverse str1^/== "cba"^/>> str2^/== "cba"^/>> ? copy^/USAGE:^/     COPY value^/^/DESCRIPTION: ^/     Returns a copy of a non-scalar value. ^/     COPY is an action! value.^/^/ARGUMENTS:^/     value        [series! any-object! bitset! map!] ^/^/REFINEMENTS:^/     /part        => Limit the length of the result.^/        length       [number! series! pair!] ^/     /deep        => Copy nested values.^/     /types       => Copy only specific types of non-scalar values.^/        kind         [datatype!] ^/^/RETURNS:^/     [series! any-object! bitset! map!]^/```}
    sent: "2017-08-18T13:26:08.552Z"
    editedAt: "2017-08-18T13:35:21.652Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ea9f9acddb2407a3d7d2"
    text: {It’s good to have, if not, it isn’t a big deal for me.}
    sent: "2017-08-18T13:24:47.562Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996ea7ea7b406262da0cd98"
    text: {@9214 How does copy work? Does copy supports copy-on-write?}
    sent: "2017-08-18T13:24:14.108Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996e9aa210ac26920982a29"
    text: {@unchartedworks I think `copy` and `on-change*` with `on-deep-change*`can help you to simulate immutability}
    sent: "2017-08-18T13:20:42.317Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996e652162adb6d2e0bcf0e"
    text: "Does Red support immutable data?"
    sent: "2017-08-18T13:06:26.515Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996b088bc46472974978f0b"
    text: {@PeterWAWood  I am writing test cases for a library, there  are only a few test cases so far, so I don't have to care too much about performance like Red test suite does. When I save my code,  a script will run tests automatically, and I don’t have to look at the test results unless there is a test failure. To be able to sync with the latest quick-test without merge issues, I just added a new function for my own use. It’s good to know how to make a  function accept multiple data types. Thanks for your explaination. I suppose I will wait for the next version of quick-test.}
    sent: "2017-08-18T09:16:56.489Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5996927480d90ca0240f9184"
    text: {Hi all, is there a performance gain for searching to sort the keys in a hash! map? Thank you. Françpis}
    sent: "2017-08-18T07:08:36.494Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "599625e6c101bc4e3a2c5bb6"
    text: {@unchartedworks Perhaps you could consider patching quick-test to add the assertion functionality that you want for your own use. It would be easy to write a short script to "unroll" the `[a == b]` blocks should you want to submit your tests to the Red test suite.}
    sent: "2017-08-17T23:25:26.691Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59962489c101bc4e3a2c5664"
    text: {On a practical level, there would be no need to introduce a new `assert*` function, just change the `spec` of the existing one and handle the different datatypes accordingly:^/```^/--assert: func [v [logic! block!]] [^/    either logic! = type? v [^/        ; existing function body^/    ][^/        ; new code ^/    ]^/```}
    sent: "2017-08-17T23:19:37.178Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996236180d90ca0240ddab9"
    text: {For me, there is plenty of room for other test frameworks especially ones that encourage test self-documentation (describe, it should, etc.). Some times you seem to spend more time working out what a failing test is meant to do than you do fixing it.}
    sent: "2017-08-17T23:14:41.003Z"
    editedAt: "2017-08-17T23:15:41.109Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599622762723db8d5eb6012a"
    text: {To use a very English idiom, test frameworks are like Marmite. As are automated tests themselves.}
    sent: "2017-08-17T23:10:46.087Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996219f80d90ca0240dd492"
    text: {The "test running" side of quick-test desperately needs a full overhaul and I hope to find tie to do that for release 0.7.0}
    sent: "2017-08-17T23:07:11.770Z"
    editedAt: "2017-08-17T23:07:53.047Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996217f76a757f808b6d841"
    text: {There is one quick-test improvement planned in the area of assertions. It is to identify the sequence number of the failing assertion within the a test.^/}
    sent: "2017-08-17T23:06:39.411Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5996212680d90ca0240dd33b"
    text: {One question that would need to be answered about an `assert*` function is what about tests for '>', '>=', '<>' 'error'?^/}
    sent: "2017-08-17T23:05:10.466Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59962071578b44a046be72d6"
    text: {It was decided not to implement a parse-based testing dialect and keep things ironically (given the name simple-test) keep things simple.^/^/It was felt unnecessary to show the reason of the failure. Being able to find a test quickly in a code editor using the test name is the Red team's preferred option. ^/}
    sent: "2017-08-17T23:02:09.873Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59961ecba7b406262d9d5093"
    text: {Quick-test is minimalist by design (to meet the requirements of the prime user ;-)). The current `assert` was preferred over other forms of assert which give more information on test failures.I have previously written a dialect-based Rebol testing framework (simple-test) which has a fuller set of assertions.  }
    sent: "2017-08-17T22:55:07.331Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5995fab776a757f808b621d6"
    text: {We can do it a lot of ways. Peter and I have worked on test system designs together in the past, and have *loads* of design ideas and experimental code. Others have done it as well. The space is large, and can be done in so many ways, that we probably need a team with concentrated focus to hash out ideas for Quick-Test 2.0, and for any built-in testing Red provides.}
    sent: "2017-08-17T20:21:11.798Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995f2dcee5c9a4c5fcfdc24"
    text: {however we can extent —assert, so it can support [logic!] and [block!].}
    sent: "2017-08-17T19:47:40.368Z"
    editedAt: "2017-08-17T19:48:32.109Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995f28680d90ca0240cfea8"
    text: {Yes, I asked the same question. It doesn’t work in this way. }
    sent: "2017-08-17T19:46:14.475Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995f16e2723db8d5eb51e10"
    text: {Could a macro be defined for `--assert` that would change it to `--assert*` and wrap the following expression in a block? By the way, @unchartedworks I'm not trying to change your direction. I'm just curious about ways of approaching problems in Red.}
    sent: "2017-08-17T19:41:34.691Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5995f0e72723db8d5eb51c6e"
    text: {To avoid implementing a parser. (I think parser is a better solution.) I implemented a prototype, and it can provide more information when a test fails. It can partially evaluate the expression.^/```^/--test-- "[integer!] -> [integer!]"^/    xs: [1 2 3]^/    ys: [2 3 3]^/    zs: filter func [x][x > 1] xs^/    --assert* [ys == zs]^/```^/```^/--test-- [integer!] -> [integer!] FAILED**************^/[[2 3 3] == [2 3]]^/```^/}
    sent: "2017-08-17T19:39:19.371Z"
    editedAt: "2017-08-17T19:45:21.359Z"
    v: 4
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995f06ca7b406262d9c7586"
    text: {I guess doing that would also imply that the tests were being run by the interpreter instead of compiler?}
    sent: "2017-08-17T19:37:16.596Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5995f0349acddb24079f7da3"
    text: { @greggirwin @unchartedworks, instead of adding a new assert function, how reasonable would it be to treat the quick-test cases as a dsl and evaluate them using parse? I don't have a real good sense for how much work that would be, but does it seem like a sensible approach? That way, the behavior of the `--assert` would be up to the dls runner, and you could collect up expressions into blocks around the quick-test keywords or whatever worked.}
    sent: "2017-08-17T19:36:20.187Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5995e9d980d90ca0240cd713"
    text: "I see. Thanks!"
    sent: "2017-08-17T19:09:13.377Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995e72c614889d4755bcdfa"
    text: {But you do need to balance things, so you don't end up with huge, complicated funcs, that try to do too much.}
    sent: "2017-08-17T18:57:48.089Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995e705bc46472974943b61"
    text: {You *can* write separate funcs, and dispatch to them, but Red provides a lot of leverage through typesets and datatype behaviors, which eliminates a lot of redundant code spread out over multiple functions.}
    sent: "2017-08-17T18:57:09.648Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995e6a9614889d4755bcb21"
    text: {More untested code. On pattern matching, in Red, we generally have a single function that dispatches to logic based on arg types when needed. In the case of `assert` (from quick-test), it might be something like this:^/```^/assert: func [^/    assertion [logic! block!]^/    /local pass?^/][^/    file/no-asserts: file/no-asserts + 1^/    pass?: either logic? assertion [assertion][do assertion]^/    either pass? [^/        file/passes: file/passes + 1^/    ][^/        file/failures: file/failures + 1^/        if group? [^/            if group-name-not-printed [^/                print ""^/                print ["===group===" group-name]^/            ]^/        ]^/        print ["---test---" test-name "FAILED**************"]^/        if block? assertion [print mold assertion]^/    ]^/]^/```}
    sent: "2017-08-17T18:55:37.138Z"
    editedAt: "2017-08-17T18:56:00.517Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995e648bc4647297494381a"
    text: {(Sorry I'm jumping around and don't have your code set up to run an example)}
    sent: "2017-08-17T18:54:00.605Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995e5f0614889d4755bc7c4"
    text: {So you just need to prevent evaluation? e.g. `op? :x`}
    sent: "2017-08-17T18:52:32.761Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995e4c9c101bc4e3a2b3fd7"
    text: {Because I have to work around a problem. That’s why I use load and convert them to operators if they are operators.^/```^/>> op? ==^/*** Script Error: == operator is missing an argument^/*** Where: catch^/*** Stack:```}
    sent: "2017-08-17T18:47:37.045Z"
    editedAt: "2017-08-17T18:48:34.188Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995e192162adb6d2e075eae"
    text: {In your example above, you shouldn't have to do all the string conversions and comparisons either. e.g.:^/```^/--assert*: func [^/    blk [block!]^/    /local pass?^/][^/    pass?: do blk^/    --assert pass?^/    if not pass? [^/        print-assertion-block blk^/    ]^/]^/^/print-assertion-block: func [^/    blk [block!]^/    /local ops op? conditional-do^/][^/    ops: [% * ** + - ... / // < << <= <> = == =? > >= >> >>> and is or xor]^/    op?: func [x][find ops x]^/    conditional-do: func [x][either op? x [x][do x]]^/    probe map :conditional-do (load form blk)^/]^/```^/(untested)}
    sent: "2017-08-17T18:33:54.553Z"
    editedAt: "2017-08-17T18:42:15.104Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995e0db76a757f808b5a9e7"
    text: "all right. Thanks!"
    sent: "2017-08-17T18:30:51.491Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995e04ac101bc4e3a2b2bdb"
    text: {You can do it with switch, parse, case, etc., depending on your needs.}
    sent: "2017-08-17T18:28:26.077Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dfffee5c9a4c5fcf807c"
    text: "Do you mean using switch?"
    sent: "2017-08-17T18:27:11.591Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995df74c101bc4e3a2b26fa"
    text: {Red doesn't pattern match for function dispatch. Again, free ranging evaluation comes into play.}
    sent: "2017-08-17T18:24:52.069Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995df3dc101bc4e3a2b2512"
    text: {This is not Red of course. I haven’t found a way to do similar things in Red. So I can implment two —assert, one for [logic!], the other for [block!].}
    sent: "2017-08-17T18:23:57.001Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995dee8bc46472974940f0c"
    text: {Do you know how to use pattern matching in Red?^/```^/fb[n_] /; Divisible[n, 15] := FizzBuzz^/fb[n_] /; Divisible[n, 3] := Fizz^/fb[n_] /; Divisible[n, 5] := Buzz^/fb[n_] := n^/```}
    sent: "2017-08-17T18:22:32.617Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995dea0578b44a046bd4830"
    text: {That's what the test case string "names" are for in the quick-test design. But yet, I understand.}
    sent: "2017-08-17T18:21:20.174Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5995de3080d90ca0240c9d12"
    text: {I have to use it myself, otherwise I have to add debug messages manually for each test cases.}
    sent: "2017-08-17T18:19:28.967Z"
    editedAt: "2017-08-17T18:19:40.149Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995ddbb80d90ca0240c9a8e"
    text: {Then see how hard it would be to programmatically mod existing tests to blockify them. Depending on what Peter and Nenad think.}
    sent: "2017-08-17T18:17:31.477Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dd90162adb6d2e074d7d"
    text: {What you could do, for `assert`, is add `block!` as a supported arg type, and add your logic in a handler for it. That doesn't address the existing tests, but would be a new feature. }
    sent: "2017-08-17T18:16:48.944Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dd80578b44a046bd4241"
    text: {```^/--assert*: func [^/  assertion-block [block!]^/  /local assertion^/][^/  assertion: do assertion-block^/  --assert assertion^/  if not assertion [^/    print-assertion-block assertion-block^/  ]^/]^/^/print-assertion-block: func [^/  assertion-block [block!]^/][^/  nonOp?: func [x][none == find ops to-string x]^/  ops: ["%" "*" "**" "+" "-" "..." "/" "//" "<" "<<" "<=" "<>" "=" "==" "=?" ">" ">=" ">>" ">>>" "and" "is" "or" "xor"]^/  conditional-do: func [x][either nonOp? to-string x [do x][x]]^/  probe map :conditional-do (load form assertion-block)^/]^/```}
    sent: "2017-08-17T18:16:31.999Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995dd1676a757f808b59538"
    text: "you are right."
    sent: "2017-08-17T18:14:46.643Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995dd1080d90ca0240c9623"
    text: {But I'm not trying too hard to be technically correct in streaming chat. :^^)}
    sent: "2017-08-17T18:14:40.406Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dcd7162adb6d2e074a08"
    text: {If we passed `add` as a separate func arg, outside the block, it would be more like `apply`, I think.}
    sent: "2017-08-17T18:13:43.850Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dc9a2723db8d5eb4c136"
    text: {That's just the design for quick-test's `assert`. I've written a lot of test bits that use the block trick.  }
    sent: "2017-08-17T18:12:42.066Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dc979acddb24079f1d4a"
    text: {BTW, what you implemented is not lazy. it’s apply. ;)}
    sent: "2017-08-17T18:12:39.117Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995dc37bc464729749403f3"
    text: {Correct. Putting things in a block prevents evaluation, which you can then control at will.}
    sent: "2017-08-17T18:11:03.277Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dc3676a757f808b59213"
    text: "There are too many test cases which use —assert. "
    sent: "2017-08-17T18:11:02.678Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995dc10ee5c9a4c5fcf6f1c"
    text: "Yes."
    sent: "2017-08-17T18:10:24.142Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995dc0d2723db8d5eb4bf52"
    text: {If I understood what you said correctly, I must create a new function but not changing the implementation of —assert.}
    sent: "2017-08-17T18:10:21.482Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995dc06ee5c9a4c5fcf6ee0"
    text: {Because you want to show the test itself, as above, correct?}
    sent: "2017-08-17T18:10:14.847Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dbb9bc4647297494012c"
    text: {let’s assume that f is —asert. This the current situation. ^/``` --assert ys == xs```^/^/I need lazy evaluation, so I have to create new function —assert*, and use —assert* [ys == xs].}
    sent: "2017-08-17T18:08:57.836Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995dbacee5c9a4c5fcf6cee"
    text: {e.g., use your output example above, `f [add 1 1]` as your input. Again, how best to do this depends on your ultimate goal.}
    sent: "2017-08-17T18:08:44.234Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dafeee5c9a4c5fcf6980"
    text: {Ah, so `f` is your caller. Then you'll need to put something in a block.}
    sent: "2017-08-17T18:05:50.403Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dad2ee5c9a4c5fcf68ee"
    text: {```^/>> lazy: func [spec][reduce [first spec next spec]]^/== func [spec][reduce [first spec next spec]]^/>> lazy [f add 1 1]^/== [f [add 1 1]]^/```}
    sent: "2017-08-17T18:05:06.430Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995dac3a7b406262d9c1228"
    text: {@greggirwin I don’t want to evaluate the parameter of f. add 1 1}
    sent: "2017-08-17T18:04:51.230Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995da689acddb24079f12db"
    text: {:point_up: [August 17, 2017 11:43 AM](https://gitter.im/red/red?at=5995d5b9a7b406262d9bfb0f) @unchartedworks, what is it you want to accomplish? You can pass functions without evaluating them, but because Red has free-ranging evaluation, if you don't evaluate a function, the caller (`f` in your example) can't know how many arguments to consume. You could do it by passing the func and all the args in a block, but that may not be what you're after. That's where I'm not clear. You have `f` in the output as well, so maybe you have another level?}
    sent: "2017-08-17T18:03:20.879Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995d9242723db8d5eb4b0f9"
    text: {@PeterWAWood Regarding quick-test, I think there is a missing feature of —assert. When a test fails, —assert only tells this test is failed but it doesn’t provide detailed information. ^/##OLD##^/Test:^/```^/--test-- "string! -> string!"^/    xs: "abc"^/    ys: "ABCD"^/    --assert ys == xs^/```^/^/Test Result:^/```^/===group=== map^/--test-- string! -> string! FAILED**************^/```^/^/I added a new function.^/—assert*^/##NEW##^/Test:^/```^/--test-- "string! -> string!"^/    xs: "abc"^/    ys: "ABCD"^/    —assert* [ys == xs]^/```^/^/Test Result:^/```^/--test-- string! -> string! FAILED**************^/["ABCD" == “abc”]^/^/```}
    sent: "2017-08-17T17:57:56.013Z"
    editedAt: "2017-08-17T17:58:46.992Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995d6f2a7b406262d9c017b"
    text: "@fvanzeveren you're welcome!"
    sent: "2017-08-17T17:48:34.681Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5995d5b9a7b406262d9bfb0f"
    text: {Is it possible to do lazy evaluation or use macro?  ^/^/Input:^/`f add 1 1`^/Output:^/`f [add 1 1]` }
    sent: "2017-08-17T17:43:21.233Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995d0efbc4647297493c911"
    text: {@rebolek Using size? before and after writing the data is making the job for me. Thank you for the hint!}
    sent: "2017-08-17T17:22:55.210Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995c68d76a757f808b5261e"
    text: {@korstoilija, I added the keyboard example to https://github.com/red/red/wiki/VID-and-View-(GUI)-hints-and-tips}
    sent: "2017-08-17T16:38:37.967Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5995a74f9acddb24079e0131"
    text: {@fvanzeveren `parse` is relatively fast IMO. I would leave the optimization to the time, when it's really needed :)}
    sent: "2017-08-17T14:25:19.266Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5995a739ee5c9a4c5fce6c74"
    text: "I let you now if it works!"
    sent: "2017-08-17T14:24:57.982Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a72d80d90ca0240b85d9"
    text: "Cheers!"
    sent: "2017-08-17T14:24:45.464Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a710a7b406262d9afc8f"
    text: {parse is going to be awfully slow for a database usage, no?}
    sent: "2017-08-17T14:24:16.297Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a6f99acddb24079dfded"
    text: {@rebolek I think using size? bedore and after writing could make the trick :) Thank you for the hint... I will try this.}
    sent: "2017-08-17T14:23:53.939Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a6f1bc4647297492f4f7"
    text: {```^/>> crlf-length?: function [data][size: 0 parse data [some [newline (size: size + 1) | skip]] size + length? data]^/== func [data /local size][size: 0 parse data [some [newline (size: size + 1) | skip]] size + length? data]^/>> file: {a^^/b}^/== "a^^/b"^/>> crlf-length? file^/== 4^/```}
    sent: "2017-08-17T14:23:45.867Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5995a672c101bc4e3a29fe8f"
    text: {Then you probably should parse the file, count newlines and add that number to length.}
    sent: "2017-08-17T14:21:38.919Z"
    editedAt: "2017-08-17T14:24:04.349Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5995a65ea7b406262d9af8f8"
    text: "Oh, I misunderstand you, sorry."
    sent: "2017-08-17T14:21:18.559Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5995a63f614889d4755a886c"
    text: {size? will return the whole size of the file, not the nb of character last written...}
    sent: "2017-08-17T14:20:47.349Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a615210ac26920929b7b"
    text: "@fvanzeveren As I wrote, use `size?`."
    sent: "2017-08-17T14:20:05.398Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5995a5fd80d90ca0240b81b1"
    text: {@unchartedworks  indeed... and I am lookink for a way to get how many characters have been actually written}
    sent: "2017-08-17T14:19:41.628Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a5b42723db8d5eb3ab88"
    text: {Write has a side effect. The side effect depend on OS. Write converts ^^/ to LF or CRLF.}
    sent: "2017-08-17T14:18:28.913Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995a598c101bc4e3a29faba"
    text: "in red :)"
    sent: "2017-08-17T14:18:00.391Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a594ee5c9a4c5fce61de"
    text: {I am developpement an object-based indexed files database in rebol :)}
    sent: "2017-08-17T14:17:56.976Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a57280d90ca0240b7e98"
    text: "Ah, I see now"
    sent: "2017-08-17T14:17:22.118Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5995a54e80d90ca0240b7da8"
    text: {@9214 because i will have many objects stored in the file. Eveey time I append an object to the file, I need to know how many characters were actually writtent to kee a reference...}
    sent: "2017-08-17T14:16:46.546Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a546162adb6d2e0633e1"
    text: {@fvanzeveren `size?` is your friend:^/```^/>> length? {a^^/b}^/== 3^/>> write %delme {a^^/b}^/>> size? %delme^/== 4^/```^/(this is on Windows)}
    sent: "2017-08-17T14:16:38.485Z"
    editedAt: "2017-08-17T14:17:35.426Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5995a4902723db8d5eb3a5e2"
    text: {You want to know how many characters were written in a file, correct? Why then you apply`length?` to `mold`ed object and not to `read`ed file?}
    sent: "2017-08-17T14:13:36.501Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5995a44f210ac26920929248"
    text: "Frankly, I don't get what you want :D"
    sent: "2017-08-17T14:12:31.394Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5995a433bc4647297492e517"
    text: {@9214 Yes, but using trim/lines will alter multi-line strings in the object, which is not desirable.}
    sent: "2017-08-17T14:12:03.986Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a3fd210ac26920928f50"
    text: {You get: ^/```^/*** Syntax Error: missing #"]" at {"Wor}^/*** Where: do^/*** Stack:^/```^/But if you do:^/```^/do read/seek/part %test.txt 0 add 6 length? mold obj^/```^/It works, because you have 6 lines^/}
    sent: "2017-08-17T14:11:09.838Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a3edc101bc4e3a29f27f"
    text: {```text^/>> length? trim/lines mold obj^/== 64^/```}
    sent: "2017-08-17T14:10:53.663Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5995a3c99acddb24079de91f"
    text: {@fvanzeveren ?^/```text^/>> write %test.txt obj^/>> length? read %test.txt^/== 88^/>> length? trim/lines read %test.txt^/== 64^/>> length? trim/all/lines read %test.txt^/== 50^/```}
    sent: "2017-08-17T14:10:17.078Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5995a32dc101bc4e3a29ecf8"
    text: {@9214 Yes, but this is not what I meant. Try this under windows:^/```^/obj: make object! [^/    a: 10^/    b: make object! [^/        c: "Hello"^/    ]^/    c: "World"^/]^/write %test.txt obj^/do read/seek/part %test.txt 0 length? mold obj^/```^/}
    sent: "2017-08-17T14:07:41.280Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a2eb210ac26920928853"
    text: {Alter? Why not to use `copy` then?^/```text^/>> original-string: {hello ^^/}^/== "hello ^^/"^/>> length? original-string^/== 7^/>> length? trim/lines original-string^/== 5^/>> original-string^/== "hello"^/```^/```text^/>> original-string: {hello ^^/}^/== "hello ^^/"^/>> length? trim/lines copy original-string^/== 5^/>> original-string^/== "hello ^^/"^/```}
    sent: "2017-08-17T14:06:35.014Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "5995a278bc4647297492db81"
    text: {`print length? replace/all form obj "^^/" "##”`}
    sent: "2017-08-17T14:04:40.164Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995a232162adb6d2e062037"
    text: {@9214 it will work, but it would alter multi-line strings... and this is not what I want. It would be interesting if write returns the position after the last character written}
    sent: "2017-08-17T14:03:30.225Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a2282723db8d5eb399a6"
    text: {`^^/` is 1 character btw^/```text^/>> length? {hello}^/== 5^/>> length? {hello^^/}^/== 6^/```}
    sent: "2017-08-17T14:03:20.001Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5995a182210ac269209281c2"
    text: "`print length? trim/lines form obj` ?"
    sent: "2017-08-17T14:00:34.547Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5995a07b76a757f808b4645a"
    text: {Yes, but 69 is not the number of characters written in the file, because newlines are coded on 2 characters.}
    sent: "2017-08-17T13:56:11.375Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5995a02d614889d4755a65db"
    text: {@fvanzeveren ^/```^/obj: make object! [^/    a: 12^/    b: make object! [^/        c: "Hello world"^/    ]^/    c: "Bonjour le monde!"^/]^/^/probe form obj^/print length? form obj^/```^/^/```^/{a: 12^^/b: make object! [^^/    c: "Hello world"^^/]^^/c: "Bonjour le monde!"}^/69^/```}
    sent: "2017-08-17T13:54:53.478Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59959698578b44a046bbcd77"
    text: {I also tried `mold/flat`, but this still does not work if the object contains a multi-line string attribute :(}
    sent: "2017-08-17T13:14:00.189Z"
    editedAt: "2017-08-17T13:14:19.154Z"
    v: 2
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59959433614889d4755a29ce"
    text: {hello,^/I am writing an object in a file, like this:^/```^/obj: make object! [^/    a: 12^/    b: make object! [^/        c: "Hello world"^/    ]^/    c: "Bonjour le monde!"^/]^/write %file.txt obj^/```^/How can I know how many characters have been written? I tried mold but this does not work because end of line are two characters long (CR+LF under windows). ^/Thank you for your help^/}
    sent: "2017-08-17T13:03:47.212Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59958daf80d90ca0240b012e"
    text: "@PeterWAWood Thanks. :)"
    sent: "2017-08-17T12:35:59.289Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599586e8a7b406262d9a582c"
    text: {```text^/>> add-double: func[a b][a + b * 2]^/== func [a b][a + b * 2]^/>> ++: make op! :add-double^/== make op! [[a b]]^/>> 1 ++ 2^/== 6^/```}
    sent: "2017-08-17T12:07:04.240Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599583d7bc46472974923bdb"
    text: "How to define an operator in Red?"
    sent: "2017-08-17T11:53:59.566Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59957aef80d90ca0240aa1d4"
    text: "@9214 I see. Thanks."
    sent: "2017-08-17T11:15:59.786Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5995767ba7b406262d99fed7"
    text: {@mikeparr @Arie-vw ^^---- You can freely use any of my code examples from Gitter and gists for "Red by example".}
    sent: "2017-08-17T10:56:59.397Z"
    editedAt: "2017-08-17T10:57:06.641Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5995762780d90ca0240a8876"
    text: {but that example could be here: http://www.red-by-example.org/#0on-key}
    sent: "2017-08-17T10:55:35.447Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "5995760e9acddb24079cf143"
    text: "yes, I see. "
    sent: "2017-08-17T10:55:10.954Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "5995758f2723db8d5eb2b421"
    text: {@korstoilija The current documentation is a *reference* documentation only, we need to add a *user manual* and tutorials.}
    sent: "2017-08-17T10:53:03.178Z"
    editedAt: "2017-08-17T10:53:11.049Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59957553578b44a046bb1dcf"
    text: {pretty smooth, thank you. I think an example like this could be added to documentation...}
    sent: "2017-08-17T10:52:03.385Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "599574c576a757f808b38658"
    text: {@korstoilija Here is a short example to get you started:^/```lisp^/view [^/    size 300x300^/    base red on-created [set-focus face] on-key [^/        switch event/key [^/            up    [face/offset/y: face/offset/y - 5]^/            down  [face/offset/y: face/offset/y + 5]^/            left  [face/offset/x: face/offset/x - 5]^/            right [face/offset/x: face/offset/x + 5]^/        ]^/    ]^/]^/```^/Notice that you need to `set-focus` on a given face in order to receive `key` event there. An alternative way is to hook the event handler to the window itself:^/```lisp^/view/options [^/    size 300x300^/    b: base red^/][^/    actors: context [^/        on-key: func [face event][^/            switch event/key [^/                up    [b/offset/y: b/offset/y - 5]^/                down  [b/offset/y: b/offset/y + 5]^/                left  [b/offset/x: b/offset/x - 5]^/                right [b/offset/x: b/offset/x + 5]^/            ]^/        ]^/    ]^/]^/```}
    sent: "2017-08-17T10:49:41.826Z"
    editedAt: "2017-08-17T10:51:30.568Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "599573dcee5c9a4c5fcd5c1e"
    text: "thank you! :)"
    sent: "2017-08-17T10:45:48.068Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "599573cb80d90ca0240a7cdc"
    text: {@korstoilija^/```text^/Red [Needs: 'View]^/^/view [^/    field 100x20 hint "type something" on-key [^/        print [event/key "was pressed!"]^/    ]^/]^/```}
    sent: "2017-08-17T10:45:31.767Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5995730dc101bc4e3a28efc4"
    text: {yeah, thas what I have been looking at and trying to figure out. }
    sent: "2017-08-17T10:42:21.244Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "599572a9614889d475598037"
    text: {@korstoilija https://doc.red-lang.org/en/view.html#_events}
    sent: "2017-08-17T10:40:41.891Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5995720e210ac26920918f8c"
    text: "by arrow keys"
    sent: "2017-08-17T10:38:06.974Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "599572052723db8d5eb2a39d"
    text: {how do I read keyboard presses? I want to make a simple 2d game where I move my guy around.}
    sent: "2017-08-17T10:37:57.808Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "5995717080d90ca0240a72cd"
    text: {@unchartedworks  or http://www.red-by-example.org/}
    sent: "2017-08-17T10:35:28.241Z"
    editedAt: "2017-08-17T10:35:39.489Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59956d832723db8d5eb28b00"
    text: {and what you're trying to do can be accomplished with `what` and `help` I believe}
    sent: "2017-08-17T10:18:43.656Z"
    editedAt: "2017-08-17T10:25:20.333Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59956d2bc101bc4e3a28d5f6"
    text: {most of your functions are using other functions which are not yet defined in source code}
    sent: "2017-08-17T10:17:15.202Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59956700210ac26920915ba5"
    text: {I have to move ^/```^/;-- output^/print red-word-categories^/print red-word-list^/```^/to the end of the source code file, otherwise there will be some compiler errors.^/```^/functions natives ops actions^/*** Script Error: red-functions has no value^/*** Where: print^/*** Stack:^/```^/How can I do it without compiler errors?^/^/```^/;-- main^/red-word-list: func [][map :to-word-name red-word-categories]^/red-word-categories: ["functions" "natives" "ops" "actions"] ^/to-word-name: func [x][reduce [load append copy "red-" x]]^/^/;-- words^/red-functions: func [][red-words :red-function?]^/red-natives: func [][red-words :red-native?]^/red-ops: func [][red-words :red-op?]^/red-actions: func [][red-words :red-action?]^/^/red-words: func [predicate][form map :add-double-quotes map :first filter :predicate map :words filter :not-empty? lines what/buffer]^/^/add-double-quotes: func [s] [append (append copy "^^"" s) "^^""] ^/^/;-- predicates^/red-word?: func [type x][(second x) == type]^/red-function?: func [x][red-word? "function!" x] ^/red-native?: func [x][red-word? "native!" x]^/red-op?: func [x][red-word? "op!" x] ^/red-action?: func [x][red-word? "action!" x] ^/^/;-- helpers^/lines: func [xs][map :trim split xs "^^(line)"]^/words: func [xs][reduce [split (trim/lines xs) " "]]^/not-empty?: func [xs][not empty? xs]^/^/;-- output^/print red-word-categories^/print red-word-list^/^/```}
    sent: "2017-08-17T09:50:56.861Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59956075bc46472974918a84"
    text: {@ggenikus welcome! there is also a russian chat room https://gitter.im/red/Russian}
    sent: "2017-08-17T09:23:01.107Z"
    editedAt: "2017-08-17T09:25:35.099Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59952b3fee5c9a4c5fcbf5fb"
    text: " @greggirwin thanks!"
    sent: "2017-08-17T05:35:59.475Z"
    v: 1
    author: "54eb2a2115522ed4b3dc5b6f"
) #(
    id: "59952a42578b44a046b9b400"
    text: {To clarify, there is no User Defined Type in Red. You could certainly roll your own in Red/System, but the nature of Red makes lexical space very tight. }
    sent: "2017-08-17T05:31:46.583Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599529e1bc464729749079f8"
    text: {:point_up: [August 16, 2017 7:27 PM](https://gitter.im/red/red?at=5994f104ee5c9a4c5fcb0425) @ggenikus, you can't *yet* create custom datatypes in Red, and objects are just objects. There is no class system or prototype hierarchy. Some people built them for their own use in R2, but they are not a target feature for standard Red at this time. }
    sent: "2017-08-17T05:30:09.557Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599511c3c101bc4e3a2730cd"
    text: {ok, filed one, https://github.com/red/red/issues/2980}
    sent: "2017-08-17T03:47:15.713Z"
    v: 1
    author: "5994e88bd73408ce4f71b7ce"
) #(
    id: "59950f2a76a757f808b1a4e1"
    text: "@Dieken It's a bug. Please open a ticket for it."
    sent: "2017-08-17T03:36:10.002Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "599509699acddb24079af8d6"
    text: {@PeterWAWood   I mean  ["aa"^},  not ["aa"],  notice the right brace. }
    sent: "2017-08-17T03:11:37.725Z"
    v: 1
    author: "5994e88bd73408ce4f71b7ce"
) #(
    id: "59950609614889d475578daf"
    text: {```text^/>> print ["aa"]^/aa^/>> quit^/$ ^/```^/}
    sent: "2017-08-17T02:57:13.831Z"
    editedAt: "2017-08-17T02:57:29.531Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599505ce2723db8d5eb0a91a"
    text: {@Dieken It works for `quit`, Ctrl-c and Ctrl-d all work for me. I am using macOS 10.12.6 and use the default UTF-8 encoding in the Terminal app.}
    sent: "2017-08-17T02:56:14.408Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5995035aee5c9a4c5fcb472f"
    text: {Hi, I'm using red 0.6.3 on macOS,  when I input   print ["aa"^}  and press Enter in red console,  I can't quit it anymore,  Ctrl-c, Ctrl-d, Ctrl-z all don't work.}
    sent: "2017-08-17T02:45:46.111Z"
    v: 1
    author: "5994e88bd73408ce4f71b7ce"
) #(
    id: "5994f104ee5c9a4c5fcb0425"
    text: {Hello everyone, trying to understand red's type system, how to create custom type, and is there any  relationship between Object and type in red, as far as I understand every object has type object!, so it looks like there is no relationship between objects and types in red, and there is no way to create custom type  am I right ?}
    sent: "2017-08-17T01:27:32.020Z"
    v: 1
    author: "54eb2a2115522ed4b3dc5b6f"
) #(
    id: "5994b7beee5c9a4c5fca19cf"
    text: {@unchartedworks, feel free to add your Emacs mode to https://github.com/red/red/wiki/Editor-Integrations. Thanks!^/}
    sent: "2017-08-16T21:23:10.926Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5994b4a4578b44a046b7cb22"
    text: {Red-mode for Emacs. It’s based on Rebol-mode for Emacs.^/https://github.com/unchartedworks/red-mode}
    sent: "2017-08-16T21:09:56.207Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5994b459bc464729748e9390"
    text: "@greggirwin ;)"
    sent: "2017-08-16T21:08:41.329Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5994a9a776a757f808aff9ed"
    text: {@unchartedworks, no linter yet. Tricky, because one man's mistake is another's leverage.}
    sent: "2017-08-16T20:23:03.208Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59948debbc464729748dcf3a"
    text: {@greggirwin It’s informative. Red scoping confused me and it’s error prone.  Is there any Lint tools for Red or Compiler can detect common mistakes?^/^/Thanks! :)}
    sent: "2017-08-16T18:24:43.078Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59947c9376a757f808af1a1c"
    text: {We also have examples of how to build "refined" function calls dynamically. That is, applying refinements in a currying/specialization fashion.}
    sent: "2017-08-16T17:10:43.467Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59947c42ee5c9a4c5fc8ed91"
    text: {In addition to "normal" currying, when you think of Red as data, you can do all sorts of fun things. Here's an example @dockimbel worked up some time back:^/```^/specialize: function [fun [function!] defs [block!]][^/    spec: copy/deep spec-of :fun^/    body: copy/deep body-of :fun^/^/    foreach [arg value] defs [^/        arg: to word! form arg^/        pos: find spec arg^/        remove/part pos pick [2 1] block? pos/2^/        parse body rule: [some [change only arg value | into rule | skip]]^/    ]^/    func spec body^/]^/e.g. [^/^-foo: func [x y][x + y]^/^-;== func [x y][x + y]^/^-bar: specialize :foo [x: 5]^/^-;== func [y][5 + y]^/^-bar 10^/^-;== 15^/^-pad8: specialize :pad [n: 8]^/^-;== func ["Pad a string on right side with spaces"...^/^-pad8 "hello"^/^-;== "hello   "^/^/^-entab: specialize :replace [pattern: space value: tab]^/^-;== func [series [series!] /all /local many? len pos][many?: any [system/words/a...^/^-entab "   hello^^/    world"^/^-;== "^^-  hello^^/    world"^/^-entab/all "   hello^^/    world"^/^-;== "^^-^^-^^-hello^^/^^-^^-^^-^^-world"^/^/^-{^/^-You can use source on the specialized functions to see that the source code is^/^-rewritten. Many improvements are possible, like specializing on refinements and^/^-optional arguments, or folding constant expressions resulting from fixing^/^-arguments.^/^-}^/]^/```}
    sent: "2017-08-16T17:09:21.980Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59947b952723db8d5eae3b86"
    text: {@unchartedworks, the big difference in how to think about Red scoping is that each word carries a binding with it, to it's context. In reality, there is no scope in Red: https://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red/21964858#21964858^/^/The other thing to remember, is that Red is data first. Everything is data until it's evaluated. Learning the evaluation rules, i.e., when it occurs, will help it all make sense.}
    sent: "2017-08-16T17:06:29.915Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59947b0b80d90ca02405ff33"
    text: {We should give this a new name if we include it in any of our own code right now, so it doesn't conflict with the official `to-path`, that behaves differently.}
    sent: "2017-08-16T17:04:11.758Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59947ae176a757f808af1060"
    text: {:point_up: [August 16, 2017 1:40 AM](https://gitter.im/red/red?at=5993f70676a757f808ac4920) @fvanzeveren, here's a `to-path` approach that will flatten things. I did it long ago, before Red built it in, and commented on the ticket @meijeru opened for it.^/```^/to-path: func [spec][^/^-; LOAD FORM is used to clean up specs that have refinements ^/^-; in them. Refinement values get their sigil doubled, which^/^-; FORM removes, so they are sanitized. More overhead, but we^/^-; could make that optional if this func lives on.^/^-;!! This does work if 'spec is empty. It returns a block in that case.^/^-load form append clear '_/_ spec^/]^/```^/See also: https://github.com/red/red/wiki/Path!-notes}
    sent: "2017-08-16T17:03:29.152Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59945941ee5c9a4c5fc82f9f"
    text: {@dockimbel `find/any` question answered, I will take a look at others also, if somebody won't be faster :)}
    sent: "2017-08-16T14:40:01.949Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "599447f39acddb2407975f2c"
    text: {Notepad++ 7.5 added support for Rebol. Not sure if it is working though.}
    sent: "2017-08-16T13:26:11.892Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59943a652723db8d5eaccfde"
    text: {Anyone willing to answer some pending questions on [/r/redlang](https://www.reddit.com/r/redlang/)? Like [this one](https://www.reddit.com/r/redlang/comments/6slh91/findany_workaround/) for example:.}
    sent: "2017-08-16T12:28:21.267Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "599433632723db8d5eaca615"
    text: "@9214 Thanks! :)"
    sent: "2017-08-16T11:58:27.921Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5994332c2723db8d5eaca536"
    text: {@unchartedworks https://doc.red-lang.org/en/reactivity.html}
    sent: "2017-08-16T11:57:32.568Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599431e176a757f808ad7765"
    text: {btw, here's your closure^/```text^/>> closure: func [vars spec body][func spec bind body context vars]^/== func [vars spec body][func spec bind body context vars]^/>> foo: closure [x: 0][y][x: x + y]^/== func [y][x: x + y]^/>> foo 1^/== 1^/>> foo 2^/== 3^/>> foo 10^/== 13^/```}
    sent: "2017-08-16T11:52:01.940Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599431d2c101bc4e3a22f4d2"
    text: {@unchartedworks sure thing you can! Just don't expect Red to be functional by default, because it's quite different.}
    sent: "2017-08-16T11:51:46.290Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5994311cc101bc4e3a22f0d8"
    text: {I am interested in Red because I am interesed in Functional Reactive Programming. I hope Red can solve my problems.}
    sent: "2017-08-16T11:48:44.064Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5994301eee5c9a4c5fc74ea9"
    text: {@9214 I get used to functional programming. Even if Red is not a functional language, I guess I still can do it in a functional way.^/@dockimbel It’s good to know.}
    sent: "2017-08-16T11:44:30.098Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59942f15bc464729748bb82e"
    text: {@unchartedworks Indefinite extent through closures is not yet implemented in Red, though, it's definitely on the todo-list. It should come at the same time as builtin HOF. Implementing closures can be done easily by anyone right now. You can search for examples among the older posts in this room.}
    sent: "2017-08-16T11:40:05.686Z"
    editedAt: "2017-08-16T11:44:48.043Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59942f0b76a757f808ad6a87"
    text: {Rule `No.1`: throw away everything you know from other languages then it comes to Redbol, in your case - don't treat Red as functional language so easily.}
    sent: "2017-08-16T11:39:55.179Z"
    editedAt: "2017-08-16T11:40:05.091Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59942ecc2723db8d5eac8e21"
    text: {Normally, we'd use `reduce` inside the function as @dockimbel said.}
    sent: "2017-08-16T11:38:52.525Z"
    editedAt: "2017-08-16T11:39:09.965Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59942ea69acddb240796d616"
    text: {Thank you all! I use closures in the other laugaunges. I guess I have to be careful to do it in Red.}
    sent: "2017-08-16T11:38:14.225Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59942e8d578b44a046b4e5df"
    text: {and then add a little binding:^/```text^/>> print bind f 3 'x^/10^/```}
    sent: "2017-08-16T11:37:49.880Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59942e4da7b406262d93e39d"
    text: {Try this and you still get the error:^/```text^/>> x: 10^/== 10^/>> func [x][[x]]^/== func [x][[x]]^/>> print f 3^/*** Script Error: x is not in the specified context^/*** Where: print^/*** Stack:  ^/```}
    sent: "2017-08-16T11:36:45.531Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59942d182723db8d5eac854d"
    text: {@unchartedworks `print` evaluates its argument before printing. Your function returns `[x]`, `print` evaluates `[x]` (as though you had coded `reduce [x]`). `x` is not bound to a value in the "global" context. Hence the error.}
    sent: "2017-08-16T11:31:36.980Z"
    editedAt: "2017-08-16T11:32:14.283Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59942ced80d90ca02404453f"
    text: {@unchartedworks that's because `x` word inside `[x]` block is unsetted in global context}
    sent: "2017-08-16T11:30:53.889Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59942b1f578b44a046b4d581"
    text: {```^/f: func [x] [[x]] ^/print f 3^/```^/^/```^/*** Script Error: x is not in the specified context^/*** Where: print^/*** Stack:^/```}
    sent: "2017-08-16T11:23:11.016Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59942ad4c101bc4e3a22d346"
    text: {@dockimbel Is it a sort of variable shadowing because of []?}
    sent: "2017-08-16T11:21:56.622Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59942a302723db8d5eac7540"
    text: {@unchartedworks A block evaluates to itself. What you want is to `reduce` it:^/```lisp^/>> x: 3^/== 3^/>> [x]^/== [x]^/>> reduce [x]^/== [3]^/```}
    sent: "2017-08-16T11:19:12.081Z"
    editedAt: "2017-08-16T11:19:20.009Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59942a119acddb240796c209"
    text: "` f: func [x] [reduce [x]]`"
    sent: "2017-08-16T11:18:41.631Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599429ad9acddb240796c02e"
    text: "How to fix it?"
    sent: "2017-08-16T11:17:01.769Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59942990162adb6d2eff08db"
    text: {```^/f: func [x] [[x]] ^/f 3^/```^/^/expected result: [3]^/actual result: [x]^/^/}
    sent: "2017-08-16T11:16:32.636Z"
    editedAt: "2017-08-16T11:17:42.421Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59942209210ac269208b595a"
    text: "Thanks, fixed now."
    sent: "2017-08-16T10:44:25.848Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59941aff2723db8d5eac2abc"
    text: "Done."
    sent: "2017-08-16T10:14:23.522Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "599418f4c101bc4e3a22766b"
    text: {@WiseGenius Looks like a bug indeed. Please open a ticket for it, I will fix it at once.}
    sent: "2017-08-16T10:05:40.294Z"
    editedAt: "2017-08-16T10:06:25.120Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "599418bd2723db8d5eac2149"
    text: {`foreach` on `parens!` doesn't behave as I expected:^/^/```^/>> foreach [a b] quote [10 20 30 40] [?? a ?? b]^/a: 10^/b: 20^/a: 30^/b: 40^/```^/So far so good.^/^/```^/>> foreach [a b] quote (10 20 30 40) [?? a ?? b]^/a: (10 20 30 40)^/b: (10 20 30 40)^/a: (30 40)^/b: (30 40)^/```^/@dockimbel Is this a bug?^/^/```^/>> foreach a quote (10 20 30 40) [?? a]^/a: 10^/a: 20^/a: 30^/a: 40^/```^/That looks right.^/^/```^/>> foreach [a] quote (10 20 30 40) [?? a]^/a: (10 20 30 40)^/a: (20 30 40)^/a: (30 40)^/a: (40)^/```^/There it goes again! Fascinating.}
    sent: "2017-08-16T10:04:45.535Z"
    editedAt: "2017-08-16T10:05:04.027Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "59941673bc464729748b32dc"
    text: {gosh, it's easier to provide separate `spec` argument :D^/```text^/map: func [^/    "apply function to elements of the series"^/    series [series!]^/    spec   [block!]^/    funct  [function!]^/][^/    collect [^/        foreach :spec series [^/            keep reduce compose [funct (:spec)]^/        ]^/    ]^/]^/^/probe map [1 2 3] [x] :to-string^/probe map [1 2 3 4 5 6] [x y z] func [a b c][a + b * c]^/```}
    sent: "2017-08-16T09:54:59.227Z"
    editedAt: "2017-08-16T09:57:14.761Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59941586578b44a046b460df"
    text: {but then again I forgot about typesets :worried: (fixed)}
    sent: "2017-08-16T09:51:02.414Z"
    editedAt: "2017-08-16T09:52:53.245Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5994156376a757f808acebde"
    text: {```text^/map: func [^/    "apply function to elements of the series"^/    series [series!]^/    funct  [function!]^/    /local^/        spec [block!]^/][  ^/    spec: replace/deep/all spec-of :funct [string! | block!] []^/    collect [^/        foreach :spec series [^/            keep reduce compose [funct (:spec)]^/        ]^/    ]^/]^/```}
    sent: "2017-08-16T09:50:27.405Z"
    editedAt: "2017-08-16T09:52:42.885Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599414bd76a757f808ace940"
    text: "good catch, I forgot about docstrings"
    sent: "2017-08-16T09:47:41.881Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5994145d162adb6d2efea1bf"
    text: "@9214 probe map [1 2 3] :to-string"
    sent: "2017-08-16T09:46:05.067Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59941282a7b406262d934f21"
    text: {@unchartedworks again, enhanced `map`^/```text^/map: func [^/    "apply function to elements of the series"^/    series [series!]^/    funct  [function!]^/    /local^/        spec  [block!]^/][  ^/    spec: spec-of :funct^/    collect [^/        foreach :spec series [^/            keep reduce compose [funct (:spec)]^/        ]^/    ]^/]^/^/probe map [1 2 3] func [x][x + 1]^/probe map [1 2 3 4 5 6 7 8 9 0] func [x y][x * y]^/```}
    sent: "2017-08-16T09:38:10.039Z"
    editedAt: "2017-08-16T09:38:16.898Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599407ad210ac269208ad1d9"
    text: "@9214 nice!"
    sent: "2017-08-16T08:51:57.450Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599405b4ee5c9a4c5fc67630"
    text: {@unchartedworks ?^/```text^/compose-f: func [^/    functions^/    list^/    /local f^/][  ^/    val: copy/deep list^/    foreach f reduce functions [val: f val]^/]^/^/probe compose-f ^/    [:first :to-integer func [x][x + 1]]^/    ["15" "2" "96"]^/```}
    sent: "2017-08-16T08:43:32.167Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5994025e210ac269208ab6b8"
    text: {Racket-Lang: ```((add1 .. string->number .. first) '("15" "2" "96”))```}
    sent: "2017-08-16T08:29:18.795Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599401bf210ac269208ab385"
    text: {:point_up: [14 августа 2017 г., 10:13](https://gitter.im/red/red?at=59913181614889d4754657b4)}
    sent: "2017-08-16T08:26:39.969Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599401779acddb240795f218"
    text: {Does Red support function composition? Do I have to write it myself?}
    sent: "2017-08-16T08:25:27.243Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5994008f162adb6d2efe37a1"
    text: {no, as Red is not a functional language in a strict sense, though you probably can implement currying yourself ;)}
    sent: "2017-08-16T08:21:35.536Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59940051578b44a046b3ef9e"
    text: {@9214 Does Red support Currying?  It seems that it doesn’t.}
    sent: "2017-08-16T08:20:33.059Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5993ffd3210ac269208aa9b1"
    text: {@9214 I think it’s better. It’s easier to understand what is going on.}
    sent: "2017-08-16T08:18:27.729Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5993ff62162adb6d2efe3146"
    text: {@unchartedworks ^/```text^/>> type? :to-string^/== function!^/>> type? to-string^/*** Script Error: to-string is missing its value argument^/*** Where: to-string^/*** Stack: to-string ^/>> type? to-string 'arg^/== string!^/```}
    sent: "2017-08-16T08:16:34.089Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993ff0e2723db8d5eaba074"
    text: "@fvanzeveren you're welcome"
    sent: "2017-08-16T08:15:10.822Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993fe89a7b406262d92e077"
    text: {@9214  Thank you it perfectly fits my needs. François}
    sent: "2017-08-16T08:12:57.740Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5993fdab210ac269208a9f71"
    text: {@unchartedworks in your example, `to-string` is evaluated and expects one argument before you pass it to `type?`. In the next line `print type? :to-string` works as expected because `:to-string` gets the body of the function *without evaluating it*, `print` recieves `function!`, prints `function` and returns **`unset`**... which, passed out back to firtst `to-string`, causes and error.}
    sent: "2017-08-16T08:09:15.207Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993fcb2162adb6d2efe212b"
    text: {@dockimbel thanks Doc! @fvanzeveren how about that?^/```text^/>> obj: make object! [^/[    a: 10^/[    b: make object! [c: copy "Hello"]^/[    c: "World"^/[    ]^/== make object! [^/    a: 10^/    b: make object! [^/        c: "Hello"^/    ]^/    c...^/>> p: [b c]^/== [b c]^/>> print reduce to path! compose [obj (p)]^/Hello^/```}
    sent: "2017-08-16T08:05:06.195Z"
    editedAt: "2017-08-16T08:12:55.183Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993fca9210ac269208a99ec"
    text: "@9214 What’s the type of :to-string?"
    sent: "2017-08-16T08:04:57.442Z"
    editedAt: "2017-08-16T08:05:43.436Z"
    v: 3
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5993fc7976a757f808ac6746"
    text: {@solisoft read the same discussion from there https://gitter.im/red/red?at=599177bb1c8697534ab7238b}
    sent: "2017-08-16T08:04:09.753Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "5993fc62a7b406262d92d4d1"
    text: {@9214 ^/```^/print type? to-string^/print type? :to-string^/```^/^/```^/function^/*** Script Error: to-string does not allow unset! for its value argument^/*** Where: to-string^/*** Stack: to-string^/```}
    sent: "2017-08-16T08:03:46.546Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5993fb9aee5c9a4c5fc640eb"
    text: {@unchartedworks you can specify typesets in your function and catch this kind of bug earlier}
    sent: "2017-08-16T08:00:26.908Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993fb4580d90ca024034d71"
    text: {@9214 I figured it out. It’s mistake. ^/```print map :to-string ["abc" "def”]``` I should use :to-string but not to-string. I really hope type-checking could prevent it from happening.^/}
    sent: "2017-08-16T07:59:01.975Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
)#(
    id: "5993fb2c210ac269208a92dc"
    text: {@9214 Not a bug, it a consequence of `path!` being part of `any-block!` typeclass. Same as in Rebol. We might change that in Red for the 1.0, to *flatten* paths by default.}
    sent: "2017-08-16T07:58:36.798Z"
    editedAt: "2017-08-16T07:59:07.811Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5993fa80a7b406262d92cb12"
    text: "On the `b/c` bug: see new issue."
    sent: "2017-08-16T07:55:44.030Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5993fa68162adb6d2efe160d"
    text: {and enhanced `foldl`^/```text^/foldl: func [series funct base /local body value][  ^/    body: copy [funct base value]^/    case/all [^/        series? base [base: copy/deep base]^/        op? :funct   [reverse/part body 2]^/    ]^/    insert body quote base:^/    foreach value series body^/]^/```^/```text^/>> foldl [1 2 3] :* 1^/== 6^/>> foldl [4 5 6] :+ 0^/== 15^/>> foldl [4 5 6] :add 0^/== 15^/>> foldl [#"c" "ada" "bra"] :append "abra"^/== "abracadabra"^/```^/}
    sent: "2017-08-16T07:55:20.956Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993f9459acddb240795c661"
    text: {@unchartedworks here's your `map`^/```text^/map: func [series funct /local value][^/    collect [foreach value series [keep reduce [funct value]]]^/]^/```}
    sent: "2017-08-16T07:50:29.511Z"
    editedAt: "2017-08-16T07:50:53.114Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993f909162adb6d2efe0f21"
    text: {@fvanzeveren looks like a bug for me as Red treats `b/c` as single value^/```text^/>> reduce to path! [obj b c]^/== "Hello"^/>> p: to path! "b/c"^/== b/c^/>> to path! compose [obj (p)]^/== obj/b/c^/>> reduce to path! compose [obj (p)]^/*** Script Error: cannot access b/c in path obj/b/c^/*** Where: reduce^/*** Stack:  ^/```}
    sent: "2017-08-16T07:49:29.135Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993f7bd9acddb240795bdf8"
    text: "I can use my osx if needed"
    sent: "2017-08-16T07:43:57.341Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "5993f7ac614889d4755259c4"
    text: "anyway ... not urgent for now :)"
    sent: "2017-08-16T07:43:40.948Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "5993f78076a757f808ac4bfd"
    text: "the aur version behave the same"
    sent: "2017-08-16T07:42:56.943Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "5993f70676a757f808ac4920"
    text: {Hello all, I am struggling with path in Red. I would like to do the following:^/```^/obj: make object! [^/a: 10^/b: make object! [c: copy "Hello"]^/c: "World"^/]^/p: to-path "b/c"^/print obj/:p^/```^/I was expecting to get the value "Hello" instead of the following error:^/```^/*** Script Error: cannot access b/c in path obj/:p^/*** Where: print^/*** Stack:  ^/```^/So, how can I get a path value from an object in this way.^/THank you for your help.^/François^/}
    sent: "2017-08-16T07:40:54.770Z"
    editedAt: "2017-08-16T07:42:09.747Z"
    v: 3
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5993f62f614889d47552513d"
    text: "@unchartedworks show us a code snippet ;)"
    sent: "2017-08-16T07:37:19.321Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993f605614889d475525053"
    text: {map (a function) does not allow unset! for its xs argument? I don’t use unset! in map function. How to fix it?}
    sent: "2017-08-16T07:36:37.933Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5993f4fa76a757f808ac3fc4"
    text: "installing the 'aur' version"
    sent: "2017-08-16T07:32:10.766Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "5993f4e69acddb240795af36"
    text: {@dockimbel On ubuntu-based distrib, I can execute `red -c hello.red`.}
    sent: "2017-08-16T07:31:50.187Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5993f0f99acddb2407959bb0"
    text: {seems legit for me, you also installed supporting libs?^/> (*) For Linux 64-bit distros, you need to install 32-bit supporting libraries. So, for Debian-based distros, install them using:^/sudo apt-get install ia32-libs libc6-i386 libcurl3^/^/btw, there's [aur red package](https://aur.archlinux.org/packages/red/)^/}
    sent: "2017-08-16T07:15:05.097Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993f0e7c101bc4e3a21a346"
    text: {Can anyone reproduce @solisoft's issue with `-c`on Linux?}
    sent: "2017-08-16T07:14:47.358Z"
    editedAt: "2017-08-16T07:15:01.876Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5993f0341c8697534ac1ea8f"
    text: {I'm using red 0.6.3 (last stable) on an Archlinux based distri^/hello.red is quite basic^/```^/Red []^/print {Hellow World}^/```^/}
    sent: "2017-08-16T07:11:48.450Z"
    editedAt: "2017-08-16T07:12:37.800Z"
    v: 3
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "5993ef72614889d4755230e1"
    text: {@solisoft sorry, I'm not a *nix expert, hopefully someone from the community will help you with this issue :confused: meanwhile, what's your linux version and which red version do you use, last stable or automated build? How does `hello.red` script looks like?}
    sent: "2017-08-16T07:08:34.022Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993eae9bc464729748a575c"
    text: "and it open interaction console"
    sent: "2017-08-16T06:49:13.421Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "5993eada210ac269208a4736"
    text: {@9214  `red hello.red` works fine ... `red -c hello.red` raise `*** Error: cannot access argument file: -c` ^/}
    sent: "2017-08-16T06:48:58.307Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "5993e879162adb6d2efdbf9d"
    text: "@dockimbel Thanks. It works."
    sent: "2017-08-16T06:38:49.069Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5993c3a5210ac26920899f75"
    text: {@unchartedworks You don't need to put  `return: []` in function specification, as `return:` is optional (the default allowed types are from the `default!`typeset).}
    sent: "2017-08-16T04:01:41.812Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59935e3f614889d4754fdf9c"
    text: {It's one of those little details you don't really notice, until someone points it out. }
    sent: "2017-08-15T20:49:03.530Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599353f780d90ca02400979a"
    text: {@greggirwin Thanks. It’s good to know. I will look into them.}
    sent: "2017-08-15T20:05:11.561Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5993521e1c8697534abf6467"
    text: {@unchartedworks, nice. Note that there are currently some issues when compiling functions inside functions. Also, as a design detail, look at functions that take series arguments, like `append` and `change`. You'll see that they put the series argument first in the spec. When designing functions that operate on a series, that's a good pattern to follow. }
    sent: "2017-08-15T19:57:18.686Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59934af6162adb6d2efb4583"
    text: "@9214 That’s much better. :)"
    sent: "2017-08-15T19:26:46.827Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599347bd80d90ca0240057b6"
    text: "what about `./red -c hello.red`?"
    sent: "2017-08-15T19:13:01.148Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993448bee5c9a4c5fc337ab"
    text: {also be sure that you have 32-bit libraries installed as described [here](http://www.red-lang.org/p/download.html)}
    sent: "2017-08-15T18:59:23.966Z"
    editedAt: "2017-08-15T18:59:36.812Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993447680d90ca02400464e"
    text: "ok thanks I will have a have a look"
    sent: "2017-08-15T18:59:02.005Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "59934458210ac26920878c12"
    text: {@solisoft my guess is that it has something to do with^/> Note: Running the Red toolchain binary from a $PATH currently requires a wrapping shell script (see relevant tickets: #543 and #1547).}
    sent: "2017-08-15T18:58:32.837Z"
    editedAt: "2017-08-15T18:58:40.573Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599343d1a7b406262d8fbc55"
    text: {red -c hello.red^/*** Error: cannot access argument file:^/-c^/--== Red 0.6.3 ==-- ^/Type HELP for starting information. ^/}
    sent: "2017-08-15T18:56:17.092Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "599343beee5c9a4c5fc3344e"
    text: "but red -c hello.red don't"
    sent: "2017-08-15T18:55:58.250Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "599343b91c8697534abf2524"
    text: "and what error message do you get?"
    sent: "2017-08-15T18:55:53.597Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993437abc46472974879f9b"
    text: "I'm trying to compile from linux"
    sent: "2017-08-15T18:54:50.731Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "59934341ee5c9a4c5fc33185"
    text: "@solisoft hey there, can you be more specific?"
    sent: "2017-08-15T18:53:53.088Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599342adee5c9a4c5fc32ec3"
    text: "Hi there, red -c is not available for linux?"
    sent: "2017-08-15T18:51:25.528Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "59933d3bc101bc4e3a1eab86"
    text: {@unchartedworks ^/```text^/>> foldl: func [f b xs /local x][^/[        if series? b [b: copy b]^/[        foreach x xs [b: f b x]^/[    ]^/== func [f b xs /local x][if series? b [b: copy b] foreach x xs [b: f b x]]^/>> foldl :add 0 [1 2 3]^/== 6^/>> foldl :append "abr" ["a" "cad" "a" "bra"]^/== "abracadabra"^/>> head foldl func [x y][insert at x 2 y] [1 2 3] [4 5 6]^/== [1 4 2 5 3 6]^/```}
    sent: "2017-08-15T18:28:11.988Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59932263614889d4754eb54a"
    text: "Something feels amiss with this `foldl`."
    sent: "2017-08-15T16:33:39.958Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "599320b01c8697534abe7706"
    text: {```^/foldl: function [^/    "reduces the list using the binary operator, from left to right"^/    f^/    y^/    xs^/    return: [any-type!]^/] [^/    foreach x xs [^/        f y x^/    ]^/]^/^/map: function [^/    "applying f to each element of xs"^/    f^/    xs ^/    return: []^/] [^/    g: function [ys x] [append ys f x] ^/    foldl :g [] xs^/]^/^/filter: function [^/    "applying a predicate f to xs"^/    f^/    xs ^/    return: []^/] [^/    g: function [ys x] [either f x [append ys x][ys]]^/    foldl :g [] xs^/]^/^/print foldl :append "" ["4" "5" "6"]^/^/print map :to-string [1 2 3 4]^/^/print filter :string? [1 "a" 3 "abc" 2]^/^/```^/```^/456^/1 2 3 4^/a abc^/```^/}
    sent: "2017-08-15T16:26:24.770Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599318362723db8d5ea7a981"
    text: {Excellent. Make sure to note the difference between `append` and `append/only`, depending on your needs and goals.}
    sent: "2017-08-15T15:50:14.259Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599316d4162adb6d2efa40f6"
    text: {@greggirwin Thanks! I came up a map function as well. ^/```^/map: function [^/    "applying f to each element of xs"^/    xs ^/    f^/    return: []^/] [^/    ys: copy []^/    foreach x xs [^/        append ys (f x)^/    ]^/]^/^/```}
    sent: "2017-08-15T15:44:20.519Z"
    editedAt: "2017-08-15T15:45:30.493Z"
    v: 3
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599313e6210ac2692086952d"
    text: {`*-while` experiments: https://gist.github.com/greggirwin/9fc085a8b6b2ca38f756e9285c389674}
    sent: "2017-08-15T15:31:50.948Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599313644bcd78af5647143b"
    text: {If there's something specific you need, ask. Someone may have it already.}
    sent: "2017-08-15T15:29:40.566Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59931349ee5c9a4c5fc254ae"
    text: {An experimental `filter`:^/```^/filter: function [^/^-"Returns two blocks: items that pass the test, and those that don't"^/^-series [series!]^/^-test [any-function!] "Test (predicate) to perform on each value; must take one arg"^/^-/only "Return a single block of values that pass the test"^/][^/^-;TBD: Is it worth optimizing to avoid collecting values we won't need to return?^/^-result: reduce [copy [] copy []]^/^-foreach value series [^/^-^-append/only pick result make logic! test :value :value^/^-]^/^-either only [result/1][result]^/]^/```}
    sent: "2017-08-15T15:29:13.168Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599312e52723db8d5ea78ecc"
    text: "`remove-each` is the standard filtering func."
    sent: "2017-08-15T15:27:33.219Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599312c61c8697534abe31a6"
    text: {```^/; JS-like MAP. The order of args to the function is a bit odd, but is set^/; up that way because we always want at least the value (if your func takes^/; only one arg), the next most useful arg is the index, as you may display^/; progress, and the series is there to give you complete control and match^/; how JS does it. Now, should the series value be passed as the head of the^/; series, or the current index, using AT?^/; This is *sort of* like map-indexed in Clojure.^/map-js: func [^/^-"Evaluates a function for all values in a series and returns the results."^/^-series [series!]^/^-fn [any-function!] "Function to perform on each value; called with value, index, series, [? and size ?] args"^/^-;/only "Collect block types as single values"^/^-;/skip "Treat the series as fixed size records"^/^-;^-size [integer!]^/][^/^-collect [^/^-^-repeat i length? series [   ; use FORSKIP if we want to support /SKIP.^/^-^-^-keep/only fn series/:i :i :series ;:size^/^-^-]^/^-]^/]^/res: map-js [1 2 3 a b c #d #e #f] :form^/res: map-js [1 2 3 a b c #d #e #f] func [v i] [reduce [i v]]^/res: map-js [1 2 3 a b c #d #e #f] func [v i s] [reduce [i v s]]^/res: map-js "Hello World!" func [v i s] [pick s i]^/res: map-js "Hello World!" func [v] [either v = #"o" [1][0]]^-; sum result = count^/res: map-js "Hello World!" func [v i] [if v = #"o" [i]]^-^-^-; remove none! values to keep only index values^/res: map-js "Hello World!" func [v i s] [if v = #"o" [at s i]]^-; remove none! values to keep only series offsets^/```}
    sent: "2017-08-15T15:27:02.387Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599312c0c101bc4e3a1dd557"
    text: "And a more experimental design:"
    sent: "2017-08-15T15:26:56.592Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5993129e80d90ca024ff53b0"
    text: {Basic `map`:^/```^/map: func [^/^-"Evaluates a function for each value(s) in a series and returns the results."^/^-series [series!]^/^-fn [any-function!] "Function to perform on each value; must take one arg"^/][^/^-collect [^/^-^-foreach value series [^/^-^-^-keep/only fn value^/^-^-]^/^-]^/]^/```}
    sent: "2017-08-15T15:26:22.775Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59931281210ac26920868e56"
    text: "And `collect`."
    sent: "2017-08-15T15:25:53.454Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59931274bc46472974869f79"
    text: {Depending on your list-comp needs, the standard `foreach` may be all you need.}
    sent: "2017-08-15T15:25:40.675Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5993123f80d90ca024ff5136"
    text: {They aren't standard yet, but we have some laying around.}
    sent: "2017-08-15T15:24:47.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "59931004162adb6d2efa1c7d"
    text: {Does Red support Map/Filter or list comprehension?}
    sent: "2017-08-15T15:15:16.068Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5992ffa1162adb6d2ef9cd98"
    text: {@dockimbel I am working on red-mode for Emacs. It’s easier for me to do it. }
    sent: "2017-08-15T14:05:21.515Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5992f04cc101bc4e3a1d2c72"
    text: {@unchartedworks I don't remember seeing many emacs users here, so I don't think anyone made that so far. If you create ones for Red/Rebol, let us know so we can advertise it.}
    sent: "2017-08-15T12:59:56.659Z"
    editedAt: "2017-08-15T13:00:29.160Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5992d93e1c8697534abd1a31"
    text: ":+1: "
    sent: "2017-08-15T11:21:34.536Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5992d890bc46472974857a86"
    text: "I'm giving up for now to go get some sleep."
    sent: "2017-08-15T11:18:40.756Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "5992d5a3614889d4754d2c7e"
    text: {It looks like the bridge is currently broken, it can't find class System.Object on Windows 10 when calling clr-new}
    sent: "2017-08-15T11:06:11.783Z"
    editedAt: "2017-08-15T11:06:54.806Z"
    v: 3
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "5992d456614889d4754d2727"
    text: "@iceflow19 That would be good."
    sent: "2017-08-15T11:00:38.382Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5992bb4dbc4647297484fd55"
    text: {@PeterWAWood I might fork it and see if I can't get his code running on top of the bridge real quick. Its not a long script.}
    sent: "2017-08-15T09:13:49.031Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "5992bad9614889d4754cba1f"
    text: {@jocko-jc Also you might want to change your 'say function to be more idiomatic with refinements instead of string parsing.}
    sent: "2017-08-15T09:11:53.260Z"
    editedAt: "2017-08-15T09:12:37.138Z"
    v: 2
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "5992ba074bcd78af56455d38"
    text: {The readme for the .Net bridge in the master branch says it's a prototype. It might still be worth seeing if it can be used.}
    sent: "2017-08-15T09:08:23.686Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5992b91bee5c9a4c5fc0a522"
    text: {I thought @qtxie did at least for windows. Or got it into a working state.}
    sent: "2017-08-15T09:04:27.058Z"
    editedAt: "2017-08-15T09:04:37.170Z"
    v: 2
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "5992b901bc4647297484f339"
    text: "I wonder if the .NET bridge was finished though?"
    sent: "2017-08-15T09:04:01.971Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5992b8bb1c8697534abc8b27"
    text: {@jocko-jc @greggirwin Instead of powershell I would recommend using the .NET bridge that's been added, since all those libraries you're trying to access are .NET assemblies. Powershell presence varies substantially on different versions of Windows and security permissions and signing requirements for scripts may differ from system to system due to settings and group policy enforcement. Its best to skip that mess and invoke the assembly directly. }
    sent: "2017-08-15T09:02:51.082Z"
    editedAt: "2017-08-15T09:03:28.175Z"
    v: 3
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "5992b57f210ac2692084da0a"
    text: {How to build etags/ctags of Red/Rebol projects for code navigation?}
    sent: "2017-08-15T08:49:03.303Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5991da9bee5c9a4c5fbd1080"
    text: "Certainly a bug."
    sent: "2017-08-14T17:15:07.094Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5991d2e24bcd78af56419117"
    text: {Red REPL for macOS quit after inactivity. Is it a feature or a bug?}
    sent: "2017-08-14T16:42:10.329Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5991a4b7162adb6d2ef3f08f"
    text: {@uralbash The Rebol/SDK just allows to encapsulate your scripts with a Rebol interpreter in a standalone executable. So it is just convenient when deploying. For local usage, you have no need for it. Running from the sources is strictly the same.}
    sent: "2017-08-14T13:25:11.697Z"
    editedAt: "2017-08-14T13:25:29.588Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5991a438162adb6d2ef3ee36"
    text: {Previously, Rebol SDK licences could be bought from Rebol Technologies.They are no longer actively selling them.}
    sent: "2017-08-14T13:23:04.693Z"
    editedAt: "2017-08-14T13:23:38.995Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5991a356162adb6d2ef3ea57"
    text: {Because the Red binary has been built with a Rebol SDK. If you have a Rebol SDK on your machine you can also build a Red binary see [Red build](https://github.com/red/red/tree/master/build)}
    sent: "2017-08-14T13:19:18.169Z"
    editedAt: "2017-08-14T13:19:29.471Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5991a08f1c8697534ab7d11f"
    text: "like ./red-063 -c /tmp/hello.red"
    sent: "2017-08-14T13:07:27.094Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "59919fcb2723db8d5ea146db"
    text: {hm, ok but why all-platform red can do it? http://static.red-lang.org/dl/linux/red-063}
    sent: "2017-08-14T13:04:11.918Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "59919f0ba7b406262d884d17"
    text: {You don't need to build red with compiler support to compile programs. You just need to run the source compiler. This will compile a program called `myprogram.red` and create an executable called 'my program' : ^/```text^/rebol -qs red.r myprogram.red^/```^/You don't need to build red with compiler support to compile programs.}
    sent: "2017-08-14T13:00:59.711Z"
    editedAt: "2017-08-14T13:02:24.712Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599188aebc464729747fd75b"
    text: {Yes, without the -c option it works, but how do I build red with compiler support?}
    sent: "2017-08-14T11:25:34.564Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "5991881880d90ca024f87e2b"
    text: "The red binary includes the compiler."
    sent: "2017-08-14T11:23:04.684Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599187f176a757f808a1a3c5"
    text: {To run the compiler from source, you can use this:^/`rebol -qs red.r -o myHello tmp/hello.red`}
    sent: "2017-08-14T11:22:25.966Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599187b31c8697534ab761cf"
    text: {By the way, the console does not include the compiler.^/}
    sent: "2017-08-14T11:21:23.971Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59918796210ac269207fc3ab"
    text: {try without the `-c` option and see if the code is run.}
    sent: "2017-08-14T11:20:54.182Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599186e1a7b406262d87e201"
    text: {console  give the same error https://paste.ofcode.org/s2QGTidiPQg4w4jKyNDX4c}
    sent: "2017-08-14T11:17:53.001Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "5991865ca7b406262d87dffc"
    text: {You are compiling the Red console in this line:^/`${r2} -qw red.r -r environment/console/console.red`^/It will create a binary called `console` unless you use the `-o` argument or rename it.}
    sent: "2017-08-14T11:15:40.506Z"
    editedAt: "2017-08-14T11:16:59.152Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5991857b4bcd78af56401781"
    text: {Yes, I uses rebol v278  (https://github.com/uralbash/nixpkgs/blob/947863b73ef1f08ebd0fb9223762de86b977aec4/pkgs/development/interpreters/red/default.nix#L14)}
    sent: "2017-08-14T11:11:55.645Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "5991852c210ac269207fbac6"
    text: {So you are trying to install Red not build it. Does the version of Rebol that you are using run on NixOS?}
    sent: "2017-08-14T11:10:36.023Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599184a02723db8d5ea0dbec"
    text: {build like ArchLinux package on NixOS https://github.com/uralbash/nixpkgs/blob/947863b73ef1f08ebd0fb9223762de86b977aec4/pkgs/development/interpreters/red/default.nix}
    sent: "2017-08-14T11:08:16.116Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "5991847b80d90ca024f86fde"
    text: {You need to have a commercial Rebol SDK installed to build the Red toolchain into an executable.}
    sent: "2017-08-14T11:07:39.069Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5991843b1c8697534ab754de"
    text: "@uralbash How did you build red from source code?"
    sent: "2017-08-14T11:06:35.539Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59917f01c101bc4e3a16ef8e"
    text: {0.6.3 release from github (6a43c767fa2e85d668b83f749158a18e62c30f70)}
    sent: "2017-08-14T10:44:17.266Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "59917eaf210ac269207fa070"
    text: {@uralbash That's odd. Are you using the stable release or the latest build?}
    sent: "2017-08-14T10:42:55.857Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59917956a7b406262d87ac48"
    text: "https://paste.ofcode.org/EjSCmqFJ9A8pWBPdfWgfHv"
    sent: "2017-08-14T10:20:06.896Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "599177beee5c9a4c5fbb44de"
    text: {open("-c", O_RDONLY)                    = -1 ENOENT (No such file or directory)}
    sent: "2017-08-14T10:13:18.433Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "599177bb1c8697534ab7238b"
    text: {What an error, when I build red from source code? https://paste.ofcode.org/fJfDpW4TpABRjWxKY7xRdW }
    sent: "2017-08-14T10:13:15.884Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "599173cbee5c9a4c5fbb3448"
    text: "@rebolek Thanks. I see."
    sent: "2017-08-14T09:56:27.433Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "5991733d210ac269207f7a2e"
    text: {@unchartedworks absolutely not at all. Red is free and open source, just make a pull request with you bugfix, that's all. Also you don't need SDK license to compile Red, freeware version of Rebol is perfectly fine.}
    sent: "2017-08-14T09:54:05.235Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599172ec1c8697534ab70f49"
    text: {If I want to fix bugs of Red, is it necessary to buy a license of REBOL/Command SDK? I know I can run Red from sources without a license. Thanks.}
    sent: "2017-08-14T09:52:44.709Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59914c17bc464729747ee2bc"
    text: {Since Red is Alpha, there is still a lot of room for discussion.}
    sent: "2017-08-14T07:07:03.929Z"
    editedAt: "2017-08-14T07:07:11.668Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59914bf8c101bc4e3a162b52"
    text: {i.e., it's not a technical roadblock, but a design option. For example, if we use path syntax to mutate the image data, you can't add refinements, as you could with a `resize-image` function.}
    sent: "2017-08-14T07:06:32.784Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59914b83bc464729747ee0ad"
    text: "Something like that could be supported though."
    sent: "2017-08-14T07:04:35.548Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59914b4d614889d47546ad67"
    text: {Red is highly Rebol compatible, but not 100%. We've learned a lot through the years, which has led to some different design choices.}
    sent: "2017-08-14T07:03:41.943Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59914b1e2723db8d5ea005f1"
    text: {For reference: https://doc.red-lang.org/en/draw.html}
    sent: "2017-08-14T07:02:54.039Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59914b1a162adb6d2ef29411"
    text: {Just tried example from http://www.rebol.com/docs/image.html#section-9 as far as I can see rebol has different behavior for `/size`  Rebol:^/```^/>> i1: make image! 10x10^/== make image! [10x10 #^{^/000000000000000000000000000000000000000000000000000000000000^/000000000000000000000000000000000000000000000...^/>> i1/size: 9x9         ^/== 9x9^/>> i1/size^/== 9x9^/^/^/```^/Red:^/^/```^/>> i1: make image! 10x10^/== make image! [10x10 #^{^/    FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF^/    FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF^/>> i1/size: 9x9^/== 10x10^/>> i1/size^/== 10x10^/```}
    sent: "2017-08-14T07:02:50.813Z"
    v: 1
    author: "54eb2a2115522ed4b3dc5b6f"
) #(
    id: "59914a4e4bcd78af563f29ae"
    text: "oh, thanks!"
    sent: "2017-08-14T06:59:26.784Z"
    v: 1
    author: "54eb2a2115522ed4b3dc5b6f"
) #(
    id: "59914a17ee5c9a4c5fba964d"
    text: {Note that `draw` is also used in VID, but the separate `draw` function lets you create images from commands. }
    sent: "2017-08-14T06:58:31.212Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "599149bda7b406262d86f76c"
    text: {```^/>> i: load https://upload.wikimedia.org/wikipedia/en/e/e9/Red_Language_Tower_Logo.png^/== make image! [200x200 #^{^/    FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF^/    FFFFFFFFFFFFFFFFFFFFFFFF^/>> i-sm: draw 100x100 [image i 0x0 100x100]^/== make image! [100x100 #^{^/    FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF^/    FFFFFFFFFFFFFFFFFFFFFFFF^/>> view [image i-sm]^/```}
    sent: "2017-08-14T06:57:01.830Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599149841c8697534ab66ab6"
    text: {@ggenikus, Red gives you some other options, though. You can load an image, and then create another image from it, using `draw`.}
    sent: "2017-08-14T06:56:04.636Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59914790ee5c9a4c5fba8eef"
    text: "thanks!"
    sent: "2017-08-14T06:47:44.069Z"
    v: 1
    author: "54eb2a2115522ed4b3dc5b6f"
) #(
    id: "599146d2162adb6d2ef28740"
    text: {@ggenikus Sorry, my answer was for the `image!` type, while `i: image` in VID refers to face object of type `image`.  The `/size` refinement of an `image!` is read-only. The `face/size` property is read/write.}
    sent: "2017-08-14T06:44:34.458Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "599146d0614889d475469da5"
    text: {There's a difference between the `image` face style in VID, and the `image!` datatype. For the latter, you can't just set the size. }
    sent: "2017-08-14T06:44:32.774Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5991464dbc464729747ecd7b"
    text: {Thanks! One more question ) but why when I try this:^/```^/>> i: load https://upload.wikimedia.org/wikipedia/en/e/e9/Red_Language_Tower_Logo.png^/== make image! [200x200 #^{^/    000000000000000000000000000000000000000000000000000000000000^/    000000000000000000000000000000000000000000000000000000^/>> i/size: 100x100^/== 200x200^/>> i/size^/== 200x200^/```^/`i/size` is 200x200 not 100x100 ?}
    sent: "2017-08-14T06:42:21.891Z"
    v: 1
    author: "54eb2a2115522ed4b3dc5b6f"
) #(
    id: "5991452980d90ca024f78759"
    text: {@ggenikus It's a path accessor for the `image!` value. You can have a look at Rebol's [image! description](http://www.rebol.com/docs/image.html#section-9). Red `image!` accessors are listed there:^/```lisp^/>> system/catalog/accessors/image!^/== [size argb rgb alpha]^/```}
    sent: "2017-08-14T06:37:29.724Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5991443a80d90ca024f7847e"
    text: {@ggenikus not a function, it is just a value that you set.}
    sent: "2017-08-14T06:33:30.235Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599144042723db8d5e9fee57"
    text: {@rebolek awesome! Thanks you!, so i: has` image!`type, and `i/size` is a function of that type, right ?}
    sent: "2017-08-14T06:32:36.765Z"
    editedAt: "2017-08-14T06:32:44.710Z"
    v: 2
    author: "54eb2a2115522ed4b3dc5b6f"
) #(
    id: "599142a480d90ca024f77f30"
    text: {   @ggenikus you can do for example:^/```^/view [^/    i: image https://upload.wikimedia.org/wikipedia/en/e/e9/Red_Language_Tower_Logo.png 200x200 ^/    slider 100% [size: 200 * face/data i/size: as-pair size size]^/]^/```}
    sent: "2017-08-14T06:26:44.844Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599141c54bcd78af563f0a1f"
    text: {@toomasv ^/> Why do make date! and make time! behave differently^/^/I am relaxing the usage of `word!` values in `make` spec blocks (they get evaluated), to avoid systematic extra reduction. I have started with dates, and will propagate that change to other types.}
    sent: "2017-08-14T06:23:01.130Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59913fe3162adb6d2ef2723a"
    text: {Hello everyone! I am learning Red,  trying to figure out how can I resize loaded image.  I understand that I can pass image size during view construction, something like `view [image 10x10 i]`, but I want to change image size dynamically... }
    sent: "2017-08-14T06:14:59.536Z"
    v: 1
    author: "54eb2a2115522ed4b3dc5b6f"
) #(
    id: "59913a7d2723db8d5e9fd162"
    text: {Anyone fluent in TCL willing to answer this question on Quora? https://www.quora.com/unanswered/What-are-the-differences-between-the-Rebol-family-of-programming-languages-and-TCL}
    sent: "2017-08-14T05:51:57.341Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59913181614889d4754657b4"
    text: {@honix In Redbol world, we have the `use` function for that need, it's on our todo-list in Red, not sure when we'll implement it (trivial for the interpreter, more work for supporting it the compiler). Most probably, that feature will come in the "functional" pack of features I would like to bring together in a future release (probably post-0.7.0), including built-in HOF support and compiler improvements for functions in functions.}
    sent: "2017-08-14T05:13:37.210Z"
    editedAt: "2017-08-14T05:14:53.262Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59910ad11c8697534ab5a64f"
    text: "Thanks for asking *and* finding the answer!"
    sent: "2017-08-14T02:28:33.100Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599106bd4bcd78af563e67b8"
    text: {https://github.com/red/red/wiki/Red-System-v2-Wish-List it already in wish list}
    sent: "2017-08-14T02:11:09.224Z"
    v: 1
    author: "5551a03d15522ed4b3e041bd"
) #(
    id: "5991031e80d90ca024f6cf7f"
    text: "will Red/System add support for union in C?"
    sent: "2017-08-14T01:55:42.774Z"
    v: 1
    author: "5551a03d15522ed4b3e041bd"
) #(
    id: "5990d98376a757f8089f69a4"
    text: {Oh, we also don't have `gensym`, so `result` could collide with a word in the `let` vars spec.}
    sent: "2017-08-13T22:58:11.661Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5990d65880d90ca024f65563"
    text: {A couple things to note in your `let` implementation (and I know it was done quickly):^/^/- Don't forget to `copy` your `binds` series, or it will be modified as you append to it.^/- Even without error handling, you should use `set/any` rather than `result:`, so unset results don't cause an error. Once you do that, it will escape the anonymous context you're using.}
    sent: "2017-08-13T22:44:40.216Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5990d58fa7b406262d85b25d"
    text: {@honix, the closest function in Rebol is called `use`, which we don't have in Red yet. Not because we've ruled it out, but because it hasn't been important enough to spend time on. @maximvl has a couple gists, showing how to do some CL style things in Red, and this has come up in the past, along with `closure` and HOFs in general. They are planned, but not in place yet.  @dockimbel  even worked up a simple example that didn't require a temporary context. ^/^/For those of us who are impatient, myself included, the design process can seem drawn out. Ultimately, though, it's very rewarding when we take the time to consider all the details. So, it's not just about what has proven useful in other languages, but in making their utility available in the context of Red, and maintaining its conceptual integrity as best we can. In the meantime, one of the best things we can do is work up mezzanine versions to use as a foundation for concrete discussion, along with examples.}
    sent: "2017-08-13T22:41:19.033Z"
    editedAt: "2017-08-13T22:45:04.211Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5990ceb9a7b406262d859c14"
    text: {@meijeru its not about how easy to implement, but how useful it can be in some cases. lisp programs uses 'let a lot and it makes code clearer.}
    sent: "2017-08-13T22:12:09.449Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5990c6e0a7b406262d85852f"
    text: {You have perhaps answered your own question: if you can implement it that easily, why should Red provide it as built-in?}
    sent: "2017-08-13T21:38:40.869Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5990c2a4a7b406262d85789f"
    text: {why there is no 'let function in vanilla Red? a powerfull function from lisp world. btw it is [easy to implement](https://gist.github.com/honix/2c72e78bdc4b2d6511283d0436688744)}
    sent: "2017-08-13T21:20:36.727Z"
    editedAt: "2017-08-13T21:20:56.212Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "598fe9da162adb6d2eee4712"
    text: {cscript  with ActiveXObject("Sapi.SpVoice") might be another way to get at the list of voices and default sound devices. thanks for the code!}
    sent: "2017-08-13T05:55:38.414Z"
    v: 1
    author: "592b9dc3d73408ce4f62fc8f"
) #(
    id: "598fe840c101bc4e3a11dc9c"
    text: {thank you for your feedbacks. Unfortunately, I do not have win7 here to test. Be free to experiment and improve  yourselves !  ;-)}
    sent: "2017-08-13T05:48:48.857Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "598fc8191c8697534ab1b7bc"
    text: {@jocko-jc  everything except get-voices worked on win7, it seems to just use default voice for everything. maybe the unicode  wasn't pronounced right in the say at the end of the .red file?}
    sent: "2017-08-13T03:31:37.229Z"
    v: 1
    author: "592b9dc3d73408ce4f62fc8f"
) #(
    id: "598fbf07ee5c9a4c5fb5d3fd"
    text: {@jocko-jc Powershell is on my Win7 system. It does say partial things, at different volumes, but incompletely. Calling `say` from the console works great with small text examples.}
    sent: "2017-08-13T02:52:55.125Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598fa3b6ee5c9a4c5fb594c0"
    text: {There seems to be some small problem on startup and there is quite a delay. Perhaps this has something to do with it:^/```text^/PS E:\Red\red> Add-Type -AssemblyName System.speech^/PS E:\Red\red> $speak = New-Object System.Speech.Synthesis.SpeechSynthesizer^/PS E:\Red\red> $speak.GetInstalledVoices().VoiceInfo.Name^/PS E:\Red\red>^/```^/}
    sent: "2017-08-13T00:56:22.330Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598fa0cb210ac2692079dbe8"
    text: {(I can't remember installing it myself as I used to have to on Windows/XP).}
    sent: "2017-08-13T00:43:55.527Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598fa048614889d47541a4b9"
    text: {[![Screen Shot 2017-08-13 at 08.39.05.png](https://files.gitter.im/red/red/q4SW/thumb/Screen-Shot-2017-08-13-at-08.39.05.png)](https://files.gitter.im/red/red/q4SW/Screen-Shot-2017-08-13-at-08.39.05.png)}
    sent: "2017-08-13T00:41:44.436Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598f9ff0bc4647297479ce6c"
    text: {@jocko-jc Powershell is installed on my version of Win7:}
    sent: "2017-08-13T00:40:16.070Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598f93b5bc4647297479b09d"
    text: {I think this works fine in win 7, win 8, win 10  with powershell or cmd prompt http://www.mycode4fun.co.uk/red-apps  - not dedicated dll, but it works.}
    sent: "2017-08-12T23:48:05.572Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "598f681f162adb6d2eed001a"
    text: {@greggirwin : the call function under windows uses Powershell, which allows in-line commads to the Sapi engine. PowerShell is not available on win7. It is more complicated to use the Sapi api (through a dedicated dll for instance)}
    sent: "2017-08-12T20:42:07.714Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "598f56d44bcd78af56395d29"
    text: "@Enamex, naming is always the hardest thing."
    sent: "2017-08-12T19:28:20.159Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598f56c7210ac26920790870"
    text: {@ldci , cool! Kudos to Jocko. It tries really hard to work under Win7 here.}
    sent: "2017-08-12T19:28:07.249Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598f315276a757f8089a567e"
    text: {In one of the rooms we were talking about append, insert, repend, etc.^/On the subject of naming I'd just like to voice my agreement with the later development of Rebol on doing away with things like `prin` and replacing them with refinements. `print/only` looks and reads a lot better.}
    sent: "2017-08-12T16:48:18.831Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598ed9d44bcd78af5637bd1c"
    text: {Very cool! `say "Due to Jockos brilliant work Red can talk now"`}
    sent: "2017-08-12T10:35:00.230Z"
    editedAt: "2017-08-12T10:38:07.275Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "598ec3c8614889d4753eee5b"
    text: {Due to Jocko's brilliant work ( https://github.com/jocko-jc/red-tts) Red can talk now !}
    sent: "2017-08-12T09:00:56.786Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "598e2087614889d4753d3b9f"
    text: {Then you need a place to put user defined examples and extended commentary. }
    sent: "2017-08-11T21:24:23.608Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e205676a757f8089733ff"
    text: {We can certainly do code completion. Some examples already exist. What's missing, which was used by the R2 word browser, and to generate the old docs like that, is tagging to categorize functions.}
    sent: "2017-08-11T21:23:34.487Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e04d61c8697534aac7998"
    text: {@honix That has long been my favorite reference, because of its concise & practical organization. There is something similar to R3 but it wasn't so well executed, imo. It would be nicer, yet (but maybe not worth the code?) to have something organized like that actually IN Red (or, at least, as a library) to guide newbies.  With code completion, including refinements, it would be like what you see in Excel formulas.}
    sent: "2017-08-11T19:26:14.075Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "598df8921c8697534aac47f9"
    text: "+1 for consistency!!"
    sent: "2017-08-11T18:33:54.314Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "598df66f210ac2692074d4e6"
    text: "@greggirwin Thanks!"
    sent: "2017-08-11T18:24:47.845Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "598df4cf4bcd78af563516d1"
    text: {https://github.com/red/red/blob/master/runtime/datatypes/date.reds#L537}
    sent: "2017-08-11T18:17:51.486Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598df487c101bc4e3a0c217d"
    text: {And it's not a full `reduce`, just evaluates words. e.g. parens aren't evaluated.}
    sent: "2017-08-11T18:16:39.521Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598df44880d90ca024ed86a9"
    text: {I didn't find a wish ticket, so you could open one for that. I know there was some chat about it, but don't think that behavior was ruled out for any reason. Just not patched into `time!` yet.}
    sent: "2017-08-11T18:15:36.474Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598dee8a76a757f8089676a3"
    text: {@greggirwin I see. `make date!` has a kind of implicit `reduce`. It would be nice if they would behave in same way. }
    sent: "2017-08-11T17:51:06.256Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "598dedbe76a757f80896729b"
    text: {Support for that could be added, of course. `Time!` was done much earlier.}
    sent: "2017-08-11T17:47:42.374Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598ded8fa7b406262d7cb434"
    text: {@toomasv, `date!` has extra handling in it to evaluate words. `Time!` does not. }
    sent: "2017-08-11T17:46:55.860Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598debcf1c8697534aac162b"
    text: {@honix, RedByExample.org is working toward a similar reference.}
    sent: "2017-08-11T17:39:27.823Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "598deb86bc46472974747fb4"
    text: {`Compose` doesn't rebind, though, so not a drop-in replacement here.}
    sent: "2017-08-11T17:38:14.593Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598dea8680d90ca024ed5c80"
    text: {> That's probably it. I'm magically drawn to those.^/^/:^^)^/^/@radebrecht, @honix beat me to it. Of course, it doesn't work for your example if the func takes no args, right? Your example was good, but if what you want to do is compose layouts given a combination of fixed and replaceable parts, `compose` is your friend. `Bind` is a very powerful tool, but not needed in most code. Fun to play with though.}
    sent: "2017-08-11T17:33:58.437Z"
    editedAt: "2017-08-11T17:35:53.536Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598dc64dee5c9a4c5faf8839"
    text: {@honix A thousand thanks for that hint. I didn't understand `bind`well enough. Looking forward to a complete Red documentation one blessed day.}
    sent: "2017-08-11T14:59:25.620Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "598da46c162adb6d2ee7317a"
    text: {Why do `make date!` and `make time!` behave differently in following:^/```^/to-object: func [val /local names spec i v][^/   case [^/      map! = type? val [make object! body-of val] ^/      block! = type? val [make object! val]^/      find [date! time!] v: type?/word val [^/         names: system/catalog/accessors/:v^/         spec: clear []^/         foreach i names [append spec reduce [to-set-word i val/:i]]^/         make object! spec^/      ]^/   ]^/]^/>> date: to-object now^/== make object! [^/    date: 11-Aug-2017^/    year...^/>> time: to-object now/time^/== make object! [^/    hour: 15^/    minute: 22^/  ...^/>> make date! bind [year month day] date^/== 11-Aug-2017^/>> make time! bind [hour minute second] time^/*** Script Error: cannot MAKE/TO time! from: [hour minute second]^/*** Where: make^/*** Stack:  ^/^/>> make time! reduce bind [hour minute second] time^/== 15:22:40^/```}
    sent: "2017-08-11T12:34:52.198Z"
    editedAt: "2017-08-11T12:42:31.060Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "598d6935614889d4753a49ab"
    text: {Wow, there is pretty cool list of basic words for Rebol (and Red): http://www.rebol.com/docs/reference.html}
    sent: "2017-08-11T08:22:13.345Z"
    editedAt: "2017-08-11T08:27:07.500Z"
    v: 3
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "598d665780d90ca024eb3a73"
    text: {[Reference for 'bind](http://www.rebol.com/docs/words/wbind.html)}
    sent: "2017-08-11T08:09:59.464Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "598d660d80d90ca024eb39b9"
    text: {@radebrecht you can reference any argument ('arg or even 'blk) of current context to bind 'blk}
    sent: "2017-08-11T08:08:45.658Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "598d636b76a757f808942f39"
    text: {Alright, here's a (silly) example:^/```^/f: function [arg blk] [ bind blk :f view blk ]^/b: [ text arg ]^/f "hello world" b^/```^/It seems problematic that the function now *has* to have the name `f`and I was looking for a solution that works whichever name the function had.^/> you can do a lot of things that aren't good ideas^/^/That's probably it. I'm magically drawn to those.^/}
    sent: "2017-08-11T07:57:31.682Z"
    editedAt: "2017-08-11T07:58:19.048Z"
    v: 2
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "598d60c876a757f808942326"
    text: "Ah right. I had that confused."
    sent: "2017-08-11T07:46:16.090Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "598d60ac329651f46e0ce507"
    text: "> BTW `self` is for objects, isn't it?"
    sent: "2017-08-11T07:45:48.227Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "598d3ddf2723db8d5e9361e3"
    text: {@JeannotCoginov, aslo, Red only has simple I/O right now. Full I/O will come in 0.7.0.}
    sent: "2017-08-11T05:17:19.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598cd914c101bc4e3a081ad3"
    text: "Oh !  Thank you for the reminder."
    sent: "2017-08-10T22:07:16.359Z"
    v: 1
    author: "5907aeddd73408ce4f5c4132"
) #(
    id: "598cd8a04bcd78af5630f1c1"
    text: {In R2, what also worked was `read %.` and this also works in Red.}
    sent: "2017-08-10T22:05:20.795Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "598cd576614889d475386e3f"
    text: {With R2, in order to get a list of files in a block from a directory, we were doing "load %.".  How can I get the same functionality with Red 0.6.3 ?}
    sent: "2017-08-10T21:51:50.602Z"
    v: 1
    author: "5907aeddd73408ce4f5c4132"
) #(
    id: "598cd008614889d4753857b3"
    text: "Yes, blocks don't have `self`."
    sent: "2017-08-10T21:28:40.995Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598cce59210ac26920708283"
    text: "BTW `self` is for objects, isn't it?"
    sent: "2017-08-10T21:21:29.170Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "598cce314bcd78af5630c4b4"
    text: {But... if you give the function a name, you can use that of course.}
    sent: "2017-08-10T21:20:49.251Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "598cba1b80d90ca024e8ed08"
    text: {You can't*. What are you trying to accomplish?^/^/*Technically, you can do a lot of things that aren't good ideas. :^^) Usually there's a better way.}
    sent: "2017-08-10T19:55:07.113Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598cb626ee5c9a4c5fabac44"
    text: {In a function definition how do I refer to the function itself? We've got `self`in blocks, that doesn't seem to work though.}
    sent: "2017-08-10T19:38:14.307Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "598c9ae1614889d475377611"
    text: { > Munge 3.0.2 - http://dobeash.com/files/munge3.r^/^/Minor changes:^/ - Simplified code now that Red 0.6.3 supports date! and delete^/ - All test cases (200) now work with both R3 and Red 0.6.3^/ - Basic documentation available at http://www.dobeash.com/files/munge3.html}
    sent: "2017-08-10T17:41:53.657Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "598c9527210ac269206fa381"
    text: {@fvanzeveren  I had seen a a post about the Munge lib that I thought worked with Rebol3 and Red. Not sure how up to date it is. It has SQLite bindings.   http://www.dobeash.com/files/munge3.html#h1_munge^/http://www.dobeash.com/munge.html}
    sent: "2017-08-10T17:17:27.654Z"
    editedAt: "2017-08-10T17:21:43.993Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "598c918ec101bc4e3a06ea2b"
    text: {@fvanzeveren, remember that Red is still Alpha. We'll get a basic GC soon, so some data processing may be limited for a while. How much data are you talking about?}
    sent: "2017-08-10T17:02:06.343Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598c7cd5c101bc4e3a0691a9"
    text: "@oldes - sorry, I though it is Kaj's binding ...."
    sent: "2017-08-10T15:33:41.370Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "598c7c65c101bc4e3a06907c"
    text: "It could be enhanced as everything."
    sent: "2017-08-10T15:31:49.191Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "598c7c2d614889d47536e381"
    text: {https://github.com/red/code/tree/master/Library/SQLite}
    sent: "2017-08-10T15:30:53.899Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "598c7c11329651f46e09ac91"
    text: {@Oldes I believe that @pekr was talking about Kaj's SQL binding, which predates yours.}
    sent: "2017-08-10T15:30:25.445Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598c7b9f76a757f80890e88a"
    text: {I would not consider my SQLite binding which is in the red/code repository to be old.}
    sent: "2017-08-10T15:28:31.185Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "598c578b2723db8d5e8febbd"
    text: {https://dev.mysql.com/doc/refman/5.7/en/mysql.html}
    sent: "2017-08-10T12:54:35.826Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "598c5738614889d475363195"
    text: {Hi - no mySQL driver yet.  There is some old binding towards the SQLite, or you might try with the command line tools, wrapping it via the Red's `call`faicility, parsing results using the  `parse`Not sure, if mySQL has one though, but should be workable with SQLite.}
    sent: "2017-08-10T12:53:12.050Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "598c50c0c101bc4e3a05b99a"
    text: {Hi,^/is there a Red Mysql driver like the Rebol MySQL driver developped back on 2008 by Softinnov? If not what could I use if I want to store large amount of data?^/Thank you.}
    sent: "2017-08-10T12:25:36.334Z"
    editedAt: "2017-08-10T12:25:50.852Z"
    v: 2
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598b3925bc4647297469ff5d"
    text: {@Syntonica ^/> @GiuseppeChillemi Unless you are a millionaire, or you are working in the old lire, you can just use an integer type with an implicit decimal point.  You will still need to watch rounding, as you would with any type.  I thought that that was how the backend of the Money! type worked since floats are fraught with peril.  I constantly have to check on their rounding behaviors in conversions from double->single and double->int (in C++).^/^/In need to work on seven to eight digits with 2 decimals at the right of the point, totally: 10 digits}
    sent: "2017-08-09T16:32:37.475Z"
    editedAt: "2017-08-09T16:33:04.676Z"
    v: 2
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "598adf18210ac2692068c246"
    text: {@dockimbel @greggirwin ^/Thank you for these clarifications... I think I will stick to the default behaviour until it is fully implemented ;)}
    sent: "2017-08-09T10:08:24.128Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598a9cd24bcd78af5627cf28"
    text: {I wouldn't want to do this, as it's a hack, but you can `pad` your way around:^/```^/view [panel yellow [origin 0x0 space 0x0 across text 40 "Help" pad 0x-3 check 20]]^/```}
    sent: "2017-08-09T05:25:38.010Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598a88ae1c8697534a9ea864"
    text: {@fvanzeveren The current documentation on doc.red-lang.org is a reference documentation, the User Manual is not yet there.}
    sent: "2017-08-09T03:59:42.656Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598a87d81c8697534a9ea4e9"
    text: {@fvanzeveren We haven't implemented support for check/radio text positioning yet. In the meantime, you can use a check + label to workaround it.}
    sent: "2017-08-09T03:56:08.806Z"
    editedAt: "2017-08-09T03:57:47.169Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598a47e24bcd78af5626ba7d"
    text: {@fvanzeveren For now, only base face has fully support for alignment. The other controls are limited by what OS provided.}
    sent: "2017-08-08T23:23:14.575Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "598a1f53ee5c9a4c5fa16aff"
    text: {Hi, is there a reason why the facet 'v-align does not work with a face 'text while it works with a face 'base?^/```^/main: layout [^/^-below^/^-base 300x100 {Face de type 'base.} 123.100.3 para [align: 'right v-align: 'bottom]^/^-text 300x100 "Un simple libellé, de type 'text" 200.190.165 para [align: 'right v-align: 'bottom]^/]^/^/view main^/```^/^/Thank you.}
    sent: "2017-08-08T20:30:11.068Z"
    editedAt: "2017-08-08T20:30:49.738Z"
    v: 2
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598a1a53a7b406262d6dc646"
    text: {@greggirwin So far, using `panel`, I am unable to get a decent result: the text and the checkbox are not prioperly aligned vertically...^/}
    sent: "2017-08-08T20:08:51.251Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598a1854c101bc4e3afd4692"
    text: {Yes. You could submit a ticket for that, which will help ensure we get it done.}
    sent: "2017-08-08T20:00:20.313Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598a1839ee5c9a4c5fa14ea5"
    text: {Actually, the doc is lacking simple example within the text...}
    sent: "2017-08-08T19:59:53.412Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598a17fc76a757f8088784b9"
    text: {I hadn't looked at the docs in a while. That should be clarified. It doesn't say if it means left of the checkbox or the face itself.}
    sent: "2017-08-08T19:58:52.705Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598a179545fc67074607a1dc"
    text: "Like in Rebol VID actually :)^/"
    sent: "2017-08-08T19:57:09.873Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598a176f76a757f80887822a"
    text: {What you have to do, to get what you want, is use a separate `text` face and `check` with no text, aligning them to look like a single face. Or, roughly, in a `panel`: `view [panel yellow [across text 40 "Help" check 20]]`}
    sent: "2017-08-08T19:56:31.357Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598a1748329651f46e008c8a"
    text: {ok, it is better. So, it is not possible, while it is explain in the documentaion here: https://doc.red-lang.org/en/view.html#_check}
    sent: "2017-08-08T19:55:52.286Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598a16ff76a757f8088780b0"
    text: {```^/main: layout [^/^-below^/^-base 200x100 {Face de type 'base.} 123.100.3^-^/^-text "Un simple libellé, de type 'text" 200.190.165^/^-button {C'est un bon "bouton" :)} 100.100.1 [print "C'est un bon bouton!"]^/^-check "Bouton à cocher avec label à gauche" para [align: 'left] data false^/^-check "Bouton à cocher avec label à droite" para [align: 'right] data true^/]^/^/view main^/```^/}
    sent: "2017-08-08T19:54:39.094Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598a16be329651f46e0088c9"
    text: {Sorry, I wasn't clear. Triple backticks *on their own line first* and also on their own line at the end. You can edit old messages though. Click the ...}
    sent: "2017-08-08T19:53:34.332Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598a16902723db8d5e8794b6"
    text: {In this case, it's easy. You can't do that. ^/```^/view [check red 100  check blue right 100]^/```^/Easy to see this way. The native control is the limitation here.}
    sent: "2017-08-08T19:52:48.574Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598a167c4bcd78af5625f988"
    text: {i try again...^/```main: layout [^/^-below^/^-base 200x100 {Face de type 'base.} 123.100.3^-^/^-text "Un simple libellé, de type 'text" 200.190.165^/^-button {C'est un bon "bouton" :)} 100.100.1 [print "C'est un bon bouton!"]^/^-check "Bouton à cocher avec label à gauche" para [align: 'left] data false^/^-check "Bouton à cocher avec label à droite" para [align: 'right] data true^/]^/^/view main```}
    sent: "2017-08-08T19:52:28.907Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598a1634ee5c9a4c5fa14572"
    text: {And if you include the `view` call in your examples, we can all just cut and paste to test.}
    sent: "2017-08-08T19:51:16.452Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598a1618210ac2692065f0d2"
    text: {In both case the label is on the right... and I would like the first on then left... What am I doing wrong?}
    sent: "2017-08-08T19:50:48.088Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
)#(
    id: "598a1616a7b406262d6db558"
    text: {@fvanzeveren, use triple *back*ticks for code. Helps a lot. Chtrl+Shift+M for markup help.}
    sent: "2017-08-08T19:50:46.563Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598a15e34bcd78af5625f64a"
    text: {Hello, I guess this has been already asked many times... but I am learning Red/BID, and I struggle with the para facet...^/'''^-check "Bouton à cocher avec label à gauche" para [align: 'left] data false^/^-check "Bouton à cocher avec label à droite" para [align: 'right] data true'''}
    sent: "2017-08-08T19:49:55.402Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5989f88576a757f80886f727"
    text: {@henrikmk, if you can note desired behaviors as you come across things, with rationale and uses cases, that would be great. Examples really help with explanations sometimes. Things will get lost in chat, though this is a good place to pose ideas. I can start a wiki page if you want, or you can. ^/^/In some cases things should be built in, in others, styling can be used. Where you want *some* standard behavior, it gets trickier. }
    sent: "2017-08-08T17:44:37.105Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5989dc67ee5c9a4c5fa04c16"
    text: {@henrikmk  :point_up: [7 agosto 2017 06:49](https://gitter.im/red/red?at=5987f162210ac269205d94d8) replace drop-list with text-list and it works *almost* as you aspected, does it?}
    sent: "2017-08-08T15:44:39.541Z"
    v: 1
    author: "56eeeea485d51f252ab9d69f"
) #(
    id: "5989bcbec101bc4e3afbb34b"
    text: "@geekyi  Done, thank you for the link"
    sent: "2017-08-08T13:29:34.134Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5989bbd1329651f46efef04c"
    text: {@fvanzeveren you can add details under https://github.com/red/red/wiki/Editor-Integrations#external :)}
    sent: "2017-08-08T13:25:37.533Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5989b938329651f46efee237"
    text: "typo: powerful programming editor "
    sent: "2017-08-08T13:14:32.154Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5989b91cee5c9a4c5f9fa998"
    text: {  Hi all, for those using EditPadPro, I have uploaded a syntax coloring file definition for Red, including VID dialect here: https://www.editpadpro.com/cgi-bin/cscslist4.pl?focus=282 . I invite you to discover this extremely powerfilprogramming text editor. Regards}
    sent: "2017-08-08T13:14:04.453Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5989b6a6a7b406262d6c0833"
    text: {@pekr I think @rebolek may know the answer to your set-face/get-face question.}
    sent: "2017-08-08T13:03:34.551Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "59899b2a614889d4752b8099"
    text: {@dockimbel Yes I have a very specific model in my head and it has developed over about 15 years of working with REBOL GUIs.^/^/The model picked, requires the application author to have intimate knowledge of individual widgets to know how to use them, and this will get worse, the more widgets are written for the UI.^/^/You need to consider scale. Large programs with many widgets. Writing many different throw-away programs. Reducing the need for debugging and the need to write support code to make the UI system work correctly.^/^/This requires that widgets at least have a sensible set of facets that are straightforward and uniform to work with. What these facets are, is something you find out over time, as you write applications with the widgets. Common facets can be selection, old selection, highlighting, face state, preferably stored in an object inside the face.^/^/Later on, build accessor functions for providing a uniform interface for obtaining a selection from tables, fields, etc. This is also useful for traversing forms of very different faces with very simple loops.^/^/Sure, internally, use EVENT/PICKED as you like, but provide the nicely formatted information, so the application author isn't burdened with it.}
    sent: "2017-08-08T11:06:18.634Z"
    editedAt: "2017-08-08T11:08:08.288Z"
    v: 3
    author: "5571645815522ed4b3e175c3"
) #(
    id: "598997ff329651f46efe5807"
    text: {@henrikmk You seems to have a very specific model in the back of your head, with which you compare Red/View and rant on the differences. I cannot make sense of your questions about `event/picked`, nor why you have troubles with information provided by `event` values. Getting back to more objective points would be helpful, otherwise I don't see this discussion going anywhere.}
    sent: "2017-08-08T10:52:47.140Z"
    editedAt: "2017-08-08T10:54:05.750Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598996b776a757f808853c37"
    text: "@Oldes thanks"
    sent: "2017-08-08T10:47:19.598Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "59899676329651f46efe527b"
    text: {Hi @henrikmk ! Maybe you should propose a solution which you would found more friendly than current state.}
    sent: "2017-08-08T10:46:14.960Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59899604a7b406262d6b7dd1"
    text: {The plan is to write Red compiler in Red in a future.}
    sent: "2017-08-08T10:44:20.700Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "598995da329651f46efe5106"
    text: {@uralbash current Red compiler is written in Rebol... Red or Red/System compiled scripts doesn't depend on it.}
    sent: "2017-08-08T10:43:38.886Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59897230ee5c9a4c5f9e7e93"
    text: {@dockimbel Please have a more macroscopic view of it. It's not a matter of 1-2 lines of extra code for that one widget, but a program with maybe 500 widgets, which I work with on a daily basis. That leads to a substantial amount of extra code to debug, and it gets really tiresome, when you've done it 200 times.^/^/It gets a lot worse, when your widget is more complex. What is the content in EVENT/PICKED for a multi-select table or a field or a drop-list? Does EVENT/PICKED even work in all those cases? Would it then not make sense to map it to something more meaningful in all cases, so the application author doesn't have to remember this?^/^/This is why I say: Really accommodate the application author and provide all the necessaries in easy to remember facets. Having the same information in two places is less important than trying to be sparse, and I think this is a lesson that REBOL GUI systems haven't learned.}
    sent: "2017-08-08T08:11:28.693Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "59897199614889d4752ad6b4"
    text: {Does red depend on rebol? (https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=red#n11) or it's just for test?}
    sent: "2017-08-08T08:08:57.340Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "5989703c2723db8d5e84c8a0"
    text: "not at all"
    sent: "2017-08-08T08:03:08.745Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5989702f614889d4752ad143"
    text: {Ok, so your real issue is that you want Red/View to be exactly like RebGUI?}
    sent: "2017-08-08T08:02:55.846Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59896ff576a757f80884a4d1"
    text: {and I need to keep in mind that these differences exist, because in RebGUI, PICKED and SELECTION are very different things.}
    sent: "2017-08-08T08:01:57.147Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "59896fe145fc67074604d406"
    text: {Passing two arguments instead of one is a problem for you?}
    sent: "2017-08-08T08:01:37.841Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59896fc6329651f46efdb5f1"
    text: "I need to write more code. That's the problem."
    sent: "2017-08-08T08:01:10.772Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "59896fa92723db8d5e84c618"
    text: {@henrikmk Yes, you need to pass `face` and `event` in such case (or just `event/picked`). I still fail to see why that would be a problem.}
    sent: "2017-08-08T08:00:41.427Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59896e7fc101bc4e3afa7cd6"
    text: {@dockimbel the information is not exposed where it's needed, in ON-CHANGE. besides, it's not intuitive to expose such related information in such two different ways as FACE/SELECTION and EVENT/PICKED.^/^/If I want to send that information to a function called in the actor, I have to provide more arguments, than just sending FACE.}
    sent: "2017-08-08T07:55:43.847Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "59896e11ee5c9a4c5f9e6e43"
    text: {@henrikmk ^/> Go with ON-SELECT which is specific enough, along with providing OLD-SELECTION and SELECTION words for the application author to work with.^/^/I don't see the point, we *already* expose those information to the user.}
    sent: "2017-08-08T07:53:53.025Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59896db62723db8d5e84be7e"
    text: {@dockimbel but it requires the user to write more code for the same event which is selection. I think you're calling it desirable, because it comes from somewhere else. :-) It's not good code.}
    sent: "2017-08-08T07:52:22.058Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "59896d7b614889d4752ac8f7"
    text: {@henrikmk `select` event happens just before a change is applied to the list, `change` event happens just after. Both are desirable.}
    sent: "2017-08-08T07:51:23.285Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59896d3f210ac26920631c39"
    text: {@henrikmk as for the eventual `set-face`and `get-face`- did they allow (in R3-GUI) both setting/getting the default facet, and also the refinement, where you could select the parameter you want to set/get?}
    sent: "2017-08-08T07:50:23.038Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59896cb8210ac269206319cb"
    text: {@dockimbel That still doesn't provide the necessary information where it's needed, in the ON-CHANGE actor. So either ON-CHANGE is worthless or it can only be used in specific circumstances, which the application author must be aware of.^/^/If I were you, I'd get rid of the ON-CHANGE actor, because it doesn't easily describe what change has happened to the widget and who did it. Go with ON-SELECT which is specific enough, along with providing OLD-SELECTION and SELECTION words for the application author to work with.^/^/The GUI needs to be luxurious about what it provides to application authors, because this is where the nitty gritty of debugging happens, and it might as well be provided and debugged by the GUI once, so each application author doesn't have to write and debug their own code for it.}
    sent: "2017-08-08T07:48:08.730Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "59895f8b614889d4752a9502"
    text: {In my rush earlier, I forgot it was in event. Tried `face/picked`. Sorry Henrik!}
    sent: "2017-08-08T06:51:55.888Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598932f52723db8d5e83fb71"
    text: {`event/picked` is described in `event!` section. Though, in a User Manual, we should put all those information together for easier reading.}
    sent: "2017-08-08T03:41:41.515Z"
    editedAt: "2017-08-08T03:42:14.229Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59893298210ac269206264d6"
    text: {@henrikmk ^/> there's no way to pass both the old and new selections to a sub-function.^/^/In `select` event:^/* Old: `face/selected`^/* New: `event/picked`}
    sent: "2017-08-08T03:40:08.467Z"
    editedAt: "2017-08-08T03:41:00.212Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5988fdf5329651f46efc54e9"
    text: {[Red/System macros](http://static.red-lang.org/red-system-specs.html#section-16)}
    sent: "2017-08-07T23:55:33.800Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5988f9e6bc46472974614d71"
    text: {The Red/System compiler uses `#define` for macros. Here is an example:^/```text^/#define I64-copy(a b) [^/^-b/least-sig: a/least-sig^/^-b/most-sig: a/most-sig^/]^-^/```}
    sent: "2017-08-07T23:38:14.529Z"
    editedAt: "2017-08-07T23:38:25.121Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5988f9df210ac2692061c1e5"
    text: {So the `#macro` directive is only supported in the [Red preprocessor](https://doc.red-lang.org/en/preprocessor.html#_macros), not in the [Red/System preprocessor](http://static.red-lang.org/red-system-specs-light.html#section-16), both of which happens at compile time (but in the Red case, is also there in the interpreter for compatibility?)}
    sent: "2017-08-07T23:38:07.101Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988f7472723db8d5e83422e"
    text: {@PeterWAWood Are Macros supposed to execute in Red/System? Any special commandline arguments?}
    sent: "2017-08-07T23:27:03.330Z"
    editedAt: "2017-08-07T23:29:54.830Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5988f472ee5c9a4c5f9cfbc0"
    text: {@Enamex Macros in Red/System are like C macros, they are not executed by the compiler but simply "in-line" the code.}
    sent: "2017-08-07T23:14:58.527Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5988c709bc464729746090ee"
    text: {Pose it, and offer a suggested improvement in https://gitter.im/red/red/gui-branch.}
    sent: "2017-08-07T20:01:13.034Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988c6e845fc67074602af63"
    text: "I should not need to do that manually."
    sent: "2017-08-07T20:00:40.161Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5988c6ba329651f46efb9195"
    text: {Which is what you would do here, correct? Store old sel on `select`.}
    sent: "2017-08-07T19:59:54.177Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988c54145fc67074602a8d4"
    text: "simply store OLD-SELECTION as well"
    sent: "2017-08-07T19:53:37.855Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5988c532210ac2692060f9eb"
    text: {If you only get one event, though, how would you support the feature of accessing the prior selection?}
    sent: "2017-08-07T19:53:22.150Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988c5302723db8d5e8280a8"
    text: {there's no way to pass both the old and new selections to a sub-function.}
    sent: "2017-08-07T19:53:20.194Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5988c4e4c101bc4e3af85b40"
    text: {I can't answer that design question. It may be due to native constraints.}
    sent: "2017-08-07T19:52:04.051Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988c3641c8697534a9810ed"
    text: {is that borrowed from JS or something? because that doesn't make sense to me, not even that you would need to use two different events to get the old and new selection.}
    sent: "2017-08-07T19:45:40.259Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5988c287329651f46efb7df0"
    text: "That tripped me up at first too."
    sent: "2017-08-07T19:41:59.788Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988c27c76a757f808827323"
    text: {@henrikmk https://doc.red-lang.org/en/view.html#_text_list notes the behavior clearly. }
    sent: "2017-08-07T19:41:48.696Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988bcda614889d475287d5f"
    text: "thanks"
    sent: "2017-08-07T19:17:46.483Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5988bc0b4bcd78af5620cefe"
    text: {@henrikmk I am not on macOS now, so can't confirm it, but you should add things like this to issue tracker at Github: https://github.com/red/red/issues}
    sent: "2017-08-07T19:14:19.077Z"
    editedAt: "2017-08-07T19:14:28.682Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5988ba57614889d475286ff6"
    text: {@rebolek ok, I tried the TEXT-LIST widget under macOS, but FACE/SELECTED seems to be one step behind in what it returns}
    sent: "2017-08-07T19:07:03.482Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
)#(
    id: "5988b96345fc6707460271c6"
    text: {@henrikmk Hi Henrik! Just post what you think does not work.}
    sent: "2017-08-07T19:02:59.621Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5988b6dbbc46472974604b49"
    text: {@greggirwin I guess I'm really just getting the feel for what's working or not at the moment. Some things don't work quite as expected.}
    sent: "2017-08-07T18:52:11.871Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5988b352ee5c9a4c5f9c0463"
    text: "Holler for what examples will help you most."
    sent: "2017-08-07T18:37:06.442Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988b23c45fc67074602519b"
    text: "There is a lot to catch up on Henrik."
    sent: "2017-08-07T18:32:28.568Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988a789c101bc4e3af7de33"
    text: {Well, guys, I'm terrible at catching up, but, I'd just like to say that being able to download an executable and start building a GUI with it is exactly what I hoped for! I hope this keeps going. It's starting to feel like a true successor to R2. :-)}
    sent: "2017-08-07T17:46:49.061Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5988a70c45fc6707460222ca"
    text: {@geekyi `Compilation Error: unknown directive macro`}
    sent: "2017-08-07T17:44:44.271Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5988a628329651f46efb08e4"
    text: {@geekyi It's saying something to the effect of "unrecognized issue" when I use `#macro` :hmm:}
    sent: "2017-08-07T17:40:56.698Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5988907776a757f808819d58"
    text: {@geekyi  I'm working in [Crystal](https://crystal-lang.org/) bindings for libRed and 32 bits libraries are needed, also [Crystal](https://crystal-lang.org/) 32 bit compiler itself.}
    sent: "2017-08-07T16:08:23.173Z"
    v: 1
    author: "57dd2d9340f3a6eec065bcde"
) #(
    id: "59887f8c614889d475276b39"
    text: {My bad, I miss that `lib32-curl` is already a dependency of the `red` package.}
    sent: "2017-08-07T14:56:12.097Z"
    editedAt: "2017-08-07T14:57:32.117Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "59887e40329651f46efa49d4"
    text: {@geekyi It almost surely depends on i386 rebol2 and maybe needs to install `lib32-libcurl-compat` (not tested, but it seems that `lib32-glibc`, `lib32-openssl` are installed as dependencies). }
    sent: "2017-08-07T14:50:40.303Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "59887773ee5c9a4c5f9af041"
    text: {@faustinoaq I'm curious, does the aur package build red source from a 64bit rebol2? It looks like from the [PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=red) it runs on both i686 and x64^/No reason for that not to work now that I think of it, just interesting how that is done}
    sent: "2017-08-07T14:21:39.905Z"
    editedAt: "2017-08-07T14:22:05.951Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "598872f1ee5c9a4c5f9ad876"
    text: {@Enamex macros are actually designed for Red/System. It's not needed in normal Red}
    sent: "2017-08-07T14:02:25.913Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598868de2723db8d5e80ed8d"
    text: "@dockimbel Thank you!"
    sent: "2017-08-07T13:19:26.341Z"
    v: 1
    author: "57dd2d9340f3a6eec065bcde"
) #(
    id: "5988679f76a757f80880de4a"
    text: "they already exist there"
    sent: "2017-08-07T13:14:07.887Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59886483210ac269205f4829"
    text: "Are macros coming to Red/System?"
    sent: "2017-08-07T13:00:51.453Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5988138a614889d47525a627"
    text: {Yes, in the sense that 'string!' values store a reference to their content whereas 'integer!' values store the content . A `word!` never stores a value, only a reference to one.}
    sent: "2017-08-07T07:15:22.671Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598811cdc101bc4e3af56a04"
    text: {so a string is very different to interge, string is reference type}
    sent: "2017-08-07T07:07:57.019Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "598811c51c8697534a950ed8"
    text: {A [better explanation](https://github.com/red/red/wiki/Why-do-I-have-to-copy-series-values%3F). }
    sent: "2017-08-07T07:07:49.935Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5988114976a757f8087f85bd"
    text: {@mahengyang `m:  "1"` binds the word in the local context of the function to a string value whose initial content is "1". Assume that the "address" of the string is str-1234. 'm: 1' binds  'm'  to str-1234.^/^/`m: append m "2"` binds `m` to the value returned by `append` which is the value 'm' is bound to (i.e. str-1234) with "2" appended to it.^/^/Next time, the function is called; 'm: "1"' still binds 'm' to str-1234 which now contains "12".^/ }
    sent: "2017-08-07T07:05:45.565Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59880e8ba7b406262d65ac49"
    text: {in `test2` function, I have set `m: 1`,why the print is `122` after second recursion}
    sent: "2017-08-07T06:54:03.189Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "59880e25614889d475258f0f"
    text: {```^/test1: function [x] [^/^-m: 1^/^-print ["m is" m]^/^-m: m + 1^/^-if x < 3 [test1 x + 1]^/^-return m^/]^/^/^/test2: function [x] [^/^-m: "1"^/^-print ["m is" m]^/^-m: append m "2"^/^-if x < 3 [test2 x + 1]^/^-return m^/]^/^/test1 1^/^/test2 1^/```^/result^/```^/m is 1^/m is 1^/m is 1^/m is 1^/m is 12^/m is 122^/```}
    sent: "2017-08-07T06:52:21.427Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "5987f58b329651f46ef82aef"
    text: {@faustinoaq Link to ArchLinux's Red package added to Download page now.}
    sent: "2017-08-07T05:07:23.842Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5987f162210ac269205d94d8"
    text: {@kpeters58  You can store keys  in the `/data` facet along with the labels to display:^/```lisp^/list: ["a" 123 "b" 456 "c" 789]^/view [^/    drop-list data list on-change [^/        probe pick face/data 2 * face/selected^/    ]^/]^/```}
    sent: "2017-08-07T04:49:38.075Z"
    editedAt: "2017-08-07T04:50:53.118Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5987e62a210ac269205d789e"
    text: {@faustinoaq It's official. It's for users cannot visit red-lang.org (host on blogger which is blocked in some countries).}
    sent: "2017-08-07T04:01:46.920Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5987c813c101bc4e3af496da"
    text: ":+1: "
    sent: "2017-08-07T01:53:23.776Z"
    v: 1
    author: "57dd2d9340f3a6eec065bcde"
) #(
    id: "5987c1092723db8d5e7ea901"
    text: {@faustinoaq, http://red.github.io/ may be official. Someone inside Team Red should be able to say shortly. There are unofficial Red related projects as well, so we'll try to make sure that's clear.}
    sent: "2017-08-07T01:23:21.508Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59879df6bc464729745c3741"
    text: {How do those of you who have a need for this type of code solved this issue in Red? Assume you need to display a list of strings in a drop-list, but you store database keys associated with those strings only. Do you keep these in a separate series (sorted the same way) in the 'extra ' facet? Or are there better solutions?}
    sent: "2017-08-06T22:53:42.525Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59878a1c329651f46ef708e3"
    text: {@rebolek Oh, okay.  I always thought BCD was inefficient, so never gravitated towards it. :)}
    sent: "2017-08-06T21:29:00.960Z"
    v: 1
    author: "5982323cd73408ce4f6fd8c9"
) #(
    id: "598788a72723db8d5e7e1517"
    text: {@Syntonica `money!` in R3 is https://en.wikipedia.org/wiki/Binary-coded_decimal}
    sent: "2017-08-06T21:22:47.589Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598784e7a7b406262d6434bb"
    text: "Is http://red.github.io/ a kind of official page?"
    sent: "2017-08-06T21:06:47.255Z"
    v: 1
    author: "57dd2d9340f3a6eec065bcde"
) #(
    id: "598784632723db8d5e7e0736"
    text: {@geekyi Thanx, I found Red on https://aur.archlinux.org/packages/red/, Maybe somebody should add this link to documentation too :sweat_smile: }
    sent: "2017-08-06T21:04:35.812Z"
    v: 1
    author: "57dd2d9340f3a6eec065bcde"
) #(
    id: "59878152210ac269205c6547"
    text: {@GiuseppeChillemi Unless you are a millionaire, or you are working in the old lire, you can just use an integer type with an implicit decimal point.  You will still need to watch rounding, as you would with any type.  I thought that that was how the backend of the Money! type worked since floats are fraught with peril.  I constantly have to check on their rounding behaviors in conversions from double->single and double->int (in C++).}
    sent: "2017-08-06T20:51:30.106Z"
    v: 1
    author: "5982323cd73408ce4f6fd8c9"
) #(
    id: "59877fa9329651f46ef6e7e2"
    text: {@faustinoaq you'd need 32bit libs. Also, I'm pretty sure someone had an aur package}
    sent: "2017-08-06T20:44:25.717Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59877f862723db8d5e7df89d"
    text: {@PeterWAWood Re: iOS, the current iOS 10 will be the last iOS to run 32-bit apps.  iOS 11 will be pure 64-bit.  If you go to Settings > General > About > Applications, it will show you which apps are on the chopping block.}
    sent: "2017-08-06T20:43:50.572Z"
    v: 1
    author: "5982323cd73408ce4f6fd8c9"
) #(
    id: "59877e5b1c8697534a936f34"
    text: {@Enamex basically, all on http://www.red-lang.org/ since it's still alpha, there isn't much significance in numbered releases. Technically it should be http://www.red-lang.org/search/label/release, but all blogposts count so.. Doc multitasks a lot, he could miss tagging some sometimes :D}
    sent: "2017-08-06T20:38:51.822Z"
    editedAt: "2017-08-06T20:42:01.922Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "598779c1c101bc4e3af3c834"
    text: {So, actually I can't use RED for financial manipulation. Couldn't I  ?}
    sent: "2017-08-06T20:19:13.581Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "5987780cbc464729745bc8b6"
    text: {Note for Linux on official page includes Debian and Fedora based distros but  not for ArchLinux :sweat_smile: }
    sent: "2017-08-06T20:11:56.693Z"
    v: 1
    author: "57dd2d9340f3a6eec065bcde"
) #(
    id: "59877799a7b406262d640a23"
    text: {Hi people, I'm new in Red. How to install Red on ArchLinux based distros? I tried with raw binaries but have had no success.}
    sent: "2017-08-06T20:10:01.675Z"
    v: 1
    author: "57dd2d9340f3a6eec065bcde"
) #(
    id: "59875cc445fc670746fda0f3"
    text: {@GiuseppeChillemi, no need to apologize, *ever*. Same goes for everyone else. Your English beats my Italian every day. :^^) If I ask for clarification, it could be a technical matter as much as anything, wanting to make sure I understand the problem so I don't give bad advice.^/^/The answer is easy. `Float!` should *never* be used for decimal values where accuracy is important, because it can't represent all decimal values. See: https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems^/^/This won't always be visible, but it's there:^/```^/>> 0.1 + 0.1 + 0.1 ^/== 0.3^/>> 0.1 + 0.1 + 0.1 * 10000000000000000^/== 3000000000000001.0^/```^/When working with money values, rounding errors can add up. I worked with a guy, many years ago, who developed empirical solutions for it, which was pretty amazing. It worked in our domain, but I don't think was generalizable. The solution is to use BCD or some other representation that can accurately handle decimal values. That's the plan for `money!` in Red, but could also be a general `decimal!` type that money is built on. The issue then is what `1.0` means as a literal, float or decimal. Floats are faster, because of hardware support. ^/^/There are other interesting approaches as well, but that should be enough for now.}
    sent: "2017-08-06T18:15:32.756Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59875a50614889d475238fa4"
    text: {I tried a couple things, but couldn't make it happen here, which is why I asked.}
    sent: "2017-08-06T18:05:04.453Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59875a3845fc670746fd9829"
    text: "Thanks for checking @kpeters58. "
    sent: "2017-08-06T18:04:40.358Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59875a0c45fc670746fd979b"
    text: {Date math is a tricky thing, so we need good examples to help people understand the behavior. But I think there may be a bug here (6-aug being the current date here):^/```^/>> now/date - now/date^/== -1^/>> 6-aug-2017 - 6-aug-2017^/== 0^/>> 6-aug-2017 - now/date^/== 0^/>> now/date - 6-aug-2017^/== -1^/```}
    sent: "2017-08-06T18:03:56.120Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598756c276a757f8087d6151"
    text: {@greggirwin  I apologize for my poor language skills. I mean: which advantage will give the MONEY! datatype over the FLOAT one ?}
    sent: "2017-08-06T17:49:54.515Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "598741f4210ac269205b97f1"
    text: {@greggirwin Hmm, that's strange - upon making the smallest possible example, I find my assumptions to be incorrect - as it works just fine. In my real world application removing the offending line fixed the subsequently defined context - maybe I should have restarted the console more often to rule any existing objects out as culprits?}
    sent: "2017-08-06T16:21:08.130Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "598736e41c8697534a92784a"
    text: {Heyo o/^/Anyone got a list of the blogposts related to new numbered version releases? It's surprisingly hard to search for something like that on Blogger...}
    sent: "2017-08-06T15:33:56.667Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5987195045fc670746fcc312"
    text: {@rebolek @x8x I've just pushed pull request to red/code repository with Red/System binding to Portaudio (low level crossplatform real time audio library). You may find it useful.}
    sent: "2017-08-06T13:27:44.568Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "598700632723db8d5e7c5b06"
    text: "Thanks to @dockimbel "
    sent: "2017-08-06T11:41:23.638Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5986fff0a7b406262d62835a"
    text: {@fvanzeveren Red now evaluates `0.0 / 0.0` to `1.#NAN`^/```text^/>> 0.0 / 0.0 ^/== 1.#NaN^/```^/}
    sent: "2017-08-06T11:39:28.097Z"
    editedAt: "2017-08-06T11:39:43.201Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5986ee691c8697534a91a2a5"
    text: {Thanks for the explanation, now it at least makes sense to me ....}
    sent: "2017-08-06T10:24:41.456Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5986d681ee5c9a4c5f9589b7"
    text: {The reason is that Red treats day 0 as the last day of the previous month and day -1 as the second last day of the previous month:^/```text^/>> d: 1-8-17^/== 1-Aug-2017^/>> d/day: 0^/== 0^/>> d^/== 31-Jul-2017^/>> d: 1-8-17^/== 1-Aug-2017^/>> d/day: -1^/== -1^/>> d^/== 30-Jul-2017^/```}
    sent: "2017-08-06T08:42:41.172Z"
    editedAt: "2017-08-06T08:42:49.486Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
)#(
    id: "5986d56f76a757f8087bd907"
    text: {Your question is "Should the normalised date for -1-AUG-2017 be 31-JUL-2017 not 30-JUL-2017" needs to be looked into. }
    sent: "2017-08-06T08:38:07.214Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5986d451ee5c9a4c5f9583f9"
    text: {That said, Rebol gives the same answer:^/```text^/>> d: now^/== 6-Aug-2017/16:32:36+8:00^/>> d/day: -1^/== -1^/>> d^/== 30-Jul-2017/16:32:36+8:00^/```}
    sent: "2017-08-06T08:33:21.090Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5986d418ee5c9a4c5f95839d"
    text: {@pekr Re: the date. The [Date! reference](https://doc.red-lang.org/en/date.html#__day) says that if you set the day to an invalid value the date is set to a "normalised" date. }
    sent: "2017-08-06T08:32:24.905Z"
    editedAt: "2017-08-06T08:37:32.815Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5986d272a7b406262d620347"
    text: {@pekr I think another difference between macOS and iOS is that macOS has the AppKit framework (which is used in the Red GUI backend) and iOS has UIKit.}
    sent: "2017-08-06T08:25:22.855Z"
    editedAt: "2017-08-06T08:26:44.802Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5986d21d614889d47521e538"
    text: {in the above case of setting it to `-1`, shouldn't be `31-Jul-2017/....` a more expected result? }
    sent: "2017-08-06T08:23:57.449Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5986d1d7c101bc4e3af1bedf"
    text: {In above case note, that setting the `day`to 1, does not increment the recent day, it just sets it to that value. But try with the `40` for e.g. - it overflows to September ....}
    sent: "2017-08-06T08:22:47.372Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5986d19e1c8697534a914cd5"
    text: {btw - not sure what to expect, when trying to set `date!``/day` to -1? Maybe it should be avoided? Plus variant works imo, if the assumption is correct, that setting such value sets it to the day-of-month value. Well, if it overflows the recent month, it goes into the next one. But what about negative values?^/^/```^/>> today: now^/== 6-Aug-2017/10:00:41+02:00^/>> today/day: 1^/== 1^/>> today^/== 1-Aug-2017/10:00:41+02:00^/>> today/day: -1^/== -1^/>> today^/== 30-Jul-2017/10:00:41+02:00^/```}
    sent: "2017-08-06T08:21:50.449Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5986d0b745fc670746fbf070"
    text: "Thanks."
    sent: "2017-08-06T08:17:59.033Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5986ca47c101bc4e3af1a992"
    text: {Another difference is that iOS has the CocoaTouch framework whereas macOS have the Cocoa framework.}
    sent: "2017-08-06T07:50:31.494Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5986c9f3c101bc4e3af1a8fe"
    text: {@pekr One big difference between macOS and iOS is the processor. macOS being Intel and iOS being ARM. Apple no longer "supports" 32-bit apps on iOS. (I don't know if 32-bit apps will run if you can get them onto the device.)}
    sent: "2017-08-06T07:49:07.880Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5986c7602723db8d5e7bbad7"
    text: {Our company has over 50 iPads out there and we are being asked, if our inernal IT could take over some tools development in let's say 2 years horizont ....}
    sent: "2017-08-06T07:38:08.231Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5986c6d8ee5c9a4c5f955e12"
    text: {As we have discussed some roadmap telated topics yesterday, I would like to ask about the iOS support, which can't be found on the roadmap yet, if I am not misteken. Please note - I am not pushing for anything, just would like to know, how technically different and difficult it is to get one. Linux Arm Red apps kind of work under Android, woulf like to know, if in the same sense macOS app would work under iOS?}
    sent: "2017-08-06T07:35:52.795Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5986af424bcd78af5619e7f5"
    text: {@x8x I've always liked the theory behind Max (and Pd et alia) but I've always found the implementations to be slow, clunky and ugly.  With's Red's extensibility, throw on an Audio/Midi library and it could definitely take them on!}
    sent: "2017-08-06T05:55:14.867Z"
    v: 1
    author: "5982323cd73408ce4f6fd8c9"
) #(
    id: "5986a31145fc670746fb7c77"
    text: {@kpeters58, can you provide a small example that reproduces the issue? No pun intended. }
    sent: "2017-08-06T05:03:13.295Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5986a1fc76a757f8087b4f2e"
    text: {:point_up: [August 5, 2017 2:38 PM](https://gitter.im/red/red?at=59862cce76a757f8087a2a73) @LazyR0t, and, as it has come up recently, `Red` for the header is case sensitive. One of the few places case matters.}
    sent: "2017-08-06T04:58:36.772Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5986a19c1c8697534a90d7bc"
    text: {:point_up: [August 5, 2017 1:03 PM](https://gitter.im/red/red?at=598616931c8697534a8f8890) @GiuseppeChillemi, do you mean what will help get it into Red sooner?}
    sent: "2017-08-06T04:57:00.512Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59868cf74bcd78af56199bc6"
    text: {I just lost 2 hours of my life figuring this one out...  Red refused to acknowledge a context I defined in %settings.red, no matter what I tried. Turns out there was an issue in %globals.red and apparently because of this none of the files below it were 'done' - I would have expected it to either fail completely or to continue 'doing' the other files...}
    sent: "2017-08-06T03:28:55.961Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59868c1b4bcd78af56199966"
    text: {```^/Red [ ^/      needs: 'view ^/    ]^/^/do %globals.red^/do %about.red^/do %lookups.red^/do %settings.red^/...^/```}
    sent: "2017-08-06T03:25:15.970Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59868c191c8697534a90a9ac"
    text: "Is this expected/documented behavior?"
    sent: "2017-08-06T03:25:13.576Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59862cce76a757f8087a2a73"
    text: "haha, that works. thanks!"
    sent: "2017-08-05T20:38:38.556Z"
    v: 1
    author: "59862a4cd73408ce4f703d91"
) #(
    id: "59862ccd1c8697534a8fc95b"
    text: {@LazyR0t>  need a header at the top of the file,  Red [needs: 'view]}
    sent: "2017-08-05T20:38:37.075Z"
    v: 1
    author: "592b9dc3d73408ce4f62fc8f"
) #(
    id: "59862c8d329651f46ef33f0d"
    text: {@LazyR0t>  need a header at the top of the file,  Red [needs 'view]}
    sent: "2017-08-05T20:37:33.727Z"
    v: 1
    author: "592b9dc3d73408ce4f62fc8f"
) #(
    id: "59862ae91c8697534a8fc3a4"
    text: {So, I've saved the following into test.r:^/^/   digit: charset "0123456789"^/    view [^/        style label: text bold right 40^/        style err-msg: text font-color red hidden^/    ^/        group-box "Person" 2 [^/            origin 20x20^/            label "Name" name: field 150^/            label "Age"  age:  field 40^/            label "City" city: field 150^/            err-msg "Age needs to be a number!" react later [^/                face/visible?: not parse age/text [any digit]^/            ]^/        ]^/        button "Save" [save %person.txt reduce [name/text age/text city/text]]^/    ]^/^/This works if I type/paste it into the REPL, but I get the following errors when I try red --cli test.r:^/*** Syntax Error: invalid value at "]]"^/*** Where: do^/*** Stack: load^/^/Can someone help me out?}
    sent: "2017-08-05T20:30:32.976Z"
    v: 1
    author: "59862a4cd73408ce4f703d91"
) #(
    id: "59861697329651f46ef2fbd6"
    text: "*financial data"
    sent: "2017-08-05T19:03:51.115Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "598616931c8697534a8f8890"
    text: {Which help could give the money datatype manipulating company financial ?}
    sent: "2017-08-05T19:03:47.061Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "59860e70210ac269205867de"
    text: {@greggirwin NP :D^/@dockimbel Am aware. Just suggesting an alternative syntax.^/You'd find it familiar from VLSI work. Can't think of a nice extension for arbitrary base though (and can't tell why it'd be needed; could just be made as a macro that takes a string?).^/For specifying unit Rust does _that_ via suffixes. So something like:^/`0hDEADBEAF_u64` or `0hFFu8`.}
    sent: "2017-08-05T18:29:04.981Z"
    editedAt: "2017-08-05T18:30:11.344Z"
    v: 2
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5986076045fc670746f9eccd"
    text: "Yes, thanks @Enamex "
    sent: "2017-08-05T17:58:56.803Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598604121c8697534a8f45e9"
    text: {@Enamex  That's a known issue. There is a new proposed literal syntax (`0#FF`) in a ticket there: https://github.com/red/red/issues/1079#issuecomment-226980417}
    sent: "2017-08-05T17:44:50.930Z"
    editedAt: "2017-08-05T17:47:37.903Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5986027af5b3458e30b2fc33"
    text: {Current syntax:^/FFh == 255^/We can do:^/```^/>> a: aah: FFh^/== 255^/>> a^/== 255^/>> A^/== 255^/>> aah^/== 255^/>> AAh^/== 170^/>> AAH^/== 255^/```}
    sent: "2017-08-05T17:38:01.997Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598600494bcd78af561819d3"
    text: {What I mean is, what is the benefit of a `0h` prefix over the `h` suffix we already have?}
    sent: "2017-08-05T17:28:41.801Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5986001945fc670746f9d5f8"
    text: "So you mean it conflicts with pair values?"
    sent: "2017-08-05T17:27:53.452Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985ffad4bcd78af561817f5"
    text: {http://static.red-lang.org/red-system-specs.html#section-4.1.1}
    sent: "2017-08-05T17:26:05.991Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5985ff6e2723db8d5e79bd88"
    text: "Can you provide an example?"
    sent: "2017-08-05T17:25:02.190Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985ff451c8697534a8f36e7"
    text: {@greggirwin, The current syntax clashes with identifiers.}
    sent: "2017-08-05T17:24:21.953Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5985fb8c45fc670746f9c599"
    text: "@Enamex, what's the benefit?"
    sent: "2017-08-05T17:08:28.155Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985fb5d614889d4751fb53c"
    text: {Consider the following experimental.playgroud stuff:^/```^/default: func [^/^-"Set a value for the word if the word is not set or is none."^/^-'word^/^-value^/][^/^-if not all [value? :word  not none? get word] [^/^-^-set word :value^/^-]^/^-;TBD: get-word args support not in place yet.^/^-;if not set? :word [set word :value]^/^-get word^/]^/^/dup: dupe: dupl: func [^/^-"Returns a new block with 'value duplicated 'count times."^/^-value "Series values are deep copied, functions are evaluated and passed count index"^/^-count [integer!]^/^-/str "Return a string, rather than a block; /into overrides this"^/^-/into "Put results in 'out, instead of creating a new block/string"^/^-^-out [series!] "Target for results, when /into is used"^/^-/local i^/][^/^-default out make either str [string!][block!] count^/^-if not positive? count [return out]^/^-out: case [^/^-^-series? :value [^/^-^-^-loop count [insert/only out copy/deep value]^/^-^-]^/^-^-any-function? :value [^/^-^-^-repeat i count [insert/only out value i]^/^-^-]^/^-^-'else [insert/dup out value count]^/^-]^/^-either into [out][head out]^/]^/e.g. [^/^-dupe #"-" 5^/^-dupe/str #"-" 5^/^-dupe/into #"-" 5 s: "abc"^/^-print s^/^-dupe/into #"-" 5 tail s: "abc"^/^-print s^/^-blk: dupe [] 5^/^-append blk/1 'x^/^-print mold blk^-^-; show that sub blocks are copied^/^-blk: dupe func [i][dupe/str to char! #"@" + i i] 5^/^-print mold blk^/]^/shift: function [^/^-"Shift values in a series; length doesn't change."^/^-series [series!]^/^-/left   "Shift left (the default)"^/^-/right  "Shift right"^/^-/part^/^-^-count [number!] "Shift this many positions"  ; TBD series! support?^/^-/with^/^-^-fill "Fill vacated slots with this value"^/^-;/local pad^/][^/^-make-blank-value: func [type] [^/^-^-any [^/^-^-^-attempt [make type 0]^/^-^-^-attempt [make type ""]^/^-^-^-attempt [make type []]^/^-^-^-attempt [make type none]^/^-^-]^/^-]^/^-range: any [range 1]^/^-if any [empty? series  0 = range] [return series]^/^-;TBD: Add positive? check for range or have negative^/^-;     range values shift in the reverse direction.^/^-pad: dupe any [fill  make-blank-value last series] range^/^-either right [^/^-^-head insert head clear skip tail series negate range pad^/^-][^/^-^-append remove/part series range pad^/^-]^/]^/e.g. [^/    shift [a b c d e ]^/    shift/right [a b c d e ]^/]^/```}
    sent: "2017-08-05T17:07:41.398Z"
    editedAt: "2017-08-05T17:07:59.372Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985fb2e210ac26920582cde"
    text: {what's the difference though?^/```^/>> 2Ah^/== 42^/```}
    sent: "2017-08-05T17:06:54.119Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985faca45fc670746f9c3fe"
    text: {:point_up: [August 5, 2017 6:37 PM](https://gitter.im/red/red?at=5985f463f5b3458e30b2cad8) *As a replacement. There's a card about it somewhere on Trello.}
    sent: "2017-08-05T17:05:14.857Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5985f9f1bc464729745786c1"
    text: {I don't remember the exact state I left this in, when porting to Red.^/^/```^/rotate: function [^/^-"Rotate values in a series."^/^-series [series!]^/^-/left   "Rotate left (default)"^/^-/right  "Rotate right"^/^-/part^/^-^-count [number!] "Rotate this many positions"^/][^/^-if empty? series [return series]^/^-; modulo the count against the series size^/^-count: any [all [count  count // length? series] 1]^/^-;if zero? count [return series]^-; MOVE handles a zero /part correctly^/^-head either right [^/^-^-move/part (skip tail series negate count) series count^/^-][^/^-^-move/part series tail series count^/^-]^/]^/```^/```^/^-blk: [1 2 3 4 5 6 7 8 9 10]^/^-rot: func [cmd] [prin [mold blk mold cmd "== "]  do cmd  print mold blk]^/^-rot [rotate blk]^/^-rot [rotate/left blk]^/^-rot [rotate/right blk]^/^-rot [rotate/right blk]^/^-rot [rotate/part blk 3]^/^-rot [rotate/right/part blk 3]^/```}
    sent: "2017-08-05T17:01:37.304Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f99d329651f46ef29ba9"
    text: {`shift/rotate` on `series!` sounds interesting! :P}
    sent: "2017-08-05T17:00:13.619Z"
    editedAt: "2017-08-05T17:00:20.275Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985f97e210ac269205823e5"
    text: {I have some old `shift/rotate`mezzanines, which were meant for high level use, e.g. on blocks. }
    sent: "2017-08-05T16:59:42.207Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f933f5b3458e30b2d9da"
    text: {If you only care about integer values, as binaries, it may be easiest to write a wrapper. Internally, `shift` uses the Red/System ops, which only work on integers. If you need to shift binaries as series, start with a mezzanine to prototype behavior. }
    sent: "2017-08-05T16:58:27.845Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f7fa614889d4751faa0c"
    text: "`Shift` is the only missing piece I think."
    sent: "2017-08-05T16:53:14.439Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f7f84bcd78af5617ff82"
    text: {```^/>> 23 << 42^/== 23552^/>> to binary! 23^/== #{00000017}^/>> to binary! 42^/== #{0000002A}^/>> #{00000017} << #{0000002A}^/*** Script Error: << does not allow binary! for its data argument^/*** Where: <<^/*** Stack:  ^/```}
    sent: "2017-08-05T16:53:12.880Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985f7d9bc46472974577ff2"
    text: "@greggirwin yes, and bitshifts"
    sent: "2017-08-05T16:52:41.131Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985f7b476a757f80879804e"
    text: {@9214, you mean like `and` and `or`?^/```^/>> #{0F} and #{FF}^/== #{0F}^/>> #{0F} or #{FF}^/== #{FF}^/```}
    sent: "2017-08-05T16:52:04.641Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f64aa7b406262d5fd17b"
    text: {I'm also curious about how Redbol gurus integrated Red/Rebol REPL in their workflow. How do you use it? (`bash` replacement, throw-away scripts, automation, etc)}
    sent: "2017-08-05T16:46:02.022Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985f5d4a7b406262d5fd059"
    text: {One thing I want to propose is to allow bitwise operations on `binary!` values. Your thoughts?}
    sent: "2017-08-05T16:44:04.839Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985f4c34bcd78af5617f3a4"
    text: {@Enamex, I think @9214 means we already have a hex notation in Red.^/```^/>> 2Ah^/== 42^/```^/So we don't need to add another one.}
    sent: "2017-08-05T16:39:31.051Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f463f5b3458e30b2cad8"
    text: {@x8x, I think @honix is the one to start the port of Pyno. With the talk of DSP and audio stuff lately, it would be cool to do a little, generic, dataflow "patch" system. Maybe starting with data transformers would be easier though, for demo purposes. }
    sent: "2017-08-05T16:37:55.839Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5985eb6a2723db8d5e797800"
    text: {@9214 ^/```^/>> 0h2A^/== 42^/```^/Unless I'm misunderstanding your point :T}
    sent: "2017-08-05T15:59:38.289Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5985dfbc76a757f80879310e"
    text: {@Enamex ^/```text^/>> 0000002Ah^/== 42^/```}
    sent: "2017-08-05T15:09:48.977Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985d52276a757f808790d06"
    text: {A random suggestion for an alternative hex literal syntax:^/`0h000...`^/Yeah? Should work :P}
    sent: "2017-08-05T14:24:34.609Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59859d0d76a757f80878652a"
    text: {@honix I did a review a few months ago of existing solutions and research projects for *structured editing*, but haven't found anything that would make me drop a text-oriented code editor. [Greenfoot](https://www.greenfoot.org/frames/) is one of the most interesting projects, but still falls short on usability (at least for me). Do you have any ideas on how to push the boundaries further in that domain?}
    sent: "2017-08-05T10:25:17.432Z"
    editedAt: "2017-08-05T10:28:06.559Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59859b3ef5b3458e30b1b5b5"
    text: {@x8x Pyno has some cool examples inside, its more about data flow between nodes. VLE is a try to make programming using 2d trees, not linear text, its little more academic experimemt. Also Pyno is easier to setup and run. :P}
    sent: "2017-08-05T10:17:34.059Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59857e7419147ac323150050"
    text: {@gregg nice! 😃 what is better https://github.com/honix/Pyno or https://github.com/honix/Visual-List-Editor ? Maybe some good hearted pythoner or lisper could port that to Red 😁}
    sent: "2017-08-05T08:14:44.868Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "598531ff210ac2692055de20"
    text: "Thanks, @dockimbel "
    sent: "2017-08-05T02:48:31.814Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "5984cec9614889d4751c5f33"
    text: {Check out @honix's github repos as well. He's got some cool visual programming stuff there. }
    sent: "2017-08-04T19:45:13.556Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5984bbb281cd9a5d7e9c08f4"
    text: {And this should be done in Red too http://sonic-pi.net/}
    sent: "2017-08-04T18:23:46.043Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5984bba476a757f80875e48c"
    text: {@x8x it definitely can. I wrote modular synth based on my Sintezar stuff, but Rebol was too slow for that task. I must port it to Red (and add MIDI, OSC,...).}
    sent: "2017-08-04T18:23:32.796Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5984ba8019147ac32314faf4"
    text: {@rebolek Red could do better then this html/js based stuff https://cycling74.com/products/max/}
    sent: "2017-08-04T18:18:40.412Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5984b9b91c8697534a8b76c9"
    text: {@x8x cool! And Junkie XL is one hell of a musician. 'm not that good with soldering iron to target analog modular, but virtual modular in Red...I want to do it. There's already one red virtual analog (nordlead), so it's definitely possible :satisfied: }
    sent: "2017-08-04T18:15:21.505Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5984b8a50cef4fed2eb8a536"
    text: {Red and lots of knobs not to make music but to control future AI, change a patch and it will make you coffee instead of flying your car. 😂}
    sent: "2017-08-04T18:10:45.738Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5984b85876a757f80875d87b"
    text: "That's an impressive analog config file."
    sent: "2017-08-04T18:09:28.634Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5984b7af19147ac32314fad0"
    text: "sorry for the oot.. 😜"
    sent: "2017-08-04T18:06:39.856Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5984b7840cef4fed2eb8a528"
    text: {@rebolek "I want HW with knobs" me too, a whole lot of knobs, like this https://www.youtube.com/watch?v=cudr9Y9lEMI}
    sent: "2017-08-04T18:05:56.615Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59848bd71c8697534a8aad97"
    text: {@dahu Very good answer. :+1:  We should save it somewhere in a FAQ. ([done](https://github.com/red/red/wiki/FAQ))}
    sent: "2017-08-04T14:59:35.192Z"
    editedAt: "2017-08-04T15:06:31.539Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598486261c8697534a8a90c2"
    text: {@Syntonica I am really interested in your DSP stuff. I wrote synthesizer in Rebol years ago that I will rewrite in Red(/System) with rPi as main target platform (I want HW with knobs). You can take a look at it on rebol.org, search for Sintezar there. I am really interested what others need in terms of sound support in Red, so feel free to contact me.}
    sent: "2017-08-04T14:35:18.810Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598471abc101bc4e3aea9788"
    text: {Github supports Asciidoc and it appear that there's a bitbucket plugin for it too. The LWN kernelorg article prefers sphynx over asciidoc not for any better flexibility in sphynx's syntax but rather that it's written in python compared to asciidoctor's ruby and there doesn't already exist ruby code in the kernel tree. The article points out that asciidoc should be a better choice in the future, but sphynx is a better choice (for *their* needs) now. I think Red should stick with asciidoc. There hasn't been mention here of the Red documentation project suffering from a lack of functionality in asciidoctor's syntax or toolchain. Changing just for changing's sake is not wise.}
    sent: "2017-08-04T13:07:55.363Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "598452952723db8d5e7406fd"
    text: {The docs are published using GitBooks as far as I know it does not accept sphinx-doc.}
    sent: "2017-08-04T10:55:17.751Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59844fc74bcd78af56128046"
    text: {It seems to me better to choose sphinx-doc than asciidoc, it is more flexible and functional, even bitbucket and github can read this format and kernel.org use it https://lwn.net/Articles/692704/}
    sent: "2017-08-04T10:43:19.612Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "59844e364bcd78af561279ba"
    text: {The Red Team is very conscious of the need for good documentation and is striving to balance that need with the need to continually expand Red's capabilities. The goal is for Red to have three levels of documents:^/^/1.The Red Tutorial(s)^/2.The Red User Manual(s)^/3.The Red Reference^/^/The Red Reference will include a concise, but exhaustive description of all language, DSL and built-in framework features. It will target advanced users and contributors. It will be produced by the Red Team and form the basis for the Red Tutorial and the Red User Manual.^/^/The Red User Manual will cover the complete scope of Red more accessibly than the Red Reference. It will be targeted at all users. It is hoped that this will be jointly developed by the Red Team and the Red community.^/^/The Red Tutorial will be a tutorial-based introduction to Red. It will target new users. It is hoped that this will be mainly developed by the Red community.^/^/The documents that have been published so far on Red Docs are part of the Red Reference.^/^/The Red Team is aiming to publish most of the content of the Red Reference with Alpha release 0.7.0.^/^/Once the Red Reference reaches a sufficient level, planning will start on the Red User Manual and how it can best be developed with the Red community.^/^/In the meantime, comments and suggestions on the published documentation are welcome.}
    sent: "2017-08-04T10:36:38.170Z"
    editedAt: "2017-08-04T10:40:52.436Z"
    v: 2
    author: "5979717bd73408ce4f6ef1ad"
) #(
    id: "5984240d1c8697534a88dea2"
    text: {@honix I've restarted terminal, recompiled console and it's fine again. }
    sent: "2017-08-04T07:36:45.125Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598423c876a757f808735c06"
    text: "@rebolek try use what-dir"
    sent: "2017-08-04T07:35:36.985Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "598421d11c8697534a88d446"
    text: {Hm, why the path gets changed?^/```^/fakemac:red sony$ pwd^//Users/sony/Code/red^/fakemac:red sony$ ./console^/--== Red 0.6.3 ==--^/Type HELP for starting information.^/^/>> pwd^/%/Users/sony/Code/red.bak0817/^/```}
    sent: "2017-08-04T07:27:13.416Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5983ca9c4bcd78af5610b3c1"
    text: {@maximvl Here are some examples:^/```text^/write url [^/^-Http-Verbs   (word!)^/^-Http-Headers (block! Must be set-word!, string! pair. Optional when use GET or HEAD method)^/^-Data         (string! binary! Optional when use GET or HEAD method)^/]^/^/probe write/info http://httpbin.org/put [^/^-PUT^/^-[Content-Type: "Content-Type: text/html; charset=utf-8"]^/^-"Hello Red"^/]^/^/probe write/info http://httpbin.org/put [HEAD]^/```}
    sent: "2017-08-04T01:15:08.948Z"
    editedAt: "2017-08-04T01:21:06.405Z"
    v: 7
    author: "55659cf315522ed4b3e10064"
) #(
    id: "598397e876a757f80871a618"
    text: "If they could con their managers into it. "
    sent: "2017-08-03T21:38:48.222Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59837236bc464729744eec09"
    text: {Surely one of their users will want to build it then. :^^)}
    sent: "2017-08-03T18:57:58.185Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59836c5ef5b3458e30aa280d"
    text: {Largest internal network in the world uses LDAP (Active Directory)}
    sent: "2017-08-03T18:33:02.763Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59836a0345fc670746f1145a"
    text: {Lots of chat means excitement. :^^) Something to note about I/O and protocols. R2's were built by the core RT team, and the documentation for building new ones was...not. A few people, like Doc and Gabriele Santilli did it, but it was beyond the average Reboler. You had to really need it. With Red, I believe Doc is of the mind that providing the foundation, a couple strong examples, documentation, and maybe even some dialecting, will make it *much* easier for people who know their domain and needs can build new protocols.^/^/And the binary syntax is a nice idea. Someone here has done some OSC work I believe. After @joeerl_twitter posted about it, I read up a bit, and I think it could be a nice module.}
    sent: "2017-08-03T18:22:59.723Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5983657aa7b406262d571c38"
    text: {Directory services are important in corporations - they are central point of the infrastructure user management  ... }
    sent: "2017-08-03T18:03:38.522Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "598362cf2723db8d5e70b33f"
    text: {@dockimbel Thanks, I found that page searching for Rebol and LDAP. We use LDAPS for logins to Novell eDirectory from thirdparty software etc. I have no idea if it is less relevant today or not. I was curious to see how I could access it from Red.}
    sent: "2017-08-03T17:52:15.546Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5983343f4bcd78af560e6e80"
    text: {@maximvl I am on phone now, so can't give links, but my Gitter API (see my Github) already supports `put` and `delete` besides `get` and `post`. It was very easy to add (mainly because I wrote it months ago and just waited for Red to catch up :smile: )}
    sent: "2017-08-03T14:33:35.392Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59832ce245fc670746f00bb7"
    text: {@Phryxe I'm not sure how much LDAP is relevant nowadays ([I made an experimental](http://softinnov.org/rebol/ldap.shtml) Rebol implementation 7 years ago).}
    sent: "2017-08-03T14:02:10.368Z"
    editedAt: "2017-08-03T14:02:12.214Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59832ad0c101bc4e3ae5b2dc"
    text: {Re protocols, I also wonder, if the http is going to be implemented using the port primitives, like in R2/R3, or will Red use any OS provided functionality, if available?}
    sent: "2017-08-03T13:53:20.384Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5983284ba7b406262d561111"
    text: {Seen the list of I/O protocols on todo-list in Trello. Curious about LDAP}
    sent: "2017-08-03T13:42:35.647Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "598325bc4bcd78af560e2f1d"
    text: {btw Red can handle binaries fairly well already: ^/```^/>> to-binary [255 15 #"A" "test"]^/== #{FF0F4174657374}^/```}
    sent: "2017-08-03T13:31:40.133Z"
    editedAt: "2017-08-03T13:38:29.365Z"
    v: 5
    author: "5634982516b6c7089cb8f428"
) #(
    id: "598324e876a757f8086fac19"
    text: {and that binary syntax is a part of pattern matching in Erlang and both work great together}
    sent: "2017-08-03T13:28:08.915Z"
    editedAt: "2017-08-03T13:28:16.332Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59832465f5b3458e30a8de29"
    text: "@maximvl I'll let @qtxie do that. ;-)"
    sent: "2017-08-03T13:25:57.970Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598324334bcd78af560e28d4"
    text: "could you give an example? :)"
    sent: "2017-08-03T13:25:07.147Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5983240af5b3458e30a8dc81"
    text: "@maximvl HTTP: yes, all verbs are now supported."
    sent: "2017-08-03T13:24:26.202Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598323e0614889d47515c1bf"
    text: {@maximvl I think so - last week Doc announced http types got expanded ...}
    sent: "2017-08-03T13:23:44.792Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "598323ce76a757f8086fa764"
    text: {@maximvl Binary syntax is on my todo-list, that Erlang link is in my bookmarks since many years. ;-)}
    sent: "2017-08-03T13:23:26.844Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598323b745fc670746efe164"
    text: {I would exclude R3. Its networking stack was mostly unfinished - no emails, ftp, http only 1.0, no https, etc. Later on, Graham added some stuff, but not sure what state it ended up in.}
    sent: "2017-08-03T13:23:03.785Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59832390a7b406262d55fbea"
    text: {@dockimbel can I do all the types of http queries? `post`, `put` and so on?}
    sent: "2017-08-03T13:22:24.141Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5983234676a757f8086fa4c5"
    text: {@maximvl Most of todays general online communications are done using HTTP/S, which is already supported. ;-) But, yes, networking + GC will make Red on par with Rebol2/3 (actually a superset, as Red offers some new big features like Red/System).}
    sent: "2017-08-03T13:21:10.210Z"
    editedAt: "2017-08-03T13:21:59.098Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598322591c8697534a852663"
    text: {when other languages require you to do the bit math manually}
    sent: "2017-08-03T13:17:13.970Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5983223e329651f46ee89ed9"
    text: "like this: `X:4/little-signed-integer-unit:8`"
    sent: "2017-08-03T13:16:46.473Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59832208a7b406262d55f5ae"
    text: {you can literally specify that field `x` is 4 bytes big-endian signed integer and so on}
    sent: "2017-08-03T13:15:52.008Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5983219e329651f46ee89b86"
    text: {@pekr this is a super cool feature to handle binary data, both parse and generate, I only saw it in Erlang, not sure if any other language makes it that easy to use: http://erlang.org/doc/programming_examples/bit_syntax.html}
    sent: "2017-08-03T13:14:06.430Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "59831cab1c8697534a850e94"
    text: {btw - what do you mean by the "binary syntax" (in your message re pattern-matching DSL)?}
    sent: "2017-08-03T12:52:59.876Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59831b12c101bc4e3ae57346"
    text: {well I'm sure team knows what to do and they already proved this, it's just my opinion, but of course I don't know all the details of how things work}
    sent: "2017-08-03T12:46:10.888Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59831a941c8697534a850779"
    text: {Language features not, but chat about shifting the priorities :-)}
    sent: "2017-08-03T12:44:04.318Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59831a4f4bcd78af560e007f"
    text: {I'd love to make db queries, parse network protocols etc and I don't see how language features can be off-topic in general chat}
    sent: "2017-08-03T12:42:55.285Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "598319f2f5b3458e30a8b0ba"
    text: {We've got simple-io, which can work with http(s) and files too at least, so some work is still possible .... Don't want to spam this channel by what might be considered as a off-topic chat :-)}
    sent: "2017-08-03T12:41:22.865Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5983196f45fc670746efb59c"
    text: {I would argue that it's even more important than the gui, but I can imagine Red team has their own reasons}
    sent: "2017-08-03T12:39:11.158Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5983194e1c8697534a8502e3"
    text: {what's the reason of making programs which cannot communicate with the world?}
    sent: "2017-08-03T12:38:38.803Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5983191c210ac269204e07e7"
    text: {>I think, that IO is a big chunk of work^/^/true, but it's also the most important one}
    sent: "2017-08-03T12:37:48.551Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "598318f4a7b406262d55d036"
    text: {I think, that IO is a big chunk of work, which needs solid planning. And as such, can't be comleted during your coffee break :-) Judging upon the Trello, the road to 0.7.0 seems to be already set. But - who knows, it's just the public info, the team might change at will ....}
    sent: "2017-08-03T12:37:08.642Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "598318e5f5b3458e30a8acdf"
    text: {with pattern-matching DSL and binary syntax we will have most valuable Erlang's features in red :D}
    sent: "2017-08-03T12:36:53.717Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5983186a45fc670746efb1c4"
    text: "if we can have io soon it would be a bomb"
    sent: "2017-08-03T12:34:50.293Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59831825a7b406262d55cbc4"
    text: "yay, congratz :D"
    sent: "2017-08-03T12:33:41.800Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "598317e54bcd78af560df6a4"
    text: {The GC is going to be imo highly appreciated. I also noticed it was originally scheduled for the 0.6.5. Could cure some potentially skeptic reactions of newcomers not giving language a consideration, if the GC is missing ....}
    sent: "2017-08-03T12:32:37.982Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "598315361c8697534a84f446"
    text: {@pekr Simple-io, no, simple-gc, maybe, if it still provides an advantage in some use-cases compared to the final GC.}
    sent: "2017-08-03T12:21:10.460Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598314cff5b3458e30a89cf3"
    text: {@dockimbel is there a chance stuff like simple-io, simple-gc will stay as an option, or those are going to be mostly obsoleted by their respective fulll variants later? }
    sent: "2017-08-03T12:19:27.334Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "598314cbbc464729744d4cf7"
    text: {Here is a CLI console session (the GUI console needs some little changes to be compatible with the GC):^/```lisp^/C:\Dev\Red>console^/--== Red 0.6.3 ==--^/Type HELP for starting information.^/^/>> stats^/== 1260804^/>> recycle^/>> stats^/== 1166932^/>> loop 5000 [reduce [1 + 2]]^/== [3]^/>> stats^/== 1533060^/>> recycle^/>> stats^/== 1189052^/```}
    sent: "2017-08-03T12:19:23.064Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59831482a7b406262d55bbec"
    text: "That's great! Will repost to FB!"
    sent: "2017-08-03T12:18:10.723Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5983146cf5b3458e30a89b86"
    text: ":clap: "
    sent: "2017-08-03T12:17:48.784Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5983143445fc670746efa069"
    text: {https://twitter.com/red_lang/status/893083086430158848}
    sent: "2017-08-03T12:16:52.710Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5982cf12329651f46ee74fbe"
    text: {Copy and skip apply to any series, which includes string - but yes, this could be mentioned.}
    sent: "2017-08-03T07:21:54.091Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "59828b30614889d475139b69"
    text: "why copy and skip not in `string! ` type"
    sent: "2017-08-03T02:32:16.986Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "59828b0a2723db8d5e6d67f7"
    text: {the document `http://www.red-by-example.org/index.html#stringxex` need to complate}
    sent: "2017-08-03T02:31:38.477Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "59828aeea7b406262d53dcb7"
    text: "ok I have found skip"
    sent: "2017-08-03T02:31:10.160Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "59828ae0329651f46ee6922f"
    text: {You can combine `skip` and `copy` to get any sub strings.}
    sent: "2017-08-03T02:30:56.053Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "59828a9645fc670746edbd3a"
    text: "`copy/part s 3`"
    sent: "2017-08-03T02:29:42.717Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5982825df5b3458e30a6a1af"
    text: {how to get a sub string ^/eg.^/`s: “abcde”` ^/i want to get “abc"}
    sent: "2017-08-03T01:54:37.627Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "59825705210ac269204b6aa0"
    text: {If you're GUI of choice ends up being painful to write in, maybe you could use Red to generate code for it. ;^^)}
    sent: "2017-08-02T22:49:41.914Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598256c0614889d4751302da"
    text: {Sure thing. It's tough when we have to move forward, especially when pushed. How many installations of 32-MacOS could continue to be productive for years and years? And 64-bit will come, but it's not a priority right now. Plus, it's a big task. You'd be surprised at how many seemingly advanced requests the team can put in place in a short time, but the big stuff does have to be queued.}
    sent: "2017-08-02T22:48:32.890Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59824974a7b406262d531d2f"
    text: {Looks like CoreGraphics all over the place, so unless Red suddenly grows 32-bits, it's out. :( Which is really sad as I can easily grow to love this language!  Thanks for y'all hearing me out!}
    sent: "2017-08-02T21:51:48.214Z"
    v: 1
    author: "5982323cd73408ce4f6fd8c9"
) #(
    id: "59824828210ac269204b3b8b"
    text: "Too bad. :^^("
    sent: "2017-08-02T21:46:16.871Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59824781614889d47512d2ac"
    text: {@greggirwin I am using the Steinberg VST wrapper that essentially is a handful of calls that I need to plug code into  The biggest problem is that I need to create a GUI, which is done with draw primitives, and if Red is making 32-bit system calls to handle this part, such as opening an NSWindow, that's going to be a showstopper for me.  I will need to dig into the Red codebase to see what is going on under the hood.  ^/^/It also appears that calling a 32-bit library from a 64-bit runtime is not pretty, so I am pretty much hosed until Red jumps the gap.}
    sent: "2017-08-02T21:43:29.602Z"
    v: 1
    author: "5982323cd73408ce4f6fd8c9"
) #(
    id: "59824517bc464729744a845c"
    text: {"Believe in your dreams and they may come true; believe in yourself and they will come true." is pretty true when talking about @dockimbel  and Red :clap: }
    sent: "2017-08-02T21:33:11.274Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598243db76a757f8086cae55"
    text: {I remember also it was by far too technical for me... being used to the "simplicity" of rebol and I was really puzzled as to the feasability of this Red project by one man!}
    sent: "2017-08-02T21:27:55.681Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5982428476a757f8086ca845"
    text: {Glad to see how Red has evolved since my first contact in Lille back in 2009 (if i remember well) where we were a few people attending the first presentation of red by @dockimbel . If I remember well, there was even not a single line of code... Only concepts on powerpoint slides. Amazing!}
    sent: "2017-08-02T21:22:12.640Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598241cea7b406262d53014b"
    text: {@greggirwin, yes, sure, Rebol has been by far my most exciting experience in programming... It was amazing... and it still is... }
    sent: "2017-08-02T21:19:10.783Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59824077f5b3458e30a5d8d3"
    text: {@Syntonica, concrete examples often make things easier. If there are small pieces you can point to, where we can offer help and suggestions, you should quickly answer your big questions and see if what you want to do is possible before Red goes 64-bit.}
    sent: "2017-08-02T21:13:27.068Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59823fc3a7b406262d52fa0f"
    text: {Nenad deserves all the praise we can muster. The reactive design and implementation alone is a thing of beauty. But we all stand on the shoulder's of giants here.}
    sent: "2017-08-02T21:10:27.316Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59823f1745fc670746ecce8c"
    text: {@fvanzeveren, Red's design is amazing, no doubt. But we do have to credit Carl with the original foundation. We learned a lot from it over the years. He had a different vision than Red, and the world was different then. Rebol's View system has its flaws, but was also brilliant in many ways, and showed what was possible.}
    sent: "2017-08-02T21:07:35.879Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598238db4bcd78af560af90e"
    text: {@geekyi  I'm not too concerned about code size.  Right now, my C++, Objective-C, Objective-C++ executable is just under 1MB.  (Yes, I have to mix it all to get it done. :( ) ^/^/ I noticed Factor compile times are slow, but not a really big concern as I can debug word-by-word as I create them since I am just porting code I know works (for the most part) already.   Unfortunately, the Factor community  seems rather moribund.  Also, working with Red seems to just click with me more.}
    sent: "2017-08-02T20:40:59.401Z"
    editedAt: "2017-08-02T20:41:52.077Z"
    v: 2
    author: "5982323cd73408ce4f6fd8c9"
) #(
    id: "59823834c101bc4e3ae27462"
    text: {I admit to not making huge programs in that tho.. it was more of a scripting language, and for one off processing/calculations because that part was so easy}
    sent: "2017-08-02T20:38:12.104Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59823760329651f46ee594c1"
    text: {@Syntonica Factor came easy for me, but I'm not so satisfied by the deployed executable: the time taken and it's size.}
    sent: "2017-08-02T20:34:40.682Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598236424bcd78af560aefb0"
    text: {@geekyi Thanks!  I would be wrapping a compiled 32-bit library in a 64-bit (VST/AU) wrapper.  I know it can be done now--I'm just not sure how things will be come January.   I would assume that as long as the wrapper reported in as "Mach-O 64-bit bundle x86_64", I'd be good.  It's either this or Factor, but I'm not real keen on processing huge blocks of data off of a stack, although I'm still trying to grok that flavor of Forth and how it works.}
    sent: "2017-08-02T20:29:54.226Z"
    v: 1
    author: "5982323cd73408ce4f6fd8c9"
) #(
    id: "5982345945fc670746eca329"
    text: {@Syntonica ^/1. We're not sure when it would be 64-bit^/3. Red (which includes View) can be mixed in several ways with Red/System (including one in the other and vice versa)}
    sent: "2017-08-02T20:21:45.825Z"
    editedAt: "2017-08-02T20:22:16.415Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "598232ab614889d475128367"
    text: {Hi All, new to the Red/Rebol world and it seems ideal for my latest project which is to rewrite my DSP program so it is cross-platform.  However, there are a couple of things missing:^/^/1. With Apple going hardcore 64-bit on Jan 2018 with a dropdead in June, I obviously need 64-bit.^/2. I would like to do the hardcore math in System, but I need a way to grab arbitrary blocks of memory.  Using 2MB+ of the stack is probably not a good idea.  Arrays, vectors or just a malloc would do the trick, which leads to:^/3. How mixable is View and System? Can they coexist in the same script or do they need to be compiled separately and one imported into the other?^/^/So, how long am I going to be holding my breath?  I'm not sure if I can be of any help at this point with my coding skills in making things go faster.}
    sent: "2017-08-02T20:14:35.901Z"
    editedAt: "2017-08-02T20:20:25.486Z"
    v: 3
    author: "5982323cd73408ce4f6fd8c9"
) #(
    id: "5982325b614889d47512821d"
    text: {I have the feeling that Red/View is way better designed that Rebol/View... or is my memory at fault?}
    sent: "2017-08-02T20:13:15.628Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598231c845fc670746ec98af"
    text: {Actually, this is the only book I always kept easily accessible "in case of" :)}
    sent: "2017-08-02T20:10:48.724Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5982317b329651f46ee57af7"
    text: "Epic!"
    sent: "2017-08-02T20:09:31.205Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598231754bcd78af560adceb"
    text: {I remember those nights spent to "try and error" to understand the intricacies of Rebol/View to build custom face!}
    sent: "2017-08-02T20:09:25.952Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5982311c210ac269204ae6f3"
    text: {Hello... Just wanted to say that the GUI engine documentation on doc.red-lang.org is pretty good! I wish there was such doc back in 2002 when I started to learn Rebol... Thanks to red, I make a new use of my only rebol book: Rebol Programmation from Olivier Auverlot... 15 years and I still have all the pages in the book... even if is in pieces :) }
    sent: "2017-08-02T20:07:56.256Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59821f8ac101bc4e3ae21297"
    text: {Start of a wiki page on debugging: https://github.com/red/red/wiki/Debugging}
    sent: "2017-08-02T18:52:58.894Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "59821e03f5b3458e30a5514a"
    text: {Really nice @9214. All we need is `compress/decompress` or access to the crush lib...oh, wait, we're still smaller than everything else, without that. }
    sent: "2017-08-02T18:46:27.967Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59821313f5b3458e30a52754"
    text: {:point_up: [July 31, 2017 5:08 PM](https://gitter.im/red/red?at=597f47fe210ac269203fc6bd) @rebolek | Wonder if that could be leveraged by calling into Red/System to allocate memory and some how have a struct maker that constructs a struct `/into` existing memory...}
    sent: "2017-08-02T17:59:47.590Z"
    editedAt: "2017-08-02T18:08:00.876Z"
    v: 2
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598206c7210ac269204a3c32"
    text: {Speaking of functions... recently I bumped in a bunch of edge cases with `compiled vs. interpreted behavior`, when too dynamic code interprets fine but goes nuts *during* or *after* compilation, because current alpha version of the compiler can't handle some fancy constructs.^/^/After 3 days of headaches and sleepless nights I asked for help here and @PeterWAWood with @geekyi pointed out a "crude" solution to this problem (thanks a lot!). Here goes my attempt to automate proposed method ;) Though, it should be extended to handle multiple (and nested) "build directories".^/https://gist.github.com/9214/7f6ec82a65c2b1ff1d9b40f9d585a241}
    sent: "2017-08-02T17:07:19.481Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "598201e11c8697534a81221e"
    text: {@9214, it's a good theory. Documentation is a hard problem in FOSS. It would be *great* to learn how langs with really good docs did it. Maybe there are a few common elements we can leverage there. ^/^/We can certainly reorganize wikis and break guru notes out into full topics as well. The purpose of the sound-byte (;-)) wikis is to keep information from being lost, or repeated. I just do a little editing when adding entries there, so it goes pretty fast. But I also have a *lot* of notes on doc ideas, references to other systems that have nice aspects in them, etc. I also have a `format` function calling my name to finish its prototype and, well, you know the story. "Time is always against us."}
    sent: "2017-08-02T16:46:25.594Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5981c68f1c8697534a800b93"
    text: {The documentation is written in ASCII-doc so that it can be published on Github.}
    sent: "2017-08-02T12:33:19.069Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5981c107a7b406262d50d7ef"
    text: {it's looks like http://lecturesnet.readthedocs.io/net/requests-other.html#http-tool}
    sent: "2017-08-02T12:09:43.115Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "5981c0abc101bc4e3ae0635a"
    text: {What about writing documentation in a popular format rst (http://www.sphinx-doc.org/) and public it on https://readthedocs.org/ with CNAME doc.red-lang.org}
    sent: "2017-08-02T12:08:11.862Z"
    v: 1
    author: "534ada315e986b0712f031f4"
) #(
    id: "5981bd6f45fc670746ea96f4"
    text: {See, we have `GUI` experts and people who are very interested in graphical programming and interfaces, we have `parse` gurus and newbies who want to dabble their feets in DSL developement,  language oriented programming and parsing, C refugess interested in murky depths of `R/S` and peeps who just love to write good techical stuff and help others.}
    sent: "2017-08-02T11:54:23.277Z"
    editedAt: "2017-08-02T11:58:32.343Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5981bc1ea7b406262d50c6a5"
    text: {but this is all in theory of course, I'm not sure how practical and doable it is :confused:}
    sent: "2017-08-02T11:48:46.269Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5981bbb4210ac2692048ef85"
    text: {In my mind it is:^/* a couple of volunteers (both newbies and old gurus)^/* trusted core-members as guides/mentors who are skillful in Red/Rebol programming (both practically and conceptually) and brewed in community management^/* detailed plan coordinated with Red team^/* dedicated Gitter room with regular communication and coordination^/^/Plan is coordinated with Red team (say, "we need some overview on X, detailed technical stuff on Y and corrections in Z, perhaps reorganize wiki, etc"), mentor distributes pieces of planned work between volounteers, checks intermediate results as the work goes, reviews drafts, guides, critisizes... at the end, if everything is OK, all of the stuff goes into one centralized place (doc.red-lang.org ?)... rinse/repeat.}
    sent: "2017-08-02T11:47:00.265Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5981b8b62723db8d5e6a2724"
    text: {@9214 That's a good idea but suggests a more disciplined approach than appears to be the norm in our community given both its background and maturity. I'm not saying a more disciplined approach is bad, in fact I hope that my work on the Red tests proves the opposite.^/^/How would you see this working?}
    sent: "2017-08-02T11:34:14.230Z"
    editedAt: "2017-08-02T11:34:31.284Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5981b3fc614889d4751056b0"
    text: {Yes, I understand that Red team has commercial plans and  I'm totally OK with that, my message wasn't about GTK at all! I'm speaking from the perspective of not-so-recent community member - Redbol has a steep learning curve because it's *conceptually different* from mainstream languages and because documentation (for the most part) is scarse, undetailed and decentralized.^/^/I know that some community members are doing their part and provide articles and learning material (and I deeply appreciate that!), but their efforts are, in a vague sense, *spontaneous* and *uncoordinated* with Red team's plans. What I propose is: instead of fighting "lack of documentation" issue each by itself, perhaps these community efforts should be coordinated and guided as a collaborative initiative, while Fullstack can continue do their job?}
    sent: "2017-08-02T11:14:04.759Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5981b1e52723db8d5e6a0aa1"
    text: {I suspect the Raspberry Pi is unique amongst personal computers as its sales continue to increase. I believe the big platforms today are phones, tablets , IOT devices and the cloud. I would imagine that Fullstack see its opportunity lies more with them than more traditional computers. No doubt we'll find out in time.}
    sent: "2017-08-02T11:05:09.541Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5981b02cf5b3458e30a360c8"
    text: {The reason that I asked is that I find it difficult to see how  GTK3 support is going to help Fullstack meet it's commercial goals. As I understand, Linux has about 2 percent of the desktop market. I believe that does include a disproportionately large percentage of developers. (Who, I suspect, in the main develop either server-side software or web-based software). I would imagine that such people will be more interested in a Red web framework and Red web server than GTK3 apps.^/^/Personally, I am very keen to see the Red GTK3 backend finished as then Red will be an ideal learning tool for the Raspberry Pi. We could see a whole army of young Red programmers! I just don't know if it fits in with Fullstack's plans.}
    sent: "2017-08-02T10:57:48.590Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5981ad3f45fc670746ea512c"
    text: "@PeterWAWood yes, recently"
    sent: "2017-08-02T10:45:19.161Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5981ad124bcd78af560894c7"
    text: {@9214 Have you read the [Red Project Approach](https://github.com/red/red/wiki/Red-Project-Approach)?}
    sent: "2017-08-02T10:44:34.251Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59819a9176a757f80869e680"
    text: {I'm all for writing/organizing docs, recent feedback from HN showed that most people are turned off by:^/* absence of full blown GTK backend^/* absence of detailed technical documentation^/^/Hopefully Fullstack will find someone skilled for No. 1 (on some China GTK conference if I remember correctly?), as about No. 2... IMO it should be centralized community initiative leaded by core guru-members with puny neophytes (like myself ;P) behind their backs. Any ideas?}
    sent: "2017-08-02T09:25:37.592Z"
    editedAt: "2017-08-02T09:32:07.835Z"
    v: 5
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "598199541c8697534a7f524b"
    text: {We have https://github.com/red/red/wiki/Compiling already..}
    sent: "2017-08-02T09:20:20.514Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598198abc101bc4e3adfbfa1"
    text: {@9214 yes.. interestingly, there's quite a number of scenarios from a spectrum of *pure interpreted Red*, to *pure compiled Red/System*.^/The most interesting part is the one in between/ mix of those two}
    sent: "2017-08-02T09:17:31.609Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598197ca4bcd78af56083fe2"
    text: "compiled vs. interpreted behavior ;)"
    sent: "2017-08-02T09:13:46.369Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5981979c329651f46ee2e373"
    text: {@9214  @greggirwin I think we should slowly take out topical stuff into their own pages, while adding to Guru Meditations. Do we have enough for a Debugging page? What else?}
    sent: "2017-08-02T09:13:00.931Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598193234bcd78af560830dd"
    text: ":clap: "
    sent: "2017-08-02T08:53:55.282Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "598192f61c8697534a7f3aa2"
    text: {@9214 From top of my head, you can add to that list: `system/reactivity/debug?` and `system/preprocessor/debug?`.}
    sent: "2017-08-02T08:53:10.298Z"
    editedAt: "2017-08-02T08:53:17.404Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59818e5fa7b406262d5005c9"
    text: {:point_right: [guru meditations](https://github.com/red/red/wiki/Guru-Meditations#debugging)}
    sent: "2017-08-02T08:33:35.552Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59818dbebc4647297447806e"
    text: "also `system/state/trace`"
    sent: "2017-08-02T08:30:54.192Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59818d90614889d4750fc4ad"
    text: {if I want to deeply debug my Red application/script, which `system`/`view`/`parse`/etc flags should I use? I know about `parse/trace` and `dump-faces`, also `system/view/debug?`, but what else?}
    sent: "2017-08-02T08:30:08.383Z"
    editedAt: "2017-08-02T08:32:11.567Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5980f29e614889d4750dca63"
    text: "Thanks Mike!"
    sent: "2017-08-01T21:29:02.628Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5980f19dbc46472974457e41"
    text: "@RnBrgn  @greggirwin  @Arie-vw   Got it"
    sent: "2017-08-01T21:24:45.560Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5980e8cd329651f46ee0aa57"
    text: {@mikeparr too, as he largely maintains the site now.}
    sent: "2017-08-01T20:47:09.703Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5980d898c101bc4e3add3fe1"
    text: {@Arie-vw  Possible typo on your Red by Example site.^/`sort/skip/compare/all name-ages 2 function [a b][a/2 > b/2]`^/should be^/`sort/skip/compare/all names2 2 function [a b][a/2 > b/2]`^/}
    sent: "2017-08-01T19:38:00.441Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5980b61e329651f46edfd192"
    text: "@korstoilija you're welcome."
    sent: "2017-08-01T17:10:54.594Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5980b601329651f46edfd13b"
    text: "Than you very much :)"
    sent: "2017-08-01T17:10:25.043Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "5980b0baa7b406262d4cdded"
    text: {Scripts to meditate on while learning:^/* [`red/community`](https://github.com/red/community)^/* [`red/code`](https://github.com/red/code)}
    sent: "2017-08-01T16:47:54.768Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5980afa64bcd78af5604fce9"
    text: {Assuming you want to make games, `VID`, `Draw` and `View` are most important topics (with dedicated [`red/gui-branch`](https://gitter.im/red/red/gui-branch) room).}
    sent: "2017-08-01T16:43:18.845Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5980af27a7b406262d4cd6ce"
    text: {@korstoilija hey there, welcome! For starters:^/* [Rebol/Core user guide](http://www.rebol.com/docs/core23/rebolcore.html) (as Red is heavily influenced by Rebol)^/* [Red documentation](https://doc.red-lang.org/) (under heavy construction)^/* [Red by example](http://www.red-by-example.org/)^/^/Start small, fire up the REPL and play around with basic code examples. Once stuck, ask any questions in [`red/help`](https://gitter.im/red/help) or [`red/welcome`](https://gitter.im/red/welcome) rooms.}
    sent: "2017-08-01T16:41:11.775Z"
    editedAt: "2017-08-01T16:41:30.658Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5980abdb4bcd78af5604ec35"
    text: {Well I am just starting with black jack and move on from that... But still it would be my first coding project and I am super stoked :)}
    sent: "2017-08-01T16:27:07.865Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "5980aba01c8697534a7bee57"
    text: {I dig the language and feel like it might be good one to just get shit done which is something I have had bit of a problem with}
    sent: "2017-08-01T16:26:08.073Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "5980ab5845fc670746e6952e"
    text: {I wanna make some games in red, anything I should know before?}
    sent: "2017-08-01T16:24:56.151Z"
    v: 1
    author: "597da5eed73408ce4f6f567a"
) #(
    id: "59807b82614889d4750bb12b"
    text: {Javascript and Lua avoid this altogether by not defining integers :smile: tho, it leads to other problems..}
    sent: "2017-08-01T13:00:50.163Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59807233f5b3458e309ea3f3"
    text: {@fvanzeveren I believe that NaN and ±Infinity are part of the IEEE-754 standard for floating point numbers. Their format is defined within the standard.^/^/As far as I know, there is no standard that defines NaN or ±Infinity for integer values.^/}
    sent: "2017-08-01T12:21:07.486Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5980705c76a757f808656874"
    text: "and 2/0 then should also be 1.#INF"
    sent: "2017-08-01T12:13:16.539Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59807033614889d4750b7334"
    text: "@PeterWAWood  agree!^/"
    sent: "2017-08-01T12:12:35.557Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598070034bcd78af5603d084"
    text: {> And definitely 0.0 / 0.0 --> 1.#INF is wrong, because it is undefined!^/^/I think that 0.0 / 0.0 should -> 1.#NAN.}
    sent: "2017-08-01T12:11:47.131Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59806c362723db8d5e6529a7"
    text: {Yours is probably a difference between `integer` vs `float`}
    sent: "2017-08-01T11:55:34.373Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59806c061c8697534a7ac7b2"
    text: {@fvanzeveren maybe related https://github.com/red/red/issues/2244}
    sent: "2017-08-01T11:54:46.100Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598069fb329651f46ede6d9a"
    text: {And definitely 0.0 / 0.0 --> 1.#INF is wrong, because it is undefined!}
    sent: "2017-08-01T11:46:03.376Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "598069d7a7b406262d4b9bf2"
    text: "I think 2.0 / 0.0 should generate an error too..."
    sent: "2017-08-01T11:45:27.416Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59806988210ac2692043e7b8"
    text: "thank you"
    sent: "2017-08-01T11:44:08.089Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "59806980bc46472974430dd6"
    text: "while 2/0 generate a zero-divide error."
    sent: "2017-08-01T11:44:00.949Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "5980696cc101bc4e3adb4118"
    text: { Hello, could someone explain me this:^/2.0 / 0.0 --> 1.#INF^/}
    sent: "2017-08-01T11:43:40.249Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
)#(
    id: "597f90cff5b3458e309b6b8e"
    text: "@SoleSoul This time not :)"
    sent: "2017-07-31T20:19:27.317Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f8f9545fc670746e25474"
    text: "Not a bad idea. I'm excited to try it."
    sent: "2017-07-31T20:14:13.149Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "597f8f53210ac2692040fd38"
    text: {Sounds good. Do it in Java, then check back and when Red's Android is ready, do it again, compare, and give a report.}
    sent: "2017-07-31T20:13:07.205Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597f8ef345fc670746e25214"
    text: {@greggirwin The 'android' branch on GitHub is two years old, but never mind. I was just checking the status. I'll write this app in Java, maybe the next one will be my next Red lesson.}
    sent: "2017-07-31T20:11:31.567Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "597f8df9bc464729744003c0"
    text: {Shouldn't be too long. They have a solid foundation and some experimental work already done.  You could check out the android branch to see what's there.}
    sent: "2017-07-31T20:07:21.263Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597f8da0bc464729744002f1"
    text: "Hoping is free :)"
    sent: "2017-07-31T20:05:52.514Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "597f8d8d76a757f808623d20"
    text: {I thought I read between the lines that Android works already}
    sent: "2017-07-31T20:05:33.383Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "597f8d7f4bcd78af56009463"
    text: {I was hoping I could run with the latest automated build. Thanks. I'll wait.}
    sent: "2017-07-31T20:05:19.647Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "597f8d7976a757f808623ca7"
    text: {Give them a *little* time. MacOS GUI release just came out. ;^^)}
    sent: "2017-07-31T20:05:13.603Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597f8ccf210ac2692040efcb"
    text: {@rebolek So no "nightly already includes all of the next version's features" this time? :P}
    sent: "2017-07-31T20:02:23.707Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "597f8c14a7b406262d488fff"
    text: {@SoleSoul You would need to wait for next version of Red, that should update Android GUI. }
    sent: "2017-07-31T19:59:16.640Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f8a2a1c8697534a779a86"
    text: {Hey. I have a simple Android project I started. I thought, why not write it in Red and learn some Red on the way? It's a really simple application, a list of text items, that when touched, each one plays a different audio file. Is Red in its current state good for this exercise? If so, where can I see a simple guide or example to start from?}
    sent: "2017-07-31T19:51:06.858Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "597f6e5d45fc670746e1ce4f"
    text: {And, yes, it's also a play on "Red Users".}
    sent: "2017-07-31T17:52:29.333Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597f6e40bc464729743f7dbe"
    text: {@Enamex, We have Rebolers, Pythonistas, Perl Mongers, Rubyists, and more. For Red, there is more than one meaning in "to reduce", and fits nicely. Plus, we haven't come up with a better name for ourselves yet, than Reducers.}
    sent: "2017-07-31T17:52:00.532Z"
    editedAt: "2017-07-31T17:52:55.987Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597f6d8fbc464729743f7b3f"
    text: "It is just my usual consistency hangup..."
    sent: "2017-07-31T17:49:03.119Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "597f6d384bcd78af560018cf"
    text: {Is there any reason why `as-color` accepts arguments larger than 255 (taking them modulo 256) and `as-rgba` does not?}
    sent: "2017-07-31T17:47:36.919Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "597f662845fc670746e1ad75"
    text: {"Reducing"^/There's a reference hidden here :hmm:}
    sent: "2017-07-31T17:17:28.827Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "597f56181c8697534a76b9f3"
    text: {Since we have a number of new people joining recently, just a quick comment on Red's state. As @rebolek said, GC is coming, and you can see more roadmap details on Trello. Red is currently still considered Alpha, but it's easy to think of it as more "mature" because of its stability and the advanced features in many areas (e.g. reactive GUIs). There is a sound plan and reasoning behind the order of development and priorities. There are a few notes in https://github.com/red/red/wiki/Red-Project-Approach on that.^/^/If you are new here, welcome, and don't be shy. You will have the same questions a lot of others have had, and will surely learn a lot by playing with Red. The team is closing a lot of tickets right now, in preparation for the next release push. If you think you found a bug, post a message. Others will jump in to confirm, and then you can file a ticket (Yay!). If you have WISH tickets, again, post here and get some feedback before filing them. Processing tickets and issues is a lot of work, even just reviewing them.^/^/Happy Reducing!}
    sent: "2017-07-31T16:08:56.514Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597f521fc101bc4e3ad752ee"
    text: {@geekyi No it won't *currently*. Once GC is implemented, it will.}
    sent: "2017-07-31T15:51:59.959Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f51ef4bcd78af56ff99cb"
    text: {In rebol, the analogue for `free` is `recycle`, which is [to be implemented](https://trello.com/c/jcA3eEcs/52-memory-management) in red}
    sent: "2017-07-31T15:51:11.988Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597f51ea76a757f808612db5"
    text: {@Enamex  @rebolek would using `clear` free memory? I should probably test with `stats`..}
    sent: "2017-07-31T15:51:06.269Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597f4829614889d475072622"
    text: {But manual memory management is not possible in Red at all (and won’t be even with GC).}
    sent: "2017-07-31T15:09:29.582Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f47fe210ac269203fc6bd"
    text: {@Enamex In Red/System, you can manage the memory manually, allocate it and release it.}
    sent: "2017-07-31T15:08:46.424Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f47c52723db8d5e60e8c4"
    text: {@rebolek Ooh o.o Well, is there a way to manually invoke `free`-like?^/It doesn't even look right when I'm imagining it...}
    sent: "2017-07-31T15:07:49.038Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "597f46b94bcd78af56ff6579"
    text: {@Enamex That's not an assumption, that's a fact ;) There will be basic GC soon with better GC later. Right now you can limit memory usage with proper coding techniques.}
    sent: "2017-07-31T15:03:21.008Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f4641f5b3458e309a2c68"
    text: {What's the story of memory management so far? It _seems_ everything just leaks but I don't want to make assumptions...^/Red 0.6.3 master.}
    sent: "2017-07-31T15:01:21.486Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "597f3b94bc464729743e9d03"
    text: "You're welcome. :smile: "
    sent: "2017-07-31T14:15:48.300Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "597f16bb4bcd78af56fe9f98"
    text: "Oh, red/red@b4fae16 !! Thanks @qtxie "
    sent: "2017-07-31T11:38:35.671Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597f147bc101bc4e3ad648b8"
    text: "I should test with sierra "
    sent: "2017-07-31T11:28:59.191Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597f146a2723db8d5e600670"
    text: "@dockimbel I will, I'm doing that regularly ;)"
    sent: "2017-07-31T11:28:42.572Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f144b614889d4750643c4"
    text: "red is 6 3"
    sent: "2017-07-31T11:28:11.846Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597f143a210ac269203ef6a2"
    text: "not sure : red -c -t macos foobar.red"
    sent: "2017-07-31T11:27:54.020Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597f140da7b406262d469758"
    text: {@rebolek You can thank @qtxie for the hard work. ;-)}
    sent: "2017-07-31T11:27:09.854Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597f13d4bc464729743dfd35"
    text: {@dockimbel I've noticed the commit on IRC and appreciate it. Now I have to update my Github, Gitter and other APIs :D}
    sent: "2017-07-31T11:26:12.073Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f13c8210ac269203ef468"
    text: {@tmpbci Do you use the 0.6.3 or automatic build one?}
    sent: "2017-07-31T11:26:00.624Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "597f1375329651f46ed99326"
    text: "that's cool! Worth a tweet probably :-)"
    sent: "2017-07-31T11:24:37.577Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "597f1321a7b406262d469510"
    text: {FYI, all HTTP verbs are now supported! I guess that should help accessing REST APIs.}
    sent: "2017-07-31T11:23:13.934Z"
    editedAt: "2017-07-31T11:23:26.898Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597f130fa7b406262d4694bc"
    text: "@qtxie ^^---"
    sent: "2017-07-31T11:22:55.102Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597f129ca7b406262d469384"
    text: {31/07/17 13:18:27,542 loginwindow[91]: ERROR | -[PersistentAppsSupport saveLogoutPersistentState:finalSnapshot:] | Attempt to insert app with NULL bundle ID^/}
    sent: "2017-07-31T11:21:00.177Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597f129645fc670746e03677"
    text: {after compiling with the mac app target, launching a GUI red stuff doesn't work  }
    sent: "2017-07-31T11:20:54.563Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597efbf1329651f46ed940e7"
    text: {@greggirwin  Thx for posting. Very, very nice indeed!}
    sent: "2017-07-31T09:44:17.464Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597ee7844bcd78af56fdf998"
    text: "@dockimbel ok,thank you "
    sent: "2017-07-31T08:17:08.872Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597ee7514bcd78af56fdf8bb"
    text: {@mahengyang `hash!` is not a Set, duplicate values are allowed (as in blocks).}
    sent: "2017-07-31T08:16:17.348Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597ee42a614889d4750586e9"
    text: "ok, map! is HashMap in java^/hash! is Set in java"
    sent: "2017-07-31T08:02:50.013Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597ee3e41c8697534a74e5fc"
    text: {@mahengyang A `hash!` is conceptually a `block!` with an index of all items to make searching faster. This [Rebol document](http://www.rebol.com/docs/core23/rebolcore-16.html#section-2.5) explains more.^/^/A 'map!` has key:value pairs.}
    sent: "2017-07-31T08:01:40.424Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ee2e6c101bc4e3ad5928e"
    text: "hash! is not eqaul to hashmap"
    sent: "2017-07-31T07:57:26.522Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597ee277c101bc4e3ad590ec"
    text: {You can use a string, `a`, for the key value but then you cannot use the `numbers/a` syntax.^/```text^/>> g: "a"              ^/== "a"^/>> num: 2^/== 2^/>> numbers: make map! reduce [g num]^/== #(^/    "a" 2^/)^/>> numbers/"a"^/*** Syntax Error: invalid path! at {numbers/"a"}^/*** Where: do^/*** Stack: load ^/>> select numbers "a"^/== 2^/```}
    sent: "2017-07-31T07:55:35.840Z"
    editedAt: "2017-07-31T07:55:51.213Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ee1efa7b406262d45dbfc"
    text: {@mahengyang All values are hashed in a `hash!`, it does not have key:value pairs. A `map!` does:^/```text^/>> g: 'a              ; use a lit-word not a string^/== a^/>> num: 2^/== 2^/>> numbers: make map! reduce [g num]^/== #(^/    a: 2^/)^/>> numbers/a^/== 2^/>> print numbers^/a: 2^/```}
    sent: "2017-07-31T07:53:19.791Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ee1eda7b406262d45dbf6"
    text: {yep there is part from lisp language. quotation is an powerfull feature, but not easy one}
    sent: "2017-07-31T07:53:17.163Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "597ee159bc464729743d3989"
    text: {ok, thank you, i am new to red lang, i had write java/ruby/lisp before, even red seems more simple, but i still feel not good}
    sent: "2017-07-31T07:50:49.981Z"
    editedAt: "2017-07-31T07:51:00.426Z"
    v: 2
    author: "57ccd27f40f3a6eec0637c58"
)#(
    id: "597ee0d776a757f8085f6b4e"
    text: {@mahengyang you have a block of words, and 'reduce will return same block with evaluated items}
    sent: "2017-07-31T07:48:39.276Z"
    editedAt: "2017-07-31T07:49:24.008Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "597ee0a6329651f46ed8df13"
    text: "i just want put a pair “a”-> 2 into a hash"
    sent: "2017-07-31T07:47:50.022Z"
    editedAt: "2017-07-31T07:48:06.557Z"
    v: 2
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597ee0a345fc670746df828b"
    text: {It is different from Rebol:^/```text^/>> g: "a"^/== "a"^/>> num: 2^/== 2^/>> numbers: to block! [g num]^/== [g num]^/>> print numbers^/a 2^/```}
    sent: "2017-07-31T07:47:47.878Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ee082329651f46ed8de59"
    text: "why need reduce the list"
    sent: "2017-07-31T07:47:14.648Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597ee06d4bcd78af56fddd39"
    text: "but seems a little strange~"
    sent: "2017-07-31T07:46:53.423Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597ee04fa7b406262d45d3dc"
    text: "good work~"
    sent: "2017-07-31T07:46:23.967Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597ee02a76a757f8085f693a"
    text: {@mahengyang It does :)^/```^/>> g: "a"^/== "a"^/>> num: 2^/== 2^/>> numbers: make hash! reduce [g num]^/== make hash! ["a" 2]^/>> print numbers^/a 2^/```}
    sent: "2017-07-31T07:45:46.769Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597ee011f5b3458e30988c62"
    text: "@honix it does not work"
    sent: "2017-07-31T07:45:21.579Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597edfa42723db8d5e5f39a1"
    text: {@mahengyang ```numbers: make hash! reduce [g num]```}
    sent: "2017-07-31T07:43:32.616Z"
    editedAt: "2017-07-31T07:45:43.134Z"
    v: 3
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "597edec5a7b406262d45cd02"
    text: {how to print a hash map?^/```^/g: “a”^/num: 2^/numbers: make hash! [g num]^/print numbers^/```^/this will print `[g num]` not [“a” 2]}
    sent: "2017-07-31T07:39:49.741Z"
    editedAt: "2017-07-31T07:40:06.933Z"
    v: 2
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597eac76bc464729743c9af9"
    text: {@tmpbci Bienvenue !  In case you prefer it, there is also a [red/France](https://gitter.im/red/red/France) room here, though less active than this one.}
    sent: "2017-07-31T04:05:10.935Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597e9d57c101bc4e3ad4bdc8"
    text: {@greggirwin I can see myself using this a lot. Thanks for posting it!}
    sent: "2017-07-31T03:00:39.239Z"
    editedAt: "2017-07-31T03:00:55.574Z"
    v: 2
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "597e8ca81c8697534a73e1ca"
    text: {@Arie-vw @dander  @rebolek, I cleaned up my old object browser, but removed the Find code for now, as it was terrible. I didn't redesign the access model, which could probably be much nicer, but this gives us something to play with: https://gist.github.com/greggirwin/91dc1c3971998e0babeedba9f7e60bc5}
    sent: "2017-07-31T01:49:28.909Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e5ee8a7b406262d447315"
    text: {Red's GUI system isn't 100% compatible, but most changes aren't too hard. There's no effect pipeline in place yet, though.}
    sent: "2017-07-30T22:34:16.139Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e5ea776a757f8085df829"
    text: "ooops french"
    sent: "2017-07-30T22:33:11.924Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e5e232723db8d5e5ddbb8"
    text: "c'etait dans backdrop effect"
    sent: "2017-07-30T22:30:59.648Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e5c5e2723db8d5e5dd744"
    text: "maybe there is no gradient.."
    sent: "2017-07-30T22:23:26.383Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e5c57a7b406262d446d03"
    text: {Script Error: VID - invalid syntax at: [[gradient 1x1 0.0.0 50.50.50] at 170x10]}
    sent: "2017-07-30T22:23:19.298Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e5beb4bcd78af56fc720a"
    text: {so thanks for the link need to change some rebol program apparently}
    sent: "2017-07-30T22:21:31.467Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e5b3f45fc670746de16f0"
    text: ":)"
    sent: "2017-07-30T22:18:39.124Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e5b152723db8d5e5dd3ad"
    text: "very very old"
    sent: "2017-07-30T22:17:57.018Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e5b042723db8d5e5dd38a"
    text: "I'm old to rebol"
    sent: "2017-07-30T22:17:40.679Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e533ca7b406262d445440"
    text: {We also have https://gitter.im/red/red/gui-branch for more specific GUI chat.}
    sent: "2017-07-30T21:44:28.944Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e53161c8697534a734cc3"
    text: {@tmpbci, if you're new to Red, you can check out https://github.com/red/code for GUI examples. They should all work, but playing may reveal hidden regressions. From there you can look at https://doc.red-lang.org/en/gui.html, https://doc.red-lang.org/en/reactivity.html and, of course, old blog entries.}
    sent: "2017-07-30T21:43:50.304Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e4fbf76a757f8085dd276"
    text: ":)"
    sent: "2017-07-30T21:29:35.288Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e4f9a2723db8d5e5db177"
    text: "There's always need for testing :)"
    sent: "2017-07-30T21:28:58.658Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e4f7976a757f8085dd1c4"
    text: "any need for testing ?"
    sent: "2017-07-30T21:28:25.404Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e4f6e1c8697534a7343db"
    text: "just saw the GUI for Os x"
    sent: "2017-07-30T21:28:14.746Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e4f534bcd78af56fc4d7b"
    text: "Hi @tmpbci "
    sent: "2017-07-30T21:27:47.279Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e4f39329651f46ed75160"
    text: "hi there"
    sent: "2017-07-30T21:27:21.006Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "597e2379f5b3458e3096643f"
    text: {thanks @greggirwin ! https://github.com/red/red/issues/2946}
    sent: "2017-07-30T18:20:41.516Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597e20e7614889d47503494c"
    text: {```^/replace: func [^/    "Replaces values in a series, in place" ^/    series [series!] "The series to be modified" ^/    pattern "Specific value or parse rule pattern to match" ^/    value "New value, replaces pattern in the series" ^/    /all "Replace all occurrences, not just the first" ^/    /deep "Replace pattern in all sub-lists as well" ^/    /local p rule s e many? len pos^/][^/    if system/words/all [deep any-list? series] [^/        pattern: to block! either word? p: pattern [to lit-word! pattern] [pattern] ^/        parse series rule: [^/            some [^/                s: pattern e: (^/                    s: change/part s value e ^/                    unless all [return series]^/                ) :s ^/                | ahead block! into rule | skip^/            ]^/        ] ^/        return series^/    ] ^/    if system/words/all [char? :pattern any-string? series] [^/        pattern: form pattern^/    ] ^/    many?: any [system/words/all [series? :pattern any-string? series] ^/        binary? series system/words/all [any-list? series any-list? :pattern]^/    ] ^/    len: either many? [length? pattern] [1] ^/    either all [^/        pos: series ^/        either many? [^/            while [pos: find pos pattern] [remove/part pos len ^/                pos: insert pos value^/            ]^/        ] [^/            while [pos: find pos :pattern] [^/                pos: change pos value^/            ]^/        ]^/    ] [^/        if pos: find series :pattern [^/            remove/part pos len ^/            insert pos value^/        ]^/    ] ^/    series^/]^/^/replace/deep/all ["#inlude %foo.red" #include %foo.red] [#include file!] []^/^/```}
    sent: "2017-07-30T18:09:43.050Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e20e0a7b406262d43b855"
    text: "Quick patch, but report that it should be fixed."
    sent: "2017-07-30T18:09:36.676Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e20954bcd78af56fbbd67"
    text: "@9214 I think you should report is as a bug."
    sent: "2017-07-30T18:08:21.339Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e204a614889d4750346ea"
    text: "what should I do, tweak my pattern somehow or ..?"
    sent: "2017-07-30T18:07:06.301Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597e1fbff5b3458e30965a64"
    text: {using `into` without first checking type with `ahead` is a recipe for disaster ;)}
    sent: "2017-07-30T18:04:47.314Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e1efbf5b3458e309657f2"
    text: {Ahhh, because `into` is used, and your first string causes it to go "into" that string as the input, in the recursive rule call.}
    sent: "2017-07-30T18:01:31.156Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e1deda7b406262d43b00b"
    text: {that's only with `/deep` refinement, but without it I can't use `parse` rule as a pattern}
    sent: "2017-07-30T17:57:01.926Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597e1d31329651f46ed6b887"
    text: {:confused:^/```text^/>> replace/deep/all ["#inlude %foo.red" #include %foo.red] [#include file!] []^/*** Script Error: PARSE - input must be of any-block! type: "#inlude %foo.red"^/*** Where: parse^/*** Stack: replace  ^/```}
    sent: "2017-07-30T17:53:53.141Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597e1bd6c101bc4e3ad35886"
    text: {May be a first draft of the feature. trying to avoid another refinement. Not sure we can avoid that, though.}
    sent: "2017-07-30T17:48:06.742Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e1aff329651f46ed6b28d"
    text: "gonna download latest release then ;)"
    sent: "2017-07-30T17:44:31.695Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597e1ad3f5b3458e30964aaf"
    text: {Looks like you need to use `/deep` for that feature.}
    sent: "2017-07-30T17:43:47.333Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e1a52c101bc4e3ad35406"
    text: {or maybe someone can give me a cue on how to remove all `#include <file>` directives from file with `parse` (`red/parse` room ftw!)}
    sent: "2017-07-30T17:41:38.301Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597e19a6614889d4750335ad"
    text: {@dockimbel recently you said that `replace` can support `parse` rule for its `pattern` argument, but I can't figure out why this one doesn't work :(^/```text^/>> replace [#include %foo.red] [#include file!] "nope"^/== [#include %foo.red]^/```^/does it mean that I can `replace` values only one-by-one (e.g. first `replace <series> #include ...` then `replace <series> file! ...`) ?}
    sent: "2017-07-30T17:38:46.636Z"
    editedAt: "2017-07-30T17:39:10.572Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597dfd074bcd78af56fb4923"
    text: {@Arie-vw, yes, I will absolutely put it out there once it's cleaned up a little. Anamonitor won't run for me here, but I remember the UI model was just different. Romano always did great work, so maybe someone will port that as well.}
    sent: "2017-07-30T15:36:39.599Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597dfcce614889d47502d0d9"
    text: {@feetdust, congratulations! Combining Red, Red/System, and imports. Here's your 3-stack badge. :star2:  :star2:  :star2:   (we need stack emojis)}
    sent: "2017-07-30T15:35:42.799Z"
    editedAt: "2017-07-30T15:37:11.587Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597df760c101bc4e3ad2e50d"
    text: {@fvanzeveren Yes. I mentioned anamonitor earlier in the conversation.}
    sent: "2017-07-30T15:12:32.356Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597deabd4bcd78af56fb1114"
    text: {@greggirwin Very nice! Maybe you can put it somewhere on the web when it is ready? }
    sent: "2017-07-30T14:18:37.557Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597da76f76a757f8085bc862"
    text: {@greggirwin as @Oldes suggested, after grepping thru the red source,^/was able to guess some useful pieces of code, did give it a try and^/seems to work, thanks guys, thats it for now.^/^/Code follows:^/```^/Red []^/^/#system [^/    #import [^/        "libc.so.6" cdecl [^/            _cfn: "canonicalize_file_name" [^/                path [c-string!]^/                return: [c-string!]^/            ]^/        ]^/    ]^/]^/^/cfn: routine [^/    path [string!]^/    cn-path [string!]^/    /local^/    _cn-path [c-string!]^/] [^/    _cn-path: _cfn as c-string! string/rs-head path^/    string/concatenate-literal cn-path _cn-path^/]^/^/cn-path: copy ""^/cfn "/sys/class/net/enp4s0" cn-path^/print ["cfn: " cn-path]^/```}
    sent: "2017-07-30T09:31:27.148Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597da760210ac269203a90b1"
    text: {> You can look at some red files inside red/code git repository under library folder.^/}
    sent: "2017-07-30T09:31:12.579Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
)#(
    id: "597d9d4945fc670746dbcf31"
    text: "@fvanzeveren You're welcome."
    sent: "2017-07-30T08:48:09.850Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597d9b8d45fc670746dbcb52"
    text: "@rebolek Thank you"
    sent: "2017-07-30T08:40:45.286Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "597d857cc101bc4e3ad19107"
    text: {@fvanzeveren see https://github.com/red/red/wiki/Using-Red-as-CGI}
    sent: "2017-07-30T07:06:36.287Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597d822bbc46472974393097"
    text: "very cool, @greggirwin!"
    sent: "2017-07-30T06:52:27.386Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "597d8147bc46472974392e9c"
    text: {Thanks! Good to know! Is there some tutorials out there... or does the rebol documentation still apply?}
    sent: "2017-07-30T06:48:39.410Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "597d80c52723db8d5e5b5a75"
    text: {Yes, it is. @rebolek did some tests with CGI and have some supporting functions implemented ....}
    sent: "2017-07-30T06:46:29.745Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "597d8014bc46472974392b2a"
    text: {Hi all, I am wondering if, like it was (and still is) the case with Rebol, is it possible to use Red in CGI mode? Thank you.}
    sent: "2017-07-30T06:43:32.534Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "597d7b18614889d4750162e2"
    text: {@PeterWAWood do you mean anamonitor.r from Romano, available here: http://www.rebol.org/view-script.r?script=anamonitor.r ?}
    sent: "2017-07-30T06:22:16.228Z"
    v: 1
    author: "56fb821085d51f252abb8e12"
) #(
    id: "597d232445fc670746daaec8"
    text: {@Arie-vw  ^/> @PeterWAWood I am thinking of creating a little tool to inspect the system object visibly. Do you know if there is already one? As far as I can remember Romano wrote one for Rebol a long time ago.^/^/I don't know of anything like that for Red yet Arie. It seems Gregg is working on one :-)}
    sent: "2017-07-30T00:07:00.085Z"
    editedAt: "2017-07-30T00:10:50.377Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597d16214bcd78af56f8cf0f"
    text: "Nice!"
    sent: "2017-07-29T23:11:29.178Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597d149cf5b3458e309388ee"
    text: {[![obj-browser.gif](https://files.gitter.im/red/red/mlWn/thumb/obj-browser.gif)](https://files.gitter.im/red/red/mlWn/obj-browser.gif)}
    sent: "2017-07-29T23:05:00.218Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597d1271f5b3458e309383dc"
    text: {:point_up: [July 29, 2017 6:18 AM](https://gitter.im/red/red?at=597c7d28bc46472974366f21) @Arie-vw, I pulled up my old system/object viewer and started hacking at it a bit. Quite surprising how quickly I got the basics working under Red. Go Team Red! Having the `/options/style` facet available in Red now helped a lot, as the old code used the style of a face. A lot of other things were just removing code, showing faces manually, updating line-lists in text-list faces, etc. Stuff that Red does automatically.^/^/It was written in 2001, when I was just a Rebol noob, so there are some things I would like to clean up a bit before putting it out there. Ping me if you don't see it in a week, or if you want an early preview. ^/^/Every day I love Red all over again. }
    sent: "2017-07-29T22:55:45.233Z"
    editedAt: "2017-07-29T22:56:24.778Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cee85614889d475000ab5"
    text: {Needs to be updated, but here's an old list of rooms: https://github.com/red/red/wiki/Gitter-Room-Index}
    sent: "2017-07-29T20:22:29.905Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cea9f1c8697534a6f5701"
    text: {:point_up: [July 29, 2017 6:01 PM](https://gitter.im/red/red?at=597cb143bc46472974370585)^/Ah. Didn't know that existed o.o;}
    sent: "2017-07-29T20:05:51.789Z"
    editedAt: "2017-07-29T20:06:31.928Z"
    v: 2
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "597cd82e45fc670746d9ddfb"
    text: {@meijeru, per #2690, I started https://github.com/red/red/wiki/File-Dir-Path-related-functions so we could document intent and behavior more clearly for file related functions. The See Below funcs are those I think need more detailed coverage. We can also include examples and more. Feel free to make suggestions or edit.}
    sent: "2017-07-29T18:47:10.792Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cd1a176a757f8085994ad"
    text: {You can look at some red files inside red/code git repository under library folder.}
    sent: "2017-07-29T18:19:13.084Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "597cd149614889d475ffb1fa"
    text: {@feetdust sorry.. I'm only on mobile so it is hard to write code... but simply in your red file use `#system [ some red/system code here like the one you already have ]` and than define routine to call function from the system layer.}
    sent: "2017-07-29T18:17:45.917Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "597cd021614889d475ffada2"
    text: {There are some search functions, like `gfind` and others.}
    sent: "2017-07-29T18:12:49.749Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597cc97f1c8697534a6ef395"
    text: {To use Gritter and its tools, you need to get Gitter token at http://api.gitter.im - press `Sign in` in top right corner and copy the token to Red console. Something like `token: #abcd1234...`}
    sent: "2017-07-29T17:44:31.601Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597cc918210ac26920384fe0"
    text: {There is a function `download-all-messages` that will download all messages in given room. I suggest using `/compact` refinement to save space and also prevent possible Red crashes.}
    sent: "2017-07-29T17:42:48.235Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597cc8c1329651f46ed31324"
    text: {As Greg said, take a look at Gritter - https://github.com/rebolek/gritter, especially `%gritter-tools.red`}
    sent: "2017-07-29T17:41:21.516Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597cc88b210ac26920384dff"
    text: "@Rebol2Red I'm here again, sorry for the delay."
    sent: "2017-07-29T17:40:27.230Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597cc85045fc670746d9b097"
    text: "@greggirwin :)"
    sent: "2017-07-29T17:39:28.379Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597cc2c1210ac26920383e0e"
    text: {@greggirwin I hope he does. @rebolek Please, jump in.}
    sent: "2017-07-29T17:15:45.265Z"
    editedAt: "2017-07-29T17:16:02.803Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "597cb5f6c101bc4e3acf6ad2"
    text: "Thanks for the replies @greggirwin  "
    sent: "2017-07-29T16:21:10.524Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597cb4654bcd78af56f7bdca"
    text: {@feetdust, FFI in plain Red will come in the near future. For now you need to use Red/System for externals. Should be some examples in https://gitter.im/red/red/system, though a lot of struct chat is most recent. }
    sent: "2017-07-29T16:14:29.504Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cb2ad2723db8d5e59459e"
    text: {@PeterWAWood  has an example here :point_up: [July 28, 2017 10:22 AM](https://gitter.im/red/red?at=597ac325f5b3458e308c1841)  but I would like to call a  routine instead of accessing a variable. }
    sent: "2017-07-29T16:07:09.953Z"
    editedAt: "2017-07-29T16:07:25.048Z"
    v: 2
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597cb1b54bcd78af56f7b4e0"
    text: {about this :point_up: [July 28, 2017 5:22 PM](https://gitter.im/red/red?at=597b25904bcd78af56f2c9b5)  @Oldes  mentioned  here :point_up: [July 28, 2017 5:42 PM](https://gitter.im/red/red?at=597b2a1c614889d475fa6b23) a way to do it in plain Red ! Guys an example code would be nice. }
    sent: "2017-07-29T16:03:01.036Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597cb143bc46472974370585"
    text: {@Enamex  This is probably a question which would be better addressed in the Help room of this chat. I don't have any official documentation for Red, but there are a number of examples and resources available online for Rebol. I will post some links in the Help room. [Update: done.]}
    sent: "2017-07-29T16:01:07.083Z"
    editedAt: "2017-07-29T16:05:26.739Z"
    v: 2
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597cb08e2723db8d5e593f22"
    text: {@Enamex Also, have a look at the "What about DSL support?" section in the [Introducing Parse](http://www.red-lang.org/2013/11/041-introducing-parse.html) article. You can start from the short example there and modify it to experiment with your own DSL.}
    sent: "2017-07-29T15:58:06.150Z"
    editedAt: "2017-07-29T15:58:50.546Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597cafd54bcd78af56f7aeb1"
    text: "@feetdust, thanks for checking."
    sent: "2017-07-29T15:55:01.232Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597caf9476a757f808593219"
    text: {@Rebol2Red, maybe @Rebolek will jump in and point you to Gritter, with notes on how to use it to download an entire room's history. Gitter is not very good for that.}
    sent: "2017-07-29T15:53:56.664Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597caf331c8697534a6ea448"
    text: {If you've never designed a language before, start *very* small. Just write a little function that takes a `block!` arg and parse that. A simple example is a command dispatcher, so you don't need to maintain state or handle nested rules. }
    sent: "2017-07-29T15:52:19.129Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597caed7f5b3458e309265fd"
    text: {:point_up: [July 29, 2017 7:32 AM](https://gitter.im/red/red?at=597c8e644bcd78af56f7415f) @Enamex, there are no docs for DSL design and implementation at this point, but `parse` is what you're going to use. Macros are not needed at all for building DSLs. See https://github.com/red/red/wiki/Macro-Notes for a few notes on them.}
    sent: "2017-07-29T15:50:47.660Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cae59bc4647297436fd0b"
    text: {:point_up: [July 29, 2017 6:18 AM](https://gitter.im/red/red?at=597c7d28bc46472974366f21) @Arie-vw, I have an old one I did with Ammon Johnson. Might be some work to dust off, but I'll take a look.}
    sent: "2017-07-29T15:48:41.077Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cabc845fc670746d95ce4"
    text: {Shouldn't be hard to add `/deep` to them, but need to think about how results will be used. That is, we may want to provide a handler callback that knows results will be nested as well. You'll have to get back a combination of integer offsets as well as sub blocks with integer offsets.}
    sent: "2017-07-29T15:37:44.215Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cab3c4bcd78af56f79e7b"
    text: {My `find` funcs tend to have one of two features. `find-if`, where you can apply rules as tests, and `find-all`, where you can get all occurrences in one call.}
    sent: "2017-07-29T15:35:24.496Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597caad176a757f8085921e9"
    text: {```^/e.g.: :comment^/collect-values: func [^/^-"Collect values in a block, by datatype or custom parse rule"^/^-block [block!]^/^-rule  "Datatype, prototype value, or parse rule"^/^-/deep "Include nested blocks"^/][^/^-rule: switch/default type?/word rule [^/^-^-datatype! block! typeset! [rule]^-^-^-; Blocks and typesets (e.g. any-word!) work directly as rules.^/^-][ reduce [type? rule] ]^-^-^-^-^-^-; Turn a prototype value into a rule for that value's type.^/^/^-; If they didn't spec /deep, any-block! skips nested blocks.^/^-; /deep does *not* look into nested path or string values.^/^-;!! We need good examples for `parse into` and its limitations.^/^-deep: either deep [^/^-^-[any-path! | any-string! | into top-rule]^-; Don't parse into nested paths or strings^/^-][any-block!]^-^-^-^-^-^-^-^-^-; any-block! skips nested blocks^/^/^-parse block top-rule: [^/^-^-collect any [keep rule | deep | skip]^/^-]^/]^/e.g. [^/^-blk: [1 a 2 'b 3 c: 4 :d [a 'b c: :d  E 'F G: :H]]^/^-print mold collect-values blk any-word!^/^-print mold collect-values/deep blk any-word!^/^-print mold collect-values blk set-word! ^/^-print mold collect-values blk [set-word! | get-word!]^/^-print mold collect-values/deep blk [set-word! | get-word!]^/^-print mold collect-values/deep blk first [a:]^/^-print mold collect-values/deep blk integer!^/^-blk: [a/b/c 'j/k/l x/y/z: [d/e/f 'g/h/i t/u/v:]]^/^-print mold collect-values blk path!^/^-print mold collect-values blk lit-path!^/^-print mold collect-values blk set-path!^/^-print mold collect-values/deep blk path!^/^-print mold collect-values/deep blk lit-path!^/^-print mold collect-values/deep blk set-path!^/^-blk: [[a] [b] (c) [[d] (e) ([f])]]^/^-print mold collect-values blk block!^/^-print mold collect-values/deep blk block!^/^-print mold collect-values blk paren!^/^-print mold collect-values blk first [()]^/^-print mold collect-values/deep blk paren!^/^-print mold collect-values blk any-block!^/^-blk: [1 2.0 "b" %file a 3x3 [4.4.4.4 #5 50%]]^/^-print mold collect-values blk [number! | tuple!]^/^-print mold collect-values/deep blk [number! | tuple!]^/]^/```}
    sent: "2017-07-29T15:33:37.174Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597caa8e45fc670746d958bf"
    text: {@dockimbel, `replace/deep` will be a nice addition for people. In a quick search, I have a number of find/gather kinds of things, but `collect-values` is the only one that seems to go deep. I believe I have an old template matching func that does it though, used for a tuplespace project I did.}
    sent: "2017-07-29T15:32:29.995Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597c9f33f5b3458e309239fa"
    text: "@meijeru Thank you Rudolf."
    sent: "2017-07-29T14:44:03.868Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c9dd61c8697534a6e6e11"
    text: {Compliments to Team Red for the big number of issues now being resolved. You are working very hard!}
    sent: "2017-07-29T14:38:14.369Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "597c9da7bc4647297436ce40"
    text: {I think i have to use the archive function from settings. I have to dive into this. Hoped there was a simple key stroke though.  Just tried using archive. It is not exactly what i want. You can only go one year back.}
    sent: "2017-07-29T14:37:27.261Z"
    editedAt: "2017-07-29T14:41:18.576Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "597c9b85c101bc4e3acf14f8"
    text: {@greggirwin did try clean-path, it does canonicalize path-names but does not resolve symlinks. canonicalize_file_name does both.}
    sent: "2017-07-29T14:28:21.758Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597c9b66329651f46ed28fed"
    text: {> I say "try" because `canonicalize_file_name` processes sym links. If you compare their results, please share them so we can note the differences.^/@greggirwin did try clean-path, it  does canonicalize path-names but does not resolve symlinks.   canonicalize_file_name does both.}
    sent: "2017-07-29T14:27:50.398Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597c99d2329651f46ed289e1"
    text: {I think so. For example to read all messages of this branch or red/red etc. Sometimes there is a button which says goto bottom but not one to go to the top. I want to read also the messages from the start or a branch. If i want to read a message at the beginning of a branch i have to scroll up many many times.}
    sent: "2017-07-29T14:21:06.877Z"
    editedAt: "2017-07-29T14:26:15.795Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "597c98191c8697534a6e5ec9"
    text: "git branch?"
    sent: "2017-07-29T14:13:45.989Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597c9817329651f46ed2851b"
    text: "what do you mean by top of a branch?"
    sent: "2017-07-29T14:13:43.196Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597c979c614889d475feff77"
    text: {Does anyone know a way to go to the top of a branch?^/I want to read all of a branch and don't want to scroll a lot through it  to go to the beginning of it.}
    sent: "2017-07-29T14:11:40.386Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "597c8e644bcd78af56f7415f"
    text: {Is there literature on designing and implementing DSL's in Red/Rebol?^/To my understanding: it's not really a 'language mechanism' but a consequence of orthogonal language features (and homoiconic design). But the integration of `parse`ing and macros for creating DSLs is a little unclear to me (especially that apparently DSLs don't need the newly added macro system to be created; or I'm misunderstanding something here).}
    sent: "2017-07-29T13:32:20.977Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "597c7e2a210ac269203777ac"
    text: {It was called anamonitor http://www.rebol.org/view-script.r?script=anamonitor.r}
    sent: "2017-07-29T12:23:06.077Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
)#(
    id: "597c7d28bc46472974366f21"
    text: {@PeterWAWood I am thinking of creating a little tool to inspect the system object visibly. Do you know if there is already one? As far as I can remember Romano wrote one for Rebol a long time ago.}
    sent: "2017-07-29T12:18:48.554Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597c7cce4bcd78af56f70b13"
    text: {To be honest I'd forgotten about words-of. There are so many functions these days ;-)}
    sent: "2017-07-29T12:17:18.534Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597c7bb74bcd78af56f707cf"
    text: "@PeterWAWood. Spot on. Thx!"
    sent: "2017-07-29T12:12:39.455Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597c7350f5b3458e3091b644"
    text: {@Arie-vw Do you mean something like this?^/```text^/>> o: make object! [a: 1 b: 2 c: 3]^/== make object! [^/    a: 1^/    b: 2^/    c: 3^/]^/>> foreach word words-of o [print compose [:word "in object o is" (word)]]^/a in object o is 1^/b in object o is 2^/c in object o is 3^/```^/ }
    sent: "2017-07-29T11:36:48.060Z"
    editedAt: "2017-07-29T11:37:08.220Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597c71f7a7b406262d3efcdd"
    text: {In rebol there is an example probe-object function here http://www.rebol.com/docs/core23/rebolcore-10.html#section-4 ; is there a nice way in Red to access or list the members of an object, without knowing their names?}
    sent: "2017-07-29T11:31:03.490Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597c531976a757f8085817c5"
    text: "@PeterWAWood @dockimbel Thanks."
    sent: "2017-07-29T09:19:21.766Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597c50bca7b406262d3ea2fb"
    text: {@pixcai Iterators don't have a local context in Red. `func` constructor requires a manual declaration of locals. You can use `function` constructor instead, which will automatically gather set-words and iterartor words for you (though, we consider that such constructor should be used by advanced users only, as it can create unwanted side-effects if you don't have a clear understanding of the gathering rules).}
    sent: "2017-07-29T09:09:16.540Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c5001bc4647297435e385"
    text: {Another example:^/```^/Red []^/^/inner: func [][foreach value "D" []]^/^/outer: func [][^/    foreach value "ABC" [^/        inner^/        print value     ;-- will output #"D"^/    ]^/]^/^/outer^/```^/the word `value` in `foreach` without its own scope?}
    sent: "2017-07-29T09:06:09.678Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597c4fea1c8697534a6d92b3"
    text: {BTW, we don't have docstrings for `replace` function, if anyone feels motivated for that, you can push a PR.}
    sent: "2017-07-29T09:05:46.934Z"
    editedAt: "2017-07-29T09:05:55.540Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c4c9a1c8697534a6d8a02"
    text: {@PeterWAWood It's most probably just a side-effect of Red's `replace` implementation. After a few tests, it seems related to an issue within `change/part`. I've opened a ticket to log it as it can result in crashing.}
    sent: "2017-07-29T08:51:38.198Z"
    editedAt: "2017-07-29T08:56:49.500Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c4c01210ac2692036e6e6"
    text: {It looks as though Red is delaying the evaluation of `c` until after it has modified the string.  Rebol2 seems to evaluate `c` before modifying the string. @dockimbel Is this by design?^/^/Rebol2:^/```text^/>> a: "ABC"^/== "ABC"^/>> b: next a^/== "BC"^/>> c: next b^/== "C"^/>> replace a b c^/== "AC"^/>> a^/== "AC"^/>> b^/== "C"^/>> c^/== ""^/```}
    sent: "2017-07-29T08:49:05.793Z"
    editedAt: "2017-07-29T08:50:59.718Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597c4afd45fc670746d84b58"
    text: {In your original code, it looks as though "BC" is removed from the string first and then replaced with `c` which will no longer point at "C" as it has been removed. ^/^/}
    sent: "2017-07-29T08:44:45.105Z"
    editedAt: "2017-07-29T08:50:37.956Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597c499076a757f80857ff0a"
    text: {The results are as you expect if you create separate strings for `b` and `c`:^/```text^/>> a: "ABC"^/== "ABC"^/>> b: copy next a^/== "BC"^/>> c: copy next b^/== "C"^/>> replace a b c^/== "AC"^/```}
    sent: "2017-07-29T08:38:40.800Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597c4919a7b406262d3e8db1"
    text: {@pixcai It is because `a` and  `b` and `c` all reference the single value "ABC". }
    sent: "2017-07-29T08:36:41.529Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597c48842723db8d5e58205a"
    text: {@xqlab Yes, that's the next thing to support, but `find` is a native with already tons of refinements, and as it's low-level, it's not very convenient for invoking high-level features like Parse. I was think about introducing rather a  higher level mezzanine for that called `search`, which could support more sophisticated features, like searching through a mixed tree of objects/maps/series. @greggirwin Do you already have some mezzanine like that in your magic toolbox?}
    sent: "2017-07-29T08:34:12.661Z"
    editedAt: "2017-07-29T08:39:24.559Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c479e614889d475fe1ccf"
    text: {anybody?^/```^/replace "ABC" "BC" "C"^/```^/will output `AC`.^/But why:^/```^/a: "ABC"^/b: next a^/c: next b^/replace a b c^/```^/only output `A`}
    sent: "2017-07-29T08:30:22.276Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597c3b2d76a757f80857d856"
    text: "How about a find/deep too ?"
    sent: "2017-07-29T07:37:17.386Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "597c26ef329651f46ed144c5"
    text: "That's really cool, this is very useful feature."
    sent: "2017-07-29T06:10:55.569Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597c204d614889d475fdb117"
    text: {The `pattern` argument can even be a Parse rule, though, I haven't found good use-cases for that so far.}
    sent: "2017-07-29T05:42:37.864Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c2025bc46472974356524"
    text: {`replace` has now a `/deep` refinement, to replace values deeply into `any-list!` series:^/```lisp^/>> replace/deep [hello [blue [blue world]]] 'blue 'red^/== [hello [red [blue world]]]^/>> replace/deep/all [hello [blue [blue world]]] 'blue 'red^/== [hello [red [red world]]]^/```}
    sent: "2017-07-29T05:41:57.556Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b9adea7b406262d3cb2aa"
    text: {I'm looking forward to seeing a red/Turkish channel one day, but currently there is only me and may be a few others here from Turkey :worried: }
    sent: "2017-07-28T20:13:18.010Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "597b81372723db8d5e55e6b3"
    text: {FYI, as it was requested several times, we have opened a [red/Russian](https://gitter.im/red/Russian) room.}
    sent: "2017-07-28T18:23:51.450Z"
    editedAt: "2017-07-28T18:24:10.628Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b679bf5b3458e308e97ba"
    text: {I say "try" because `canonicalize_file_name` processes sym links. If you compare their results, please share them so we can note the differences.}
    sent: "2017-07-28T16:34:35.299Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597b66ed4bcd78af56f3df47"
    text: {:point_up: [July 28, 2017 5:52 AM](https://gitter.im/red/red?at=597b25904bcd78af56f2c9b5) @feetdust, try `clean-path`.}
    sent: "2017-07-28T16:31:41.487Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597b57a92723db8d5e554462"
    text: {`as` breaks the strong typing of Red for practical benefits (coercing large series), so use it only when really needed. I am not sure we will keep it in that form. We'll see after we introduce modules and `secure` dialect, we might reserve it for a priviledged evaluation mode.}
    sent: "2017-07-28T15:26:33.366Z"
    editedAt: "2017-07-28T15:27:41.196Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b53101c8697534a6a8271"
    text: {@9214 Different values can point to same data. So it's not necessary to modify original value to get new one without copying.}
    sent: "2017-07-28T15:06:56.696Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597b3dd945fc670746d4ef51"
    text: {@9214 I think it's compatible with other similar functions:^/```^/>> x: [1 2 3]^/== [1 2 3]^/>> y: as paren! x^/== (1 2 3)^/>> poke x 3 4^/== 4^/>> y^/== (1 2 4)^/```}
    sent: "2017-07-28T13:36:25.415Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "597b2d55329651f46ecded4c"
    text: {after `make/to` discussion I checked up `as`. Its decription states: `Coerce a series into a compatible datatype **without copying** it`. Reading `without copying`, I expect that original series should be modified after `as` usage, but it's not:^/```^/>> x: [1 2 3]^/== [1 2 3]^/>> as paren! x^/== (1 2 3)^/>> x^/== [1 2 3]^/```}
    sent: "2017-07-28T12:25:56.991Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597b2d2b76a757f80854544f"
    text: "thanks guys ."
    sent: "2017-07-28T12:25:15.646Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597b2cde2723db8d5e549782"
    text: {```^/REBOL []^/^/clib: load/library %/lib/libc.so.6^/canonicalize_file_name: make routine! [^/    "canonicalize_file_name"^/^-path [string!]^/    return: [string!]^/] clib "canonicalize_file_name"^/print canonicalize_file_name "/sys/class/net/eth1"^/```^/}
    sent: "2017-07-28T12:23:58.477Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597b2cdb614889d475fa7652"
    text: {@nc-x  thanks Neelesh, I am already doing that in rebol : }
    sent: "2017-07-28T12:23:55.355Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597b2ae11c8697534a69d233"
    text: { Support for doing it from Red is planned for the next release (see load/library in rebol docs)}
    sent: "2017-07-28T12:15:29.643Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "597b2a72329651f46ecde0c3"
    text: "Routine and `#system` directive."
    sent: "2017-07-28T12:13:38.557Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "597b2a1c614889d475fa6b23"
    text: {Actually you can use it with routine.. just it must be compiled for now.}
    sent: "2017-07-28T12:12:12.926Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "597b29b8a7b406262d3af021"
    text: {@feetdust I don't think you can do library calls in Red (for now)}
    sent: "2017-07-28T12:10:32.615Z"
    editedAt: "2017-07-28T12:10:42.172Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597b259df5b3458e308d7753"
    text: "anybody ?"
    sent: "2017-07-28T11:53:01.797Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597b25904bcd78af56f2c9b5"
    text: {> On linux, I need to use the "canonicalize_file_name" library call,^/with the Red/System dialect I am able to do it like this:^/^/```^/Red/System []^/^/#import [^/^-"libc.so.6" cdecl [^/^-^-cfn: "canonicalize_file_name" [^/^-^-^-path [c-string!]^/^-^-^-return: [c-string!]^/^-^-]^/^-]^/]^/print cfn "/sys/class/net/eth1"^/print "^^(line)"^/```^/^/Can this be done in plain Red?}
    sent: "2017-07-28T11:52:48.968Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597b2282f5b3458e308d6887"
    text: "@PeterWAWood It is."
    sent: "2017-07-28T11:39:46.364Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b2278c101bc4e3aca79e9"
    text: {@PeterWAWood I guess it is and can be achieved either with `make integer! true/false` or `pick [1 0] true/false`.}
    sent: "2017-07-28T11:39:36.632Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597b2266bc46472974321791"
    text: "Though isn't '0' treated as false in C."
    sent: "2017-07-28T11:39:18.016Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597b2239bc4647297432166d"
    text: "I probably do."
    sent: "2017-07-28T11:38:33.934Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597b21eea7b406262d3ad40d"
    text: {@PeterWAWood You mean C++ bool? C has no boolean type.}
    sent: "2017-07-28T11:37:18.106Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b213e76a757f8085427a9"
    text: {Isn't `to integer! true/false` a convenience for converting a Red logic! to a C bool? }
    sent: "2017-07-28T11:34:22.370Z"
    editedAt: "2017-07-28T11:35:34.846Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597b20eebc46472974321166"
    text: {@9214 ^/> I wonder if anyone can show use-cases where current to logic! 1/0 behaivor is preferred ^/^/In Redbol, all values are `true` except `false` and `none`.  So both `1` and `0` are considered `true`.}
    sent: "2017-07-28T11:33:02.862Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b1f901c8697534a69a414"
    text: {`to logic! pick [true] 1/0` versus `make logic! 1/0` :shipit: . I prefer `make logic ...` to stay as it is. As for `to` debate - it depends, I wonder if anyone can show use-cases where current `to logic! 1/0` behaivor is preferred and `to integer! true/false` is desired.}
    sent: "2017-07-28T11:27:12.479Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597b1d532723db8d5e546054"
    text: {@9214 You can also use construction syntax for that case (that syntax is only implemented for a few types for now):^/```lisp^/>> type? pick [#[true]] 1^/== logic!^/```}
    sent: "2017-07-28T11:17:39.342Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b1bf745fc670746d46afd"
    text: {Also, `to integer! true/false` is equivalent to `pick [1 0] true/false` ;) As a confirmation that `pick` trick is too error prone - it should be `get pick [true] 1/0` to return `logic!` value, and even then it will break on returned `none`.}
    sent: "2017-07-28T11:11:51.442Z"
    editedAt: "2017-07-28T11:17:07.587Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597b1a98614889d475fa30f6"
    text: {@9214 Yes, there are several dimensions to consider there, so it's not simple.}
    sent: "2017-07-28T11:06:00.976Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b1a571c8697534a698fce"
    text: {@dockimbel I agree that current `to` behavior is consistent with Rebol/Red rules for `true`-ish and `false`-ish values. Even with `make` blocking conversion from `logic!` to `1/0`  I'm ready to live with `pick` trick (though it's way too hacky and error prone), though I prefer to leave `make` as it is, since it's compatible with Rebol2 (and perhaps with Rebol3).^/```text^/>> pick [true] 1^/== true^/>> pick [true] 0^/== none^/```}
    sent: "2017-07-28T11:04:55.069Z"
    editedAt: "2017-07-28T11:14:41.863Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597b186545fc670746d45e1e"
    text: {Opinions on this ticket are welcome: https://github.com/red/red/issues/2645 Just be sure to fully read the comments and think about it before posting. Stay objective as much as possible, avoid the "I like X" or "I don't like Y", because that's not helpful at all.}
    sent: "2017-07-28T10:56:37.934Z"
    editedAt: "2017-07-28T10:57:59.299Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
)#(
    id: "597b0f152723db8d5e542d63"
    text: {@9214 Thanks. Yes, you got me, I'm from China... :smile: }
    sent: "2017-07-28T10:16:53.600Z"
    v: 1
    author: "597b09d4d73408ce4f6f23e1"
) #(
    id: "597b0e31c101bc4e3aca2e75"
    text: {@OhCoder feel free to ask any questions either here or in [`red/help`](https://gitter.im/red/help) and [`red/welcome`](https://gitter.im/red/red/welcome) rooms. Also, there's [`red/Chinese`](https://gitter.im/red/red/Chinese) room if you want to chat in native language.}
    sent: "2017-07-28T10:13:05.360Z"
    editedAt: "2017-07-28T10:13:31.100Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597b0d6b45fc670746d43708"
    text: {@9214 Thanks, :smile: I never learned REBOL language before, just heard about it. I read some articles about Red && REBOL just few hours ago...I feel Red language is cool, so I come here.}
    sent: "2017-07-28T10:09:47.122Z"
    v: 1
    author: "597b09d4d73408ce4f6f23e1"
) #(
    id: "597b0af2f5b3458e308d13c5"
    text: "@OhCoder hey there, welcome!"
    sent: "2017-07-28T09:59:14.277Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597b0ac71c8697534a69598b"
    text: "hello…"
    sent: "2017-07-28T09:58:31.497Z"
    v: 1
    author: "597b09d4d73408ce4f6f23e1"
) #(
    id: "597b057e614889d475f9e1ec"
    text: {On linux, I need to use the "canonicalize_file_name" library call,^/with the Red/System dialect I am able to do it like this:^/^/```^/Red/System []^/^/#import [^/^-"libc.so.6" cdecl [^/^-^-cfn: "canonicalize_file_name" [^/^-^-^-path [c-string!]^/^-^-^-return: [c-string!]^/^-^-]^/^-]^/]^/print cfn "/sys/class/net/eth1"^/print "^^(line)"^/```^/^/Can this be done in plain Red?}
    sent: "2017-07-28T09:35:58.252Z"
    v: 1
    author: "5757bd36c43b8c6019787694"
) #(
    id: "597b0378329651f46ecd5294"
    text: {@mikeparr ok, no problem, I will try with wireshark to see what's wrong}
    sent: "2017-07-28T09:27:20.037Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597af5091c8697534a690355"
    text: {Red programs are first compiled into Red/System code and then compiled to machine code. Most of the functions supplied with Red are written in Red/System.}
    sent: "2017-07-28T08:25:45.511Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597af4c0f5b3458e308cbe44"
    text: {It perhaps is easier to think of it as an embedded C compiler with syntax like Red.^/}
    sent: "2017-07-28T08:24:32.116Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597af48b614889d475f99f42"
    text: "seems Red/System is the module in Red lang"
    sent: "2017-07-28T08:23:39.553Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597af4704bcd78af56f212ee"
    text: "on my god! thank you very much"
    sent: "2017-07-28T08:23:12.689Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597af41ff5b3458e308cbb9d"
    text: {That is the page for the Red/System dialect. There is no `block!` in Red/System.^/}
    sent: "2017-07-28T08:21:51.378Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597af3e5614889d475f99d2a"
    text: {I read this page http://static.red-lang.org/red-system-specs.html#section-4.7}
    sent: "2017-07-28T08:20:53.837Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597af3c9bc464729743161d1"
    text: "@rebolek  error 400 - sorry, I don't use Linux."
    sent: "2017-07-28T08:20:25.323Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "597af3ae1c8697534a68fe92"
    text: {@mahengyang Your code is seems to be a mix of  Red/System and Red code. Structures can only be created in Red/System, `c-string!` is only valid in Red/System, `block!` is only valid in Red.}
    sent: "2017-07-28T08:19:58.882Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597af275a7b406262d3a17a0"
    text: "`*** Script Error: declare has no value`"
    sent: "2017-07-28T08:14:45.727Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597af26ef5b3458e308cb5ec"
    text: {```^/node: declare struct! [^/^-father^-[c-string!]^/^-suns^-[block!]^/]^/```^/declare can not use?^/}
    sent: "2017-07-28T08:14:38.276Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597aedd545fc670746d3b795"
    text: {@mikeparr Great to know, thanks. BTW, the long line is not an issue for me at all, but that Linux version of Red gets 400 error is. Could you, please, once you have some time, look into logs what's the difference in both requests?}
    sent: "2017-07-28T07:55:01.254Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597aed6c89aea4761ddf6be8"
    text: {@rebolek @Arie-vw The Red-by-example 'long-line' issue:  for the next week, I'm working on a big update to VID, but after that, I could look into the long line/unbalanced  'pre' issue.  @rebolek , thanks for the offer of help.}
    sent: "2017-07-28T07:53:16.752Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "597acb5fa7b406262d398ff5"
    text: {"accointance" -> "acquaintance"}
    sent: "2017-07-28T05:27:59.580Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597ac7732723db8d5e532f2b"
    text: {@JacobGood1 Went through the paper, I could have a lot to say about it, in a nutshell:^/* It's mostly about K language and continuation of Shutt's work, as best approximation for Rebol semantics (though there is still a large gap in the ability to statically analyze Rebol and K).^/* The proposed solution for reducing the complexity of the problem (i.e. massive modularization of the source code) will still fall short for Rebol IMHO. The "pathological cases" mentioned only account for extremely convoluted code patterns,  while ignoring the common cases arising from code exchanges in I/O operations, when deserializating code, which precludes static analysis. Funny that they mention the "fallback to interpreter at run-time" solution for that, as that's the precise answer I give to the main question Andreas (an accointance  of Viktor) kept asking me during the same year that paper was published, both online and live in Austria when we met there. Though, I don't doubt they could have come up with such trivial solution by themselves, it's still a funny coincidence to me. ;-)^/* I find it great that someone has the time and will to work on such topic and try to push the boundaries there. I'll try to get in touch with Viktor to see if he made any significant advances in the last two years.}
    sent: "2017-07-28T05:11:15.241Z"
    editedAt: "2017-07-28T05:13:01.280Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597ac42d2723db8d5e5326ab"
    text: {If I remember correctly, `integer` and `logic` values can be exchanged between Red and Red/System without "conversion".  (Probably `float` too). The others need to be unloaded/loaded in the Routine. The Red/System functions to do this are in the Red/System runtime. At the moment, you'll need to find them in the source code - red/system/runtime/datatypes is the place to look.}
    sent: "2017-07-28T04:57:17.090Z"
    editedAt: "2017-07-28T05:00:19.518Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ac41676a757f80852d61e"
    text: { @pixcai Red and Red/System live at different abstraction levels, where data is represented differently (unboxed values in R/S, boxed in Red among many other differences). You need to apply boxing/unboxing transformations in order to pass data between them. That can be done in different ways, the most convenient one being *routines*, which offer a convenient interface between those two realms, with some auto-marshalling help.}
    sent: "2017-07-28T04:56:54.319Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597ac372c101bc4e3ac92103"
    text: {You'll need to use the `-r` compile option so that the Red/System runtime string context is included.}
    sent: "2017-07-28T04:54:10.962Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ac325f5b3458e308c1841"
    text: {You need to write a `routine!` to get the data from the Red/System context:^/```^/Red []^/^/#system [^/    v: "0.6.3"^/]^/^/get-version: routine [return: [string!]] [^/^-string/load v length? v UTF-8^/]^/^/print get-version^/```}
    sent: "2017-07-28T04:52:53.158Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597abda64bcd78af56f161ae"
    text: {I have another question.^/in `a.reds`:^/```^/Red/System []^/^/#define VERSION "0.6.3"^/```^/in `b.red`:^/```^/Red []^/^/#system [^/    #include %a.reds^/    v: VERSION^/]^/^/print ["Current version is " v]^/```^/I want to use `v` outside of `#system`, but the compiler give an error. what should i do?^/```^/*** Compilation Error: undefined word v^/```}
    sent: "2017-07-28T04:29:26.885Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597abb8c614889d475f8e269"
    text: {@pixcai `#define VERSION "0.6.3"` works, as Peter said, no `tuple!` type in Red/System. The list of valid datatypes can be found [here](http://static.red-lang.org/red-system-specs-light.html).}
    sent: "2017-07-28T04:20:28.580Z"
    editedAt: "2017-07-28T04:20:49.758Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597abb2945fc670746d31318"
    text: {@WiseGenius Unfortunately, reporting false positives to most AV companies results in simply whitelisting a hash of the file's content and not fixing their heuristics. If you can find a way to more directly contact the editor behind that AV, maybe we can do something about it. If they have some social network presence, that's usually a good way.}
    sent: "2017-07-28T04:18:49.970Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597ab9da1c8697534a684248"
    text: {0.6.3 is not a valid literal in the Red/System dialect. Red/System looks like Red but it acts more like C. So it has variables with types rather than words, it has basic datatypes (integers, floats, bytes, structs, pointers etc.) rather than Red Values (integer!, word!, char!, map! tuple! etc.)}
    sent: "2017-07-28T04:13:14.524Z"
    editedAt: "2017-07-28T04:16:10.151Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ab85845fc670746d30bac"
    text: {@PeterWAWood Got it. thx.^/^/another question, `#define` can't define `word!` value? For example:^/```^/Red/System []^/^/#define VERSION 0.6.3^/```^/```^/Red/System []^/^/#include a.reds^/^/print VERSION^/```^/why it's wrong?^/```^/*** Compilation Error: unknown directive ~000001^/```}
    sent: "2017-07-28T04:06:48.148Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597ab836bc4647297430a5f7"
    text: {This only works because `do` returns the last value evaluated. The last value evaluated in `%a.red` is the `function!` value `func  [] [print "Function A"] `}
    sent: "2017-07-28T04:06:14.048Z"
    editedAt: "2017-07-28T04:06:20.546Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ab75d45fc670746d308b7"
    text: {You can achieve what you are attempting by using the do function:^/```text^/>> write %a.red {Red[] a-fn: func[][print "Function A"]}^/>> b-fn: make object! [a-fn: do %a.red]^/== make object! [^/    a-fn: func [][print "Function A"]^/]^/>> probe b-fn^/make object! [^/    a-fn: func [][print "Function A"]^/]^/== make object! [^/    a-fn: func [][print "Function A"]^/]^/>> b-fn/a-fn^/Function A^/```}
    sent: "2017-07-28T04:02:37.040Z"
    editedAt: "2017-07-28T04:02:52.252Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ab66289aea4761ddeb43a"
    text: {It is treated as a `issue!` value in Red. So Red evaluates the line `a-fn: #include %a.red`:^/`a-fn` is bound to an `issue!` of value `#include`^/the `file!` value  is evaluated but the result of the evaluation is not used.}
    sent: "2017-07-28T03:58:26.087Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ab56d4bcd78af56f14a4c"
    text: {`#include` is a pre-processor command not a Red runtime function. }
    sent: "2017-07-28T03:54:21.979Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ab3984bcd78af56f14450"
    text: {But if i want do this: ^/```^/b-fn: context [^/    a-fn: #include %a.red^/]^/```^/What should i do?}
    sent: "2017-07-28T03:46:32.865Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597ab37f614889d475f8c7e5"
    text: {`a-fn` executes the function bound to the word `a-fn`^/`:a-fn` returns the function bound to the word `a-fn`}
    sent: "2017-07-28T03:46:07.850Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ab33745fc670746d2ff57"
    text: "```b-fn: :a-fn```"
    sent: "2017-07-28T03:44:55.980Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ab2e44bcd78af56f14199"
    text: {```^/Function A^/*** Script Error: b-fn needs a value^/*** Where: set^/*** Stack:^/```}
    sent: "2017-07-28T03:43:32.633Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597ab2a289aea4761ddea890"
    text: {You'll get better help at https://gitter.im/red/red/Chinese}
    sent: "2017-07-28T03:42:26.730Z"
    editedAt: "2017-07-28T03:43:11.208Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597ab21bf5b3458e308be5a7"
    text: {这里b-fn已经赋值为a-fn呢，但是效果和别的语言不一样，这是Red本来就这样设计的，还是说这是一个设计错误？}
    sent: "2017-07-28T03:40:11.476Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597ab1654bcd78af56f13e01"
    text: {我有两个文件，`a.red`和`b.red`。^/`a.red`里面的代码是^/```^/Red [] ^/a-fn: func [][print "Function A"]^/```^/`b.red`里面的代码是^/```^/Red []^/#include %a.red^/b-fn: a-fn^/b-fn^/```^/结果b-fn没有输出任何内容。}
    sent: "2017-07-28T03:37:09.901Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597ab0a44bcd78af56f13cb6"
    text: "第一次发言，请问在编辑框怎么换行呢？"
    sent: "2017-07-28T03:33:56.117Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597aae3545fc670746d2efcb"
    text: "你可以说中文"
    sent: "2017-07-28T03:23:33.597Z"
    v: 1
    author: "57ccd27f40f3a6eec0637c58"
) #(
    id: "597aad3bbc464729743085d2"
    text: {I have a problem. I have two files: `a.red` and `b.red`.}
    sent: "2017-07-28T03:19:23.203Z"
    v: 1
    author: "597a9f4cd73408ce4f6f16c3"
) #(
    id: "597a841e45fc670746d283b8"
    text: {According to [this page](https://docs.labtechsoftware.com/LabTech11/Default.htm#AddOnSolutions/Security/HitmanPro/HitmanProFalsePositives.htm), when I “Report that this file is safe” (which I did for each one), “the SHA-256 is sent to the cloud for reclassification (file is rescanned)”, but that implies to me that even if each file gets reclassified, every new build is going to trigger another false positive (assuming that's what it is, of course). I'll wait and see what happens. However I probably won't know when if/when the files are reclassified because also “the SHA-256 of the file is locally added as white” already.}
    sent: "2017-07-28T00:23:58.977Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "597a812045fc670746d27bbc"
    text: {[![falsepositives2.png](https://files.gitter.im/red/red/QIkK/thumb/falsepositives2.png)](https://files.gitter.im/red/red/QIkK/falsepositives2.png)}
    sent: "2017-07-28T00:11:12.220Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "597a8113f5b3458e308b617b"
    text: {[![falsepositives.png](https://files.gitter.im/red/red/Phtl/thumb/falsepositives.png)](https://files.gitter.im/red/red/Phtl/falsepositives.png)}
    sent: "2017-07-28T00:10:59.541Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "597a0c19bc464729742e6b7f"
    text: {@Arie-vw The default compilation target on each platform currently is for the CLI, not the GUI. We might change that in the future.}
    sent: "2017-07-27T15:51:53.866Z"
    editedAt: "2017-07-27T15:53:00.805Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597a0ba41c8697534a65fe8b"
    text: {When compiling on Windows it says "Target: MSDOS". Shouldn't that be Windows?}
    sent: "2017-07-27T15:49:56.156Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597a097889aea4761ddc6d4b"
    text: "@dockimbel Yes, I like that. Thx!"
    sent: "2017-07-27T15:40:40.653Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
)#(
    id: "597a03002723db8d5e50a492"
    text: {@Arie-vw Another code refactoring you can do, if you like that style, instead of:^/```lisp^/either empty? result [^/^-i_t/text: rejoin[{No match found for string "} arg {" in the PATH variable}]^/] [^/^-i_t/text: rejoin[{Now displaying components of PATH variable containing string "} arg {"}]^/]^/```^/you can remove the redundancies using:^/```lisp^/i_t/text: rejoin pick [^/^-[{No match found for string "} arg {" in the PATH variable}]^/^-[{Now displaying components of PATH variable containing string "} arg {"}]^/] empty? result^/```}
    sent: "2017-07-27T15:13:04.135Z"
    editedAt: "2017-07-27T15:15:09.611Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597a01fa76a757f808503647"
    text: {@Oldes Yes, we're done. Sorry for the fuss, but some cases need to be processed publicly, in order to keep community management transparent.}
    sent: "2017-07-27T15:08:42.048Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5979ffe5c101bc4e3ac68933"
    text: {Could you all please calm down and stop talking about neticket here and move back to technical talks? Thanks.}
    sent: "2017-07-27T14:59:49.467Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5979fd5c89aea4761ddc3559"
    text: {So I really can't grasp what this fuzz is all about.}
    sent: "2017-07-27T14:49:00.848Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5979fc86f5b3458e30898196"
    text: {I still fail to see how the remark was aimed against Joe Armstrong, where it clearly just mentioned the familiarity aspect of the name, in first place a familiarity that Geekyi could have with the `Armstrong` part, and the latter for a familiarity for the `Joe` part of the name.}
    sent: "2017-07-27T14:45:26.602Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5979fbf71c8697534a65b5f3"
    text: {@iArnold Are you prepared to modify your behaviour as requested and act in an acceptable manner in future?}
    sent: "2017-07-27T14:43:03.856Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5979fa824bcd78af56eed8f2"
    text: {@iArnold Why did you hide the fact that you called him by that name then? We all know who is "Joe Dalton" and what that kind of character he represents. So distorting the name of a newcomer, changing his name randomly and calling him "Joe Dalton" is the right way to greet newcomers? }
    sent: "2017-07-27T14:36:50.740Z"
    editedAt: "2017-07-27T14:36:59.686Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5979f98a329651f46ec9cda7"
    text: {@Arie-vw You're welcome. ^/> I did find out that I needed to add a colon befor i in line 18 to get it to work. Why is that?^/^/My mistake, `list/i` is a shortcut for `select list i`, while `list/:i` is shortcut for `pick list i`. Getting the current OS  the Red app is running on is through: `system/platform`.}
    sent: "2017-07-27T14:32:42.244Z"
    editedAt: "2017-07-27T14:38:08.709Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5979f964614889d475f65091"
    text: {Joe Dalton , one of the famous Dalton brothers from the Lucky Luke cartoon series by Morris. Wow!}
    sent: "2017-07-27T14:32:04.525Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5979f8934bcd78af56eecf46"
    text: {@iArnold You are not mentioning the third name you used, calling him "Joe Dalton". Seems like you have a very selective memory.}
    sent: "2017-07-27T14:28:35.523Z"
    editedAt: "2017-07-27T14:29:04.835Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5979df4f4bcd78af56ee6282"
    text: {@dockimbel Well if you really think that mentioning two world famous other people who also bear the name 'Armstrong' is making fun of Joe Armstrong's name, then I am not the one having a problem. The thing with Sandra is, I really thought she was an alias of Alan, he used to attract extra attention, and I have chatted with her explained and apologized for that.^/I consider myself to be in the clear about negative comments, perhaps I do live in a greyer parallel world where the effect of the pink cloud around the Red center wears of more.^/I still respect what you and the Red team do, no matter what. So if you really feel the need to ban me, so be it.^/^/}
    sent: "2017-07-27T12:40:47.859Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5979dde576a757f8084f998c"
    text: {Can anybody check if this script https://pastebin.com/ragpdQky works correct on Linux? Because I am not sure if I use the correct way to obtain the OS.}
    sent: "2017-07-27T12:34:45.563Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979d2f4a7b406262d362d54"
    text: {@rebolek  That should be simple to fix. Please have a look @mikeparr !^/}
    sent: "2017-07-27T11:48:04.798Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979d2b276a757f8084f6ac9"
    text: {@Arie-vw Yes, I was able to read and write the page under Windows, just do not print it :)^/Also, the page generation script could use some improvements. i.e there is 917 opening `<pre>` tags on the page, but  1076 closing `</pre>` tags. Let me know if I can help with that somehow.}
    sent: "2017-07-27T11:46:58.931Z"
    editedAt: "2017-07-27T11:47:54.514Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5979d27ebc464729742d77b8"
    text: {@iArnold ^/> There was nothing rude/offensive about the remark by me that was deleted.^/^/I don't know how you can say that. You made fun on a newcomer's name after his first post. The vast majority of people consider such behaviour as being rude. You also were very unpleasant to a female on the mailing list, making derogatory comments about her, simply because she used a "nom de plume". I and others felt the need to apologise to her.^/^/In your private message to me today, you asserted that you had made no negative comments to newcomers. The messages that were forwarded to me would be considered to contain negative comments by most people.^/^/It seems that your standards as to what is acceptable differ greatly from those of the Red community we are building. Meeting the communal standards is not a matter for argument or opinion. You seem to be having difficulty coming to terms with the need to meet them even though they are very accommodative. In that case, we are willing to give you an ultimate chance to accept and abide by the standards of the Red community. If you demonstrate that you cannot do so you will be excluded without any further discussion.}
    sent: "2017-07-27T11:46:06.347Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5979d2392723db8d5e4fd747"
    text: {@rebolek  The console does not really hang. Cause is length of stuff to be printed ;-)^/>> length? page^/== 736848^/}
    sent: "2017-07-27T11:44:57.157Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979c93c76a757f8084f46a8"
    text: {The `print` problem? Probably. The `read` problem seems to be Linux-specific.}
    sent: "2017-07-27T11:06:36.287Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5979c8dc329651f46ec90119"
    text: {Maybe the problem is that the page consists of long lines, since html does not need line breaks?}
    sent: "2017-07-27T11:05:00.218Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979c8b82723db8d5e4faff2"
    text: "Windows"
    sent: "2017-07-27T11:04:24.721Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979c8afbc464729742d503b"
    text: "@Arie-vw which OS are you on?"
    sent: "2017-07-27T11:04:15.688Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5979c88da7b406262d35ffaf"
    text: {@rebolek  For me the read succeeds, but printing will hang the console just like @iArnold  found out.}
    sent: "2017-07-27T11:03:41.350Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979c7f82723db8d5e4fac7a"
    text: {I tried on Windows and it works there. The bug is on Linux.}
    sent: "2017-07-27T11:01:12.387Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5979c75576a757f8084f3887"
    text: {No problem here reading `page`, but warning do not try to `print page` or console hangs.}
    sent: "2017-07-27T10:58:29.922Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5979c3e245fc670746cf9976"
    text: {@Arie-vw try it yourself in Red, server returns error for me.}
    sent: "2017-07-27T10:43:46.260Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5979c3d5c101bc4e3ac591b7"
    text: "Yes, maybe the read does not behave properly ..."
    sent: "2017-07-27T10:43:33.767Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979c3b845fc670746cf98fd"
    text: {@Arie-vw I can read the page with browser and `curl`, but Red gets `400`. Maybe Red's request is somehow malformed?}
    sent: "2017-07-27T10:43:04.888Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5979c3b689aea4761ddb4bfe"
    text: {@rebolek  Wait, are you kidding me?? ;-)  The error is in the title???}
    sent: "2017-07-27T10:43:02.234Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979c33e2723db8d5e4f9be9"
    text: {@rebolek  That would be me ... I created the script that generates it all, but at the moment Mike Parr is maintaining, because my health is not so good. maybe @mikeparr  can have a look?}
    sent: "2017-07-27T10:41:02.407Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979c291329651f46ec8e85f"
    text: {I have troubles reading http://www.red-by-example.org/^/```^/>> page: read http://www.red-by-example.org/^/== ^{<html>^^M^^/<head><title>400 Bad Request</title><...^/```^/Who to blame? :)}
    sent: "2017-07-27T10:38:08.989Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5979c21945fc670746cf9020"
    text: {@Arie-vw I think that the official docs are likely to be kept short and concise due to the time it takes to write and maintain them. The expectation is that user guide and tutorials will get written at some stage. I'm afraid who, when and how they will be written and made available are still unanswered questions.}
    sent: "2017-07-27T10:36:09.805Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5979bff0bc464729742d24f3"
    text: {I spent quite some time in the official Vid/View docs. They are quite nice. However, I myself learn much faster using examples. Is there a concrete plan to extend the official docs with appropriate (references to) examples?}
    sent: "2017-07-27T10:26:56.024Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979bf86614889d475f55009"
    text: "Thx guys."
    sent: "2017-07-27T10:25:10.750Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979bdc0f5b3458e30887afe"
    text: {`blk: [name "petr"] blk/name` will return "petr" ... sorry, just on a cell phone}
    sent: "2017-07-27T10:17:36.202Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5979bda2c101bc4e3ac5792c"
    text: {Adding to @pekr explanation by example:^/```text^/>> b: [i 1 j 2]^/== [i 1 j 2]^/>> i: 1^/== 1^/>> b/i^/== 1^/>> b/:i^/== i^/```}
    sent: "2017-07-27T10:17:06.780Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5979bd2476a757f8084f0bb4"
    text: {As for the colon - in csse of blk/value, Red would lookup for the literal value given, whereas what you want is a reference, hence the need of the get word. Well, my explanation might not be technically accurate, but you get an idea}
    sent: "2017-07-27T10:15:00.882Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5979bca12723db8d5e4f8250"
    text: {BTW is this the right way to check for OS where pgm runs?}
    sent: "2017-07-27T10:12:49.844Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979bc88614889d475f54566"
    text: "Pastebin https://pastebin.com/RRtCa520"
    sent: "2017-07-27T10:12:24.329Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979bc7e89aea4761ddb2e91"
    text: {I did find out that I needed to add a colon befor i in line 18 to get it to work. Why is that?}
    sent: "2017-07-27T10:12:14.480Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5979bc56f5b3458e3088763a"
    text: {@dockimbel  App now working as I like. BTW thx for teaching me a few Red things in the amended version.}
    sent: "2017-07-27T10:11:34.325Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "59799bf7614889d475f4bb7e"
    text: {Some people have toes so long that you will step on them even if you are on the other side of the planet.^/There was nothing rude/offensive about the remark by me that was deleted. ^/And thanks for another indirect insult.}
    sent: "2017-07-27T07:53:27.012Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5979991c89aea4761ddaa494"
    text: {@pekr There is no need for more strict rules, just basic netiquette is enough. Once again, some people are not capable to reach that required minimum by themself.}
    sent: "2017-07-27T07:41:16.536Z"
    editedAt: "2017-07-27T07:42:38.304Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597998801c8697534a641b1b"
    text: {I can understand, that once the community grows and we will see hundreds of ppl here, more strict rules might be needed to handle various kind of communications ...}
    sent: "2017-07-27T07:38:40.033Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5979985ebc464729742c824e"
    text: {@dockimbel I would still like, if possible, to keep the community as much friendly, as possible. I just hope we don't lead to kind of sterila amiga.org like forum rules, where asking a moderator, why some action was taken, lead to automatic ban. We don't need to go that far imo ...}
    sent: "2017-07-27T07:38:06.628Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5979982776a757f8084e76b0"
    text: {ah, I thought that only a message author himself, for short period of time, can delete a message. }
    sent: "2017-07-27T07:37:11.256Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59799789329651f46ec841a2"
    text: {@pekr Rude/offensive messages are deleted and the owner gets notified. Unfortunately, moderation is a necessity in every community, as some people are not capable of behaving properly by themself.}
    sent: "2017-07-27T07:34:33.928Z"
    editedAt: "2017-07-27T07:42:47.782Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5979922f45fc670746ced03d"
    text: {The content of the message was agreed amongst the Red Team before it was posted.}
    sent: "2017-07-27T07:11:43.098Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597991e7bc464729742c66e5"
    text: {It was created with the express purpose of being used to moderate these forums so that messages from the Red Team don't have to be posted by one of them.}
    sent: "2017-07-27T07:10:31.056Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597991a7a7b406262d351e4a"
    text: {I can confirm that RedLangTeam_twitter is genuine.}
    sent: "2017-07-27T07:09:27.851Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597991544bcd78af56ed2128"
    text: "Looks more and more that it isn't official!"
    sent: "2017-07-27T07:08:04.594Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "597991292723db8d5e4ed307"
    text: "@geekyi wasn't expecting those embeds.."
    status: true
    sent: "2017-07-27T07:07:21.747Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "597991251c8697534a640061"
    text: {@dockimbel In order to avoid confusion, we would urgently need confirmation from you if this RedLangTeam_twitter account is yours or not. If not, it is rather that account that should be blocked....}
    sent: "2017-07-27T07:07:17.780Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5979910c89aea4761dda8723"
    text: {@dander [RedLangTeam](https://twitter.com/RedLangTeam) is new (created this month), so I don't know, [red_lang](https://twitter.com/red_lang) is official}
    sent: "2017-07-27T07:06:52.845Z"
    editedAt: "2017-07-27T07:09:31.749Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5979900c2723db8d5e4ed01c"
    text: {You know, in the past, and for the 20 years in Rebol community, nothing like that would be needed. I do remember excluding some member from Altme due to religious attacks, or vexcerciser or what was his nick here, who was really rude and attacked just anyone. I am also not sure such public exposure was needed, but well, whatever, if those complains of other community memebers are valid ....}
    sent: "2017-07-27T07:02:36.229Z"
    editedAt: "2017-07-27T07:03:05.310Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59798fa545fc670746cec6b4"
    text: {Well, as for public channels here, I can't see any behaviour, which could be marked as being "rude". Surely I can't speak for private communication ...}
    sent: "2017-07-27T07:00:53.442Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59798f53c101bc4e3ac4b5c2"
    text: {Can someone confirm whether that "Red Team" account is real? I've never seen it used here before. I think the official Twitter account is `red_lang`.}
    sent: "2017-07-27T06:59:31.199Z"
    editedAt: "2017-07-27T06:59:43.984Z"
    v: 2
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59798470c101bc4e3ac48cea"
    text: {@RedLangTeam_twitter  I would like those complainers to come forward and tell me themselves. Even with newcomers I have a friendly contact and point them toward usefull information. Perhaps some of those people can tell you their experience.}
    sent: "2017-07-27T06:13:04.066Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "597973a245fc670746ce67d2"
    text: {@iArnold We continue to get complaints about your behaviour from the Red community. These include repeatedly making disparaging comments about other members of the community, attempting to paint a bad image of both Red and the Red Team, and being openly rude to newcomers. You have not only been doing this publicly, but also through unsolicited private messages. This is a last and final warning.^/^/We are trying to foster a welcoming, tolerant community working together with consideration and respect towards each other. We are asking you to stop such behaviour. If you choose not to do so, you can either voluntarily leave the community or you will be excluded from all Red communication channels. Your actions indicate that you don't like and respect the people here, including the project leaders, you may be happier spending time elsewhere.}
    sent: "2017-07-27T05:01:22.589Z"
    v: 1
    author: "5979717bd73408ce4f6ef1ad"
) #(
    id: "59795f2789aea4761dd9edaa"
    text: {@honix Nice! A couple of remarks:^/* You can use `as-pair x y` instead of `make pair! reduce [x y]`, faster and simpler.^/* If you want your drawing to be done in *retain* mode instead of *immediate* mode, you can create an `image!` and draw on it with a cleared block each time, that should allow to maintain constant speed regardless of the number of drawing commands. Though, use that option only if you encounter performance issues.}
    sent: "2017-07-27T03:33:59.109Z"
    editedAt: "2017-07-27T03:37:00.058Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59790dd4c101bc4e3ac329d6"
    text: {@honix, nice! You've probably already found other graphics demos. If not, check out https://github.com/red/code/tree/master/Scripts. You're ramping up fast.}
    sent: "2017-07-26T21:47:00.639Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59790a0b2723db8d5e4d2c93"
    text: {@9214 and who interested, i found a solution! [code](https://gist.github.com/honix/76a9cffc1b7bf5804ed9d854e33bca55)}
    sent: "2017-07-26T21:30:51.037Z"
    editedAt: "2017-07-26T21:31:01.419Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5978f9a84bcd78af56eb30dd"
    text: {and there's [`red/gui-branch room`](https://gitter.im/red/red/gui-branch) if you want to ask questions specificly about `View` `VID` and `Draw`.}
    sent: "2017-07-26T20:20:56.408Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5978f732614889d475f29718"
    text: {also, take a look at [Eve clock demo](https://github.com/red/code/blob/master/Showcase/eve-clock.red)}
    sent: "2017-07-26T20:10:26.921Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5978f69ba7b406262d331f4c"
    text: {@honix nice! Though, maybe you should use `to` instead of `make` (not sure if it makes any difference)?}
    sent: "2017-07-26T20:07:55.023Z"
    editedAt: "2017-07-26T20:08:03.202Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5978f44976a757f8084c59ef"
    text: {@9214 My example: https://gist.github.com/honix/49e15e3fff1ba539ed9d6cb941280739^/Buffer is cleared every redraw now, but if it doesn't we will seeing full circle. I can append drawing commands on top but it will hurt performance.^/In your example it means draw a line in top of box.}
    sent: "2017-07-26T19:58:01.264Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5978f1cf4bcd78af56eb1201"
    text: {@honix you mean something like this?^/```text^/view [^/    b: base draw [box 10x10 50x50]^/    i: button "redraw" on-click [^/        b/draw/1: 'line^/    ]^/]^/```}
    sent: "2017-07-26T19:47:27.567Z"
    editedAt: "2017-07-26T19:47:34.334Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5978ef5da7b406262d32fdb1"
    text: {Hello! It is possible to draw updated block without clearing (by default) base face?}
    sent: "2017-07-26T19:37:01.230Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5978c6781c8697534a613347"
    text: {@KDr2 You can't free the resources, but you can avoid allocating them. Most functions in Red doing implicit series allocations are providing ways to reuse existing series (the `/into` refinement). That will be extended to cover more functions, so that, if you want, you could write Red apps with GC turned off, and still have a stable memory usage. If you look at some of our demos in red/code repository, we are already using that to keep memory usage stable or increasing very slowly.}
    sent: "2017-07-26T16:42:32.756Z"
    editedAt: "2017-07-26T16:43:35.758Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5978c604a7b406262d324f42"
    text: "@dockimbel  Thx. will dive in."
    sent: "2017-07-26T16:40:36.126Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5978c5ab76a757f8084b8b87"
    text: ":feelsgood:"
    sent: "2017-07-26T16:39:07.506Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5978c56ebc4647297429afa0"
    text: "@9214  You tried? :see_no_evil:"
    sent: "2017-07-26T16:38:06.055Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5978c4fbbc4647297429adee"
    text: {@Arie-vw `enter` key is consumed by some faces and converted to an `enter` event, see the global event handler in charge of that [here](https://github.com/red/red/blob/master/modules/view/view.red#L1045).}
    sent: "2017-07-26T16:36:11.415Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5978be0ac101bc4e3ac1ee31"
    text: {:smiling_imp: ^/```text^/Red [Title: "fork bomb!"]^/^/cd <path to toolchain>^/call form compose [red (system/options/script)]^/```}
    sent: "2017-07-26T16:06:34.375Z"
    editedAt: "2017-07-26T16:06:55.762Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5978bc53bc46472974298558"
    text: {Yes, I see. But when I click the ENTER key right after the app starts (so without clicking in the field)  shouldn't it show that the ENTER key has been pressed in event/key?}
    sent: "2017-07-26T15:59:15.511Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "59789db319147ac32314873e"
    text: {> There's no GC yet, simple one is planned for one of the next releases ...^/So should we free the resource manually somwhow?  or just leave them there?}
    sent: "2017-07-26T13:48:35.422Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "597888724bcd78af56e93db2"
    text: "@Arie-vw It works here when I type in the field."
    sent: "2017-07-26T12:17:54.551Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59788834614889d475f09111"
    text: {In this version event/key does not show in the print statement as if it is "empty".}
    sent: "2017-07-26T12:16:52.593Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597886b62723db8d5e4ae2f0"
    text: "OK. Will check this and thx!"
    sent: "2017-07-26T12:10:30.325Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5978856dbc46472974287e99"
    text: {@Arie-vw [Here](https://gist.github.com/dockimbel/acec3b431ab5767f8e5a137dd6101776) is a fixed version. `event` is of `event!` type and will just print "event". What you want is `event/key`. Useful tool you are writing there. It would make a nice console extension app once we get the console plugin API. ;-)}
    sent: "2017-07-26T12:05:01.653Z"
    editedAt: "2017-07-26T12:07:13.087Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59786e1045fc670746ca77bf"
    text: {When I interpret this https://pastebin.com/jZXFU4Lj script the print in the actors: section shows the literal word event for the event. Is that correct?  I expected a real event there (like 'key) The face is obviously the whole window.}
    sent: "2017-07-26T10:25:20.694Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "59785977c101bc4e3ac0313c"
    text: {@southwolf Sorry about https://github.com/iceflow19/c2reds^/^/Its one of my side projects that I really haven't had time or inspiration to get to, that was right around when I was finishing up my bachelors. Only the clang binding and red level wrapper was ported from c2r3. The higher level processing logic hadn't been adapted over to red from rebol yet. Maybe next year I'll come back to it, or maybe give it as a side project to one of the programmers in my LLC.}
    sent: "2017-07-26T08:57:27.237Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "597821bd614889d475eee584"
    text: "Yep it's a name-mangling issue"
    sent: "2017-07-26T04:59:41.283Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59781e1145fc670746c930cf"
    text: "Gregg nailed it down."
    sent: "2017-07-26T04:44:01.418Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5977ef7d614889d475ee403b"
    text: {Name mangling is lkely still an issue, if the C++ lib doesn't use `extern C`.}
    sent: "2017-07-26T01:25:17.042Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5977e262714ea96f78218e95"
    text: {> This release brings an important improvement: structures can now be passed and returned by value on internal and external function calls. They can also now be inlined in other structures. This is achieved by putting the value keyword after a struct! type declaration:}
    sent: "2017-07-26T00:29:22.332Z"
    v: 1
    author: "55f839dc0fc9f982beb0c2f1"
) #(
    id: "5977e24df5b3458e308168fa"
    text: {@PeterWAWood It used to be that it couldn't bind to C++ libs that used pass by value for structs, but based on the latest blog post it seems that has been implemented, so I would imagine C++ libs that were problematic before can now be used }
    sent: "2017-07-26T00:29:01.812Z"
    editedAt: "2017-07-26T00:30:34.447Z"
    v: 2
    author: "55f839dc0fc9f982beb0c2f1"
) #(
    id: "5977e03289aea4761dd440e0"
    text: {@RnBrgn @southwolf  As I understand, they also need to follow one of the C calling conventions, `cdecl` or `stdcall`. I don't think that Red can bind directly to C++ libs. }
    sent: "2017-07-26T00:20:02.531Z"
    editedAt: "2017-07-26T00:22:15.048Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5977df5389aea4761dd43ede"
    text: {@RnBrgn As long as they can produce .dll/.so/.dylib}
    sent: "2017-07-26T00:16:19.615Z"
    v: 1
    author: "5508042215522ed4b3dd6119"
) #(
    id: "5977d4c72723db8d5e4859bf"
    text: {@pekr  "Red can bind to any lib"  .  What  programming language libs can Red bind to other than  C ?}
    sent: "2017-07-25T23:31:19.000Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5977b39a714ea96f7820e637"
    text: "Maybe more suited to the primer. "
    sent: "2017-07-25T21:09:46.541Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5977ab1276a757f808471f51"
    text: {@greggirwin func vs function would be a great wiki topic. Guru meditations? Or somewhere else?}
    sent: "2017-07-25T20:33:22.401Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59778993f5b3458e3080015d"
    text: ":+1: "
    sent: "2017-07-25T18:10:27.656Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "597783df45fc670746c6efef"
    text: {@eranws :point_up: [12 июля 2017 г., 21:37](https://gitter.im/red/red/welcome?at=59665039c101bc4e3a7a9139)}
    sent: "2017-07-25T17:46:07.450Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59778370714ea96f781ffd48"
    text: {While were at it -  would I prefer func? Any thumb-rule for func vs. function?}
    sent: "2017-07-25T17:44:16.185Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5977831589aea4761dd2c669"
    text: {Thanks! I used 'function because I didn't want to change things in the global scope. Using 'any is cleaner indeed.}
    sent: "2017-07-25T17:42:45.825Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "597781be89aea4761dd2c016"
    text: {It's a very clean and clear implementation of an obfuscated language. }
    sent: "2017-07-25T17:37:02.964Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5977817a714ea96f781ff337"
    text: {Not that your code needs to be any more concise. :^^)}
    sent: "2017-07-25T17:35:54.401Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5977811c614889d475ec8a9d"
    text: {Also, a more idiomatic way to do `or` ops is with `any`. e.g.^/```^/tf: func [v][either any [v = true  v = -1][-1][0]]^/```}
    sent: "2017-07-25T17:34:20.797Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59777fec1c8697534a5bf4c1"
    text: {If you don't have any local `set-word!` args, you can use `func` instead of `function`. Not required of course. Not sure if you've seen the difference. }
    sent: "2017-07-25T17:29:16.742Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59777f4876a757f808465cdf"
    text: {:point_up: [July 24, 2017 11:58 PM](https://gitter.im/red/red?at=5976ddec4bcd78af56e26935) @eranws, ah the obfuscation. Nice.}
    sent: "2017-07-25T17:26:32.023Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59777e5289aea4761dd2addd"
    text: {@kskarthik The link in Nenad's message should take you there.}
    sent: "2017-07-25T17:22:26.070Z"
    editedAt: "2017-07-25T17:26:50.153Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "59776199c101bc4e3abc7aba"
    text: "There? Where?"
    sent: "2017-07-25T15:19:53.582Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "597760e9714ea96f781f538f"
    text: {@kskarthik You got an answer already from @PeterWAWood there: :point_up: [July 25, 2017 7:59 PM](https://gitter.im/red/red/welcome?at=597732ab89aea4761dd136f3)}
    sent: "2017-07-25T15:16:57.246Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59775f7a4bcd78af56e4b469"
    text: {Rebol seems to be dead... How do we manage to port red to new toolchain then?}
    sent: "2017-07-25T15:10:50.261Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "59775e9c2723db8d5e465664"
    text: "Oh... Any workaround then?"
    sent: "2017-07-25T15:07:08.716Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "59775e51f5b3458e307f3302"
    text: {Since Rebol2 is not an open source software, it won’t be easy...}
    sent: "2017-07-25T15:05:53.511Z"
    v: 1
    author: "5508042215522ed4b3dd6119"
) #(
    id: "59775d6e45fc670746c63a30"
    text: {Ah... Looks like it is. But, red needs rebol2 to compile & rebol is glic based. }
    sent: "2017-07-25T15:02:06.314Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "59775cd2c101bc4e3abc6264"
    text: "musl-libc.org/support.html ??"
    sent: "2017-07-25T14:59:30.696Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59775bae76a757f80845ad94"
    text: {Hi guys! I believe this is the right place to ask about compiling red with musl or please guide me to the related place}
    sent: "2017-07-25T14:54:38.609Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "5977558e76a757f808458b3a"
    text: "Thx again!"
    sent: "2017-07-25T14:28:30.459Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597755674bcd78af56e483dc"
    text: {@Arie-vw It's documented [there](https://doc.red-lang.org/en/view.html#_event_datatype) under:^/>  Here is the list of special keys returned as words by event/key}
    sent: "2017-07-25T14:27:51.879Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5977551c614889d475ebb899"
    text: "@dockimbel  Thx. for both answers!"
    sent: "2017-07-25T14:26:36.981Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "59775509714ea96f781f1882"
    text: "@Arie-vw The representation is `'enter` word."
    sent: "2017-07-25T14:26:17.876Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597754d81c8697534a5b26ab"
    text: {Question 2:  I could not find what representation (something like #"?") the enter key has in the actors: spec for on-key }
    sent: "2017-07-25T14:25:28.493Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597754bc89aea4761dd1e5ce"
    text: {@Arie-vw Q1: IIRC, we did not implement support for it in VID yet.}
    sent: "2017-07-25T14:25:00.428Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5977548f45fc670746c60f0b"
    text: {Question 1: is it still possible in Red view to have a #"?" key in a button spec as in Rebol?}
    sent: "2017-07-25T14:24:15.503Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5977545a329651f46ebf91ee"
    text: "@Dobeash Great. Thx!"
    sent: "2017-07-25T14:23:22.224Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "597734a7bc46472974231eed"
    text: {@jackalcooper The first one we are making is a minimal mark&sweep, stop-the-world compacting collector. The target one (in 0.9.0) is a more sophisticate one,  generational and incremental compacting collector, with a stop-the-thread behavior during the GC pass in worst case.}
    sent: "2017-07-25T12:08:07.846Z"
    editedAt: "2017-07-25T12:08:25.728Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5977324576a757f80844dafa"
    text: {https://github.com/iceflow19/c2reds^/https://github.com/rebolek/parse-c-header}
    sent: "2017-07-25T11:57:57.982Z"
    v: 1
    author: "5508042215522ed4b3dd6119"
) #(
    id: "59772a4b329651f46ebecd3b"
    text: {@southwolf  :point_up: [July 25, 2017 12:09 PM](https://gitter.im/red/red?at=5976ee93c101bc4e3aba6d78) which ones? Maybe one just needs to be updated}
    sent: "2017-07-25T11:23:55.348Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59771f70bc4647297422c067"
    text: {I guess the main reason for this behaviour is that they all read the input from stdin so cannot distinguish between a pasted newline and a typed one.}
    sent: "2017-07-25T10:37:36.577Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59771f3289aea4761dd0daa7"
    text: "thanks Peter!"
    sent: "2017-07-25T10:36:34.227Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59771f19329651f46ebe9a87"
    text: {It is common in most REPLs. I tried it with 7 - Python, Lua, Ruby, Swift, JavaScript Core, Spider Monkey and V8. They all show the same behaviour.}
    sent: "2017-07-25T10:36:09.268Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59771c2e89aea4761dd0cc62"
    text: {I've found interesting behavior in scripts copypasted to Red REPL: if script ends with a newline (i.e. empty line) it will automaticly run. ^/```text^/Red []^/^/print "hit enter to run manually"^/```^/```text^/Red []^/^/print "script runned automaticly"^/; newline or comment here^/```^/It's a nice thing for demos, but while we don't have security features, it may be nice to block such behavior. What do you think?}
    sent: "2017-07-25T10:23:42.156Z"
    editedAt: "2017-07-25T10:25:21.270Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5976eecb89aea4761dd009f7"
    text: "Maybe I must convert one by hand… Haha"
    sent: "2017-07-25T07:10:03.656Z"
    v: 1
    author: "5508042215522ed4b3dd6119"
) #(
    id: "5976ee93c101bc4e3aba6d78"
    text: {I’ve found serveral tools to scan a C header and convert to Red/System, but none of them works when I tried. }
    sent: "2017-07-25T07:09:07.705Z"
    v: 1
    author: "5508042215522ed4b3dd6119"
) #(
    id: "5976ee692723db8d5e444541"
    text: {Well, Red can bind to just any lib, but I just haven't heard about the low level socket library wrapper for Red yet. Native socket implementation will come in terms of 0.7.0 release.}
    sent: "2017-07-25T07:08:25.300Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5976eb33f5b3458e307d294e"
    text: "Hi, is there any usable socket lib for Red?"
    sent: "2017-07-25T06:54:43.233Z"
    v: 1
    author: "5508042215522ed4b3dd6119"
) #(
    id: "5976ea974bcd78af56e29b90"
    text: {@jackalcooper it is still in a branch https://github.com/red/red/tree/simple-gc but master branch was merged into that branch recently.}
    sent: "2017-07-25T06:52:07.788Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5976e7ee714ea96f781d1e89"
    text: "Thank you."
    sent: "2017-07-25T06:40:46.071Z"
    v: 1
    author: "56cfc45de610378809c38d0c"
) #(
    id: "5976e6f5f5b3458e307d1b3c"
    text: {There's no GC yet, simple one is planned for one of the next releases ...}
    sent: "2017-07-25T06:36:37.825Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5976e3a589aea4761dcfdea9"
    text: {Hi, everyone. Wondering where I can find more info about Red's GC? Could not even find if it is a stop the world GC.}
    sent: "2017-07-25T06:22:29.105Z"
    editedAt: "2017-07-25T06:23:06.657Z"
    v: 2
    author: "56cfc45de610378809c38d0c"
) #(
    id: "5976ddec4bcd78af56e26935"
    text: {did I hear anyone say "compiler for false-language in Red"? probably not... anyhow - here it is: https://github.com/eranws/red-false}
    sent: "2017-07-25T05:58:04.575Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "59767959c101bc4e3ab8e3ac"
    text: {@solisoft During the alpha phase Red, including libRed, is 32-bit only. As far as I know, it cannot easily be used with recent versions of Xcode. I have tested it with the gcc compiler on macOS.^/```text^/gcc -m32 <path to>/libRed.dylib -o red-in-c red-in-c.c^/```}
    sent: "2017-07-24T22:48:57.990Z"
    editedAt: "2017-07-24T22:49:21.007Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59765acdf5b3458e307b4655"
    text: {As you would any other dylib. Nothing special AFAIK.}
    sent: "2017-07-24T20:38:37.400Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5976583a2723db8d5e423ba4"
    text: "Hi there, how do you install libred on OSX?"
    sent: "2017-07-24T20:27:38.291Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "597619c7329651f46ebaa610"
    text: "And then another one, with unique values ;)"
    sent: "2017-07-24T16:01:11.717Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5976197cc101bc4e3ab71f39"
    text: {I thought so.  It would be nice to have a structure with guaranteed key order.}
    sent: "2017-07-24T15:59:56.825Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597618ed4bcd78af56df6f94"
    text: {@rebolek For now it is, but it's implementation-specific, that could change in the future, if we change the underlying data structure.}
    sent: "2017-07-24T15:57:33.189Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5976167d45fc670746c0fb3e"
    text: { @dockimbel Is the order of keys in map/object guaranteed?}
    sent: "2017-07-24T15:47:09.193Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5975d2df76a757f8083f552d"
    text: "thanks"
    sent: "2017-07-24T10:58:39.401Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5975d27fc101bc4e3ab5ccd6"
    text: {@henrikmk You can have a look at our [`red/code`](https://github.com/red/code) repo, especially in Scripts and Showcase folder to see what View and VID can already achieve.}
    sent: "2017-07-24T10:57:03.590Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5975d1ec329651f46eb95564"
    text: "@9214, @dockimbel great, thanks :-)"
    sent: "2017-07-24T10:54:36.239Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5975d1daf5b3458e30789da9"
    text: {@henrikmk Face timers are fully supported. Works the same as in R2/View. Also, there is a [`rate`](https://doc.red-lang.org/en/vid.html#_rate) keyword in VID}
    sent: "2017-07-24T10:54:18.376Z"
    editedAt: "2017-07-24T10:55:24.737Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5975d1ca329651f46eb95501"
    text: {@henrikmk AFAIK View has [`on-time` handler](https://doc.red-lang.org/en/view.html#_event_names), hope @dockimbel will tell you more}
    sent: "2017-07-24T10:54:02.044Z"
    editedAt: "2017-07-24T10:54:22.322Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5975d14ec101bc4e3ab5c775"
    text: {does Red support timers yet? I see only a couple of vague references to RATE in the GUI docs.}
    sent: "2017-07-24T10:51:58.158Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5975addf714ea96f78182cdb"
    text: {`complement` on`tuple!` has already been put in as a wish by me, #1956}
    sent: "2017-07-24T08:20:47.686Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5975adce97cedeb04826d3bf"
    text: "OK :)"
    sent: "2017-07-24T08:20:30.244Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5975ad9fbc464729741caa0a"
    text: {@KDr2 We have plans for support 64-bit CPU/OS, but it is not scheduled yet for now. Don't expect it before 0.8.0 though.}
    sent: "2017-07-24T08:19:43.305Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5975ad32614889d475e494f0"
    text: {@PeterWAWood Might be useful to support `complement` on `tuple!`.}
    sent: "2017-07-24T08:17:54.387Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5975acda0cef4fed2eb809f4"
    text: {Another question, I didn't find any plan about x64(amd64) supporting on the mile stone(on trello),  is this https://trello.com/c/zUiFKF8B/159-095-port-the-toolchain-to-red-if-time-permits one relevant?}
    sent: "2017-07-24T08:16:26.049Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
)#(
    id: "5975a83242d2f6102587f55c"
    text: ":laughing: "
    sent: "2017-07-24T07:56:34.193Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5975a746c101bc4e3ab50f58"
    text: {Is this a funny bug?^/```text^/>> white = reverse black^/== false^/```}
    sent: "2017-07-24T07:52:38.187Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59759fc7714ea96f7817f31d"
    text: {Haha good one :) So if there is a Blue language, keep away from it :)}
    sent: "2017-07-24T07:20:39.739Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59758f0189aea4761dca6ebf"
    text: {Funny code:^/```lisp^/>> red = reverse blue^/== true^/```}
    sent: "2017-07-24T06:09:05.453Z"
    editedAt: "2017-07-24T06:09:25.436Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59758c950cef4fed2eb80838"
    text: "@dockimbel thanks!"
    sent: "2017-07-24T05:58:45.350Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "59756f014bcd78af56dcab96"
    text: {@KDr2 I suspected something like that. ;-) I can give a try in the next days or next weekend to implement that multi-instances support, as it's not a big work, though, my schedule this week is already very heavy, so no guarantees.}
    sent: "2017-07-24T03:52:33.959Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597568b80cef4fed2eb807db"
    text: {And I want to make a red interpretor pool, which the goroutines can get red instance from }
    sent: "2017-07-24T03:25:44.023Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5975685651915d962af6be45"
    text: {yeah,  I'm trying embed libRed into to a web server witten in golang:  use go runtime to handle the connetction/request,  use red code to handle the  bussiness logic}
    sent: "2017-07-24T03:24:06.345Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "597567272723db8d5e3e282a"
    text: {@KDr2 [Not yet](https://doc.red-lang.org/en/libred.html#_managing_the_library), but adding multiple instances support is on our todo-list, as we figured out a cheap way to achieve it without changing anything in our runtime library. Which use-case do you have in mind for a libRed in a multithreaded environment? Is it server-side related?}
    sent: "2017-07-24T03:19:03.694Z"
    editedAt: "2017-07-24T03:20:37.944Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5975668bc101bc4e3ab43358"
    text: {@JacobGood1 Don't remember seeing that before, good finding. I remember Victor (the author) from the Rebol community though.}
    sent: "2017-07-24T03:16:27.506Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59755d1fc101bc4e3ab41935"
    text: {@AlexanderBaggett what do you want to know? For some tips, see https://github.com/red/red/wiki/Using-Red-as-CGI }
    sent: "2017-07-24T02:36:15.692Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597558f897cedeb04826d149"
    text: {is  libred thread safe?  If I embed the red interpretor (libred) into a multi-threaded prgramm, is there a way to make each thread has its own interpretor?}
    sent: "2017-07-24T02:18:32.912Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "59751cda1c8697534a527256"
    text: {@Arie-vw Not yet ... but now that 0.6.3 is out I'm looking at upgrading a bunch of stuff to be R3/Red compatible.}
    sent: "2017-07-23T22:02:02.926Z"
    v: 1
    author: "5580a11215522ed4b3e203d9"
) #(
    id: "5974f3014bcd78af56db1cbb"
    text: {@JacobGood1, nice find! I haven't seen Viktor Pavlu around for many years. He did some great work, with Andreas Bolka I believe, in the early days of Rebol/View.}
    sent: "2017-07-23T19:03:29.019Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5974ebfbbc464729741a29ce"
    text: {you can use it in a `cgi` way where script runs once on request and only uses stdio/out}
    sent: "2017-07-23T18:33:31.168Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5974ebc2714ea96f78159d8f"
    text: {i would say it's not ready for "normal" web development}
    sent: "2017-07-23T18:32:34.631Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5974e54ec101bc4e3ab28c77"
    text: {Has anyone used red for web development and if so do you have any tips?}
    sent: "2017-07-23T18:05:02.066Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5974de94329651f46eb60100"
    text: {@dockimbel Have you seen this paper? It might be of interest to you: http://www.complang.tuwien.ac.at/kps2015/proceedings/KPS_2015_submission_55.pdf}
    sent: "2017-07-23T17:36:20.870Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5974de6c89aea4761dc82880"
    text: "@noformnocontent `red --help`"
    sent: "2017-07-23T17:35:40.416Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5974de53614889d475e1d05d"
    text: {where do i find a list of current compile targets?}
    sent: "2017-07-23T17:35:15.634Z"
    v: 1
    author: "58693aacd73408ce4f408202"
) #(
    id: "59748c46bc4647297418d49f"
    text: {@Dobeash Is there a working version of rebdb available for Red?}
    sent: "2017-07-23T11:45:10.740Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "59746f1f4bcd78af56d93d7e"
    text: "@singam96 Thanks, I've got it in the ticket."
    sent: "2017-07-23T09:40:47.987Z"
    editedAt: "2017-07-23T09:41:03.984Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59746a361c8697534a4ff75e"
    text: {[![image.png](https://files.gitter.im/red/red/vQiB/thumb/image.png)](https://files.gitter.im/red/red/vQiB/image.png)}
    sent: "2017-07-23T09:19:50.275Z"
    v: 1
    author: "57004112187bb6f0eadd92d0"
) #(
    id: "597452be76a757f80839fde1"
    text: {@tanstaaf1 I do go back, maybe once a year, to that first blog article and reflect on the beginning of this incredible adventure. There would be a lot to say about the whole Red story, and what's driving me, maybe I should  write it all down someday and publish it (we'll see that after Red 2.0). ;-)^/^/> What is in your head right now as you look to 6.4, specifically, and the incredibly steep trail still ahead?^/^/That is not how I see it. For me, we passed the top of the Red mountain after 0.6.2 and we are now descending, which means faster pace and easier, though the mountain being very high and full of obstacles, it's still a relatively long way down. ;-) What is in my head right now would take many pages to describe, so I'll just reduce it to the most important concern right now: how to make a satisfying 0.6.4 while spending as little time as possible on it, so we can advance on the last big milestones. Not only those last milestones are critical for us to be able to reach our goals, but they are also very exciting challenges, for which I already have battle plans, so I'm impatient to dive in!^/^/> From the first blog entry it is clear you envisioned large parts of what has been created but that your vision and path were subject to change.^/^/Change is the only constant thing in life. ;-) Path has changed slightly, but the vision is still the same. Here are the main causes of changing my initial plan:^/* I realized during the first year that building the "static" Red first, then the "dynamic" Red later was not satisfying to me, as I would miss the Rebol-like flexibility in the "static" Red too much, so will most probably the users, so I decided to switch them and do the "dynamic" Red first (on par with Rebol) and leave the "static" one for later.^/* Support for floats, Linux, ARM and many other non-Core features were not planned to be implemented before 1.0. Without that, we could have moved way faster to 1.0. Though, because of the community contributions and pressure, especially the first couple of years, I relaxed my plans for the greater good. When the opportunity to access to VC money presented itself, GUI became another low-priority feature that had to move to first position.^/* I have fully embraced the open source way of building software from the beginning. That comes with big benefits, but also costs, like a big part of my time being spent on interacting with countless people on daily basis. I didn't account for that cost at all in my initial plan, mainly because I didn't expect that many followers until 1.0. Among those followers, both from Rebol community and newcomers, I tried/try to absorb and process as much knowledge and experience they were/are willing to share with me, so this results in, sometimes, changing my opinion on some features or priorities.^/* I have invested all my personal money into Red during the first couple of years, after running out of money, I had to change some plans, or stop.^/^/> I look at trello and I have some specifics on what you hope will make it in 6.4, but very little real assurance I really understand the vision.^/^/The 0.6.4 is an important milestone that will make the GUI console the central piece of the Red world. We have big plans for the console, 0.6.4 is just a first move into that direction. I prefer not to give more details on that until it's actually built.^/^/> I think it might be worthwhile (maybe even helpful for maintaining your energy) to give as a vision vs reality checkup after these years and, perhaps, occasionally going forward??^/^/I'm not sure to understand precisely what you mean there. The vision has not changed since day 1, the goals are still the same, only the priorities for the different tasks and milestones have changed.}
    sent: "2017-07-23T07:39:42.744Z"
    editedAt: "2017-07-23T07:43:59.011Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5973f5a81c8697534a4eae80"
    text: {@KDr2 Here's a factory approach which will create "private" words for each function created.^/```text^/Red[]^/ func-factory: func [template! func-name  /local b] [^/^-b: []^/    append b make template! []^/    get in last b func-name^/]^/b-func!: make object! [^/^-a: 1^/^-b-func: func[b] [^/^-^-print ["b:" b]^/        print ["a:" a]^/        print a + b^/        a: a + b^/^-]^/]^/^/f: func-factory b-func! 'b-func^/f 2^/f 2^/g: func-factory b-func! 'b-func^/g 2^/f 2^/```}
    sent: "2017-07-23T01:02:32.169Z"
    editedAt: "2017-07-23T01:02:42.848Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973627919147ac323145838"
    text: "thanks :thumbsup: "
    sent: "2017-07-22T14:34:33.345Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5973622cf5b3458e30707fa8"
    text: {@KDr2 Here is a better version incorporating the approach suggested by @rebolek. It should be garbage collector proof.^/```text ^/a-func: func [/local o] [^/^-o: make object! [^/    ^-a: 1^/    ^-b-func: func [b] [^/        print ["b:" b]^/        print ["a:" a]^/        print a + b^/        a: a + b^/    ^-]^/^-]^/    get in o 'b-func^/]^/^/f: a-func^/f 2^/```}
    sent: "2017-07-22T14:33:16.140Z"
    editedAt: "2017-07-22T14:33:26.682Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597355fcc101bc4e3aadb628"
    text: {Here's the final instalment:^/```text^/>> oo: make object! [^/[    y: none^/[    ]^/== make object! [^/    y: none^/]^/>> o: make object! [^/[    x: none^/[    z: 99^/[    set 'x z^/[    set in oo 'y z^/[    ]^/== make object! [^/    x: 99^/    z: 99^/]^/>> x^/*** Script Error: x has no value^/*** Where: catch^/*** Stack:  ^/^/>> y^/*** Script Error: y has no value^/*** Where: catch^/*** Stack:  ^/^/>> oo/y^/== 99^/>> o/x^/== 99^/>> ^/```}
    sent: "2017-07-22T13:41:16.341Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973556fbc46472974151541"
    text: ":+1: I know kung-fu!"
    sent: "2017-07-22T13:38:55.225Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5973547ef5b3458e30705301"
    text: {`a`exists in the context bound to `o`, `b` does not.^/`set 'a c` binds a value to `a` in the context bound to `o`^/There is no word `b` in the 'o' context so 'set 'b c' binds the value to `b` in `system/words`}
    sent: "2017-07-22T13:34:54.971Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973537e3230e14f3a83b7e6"
    text: {@PeterWAWood since `a:` and `c:` are `set-word!`s, they're binded to `o` during context construction, but `b` is setted with `set` and escapes to `system/words`?}
    sent: "2017-07-22T13:30:38.281Z"
    editedAt: "2017-07-22T13:31:00.629Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597353013230e14f3a83b637"
    text: {@9214 Try this in the console:^/```text^/>> o: make object! [^/[    a: none^/[    c: 2^/[    set 'a c^/[    set 'b c^/[    ]^/== make object! [^/    a: 2^/    c: 2^/]^/>> a^/*** Script Error: a has no value^/*** Where: catch^/*** Stack:  ^/^/>> b^/== 2^/```}
    sent: "2017-07-22T13:28:33.403Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597352722723db8d5e375e41"
    text: "Correct."
    sent: "2017-07-22T13:26:10.068Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973526476a757f80836e313"
    text: {@PeterWAWood  I see, `c-func` is `/local` to `a-func` body }
    sent: "2017-07-22T13:25:56.214Z"
    editedAt: "2017-07-22T13:26:04.503Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597351ee42d2f6102587e840"
    text: "there's no global var `c-func` in this program"
    sent: "2017-07-22T13:23:58.582Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "597351d897cedeb04826c7a1"
    text: {I don't think so, here `set` binds the function value of b-func to the local var c-func, the function value bound to c-func is returned }
    sent: "2017-07-22T13:23:36.427Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "597351bf4bcd78af56d5c877"
    text: {@9214 no `set` does not always "escape" to the global context.^/^/Try running the code  :point_up: [July 22, 2017 8:59 PM](https://gitter.im/red/red?at=59734c3cf5b3458e3070356a) and then add:^/`c-func 3`}
    sent: "2017-07-22T13:23:11.617Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597350eaf5b3458e307042d9"
    text: {@rebolek that means `set` always "escapes" into global context? cool!}
    sent: "2017-07-22T13:19:38.781Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5973505b614889d475dce581"
    text: "Thanks for letting us know."
    sent: "2017-07-22T13:17:15.722Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973504e51915d962af6b404"
    text: "on windows with -t msdos"
    sent: "2017-07-22T13:17:02.365Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5973503b0cef4fed2eb7fce7"
    text: "just compiled with 0.6.2, it works"
    sent: "2017-07-22T13:16:43.560Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "59734e0119147ac3231457c9"
    text: "thanks"
    sent: "2017-07-22T13:07:13.794Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "59734dfe0cef4fed2eb7fcc2"
    text: ":thumbsup: "
    sent: "2017-07-22T13:07:10.669Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "59734d7bf5b3458e30703953"
    text: {I'm not sure this method would survive once there is a garbage collector.}
    sent: "2017-07-22T13:04:59.333Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59734c88f5b3458e307036b6"
    text: {Whilst it can be interpreted, I doubt it can be compiled at present.}
    sent: "2017-07-22T13:00:56.833Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59734c3cf5b3458e3070356a"
    text: {@KDr2 You could try this as well:^/```text^/Red[]^/a-func: func [/local c-func] [^/^-make object! [^/    ^-a: 1^/    ^-b-func: func [b] [^/        print ["b:" b]^/        print ["a:" a]^/        print a + b^/        a: a + b^/    ^-]^/^-^-set 'c-func :b-func^/^-]^/    :c-func^/]^/^/f: a-func^/f 2^/```}
    sent: "2017-07-22T12:59:40.801Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59734be84bcd78af56d5b89c"
    text: {not sure if it counts as closure :grimacing: ^/```^/make-adder: func [n][func [x] compose [(n) + x]]^/^/add-10: make-adder 10^/add-42: make-adder 42^/probe add-10 32^/probe add-42 0^/```}
    sent: "2017-07-22T12:58:16.173Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59734bd089aea4761dc32a2f"
    text: {@KDr2 Real closures (with indefinite extent)  are not yet supported, though they can be easily simulated using object contexts: https://gitter.im/red/red?at=59003b548bb56c2d11e32289}
    sent: "2017-07-22T12:57:52.098Z"
    editedAt: "2017-07-22T13:03:10.201Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59734ba4bc4647297414f4b4"
    text: {```^/>> context [a: 1 set 'f func [x] [print ["a" a] a: x]]^/== make object! [^/    a: 1^/]^/>> f 3^/a 1^/== 3^/>> f 4^/a 3^/== 4^/```}
    sent: "2017-07-22T12:57:08.044Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973487b42d2f6102587e7fe"
    text: {I want to hide the var `a` so that no one can change it except the returned function object}
    sent: "2017-07-22T12:43:39.172Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
)#(
    id: "5973481d3230e14f3a8393a6"
    text: {There may well be another way to achieve your intention.}
    sent: "2017-07-22T12:42:05.821Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597347ec97cedeb04826c754"
    text: "OK, got it, thanks."
    sent: "2017-07-22T12:41:16.699Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "597347ba614889d475dcc36d"
    text: {@KDr2 There is no closure support in the current Red alpha. }
    sent: "2017-07-22T12:40:26.071Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973479f0cef4fed2eb7fc9f"
    text: "a closure we usually call it"
    sent: "2017-07-22T12:39:59.188Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5973475c51915d962af6b3cd"
    text: {the return value of `a-func` is anthor function `b-func`}
    sent: "2017-07-22T12:38:52.969Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5973471e81cd9a5d7e9b5a08"
    text: {No, my code is like this:^/```^/^/a-func: func [] [^/    a: 1^/    b-func: func [b] [^/        print ["b:" b]^/        print ["a:" a]^/        print a + b^/        a: a + b^/    ]^/    :b-func^/]^/^/c-func: a-func^/c-func 1^/c-func 1^/```}
    sent: "2017-07-22T12:37:50.308Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5973466a89aea4761dc3193c"
    text: {@KDr2 I'm not sure, is that what you're expecting?^/```^/^/a-func: func [/local a][^/    a: 100^/    b-func: func [b][^/        print ["b:" b]^/        print ["a:" a]^/        print a + b^/        a: a + b^/    ]^/    ^/    b-func 200^/]^/^/a-func^/```^/```^/b: 200^/a: 100^/300^/```}
    sent: "2017-07-22T12:34:50.427Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5973455542d2f6102587e7e0"
    text: "anyone tells me how to write it correctly? thx"
    sent: "2017-07-22T12:30:13.201Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5973450d0cef4fed2eb7fc86"
    text: {Hi all, I'm trying  to make a closure as below:^/```^/a-func: func [/local a] [^/    a: 1^/    b-func: func [b] [^/        print ["b:" b]^/        print ["a:" a]^/        print a + b^/        a: a + b^/    ]^/    :b-func^/]^/```^/but `a` is not visiable inside b-func}
    sent: "2017-07-22T12:29:01.146Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "59724f91bc4647297411d48b"
    text: {@dockimbel The 6.3 release somehow sparked me to go wayback to http://www.red-lang.org/2011/02/journey-begins.html.  There is a lot to read between there and 6.3, of course, but even the little wayback gave me a sense of awe (at how much was undertaken and how far you've come) and curiosity:  What is in your head right now as you look to 6.4, specifically, and the incredibly steep trail still ahead?  From the first blog entry it is clear you envisioned large parts of what has been created but that your vision and path were subject to change.  I look at trello and I have *some* specifics on what you hope will make it in 6.4, but very little real assurance I really understand the vision.  I think it might be worthwhile (maybe even helpful for maintaining your energy) to give as a vision vs reality checkup after these years and, perhaps, occasionally going forward??   Very much admire your courage and intellect. Doubly so after taking a few minutes to go wayback.}
    sent: "2017-07-21T19:01:37.620Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5972325c2723db8d5e33989b"
    text: {@singam96 Trying to uninstall an AV is an educational experience (MaCafee, yes you).}
    sent: "2017-07-21T16:57:00.240Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "597222781c8697534a487f57"
    text: {@joa-quim didnt work ... it some how locked the programdata folder ..  even uninstalled avira...}
    sent: "2017-07-21T15:49:12.402Z"
    v: 1
    author: "57004112187bb6f0eadd92d0"
) #(
    id: "5971fc86bc4647297410519e"
    text: {Another question: I notice the recent "FIX: store seconds in the integer part in time". What is the consequence for programmers, if any? Or is it just an internal change?}
    sent: "2017-07-21T13:07:18.994Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5971e1043230e14f3a7e7704"
    text: {Question: what about `point!` datatype (~ 3-D version of `pair!`). I can't find it on the ToDo lists of Trello. Is that because there is already a `%runtime/datatypes/point.reds` in the sources? But that contains only `form` and `mold` code, and is not referenced anywhere...}
    sent: "2017-07-21T11:09:56.502Z"
    editedAt: "2017-07-21T11:10:31.773Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5971c5533230e14f3a7df841"
    text: {It's good to know what people think. Sometimes it's a choice of something not great, or nothing at all.}
    sent: "2017-07-21T09:11:47.445Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5971a7fb614889d475d682d0"
    text: {Well, those rules seem to be in line with big big projects. Ditto the Code of Conduct document, where I can see stuff like: "Remember that sometimes it is best to refrain entirely from commenting" ... I wonder this comment itself is applicable to just mentioned rule :-)}
    sent: "2017-07-21T07:06:35.538Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5971a34c76a757f808306746"
    text: {Thanks @greggirwin, I know your intention was to get the ball rolling forward, only I've felt starting with a link to the existing article in the wiki and building up would have better. I guess no use me complaining now..}
    sent: "2017-07-21T06:46:36.377Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59719ad976a757f808304af4"
    text: {We can certainly have details about coding standards and tests link to other docs, to keep it shorter. Now that it's there we have a concrete basis for discussion. Thanks @geekyi .}
    sent: "2017-07-21T06:10:33.102Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597191fc329651f46eaa8e6c"
    text: {@geekyi Please provide an alternative then. One that will meet the intention of the current document to improve the quality of contributions.^/^/For example, many, if not all, of the pull requests submitted do not have tests written for them.  ^/^/^/^/}
    sent: "2017-07-21T05:32:44.026Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597188cabf7e6af22cfc59b9"
    text: "red/red@6e878c8"
    sent: "2017-07-21T04:53:30.702Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597188b5bc464729740e6598"
    text: {@geekyi feels CONTRIBUTING.md should be shorter, and more focused on source code in red/red repo @greggirwin }
    status: true
    sent: "2017-07-21T04:53:09.471Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59712c3dc101bc4e3aa5e16f"
    text: "@greggirwin fixed, thanks."
    sent: "2017-07-20T22:18:37.484Z"
    v: 1
    author: "5580a11215522ed4b3e203d9"
) #(
    id: "59712c2c76a757f8082ed65d"
    text: {@rcqls load-excel is Windows only, write-excel is cross-platform (it's just creating a Zipped set of XML files).}
    sent: "2017-07-20T22:18:20.432Z"
    v: 1
    author: "5580a11215522ed4b3e203d9"
) #(
    id: "59712b7e76a757f8082ed44b"
    text: {@dander Its become easier with each Red release, requiring fewer compatibility patches.}
    sent: "2017-07-20T22:15:26.848Z"
    v: 1
    author: "5580a11215522ed4b3e203d9"
) #(
    id: "597120a63230e14f3a7bad77"
    text: {@toomasv  @greggirwin Thanks guys, I wrote XML decoder using Red's `parse` and added few things to support HTML also. It is IMO nice base for a web-scrapper in ~200 lines :)}
    sent: "2017-07-20T21:29:10.767Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597113ba4bcd78af56cd8075"
    text: {@singam96  @joa-quim  Virus: AVG and Avast report 0.63 as a virus.  But with Avast, you can exclude certain folders from checking, so do this with your Red work.}
    sent: "2017-07-20T20:34:02.155Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5970edeef5b3458e30677e77"
    text: {:point_up: [July 20, 2017 3:22 AM](https://gitter.im/red/red?at=5970763c4bcd78af56ca8b8d) @Dobeash, Should "Quering databases" be "Querying databases" in the docs?}
    sent: "2017-07-20T17:52:46.545Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5970e73f2723db8d5e2e461a"
    text: {:point_up: [July 20, 2017 3:59 AM](https://gitter.im/red/red?at=59707f00329651f46ea627d1) Cool Bolek!}
    sent: "2017-07-20T17:24:15.402Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5970e22fbf7e6af22cf9ef17"
    text: {@Dobeash Cool! I didn't know it was possible to write code to run in both Rebol and Red}
    sent: "2017-07-20T17:02:39.691Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5970e20d329651f46ea814e8"
    text: {@maximvl Not necessarily referring to runtime. The examples in the article weren't runtime-specific. I was referring to Red's new macro system (to my understanding it's invocable by the compiler and the interpreter so no/little CT/RT divide) vs a Lisp/Scheme/Racket macro system (no compile time here but...)}
    sent: "2017-07-20T17:02:05.552Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5970c60e76a757f8082d062e"
    text: {@maximvl Macros are also useful to adjust code to take account of the differences between the compiler and the interpreter during the Alpha phases.}
    sent: "2017-07-20T15:02:38.899Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5970c48c3230e14f3a79fd53"
    text: {the compile-time ones, though, are useful for optimizations}
    sent: "2017-07-20T14:56:12.517Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5970c482329651f46ea77b9c"
    text: {@Enamex well, Red needs no macros in runtime because it can manipulate code naturally}
    sent: "2017-07-20T14:56:02.269Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5970c447f5b3458e3066ba0c"
    text: {I don't think anything has changed with respect to Red. Red had a number of innovations over Rebol2. RT's Rebol3 had a number of different innovations over Rebol2. REN has a number of different innovations over RT's Rebol 3.^/}
    sent: "2017-07-20T14:55:03.865Z"
    editedAt: "2017-07-20T14:57:15.091Z"
    v: 4
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5970c05ef5b3458e3066a761"
    text: {@maximvl Well, I'm not in a position yet to know what to ask (beginner in both Scheme and Red and academically interested) :smile: ^/I was curious though as the article I linked to was clear to demonstrate why the author thinks Red/Rebol need no macros. What changed?}
    sent: "2017-07-20T14:38:22.057Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5970ae180de4d2545e47ac7e"
    text: {@joa-quim Yes, I have set PC's and laptop for Windows addicts in the family also to use only Defender. But for the company I work for I have nothing to say in these kind of decisions, and I very much like to keep it that way, but I like to use Red anyway to help me quickly generate large scripts.}
    sent: "2017-07-20T13:20:24.443Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5970a994329651f46ea6f6ca"
    text: {@iArnold I understand that not all can afford it but for those who can, just [get rid of the non MS AVs](http://robert.ocallahan.org/2017/01/disable-your-antivirus-software-except.html)}
    sent: "2017-07-20T13:01:08.450Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "5970a5641c8697534a42499d"
    text: "@rebolek Very nice! :+1: "
    sent: "2017-07-20T12:43:16.841Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59709778f5b3458e3065da29"
    text: "@Enamex feel free to ask specific questions"
    sent: "2017-07-20T11:43:52.753Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5970972889aea4761db8a81f"
    text: {Scheme has hygienic macros, and this is pretty much all the difference :D }
    sent: "2017-07-20T11:42:32.980Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597097122723db8d5e2cb682"
    text: {@Enamex Red can do code transformations in runtime, one may call this "runtime macros", "regular" compile-time is available as well, of course}
    sent: "2017-07-20T11:42:10.170Z"
    editedAt: "2017-07-20T11:43:25.121Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5970970fbc464729740a83ae"
    text: {I found an old-ish article: http://blog.hostilefork.com/rebol-vs-lisp-macros/ . Not sure if it's referring to the same thing or macros weren't a definite feature in Red's path when this was written.}
    sent: "2017-07-20T11:42:07.705Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "597096cd0de4d2545e4732f1"
    text: {Is anyone who knows Lisp/Scheme/Racket (ideally newer Racket/Scheme impls) interested in writing a small something about Red and Racket/Scheme macros and how the whole homoiconicity thing figures in the two worlds?}
    sent: "2017-07-20T11:41:01.226Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59707f00329651f46ea627d1"
    text: {Some fun with XML parser:^/```^/>> do %xml-lite.red^/== func [...^/>> page: xml-lite/decode read http://www.red-lang.org^/== [DOCTYPE none #(^/    "html" true^/  ...^/>> headings: select-by-class page "post-title"^/== [h3 [a [none "0.6.3: macOS GUI backend" #()] #(^/    "href" ^{http://www.red-lang.org/2017/07/063-macos-gui-b...^/>> foreach [t c a] headings [print c/a/2]^/0.6.3: macOS GUI backend^/0.6.2: LibRed and Macros^/Incursion into "explorable explanations" lands^/Entering the World of Macros^/```}
    sent: "2017-07-20T09:59:28.368Z"
    editedAt: "2017-07-20T09:59:59.167Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59707bb40de4d2545e46b40f"
    text: {@Dobeash Nice to see people using hybrid Red/Rebol code!}
    sent: "2017-07-20T09:45:24.215Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59707b2489aea4761db828ce"
    text: "interesting, let's see their reaction"
    sent: "2017-07-20T09:43:00.580Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59707ad0329651f46ea61612"
    text: {I have sent a tweet to Avira, let's see if that's more efficient than their false report processing: https://twitter.com/red_lang/status/887970289618829312}
    sent: "2017-07-20T09:41:36.724Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59707aa31c8697534a418727"
    text: { @Dobeash very nice! I guess excel part depends on Windows?}
    sent: "2017-07-20T09:40:51.898Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5970769389aea4761db814a7"
    text: "@Dobeash wow, that's nice"
    sent: "2017-07-20T09:23:31.228Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5970763c4bcd78af56ca8b8d"
    text: {Munge 3.0.2 - http://dobeash.com/files/munge3.r^/^/Minor changes:^/ - Simplified code now that Red 0.6.3 supports date! and delete^/ - All test cases (200) now work with both R3 and Red 0.6.3^/ - Basic documentation available at http://www.dobeash.com/files/munge3.html}
    sent: "2017-07-20T09:22:04.826Z"
    v: 1
    author: "5580a11215522ed4b3e203d9"
)#(
    id: "59704b87f5b3458e30647b3b"
    text: {@joa-quim That is a solution that is not acceptable in some environments. I have the same problem with eScan (I posted about that on the mailinglist, but I hold little hope it will be solved by the eScan helpdesk). But programs generated with Red 0.6.2 do not get blocked. The AV's must become aware of Red!}
    sent: "2017-07-20T06:19:51.119Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "596ffebaf5b3458e3063775a"
    text: {False positives - As far as I know Red backends run on Unix, so cannot be a virus.}
    sent: "2017-07-20T00:52:10.316Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "596fd57b0de4d2545e445453"
    text: {@singam96 Easy, remove that AV and use only Windows Defender}
    sent: "2017-07-19T21:56:11.588Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "596faec51c8697534a3e654e"
    text: {[![image.png](https://files.gitter.im/red/red/1Rz3/thumb/image.png)](https://files.gitter.im/red/red/1Rz3/image.png)}
    sent: "2017-07-19T19:11:01.195Z"
    v: 1
    author: "57004112187bb6f0eadd92d0"
) #(
    id: "596fad854bcd78af56c7aba0"
    text: "hey avira just quarantined  red"
    sent: "2017-07-19T19:05:41.748Z"
    v: 1
    author: "57004112187bb6f0eadd92d0"
) #(
    id: "596f0a36bc4647297403d0af"
    text: "@meijeru Got it, fixed now."
    sent: "2017-07-19T07:28:54.546Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596f09b62723db8d5e25f671"
    text: {From the README file at the top of the repository, as displayed on the main page of the repository, under "Running the Red REPL".  It is easy to overlook...}
    sent: "2017-07-19T07:26:46.416Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "596f092c2723db8d5e25f4c2"
    text: "@meijeru Where is that coming from?"
    sent: "2017-07-19T07:24:28.051Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596f02934bcd78af56c479ec"
    text: {The README file is slightly out of date with this example of the REPL:^/```^/-=== Red Console alpha version ===-^/ (only ASCII input supported)^/^/ red>>^/```^/}
    sent: "2017-07-19T06:56:19.470Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "596ebc8fbf7e6af22cf08878"
    text: "@justjenny Thank you Jenny!"
    sent: "2017-07-19T01:57:35.787Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596e965ebf7e6af22cf007ef"
    text: {Congratulations to all of the Red team on build  0.63, it is awesome - What a team !, you are all programming heroes.}
    sent: "2017-07-18T23:14:38.524Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "596e7f15bf7e6af22cefaad4"
    text: {@greggirwin :smile: maybe I should have said "a good fit"}
    sent: "2017-07-18T21:35:17.582Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "596e7b2c329651f46e9e1302"
    text: {@dander, finding things that are *infeasible* in Red is the real trick. ;^^)}
    sent: "2017-07-18T21:18:36.794Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596e6bc64bcd78af56c2587f"
    text: "I wonder too (sorry, phone)"
    sent: "2017-07-18T20:12:54.624Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596e6ba0bc46472974019bb4"
    text: "I eonder"
    sent: "2017-07-18T20:12:16.888Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596e6ae11c8697534a38fcfe"
    text: {I'm so excited for plugin support in the new console. I don't know what it will be like yet, but I wonder if a test runner plugin would be feasible}
    sent: "2017-07-18T20:09:05.807Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "596e5a5276a757f80822bc4f"
    text: {It would be good to pull ideas together and standardize as best we can, across file format libs. I can put old things out there. My iCal work was done for Qtask, which we can use as well.}
    sent: "2017-07-18T18:58:26.913Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596e5a0789aea4761daf67b6"
    text: {For a quicktest like environment, small tests can do a lot. For old iCal/JSON libs, I wrote separate, custom scripts to run against suites of test files, for more detailed and interactive testing during development. }
    sent: "2017-07-18T18:57:11.402Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596e585789aea4761daf5fe6"
    text: "Oh, cool. I'll take a look again"
    sent: "2017-07-18T18:49:59.884Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "596e570cf5b3458e305c901f"
    text: { @dander tests are definitely useful. I've included few in the file, it is just total basics.}
    sent: "2017-07-18T18:44:28.605Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596e565c2723db8d5e234cee"
    text: {@rebolek, do you think having a unit test suite for your XML parser would be useful? I'm not sure how to add it though. I looked at quick test, but was uncertain about its suitability for general purpose testing. I found a couple projects for testing in Rebol, but I couldn't tell how much adoption they had}
    sent: "2017-07-18T18:41:32.746Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "596e429d76a757f808224373"
    text: "@rebolek, cool on the XML work!"
    sent: "2017-07-18T17:17:17.870Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596e27370de4d2545e3d094c"
    text: {@dockimbel OK, let's agree that I was a good catalyst.^/Nice to year about the virtual coord system.}
    sent: "2017-07-18T15:20:23.422Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "596e2102bc46472974002441"
    text: "@PeterWAWood Thanks o/"
    sent: "2017-07-18T14:53:54.174Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "596e20b289aea4761dae4865"
    text: {@joa-quim Your interest in libRed has helped fixed bugs, add useful features, and improve its robustness, so I would say, it's well-deserved. ;-) In the short term (next couple of months), the main improvement will be switching to a virtual coordinate system, accepting float values.}
    sent: "2017-07-18T14:52:34.453Z"
    editedAt: "2017-07-18T14:52:51.288Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596e1ff70de4d2545e3ce6e9"
    text: {@meijeru Thank you! Constructing URL from object is something you might get in 0.7.0 with the full IO support.}
    sent: "2017-07-18T14:49:27.983Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596e1fb92723db8d5e2229d5"
    text: {@maximvl Thanks! Yes, the test backend is actually just doing a minimal implementation to make the View engine work fully, but not rendering anything anywhere.}
    sent: "2017-07-18T14:48:25.477Z"
    editedAt: "2017-07-18T14:48:32.187Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596e1f6876a757f808219027"
    text: "@planetsizecpu Thank you! :sparkles: ;-)"
    sent: "2017-07-18T14:47:04.396Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596e1050bc46472974ffcc27"
    text: {`Date!` is defined in the Red runtime - [functions](https://github.com/red/red/blob/master/runtime/datatypes/date.reds) & [data structure](https://github.com/red/red/blob/master/runtime/datatypes/structures.reds)}
    sent: "2017-07-18T13:42:40.166Z"
    editedAt: "2017-07-18T13:42:54.111Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "596e0f5ec101bc4e3a9836a6"
    text: {`date!` is a first class Red datatype, part of the language. The structure of Red's 'std library' will only be decided during the development of modules (Red 0.8.0).}
    sent: "2017-07-18T13:38:38.901Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "596e0edebf7e6af22ced77ec"
    text: {@Enamex Until more Red documentation is written, the [Rebol 2 Core Manual Functions Chapter](http://www.rebol.com/docs/core23/rebolcore-9.html#section-2.3) has a good introduction to  refinements.}
    sent: "2017-07-18T13:36:30.878Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "596e0d7f329651f46e9bdf0c"
    text: {Also, how is the 'std library' structured? For example, I was looking around for the definition of the `date!` datatype for educational purposes and couldn't figure out where to look in the repo/org on github}
    sent: "2017-07-18T13:30:39.888Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "596e0d4d1c8697534a371b64"
    text: "What are refinements?"
    sent: "2017-07-18T13:29:49.323Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "596e076076a757f808210569"
    text: {@dockimbel Thanks for the reference to my contribution (totally undeserved) via the Julia wrapper.^/And, if I may ask, what are the plans of future extending the support for vector graphics?}
    sent: "2017-07-18T13:04:32.368Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "596e045e1c8697534a36eee9"
    text: {@meijeru I have some URL construction function in my `http-tools` to make creation of GET queries easier, so I think it makes sense. }
    sent: "2017-07-18T12:51:42.276Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596e01120de4d2545e3c3d03"
    text: {Does anyone see a need to construct a `url!` value out of an object like the one produced by my [url-analyzer](https://gist.github.com/meijeru/4a44ff148e44182580c79182f61113b0)??}
    sent: "2017-07-18T12:37:38.721Z"
    editedAt: "2017-07-18T12:37:50.862Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "596e00bc76a757f80820e596"
    text: {Red team: Congratulations on `0.6.3`! I was happy to see `make url! <block>` and believe it is useful, but -- of course -- it inspired two wishes, one for consistency (#2900) and one for more smartness (#2901). Both to be handled in good time, as you see fit.}
    sent: "2017-07-18T12:36:12.798Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "596dffc6329651f46e9b9691"
    text: {@greggirwin So I've been working on the XML parser and have been thinking about your remark about reversed order of data (storing them in form of `tag-name content attributes` instead of `tag-name attributes content`). It seems to me that it makes sense, so I added an option to switch between both methods to my parser (only in `xml` branch yet, it needs some testing, but it can parse not only XML, but HTML also, ie. http://www.red-lang.org already :smile: )}
    sent: "2017-07-18T12:32:06.794Z"
    editedAt: "2017-07-18T12:32:38.918Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596df3741c8697534a369663"
    text: {btw about this headless Linux view mode, how does it work? is there a dummy `view` which doesn't really draw anything but allows you to test things?}
    sent: "2017-07-18T11:39:32.559Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596df318f5b3458e305a7fc4"
    text: "the page views are going through the roof :D"
    sent: "2017-07-18T11:38:00.147Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596df2234bcd78af56bff251"
    text: "woah, congrats on the 6.3 release :)"
    sent: "2017-07-18T11:33:55.371Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596df1dc0de4d2545e3bf4eb"
    text: {Some one said:  Oh my god, it is full of stars!^/That way is team red, full of stars. I send as much encouragement I can to follow on his way, there is a lot of people following you. Go team red, go!}
    sent: "2017-07-18T11:32:44.512Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "596de29cf5b3458e305a3738"
    text: {@solisoft there is already basic Gritter client, Slack shouldn't be that hard I guess.}
    sent: "2017-07-18T10:27:40.995Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596dd6960de4d2545e3b7764"
    text: "ok not a big deal"
    sent: "2017-07-18T09:36:22.581Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "596dd67b89aea4761dacd2eb"
    text: {@solisoft Not yet, the one for Rebol2 relies on a feature (closures) we didn't implement yet in Red. So, for now you need an external solution.}
    sent: "2017-07-18T09:35:55.077Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596dd4252723db8d5e20acc7"
    text: {Maybe I can use a remote service to generate PDF document for now}
    sent: "2017-07-18T09:25:57.112Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "596dd3c176a757f8082014f5"
    text: "There is a PDF generator ? "
    sent: "2017-07-18T09:24:17.674Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "596dca9576a757f8081fef46"
    text: {@solisoft Making Red a great replacement for Electron (or other bloated web-based stacks for desktop apps) is something we have in mind. ;-)}
    sent: "2017-07-18T08:45:09.001Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596dc75f1c8697534a35d300"
    text: ":)"
    sent: "2017-07-18T08:31:27.978Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "596dc75d89aea4761dac940b"
    text: {Slack should rewrite their app with Red ... the electron one is a pain in the ass (consume too much CPU & RAM)}
    sent: "2017-07-18T08:31:25.223Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
)#(
    id: "596dc559bc46472974fe6185"
    text: "ok thanks"
    sent: "2017-07-18T08:22:49.179Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "596db9f9bc46472974fe29b1"
    text: {I see that it uses JSON, you can get en/de-coder here: https://github.com/rebolek/red-tools}
    sent: "2017-07-18T07:34:17.589Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596db9ce76a757f8081fa0bc"
    text: ":)"
    sent: "2017-07-18T07:33:34.744Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596db9c3329651f46e9a5f35"
    text: "Really, oh crap ! I didn't see it :)"
    sent: "2017-07-18T07:33:23.505Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "596db9b0c101bc4e3a969be8"
    text: {@solisoft What do you mean by missing HTTP/S? It is already there.}
    sent: "2017-07-18T07:33:04.135Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596db932f5b3458e30597ad6"
    text: {just missing HTTP/HTTPS client and I'll be able to write UI apps within ArangoDB database :)}
    sent: "2017-07-18T07:30:58.845Z"
    v: 1
    author: "551c4a9615522ed4b3de3443"
) #(
    id: "596d9d82c101bc4e3a962836"
    text: "Thanks @ampleteIO_twitter! I've made a ticket."
    sent: "2017-07-18T05:32:50.114Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596d78ca0de4d2545e3a15b1"
    text: {@ampleteIO_twitter Alternatively, you can use `probe :word` to inspect the value referred by a word.}
    sent: "2017-07-18T02:56:10.203Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596d785ebf7e6af22ceb066f"
    text: {@ampleteIO_twitter Indeed, worth a ticket on github if you have a github account, otherwise @greggirwin could take care of it (`source` should get its argument as a lit-word, so it can catch undefined words).}
    sent: "2017-07-18T02:54:22.189Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596d75071c8697534a34a46f"
    text: {script error: val needs a value ; where: set; stack: source    as an error msg isn't very helpful in this case ;)}
    sent: "2017-07-18T02:40:07.039Z"
    v: 1
    author: "596d748dd73408ce4f6d9954"
) #(
    id: "596d74e576a757f8081eb0c8"
    text: {is there a way t o increase the level of verbosity so i can see the nature of the invocation ?}
    sent: "2017-07-18T02:39:33.986Z"
    v: 1
    author: "596d748dd73408ce4f6d9954"
) #(
    id: "596d74bdbf7e6af22ceafbba"
    text: {(i was trying to do some meta-inspection as to what  the REPL had so i could implement page-up and page down)}
    sent: "2017-07-18T02:38:53.098Z"
    v: 1
    author: "596d748dd73408ce4f6d9954"
) #(
    id: "596d74ac329651f46e99759e"
    text: "Congrats on new release - nice work "
    sent: "2017-07-18T02:38:36.369Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "596d74a1f5b3458e30589628"
    text: "hrm so 'source prompt' throws an error in windows"
    sent: "2017-07-18T02:38:25.246Z"
    v: 1
    author: "596d748dd73408ce4f6d9954"
) #(
    id: "596d7005f5b3458e3058862c"
    text: "Please upvote on both. ;-)"
    sent: "2017-07-18T02:18:45.493Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596d6c4abf7e6af22ceadf17"
    text: {And here's on reddit - https://www.reddit.com/r/programming/comments/6nxs4l/red_063_released_with_macos_gui_support/}
    sent: "2017-07-18T02:02:50.069Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "596d69ebc101bc4e3a9583ea"
    text: {Someone posted on HN - https://news.ycombinator.com/item?id=14793517}
    sent: "2017-07-18T01:52:43.409Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "596d42a44bcd78af56bd4ded"
    text: "Congrats, awesome release!  Thanks!"
    sent: "2017-07-17T23:05:08.255Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "596d064b0de4d2545e387f7e"
    text: "Fantastic work. So many new & useful features."
    sent: "2017-07-17T18:47:39.554Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "596cfe1bbc46472974fb8573"
    text: "Congratulations! :clap: "
    sent: "2017-07-17T18:12:43.756Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "596ceaa10de4d2545e37f4b4"
    text: "Hooray! "
    sent: "2017-07-17T16:49:37.902Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "596cded81c8697534a3249cf"
    text: ":smile:  :clap: "
    sent: "2017-07-17T15:59:20.200Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "596cddf5bc46472974faeeb6"
    text: {@nc-x Thanks. Probably yes, though, currently the work is still on merging the old Android code with the Red/View engine.}
    sent: "2017-07-17T15:55:33.220Z"
    editedAt: "2017-07-17T15:59:39.453Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596cdd194bcd78af56bb91c2"
    text: {BTW, are android "insider" builds gonna be released anytime soon? :wink: }
    sent: "2017-07-17T15:51:53.030Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "596cdceb89aea4761da8fccc"
    text: "Congrats on the release!!! :smile: "
    sent: "2017-07-17T15:51:07.034Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "596cdaf889aea4761da8ef1e"
    text: {This is great. I must say that the blog posts are a very good resource to learn!}
    sent: "2017-07-17T15:42:48.300Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "596cd5012723db8d5e1cce10"
    text: "Woohoo! Go Team Red!"
    sent: "2017-07-17T15:17:21.862Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596cd22d89aea4761da8c331"
    text: {It may seem a small thing but I definitely think that the new test backend is going to be a major selling point!}
    sent: "2017-07-17T15:05:17.522Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "596ccaec76a757f8081bf431"
    text: "Yay! Good job 😀"
    sent: "2017-07-17T14:34:20.380Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "596cc187c101bc4e3a92bb02"
    text: "@Phryxe Thanks!"
    sent: "2017-07-17T13:54:15.707Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596cc17e76a757f8081bc4dc"
    text: {Finally: http://www.red-lang.org/2017/07/063-macos-gui-backend.html}
    sent: "2017-07-17T13:54:06.582Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596cbe422723db8d5e1c55d4"
    text: "https://github.com/red/red/issues/2897"
    sent: "2017-07-17T13:40:18.735Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "596cbd2d89aea4761da85505"
    text: "I'm not sure I know how to ... I'll try."
    sent: "2017-07-17T13:35:41.356Z"
    editedAt: "2017-07-17T13:36:07.505Z"
    v: 2
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "596cb81e329651f46e964623"
    text: "@Phryxe Please open a ticket for that."
    sent: "2017-07-17T13:14:06.636Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596cb723bf7e6af22ce7da8c"
    text: {Red Console with File menu and Quit doesn't work (Win 7 x64) unless I run Red Console as an administrator. Maybe it should be this way ...^/```^/>> *** Access Error: cannot open: %/C/ProgramData/Red/console-cfg.red^/*** Where: write^/*** Stack: do-actor do-safe save ^/```}
    sent: "2017-07-17T13:09:55.533Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "596c4a47f5b3458e30538b55"
    text: "https://github.com/red/red/issues/2895"
    sent: "2017-07-17T05:25:27.314Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596c49a1bf7e6af22ce5e6f2"
    text: "Me too!"
    sent: "2017-07-17T05:22:41.137Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "596c4993f5b3458e305389e1"
    text: {@PeterWAWood Thanks. I meant just the error part, not what is shown on screen (I see a question mark in a box there).}
    sent: "2017-07-17T05:22:27.362Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596c4951f5b3458e30538875"
    text: {@rebolek The `to binary!` script error seems to be a bug. The #"" could be a font issue.}
    sent: "2017-07-17T05:21:21.968Z"
    editedAt: "2017-07-17T05:22:56.011Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "596c471689aea4761da65903"
    text: {Is this expected, or a bug? (I hope it's a bug):^/```^/>> #"^^(10FFFF)"^/== #"􏿿"^/>> mold #"^^(10FFFF)"^/== {#"􏿿"}^/>> to binary! mold #"^^(10FFFF)"^/*** Script Error: Invalid char! value: #"􏿿"^/*** Where: to^/*** Stack:^/```}
    sent: "2017-07-17T05:11:50.264Z"
    editedAt: "2017-07-17T05:16:33.757Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596bf3fb1c8697534a2e96ab"
    text: {http://www.red-lang.org/2013/11/041-introducing-parse.html says https://en.wikipedia.org/wiki/Top-down_parsing_language. And you need to order your rules, longest match first.}
    sent: "2017-07-16T23:17:15.913Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596bee7689aea4761da549e2"
    text: {What is the formal grammar sphere that the Parse dialect implements?}
    sent: "2017-07-16T22:53:42.942Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "596959c289aea4761d9cbd53"
    text: {@geekyi Rebol does not ignore the error, it just ignores UTF8 and reads the data on system codepage which is what Rebol also uses.}
    sent: "2017-07-14T23:54:42.760Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5969594e3230e14f3a5d4b3b"
    text: {@Oldes google returns a mess. It's not Red's fault that google returns Windows1250 marked as UTF8.}
    sent: "2017-07-14T23:52:46.530Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5968dae876a757f8080e0cad"
    text: {@pekr @Oldes the problem in that specific case is definitely with Google, because I get the same error with python. The character seems to be something like a space `a0`. Strangely, I don't get the exact markup with Firefox.. Even with rebol, Google sends me something different from what is sent to red.. Rebol I think, ignores the error..}
    sent: "2017-07-14T14:53:28.444Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5968ca963230e14f3a5aed71"
    text: {@Oldes Without the manual encoding I am not sure you can do it. E.g. try to read czech idnes.cz server. There is one char after the header, displayed as question mark. Not UTF-8 compatible. If Red is strict about reading such stuff, we will have to read it as a binary then, then try to convert ourselves, as `to-string`fails then too, naturally. I did not delve deep into it this topic, not sure how difficult would it be to write the decoder ...}
    sent: "2017-07-14T13:43:50.786Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5968b9992723db8d5e0dfbf8"
    text: {it gives same _invalid utf-8 encoding_ error, so it is not a solution.}
    sent: "2017-07-14T12:31:21.501Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5968b0421c8697534a2324f5"
    text: { @Oldes You can set the http request header manually.^/```^/write https://www.google.com [GET [Accept-Charset: "utf-8"]]^/```}
    sent: "2017-07-14T11:51:30.206Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5968a3cfbf7e6af22cd97285"
    text: {@Oldes You should ask @qtxie for simple-io related questions.}
    sent: "2017-07-14T10:58:23.977Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5968a162f5b3458e3046d581"
    text: {@dockimbel @kealist not tested, but is Red using `Accept-Charset: utf-8` for the url requests?}
    sent: "2017-07-14T10:48:02.254Z"
    editedAt: "2017-07-14T10:48:10.093Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
)#(
    id: "596878841c8697534a224c14"
    text: {FYI, we are preparing for the 0.6.3 release, working on the blog article are doing extensive regression testing.}
    sent: "2017-07-14T07:53:40.863Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5966f4fc0cef4fed2eb7848a"
    text: {@kealist you can use this as a workaround:^/```^/;read url and convert to utf8^/read-url: func[url /local e o][^/^-o: ^{^}^/^-call/output form reduce [^{curl -IL^} url] clear o^/^-parse o [any [thru [^{Content-Type: ^} thru ^{charset=^} copy e to lf]]]^/^-call/shell/output form reduce [^{curl -L^} url ^{| iconv -f^} e ^{-t UTF-8^}] clear o^/^-o^/]^/```^/```^/  read-url http://www.google.com^/;   ^{<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="en"><head><meta content="text/html; charset=UTF-8" http-eq...^/```^/}
    sent: "2017-07-13T04:20:12.027Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5966f2f60de4d2545e2124f4"
    text: {@kealist Check out https://github.com/red/code/tree/master/Library}
    sent: "2017-07-13T04:11:34.307Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5966ee42329651f46e80b0f4"
    text: {@kealist @Oldes has created his own updated bindings for some. Also check. red/system room }
    sent: "2017-07-13T03:51:30.402Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5966d78a4bcd78af56a4bd5e"
    text: {I don't know if someone has a more recent version because I hadn't updated my mirror since 2015}
    sent: "2017-07-13T02:14:34.358Z"
    editedAt: "2017-07-13T02:14:46.399Z"
    v: 2
    author: "55f839dc0fc9f982beb0c2f1"
) #(
    id: "5966d6ff4bcd78af56a4bc75"
    text: {Trying to go back through Red/System bindings that I have mirrored to see if I can get some of them working, but may take a while}
    sent: "2017-07-13T02:12:15.997Z"
    v: 1
    author: "55f839dc0fc9f982beb0c2f1"
) #(
    id: "5966d6d82723db8d5e063f8b"
    text: {@greggirwin Yes, currently back in programming & job searching mode }
    sent: "2017-07-13T02:11:36.361Z"
    v: 1
    author: "55f839dc0fc9f982beb0c2f1"
) #(
    id: "5966d690c101bc4e3a7cdae2"
    text: "Nice to see you Josh!"
    sent: "2017-07-13T02:10:24.432Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5966d4872723db8d5e06387d"
    text: "@geekyi Thank you.  "
    sent: "2017-07-13T02:01:43.571Z"
    v: 1
    author: "55f839dc0fc9f982beb0c2f1"
) #(
    id: "5966d3492723db8d5e0633da"
    text: {@kealist https://stackoverflow.com/a/43383454/5798459}
    sent: "2017-07-13T01:56:25.485Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5966d22ef5b3458e303f3fb2"
    text: "@kealist yes, bug in google.com  ;P"
    sent: "2017-07-13T01:51:42.457Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5966d028bc46472974e3fa52"
    text: {Has this been reported?^/```^/>> read http://www.github.com^/== ^{^^/^^/^^/^^/^^/^^/<!DOCTYPE html>^^/<html lang="en">^^/  <head>^^/    <meta chars^/>> read http://www.google.com^/*** Access Error: invalid UTF-8 encoding: #^{A050726F^}^/*** Where: read^/```}
    sent: "2017-07-13T01:43:03.995Z"
    v: 1
    author: "55f839dc0fc9f982beb0c2f1"
) #(
    id: "5965d38f1c8697534a16a6e1"
    text: {@Phryxe Good catch, forgot to re-index `now`'s accessors. Fixed now.}
    sent: "2017-07-12T07:45:19.327Z"
    editedAt: "2017-07-12T07:51:47.125Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5965ce1fbc46472974df335e"
    text: "`now/year` shows date"
    sent: "2017-07-12T07:22:07.694Z"
    editedAt: "2017-07-12T07:22:42.670Z"
    v: 3
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5965cc8f3230e14f3a4df65c"
    text: {now/month^/== 2017^/^/Latest version ...}
    sent: "2017-07-12T07:15:27.622Z"
    editedAt: "2017-07-12T07:19:27.868Z"
    v: 8
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5964e2a50de4d2545e17e571"
    text: {Rebol is such a free-form language and there's lots of ways to spin values into the air and knit them together on an astral plane to meet tangible and pragmatic ends. Red certainly captures this quality, yet I suspect there are distinct advantages to a more conventional approach when scripts are compiled and more of the logic is contained within hard-coded, machine-ready bits. Yeah, I'm not sure I have a particularly earthed approach to programming :)}
    sent: "2017-07-11T14:37:25.688Z"
    editedAt: "2017-07-11T14:42:44.065Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5964df47329651f46e77a162"
    text: {That said—I have a Rebol 2 and 3 background, not Red—there's much I don't know about the advantages of using certain conventions when it comes to scripts being compiled or even Red's flavour of interpretation (you can see that in my rather awkward attempts at writing a USE macro). I don't recall having seen many paragraphs on that as yet.}
    sent: "2017-07-11T14:23:03.216Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5964dee7f5b3458e303685d5"
    text: {I won't prognosticate on how modules will materialize in Red save to say I don't get the impression that Red will follow Rebol 3's approach to context (*three* 'global' contexts!) or module structure—even so, I'd imagine it'd be difficult to avoid further subtleties in context and I err on being as deliberate as I can be.}
    sent: "2017-07-11T14:21:27.646Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5964deb9bf7e6af22cc903bf"
    text: {@x8x Conceptually I've never liked the ambiguity of using SET without explicitly establishing the context the target resides in. Aesthetically I strongly prefer to assign all my key functions/values with set-words. I've nothing in particular against CONTEXT or OBJECT constructors, I like the connotation of MAKE MODULE! and until there are modules in Red, MAKE OBJECT! will suffice.}
    sent: "2017-07-11T14:20:41.118Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5964b38297cedeb04826328a"
    text: {@rgchris, never seen that contructor before ;-) nice!^/```^/form-date: make object! [^/^-...^/]^/form-date: get in form-date 'form-date^/```^/any advantages compared to this form?^/```^/object [^/^-...^/^-set 'form-date ..^/]^/```^/just curious :-)}
    sent: "2017-07-11T11:16:18.367Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5963fe640de4d2545e1437a9"
    text: {I forked it here: https://gist.github.com/greggirwin/ab10ae521654d7f74dd4c784de6b32a2}
    sent: "2017-07-10T22:23:32.209Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5963fe371c8697534a0ef81d"
    text: "Yes, Bolek's `nsource` does that."
    sent: "2017-07-10T22:22:47.512Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5963fe28329651f46e740cf1"
    text: {Chris's approach is clever. Reassigning `form-date` threw me off for a moment. }
    sent: "2017-07-10T22:22:32.794Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5963fe141c8697534a0ef7ca"
    text: {Could include a URL in the function spec that either pulls in a longer text description for HELP or sends the user to that page in their browser.}
    sent: "2017-07-10T22:22:12.424Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963fd702723db8d5efa05a4"
    text: {Doc strings are intended to be short. We don't have a plan for linking to longer docs for complex/dialected funcs. We need it though, as it has come up for years.}
    sent: "2017-07-10T22:19:28.627Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5963f8084bcd78af56984934"
    text: {@Oldes Hm, that's one I copied verbatim. Was actually @btiffin that wrote that one!}
    sent: "2017-07-10T21:56:24.025Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963f718329651f46e73f0b8"
    text: {There are just 2 issues. You mention REBOL in the description of the `%x` code and the help output is somehow strange:^/```^/ARGUMENTS:^/     date         [date!] "Date to Format".^/     format       [any-string!] "Target format (see description above).".^/```^/But that is for @greggirwin to fix:)}
    sent: "2017-07-10T21:52:24.486Z"
    editedAt: "2017-07-10T21:54:50.815Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5963f64dbf7e6af22cc556ba"
    text: "Nice!"
    sent: "2017-07-10T21:49:01.996Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5963f589c101bc4e3a707b64"
    text: "@Oldes  ---^^"
    sent: "2017-07-10T21:45:45.109Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963f5701c8697534a0ed489"
    text: {Now with embedded documentation and support functions isolated: [Form Date](https://github.com/rgchris/Scripts/blob/master/red/form-date.red)}
    sent: "2017-07-10T21:45:20.957Z"
    editedAt: "2017-07-10T21:45:37.401Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963ec3c4bcd78af56981769"
    text: {I'm taking the descriptions from the doc and embedding into the script. Will auto-generate the function description.}
    sent: "2017-07-10T21:06:04.991Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963ebe9bf7e6af22cc52cb6"
    text: {@rgchris hard to read header value when you have the script loaded in console... I was thinking about something like:^/```^/fd: func[^/^-{Possible codes:^/^-^-%a^-The abbreviated weekday name according to the current locale.^/^-^-%A^-The full weekday name according to the current locale.}^/][]^/^/? fd^/```^/with result:^/```^/USAGE:^/     FD ^/^/DESCRIPTION: ^/     Possible codes:^/        %a    The abbreviated weekday name according to the current locale.^/        %A    The full weekday name according to the current locale. ^/     FD is a function! value.^/```^/but it is your script.. good one btw.}
    sent: "2017-07-10T21:04:41.863Z"
    editedAt: "2017-07-10T21:05:46.231Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5963e7ff2723db8d5ef9b163"
    text: "Such as following the HOME header value."
    sent: "2017-07-10T20:47:59.145Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963e7c22723db8d5ef9b073"
    text: {Yes.. and? You could provide some way how to get info about possible codes in console without need to read source.}
    sent: "2017-07-10T20:46:58.209Z"
    editedAt: "2017-07-10T20:47:25.166Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5963e766329651f46e73aa63"
    text: {*"Also in the doc string (or in the ctx-form-date) should be info about all these supported codes"*}
    sent: "2017-07-10T20:45:26.066Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963e743bf7e6af22cc5159f"
    text: "Don't understand what you mean."
    sent: "2017-07-10T20:44:51.575Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5963e71376a757f808f8bec7"
    text: {@Oldes The support functions have no correlation to the %c codes—would be no auto-documentation that way.}
    sent: "2017-07-10T20:44:03.693Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963e6afbc46472974d75235"
    text: {@Oldes It's a first pass conversion. Just making sure the thing works.}
    sent: "2017-07-10T20:42:23.571Z"
    editedAt: "2017-07-10T20:42:49.796Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963e6a176a757f808f8bcb1"
    text: "Yep—modules..."
    sent: "2017-07-10T20:42:09.203Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963e25abf7e6af22cc4fec8"
    text: {@rgchris for example `pad` is defined in Red by default... you are replacing it with your own version.}
    sent: "2017-07-10T20:23:54.738Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5963e20276a757f808f8a786"
    text: "Modules should make this easier."
    sent: "2017-07-10T20:22:26.616Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5963e1f01c8697534a0e7c31"
    text: {Why? Is replacing someone's else functions better?}
    sent: "2017-07-10T20:22:08.258Z"
    editedAt: "2017-07-10T20:22:43.201Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5963e1b0bc46472974d73c38"
    text: {That's the goal, though I really don't like the CONTEXT/SET convention.}
    sent: "2017-07-10T20:21:04.372Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963e1912723db8d5ef99552"
    text: {Also in the doc string (or in the `ctx-form-date`) should be info about all these supported codes.}
    sent: "2017-07-10T20:20:33.238Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5963e11d0de4d2545e13ba25"
    text: {@rgchris so why you don't close it in a context? Like:^/```^/ctx-form-date: context [^/    ...^/   set 'form-date func[^/]^/```}
    sent: "2017-07-10T20:18:37.425Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5963defe1c8697534a0e6e7d"
    text: {Another conversion: [Form Date](https://github.com/rgchris/Scripts/blob/master/red/form-date.red)^/^/```lisp^/do https://raw.githubusercontent.com/rgchris/Scripts/master/red/form-date.red^/probe form-date now "It is %A the %e%i of %B, %Y"^/probe form-date/utc now "%c"^/probe form-date now "%a, %d %b %Y %H:%M:%S %z"^/```^/^/At this time, it does leak the support functions.}
    sent: "2017-07-10T20:09:34.124Z"
    editedAt: "2017-07-10T20:15:58.947Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963d7a8bc46472974d71050"
    text: {@greggirwin And I believe SPARQL is a semantic RDF query language. That's data which is *much* more structured & defined than the generic data-wrangling and dialecting I'm trying to unify behind an SQL syntax.}
    sent: "2017-07-10T19:38:16.449Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963d554c101bc4e3a6fea34"
    text: {@greggirwin Yes, you're right, LINQ definitely goes down the path of making SQL composable. Not sure I would use LINQ as an easy way to build DSLs, though -- it's tied to C# .NET.  And there are definitely ways to use ANTLR and tools like xText to create DSLs, but those are more for advanced programmers. Ideally I'd like to produce a simple data-wrangling dialect that almost anyone could use. Seasoned developers are likely happy to continue piping find/awk/sed/curl/grep expressions together.}
    sent: "2017-07-10T19:28:20.808Z"
    editedAt: "2017-07-10T19:29:53.601Z"
    v: 2
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963d0692723db8d5ef93d1f"
    text: {Pretty sure LINQ in .NET goes down that path (no pun intended). SPARQL is the main thing that comes to mind though.}
    sent: "2017-07-10T19:07:21.474Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5963cc8e3230e14f3a45a54c"
    text: {@rgchris Yes, your example has the pattern. Then of course, there would also be statements for UPDATE, CREATE, DELETE expressions. Ok, this forum has been pretty tolerant of this side-conversation. Let's discuss via email or in a forum. Thanks all.  }
    sent: "2017-07-10T18:50:54.833Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
)#(
    id: "5963cbdef5b3458e30321ac6"
    text: {@rgchris So the last code example I typed above, it's something that 80% of all devs and a significant % of business users (data analysts) could pick up in like ten minutes, as long as most of the syntax and concepts stick to SQL without getting into functional programming, parse, binding etc. Otoh, as a Red programmer, you would be able to pass in a full-blown parse rule as a filter/group-by... that would be sort of an advanced thing for ppl who already know  Redbol.}
    sent: "2017-07-10T18:47:58.068Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963cb013230e14f3a459cb6"
    text: {@rgchris SQL syntax has been used like crazy for webAPIs (Facebook, Yahoo, dozens of others), to the point that it has a bad rep. But I think this would be among the first which would be a *composable* dialect, where you can use SQL syntax as a starting point to build custom DSLs to query and manipulate data. I *think* that's a new one.  Also, there are a few known projects where SQL is used to scan file-systems, OSquery in particular.}
    sent: "2017-07-10T18:44:17.241Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963ca4df5b3458e303213d2"
    text: {    use #xml https://.... as feed; select .... from feed where ...}
    sent: "2017-07-10T18:41:17.094Z"
    editedAt: "2017-07-10T18:41:22.571Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963c9ecbc46472974d6d0c7"
    text: "Something along those lines."
    sent: "2017-07-10T18:39:40.921Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963c99c1c8697534a0df9bb"
    text: {@rgchris So a user could write something like: ^/```^/x: xml https://www.blogger.com/feeds/5936111837781935054/posts/default^/select <title *>, d: extractDate(<updated>) ^/where <updated> in^/select <entry> from x where d since 1-Jun-2017^/```^/This is still pretty half-baked, but you get the idea.}
    sent: "2017-07-10T18:38:19.995Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963c9473230e14f3a458e88"
    text: {@BlackATTR_twitter I get you—it's a good direction! Has anyone else used SQL to extract values from XML? Seems obvious when looking at your snippets, but the obvious isn't obvious until it is...}
    sent: "2017-07-10T18:36:55.487Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963c77989aea4761d84ed2e"
    text: {@rgchris I like it. I'm trying not to stray too far from generic SQL, but may end up in a place similar to what you propose. Ideally a user will not need to know Red or Rebol to be able to use this dialect at a REPL. They will only work in Red when they want to extend the dialect, e.g.,  add a datasource, functions, keywords (or statements such as UPSERT or SINCE)}
    sent: "2017-07-10T18:29:13.378Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963c66f1c8697534a0dec05"
    text: {In the above case, FEED already holds the data: `feed: load-xml/dom path-to-feed`}
    sent: "2017-07-10T18:24:47.225Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963c5ef3230e14f3a457e83"
    text: {@rgchris Since anything could come back from a URL! or File!, there will need to be a way to specify the data. Not terribly elegant, but I was thinking something like the #xml in:^/```^/select <title *>, extractDate(<updated>)^/where <updated> in ^/select <entry> ^/from #xml https://www.blogger.com/feeds/5936111837781935054/posts/default^/```^/Commas can be implied-- i will be fiddling with other things like that (such as removing the ";" at the end of statements)}
    sent: "2017-07-10T18:22:39.809Z"
    editedAt: "2017-07-10T18:24:58.263Z"
    v: 3
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963c2834bcd78af569753ab"
    text: {It is an intriguing application of your SQL dialect to apply it to XML documents. I likely wouldn't use the FROM URL! part rather keeping that part within the regular program flow. However, would strongly consider it for a selector (I wonder if you could imply a comma from using two consecutive non-words?):^/^/```lisp^/feed/select [select <title *> (clear find <updated> "T") where <updated> in select <entry>]^/```}
    sent: "2017-07-10T18:08:03.256Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963c0d00de4d2545e131ebd"
    text: {@BlackATTR_twitter Is a good discussion to have. Could use the mailing list to explore the topic a little deeper...}
    sent: "2017-07-10T18:00:48.438Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963ba66bc46472974d6828c"
    text: {@rgchris I think we may be approaching similar things from different angles. I've been focusing on how to reshape SQL to work on hierarchical text (as opposed to relational tables). And it looks like you (and Gregg and others here) have built redbol functions to extract data, translate DOMs, etc. I will take this discussion offline, but I would be interested in integrating some of the functions from the community.  }
    sent: "2017-07-10T17:33:26.675Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963b33ec101bc4e3a6f4d0e"
    text: {Also, not yet implemented-- define your own functions in redbol and embed them in the SQL, e.g., so instead of Select (clear find <updated> "T") --> Select extractTime(<updated>) }
    sent: "2017-07-10T17:02:54.634Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963b2a6c101bc4e3a6f4a7c"
    text: {@rgchris, using `func` in your macro is like not using the macro at all. `Object` contexts are different for the compiler issue Doc mentioned.}
    sent: "2017-07-10T17:00:22.464Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5963b195bf7e6af22cc41610"
    text: {@rgchris That's right, there's a comma in there, which complicates things a bit (requires string parsing or otherwise filtering the input). Still undecided as to whether or not that stays there. There's a lot of things like that still up in the air.}
    sent: "2017-07-10T16:55:49.093Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5963b0e62723db8d5ef8a897"
    text: {@BlackATTR_twitter Is an interesting prospect. I have a PATH accessor which shortens things a little, but only accesses one node at a time:^/^/```lisp^/feed: load-xml/dom https://www.blogger.com/feeds/5936111837781935054/posts/default^/collect [^/    feed/path [<feed> <entry> <title> ?] ; ? returns text value^/    load head clear find feed/path [<feed> <entry> <title> ?] "T"^/]^/```^/^/Still not as succinct though.}
    sent: "2017-07-10T16:52:54.608Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963af9c1c8697534a0d7abb"
    text: {@dockimbel @greggirwin Another one I tried that didn't work was:^/^/```lisp^/#macro use: func [words [block!] code [block!]][^/^-func compose [/local (words)] code^/]^/```^/^/Is this as the function context is ephemeral or that function contexts don't work the same way, or... (?)}
    sent: "2017-07-10T16:47:24.945Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963aeaff5b3458e30318fbd"
    text: "@BlackATTR_twitter is that a comma I see there?"
    sent: "2017-07-10T16:43:27.337Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963a01289aea4761d8427a8"
    text: {Depending on the structure being parsed, the sample above could also be a bit more complex, e.g.,^/```^/select <title *>, (clear find <updated> "T")^/where <updated> in ^/select <entry>^/from https://www.blogger.com/feeds/5936111837781935054/posts/default^/```}
    sent: "2017-07-10T15:41:06.282Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59639e33329651f46e723f7b"
    text: {OpenText is a big company that buys up content management and document management platforms/companies. My company uses several of their platforms which they bought recently.}
    sent: "2017-07-10T15:33:07.603Z"
    editedAt: "2017-07-10T15:33:58.919Z"
    v: 2
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59639d28329651f46e723ad4"
    text: {You use OpenText? In the company I worked for few months ago, we used their Livelink product :-)}
    sent: "2017-07-10T15:28:40.496Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59639a4589aea4761d840686"
    text: {I'll be giving a demo of this at a conference in Toronto this week (OpenText Enterprise World). A friend at MongoDB also asked me to give them a demo when ready.}
    sent: "2017-07-10T15:16:21.295Z"
    editedAt: "2017-07-10T15:16:35.112Z"
    v: 2
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "596398f01c8697534a0d069b"
    text: {@rgchris  In the SQL dialect I've been building, the syntax for what you wrote would be:^/```^/select <title *>, (clear find <updated> "T")^/from https://www.blogger.com/feeds/5936111837781935054/posts/default^/```}
    sent: "2017-07-10T15:10:40.049Z"
    editedAt: "2017-07-10T15:10:54.199Z"
    v: 2
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "596397b83230e14f3a448aad"
    text: "`system/build/date` could now have type `date!`"
    sent: "2017-07-10T15:05:28.682Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59639606bf7e6af22cc383d9"
    text: {See, just need to push you to really great heights :high_brightness:  :P}
    sent: "2017-07-10T14:58:14.519Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5963911b76a757f808f70829"
    text: {I've figured out a simple implementation for setting the ISO week using Rebol: https://github.com/red/red/blob/master/lexer.r#L808}
    sent: "2017-07-10T14:37:15.009Z"
    editedAt: "2017-07-10T14:37:55.207Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59638858329651f46e71cd4b"
    text: {Very ugly set-iso-week implementation https://gist.github.com/iArnold/b9fb0d3fb09affc3e66aed32c74bca65}
    sent: "2017-07-10T13:59:52.772Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "596379a289aea4761d835819"
    text: {Yes, and it's used by the auto-completion in the console (that's the main reason for adding that list in the first place).}
    sent: "2017-07-10T12:57:06.849Z"
    editedAt: "2017-07-10T12:58:07.024Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5963741cc101bc4e3a6e096b"
    text: {`system/catalog/accessors`, a new reflective feature :clap: }
    sent: "2017-07-10T12:33:32.087Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59633b6076a757f808f56667"
    text: ":+1: "
    sent: "2017-07-10T08:31:28.270Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59632dfd3230e14f3a4276b7"
    text: {With dates!^/^/```lisp^/probe new-line/all/skip collect [^/^-foreach entry entries [^/^-^-keep load head clear find entry/get/text <updated> "T"^/^-^-keep entry/get/text <title>^/^-]^/] true 2^/```}
    sent: "2017-07-10T07:34:21.413Z"
    editedAt: "2017-07-10T07:37:43.637Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59632d9f76a757f808f5242a"
    text: "@rgchris Nice!"
    sent: "2017-07-10T07:32:47.237Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596328dcc101bc4e3a6cb07d"
    text: {```lisp^/do https://raw.githubusercontent.com/rgchris/Scripts/master/experimental/altxml.red^/^/feed: load-xml/dom https://www.blogger.com/feeds/5936111837781935054/posts/default^/entries: feed/get-by-tag <entry>^/probe new-line/all collect [^/^-foreach entry entries [^/^-^-keep entry/get/text <title>^/^-]^/] true^/```}
    sent: "2017-07-10T07:12:28.849Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59632832bc46472974d3b7d7"
    text: {In any case, my messy macro was enough to get my code up and running: [AltXML for Red](https://github.com/rgchris/Scripts/blob/master/experimental/altxml.red). Likely need to do more digging to see how to make things more efficient.}
    sent: "2017-07-10T07:09:38.579Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "596327c44bcd78af569458f6"
    text: {@dockimbel I do need the last value—I think that's the trick. More likely I think I'd be better refactoring the code some.}
    sent: "2017-07-10T07:07:48.573Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "596326c1329651f46e6ff8fe"
    text: {You could also account for the last value you often return from `use` by adding a `set` there, gathering the set-word  or set-path preceeding `use`. For such case, a named macro would not be enough, you need to switch to pattern-matching macro (so you get references to the source code).}
    sent: "2017-07-10T07:03:29.007Z"
    editedAt: "2017-07-10T07:03:40.878Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596326242723db8d5ef5fbb3"
    text: {@rgchris Maybe rather (untested):^/```lisp^/#macro use: func [words [block!] code [block!] /local word][^/    reduce [context append collect [foreach word words [keep to set-word! word] keep none] code]^/]^/```}
    sent: "2017-07-10T07:00:52.131Z"
    editedAt: "2017-07-10T07:01:03.805Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596324cbf5b3458e302ed060"
    text: {This might not be as efficient as you were suggesting, but then my code may be too dynamic in parts—not sure:^/^/```lisp^/#macro use: func [words [block!] code [block!] /local word][^/^-reduce ['do bind code make object! collect [foreach word words [keep to set-word! word] keep none]]^/]^/```}
    sent: "2017-07-10T06:55:07.474Z"
    editedAt: "2017-07-10T06:55:25.660Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59631ae9329651f46e6fcb6a"
    text: {@rgchris BTW, you can easily keep your programming style in Red, just defining `use` as a macro that will convert it to an object context, and set the local words to `none` at the head of the context body block. ;-)}
    sent: "2017-07-10T06:12:57.548Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596319bcc101bc4e3a6c74fd"
    text: {@rgchris `function` in Red can capture those iterator words for you (until we add local contexts support for iterators). `use` is trivial to support in the interpreter, but for the compiler, it falls into the functions in functions category, and that is not fully supported by the compiler yet. I plan to package that along with other functional programming related features in a future release (probably after Android and full IO support).}
    sent: "2017-07-10T06:07:56.004Z"
    editedAt: "2017-07-10T06:10:27.259Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596312ea329651f46e6fafc0"
    text: {Never mind, I see what's up: added `/local word` to the function spec.}
    sent: "2017-07-10T05:38:50.531Z"
    editedAt: "2017-07-10T05:41:10.609Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59631194bc46472974d362f4"
    text: {Tried this but seemed to have side-effects (that I can't yet reduce):^/^/```lisp^/use: func [words [block!] code [block!]][^/    do bind code make object! collect [foreach word words [keep to set-word! word] keep none]^/]^/```}
    sent: "2017-07-10T05:33:08.756Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "596310ab89aea4761d816c22"
    text: "Is there a usable USE function about?"
    sent: "2017-07-10T05:29:15.693Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "596301bcf5b3458e302e44f4"
    text: {FYI, the compiler is now on par with the interpreter for date formats support.}
    sent: "2017-07-10T04:25:32.961Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5962f766f5b3458e302e214f"
    text: {@tanstaaf1 ^/> What is the internal data representation?^/^/See [here](https://github.com/red/red/blob/master/runtime/datatypes/structures.reds#L317).}
    sent: "2017-07-10T03:41:26.690Z"
    editedAt: "2017-07-10T03:43:41.699Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5962f6f60de4d2545e0f58a7"
    text: "@gltewalt Star Wars? ;-)"
    sent: "2017-07-10T03:39:34.372Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5962ec7abc46472974d2e22e"
    text: "What happens in the year 33000?"
    sent: "2017-07-10T02:54:50.188Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5962ca9689aea4761d808559"
    text: {@dockimbel I was joking! that is why I emphasized the "complete" the way I did and added the face at the end.   Your solution was actually better than I was expecting.  I can use ISO and feel good about that.  Nobody will waste time trying to figure out why their date code isn't working because your REPL, unlike R2, is quite specific.  So my thanks was sincere.   What is the internal data representation?  You likely document this somewhere but I've missed it.}
    sent: "2017-07-10T00:30:14.864Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5962651689aea4761d7f1485"
    text: {Isn't the `date!`doc missing `/precise`description?}
    sent: "2017-07-09T17:17:10.059Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59625cf0c101bc4e3a69eb29"
    text: "The project goals wiki doc is great! "
    sent: "2017-07-09T16:42:24.164Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "596247414bcd78af5691457b"
    text: {@tanstaaf1 I don't see how we could support the `mm/dd/yyyy` and the `dd/mm/yyyy` format at the same time, so we have to go with only one of them. I don't think that been born in US would change the rationale behind such decision, even Carl did the same choice, because that's the only rational one for a world-wide usage.}
    sent: "2017-07-09T15:09:53.954Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5962449689aea4761d7e902a"
    text: "@nc-x Age of Empires style games. ;-)"
    sent: "2017-07-09T14:58:30.159Z"
    editedAt: "2017-07-09T14:58:44.273Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59623742bf7e6af22cbdf659"
    text: {>  support for negative years^/  ^/I have never used dates for any task, I understand their use cases but what would negative dates be used for?}
    sent: "2017-07-09T14:01:38.435Z"
    editedAt: "2017-07-09T14:02:53.060Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5962207089aea4761d7e0e98"
    text: {If only you'd been born in the US I'm sure we'd have had a *complete* fix :-I}
    sent: "2017-07-09T12:24:16.591Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "59621db41c8697534a070e8a"
    text: {ISO format is something I generally preferred anyway, so having available allows me to pretty much sidestep my schizo reaction to Euro dates.  I'm hoping ISO is the internal (storage) default?  Or is it simply one very long integer?}
    sent: "2017-07-09T12:12:36.664Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "59621c244bcd78af5690af84"
    text: {@dockimbel Thanks for the great work!  I'm quite impressed with the decisions you made  that largely address my considerable frustration with rebol's *silent* euro date support at the expense of US dates.   >> a: 1/2/1999^/== 1-Feb-1999}
    sent: "2017-07-09T12:05:56.120Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "596211a74bcd78af56908571"
    text: {BTW, the compiler does not support `/isoweek` as we lack an adequate conversion function in Rebol. If there's anyone interested in implementing such function, the ISO week spec is [there](https://en.wikipedia.org/wiki/ISO_week_date). We just need a single `set-iso-week` function, taking a `date!` value and a week integer number, returning a new date set on the first day of that week. You can use our set of [unit tests](https://github.com/red/red/blob/master/tests/source/units/date-test.red#L680) to validate it. I didn't implement it for lack of time, though a contribution would be greatly appreciated.}
    sent: "2017-07-09T11:21:11.840Z"
    editedAt: "2017-07-09T11:23:14.861Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596210eef5b3458e302af904"
    text: "Enjoy! ;-)"
    sent: "2017-07-09T11:18:06.647Z"
    editedAt: "2017-07-09T11:18:10.260Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5962108e3230e14f3a3e8e7f"
    text: {In a nutshell, Red `date!` supports all the Rebol2 date features and adds:^/* support for negative years^/* many additional input formats from ISO date standard^/* ability to set `/hour`, `/minute` and `/second` directly on dates (missed a lot in Rebol2)^/* new `/week` accessor, for getting/setting the week of the year^/* new `/isoweek` accessor, for getting/setting the ISO week of the year^/* new `/timezone` accessor for setting the time zone, keeping the same UTC time^/* conversion from/to Unix epoch time^/* `make date!` erroring out on invalid spec argument, while `to date!` normalizes any out of range spec.}
    sent: "2017-07-09T11:16:30.820Z"
    editedAt: "2017-07-09T11:17:42.849Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59620f2b1c8697534a06d56d"
    text: {Official date! documentation: https://doc.red-lang.org/en/date.html}
    sent: "2017-07-09T11:10:35.247Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5961fa95bc46472974cf783c"
    text: "Thanks @pekr. I fixed it."
    sent: "2017-07-09T09:42:45.098Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5961f835f5b3458e302aa9ee"
    text: {another one "Red i A roadmap for Red,", "before wos in a fast-changing environment"}
    sent: "2017-07-09T09:32:37.402Z"
    editedAt: "2017-07-09T09:33:42.045Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5961f7f6329651f46e6bce19"
    text: {" rk started on the GUI dialects." - some typo or missing part of sentence?}
    sent: "2017-07-09T09:31:34.474Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5961ed96f5b3458e302a86cf"
    text: {There are many questions being asked of the Red Team like "Why doesn't Red have feature x?", "Why has my issue been ignored?", and "Can you add this feature now?". We realise that the reason behind the answers to question may not always be apparent and have published a brief document - [Red Project Approach](https://github.com/red/red/wiki/Red-Project-Approach) - to explain the context behind those answers.}
    sent: "2017-07-09T08:47:18.070Z"
    editedAt: "2017-07-09T08:47:37.494Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595fbbe776a757f808e92e8c"
    text: {@dockimbel, LOL! Yeah. That's a lot of adjectives. Maybe: *muddy serpentine single-lane mountain road*.}
    sent: "2017-07-07T16:50:47.596Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595f4aa842d2f61025872266"
    text: "Thanks Red Team for `date!` !"
    sent: "2017-07-07T08:47:36.214Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "595f38c00de4d2545e01b7fe"
    text: "@PeterWAWood Thanks! That was simple enough!"
    sent: "2017-07-07T07:31:12.422Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "595f37902723db8d5ee7d090"
    text: {You need to specify `windows` as the target to the compiler.}
    sent: "2017-07-07T07:26:08.233Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595f35db6ae41d5d33c4e556"
    text: {Hi all, I am sorry to ask something I think I asked here before, but if you have tried using the search functionality on Gitter I am sure you can understand why I am unable to find it again:^/When I compile a GUI app with Red, what must I do so that the compiled executable does not open a separate console window when run? I seem to remember it's something in the code, under `system` that must be set to prevent the extra output window from appearing.}
    sent: "2017-07-07T07:18:51.532Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "595f323a89aea4761d737402"
    text: "We finally got date! Thanks for the great work!"
    sent: "2017-07-07T07:03:22.202Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "595f263c2723db8d5ee78874"
    text: {@dander Glad I can still do that, means the work on `date!` was less brain-damaging that I expected. ;-)}
    sent: "2017-07-07T06:12:12.472Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f1e04c101bc4e3a5e0d26"
    text: {@dockimbel your explanation made me laugh out loud}
    sent: "2017-07-07T05:37:08.635Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "595f1b2189aea4761d731550"
    text: {Thanks! `date!` is  not a simple one, but it is very well defined and algoritms for processing  dates are well known, so it's like driving 500 miles on a straight and flat 4-lanes highway (it can take time, but it's a smooth ride), while wrapping some OS API (like GUI) is often more like a 10 miles trip, but on a single-lane serpentine mountain mud road. *(@greggirwin Need to check your link about the adjectives order again, not sure I got it right just by how it sounds)* ;-)}
    sent: "2017-07-07T05:24:49.996Z"
    editedAt: "2017-07-07T05:29:01.834Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f004689aea4761d72ba3d"
    text: {That's a lot of work. We use these datatypes without thinking--at least for me--about all the details that have to be right, all the features packed into each one. That's why we love the language. Looking at the date code, it's a reminder that so much work goes into each piece. Thanks @dockimbel  and @qtxie. Now I need to clear the decks and put this to use!}
    sent: "2017-07-07T03:30:14.673Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595efcca76a757f808e5c015"
    text: "Man, I step away from my desk...^/^/Go Team Red! "
    sent: "2017-07-07T03:15:22.251Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595ed1174bcd78af56845444"
    text: "Dates, yes nice-- I needed those, ty very much!"
    sent: "2017-07-07T00:08:55.389Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "595eb7d74bcd78af5683f663"
    text: {Date!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Thanks, Doc!}
    sent: "2017-07-06T22:21:11.953Z"
    v: 1
    author: "556af11b15522ed4b3e13239"
) #(
    id: "595ea98e1c8697534afa6843"
    text: "And of course better unicode handling : )"
    sent: "2017-07-06T21:20:14.167Z"
    editedAt: "2017-07-06T21:20:28.094Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "595ea97289aea4761d717730"
    text: {@rebolek Yep, the case-sensitivity of MAP! does help.}
    sent: "2017-07-06T21:19:46.580Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "595e7e3389aea4761d70b400"
    text: {@rgchris btw, current Red JSON decoder from Red tools can convert the file you mentioned.}
    sent: "2017-07-06T18:15:15.959Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "595e635b2723db8d5ee46a91"
    text: ":clap: "
    sent: "2017-07-06T16:20:43.390Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "595e1cf076a757f808e18d12"
    text: {Okay, have to use -r (as usual sorry) and -t Windows too}
    sent: "2017-07-06T11:20:16.735Z"
    editedAt: "2017-07-06T11:22:12.660Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595e1c39f5b3458e301b9f17"
    text: {@pekr  Can you compile gui-console.red using Rebol/View?}
    sent: "2017-07-06T11:17:13.510Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595e0cc36ae41d5d33bfa546"
    text: "We are on the way! push hard :+1: "
    sent: "2017-07-06T10:11:15.714Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "595e0ac676a757f808e1335c"
    text: "Very good!"
    sent: "2017-07-06T10:02:46.255Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595df9ed1c8697534af6f9b7"
    text: "Bravo!"
    sent: "2017-07-06T08:50:53.336Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "595df5fabf7e6af22cad6024"
    text: ":+1: "
    sent: "2017-07-06T08:34:02.537Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595df3fabf7e6af22cad563a"
    text: {Great work. I notice various innovations wrt R2/3 dates. Will experiment with them all, and no doubt have remarks and possibly issues.}
    sent: "2017-07-06T08:25:30.763Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "595df38a1c8697534af6dd45"
    text: ":clap: "
    sent: "2017-07-06T08:23:38.136Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595df23d89aea4761d6ddecf"
    text: {That's great, date funcitonality was kind of missing. Tested, seems to work as expected so far. And btw - red-gui.exe now exceeds 1MB by few kilos :-)}
    sent: "2017-07-06T08:18:05.411Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "595df08f329651f46e5c0951"
    text: {Date branch merged. It's fully functional and passes all the unit tests. A short documentation will follow with maybe a few minor extra features.}
    sent: "2017-07-06T08:10:55.814Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595ded1b0de4d2545efbd5a7"
    text: {Same with absolute path from console - works only on second try.}
    sent: "2017-07-06T07:56:11.732Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595de3fa2723db8d5ee1e518"
    text: {I've double checked from console (moved scripts into folder with Red toolchain) and...^/```^/>> do %main.red^/[42]^/== [42]^/```^/But with `F6` hotkey from VSCode it's still `[answer]` :confused: Has something to do with absolute/relative path to script?}
    sent: "2017-07-06T07:17:14.927Z"
    editedAt: "2017-07-06T07:19:11.702Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595de3b976a757f808e0727f"
    text: "Dang, deleted first message"
    sent: "2017-07-06T07:16:09.033Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595de35c6ae41d5d33bee41e"
    text: {Same as  @toomasv with clean console^/```^/--== Red 0.6.2 ==-- ^/Type HELP for starting information. ^/^/>> do %main.red^/[answer]^/== [answer]^/>> do %main.red^/[42]^/== [42]^/```}
    sent: "2017-07-06T07:14:36.361Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595de0cb76a757f808e0673d"
    text: {@9214 Curiously, with clean console, it works on second try only:^/```^/>> do %main.red^/[answer]^/== [answer]^/>> do %main.red^/[42]^/== [42]^/```}
    sent: "2017-07-06T07:03:39.956Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "595dd11289aea4761d6d568a"
    text: {@9214 On W10 it works. ^/```^/>> do %main.red^/[42]^/== [42]^/```}
    sent: "2017-07-06T05:56:34.285Z"
    editedAt: "2017-07-06T05:57:53.582Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "595d59fa3230e14f3a2c3da6"
    text: {@dockimbel regarding my wish about macro inclusion, I'm not sure that it's working:^/^/```Red^/; %macro.red^/#macro answer: func [][42]^/```^/```Red^/; %main.red^/#include %./macro.red^/^/probe [answer]^/```^/Results in `[answer]`. What I'm doing wrong?^/}
    sent: "2017-07-05T21:28:26.908Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595c5e631c8697534aef479a"
    text: {@rgchris It seems that treating Twitter IDs as integer in JSON is not only an issue in Rebol or Red - https://dev.twitter.com/overview/api/twitter-ids-json-and-snowflake}
    sent: "2017-07-05T03:34:59.530Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595c5b6b6ae41d5d33b7a026"
    text: {@rgchris Supporting JSON as best as possible is a goal. We are still at a time in Red development where we can adjust some semantics and add whatever we need in order to fulfill that goal.}
    sent: "2017-07-05T03:22:19.459Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "595c580ec101bc4e3a5171a2"
    text: {Both fair points. Having case-sensitive map keys does alleviate things though using strings within paths to access values is not the prettiest (nor using **select** on deeply nested values). The most common big integers I encounter are Twitter IDs—that would offer a useful case test...}
    sent: "2017-07-05T03:07:58.903Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "595c4fd11c8697534aef0ee1"
    text: {JSON has only "numbers" which may or may not be integers. Without prior application knowledge, I feel they can only be safely handled the way literal numbers are handled in Rebol & Red:^/```text^/>> type? 1^/== integer!^/>> type? 2147483648^/== decimal!^/```}
    sent: "2017-07-05T02:32:49.212Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595c4e8d76a757f808d92474"
    text: {The only way to guarantee JSON key values to be usable is to treat them as strings (at least at the "library" level). I think it would take prior knowledge of the content to safely convert "key" strings to words.   }
    sent: "2017-07-05T02:27:25.887Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595c4d816ae41d5d33b76ece"
    text: { @rgchris I don't feel that the JSON spec is ambiguous about object "keys" being case sensitive. In JSON, the object "key" is specified as a string (as specified in the JSON spec).^/I feel that JSON is case-sensitivity agnostic.^/^/The issue of case-sensitity only comes when converting JSON into a more usable form in a program. This is easy in languages which have objects/associative arrays which support string keys and does not apply case sensitivity to strings. It is not so easy in languages that don't. (Red falls into the former category).^/^/```text^/>> m: #("a" 1 "A" 2)^/== #(^/    "a" 1^/    "A" 2^/)^/>> select/case m "a"^/== 1^/>> select/case m "A"^/== 2^/```^/^/ }
    sent: "2017-07-05T02:22:57.744Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595c49cc2723db8d5eda7341"
    text: {We'll have a default JSON module, almost certainly, but it will be what it is and others can create special versions if it's not enough. We have `map!` now, so the key issue can be solved there, though it creates other issues.}
    sent: "2017-07-05T02:07:08.712Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595c0741329651f46e5369fa"
    text: {(despite that JSON is more accessible that XML, it still stinks—it took Rebol, dumbed it down, declared victory and consigned messaging to mediocrity for our current generation)}
    sent: "2017-07-04T21:23:13.734Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "595c06c91c8697534aedf453"
    text: {There are going to be some complexities within a JSON en/decoder as certain parts of the spec are ambiguous—Are object keys case sensitive? What to do with keys that don't conform to Red's word spec? What to do with duplicate object keys? How to handle integers that exceed Red's integer limitations? Support JSONP? My goal with [JSON parser for Rebol 2](http://reb4.me/r/altjson) was to be pragmatic based on samples encountered in the wild and that inherently made it more complex than one might intuit (even then chokes on [a file](https://html.spec.whatwg.org/entities.json) that @rebolek brought to my attention—I think was addressed in the Rebol 3 version).}
    sent: "2017-07-04T21:21:13.665Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "595bfee42723db8d5ed951f9"
    text: {Whoever invented XML, they deserve something terrible... caries or a good headache at least}
    sent: "2017-07-04T20:47:32.882Z"
    editedAt: "2017-07-04T20:47:44.262Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595bfe735a1ab55f64560c67"
    text: {XML is unworkable. If it weren't for importing in Excel to get an overview it really would be impossible.}
    sent: "2017-07-04T20:45:39.183Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595bf2fbbf7e6af22ca4038f"
    text: {JSON is pretty important in 2017. ^/XML continues to fall out of favour, but it's still used in a lot of places. ^/I also think at least JSON should be included. A lean, simple implementation though - no Java-like bloaty, overkill }
    sent: "2017-07-04T19:56:43.818Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "595be1604bcd78af56768acc"
    text: {Right. Well if it is simple to do I am for it, otherwise I think there are more urgent issues to attend. But I am all for getting some guidance for community efforts to fill in the gaps. Perhaps it is known that I have some shared repo's ideal for working on this kind of issues.}
    sent: "2017-07-04T18:41:36.147Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595bbdf75a1ab55f6454b91b"
    text: {Sorry, it was a commit, not a ticket: https://github.com/red/red/commit/423648ea6bc2a1dd8d0264062026330766ddb984#commitcomment-22895434}
    sent: "2017-07-04T16:10:31.072Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595b7889329651f46e503647"
    text: "ticket?"
    sent: "2017-07-04T11:14:17.162Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595a73c96ae41d5d33aea9a0"
    text: "@x8x, I commented on the ticket itself. "
    sent: "2017-07-03T16:41:45.011Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595a55a2ad9c781843c6e5d5"
    text: {That is more for `time!` than for `date!`? Or you want to calculate pi-day up to six digits after the decimal point? I will be more than happy with just the `date!` for now.}
    sent: "2017-07-03T14:33:06.216Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595a43b90cef4fed2eb70181"
    text: {As ninja Red Team is currently working on `date!` and implemented `integer! to date!` and `date! to integer!` to convert to/from unix date, does anyone think we should also have `float! to date!` and `date! to float!` to support unix time with subseconds? Good arguments needed! :smile: }
    sent: "2017-07-03T13:16:41.443Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59592be86ae41d5d33a99d71"
    text: "Thanks @ldci. I like the readme listing changes. "
    sent: "2017-07-02T17:22:48.746Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5958ae248dae425031764f43"
    text: "RedCV updated here https://github.com/ldci/redCV"
    sent: "2017-07-02T08:26:12.796Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "5957dc20703e565c336356b0"
    text: "@greggirwin great!"
    sent: "2017-07-01T17:30:08.008Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5957db94703e565c3363545d"
    text: {@rebolek, I got the all clear from Reichart to share my old code. Just FYI.}
    sent: "2017-07-01T17:27:48.566Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5957ac155a1ab55f64448b78"
    text: {What I'd actually forgotten in *this specific instance* was not using `-r`; which I didn't have to till the change in red/red@735b5362.}
    sent: "2017-07-01T14:05:09.131Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5957ab7fad9c781843bd10f6"
    text: {So, my understanding is `-u` recompiles / updates libRedRT, which fails if you only use `-c`}
    sent: "2017-07-01T14:02:39.912Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5957ab458dae42503172facf"
    text: {```ps^/Compiling to native code...^/libRedRT-extras.r file generated, recompiling...^/```}
    sent: "2017-07-01T14:01:41.668Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5957ab24f5b3458e30004c55"
    text: {I also see this when using `-u`, which I don't otherwise:}
    sent: "2017-07-01T14:01:08.263Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5957aadc4bcd78af566541c6"
    text: {@dockimbel thanks, so here's the relevant part:^/>Such fast compilation mode also works for Red scripts that embed Red/System code. Two cases are possible:^/1. Red/System code does not contain any call to Red runtime library.^/2. Red/System code contains one or several calls to Red runtime library.^/[..]^/In the second case, a custom version of libRedRT is required, but the toolchain will take care of the process, it just requires the user to compile *once* using `-u` option, then simply use `-c` for next compilations}
    sent: "2017-07-01T13:59:56.179Z"
    editedAt: "2017-07-01T14:00:25.135Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5957a9f23230e14f3a140bbb"
    text: {Somewhat related is this feature/fix: red/red@735b5362}
    sent: "2017-07-01T13:56:02.152Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5957a9d58dae42503172f450"
    text: {Each one has its own purpose, it's explained in the last blog article.}
    sent: "2017-07-01T13:55:33.660Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5957a9733230e14f3a140a34"
    text: {So `-c`, `-r` and `-u` each generate a diferent type of executable it seems}
    sent: "2017-07-01T13:53:55.864Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5957a944f5b3458e3000469b"
    text: {Context: [RedCV July 1, 2017 5:41 AM](https://gitter.im/ldci/redCV?at=5956efa4ad9c781843ba9eca)^/> redCV contains R/S code, so you need to compile it either in release mode (`-r`), or using by building a custom libRedRT (using `-u`).^/> @dockimbel Hmm.. I tried the `-u` flag too, but I thought that was on by default? (Maybe I forgot to `red clear`) I'll try with `-r` and see if any difference^/> No, the default is to build a generic libRedRT for Red scripts without custom R/S code.^/^/}
    sent: "2017-07-01T13:53:08.143Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5957194e8dae425031710c67"
    text: {Btw - according to Trello, "Simple stream-oriented XML parser" is planned for the next release.}
    sent: "2017-07-01T03:38:54.754Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5956a0056ae41d5d33a0d253"
    text: {I imagine there will be some great ways to mix the two, for high level power and speed.}
    sent: "2017-06-30T19:01:25.953Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59569f87c101bc4e3a3a696f"
    text: {They probably won't have to be native, but I'm interested in trying some R/S coding again ;)}
    sent: "2017-06-30T18:59:19.495Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59569f36ad9c781843b95bd5"
    text: {I hope they won't have to be native, as they will be great `parse` examples.}
    sent: "2017-06-30T18:57:58.771Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59569f1c703e565c335ee836"
    text: {I think there should be official libs/modules for them, and JSON should certainly be included by default. They shouldn't grow the runtime too much. Creating test cases is also very helpful. Building a corpus of data is great. I have a number of JSON test files I can contribute.}
    sent: "2017-06-30T18:57:32.489Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59569bb63230e14f3a105a4d"
    text: {@dander bug reports are certainly welcome, or wishes for updates}
    sent: "2017-06-30T18:43:02.821Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59569b805a1ab55f6440cc6f"
    text: {I've never really participated in open source before this point, so this community organization stuff is new to me}
    sent: "2017-06-30T18:42:08.075Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59569b4bad9c781843b9481f"
    text: {so I'm pretty interested in the JSON/XML processing, and I think I could help somehow. I'm sort of wondering how would be best to help toward a common effort, like messaging you/@Zamlox about specific things, or submitting bug reports to those relative depos, or if that could be consolidated in Red/Community, for example}
    sent: "2017-06-30T18:41:15.663Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59569b028dae4250316f3d46"
    text: {I think so. But maybe compiled Red version would be fast enough, so Red/System version won't be necessary.}
    sent: "2017-06-30T18:40:02.416Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59569a1da42fa68a3087bb47"
    text: {I see... so maybe Red implementations would be good for experimenting with design, but the final implementation should be done natively}
    sent: "2017-06-30T18:36:13.359Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "595699e35a1ab55f6440c4e7"
    text: "well, I did say candidates :wink:"
    sent: "2017-06-30T18:35:15.787Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "595699ca76a757f808c1ff67"
    text: {Anyway, I think that JSON and few other formats are so important to support, that they should be included and also they should be implemented as natives for speed. }
    sent: "2017-06-30T18:34:50.362Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5956999a8dae4250316f3762"
    text: "That's not up to us to decide ;)"
    sent: "2017-06-30T18:34:02.696Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "595698e476a757f808c1fc4f"
    text: "Or is it more informal at this point?"
    sent: "2017-06-30T18:31:00.616Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5956989d4bcd78af566180a1"
    text: {Are you guys thinking the goal for these tools would be to refine them to the point where they would candidates for inclusion in Red?}
    sent: "2017-06-30T18:29:49.758Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "595692874bcd78af56616457"
    text: {Right. There are no hard-and-fast rules about what goes where.}
    sent: "2017-06-30T18:03:51.862Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59566fec8dae4250316e735f"
    text: {It's a bad design. What goes into attributes and what into value seems pretty random to me. But we are talking about XML here, so it goes.}
    sent: "2017-06-30T15:36:12.971Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59566f993230e14f3a0f8ee4"
    text: {But then someone will have a key called `attributes` for sure.}
    sent: "2017-06-30T15:34:49.132Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59566f733230e14f3a0f8d96"
    text: "You can do a sub-structure as well."
    sent: "2017-06-30T15:34:11.369Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59566f2a8dae4250316e6e2d"
    text: {I think I tried that too. If you need to get them back out, round trip, you have to mark the attrs somehow, which is risky if you do it by annotating the name. }
    sent: "2017-06-30T15:32:58.280Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59566dad5a1ab55f643ff707"
    text: {I wrote the encoder in the morning, it wasn't much work. What I am thinking about is to merge attributes and value somehow, so it could be converted to simple key/value storage. But getting it right, that's a problem 🤔}
    sent: "2017-06-30T15:26:37.013Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "59566cea703e565c335df6f9"
    text: {Although it's not so large that a clean rewrite would be a huge amount of work. Maybe better to just build on yours and Zamlox's work, taking some design ideas.}
    sent: "2017-06-30T15:23:22.754Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59566ca3bf7e6af22c8dca1b"
    text: {I also added a `/with-attr` refinement because a lot of XML data doesn't use attrs, and omitting them makes things just key-val, which is much nicer.}
    sent: "2017-06-30T15:22:11.559Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59566c8b5a1ab55f643ff0b9"
    text: "I understand."
    sent: "2017-06-30T15:21:47.863Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59566c3abf7e6af22c8dc873"
    text: {In this case, I'm biased toward producing a better result over compatibility. ^/^/I believe it was, but I would want to make sure it was OK anyway.}
    sent: "2017-06-30T15:20:26.054Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59566c175a1ab55f643fee71"
    text: {Wasn't QTask released under MIT? Or at least parts of it, IIRC.}
    sent: "2017-06-30T15:19:51.055Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59566c053230e14f3a0f7ac6"
    text: {```^/^-type-map: [^/^-^-; XML type^-REBOL type ^-conversion funcs^/^-^-"integer"^-integer!^-[to-REBOL to-integer to-XML form]^/^-^-"string"^-string!^-^-[to-REBOL to-string  to-XML form]^/^-^-"boolean"^-logic!^-^-[to-REBOL from-XML-boolean  to-XML to-XML-boolean]^/...^/```^/```^/^-XML-schema: [^/^-    "Project" [^/^-        "UID" "string" ^/^-        "Name" "string" ^/^-        "Title" "string" ^/^-        "Subject" "string" ^/^-^-    "Calendars" [^/^-^-^-    "Calendar" [^/^-^-^-        "UID" "integer" ^/^-^-^-        "Name" "string" ^/```}
    sent: "2017-06-30T15:19:33.472Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59566bd076a757f808c1282d"
    text: {Found it. It was originally part of a project for QTask, so I could ask Reichart if it can be shared. The project was loading MSProject data, so it has added support for schemas/type-mapping.}
    sent: "2017-06-30T15:18:40.557Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59566b7a703e565c335dedaf"
    text: {@greggirwin R2's `parse-xml` also as key-attr-val format, so I think it makes sense sticking with it. But being able to `select` is nice feature to have, I agree :)}
    sent: "2017-06-30T15:17:14.680Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59566a80703e565c335deaae"
    text: {That will be a good comparison. His approach is very nice though. My R2 XML work was all based on the standard funcs, IIRC. I think I modded the output though, so you could `select` on the result by key. That is, the original was key-attr-val and mine was key-val-attr. Not as small or clear as the work you two are doing. }
    sent: "2017-06-30T15:13:04.509Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595669924bcd78af5660a7d9"
    text: "@rebolek :+1: "
    sent: "2017-06-30T15:09:06.787Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "595669594bcd78af5660a683"
    text: {His approach is interesting, he's just replacing some chars and then loading it, I would like to write different version using parse's collect/keep to see what is faster.}
    sent: "2017-06-30T15:08:09.234Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5956691a329651f46e3caaf6"
    text: {I've added XML encoder/decoder to [Red tools](https://github.com/rebolek/red-tools). Decoder is @Zamlox 's great XML parser https://github.com/Zamlox/red-tools/blob/master/xml/xml.red , I've just wrote XML emitter.}
    sent: "2017-06-30T15:07:06.218Z"
    editedAt: "2017-06-30T15:08:18.315Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "595627aca42fa68a30858b0c"
    text: {@toomasv I tested it just now, pretty better output! :+1: }
    sent: "2017-06-30T10:27:56.125Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "5955f71dad9c781843b63764"
    text: {@planetsizecpu Thanks! There is an improved version in gist (and an alternative version too)}
    sent: "2017-06-30T07:00:45.272Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5955c5024bcd78af565dbc77"
    text: {@9214 There is no naming convention yet, and I'm not sure if we need one  or not. Words are case-insensitive by default in Red, there is no way for now to do a case-sensitive matching in macros, but that could be added for *pattern-matching* macros. Also, you can use any other Red value instead of a word, so you could use `#numbers` for example, or `@numbers`. `does/has` could be supported for *named* macros.}
    sent: "2017-06-30T03:26:58.050Z"
    editedAt: "2017-06-30T03:31:13.307Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59553f936ae41d5d339a9aad"
    text: {Macros are a relatively new feature, and we don't have style guides for naming conventions. When in doubt, follow normal conventions. In this case, we can think of them like a form of memoization or singleton constructor, where I often prepend `make-` to the name. ^/Does anyone else have patterns or conventions they use for this? Should we include notes in the style guide?}
    sent: "2017-06-29T17:57:39.522Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59552f00c101bc4e3a340509"
    text: {First I wanted to write it like that^/```^/numbers: NUMBERS^/```}
    sent: "2017-06-29T16:46:56.543Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59552d3b11755ab056365e5f"
    text: {@greggirwin that's a good question, but then what are naming conventions for macros? ^/^/What I want to accomplish is to generate some array of numbers at compile time and then set word to this array.^/```^/very-large-array-of-numbers: <some-descriptive-macro-name-here>^/```}
    sent: "2017-06-29T16:39:23.305Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59552c8011755ab056365ac7"
    text: {Red is case insensitive. Why would macros *not* be?^/^/For `does/has`, probably that nobody has asked and made a good case for it.}
    sent: "2017-06-29T16:36:16.071Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59551d163230e14f3a09b07d"
    text: {also, why `does` and `has` are not accepted in macro directives?}
    sent: "2017-06-29T15:30:30.528Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59551cfb11755ab056360ce2"
    text: {why macros are case insensitive?^/```^/expand [^/    #macro LEET: func [] [1337]^/    leet: LEET^/]^/```^/results in:^/```^/[1337 1337]^/```}
    sent: "2017-06-29T15:30:03.498Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5954dc4ec101bc4e3a32622b"
    text: {@toomasv  feats & see, useful funcs! I will save for standing on the cutting edge, thx :+1: }
    sent: "2017-06-29T10:54:06.381Z"
    editedAt: "2017-06-29T10:54:44.036Z"
    v: 2
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "5952532c8dae4250315c0178"
    text: {@greggirwin Documenting with "(modified)" sounds like a great idea.}
    sent: "2017-06-27T12:44:28.980Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59524b91bf7e6af22c7b016f"
    text: {@Clemens-H, in R3 we started a convention where "(modified)" was included in the doc string for mutated args. We could do that in Red as well. I agree that it helps to know.}
    sent: "2017-06-27T12:12:01.933Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59524ab3ad9c781843a5a0a7"
    text: {@rebolek, I thought I had posted it, but here you go:^/```^/; TBD: pair tuple^/combine: func [^/^-"Merge values, modifying a if possible"^/^-a "Modified if series or map"^/^-b "Single value or block of values; reduced if `a` is not an object or map"^/][^/^-if all [block? :b  not object? :a  not map? :a] [b: reduce b]^/^-case [^/^-^-series? :a [append a :b]^/^-^-map?    :a [extend a :b]^/^-^-object? :a [make a :b]^/^-^-'else      [append form :a :b]^/^-]^/]^/join: func [^/^-"Concatenate/merge values"^/^-a "Coerced to string if not a series, map, or object"^/^-b "Single value or block of values; reduced if `a` is not an object or map"^/][^/^-if all [block? :b  not object? :a  not map? :a] [b: reduce b]^/^-case [^/^-^-series? :a [a: copy a]^/^-^-map?    :a [a: copy a]^/^-^-object? :a []^-; form or mold?^/^-^-'else      [a: form :a]^/^-]^/^-combine a b^/]^/```}
    sent: "2017-06-27T12:08:19.127Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5952392a19147ac323130f0b"
    text: {Can anyone on macOS reproduce this issue? https://github.com/red/red/issues/2837}
    sent: "2017-06-27T10:53:30.192Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59522f924bcd78af564ddc84"
    text: {@geekyi @greggirwin @gltewalt I understand that modifying the arguments is important to reduce pressure on the GC.  I like the convention in Scheme, where functions that modify an argument end in `!`. One immediately sees if a function call is destructive or not. Julia has adopted the same convention. Obviously one cannot use `!` in Red, but maybe another character would make sense...}
    sent: "2017-06-27T10:12:34.578Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5951ebbb6ae41d5d338b503c"
    text: {@toomasv Cool, thanks. One bug is fixed, I am going to look at the other one (if still present).}
    sent: "2017-06-27T05:23:07.083Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5951e913c101bc4e3a253a54"
    text: {@rebolek I am using your json, and Red-tools in general. Great stuff. :+1: }
    sent: "2017-06-27T05:11:47.635Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5951e5e4ceb5bef82eb4e438"
    text: {Or just 'combine' that works on all (sensible) types}
    sent: "2017-06-27T04:58:12.644Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5951e4fa6ae41d5d338b2c3c"
    text: "merge?"
    sent: "2017-06-27T04:54:18.164Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5951e2b976a757f808aca1ac"
    text: {I'm not sure if anyone's using `%json.red`, but I found at least one bug and possibly two.}
    sent: "2017-06-27T04:44:41.761Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5951e1ea11755ab05627b6ac"
    text: "@greggirwin Can you share the code?"
    sent: "2017-06-27T04:41:14.101Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59519d2a703e565c334895d9"
    text: {The big difference is that the `*pend` funcs append, modifying the initial arg (which must be a series). `Join` and `rejoin` don't alter the initial value, and it can be any type, because it's converted to  a string if it's not already a series. R3 made matters worse by adding `ajoin`. It's worth some brain work to improve things. I have a `join/combine` experiment that also works on objects and maps. All we need is a good name and clear semantics. The rest is easy. ;^^)}
    sent: "2017-06-26T23:47:54.185Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59519ac8c101bc4e3a242dd2"
    text: {Regarding #2831 / #2832, I'm actually not sure what the differences are between `join`, `rejoin`, `repend`, etc. ^/I'm talking as a newbie who doesn't know the concepts involved here muc.^/Basically, what I get is this:^/- The purpose is to *concatenate* or *join* stuff^/- The underlying mechanism is to `reduce`, then `append` (what I get from the `source`)^/It's a bit confusing, as it feels like they all are trying to do the same thing, and the naming doesn't help}
    sent: "2017-06-26T23:37:44.941Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594fd4acceb5bef82eac1537"
    text: "@greggirwin Tank you too."
    sent: "2017-06-25T15:20:12.076Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "594fca32ad9c7818439ab9d0"
    text: "Thanks Doc."
    sent: "2017-06-25T14:35:30.229Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594f270611755ab0561c8d06"
    text: {I've added a red/julia room, let's move all Julia related discussions there: https://gitter.im/red/julia}
    sent: "2017-06-25T02:59:18.629Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594efa15c101bc4e3a195fb7"
    text: {@joa-quim [structure of objects](https://github.com/red/red/blob/master/runtime/datatypes/structures.reds#L179) and [debug tools](https://github.com/red/red/blob/master/runtime/debug-tools.reds) has some nice debugging stuff you can use or `#import`}
    sent: "2017-06-24T23:47:33.601Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594eef90c101bc4e3a193b06"
    text: "No Julia and no more suggestions here. :^^\"
    sent: "2017-06-24T23:02:40.088Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594ed9ca8dae4250314dcf56"
    text: {And that ``word`` would be the ``t`` in my example above? Than my next doubt is what type do I declare in the callback. If I do this^/````^/redRoutine(redWord("blabla"), "[t [word!]]", cf);^/cmd = "view [backdrop yellow  t: text  yellow {Hello World!}^/    button {Click} [blabla t] ^/]"^/````^/it doesn't allow it^/````^/julia> include("test2_cb.jl")^/*** Script Error: blabla does not allow object! for its t argument^/*** Where: blabla^/*** Stack: view do-events do-actor do-safe^/````}
    sent: "2017-06-24T21:29:46.283Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "594ed3463230e14f3aef40bd"
    text: {I haven't done it myself, so I'm thinking out loud. On the Red side, you have a word referring to your object, yes? Pass that, or a complete path to the object field, to Julia and use redGetPath/redSetPath to access it. If you only pass the base word, you need to know the field names on the Julia side to build the path. You can probably also use redDo or another routine to use `words-of` on the object.}
    sent: "2017-06-24T21:01:58.103Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594ead8b76a757f808a00f3f"
    text: {@greggirwin ^/> passing a word or path^/^/Not sure I got this. My Red knowledge is rather poor, I'm focusing for the moment in trying to find out how to make the two languages talk a bit.^/For this very simple example I guess that I could add more arguments to the callback functions and pass info that way, but it's rather limiting I think. Is that what you are suggesting? }
    sent: "2017-06-24T18:20:59.113Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "594eaba2bf7e6af22c6c4fc5"
    text: {@joa-quim, there is no object access API in libRed right now, but you might be able to do it by passing a word or path and accessing things via those APIs.}
    sent: "2017-06-24T18:12:50.723Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594eaac557a6e9f72ef57202"
    text: {Ok, I have a little success if I do^/````^/using Red^/^/function blabla(bla)^/    println(unsafe_string(redCString(bla)))^/    return redUnset()^/end^/^/cf = cfunction(blabla, Ptr{Void}, (Ptr{Void},));^/redOpen()^/redRoutine(redWord("blabla"), "[t [string!]]", cf);^/^/cmd = "view [backdrop yellow  t: text  yellow {Hello World!}^/    button {Click} [blabla t/text] ^/]"^/redDo(cmd)^/````^/but it's too short. To real work I think access to entire object and being able to modify and apply changes is a must.}
    sent: "2017-06-24T18:09:09.012Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "594ea181c101bc4e3a182733"
    text: {@dockimbel Had to stop for a few days and I'm trying to advance a bit more but, not surprisingly, need more assistance. Imagine that in the same example I want to set printed text but from the Julia side. I modified the example to^/````^/using Red^/^/function blabla(bla)^/    println(redTypeOf(bla))^/    return redUnset()^/end^/^/cf = cfunction(blabla, Ptr{Void}, (Ptr{Void},));^/redOpen()^/redRoutine(redWord("blabla"), "[]", cf);^/^/cmd = "view [backdrop yellow  t: text  yellow {Hello World!} ^/    button {Click} [blabla t] ^/]"^/redDo(cmd)^/````^/and when I click some times the button it prints on julia console^/````^/131^/5^/5^/5^/````^/An unexpected result is that the first number is different and unknown.^/From Red side I can see that ``t`` is^/````^/== make object! [^/    type: 'text^/    offset: 10x10^/    size: 80x24^/    text: "Hello World!"^/````^/So my question is, is there a way in which I can have access those object members from Julia, modify them (a separate issue, I know) and apply the change to Red side?^/^/Thanks}
    sent: "2017-06-24T17:29:37.052Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "594e2fa3703e565c333a8889"
    text: {FYI, `MacOSX` name in whole Red codebase has been replaced by `macOS`, please update your preprocessor conditional expressions accordingly (both in Red and R/S).^/}
    sent: "2017-06-24T09:23:47.906Z"
    editedAt: "2017-06-24T09:23:57.838Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594d868a3230e14f3aea9685"
    text: "@greggirwin Thanks! For 'copy'."
    sent: "2017-06-23T21:22:18.856Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "594d6ea2c101bc4e3a13d07c"
    text: "Need the `copy` in there. See, I really tried it!"
    sent: "2017-06-23T19:40:18.598Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594d6e91c101bc4e3a13d021"
    text: {@toomasv: `see: func [num][browse append copy github fifth find feats-blk num]`}
    sent: "2017-06-23T19:40:01.059Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "594d47256ae41d5d33791029"
    text: "*Very* cool @toomasv!"
    sent: "2017-06-23T16:51:49.757Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594cf9cfceb5bef82ea16206"
    text: "Yeah, it's bit boring 💤"
    sent: "2017-06-23T11:21:51.267Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594cf97c8dae425031463472"
    text: "@rebolek but that's not fancy"
    sent: "2017-06-23T11:20:28.288Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594cf95411755ab056140f86"
    text: "@rebolek right!"
    sent: "2017-06-23T11:19:48.355Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "594cf8e93230e14f3ae7f395"
    text: {@toomasv why not just `pages: func [n][n + 9 / 10]`}
    sent: "2017-06-23T11:18:01.038Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594cf83576a757f8089915cc"
    text: "quick application of your example! :)"
    sent: "2017-06-23T11:15:01.531Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "594cf814c101bc4e3a118b8e"
    text: {@toomasv ^/```^/pages: func [n][do compose [(if 0 < (n % 10) [[1 +]]) (n / 10)]]^/```^/oh, you ;) nice!}
    sent: "2017-06-23T11:14:28.148Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594cf4a78dae425031461dd5"
    text: {```^/Red [^/^-Title: {Find recent feats}^/^-Usage: {`feats 30` -- find 30 latest feats ^/^-^-^-`see 5` -- see 5th feat's code}^/]^/pages: func [n][do compose [(if 0 < (n % 10) [[1 +]]) (n / 10)]]^/github: https://github.com^/feats-page: https://github.com/red/red/search?o=desc&q=FEAT%3A&s=committer-date&type=Commits&p=^/feats-blk: clear [] ^/ord: 0^/feats: func [num][^/^-repeat n pages num [^/^-^-parse read append copy feats-page n [^/^-^-^-some [^/^-^-^-^-thru {<em>FEAT</em>: }  copy feat to {</a>} ^/^-^-^-^-thru {<p class="f6 text-gray mt-1">} thru {">} copy author to {</a>} ^/^-^-^-^-thru {<relative-time datetime="} copy date to {T} ^/^-^-^-^-thru {<div class="commit-links-group} thru {<a href="} copy href to {" class}^/^-^-^-^-(append feats-blk reduce [ord: ord + 1 date author feat href])^/^-^-^-]^/^-^-]^/^-]^/^-foreach [a b c d e] feats-blk [print [a b c d]]^/]^/see: func [num][browse append github fifth find feats-blk num]^/```}
    sent: "2017-06-23T10:59:51.104Z"
    editedAt: "2017-06-23T11:08:17.447Z"
    v: 5
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "594cd624bf7e6af22c64e8d6"
    text: "@9214 Great. ;-)"
    sent: "2017-06-23T08:49:40.412Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594c609257a6e9f72eec44c0"
    text: "Gah! Mobile ..."
    sent: "2017-06-23T00:28:02.815Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594c60678dae42503143e796"
    text: {Used a rebol guide example as a template. ^/^/```parse read http://www.rebol.com [^/    any [to "REBOL" copy line to newline (print line)]^/]```}
    sent: "2017-06-23T00:27:19.863Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594c5d5ce60ad24f31043291"
    text: "@gltewalt, nice."
    sent: "2017-06-23T00:14:20.299Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594c52488dae42503143b57f"
    text: {@dockimbel [The route to the successful adoption of non-mainstream programming languages](https://esl-website-production.s3.amazonaws.com/uploads/document/file/77/The_route_to_the_successful_adoption_of_non-mainstream_programming_languages_-_Erlang_Solutions_Whitepaper_2017_.pdf)  ;)}
    sent: "2017-06-22T23:27:04.146Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594c2c4a4bcd78af5635fe32"
    text: {@gltewalt no, it's simple call to openweathermap API. But I will take a look at YQL.}
    sent: "2017-06-22T20:44:58.943Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594c2b80743aa6f7088cb8d8"
    text: "@rebolek Is that weather using YQL?"
    sent: "2017-06-22T20:41:35.990Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594c2a43ceb5bef82e9e43d1"
    text: ":+1: "
    sent: "2017-06-22T20:36:19.369Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594c29f7703e565c33328a0d"
    text: {Lazy approach:^/```^/parse read https://github.com/red/red [^/    any [to "FEAT:" copy line to </a> (print line)]^/]^/```}
    sent: "2017-06-22T20:35:03.664Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594c266baf2cb44427a0f94d"
    text: {```^/>> weather^/== "thunderstorm with light rain"^/```^/I would say that the rain is rather heavy right now, but it's nice to to be able to get it from Red console anyway.^/}
    sent: "2017-06-22T20:19:55.006Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594c201f88348abd0abb7ff7"
    text: "Bolek and Barry, nice! "
    sent: "2017-06-22T19:53:03.025Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594bf163af2cb444279feb0d"
    text: {It should be easily be adapted for Red if this is what you're after?  The bulk of the work is manually pruning out "un-notable" changes at the beginning.  See here for more info about what I initially did - https://chat.stackoverflow.com/transcript/message/37442077#37442077}
    sent: "2017-06-22T16:33:39.024Z"
    v: 1
    author: "5596737415522ed4b3e34e54"
) #(
    id: "594bf1147bf0f2951a2c595d"
    text: {Here's the program - https://github.com/metaeducation/ren-c/tree/master/scripts/changes-file}
    sent: "2017-06-22T16:32:20.564Z"
    v: 1
    author: "5596737415522ed4b3e34e54"
) #(
    id: "594bf0ff6462d8493c3d48d4"
    text: {re: CHANGELOG - I have program which creates a "Notable list of changes" in CHANGES.md from `git log` for Rebol3/Ren-C - https://github.com/metaeducation/ren-c/blob/master/CHANGES.md}
    sent: "2017-06-22T16:31:59.062Z"
    v: 1
    author: "5596737415522ed4b3e34e54"
) #(
    id: "594bc8e3af2cb444279f164d"
    text: {Well, the VID support on Win and Mac are huge releases. Android will be a large one too(?). Is there anything to say about the size and timescale needed for the other planned releases?  In other words can we do the extrapolation of the release history for an approximation toward version 1.0.0?}
    sent: "2017-06-22T13:40:51.290Z"
    editedAt: "2017-06-22T13:44:57.261Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "594b9677e59e74be0aa53e18"
    text: {Getting Trello info from Red:^/```^/>> do %http-tools.red^/== ...^/>> lists: send-request/auth https://www.trello.com/1/boards/FlQ6pzdB/lists 'GET 'token trello-token^/== ...^/>> foreach list lists/data [if equal? "Milestones" list/name [id: list/id]]^/>> cards: send-request/auth make-url [https://www.trello.com/1/lists id /cards] 'GET 'token trello-token^/== ...^/>> foreach card cards/data [print card/name]^/0.6.3 macOS GUI support^/0.6.4 New GUI console^/0.6.5 - Android GUI support^/0.7.0 - I/O support^/0.8.0 - Modules^/0.8.5 - Advanced GC (first beta)^/0.9.0 - Concurrency support^/0.9.5 - Port the toolchain to Red (if time permits)^/1.0.0 - First stable release^/```}
    sent: "2017-06-22T10:05:43.709Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594b6be702c480e6726d1eb3"
    text: "Automation is part of the programming world"
    sent: "2017-06-22T07:04:07.228Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594b6bc288348abd0ab8167e"
    text: "Script a changelog.md"
    sent: "2017-06-22T07:03:30.956Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594b61d7e59e74be0aa4530d"
    text: {I always filter git commit messages with FEAT to see the newly added features and test them. It's pretty easy with a git client.}
    sent: "2017-06-22T06:21:11.178Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "594b54c688348abd0ab7c1ad"
    text: {So actually the only problem which I can see is - someone coming to rebol-lang.org and seeing old Blog article, thinking not much new is happening. Dunno how to cure it, becase we can hardly expect Doc to blog more often, as it would drag his development time.}
    sent: "2017-06-22T05:25:26.894Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "594b545c5bf0bef94ccf3efc"
    text: {I would like to also mention other channels. Apart from ML/forum on Google, I watch Red Twitter channel, and I manage facebook group, where we just reached 160 members.}
    sent: "2017-06-22T05:23:40.316Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "594b542802c480e6726cbdbd"
    text: {Well, Gitter is mostly a chat. Rebol guys decided to go with the Discourse chat, because it might feel more "sticky". But I don't like forums much, as I rarely read old/dated topics/threads. So I hope Gitter stays for good and our community is used to chat from the Altme days. You can see commits here at the right column. You can also watch commits directly on Github. Whoever does, on a daily basis, gets really good overview about recent developments. There are also various branches you can watch ....}
    sent: "2017-06-22T05:22:48.763Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "594b42b5af2cb444279cc23b"
    text: {Our commits use a prefix to signify if it's a new feature or a fix. Just listing the commits using git or a git client, filtering on "FEAT:" prefix will give you an accurate changelog. Any good git visual client will allow to do that effortlessly.}
    sent: "2017-06-22T04:08:21.392Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594b3d9c6462d8493c39f461"
    text: {I don't feel I have that much of a problem with keeping up myself, tho I don't read every single commit and issue. I update the binary every few days, and use git lens to view file blame to see the commits and how the code was built. Probably not everyone has time for that, or don't know it's possible }
    sent: "2017-06-22T03:46:36.103Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594b3c4788348abd0ab7645f"
    text: {@PeterWAWood just voicing out possible options to move forward. What I meant to say is, the effort has to be, or rather has been traditionally put in by the commiter of code. So actually, I don't think that could improve short of having more contributors :) But bolek might come up with something interesting, so I'll wait for that}
    sent: "2017-06-22T03:40:55.794Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594b37be5bf0bef94cced44d"
    text: {@geekyi So where is this effort going to come from? Are you volunteering?}
    sent: "2017-06-22T03:21:34.069Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "594b1ef688348abd0ab6fb45"
    text: {@geekyi wonders if current red commit messages are slightly based on angular commit standards}
    status: true
    sent: "2017-06-22T01:35:50.756Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594b1eb57bf0f2951a288a57"
    text: {So either put effort to make better commit messages, or put effort to maintain changelog. For changelog, could automatically add a message when a Trello feature (checklist?) is done? }
    sent: "2017-06-22T01:34:45.027Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594b1df2bf1bfe6770d85fdc"
    text: {@rebolek I think something like that is what some projects do( see angular.js commits) the other mainstream way is to explicitly have a changelog.md}
    sent: "2017-06-22T01:31:30.874Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594b1d135bf0bef94cce7b52"
    text: "Trello cards be enough?"
    sent: "2017-06-22T01:27:47.931Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594b1cf688348abd0ab6f4c7"
    text: "(damn phone gitter) ...messages and "
    sent: "2017-06-22T01:27:18.810Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594b1ca96462d8493c398208"
    text: "Would an overview of comit "
    sent: "2017-06-22T01:26:01.547Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594afb666462d8493c3906db"
    text: {I'm glad to see some discussion about releases & info. I see and appreciate the frequent builds are available for download, but it's not easy to see what's new (or experimental) in those builds. It would be great if beside that download link, there was another link to a change log summary in easy to read form (I'm not familiar with the commit viewing process) - so if no change log page could be auto-collated or presented, then a tip on the download page for more info about commit viewing may be helpful. Therefore, currently I'm trying later builds rather blindly, so in that case, I stick with 0.6.2 (for better or worse). I agree that a version number (increment or otherwise) may not be so important (but is very good psychologically), but easily accessible and good info about what's in any release is the key thing.}
    sent: "2017-06-21T23:04:06.744Z"
    editedAt: "2017-06-21T23:13:37.621Z"
    v: 7
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "594ac19ba44c60fa4c4c8a4b"
    text: "I mean the default background color of the faces."
    sent: "2017-06-21T18:57:31.245Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "594abf10e265aa025ee71fe1"
    text: {Is It possible to change the default vid (snow ) color ? }
    sent: "2017-06-21T18:46:40.259Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "594a98e202c480e67269bc1b"
    text: "@rebolek I knew that! :D :clap: "
    sent: "2017-06-21T16:03:46.086Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594a97b5e265aa025ee64e10"
    text: {@9214 there is Red bot for Gitter available, I just need to get some place where it could live}
    sent: "2017-06-21T15:58:45.204Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a97accf9c13503caca66c"
    text: {or maybe newsletter (I'd call it "Red Alert")}
    sent: "2017-06-21T15:58:36.452Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594a974aa44c60fa4c4ba9a1"
    text: {@dockimbel dedicated gitter room with chat bot announcer (written in Red of course ;)) ?}
    sent: "2017-06-21T15:56:58.735Z"
    editedAt: "2017-06-21T15:57:09.858Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594a974802c480e67269b2fd"
    text: {I've got few ideas how to make that info easier to get, I will probably have something to show tomorrow (hopefully :smile: )}
    sent: "2017-06-21T15:56:56.158Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a8ee7cf9c13503cac74c3"
    text: {@joa-quim, I thought there was a new bit of info here: :point_up: [June 20, 2017 1:21 AM](https://gitter.im/red/red?at=5948ccf7bf1bfe6770cd2c58), maybe not though.}
    sent: "2017-06-21T15:21:11.157Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594a8c8217a30666708ae6f1"
    text: {Well, some followers do that, but you don't need to, you can look at the Trello board, though small features are not mentioned there. We try to keep Trello up to date. If you want to see where we are, that's the place to look at. BTW, we'll reorganize it soon to make it even easier to read. If you have suggestions about how to better communicate about our progress (without costing us too much time), I would be glad to improve our process.}
    sent: "2017-06-21T15:10:58.399Z"
    editedAt: "2017-06-21T15:16:18.935Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
)#(
    id: "594a8c7da44c60fa4c4b6633"
    text: {they may be in the daily builds, it's fine, but I don't know about them}
    sent: "2017-06-21T15:10:53.403Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a8c6d17a30666708ae688"
    text: {for me release is overview of features which were added since last release}
    sent: "2017-06-21T15:10:37.453Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a8c515bf0bef94ccbcb0a"
    text: {do you suggest me to walk though every commit to find out useful features every day?}
    sent: "2017-06-21T15:10:09.737Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a8c3702c480e672696b1e"
    text: "@maximvl Glad to hear that. ;-)"
    sent: "2017-06-21T15:09:43.927Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594a8c1f6462d8493c36d8b2"
    text: "I know what is rolling release"
    sent: "2017-06-21T15:09:19.746Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a8c18746f1fd66327fccc"
    text: {oh cmon, I've been using Gentoo and Funtoo linux distros for 8+ years already}
    sent: "2017-06-21T15:09:12.426Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a8b3d746f1fd66327f69d"
    text: {@maximvl > but once a time with a certain amount of changes the big release should happen^/^/What you call "big release" is a tag on a commit + a bumped version number + a blog article. We use a continuous release model since many years, so the "releases" with a version number are just milestones, they don't bring *any* feature that was not already there in the repo and in the last automated build. It's amazing to me that such simple model is so hard to understand for some followers. Though, I'm not surprised that some people care more about incrementing version numbers than available features. If we stopped making "milestone releases", that wouldn't change anything about what and when new features would be available, so for Red followers, that would make strictly no difference.}
    sent: "2017-06-21T15:05:33.517Z"
    editedAt: "2017-06-21T15:09:18.570Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594a68eae265aa025ee54f1c"
    text: {@greggirwin ^/>  If you can keep the Julia wiki updated with your findings ...^/^/Honestly, I'm not clear on what to add this time. I intend to a couple of simple use cases but I think the appropriate place to have them is in the ``Red.jl`` repo.}
    sent: "2017-06-21T12:39:06.797Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "594a67116462d8493c360745"
    text: {but yeah, no pressure, I'm just looking forward using Red for my (pet) projects}
    sent: "2017-06-21T12:31:13.524Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a66c2a44c60fa4c4a90f4"
    text: {@pekr my idea is you can add features on a daily basis but once a time with a certain amount of changes the big release should happen}
    sent: "2017-06-21T12:29:54.538Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a65e0a44c60fa4c4a8b20"
    text: {According to Trello board, what is actually missing is /library related stuff. Might be shifted, though I was looking forward to those features. From the relative point of time, those will come just at exactly the same time, regardless of the milestone release, or not :-)}
    sent: "2017-06-21T12:26:08.469Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "594a6533e59e74be0a9ff2f5"
    text: { Doc is right - once you work from the sources, you've got new build on a daily/hourly basis. I can understand the push towards official milestone release, as mostly a psychological factor - ppl not following the project on a daily basis, can see a blog article and know the project is progressing - simply a release early, release often strategy. It also might make sense, if you don't have daily builds available, which we have. Well, and then there is a burden for Doc to write a blog article :-)}
    sent: "2017-06-21T12:23:15.335Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "594a644c6462d8493c35f9cd"
    text: "@dockimbel thanks for sharing :+1: "
    sent: "2017-06-21T12:19:24.756Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a5a0f6462d8493c35c351"
    text: {I think "yes!"!^/}
    sent: "2017-06-21T11:35:43.226Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "594a49cce59e74be0a9f6707"
    text: {We are thinking about doing a new milestone release soon, centered on macOS GUI support, and move the rest of planned features of 0.6.3 in a later release.^/}
    sent: "2017-06-21T10:26:20.919Z"
    editedAt: "2017-06-21T10:35:53.424Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594a484717a30666708973f6"
    text: {@maximvl https://trello.com/b/FlQ6pzdB/red-tasks-overview^/}
    sent: "2017-06-21T10:19:51.754Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594a4839e265aa025ee4a752"
    text: {Actually, you can already code some big apps using Red. The Red runtime includes some pretty big and complex Red code, so it's definitely possible to write many apps already (as long as you don't waste memory allocations carelessly).}
    sent: "2017-06-21T10:19:37.227Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594a480e5bf0bef94cca5402"
    text: {because I remember that several things were developed in parallel}
    sent: "2017-06-21T10:18:54.189Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a47fe5bf0bef94cca53c6"
    text: {but can you give me high-level overview on where are we now?}
    sent: "2017-06-21T10:18:38.329Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a47b402c480e67267f454"
    text: {but some demos you can make can be pretty impressive ;)}
    sent: "2017-06-21T10:17:24.582Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a47b2cf9c13503caadfa4"
    text: {@maximvl That's why the version is 0.6.2 and not 1.x.y.}
    sent: "2017-06-21T10:17:22.043Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594a4795a44c60fa4c49ed5d"
    text: "@maximvl you're not wrong, it is alpha software"
    sent: "2017-06-21T10:16:53.338Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a477e02c480e67267f374"
    text: {maybe I'm wrong, but I don't feel like I can use Red for things bigger than a demo scripts}
    sent: "2017-06-21T10:16:30.163Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a477b02c480e67267f334"
    text: {@maximvl You can check the progress on our Trello board, and looking at the commit  history for more detail. Again, the milestone releases have no last-minute-secret-feature-appearing-from-nowhere. It's just the latest automated build with a bumped version number.}
    sent: "2017-06-21T10:16:27.324Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594a47026462d8493c356690"
    text: {well, of course it's not the number what bothers me but progress on core things}
    sent: "2017-06-21T10:14:26.100Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a46cf5bf0bef94cca4e89"
    text: {You can just bump the version number if that's the only thing bothering you:^/`>> system/version: "0.6.3"`^/That's how we make a new version. There is no *secret addition* when creating a new milestone release.}
    sent: "2017-06-21T10:13:35.685Z"
    editedAt: "2017-06-21T10:14:40.486Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594a4691e265aa025ee49cd3"
    text: "@dockimbel but it's still 0.6.2"
    sent: "2017-06-21T10:12:33.964Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a4151cf9c13503caabda5"
    text: ":)"
    sent: "2017-06-21T09:50:09.065Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a3f71bf1bfe6770d4242e"
    text: {@maximvl Sure, we release several times a day, check the downloads section.}
    sent: "2017-06-21T09:42:09.507Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594a323cbf1bfe6770d3e08d"
    text: "any insights on a new release progress? :)"
    sent: "2017-06-21T08:45:48.058Z"
    editedAt: "2017-06-21T08:47:03.418Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a321c6462d8493c35041a"
    text: "hi Maxim"
    sent: "2017-06-21T08:45:16.393Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a3210bf1bfe6770d3df49"
    text: "hi guys"
    sent: "2017-06-21T08:45:04.160Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "594a27c55bf0bef94cc9b768"
    text: {(I've tested it only on Linux server, may be different on Windows)}
    sent: "2017-06-21T08:01:09.993Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a2790a44c60fa4c495403"
    text: {If you look deep enough, you will find a function that reads data from STDIN.}
    sent: "2017-06-21T08:00:16.936Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a2709a44c60fa4c4951d6"
    text: "How does input get to the post-data?"
    sent: "2017-06-21T07:58:01.854Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "594a26fe17a306667088d1c4"
    text: {```^/>> source input^/input: func [][ask ""]^/```^/}
    sent: "2017-06-21T07:57:50.254Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "594a257317a306667088caf7"
    text: {@pekr I get HTTP headers (GET data are part of them) with `call "printenv"`, though I should rewrite it with `list-env` native. To get POST data you do just `post-data: input`. That's all}
    sent: "2017-06-21T07:51:15.178Z"
    editedAt: "2017-06-21T07:51:27.469Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a24c617a306667088c80c"
    text: {@rebolek - how is CGI query script passed to the red executable? When you run rebol using `-c`, there is an object in the system structure, which is being filled with info.  So how do you read the GET or POST data?}
    sent: "2017-06-21T07:48:22.580Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "594a1f709714d1da61633ff3"
    text: {@dander I've added basic protection, entered code is executed in separate process that is killed after some short delay.}
    sent: "2017-06-21T07:25:36.956Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a114e746f1fd6632572d5"
    text: {:point_up: [21 juni 2017 08:16](https://gitter.im/red/red?at=594a0f2f9714d1da6162f52d) As a pioneer in Red cgi ( https://arnoldvanhofwegen.com/blog/simple-red-cgi-scripting-possible/ ) I think this is very interesting!}
    sent: "2017-06-21T06:25:18.010Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "594a0ff6e59e74be0a9e51bf"
    text: {@dander No, there's no isolation, I was just testing Red as CGI. The only safety measure here is that I am changing the `%index.cgi` as I try new ideas, so one day it may work as repl demo and another day as something totally different ;)^/Anyway, I have some ideas for the separation in mind, but this CGI project is not high priority.}
    sent: "2017-06-21T06:19:34.874Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a0f2f9714d1da6162f52d"
    text: {@iArnold There's no trick, it is pretty easy. Just compile console and use it on your web server. See https://github.com/red/red/wiki/Using-Red-as-CGI}
    sent: "2017-06-21T06:16:15.004Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a0ea2cf9c13503ca9cafe"
    text: {@greggirwin Certainly, thanks :+1:  @eranws nice, way to go! @rebolek do you have some sort of isolation for it, so it can't take down your server?}
    sent: "2017-06-21T06:13:54.384Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "594a0e90cf9c13503ca9ca7b"
    text: {@rebolek  Cool! So you managed to get the Red cgi working after all! Did it require any special action for you, what was the trick to get the magic?}
    sent: "2017-06-21T06:13:36.020Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "594a0234cf9c13503ca99971"
    text: {That's already possible (although this one is very crude and easy to crash) http://qyz.cz/cgi-bin/index.cgi}
    sent: "2017-06-21T05:20:52.144Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594a0102bf1bfe6770d2fd86"
    text: {> I think some of the web-based repl services may be using Docker as their backends, so that could be a use case for having a Red Docker image^/^/+1 for Live repl}
    sent: "2017-06-21T05:15:46.425Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "594a00e05bf0bef94cc90cbd"
    text: "Go Eran, Go!"
    sent: "2017-06-21T05:15:12.598Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5949fef3cf9c13503ca98ec1"
    text: {btw, I finally managed to run red-console natively on alpine - total image size is 7MB }
    sent: "2017-06-21T05:06:59.561Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5949fe84bf1bfe6770d2f1fa"
    text: {> :point_up: [June 20, 2017 4:23 AM](https://gitter.im/red/red?at=5948f7a15bf0bef94cc3e8ce) @eranws, I've linked to your Docker work from https://github.com/red/red/wiki. Hope that's OK. ^/^/Absolutely}
    sent: "2017-06-21T05:05:08.361Z"
    editedAt: "2017-06-21T05:05:37.150Z"
    v: 4
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5949fe69cf9c13503ca98c77"
    text: {@dander - Debian and ubuntu we're my first choice too, but they are taking almost 200MB. I liked you red-quit trick, echoing q into red to compile on build. I'll adopt it :)}
    sent: "2017-06-21T05:04:41.482Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
)#(
    id: "5949efe717a306667087e54e"
    text: {@AlexanderBaggett View the [Red downloads page](http://www.red-lang.org/p/download.html), scroll down to "Automated Builds, master branch" and then select the appropriate download for your machine.}
    sent: "2017-06-21T04:02:47.109Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5949edef9714d1da61626d92"
    text: {@AlexanderBaggett rebuilding Red is easy and fast, you should give it a try}
    sent: "2017-06-21T03:54:23.833Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949e5c5e59e74be0a9da76d"
    text: {@AlexanderBaggett rebuild isn't that hard… and you don't have to. You can also grab the latest snapshot from the official downloads page}
    sent: "2017-06-21T03:19:33.423Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5949d0f8c98bc6d5638bcec1"
    text: {I have been following the git/gitter feed and have seen that there have been a ton of commits. I see there are a lot of community contributions to the well being of this project.  I know there are so many things to fix and to add.  But I would like to see a new version soon so that we can benefit from all of these wonderful changes without having to rebuild the master branch ourselves. }
    sent: "2017-06-21T01:50:48.881Z"
    editedAt: "2017-06-21T01:51:03.520Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5949b5fb02c480e672658ec3"
    text: "@dander, yours too."
    sent: "2017-06-20T23:55:39.893Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5949b574bf1bfe6770d1e56f"
    text: {:point_up: [June 20, 2017 4:23 AM](https://gitter.im/red/red?at=5948f7a15bf0bef94cc3e8ce) @eranws, I've linked to your Docker work from https://github.com/red/red/wiki. Hope that's OK.}
    sent: "2017-06-20T23:53:24.462Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5949b479cf9c13503ca87abc"
    text: {@joa-quim, If you can keep the Julia wiki updated with your findings, that would be *great*! Thanks!}
    sent: "2017-06-20T23:49:13.922Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59499c43cf9c13503ca81827"
    text: {I think some of the web-based repl services may be using Docker as their backends, so that could be a use case for having a Red Docker image}
    sent: "2017-06-20T22:05:55.336Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59499bdfa44c60fa4c4734b2"
    text: {@eranws Nice! I got [a docker image working for Debian](https://github.com/dander/docker-red) as well. I think basing it on Alpine would be ideal, but I haven't attempted it yet. I did find a 32 bit base image to try out though, which might be useful: multiarch/alpine:x86-latest-stable}
    sent: "2017-06-20T22:04:15.734Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "594969b46462d8493c31a888"
    text: {Plan A would be gitter getting improved server side. Here's to hoping for that. More rooms is actually [Plan D](https://github.com/red/red/wiki/Room-suggestions#possible-solutions) :p but I guess that's not the right priority..}
    sent: "2017-06-20T18:30:12.680Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59495f3bc98bc6d56389c2fd"
    text: {Too many rooms is not desirable here as the rooms will be "official" belonging to the Red team. So they have to be read, monitored etc.}
    sent: "2017-06-20T17:45:31.569Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59495cbbbf1bfe6770d0370e"
    text: {with some wiki integration and livecoding sessions}
    sent: "2017-06-20T17:34:51.977Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59495c685bf0bef94cc62e70"
    text: {IMO good ol' forum format is more preferable, we can't even pin messages and threads here :( but, on the other hand, live chatting is very nice and helpful}
    sent: "2017-06-20T17:33:28.449Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5949555dbf1bfe6770d0105f"
    text: {@rebolek & others talking of rooms (for parse, etc). I wrote up a [list of possible rooms we could have](https://github.com/red/red/wiki/Room-suggestions). Feedback? Feel free to add/edit}
    sent: "2017-06-20T17:03:25.932Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594940b1c98bc6d563891910"
    text: {I still see some weird errors when I try to run tests, or interact with the filesystem, but that's a start :)}
    sent: "2017-06-20T15:35:13.832Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "59494073a44c60fa4c4535dd"
    text: {Actually, rebol 2 works on x64 vanilla Alpine image too...}
    sent: "2017-06-20T15:34:11.898Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5949403ca44c60fa4c4534b5"
    text: {Thanks! @Oldes My initial tests were on alpine x64 distribution, took me a while to get 32 running, and they have static build.}
    sent: "2017-06-20T15:33:16.915Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5948ff84142826e972d3601f"
    text: "@eranws why r3?"
    sent: "2017-06-20T10:57:08.480Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5948f918746f1fd663202919"
    text: "@eranws cool!"
    sent: "2017-06-20T10:29:44.857Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948f7a15bf0bef94cc3e8ce"
    text: {Hi, I have played with *docker* for a recent project, and I wanted to see what is the minimum OS necessary to run Red. I got the console to work on an Alpine linux image, that weighs in total 16MB (with sources, rebol-2), here:^/https://github.com/eranws/red-docker^/^/Yes, I know that by nature Red is cross-platform - but can be useful for testing and continuous integration.^/If anyone thinks it can be helpful - let me know if you succeed to build and run (or not)^/}
    sent: "2017-06-20T10:23:29.968Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5948f71ac98bc6d5638782de"
    text: {@dockimbel I think I had tried all of that but to use ``Ptr{Void}`` in the ``cfunction`` declaration (and the Red -> C conversion). Note also that I had an error in there but apparently it make no difference (notice the lack of last comma)^/````^/cf = cfunction(blabla, Ptr{Void}, (Ptr{Void},));^/```` ^/Thanks. Next time I'll might come with questions on communicating via structures. That's where real stuff will start to take shape.}
    sent: "2017-06-20T10:21:14.752Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "5948ccf7bf1bfe6770cd2c58"
    text: {@joa-quim This works fine for me:^/```lisp^/using Red^/^/global bla = 5.0;^/function blabla(bla)^/    println(redCInt32(bla))^/    println("Blabla")^/    return redUnset()^/end^/^/cf = cfunction(blabla, Ptr{Void}, (Ptr{Void},),);^/redOpen()^/redRoutine(redWord("blabla"), "[bla [integer!]]", cf);^/^/^/cmd = "view [backdrop yellow  t: text  yellow {Hello World!} ^/    button {Click} [blabla 123] ^/]"^/^/redDo(cmd)^/```}
    sent: "2017-06-20T07:21:27.746Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5948cad2a44c60fa4c42c774"
    text: {@joa-quim The values that Red passes to the callback function are Red values, so you need to convert them to Julia format using the provided "Red -> C" function in libRed.}
    sent: "2017-06-20T07:12:18.276Z"
    editedAt: "2017-06-20T07:20:43.800Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5948c68bcf9c13503ca3a391"
    text: {@joa-quim ^/> @dockimbel I kind of understand that but on the other hand I passed a callback function that has one argin. So the question is, how do I pass data in via the callback functions? (and thanks for the other infos)^/^/You have defined an argument to `blabla` routine in the *specification* , but you failed to provide an argument in the call to  `blabla` at: `button {Click} [blabla] `.}
    sent: "2017-06-20T06:54:03.139Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5948b790bf1bfe6770ccc819"
    text: {Ah, callbacks. I have to start using them more. Thanks for reminding me, Gregg.}
    sent: "2017-06-20T05:50:08.273Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948b747cf9c13503ca35b00"
    text: {It was certainly the only way in Rebol. The parse callback Red provides offers another solution, and we can continue to improve parse over time, as we clearly identify needs and solutions.}
    sent: "2017-06-20T05:48:55.038Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5948b21b88348abd0aab77cd"
    text: {@michaeldesu Yes, that's probably the only way right now.}
    sent: "2017-06-20T05:26:51.528Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948b1af02c480e67260704e"
    text: {@rebolek maybe the embedding of red code is the only way. I noticed also on the [intro to parse](http://www.red-lang.org/2013/11/041-introducing-parse.html) page, this: "if (expr)^-: evaluate the Red expression, if false or none, fail and backtrack." so probably using the example I gave, you could test it with that if (expr)}
    sent: "2017-06-20T05:25:03.923Z"
    editedAt: "2017-06-20T05:25:24.621Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5948aa356462d8493c2ddfdb"
    text: {@toomasv see this example:^/```^/>> r1: ['a]^/== ['a]^/>> r2: ['b]^/== ['b]^/>> r3: ['c]^/== ['c]^/>> parse [b c] [[r1 | r2] r3]^/== true^/```^/What I am interested in is if `r1` failed or succeeded.}
    sent: "2017-06-20T04:53:09.861Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948a9ba88348abd0aab576c"
    text: "@toomasv Only if your rule covers whole input."
    sent: "2017-06-20T04:51:06.467Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948a85b02c480e672604d30"
    text: {@rebolek Similar effect can be achieved by including 'to end' in the end of spec.}
    sent: "2017-06-20T04:45:15.597Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59489f89e59e74be0a9798a3"
    text: {@michaeldesu no, that's exactly what I meant, I was just wondering, if there is some inbuilt method for this.}
    sent: "2017-06-20T04:07:37.835Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594867a1cf9c13503ca2300d"
    text: {@rebolek this is what I meant (rule success)^/```^/>> s: "this is a cat"^/>> parse s [to "cat" (print "found")]^/found^/== false^/>> parse s [to "dog" (print "found")]^/== false^/>> rule-pass: none^/== none^/>> parse s [(rule-pass: false) to "cat" (rule-pass: true)]^/== false^/>> rule-pass^/== true^/>> rule-pass: none^/== none^/>> parse s [(rule-pass: false) to "dog" (rule-pass: true)]^/== false^/>> rule-pass^/== false^/```^/sorry if I misunderstood}
    sent: "2017-06-20T00:09:05.680Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59485c4c5bf0bef94cc15fbf"
    text: {@GRD2017 as suggested by 9214, I highly recommend reading the entire 'red by example' site to orient you with their many examples.}
    sent: "2017-06-19T23:20:44.050Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59485befa44c60fa4c411766"
    text: {@rebolek about rule success - putting a print message in parens at the end of the rule block is a method? Maybe this is too simplistic}
    sent: "2017-06-19T23:19:11.961Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "594801a8746f1fd6631baa16"
    text: {:point_up: [June 19, 2017 5:12 AM](https://gitter.im/red/red?at=5947b1b8cf9c13503c9e532c) Resource Hacker got an update! It was neglected for a long time, but seems to have a new life. My old R2 build tools used the CLI for it to set resources in encapped EXEs. Very handy.}
    sent: "2017-06-19T16:54:00.403Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5947fe5417a30666707ea97c"
    text: {@dockimbel There is no `red/parse` room, it would make sense to add it, IMO.^/Also, when talking about `parse` ;) how can I find out if rule succeeded? Or, can I? }
    sent: "2017-06-19T16:39:48.526Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5947ddcad83c50560c22bec9"
    text: {@GRD2017 hey there!^/* since Red is heavily inspired by Rebol, good starting point is [Rebol/Core guide](http://www.rebol.com/docs/core23/rebolcore.html)^/*  as @geekyi already said, check out official docs and github wiki, also [Red/Core](https://doc.red-lang.org/en/)^/* [red programming](http://redprogramming.com/Home.html) and [red by example](http://redprogramming.com/Home.html)^/* [grab-bag of useful resources](https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b)^/* just download latest build and play in the REPL, ask any questions in [red/welcome](https://gitter.im/red/red/welcome) or [red/help](https://gitter.im/red/help) rooms :)}
    sent: "2017-06-19T14:20:58.530Z"
    editedAt: "2017-06-19T14:21:38.218Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5947cfa86462d8493c299849"
    text: {It's recommended to get rebol2, and get a feel for it as they are both almost identical in syntax}
    sent: "2017-06-19T13:20:40.517Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5947cf4ad83c50560c227807"
    text: {@GRD2017 http://www.red-lang.org/p/documentation.html https://github.com/red/red/wiki}
    sent: "2017-06-19T13:19:06.704Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5947c704142826e972cdadf4"
    text: {Hi! I'd like to learn the RED programming language and I don't know and from where I should learn it. Could you help me please?}
    sent: "2017-06-19T12:43:48.817Z"
    v: 1
    author: "5947c595d73408ce4f686a40"
) #(
    id: "5947b32902c480e6725b92a3"
    text: {@dockimbel I kind of understand that but on the other hand I passed a callback function that has one argin. So the question is, how do I pass data in via the callback functions? (and thanks for the other infos)}
    sent: "2017-06-19T11:19:05.628Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "5947b2526549436c7d60e556"
    text: {> *** Script Error: blabla is missing its bla argument^/^/That's an expected error, as you call `blabla` without passing any argument: `button {Click} [blabla]`}
    sent: "2017-06-19T11:15:30.296Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5947b1f531f589c64fc0bf4b"
    text: {@joa-quim `c-string!` is not a Red type, it's a Red/System type. The string type in Red is called `string!`.}
    sent: "2017-06-19T11:13:57.835Z"
    editedAt: "2017-06-19T11:14:11.772Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5947b1ba6462d8493c29055c"
    text: {@dockimbel I'm afraid I'll need help in this one too. I am now trying to send in data via the callback function but can't find the way^/````^/using Red^/^/global bla = 5.0;^/function blabla(bla)^/    println(bla)^/^-println("Blabla")^/^-return redUnset()^/end^/^/cf = cfunction(blabla, Ptr{Void}, (Float64,),);^/redOpen()^/id = redTypeOf(redRoutine(redWord("blabla"), "[bla [integer!]]", cf));^/@show(id)^/^/cmd = "view [backdrop yellow  t: text  yellow {Hello World!} ^/    button {Click} [blabla] ^/]"^/^/redDo(cmd)^/````^/errors with^/````^/julia> include("test_cb.jl")^/id = 29^/*** Script Error: blabla is missing its bla argument^/*** Where: blabla^/*** Stack: view do-events do-actor do-safe^/````^/and if I replace ``[bla [integer!]]`` by ``[bla [c-string!]]`` than I get ``id = 34``, which is ``RED_TYPE_ERROR``}
    sent: "2017-06-19T11:12:58.616Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "5947b1b8cf9c13503c9e532c"
    text: {@joa-quim You can use [PE Explorer](http://www.heaventools.com/overview.htm) or [Resource Hacker](http://www.angusj.com/resourcehacker/) to access and modify the `resources` section of PE files (Windows executables). There's a "Manifest" entry in the resources section, where you can inject the above XML snippet I posted.}
    sent: "2017-06-19T11:12:56.524Z"
    editedAt: "2017-06-19T11:16:16.812Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5947b0b0f6a78eab486280ae"
    text: {@dockimbel I have an vague recall of something about manifests being discussed in Julia dev but this is an issue that I would have to ask. But how did you manually inserted the manisfest file (I know very little about the manifest thing)?}
    sent: "2017-06-19T11:08:32.212Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "5947aba5ca6d4ae80c2ad973"
    text: {@geekyi If it's possible to run shell commands on failure, then we could just `cat` the log file, no need for any external server.}
    sent: "2017-06-19T10:47:01.155Z"
    editedAt: "2017-06-19T10:47:05.079Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5947aaf3f6a78eab4862665d"
    text: {Well, we don't really need to spend time on setting up something like that as we can test locally anyway. Though, if someone contributes a solution, we could set  up the Travis config file to expose the resulting log file somewhere.}
    sent: "2017-06-19T10:44:03.839Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5947a65cd83c50560c21b2b1"
    text: {[This SO answer is interesting](https://stackoverflow.com/questions/35821952/how-to-export-log-files-from-travis-ci-to-github#37781216)  `after_failure:^/` in travis.^/ But it says you may have to use chunk.io for open source, so that's another dependency.. Possibly would be easier to do with rebol itself, if you have somewhere to upload.^/Maybe use @rebolek's `github` api.. to upload as issue?}
    sent: "2017-06-19T10:24:28.911Z"
    editedAt: "2017-06-19T10:26:20.359Z"
    v: 2
    author: "569c37abe610378809bccdff"
)#(
    id: "5947a461ca6d4ae80c2ab30d"
    text: {@geekyi I haven't found a way to view that log file on Travis.}
    sent: "2017-06-19T10:16:01.575Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5947a1f8caf4d68d6f4bac33"
    text: {@dockimbel maybe not important or urgent now, but for future contributions.^/I'm thinking of this scenario:^/1. Have windows installed^/2. Make a change^/3. Tests fail on travis on MacOS^/^/Problem: how do I access `quick-test/quick-test.log`?^/^/I have some ideas, but you probably tried it and it didn't work out. I'll post on red/tests channel if I have any contributions..^/}
    sent: "2017-06-19T10:05:44.632Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59479b75e531dbc905fa1c54"
    text: {@geekyi It has been fixed. You can just run the tests locally in such case (`rebol -s tests/run-all.r`), and have a look at `quick-test/quick-test.log` file for details.}
    sent: "2017-06-19T09:37:57.782Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59478b6bcf9c13503c9da480"
    text: {(In the time I took to write, qtxie has fixed it! :D)}
    sent: "2017-06-19T08:29:31.644Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59478b50f31c8ced0c4db3b0"
    text: {What I've noticed is if its a `** - unicode******************************************0 / 1 **`, then something is generally broken.^/Just a guess from past experience. I'm not really sure what actually breaks tho. And in such cases, it's hard to see where the error is from the travis tests. ^/Wonder what others do in such cases when they don't have a machine to test}
    sent: "2017-06-19T08:29:04.225Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5947894e02c480e6725acf9a"
    text: {Is travis failing for Mac since red/red@b945710 ? :/ It looks like a general test failure to me}
    sent: "2017-06-19T08:20:30.272Z"
    editedAt: "2017-06-19T08:20:48.604Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59476d4de531dbc905f93d17"
    text: {I don't know if there's a compilation option in Julia's builder for that, though it might be something worth adding to the default configuration for Windows target.}
    sent: "2017-06-19T06:21:01.022Z"
    editedAt: "2017-06-19T06:21:08.275Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59476cd631f589c64fbf7b21"
    text: {@joa-quim The required part in manifest file is:^/```lisp^/  <dependency>^/    <dependentAssembly>^/      <assemblyIdentity type='win32'  name='Microsoft.Windows.Common-Controls' version='6.0.0.0' ^-processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*' />^/    </dependentAssembly>^/  </dependency>^/^/```}
    sent: "2017-06-19T06:19:02.174Z"
    editedAt: "2017-06-19T06:19:24.379Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59476c9aca6d4ae80c29aa2f"
    text: {[![image.png](https://files.gitter.im/red/red/hgQn/thumb/image.png)](https://files.gitter.im/red/red/hgQn/image.png)}
    sent: "2017-06-19T06:18:02.795Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59476c906462d8493c27c6b8"
    text: {@joa-quim Thanks. I noticed that View windows when launched from Julia do not use Window's Visual Styles by default, because the Julia executable does not include the right manifest in the executable resource. I've injected manually the manifest part required in julia.exe and that gives then a nicer look:}
    sent: "2017-06-19T06:17:52.100Z"
    editedAt: "2017-06-19T06:19:38.496Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5946fb9f02c480e67258d0bf"
    text: "@dockimbel Done (the ``red_value``)"
    sent: "2017-06-18T22:15:59.658Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "5946f29931f589c64fbddaae"
    text: {@DonaldTsang, of course. All languages are not created equal, even if Turing complete. I've heard anecdotes that a lot of big companies are adopting Node.js not because it's a technically superior solution, but because they can leverage their JS knowledge on the back end and the cognitive load of combining languages is counterproductive. As if using the same language everywhere has value. Who would believe such nonsense? ;^^)}
    sent: "2017-06-18T21:37:29.104Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59467680142826e972c88a5c"
    text: "@9214 Yo!"
    sent: "2017-06-18T12:48:00.055Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "5946713aca6d4ae80c262d4a"
    text: "@maximvl @DonaldTsang  howdy-do! :hand:"
    sent: "2017-06-18T12:25:30.501Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5946703bca6d4ae80c262927"
    text: {@dockimbel @greggirwin After dabbling with bash, PHP, Python, JavaScript and C, I am for certain that you can't just unify all programming languages}
    sent: "2017-06-18T12:21:15.956Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "5945ec7acaf4d68d6f45a19c"
    text: {@joa-quim Yes,  that would be more readable, and more conform to libRed API.}
    sent: "2017-06-18T02:59:06.269Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59458770142826e972c59f96"
    text: {@dockimbel Thanks, yes it works here too. So cool.^/^/> it would be nice to have a red_value alias for Ptr{Void}^/^/You mean, adding a ``const red_value = Ptr{Void}`` to ``red_h.jl``? (Sure)}
    sent: "2017-06-17T19:48:00.083Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "59458629f31c8ced0c46cd34"
    text: {@greggirwin Was working on other projects for the last three months... wew}
    sent: "2017-06-17T19:42:33.977Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "594558b602c480e67253571e"
    text: "Hi @DonaldTsang!"
    sent: "2017-06-17T16:28:38.336Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594554d76549436c7d58af26"
    text: "Hi @dockimbel "
    sent: "2017-06-17T16:12:07.231Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "594552536549436c7d58a74b"
    text: "**Long time no see everyone!**"
    sent: "2017-06-17T16:01:23.916Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "5944f9c9f6a78eab485900b5"
    text: {@maximvl ^/> why do we integrate Red and Julia?^/^/We don't. @joa-quim does it, we just provide support, fixes and small improvements to libRed which benefit to all users of libRed. Same kind of support we provide to all other Red users.}
    sent: "2017-06-17T09:43:37.509Z"
    editedAt: "2017-06-17T09:47:34.252Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5944eb2b6462d8493c1f3b6e"
    text: {@geekyi that's great, just integrations feels off the track while core of the language is not complete}
    sent: "2017-06-17T08:41:15.120Z"
    editedAt: "2017-06-17T08:41:27.303Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5944e77d142826e972c37060"
    text: {@maximvl integrate everything! Personally, it has helped me learn a bit of libred and R/S}
    sent: "2017-06-17T08:25:33.890Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5944e19302c480e67251bd9d"
    text: {wouldn't it be better to spend that time on IO and Red's own stuff?}
    sent: "2017-06-17T08:00:19.937Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5944e136142826e972c35d1c"
    text: "As I understand it, why not."
    sent: "2017-06-17T07:58:46.580Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5944e0ebcaf4d68d6f421bd2"
    text: "why do we integrate Red and Julia?"
    sent: "2017-06-17T07:57:31.541Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5944e0e1cf9c13503c947be4"
    text: "hey guys, I missed all the hype"
    sent: "2017-06-17T07:57:21.303Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5944e0acca6d4ae80c2106df"
    text: {@joa-quim If possible in Julia, it would be nice to have a `red_value` alias for `Ptr{Void}`.}
    sent: "2017-06-17T07:56:28.864Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5944de90e531dbc905f0548d"
    text: {@joa-quim Following Julia script works fine here:^/```lisp^/using Red^/^/function blabla()^/    println("Blabla")^/    return redInteger(0)^/end^/^/cf = cfunction(blabla, Ptr{Void}, (),);^/redOpen()^/redRoutine(redWord("blabla"), "[]", cf);^/^/cmd = "view [backdrop yellow  t: text  yellow {Hello World !}^/    button {Click} [blabla] ^/]"^/^/redDo(cmd)^/```}
    sent: "2017-06-17T07:47:28.848Z"
    editedAt: "2017-06-17T07:47:37.218Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5944ad9531f589c64fb5e75e"
    text: {Another thing, you can avoid the `\"` escaping by using the alternative literal form for strings in Red/Rebol: `{}` , so , e.g, `\"Click\"` becomes `{Click}` (easier to type, easier to read).}
    sent: "2017-06-17T04:18:29.530Z"
    editedAt: "2017-06-17T04:20:02.205Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5944ad3bd83c50560c17856a"
    text: {If `cf` implements the C ABI, then it should work fine.}
    sent: "2017-06-17T04:16:59.709Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5944ad0bca6d4ae80c206276"
    text: {A routine is a function type in Red that allows to call a low-level  routine from Red level (similar to `cfunction()` in Julia). So it needs to have a proper [function spec](http://www.rebol.com/docs/core23/rebolcore-9.html#section-3.1) declaration as second argument. In your case above, an empty block is required to signify "no arguments", so the line should be:^/ `redRoutine(redWord("blabla"), "[]", cf);`}
    sent: "2017-06-17T04:16:11.990Z"
    editedAt: "2017-06-17T04:24:31.750Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5944ac22142826e972c2b500"
    text: {@joa-quim You should check the returned value type from `redRoutine()`, using `redTypeOf()`, you would probably see a `RED_TYPE_ERROR`, as the second argument passed is invalid.}
    sent: "2017-06-17T04:12:18.005Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59448b9ed83c50560c171dd9"
    text: {If you're the kind of person that groks from looking at data, the list of red runtime [datastructures](https://github.com/red/red/blob/master/runtime/datatypes/structures.reds) might be useful}
    sent: "2017-06-17T01:53:34.863Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59448a9f142826e972c24e8f"
    text: {@joa-quim Not sure if this [libred note](https://doc.red-lang.org/en/libred.html#_redroutine) is relevant:^/> The C function must return a Red value (redUnset() can be used to signify that the return value is not used)}
    sent: "2017-06-17T01:49:19.304Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5944670f02c480e67250541b"
    text: {@dockimbel Not really surprised that this didn't work (from Julia side)^/````^/using Red^/^/function blabla()^/^-println("Blabla")^/^-return 0^/end^/^/cf = cfunction(blabla, Int, (),);^/redOpen()^/redRoutine(redWord("blabla"), "", cf);^/^/cmd = "view [backdrop yellow  t: text  yellow \"Hello World !\" ^/    button \"Click\" [blabla] ^/]"^/^/redDo(cmd)^/````^/^/````^/julia> include("test_cb.jl")^/*** Script Error: blabla has no value^/*** Where: act^/*** Stack: view do-events do-actor do-safe^/````^/but is there a way that something like this would work? ^/I once did this sort of things with a library called IUP where they have a function called *IupSetCallback* specially for the purpose to assign callbacks to widgets.}
    sent: "2017-06-16T23:17:35.288Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "59400729ca6d4ae80c0d49dc"
    text: {@dockimbel Right. I mentioned the stack size in case this issue strikes again. }
    sent: "2017-06-13T15:39:21.563Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "59400601142826e972afa8d4"
    text: {@joa-quim About the Julia 0.6 bug, you should better wait for an official fix. In the meantime, if you run the Red toolchain from sources, you can pass the reserved stack to ^/`#{08000000}`  by modifying the source code [there](https://github.com/red/red/blob/master/system/formats/PE.r#L785) (for Windows). That will reserve 80MB instead of the default 1MB for the native stack. (No compilation option for that yet.)}
    sent: "2017-06-13T15:34:25.703Z"
    editedAt: "2017-06-13T15:42:22.654Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59400529f31c8ced0c3077be"
    text: {That would be helpful. Images from GMT can come as pixel interleaved but also as band interleaved. This later is the natural format when GMT reads and image (via another library called GDAL) which can read a LOT of formats. Having to convert it to pixel interleaving means an image copy has to be made.}
    sent: "2017-06-13T15:30:49.355Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "594002a3142826e972af96b3"
    text: {Right. We also have internally an RGB interleaved plane + alpha channel plane, which could maybe be exposed as an input format, if that can help.}
    sent: "2017-06-13T15:20:03.200Z"
    editedAt: "2017-06-13T15:21:34.681Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59400293f6a78eab48450aa8"
    text: {Ah, OK they are Pixel interleaved. And start from TopLeft?}
    sent: "2017-06-13T15:19:47.001Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "59400175142826e972af9195"
    text: {@joa-quim I just saw your GMT demo, nice! Expected formats for image input buffers are:^/* RGB:  each pixel has a 24-bit `rrggbb` layout format.^/* ARGB:  each pixel has a 32-bit `aarrggbb` layout format.^/^/First pixel is the top-left pixel, last pixel is the bottom-right one.}
    sent: "2017-06-13T15:15:01.413Z"
    editedAt: "2017-06-13T15:17:57.457Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594000506549436c7d4387e1"
    text: {@dockimbel Please have a look at the new example in [Red.jl](https://github.com/joa-quim/Red.jl). As I say in the example the image is not correct but I'm amazed that it is even so close. The size numbers in the example ``(3,361,591)`` mean 3 layers, 361 rows and 591 columns, or an array of [3 x 361 x 591] It shouldn't come out with the colors in first plane but that is a GMT issue that tries to deal with many different memory layouts. ^/My question is what is the memory layout used by Red to display images?^/By this I mean are they row-major, color-major, start from Top Left, Bottom Left?^/And I'm guessing from a previous statement that even if transparency is not used, the images must still be RGBA.}
    sent: "2017-06-13T15:10:08.213Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593ffe20f31c8ced0c304a6f"
    text: {@Oldes  @dockimbel  The Julia 0.6 issue is apparently [solvable](https://github.com/JuliaLang/julia/issues/22320) by compiling with a ``/Stack:8000000`` though I don't know if the Red compiler has an option to do that. There is also a PR in Julia that is supposed to solve this too. }
    sent: "2017-06-13T15:00:48.410Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593e431f6549436c7d3c1e61"
    text: {Exactly as Peter states here @geekyi and all others. For the record I want to mention that I do not publicly promote my efforts in the official Red channels just to avoid the mix up with official sources. The main page of the wiki states that clearly enough, if not I'll try to make it more clear.^/I do sometimes point toward it in Personal messages (and an occasional mention for yet another one of those feature requests, I confess that).^/Main reason behind starting my efforts there are that I really like Red and I too would like to see all those fancy features to come true sooner than later. I became tired of lurking, waiting and basically sitting on my own hands doing nothing so I decided to stop procrastinating and just do something. ^/So it got where it is today, and I really can say I learned a lot from what I have done sofar and I can recommend everyone to come out of hibernation mode, if you haven't already done.}
    sent: "2017-06-12T07:30:39.761Z"
    editedAt: "2017-06-12T07:34:31.203Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "593de4bf6462d8493c0228cb"
    text: {@geekyi  The Github repository that you referred to in :point_up: [June 12, 2017 5:03 AM](https://gitter.im/red/red?at=593db00631f589c64f98d618) does not refer to the goals of the Red project. It isn't a valid source for information about Red's goals, design, strategy, roadmap or decisions taken. It is more a third-party commentary on them.}
    sent: "2017-06-12T00:47:59.225Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593db7936462d8493c019797"
    text: {It will lead to a lot of interesting chat I imagine. If computer just kept getting bigger, we'd just want to fill the value slots as they grow, but with IoT and SBCs, is that too much overhead, or will it massively complect Red/System with various targets. }
    sent: "2017-06-11T21:35:15.343Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db65531f589c64f98e823"
    text: {@JeffreySarnoff [FAQ](https://github.com/red/red/wiki/FAQ) and [Guru Meditations](https://github.com/red/red/wiki/Guru-Meditations#why-is-red-32-bit-only) are most useful if you want to know about design problems}
    sent: "2017-06-11T21:29:57.001Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593db5f1f6a78eab483b8f73"
    text: {https://github.com/red/red/wiki/Guru-Meditations#why-is-red-32-bit-only}
    sent: "2017-06-11T21:28:17.308Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "593db5a56549436c7d3a4619"
    text: {@greggirwin yes, I meant to reference that quote actually, it was faster than searching in the wiki :D}
    sent: "2017-06-11T21:27:01.652Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593db50202c480e672345586"
    text: {@geekyi, that is not official documentation, other than the small quote from Doc. ^/^/@JeffreySarnoff, it *is* so different, because Red's toolchain is completely self-contained. It's not just turning on a compiler switch for gcc or something. Red emits machine code directly, so there are no external dependencies of any kind. For cross platform compiling, it also means that Red can compile *to* any platform *from* any platform.}
    sent: "2017-06-11T21:24:18.281Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db02b6549436c7d3a329d"
    text: {Also the discussion above :point_up: [June 11, 2017 5:21 PM](https://gitter.im/red/red?at=593d35cd6462d8493cffb3f7) about `int` is relevant}
    sent: "2017-06-11T21:03:39.934Z"
    editedAt: "2017-06-11T21:05:56.177Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "593db00631f589c64f98d618"
    text: {@JeffreySarnoff https://github.com/reddoc/develop/wiki/DEV-GOAL-64-bit-support}
    sent: "2017-06-11T21:03:02.599Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593dafdc31f589c64f98d554"
    text: {@geekyi ... I see the 64-bit version of Red has yet to land.  Is it so different from the 32-bit version on all platforms?^/}
    sent: "2017-06-11T21:02:20.117Z"
    v: 1
    author: "55a137f65e0d51bd787b0b31"
) #(
    id: "593d9897142826e972a5a5e5"
    text: {@JeffreySarnoff @asampal , I'd rather wish for a ffi, interop, or other similar one. Alternatively, since @ldci has a Julia.red repo, he can make a room for that}
    sent: "2017-06-11T19:23:03.770Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593d9548e531dbc905d22866"
    text: {Great progress all! Please make sure to update the wiki page.}
    sent: "2017-06-11T19:08:56.564Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593d866f6549436c7d3990a4"
    text: {+1 thank you to @joa-quim @dockimbel ^/3rd request of @rebolek 's request for a Red<=>Julia section}
    sent: "2017-06-11T18:05:35.930Z"
    v: 1
    author: "55a137f65e0d51bd787b0b31"
) #(
    id: "593d800f0221ce4803bfbb00"
    text: {Thanks @joa-quim @dockimbel  - really happy to see integration between Red and Julia. The benefit is two-way, especially in the near to mid-term until both languages gain native support in the areas the other language is strong in. For Red, embedding Julia opens the door to big data, scientific, parallel, GPU computing in general. Going the other way, embedding Red in Julia gives it access to easy GUIs, parsing, DSLs/dialects, mobile platforms (soon). ^/I second @rebolek's request - it'd be nice to have a red/julia section in order to keep things on topic.}
    sent: "2017-06-11T17:38:23.388Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "593d373a02c480e672328d35"
    text: {;-) So, C99 `<inttypes.h>` seems to be the way to go.}
    sent: "2017-06-11T12:27:38.376Z"
    editedAt: "2017-06-11T12:28:20.950Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593d371b31f589c64f971f3c"
    text: {Yes, ``it is at least 32 bits in size`` but can be also 64. I'm talking from experience we had in porting a large package ([GMT](http://gmt.soest.hawaii.edu/projects/gmt/wiki)). What we use in GMT is ``int32_t  uint32_t  int64_t  uint64_t``.}
    sent: "2017-06-11T12:27:07.970Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593d363302c480e672328a4b"
    text: {I guess we'll replace it with a macro once we get 64-bit support, unless you have a simpler alternative to suggest? According to this [SO entry](https://stackoverflow.com/questions/384502/what-is-the-bit-size-of-long-on-64-bit-windows), we'll probably adopt `int32_t` and `int64_t` standards.}
    sent: "2017-06-11T12:23:15.405Z"
    editedAt: "2017-06-11T12:27:32.837Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593d35cd6462d8493cffb3f7"
    text: {@joa-quim Well, it is [supposed](https://en.wikipedia.org/wiki/C_data_types#Basic_types) to be the correct C type for a 32-bit integer. If we specify an `int`, some platforms might rightfully use a 16-bit integer. C portability is a wishful thinking in practice. ;-)}
    sent: "2017-06-11T12:21:33.847Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593d346002c480e6723281b9"
    text: {@dockimbel COOL it works fine. Thanks for the new function.^/I have a question though about the integer types used in ``libRed.dll``. Why using ``long``? This is a head-ache for 64 bits portability. The issue is that ``long`` is always int32 on Windows (regardless if the build is 32 or 64) but is int32 or int64 in linux/OSX, depending on the build type. }
    sent: "2017-06-11T12:15:28.270Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593cdeb4d83c50560cf8269b"
    text: {Notice that:^/* I switched to `UInt32` as RGB values have to be provided as 24-bit values per pixel.^/* I passed `0` as last argument to `redImage()`, as the `RED_IMAGE_FORMAT_RGB` is not resolved (not sure why, but I guess it should work once you merge my PR and I upgrade the package locally).^/* You can also pass an ARGB buffer, just use `1` (or `RED_IMAGE_FORMAT_ARGB`) for the image format argument.}
    sent: "2017-06-11T06:09:56.865Z"
    editedAt: "2017-06-11T06:17:14.635Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593cde32e531dbc905cf87fb"
    text: {@joa-quim With latest improvements to libRed and the Julia binding (see my PR), the sample code for passing a RGB buffer, converting it to a Red `image!` and displaying it in a window is reduced to:^/```lisp^/using Red^/redOpen()^/img = rand(UInt32, 16,16)       # Generate a random 'image' array^/redSet(redSymbol("img"), redImage(16, 16, img, 0))^/redDo("view [image img]")^/redClose()^/```}
    sent: "2017-06-11T06:07:46.643Z"
    editedAt: "2017-06-11T06:16:20.670Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593cc8f77503e2b7062f5d55"
    text: {Works fine too from first try (using the code I provided above). :sparkles: }
    sent: "2017-06-11T04:37:11.170Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593cc8cc02c480e672312810"
    text: {[![image.png](https://files.gitter.im/red/red/1tZK/thumb/image.png)](https://files.gitter.im/red/red/1tZK/image.png)}
    sent: "2017-06-11T04:36:28.805Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593cc7f202c480e6723125a6"
    text: "Now, let's try with an image passed by Julia..."
    sent: "2017-06-11T04:32:50.235Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593cc7b1d83c50560cf7e80d"
    text: {[![image.png](https://files.gitter.im/red/red/DlYz/thumb/image.png)](https://files.gitter.im/red/red/DlYz/image.png)}
    sent: "2017-06-11T04:31:45.433Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593cc7a67503e2b7062f592d"
    text: {@joa-quim View called from Julia (0.5) works here:}
    sent: "2017-06-11T04:31:34.571Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593cc01c142826e972a2c9b5"
    text: {@joa-quim In your code, you are trying to import `redTouple` and `redTouple4` functions, which do not exist (you need to remove the `o` character there).}
    sent: "2017-06-11T03:59:24.450Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593cbf4bd83c50560cf7d0f3"
    text: {Using the C tests script, I can open a View window, but the log window doesn't show up. @qtxie }
    sent: "2017-06-11T03:55:55.783Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593c9c6831f589c64f9540d2"
    text: {@joa-quim Let me check with the C test script to see if we don't have a regression.}
    sent: "2017-06-11T01:27:04.555Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593c5c4eca6d4ae80cff03c4"
    text: {@dockimbel I implemented redCall & redBlock in Red.jl and run the command you suggested, but still nothing pops up.}
    sent: "2017-06-10T20:53:34.467Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593bcdb56549436c7d33f4ca"
    text: {@michaeldesu red/help room is best for questions about code, so as not to clutter here. For next time😉}
    sent: "2017-06-10T10:45:09.374Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593bbfb46462d8493cfaeb5d"
    text: "Finding the answer yourself is best way to learn."
    sent: "2017-06-10T09:45:24.100Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593bbf88d83c50560cf49f59"
    text: ":)"
    sent: "2017-06-10T09:44:40.904Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593bbf3931f589c64f926129"
    text: {ok I embarrass myself with the obvious :smile: ^/```^/>> if a/x [print "exist"]^/exist^/```}
    sent: "2017-06-10T09:43:21.561Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593b8ca4ca6d4ae80cfc4024"
    text: {@qtxie that encoded string is coming from browser, I am not sure how exactly it encodes, I have to into it deeply. Anyway, I don't understand how the error message came with `áéí%`.}
    sent: "2017-06-10T06:07:32.654Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593b8c8fcf9c13503c700e2f"
    text: "@dockimbel Thanks."
    sent: "2017-06-10T06:07:11.253Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593b6de3cf9c13503c6fb334"
    text: {@rebolek A string `áéíóú` should be encoded to `\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA` in UTF-8}
    sent: "2017-06-10T03:56:19.197Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "593b4f446462d8493cf9a1ad"
    text: {@rebolek I've opened a ticket about that `dehex` issue, as it looks odd to me.}
    sent: "2017-06-10T01:45:40.354Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593b0fb96549436c7d31ac69"
    text: { That would be nice, because questions about Red get buried here :)}
    sent: "2017-06-09T21:14:33.041Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593b0eaf6462d8493cf8ca9e"
    text: "Time for a Julia set, eh, group?"
    sent: "2017-06-09T21:10:07.114Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "593ad9bfd83c50560cf1a0e8"
    text: "Thanks @joa-quim !"
    sent: "2017-06-09T17:24:15.729Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593ac9c2f2dd2dba0685c6a6"
    text: "@greggirwin Add the bit about the Red.jl package."
    sent: "2017-06-09T16:16:02.939Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593ac783f2dd2dba0685ba05"
    text: {Would one of the Julians get the important notes in the wiki? Lots of good info here that shouldn't be lost.}
    sent: "2017-06-09T16:06:27.530Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593ac74731f589c64f8efc16"
    text: {^/````^/julia> cmd = "img: make image! 50x50^/              img/rgb: buffer^/              view [image img]";^/^/julia> redDo(cmd)^/Ptr{Void} @0x28b55658^/^/julia> redDoFile("/v/ve_img.red");^/````^/which do nothing. No error, no result.}
    sent: "2017-06-09T16:05:27.028Z"
    editedAt: "2017-06-09T16:06:02.263Z"
    v: 2
    author: "5338b0085e986b0712f00889"
) #(
    id: "593ac7096549436c7d306be0"
    text: {@dockimbel Unfortunately I can't try that right now because ``redCall`` was one of the fews that I did not make ``ccall`` wrapper (never remember how to deal with the vararg cases). But I did try what you had suggested to me before }
    sent: "2017-06-09T16:04:25.382Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593ac6b931f589c64f8ef885"
    text: {@greggirwin You're welcome, it is just start. I will update the wiki once I'll add some necessary stuff to `http-tools`.}
    sent: "2017-06-09T16:03:05.471Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593ac65b436860af4ceff714"
    text: {With my simple `url-decode` function I just wrote, it can be decoded just fine. Is it a bug?^/```^/url-decode: function [^/^-string [string!]^/] [^/^-out: make string! 100^/^-parse string [some [#"%" copy value 2 skip (append out to char! to integer! append value #"h") | set value skip (append out value)]]^/^-out^/]^/```}
    sent: "2017-06-09T16:01:31.050Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593ac60ce531dbc905c87d6d"
    text: {:point_up: [June 9, 2017 4:25 AM](https://gitter.im/red/red?at=593a778602c480e67228ff68) CGI Wiki. Thanks Bolek!}
    sent: "2017-06-09T16:00:12.178Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593ac600436860af4ceff4ec"
    text: {@joa-quim Try something like this to see the image:^/```lisp^/bin = redBinary(img, 16*16);    # Send the img array to Red^/redProbe(bin);^/^/redSet(^/^-redSymbol("img"),^/^-redCall(redWord("make"), redWord("image!"), redBlock(redPair(16,16), bin))^/);^/redDo("view [image img]");^/```}
    sent: "2017-06-09T16:00:00.902Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593ac4caf2dd2dba0685acfd"
    text: {I've got a string `áéíóú` that is URL encoded to `%E1%E9%ED%F3%FA`. When trying to `dehex` it, I get following error:^/```^/*** Access Error: invalid UTF-8 encoding: #{E1E9ED25}^/```^/I don't get the error, when converted to string, it is `áéí%`. Why?}
    sent: "2017-06-09T15:54:50.712Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593abcef02c480e6722a418c"
    text: {@dockimbel and all new Julia fans. I started a new [Red.jl](https://github.com/joa-quim/Red.jl) to call Red from Julia. The example I added in the Usage shows that the communication works. But unfortunately, it also fails for the graphical parts. For example^/````^/julia> redOpenLogWindow()^/0^/````^/as fails a call to ``view`` to view the ``img`` image.^/Any idea why?}
    sent: "2017-06-09T15:21:19.530Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593abc78f31c8ced0c1c8c66"
    text: "Nice!"
    sent: "2017-06-09T15:19:20.030Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "593abc22e531dbc905c84cec"
    text: {`println` and similar are not visible in the gui-console, co using it in classic console is probably better:)}
    sent: "2017-06-09T15:17:54.676Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593abbb631f589c64f8ec459"
    text: {I'm not sure if I should do it.. if it is not on user to handle it in provided Julia code.^/Here is what I did: https://github.com/red/code/pull/53^/If you want to use it in console, just add line like this one:^/```^/#include %../../../Red-code/Library/Julia/Julia.red^/```^/[here](https://github.com/red/red/blob/master/environment/console/gui-console.red#L21) of [here](https://github.com/red/red/blob/master/environment/console/console.red#L16)}
    sent: "2017-06-09T15:16:06.460Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593ab732f2dd2dba06856efd"
    text: {`try sqrt(2.0) catch exception println(exception) end` would be simple error handling.}
    sent: "2017-06-09T14:56:50.355Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
)#(
    id: "593ab71831f589c64f8eaa60"
    text: "`try sqrt(2.0) end` should never raise an error."
    sent: "2017-06-09T14:56:24.085Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "593ab6fe436860af4cefa7d0"
    text: "I will post current state."
    sent: "2017-06-09T14:55:58.714Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593ab6ef6462d8493cf73bcf"
    text: "I'm not familiar with Julia code:)"
    sent: "2017-06-09T14:55:43.418Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593ab6d6f2dd2dba06856df7"
    text: {Wrap everything in Julia into `try catch end` and do your own error handling?}
    sent: "2017-06-09T14:55:18.332Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "593ab6a302c480e6722a1fde"
    text: {Also output from Julia is not visible in Red's GUI console.}
    sent: "2017-06-09T14:54:27.153Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593ab685f31c8ced0c1c6c59"
    text: {Current problem is, how to handle errors in Julia code, because on Julia's error now Red closes itself.}
    sent: "2017-06-09T14:53:57.133Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593ab65af2dd2dba06856c0d"
    text: "Cool!"
    sent: "2017-06-09T14:53:14.647Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "593ab61df31c8ced0c1c6acd"
    text: {```^/--== Red 0.6.2 ==-- ^/Type HELP for starting information. ^/^/>> julia/init "c:\dev\Julia-0.5.2\bin\"^/dir: c:\dev\Julia-0.5.2\bin\^/== true^/>> julia/do {2.0}^/== 2.0^/>> julia/do {sqrt(2.0)}^/== 1.414213562373095^/```}
    sent: "2017-06-09T14:52:13.682Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593aa15a7503e2b70627e682"
    text: {But copying to julia bin folder works tho (with assertion failure, maybe because I'm using `libjulia-debug.dll`).}
    sent: "2017-06-09T13:23:38.619Z"
    editedAt: "2017-06-09T13:27:26.940Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593aa146e531dbc905c7c429"
    text: {Hmm.. still doesn't work with updated gist. WIth or without `C:\Users\XX\AppData\Local\Julia-0.5.2\bin` argument.}
    sent: "2017-06-09T13:23:18.552Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593a9b8e6462d8493cf6b565"
    text: {:point_up: [June 9, 2017 4:23 PM](https://gitter.im/red/red?at=593a8531cf9c13503c6c084b)^/> Because Julia is looking for `..\lib\julia\sys.dll` from the path provided during init.^/^/Oh.. I remember something like this before! Moving the julia.reds exe to julia's `\bin\` folder indeed fixed it for me! So maybe just changing *current working directory* might fix it I guess?}
    sent: "2017-06-09T12:58:54.548Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593a96856462d8493cf69f9b"
    text: {@joa-quim I've updated the gist again.. showing how to get integer and string returned from Julia.}
    sent: "2017-06-09T12:37:25.697Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a919eca6d4ae80cf879d2"
    text: "I see, thanks."
    sent: "2017-06-09T12:16:30.658Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a906f31f589c64f8dec25"
    text: "Alt+click on the time of the starting message."
    sent: "2017-06-09T12:11:27.422Z"
    editedAt: "2017-06-09T12:11:47.234Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a8ed86462d8493cf67eb8"
    text: {Ghrrrr. That was it. With 0.5 it works. ^/I must warn the Julia devs. Is there anyway I could reference this "talk" in another place?}
    sent: "2017-06-09T12:04:40.526Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a8d24cf9c13503c6c2dce"
    text: "Maybe don't use Julia's beta version:)"
    sent: "2017-06-09T11:57:24.532Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a8d0cca6d4ae80cf86719"
    text: {It is not Red problem.. it is your os/julia mis-configuration.}
    sent: "2017-06-09T11:57:00.422Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a8bf402c480e672295238"
    text: {Thanks, now it says something but very little^/````^/V:\>julia c:\programs\Julia32-0.6\bin\^/Julia home dir: c:\programs\Julia32-0.6\bin\^/Starting Julia...^/````^/I will install julia 0.5 to see if it makes a difference.}
    sent: "2017-06-09T11:52:20.039Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a88c602c480e672294328"
    text: {@joa-quim Gist [updated](https://gist.github.com/Oldes/61444afa55a0395fde60002a5b345518) now you can do:^/```^/c:\dev\GIT\Red>julia c:\dev\Julia-0.5.2\bin\^/Julia home dir: c:\dev\Julia-0.5.2\bin\^/Starting Julia...^/sqrt(2.0) = 1.4142135623730951^/ret?: VAL 0F014010 has: 0F010350 0F010350 0F011010 00000050 00000050 00000050 00000050 00000050^/ret?: VAL 0F01B050 has: 00000002 0F010450 00000202 0F0104D0 00000202 0F010390 00000003 0F010450^/ret?: VAL 0F01B050 has: 00000002 0F010450 00000202 0F0104D0 00000202 0F010390 00000003 0F010450^/```}
    sent: "2017-06-09T11:38:46.341Z"
    editedAt: "2017-06-09T11:40:05.480Z"
    v: 4
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a87906462d8493cf65b25"
    text: {@qtxie @dockimbel The macOS build works again.  Thanks!}
    sent: "2017-06-09T11:33:36.482Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "593a8651cf9c13503c6c0d76"
    text: {It's a confusing situation I agree and probably should be raised to the Julia developers. But remember that it found your ``libjulia.dll`` that is located at a different place than my hardcoded path.}
    sent: "2017-06-09T11:28:17.517Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a855f6549436c7d2f44b0"
    text: "I can add the path as an argument:)"
    sent: "2017-06-09T11:24:15.320Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a8531cf9c13503c6c084b"
    text: {Because Julia is looking for `..\lib\julia\sys.dll` from the path provided during init.}
    sent: "2017-06-09T11:23:29.462Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a7f4c31f589c64f8da0cc"
    text: {Close. My hardcoded path is^/````^/"c:\programs\Julia32-0.6\bin\"^/````^/not ``lib``. I wonder if now we are not facing troubles due to different julia versions.^/This is an important thing because, as I mentioned before, if we cannot build in one place and distribute the usefulness of the whole process is drastically reduced.^/Let's try the other way around. Can you make you exe available to me so I can investigate more this issue?}
    sent: "2017-06-09T10:58:20.676Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a7dd9436860af4ceea340"
    text: "I bet that it is your hardcoded path:)"
    sent: "2017-06-09T10:52:09.002Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a7dc1e531dbc905c72816"
    text: {Sorry.. I had removed the path to bin folder... so this is what I get with your exe:^/```^/c:\Users\Oldes\Downloads>julia^/ERROR: System image file "c:\programs\Julia32-0.6\lib\julia\sys.dll" not found.^/```}
    sent: "2017-06-09T10:51:45.260Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a7d5ef31c8ced0c1b7284"
    text: {When I run your exe, I get system error, that `libjulia.dll` is missing.}
    sent: "2017-06-09T10:50:06.446Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a7cb4cf9c13503c6be4dc"
    text: {Yes, but that doesn't mean the ``libjulia.dll`` has to be located at that path when the program is executed. A valid ``libjulia.dll`` needs to be found in the computer where it is run but can be elsewhere, as long as Windows can find it ofc.}
    sent: "2017-06-09T10:47:16.082Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a7a926549436c7d2f1ba4"
    text: {This is [hardcoded path](https://gist.github.com/Oldes/61444afa55a0395fde60002a5b345518#file-julia-reds-L65)}
    sent: "2017-06-09T10:38:10.720Z"
    editedAt: "2017-06-09T10:38:26.844Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a781b436860af4cee8d65"
    text: {Why? It's not hardcoded path but a dll that will be found  in your computer. I am looking a the Dependency Walker and if I change my path it finds the same dll in a different location.^/Not working would mean that we could not compile in one machine and distribute the program to others.}
    sent: "2017-06-09T10:27:39.691Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a781aca6d4ae80cf812b6"
    text: {@rebolek thanks for your time, as always (you read my mind -> Wiki)}
    sent: "2017-06-09T10:27:38.227Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593a77f4cf9c13503c6bce1c"
    text: {Anyway... to me the julia binding code looks like a not documented mess... (but I'm not C expert) to get returned type of the value is difficult.}
    sent: "2017-06-09T10:27:00.692Z"
    editedAt: "2017-06-09T10:27:18.224Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a779cf2dd2dba06844e8f"
    text: {Also.. I must have in PATH: `c:\dev\Julia-0.5.2\bin\` else I get os error that some library cannot be found and get no output too.. in your case probably some other library is used and program quits silently. or I don't know:) try to add some print before the import in R/S code. }
    sent: "2017-06-09T10:25:32.090Z"
    editedAt: "2017-06-09T10:25:52.871Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a778602c480e67228ff68"
    text: {I've added info about CGI to Wiki: https://github.com/red/red/wiki/Using-Red-as-CGI}
    sent: "2017-06-09T10:25:10.699Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a766502c480e67228fa1d"
    text: {It will not work as there is the hardcoded path which you pass on init.}
    sent: "2017-06-09T10:20:21.118Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a75f67503e2b706273230"
    text: {Can you please try with my [executable](http://w3.ualg.pt/~jluis/lix/julia.exe)?}
    sent: "2017-06-09T10:18:30.341Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a7464f2dd2dba06844220"
    text: {Sorry, you are right. It's some other info that is printed. This is my version info, and yes am using julia 0.6 which is very close to be released^/````^/julia> versioninfo()^/Julia Version 0.6.0-rc3.0^/Commit ad290e93e4* (2017-06-07 11:53 UTC)^/Platform Info:^/  OS: Windows (i686-w64-mingw32)^/  CPU: Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz^/  WORD_SIZE: 32^/  BLAS: libopenblas (DYNAMIC_ARCH NO_AFFINITY Nehalem)^/  LAPACK: libopenblas^/  LIBM: libopenlibm^/  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)^/````}
    sent: "2017-06-09T10:11:48.821Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a73ad7503e2b70627280a"
    text: {`versioninfo()` is not executed when I start Julia console.}
    sent: "2017-06-09T10:08:45.619Z"
    editedAt: "2017-06-09T10:08:50.757Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a72f6142826e9729aa093"
    text: {``versioninfo`` is always run when one starts the julia console.^/I thought it could be some sort of contamination from my other 64 bits Julia but I was careful with the paths and Dependency Walker confirms that the executable is correctly depending on the 32 bits libjulia.dll }
    sent: "2017-06-09T10:05:42.478Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a6fc5436860af4cee6be7"
    text: {I don't know... run command: `versioninfo()` in julia's console.}
    sent: "2017-06-09T09:52:05.988Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a6d9fcf9c13503c6ba086"
    text: {So what am I doing wrong? I compiled your example with^/````^/C:\programs\red\red-062.exe -c julia.reds^/````^/and run it after, and still nothing is printed.}
    sent: "2017-06-09T09:42:55.023Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a6b64e531dbc905c6d8b4"
    text: {I have updated the [gist with version info](https://gist.github.com/Oldes/61444afa55a0395fde60002a5b345518) and this is what I get:^/```^/c:\dev\GIT\Red>julia^/initialized: 1^/Julia Version 0.5.2^/Commit f4c6c9d (2017-05-06 16:34 UTC)^/Platform Info:^/  OS: Windows (i686-w64-mingw32)^/  CPU: Intel(R) Core(TM) i7-4910MQ CPU @ 2.90GHz^/  WORD_SIZE: 32^/  BLAS: libopenblas (DYNAMIC_ARCH NO_AFFINITY Nehalem)^/  LAPACK: libopenblas^/  LIBM: libopenlibm^/  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)^/sqrt(2.0) = 1.4142135623730951^/```}
    sent: "2017-06-09T09:33:24.601Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a68a0ca6d4ae80cf7d312"
    text: {@geekyi @Clemens-H @ldci ^/I couldn't make it work too, but I'm assuming excess ignorance from me. This is what I did^/````^/V:\>C:\programs\red\red-062.exe -c julia.reds^/^/-=== Red Compiler 0.6.2 ===-^/^/Compiling V:\julia.reds ...^/^/Target: MSDOS^/^/Compiling to native code...^/...compilation time : 189 ms^/...linking time     : 18 ms^/...output file size : 25600 bytes^/...output file      : V:\julia.exe^/^/^/V:\>julia^/^/V:\>^/````^/That is I run the executable and nothing happened. No errors, no number.}
    sent: "2017-06-09T09:21:36.867Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593a67c202c480e67228b96a"
    text: "BTW, the CGI works for `GET` method only yet."
    sent: "2017-06-09T09:17:54.003Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a6711e531dbc905c6c332"
    text: ":)"
    sent: "2017-06-09T09:14:57.912Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a663e7503e2b70626e951"
    text: "@rebolek, `%.rgi` = Red Gateway Interface. :^^)"
    sent: "2017-06-09T09:11:26.411Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593a5d71cf9c13503c6b5541"
    text: {> BTW, what is the disk footprint of libJulia?^/^/I installed Julia v0.5.2 32bit and it is using 208MB of my disk now. Bin folder has 106MB. Nothing like Red:) libjulia.dll has 17MB but it requires other libs from the bin folder.}
    sent: "2017-06-09T08:33:53.312Z"
    editedAt: "2017-06-09T08:36:05.960Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593a4c4e6462d8493cf56a9e"
    text: {@michaeldesu You're welcome, if I knew it's so  easy to write, I would do it long time ago ;)}
    sent: "2017-06-09T07:20:46.342Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a4aa3f31c8ced0c1a98fc"
    text: "@rebolek thanks alot - looks really great!"
    sent: "2017-06-09T07:13:39.572Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593a465bca6d4ae80cf73ead"
    text: {Hm, I should reconfigure Apache, so I can use `.red` extension ;)}
    sent: "2017-06-09T06:55:23.332Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "593a4616436860af4cedb8a0"
    text: "@rebolek :clap: "
    sent: "2017-06-09T06:54:14.491Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "593a4254f31c8ced0c1a7b97"
    text: {To see it in action, you can take a look at http://qyz.cz/cgi-bin/headers.cgi?x=y}
    sent: "2017-06-09T06:38:12.561Z"
    editedAt: "2017-06-09T06:40:23.074Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a42257503e2b706265783"
    text: {@michaeldesu The code is here - https://github.com/rebolek/red-tools/blob/master/http-tools.red . You need just the server side part of that file, the rest is for client side stuff. Usage is easy, run that file in your CGI script and you will have headers available in `http-headers`, voilà. The `http-headers` object is modeled after Rebol's `system/options/cgi` (see http://www.rebol.com/docs/cgi2.html for details). }
    sent: "2017-06-09T06:37:25.497Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a3c9402c480e672280e7b"
    text: ":thumbsup: "
    sent: "2017-06-09T06:13:40.017Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593a3c81f31c8ced0c1a6743"
    text: {@michaeldesu not a built-in one (yet), but it's not hard. I will post some code soon.}
    sent: "2017-06-09T06:13:21.983Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a3c4a7503e2b706264332"
    text: {@rebolek sounds great, how? This is a really interesting application of Red}
    sent: "2017-06-09T06:12:26.485Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593a3ba5e531dbc905c6177d"
    text: "Yes, there is :)"
    sent: "2017-06-09T06:09:41.085Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a2d47f2dd2dba06832fdb"
    text: {When using Red as CGI, is there a way to get GET or POST input data?}
    sent: "2017-06-09T05:08:23.865Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a207902c480e67227b5e7"
    text: "BTW, what is the disk footprint of libJulia?"
    sent: "2017-06-09T04:13:45.162Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593a1ec5142826e9729969bc"
    text: {I'm very interested in this Red+Julia experiment too. :+1: }
    sent: "2017-06-09T04:06:29.832Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593a16f86462d8493cf4bd2b"
    text: "With @Oldes code"
    sent: "2017-06-09T03:33:12.534Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593a16e56549436c7d2daaba"
    text: {@Clemens-H @joa-quim  @ldci I wasn't able to get it working on 32-bit `libjulia-debug.dll` on Win 10. No error, nothing. Maybe I should start Red/System from scratch. Are there any tools you use to debug?}
    sent: "2017-06-09T03:32:53.972Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5939a4eaf2dd2dba06815494"
    text: {Glad you think so, since I don't know Julia, I will learn from what you put there. :^^)}
    sent: "2017-06-08T19:26:34.353Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5939a4a431f589c64f8a76d3"
    text: "@greggirwin Good idea!"
    sent: "2017-06-08T19:25:24.425Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59399dd5f31c8ced0c182ed0"
    text: {Please add notes and findings as you make them. If you all get the facts in there, we can always clean things up later.}
    sent: "2017-06-08T18:56:21.605Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59399dacca6d4ae80cf4e071"
    text: {I started a wiki page for those of you using Julia and Red together: https://github.com/red/red/wiki/Combining-Red-and-Julia}
    sent: "2017-06-08T18:55:40.036Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593972737503e2b706234301"
    text: {In other words, I would send string representations of Julia and Red values back and forth on sockets.  One only has to write functions to write values, not to parse them.}
    sent: "2017-06-08T15:51:15.627Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "593971ea7503e2b706233fd4"
    text: {@Oldes Wow, the Julia bindings look great, thanks!  Still, I would have to compile my own 32-bit Julia till there is a 64-bit Red.  The `ret` value returned by `jl_eval_string` is just a `byte-ptr!`, right?  How can one convert it to a Red `string!`?}
    sent: "2017-06-08T15:48:58.392Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59397126cf9c13503c67c250"
    text: {@joa-quim @Oldes  @ldci @geekyi (Hope I didn't forget anyone.) The reason why I didn't follow the FFI route is the 32-bit/64-bit problem.  Another reason why I am mainly interested in sockets is that the Julia code may eventually run on a different computer.  So I am looking forward to `open` and sockets!}
    sent: "2017-06-08T15:45:42.189Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59396f5ae531dbc905c2ff81"
    text: {@meijeru Sorry, made the mistake twice in a row, should not chat while coding. ;-)}
    sent: "2017-06-08T15:38:02.750Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59396c216549436c7d2b03cc"
    text: {```^/>> i: make image! 2x2^/== make image! [2x2 #{FFFFFFFFFFFFFFFFFFFFFFFF}]^/>> i/rgba^/*** Script Error: cannot access rgba in path [script invalid-path]^/*** Where: catch^/*** Stack: ^/``}
    sent: "2017-06-08T15:24:17.838Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59396bbf31f589c64f896ad9"
    text: {The symbolic constant for this is also called `EXTRACT_ARGB`.}
    sent: "2017-06-08T15:22:39.340Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59396aff02c480e67224eb2e"
    text: {> @joa-quim @meijeru Yes, it's `/rgba`. ^/No, it is `/argb`! And that is what is confusing. See `%runtime/datatypes/image.reds` line 681.}
    sent: "2017-06-08T15:19:27.993Z"
    editedAt: "2017-06-08T15:19:56.922Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "593966e7167d046a7d7e9449"
    text: "@joa-quim Good luck"
    sent: "2017-06-08T15:01:59.953Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "593966c6ca6d4ae80cf3d91f"
    text: "@Oldes That part was simple."
    sent: "2017-06-08T15:01:26.769Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593966a47503e2b706230b20"
    text: {Yes... and you must provide path to your julia/bin folder as it is hardcoded in my code.}
    sent: "2017-06-08T15:00:52.786Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5939669b142826e9729687d8"
    text: {@ldci I suspected that. Have to leave now. Will install a 32 bit tonight and try than.}
    sent: "2017-06-08T15:00:43.976Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "5939665cf2dd2dba06802d9a"
    text: {@joa-quim If your code uses  julia library you need a 32-bit compiled lib}
    sent: "2017-06-08T14:59:40.963Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "5939664d31f589c64f894f10"
    text: {And it will not be that much easy as I cannot find any function which would return type of the returned value.}
    sent: "2017-06-08T14:59:25.764Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5939661fe531dbc905c2d04a"
    text: {@Oldes Oh, I sure understand that. Thanks a lot for what you have already done.}
    sent: "2017-06-08T14:58:39.954Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593965aa167d046a7d7e8d01"
    text: {Sorry, hit ``enter`` before end. How do I test your prototype? I did a ``red -c julia.reds`` and got a julia.exe but it errors at start. Could it be because my Julia is a 64 bits version?}
    sent: "2017-06-08T14:56:42.933Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "5939656b7503e2b7062304fc"
    text: {@joa-quim In this case, you can use "call" to make Julia's code executed and get back the result.}
    sent: "2017-06-08T14:55:39.834Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "5939653a31f589c64f8948a8"
    text: {Of course.. this is just a simple starter... you would have to write the code for boxing/unboxing Julia values. I will keep it for someone else as I'm not interested in diving into another language for which I have no use.}
    sent: "2017-06-08T14:54:50.249Z"
    editedAt: "2017-06-08T14:55:43.152Z"
    v: 4
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593964f1e531dbc905c2c954"
    text: {@Oldes This is fantastic but bare with me. My initial idea was to process the data in Julia and send it in to Red to be displayed in GUIs that meanwhile I would learn how to design them. That is why I went straight to the redLib.dll because I'm more comfortable with C. From my really low Red understanding (honestly I haven't learned it yet) you are doing the other way around. That is, from Red cam Julia. Fine with me if this is even better. }
    sent: "2017-06-08T14:53:37.599Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593962d9cf9c13503c678107"
    text: "Cool, it works :) http://qyz.cz/cgi-bin/index.cgi"
    sent: "2017-06-08T14:44:41.155Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59395f8ccf9c13503c677210"
    text: {@Clemens-H @joa-quim You can start with [this](https://gist.github.com/Oldes/61444afa55a0395fde60002a5b345518).}
    sent: "2017-06-08T14:30:36.820Z"
    editedAt: "2017-06-08T14:38:33.337Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593959087503e2b70622c750"
    text: {Is this what you need? https://docs.julialang.org/en/release-0.4/manual/embedding/ Looks like pretty simple to do.}
    sent: "2017-06-08T14:02:48.586Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5939579ff31c8ced0c16d83a"
    text: "@Clemens-H @joa-quim me toi"
    sent: "2017-06-08T13:56:47.604Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "593956fd6462d8493cf1996c"
    text: {@Clemens-H  @joa-quim if you guys build a Julia interface/bridge, I'll use it too ;)}
    sent: "2017-06-08T13:54:05.865Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59394fd3167d046a7d7e2317"
    text: {@joa-quim you can also find some code for inspiration here: https://github.com/red/code/tree/master/Library For example my ImageMagick binding can give you `image!` from Red/System level too.}
    sent: "2017-06-08T13:23:31.693Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593944e67503e2b7062269be"
    text: {@joa-quim You are welcome!  Red is a very nice language, and I am looking forward to using it more.  :clap: }
    sent: "2017-06-08T12:36:54.609Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5939350fcf9c13503c66af06"
    text: {@Clemens-H Thanks. As I said, I still have much work to do before I can come  with good questions, but nice to know that there are others also working on a similar thing.}
    sent: "2017-06-08T11:29:19.522Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593932e8ca6d4ae80cf2de6e"
    text: "What a fast-answering community :)"
    sent: "2017-06-08T11:20:08.974Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "59392969142826e972957247"
    text: {@joa-quim Let me know if you have any questions or I can help.}
    sent: "2017-06-08T10:39:37.372Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5939293b6549436c7d29cf01"
    text: {@joa-quim My interface to Julia (or any other program) is very simple-minded at the moment.  It passes information in a couple of files.  I will rewrite it using `open` as soon as sockets are available.}
    sent: "2017-06-08T10:38:51.807Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "593920576549436c7d29ae0f"
    text: "@rebolek  Thanks"
    sent: "2017-06-08T10:00:55.926Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "59391fc4f31c8ced0c15dddf"
    text: {@joa-quim https://github.com/ldci/redCV and https://github.com/ldci/OpenCV3-red}
    sent: "2017-06-08T09:58:28.000Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59391f2fe531dbc905c18f28"
    text: {@dockimbel  @ldci Thank'a a lot for such a quick add. ^/Let me say that I am still in a very early Red phase and want to have an idea if it is feasible to use the Red GUI system together with Julia and have little to no Red experience, so things are going to be slow for my side. ^/@ldci could you point me to your OpenCV wrapper? It guess I might be very useful to me in my learning steps.^/Thanks}
    sent: "2017-06-08T09:55:59.832Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "59391e6eca6d4ae80cf28ff0"
    text: {Yes. The CLI console only support output to stdout, cannot read from stdin.}
    sent: "2017-06-08T09:52:46.804Z"
    editedAt: "2017-06-08T09:52:58.345Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "593911f8ca6d4ae80cf25868"
    text: "I see, thank you Doc."
    sent: "2017-06-08T08:59:36.969Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
)#(
    id: "59390fc131f589c64f87c29f"
    text: {So it should work fine when called from a webserver. For Windows, I'm not sure, @qtxie would know more about our current stdin support state there.}
    sent: "2017-06-08T08:50:09.321Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59390f65e531dbc905c14990"
    text: {```lisp^/$ ./cgi.red^/Hello^/```}
    sent: "2017-06-08T08:48:37.894Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59390f4bf31c8ced0c1598e9"
    text: {@endo64 On Linux, this works for me:^/```lisp^/#!/home/dev/red/console^/Red []^/^/print "Hello"^/```}
    sent: "2017-06-08T08:48:11.490Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59390c7731f589c64f87b4bb"
    text: {I tried with console binary directly and compiled my source to exe, both didn't work, I see that red-console.exe is at background with the parameter script name: `red-console.exe E:\server\...\test.red` but it hangs in background untill Apache gives timeout error.}
    sent: "2017-06-08T08:36:07.117Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59390bd3e531dbc905c138f8"
    text: "@joa-quim @meijeru Yes, it's `/rgba`."
    sent: "2017-06-08T08:33:23.360Z"
    editedAt: "2017-06-08T08:37:05.269Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59390ae402c480e672233e38"
    text: {@endo64 Don't use the Red toolchain for that, use the console's binary directly (though, I'm not sure it will read from stdin by default, we might need a flag for that), or you own compiled code.}
    sent: "2017-06-08T08:29:24.087Z"
    editedAt: "2017-06-08T08:31:38.775Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59390603ca6d4ae80cf2279f"
    text: {I also tried with compiled .exe as CGI, which I could easily done with encapped Rebol source, so no configuration issue.}
    sent: "2017-06-08T08:08:35.287Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "593905ac167d046a7d7ce328"
    text: {How can I use Red as CGI? I tried below script execute with pre-compiled Red console and the automated build Red.exe, both didn't work.^/With pre-compiled console I got no response with red.exe it hangs in background.^/^/```^/#!E:/Server/Apache24/cgi-bin/red-cli-console.exe --cgi^/Red []^/print "Content-Type: text/plain" ^/print ""^/print "Test"^/```}
    sent: "2017-06-08T08:07:08.141Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "593901c5167d046a7d7cd6ca"
    text: "@qtxie Thanks for fixing macOS problems"
    sent: "2017-06-08T07:50:29.932Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "5939017bf2dd2dba067e788b"
    text: {Oups `_getBinaryValue: routine [dataAddress [integer!] dataSize [integer!] return: [binary!] /local src p] [^/"Get RBG values from OpenCV Image"^/^-src: as byte-ptr! dataAddress^/^-p:  allocate dataSize^/^-copy-memory p src dataSize^/^-stack/set-last as red-value! binary/load p dataSize^/^-binary/load p dataSize^/]^/^/; get memory as binary! string^/; Thanks to Qtxie for the optimization!^/getBinaryValue: routine [dataAddress [integer!] dataSize [integer!] return: [binary!]] [^/^-as red-binary! stack/set-last as red-value! binary/load as byte-ptr! dataAddress dataSize^/]`}
    sent: "2017-06-08T07:49:15.355Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "593900d5167d046a7d7cd44c"
    text: {@joa-quim with Red/System this is possible. I had the same problem when porting OpenCV to Red.`_getBinaryValue: routine [dataAddress [integer!] dataSize [integer!] return: [binary!] /local src p] [^/"Get RBG values from OpenCV Image"^/^-src: as byte-ptr! dataAddress^/^-p:  allocate dataSize^/^-copy-memory p src dataSize^/^-stack/set-last as red-value! binary/load p dataSize^/^-binary/load p dataSize^/]`and a faster implementation provided by qtxie `; get memory as binary! string^/; Thanks to Qtxie for the optimization!^/getBinaryValue: routine [dataAddress [integer!] dataSize [integer!] return: [binary!]] [^/^-as red-binary! stack/set-last as red-value! binary/load as byte-ptr! dataAddress dataSize^/]^/`. This can help you }
    sent: "2017-06-08T07:46:29.262Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "5938fd80e531dbc905c0fe49"
    text: {Caution! The refinement for RGBA format is called `/argb`, not `/rgba`. See also issue #2684.}
    sent: "2017-06-08T07:32:16.468Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5938fc5c167d046a7d7cc478"
    text: {@joa-quim A [`redBinary()`](https://doc.red-lang.org/en/libred.html#_redbinary) function was added to the libRed API (see the example in the `tests/libRed/test.c`) . You can use it to pass a binary buffer to Red side, from which you can construct an image using following code (assuming your binary! value is referenced by  `buffer` word):^/```lisp^/img: make image! 50x50        ;-- set the right image size here^/img/rgb: buffer^/;img/rgba: buffer^/^/view [image img]              ;-- visualize the image^/```^/If your input buffer is in RGB format, you need to use the `/rgb:` setter for loading it, if the buffer is in RGBA format, then `/rgba:`. Let me know how this works for you.}
    sent: "2017-06-08T07:27:24.365Z"
    editedAt: "2017-06-08T07:29:57.050Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5938ee1002c480e67222c22e"
    text: {@joa-quim No direct support for passing such buffer yet. You could write a loop to copy it pixel by pixel into a Red `image!` buffer, though, that would not be very satisfying I guess. Anyway, passing a raw buffer and loading it as a Red value is a feature we miss currently in libRed, though it should be pretty trivial to add. Let me have a quick look at it.}
    sent: "2017-06-08T06:26:24.202Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59387f3ce531dbc905bf6427"
    text: "@ldci @Clemens-H I'm fixing it. :sunglasses: "
    sent: "2017-06-07T22:33:32.444Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "593874a502c480e67221451b"
    text: "Oh, I would love to know more."
    sent: "2017-06-07T21:48:21.574Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593866386462d8493cee1c8e"
    text: {@joa-quim, @Clemens-H is also using Julia with Red I believe.}
    sent: "2017-06-07T20:46:48.422Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59386336e531dbc905beed95"
    text: {@iArnold ^/Thanks ... but a bit evolved.^/I asked about a 64 bits version because I would like to try to use Red GUI building interfaced with Julia and Matlab but can use the 32 bits too.^/But a question I have right now is, can I send an RGB image from one external language such the above that have C FFI capabilities through the libRed API? I've looked at the docs but couldn't find an obvious way to try it.}
    sent: "2017-06-07T20:33:58.807Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "59382975cf9c13503c627e59"
    text: "Thanks @iArnold, appreciated!"
    sent: "2017-06-07T16:27:33.220Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5937ed41ca6d4ae80ced8c40"
    text: "qtxie is the MacOS specialist! :p"
    sent: "2017-06-07T12:10:41.790Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937eb6dca6d4ae80ced84cd"
    text: "So thanks to @qtxie . Best regards :)"
    sent: "2017-06-07T12:02:53.106Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "5937eb637503e2b7061cb22a"
    text: "@qtxie We need you! ;-)"
    sent: "2017-06-07T12:02:43.569Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5937eb2d02c480e6721ea69c"
    text: {@ldci You should rather mention @qtxie, if you want it to be fixed faster. ;-)}
    sent: "2017-06-07T12:01:49.347Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937eaf4167d046a7d78682c"
    text: {@dockimbel Thanks for identifying the problem. Waiting for the update :)}
    sent: "2017-06-07T12:00:52.399Z"
    v: 1
    author: "5673ead416b6c7089cbf2ba5"
) #(
    id: "5937e9aa31f589c64f82e68c"
    text: {@Clemens-H You're welcome. Thanks for reporting those issues.}
    sent: "2017-06-07T11:55:22.208Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937df9ef31c8ced0c1097e2"
    text: {I am very happy to get a nice, small binary, actually.  ;-)}
    sent: "2017-06-07T11:12:30.075Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5937dee06549436c7d24990c"
    text: {@dockimbel I would have never guessed that... ;-)  Thanks a lot for your efforts!}
    sent: "2017-06-07T11:09:20.958Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5937de43f31c8ced0c109208"
    text: {@Clemens-H BTW, if you are not using Red/System in your code, you would not need to compile, you can just run your code through the interpreter (`red foo.red`) or from the console.}
    sent: "2017-06-07T11:06:43.937Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937ddfb6462d8493ceb7cd9"
    text: {We found the cause, a system function that we rely on to get the OS version, seems to not like being called from a library init function in 10.12 (was fine in 10.11).}
    sent: "2017-06-07T11:05:31.155Z"
    editedAt: "2017-06-07T11:05:45.382Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937dbbaca6d4ae80ced455e"
    text: "Reproduced on 10.12."
    sent: "2017-06-07T10:55:54.455Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937da92cf9c13503c60ee60"
    text: "Let me try on 10.12..."
    sent: "2017-06-07T10:50:58.084Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937d8e7ca6d4ae80ced3acf"
    text: {@dockimbel I downloaded from `http://static.red-lang.org/dl/auto/mac/red-latest`.  I just tried `red clear`, which didn't help.  I am on 10.12.5.}
    sent: "2017-06-07T10:43:51.885Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5937d829167d046a7d7819ba"
    text: {Have you tried cleaning the libRedRT files? (`red clear`)?}
    sent: "2017-06-07T10:40:41.195Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937d8076462d8493ceb660d"
    text: {@Clemens-H I cannot reproduce your crash, it compiles and runs fine here on my macOS 10.11. Which version of Red are you using?}
    sent: "2017-06-07T10:40:07.724Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937ccddf31c8ced0c1045d8"
    text: {@dockimbel I know it worked very nicely last week and it compiles so much faster without `-r`. :smile: }
    sent: "2017-06-07T09:52:29.608Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5937c419cf9c13503c607c53"
    text: "@Clemens-H Looking at it..."
    sent: "2017-06-07T09:15:05.320Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937bfb0f2dd2dba067927d3"
    text: {There is still a problem on macOS with the daily build.  The simple program below doesn't work when compiling with `-c`, but it works when compiling with `-c -r`.^/^/```^/$ cat foo.red^/Red [^/    Needs: View]^/^/main: layout [^/    button "Quit" [unview/all]]^/^/view main^/0^/$ red -c foo.red^/^/-=== Red Compiler 0.6.2 ===- ^/^/Compiling foo.red ...^/...using libRedRT built on 7-Jun-2017/10:30:45+2:00^/...compilation time : 57 ms^/^/Target: Darwin ^/^/Compiling to native code...^/...compilation time : 1219 ms^/...linking time     : 53 ms^/...output file size : 77824 bytes^/...output file      : foo ^/^/^/0^/$ ./foo^/^/*** Runtime Error 1: access violation^/*** at: 00155AE2h^/1^/$ red -c -r foo.red^/^/-=== Red Compiler 0.6.2 ===- ^/^/Compiling foo.red ...^/...compilation time : 1532 ms^/^/Target: Darwin ^/^/Compiling to native code...^/...compilation time : 40335 ms^/...linking time     : 415 ms^/...output file size : 856064 bytes^/...output file      : foo ^/^/^/0^/$ ./foo^/# works now^/0^/```^/}
    sent: "2017-06-07T08:56:16.455Z"
    editedAt: "2017-06-07T08:57:31.724Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5937a6887503e2b7061b679e"
    text: "Blockquote done!"
    sent: "2017-06-07T07:08:56.189Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5937a598f2dd2dba0678b4bd"
    text: {@greggirwin Sure! Last thing I need is that confusion and I want to keep on friendly terms with Nenad.}
    sent: "2017-06-07T07:04:56.843Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5937a48a02c480e6721d621c"
    text: "https://github.com/red/red/issues/2765"
    sent: "2017-06-07T07:00:26.859Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5937a3e831f589c64f81a14b"
    text: "Ok, will open a ticket, thanks."
    sent: "2017-06-07T06:57:44.919Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5937a3d26462d8493cea703d"
    text: "Looks like a bug."
    sent: "2017-06-07T06:57:22.176Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937a233e531dbc905bb3caf"
    text: {Why is molding of `{` and `}` different? It seems confusing to me:^/```^/>> ["{" "}" "^^{" "^^}"]^/== ["{" {^^}} "{" {^^}}]^/```}
    sent: "2017-06-07T06:50:27.698Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59379d9ee531dbc905bb29d0"
    text: {@iArnold, could you block-quote, or delimit things you incorporate from other sources a bit more? It's clear to me where Nenad's quote ends and your own work begins, but it may not be to others. }
    sent: "2017-06-07T06:30:54.032Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59379645e531dbc905bb0970"
    text: {(And keep in mind that you would probably do it completely different than the Red team will, so your efforts may not end up in the main branch. :smile:   )}
    sent: "2017-06-07T05:59:33.769Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59379563cf9c13503c5fadfb"
    text: {@joa-quim ^/^/> But I see that we get a 32 bits dll. Is there an option to build a 64 bits dll?   ^/^/Yes there is an option, but it is a DIY solution. I have collected some study materials already to help getting up to speed on some details: https://github.com/reddoc/develop/wiki/DEV-GOAL-64-bit-support}
    sent: "2017-06-07T05:55:47.826Z"
    editedAt: "2017-06-07T05:57:29.247Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5937723b7503e2b7061aaba6"
    text: {@geekyi, here are some links to Max's SLiM stuff for R2:^/- http://www.pointillistic.com/open-REBOL/moa/steel/slim/slim-quickstart.html^/- http://www.rebol.org/view-script.r?script=slim-link.r^/- http://www.rebol.org/view-script.r?script=slim.r}
    sent: "2017-06-07T03:25:47.267Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59376e0df2dd2dba0677e932"
    text: "No 64-bit option yet, until Red is self-hosted."
    sent: "2017-06-07T03:07:57.603Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593762d631f589c64f80cd2d"
    text: {Ah, dumb of me now it works (but I had tried to run just the ``build libRed`` from the Red console).^/But I see that we get a 32 bits dll. Is there an option to build a 64 bits dll? }
    sent: "2017-06-07T02:20:06.044Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "59375a26142826e9728e335c"
    text: {"but see no C code to build this library." I'm not sure to get why there should be any C code involved? Red is built in Red, Red/System and Rebol, no C needed.}
    sent: "2017-06-07T01:43:02.606Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "593759eb142826e9728e32bf"
    text: {@joa-quim `red` means the Red executable (the toolchain), so that's a system shell command-line. It seems you are trying to run it from the Red console?}
    sent: "2017-06-07T01:42:03.071Z"
    editedAt: "2017-06-07T01:42:09.554Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59375897f2dd2dba0677a6aa"
    text: {@joa-quim Hi, let me have a look at it... Works fine from here.}
    sent: "2017-06-07T01:36:23.413Z"
    editedAt: "2017-06-07T01:40:58.549Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59375784f2dd2dba0677a358"
    text: {Hi,^/How do I build the libRed dll? I see ``red build libRed`` in the libRed API page but it (naturally) errors^/````^/red build libRed^/*** Script Error: build has no value^/*** Where: catch^/````^/Also downloaded the source code but see no C code to build this library.^/^/Thanks^/}
    sent: "2017-06-07T01:31:48.084Z"
    v: 1
    author: "5338b0085e986b0712f00889"
) #(
    id: "593756b5f2dd2dba0677a124"
    text: {@michaeldesu If your block contains only immediate values (`help immediate!`), then deep copying is unnecessary. Immediate values fit in the slot provided by a value container (like blocks), while other datatypes have external buffers, so they are candidates for deep copying.}
    sent: "2017-06-07T01:28:21.801Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59373e35f2dd2dba067751b0"
    text: "@endo64 ah, thanks alot for that"
    sent: "2017-06-06T23:43:49.274Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59373d017503e2b7061a0999"
    text: {@michaeldesu More precisely "it's necessary to use use deep when copying nested series", `string!` is also a `series!` so you have to deep copy in your example.}
    sent: "2017-06-06T23:38:41.936Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59373b966462d8493ce90311"
    text: {sorry, I just found a solution `t: copy/deep s` solves the problem - I guess it's necessary to use use deep when copying blocks}
    sent: "2017-06-06T23:32:38.762Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59373a40167d046a7d75d77a"
    text: {Hi. I'd like to ask another noob question.  I have the following example:^/```^/>> s: ["e:/test" "e:/test"]^/>> t: copy s^/>> foreach i t [replace i "e:/" ""]^/>> t^/== ["test" "test"]^/>> s^/== ["test" "test"]^/```^/I'm trying to update the content of `t` independently from `s` which I thought would be achieved by using `copy`. But the original `s` is updated - why is that, and what should I do to overcome?}
    sent: "2017-06-06T23:26:56.490Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593717d86549436c7d21b7da"
    text: {There is a reserved spot in the object header structure, but if that's used for something else there's nowhere to store the parent info, unless it's added as a regular word in all contexts.}
    sent: "2017-06-06T21:00:08.434Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593710c62315aeb90c979656"
    text: {Also, a long long time ago in a distant galaxy there was discussion about metadata and how to access it, just curious, is that still planned ?}
    sent: "2017-06-06T20:29:58.003Z"
    editedAt: "2017-06-06T20:36:17.431Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59370e953072d89a693f6f1c"
    text: {This is a pretty common pattern to make local definitions and export a function to the global space (well the nested object isn't but that is for the pourpose of the question):^/```Red^/a: object [^/^-object [^/^-^-c: 0^/^-^-set 'b func[][c: c + 1]^/^-]^/]^/```^/Ok, here I get `b` function in the global space.^/What if I want `b` to be scoped inside `a` object?^/I could write that like:^/```Red^/a: object [^/^-h: object [^/^-^-c: 0^/^-]^/^-b: func[][h/c: h/c + 1]^/]^/```^/But what if I want `h` object to be anonymous?^/Ok, this does it:^/```Red^/a: object [^/^-parent: self^/^-b: none^/^-object [^/^-^-c: 0^/^-^-parent/b: func[][c: c + 1]^/^-]^/]^/```^/Question is, as we have `self`, would it make sense to have `parent` too, enabling writing above as:^/```Red^/a: object [^/^-b: none ; <-- should not be required as we are still constructing object `a`^/^-object [^/^-^-c: 0^/^-^-parent/b: func[][c: c + 1]^/^-]^/]^/```^/(`b: none` being required or not, not important)}
    sent: "2017-06-06T20:20:37.646Z"
    editedAt: "2017-06-06T20:21:09.186Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59367c4031f589c64f7c83c9"
    text: "@dockimbel I will tonight. Outside now."
    sent: "2017-06-06T09:56:16.925Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "593678126549436c7d1e9fe6"
    text: {@endo64 Indeed, it's missing. Can you send a PR for it?}
    sent: "2017-06-06T09:38:26.983Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59366ab77503e2b70615fa27"
    text: {Ah... the `file` should be at the end of the block with `write`. And it should be defined as local I guess. And maybe using different name.. like `data` :)}
    sent: "2017-06-06T08:41:27.136Z"
    editedAt: "2017-06-06T08:44:40.773Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59366a6702c480e67217f3b3"
    text: "Why? It returns content from `read`."
    sent: "2017-06-06T08:40:07.782Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5936520ecf9c13503c59fd1e"
    text: {@dockimbel I just saw your `FEAT: adds the *-thru functions` commit. Shouldn't be there `file` at the end of the `read-thru` function?^/```^/read-thru: function [^/^-"Reads a remote file through local disk cache"^/^-url [url!]^-"Remote file address"^/^-/update^-^-"Force a cache update"^/^-/binary^-^-"Use binary mode"^/][^/^-path: path-thru url^/^-either all [not update exists? path] [^/^-^-either binary [read/binary path][read path]^/^-][^/^-^-write/binary path file: either binary [read/binary url][read url]^/^-]^/        ;file   <--- this is missing^/]^/```}
    sent: "2017-06-06T06:56:14.088Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59361542ca6d4ae80ce5adbd"
    text: {`get object` was used before reflectors were available, then removed as the feature is since then provided by `values-of`.}
    sent: "2017-06-06T02:36:50.944Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5935ba3e167d046a7d6f6fc6"
    text: {Welcome @DavidConroy!^/^/If you use `help` without any args, it will give you some clues to its use, but don't be afraid to post questions here as well.}
    sent: "2017-06-05T20:08:30.896Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5935aef47503e2b706132707"
    text: {Also Gregg's [Guru Meditations](https://github.com/red/red/wiki/Guru-Meditations) and [Primer](https://github.com/red/red/wiki/Primer) are worth reading :^^)}
    sent: "2017-06-05T19:20:20.554Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5935adf331f589c64f79578f"
    text: {@DavidConroy Hello and welcome!^/* Use the [gist](https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b), Luke! The official Red documentation is [here](https://doc.red-lang.org/). [Rebol/Core guide](http://www.rebol.com/docs/core23/rebolcore.html) is a good starting point.^/* Fuzzy-search: either [red-by-example](http://www.red-by-example.org/) or `what` and `help` functions.^/```^/>> help "refl"^/     body-of         function!     Returns the body of a value that supports reflection.^/     keys-of         function!     Returns the list of words of a value that supports reflection.^/     reflect         action!       Returns internal details about a value via reflection.^/     spec-of         function!     Returns the spec of a value that supports reflection.^/     values-of       function!     Returns the list of values of a value that supports reflection.^/     words-of        function!     Returns the list of words of a value that supports reflection.^/```}
    sent: "2017-06-05T19:16:02.979Z"
    editedAt: "2017-06-05T19:18:23.817Z"
    v: 5
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5935a316cf9c13503c576353"
    text: {Anyway, the `get` method described there is interesting, I didn't know it was implemented.}
    sent: "2017-06-05T18:29:42.486Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5935a2fce531dbc905b2cdfc"
    text: "oh yeah, should have continued reading :smile: "
    sent: "2017-06-05T18:29:16.380Z"
    v: 1
    author: "557df4ae15522ed4b3e1e6a2"
) #(
    id: "5935a29402c480e67214eedb"
    text: {thanks, obvious when I think of it. what is the most up-to-date docs at the moment? also whil e you're here, I know there's a way to fuzzy-search the functions available but I can't remember. It'd help in such situations. Cheers.}
    sent: "2017-06-05T18:27:32.007Z"
    v: 1
    author: "557df4ae15522ed4b3e1e6a2"
) #(
    id: "5935a26fca6d4ae80ce3d70e"
    text: {See the "reflectors" part of that document.}
    sent: "2017-06-05T18:26:55.379Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5935a21b7503e2b70612e84a"
    text: {@DavidConroy Hi, to get values, use `values-of`:^/```^/>> probe values-of obj^/[123 "hello"]^/```}
    sent: "2017-06-05T18:25:31.274Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5935a152cf9c13503c575b7c"
    text: {Hi all, beginner question - I was going through the blog post on objects at http://www.red-lang.org/2014/12/050-objects-support.html. It seems "get obj" doesn't get the values of the fields of the object anymore:^/       obj: object [a: 123 b: "hello"]^/       probe get obj^/returns an error.^/What is the current correct way to get the fields of an object? ^/Thanks.}
    sent: "2017-06-05T18:22:10.389Z"
    editedAt: "2017-06-05T18:22:58.948Z"
    v: 2
    author: "557df4ae15522ed4b3e1e6a2"
) #(
    id: "5935277d167d046a7d6cd83c"
    text: {(I also cleaned out `~/.red`, but that most likely doesn't matter.)}
    sent: "2017-06-05T09:42:21.803Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59352657e531dbc905b07950"
    text: "@dockimbel Yes."
    sent: "2017-06-05T09:37:27.897Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59352641167d046a7d6cd2e1"
    text: "@Clemens-H On macOS I guess?"
    sent: "2017-06-05T09:37:05.157Z"
    editedAt: "2017-06-05T09:37:09.941Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5935260a6549436c7d191bb4"
    text: {However, still:^/```^/$ ./foo^/*** Runtime Error 1: access violation^/*** at: 001BF6BFh^/```^/(Address changes.)^/Source:^/```^/$ cat foo.red^/Red [Needs: View]^/^/main: layout [^/    button "Quit" [unview/all]]^/^/view main^/```}
    sent: "2017-06-05T09:36:10.689Z"
    editedAt: "2017-06-05T09:36:47.115Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5935255f6462d8493cdfa4f2"
    text: {Thanks! I just deleted `libRedRT*` and it compiles.}
    sent: "2017-06-05T09:33:19.691Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59351cc1e531dbc905b04f7a"
    text: "(assuming rebol is in your path)"
    sent: "2017-06-05T08:56:33.360Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59351ca6f31c8ced0c04977c"
    text: "Or in the terminal^/```rebol -qs red.r clear```"
    sent: "2017-06-05T08:56:06.523Z"
    editedAt: "2017-06-05T08:56:17.965Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59351a0131f589c64f76935d"
    text: {@Clemens-H If you use Red from sources, you need to clean up the older libRedRT after updating, so from Rebol console:^/`rc "clear"`}
    sent: "2017-06-05T08:44:49.455Z"
    editedAt: "2017-06-05T08:44:53.024Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59351808ca6d4ae80ce1585b"
    text: {With the latest build on macOS, I get this message when compiling with `-c`:^/```^/Compiling to native code...^/*** libRedRT Error: definition not found for red/OS-image/ctx-to-cgimage^/```^/It works with `-c -r`, though.}
    sent: "2017-06-05T08:36:24.945Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5934dd59ca6d4ae80ce08ff1"
    text: {@meijeru Memory management code is far from being final, it is subject to change in the next major releases before 1.0. Renaming flags is something we should eventually do in a 0.9.x version, if those flags still exist by then. Cleaning up the codebase and covering all possible edge cases is not a concern before 0.9.0. If we start doing such polishing at 0.6.3, simply put, we will never reach 1.0.}
    sent: "2017-06-05T04:26:01.956Z"
    editedAt: "2017-06-05T04:32:41.249Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5934c84c31f589c64f758741"
    text: {Not guaranteed, of course, but they make share an aesthetic and structural sense.}
    sent: "2017-06-05T02:56:12.161Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5934c81d02c480e672117de5"
    text: {Absolutely, and they would probably work well with others from similar backgrounds. }
    sent: "2017-06-05T02:55:25.265Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59349b2f142826e972829abf"
    text: {Gregg - I would suggest that an artist who develops programming skills would produce different code to a mathematician who develops those same programming skills. Most composers/writers/artists have different styles. Just my thoughts. }
    sent: "2017-06-04T23:43:43.852Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "59345499cf9c13503c526485"
    text: "@lepinekong_twitter , have you tried `call`?"
    sent: "2017-06-04T18:42:33.707Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5934542ff2dd2dba066b650e"
    text: {@geekyi, Doc recently pointed me to Quora, and I ended up answering a question that aligns with your issues. The answer is context. How we structure our code, for an audience to read and understand, is up to us. With Rebol, we write for ourselves or in small teams, where things naturally, invisibly, seem clear, because you know who you're talking to. As Red projects grow, there will surely be more separation used by teams to organize things. Possibly along dialect lines, but not always. Just as you would have to adjust when reading mixed topics in any area, or fiction with varying timelines and subplots,  it's up to the author to help you navigate the story and information.}
    sent: "2017-06-04T18:40:47.281Z"
    editedAt: "2017-06-04T18:41:41.169Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59343a166462d8493cdc9bee"
    text: {A small concern for consistency: the flags defined in the cell header all have symbolic names beginning with `flag-` except `series-in-use` and `body-flag`.  Is there a reason?  and if not, what would be the cost of renaming them?}
    sent: "2017-06-04T16:49:26.028Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59342ab931f589c64f73735c"
    text: {```text^/^/```^/https://github.com/ajaxorg/ace#features says that it is possible to import `TextMate/Sublime/.tmlanguage files`.^/[This](https://github.com/ajaxorg/ace/wiki/Importing-.tmtheme-and-.tmlanguage-Files-into-Ace) page provides more details on how to do it.^/**NOTE:** The converted file will still require manual fixing to work though.^/```text^/^/```}
    sent: "2017-06-04T15:43:53.976Z"
    editedAt: "2017-06-04T15:45:50.597Z"
    v: 6
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59342a117503e2b7060d75ca"
    text: {Okay, since I have no idea about how to put up a comment on trello, so I am putting it here. Someone with commenting access on the trello board, put this [here](https://trello.com/c/IRrh9Ipe/137-create-syntax-highlighter-for-ace---https%3A%2F%2Face.c9.io%2F%23nav%3Dhiglighter) ---}
    sent: "2017-06-04T15:41:05.014Z"
    editedAt: "2017-06-04T15:46:17.976Z"
    v: 5
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5934246dcf9c13503c51aafb"
    text: {https://trello.com/c/Fmq7wsLz/147-0.6.3-macos-gui-support}
    sent: "2017-06-04T15:17:01.231Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59342466f2dd2dba066abc46"
    text: {@lepinekong_twitter `Support for evaluating expressions from command-line` is in the timeline for 0.6.3 and will come soon on master. You will be able to do it then.}
    sent: "2017-06-04T15:16:54.101Z"
    editedAt: "2017-06-04T15:20:40.447Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "593423b8cf9c13503c51a85d"
    text: {Hi, any suggestion on passing a bunch of text to red from let's say Powershell and return back the result to the caller ? Use case: I want to use red parse and continue processing with Powershell. }
    sent: "2017-06-04T15:14:00.589Z"
    v: 1
    author: "57a1e5ed40f3a6eec05dbd3e"
) #(
    id: "59341a5ff2dd2dba066a99dc"
    text: {@geekyi Such embedded dialects were used for more than 15 years in Rebol world, I don't remember anyone complaining about it.}
    sent: "2017-06-04T14:34:07.334Z"
    editedAt: "2017-06-04T14:34:15.544Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5933f5cf6549436c7d1523f0"
    text: {However, it's not *that* important an issue now tho. Maybe in the long term. I'll research more}
    sent: "2017-06-04T11:58:07.610Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5933f3bcf2dd2dba066a1528"
    text: {@dockimbel I don't know if there are many DSLs in C#. But if *LINQ* is the only one, it's not much of a problem. But we should probably be comparing to others where iDSLs are more prominent; like *Lisp* and *Ruby*}
    sent: "2017-06-04T11:49:16.007Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "5933e001cf9c13503c50b642"
    text: {@geekyi You can see [similar approach](https://msdn.microsoft.com/en-us/library/gg509017.aspx#SimpleWhereClause) in .Net languages with embedded LINQ DSL, there is no specific punctuation separating the host language from the DSL.}
    sent: "2017-06-04T10:25:05.263Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5933db4f142826e9728005e8"
    text: {@geekyi Natural languages use very little punctuation compared to programming languages (especially mainstream ones), yet they are much more readable (probably related).}
    sent: "2017-06-04T10:05:03.129Z"
    editedAt: "2017-06-04T10:09:35.586Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5933d533f31c8ced0c003859"
    text: {But I admit, I don't know if it's better to leave it to the code writer to decide that. This more or less:^/> The question of enforcing parens }
    sent: "2017-06-04T09:38:59.537Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5933d4c0cf9c13503c50925b"
    text: {Well, you don't have to put punctuation (like `,` and `(`) in natural languages, but it sure helps readability when you do :D}
    sent: "2017-06-04T09:37:04.876Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5933d1f631f589c64f723469"
    text: {The case of `compose` is very different, it's not a dialect, it's partial evaluation of (optionally nested) Red expressions.}
    sent: "2017-06-04T09:25:10.098Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5933d1c0e531dbc905abe100"
    text: {In case of Parse, Red expressions are in parens, because that's the only way to support them there. Parse grammar would be ambiguous otherwise. In case of VID, some keywords are accepting Red expressions as argument, so no ambiguity there.}
    sent: "2017-06-04T09:24:16.792Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5933d15f6462d8493cdb2cfa"
    text: {The question of enforcing parens Red code expressions in other dialects is a legitimate one.}
    sent: "2017-06-04T09:22:39.972Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5933d127f31c8ced0c002b7a"
    text: {Moreover, nothing prevents you from putting parens into such expressions if you feel like it's more readable for you.}
    sent: "2017-06-04T09:21:43.864Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5933d0bf6462d8493cdb2b3a"
    text: {In natural languages, you don't use specific notations to delimit dialects or jargon from different domains, yet humans have no problem sorting out what is what. At least in Red, you have semantic rules you can rely upon (sure you need to learn them first).}
    sent: "2017-06-04T09:19:59.073Z"
    editedAt: "2017-06-04T09:21:09.059Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5933d07ff31c8ced0c002984"
    text: {> you have to explicitly know that what comes after text-list data is normal red code^/^/Yes, that's part of the VID learning process, the same way as you need to know that the block after `view` is VID dialect, or the second argument to `parse` is Parse dialect.}
    sent: "2017-06-04T09:18:55.279Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5933cfe5ca6d4ae80cdcfaa1"
    text: {:point_up: [June 3, 2017 9:06 PM](https://gitter.im/red/red?at=5932de7d6549436c7d11aa28)^/> @geekyi If you look closely a that demo, you'll see that it's made of a *single* expression. ;-)^/^/@dockimbel I know, and that's what bothers me.. let me explain:^/In `compose` and `parse` for example, the boundary of where dialects change is very obvious:  `()` parens! . In most other cases, it's clear too with `[]`^/In this particular case, you are going from `vid -> red -> [parse -> [collect]]`^/The `vid -> red` is what I find the problem with, no barriers between dialects.^/^/But I wouldn't write code like that because it makes it hard to skim when you're reading code, you have to explicitly know that what comes after `text-list data` is normal red code, then look at `parse`, then look for the end of parse ( the parse rule block `[]`).^/Compared to e.g. `compose` where you have to look for `(`, then search for ending `)`^/Also a problem when you're manipulating code (match on `parens!` vs more complicated match expression)^/^/Perhaps good as a showcase of terseness tho}
    sent: "2017-06-04T09:16:21.539Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59338c45142826e9727f1ca5"
    text: {@9214  Stack trace improved and enabled by default in the last commit.}
    sent: "2017-06-04T04:27:49.535Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59334cee02c480e6720cdbe2"
    text: {:laughing: I didn't realize it.. subliminal indeed}
    sent: "2017-06-03T23:57:34.961Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593316676462d8493cd8fb71"
    text: {:point_up: [June 3, 2017 9:40 AM](https://gitter.im/red/red?at=5932d856ca6d4ae80cd9e792) Re: `/code/more/fun`, @dockimbel, you're going to have to hide your subliminal messages better.}
    sent: "2017-06-03T20:04:55.419Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59330fb46549436c7d1267f3"
    text: {i'm guessing `["\n" | {"}]` is the relevant part of the code}
    sent: "2017-06-03T19:36:20.769Z"
    v: 1
    author: "57ee3915716c01c940670f45"
) #(
    id: "59330f91142826e9727d9b38"
    text: {wish i could say why exactly but i'm completely new to redlang}
    sent: "2017-06-03T19:35:45.340Z"
    v: 1
    author: "57ee3915716c01c940670f45"
) #(
    id: "59330f72e531dbc905a999b0"
    text: {seems to be a bug in last-commits.red itself. it doesn't handle escaped quotes so `\"` causes it to prematurely stop reading the commit message.}
    sent: "2017-06-03T19:35:14.301Z"
    v: 1
    author: "57ee3915716c01c940670f45"
) #(
    id: "59330e6b6549436c7d126278"
    text: "thanks. that works."
    sent: "2017-06-03T19:30:51.793Z"
    v: 1
    author: "57ee3915716c01c940670f45"
) #(
    id: "5932f92acf9c13503c4deaf2"
    text: {@drguildo try [this one](http://static.red-lang.org/dl/auto/win/red-latest.exe)}
    sent: "2017-06-03T18:00:10.490Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932f486f2dd2dba0666ef6e"
    text: {> @drguildo  Which Red build do you use and on which platform?^/^/0.6.2 and Windows 7}
    sent: "2017-06-03T17:40:22.394Z"
    editedAt: "2017-06-03T17:40:31.411Z"
    v: 2
    author: "57ee3915716c01c940670f45"
) #(
    id: "5932f0ef7503e2b706098e34"
    text: {The syntax coloring is helpful there. Though, that is just a raw trace, it will be improved in the future (like filtering out the words not referring to a `function!` value, for a shorter stack trace). Actually, just a nicer indentation could do it with that level of details, to make it much more readable.}
    sent: "2017-06-03T17:25:03.917Z"
    editedAt: "2017-06-03T17:25:57.118Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932ef666549436c7d11f0f6"
    text: "2deep4me :astonished: "
    sent: "2017-06-03T17:18:30.865Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932ef2b02c480e6720b979c"
    text: {It's in VID, `fetch-options` trigering a `on-change*` event which results in an incoherent state, because of the missing feature.}
    sent: "2017-06-03T17:17:31.449Z"
    editedAt: "2017-06-03T17:17:48.706Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932edea6549436c7d11eb4e"
    text: {```^/*** Script Error: new is missing its input argument^/*** Where: new^/*** Stack: launch launch either run while eval-command if either switch if switch-mode set case do-command unless case print = type? try either = set catch view if set either layout while switch set fetch-options set on-change* if unless if any series? new object? new^/```^/:confused: }
    sent: "2017-06-03T17:12:10.944Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932ebf7cf9c13503c4dbbe0"
    text: "@dockimbel Thanks!"
    sent: "2017-06-03T17:03:51.076Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5932eab5e531dbc905a91375"
    text: {@dockimbel thanks Doc! The time has come for deep meditation :^^)}
    sent: "2017-06-03T16:58:29.176Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932ea99f31c8ced0cfd5c72"
    text: {> Any ideas why it didn't work in older versions?^/^/I answered it there:  :point_up: [June 3, 2017 11:36 PM](https://gitter.im/red/red?at=5932d7717503e2b706093276)}
    sent: "2017-06-03T16:58:01.474Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932ea7902c480e6720b87eb"
    text: {You can force the call stack trace in the console to see where it's coming from:^/`system/state/trace?: yes`.}
    sent: "2017-06-03T16:57:29.572Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932dfdf31f589c64f6f3715"
    text: "I thought that mixing dialects is error-free"
    sent: "2017-06-03T16:12:15.917Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932dfbcf2dd2dba06669a9b"
    text: {Any ideas why it didn't work in older versions? And what is `new`?}
    sent: "2017-06-03T16:11:40.085Z"
    editedAt: "2017-06-03T16:15:33.975Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932df69f31c8ced0cfd32d0"
    text: {@9214 Doc Manhattan has decided to start a carrier in music industry! ;-)}
    sent: "2017-06-03T16:10:17.164Z"
    editedAt: "2017-06-03T16:10:32.808Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932df2c142826e9727ce80d"
    text: {@geekyi If you look closely a that demo, you'll see that it's made of a *single* expression. ;-)}
    sent: "2017-06-03T16:09:16.027Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932de7d6549436c7d11aa28"
    text: {@geekyi Ability to seamlessly blend dialects together is one of the strong points of Redbol. It's not always desirable, but it can be very effective, removing lots of interfacing boilerplate code.}
    sent: "2017-06-03T16:06:21.818Z"
    editedAt: "2017-06-03T16:08:08.692Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932d9a16462d8493cd82398"
    text: "Apologies for the msg fragmentation"
    sent: "2017-06-03T15:45:37.653Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5932d97c02c480e6720b4af6"
    text: {... showed the alternative way in red/bugs. Not so readable if you are skimming code I believe.. Especially when it comes to dialects, have to pay extra attention to find the boundaries. However, only a red programmer would notice the difference. A newcomer won't }
    sent: "2017-06-03T15:45:00.885Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5932d8a1f2dd2dba06668162"
    text: { ... I mean the mixing of dialects. I realize @dockimbel }
    sent: "2017-06-03T15:41:21.314Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5932d856ca6d4ae80cd9e792"
    text: "@meijeru  By checking `/code/more/fun` value."
    sent: "2017-06-03T15:40:06.806Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932d7d26549436c7d1195dd"
    text: "It is a bit confusing, "
    sent: "2017-06-03T15:37:54.866Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5932d7b6f2dd2dba06667d3f"
    text: {[Born too slow](https://www.youtube.com/watch?v=H6BEkPzstJQ) :older_man: }
    sent: "2017-06-03T15:37:26.892Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932d7717503e2b706093276"
    text: {The features required for that demo were implemented about 10 days ago.}
    sent: "2017-06-03T15:36:17.055Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932d74e31f589c64f6f1921"
    text: {@dockimbel I've checked it  on Win7, crashes with^/```^/>> system/build/date^/== "6-May-2017/19:04:37+5:00"^/```^/^/but works with latest build}
    sent: "2017-06-03T15:35:42.553Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932d552167d046a7d655cd3"
    text: {@drguildo  Which Red build do you use and on which platform?}
    sent: "2017-06-03T15:27:14.150Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932c955f31c8ced0cfcdae4"
    text: {so is that a bug in the compiler/libraries side of things?}
    sent: "2017-06-03T14:36:05.294Z"
    v: 1
    author: "57ee3915716c01c940670f45"
) #(
    id: "5932be5aca6d4ae80cd98b5b"
    text: {hm, that's weird, seems to be caused by `parse` inside `view`}
    sent: "2017-06-03T13:49:14.774Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932bb257503e2b70608c8cb"
    text: {@9214 https://github.com/red/code/blob/master/Showcase/last-commits.red}
    sent: "2017-06-03T13:35:33.820Z"
    v: 1
    author: "57ee3915716c01c940670f45"
) #(
    id: "5932bb18167d046a7d64fcfe"
    text: "@drguildo can you show us code snippet please?"
    sent: "2017-06-03T13:35:20.248Z"
    editedAt: "2017-06-03T13:35:35.689Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5932b9f1e531dbc905a85f62"
    text: {i'm trying to run the last-commits.red but am getting the error `new is missing its input argument`. does anyone know what's causing it?}
    sent: "2017-06-03T13:30:25.460Z"
    v: 1
    author: "57ee3915716c01c940670f45"
) #(
    id: "5932b2c7ca6d4ae80cd96439"
    text: {No, I was referring to cells with `TYPE_OP` in the header, and bit 23 set, and how to know if the contents of the `/code` field is a function or routine body.}
    sent: "2017-06-03T12:59:51.211Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5932b06ccf9c13503c4cdf63"
    text: {@meijeru `TYPE_FUNCTION` vs `TYPE_ROUTINE` in the cell's header.}
    sent: "2017-06-03T12:49:48.408Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932ac5d6462d8493cd7821d"
    text: "See also #2727 "
    sent: "2017-06-03T12:32:29.083Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
)#(
    id: "5932ac226462d8493cd7818b"
    text: {In connection with the wish to have `body-of ` and `source` defined on suitable `op!` values, namely those derived from functions and routines, I hit on this question: how does the runtime see the difference between function and routine? There is only one flag, bit 23 of the `red-op!` header...}
    sent: "2017-06-03T12:31:30.634Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59326450cf9c13503c4bdd51"
    text: {I'd quite like to port it but I don't have the time at the moment.}
    sent: "2017-06-03T07:25:04.983Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593264037503e2b70607a9cb"
    text: {@dockimbel I just noticed some bit shifting without really checking the code so assumed that it would be a concern.}
    sent: "2017-06-03T07:23:47.427Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593255aa6549436c7d0fe637"
    text: {@PeterWAWood I don't think that it's a concern in that case. I don't see any endianess handling in the reference implementation.}
    sent: "2017-06-03T06:22:34.969Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59324ae0f31c8ced0cfb2b6a"
    text: {> Anyone interested in porting Base65536 to Red? ;-) https://github.com/qntm/base65536 ^/^/Little endian only or both big and little?}
    sent: "2017-06-03T05:36:32.825Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59324874ca6d4ae80cd80aab"
    text: {it's pretty delightful seeing the kinds of things people come up with sometimes :smile: }
    sent: "2017-06-03T05:26:12.862Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59323b50e531dbc905a6d378"
    text: {@dander [Base-emoji](https://github.com/pfrazee/base-emoji) is crazier. ;-)}
    sent: "2017-06-03T04:30:08.797Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5932365a6462d8493cd60994"
    text: "wow, that's crazy"
    sent: "2017-06-03T04:08:58.772Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59323491cf9c13503c4b4b73"
    text: {Anyone interested in porting Base65536 to Red? ;-) https://github.com/qntm/base65536 }
    sent: "2017-06-03T04:01:21.718Z"
    editedAt: "2017-06-03T04:01:28.021Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5930416e142826e97272df84"
    text: "Thanks @luce80 !"
    sent: "2017-06-01T16:31:42.951Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5930119800efc2bb3ec71aad"
    text: {About `date!` : here is a gist that I hope could be useful https://gist.github.com/luce80/96d48297f2307a713c918c68bf046520}
    sent: "2017-06-01T13:07:36.449Z"
    v: 1
    author: "56eeeea485d51f252ab9d69f"
) #(
    id: "592fa7f900efc2bb3ec54796"
    text: {I support the method to restart the counter on 1-1-2030, that way you have nice 60 year cycles.  }
    sent: "2017-06-01T05:36:57.996Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "592f3fadfcbbe1891c646727"
    text: "NetBSD already has an answer "
    sent: "2017-05-31T22:11:57.744Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f28200a783b6c0af3da7c"
    text: {> Just curious if there is an ETA for `date!` 😊^/^/It will be more future proof if it is done after https://en.wikipedia.org/wiki/Year_2038_problem^/:wink: }
    sent: "2017-05-31T20:31:28.466Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "592ed69f331deef4646a0291"
    text: "Thanks @Oldes !"
    sent: "2017-05-31T14:43:43.035Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "592ed6575e34568d5eac11af"
    text: "@x8x 0.6.5"
    sent: "2017-05-31T14:42:31.107Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "592ec8940de3eb3e19a80bcd"
    text: "Just curious if there is an ETA for `date!` 😊"
    sent: "2017-05-31T13:43:48.495Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "592d452af3001cd342715335"
    text: {@dockimbel Great! I am looking forward to trying out sockets.  `open` should simplify some of my code a lot...}
    sent: "2017-05-30T10:10:50.651Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592d44f10a783b6c0aeb2a8f"
    text: "@qtxie Thanks! I didn't know that."
    sent: "2017-05-30T10:09:53.333Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592cec532b926f8a67a63e9f"
    text: {@Clemens-H You can use `on-key-down` event, as the `on-key` event is for translated key. No corresponding character for `Command + key` combination, so it's none.}
    sent: "2017-05-30T03:51:47.321Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "592cdb9eeec422e415ff985d"
    text: {@Clemens-H We're almost there, not much longer to wait. ;-)}
    sent: "2017-05-30T02:40:30.645Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592c846a00efc2bb3eb820cd"
    text: {@Oldes @dockimbel Yes, sockets (`open`) would be great! ;-)}
    sent: "2017-05-29T20:28:26.435Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592c83c5fcbbe1891c58a37b"
    text: {@qtxie Thanks again for the command key in `event/flags`. There is a small problem with `event/key` when the command key is pressed: it is always `none`.  Here is the output (`key`, then `flags`) for pressing w, shift-w, control-w, and command-w.^/```^/#"w"^/[]^/^/#"W"^/[shift]^/^/#"^^W"^/[control]^/^/none^/[command]^/```}
    sent: "2017-05-29T20:25:41.120Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592c832fcb83ba6a410f02ba"
    text: {Or we can wait what @dockimbel will bring with native Red I/O, because the ZMQ's server/client example should be quite easy to do without need to use 450kB external library.}
    sent: "2017-05-29T20:23:11.897Z"
    editedAt: "2017-05-29T20:24:23.703Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "592c824d0ba4d59763f1a5c7"
    text: {@Clemens-H I don't know how it is on Mac, but on Windows there is version for both... 32/64bit. But Apple is pushing hard to support only 64bit I think... we will need it of course.}
    sent: "2017-05-29T20:19:25.181Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "592c5a132b926f8a67a43e11"
    text: "32-bit limitation is for all targets."
    sent: "2017-05-29T17:27:47.446Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592c5a0700efc2bb3eb76ded"
    text: "Go Oldes Go!"
    sent: "2017-05-29T17:27:35.149Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592c549900efc2bb3eb75a00"
    text: "not sure it is macOS related?"
    sent: "2017-05-29T17:04:25.426Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "592c5437fa63ba2f76900833"
    text: {@pekr Yes, I believe it was mentioned that 64-bit libraries don't work on macOS yet.}
    sent: "2017-05-29T17:02:47.876Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592c525a0a783b6c0ae79901"
    text: {I am not sure, but 64bit libraries are not supported by Red yet? Sorry if wrong ....}
    sent: "2017-05-29T16:54:50.787Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "592c4b08f3001cd3426d9577"
    text: {@Oldes Thank you very much for your ZMQ binding!  I just tried it on macOS, and it compiles nicely.  Regarding the comment in `ZeroMQ.reds`, `libzmq.dylib` is indeed the right file name.  The lib as installed by MacPorts is `/opt/local/lib/libzmq.dylib`, if you want to specify it directly.^/Unfortunately, loading the 64-bit library doesn't work on macOS when running the example:^/```^/dyld: Library not loaded: @loader_path/libzmq.dylib^/  Referenced from: /Users/Clemens/src/red-code/Library/ZeroMQ/./ZeroMQ-Hello-server^/  Reason: no suitable image found.  Did find:^/^-/Users/Clemens/src/red-code/Library/ZeroMQ/./libzmq.dylib: mach-o, but wrong architecture^/^-/Users/Clemens/src/red-code/Library/ZeroMQ/libzmq.dylib: mach-o, but wrong architecture^/Abort trap: 6^/```^/I'll try on Windows, but I don't have easy access.}
    sent: "2017-05-29T16:23:36.804Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592c48140a783b6c0ae76a73"
    text: {@qtxie Thanks for adding `command` to `event/flags`!  I'll try to implement keyboard shortcuts when I have time.}
    sent: "2017-05-29T16:11:00.561Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592c47e80ba4d59763f0b55d"
    text: {@qtxie Thanks for your help.  After a lot more testing (ain't easy, I thought the problem is somewhere else ;-)), I came up with this example on macOS:^/^/```^/>> call/shell/input/output/error "sleep 5 && cat >foo" "1234" %file.out %file.err^/== 0^/>> call/shell/input/output/error "sleep 5 && cat >foo" %foo %file.out %file.err^/== 51285^/```^/^/The second line returns immediately (as it should): all three arguments are files.^/The first line takes 5 seconds, but should return immediately: the first argument is a string.}
    sent: "2017-05-29T16:10:16.775Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592c2f49fcbbe1891c574767"
    text: {@Clemens-H You can find ZeroMQ binding for Red/System with simple working example as a part of this Red/Code pull request https://github.com/red/code/pull/41 (you don't need anything related to old Kaj's code)}
    sent: "2017-05-29T14:25:13.560Z"
    editedAt: "2017-05-29T14:25:50.775Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "592c2142fa63ba2f768f1919"
    text: {Thanks, geekyi.  I stumbled in here directly from the Red homepage.}
    sent: "2017-05-29T13:25:22.128Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592bf9d90a783b6c0ae600a4"
    text: {It's not installed as a font. It looks as though you need to download it.}
    sent: "2017-05-29T10:37:13.837Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "592bf99200efc2bb3eb5bb8d"
    text: "@PeterWAWood So that font is not part of macOS?"
    sent: "2017-05-29T10:36:02.666Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592bf965c4d73f445af4708e"
    text: {Actually not so difficult these days - https://developer.apple.com/fonts/}
    sent: "2017-05-29T10:35:17.486Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "592bf8e100efc2bb3eb5b9a3"
    text: "Sadly, it's a bit difficult to get a copy. :-("
    sent: "2017-05-29T10:33:05.459Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "592bf855cb83ba6a410ca0d8"
    text: {@dockimbel SF Mono is the system monospaced font used in the terminal and Xcode - https://en.wikipedia.org/wiki/San_Francisco_(sans-serif_typeface)}
    sent: "2017-05-29T10:30:45.034Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "592bf687eec422e415fc26f9"
    text: "@dockimbel IMO it's Menlo."
    sent: "2017-05-29T10:23:03.243Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592bf42e5e34568d5e9faef3"
    text: {I have a question for macOS users: what is the most commonly used monospace font on macOS? Courier New, Menlo or something else?}
    sent: "2017-05-29T10:13:02.915Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592bdf225e34568d5e9f5564"
    text: "@Clemens-H I can give a try to ZMQ binding."
    sent: "2017-05-29T08:43:14.207Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "592aca7beec422e415f812e8"
    text: {@Clemens-H I have added the `command` in `event/flags`.}
    sent: "2017-05-28T13:02:51.208Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "592ac2cd00efc2bb3eb179df"
    text: {But the file `%file.err` should not be created if no error.}
    sent: "2017-05-28T12:30:05.654Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "592ac279fa63ba2f768a3ae3"
    text: {I tried the following call, seems works fine.^/```text^/call/shell/input/output/error "cat" "1234abcd" %file.out %file.err^/```}
    sent: "2017-05-28T12:28:41.872Z"
    editedAt: "2017-05-28T12:28:59.443Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "592ac227fa63ba2f768a38cd"
    text: {@Clemens-H For the meaning of the `/shell` refinement, I think @geekyi  is correct. If you don't use `/wait`, it will be run in background. }
    sent: "2017-05-28T12:27:19.947Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "592aa1eefa63ba2f7689c8fa"
    text: {@Clemens-H [list of rooms](https://github.com/red/red/wiki/Gitter-Room-Index), [/help](https://gitter.im/red/help) (and https://gitter.im/red/red/welcome) is particularly suited for questions, so we don't clutter the discussion here. Also [red/system](https://gitter.im/red/red/system) for `.reds`}
    sent: "2017-05-28T10:09:50.427Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592a9d42fa63ba2f7689bb31"
    text: "@Clemens-H Yes, please. :smile: "
    sent: "2017-05-28T09:49:54.023Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "592a9cb50a783b6c0ae149d9"
    text: {@Clemens-H unfortunately, Kaj has been absent for some time now :/}
    sent: "2017-05-28T09:47:33.286Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "592a9c74eec422e415f762c9"
    text: "I see, thanks doc (I forgot, sorry)"
    sent: "2017-05-28T09:46:28.566Z"
    editedAt: "2017-05-28T09:48:08.156Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "592a9bbf0ba4d59763eac8f3"
    text: {@Kaj-de-Vos Hi Kaj, are you here? I'd like to compile the ZMQ binding.}
    sent: "2017-05-28T09:43:27.602Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592a9b6a631b8e4e611e28b1"
    text: {@qtxie @greggirwin I also had a look and `probe`d the `event/flags`.  I don't think it's possible to detect the command key (which would be nice on macOS). I guess I'll open a ticket then as suggested.}
    sent: "2017-05-28T09:42:02.562Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592a9ac55e34568d5e9af2ab"
    text: {Re. `call` and the `/shell` refinement: I tested it a bit more and it works as expected if all three arguments `/input`, `/output`, and `/error` are files. If `/input` is a string, it doesn't work.  I am not sure if this is expected behavior or not; maybe it should be documented.}
    sent: "2017-05-28T09:39:17.188Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592a97742b926f8a679db0aa"
    text: {@geekyi `/shell` is for all platforms. It will run your command from a shell environment. The specific feature on Windows is if a command fails to run, a second attempt is made enforcing the `/shell` option.}
    sent: "2017-05-28T09:25:08.586Z"
    editedAt: "2017-05-28T09:25:51.838Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592a8a0e5e34568d5e9abcc3"
    text: {> I understand the `/shell` refinement to act like & in a shell, right? ^/^/I don't think so, it simply uses the default *shell* instead of using the operating system native *call* function to run the command}
    sent: "2017-05-28T08:27:58.794Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592a8736f3001cd342672321"
    text: {I may have been wrong, it may have changed, or @dockimbel was referring to a special case: https://github.com/red/red/issues/2475#issuecomment-285916606 is my reference}
    sent: "2017-05-28T08:15:50.027Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592a842dc4d73f445aef6b67"
    text: {@Clemens-H last I checked, `/shell` was windows only, because unix had better tools like bash and ncurses}
    sent: "2017-05-28T08:02:53.025Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592a6815fcbbe1891c50e022"
    text: "@qtxie ^^----"
    sent: "2017-05-28T06:03:01.123Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5929fe0efa63ba2f7687e04a"
    text: {Another question.  I'd like to run a program (on macOS) in the background (no waiting, like & in a shell) and supply the stdin as a string and redirect stdout and stderr into files.^/`call/shell/input/output/error "program" "arg1" %file.out %file.err`^/I understand the `/shell` refinement to act like & in a shell, right?  The `/shell` refinement seems to be ignored, however.}
    sent: "2017-05-27T22:30:38.797Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5929fcafc4d73f445aedf043"
    text: {Yes, thanks.  Is there also a flag for the command key?}
    sent: "2017-05-27T22:24:47.982Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5929fbd32b926f8a679beaa4"
    text: {@Clemens-H You can use `event/flags` to detect `control` and `shift` key.}
    sent: "2017-05-27T22:21:07.119Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5929c810cb83ba6a4105738f"
    text: {Use of the Windows key isn't as common as the Command key on Mac, hence none of us in the Windows world have noticed.}
    sent: "2017-05-27T18:40:16.807Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5929c7a40ba4d59763e8575a"
    text: {Worth a ticket. I don't see any handler for the windows/command key in the event type.}
    sent: "2017-05-27T18:38:28.791Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5929c676631b8e4e611bb548"
    text: {@qtxie @greggirwin Thanks, I tried the `on-key:` stuff.  The function keys work.  I don't think `event/ctrl?` works, and the command key is not recognized.}
    sent: "2017-05-27T18:33:26.430Z"
    editedAt: "2017-05-27T18:33:58.902Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5929bd33fa63ba2f76870938"
    text: {@Clemens-H, does this approach work? I haven't tried on OSX: https://gist.github.com/greggirwin/f3ba394221b2c55c21a420400f0e11de}
    sent: "2017-05-27T17:53:55.184Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5929bc1000efc2bb3eae4569"
    text: {@qtxie Is it possible to define keyboard shortcuts for menu items on macOS?}
    sent: "2017-05-27T17:49:04.403Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5929ba37c4d73f445aed191c"
    text: {@qtxie Interestingly, the font rendering when started as an app is much worse than when started from the terminal.}
    sent: "2017-05-27T17:41:11.077Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5929ba120ba4d59763e82cc6"
    text: {@qtxie I created a macOS app with a Red binary inside and the menus works flowlessly when I start it by double clicking.}
    sent: "2017-05-27T17:40:34.304Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5929ac2400efc2bb3eae0d73"
    text: {Object output from `help` now pads the first col based on the longest word in the object. `What` doesn't do that, though it could. One issue is that, in the global context (where `what` looks) a single, long word will push everything out to the right. Do we then have a max limit we still impose? Another option is to truncate long words, like we do with values in the last column. The catch there is that `help` uses `what` for partial word matches, so then there's no good way to see the full name in help output.}
    sent: "2017-05-27T16:41:08.608Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59299c1b631b8e4e611b233b"
    text: "Thanks, I did miss it.  `rejoin`."
    sent: "2017-05-27T15:32:43.545Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59299971fa63ba2f768689b7"
    text: {> what is the idiomatic way to concatenate strings?^/^/@Clemens-H, @iArnold slipped it in there, but looks like it was missed . `Rejoin` is what you want. If you want spaces between elements, use `form reduce` on the block of values.}
    sent: "2017-05-27T15:21:21.978Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5929967d2b926f8a679a8547"
    text: {@qtxie The progress bar works nicely now.  There is only the small glitch that menus work only after defocusing/focusing again.  Here is my (simplified) menu code:^/```^/m: layout [^/    ...]^/^/m/menu: [^/    "File" [^/        "Choose data directory" menu-choose^/        ---^/        "Quit" menu-quit]]^/^/m/actors: make object! [^/    on-menu: func [face [object!] event [event!]] [^/        if event/picked = 'menu-quit   [unview/all]]]^/^/view m^/```}
    sent: "2017-05-27T15:08:45.080Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59299560f3001cd3426448b8"
    text: "@Clemens-H Thanks. I'll have a look at them."
    sent: "2017-05-27T15:04:00.402Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "592990e62b926f8a679a71dd"
    text: {It seems as if these lines in `common.reds` should be simplified to remove the workaround.  But how?^/^/```^/#define variant!^-^-^-^-integer!^/#define opaque!^-^-^-^-^-[struct! [dummy [variant!]]]^/handle!:^-^-^-^-^-^-alias opaque!^/#define as-handle^-^-^-^-[as handle! ]^/#define binary!^-^-^-^-^-[pointer! [byte!]]^/#define as-binary^-^-^-^-[as binary! ]^/^/handle-reference!:^-^-^-^-alias struct! [value [handle!]]^/binary-reference!:^-^-^-^-alias struct! [value [binary!]]^/string-reference!:^-^-^-^-alias struct! [value [c-string!]]^/```}
    sent: "2017-05-27T14:44:54.068Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59298b89eec422e415f41f22"
    text: "Beautiful! `do-events/no-wait` does the trick."
    sent: "2017-05-27T14:22:01.484Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59298adfc4d73f445aec6dab"
    text: {Red is still single-threaded, if your `long_running_function` does not sometimes give control back to the event loop, it won't update the UI. You can workaround it by calling `do-events/no-wait` from time to time in long running functions, so that the queued events have a chance to be processed.}
    sent: "2017-05-27T14:19:11.202Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59298a9800efc2bb3ead9592"
    text: {Thanks.  What does it take to remove this workaround?}
    sent: "2017-05-27T14:18:00.192Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592989bfc4d73f445aec69fb"
    text: {Thanks for the example with the progress bar.  It works nicely on macOS.  It still doesn't quite do what I want it to do in my program:^/`button "Run" [obj/pro: obj/pro + 10%   long_running_function   obj/pro: obj/pro + 10%]`^/It jumps by 20% and not in between...}
    sent: "2017-05-27T14:14:23.437Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59298796f3001cd342641ef6"
    text: {The definition of `handle!` from the Red runtime library might clash with the old definition used by Kaj. Also, at that time, you could not pass an integer by reference, so he had to rely on dummy structs to emulate it. Such workarounds could be removed now.}
    sent: "2017-05-27T14:05:10.194Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5929855e5e34568d5e979756"
    text: {Thanks!  Hm, the next error:^/^/```^/Compiling to native code...^/*** Compilation Error: argument type mismatch on calling: zmq/set ^/*** expected: [struct! [dummy [integer!]]], found: [pointer! [integer!]] ^/*** in file: %RS-fossil-mirror/ZeroMQ-binding/examples/0MQ-reply-server.red ^/*** in function: exec/set-integer^/*** at line: 17 ^/*** near: []^/```^/^/This is the definition of `set-integer`:^/^/```^/set-integer: routine ["Set integer socket option."^/^-socket^-^-^-[integer!]  "socket!"^/^-name^-^-^-[integer!]  "socket-option!"^/^-value^-^-^-[integer!]^/^-return:^-^-^-[logic!]^/][^/^-with zmq [set as socket! socket  name  as-handle :value  4]^/]^/```^/^/The definition of `set`:^/^/```^/^-set: function ["Set socket option."^/^-^-socket^-^-[socket!]^/^-^-name^-^-[socket-option!]^/^-^-value^-^-[handle!]^/^-^-size^-^-[size!]^/^-^-return:^-^-[logic!]^/^-][^/^-^-not as-logic _set socket name value size^/^-]^/```^/^/The definition of `_set`:^/^/```^/^-^-_set: "zmq_setsockopt" [^-^-^-^-"Set socket option."^/^-^-^-socket^-^-[socket!]^/^-^-^-name^-^-[socket-option!]^/^-^-^-value^-^-[handle!]^/^-^-^-size^-^-[size!]^/^-^-^-return: ^-[status!]^/^-^-]^/```}
    sent: "2017-05-27T13:55:42.614Z"
    editedAt: "2017-05-27T13:57:51.412Z"
    v: 3
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5929840fc4d73f445aec57b7"
    text: {Moreover, the high-level FFI in Red will improve it also, by avoiding to drop to Red/System (and so requiring compilation) for most FFI needs.}
    sent: "2017-05-27T13:50:07.235Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592983b600efc2bb3ead8010"
    text: {Some Red scripts using Red/System code which rely on macros defined in the Red runtime, can currently only be compiled in release mode. Such restriction will be gone once we reach 0.8.0 and get modular compilation support.}
    sent: "2017-05-27T13:48:38.408Z"
    editedAt: "2017-05-27T13:49:01.248Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5929833ecb83ba6a410488a3"
    text: {No, I did not compile in release mode.  The `-r` seems to do the trick, at least regarding this problem.  It also knows `RETURN_NONE` now.  Thanks!}
    sent: "2017-05-27T13:46:38.767Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592982590a783b6c0addda2e"
    text: {@Clemens-H Are you compiling in release mode? If not try it, and have a look at the compilation modes introduced in 0.6.2 in the last blog article on http://red-lang.org. }
    sent: "2017-05-27T13:42:49.952Z"
    editedAt: "2017-05-27T13:43:14.859Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59298211f3001cd34264084c"
    text: {In case you haven't seen it, there's a [reference doc](https://doc.red-lang.org/en/reactivity.html) about our reactive model.}
    sent: "2017-05-27T13:41:37.246Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592981f1cb83ba6a41048481"
    text: {It's curious, `SET_RETURN` is used a lot, but I cannot find its definition.  It was expanded into something like `stack/set-last as cell!`, apparently, and then the compiler complains that it doesn't know `red/stack/set-last`.}
    sent: "2017-05-27T13:41:05.016Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592981c5631b8e4e611acc95"
    text: {@Clemens-H About `react [face/data: pro]`, it won't generate any event, as the source needs to be a path (referring to a field of a `reactor` object), not a word. Faces are reactors. If you really need to react on changes in `pro`, you can wrap it in a reactor:^/```lisp^/obj: make reactor! [pro: 0%]^/^/view [^/^-progress data 0% 470x20 react [face/data: obj/pro]^/^-button "+1" [probe obj/pro: obj/pro + 1%]^/]^/```}
    sent: "2017-05-27T13:40:21.987Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592980c6c4d73f445aec4a60"
    text: {@qtxie There is small glitch on macOS.  When I put a menu into the app, the menu bar only works after defocusing the Red program first and then focusing it again.}
    sent: "2017-05-27T13:36:06.194Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59298050c4d73f445aec48cd"
    text: {@Clemens-H Be sure to mention @qtxie in your posts about macOS GUI issues, he's the developer of the macOS backend, and very interested in any issue report on Mac. ;-)}
    sent: "2017-05-27T13:34:08.723Z"
    editedAt: "2017-05-27T13:34:23.641Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59297e47c4d73f445aec4383"
    text: {@qtxie^/Regarding progess bars: I was missing `show`.  But I think the macOS version is not fully functioning, yet.  I tried this Rebol example on macOS, and it doesn't work.  Anyway, thanks for the nice work!^/http://www.rebol.net/cookbook/recipes/0039.html}
    sent: "2017-05-27T13:25:27.180Z"
    editedAt: "2017-05-27T13:35:10.859Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59297945631b8e4e611ab233"
    text: {Coming back to 0MQ, I put the line `#define RETURN_NONE [none/push-last]` strategically into a reds file, which seems to take care of this error. The next error is:^/^/```^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/stack/set-last ^/*** in file: %RS-fossil-mirror/common/common.red ^/*** in function: exec/take-argument^/*** at line: 332 ^/*** near: [stack/set-last as cell! (string/load argument (length? argument) + 1 UTF-8)]^/```^/^/apparently in the definition^/^/```^/take-argument: routine ["Consume and return next program argument."^/;^-return:^-^-^-[string! none!]  "Argument, or NONE"^/^-/local^-^-^-argument^/][^/^-argument: system/words/take-argument^/^/^-either none? argument [^/^-^-RETURN_NONE^/^-][^/^-^-SET_RETURN ((string/load argument  (length? argument) + 1  UTF-8))^/;^-^-end-argument argument^/^-]^/]^/```}
    sent: "2017-05-27T13:04:05.503Z"
    editedAt: "2017-05-27T13:04:58.757Z"
    v: 3
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5929770ecb83ba6a410465fc"
    text: "Thanks for the hint about `?`, very useful."
    sent: "2017-05-27T12:54:38.537Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592976befa63ba2f76861572"
    text: "Sorry, I leave it to those fluent in `view`."
    sent: "2017-05-27T12:53:18.101Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5929766800efc2bb3ead531f"
    text: {I also have a question about progress bars.  I found a progress bar example, where it is coupled to a slider by `react`.  Let's say I have a button that runs a function and I have a progress bar that should react to a change in a variable.^/`progress data 0% 470x20 react [face/data: pro]`^/Of course that doesn't work: `pro: 50%`.  How can I update the progress bar?}
    sent: "2017-05-27T12:51:52.702Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592975f300efc2bb3ead519e"
    text: {You can use the `?` with partial keywords to find what other interesting things there might be:^/```^/>> ? fun^/     any-function!   typeset!     | [native! action! op! function! routine!]^/     any-function?   function!    | Returns true if the value is any type of any-function^/     func            native!      | Defines a function with a given spec and body^/     function        native!      | Defines a function, making all set-words found in body, local^/     function!       datatype!    | function!^/     function?       function!    | Returns true if the value is this type^/     insert-event-func function!    | Add a function to monitor global events. Return the function^/     parse-func-spec function!    | Parses a function spec and returns an object model of it.^/     remove-event-func function!    | Remove an event function previously added^/```}
    sent: "2017-05-27T12:49:55.874Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5929757b0a783b6c0addb53a"
    text: {Ok, thanks.  I am mostly trying to make sure this looks like reasonable code.  `function` was what I was looking for, not so much `func`.}
    sent: "2017-05-27T12:47:55.687Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592974f55e34568d5e97656c"
    text: {With your new `concat` this does work:^/```^/>> d: "def" concat ["abc" (d) "ghi"]^/== "abcdefghi"^/```}
    sent: "2017-05-27T12:45:41.016Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "592972612b926f8a679a0c11"
    text: "Ok? I mean, what are args and what is the result?"
    sent: "2017-05-27T12:34:41.141Z"
    editedAt: "2017-05-27T12:36:39.115Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5929715beec422e415f3cc32"
    text: {Next try:^/^/```^/concat: function [args [block!]] [^/    result: copy ""^/    foreach s compose args [^/        result: append result s]^/    result]^/```}
    sent: "2017-05-27T12:30:19.073Z"
    editedAt: "2017-05-27T12:31:06.495Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
)#(
    id: "59296ff2f3001cd34263cbd8"
    text: {There is also a function by @greggirwin :point_up: [May 25, 2017 10:15 PM](https://gitter.im/red/red/welcome?at=59272d3ceec422e415ebbaf1)}
    sent: "2017-05-27T12:24:18.740Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59296f91fa63ba2f7685fd1b"
    text: "I see, `compose`."
    sent: "2017-05-27T12:22:41.754Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59296f50fcbbe1891c4dd825"
    text: {There is small glitch on macOS.  When I put a menu into the app, the menu bar only works after defocusing the Red program first and then focusing it again.}
    sent: "2017-05-27T12:21:36.817Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59296f3ef3001cd34263ca21"
    text: {And if you insist on using concat:^/```^/concat compose ["foo" (bar) "baz"]^/```^/}
    sent: "2017-05-27T12:21:18.186Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59296e850a783b6c0adda1f7"
    text: "rejoin"
    sent: "2017-05-27T12:18:13.867Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59296e10fa63ba2f7685f890"
    text: {Now I have another problem: `concat ["foo" bar "baz"]` yields `"foobarbaz"` and does not use the string value of the variable/word `bar` as I intended.  I am still trying to wrap my head about the evaluation model.  How do I create a series of strings (to pass as the argument)?  Can I define functions that take an arbitrary number of arguments?}
    sent: "2017-05-27T12:16:16.011Z"
    editedAt: "2017-05-27T12:18:57.059Z"
    v: 3
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59296dd50a783b6c0add9fd4"
    text: {```^/>> ? function^/USAGE:^/     FUNCTION spec body^/^/DESCRIPTION: ^/     Defines a function, making all set-words found in body, local ^/```}
    sent: "2017-05-27T12:15:17.742Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59296d61cb83ba6a4104474e"
    text: "Yes, `function` makes all set-words local"
    sent: "2017-05-27T12:13:21.417Z"
    editedAt: "2017-05-27T12:15:56.519Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59296d462b926f8a6799fbe6"
    text: {Thanks!  So with `function` I don't need the `/local`?}
    sent: "2017-05-27T12:12:54.761Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59296d00eec422e415f3bf1c"
    text: {To make result local^/```^/concat: func [strings /local result] [^/```^/Or use `concat: function ...`}
    sent: "2017-05-27T12:11:44.522Z"
    editedAt: "2017-05-27T12:12:17.137Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59296cc9c4d73f445aec0edd"
    text: {Just to make sure: `result` is undefined outside the scope of `func`, right?}
    sent: "2017-05-27T12:10:49.353Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59296c9bf3001cd34263c463"
    text: {I think this works.^/^/```^/concat: func [strings] [^/    result: copy ""^/    foreach s strings [^/        result: append result s]^/    result]^/```}
    sent: "2017-05-27T12:10:03.866Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59296c945e34568d5e974a29"
    text: ":)"
    sent: "2017-05-27T12:09:56.493Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59296c4dc4d73f445aec0ddc"
    text: {Thanks, got it.  (At least I hope so for now.  ;-))}
    sent: "2017-05-27T12:08:45.280Z"
    editedAt: "2017-05-27T12:09:00.839Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59296c20c4d73f445aec0d38"
    text: {That is because without copying `f` you append `b` to to the very `f` itself, but with copying it, to the new string `foo`. ^/```^/>> f: "foo"^/== "foo"^/>> b: "bar"^/== "bar"^/>> c: append f b^/== "foobar"^/>> f^/== "foobar"^/```}
    sent: "2017-05-27T12:08:00.451Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59296ae5fcbbe1891c4dcbbe"
    text: {But^/```^/>> c: append f b^/== "foobar"^/>> take f^/== #"f"^/>> c^/== "oobar"^/```}
    sent: "2017-05-27T12:02:45.247Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59296a430ba4d59763e728c3"
    text: {```^/>> take b^/== #"b"^/>> c^/== "foobar"^/>> b^/== "ar"^/```}
    sent: "2017-05-27T12:00:03.137Z"
    editedAt: "2017-05-27T12:00:57.477Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "592969df0ba4d59763e7274f"
    text: {I see.  Is `append "foo" variable` safe?^/Apparently not.}
    sent: "2017-05-27T11:58:23.547Z"
    editedAt: "2017-05-27T11:59:59.541Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59296950c4d73f445aec04b0"
    text: {@Clemens-H But if you `append` words which evaluate to series, then you have to copy them:^/```^/>> f: "foo"^/== "foo"^/>> b: "bar"^/== "bar"^/>> c: append copy f b^/== "foobar"^/```^/Otherwise changes to `f` will affect `c` too.}
    sent: "2017-05-27T11:56:00.175Z"
    editedAt: "2017-05-27T11:57:02.698Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "592968720ba4d59763e7233b"
    text: "Ok, thanks."
    sent: "2017-05-27T11:52:18.556Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592968535e34568d5e973d2b"
    text: {@Clemens-H Why not ^/```^/append "foo" "bar"^/```}
    sent: "2017-05-27T11:51:47.969Z"
    editedAt: "2017-05-27T11:51:52.558Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59296799f3001cd34263b5f8"
    text: {Another noob question: what is the idiomatic way to concatenate strings? I came up with `(append (append (copy "") "foo") "bar")` so far, or rather `append append copy "" "foo" "bar"`.}
    sent: "2017-05-27T11:48:41.305Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59296742fcbbe1891c4dbde5"
    text: ":+1: "
    sent: "2017-05-27T11:47:14.951Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59296739fa63ba2f7685e36c"
    text: "Nice, thanks! This file compiles now."
    sent: "2017-05-27T11:47:05.872Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592966572b926f8a6799e36e"
    text: {`RETURN_NONE` looks like a macro, which is not defined anymore. You can add it back with:^/`#define RETURN_NONE [none/push-last]`}
    sent: "2017-05-27T11:43:19.579Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59296555fcbbe1891c4db7e3"
    text: {I tried to compile `0MQ-reply-server.red`.  I get the error^/^/```^/*** Compilation Error: undefined symbol: RETURN_NONE ^/*** in file: %RS-fossil-mirror/common/common.red ^/*** in function: exec/take-argument^/*** at line: 332 ^/*** near: [^/    RETURN_NONE^/]^/```^/^/I think the line number is wrong.  `exec/take-argument` probably refers to^/^/```^/take-argument: routine ["Consume and return next program argument."^/;       return:                 [string! none!]  "Argument, or NONE"^/        /local                  argument^/][^/        argument: system/words/take-argument^/^/        either none? argument [^/                RETURN_NONE^/        ][^/                SET_RETURN ((string/load argument  (length? argument) + 1  UTF-8))^/;               end-argument argument^/        ]^/]^/```^/^/ I replaced `RETURN_NONE` by `return none` and I removed the comment character before `return:`. Now it says:^/^/```^/*** Compilation Error: invalid definition for function exec/take-argument: [^/    return: [red/red-string! none!] "Argument, or NONE" ^/    /local argument^/] ^/```}
    sent: "2017-05-27T11:39:01.530Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5929638bf3001cd34263a6b9"
    text: {@Clemens-H it's hard to say without looking at the code.You can try to compile it and see where the problems are. }
    sent: "2017-05-27T11:31:23.466Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592957bf00efc2bb3eacf511"
    text: {How much work would it be to get a 0MQ interface working?  Maybe Kai's code only needs a few updates?}
    sent: "2017-05-27T10:41:03.368Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59294ec1631b8e4e611a2e67"
    text: {@greggirwin re `help`system. I noticed there is an extra empty line after the output, whereas there is no empty line at the beginning of the output. I would probably reverse those two, maybe it would be nicer, but surely that's just subjective ...}
    sent: "2017-05-27T10:02:41.052Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5928b0da631b8e4e61185eef"
    text: {If it's Kaj's 0MQ stuff, it's probably out of date at this point. When we get FFI at the Red level, maybe I'll look at porting mine from Rebol to Red.}
    sent: "2017-05-26T22:48:58.729Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5928a204c4d73f445ae9a6a4"
    text: "Thanks!"
    sent: "2017-05-26T21:45:40.561Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5928a0ce00efc2bb3eaacf6e"
    text: {Yes you can use `make string!` as well. `make string! 10` allocates memory for later use. For example `s: make string! 1000 loop 1000 [append s "x"] ` works faster than `s: copy "" loop 1000 [append s "x"] `. But for small series / strings the difference is not big.}
    sent: "2017-05-26T21:40:30.348Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59289d4b2b926f8a6797858b"
    text: {What does the `10` in `make string! 10` mean?^/Can I use `make string!` instead of `copy ""`?}
    sent: "2017-05-26T21:25:31.507Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59286914c4d73f445ae8a9cf"
    text: "Nice, I'll make sure to read it!"
    sent: "2017-05-26T17:42:44.456Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5928687f5e34568d5e94042a"
    text: {When you want to know more about `copy`: https://github.com/red/red/wiki/Why-do-I-have-to-copy-series-values%3F^/No need to dive into that right now though.}
    sent: "2017-05-26T17:40:15.252Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5928671ccb83ba6a4100c817"
    text: {Also, inline code is marked with single backticks. Just FYI.}
    sent: "2017-05-26T17:34:20.706Z"
    editedAt: "2017-05-26T17:34:44.515Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592866dc00efc2bb3ea9cdcc"
    text: {Thanks, just started to read the Rebol documentation...}
    sent: "2017-05-26T17:33:16.621Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592866a4eec422e415f0605f"
    text: {You should use `copy`. Copying series values or, rather, forgetting to, is a rite of passage in Red. We can go into details on it later though.}
    sent: "2017-05-26T17:32:20.092Z"
    editedAt: "2017-05-26T17:33:55.831Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592865f62b926f8a67969655"
    text: {When I define a variable to hold the output, do I have to say `copy ""` or is `""` enough?^/```^/julia_out: copy ""^/julia_err: copy ""^/```}
    sent: "2017-05-26T17:29:26.810Z"
    editedAt: "2017-05-26T17:35:11.605Z"
    v: 3
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5928637e5e34568d5e93f289"
    text: {Great.  Thanks a lot.  I am trying it right now...}
    sent: "2017-05-26T17:18:54.718Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5928633bcb83ba6a4100b972"
    text: {You can use a lot of Rebol reference docs in the meantime: http://www.rebol.com/r3/docs/datatypes.html}
    sent: "2017-05-26T17:17:47.820Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59286307fa63ba2f76827e73"
    text: {Yes. `Binary!` is a byte-oriented series datatype. Strings will load as UTF-8 by default, but binary values are treated as raw data. You can see a list of all available types in Red with `help datatype!`, though we don't have reflective help built in (yet) to give you details. }
    sent: "2017-05-26T17:16:55.130Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59286249fcbbe1891c4a51c3"
    text: {Great!^/^/So I need to use the /input and /output arguments, right?^/What is BINARY! ?^/^/```^/     /input       => ^/        in           [string! file! binary!] "Redirects in to stdin"^/     /output      => ^/        out          [string! file! binary!] "Redirects stdout to out"^/     /error       => ^/        err          [string! file! binary!] "Redirects stderr to err"^/```^/^/Can I just READ and WRITE from/to the INPUT and OUTPUT arguments?}
    sent: "2017-05-26T17:13:45.181Z"
    editedAt: "2017-05-26T17:18:33.058Z"
    v: 4
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5928622a631b8e4e611715b3"
    text: {You should be able to. `help call` will show you the various options. Try it and come back if you hit a snag.}
    sent: "2017-05-26T17:13:14.577Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5928620a631b8e4e6117152f"
    text: {I want to run a Julia function from Red and read the output back (as a STRING! is good enough for now).}
    sent: "2017-05-26T17:12:42.713Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592861cbfcbbe1891c4a4fa4"
    text: {Likely. The team adapts as requirements and goals shift. ^/^/Knowing you want to use Julia (we have some other folks around who know it), what is your goal, or use case? We like to hear what people want and need.}
    sent: "2017-05-26T17:11:39.404Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592861b9cb83ba6a4100b373"
    text: {Another question: can I use CALL to read from and write to stdin/stdout of the external program?}
    sent: "2017-05-26T17:11:21.275Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5928618af3001cd342604697"
    text: {That will be version 0.9.5, if I understand correctly.}
    sent: "2017-05-26T17:10:34.262Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592860da0a783b6c0ada2ec4"
    text: {Glad to help. You can see the roadmap here: https://trello.com/b/FlQ6pzdB/red-tasks-overview}
    sent: "2017-05-26T17:07:38.816Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592860a6eec422e415f049a3"
    text: {Also thanks for the editing help.  So I guess I'll have to wait until Red is self-hosted.  (Any estimate?)}
    sent: "2017-05-26T17:06:46.095Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
)#(
    id: "592860730a783b6c0ada2d36"
    text: "It's most likely a 64-bit library."
    sent: "2017-05-26T17:05:55.166Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5928602ec4d73f445ae88542"
    text: {And you can use the ... to the right of the message to edit prior messages, or up-arrow to edit your most recent.}
    sent: "2017-05-26T17:04:46.289Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5928600e631b8e4e61170d5c"
    text: {Use 3 backticks on their own line for code. Gets us all.}
    sent: "2017-05-26T17:04:14.219Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59285ffb00efc2bb3ea9b010"
    text: {Is it a 64-bit lib? Red is currently 32-bit only, until it is self-hosted.}
    sent: "2017-05-26T17:03:55.138Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59285f9ffcbbe1891c4a48c7"
    text: {Great.  I have a library libjulia.dylib and I am trying to run a C function void jl_init(void).  This is what I tried:^/^/```^/#system [^/    #import [^/        "/Users/Clemens/src/julia-0.6/usr/lib/libjulia.dylib" cdecl [^/            jl_init: "jl_init" []]]]^/^/#system [jl_init]^/```^/^/But dyld complains:^/^/dyld: Library not loaded: /Users/Clemens/src/julia-0.6/usr/lib/julia/sys.o^/  Referenced from: /Users/Clemens/foo^/  Reason: no suitable image found.  Did find:^/^-/Users/Clemens/src/julia-0.6/usr/lib/julia/sys.o: mach-o, but wrong architecture^/^-/Users/Clemens/src/julia-0.6/usr/lib/julia/sys.o: mach-o, but wrong architecture^/Abort trap: 6^/}
    sent: "2017-05-26T17:02:23.972Z"
    editedAt: "2017-05-26T17:05:11.374Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59285ed60a783b6c0ada26ce"
    text: "Yes."
    sent: "2017-05-26T16:59:02.401Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59285b41cb83ba6a41009449"
    text: {Hi! I've had a close look at Red recently and I think it's awesome! I do have a question about using a shared library on macOS. Is this the right place to ask?}
    sent: "2017-05-26T16:43:45.227Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5926fefa00efc2bb3ea430d0"
    text: {@meijeru For now, a word always have a context, though in some cases, it can refer to a context which is not accessible anymore, which will trigger an error when trying to access the referred value. I started with "for now", as this might change when we add modules.}
    sent: "2017-05-25T15:57:46.903Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5926f58d9f4f4ab05bfdcf39"
    text: {For my instruction: can it happen that a word has no context? There is an error value for this, but can anyone give me an example that would raise this error?}
    sent: "2017-05-25T15:17:33.485Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5926cbddfa63ba2f767be382"
    text: {OK then the wish is fulfilled and the issue can be closed.}
    sent: "2017-05-25T12:19:41.411Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5926bea55e34568d5e8d2b8a"
    text: {@meijeru What you ask for is already the case, you're just been fooled by the console's output.}
    sent: "2017-05-25T11:23:17.002Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5926badbc4d73f445ae1b4c3"
    text: "(And R2 as well)"
    sent: "2017-05-25T11:07:07.217Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5926b7f6631b8e4e61101d2a"
    text: {I have a "wish" issue outstanding to have `:a`, where `a` is an error value, be evaluated to the error itself without it being raised  (#2621). That is by analogy with the treatment  of unset, and also provided for "disarming" the  error, for which R3 had a `disarm` function.}
    sent: "2017-05-25T10:54:46.617Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5926b6fdfcbbe1891c435e29"
    text: {Studying `get` and `get-word!/get-path!` now. The difference between `:a` and `get 'a` lies in the fact that the unset value gives an error with `get 'a` and not with `:a`, although with a function value they both prevent function application, yielding the function value as result itself. That is a subtle difference to be kept in mind! }
    sent: "2017-05-25T10:50:37.150Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5926b623631b8e4e611015f0"
    text: {I said "about". The values of types involved in OS interaction can also not be made,  except by having them returned from  OS calls. Mind you, routines can be made, only not by `make`...}
    sent: "2017-05-25T10:46:59.894Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5926aed4fa63ba2f767b62d7"
    text: {@meijeru is it really only type? Is there `make handle!`?}
    sent: "2017-05-25T10:15:48.411Z"
    editedAt: "2017-05-25T10:15:56.818Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592681409f4f4ab05bfbecdf"
    text: {I will nevertheless -- in the interest of consistency -- make an issue, so that we don't forget. Right now, `routine!` is about the only type for which `make`is not defined...}
    sent: "2017-05-25T07:01:20.673Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59264763c4d73f445adff35a"
    text: {@meijeru I thought you were talking about interpreted code... Yes, `make routine!` can be supported by the compiler, and that also has the lowest priority I can think of. ;-)}
    sent: "2017-05-25T02:54:27.707Z"
    editedAt: "2017-05-25T02:56:37.077Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592639a8f3001cd342577444"
    text: {:point_up: [May 23, 2017 10:32 AM](https://gitter.im/red/red?at=5924641a631b8e4e6105cb2a) @JacobGood1, that's a fun read. Thanks for linking to it.}
    sent: "2017-05-25T01:55:51.989Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59261957631b8e4e610dd5e9"
    text: "@toomasv and @meijeru, nice tables!"
    sent: "2017-05-24T23:37:59.392Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592618a5c4d73f445adf59b5"
    text: {@maximvl ^/^/> check if one series contains another in beginning^/^/`find/match`^/^/> I just think that most use cases to use R/S would be to make program faster^/^/Greenspun's 10th Law. As a CL guy, you should know that. ;^^)^/}
    sent: "2017-05-24T23:35:01.409Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5925e91d05e3326c6706e07e"
    text: {But it need not return an error in case of compilation. I suppose `make function!` is also compiled without any problem!}
    sent: "2017-05-24T20:12:13.487Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5925e6140a783b6c0ad02ea3"
    text: {@meijeru Having `make routine!` return an error in all cases would be very odd, promising something to the user it cannot deliver.}
    sent: "2017-05-24T19:59:16.780Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5925d80c9f4f4ab05bf92c2e"
    text: "It's my preoccupation wth consistency."
    sent: "2017-05-24T18:59:24.798Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5925d80000efc2bb3e9f2b30"
    text: {The same as `routine` does now, but it's more orthogonal... Like `func` is essentially `make function!`, but one can still use `make function!` itself.}
    sent: "2017-05-24T18:59:12.797Z"
    editedAt: "2017-05-24T18:59:40.620Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5925341605e3326c6703157d"
    text: {@meijeru I'm not sure to understand where you want to go, what would `make routine!` do?}
    sent: "2017-05-24T07:19:50.375Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592525ddfcbbe1891c3c2859"
    text: {I noticed that `make routine!` is forbidden, and that a `routine!` value can only be "made" by invoking `routine` which is treated by the compiler, but not by the interpreter: there the function `routine` is used which is defined in `%environment/functions.red` and which does nothing but raising an error. This seems a roundabout way of achieving the goal: preventing a routine to be defined and used in the interpreter. After all, there is `system/state/interpreted?` to check if one is in the interpreter. Thus, `make routine!` could be implemented with that check.}
    sent: "2017-05-24T06:19:09.801Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5924a2659f4f4ab05bf3ce84"
    text: {Also, [Parallel_programming_model](https://en.wikipedia.org/wiki/Parallel_programming_model) explains in detail what I have talked about.^/Talking of declarative, [Dataflow_programming](https://en.wikipedia.org/wiki/Dataflow_programming) is actually more relevant.. because reactive programming is a subset of it, red and all competitors more or less use it (elm, eve, react js/native)}
    sent: "2017-05-23T20:58:13.554Z"
    editedAt: "2017-05-23T21:04:20.410Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5924a19b00efc2bb3e99bb4a"
    text: {It's a bit old classification now, we kinda have hybrids (cpu and gpu on the same die, etc. (Heterogenous architecture from amd??)). But the model still holds fundamentally}
    sent: "2017-05-23T20:54:51.332Z"
    editedAt: "2017-05-23T20:56:19.278Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5924a14cfa63ba2f76722a9d"
    text: {GPU is mostly *SIMD* and possibly(?) *MIMD* . Normal cpu is usually the rest of it, but also has limited support for *SIMD*}
    sent: "2017-05-23T20:53:32.149Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5924a0caf3001cd342502a6b"
    text: "What I mean by the different models / categories"
    sent: "2017-05-23T20:51:22.236Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5924a0b6c4d73f445ad8999b"
    text: {https://en.wikipedia.org/wiki/Flynn%27s_taxonomy (see the diagram)}
    sent: "2017-05-23T20:51:02.949Z"
    editedAt: "2017-05-23T20:53:44.145Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5924a03a05e3326c6700e80d"
    text: {When I say declaritively, I mean vs proceedurally. Like XML config files vs setting a bunch of values in a code.}
    sent: "2017-05-23T20:48:58.049Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249fec0a783b6c0aca6d07"
    text: {> what if parallelism could be done declaratively?^/^/Can do, in fact there are different models for this: threads, coroutines, actors and async (io, etc) is just one way best suited for code.. ui, network, etc^/If you're dealing with a list of same type of data, it's in one way easier: I think this is called **data parallelism**, what you probably mean by *declarative*? (may be wrong on the terminology tho)}
    sent: "2017-05-23T20:47:40.545Z"
    editedAt: "2017-05-23T20:49:53.179Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59249fe00a783b6c0aca6cc9"
    text: { but really, if you get there and its not ready, it should return `none`}
    sent: "2017-05-23T20:47:28.680Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249f90eec422e415e0d884"
    text: "maybe   ` print wait x`"
    sent: "2017-05-23T20:46:08.768Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249f2d9f4f4ab05bf3c094"
    text: {you would need to check it for none in a loop I guess}
    sent: "2017-05-23T20:44:29.996Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249f1f0a783b6c0aca689d"
    text: {but if its not waiting, and its not ready yet. then it would return none}
    sent: "2017-05-23T20:44:15.056Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249f182b926f8a67867224"
    text: {We already have that. Syntax is easy, implementation is harder}
    sent: "2017-05-23T20:44:08.003Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59249ef4c4d73f445ad892a1"
    text: "do/new/wait   make it wait for the value"
    sent: "2017-05-23T20:43:32.808Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249ee1c4d73f445ad89272"
    text: "we would need more refinements"
    sent: "2017-05-23T20:43:13.619Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249ed85e34568d5e8420fe"
    text: "hmmm"
    sent: "2017-05-23T20:43:04.692Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249eb5f3001cd34250219a"
    text: {```^/x: reduce [func-a data1 func-b data2]^/y: do/new data1 do/new data2^/print x    ; <- hard part is here, what should it do now?^/print y^/```}
    sent: "2017-05-23T20:42:29.151Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59249e51fa63ba2f76721d36"
    text: "what if parallelism could be done declaratively?"
    sent: "2017-05-23T20:40:49.953Z"
    editedAt: "2017-05-23T20:40:56.144Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249e02f3001cd342501d42"
    text: "hmm"
    sent: "2017-05-23T20:39:30.307Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249df75e34568d5e841cb5"
    text: {Like `reduce`, but it does every new evaluation on a new.. whatever parallel mechanism}
    sent: "2017-05-23T20:39:19.711Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59249d9c631b8e4e6106ed51"
    text: "erm, what would you like it to do?"
    sent: "2017-05-23T20:37:48.275Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249d89fcbbe1891c3a2e3d"
    text: "`reduce/parallel`  hmm what does it do?"
    sent: "2017-05-23T20:37:29.659Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249d71631b8e4e6106ec66"
    text: "`x: do/new [1 + 2] `    "
    sent: "2017-05-23T20:37:05.284Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59249d5efa63ba2f7672177b"
    text: "But that's an idea.. `reduce/parallel`"
    sent: "2017-05-23T20:36:46.761Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "59249d2ec4d73f445ad889f4"
    text: {How would `do/new` return data to the original thread for instance?}
    sent: "2017-05-23T20:35:58.742Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59249d12eec422e415e0cac5"
    text: {@AlexanderBaggett that's the interface. Probably the implementation is the hard part}
    sent: "2017-05-23T20:35:30.030Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59249c89631b8e4e6106e8ed"
    text: {Why make it complex?  if `do` will do stuff on the current thread, why not have something like `do/new`  to do stuff on a new thread.}
    sent: "2017-05-23T20:33:13.229Z"
    editedAt: "2017-05-23T20:33:21.837Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59248db6631b8e4e61069b1f"
    text: {@JacobGood1  :point_up: [May 23, 2017 9:32 PM](https://gitter.im/red/red?at=5924641a631b8e4e6105cb2a)^/>“red functions can only be called by red functions”^/^/:p irrelevant pun^/But on topic, I think what you're trying to say is.. something like co-routines?  (go-routines? :p) I've a feeling I read this before..}
    sent: "2017-05-23T19:29:58.676Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59248d1ffcbbe1891c39dc84"
    text: {Anybody with experience installing red on linux should try to get red on there ;)}
    sent: "2017-05-23T19:27:27.555Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5924853bfa63ba2f7671a3ab"
    text: {This is an interesting experiment to make a bot: https://github.com/chaosbot/chaos}
    sent: "2017-05-23T18:53:47.528Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5924825d05e3326c670055ac"
    text: {Moved conversation :point_right: : [May 23, 2017 11:37 PM](https://gitter.im/red/bugs?at=5924815bfa63ba2f76718fad)}
    sent: "2017-05-23T18:41:33.443Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59246dfa2b926f8a67858355"
    text: {`unview` does not take any arguments, `unview/only` does.}
    sent: "2017-05-23T17:14:34.919Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59246dc3c4d73f445ad7a837"
    text: {```^/p: layout [ ^/            button "Create" [^/                do view [^/                    button "Lockup Red REPL"[^/                        unview/only p ^/                        view p ^/                        unview ^/                        unview/only p ^/                    ]^/                ]^/            ]^/]^/view p^/```}
    sent: "2017-05-23T17:13:39.074Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59246d8feec422e415dfe8a1"
    text: {@AlexanderBaggett shouldn't you have `unview/only p` instead of `unview p` on last line in button action?}
    sent: "2017-05-23T17:12:47.039Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592467119f4f4ab05bf2b553"
    text: "@geekyi , thanks. I will post it there too."
    sent: "2017-05-23T16:45:05.963Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "592464affcbbe1891c391df0"
    text: {@AlexanderBaggett  I should mention https://gitter.im/red/bugs for future ref}
    sent: "2017-05-23T16:34:55.850Z"
    editedAt: "2017-05-23T16:38:54.641Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5924642d05e3326c67ffc574"
    text: {```^/p: layout [ ^/            button "Create" [^/                do view [^/                    button "Lockup Red REPL"[^/                        unview/only p ^/                        view p ^/                        unview ^/                        unview p ^/                    ]^/                ]^/            ]^/]^/view p^/```^/^/^/^/^/^/}
    sent: "2017-05-23T16:32:45.547Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5924641a631b8e4e6105cb2a"
    text: {Good post on why most async approaches suck: http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/^/^/Hopefully, red will avoid these problems.}
    sent: "2017-05-23T16:32:26.372Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "592463ed00efc2bb3e98913c"
    text: {Oh, sorry guys. Would it be easier to paste without the comments?}
    sent: "2017-05-23T16:31:41.795Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "592463cffcbbe1891c391830"
    text: {@geekyi It is pasted as single line - so comments distort the thing.}
    sent: "2017-05-23T16:31:11.027Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "592463a805e3326c67ffc30b"
    text: {Works when I paste individually, I wonder why pasting all of it at once doesn't work..}
    sent: "2017-05-23T16:30:32.033Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592463822b926f8a67855011"
    text: "@AlexanderBaggett I see, part of it is remaining?"
    sent: "2017-05-23T16:29:54.668Z"
    editedAt: "2017-05-23T16:32:10.152Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5924635b9f4f4ab05bf2a372"
    text: {@AlexanderBaggett Confirmed, on W7 REPL becomes unresponsive also.}
    sent: "2017-05-23T16:29:15.051Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "592462f305e3326c67ffbf45"
    text: {Well the basic idea is simple. You create a window. You create a child window. You close the parent window from an event from the child window.  After doing that the REPL is locked.  Even if you close the child window, or re-open and reclose the parent window from the child window, the REPL stays locked.}
    sent: "2017-05-23T16:27:31.656Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59246208631b8e4e6105bde9"
    text: {@AlexanderBaggett pasting not working: prompting `[` here;  and @greggirwin is probably away}
    sent: "2017-05-23T16:23:36.576Z"
    editedAt: "2017-05-23T16:23:54.145Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59245fcf5e34568d5e82f4d9"
    text: {@greggirwin , can you test this on Windows 7 as well?}
    sent: "2017-05-23T16:14:07.111Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59245f8292217cca58a69bb8"
    text: {```^/p: layout [ ^/            button "Create" [^/                do view [^/                    button "Lockup Red REPL"[^/                        unview/only p ;close the parent window^/                        view p ; re-open the parent window^/                        unview ; close the child window^/                        unview p ;close the parent again  now the REPL is locked up^/                    ]^/                ]^/            ]^/]^/view p^/```^/}
    sent: "2017-05-23T16:12:50.089Z"
    editedAt: "2017-05-23T16:16:11.244Z"
    v: 4
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59245f5a0a783b6c0ac9430b"
    text: {This code will lockup the REPL in windows 10 if you paste it into the REPL and click both buttons.}
    sent: "2017-05-23T16:12:10.030Z"
    editedAt: "2017-05-23T16:18:10.567Z"
    v: 3
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59245f2d5e34568d5e82f23e"
    text: {Hey guys, I think I discovered a bug or perhaps just undesirable behavior for `VID` . There is a way to create a series of windows on windows that will lock-up the REPL.  }
    sent: "2017-05-23T16:11:25.152Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59240a25fa63ba2f766f0d68"
    text: {@meijeru Thanks, that's very useful to spot missing parts. We'll also see how to combine better the two conflicting rules: operator commutativity and left type affinity.}
    sent: "2017-05-23T10:08:37.906Z"
    editedAt: "2017-05-23T10:12:23.107Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592405a72b926f8a67835930"
    text: {I have updated my table of operand and result types for all arithmetic operations. It is now much more compact and readable. Find it [here](https://gist.github.com/meijeru/94a9b3a2fb131a4011e24b1e9fde561b) Quite a number of anomalies are already subject of issues submitted by me, but proponents of consistency can still find some intrigueing stuff...}
    sent: "2017-05-23T09:49:27.073Z"
    editedAt: "2017-05-23T09:49:41.146Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5924035c05e3326c67fdc489"
    text: {@pekr `load/library` is planed, but not necessary as we already have Red/System. }
    sent: "2017-05-23T09:39:40.709Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5923ffbb631b8e4e6103cb4d"
    text: {@dockimbel interesting idea:) @pekr hm... so it looks Rebol don't like that I have so many ImageMagick versions on my computer.}
    sent: "2017-05-23T09:24:11.155Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5923fee4f3001cd3424cf296"
    text: {Am I right assuming, that with the next Red version, something like `load/library`is coming to Red?}
    sent: "2017-05-23T09:20:36.654Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923fec1fa63ba2f766ed6ff"
    text: ":-)"
    sent: "2017-05-23T09:20:01.695Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923feb4eec422e415ddc22e"
    text: {Installer claimed it is altering my path, but I did not reboot. Copied the library to where my rebol.exe resides and I could read it. I downloaded 32 bit (x86) distro ...}
    sent: "2017-05-23T09:19:48.437Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923feb4f3001cd3424cf134"
    text: {@Oldes Using libRed, you should be able to create a Red module for task-master in Cheyenne, and run Red scripts from the Rebol worker. ;-)}
    sent: "2017-05-23T09:19:48.101Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5923fe8600efc2bb3e968c16"
    text: {```^/>> l: load/library %core_RL_cairo_.dll^/>> type? l^/== library!^/```}
    sent: "2017-05-23T09:19:02.166Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923fe7c5e34568d5e811a30"
    text: "off topic here, but hopefully ok .... my try:"
    sent: "2017-05-23T09:18:52.949Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923fe4892217cca58a4aaa3"
    text: {Or I could use `call` from Cheyenne to evaluate the part where images are processed in Red.}
    sent: "2017-05-23T09:18:00.395Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5923fdc65e34568d5e8116fd"
    text: {It must be some issue in Rebol under Windows10... the libraries are fine.. I'm using the same in Red.. it is just that I have not ported everything to Red yet. Copying dlls into system32 does not help.. never mind. I can do what I need when I will be back on Windows 7.. and hopefully we will have Red-Cheyenne too:) }
    sent: "2017-05-23T09:15:50.977Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5923fd259f4f4ab05bf0a7d2"
    text: {@Oldes You should also check if the dependencies for that lib are available.}
    sent: "2017-05-23T09:13:09.923Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5923fcf805e3326c67fda4c8"
    text: {@Oldes Probably a search path issue, try copying that lib to system32 folder. You can also use Procmon to track the search paths used by your Windows instance.}
    sent: "2017-05-23T09:12:24.909Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5923fcf192217cca58a4a380"
    text: {I need this one:)^/```^/>> l: load/library %CORE_RL_wand_.dll^/** Access Error: Cannot open CORE_RL_wand_.dll as library^/** Near: l: load/library %CORE_RL_wand_.dll^/```}
    sent: "2017-05-23T09:12:17.101Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5923fcba00efc2bb3e9682be"
    text: {It will not help me.. because system libs are ok... like:^/```^/>> l: load/library %kernel32.dll ? l^/L is a library of value: library^/```}
    sent: "2017-05-23T09:11:22.394Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5923fc6eeec422e415ddb533"
    text: {@Oldes can you point me toward some lib example? Would try using my Win10 version ...}
    sent: "2017-05-23T09:10:06.458Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923fc4092217cca58a4a014"
    text: {@ZETROzky From all the info gathered so far, it seems to be a Windows Insider issue, not a Red issue. Red works fine on latest regular Win10. I don't have an Insider version to test, so can't investigate further.}
    sent: "2017-05-23T09:09:20.941Z"
    editedAt: "2017-05-23T09:14:16.433Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5923fbe85e34568d5e810e2a"
    text: {No.. as I said... I'm using the same libs in Red without problem. It must be some stupid security modification in Windows 10, because I was using it for years under Windows 7 without any issue.}
    sent: "2017-05-23T09:07:52.361Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5923fb2f2b926f8a6783239b"
    text: {Aren't those lib for e.g. 64bit ones? (not that I know if there is any difference though)}
    sent: "2017-05-23T09:04:47.329Z"
    editedAt: "2017-05-23T09:05:24.313Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923fa4605e3326c67fd991f"
    text: {Sorry to be off topic a little bit... I noticed that I'm not able to load library in Rebol on Windows 10 while it is working fine on Windows 7... does anybody know if there is some workaround? System libraries like `kernel32.dll` are fine, just `imagemagick`'s dll is not loadable. In Red I can use this dll without problem, so it must be some Rebol problem. Unfortunately I must run my script under Cheyenne server, which is not yet ported to Red:/}
    sent: "2017-05-23T09:00:54.916Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5923f62492217cca58a48312"
    text: ":+1: "
    sent: "2017-05-23T08:43:16.200Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5923f578f3001cd3424cc050"
    text: {@PeterWAWood Thanks, `rc "-r -t Windows %environment/console/gui-console.red"`did it. I compile manually from the R2 console ...}
    sent: "2017-05-23T08:40:24.170Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923f5075e34568d5e80f100"
    text: "OK I'm back. Any fixes? "
    sent: "2017-05-23T08:38:31.307Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "5923f28efa63ba2f766e9a19"
    text: {```text^/rebol -qs red.r -r -o gui-console.exe -t windows environment/console/gui-console.red^/```}
    sent: "2017-05-23T08:27:58.159Z"
    editedAt: "2017-05-23T08:28:18.197Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
)#(
    id: "5923f277eec422e415dd83ba"
    text: {@pekr The GUI console compiled fine for me using the ```-r``` flag.}
    sent: "2017-05-23T08:27:35.123Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5923e8b8fa63ba2f766e693d"
    text: {@DraconG74_twitter There is no installer for Red, you download an executable that you use from the terminal. On first use, it will take a minute to precompile a console and launch it.}
    sent: "2017-05-23T07:46:00.260Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5923e3922b926f8a6782ab36"
    text: {I tried to delete `libRedRT.dll`to have it created from again. Did not help. I noticed there was some change to the compilation process, previously, when using `-t`, libRedRT was not created, or so I remember ...}
    sent: "2017-05-23T07:24:02.789Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923e35dfa63ba2f766e4e97"
    text: {@luce80 Assignments are statements in R/S, they return no value. Such feature is left for future versions.}
    sent: "2017-05-23T07:23:09.173Z"
    editedAt: "2017-05-23T07:24:37.302Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5923e319eec422e415dd3f35"
    text: {```^/>> rc "-t Windows %environment/console/gui-console.red"^/^/-=== Red Compiler 0.6.2 ===-^/^/Compiling C:\!Red\red\environment\console\gui-console.red ...^/...using libRedRT built on 22-May-2017/14:22:23+2:00^/...compilation time : 335 ms^/^/Target: Windows^/^/Compiling to native code...^/*** Compilation Error: undefined context gui^/*** in file: %/C/!Red/red/environment/console/terminal.reds^/*** at line: 1478^/*** near: [^/    with gui [^/        #script %/C/!Red/red/environment/console/windows.reds^/```^/}
    sent: "2017-05-23T07:22:01.040Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923e2ec631b8e4e6103464f"
    text: {I am getting error compiling gui-console from the master. Is that a known issue?}
    sent: "2017-05-23T07:21:16.359Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5923e13200efc2bb3e960371"
    text: {@DraconG74_twitter You're asking how to execute the red executable file you downloaded from the website?}
    sent: "2017-05-23T07:13:54.086Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "5923367400efc2bb3e936a05"
    text: {```^/Red []^/test: routine [^/^-i [integer!] return: [integer!]^/^-][^/^-i: 0^/^-i: i^/]^/^/Compiling to native code...^/*** Compilation Error: wrong return type in function: exec/test^/*** expected: [integer!], found: [none]^/*** in file: %test.red^/*** in function: exec/test^/*** at line: 332^/*** near: [^/    i: i^/]^/```^/}
    sent: "2017-05-22T19:05:24.886Z"
    v: 1
    author: "56eeeea485d51f252ab9d69f"
) #(
    id: "59231c7505e3326c67fa3abf"
    text: {@DraconG74_twitter Hi! I am not sure I understand your question, do you want to execute .dms under Red?}
    sent: "2017-05-22T17:14:29.002Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592317529f4f4ab05becfe68"
    text: {How can I execute the installation file (i.e., .dms) for macOS ?}
    sent: "2017-05-22T16:52:34.670Z"
    v: 1
    author: "592316b2d73408ce4f61688a"
) #(
    id: "592316cbc4d73f445ad1a894"
    text: "Hello to all. May I ask a question please?"
    sent: "2017-05-22T16:50:19.393Z"
    v: 1
    author: "592316b2d73408ce4f61688a"
) #(
    id: "5923040b2b926f8a677efe96"
    text: {@meijeru No, it's just an unfinished change... I'm fixing it right now.}
    sent: "2017-05-22T15:30:19.529Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5922fd3d92217cca58a05d2e"
    text: {I asked a question in a comment to commit `aa5c360` but I think I better ask it here: "Is event! now both internal! and external! ??"}
    sent: "2017-05-22T15:01:17.084Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "592179ec00efc2bb3e8c3727"
    text: {@justinant No ETA, as there is nobody available to work on it.}
    sent: "2017-05-21T11:28:44.861Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59214bf12b926f8a67782d7f"
    text: "I would if I could, gladly."
    sent: "2017-05-21T08:12:33.227Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59214a75fa63ba2f7663c9fd"
    text: {The GTK3 branch now has a low priority. As the development team is only a few persons it is impossible for them to do all at once. Other area's have priority for now, you can consult the Trello board for more info about planning. The other thing you can do is to help out in developing GTK3 and other features you think are important for you. A small start has already been made, but unfortunately dicontinued.}
    sent: "2017-05-21T08:06:13.142Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59214879631b8e4e61f8f392"
    text: {Yeah well GUI support is what I really want. I looked in the GTK repo and saw the current items, as you said "a partial implementation".Any idea when the port to GTK3 will/may occur? Months?}
    sent: "2017-05-21T07:57:45.968Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "592147bc00efc2bb3e8b87b3"
    text: {GUI support is not ready on Linux, though there is a partial implementation in the GTK branch.}
    sent: "2017-05-21T07:54:36.151Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592145d89f4f4ab05be5f292"
    text: {I did the install as per the instructions a few weeks ago, but the issue was calling code with VIEWS ...}
    sent: "2017-05-21T07:46:32.987Z"
    editedAt: "2017-05-21T07:46:41.782Z"
    v: 2
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "592143d9f3001cd34241dfc8"
    text: {@justinant Current Red version runs fine on Linux/64-bit, provided that you have installed the 32-bit support libs (as instructed on the Download page).}
    sent: "2017-05-21T07:38:01.726Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59213fde0a783b6c0abcbaa8"
    text: {@PeterWAWood Thanks. Kind of disappointing, I was looking forward to a "better" Rebol with wider support for more devices. Until then I just have to suffer JavaScript 8-(}
    sent: "2017-05-21T07:21:02.819Z"
    editedAt: "2017-05-21T07:21:28.802Z"
    v: 2
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59213d8efa63ba2f7663a2b7"
    text: "It is not yet planned."
    sent: "2017-05-21T07:11:10.197Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59212e3f5e34568d5e76424c"
    text: {Greetings all. @dockimbel How goes the Red-Lang port to Linux/AMD64?}
    sent: "2017-05-21T06:05:51.131Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59210e70f3001cd34241474e"
    text: {@angellom1 Yes, there is at least one JSON lib from @rebolek [there](https://github.com/rebolek/red-tools/blob/master/json.red).}
    sent: "2017-05-21T03:50:08.014Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59209e2900efc2bb3e898775"
    text: "is possible json with Red ?"
    sent: "2017-05-20T19:51:05.808Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "592093a0f3001cd3423fbff0"
    text: "Genius"
    sent: "2017-05-20T19:06:08.101Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592075ec0a783b6c0aba469b"
    text: {strange, my win 10 setup never showed any problems so far. Well, that surely does not help your case, just sayig ...}
    sent: "2017-05-20T16:59:24.136Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59203a7e9f4f4ab05be29c79"
    text: {No conclusive info from the procmon logs, the crush DLL is built in the right place.}
    sent: "2017-05-20T12:45:50.274Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592037485e34568d5e731c83"
    text: "@ZETROzky Thanks, looking at it..."
    sent: "2017-05-20T12:32:08.071Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592036f25e34568d5e731b55"
    text: {I probably won't be available for another two days, I'll be back on Monday.}
    sent: "2017-05-20T12:30:42.704Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592036919f4f4ab05be28d73"
    text: {It's on the GitHub issue page. I'm sorry for the delay}
    sent: "2017-05-20T12:29:05.293Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "5920339eeec422e415cfa54c"
    text: "Ok so here's the log"
    sent: "2017-05-20T12:16:30.846Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592033985e34568d5e730e79"
    text: "Nvm"
    sent: "2017-05-20T12:16:24.813Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "59203172c4d73f445ac6db4b"
    text: "The installer isn't even showing up in procmon"
    sent: "2017-05-20T12:07:14.232Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592031645e34568d5e730735"
    text: "Wait how do I log something?"
    sent: "2017-05-20T12:07:00.336Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "5920309700efc2bb3e880628"
    text: "Downloading"
    sent: "2017-05-20T12:03:35.275Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "5920307a92217cca58960df4"
    text: {You should try it now, just in case it's a DLL access right issue.}
    sent: "2017-05-20T12:03:06.328Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5920306100efc2bb3e880567"
    text: {> @ZETROzky One thing you could do for helping isolate the cause of the issue could be to run [Procmon](https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx) monitor while launching Red, and seeing which DLL the OS can't find.^/^/Going to try that.}
    sent: "2017-05-20T12:02:41.714Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592030325e34568d5e730454"
    text: {> Moreover, have you tried running Red with admin rights?^/^/A long time ago}
    sent: "2017-05-20T12:01:54.107Z"
    editedAt: "2017-05-20T12:02:12.643Z"
    v: 2
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "59203027f3001cd3423e60f8"
    text: {Moreover, have you tried running Red with admin rights?}
    sent: "2017-05-20T12:01:43.480Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592030189f4f4ab05be273a1"
    text: {@ZETROzky One thing you could do for helping isolate the cause of the issue could be to run [Procmon](https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx) monitor while launching Red, and seeing which DLL the OS can't find.}
    sent: "2017-05-20T12:01:28.050Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59202f689f4f4ab05be271d8"
    text: "Ok"
    sent: "2017-05-20T11:58:32.027Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "59202f57eec422e415cf95f3"
    text: {We'll see if we can install an Insider version here for testing. Meanwhile, as that doesn't look like a Red-specific issue, though, searching more online might bring some solution.}
    sent: "2017-05-20T11:58:15.704Z"
    editedAt: "2017-05-20T11:59:10.018Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59202f08f3001cd3423e5c41"
    text: "Alright"
    sent: "2017-05-20T11:56:56.866Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "59202e022b926f8a67749407"
    text: {Then, it might be an Insider Build specific issue. I'm updating my Win10 image for re-testing with latests patches, but I didn't have any issue running Red on it so far.}
    sent: "2017-05-20T11:52:34.504Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59202d932b926f8a6774934a"
    text: {@dockimbel If you mean installing C++, I've also done that. SysWOW64 as well.}
    sent: "2017-05-20T11:50:43.973Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "59202c97c4d73f445ac6c9a7"
    text: "Yes, I have"
    sent: "2017-05-20T11:46:31.552Z"
    editedAt: "2017-05-20T11:51:04.039Z"
    v: 2
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "59202a28631b8e4e61f55829"
    text: "Have you tried putting the 64-bit libs too?"
    sent: "2017-05-20T11:36:08.996Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59202a0333e9ee771cc70f76"
    text: "Still doesn't work"
    sent: "2017-05-20T11:35:31.329Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592026b400efc2bb3e87e82d"
    text: "I'm going to install that"
    sent: "2017-05-20T11:21:24.107Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
)#(
    id: "592026b30a783b6c0ab92d43"
    text: "The XInput 1.3 is missing"
    sent: "2017-05-20T11:21:23.841Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592025ed9f4f4ab05be250d0"
    text: {Just copy the files (might need admin rights for that). If it still doesn't work, trying installing also the 64-bit files.}
    sent: "2017-05-20T11:18:05.003Z"
    editedAt: "2017-05-20T11:19:40.410Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592025e192217cca5895e870"
    text: "OK nvm them"
    sent: "2017-05-20T11:17:53.952Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592025d692217cca5895e855"
    text: "Like do I just copy it to a directory or..? "
    sent: "2017-05-20T11:17:42.589Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592025c100efc2bb3e87e435"
    text: "And how would I install that"
    sent: "2017-05-20T11:17:21.982Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592025adf3001cd3423e3a80"
    text: {Basically you should have those DLLs present in C:\Windows\System32 folder:^/^/mfc100.dll^/mfc100u.dll^/msvcp100.dll^/msvcr100.dll^/msvcr100_clr0400.dll^/xinput1_3.dll}
    sent: "2017-05-20T11:17:01.046Z"
    editedAt: "2017-05-20T11:17:12.550Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5920235392217cca5895e01c"
    text: {Then it might be a missing DirectX 32-bit library, try installing the xinput1_3.dll file from [this package](http://freewisdoms.com/download-dll-files-commonly-used-by-games/), it [seems to fix](https://www.tenforums.com/gaming/9833-0xc000007b-error.html) such kind of issue on Win10. Long explanations [here](https://www.thewindowsinsider.org/fix-0xc000007b-application-error-windows-10/).}
    sent: "2017-05-20T11:06:59.429Z"
    editedAt: "2017-05-20T11:16:07.202Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592022c7f3001cd3423e2f0d"
    text: "@dockimbel already installed"
    sent: "2017-05-20T11:04:39.930Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "592021e1f3001cd3423e2c03"
    text: {@ZETROzky Installing Visual C++ 2010 redistribuable package for x86 might fix your issue: https://www.microsoft.com/en-hk/download/details.aspx?id=5555}
    sent: "2017-05-20T11:00:49.505Z"
    editedAt: "2017-05-20T11:00:58.733Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592021a8eec422e415cf6469"
    text: "@dockimbel Anything you can do? "
    sent: "2017-05-20T10:59:52.596Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "5920218c33e9ee771cc6f31a"
    text: "I shall have to delete this other account then."
    sent: "2017-05-20T10:59:24.201Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "5920204d2b926f8a67746345"
    text: "@ZETROzky_twitter damnit"
    sent: "2017-05-20T10:54:05.712Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "5920203e5e34568d5e72c906"
    text: "I see"
    sent: "2017-05-20T10:53:50.425Z"
    v: 1
    author: "59201fecd73408ce4f60eeff"
) #(
    id: "59201ff1fa63ba2f765ff56a"
    text: {It is most probably related to a system DLL version causing trouble, like the C library.}
    sent: "2017-05-20T10:52:33.944Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59201e8b631b8e4e61f52ecf"
    text: "The only thing I have running is Windows Defender"
    sent: "2017-05-20T10:46:35.266Z"
    v: 1
    author: "5920136ed73408ce4f60ed9c"
) #(
    id: "59201e732b926f8a67745c73"
    text: "No"
    sent: "2017-05-20T10:46:11.053Z"
    v: 1
    author: "5920136ed73408ce4f60ed9c"
) #(
    id: "59201e31c4d73f445ac69a0e"
    text: {@ZETROzky_twitter Do you have an anti-virus software running?}
    sent: "2017-05-20T10:45:05.656Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59201799c4d73f445ac6802e"
    text: {Ok I filed an issue under https://github.com/red/red/issues/2698}
    sent: "2017-05-20T10:16:57.051Z"
    v: 1
    author: "5920136ed73408ce4f60ed9c"
) #(
    id: "59201443631b8e4e61f50bd5"
    text: "Should I file an issue on GitHub?"
    sent: "2017-05-20T10:02:43.599Z"
    v: 1
    author: "5920136ed73408ce4f60ed9c"
) #(
    id: "59201429fa63ba2f765fd0b6"
    text: "Still didn't work"
    sent: "2017-05-20T10:02:17.307Z"
    v: 1
    author: "5920136ed73408ce4f60ed9c"
) #(
    id: "5920141deec422e415cf35ac"
    text: "I've tried the compatibility modes on 8 and 7"
    sent: "2017-05-20T10:02:05.645Z"
    v: 1
    author: "5920136ed73408ce4f60ed9c"
) #(
    id: "59201408eec422e415cf3593"
    text: {Do you need to manually add in support code or is this fixable by me?}
    sent: "2017-05-20T10:01:44.358Z"
    v: 1
    author: "5920136ed73408ce4f60ed9c"
) #(
    id: "592013ea0a783b6c0ab8e8be"
    text: {Bug : Red doesn't install on Windows 10 Pro Insider Preview Build 16199}
    sent: "2017-05-20T10:01:14.727Z"
    v: 1
    author: "5920136ed73408ce4f60ed9c"
) #(
    id: "591ee54983cb5db0734941a5"
    text: {Though, we could introduce such auto-upgrading control already, but I'm not sure how it could be implemented.}
    sent: "2017-05-19T12:30:01.035Z"
    editedAt: "2017-05-19T12:30:11.169Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ee523f3001cd342397bfb"
    text: "That all sounds good even the division exception."
    sent: "2017-05-19T12:29:23.988Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "591ee4d792217cca58912993"
    text: {I also think that we need arbitrary large number support, and then we should be able to provide a smooth transition between number types by default, while allowing to disable the auto-upgrading mechanism locally when wanted.}
    sent: "2017-05-19T12:28:07.472Z"
    editedAt: "2017-05-19T12:28:24.919Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ee4450a783b6c0ab4691f"
    text: {For the `2147483647 + 1` edge case, I think an error is more helpful in the general case, to signal an "datatype overflow".}
    sent: "2017-05-19T12:25:41.007Z"
    editedAt: "2017-05-19T12:26:42.905Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ee31c2b926f8a676f92d7"
    text: {Consistency is not always the best option for edge cases, for example `1 / 0` should error out, otherwise you cannot catch division by zero on integers accurately, the `1.#INF` will cause havoc in your code somewhere else. OTOH `1 / 2 = 0` is no-go either (I'm waiting to have the integer division op available to change that to auto-promote the result to float when needed).}
    sent: "2017-05-19T12:20:44.511Z"
    editedAt: "2017-05-19T12:23:14.595Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ecd84c4d73f445ac18897"
    text: {I am not advocating for either approach but I believe that one of them should be chosen and applied consistently.}
    sent: "2017-05-19T10:48:36.293Z"
    editedAt: "2017-05-19T10:48:54.641Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "591ecd2f0a783b6c0ab40693"
    text: {Keeping a strict separation between integers and floats would seem to be beneficial for people writing lower level code whereas treating numbers as a "mixed-type" would it easier to write higher level code. ^/^/(Again, a logical conclusion of this latter approach would be to return ```1.#INF``` from ```1 / 0 ```. )}
    sent: "2017-05-19T10:47:11.039Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "591ecc422b926f8a676f2840"
    text: {@dockimbel The discussion of integer division return a floating point answer leads me to another question. Should ```2147483647 + 1``` give an overflow error as now or actually return  ```2147483648.0```? ^/^/It seems to fit with the paradigm that numbers are just numbers ( 1 / 2 = 0.5) rather than being two completely separate types integers or float. Visual Basic/JavaScript vs C.^/^/}
    sent: "2017-05-19T10:43:14.595Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "591e6e21eec422e415c8e2e3"
    text: {@meijeru My quick answers about that:^/1. Yes, of course^/2. Yes, we should allow different types. The current implementation for some operation is missing some parts, we can complete them once they are listed.^/3. Not necessarily, the resulting type can have an affinity with the left operand type, with exceptions (like `integer! op float!`).}
    sent: "2017-05-19T04:01:37.727Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591e03ad5e34568d5e6ab123"
    text: {Caution it is a long list, and probably the entries are repetitive for each operator. Enjoy!}
    sent: "2017-05-18T20:27:25.335Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591e038b33e9ee771cbeebbe"
    text: {The table you want is 3-dimensional: operator  x  type1  x  type2. I have put up the results in list form [here](https://gist.github.com/meijeru/94a9b3a2fb131a4011e24b1e9fde561b)}
    sent: "2017-05-18T20:26:51.699Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591dfd0a83cb5db07345df20"
    text: {Should it commute for other ops? I'm not sure, but I don't think so. Also, multiplication isn't commutative with higher dimensional numbers (octonions) so there's that.. }
    sent: "2017-05-18T19:59:06.711Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591dfb6ef3001cd342360fc1"
    text: {In other words, should arithmetic ops commute? I feel yes. @meijeru would be nice to have a table somewhere.. Maybe in the wiki? }
    sent: "2017-05-18T19:52:14.417Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591de81e9f4f4ab05bd9dbf7"
    text: {@meijeru Interesting questions. But it can depend what the result should be. Think about it like matrix multiplication 4by3 matrix times 3by4 gives different thing than the 3by4 times 4by3. So integer! + char! I could expect integer! result and char! + integer! I could expect another char!}
    sent: "2017-05-18T18:29:50.880Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "591de3cf83cb5db073456631"
    text: {They are not frequent, but they do happen in alpha.}
    sent: "2017-05-18T18:11:27.524Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591de3772b926f8a676bc9fe"
    text: {@luce80 Red is still in alpha, so you have to expect major changes that will break your code.}
    sent: "2017-05-18T18:09:59.228Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591de25a92217cca588d5d99"
    text: {@PeterWAWood  I hope current implementation will not be changed (or will be change sooner then later) otherwise all code with (integer) divisions created from now to then will be broken in the future.}
    sent: "2017-05-18T18:05:14.154Z"
    v: 1
    author: "56eeeea485d51f252ab9d69f"
) #(
    id: "591dc49a00efc2bb3e7e9fda"
    text: {I have the following fundamental questions about the allowable types for arithmetical operations (and perhaps other functions as well):^/1. I suppose is useful to NOT restrict the two arguments to be of exactly the same type, e.g. to be able to add an integer to a float; can everyone agree?^/2. that being so, if an operation admits arguments of type1 and type2 in that order, should it also admit arguments of type2 and type1? if the answer is YES, there are numerous exceptions in the current implementation, see e.g. issue #2637 (integer + vector vs. vector + integer)^/3. if YES, should the result type be the same in both cases? again, in the current implementation, this is not always true (e.g. char + integer vs integer+ char)^/I have a full list for all arithmetical ops and all their allowable argument types, available on request. I have not made issues for all of them (yet).}
    sent: "2017-05-18T15:58:18.327Z"
    editedAt: "2017-05-18T15:58:30.415Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591d83492b926f8a6769dbae"
    text: "Ok... my memory is not as used to be:)"
    sent: "2017-05-18T11:19:37.637Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591d831833e9ee771cbc75f8"
    text: {@Oldes There have been a number of discussions about "integer division". If I remember correctly, 5 / 10 will return 0.5 at some time in the future and there will be a different operator (possibly //) to provide the "integer division".}
    sent: "2017-05-18T11:18:48.930Z"
    editedAt: "2017-05-18T11:19:11.013Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "591d82cd33e9ee771cbc751f"
    text: {@old It is by design, there was already discussion about it.}
    sent: "2017-05-18T11:17:33.036Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591d801b83cb5db0734361df"
    text: {I don't say it must be changed, just if it is known.. which probably is.}
    sent: "2017-05-18T11:06:03.237Z"
    editedAt: "2017-05-18T11:06:12.335Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591d7fe2c4d73f445abc36b1"
    text: {Btw... it is enough to do:^/```^/>> 5.0 / 10^/== 0.5^/```}
    sent: "2017-05-18T11:05:06.973Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591d7fabeec422e415c4f6c0"
    text: {I know... just asking if it is desired behavior as it is quite big incompatibility with Rebol.}
    sent: "2017-05-18T11:04:11.252Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591d7f7b0a783b6c0aae97cc"
    text: {```^/>> to-float 5 / to-float 10^/== 0.5^/```}
    sent: "2017-05-18T11:03:23.702Z"
    editedAt: "2017-05-18T11:03:46.490Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591d7f53c4d73f445abc33cc"
    text: {@dockimbel I just noticed, that in Red:^/```^/>> 5 / 10^/== 0^/```^/while in Rebol the result would be `0.5`. I know that I'm dividing integers, but is it by design or not?}
    sent: "2017-05-18T11:02:43.616Z"
    editedAt: "2017-05-18T11:03:09.704Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591c6ef9631b8e4e61e63f88"
    text: {I like to think of objects as containers of state, If I want to reflect on an objects current state, the logical place for a coroutine is inside the object. A method inside an object is antithetical to methods outside of an object. Thus, I see coroutines as a mismatch with multimethods.}
    sent: "2017-05-17T15:40:41.239Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
)#(
    id: "591c6e4000efc2bb3e78cf08"
    text: "I need to check it"
    sent: "2017-05-17T15:37:36.135Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c6e1a8a05641b119081c7"
    text: {you said "it works in CL afaik", I was curious about how you have made it work there. I have used coroutines in cl, I was not impressed.}
    sent: "2017-05-17T15:36:58.726Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "591c6db05e34568d5e63b920"
    text: {I may be wrong, but I think CL keeps global object system, so change in one thread/coroutine affects other places as well}
    sent: "2017-05-17T15:35:12.610Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c6d869f4f4ab05bd389a1"
    text: "what do you mean `where`? where you need :)"
    sent: "2017-05-17T15:34:30.695Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c6d4f00efc2bb3e78c9ad"
    text: "@maximvl  Where do you place your coroutine?"
    sent: "2017-05-17T15:33:35.905Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "591c6cec5e34568d5e63b569"
    text: {@maximvl thinks multiple dispatch is more like an object system feature}
    status: true
    sent: "2017-05-17T15:31:56.529Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c6cc45e34568d5e63b434"
    text: "@JacobGood1 how is this so? it works in CL afaik"
    sent: "2017-05-17T15:31:16.845Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c6caf92217cca5886fcc5"
    text: {>declaring methods outside of an object does not mix well with coroutines in my experience.^/}
    sent: "2017-05-17T15:30:55.761Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c6c7d2b926f8a676551fd"
    text: {However, I do have reservations about multiple dispatch after mastering coroutines. Coroutines are a more powerful abstraction imo, declaring methods outside of an object does not mix well with coroutines in my experience.}
    sent: "2017-05-17T15:30:05.624Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "591c6b6d00efc2bb3e78be25"
    text: {@geekyi mulitple dispatch has been around forever in lisp land, I was advocating for its inclusion into red in the lisp channel a while back. I was able to add it to  red in an interesting way... it is somewhere in the nether regions of my computer though}
    sent: "2017-05-17T15:25:33.900Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "591c21af0a783b6c0aa89939"
    text: {R/S is for system programming and low-level interfacing. It can be used for accelerating code, but, if you want speed+safety, R/S is not the best target. We have other plans for that.}
    sent: "2017-05-17T10:10:55.048Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c20c78a05641b118eff62"
    text: {user should be free to decide whenever he wants to shoot only his foot or whole leg :gun:}
    sent: "2017-05-17T10:07:03.584Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591c20c65e34568d5e622f0e"
    text: {and this is exactly the part I would like to have access from repl to}
    sent: "2017-05-17T10:07:02.114Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c2085f3001cd3422dbd0c"
    text: "not to manipulate stack and so on"
    sent: "2017-05-17T10:05:57.387Z"
    editedAt: "2017-05-17T10:06:24.856Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c20805e34568d5e622dfb"
    text: {I just think that most use cases to use R/S would be to make program faster}
    sent: "2017-05-17T10:05:52.801Z"
    editedAt: "2017-05-17T10:06:11.133Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c205c5e34568d5e622d3d"
    text: "that's for sure"
    sent: "2017-05-17T10:05:16.244Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c204283cb5db0733d6959"
    text: {@maximvl Sure, I just want to point out that "safe" does not come for free (most of the time, it comes with high price).}
    sent: "2017-05-17T10:04:50.926Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c202200efc2bb3e774e54"
    text: "@dockimbel not yet, sorry"
    sent: "2017-05-17T10:04:18.610Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c20132b926f8a6763cd14"
    text: {One view on actions: https://github.com/toomasv/red-type-hierarchy/blob/master/Red-actions-by-types.pdf}
    sent: "2017-05-17T10:04:03.247Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591c2012c4d73f445ab644d2"
    text: {@dockimbel I would say it's a good feature to have anyways, if you want safety - use it, you want features - you don't, as simple as that}
    sent: "2017-05-17T10:04:02.270Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c200e92217cca588575a5"
    text: {AFAIK there's some sort of `secure` dialect in Rebol, maybe safe R/S features can be part of it?}
    sent: "2017-05-17T10:03:58.715Z"
    editedAt: "2017-05-17T10:05:09.208Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591c2005c4d73f445ab6447a"
    text: {@maximvl Have you read the R/S documentation to see what it can do?}
    sent: "2017-05-17T10:03:49.764Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1fd700efc2bb3e774c7f"
    text: "oh wow"
    sent: "2017-05-17T10:03:03.987Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1fd59f4f4ab05bd20074"
    text: {Yes, we could add a `safe` mode later in R/S, though, there is always a price to pay for that, like extra verbosity, boilerplate code, annotations for the compiler and complex rules (like ownership/borrowing in Rust).}
    sent: "2017-05-17T10:03:01.879Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1fd5f3001cd3422db91e"
    text: {>like reading/writing the stack register and frame register, or pushing/popping on the native stack directly}
    sent: "2017-05-17T10:03:01.457Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1fb7631b8e4e61e4a73a"
    text: {the whole purpose, at least as I see it, to allow you write code which will be very efficiently compiled with safety guarantees even if this cost you some features}
    sent: "2017-05-17T10:02:31.560Z"
    editedAt: "2017-05-17T10:02:37.794Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1f7a5e34568d5e622975"
    text: {No, many low-level features are unsafe by nature, whatever the language. Rust makes many common manipulations safer, but there are still many cases where it's simply not possible (or then you limit the language abilities). For example, R/S can do things which are not available in C nor in Rust, like reading/writing the stack register and frame register, or pushing/popping on the native stack directly.}
    sent: "2017-05-17T10:01:30.773Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1f54f3001cd3422db6b7"
    text: {well, I would say `safe` mode should be the default, as in Rust, and `unsafe` should allow you to do any dirty things you wish}
    sent: "2017-05-17T10:00:52.067Z"
    editedAt: "2017-05-17T10:01:01.916Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1f2683cb5db0733d646f"
    text: "`rust` dialect or what? :D"
    sent: "2017-05-17T10:00:06.242Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591c1ebec4d73f445ab63e89"
    text: "I mean, it is possible"
    sent: "2017-05-17T09:58:22.374Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1e9f33e9ee771cb66d20"
    text: {wait, Rust provides safety and low-level features together}
    sent: "2017-05-17T09:57:51.012Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1e8492217cca58856f07"
    text: {Sure, you can make it safe by removing most of its features and killing its purpose. ;-) So that Red users will have to use C language to do the work that was previously possible with R/S...}
    sent: "2017-05-17T09:57:24.676Z"
    editedAt: "2017-05-17T09:57:58.289Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1e6e9f4f4ab05bd1fa69"
    text: "or, can't we make it safe? :)"
    sent: "2017-05-17T09:57:02.686Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1e6e0a783b6c0aa88984"
    text: {No, this should not be handled, but it should be left to crash.}
    sent: "2017-05-17T09:57:02.115Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1e3692217cca58856d51"
    text: "oh, can't we handle this?"
    sent: "2017-05-17T09:56:06.635Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1e109f4f4ab05bd1f94a"
    text: {R/S is an unsafe language, so working with it from the REPL is counter-productive, each runtime error will make the REPL exit (which is desirable, as R/S can easily corrupt the memory in subtle ways, so closing the process is the safest thing to do in such cases).}
    sent: "2017-05-17T09:55:28.849Z"
    editedAt: "2017-05-17T09:56:30.334Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1d92f3001cd3422daf93"
    text: {nice, this is a good enough feature just because it allows you to write all the code together and work with repl}
    sent: "2017-05-17T09:53:22.795Z"
    editedAt: "2017-05-17T09:53:33.710Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1d6083cb5db0733d5b74"
    text: {@maximvl ^/> @dockimbel and do we have plans to support writing R/S level code in Red?^/^/Yes. ;-)}
    sent: "2017-05-17T09:52:32.736Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1d4483cb5db0733d5b33"
    text: {Though, we can revisit those aspects when we'll come to adding user-types.}
    sent: "2017-05-17T09:52:04.473Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1c66f3001cd3422da92f"
    text: {@maximvl It would make the implementation more complex to allow them to be created at Red level, and there is no real need for it. You can accomplish the same using natives if you want. Actions are just the reflection of the internal architecture, they provide no special value to users (until we get to user-types). New actions could be considered for inclusion if they can provide useful new features, and be polymorphic enough.}
    sent: "2017-05-17T09:48:22.622Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1c5a8a05641b118ee744"
    text: {I saw this is hardcoded list, this why I assumed users can't change it}
    sent: "2017-05-17T09:48:10.013Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1c0e631b8e4e61e496ad"
    text: {@maximvl if you are interested in actions, take a look at sources in `%datatype/` folder, how they are implemented.}
    sent: "2017-05-17T09:46:54.869Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c1bb083cb5db0733d51dd"
    text: "@maximvl it's easier ;)"
    sent: "2017-05-17T09:45:20.246Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c1ba52b926f8a6763b6ac"
    text: "@rebolek how did you make that decision?"
    sent: "2017-05-17T09:45:09.683Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1b969f4f4ab05bd1ec44"
    text: "Just write a function then."
    sent: "2017-05-17T09:44:54.014Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c1b935e34568d5e62175f"
    text: "or in more efficient way"
    sent: "2017-05-17T09:44:51.893Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1b7dc4d73f445ab62fae"
    text: "it can be implemented as `1 = index? find s1 s2`"
    sent: "2017-05-17T09:44:29.759Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1b67c4d73f445ab62f5f"
    text: {for example, `prefix?` which would check if one series contains another in beginning}
    sent: "2017-05-17T09:44:07.369Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1b6283cb5db0733d5095"
    text: {There's a lot of supported actions, maybe there's already one that does what you want.}
    sent: "2017-05-17T09:44:02.738Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c1b5492217cca58855f14"
    text: {I'm trying to understand what should I make an action and what a regular function}
    sent: "2017-05-17T09:43:48.106Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "591c1afd00efc2bb3e7736a5"
    text: {You can add them now (when compiled), but keep in mind that you need to add new action for all supported datatypes, it's a lot of code.}
    sent: "2017-05-17T09:42:21.270Z"
    editedAt: "2017-05-17T09:42:41.707Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c1a9b92217cca58855bb7"
    text: {ye, for sure we need Red compiler in Red, the questions is with all this will one be able to add new actions in runtime or not}
    sent: "2017-05-17T09:40:43.594Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1a6233e9ee771cb659ce"
    text: {I see. Certainly do not expect it before compiler rewrite in Red.}
    sent: "2017-05-17T09:39:46.272Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c1a4b92217cca58855a74"
    text: "@rebolek yep, in interpreter"
    sent: "2017-05-17T09:39:23.083Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c1a3d83cb5db0733d49d7"
    text: {@maximvl in compiler,  you have `routine` already. Do you mean in interpreter?}
    sent: "2017-05-17T09:39:09.521Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c19c683cb5db0733d468e"
    text: {@dockimbel and do we have plans to support writing R/S level code in Red?}
    sent: "2017-05-17T09:37:10.826Z"
    editedAt: "2017-05-17T09:38:44.222Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c18f800efc2bb3e772c62"
    text: "any reason for this?"
    sent: "2017-05-17T09:33:44.050Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c18a9f3001cd3422d94a2"
    text: {You can't at Red level (only at R/S level). Actions are tied closely to datatypes and the type hierarchy. They define the core Red API.}
    sent: "2017-05-17T09:32:25.635Z"
    editedAt: "2017-05-17T09:33:26.295Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c1836631b8e4e61e4857d"
    text: "how do I define my own action?"
    sent: "2017-05-17T09:30:30.611Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c18120a783b6c0aa86c4a"
    text: {Actions are the *methods* of the datatypes *classes*, they use a table-based single-dispatch. Natives are free-form.}
    sent: "2017-05-17T09:29:54.901Z"
    editedAt: "2017-05-17T09:31:18.497Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c161ff3001cd3422d8684"
    text: {`action!` manipulate datatypes (for each type there is list of actions it supports). `native!` are functions that are written on lower lever mostly for speed or OS access.}
    sent: "2017-05-17T09:21:35.276Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c134c631b8e4e61e46dbb"
    text: {what is a difference between `action!` and `native!`?}
    sent: "2017-05-17T09:09:32.753Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c12c40a783b6c0aa852f2"
    text: {The mapping between the source code and the s-expressions is the core feature we could re-use, if it's applicable to Red and efficient enough.}
    sent: "2017-05-17T09:07:16.425Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c11990a783b6c0aa84dec"
    text: "but I read a lot about design and ideas in it"
    sent: "2017-05-17T09:02:17.701Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c118bf3001cd3422d712b"
    text: {@maximvl didn't use LightTable, cause Java and it's runtime is too heavy ;)}
    status: true
    sent: "2017-05-17T09:02:03.714Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c116f631b8e4e61e46573"
    text: {don't know how they did in Clojure, but I can check it out}
    sent: "2017-05-17T09:01:35.056Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c10019f4f4ab05bd1b35a"
    text: {@maximvl ^/> @dockimbel so the smalltalk-like contexts browser is possible?^/^/Certainly.^/> something I worry about is that word's text representation has no information about contexts, so I wonder how can we bind values to text in IDE or something^/^/That a research topic, it's a complex issue to solve, they are several options, one could be to build a structured editor (like Lisps have). Do you have more details on how Lighttable solved it for Clojure?}
    sent: "2017-05-17T08:55:29.849Z"
    editedAt: "2017-05-17T08:58:15.724Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c0cc39f4f4ab05bd1a4dd"
    text: {I like the idea of light table, where you have separate pieces of code as separate "entities", while they can actually be from a single file}
    sent: "2017-05-17T08:41:39.886Z"
    editedAt: "2017-05-17T08:42:06.154Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c0c6b83cb5db0733d018a"
    text: {we can try to optimize it, but in general this is inevitable}
    sent: "2017-05-17T08:40:11.342Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c081a92217cca5884fcbe"
    text: {The thing that worries me a bit is that you have to `load` the source on each change, probably.}
    sent: "2017-05-17T08:21:46.955Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c0805d1a7716a0ad525b4"
    text: "idk if this is useful or not"
    sent: "2017-05-17T08:21:25.912Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c07f983cb5db0733cea41"
    text: "but you still edit the text source"
    sent: "2017-05-17T08:21:13.905Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c07cc2b926f8a676355f7"
    text: {then clicking things in loaded representation you may call `inspect` with actual values right away}
    sent: "2017-05-17T08:20:28.117Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c07b2d1a7716a0ad52428"
    text: {I'm thinking about having separate text editor and loaded value shown on a side}
    sent: "2017-05-17T08:20:02.067Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c07972b926f8a67635551"
    text: "@rebolek hm, interesting"
    sent: "2017-05-17T08:19:35.582Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c076f0a783b6c0aa81b87"
    text: {I haven't tried it yet, but I think it could work.}
    sent: "2017-05-17T08:18:55.595Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c07569f4f4ab05bd18ce9"
    text: {So when you click on something, you know the index in text source and from that index you can get value in loaded source.}
    sent: "2017-05-17T08:18:30.246Z"
    editedAt: "2017-05-17T08:18:37.077Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c07332b926f8a6763537e"
    text: {My idea is that you load the code and map each value to index in the source.}
    sent: "2017-05-17T08:17:55.855Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c070f631b8e4e61e43771"
    text: {@rebolek let's say the func `inspect` inspects values, and user clicks on second `x`, what would you pass to it?}
    sent: "2017-05-17T08:17:19.613Z"
    editedAt: "2017-05-17T08:17:55.796Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c070ef3001cd3422d3cd4"
    text: "Hm, wait a moment..."
    sent: "2017-05-17T08:17:18.747Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c06e42b926f8a67635246"
    text: "@rebolek I don't get it"
    sent: "2017-05-17T08:16:36.785Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c06b69f4f4ab05bd18ac3"
    text: {If you load that text, you can map both `x`s to right values.}
    sent: "2017-05-17T08:15:50.078Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c0647f3001cd3422d384c"
    text: {I imagine a user clicking on `x` trying to find out which value is inside and maybe inspect it's context}
    sent: "2017-05-17T08:13:59.245Z"
    editedAt: "2017-05-17T08:15:38.027Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c06160a783b6c0aa815a4"
    text: {how will you find out that `x` inside `z` is 3, not 5?}
    sent: "2017-05-17T08:13:10.325Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c05d70a783b6c0aa814dc"
    text: {let's say the code^/```^/object [^/  x: 5^/  y: object [^/    x: 3^/    z: func [] [x]^/   ]^/]^/```}
    sent: "2017-05-17T08:12:07.923Z"
    editedAt: "2017-05-17T08:12:52.940Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c05d200efc2bb3e76d146"
    text: "That is the question... "
    sent: "2017-05-17T08:12:02.857Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c05a7c4d73f445ab5c199"
    text: " @rebolek so how do you man one to another?"
    sent: "2017-05-17T08:11:19.065Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c05910a783b6c0aa81348"
    text: {You can have text representation for editor and loaded code in memory for other things.}
    sent: "2017-05-17T08:10:57.298Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591c04eb00efc2bb3e76cd76"
    text: {something I worry about is that word's text representation has no information about contexts, so I wonder how can we bind values to text in IDE or something}
    sent: "2017-05-17T08:08:11.212Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591c04579f4f4ab05bd1805c"
    text: {@dockimbel so the smalltalk-like contexts browser is possible?}
    sent: "2017-05-17T08:05:43.183Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591bf29600efc2bb3e767c95"
    text: {Sorry for bad wording, doing other things at the same time.}
    sent: "2017-05-17T06:49:58.122Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591bf27092217cca58849f29"
    text: "@dockimbel Thanks."
    sent: "2017-05-17T06:49:20.493Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "591bf266631b8e4e61e3d69c"
    text: "Yes."
    sent: "2017-05-17T06:49:10.584Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591bf15500efc2bb3e7675c6"
    text: "Shoul go to Peter instead?"
    sent: "2017-05-17T06:44:37.652Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "591befd283cb5db0733c7553"
    text: {@pekr Values are alive if they are can be reached, so not just referenced by a word, but just stored in any container type.}
    sent: "2017-05-17T06:38:10.651Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591bbbc0d1a7716a0ad3f2eb"
    text: {@maximvl  > @greggirwin it's not root, `func [block /local x] [x: context [] bind block x]` will return you a block binded to a context you don't know anything about^/^/And unless you bind a word to it, it will be garbage collected. As far as I know, whilst values are anonymous, they can only exist if they are bound to a word.}
    sent: "2017-05-17T02:56:00.653Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "591b3d50d1a7716a0ad1e578"
    text: "I had no excuse not to do it :)"
    sent: "2017-05-16T17:56:32.770Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591b3d44c4d73f445ab2b27c"
    text: "@maximvl it was too simple to add it"
    sent: "2017-05-16T17:56:20.120Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591b3c450a783b6c0aa4dad5"
    text: {@rebolek glad that you found it useful :)^/this idea is not new, actually one of the reasons Unix is so simple is that instead of gracefully dealing with any issue they left it to programmers, returning error codes and other things, so now we have to decide how to handle them in our programs}
    sent: "2017-05-16T17:52:05.059Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b3b759f4f4ab05bce60a9"
    text: {which means there are no reasons to add it and increase complexity of Red}
    sent: "2017-05-16T17:48:37.320Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "591b3b5000efc2bb3e7394bb"
    text: {@greggirwin ok, I can't find really good example to show off this feature}
    sent: "2017-05-16T17:48:00.813Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b38cd9f4f4ab05bce52ee"
    text: {Would probably be useful only after we have ports or user types}
    sent: "2017-05-16T17:37:17.565Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591b3889f3001cd3422a06c0"
    text: {Moreover, you can already create wrapper over functions you want to extend, so it's not like it would solve any problem we have. Though, it could still be interesting to dig in, to see if it could bring any value, and if such added value is worth the cost/overhead.}
    sent: "2017-05-16T17:36:09.244Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b37c933e9ee771cb2b2b2"
    text: {@geekyi I'm not sure, I never gave it a deeper look, so I'm not even sure such feature would be compatible with the Redbol semantics.}
    sent: "2017-05-16T17:32:57.902Z"
    editedAt: "2017-05-16T17:33:28.480Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b3763631b8e4e61e0f694"
    text: {Sorry, on mobile automatically posted half my thoughts}
    sent: "2017-05-16T17:31:15.659Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591b372200efc2bb3e737f28"
    text: "@dockimbel oh. Is such a feature possible?"
    sent: "2017-05-16T17:30:10.232Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591b360692217cca5881b943"
    text: {@geekyi Ports <> multiple dispatch. Actions in Redbol are polymorphic on the first argument only, so they are single-dispatch.}
    sent: "2017-05-16T17:25:26.777Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b35410a783b6c0aa4b7da"
    text: {```^/>> json/decode {null}^/== none^/>> json/null-value: 0^/== 0^/>> json/decode {null}^/== 0^/>> json/null-value: func []["supports func also"]^/== func []["supports func also"]^/>> json/decode {null}^/== "supports func also"^/```}
    sent: "2017-05-16T17:22:09.490Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591b34b283cb5db073398457"
    text: {@maximvl @dockimbel That is good idea, so I add `null-value` to `json` context: https://github.com/rebolek/red-tools/blob/master/json.red}
    sent: "2017-05-16T17:19:46.097Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591b33d783cb5db073397eb1"
    text: {@maximvl See my reply above about the `json` example you submitted.}
    sent: "2017-05-16T17:16:07.079Z"
    editedAt: "2017-05-16T17:16:12.273Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b33bd2b926f8a67601830"
    text: {If we can do that with ports.. I'm fine with that. I don't understand how that would work tho}
    sent: "2017-05-16T17:15:41.625Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591b33712b926f8a67601654"
    text: {So if you need to extend any function, you simply define a new datatype}
    sent: "2017-05-16T17:14:25.133Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591b3335631b8e4e61e0dd8a"
    text: {They just have it everywhere. It's the main feature of the language}
    sent: "2017-05-16T17:13:25.374Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591b331283cb5db073397b53"
    text: {In Julia, they have multiple dispatch on the datatype. It works similar to `action!`in Redbol}
    sent: "2017-05-16T17:12:50.910Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591b308d2b926f8a67600a98"
    text: {what do you mean by "just exposing words from your code context"?}
    sent: "2017-05-16T17:02:05.779Z"
    editedAt: "2017-05-16T17:02:14.066Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b305bf3001cd34229ddcc"
    text: "they are thread-local in CL"
    sent: "2017-05-16T17:01:15.371Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b301c2b926f8a67600812"
    text: {@maximvl I think those are implementation details, both in Redbol and in CL, if you don't integrate in your code design support for those "special variables", users would be stuck, and will need to modify your code. So the core requirement is the same, CL provides a ready-made framework for that, though, for many cases, just exposing "special" words from your code context in Redbol, is usually enough (in both cases, you need to document it). Remain the concurrency cases, how do "special variables" play with that in CL?}
    sent: "2017-05-16T17:00:12.054Z"
    editedAt: "2017-05-16T17:00:59.227Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b2ef483cb5db0733967d2"
    text: {@dockimbel almost what CL does except your solution only works for 1 level of code}
    sent: "2017-05-16T16:55:16.152Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2ee18a05641b118b2720"
    text: {If I may play Devil's Advocate for a moment. What if I don't believe it's a good idea at all Maxim? How will you show me, prove to me, that it is?}
    sent: "2017-05-16T16:54:57.026Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b2eb733e9ee771cb282fe"
    text: {@maximvl You could re-bind `source` body to a specific context for the time of the capture, so you could avoid touching the global context.}
    sent: "2017-05-16T16:54:15.499Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b2e9683cb5db0733965ae"
    text: {I'll also add "How scalable do we need to be?" and "Has this approach been *proven* to improve scalability in codebases built and maintained by average programmers?"}
    sent: "2017-05-16T16:53:42.291Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b2e7c83cb5db0733964ed"
    text: {@dockimbel looks good, but still you modify it for all the world}
    sent: "2017-05-16T16:53:16.730Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2e378a05641b118b2394"
    text: {There is no perfect solution. We can probably agree on that. What Redbol does, very well, is address a balance of common, pragmatic needs with great flexibility. It is accessible, less academically intimidating that some langs, yet does let us solve problems like this in very new and different ways. I really do have to run, but let's think about the *problem* we need to solve. i.e., is there an even better way to do it than the CL model. }
    sent: "2017-05-16T16:52:07.059Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b2e019f4f4ab05bce1e23"
    text: "I'm trying to point out that this is not scalable"
    sent: "2017-05-16T16:51:13.848Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2de49f4f4ab05bce1d66"
    text: {@rebolek ok, but is every function doing something is just two lines of code I can copy and modify every time?}
    sent: "2017-05-16T16:50:44.486Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2db683cb5db073396160"
    text: {@greggirwin CL has a lot of things, we don't know what exactly made it unsuccessful}
    sent: "2017-05-16T16:49:58.022Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2dac9f4f4ab05bce1bfe"
    text: {@maximvl `source` is just a simple wrapper for `mold :function`}
    sent: "2017-05-16T16:49:48.703Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591b2d9683cb5db073396117"
    text: {now what if I want to fix bug in both? you get all kinds of problems of duplicated code right here}
    sent: "2017-05-16T16:49:26.311Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2d7bf3001cd34229ce8d"
    text: {@rebolek so I have to write another function, which basically the same as `source` except it prints to another output}
    sent: "2017-05-16T16:48:59.805Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2d73631b8e4e61e0c135"
    text: {If you want to play that game Maxim, has CL's approach made it successful? :^^\}
    sent: "2017-05-16T16:48:51.526Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b2d5c00efc2bb3e734e5e"
    text: {@maximvl You can temporarily redefine `print` to capture the output, we used to do such [things](http://www.rebol.org/view-script.r?script=capture.r) in Rebol. No need to change anything in `source`.}
    sent: "2017-05-16T16:48:28.443Z"
    editedAt: "2017-05-16T16:50:37.513Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b2d532b926f8a675ff906"
    text: "@maximvl You can, just not with `source`"
    sent: "2017-05-16T16:48:19.511Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591b2d33d1a7716a0ad1933d"
    text: {apparently not, because nobody added `/into` for it}
    sent: "2017-05-16T16:47:47.692Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2d32f3001cd34229cd2a"
    text: {"The problem" may not be a problem at all. As Doc says, we want to improve on things we've learned from Rebol, but also maintain an overall design coherence and aesthetic. The great thing, of course, is that you can build things in Red to prove them out. It may not be as pretty as we'd like sometimes, but it can probably be done. e.g. write your funcs and doc their customizable bits, then bind them into a context that has those customizations.}
    sent: "2017-05-16T16:47:46.009Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b2d20d1a7716a0ad192ed"
    text: {@greggirwin can you use `source` function to show source in the gui text label?}
    sent: "2017-05-16T16:47:28.608Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2c8f00efc2bb3e734a07"
    text: {Right, now, is the CL approach a good fit for Red? That's why I like concrete examples.}
    sent: "2017-05-16T16:45:03.769Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b2c7d2b926f8a675ff563"
    text: {the problem with original approach in this case is that you are trying to cover all use cases users of your code may have}
    sent: "2017-05-16T16:44:45.060Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2c4f0a783b6c0aa48dad"
    text: {>Now the user of your code needs to know about your code in order to replace the custom bits^/^/that's true, however, as it's done in CL, in docs you specify your "customizable" variables and what do they do}
    sent: "2017-05-16T16:43:59.595Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2bfec4d73f445ab25b69"
    text: {> in a high level this allows you, as a programmer to leave details of your code to be controlled by the programmer who uses your code^/^/DI and IoC can be great tools, but this approach also has costs, yes? Now the user of your code needs to know about your code in order to replace the custom bits. Alternately, you need to define a very clear API for pluggable elements. }
    sent: "2017-05-16T16:42:38.991Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b2be1c4d73f445ab25b28"
    text: {I guess you could just have a `json/null-replacer` word set up to provide the same feature in Red (if `json` support is wrapped in a `json` context).}
    sent: "2017-05-16T16:42:09.821Z"
    editedAt: "2017-05-16T16:42:39.621Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b2bdfd1a7716a0ad18ac0"
    text: "ports can's do this"
    sent: "2017-05-16T16:42:07.401Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2bcef3001cd34229c529"
    text: {and maybe in your project it's nice to have `0` instead of `null` so you may write `with [null-replacer: 0] [decode-json json]`}
    sent: "2017-05-16T16:41:50.866Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2b9d9f4f4ab05bce0f65"
    text: {you may use special `null-replacer` variable which will have a value to handle `null`s}
    sent: "2017-05-16T16:41:01.642Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2b62f3001cd34229c33b"
    text: {then, as an author of json library you may leave this detail to the users}
    sent: "2017-05-16T16:40:02.509Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2b469f4f4ab05bce0e3f"
    text: {back to the json example, let's say you don't have proper way to represent `null`}
    sent: "2017-05-16T16:39:34.172Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2b2a00efc2bb3e73429d"
    text: {Using ports in Rebol2, you can redirect to pretty much anything you want. You can even write virtual ports to mimic a purely in -memory data structure. Ports act as virtual series. We'll incorporate and try to improve those features in Red ports.}
    sent: "2017-05-16T16:39:06.247Z"
    editedAt: "2017-05-16T16:39:48.240Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b2ae300efc2bb3e734182"
    text: {again, I'm giving you IO examples, but the general idea is much bigger}
    sent: "2017-05-16T16:37:55.842Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2ac7d1a7716a0ad184d7"
    text: {@dockimbel could you explain this? from what I saw in Rebol it still has the same issue}
    sent: "2017-05-16T16:37:27.468Z"
    editedAt: "2017-05-16T16:38:34.842Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2a1a9f4f4ab05bce06dd"
    text: {@maximvl ^/> @greggirwin I still believe that `output as a string` should not be an ability, but rather we should have a way to redefine default input/output/etc^/^/That will come with ports and full I/O support.}
    sent: "2017-05-16T16:34:34.854Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b2a0bd1a7716a0ad1819d"
    text: "@greggirwin good luck with it :)"
    sent: "2017-05-16T16:34:19.914Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "591b29e2c4d73f445ab2517c"
    text: {I have to run, prepping to head out of town and much to do today. I'll be back in a week. These are good questions, best solved, I think, with concrete examples.}
    sent: "2017-05-16T16:33:38.516Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b29d583cb5db073394b41"
    text: {I need to pass additional params and they have nothing to do with json library}
    sent: "2017-05-16T16:33:25.759Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b29add1a7716a0ad18049"
    text: {e.g. what if I want to `append` to file, instead of truncating it?}
    sent: "2017-05-16T16:32:45.724Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b299d0a783b6c0aa48031"
    text: {but when it becomes part of your code and your code have to solve all the complexity which comes with it}
    sent: "2017-05-16T16:32:29.355Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b294d0a783b6c0aa47ed8"
    text: {I understand the idea. The trick is to make it fit with Red's design. Doing it at the mezz level, people can easily choose, as you say. The traditional approach in Red would be to spec a func to take `[string! file! url! port!]` and dispatch internally based on the type.}
    sent: "2017-05-16T16:31:09.934Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b28f9f3001cd34229b73f"
    text: {and this change will only apply to this piece of code, everything else in system will be untouched, so if other things use `*standard-input*` as well - they will not be confused}
    sent: "2017-05-16T16:29:45.991Z"
    editedAt: "2017-05-16T16:30:15.094Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b28948a05641b118b08a2"
    text: {so there is no need to go into original source code and pass everywhere `/into` parameter or something}
    sent: "2017-05-16T16:28:04.234Z"
    editedAt: "2017-05-16T16:28:16.545Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b286692217cca58816eed"
    text: {let's say you want to parse json, you just use `read` function, which reads from a special `*standard-input*`, and then somebody can redefine it to take input from file, from socket, from a string}
    sent: "2017-05-16T16:27:18.383Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2832d1a7716a0ad178f0"
    text: {in a high level this allows you, as a programmer to leave details of your code to be controlled by the programmer who uses your code}
    sent: "2017-05-16T16:26:26.913Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b27abd1a7716a0ad175e5"
    text: {I believe, and this feature used *a lot* in common lisp, that it gives greatest possibilities to programmers}
    sent: "2017-05-16T16:24:11.680Z"
    editedAt: "2017-05-16T16:24:21.538Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b27a3f3001cd34229b1ca"
    text: {We can certainly do things in an FP way, but that's not terribly friendly IMO. We can also use your CL scoping approach at the mezz level.}
    sent: "2017-05-16T16:24:03.208Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b276b8a05641b118b03ab"
    text: {If you design a great pipe and filter system for Red values, I'm sure it would be useful.}
    sent: "2017-05-16T16:23:07.493Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b2768c4d73f445ab24645"
    text: {I still encourage us to find a way to redefine word values locally in runtime}
    sent: "2017-05-16T16:23:04.699Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2723f3001cd34229af52"
    text: "it's not a universal solution"
    sent: "2017-05-16T16:21:55.301Z"
    editedAt: "2017-05-16T16:21:57.714Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b271b9f4f4ab05bcdf877"
    text: {@greggirwin ok, will he add `/into` to any function which prints things?}
    sent: "2017-05-16T16:21:47.391Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b2709d1a7716a0ad171b0"
    text: "Ah, I see what you mean now."
    sent: "2017-05-16T16:21:29.414Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b26f3f3001cd34229ae64"
    text: {Oldes had an `/into` refinement in his `help` IIRC. }
    sent: "2017-05-16T16:21:07.758Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b26e683cb5db073393c3b"
    text: {@greggirwin it's not root, `func [block /local x] [x: context [] bind block x]` will return you a block binded to a context you don't know anything about}
    sent: "2017-05-16T16:20:54.018Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b26ae92217cca588166eb"
    text: "We have the global context as the root."
    sent: "2017-05-16T16:19:58.760Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b26ad2b926f8a675fd7ad"
    text: {@greggirwin I still believe that `output as a string` should not be an ability, but rather we should have a way to redefine default input/output/etc}
    sent: "2017-05-16T16:19:57.565Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b268f33e9ee771cb25449"
    text: {Yes, there are big differences from ST. We don't maintain an image between sessions either. But that's a great thought experiment. What would it take to serialize the system state, perhaps including history if an app keeps it?}
    sent: "2017-05-16T16:19:27.916Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b26699f4f4ab05bcdf463"
    text: {while in Red words belong to contexts and there is no way to get all of them (at least I'm not aware of)}
    sent: "2017-05-16T16:18:49.004Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b26550a783b6c0aa4701c"
    text: {And it can integrate your console func helper too Maxim. I added back the ability to get help output as a string, so that should work again.}
    sent: "2017-05-16T16:18:29.637Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b26439f4f4ab05bcdf31b"
    text: {except in Smalltalk you have a global class tree available}
    sent: "2017-05-16T16:18:11.516Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b260dd1a7716a0ad16c3b"
    text: {@greggirwin I think we should do one for Red, the time has come :)}
    sent: "2017-05-16T16:17:16.999Z"
    editedAt: "2017-05-16T16:17:29.141Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b25e100efc2bb3e732765"
    text: {Many years ago, Ammon Johnson and I built a Smalltalk style system explorer for R2. Romano Paolo Tenca also did Anamonitor, which was a different take. We didn't spend enough time to make it robust, but we could do that for Red, so you can inspect the state of the session, browse and modify values, etc. It opens up a *lot* of questions though. A system browser is pretty easy though.}
    sent: "2017-05-16T16:16:33.915Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b256f8a05641b118af92c"
    text: {Is console help the best way to do that? If you forgive the quick hack...^/```^/Red []^/^/form-all: func [blk][^/^-forall blk [blk/1: form blk/1]^/^-blk^/]^/^/get-sys-words: func [test [function!]][^/^-collect [^/^-^-foreach word words-of system/words [^/^-^-^-if test get/any word [keep word]^/^-^-]^/^-]^/]^/^/list-cur-text: func [face][pick face/data face/selected]^/list-cur-word: func [face][to word! list-cur-text face]^/^/top-objs: form-all get-sys-words :object?^/^/view [^/^-style text-list: text-list 150^/^-list-1: text-list data top-objs [^/^-^-val: get list-cur-word face^/^-^-if object? :val [o-1: :val  list-2/data: form-all words-of val]^/^-^-clear list-3/data^/^-]^/^-list-2: text-list [^/^-^-val: get in o-1 list-cur-word face^/^-^-list-3/data: either object? :val [form-all words-of val][^/^-^-^-reduce [form get in :o-1 list-cur-word face]^/^-^-]^/^-]^/^-list-3: text-list^/]^/```}
    sent: "2017-05-16T16:14:39.370Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591ae97900efc2bb3e71dde6"
    text: {By default it should show only the first level and information about.}
    sent: "2017-05-16T11:58:49.621Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "591ae94492217cca58801805"
    text: {I think help should have some options how much data it shows and how deep it goes into levels and the structure ob objects or blocks / series.}
    sent: "2017-05-16T11:57:56.827Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "591ab6ab9f4f4ab05bcbc0f6"
    text: {It was an idea to try, and I'm fine removing it if people don't think it's useful.}
    sent: "2017-05-16T08:22:03.923Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591ab682631b8e4e61de5763"
    text: {I agree that raw image data isn't helpful. Aside from possibly extending beyond the screen (which we can address), what don't you like about viewing large images?}
    sent: "2017-05-16T08:21:22.395Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591ab5cc00efc2bb3e70e8d0"
    text: {@greggirwin I don't like viewing image from help.. some images may be very large... I also don't like probing raw image data in console for the same reason.}
    sent: "2017-05-16T08:18:20.339Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5919ef8b2b926f8a675a78c2"
    text: "That's my guess."
    sent: "2017-05-15T18:12:27.445Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919ef7f92217cca587c0740"
    text: {Maybe an `image!`datatype not part of the Linux distro?}
    sent: "2017-05-15T18:12:15.343Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5919ef7a92217cca587c0728"
    text: "Thanks."
    sent: "2017-05-15T18:12:10.387Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919ef4df3001cd342245748"
    text: "Yes, the same error"
    sent: "2017-05-15T18:11:25.753Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5919eeff83cb5db07333d028"
    text: "If you do `image? none` do you get the error?"
    sent: "2017-05-15T18:10:07.791Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919ee8600efc2bb3e6dbc1d"
    text: "Thanks guys."
    sent: "2017-05-15T18:08:06.830Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919ec792b926f8a675a6793"
    text: "OK, submitted an error report ...."
    sent: "2017-05-15T17:59:21.865Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5919e72692217cca587bd5d5"
    text: {@pekr I rebuilt my [docker container](https://hub.docker.com/r/dander/redlang/) (using the latest build on the download page), and it reproduces the issue as well. I'm no linux expert, so I could have something missing in there as well. It's a ready-made environment if anyone wants to look at it though}
    sent: "2017-05-15T17:36:38.957Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5919e4738a05641b11855b1f"
    text: {@greggirwin So just tried under my a bit dated Ubuntu (Zentyal server). The error is the same. Tried `ldd red`, there seems to be no dependency missing. Please advice, if I should create an error report ....}
    sent: "2017-05-15T17:25:07.580Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5919df850a783b6c0a9e9ba9"
    text: {I dont want to create false positives, I will go thru the c9 Red installation notes again ...}
    sent: "2017-05-15T17:04:05.845Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5919df5033e9ee771cac9a8c"
    text: {I migjt try on my Linux server directly, once at home and with a little of free time. }
    sent: "2017-05-15T17:03:12.028Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5919df23f3001cd3422400d9"
    text: {Yes. I have installed it according to his docs. Downloaded latest daily build. Red runs, just the help system returns an error ...}
    sent: "2017-05-15T17:02:27.461Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5919dbbb8a05641b11852f96"
    text: {@pekr, did you use @gltewalt's setup guide? Is it an old version of Red? }
    sent: "2017-05-15T16:47:55.571Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919daff83cb5db073336724"
    text: "Thanks Arnold."
    sent: "2017-05-15T16:44:47.496Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919c43a83cb5db07332e4b1"
    text: {@greggirwin I removed your scripts from the other collection as you wished. }
    sent: "2017-05-15T15:07:38.181Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5919ba9e92217cca587ad3e8"
    text: {Just tried Cloud9 IDE I remember I had access since my former Beagle Bone experiments. The integration went well. Launched the console and found out following:^/^/```^/>> help system^/*** Script Error: image! has no value^/*** Where: =^/```^/I am providing info "as-is". I don't have Linux installed here right now, so can't test, if it is a general Red under Linux problem, or it is related to Cloud9 ...}
    sent: "2017-05-15T14:26:38.805Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5919b409d1a7716a0acaa216"
    text: {We'll probably evolve `red/code` once we find some spare time for that.}
    sent: "2017-05-15T13:58:33.819Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5919b39b631b8e4e61d9f89e"
    text: "Yes, I have 100% failure rate :D"
    sent: "2017-05-15T13:56:43.751Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "5919b37ec4d73f445aab8a85"
    text: "You mean your 1 json pull request? :)"
    sent: "2017-05-15T13:56:14.351Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5919b3568a05641b11845c09"
    text: {@Oldes It's not that easy to get something accepted into red/code, so red/community will be more open hopefully.}
    sent: "2017-05-15T13:55:34.555Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919b2d3f3001cd34223082f"
    text: {As there is not many contributions in red/code.. I'm quite not sure if it makes sense. But maybe I'm wrong.}
    sent: "2017-05-15T13:53:23.130Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5919a3fd83cb5db073324c13"
    text: {red/code entries are curated whereas red/community entries will only have cursory checks e.g. spam, malicious, inappropriate content.}
    sent: "2017-05-15T12:50:05.923Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5919a1e200efc2bb3e6c335c"
    text: {What is difference between `red/code` and `red/community` now?}
    sent: "2017-05-15T12:41:06.318Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59199d03c4d73f445aab1d9e"
    text: "Cool!"
    sent: "2017-05-15T12:20:19.887Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59199c94d1a7716a0aca2913"
    text: {You can send PRs to post scripts, all the details are explained in on the home page. For rebolers, this is similair in purpose to rebol.org. We will have a dedicated site in the future for packages once we get modules support. All people from Red Team can accept PRs there, so I won't be a bottleneck there. ;-)}
    sent: "2017-05-15T12:18:28.762Z"
    editedAt: "2017-05-15T12:20:48.861Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59199c359f4f4ab05bc6fb70"
    text: {https://twitter.com/red_lang/status/864092173112754177}
    sent: "2017-05-15T12:16:53.508Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5919996fd1a7716a0aca1b26"
    text: {Searching is an operation, which involves comparisons. I think that's already too much, but it's implemented so you can use it. I think you really misunderstand the purpose of `handle!` which is to *hide* information from the user, because it's a lower-layer abstraction that we allow to leak to higher level, for specific purpose (and not for general purpose). In View engine, we use it to expose the low-level objects underlying each face, so that users could extend View engine by calling external API and passing that handle. That's the only reason it is exposed, otherwise we could just keep it at R/S level. That is where `handle!` comes handy, to make it *opaque*, so that users don't bother with it, nor modify it in any way. Another usage (not implemented yet), is for the native call stack pointer returned in `error!` objects.}
    sent: "2017-05-15T12:05:03.748Z"
    editedAt: "2017-05-15T12:13:01.248Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591997e183cb5db073321070"
    text: {I see we implemented `compare` action for handles, so then you can search for it in `block!` or `hash!` series.}
    sent: "2017-05-15T11:58:25.538Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591994c1d1a7716a0aca04fa"
    text: {The only reason I see is, that the hashtable is taking just the data and so for it `integer!` would look same like `handle!` and so they could collide by accident.}
    sent: "2017-05-15T11:45:05.529Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5919940f83cb5db07331fe03"
    text: {And why it should not be used in searchable container?}
    sent: "2017-05-15T11:42:07.041Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5919917083cb5db07331f1a2"
    text: {@dockimbel I still don't understand why it should not be used as a key in map. It is not operation on `handle!`, is it?}
    sent: "2017-05-15T11:30:56.706Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59197ca7d1a7716a0ac99fbb"
    text: {Ok, I will add another layer of abstraction. I just though it shouldn't be necessary.}
    sent: "2017-05-15T10:02:15.528Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59197bfc0a783b6c0a9ca4d3"
    text: {Please, don't try to use `handle!` as it was an `integer!`, that goes against its purpose. `handle!` is just to be stored in simple containers (not searchable) and passed around at Red level, that's all. If you need to do any other operation on it, either you are missing an abstraction layer, or you should not be using `handle!` at all, but just integers.}
    sent: "2017-05-15T09:59:24.622Z"
    editedAt: "2017-05-15T09:59:57.561Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59196fcd33e9ee771caa6ff8"
    text: "@Oldes I hope @dockimbel is not against it."
    sent: "2017-05-15T09:07:25.607Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59196c820a783b6c0a9c607c"
    text: {The question is, if @dockimbel will accept it, when he is against it.}
    sent: "2017-05-15T08:53:22.239Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59196c61f3001cd34221c467"
    text: {@rebolek it should be easy to support handle... just add it here: https://github.com/red/red/blob/master/runtime/hashtable.reds#L184 and maybe on some other place in this file.}
    sent: "2017-05-15T08:52:49.972Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59196ab583cb5db07331433a"
    text: {I don't want to make `handle!` in Red, I just want to use it as map key.}
    sent: "2017-05-15T08:45:41.697Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59196a8983cb5db0733142a5"
    text: {@Oldes No, but if I want to use it as map key, I need to convert it to integer and that can be done with `load form` only, AFAIK. You can’t do `to integer! handle`}
    sent: "2017-05-15T08:44:57.574Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59196a3f00efc2bb3e6b3796"
    text: {Btw... you are able to create valid `handle` using `load`? That should not be possible imho.}
    sent: "2017-05-15T08:43:43.709Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591969fb631b8e4e61d8a3da"
    text: {I personally has nothing against `handle` as a key in `map`.}
    sent: "2017-05-15T08:42:35.143Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591969208a05641b118315ab"
    text: {@Oldes many things can be done at R/S layer, but if your `handle!` points to gfx object, you want to work with it in Red. Having `handle!` as `map!` key can make it easier. And it is still just a key, you can't change it, do any computations with it. Of course, workarounds can be introduced for it, but they are not necessary IMO.}
    sent: "2017-05-15T08:38:56.572Z"
    editedAt: "2017-05-15T08:39:07.730Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919680983cb5db073313727"
    text: ":)"
    sent: "2017-05-15T08:34:17.238Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591967fad1a7716a0ac93d14"
    text: "ok... it is supported."
    sent: "2017-05-15T08:34:02.976Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591967c6631b8e4e61d89aa8"
    text: "@Oldes are you sure?"
    sent: "2017-05-15T08:33:10.163Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919678900efc2bb3e6b2c31"
    text: {@rebolek on the other side, why you need it as a key in `map`? `handle` is just `integer` and integers are not supported as keys in `map`.}
    sent: "2017-05-15T08:32:09.376Z"
    editedAt: "2017-05-15T08:32:37.230Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5919672033e9ee771caa466d"
    text: {But I understand, that many things can be done in R/S layer.}
    sent: "2017-05-15T08:30:24.311Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5919670692217cca58795143"
    text: {I'm for example using handles for sounds and quite understand, that you someone could use it to connect the sound with some other value.}
    sent: "2017-05-15T08:29:58.287Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591966c833e9ee771caa4502"
    text: {@dockimbel I quite don't understand why `handle!` value could not be used in `map!`. Could you please explain it?}
    sent: "2017-05-15T08:28:56.733Z"
    editedAt: "2017-05-15T08:29:09.702Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59195860631b8e4e61d858db"
    text: {@pekr maybe... Or I will introduce another layer that will map handles to some other values (maybe just integer with same value), to workaround this limitation.}
    sent: "2017-05-15T07:27:28.969Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591957f183cb5db07330ee58"
    text: {I am not guru at low level stuff, but might sound handy :-) btw - can you store it in blocks? Not so fast, but as an array of references (handles), it might just work ...^/}
    sent: "2017-05-15T07:25:37.224Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "591957a62b926f8a67578de9"
    text: "@pekr exactly"
    sent: "2017-05-15T07:24:22.486Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919579792217cca58790472"
    text: {Handle should be just passed around, not searched for (because that would expose their value at Red level, defeating their purpose).}
    sent: "2017-05-15T07:24:07.906Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5919577f33e9ee771ca9fc28"
    text: {@rebolek  - so you just want it to have it stored somewhere, being look-able, etc.? Something like storing xy gfx objects rendered by the foreign environment, which you need to keep track of?}
    sent: "2017-05-15T07:23:43.314Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59195602631b8e4e61d84bd9"
    text: {As I wrote, I do not need to do any computations. I just need it as a reference.}
    sent: "2017-05-15T07:17:22.493Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591955c9631b8e4e61d84b3d"
    text: {If you need to do any form of computation with handles, you should do it at R/S level.}
    sent: "2017-05-15T07:16:25.750Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5919554392217cca5878fab3"
    text: {I do not need it for computations, but it is handy to keep it it as a reference. It is a value that does not change during program's lifetime, so as a static key, it is pretty safe. I can map (no pun intended) handles to other values (ie to integer with `load form` hack), but do I really have to?}
    sent: "2017-05-15T07:14:11.992Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591954100a783b6c0a9bf031"
    text: {`handle!` is not supported in map! as key AFAIK. `handle!`is supposed to be an *opaque* value, not a value you use for any computation at Red level. If you need to use it as a key in a map, you are probably leaking low-level tasks to Red level.}
    sent: "2017-05-15T07:09:04.013Z"
    editedAt: "2017-05-15T07:09:52.975Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591953a20a783b6c0a9beed7"
    text: {@dockimbel It seems that even with adding `handle!` to those typesets, I can’t use it as a map key. I am not sure what else needs to be done to enable it.}
    sent: "2017-05-15T07:07:14.917Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5918f9439f4f4ab05bc49419"
    text: {I'm glad the code looks hackable too. That was one of my main goals.}
    sent: "2017-05-15T00:41:39.618Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5918f89b92217cca5877c38a"
    text: {Thanks @geekyi. Yes, the image thing was a fun little experiment I thought was nice.}
    sent: "2017-05-15T00:38:51.684Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5918f0a000efc2bb3e6988b3"
    text: {As someone who hasn't seen @greggirwin's help code before, it's quite nice to read (without comments!) and modify}
    sent: "2017-05-15T00:04:48.772Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5918ee852b926f8a67561a3d"
    text: {> We can easily change separator chars in the current `help` code. ^/^/Indeed: `help-ctx/DOC_SEP: "--"`}
    sent: "2017-05-14T23:55:49.750Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5918eadad1a7716a0ac78143"
    text: {Cool, if it's an image, `help` now displays it if you have view}
    sent: "2017-05-14T23:40:10.210Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5918b5d000efc2bb3e68b555"
    text: {We can easily change separator chars in the current `help` code. The doc string formatting for params includes quotes to avoid another separator. Harder to align as well, with type specs, though consistency would be nice. The main work lately has been more detailed alignment. If we mock up "ideal" output, we can look at the effort required to make it happen.}
    sent: "2017-05-14T19:53:52.223Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5918ad930a783b6c0a99af8a"
    text: {[![image.png](https://files.gitter.im/red/red/N5md/thumb/image.png)](https://files.gitter.im/red/red/N5md/image.png)}
    sent: "2017-05-14T19:18:43.650Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5918ad748a05641b118079e3"
    text: {I've not encountered a function with a *Doc string* like that `a "AA"`. The `word!` arguments are usually descriptive enough. It's strange they are displayed with quotes `"s3 doc string"` while the rest of the documentation isn't}
    sent: "2017-05-14T19:18:12.504Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5918aa3692217cca5876bd07"
    text: {The various versions of `help`. Only thing I notice is Rebol2 and 3 had a lighter arrow `--` instead of  red's `=>`}
    sent: "2017-05-14T19:04:22.469Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5918a9b9631b8e4e61d5f989"
    text: {[![image.png](https://files.gitter.im/red/red/QVDF/thumb/image.png)](https://files.gitter.im/red/red/QVDF/image.png)}
    sent: "2017-05-14T19:02:17.399Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "59188f9df3001cd3421ead40"
    text: {In other news, `help` has been updated, in an attempt to make the output friendlier. Small tweaks, rather than large changes. `? find` and `? append` are good basic tests. What I haven't come up with is a good solution for specs where some params don't have a type specified, some have a long type spec, and may or may not have doc strings. e.g.^/```^/test-fn-2: func [^/^-"Doc"^/^-[catch]^/^-a "AA"^/^-b [block!]^/^-c [string! immediate! scalar! any-block!] "CC"^/^-/r "ref"^/^-^-s [string!] "ref arg"^/^-^-s2 [string!]^/^-^-s3 "s3 doc string"^/^-return: [integer!] "Return doc string"^/^-/local x y^/][]^/```^/If you paste that, then do `help test-fn-2`, you'll see what I mean.^/^/I didn't like putting `[default!]` in where no type is spec'd, and padding with spaces there only works when type specs are all short. Splitting the doc string to a separate line is no better. It all depends on the combination of things in the spec. Note that it will affect refinement params as well.^/^/Thoughts or suggestions? Mocking up output is probably best for discussion.}
    sent: "2017-05-14T17:10:53.241Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59188b7e92217cca5876417f"
    text: {I would prefer to have my code removed from that repo for the time being @maximvl, while the community works out how best to organize things. My public gists are there for others to use and share, of course, but I don't always include header info that makes it clear where they came from, out of context. As we adapt and share them, as I do with code others have shared, the gist can help us track forks and revisions, until we have a plan. It is a *great* idea to get things organized, including links from chat here, so I don't think your effort will be wasted.}
    sent: "2017-05-14T16:53:18.707Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59185fa5631b8e4e61d4e390"
    text: "^/```"
    sent: "2017-05-14T13:46:13.883Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "5918392992217cca58751de3"
    text: "@JenniferLee520 there is `Libre Linux` btw :D"
    sent: "2017-05-14T11:02:01.005Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591837422b926f8a675382ad"
    text: "@JenniferLee520 sorry for that"
    sent: "2017-05-14T10:53:54.650Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5918372600efc2bb3e66d3e5"
    text: {"FreeRed"? This fork is not appropriate at all. Why don't you guys make a Linux fork and name it "FreeLinux" to see what Linus Torvalds will say about it?}
    sent: "2017-05-14T10:53:26.381Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "59173b828a05641b117bafea"
    text: {you just start with literal english string which directly expresses your idea... and a bit of wishful thinking, then slowly build upon that}
    sent: "2017-05-13T16:59:46.509Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59173b388a05641b117bae1b"
    text: {whole intentional programming thing looks like a common way to write good Forth code}
    sent: "2017-05-13T16:58:32.587Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59172d23631b8e4e61d0f941"
    text: {@greggirwin seems like it, his company recently was acquired by microsoft though}
    sent: "2017-05-13T15:58:27.064Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59172985d1a7716a0ac17814"
    text: "Thanks for the link Maxim."
    sent: "2017-05-13T15:43:01.719Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59172979c4d73f445aa26e1e"
    text: {I have great respect for Charles Simonyi, and really hoped his name would bring attention to DSLs. But his Intentional work hasn't made much headway, has it?}
    sent: "2017-05-13T15:42:49.420Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5917264233e9ee771ca25db9"
    text: {his and similar talks can be found using "intentional software" phrase}
    sent: "2017-05-13T15:29:06.336Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591725a12b926f8a674ff44f"
    text: {oh, this one, I was searching for exact "domain oriented programming talk" title :D thanks!}
    sent: "2017-05-13T15:26:25.181Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59172557d1a7716a0ac16536"
    text: {@9214  https://www.youtube.com/watch?v=UBI33yXJZxg}
    sent: "2017-05-13T15:25:11.294Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5917250d33e9ee771ca259ad"
    text: "@maximvl I'm curious, can you put a link here?"
    sent: "2017-05-13T15:23:57.354Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59172171631b8e4e61d0cf4d"
    text: {just saw a talk by Charles Simonyi where he tells that domain oriented programming still fails because languages don't address multi-domain paradigm, which I believe our `parse` does}
    sent: "2017-05-13T15:08:33.634Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591720028a05641b117b4037"
    text: {@mikeparr, maybe call it a blog entry index? If each section's items were lists, that would look nice I think. I love the idea.}
    sent: "2017-05-13T15:02:26.147Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59171fbc631b8e4e61d0c8d8"
    text: {@x8x, Having Red as my environment everywhere I go is my dream.}
    sent: "2017-05-13T15:01:16.184Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59171903631b8e4e61d0ad8d"
    text: {@mikeparr can you put hashtags on it? Like, say, #macro, #view, #libred, etc}
    sent: "2017-05-13T14:32:35.622Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591708229f4f4ab05bbdf7ad"
    text: {I've put together a summary of red-lang.org.  The idea is to help you find what you want more easily.  Any use?   http://www.red-by-example.org/links.html#red-lang-summary^/}
    sent: "2017-05-13T13:20:34.556Z"
    editedAt: "2017-05-13T13:20:57.876Z"
    v: 2
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5916aa6521759a6a01660810"
    text: {There are also license issues with BusyBox that companies may not like as it is GPL ..}
    sent: "2017-05-13T06:40:37.684Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5916a7ae0de3eb3e19a70e43"
    text: {By-product would get us a Red shell alternative to Bash Zsh .. Busybox has embedded Ash shell}
    sent: "2017-05-13T06:29:02.371Z"
    editedAt: "2017-05-13T06:35:47.012Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5916a54d331deef464690565"
    text: {Busybox only provide stripped-down Unix tools, embedded systems mostly have language interpreter for doing the other stuffs, I see Lua a lot as it is very small, modular and extensible, Perl and Phyton are not uncommon, Red would be smaller then any of those and more feature full so it will easily be favoured!}
    sent: "2017-05-13T06:18:53.041Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5916a2d664a70be11ad2a32e"
    text: {I think the holy grail of having Red deployed everywhere is to make it a drop in replacement to busybox ! All embedded systems use it, Android use it, Alpine use it.. with added bonus that it will provide a language and all the features we know are coming. Big companies doing embedded may be asking for customization from Red Team enche revenue.. 😜}
    sent: "2017-05-13T06:08:22.187Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5916466c9d90dc7a1c72ea5a"
    text: "You should be able to do it either way."
    sent: "2017-05-12T23:34:04.156Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5916460c631b8e4e61cdf2b5"
    text: {Not just the AMI, but the deployment package as well.}
    sent: "2017-05-12T23:32:28.185Z"
    editedAt: "2017-05-12T23:34:19.663Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591645b8d1a7716a0abe5d1d"
    text: "It's all in the image."
    sent: "2017-05-12T23:31:04.408Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591644e92b926f8a674cf86a"
    text: {hmm, very interesting. I'm curious about how they do it, but I suppose the whole point is that the details are hidden  :)}
    sent: "2017-05-12T23:27:37.592Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "591643acc4d73f445a9f74d5"
    text: {You can install binaries to run inside Lambda. We did tests with both R3 and R2 64-bit. 64-bit is the key there I think.}
    sent: "2017-05-12T23:22:20.425Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5916279a00efc2bb3e5feed5"
    text: {@geekyi Yeah, I'd like to try Alpine, but I thought it would be easier to start with one of the heavier ones first, since they have a lot more tools this is my first Docker package I've built}
    sent: "2017-05-12T21:22:34.617Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "591624dbc4d73f445a9efc74"
    text: {[iron base](https://www.iron.io/microcontainers-tiny-portable-containers/) claims ~ 29MB node.js containers. I wonder what would be the size of red containers? ;)}
    sent: "2017-05-12T21:10:51.013Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59161e770a783b6c0a90e77f"
    text: "I created the ticket"
    sent: "2017-05-12T20:43:35.573Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59161d31631b8e4e61cd5a9a"
    text: {Qemu is lightweight.. Tinycore Linux or Alpine Linux is ~10 mb}
    sent: "2017-05-12T20:38:09.663Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59161cc99d90dc7a1c72457e"
    text: {@dander cool. I've been wondering if a red replacement for docker or vagrant would be useful}
    sent: "2017-05-12T20:36:25.714Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59160fd02b926f8a674c1b3f"
    text: {@AlexanderBaggett I also get a crash on Win7 (64-bit) using the latest automated build. Sometimes it lasts a couple of font changes before crashing.}
    sent: "2017-05-12T19:41:04.934Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "5915f45500efc2bb3e5efa88"
    text: {@greggirwin Serverless computing would be pretty interesting, but I think it might need vendor support for them to natively run Red? Unless it was using one of the wrappers for an existing language platform... I haven't tried it, myself. It seems like a homoiconic language would be particularly a good fit for lambda and related services}
    sent: "2017-05-12T17:43:49.474Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5915f1e0d1a7716a0abce92b"
    text: {@dander, cool! It is kind of silly, in a sense, but showing we can embed Red anywhere is good. AWS Lambda is another prime candidate. Once we get a little further down the road, and write some AWS SDK bits, setting up an AMI for that would be another marketing piece. }
    sent: "2017-05-12T17:33:20.162Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5915f170d1a7716a0abce711"
    text: "@AlexanderBaggett, crash confirmed on Win7."
    sent: "2017-05-12T17:31:28.457Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5915ec2621759a6a01660111"
    text: "@AlexanderBaggett no GUI yet on Linux"
    sent: "2017-05-12T17:08:54.989Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5915ec0b9f4f4ab05bba125f"
    text: {The part where Red had to update the font of the area that already had text in it failed.}
    sent: "2017-05-12T17:08:27.243Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915ebedd1a7716a0abcc948"
    text: {I have no idea.   But the requesting part worked fine on Windows.}
    sent: "2017-05-12T17:07:57.142Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915ebc9631b8e4e61cc64fb"
    text: {@AlexanderBaggett is request-font even implemented on Linux?}
    sent: "2017-05-12T17:07:21.678Z"
    editedAt: "2017-05-12T17:07:31.226Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5915ebad00efc2bb3e5ed2ad"
    text: "Can anyone give this a quick spin on linux?"
    sent: "2017-05-12T17:06:53.465Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915eaa20a783b6c0a8febca"
    text: {@AlexanderBaggett Does not crash on macOS, so it is platform specific (though macOS font selector is missing font preview and some OK button).}
    sent: "2017-05-12T17:02:26.765Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5915ea2100efc2bb3e5ecb77"
    text: {I suspect the behavior is OS specific, but I would to ask members of the community to verify.}
    sent: "2017-05-12T17:00:17.953Z"
    editedAt: "2017-05-12T17:00:27.292Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915e9fd33e9ee771c9df318"
    text: {In windows 10, if you change the font after typing text into the area, it crashes the window and the red REPL.}
    sent: "2017-05-12T16:59:41.180Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915e9d100efc2bb3e5eca9b"
    text: {```^/view [area 200x200 button "change font" [face/parent/pane/1/font: request-font]]^/```^/^/}
    sent: "2017-05-12T16:58:57.514Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915e9b18a05641b1176e989"
    text: {I am about to open a github issue.  I would like someone to test it on OS's other than windows 10}
    sent: "2017-05-12T16:58:25.245Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915e97fc4d73f445a9de637"
    text: {It might seem a little silly to put a 1 MB tool inside a 200 MB container, but the base image only needs to be downloaded once, and it could be useful for some of these services that provide web-based REPLs or whatever. Or if someone needs to test on linux from not-linux.}
    sent: "2017-05-12T16:57:35.299Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5915e86600efc2bb3e5ec4b4"
    text: {I don't know if anyone else has experimented with it already, but I got a working proof of concept for running Red inside a Docker container. I'm on windows, by the way.^/```^/λ docker run -it dander/redlang^/Unable to find image 'dander/redlang:latest' locally^/latest: Pulling from dander/redlang^/43edd5e0993d: Already exists^/cf849e3d2428: Pull complete^/Digest: sha256:97fc4b832c123f88f1b29b86eef4528379ffae34dadef2f8b4f0494bf725adde^/Status: Downloaded newer image for dander/redlang:latest^/--== Red 0.6.2 ==--^/Type HELP for starting information.^/^/>> about^/Red for Linux version 0.6.2 built 12-May-2017/10:01:58^/```}
    sent: "2017-05-12T16:52:54.300Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "5915d3f600efc2bb3e5e5a45"
    text: {@mydoghasworms According to [Trello](https://trello.com/b/FlQ6pzdB/red-tasks-overview), "Simple GC" will be in 0.6.5 }
    sent: "2017-05-12T15:25:42.104Z"
    v: 1
    author: "559257c315522ed4b3e313ce"
) #(
    id: "5915ce7f631b8e4e61cbcc55"
    text: "https://github.com/red/red/pull/2681"
    sent: "2017-05-12T15:02:23.566Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5915b9b60a783b6c0a8ee77e"
    text: "It should be removed from`internal!`."
    sent: "2017-05-12T13:33:42.923Z"
    editedAt: "2017-05-12T13:33:46.322Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5915b116c4d73f445a9cc7ee"
    text: {`handle! ` is already part of a typeset:  `internal!`. I see no reason why it should be part of two typesets. }
    sent: "2017-05-12T12:56:54.215Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5915971ac4d73f445a9c5148"
    text: {afaik it was not. It is now planned for 0.6.4, correct me if I am wrong. }
    sent: "2017-05-12T11:06:02.763Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5915953583cb5db0732356a8"
    text: {Was the simple-gc branch ever merged into the master? I see there was a discussion around this on March 19 last year, suggesting the simple GC would be part of 0.6.1. The thing is, I am just testing to see whether memory gets released after loading a file with `read` (in a function), but that does not seem to be the case. Is this an experimental feature that has to be switched on somewhere? Or do you have to trigger the GC manually, perhaps?}
    sent: "2017-05-12T10:57:57.357Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "591577dc9f4f4ab05bb7f383"
    text: "https://github.com/red/red/pull/2678"
    sent: "2017-05-12T08:52:44.633Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591577412b926f8a67493b18"
    text: "@rebolek `immediate!`"
    sent: "2017-05-12T08:50:09.091Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5915737500efc2bb3e5c90ee"
    text: {@dockimbel only to `default!` or to other typests too, like `immediate!` or `scalar!`?}
    sent: "2017-05-12T08:33:57.681Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5915729b00efc2bb3e5c8d18"
    text: "Ok, will do."
    sent: "2017-05-12T08:30:19.200Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59156c8d9f4f4ab05bb7c321"
    text: {It should be added to `default!`, you can send a PR for that.}
    sent: "2017-05-12T08:04:29.719Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591553598a05641b117436ee"
    text: "I see. But is it a good thing?"
    sent: "2017-05-12T06:16:57.548Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591552060a783b6c0a8d2139"
    text: "`handle!` isn't in `default!`."
    sent: "2017-05-12T06:11:18.246Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5915486bc4d73f445a9afc10"
    text: {What I've found so far:^/1) I cannot pass `handle!` to a function if it does not specifically accepts `handle!`: `f [x] [x]` throws `f does not accept handle!...` error, `f [x [handle!]] [x]` works.^/2) `handle!` cannot be used as a key in `map!`}
    sent: "2017-05-12T05:30:19.103Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591547ea8a05641b1174117b"
    text: "No, it's not gone, it just moved elsewhere :)"
    sent: "2017-05-12T05:28:10.862Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5915464283cb5db0732212e4"
    text: {@Oldes I was asking because yesterday I wasn't able to pass `handle!` to a function, but now that problem seems to be gone. Probably some Heisenbug :)}
    sent: "2017-05-12T05:21:06.050Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59154461d1a7716a0ab9cba2"
    text: {I need to store the handle on the Red side to use it later.}
    sent: "2017-05-12T05:13:05.103Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591544198a05641b117404a3"
    text: {You are mixing R/S code with Red code in your post. Actually handle is in Red side exactly to prevent you to do nasty things with pointers. Why you need it?}
    sent: "2017-05-12T05:11:53.432Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59153aeac4d73f445a9acf83"
    text: {@meijeru Thanks, I was using handle in my code with `#define handle! [pointer! [integer!]]`, now I do not need this definition, OTOH I cannot use `handle!` as `integer!` in places where I was using it. The only way how to convert `handle!` to `integer!` that I found, is `load form handle` which is not very good IMO.}
    sent: "2017-05-12T04:32:42.175Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5914dc9b00efc2bb3e5a64cf"
    text: {@rebolek `handle!` is derived from integer. It was made a separate type to avoid the values being mixed up with "normal" integers. It has no operations except equality testing.  Values cannot be made by the user, they come about as a result of OS calls.}
    sent: "2017-05-11T21:50:19.476Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591424c00a783b6c0a88000e"
    text: {@rebolek Looks like a missing entry into libRed-extras.r file.}
    sent: "2017-05-11T08:45:52.449Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59142036ac693c532ae082a9"
    text: "Is there any info on `handle!` type?"
    sent: "2017-05-11T08:26:30.263Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5914053033e9ee771c95a79f"
    text: {When I compile script with MSDOS target, that uses `call`, I get this error:^/```^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/natives/call*^/```^/It works fine with Windows as target. Is this expected?}
    sent: "2017-05-11T06:31:12.758Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5913d25d33e9ee771c9502c3"
    text: {The basic evaluation rules should be learned using the Rebol/Core manual  (for now) and playing  with short expressions/code within the Red console. Those concepts are just the surface of the lake, depths are more like code/data duality, dynamic binding and DSLs building. ;-)}
    sent: "2017-05-11T02:54:21.740Z"
    editedAt: "2017-05-11T02:54:30.068Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5913d17e631b8e4e61c35936"
    text: {@tanstaaf1 We have an entry for supporting debugging hooks in the interpreter in 0.6.4: https://trello.com/c/Tg2WlLpW/162-0-6-4-new-gui-console}
    sent: "2017-05-11T02:50:38.600Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5913aa1b33e9ee771c947bfe"
    text: {Red is L->R, except for infix. Can you provide an example of what you're thinking? ^/^/It's tough for newbies sometimes, and is for most languages.}
    sent: "2017-05-11T00:02:35.794Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5913a85183cb5db0731b75ec"
    text: {@PeterWAWood Re "Red evaluates from Left to Right".  Yes, of course,. I've probably not using proper terminology.  But would you agree red will defer l2r evaluation in order to resolve an *indeterminate* number of things to the right?  And given the sheer number of words plus refinements and unusual characters that creates a bit of a slippery slope for, at least, untrained minds to gain purchase.   Sort of like reading run-on sentences in English.   It would be really nice for the interpreter to explain itself, so to speak.  It seems that is best done right to left (except where the statement is malformed, of course, where it should throw an error of some sort).  Anyway, it IS a deep lake -- but a deep lake CAN be transparent, and the red interpreter/REPL could be too, and that would take away a huge portion of the confusion.  My main frustration, anyway.}
    sent: "2017-05-10T23:54:57.943Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "591390132b926f8a6741626a"
    text: {I know $1K isn't a lot in the US or Europe, but maybe it would go further elsewhere - so I'll put that out there.}
    sent: "2017-05-10T22:11:31.025Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "59138f775c89dc5361973af0"
    text: {@PeterWAWood I may be mistaken but I see the "deep lake" creating a bit of a chicken and egg conundrum for finding talented programmers.   Again, I may be mistaken, but I'd expect even a rudimentary (not flashy) debugger which would fully *explicate* a red statement as perhaps the most powerful way to get new talent up to speed.  It kind of pains me that I have nothing to offer but ideas, some of them naive.  But I'd be willing to offer up to, say, a $1K bounty for a debugger soon  -- provided the red team would be willing to entertain that and provide judgement on when they think the bounty is fairly earned for something with lasting use.}
    sent: "2017-05-10T22:08:55.172Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "59138d26ac693c532ade7ac9"
    text: {@tanstaaf1 As I understand the issue for the team is equally about being able to find sufficiently talented programmers as it is about funding. A bounty could attract a talented individual freelancer but isn't going to help the core team as bounties aren't really going to allow the team to hire an additional full-time engineer.}
    sent: "2017-05-10T21:59:02.078Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59138c080a783b6c0a85cc19"
    text: {@PeterWAWood *That's* a good answer.  Would it be appropriate for me to offer a bounty?  Or does that only mess up the development process at this point?}
    sent: "2017-05-10T21:54:16.083Z"
    editedAt: "2017-05-10T21:55:43.527Z"
    v: 2
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "59138b0f5c89dc53619727ca"
    text: {Don't you realise the reason that no work is being done on debugging tools is that nobody has volunteered to do so? The Red team is busy working to complete the core features of the language. I'm sure that they can only afford the time to develop such tools if the tools are essential to their work.}
    sent: "2017-05-10T21:50:07.568Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59138a4f2b926f8a67414bb9"
    text: {@tanstaaf1 Red evaluates from Left to Right. Unfortunately, not strictly because the infix operators which are evaluated out of sequence. (In the early days I unsuccessfully tried to persuade Nenad to forgo infix operators as Boron does).}
    sent: "2017-05-10T21:46:55.928Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "591389f133e9ee771c9405cf"
    text: {The ideal would be for it to evaluate a whole statement but in pieces - so one could easily follow along for either debugging or -- important -- learning purposes.   It's one of those things, -- one of *very* few things, I'd say -- which would have a very fast payback; both for red development and certainly for learning.  A nice next step might be to have the step-wise evaluation shown either in a gui window or, at least, printed to a file .... for easy import to this site for questions or bug reporting.   It could be pretty rudimentary and still be very helpful, but I'm pretty sure it needs to be supported by internals; ideally with a switched / debug mode.  Maybe I'm missing something that red is still missing that makes this "too early"....maybe you can elucidate why this would be impractical right now?}
    sent: "2017-05-10T21:45:21.781Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "591387519d90dc7a1c67485b"
    text: {@greggirwin @dockimbel Yes, it is early - but why is it "too early"?  "do /next" has things sort of backwards in terms of understanding.  If red parses from left to right but evaluates from right to left then it makes sense to have at least a rudimentary debug facility which would show things in evaluation order.  }
    sent: "2017-05-10T21:34:09.638Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5913428b8a05641b116be7dc"
    text: {Agreed @greggirwin .  I know it is correct Red, and I might have meant it (but not very often,)}
    sent: "2017-05-10T16:40:43.762Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "59133e50d1a7716a0ab17896"
    text: {@tanstaaf1, still early for some user tools. We can build some basics now, though, with `do/next`. }
    sent: "2017-05-10T16:22:40.842Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59133e1fd1a7716a0ab17796"
    text: {@mikeparr, how can Red know it's a typo? There is still likely some lexing refinement, and official specs will come before too long.}
    sent: "2017-05-10T16:21:51.319Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59133af8ac693c532adcff5d"
    text: {BTW, I also think such a debug mode -- even if only rudimentary -- would help speed up the catching and resolving of bugs by users.  As it is I never know if a perceived "bug" is actually a bug in fact or only a bug in my thinking.}
    sent: "2017-05-10T16:08:24.366Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "59133a66d1a7716a0ab1624b"
    text: {Has anyone been hacking on debugging?  I don't see much mention of debugging work in the threads nor in the trello roadmap.  Absent that, does anyone on red-team have any conjecture on when some sort of debugger will show up or what that might look like?  I'd love to see something which would display a code statement in terms of how sections of it are successively parsed and evaluated.   Most of my personal difficulties with red continue to revolve around not understanding how longer statements are actually evaluated by the parser.   Being able too more easily tease out the step by step interpretation would probably save me 90% of my wasted time.  Maybe it would be appropriate, at some point, to open a room for more pointed discussion?}
    sent: "2017-05-10T16:05:58.989Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "591338960a783b6c0a842bfd"
    text: "I would consider it as a feature;)"
    sent: "2017-05-10T15:58:14.932Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591332e32b926f8a673fa7e9"
    text: {I noted the discussion above about valid emails.  here is a similar issue with url! type.^/Here is code with a typo - missing space after the colon.  It is treated as a url:^/```^/>> a:b^/== a:b^/>> type? a:b^/== url!^/```^/}
    sent: "2017-05-10T15:33:55.955Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "59131a8dc4d73f445a91cf66"
    text: {ah, yes, thanks, just tried john myself, then i found something}
    sent: "2017-05-10T13:50:05.941Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "5913160f5c89dc536194d9e1"
    text: {@eMBee yes, https://web.cs.wpi.edu/~jshutt/kernel.html}
    sent: "2017-05-10T13:30:55.459Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59131557631b8e4e61c016ed"
    text: {did you managed to catch the name of that person he is referencing? joan shutt? with a lisp dialect called what? kernel?}
    sent: "2017-05-10T13:27:51.443Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "59130b8183cb5db073188f0b"
    text: "oh, ok, i really can't tell who is talking :-)"
    sent: "2017-05-10T12:45:53.156Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "59130b6b0a783b6c0a8325b4"
    text: {@eMBee I don't think so, there were two guys discussing it}
    sent: "2017-05-10T12:45:31.760Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59130b4a5c89dc536194a0ed"
    text: {@maximvl but it's you who is explaining f-expressions in response to an audience comment, isn't it?}
    sent: "2017-05-10T12:44:58.775Z"
    editedAt: "2017-05-10T12:45:11.298Z"
    v: 2
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "591309019d90dc7a1c64d59e"
    text: "@eMBee has never heared of f-expressions"
    status: true
    sent: "2017-05-10T12:35:13.109Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "591308efc4d73f445a916aa8"
    text: "ah, i could not tell who was speaking."
    sent: "2017-05-10T12:34:55.903Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
)#(
    id: "591306b9c89bb14b5aeb991f"
    text: "this is why it's not on slides :)"
    sent: "2017-05-10T12:25:29.896Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591306a6ac693c532adbe3b6"
    text: {@eMBee about dynamic scopes and fexpressions? It wasn't me, it was one of the guys in the room}
    sent: "2017-05-10T12:25:10.438Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5912c2be33e9ee771c904037"
    text: {otherwise the sound is fine actually if you raise the volume to max :-)}
    sent: "2017-05-10T07:35:26.299Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "5912c2ab9d90dc7a1c638e11"
    text: {@maximvl in your talk about halfway you make a detour into early lisp history, which is not on your slides. could you add some references to that? i didn't quite catch the names and the terms you mentioned there}
    sent: "2017-05-10T07:35:07.735Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "591232a683cb5db07315432a"
    text: "On Win7 I use Security Essentials."
    sent: "2017-05-09T21:20:38.183Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59122e3fc4d73f445a8e1272"
    text: {All these AVs don't like it because there's compression used in the binary}
    sent: "2017-05-09T21:01:51.008Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59122dfd83cb5db0731528f4"
    text: {gosh, now I really want to evolutionize from linux wannabe to neophyte Mint user}
    sent: "2017-05-09T21:00:45.480Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59122d4a8a05641b11675fbc"
    text: {Educated guess - there's a quarantine file in Avira that the Red name is already in. Needs to be cleared out in addition to setting up an allow rule. If it does have a quarantine file, no matter how many times you download the current version it's going to halt it from running because it's the same file name. ^/I think a lot of AV start with filename and short-circuit bail if the name is in quarantine - then they go to hash or file sig}
    sent: "2017-05-09T20:57:46.655Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59122cfc33e9ee771c8e24b6"
    text: {in Avast it's `Right click on tiny Avast icon in Win bar --> Open Avast user inteface --> click Settings in bottom-left corner --> Exclusions tab --> specify /ProgramData/Red directory and other directories with Red things`}
    sent: "2017-05-09T20:56:28.492Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59122c43631b8e4e61bc4e3f"
    text: {@gltewalt it's a long story, Nenad tried it for years with no avail}
    sent: "2017-05-09T20:53:23.715Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59122c25ac693c532ad8897a"
    text: "Contact Avira and ask them to update their sigs?"
    sent: "2017-05-09T20:52:53.274Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59122bf9c4d73f445a8e0662"
    text: {Avast, but you have to do that little dance that I typed}
    sent: "2017-05-09T20:52:09.526Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59122bd50a783b6c0a7fb616"
    text: {personally I stick to Avast, dunno if it's good enough}
    sent: "2017-05-09T20:51:33.083Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59122baa631b8e4e61bc4a7a"
    text: "Any good free AV suggestion ?"
    sent: "2017-05-09T20:50:50.851Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59122b9bc4d73f445a8e04b8"
    text: {I turn it on, and it doesn't work anymore and I can't delete ProgramData/Red}
    sent: "2017-05-09T20:50:35.931Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59122b9a631b8e4e61bc497b"
    text: "bloody hell! :japanese_ogre: "
    sent: "2017-05-09T20:50:34.561Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59122b8933e9ee771c8e1edb"
    text: "It worked with Avira off"
    sent: "2017-05-09T20:50:17.227Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59122b82ac693c532ad885bf"
    text: "I broke it again"
    sent: "2017-05-09T20:50:10.955Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "591229730a783b6c0a7fabea"
    text: ":confetti_ball: welcome to the Red land!"
    sent: "2017-05-09T20:41:23.327Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59122960c4d73f445a8df8d1"
    text: "Thanks everyone !"
    sent: "2017-05-09T20:41:04.907Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "5912295c33e9ee771c8e144f"
    text: "I ran the installer (red-latest), and it worked !"
    sent: "2017-05-09T20:41:00.252Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "5912294983cb5db0731511fa"
    text: {I just rebooted (got windows update in my way too), and I've been able to delete ProgramsData/Red}
    sent: "2017-05-09T20:40:41.457Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59122944ac693c532ad87b12"
    text: "oh, **that** beast :cat: "
    sent: "2017-05-09T20:40:36.206Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5912292483cb5db073151126"
    text: "Avira"
    sent: "2017-05-09T20:40:04.014Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "591228adc4d73f445a8df467"
    text: ":point_up:  true"
    sent: "2017-05-09T20:38:05.504Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5912288bc4d73f445a8df3f7"
    text: {Avast will hold on to the file name in quarantine - have to purge that in addition to setting an 'allow' rule}
    sent: "2017-05-09T20:37:31.583Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5912285bc89bb14b5ae82c67"
    text: "Which antivirus?"
    sent: "2017-05-09T20:36:43.280Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "591224179d90dc7a1c61480f"
    text: {yep, and if it won't work then just copy toolchain, the one you've compiled on another machine}
    sent: "2017-05-09T20:18:31.774Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591223b49d90dc7a1c614687"
    text: "I'll try to reboot"
    sent: "2017-05-09T20:16:52.566Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "591223aa2b926f8a673b32da"
    text: "nope"
    sent: "2017-05-09T20:16:42.849Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "591222fed1a7716a0aacb281"
    text: "and installer ain't flagged in it?"
    sent: "2017-05-09T20:13:50.315Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591222ed33e9ee771c8df50e"
    text: "but my AV is off :confused: "
    sent: "2017-05-09T20:13:33.593Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "591222be0a783b6c0a7f8ecd"
    text: {yeah, it's kinda rite of passage for Win users to fight with AV to get Red toolchain compiling}
    sent: "2017-05-09T20:12:46.433Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591222b0631b8e4e61bc1d10"
    text: "Strange, I didn't know it was readonly.. "
    sent: "2017-05-09T20:12:32.377Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5912228a8a05641b11672e67"
    text: "And ProgramData is readonly and hidden"
    sent: "2017-05-09T20:11:54.363Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "5912227a2b926f8a673b2e0d"
    text: {And of course Red runs perfectly on another computer (also Windows 7)}
    sent: "2017-05-09T20:11:38.384Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "5912224e33e9ee771c8df24e"
    text: {@ChatPion I think the last guy that happened to rebooted his computer to solve the problem.. }
    sent: "2017-05-09T20:10:54.612Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59122205c89bb14b5ae81024"
    text: "I'm gonna try to install on another computer"
    sent: "2017-05-09T20:09:41.496Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "591221f083cb5db07314f09e"
    text: "I can't seem to do anything on ProgramData"
    sent: "2017-05-09T20:09:20.615Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "5912217c5c89dc536190f8b1"
    text: "oh, and run installer as an admin, just for sure"
    sent: "2017-05-09T20:07:24.670Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59122117631b8e4e61bc1380"
    text: {try to whitelist `/ProgramData/Red` directory, unflag installer or folder if it was flagged, reboot, turn off AV for a while ant try again, idk if that helps :confused: }
    sent: "2017-05-09T20:05:43.242Z"
    editedAt: "2017-05-09T20:07:05.601Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121fb933e9ee771c8de36a"
    text: {yeah I got that one. i'm currently running without my AV on}
    sent: "2017-05-09T19:59:53.296Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121f4a0a783b6c0a7f7e7f"
    text: {@ChatPion https://github.com/red/red/issues/2399 what ya think, could it be flagged by AV after your first try?}
    sent: "2017-05-09T19:58:02.383Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121f01ac693c532ad84b2f"
    text: {Thanks :smile: ^/I'm trying to see if I can modify my permissions}
    sent: "2017-05-09T19:56:49.386Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121ebcc89bb14b5ae8024e"
    text: {I'll try to harvest google search and find something useful}
    sent: "2017-05-09T19:55:40.577Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121e7b631b8e4e61bc06a5"
    text: "no clue then :confused: "
    sent: "2017-05-09T19:54:35.732Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121e468a05641b116717b0"
    text: "still doesn't work"
    sent: "2017-05-09T19:53:42.324Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121e4233e9ee771c8ddd39"
    text: "yep"
    sent: "2017-05-09T19:53:38.364Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121e3883cb5db07314dee9"
    text: {and you've already tried to run installer as admin?}
    sent: "2017-05-09T19:53:28.866Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121dfec89bb14b5ae7ff5a"
    text: {I tried to give myself write permissions, but windows keeps on putting it back to readonly. Also, I can't have full permissions even as an Admin}
    sent: "2017-05-09T19:52:30.394Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
)#(
    id: "59121cc80a783b6c0a7f70e9"
    text: {@ChatPion try to poke around with read/write permissions, I think that's what interrupts compilation}
    sent: "2017-05-09T19:47:20.655Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121c9733e9ee771c8dd6f6"
    text: "Can't delete ProgramData/Red"
    sent: "2017-05-09T19:46:31.206Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121ba5c89bb14b5ae7f4da"
    text: "That explains quite a lot"
    sent: "2017-05-09T19:42:29.027Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121b9f8a05641b11670b81"
    text: {Hmm, according to windows, it's a hidden readonly folder}
    sent: "2017-05-09T19:42:23.403Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121b60ac693c532ad8391b"
    text: {also, try to wipe out this `ProgramData/Red` folder and try again}
    sent: "2017-05-09T19:41:20.771Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121b509d90dc7a1c611f95"
    text: {do you have any access restrictions on `ProgramData` folder?}
    sent: "2017-05-09T19:41:04.719Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121b3f0a783b6c0a7f6a9b"
    text: "Running as an admin doesn't change anything"
    sent: "2017-05-09T19:40:47.293Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121b200a783b6c0a7f6872"
    text: {Got it : "Driver Internal Error : Access Error : Cannot open /C/ProgramData/Red/crush.reds"}
    sent: "2017-05-09T19:40:16.102Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121acd33e9ee771c8dcd7f"
    text: "I think it was about a driver issue ?"
    sent: "2017-05-09T19:38:53.177Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121ac18a05641b11670617"
    text: {@9214 I tried your link. A console briefly shows up then disappeared}
    sent: "2017-05-09T19:38:41.744Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "59121a5ec4d73f445a8db4d2"
    text: {I usually just go [here](http://static.red-lang.org/dl/auto/win/red-latest.exe)}
    sent: "2017-05-09T19:37:02.455Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121a3cd1a7716a0aac85c7"
    text: "Grab automated build "
    sent: "2017-05-09T19:36:28.758Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59121a04631b8e4e61bbede2"
    text: {My antivirus already caused me trouble. I tried to install with it off, but I get the same error}
    sent: "2017-05-09T19:35:32.634Z"
    editedAt: "2017-05-09T19:35:38.854Z"
    v: 2
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "591219cc83cb5db07314ca51"
    text: {hm, and antivirus doesn't bark? Red toolchain often being detected as malware (false positive of course), that causes some trouble with installation for me}
    sent: "2017-05-09T19:34:36.727Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591219419d90dc7a1c6114a8"
    text: "@9214 last stable build"
    sent: "2017-05-09T19:32:17.804Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "591218cf33e9ee771c8dc35a"
    text: {@ChatPion last stable build or automated from `master` branch?}
    sent: "2017-05-09T19:30:23.037Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591218cfac693c532ad82bc5"
    text: {I've downloaded the exe from the website and tried to install with chocolatey as well}
    sent: "2017-05-09T19:30:23.025Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "591217982b926f8a673af737"
    text: "Are you trying to compile from source ?"
    sent: "2017-05-09T19:25:12.918Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "591211fcc89bb14b5ae7c02d"
    text: {Hello, I've been trying to install red on Windows 7, but I get the error "C:\ProgramData\Red\crush-2017-4-12-1647.dll isn't conceived to run on Windows or contains an error"}
    sent: "2017-05-09T19:01:16.516Z"
    v: 1
    author: "587bf31ed73408ce4f43bd55"
) #(
    id: "5911eee62b926f8a673a33f8"
    text: {@KDr2, you can use `help` in the console, though it may not tell you much. In this case `/info` isn't documented yet, so it wouldn't help at all.}
    sent: "2017-05-09T16:31:34.933Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5911ee8b8a05641b11662cbb"
    text: "Way to go Maxim! Wow."
    sent: "2017-05-09T16:30:03.358Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5911c76f8a05641b116564e5"
    text: {But IO is still just in a basic version, will full IO planned for 0.7, so the documentation will probably come with that.}
    sent: "2017-05-09T13:43:11.453Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5911c7240a783b6c0a7dbdf9"
    text: {@KDr2 I am not sure if this is documented anywhere yet.}
    sent: "2017-05-09T13:41:56.420Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5911c4e09d90dc7a1c5f6e44"
    text: {@rebolek thank you very much, it is exactly what i want. BTW, is there any document about these functions? I did search on google/bing, and got nothing about this.}
    sent: "2017-05-09T13:32:16.671Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5911bf17d1a7716a0aaabc1c"
    text: "@maximvl  :clap: "
    sent: "2017-05-09T13:07:35.754Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5911bef383cb5db07312ff6a"
    text: {@KDr2 Hi,^/use `write/info`:^/```^/write/info http://some.serv.er/ [POST [Header: "is here"] {Your JSON data}]^/```}
    sent: "2017-05-09T13:06:59.194Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5911b7ddd1a7716a0aaa992a"
    text: {I follow rebol's doc, use read/custom, red told me there is no read/custom}
    sent: "2017-05-09T12:36:45.717Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5911b79a9d90dc7a1c5f2d8c"
    text: {Hi all, could you tell me how to fire a http post request with a specific header field and a json body?}
    sent: "2017-05-09T12:35:38.002Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "59118d2ed1a7716a0aa9d51e"
    text: {@maximvl for canonicity, you should have pulled out of your pocket a small teaspoon before 26:40 ;)}
    sent: "2017-05-09T09:34:38.872Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59118272e4cfd50062a5d10a"
    text: {Probably others have seen this post on d3.express, but if not it's worth reading if only to compare with Red's reactive approach - https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0}
    sent: "2017-05-09T08:48:50.254Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "59117e82c89bb14b5ae50817"
    text: "I had normal sound. Very cool! Congratulations!"
    sent: "2017-05-09T08:32:02.924Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591172199d90dc7a1c5de894"
    text: {You could edit the description and add a link to a video with fixed sound? Create a playlist with the fixed sound version right behind it and possibly shrink the original into a very short video?}
    sent: "2017-05-09T07:39:05.115Z"
    editedAt: "2017-05-09T07:40:35.740Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59116f695c89dc53618d96f9"
    text: "I'll take a look at them"
    sent: "2017-05-09T07:27:37.455Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59116e9a2b926f8a6737bb9f"
    text: {Subtitles would be greatly helpful, to workaround the low audio volume.}
    sent: "2017-05-09T07:24:10.127Z"
    editedAt: "2017-05-09T07:24:30.638Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59116df20a783b6c0a7c1ffd"
    text: "ah, but not audio... what about subtitles?"
    sent: "2017-05-09T07:21:22.708Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59116c99d1a7716a0aa9379e"
    text: {@gltewalt I thought youtube video can be edited after uploading?}
    sent: "2017-05-09T07:15:37.574Z"
    editedAt: "2017-05-09T07:15:56.823Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59116be4c4d73f445a8a6cde"
    text: "@maximvl That's awesome. I'm very happy for you. "
    sent: "2017-05-09T07:12:36.162Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59116bcbc89bb14b5ae4b620"
    text: "yep"
    sent: "2017-05-09T07:12:11.540Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59116bbd8a05641b1163c498"
    text: {It's out in the wild now, so no fixing audio without breaking the retweet link :smile: }
    sent: "2017-05-09T07:11:57.202Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59116b8033e9ee771c8a88e7"
    text: {I met Brendan at a conference in Taipei in 2014 (along with Rasmus Lerdoff, PHP author), and had a few nice discussions with them during the meals. Brendan knew about Rebol, and was glad to see "someone carrying the torch" in its own words. ;-)}
    sent: "2017-05-09T07:10:56.417Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59116ada5c89dc53618d8368"
    text: {@maximvl Yep, now prepare for the flood of comments about the sound quality. :-)}
    sent: "2017-05-09T07:08:10.868Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59116abd2b926f8a6737a8cf"
    text: ":-)"
    sent: "2017-05-09T07:07:41.877Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "59116aa383cb5db073117696"
    text: "Eich retweeted my video OMG"
    sent: "2017-05-09T07:07:15.928Z"
    editedAt: "2017-05-09T07:08:17.912Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59116a99c4d73f445a8a6718"
    text: "seriously?"
    sent: "2017-05-09T07:07:05.416Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59116a9683cb5db073117633"
    text: "waaat"
    sent: "2017-05-09T07:07:02.768Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59116a905c89dc53618d816d"
    text: "cool indeed"
    sent: "2017-05-09T07:06:56.846Z"
    editedAt: "2017-05-09T07:07:03.806Z"
    v: 2
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "59116a6933e9ee771c8a862a"
    text: "oh"
    sent: "2017-05-09T07:06:17.233Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "59116a4d33e9ee771c8a85ad"
    text: "?"
    sent: "2017-05-09T07:05:49.742Z"
    v: 1
    author: "56668a8616b6c7089cbddd94"
) #(
    id: "59116a40d1a7716a0aa92f8e"
    text: "Oh, he just retweeted it also. ;-)"
    sent: "2017-05-09T07:05:36.474Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59116a04d1a7716a0aa92e00"
    text: "Cool, Brendan Eich!"
    sent: "2017-05-09T07:04:36.985Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "59116a0233e9ee771c8a845f"
    text: "@dockimbel great, thanks :)"
    sent: "2017-05-09T07:04:34.446Z"
    editedAt: "2017-05-09T07:04:39.359Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591169b583cb5db07311727e"
    text: ";-)"
    sent: "2017-05-09T07:03:17.205Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5911697233e9ee771c8a821a"
    text: {[![image.png](https://files.gitter.im/red/red/ei1x/thumb/image.png)](https://files.gitter.im/red/red/ei1x/image.png)}
    sent: "2017-05-09T07:02:10.639Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591169652b926f8a6737a3ac"
    text: {@maximvl Look at who's the first one to like the tweet about your Red presentation:^/}
    sent: "2017-05-09T07:01:57.645Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5911688bac693c532ad4ef32"
    text: {The FEXPRs part will make @JacobGood1 very pleased. ;-)}
    sent: "2017-05-09T06:58:19.393Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591168570a783b6c0a7c0c03"
    text: "@maximvl Cool video, I just finished watching it."
    sent: "2017-05-09T06:57:27.482Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59116763c89bb14b5ae4a380"
    text: {thanks guys, the audio issue is known, we had a separate mic near the camera, this is why the volume is low}
    sent: "2017-05-09T06:53:23.069Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591166f75c89dc53618d731c"
    text: {@maximvl Congrats on the great presentation, its both very enjoyable and very interesting to me, to watch Red seen through other eyes, especially Lispers. Good idea to bring all your trophies behind you to impress the audience. ;-) Too bad rebol.com was down during your talk...}
    sent: "2017-05-09T06:51:35.332Z"
    editedAt: "2017-05-09T06:51:46.076Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591139b1631b8e4e61b7dda2"
    text: {@maximvl Would you like me to try to fix the audio? I can boost the level and remove some of the white noise }
    sent: "2017-05-09T03:38:25.128Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "591128dd4746d29d249a0745"
    text: {@maximvl Very nice! The Q&A at the end is quite funny 😂}
    sent: "2017-05-09T02:26:37.450Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "591112bb2b926f8a67365dd7"
    text: "Well done Maxim. "
    sent: "2017-05-09T00:52:11.627Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59110f1083cb5db073103de4"
    text: {@maximvl, a subtle thing in your `parse read https...` example. If you use tags, instead of strings, it may lead to a "where are the quotes?" question, which is a nice way to bring up datatypes. e.g.^/```^/parse read https://booking.com [skip thru <title> copy title to </title>]^/```}
    sent: "2017-05-09T00:36:32.277Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59110c910a783b6c0a7ad035"
    text: {I remember you saying about a comment someone made "There is not way that can be in a 1MB file.". Hearing it in the talk made me smile.}
    sent: "2017-05-09T00:25:53.693Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5910fd7c83cb5db073100173"
    text: "I had to max my volume as well."
    sent: "2017-05-08T23:21:32.515Z"
    editedAt: "2017-05-08T23:21:37.879Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5910fac9d1a7716a0aa7aa29"
    text: {@maximvl Can you possibly amplify your voice and repost?  I've got volume maxed on both youtube and my mac air hardware and I am having a hard time hearing you.  Your accent is fine - that is not a problem; only the volume.}
    sent: "2017-05-08T23:10:01.920Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5910f6109d90dc7a1c5c23bf"
    text: {yep, please leave the comments so I can make it better next time ;)}
    sent: "2017-05-08T22:49:52.936Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5910f5e1c4d73f445a88d1a8"
    text: {Showing people how you can change a func's body so soon...brave man. :^^) Good audience, too, since someone immediately asked if that was compiled.}
    sent: "2017-05-08T22:49:05.723Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5910f5a833e9ee771c88ecab"
    text: {I'll watch it all later, but it's really nice to hear you talking through the examples. Great job!}
    sent: "2017-05-08T22:48:08.727Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5910f2e72b926f8a6735e91a"
    text: {and yeah, it was planned as 20 mins talk but as you can imagine people had so many good questions}
    sent: "2017-05-08T22:36:23.302Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5910f2c1ac693c532ad35d0b"
    text: "don't get scared by my accent) "
    sent: "2017-05-08T22:35:45.903Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5910f29a2b926f8a6735e6c0"
    text: "Thanks for posting that Maxim!"
    sent: "2017-05-08T22:35:06.267Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5910f1cac4d73f445a88c274"
    text: "hey guys, some Red talks here :D"
    sent: "2017-05-08T22:31:38.631Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5910f1b833e9ee771c88df1f"
    text: "https://www.youtube.com/watch?v=4ZbGJemrLFw"
    sent: "2017-05-08T22:31:20.411Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59109ebc9d90dc7a1c5a8eb5"
    text: {Maybe our next live coding UI experiment should be watchers.}
    sent: "2017-05-08T16:37:16.375Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59109e9cd1a7716a0aa5f3aa"
    text: {I saw that recently as well Maxim, from Alarming Development.}
    sent: "2017-05-08T16:36:44.735Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59109314d1a7716a0aa5bae2"
    text: {presentation with examples of a lot of UIs for programming}
    sent: "2017-05-08T15:47:32.052Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591092fa2b926f8a67341954"
    text: {not sure if this already was posted here, but https://docs.google.com/presentation/d/1MD-CgzODFWzdpnYXr8bEgysfDmb8PDV6iCAjH5JIvaI/edit?usp=sharing}
    sent: "2017-05-08T15:47:06.009Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590fe8570dcaa48e673acf42"
    text: {A regex to handle formal email addresses is ~4K in size.}
    sent: "2017-05-08T03:39:03.307Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590fe1aad1a7716a0aa2bf49"
    text: {Checking and Transformation of Names^/^/https://tools.ietf.org/html/rfc3696}
    sent: "2017-05-08T03:10:34.620Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590fde835c89dc5361871a6a"
    text: {Seems there is a fair amount to consider for valid email!^/https://en.m.wikipedia.org/wiki/Email_address}
    sent: "2017-05-08T02:57:07.064Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590f907c0dcaa48e6739bd78"
    text: {I did the original librarian app for rebol.org, with Volker Nitsch I think. Sunanda, Peter Wood, along with Moliad did the web site.^/^/There is some chat going on about where and how to organize/standardize community efforts.}
    sent: "2017-05-07T21:24:12.797Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590f8dd55c89dc53618612c9"
    text: "@geekyi  thanks for the pointers "
    sent: "2017-05-07T21:12:53.919Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590f85ae2b926f8a6730026e"
    text: {gradual typing and modules, those features will make "in the large" more manageable}
    sent: "2017-05-07T20:38:06.526Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590f8323e2285d3b16394ad0"
    text: {That's all, in short.. Oh, also check out gritter and redcv}
    sent: "2017-05-07T20:27:15.138Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590f82f033e9ee771c82eb99"
    text: "And understanding *context* is important"
    sent: "2017-05-07T20:26:24.000Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590f82d1c4d73f445a82e47a"
    text: {@swthornton programming in the large isn't it? Red being alpha, the other stuff we lack are modules. And yes example applications written in it. You can look at Rebol applications in the meantime.. Rebol.org}
    sent: "2017-05-07T20:25:53.149Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590f7fa9c89bb14b5add2f34"
    text: {@geekyi Hi, i think some of the pure language discussions are amazing, but other, side issues i think new users coming from more traditional infrastructures would home in on would be how larger applications should be structured, what options have I got for the scope of the application,  more crud or databinding examples, how a Red application should be structured if its going to grow into a business solution?}
    sent: "2017-05-07T20:12:25.387Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590f59305c89dc53618548d4"
    text: {Rebol.org and librarian is interesting.. @greggirwin you used to work on it, looks like? Among others.. }
    sent: "2017-05-07T17:28:16.628Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590f589ad1a7716a0aa0c34d"
    text: {I think the real problem is lack of package manager..}
    sent: "2017-05-07T17:25:46.434Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590f5826c89bb14b5adc8c95"
    text: "@swthornton what about `red/code` repo? "
    sent: "2017-05-07T17:23:50.158Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590f3eee9d90dc7a1c552c27"
    text: {@greggirwin  Hi Gregg, I really found the 7guis useful, would it be useful to have a branch just for real-world sample code we could all add to, some of you advancef guys code looks a little ethereal 😁}
    sent: "2017-05-07T15:36:14.487Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590e4ba0631b8e4e61acdeb2"
    text: {@dockimbel, construction syntax could certainly work for it, or mold as an object.}
    sent: "2017-05-06T22:18:08.651Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590e4b772b926f8a672bf252"
    text: {I've had the same confusion with a couple things Endo.}
    sent: "2017-05-06T22:17:27.204Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590e3bd9e2285d3b163519d2"
    text: {@Gwarks  @greggirwin I thought that `first` is an `action!` as it was in R2, because of that I thought that it should be in `time.reds`.}
    sent: "2017-05-06T21:10:49.952Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "590e2629c4d73f445a7e5a88"
    text: {"John..Doe"@example.com^/only gives @example.com and the local part is missing}
    sent: "2017-05-06T19:38:17.202Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "590e25cd2b926f8a672b6d22"
    text: {abc."defghi".xyz@example.com^/gives an error}
    sent: "2017-05-06T19:36:45.976Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "590dfe039d90dc7a1c51204c"
    text: {> The problem I see is if you can create one synthetically that then molds to a malformed value. ^/^/`mold/all` and/or the future `mold/bin` should be able to handle that.}
    sent: "2017-05-06T16:46:59.460Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590dfa1e631b8e4e61abac83"
    text: {But I think the domain part can use the same lexing as `url!`.}
    sent: "2017-05-06T16:30:22.880Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590df9f90a783b6c0a6f1b54"
    text: {Peter's basic rule is almost enough. The domain part has a more limited charset than the local part.}
    sent: "2017-05-06T16:29:45.684Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590df9c30a783b6c0a6f1a9e"
    text: {I think the `ref!` type is still being considered. If we cover the most common cases in the base lexing rule, it will minimize the complexity, and will only cause an issue for a small number of cases. The problem I see is if you can create one synthetically that then molds to a malformed value. This is something we can address with language, noting it as a limitation. We can allow a subset of special chars without issue. If we provide guidelines for how people can use and support more complex email values (i.e. workarounds), they at least have a solution.}
    sent: "2017-05-06T16:28:51.420Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "590dd1350dcaa48e6733a5fd"
    text: "I"
    sent: "2017-05-06T13:35:49.243Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590db851c89bb14b5ad715cf"
    text: {```rebol^/>> type? foo@^/== email!^/```^/I wonder why no error in this case?}
    sent: "2017-05-06T11:49:37.397Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590db835e2285d3b16332efa"
    text: "Also, in Rebol, the following is valid:"
    sent: "2017-05-06T11:49:09.794Z"
    editedAt: "2017-05-06T11:50:03.752Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "590db815c89bb14b5ad7148d"
    text: "What would the *empty* email be then?"
    sent: "2017-05-06T11:48:37.509Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590db7e9d1a7716a0a9b244e"
    text: {But maybe you mean it shouldn't even give that error either, so `@foo` and `foo@` can be used for other things?}
    sent: "2017-05-06T11:47:53.860Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590db754c89bb14b5ad71218"
    text: {```rebol^/>> type? @^/** Syntax Error: Invalid email -- @^/** Near: (line 1) type? @^/```}
    sent: "2017-05-06T11:45:24.045Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590db73dd1a7716a0a9b2281"
    text: {@PeterWAWood I didn't know `@` was a valid email. Definitely in Rebol it isn't:}
    sent: "2017-05-06T11:45:01.607Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590d9a66c4d73f445a7c5881"
    text: {You are right. I mean any character valid in an email address.}
    sent: "2017-05-06T09:41:58.913Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590d94df33e9ee771c7c2f89"
    text: {I understand by "digit" a character 0-9, I think you mean any (valid) character.}
    sent: "2017-05-06T09:18:23.284Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "590d92962b926f8a67294ff4"
    text: {Re: email!^/^/Personally I don't see much point as treating any word containing an "@" as being an email! value. Surely, every genuine email would have at least one character before the @ and be followed by at least one character, a period and at least one other character.^/^/Every email address must have a recipient and a domain. As the top level domains don't have email servers, a genuine email! address will always include a ".". Doesn't this describe an email address?^/^/```email-rule: [some digit #"@" some digit #"." some digit]```^/^/Where digit is a valid digit in an email address.}
    sent: "2017-05-06T09:08:38.590Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590cdf4033e9ee771c7a03e5"
    text: {Time is internally stored as a total number of seconds (floating point number) but `first second` and `third` extract the whole number of hours, the number of minutes and the residual number of seconds respectively. This can also be achieved by `/1`  `/2`  `/3`  or `/hour` `/minute` and `/second`.}
    sent: "2017-05-05T20:23:28.864Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "590cb985d1a7716a0a97bd34"
    text: "Use `source` to see it"
    sent: "2017-05-05T17:42:29.443Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "590cb5aa0dcaa48e672ff887"
    text: "Ordinal selector funcs use `pick` internally."
    sent: "2017-05-05T17:26:02.977Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590caa789d90dc7a1c4c7ac9"
    text: {How does `first` work for `time!` values? I cannot see `first` in `runtime/datatypes/time.reds` shouldn't it be there?}
    sent: "2017-05-05T16:38:16.294Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "590c5fa6c4d73f445a77b475"
    text: "Thanks Nenad, duly noted!"
    sent: "2017-05-05T11:19:02.354Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "590c5e08ac693c532ac26f22"
    text: {FYI, the official Red documentation is at: http://doc.red-lang.org. If you use those Red docs + R/S docs + Rebol/Core Manual + Red blog articles, you should have covered pretty much all you need to know in order to use Red fully. You can use the chatrooms here for inquiring about the small differences between Red/Core and Rebol/Core. You can find all the relevant links [there](http://www.red-lang.org/p/documentation.html), with additional links to trusted third-party sites.^/We have big plans for 0.7.0 release, including a Red/Core documentation (so we can avoid redirecting to Rebol's one).}
    sent: "2017-05-05T11:12:08.128Z"
    editedAt: "2017-05-05T11:16:02.376Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590c5affc4d73f445a77a1a4"
    text: {@mydoghasworms Thanks for tip, I will do it :hammer: }
    sent: "2017-05-05T10:59:11.686Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c5940ac693c532ac25b77"
    text: {@rebolek Your collection of Red articles at http://red.qyz.cz/ is very sparse. May I suggest please to be adding a tutorial on using external libraries in Red/System? :smiley_cat: }
    sent: "2017-05-05T10:51:44.528Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "590c582c5c89dc53617a90d8"
    text: "@rebolek Thank you :bow: "
    sent: "2017-05-05T10:47:08.233Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "590c5725d1a7716a0a95e054"
    text: {FFI is planned for Red. Right now, you can call libraries from Red/System.}
    sent: "2017-05-05T10:42:45.157Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c53a6c4d73f445a778397"
    text: {Is it only possible to load and call external functions from libraries (.dll/.so) using Red/System? Is there, or will there be, a FFI-style capability in Red(/Core) to allow dynamic loading of libraries and calling their functions?}
    sent: "2017-05-05T10:27:50.401Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "590c3bf7ac693c532ac1e291"
    text: "Yes, it was him IIRC."
    sent: "2017-05-05T08:46:47.462Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590c3bb5ac693c532ac1e17b"
    text: {(The name that comes up in my memory over Anonymous is Jeff Kreis)}
    sent: "2017-05-05T08:45:41.081Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590c38f6c89bb14b5ad16c7f"
    text: "Similar to Doc's Parse blog post BF example :-)"
    sent: "2017-05-05T08:33:58.485Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590c38d9d1a7716a0a956000"
    text: "@pekr yup, that's impressive"
    sent: "2017-05-05T08:33:29.808Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c383a5c89dc53617a03a5"
    text: {@9214 Have you seen an alien script, which was created by a former RT employee? IIRC, it happened after an interview with Larry Wall, who claimed, that Rebol uses unnecessary punctuation :-)^/^/http://www.rebol.org/view-script.r?script=alien.r}
    sent: "2017-05-05T08:30:50.209Z"
    editedAt: "2017-05-05T08:31:02.846Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590c370833e9ee771c771a2e"
    text: {```^/>> system/console/prompt: "(☞ﾟ∀ﾟ)☞     "^/== "(☞ﾟ∀ﾟ)☞     "^/(☞ﾟ∀ﾟ)☞     system/console/result: "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ "^/(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧  "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ "^/(☞ﾟ∀ﾟ)☞     1 + 2^/(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧  3^/(☞ﾟ∀ﾟ)☞     'magic!^/(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧  magic!   ^/```^/}
    sent: "2017-05-05T08:25:44.307Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c35e90dcaa48e672da408"
    text: {Pity a lira char is not available for console fonts: ₻}
    sent: "2017-05-05T08:20:57.925Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590c35d133e9ee771c771428"
    text: {Well, as a fan, switching over, Alien covenant movie aproaching:^/^/```^/>> xeno: "₤—× " system/console/prompt: xeno^/== "₤—× "^/₤—× print "In space noone hears you scream!"^/In space noone hears you scream!^/₤—× ^/```}
    sent: "2017-05-05T08:20:33.127Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590c34ea0dcaa48e672d9fb1"
    text: {For Red internals I have started to collect some information in https://github.com/reddoc^/it is in the wiki inside the https://github.com/reddoc/develop repo}
    sent: "2017-05-05T08:16:41.999Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590c09cac89bb14b5ad0b65c"
    text: {Thanks for the feedback all. Noted. The Rebol Core guide that Arnold linked to is the best place to start for language design fundamentals right now.}
    sent: "2017-05-05T05:12:42.705Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590c076cac693c532ac12090"
    text: {@Dobeash maybe C vs. R/S, Red and Rebol are too high-level... oh, and Lisp vs. Redbol?}
    sent: "2017-05-05T05:02:36.235Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590bffeb0dcaa48e672ce25b"
    text: {"Six hours of debugging to change one single line. Sigh."^/-- John Carmack  5/3/17}
    sent: "2017-05-05T04:30:35.122Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590bbea733e9ee771c758cb2"
    text: {Problem with that is that there's usually no direct comparison (unless it's Red/System)}
    sent: "2017-05-04T23:52:07.435Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590baeb9ac693c532ac01220"
    text: "@Dobeash 👍"
    sent: "2017-05-04T22:44:09.580Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590bae0b2b926f8a672248d1"
    text: {To address the "it doesn't work like X" issue would it be helpful to have a table mapping "in C you do this", with, "which looks like this in Red"?}
    sent: "2017-05-04T22:41:15.533Z"
    v: 1
    author: "5580a11215522ed4b3e203d9"
) #(
    id: "590b9f4a0dcaa48e672bb34f"
    text: "Err, sorry @greggirwin "
    sent: "2017-05-04T21:38:18.576Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590b9ef7d1a7716a0a935f30"
    text: {I was actually quoting greg from earlier. The chat formatting didn't work out quite right.}
    sent: "2017-05-04T21:36:55.936Z"
    editedAt: "2017-05-04T21:37:31.091Z"
    v: 3
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "590b9ebb5c89dc536177fcaf"
    text: {@AlexanderBaggett It's the first three bullet points }
    sent: "2017-05-04T21:35:55.290Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590b8ed00a783b6c0a661274"
    text: "@iArnold :clap: "
    sent: "2017-05-04T20:28:00.356Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "590b8a96ac693c532abf8196"
    text: {> For those new to Red, does confusion come from:^/- Trying to understand how Red works internally?^/- Mapping what you know of other langs to Red concepts? i.e. it doesn't "work like X".^/- Red not doing what you expect?^/- Something else.^/^/Does red-by-example.org help?^/^/^/@greggirwin , Red-by-example does help quite a bit. It would be cool if it was a bit more complete.^/}
    sent: "2017-05-04T20:09:58.449Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "590b87100a783b6c0a65ed92"
    text: "@9214  True 😬"
    sent: "2017-05-04T19:54:56.918Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b86f7ac693c532abf7280"
    text: {Think the official docs should be pushed for next release.}
    sent: "2017-05-04T19:54:31.681Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b86d9d1a7716a0a92f196"
    text: {well, one could say that it's about language and community organisation ;)}
    sent: "2017-05-04T19:54:01.022Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590b86b70a783b6c0a65ec1c"
    text: {Think we're on the wrong thread for this stuff, perhaps should be on the welcome thread.}
    sent: "2017-05-04T19:53:27.236Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b8631c89bb14b5acef2eb"
    text: {IMO we should start gathering all dark and murky secrets in one place, creating The Red Book or something. `0.7.0` is arount the corner and we should be prepared for fresh blood and whole evangelizing mumbo-jumbo.}
    sent: "2017-05-04T19:51:13.369Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590b85f8c89bb14b5acef29b"
    text: {Well MacOS was merged into master branch so most of it will be possible using latest version, not release.}
    sent: "2017-05-04T19:50:16.293Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590b85e6c4d73f445a74b6e1"
    text: {@iArnold  yes I've used that, react has that many uses it makes my head hurt, brilliant.}
    sent: "2017-05-04T19:49:58.952Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b8572ac693c532abf6c18"
    text: "https://github.com/red/code/tree/master/Scripts"
    sent: "2017-05-04T19:48:02.637Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590b85422b926f8a6721971f"
    text: {There's Red github wiki, Red main site, and Rebol wikibooks, and rebol dot com documentation, @nickantonaccio  guides, @rebolek blog, tons of Rebol blogs, book from @PeterWAWood and another from Victor Pavlu, red-by-example... gosh!}
    sent: "2017-05-04T19:47:14.063Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "590b852433e9ee771c74b61e"
    text: {And the blog article on the homepage, and various examples.}
    sent: "2017-05-04T19:46:44.730Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590b850b0dcaa48e672b3e82"
    text: "https://doc.red-lang.org/en/reactivity.html"
    sent: "2017-05-04T19:46:19.779Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590b84dd0dcaa48e672b3ddf"
    text: {I shoudl also say I work on mac osx, which is behind windows RED, so that slows things for me considerably.  Still, I admire what the team are doing and there is a clear sense of going somewhere compared to the Rebol groups.  Red excites me and Rebol saddens me now}
    sent: "2017-05-04T19:45:33.439Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "590b842f33e9ee771c74b1d3"
    text: {@9214  yes I'm trying to keep myself to Red docs, to avoid me getting even more confused 😱}
    sent: "2017-05-04T19:42:39.405Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b8405c4d73f445a74b0c9"
    text: {plus  all valuable docs and articles are scarce and decentralized}
    sent: "2017-05-04T19:41:57.963Z"
    editedAt: "2017-05-04T19:42:35.572Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590b83b1c89bb14b5acee871"
    text: {@swthornton same here, Red slowly but steadily starts to mature and move away from R2, sure there're still some things in common, but it all feels like a dusty heritage}
    sent: "2017-05-04T19:40:33.172Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590b82c2c89bb14b5acee3a1"
    text: {@iArnold  is Red not starting to move away from Rebol now? I'm very interested in react but I don't believe that's in Rebol.}
    sent: "2017-05-04T19:36:34.563Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b81e7ac693c532abf5c65"
    text: {There is so much useful documentation http://www.rebol.com/docs/docs.html^/Especially this http://www.rebol.com/docs/core23/rebolcore.html }
    sent: "2017-05-04T19:32:55.437Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590b80710a783b6c0a65cefb"
    text: {@greggirwin ^/* Personally I'm interested in internals (prefer bottom-up approach in studying) and lack of documentation with books makes things all cryptic.^/* I don't "know" any language (and by knowing I mean understanding all shenanigans with ins and outs + working with it at least 2 years), though I can call myself a seasoned Schemer. That means I don't have any expectations or solid concepts... but "there's no ~~spoon~~ scope" mantra still haunts me!^/* Sometimes it doesn't, but that comes from 1st point. E.g. knowing what's a `series!`and how to deal with it (I'm looking at you `copy`), what's a `word!`, what's a context, bindology, etc.^/* Maybe it's a language barrier (I'm not a native English speaker) and lack of experience with programming overall. I mean, all this cool talks about R/S stuff and macros with dialects, sometimes I just feel myself like a puny first grader, in a good way. There's lots of stuff to learn in CS field and in Redbol land, it's just paralyzing.^/^/I used r-b-e a few times before I discovered `what` function ;)^/}
    sent: "2017-05-04T19:26:41.235Z"
    editedAt: "2017-05-04T19:27:03.112Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590b7c6912f05b512a2ca947"
    text: {@greggirwin  For me it's I'm so used to using curly brackets languages c# et al, that i struggle with what can go on one line or if it needs to be in a block, i also think when you do examples you may put - parse a b left r just x but not y. This is unintelligible to us c# guys 😁}
    sent: "2017-05-04T19:09:29.738Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b7c360a783b6c0a65b8b1"
    text: {red-by-example looks useful but I have never seen that before your mention.  For me Red simply uses an obscure syntax and its difficult to fully get my head around it in the absence of effective documentation.  Reading examples helps but sometimes it's extremely difficult to figure out down to each element what it is doing and then extrapolate that to doing other code - the nested blocks.  I think it just needs better documentation to help beginners from other languages, bear in mind that many who pick it up will be hobbyists and not focused entirely on Red itself in their early usage}
    sent: "2017-05-04T19:08:38.431Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "590b7b0b9d90dc7a1c47b642"
    text: {For those new to Red, does confusion come from:^/- Trying to understand how Red works internally?^/- Mapping what you know of other langs to Red concepts? i.e. it doesn't "work like X".^/- Red not doing what you expect?^/- Something else.^/^/Does red-by-example.org help?}
    sent: "2017-05-04T19:03:39.569Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b72e3631b8e4e61a21641"
    text: {@dnmurphy  yes great help on here luckily especially @greggirwin  😊 }
    sent: "2017-05-04T18:28:51.819Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b7212dbeff564731ae549"
    text: {@swthornton same with me, especially as I use Mac and many things that work in windows don't work in mac as yet, still its getting there}
    sent: "2017-05-04T18:25:22.916Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "590b7197e1b61e9328126c04"
    text: {@greggirwin Agreed, Reds attractant for me is the full stack, I'm sick of learning​ different platforms, whatever or wherever I'm asked to write something I want to say yes! I used Rebol a while ago but still find it difficult to follow some of the Red logic, especially with documentation missing.}
    sent: "2017-05-04T18:23:19.054Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b65ade3b0d4e353bffdfa"
    text: {I still remember how nice it was using Amos BASIC on Amiga. Feels a bit like a VID dialect .... http://3.bp.blogspot.com/-IJRERF23ZlE/UAmHY40tBTI/AAAAAAAAAZg/nkDRJi4xuZg/s1600/amiga-amos-01.png}
    sent: "2017-05-04T17:32:29.994Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590b5657c93941e153c97cc4"
    text: {Different beasts indeed. And whether Eve will succeed is not a given. Spreadsheets are a huge win, because they're easy to reason about, especially if you're familiar with the domain. Eve needs to magically produce expected results for non-programmers in the same way, from a simple UI. Otherwise Prolog would have won long ago. ^/^/Red isn't meant for non-programmers. However, programmers come in shades of gray. Red is *very* accessible to casual programmers, as BASIC and VB have been. And also, though we have some thought to apply in the presentation, like Logo. What Red promises, in one narrow view, is the ability for each level of competency in programming to build tools and share with other levels, without resorting to different languages.}
    sent: "2017-05-04T16:27:03.366Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b11fd08c00c092ae1fdae"
    text: "Agreed"
    sent: "2017-05-04T11:35:25.506Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b1003d32c6f2f09696ae3"
    text: "others may prefer different things"
    sent: "2017-05-04T11:26:59.583Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590b0fed5e61bd943430eb92"
    text: {@swthornton we can, just I as a programmer would like to have more powerful tool}
    sent: "2017-05-04T11:26:37.361Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590b0cbfc1d3b5015449f281"
    text: {True, they are very different beasts! I suppose we may ask how many people create servers and how many people create business applications.}
    sent: "2017-05-04T11:13:03.888Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590af8d812d2409935c5bd95"
    text: {while Red is more barebone and we can create things like EVE as well}
    sent: "2017-05-04T09:48:08.051Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590af8b74098d96d34362b34"
    text: "their primary target is WEB, at least it feels so"
    sent: "2017-05-04T09:47:35.017Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590af89ef22385553da2d500"
    text: {with EVE I don't feel like I can write any kind of application, like console utility or native gui app or a web server}
    sent: "2017-05-04T09:47:10.307Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590af8515e61bd943430838c"
    text: "Ubiquitous even 😁"
    sent: "2017-05-04T09:45:53.364Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590ae317edf919574a765902"
    text: {I think eve is attempting to become ubicutous with a wider audience, suitable for programmers and non-programmers. Like everyone can use Excel, they don't need to be an accountant or programmer. I think the hurdle with Red becoming as widely used as that is its heritage of coming from a scripting environment with a very terse language, its hard to digest initially, I think the language could expand and become more self explanatory now it can be compiled.}
    sent: "2017-05-04T08:15:19.745Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590a60688e4b63533d2cbbc3"
    text: {Not really @asampal, though there are similarities with blackboard systems if Eve grows remote data space capabilities. I don't see it as a relational system though, just generative atemporal communication. It's framed, in my mind, by what I've done before. Where Linda tuples could be matched based on exact values or placeholders, I used `parse` for matching, so rules can be arbitrarily complex.}
    sent: "2017-05-03T22:57:44.841Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590a5dec7b553c707c531165"
    text: { :point_up: [May 3, 2017 3:19 PM](https://gitter.im/red/red?at=590a2d5d08c00c092adea460) @greggirwin are you thinking something like Eve?}
    sent: "2017-05-03T22:47:08.851Z"
    editedAt: "2017-05-03T22:48:02.567Z"
    v: 2
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "590a5aaed32c6f2f0966e45c"
    text: {Why did other languages got so cumbersome? Did they not care about KISS? Is it because they are developed in a hurry by multiple people? I guess doing redbol for some times makes it difficult to look at other languages. }
    sent: "2017-05-03T22:33:18.997Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "590a59518e4b63533d2ca2d2"
    text: {Been looking at 7GUIs, thanks, I'll stay with red 😂}
    sent: "2017-05-03T22:27:29.635Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "590a3557881b89e101aeb48b"
    text: "Yes, would be pretty amazing."
    sent: "2017-05-03T19:53:59.838Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590a2d5d08c00c092adea460"
    text: {Reactors are currently local: https://doc.red-lang.org/en/reactivity.html^/^/How to scale and distribute them is a great thought experiment, which will also depend on the actor/concurrency model. I like the idea of reactive tuplespaces myself. }
    sent: "2017-05-03T19:19:57.339Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590a23c9f22385553d9fc13e"
    text: {Hi, what is the scope of the reactors? Would it be possible to have several applications on different servers with reactors that react to changes in the other apps?}
    sent: "2017-05-03T18:39:05.964Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "5909f7835e61bd94342c8d42"
    text: {@greggirwin I've started looking at your 7GUIs implementation. We should be able to use `react` for the temperature converter, I'll see if some changes are needed in the reactive engine for that.... I see, we need better ways to handle cyclic reactions...}
    sent: "2017-05-03T15:30:11.641Z"
    editedAt: "2017-05-03T15:31:46.271Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5909e34e12d2409935c1547d"
    text: {@KDr2 you're welcome. If you have any questions about how it works, feel free to ask.}
    sent: "2017-05-03T14:03:58.258Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5909e078c1d3b50154450ae0"
    text: "thanks @rebolek "
    sent: "2017-05-03T13:51:52.775Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5909dfe68bb56c2d110886f1"
    text: "It is not 100%, but works good enough."
    sent: "2017-05-03T13:49:26.885Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5909dfc6d32c6f2f09649853"
    text: {@KDr2 for example https://github.com/rebolek/gritter/blob/master/json.red}
    sent: "2017-05-03T13:48:54.326Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5909dd9a12d2409935c133f0"
    text: {@maximvl good stuff... I talked about fexpr some, they are basically the rebol idea(of abstraction, specifically the block, not all the other ideas) before rebol was around. As the saying goes, anything someone "invents" today was already made in lisp some time in the past...}
    sent: "2017-05-03T13:39:38.834Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5909dc42c1d3b5015444f7df"
    text: {Is there a library/function to parse a json string?}
    sent: "2017-05-03T13:33:54.106Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "5909d894f22385553d9e43cc"
    text: {@iArnold  <Note: the now long frozen chatroom "Red development team" on stackoverflow was opened exactly 666 days ago today>}
    status: true
    sent: "2017-05-03T13:18:12.423Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5908ab1c6aea30763d62b681"
    text: {:point_up: [May 2, 2017 4:05 AM](https://gitter.im/red/red?at=590859ecd32c6f2f095e076f) Nice. :^^)}
    sent: "2017-05-02T15:51:56.653Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59088adc12d2409935bb8831"
    text: {Software development has gotten exponentially worse & more complicated in the two decades since Carl Sassenrath's original rebellion. Nowadays all of the Cloud vendors are happy to keep the complexity up so that they can abstract it all for you. Plus instead of Flash and java applets, today you have SPA's with node, react and the like.}
    sent: "2017-05-02T13:34:20.650Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59087d8d08c00c092ad73141"
    text: "this world needs Red asap"
    sent: "2017-05-02T12:37:33.301Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59087d68881b89e101a72774"
    text: "not even funny anymore"
    sent: "2017-05-02T12:36:56.706Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59087d6312d2409935bb48bd"
    text: {>For correct file manager installation you will need an environment with Docker installed and no less than 1.5 Gb disk space.}
    sent: "2017-05-02T12:36:51.916Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59087d57edf919574a6c3375"
    text: "check this out: https://sprut.io/en/install"
    sent: "2017-05-02T12:36:39.644Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59086e118bb56c2d11025bda"
    text: {and few people were discussing how Red blocks are similar to fexpr's, which I don't know much about =(}
    sent: "2017-05-02T11:31:29.569Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59086d6408c00c092ad6e6d4"
    text: {@maximvl I think the Red runtime should be now at ~700KB (with compression, ~250KB). It includes the whole runtime library, the GUI and the interpreter.}
    sent: "2017-05-02T11:28:36.877Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59086d108bb56c2d11025726"
    text: {like in SBCL output is ~50MB because compiler and interpreter are inside}
    sent: "2017-05-02T11:27:12.972Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "59086cfe12d2409935bafe30"
    text: {@dockimbel btw one of the questions was how much is the generated binary and what part of Red is included into it}
    sent: "2017-05-02T11:26:54.927Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5908604c08c00c092ad6ab9d"
    text: "Looking forward to watch the video!"
    sent: "2017-05-02T10:32:44.161Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59085fc56aea30763d614072"
    text: {@maximvl Great! :clap: ^/> "wait, there is no way this can fit 1MB" :D^/^/He's right, it takes much less if you remove all the features from the runtime library, which are not used in your demo. ;-)}
    sent: "2017-05-02T10:30:29.848Z"
    editedAt: "2017-05-02T10:30:48.164Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59085dccc1d3b501543e8bad"
    text: {talking about Red in front of all these people who worked with modern "standard" languages feels like a rebellion or something, telling them that writing 20 lines of code with shitload of external libs to convert BMP image to PNG in Java or Python is basically a nonsence when you can do it in one line, like in Red}
    sent: "2017-05-02T10:22:04.380Z"
    editedAt: "2017-05-02T10:23:03.212Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59085d0b5f3e76601ede4e3b"
    text: "@maximvl Cool! "
    sent: "2017-05-02T10:18:51.317Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59085a0b12d2409935baaac7"
    text: "I'll post the video when it's ready"
    sent: "2017-05-02T10:06:03.080Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590859ecd32c6f2f095e076f"
    text: {fyi, my talk went well, few people got their mind blown, especially when I went to GUI and one guy was like "wait, there is no way this can fit 1MB" :D}
    sent: "2017-05-02T10:05:32.934Z"
    editedAt: "2017-05-02T10:06:27.471Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59085244d32c6f2f095de6be"
    text: "Similar result for `find/last`"
    sent: "2017-05-02T09:32:52.838Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "590851e28fcce56b2057ae15"
    text: {@dockimbel `find/reverse` behaves strange;^/```^/>> index? probe x: find/reverse/part "x" "x" 150^/""^/== 128^/>> index? probe x: find/reverse/part "x" "x" 150^/""^/== 37^/```}
    sent: "2017-05-02T09:31:14.485Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5907aef308c00c092ad430e1"
    text: {I understand concurrency is more of a 1.0 goal. I am curious however, what ideas are currently being considered.  }
    sent: "2017-05-01T21:56:03.867Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5905814bcfec9192728b2e54"
    text: {The semantics of `/last` and `/reverse` would benefit from some extra work it seems.}
    sent: "2017-04-30T06:16:43.352Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5904da67881b89e1019a8a04"
    text: {@dockimbel  This also confuses me,^/```^/>> find/reverse/part at "123x567x90" 7 "x" 30^/== "x90"^/>> find/reverse/part at "123x567x90" 7 "x" 31^/== ""^/```}
    sent: "2017-04-29T18:24:39.359Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5904d50ed32c6f2f0951feb9"
    text: {And another difference is negative `/part` values behaves different:^/```^/find/part/last next next "123456" "1" -10  ; Red = none, R2/R3 = "123456"^/```}
    sent: "2017-04-29T18:01:50.083Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5904d3e98bb56c2d11f5ee3e"
    text: "In the first case Red is also correct, R3 is not."
    sent: "2017-04-29T17:56:57.098Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5904d277881b89e1019a6e20"
    text: {On the other hand, on below case R3 is wrong, and Red is correct:^/```^/>> find/part next next "123456" "3" 2  ;  Red == "3456" , R3 == none^/```}
    sent: "2017-04-29T17:50:47.414Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5904d17e8e4b63533d17aa5f"
    text: {@dockimbel There is a small difference between Red and R3,^/```^/s: at "123456" 10 find/last s "1"  ; Red> none  ,  R3> "123456"^/```}
    sent: "2017-04-29T17:46:38.475Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5904adbb6aea30763d546082"
    text: "@dockimbel @greggirwin ext-word! feels decent"
    sent: "2017-04-29T15:14:03.154Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59048746d32c6f2f0950e5e2"
    text: "Yes, I figured out that. Thank you."
    sent: "2017-04-29T12:29:58.810Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "590486c08bb56c2d11f4cd66"
    text: {@endo64 Red implements it the same way as in R3. A case could be made for both ways (stopping or passing the offset position). Anyway, you can compare the position returned by  `find` with the offset of the series. I couldn't say which option would be the most common one. This could be revised once we have ability to parse in reverse.}
    sent: "2017-04-29T12:27:44.830Z"
    editedAt: "2017-04-29T12:30:01.094Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59048652587a245e245db2d0"
    text: {Hmm.. no problem when using with `/part`^/```^/>> s: at "123456" 3 find/last/part s "" 1^/== none^/```}
    sent: "2017-04-29T12:25:54.664Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "590485548bb56c2d11f4c682"
    text: {From one point it is understandable. But it makes a bit less usable when used in a loop.}
    sent: "2017-04-29T12:21:40.040Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59048513881b89e101996a7d"
    text: {Is this a bug? `find` finds `x` when used `/last` even if the position is advanced.^/```^/>> s: next "xyz" find/last s "x"^/== "xyz"^/```}
    sent: "2017-04-29T12:20:35.654Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59045b70c1d3b50154309bb7"
    text: {`pan-word!` according to dictionary, "pan-": all-inclusive, especially in relation to the whole of a continent, racial group, religion, etc.: pan-African}
    sent: "2017-04-29T09:22:56.878Z"
    v: 1
    author: "559257c315522ed4b3e313ce"
) #(
    id: "590445bed32c6f2f09501327"
    text: {@greggirwin `broad-word!`? I guess `ext-word!` could do.}
    sent: "2017-04-29T07:50:22.476Z"
    editedAt: "2017-04-29T07:53:35.118Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59041e1ccfec91927286b664"
    text: {Another possibility, if we want to keep `any-word!` for bindable words would be `ext-word!` instead of `all-word!`.}
    sent: "2017-04-29T05:01:16.505Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59041dbc881b89e1019828d5"
    text: {`Sym-word!` could be explained as "words that can symbolize for values", but it doesn't strike me as very nice either.}
    sent: "2017-04-29T04:59:40.014Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59041d35c1d3b501542fe283"
    text: "`Word-word!` came to mind as well, but... "
    sent: "2017-04-29T04:57:25.912Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59041cb68fcce56b204973c0"
    text: {What about `base-word!` for the typeset that covers bindable word types?}
    sent: "2017-04-29T04:55:18.089Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5903abee6aea30763d512bd6"
    text: {There is already plenty of nonsense going around the `block!`}
    sent: "2017-04-28T20:54:06.316Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5903abc0f22385553d87ff42"
    text: {I am going to have to ask that you guys `do` `call` off this silliness.}
    sent: "2017-04-28T20:53:20.256Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5903a0eef22385553d87d355"
    text: "extended-word"
    sent: "2017-04-28T20:07:10.026Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59039e3b881b89e1019699ac"
    text: "wordset"
    sent: "2017-04-28T19:55:39.818Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590393698e4b63533d137e07"
    text: "That is even more `cryptic!`."
    sent: "2017-04-28T19:09:29.738Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590390ca08c00c092ac64a60"
    text: "I'd vote for `morpheme!`"
    sent: "2017-04-28T18:58:18.205Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59038c998e4b63533d1363a0"
    text: {:point_up: [28 april 2017 17:41](https://gitter.im/red/red?at=590362acc1d3b501542d4e0d) `Lexeme!`? Can you find an alternative here? http://www.wordhippo.com/what-is/another-word-for/lexeme.html }
    sent: "2017-04-28T18:40:25.237Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590370cd587a245e245a0b54"
    text: {The idea that an issue would internally be a word type when it starts with a letter, but a string type if it starts with a digit, so things like serial numbers used in large quantities wouldn't overload symbol tables.}
    sent: "2017-04-28T16:41:49.673Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59036c18f22385553d86e863"
    text: "What is *smart issue*?"
    sent: "2017-04-28T16:21:44.159Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "590362acc1d3b501542d4e0d"
    text: {On word typesets, I agree that the more common case is the actual `*-word!` types. It should probably get the best name (`bindable-word!` is clear in meaning, but probably too long). @meijeru, I don't think we can say that having "word" in the name should decide that, because it doesn't apply to the other `any-*` typesets. I still don't want to lock `issue!` down as a literal either, holding out hope for the "smart issue" idea, or (less nice) the double `##` sigil to denote word vs string issues. `Symbol!` is used internally, and I've already said why I don't like `lexeme!`. I can't come up with anything better right now. As @meijeru suggests, maybe we forego the new typeset name until we can come up with a good one. }
    sent: "2017-04-28T15:41:32.768Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59035f92c1d3b501542d3e13"
    text: {@dockimbel How often does the larger set need mentioning? If rarely, just add `refinement!` and/or `issue!` as needed...}
    sent: "2017-04-28T15:28:18.983Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59035ee18bb56c2d11f0bec5"
    text: {@petr, yes, we'll work on alignment. Have to choose between tabs and spaces as the CLI on Windows makes tabs 8, and doesn't look as nice. The main goal of this version of help was to make it easier to maintain and adjust.}
    sent: "2017-04-28T15:25:21.411Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59035e5b587a245e2459b2db"
    text: {We have red/sandbox that could be the play area. We also have red/mezz for sharing mezz code and ideas.}
    sent: "2017-04-28T15:23:07.380Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59035bc2cfec91927283fe38"
    text: {what unit tests should I run for testing number conversions ?}
    sent: "2017-04-28T15:12:02.033Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "59035794f22385553d86819f"
    text: {@dockimbel is some sort of Rebol-like Encap functionality planned for Red? I mean some way to pack resources in one executable. I don't really like the idea of `Icon: <%icon-file.ico` field in Red header, it kinda reveals inner structure of the project. :(}
    sent: "2017-04-28T14:54:12.284Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59030636587a245e245811b6"
    text: {@x8x ^/> I would use current name and have another name for the `/red/git/code/` as it is more specific, `red/code` is being abused anyway. ^/^/The base principle of Gitter is to create rooms attached to repos on Github. `red/code` is the Gitter counterpart of `red/code`, as are `red/red`, `red/docs`,...}
    sent: "2017-04-28T09:07:02.438Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5902f7216aea30763d4de6e5"
    text: "`reduce` stress :wine_glass:"
    sent: "2017-04-28T08:02:41.785Z"
    editedAt: "2017-04-28T08:02:57.204Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5902f4b06aea30763d4ddb01"
    text: "`red/relax` :+1: Only wine please! 😂"
    sent: "2017-04-28T07:52:16.126Z"
    editedAt: "2017-04-28T07:52:39.705Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5902edf88e4b63533d109036"
    text: {Also some kind of "relax" zone would be nice. Talking just about anything. Well, not strictly, but e.g. pointers to some other stuff which one might find interesting for others, etc. Could be called `red/any`:-)}
    sent: "2017-04-28T07:23:36.809Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5902ecc712d2409935a79954"
    text: {I would use current name and have another name for the `/red/git/code/` as it is more specific, `red/code` is being abused anyway. 🤓}
    sent: "2017-04-28T07:18:31.629Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5902eb6fcfec919272820111"
    text: {@x8x Right, would a `red/share` do, or do you have a better suggestion?}
    sent: "2017-04-28T07:12:47.082Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5902e998c1d3b501542b11b6"
    text: {Thanks! Also, the`red/code`room is restricted to `^/Discussions about Red scripts in red/code repository` so we don't have a room to share code, I don't think any of the existing rooms is appropriate either.}
    sent: "2017-04-28T07:04:56.919Z"
    editedAt: "2017-04-28T07:05:42.371Z"
    v: 3
    author: "55740d7815522ed4b3e18b35"
)#(
    id: "5902e913cfec91927281f727"
    text: "You got it: https://gitter.im/red/bugs"
    sent: "2017-04-28T07:02:43.365Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5902e8c5f22385553d847afe"
    text: ":+1:"
    sent: "2017-04-28T07:01:25.593Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5902e8b58e4b63533d107e68"
    text: "@x8x Sounds like a good idea."
    sent: "2017-04-28T07:01:09.686Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5902e867881b89e101937bb3"
    text: {@dockimbel Maybe we should have a room `red/bugs` where to post and discuss probable bugs, issues,ecc before opening a git issue.}
    sent: "2017-04-28T06:59:51.406Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5902e70a881b89e101937499"
    text: {@meijeru Good point, the restricted set of words is much more used than the larger one, so it should have the best name. In such case, how to name the larger set, any idea? Searching some synonyms, I can't find anything better than `all-word!`...}
    sent: "2017-04-28T06:54:02.168Z"
    editedAt: "2017-04-28T07:00:09.488Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5902e66f881b89e10193723c"
    text: "@x8x works on Win both from script file and repl"
    sent: "2017-04-28T06:51:27.590Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5902e1df8fcce56b2044cafe"
    text: {Here are my thoughts: the new `any-word!` is nicely mnemonic because it groups only those types that have `word!` in them. I wonder if a new name for the old `any-word!` is even needed? How many times does it occur in the toolchain, or in user programs for that matter, that `refinement!` and `issue!` are put into one basket with words? I have said before that `issue!` is really a kind of literal, and I have understood that its definition and usage are to be discussed. And  refinements really occur  only in function-specs... It is not a loss if both cannot be used anymore as keys in map, since all "words" are collapsed into `word!` anyhow for that purpose. @doc can probably say which of the two proposals for change will give the most work in updating the toolchain, but my vote is for the new `any-word!` and not providing a new name for the old one.}
    sent: "2017-04-28T06:31:59.544Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5902dd09881b89e1019352fd"
    text: "Eh, sorry for 0, typing on a cell phone"
    sent: "2017-04-28T06:11:21.284Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5902dce0f22385553d8448ff"
    text: "0"
    sent: "2017-04-28T06:10:40.543Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5902dcc4587a245e24576933"
    text: "+1 for Doc's renaming proposal"
    sent: "2017-04-28T06:10:12.645Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5902d12908c00c092ac2e9e0"
    text: {@greggirwin The reason for splitting the old `any-word!` typeset in two groups is that some word-like datatypes can be bound to a context and some cannot. `all-word!` reads nicely as a typeset, but not that nicely as a function name. What about renaming `any-word!` typeset to `strict-word!` and keep `any-word!` for the larger set?}
    sent: "2017-04-28T05:20:41.621Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5902d03f08c00c092ac2e589"
    text: {What imo could be improved is output of help to particular function, e.g. look into the output of `help view` and the `=>` . This one could at least be properly aligned?}
    sent: "2017-04-28T05:16:47.502Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5902cff2c1d3b501542ab4d0"
    text: {When larger amount of functions is returned by `help`or `what`, I can see, that some descriptions followed by pipe are shifted to the right. The tabbing is surely difficult to get consistent due to variable lenght of the func names, but maybe shifting it 1-2 chars would help to improve the output ...}
    sent: "2017-04-28T05:15:30.090Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5902cf68cfec9192728198fc"
    text: {Enjoying the newly commited help system. Simple `help to-`or `help -word`finally works without the quotes. Thanks for that!}
    sent: "2017-04-28T05:13:12.696Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5902abb808c00c092ac2711b"
    text: {just giving you a stretch challenge like my friend always does to me =P}
    sent: "2017-04-28T02:40:56.207Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5902ab6ec1d3b501542a428e"
    text: {@x8x how about writing a pattern matching macro with a reactive object to automate that process?}
    sent: "2017-04-28T02:39:42.050Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5902a99f8bb56c2d11ede659"
    text: "words/set 'red as an on load func"
    sent: "2017-04-28T02:31:59.767Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5902a8dd8bb56c2d11ede3c2"
    text: {"On load" have it collect the Red system words. Automagically }
    sent: "2017-04-28T02:28:45.520Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5902a6f4c1d3b501542a332e"
    text: {@gltewalt Not sure I understand, are you speaking about the `words` function? What would you want to achive?}
    sent: "2017-04-28T02:20:36.111Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59029484cfec91927280dca8"
    text: "Ah, thanks."
    sent: "2017-04-28T01:01:56.337Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5902945712d2409935a681a7"
    text: "Oh, @x8x function"
    sent: "2017-04-28T01:01:11.155Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590292706aea30763d4c970f"
    text: "Steps 1 and 2 of what?"
    sent: "2017-04-28T00:53:04.025Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59029200c1d3b5015429f0d7"
    text: {Could you move steps 1 and 2 into a system/lexer/pre-load thing?}
    sent: "2017-04-28T00:51:12.268Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590285db12d2409935a651a2"
    text: "It's better than `any-all-word!` though. :^^)"
    sent: "2017-04-27T23:59:23.392Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590285a6881b89e101923cc2"
    text: {I *almost* want to suggest `lexeme!` but it seems both too broad and too technical.}
    sent: "2017-04-27T23:58:30.691Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590283918e4b63533d0f34e5"
    text: {New `help` output is broken until this change is in.}
    sent: "2017-04-27T23:49:37.292Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5902828a8fcce56b2043aa08"
    text: {I'll put a PR out, and we can revisit if Doc has something different in mind. There has to be a good reason for him to change any-word.}
    sent: "2017-04-27T23:45:14.582Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59028223cfec91927280a482"
    text: {Trying to decide if I like the name, though it really has to match the typeset, and makes adding it easy.}
    sent: "2017-04-27T23:43:31.358Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590281e38fcce56b2043a7d0"
    text: "Working on it now."
    sent: "2017-04-27T23:42:27.218Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59027ed908c00c092ac1eaec"
    text: "but we don't have `all-word?`"
    sent: "2017-04-27T23:29:29.861Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59027e45881b89e1019226e4"
    text: {Ah! we have new `help` 🤓^/```^/  ? any-word!^/ANY-WORD! is a typeset! value: make typeset! [word! set-word! lit-word! get-word!]^/  ? all-word!^/ALL-WORD! is a typeset! value: make typeset! [word! set-word! lit-word! get-word! refinement! issue!]^/```}
    sent: "2017-04-27T23:27:01.888Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59027dc8881b89e10192257a"
    text: "What's the new beahviour?"
    sent: "2017-04-27T23:24:56.098Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59027ab608c00c092ac1dc9f"
    text: {And we have a new `all-word!` typeset that matches the old one.}
    sent: "2017-04-27T23:11:50.477Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590279b08bb56c2d11ed4477"
    text: "AH! `any-word!` typeset changed."
    sent: "2017-04-27T23:07:28.386Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590277798fcce56b20437ecc"
    text: {Something's amiss:^/```^/>> remove-each val blk: [a /b 3 #x 5x5] [not any-word? val]^/>> blk^/== [a]^/```}
    sent: "2017-04-27T22:58:01.159Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590275a1587a245e2456217c"
    text: "See gist comment for instructions."
    sent: "2017-04-27T22:50:09.415Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5902757af22385553d82fa53"
    text: {Linux and macOS console history + init script https://gist.github.com/x8x/affd2c0b556027b423bfa95c17770096}
    sent: "2017-04-27T22:49:30.352Z"
    editedAt: "2017-04-27T22:58:51.335Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "590273318fcce56b20437304"
    text: {Must agree that for small objects it maybe is more appropriate to not sort, eg have them in the defined order, but when eye scanning "not my code", I find it more painfull. Anyway, I'm guru tomato so don't use `help` 😜}
    sent: "2017-04-27T22:39:45.609Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5902700008c00c092ac1b8a2"
    text: {I've never been a fan of `what`, but I understand the reason for it. You can find it with `help` and when you use it, you get an easy way to see everything. For very new users, refinements themselves are a new hurdle to overcome. I like leveraging it, but we could do that with an internal func, rather than with `what`. ^/^/Sort on objects *may* be useful, but some things already sort, so it only applies to objects, and may be confusing. Sorting seems most helpful in the context of `system/words` or other large references.^/^/Seems a bug crept in though, which I need to look into. Locals appear in usage. Don't remember seeing that before.}
    sent: "2017-04-27T22:26:08.441Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590257ac8fcce56b204307dc"
    text: {@greggirwin I had to read the source to see that `what/with` and `what/with/spec` are internally called by `help`, so the only usefulness of exporting `what` is without refinements to list all words. I thing it could be confusing to have both way to access the same functionality. I would either export only a `what` function without refinements or add an `/all` refinement to the `help` function to get all words list.^/In my case I did `what` then `? what` then I tryied the refinements, just to later find out that I could instead use `? ..`.}
    sent: "2017-04-27T20:42:20.841Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59025455881b89e101917f44"
    text: "@maximvl  Thx! 😉"
    sent: "2017-04-27T20:28:05.758Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "590252396aea30763d4bab35"
    text: {@greggirwin What do you think about adding a `/sort` refinement to `help` such that ex: `? system/words` would return alphabetically sorted list and ex: `? system` would return list of words being objects with their `words-of`block also sorted?}
    sent: "2017-04-27T20:19:05.511Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5902505b6aea30763d4ba2e9"
    text: {@x8x nice one, I have something similar (thought more simple) in my console addon to show user-defined words :)}
    sent: "2017-04-27T20:11:07.480Z"
    editedAt: "2017-04-27T20:11:30.582Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590249c3cfec9192727fbf47"
    text: {Happy you like it! :-) Yea, I use it to detect leaks and to see if/what gets redefined when I load external code.}
    sent: "2017-04-27T19:42:59.657Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5902492acfec9192727fbd3e"
    text: {@x8x WOW! Yes. `Query` in R2 could be used in a very basic way like that, but yours is incredible. I had a simple func like it, no multiple history though, called `mark-my-words` for R2. :^^) Have to think about naming, but it could be *really* useful. Could be used to automatically detect words leaked from contexts, even when we get to modules. Tied in with `include` it could give an IDE a word list by inclusion.}
    sent: "2017-04-27T19:40:26.511Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5902424ccfec9192727f9afb"
    text: {Hello  @greggirwin and @Oldes, nice work on the new help function! :-)^/I'm wondering if this function would be useful addon to console:^/```red^/words: function [^/^-/set^-^-^-"save difference between current status and last saved status"^/^-^-s [word!]^-"name of new saved status"^/^-/get^-^-^-"return words from a previously saved status"^/^-^-g [word!]^-"name of status to retrive"^/^-/list^-^-^-"return list of available statuses"^/^-/full^-^-^-"return pairs of status and defined words"^/^-/show^-^-^-"print all status, related defined words AND redefined words"^/^/^-return: [block!]^/][^/^-wl: []^/^-last-ws: []^/^-last-wh: []^/^-ws: clear make block! 500^/^/^-if full [return wl]^/^-if list [return extract wl 2]^/^-if get [return select wl g]^/^-if show [^/^-^-^-foreach i words/list [^/^-^-^-^-print append form i ":"^/^-^-^-^-print mold words/get i^/^-^-^-^-print mold intersect ws words/get i^/^-^-^-^-prin newline^/^-^-^-^-append ws words/get i^/^-^-^-]^/^-^-exit^/^-]^/^-foreach w sort exclude words-of system/words [system words] [^/^-^-if value? w [append ws w]^/^-]^/^/^-either set [^/^-^-append wl s^/^-^-append/only wl copy []^/^/^-^-foreach w ws [^/^-^-^-; h: mold system/words/get w^/^-^-^-h: enbase/base checksum mold system/words/get w 'md5 16^/^-^-^-either i: find last-ws w [^/^-^-^-^-i: index? i^/^-^-^-^-if last-wh/:i <> h [^/^-^-^-^-^-append last wl w^/^-^-^-^-^-last-wh/:i: h^/^-^-^-^-]^/^-^-^-][^/^-^-^-^-append last wl w^/^-^-^-^-append last-ws w^/^-^-^-^-append last-wh h^/^-^-^-]^/^-^-]^/^-^-last wl^/^-][ws]^/]^/```^/It works like this:^/1) launch red console^/2) save current words status^/```^/words/set 'red^/```^/3) define some words, redefine some others:^/```^/a: 'hello^/b: 123^/uppercase: :lowercase^/random: func[i][1]^/```^/4) save current status:^/```^/words/set 'custom^/```^/5) see all status with for each, words defined and redefined compared to last saved status^/```^/words/show^/red:^/[% * ** + - / // < << <= <> = == =? > >= >> >>> ? ?? a-an about absolute ..]^/[]^/^/custom:^/[a b random uppercase]^/[random uppercase]^/```^/}
    sent: "2017-04-27T19:11:08.812Z"
    editedAt: "2017-04-27T19:13:57.828Z"
    v: 4
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5901cbd18e4b63533d0bcfb1"
    text: {Never mind found my error but deleted the post anyway}
    sent: "2017-04-27T10:45:37.978Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "5901b7f212d2409935a2aa0a"
    text: "@qtxie ;)"
    sent: "2017-04-27T09:20:50.341Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5901b7b408c00c092abe4e2d"
    text: {@Zamlox Good to know. :smile:  Then we can take advantage of it.}
    sent: "2017-04-27T09:19:48.704Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5901b693587a245e24529bef"
    text: {@qtxie error checking can be done also by using second parameter of ```strtod```}
    sent: "2017-04-27T09:14:59.246Z"
    editedAt: "2017-04-27T09:15:16.972Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
)#(
    id: "5901aabf8fcce56b203fd852"
    text: "ok, thanks. Text works ..."
    sent: "2017-04-27T08:24:31.504Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5901aa7612d2409935a26ec7"
    text: "@pekr Only text for now."
    sent: "2017-04-27T08:23:18.657Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5901a922f22385553d7f3b36"
    text: {Just tried to read a clipboard, where the image was stored. Got the bitset back? Is that a pointer? Or can't we get an image binary data yet?^/```^/>> img: read-clipboard^/== make bitset! #{0000000020C000300000001400000014}^/>> type? img^/== bitset!^/>> length? img^/== 128^/```}
    sent: "2017-04-27T08:17:38.586Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5901a1ba881b89e1018e0da4"
    text: {IIRC, in the first implementation we use those R/S functions. The reason we use the lexer instead is error checking. ^/```^/>> to-integer "10a32"^/*** Syntax Error: invalid integer! at "10a32"^/*** Where: do^/```}
    sent: "2017-04-27T07:46:02.761Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5901968312d2409935a213a5"
    text: "@dockimbel all right, I will submit a PR later."
    sent: "2017-04-27T06:58:11.839Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "59018b07cfec9192727c4029"
    text: "@Gwarks "
    sent: "2017-04-27T06:09:11.348Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5901869dd32c6f2f09453f1f"
    text: {@Zamlox Good point, I forgot we had those two `make-*` functions in the runtime lexer code. You can submit a PR if you want, to replace `load-value` in `integer.reds` and `float.reds`.}
    sent: "2017-04-27T05:50:21.388Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59017e80881b89e1018d876e"
    text: {@geekyi depends on what is the destination type. When it's number, there is no need to allocate extra memory. ```strod``` C++ runtime function does not allocate extra memory when converts from string to double (string/to-float inside string.reds uses this function).  Actually I have modified those conversion functions to use ```make-float``` and ```make-number``` (with some adaptation) instead  of lexer, and they are fine now.}
    sent: "2017-04-27T05:15:44.292Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5901756b8e4b63533d0a7e2e"
    text: {@Zamlox Those two conversion cases are also sub-optimal currently, they call the lexer to do the conversion (the lexer allocates a block by default for containing the loaded values). Maybe we could re-use some code from the old pure R/S lexer we had a couple of years ago, to speed it up.}
    sent: "2017-04-27T04:36:59.340Z"
    editedAt: "2017-04-27T04:37:41.865Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590173f9587a245e245187f3"
    text: {I've no idea how you can not allocate conversion if it's to a different datatype. You have to simply delete the initial value of unused right? We'd have gc for that. }
    sent: "2017-04-27T04:30:49.396Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590172c912d2409935a19835"
    text: {@gltewalt ```do "7"``` will also allocate extra memory}
    sent: "2017-04-27T04:25:45.224Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "59017231c1d3b5015424e8de"
    text: "I have tested only from string to numbers."
    sent: "2017-04-27T04:23:13.527Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "590172116aea30763d47b82c"
    text: {@Zamlox if it's to the same type, `to` is no-op right? }
    sent: "2017-04-27T04:22:41.077Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5901720c8e4b63533d0a753e"
    text: {What about: do "7" }
    sent: "2017-04-27T04:22:36.002Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5901716f8e4b63533d0a7340"
    text: {@dockimbel all right, then I will use plan B :) How about conversion functions from string to numbers (```to-float``` ```to-integer```). They also allocate extra memory.}
    sent: "2017-04-27T04:19:59.142Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "59016e9ac1d3b5015424de5c"
    text: {@Zamlox I don't think such convention is practical enough, as memory allocations can depend on the code path taken inside the function at run-time (including possible deep allocation(s) in nested function calls). For the `take/last` case, it seems the implementation is sub-optimal for `/last` refinement, as it shouldn't need any allocation in such case. @qtxie Could you please have a look at that one?}
    sent: "2017-04-27T04:07:54.674Z"
    editedAt: "2017-04-27T04:12:55.652Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590154cfd32c6f2f0944a4fc"
    text: {Or maybe this is more to your liking:^/```^/reddy: function [] [^/^-s: read-clipboard^/^-b: attempt [load s]^/^-blk?: block? b^/^-print form reduce [^/^-^-"^^-Clipboard Contents^^/"^/^-^-"^^-String length:" length? s newline^/^-^-"^^-Lines:        " length? split s #"^^/" newline^/^-^-"^^-Block length: " if blk? [length? b] newline^/^-^-"^^-Molded length:" if blk? [length? mold b] newline^/^-^-"^^-Molded Lines: " if blk? [length? split mold b #"^^/"] newline^/^-^-"^^-Preview:      " mold copy/part either blk? [mold b][s] 40 newline^/^-]^/]^/```}
    sent: "2017-04-27T02:17:51.142Z"
    editedAt: "2017-04-27T02:18:02.138Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590154b8c1d3b50154248cbc"
    text: {@qtxie reminded me that we have clipboard access. Copy and paste this into a Red console.^/```^/clippy: function [/show-me-the-clipboard] [^/^-s: read-clipboard^/^-b: attempt [load s]^/^-blk?: block? b^/^-print either show-me-the-clipboard [^/^-^-[^/^-^-^-"Clippy (that's me!) says the clipboard contains" length? s "bytes. It looks like it has^^/"^/^-^-^-length? split s #"^^/" "lines in it, as a plain string." either none? b [^/^-^-^-^-"It doesn't look like a block.^^/"^/^-^-^-][^/^-^-^-^-form reduce [^/^-^-^-^-^-"As a block it has" length? b "items, and is" length? mold b ^/^-^-^-^-^-"bytes^^/when molded. If I count the lines after molding it, there"^/^-^-^-^-^-"are" length? split mold b #"^^/" "of them."^/^-^-^-^-]^/^-^-^-]^/^-^-^-"^^/^^/Bye now!"^/^-^-]^/^-]["Hi! I'm Clippy."]^/]^/```}
    sent: "2017-04-27T02:17:28.166Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900f2458fcce56b203d2f4e"
    text: {Yes, welcome @wilbyang ! Sorry your first experience wasn't great. Let us know if you get it working.}
    sent: "2017-04-26T19:17:25.815Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900ebc6d32c6f2f09430e81"
    text: {@dockimbel would it be possible to specify somehow which functions allocate extra memory and which not ? For example when  they are implemented, to put a comment inside function source code (using some standard format). I just found out that if I remove last element of a block using ```take/last``` will allocate extra memory while using ```remove back tail``` will not. }
    sent: "2017-04-26T18:49:42.821Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5900d48308c00c092abacb4b"
    text: {@wilbyang hi there, welcome to the community! :sparkles: }
    sent: "2017-04-26T17:10:27.081Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5900cf53c1d3b50154225558"
    text: {@wilbyang Just use the latest automated build from master branch on Download page, it has the Mac GUI support.}
    sent: "2017-04-26T16:48:19.913Z"
    editedAt: "2017-04-26T16:48:51.527Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5900c580c1d3b50154221e1a"
    text: {@wilbyang If you use latest Red version (preferably build it from sources yourself), then you can use GUI on macOS.}
    sent: "2017-04-26T16:06:24.305Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5900c54e8e4b63533d07a96a"
    text: {@rebolek thanks for telling it. I am stuck at this for hours}
    sent: "2017-04-26T16:05:34.889Z"
    v: 1
    author: "5900c3f6d73408ce4f5b2ec0"
) #(
    id: "5900c500587a245e244eac8f"
    text: {@wilbyang GUI on macOS is not yet officially supported.}
    sent: "2017-04-26T16:04:16.844Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5900c465c1d3b501542218f2"
    text: {➜  Downloads ./red-062 -c -t Darwin hello-gui.red^/^/-=== Red Compiler 0.6.2 ===- ^/^/Compiling /Users/wilbyang/Downloads/hello-gui.red ...^/...compilation time : 930 ms^/^/Target: Darwin ^/^/Compiling to native code...^/...compilation time : 25752 ms^/...linking time     : 190 ms^/...output file size : 544768 bytes^/...output file      : /Users/wilbyang/Downloads/hello-gui ^/^/^/➜  Downloads ./hello-gui ^/*** Script Error: view has no value^/*** Where: ???^/➜  Downloads cat hello-gui.red ^/Red [Needs: 'View]^/    ^/view [text "Hello World!"]}
    sent: "2017-04-26T16:01:41.298Z"
    v: 1
    author: "5900c3f6d73408ce4f5b2ec0"
) #(
    id: "5900c4636aea30763d44f9b3"
    text: {I am attract by red's magic and totally new to it. I am running an exmaple, but can not succeed}
    sent: "2017-04-26T16:01:39.423Z"
    v: 1
    author: "5900c3f6d73408ce4f5b2ec0"
) #(
    id: "590056accfec91927276ed14"
    text: {@x8x I think some checks are missing to forbid it, it works only because you search for codepoints in ASCII range, otherwise it won't work:^/```lisp^/>> find #{C3A9} "é"^/== none^/>> find #{C3A9} to-binary "é"^/== #{C3A9}^/```}
    sent: "2017-04-26T08:13:32.202Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59004e7ecfec91927276c871"
    text: {@dockimbel My thesis will be complete by the end of the summer. Originally I wanted to finish it in one semester, but that isn't going to pan out. All my coursework is done though at this point.}
    sent: "2017-04-26T07:38:38.084Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "59004abd12d24099359c7593"
    text: {@dockimbel by analogy, this works:^/```^/  replace/all to-binary {aba} {a} {b}^/;   #{626262}^/```^/so I expected parse to do the magic invisible conversion and just work the same.}
    sent: "2017-04-26T07:22:37.806Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59003faa08c00c092ab7ea63"
    text: {I hadn't even thought about the multiple word case, but I've never really used something like that in practice. But maybe it's just because it's not an idiomatic thing in C#. More common for me would be using a zip method to combine multiple series into one, and in that case, I think it would just stop as soon as the first series ends}
    sent: "2017-04-26T06:35:22.574Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59003eda12d24099359c3f45"
    text: "hah, okay"
    sent: "2017-04-26T06:31:54.135Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59003eb6cfec919272768093"
    text: "Even simpler!"
    sent: "2017-04-26T06:31:18.779Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59003e56587a245e244c0447"
    text: {interesting. I didn't realize the `if` returns none if it doesn't evaluate. That makes sense. I'm struggling a bit with `[do body]` vs where I just had `body`}
    sent: "2017-04-26T06:29:42.124Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59003bd8d32c6f2f093fc690"
    text: "We're thinking along the same lines. :^^)"
    sent: "2017-04-26T06:19:04.809Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59003b548bb56c2d11e32289"
    text: {```^/; Can't use `function` here, because it will collect set-words^/; in the body, which may be closure vars.^/closure: func [^/^-vars [block!] "Values to close over, in spec block format"^/^-spec [block!] "Function spec for closure func"^/^-body [block!] "Body of closure func; vars will be available"^/][^/^-func spec compose [(bind body context vars)]^/]^/^/generator: :closure^/^/make-n-gen: func [n [integer!]][^/^-closure compose [n: 0  max: (n)] [] [n: n + 1 if n <= max [n]]^/]^/^/for-gen: function [^/^-'word [word! block!] "NOT CAPTURED!"^/^-gen   [function!] "Generator that returns none when complete"^/^-body  [block!]^/^-/check end? [function!] "Specify alt test for end; return true to complete"^/][^/^-end?: any [:end? :none?]^/^-either word? word [^/^-^-while [not end? set word gen][do body]^/^-][^/^-^-while [not end? foreach w word [set w gen]][do body]^/^-]^/]^/^/gen: make-n-gen 3^/for-gen i :gen [print i]^/gen: make-n-gen 7^/for-gen [i j] :gen [print [i j]]^/gen: generator [s: "abc"][][take s]^/for-gen i :gen [print i]^/gen: generator [s: "abc"][][also first s s: next s]^/for-gen/check i :gen [print i] func [ch][not char? ch]^/gen: generator [s: "abcd"][][also first s s: next s]^/for-gen/check [i j] :gen [print [i j]] func [ch][not char? ch]^/; This brings up a question about the end condition. Should we DO the ^/; body as long as *any* of the words are set, or only if *all* of the^/; words are set? Right now, it's the latter.^/gen: closure [s: "abc"][][also first s s: next s]^/for-gen/check [i j] :gen [print [i j]] func [ch][not char? ch]^/```}
    sent: "2017-04-26T06:16:52.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59003ae1cfec91927276715e"
    text: "Your `range` bit is nice. "
    sent: "2017-04-26T06:14:57.586Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59003a78c1d3b501541f68ee"
    text: "You got me thinking, and I tinkered."
    sent: "2017-04-26T06:13:12.421Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590039f8881b89e10187e3df"
    text: {Give me a couple minutes and I'll post something else.}
    sent: "2017-04-26T06:11:04.715Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590039b9f22385553d78ceb7"
    text: {@greggirwin  thanks! that really helped me with [this experiment](https://gist.github.com/dander/7e9118778acda64f18ee4fa6e7c9e1e8) I had been poking at. The closure method definitely seems cleaner than what I was doing. I think for a generator-making function, the vars and spec could be generalized as well.^/```^/for-gen: func [^/    'word [word!]^/    gen [function!]^/    body [block!]^/][^/    while reduce [to-set-word :word 'gen] body^/]^/```^/I think this works}
    sent: "2017-04-26T06:10:01.933Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5900388cf22385553d78ca4c"
    text: {@greggirwin Ah ok, it's clearer with that code example. It should be possible to support that.}
    sent: "2017-04-26T06:05:00.768Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59003690f22385553d78c353"
    text: {One of the things I've used `set` for, with multiple words, is to show that the changes are related, as a group.}
    sent: "2017-04-26T05:56:32.853Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59003675587a245e244be64e"
    text: {@x8x Binary and string series and very different in Red. In Rebol2, they share the same implementation, because R2 does not support Unicode. So you cannot match a string with a binary unless you convert that string (evebtually using specific encoding) to a binary first. Though, in practice, you can just pre-convert all the matching strings in your rules to binaries, so it's really not an issue.}
    sent: "2017-04-26T05:56:05.565Z"
    editedAt: "2017-04-26T06:01:00.007Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59003633587a245e244be598"
    text: {My use case on `set`, which raised the question, was setting facets on two faces. e.g.^/```^/^-t/text: "A"^/^-p/data: 100^/; vs.^/^-set [t/text p/data] ["A" 100]^/```}
    sent: "2017-04-26T05:54:59.821Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900355dcfec919272766085"
    text: {Not necessarily. My thoughts were 1) it's almost free, I think, and 2) even though it's kind of an odd word the meaning is clear. I'll have to see if I can find my old notes on func usage.}
    sent: "2017-04-26T05:51:25.215Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59003530f22385553d78beca"
    text: {@greggirwin `set`, yes, that's by design, `set` is for setting word(s) to value(s). The path extension is just there to allow deep word access in a context. `poke` and `put` are there for setting values in series (and some aggregate types).}
    sent: "2017-04-26T05:50:40.706Z"
    editedAt: "2017-04-26T05:50:49.913Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59003449587a245e244bde0b"
    text: {@greggirwin `forskip` Do we really need it once we'll adopt your `for` REP?}
    sent: "2017-04-26T05:46:49.253Z"
    editedAt: "2017-04-26T05:47:00.571Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59002ce6c1d3b501541f34df"
    text: "@x8x I've been wondering about that too"
    sent: "2017-04-26T05:15:18.728Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ffea63c1d3b501541e4988"
    text: "Ok, thanks @greggirwin ."
    sent: "2017-04-26T00:31:31.586Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58ffe2d3f22385553d779659"
    text: {I got Red set up in the linux VM, so it's usable as a cloud repl.... but no language templatey things for rebol or red (for the IDE part)}
    sent: "2017-04-25T23:59:15.164Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58ffe262f22385553d7794ef"
    text: {@gltewalt, someone else mentioned it recently. Nobody has started on it AFAIK.}
    sent: "2017-04-25T23:57:22.251Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffe24ed32c6f2f093e987a"
    text: {@x8x, probably, but possibly by design. Need to wait for Nenad I think.}
    sent: "2017-04-25T23:57:02.420Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffe1dac1d3b501541e274c"
    text: {Has anyone looked in to adding support for Red in Cloud 9 IDE?}
    sent: "2017-04-25T23:55:06.256Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ffdd6912d24099359ae4b0"
    text: {Is this good for an issue?^/```^/   parse to-binary "a" ["a"]^/;   false^/  parse to-binary "a" [thru "a"]^/*** Script Error: PARSE - invalid rule or usage of rule: "a"^/*** Where: parse^/  parse to-binary "a" reduce ['thru to-binary "a"]^/;   true^/```}
    sent: "2017-04-25T23:36:09.248Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58ffbfd4881b89e101863651"
    text: "I don't have a `for-gen` example yet. :^^)"
    sent: "2017-04-25T21:29:56.286Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffbfac12d24099359a7302"
    text: {```^/generator: :closure^/blk-val: generator [block: [1 2 3 4 5]] [] [take block]^/```}
    sent: "2017-04-25T21:29:16.197Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffbf0e8e4b63533d0353ab"
    text: {@dander, https://gist.github.com/greggirwin/c0fe722deffb7b448286b5a819e0ca2b}
    sent: "2017-04-25T21:26:38.744Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffbe858e4b63533d035065"
    text: "ohh, ok :smile: "
    sent: "2017-04-25T21:24:21.705Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58ffbe72587a245e244a3016"
    text: "Because we don't have a `date!` datatype yet."
    sent: "2017-04-25T21:24:02.880Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffbe62cfec91927274c081"
    text: {Btw, how come that `now` still lacks refinements other than `/time`?}
    sent: "2017-04-25T21:23:46.598Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58ffbd75881b89e101862ba0"
    text: {It comes up from time to time, but I don't think it's on a priority list.}
    sent: "2017-04-25T21:19:49.448Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffb87808c00c092ab5eefb"
    text: {Ahh, I see. Has there been much discussion in the past about generators / iterators? I know it's possible build some of that stuff already (and `closure!` would make it easier), but I'm curious if it would be considered for a core feature (for example, as an input to `foreach` or in the yet-to-be-created high order functions).}
    sent: "2017-04-25T20:58:32.354Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58ffaaeb881b89e10185d122"
    text: {I believe this is just capturing things like the `word` param in `foreach`.}
    sent: "2017-04-25T20:00:43.236Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffa317881b89e10185ae7b"
    text: {I was wondering if there are any details about what iterator support might look like, relating to [this trello card](https://trello.com/c/h92v806T/148-research-on-local-contexts-support-for-iterators)}
    sent: "2017-04-25T19:27:19.822Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58ff9888881b89e1018583ff"
    text: {@dockimbel, another design question. `Set` can take a path, but if you use a block it doesn't support paths in the block, only words. By design? I always wanted path support in `set` in R2, and now I want even more in Red. :^^) }
    sent: "2017-04-25T18:42:16.330Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff8626cfec91927273ba3b"
    text: {@dockimbel, I can't remember, is `forskip` something you want to leave out entirely?}
    sent: "2017-04-25T17:23:50.921Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff7f5512d2409935993f25"
    text: {@toomasv, I don't think you can really compare them. Totally different targets. Mozart is targeted at research, right? }
    sent: "2017-04-25T16:54:45.805Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff7e50cfec9192727395b0"
    text: {@toomasv ^/>In order to build Mozart 2, you need the following tools on your computer:^/^/it's too complex to start with it ;)}
    sent: "2017-04-25T16:50:24.777Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ff7bec587a245e2448dc03"
    text: {That should work, though it was tested only on Windows using Excel as host app.}
    sent: "2017-04-25T16:40:12.158Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff7b2a08c00c092ab4c892"
    text: {When i call RedOpen after RedClose again i got an error}
    sent: "2017-04-25T16:36:58.288Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff7b1a881b89e10184f006"
    text: "Other question can i reset interpreter"
    sent: "2017-04-25T16:36:42.171Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff7b06d32c6f2f093cd434"
    text: "But now it works"
    sent: "2017-04-25T16:36:22.671Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff7aef8fcce56b2036b468"
    text: "Maybe some caching issue"
    sent: "2017-04-25T16:35:59.586Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff7a6ef22385553d75bc62"
    text: "but maybe something was wrong"
    sent: "2017-04-25T16:33:50.683Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff7a648e4b63533d02106f"
    text: "i downloaded only the binary"
    sent: "2017-04-25T16:33:40.868Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff7a536aea30763d3f50d0"
    text: {So your local folder was not in sync with the online repo...}
    sent: "2017-04-25T16:33:23.521Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff7a3912d24099359927a3"
    text: "and it get the line also at line 22"
    sent: "2017-04-25T16:32:57.700Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff7a2bc1d3b501541c4edc"
    text: {so for testing i deleted the file again and used red-062 for testing}
    sent: "2017-04-25T16:32:43.925Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff7a1af22385553d75baa6"
    text: "that worked"
    sent: "2017-04-25T16:32:26.533Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff7a166aea30763d3f4fda"
    text: {so i deleted the folder and then started build again and i get a new one that has the line in line 22}
    sent: "2017-04-25T16:32:22.763Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff79ef08c00c092ab4c3b5"
    text: {but it is somewhat interesting because the line that you mentioned was on line 18}
    sent: "2017-04-25T16:31:43.434Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff79d16aea30763d3f4efb"
    text: "yes"
    sent: "2017-04-25T16:31:13.402Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff797c08c00c092ab4c17b"
    text: {@Gwarks You can find libRed.red in the sources of Red in the red/red repo on Github. So it works with latest version from master?}
    sent: "2017-04-25T16:29:48.408Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff78c78e4b63533d0207a5"
    text: {Now it works but the file has changed even when i use the old version red-062}
    sent: "2017-04-25T16:26:47.546Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff787ec1d3b501541c435e"
    text: "Where did the libRed.red come from?"
    sent: "2017-04-25T16:25:34.719Z"
    editedAt: "2017-04-25T16:26:22.564Z"
    v: 2
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff77b7f22385553d75af31"
    text: "Interesting i got the error"
    sent: "2017-04-25T16:22:15.308Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff76acf22385553d75aa2b"
    text: {@Gwarks I'll try to install a Debian Strech locally and see if I can reproduce the issue.}
    sent: "2017-04-25T16:17:48.280Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff754812d2409935990a5f"
    text: {@Gwarks It seems to point to a `.fini` related termination code issue, as `eip` points at the beginning of our `.fini` handler. Could you try to recompile libRed after commenting out line 22 in `libRed/libRed.red`: ^/`if exec/lib-opened? [exec/redClose]`^/and run it to see if that fixes the crash?}
    sent: "2017-04-25T16:11:52.650Z"
    editedAt: "2017-04-25T16:13:06.439Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff74aed32c6f2f093cb7e9"
    text: {How would you compare Red (as intended) with [Mozart programming system](http://mozart.github.io/) featurewise (notwithstanding the Red/System)?}
    sent: "2017-04-25T16:09:18.513Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff6faa881b89e10184afe5"
    text: {```plain^/(gdb) info shared^/From        To          Syms Read   Shared Object Library^/0xf7fd9860  0xf7ff26bd  Yes (*)     /lib/ld-linux.so.2^/0xf7f4a354  0xf7fbcac1  Yes (*)     ./libRed.so^/0xf7d787f0  0xf7ea547f  Yes (*)     /lib/i386-linux-gnu/libc.so.6^/0xf7d106e0  0xf7d47fcb  Yes (*)     /lib/i386-linux-gnu/libm.so.6^/0xf7c83890  0xf7cdb6d4  Yes (*)     /usr/lib/i386-linux-gnu/libcurl.so.4^/0xf7c56380  0xf7c69434  Yes (*)     /usr/lib/i386-linux-gnu/libnghttp2.so.14^/0xf7c2fdc0  0xf7c33514  Yes (*)     /usr/lib/i386-linux-gnu/libidn2.so.0^/0xf7c119f0  0xf7c20d64  Yes (*)     /usr/lib/i386-linux-gnu/librtmp.so.1^/0xf7bdc4a0  0xf7bf9214  Yes (*)     /usr/lib/i386-linux-gnu/libssh2.so.1^/0xf7bcad30  0xf7bcc8f4  Yes (*)     /usr/lib/i386-linux-gnu/libpsl.so.5^/0xf7b6c000  0xf7ba6774  Yes (*)     /usr/lib/i386-linux-gnu/libssl.so.1.0.2^/0xf79a0c00  0xf7aa1024  Yes (*)     /usr/lib/i386-linux-gnu/libcrypto.so.1.0.2^/0xf79109c0  0xf79410c4  Yes (*)     /usr/lib/i386-linux-gnu/libgssapi_krb5.so.2^/0xf78419d0  0xf78a1424  Yes (*)     /usr/lib/i386-linux-gnu/libkrb5.so.3^/0xf77f9d70  0xf7818554  Yes (*)     /usr/lib/i386-linux-gnu/libk5crypto.so.3^/0xf77f2dd0  0xf77f3a64  Yes (*)     /lib/i386-linux-gnu/libcom_err.so.2^/0xf77e4360  0xf77eada4  Yes (*)     /usr/lib/i386-linux-gnu/liblber-2.4.so.2^/0xf77932b0  0xf77c4264  Yes (*)     /usr/lib/i386-linux-gnu/libldap_r-2.4.so.2^/0xf776f8d0  0xf777f768  Yes (*)     /lib/i386-linux-gnu/libz.so.1^/0xf7753870  0xf7760ef1  Yes (*)     /lib/i386-linux-gnu/libpthread.so.0^/0xf7643750  0xf7678544  Yes (*)     /usr/lib/i386-linux-gnu/libunistring.so.0^/0xf748f880  0xf757d8e4  Yes (*)     /usr/lib/i386-linux-gnu/libgnutls.so.30^/0xf7443580  0xf74508b4  Yes (*)     /usr/lib/i386-linux-gnu/libhogweed.so.4^/0xf74079c0  0xf7429204  Yes (*)     /usr/lib/i386-linux-gnu/libnettle.so.6^/0xf737f100  0xf73e0cb4  Yes (*)     /usr/lib/i386-linux-gnu/libgmp.so.10^/0xf72a9740  0xf7320e54  Yes (*)     /lib/i386-linux-gnu/libgcrypt.so.20^/0xf729fa30  0xf72a0921  Yes (*)     /lib/i386-linux-gnu/libdl.so.2^/0xf7294270  0xf72998d4  Yes (*)     /usr/lib/i386-linux-gnu/libkrb5support.so.0^/0xf728df20  0xf728ed54  Yes (*)     /lib/i386-linux-gnu/libkeyutils.so.1^/0xf7275690  0xf7281ba4  Yes (*)     /lib/i386-linux-gnu/libresolv.so.2^/0xf7256f20  0xf7267ea4  Yes (*)     /usr/lib/i386-linux-gnu/libsasl2.so.2^/0xf71fa3a0  0xf7229c64  Yes (*)     /usr/lib/i386-linux-gnu/libp11-kit.so.0^/0xf71c0bf0  0xf71c58d4  Yes (*)     /lib/i386-linux-gnu/libidn.so.11^/0xf71ab810  0xf71b7144  Yes (*)     /usr/lib/i386-linux-gnu/libtasn1.so.6^/0xf7194e20  0xf719efa4  Yes (*)     /lib/i386-linux-gnu/libgpg-error.so.0^/0xf718b0d0  0xf718f454  Yes (*)     /usr/lib/i386-linux-gnu/libffi.so.6^/(*): Shared library is missing debugging information.^/(gdb) ^/```}
    sent: "2017-04-25T15:47:54.152Z"
    editedAt: "2017-04-25T15:48:31.559Z"
    v: 2
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff6f88587a245e2448a11c"
    text: {:point_up: [April 24, 2017 10:30 PM](https://gitter.im/red/red?at=58fed0e7587a245e2445da35) I had forgotten how great your binding example is. :^^)}
    sent: "2017-04-25T15:47:20.058Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff6e7408c00c092ab48876"
    text: {@Gwarks Could you please also show me the output of `info shared` command? `eip` seems to be pointing out of libRed.so address space, so I need to confirm it.}
    sent: "2017-04-25T15:42:44.641Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff6aa1881b89e101849492"
    text: {@Gwarks Thanks. Let me have a look at the code to locate the error line. What's the size of your `libRed.so` file?}
    sent: "2017-04-25T15:26:25.475Z"
    editedAt: "2017-04-25T15:27:59.393Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff610c587a245e24485534"
    text: {```^/(gdb) i r^/eax            0xf7f593b8^--134900808^/ecx            0xf7ffd000^--134230016^/edx            0x56558000^-1448443904^/ebx            0xf7fd38c0^--134399808^/esp            0xffffccd0^-0xffffccd0^/ebp            0xffffccd8^-0xffffccd8^/esi            0xfffffd00^--768^/edi            0x2^-2^/eip            0xf7f593bf^-0xf7f593bf^/eflags         0x10286^-[ PF SF IF RF ]^/cs             0x23^-35^/ss             0x2b^-43^/ds             0x2b^-43^/es             0x2b^-43^/fs             0x0^-0^/gs             0x63^-99^/(gdb) ^/```}
    sent: "2017-04-25T14:45:32.938Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff5a61f22385553d7515f1"
    text: {@Gwarks Could you show the ouput of `i r` command just after the segfault? It smells like a `fini()` handling issue...}
    sent: "2017-04-25T14:17:05.312Z"
    editedAt: "2017-04-25T14:19:52.787Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff5920c1d3b501541b9d56"
    text: "No idea why all this happened though."
    sent: "2017-04-25T14:11:44.319Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ff59176aea30763d3ea209"
    text: {But now, I can get it to work fine on a linux VM. }
    sent: "2017-04-25T14:11:35.183Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ff59078bb56c2d11df7cc1"
    text: {Though I could not reproduce the crash locally later on a linux vm (because I could not get libred.c file to even compile).}
    sent: "2017-04-25T14:11:19.838Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ff58988fcce56b20360294"
    text: {https://travis-ci.org/nc-x/libred-rs/builds/191043423#L328}
    sent: "2017-04-25T14:09:28.357Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ff588808c00c092ab41d5d"
    text: {Which I had dismissed thinking that something is wrong with my code (though everything did work nicely on windows)}
    sent: "2017-04-25T14:09:12.352Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
)#(
    id: "58ff586c12d2409935987561"
    text: "At that time I had got a segfault."
    sent: "2017-04-25T14:08:44.100Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ff5863c1d3b501541b9ae6"
    text: {When I was initially trying to get my Rust libred working on linux, I did not have any linux installed so I was just using travis and hoping that it works.}
    sent: "2017-04-25T14:08:35.063Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ff58318fcce56b2036009c"
    text: "Is this segfault while using libred?"
    sent: "2017-04-25T14:07:45.522Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ff548508c00c092ab4068d"
    text: {```^/(gdb) bt full^/#0  0xf7f593bf in ?? () from ./libRed.so^/No symbol table info available.^/#1  0xf7fe8ab7 in ?? () from /lib/ld-linux.so.2^/No symbol table info available.^/#2  0xf7d8f79b in ?? () from /lib/i386-linux-gnu/libc.so.6^/No symbol table info available.^/#3  0xf7d8f801 in exit () from /lib/i386-linux-gnu/libc.so.6^/No symbol table info available.^/#4  0xf7d79282 in __libc_start_main () from /lib/i386-linux-gnu/libc.so.6^/No symbol table info available.^/#5  0x56555991 in _start ()^/No symbol table info available.^/```^/^/}
    sent: "2017-04-25T13:52:05.228Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff541d881b89e1018420e8"
    text: "That was with newest version"
    sent: "2017-04-25T13:50:21.423Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff53ae8fcce56b2035eba7"
    text: {ok i tried to run with gdb and got^/```^/(gdb) run^/Starting program: /home/lee/Projekte/RedScreen/test ^/[Thread debugging using libthread_db enabled]^/Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".^/redOpen done^/o_b: o/b^/a: [42 "hello"]^/42^/"hello"^/42 hello^/make error! [^/    code: none^/    type: 'syntax^/    id: 'invalid^/    arg1: 'value^/    arg2: "$%$"^/    arg3: none^/    near: none^/    where: 'do^/    stack: -150290008^/]^/%/home/lee/Projekte/RedScreen/^/0.6.2^/99.0^/add called! 2 3^/5^/routine [[extern] a [integer!] b [integer!]] none^/o_b: o/b^/o/b^/o/b/2^/#"e"^/123^/^/Program received signal SIGSEGV, Segmentation fault.^/0xf7f593bf in ?? () from ./libRed.so^/(gdb) ^/```}
    sent: "2017-04-25T13:48:30.270Z"
    editedAt: "2017-04-25T13:50:03.904Z"
    v: 5
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58ff40bf8e4b63533d00e0d8"
    text: {[![blob](https://files.gitter.im/red/red/sqid/thumb/blob.png)](https://files.gitter.im/red/red/sqid/blob)}
    sent: "2017-04-25T12:27:43.344Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fee7196aea30763d3cb826"
    text: {@9214 Thanks a lot! Very intersting. Have to digest it thoroughly.}
    sent: "2017-04-25T06:05:13.707Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fed459d32c6f2f0939ed6f"
    text: {all right. Until then I will be careful on using ```map!```.}
    sent: "2017-04-25T04:45:13.054Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fed393d32c6f2f0939eb59"
    text: {@Zamlox There is a `shrink` function in the hashtable(map's internal datastruct), it's not implemented for now. Once we have GC, we should be able to reclaim the unused slot in the map.}
    sent: "2017-04-25T04:41:55.211Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58fed298c1d3b50154195005"
    text: {@qtxie  well, I faced some memory leak and I didn't know why. Now I know :) But you are right regarding  common use cases for ```map!```. I have solved the memory leak by reusing same key values. But I'm also wondering if there might be some use cases where this might be an issue.}
    sent: "2017-04-25T04:37:44.270Z"
    editedAt: "2017-04-25T04:38:42.849Z"
    v: 5
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fed1b808c00c092ab1df55"
    text: {Yes. like I said above, `clear` should work like that. ^/But I'm curious what's the use case for this, or what's the benefit of this behaviour? You insert many keys into a map, then remove them, then insert many totally diffferent keys. I don't see it's a good use for the map.}
    sent: "2017-04-25T04:34:00.454Z"
    editedAt: "2017-04-25T04:35:01.010Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58fed0e7587a245e2445da35"
    text: {@toomasv regarding your bindology study, I've cooked up [this script](https://gist.github.com/9214/1dd30a88383a3e46edf45e33e9def3a7) a while ago, see if you can gather anything useful from it.^/Additional material:^/* [ad hoc explanation I wrote for myself, w/ block scheme and stuff](https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b#file-sketchy-definitional-context-org)^/* [pat665's post about bindology](http://www.pat665.free.fr/doc/bind.html)^/* [see answer from BrianH](http://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red)^/^/Hope this helps!}
    sent: "2017-04-25T04:30:31.884Z"
    editedAt: "2017-04-25T04:30:44.850Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fed07e881b89e10181e7bf"
    text: {I was thinking that ```map!``` should work similar like ```block!```, reusing existing slots (regardless of key's value) after it was cleared.}
    sent: "2017-04-25T04:28:46.405Z"
    editedAt: "2017-04-25T04:29:36.444Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fed015587a245e2445d86f"
    text: {Though I think `clear` should clear all the memory used in the map. :smile: }
    sent: "2017-04-25T04:27:01.746Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58fecf416aea30763d3c6f54"
    text: {If you add one element to a block and then clear it, the size of the block also grow. The difference is when you add another element into the block, it will overwrite to the previous slot. While in map, if the key is new, it will allocate a new slot for the key.}
    sent: "2017-04-25T04:23:29.297Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58fecdf908c00c092ab1d264"
    text: {if I want to add only one element to the map and then clear it then size of map should not grow regardless of the value of the key used.}
    sent: "2017-04-25T04:18:01.347Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fecdc208c00c092ab1d222"
    text: {in my opinion the size of the map's storage should not depend on the value of the key added.}
    sent: "2017-04-25T04:17:06.800Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fecd4a8fcce56b2033c4de"
    text: {I think it's by design, it will improve the performance when you do a lot insert/remove. }
    sent: "2017-04-25T04:15:06.613Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58feccc08e4b63533dff0be2"
    text: "is it by design or a bug ?^/"
    sent: "2017-04-25T04:12:48.145Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58feccadcfec919272706515"
    text: {@Zamlox I just check the code, when remove/clear items from a map, the slot is just marked as deleted, it's still kept in memory.}
    sent: "2017-04-25T04:12:29.383Z"
    editedAt: "2017-04-25T04:12:45.185Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58fecc698fcce56b2033c1ba"
    text: "@qtxie no,```hash!``` does not leak memory"
    sent: "2017-04-25T04:11:21.545Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fecbc3f22385553d72ba3f"
    text: "@qtxie I didn't try yet with hash!"
    sent: "2017-04-25T04:08:35.565Z"
    editedAt: "2017-04-25T04:09:00.125Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fecbbbcfec9192727062cb"
    text: {```^/b: make block! 1^/repeat count 100000 [append b 10 clear b]^/```}
    sent: "2017-04-25T04:08:27.163Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fecba7587a245e2445cb86"
    text: "@Zamlox Does hash! leak memory?"
    sent: "2017-04-25T04:08:07.750Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58fecb8008c00c092ab1cb16"
    text: {@PeterWAWood if I would use a block, will not leak memory.}
    sent: "2017-04-25T04:07:28.893Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fecb71881b89e10181d6e6"
    text: {Clearing a series! does not release the values that were referred to  in the series immediately. I would expect the same to be true of map.}
    sent: "2017-04-25T04:07:13.994Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58fecb03c1d3b501541932c4"
    text: {@Zamlox Most Red code involving non scalar datatypes will leak memory until a garbage collector is added.}
    sent: "2017-04-25T04:05:23.260Z"
    editedAt: "2017-04-25T04:05:33.031Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58fec910d32c6f2f0939ca22"
    text: {@dockimbel following code will leak memory:^/```^/m: make map! 1^/index: 0^/repeat count 100000 [m/:index: 10 clear m index: index + 1]^/```^/Is it so that map continues to grow, even it is cleared, because different key  is used each time element is added ?}
    sent: "2017-04-25T03:57:04.053Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58feb7aacfec919272701f47"
    text: {@greggirwin ^/> This will return it as a string:^/```^/what-the-func: function ["Lists all functions"][^/^-collect/into [^/^-foreach w sort words-of system/words [^/^-^-if all [word? w any-function? get/any :w][^/^-^-^-keep pad form w 15^/^-^-^-spec: spec-of get w^/^-^-^-^/^-^-^-keep either any [^/^-^-^-^-string? desc: spec/1^/^-^-^-^-string? desc: spec/2^-^-^-^-^-;-- attributes block case^/^-^-^-][^/^-^-^-^-form reduce [#":" desc lf]^/^-^-^-][^/^-^-^-^-lf^/^-^-^-]^/^-^-]^/^-]^/^-] copy ""^/]^/print s: what-the-func^/```    LOL at your function name :)}
    sent: "2017-04-25T02:42:50.180Z"
    editedAt: "2017-04-25T02:43:42.774Z"
    v: 3
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58feaaadf22385553d7255c8"
    text: {```^/; Temperature Converter^/c-to-f: func [t][t * (9.0 / 5.0) + 32.0]^/f-to-c: func [t][t - 32.0 * (5.0 / 9.0)]^/t-change: function [in-face out-face fn][^/    out-face/text: either number? t: load in-face/text [form round/to fn t .01][""]^/]^/view [^/    ; Use key-up because on-change doesn't detect event cycles^/    tc: field on-key-up [t-change tc tf :c-to-f] text "Celsius ="   ^/    tf: field on-key-up [t-change tf tc :f-to-c] text "Farenheight"^/]^/```}
    sent: "2017-04-25T01:47:25.663Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fea4c3cfec9192726fe3a4"
    text: {Ah. I was using`field "0"`, and the conversions were annoying. }
    sent: "2017-04-25T01:22:11.343Z"
    v: 1
    author: "58f441ddd73408ce4f58e0a1"
) #(
    id: "58fe94428e4b63533dfe5aaa"
    text: {@KarlFish Nice! ^/```^/; Counter^/view [txt: text data 0  button "Count" [txt/data: txt/data + 1]]^/```}
    sent: "2017-04-25T00:11:46.010Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe71b3cfec9192726f383e"
    text: {I used to use Rebol years ago - but just returning to Red (very impressed so far) need clearer docs though, some examples seem to leak into Rebolesque}
    sent: "2017-04-24T21:44:19.867Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe7165cfec9192726f36aa"
    text: {:smile:  he he clear as mud thanks - I thought I was doing so well }
    sent: "2017-04-24T21:43:01.897Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe7124d32c6f2f0938a99c"
    text: {but yeah, I don't know why it's in the end in your examples either}
    sent: "2017-04-24T21:41:56.124Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fe70efd32c6f2f0938a8e3"
    text: {it is `lit-word` which evaluates to corresponding `word` :D}
    sent: "2017-04-24T21:41:03.364Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fe70dd12d240993594f492"
    text: {@swthornton actually pre-apostrophe doesn't prevent it from evaluation}
    sent: "2017-04-24T21:40:45.517Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fe70bfd32c6f2f0938a857"
    text: "still don't understand why it's at the end?"
    sent: "2017-04-24T21:40:15.097Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe70a3f22385553d7196b2"
    text: {Thanks that makes sense that the pre-apostrophe would prevent it being evaluated - Is it that whoever did the first example is stopping the face/visible being evaluated until its processed by the react?}
    sent: "2017-04-24T21:39:47.328Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe6fe5587a245e244496b4"
    text: {http://www.rebol.com/docs/core23/rebolcore-4.html#section-5.2}
    sent: "2017-04-24T21:36:37.215Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58fe6fb612d240993594efa1"
    text: "Like 'something"
    sent: "2017-04-24T21:35:50.837Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58fe6fb3f22385553d719066"
    text: {It doesn't mean anything special except when it is in the first place.}
    sent: "2017-04-24T21:35:47.076Z"
    editedAt: "2017-04-24T21:37:51.653Z"
    v: 2
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58fe6f488bb56c2d11dbf05f"
    text: {The apostrophe is just a normal character which can be used inside names.}
    sent: "2017-04-24T21:34:00.831Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58fe6eed6aea30763d3b2d82"
    text: {The above react doesn't use it face/color: has no apostrophe ?? }
    sent: "2017-04-24T21:32:29.332Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe6ec16aea30763d3b2d3f"
    text: {view [^/    below^/    r: slider^/    g: slider^/    b: slider^/    base react [^/        face/color: as-color to-int r/data to-int g/data to-int b/data^/    ]^/]}
    sent: "2017-04-24T21:31:45.128Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe6e7cf22385553d718b13"
    text: {Thanks I know what the react does but I don't understand some examples have the apostrophe and some don't }
    sent: "2017-04-24T21:30:36.379Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe6e446aea30763d3b2bc2"
    text: {And sets visibility of the "face" element according to that.}
    sent: "2017-04-24T21:29:40.865Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58fe6e29cfec9192726f288c"
    text: {It checks if the text of the GUI element named age contains any digit}
    sent: "2017-04-24T21:29:13.936Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58fe6ddd8bb56c2d11dbebc7"
    text: {it's a field of `face`, everything else depends on what is `face` :D}
    sent: "2017-04-24T21:27:57.210Z"
    editedAt: "2017-04-24T21:28:02.119Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58fe6d84587a245e244489e7"
    text: "I can't understand what its purpose is above  "
    sent: "2017-04-24T21:26:28.441Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe6d4d8bb56c2d11dbe9fd"
    text: {err-msg "Age needs to be a number!" react [^/            face/visible': not parse age/text [any digit]}
    sent: "2017-04-24T21:25:33.603Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe6ce608c00c092ab095d6"
    text: {@swthornton you can use `'` in words: ^/```^/red>> visible': 5^/== 5^/red>> visible'^/== 5^/red>> vis'ible: 1^/== 1^/red>> vis'ible^/== 1^/```}
    sent: "2017-04-24T21:23:50.728Z"
    editedAt: "2017-04-24T21:24:13.533Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fe6c4d6aea30763d3b21ff"
    text: {Hi, what does the single apostrophe mean such as here  - face/visible' }
    sent: "2017-04-24T21:21:17.474Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "58fe6322c1d3b5015417c647"
    text: "It's got a few mainstream implemetations"
    sent: "2017-04-24T20:42:10.388Z"
    v: 1
    author: "58f441ddd73408ce4f58e0a1"
) #(
    id: "58fe62898fcce56b20325cbe"
    text: {I know rebol has short_rebol_examples, but https://github.com/eugenkiss/7guis/wiki is a good opportunity to show how to do basic gui stuff in red. Check it out}
    sent: "2017-04-24T20:39:37.456Z"
    v: 1
    author: "58f441ddd73408ce4f58e0a1"
) #(
    id: "58fe35108fcce56b20319c44"
    text: "Happy to help."
    sent: "2017-04-24T17:25:36.195Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe34e1587a245e244391b7"
    text: "@greggirwin Thank you!"
    sent: "2017-04-24T17:24:49.458Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58fe31c8d32c6f2f09379078"
    text: {This will return it as a string:^/```^/what-the-func: function ["Lists all functions"][^/^-collect/into [^/^-foreach w sort words-of system/words [^/^-^-if all [word? w any-function? get/any :w][^/^-^-^-keep pad form w 15^/^-^-^-spec: spec-of get w^/^-^-^-^/^-^-^-keep either any [^/^-^-^-^-string? desc: spec/1^/^-^-^-^-string? desc: spec/2^-^-^-^-^-;-- attributes block case^/^-^-^-][^/^-^-^-^-form reduce [#":" desc lf]^/^-^-^-][^/^-^-^-^-lf^/^-^-^-]^/^-^-]^/^-]^/^-] copy ""^/]^/print s: what-the-func^/```}
    sent: "2017-04-24T17:11:36.054Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe303708c00c092aaf86ff"
    text: "Or do you want the specs as well?"
    sent: "2017-04-24T17:04:55.788Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe300df22385553d70789c"
    text: {@rokf, just the names? e.g.^/```^/what-the-func: function ["Lists all functions"][^/^-collect [^/^-^-foreach w sort words-of system/words [^/^-^-^-if all [word? w any-function? get/any :w][keep w]^/^-^-]^/^-]^/]^/print mold fns: what-the-func^/```}
    sent: "2017-04-24T17:04:13.673Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe2f2bd32c6f2f093785da"
    text: {@rokf what do you mean by functions that can be saved to a variable?^/}
    sent: "2017-04-24T17:00:27.046Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe26b36aea30763d39ed10"
    text: {Rather than a single turtle, like Logo, you can have thousands, and they can sense the world they're in, performing little actions concurrently.}
    sent: "2017-04-24T16:24:19.115Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe266b8fcce56b20315e29"
    text: {OK, just curious. It is heavily targeted at simulations.}
    sent: "2017-04-24T16:23:07.278Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe262d6aea30763d39eb93"
    text: {On the bindology stuff, when we get an IDE it will blow people away when `a` is shown 3 times in a block but highlighted differently because of their bindings. }
    sent: "2017-04-24T16:22:05.718Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe261a6aea30763d39eb2d"
    text: "No, I have never played with netlogo"
    sent: "2017-04-24T16:21:46.807Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe25ea8fcce56b20315b7d"
    text: {@JacobGood1, We used the same goggles that guy is wearing in the show I wrote, that we finally produced last year. :^^) Skookumscript looks cool. Do you have any feel for how it compares to NetLogo?}
    sent: "2017-04-24T16:20:58.205Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe1fcef22385553d702e09"
    text: {Is it possible to get a list of available functions which can be saved to a variable?  Like `what` but I'd like to save and use the data.}
    sent: "2017-04-24T15:54:54.782Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58fe0e7b881b89e1017f03f7"
    text: "@JacobGood1 Thanks for the link."
    sent: "2017-04-24T14:40:59.112Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fe011b8bb56c2d11d9f861"
    text: {@rebolek  @maximvl OK, now I see it. Thanks a lot!}
    sent: "2017-04-24T13:43:55.314Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fe00c7c1d3b5015415fe3a"
    text: "so in `a/2: in c3 a/1`, `a/1` is `b`."
    sent: "2017-04-24T13:42:31.852Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe00af8fcce56b2030ad25"
    text: {@toomasv  Check `a` after `a/1: in c3 'b`: `[b a]`}
    sent: "2017-04-24T13:42:07.274Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe00ac881b89e1017ebe77"
    text: {@dockimbel I have been creating a tutorial to go on Udemy for this language http://skookumscript.com/... Skookum pervasively uses coroutines for real time interactive simulations, maybe you can mine some ideas from them.}
    sent: "2017-04-24T13:42:04.747Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe0095c1d3b5015415fd4d"
    text: {you assigned the word `b` to `a/1`, then you  assigned the same thing to `a/2`}
    sent: "2017-04-24T13:41:41.093Z"
    editedAt: "2017-04-24T13:42:00.653Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fe00298bb56c2d11d9f48a"
    text: {@rebolek Sorry, I still don't get it. Can you explain what is going on here:^/```^/>> c3: context [b: 6]^/== make object! [^/    b: 6^/]^/>> a: [a a]^/== [a a]^/>> a/1: in c3 'b^/== b^/>> a/2: in c3 a/1 ; especially here!^/== b^/>> reduce a^/== [6 6]^/```}
    sent: "2017-04-24T13:39:53.023Z"
    editedAt: "2017-04-24T13:40:57.344Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fdfff86aea30763d393677"
    text: {@toomasv `in` returns same word, but binded to another context}
    sent: "2017-04-24T13:39:04.174Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fdff82c1d3b5015415f6e3"
    text: {```^/>> a: [a]^/== [a]^/>> c: context [a: 5]^/== make object! [^/    a: 5^/]^/>> reduce [get in c 'a get in c a/1 get in c load "a"]^/== [5 5 5]^/```}
    sent: "2017-04-24T13:37:06.723Z"
    editedAt: "2017-04-24T13:37:15.569Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdfe2fc1d3b5015415ef80"
    text: {`in` takes `word!` as second argument (`a` in your case). Binding of that word doesn't matter, only its value.}
    sent: "2017-04-24T13:31:27.701Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdfdb512d240993592e77f"
    text: "@toomasv they are same only when `a/1 = 'a`"
    sent: "2017-04-24T13:29:25.227Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdfcc0d32c6f2f0936984c"
    text: {@dockimbel Is there a difference between using `in c3 a/1` and `in c3 'a`? (Provided c3 is `context` as above) Both seem to work in same way.}
    sent: "2017-04-24T13:25:20.510Z"
    editedAt: "2017-04-24T13:27:08.365Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fdf9466aea30763d3915b6"
    text: {@dockimbel Thanks, I tried this earlier with `bind` but didn't succeed. So, with `bind` you can bind words in whole blocks, and with `in` individual words?^/I was playing also with this:^/```^/model1: context [a: 'loop b: 3 c: [print [random "Hurray!"]]]^/model2: context [a: none b: 'print c: "Just this"]^/model3: context [a: 'func b: [a b] c: [a + b]]^/prg: [a b c]^/^/>> bind prg model1^/== [a b c]^/>> do reduce prg^/Haury!r^/ra!urHy^/yu!Hrar^/^/>> bind prg model2^/== [a b c]^/>> do reduce prg^/Just this^/^/>> bind prg model3^/== [a b c]^/>> myadd: do reduce prg^/== func [a b][a + b]^/>> myadd 3 5^/== 8^/```}
    sent: "2017-04-24T13:10:29.976Z"
    editedAt: "2017-04-24T13:16:04.785Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fdf7df12d240993592cdb4"
    text: {@toomasv :+1:  You can also have just `a: [a a a]` in case you were wondering about it, and use `a/1: in c1 a/1 ...` or just `a/1: in c1 'a ...`. Many possible variations.}
    sent: "2017-04-24T13:04:31.596Z"
    editedAt: "2017-04-24T13:05:25.097Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fddd208e4b63533dfb3314"
    text: {Little study of bindology:^/```^/a: [a ([a]) ([a])]^/^/c1: context [a: 1]^/c2: context [a: 3]^/c3: context [a: 5]^/^/bind a c1^/bind a/2/1 c2^/bind a/3/1 c3^/^/x: compose a^/;== [a a a]^/reduce x^/;== [1 3 5]^/```}
    sent: "2017-04-24T11:10:24.081Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fdd7558bb56c2d11d93f60"
    text: {@dockimbel I raised an issue for it to not forget. It would also good to note function spec wouldn't change, somewhere in the docs.}
    sent: "2017-04-24T10:45:41.550Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdca0ad32c6f2f0935aea4"
    text: ":sparkles: :clap: "
    sent: "2017-04-24T09:48:58.486Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fdc7b56aea30763d382dc3"
    text: "lol"
    sent: "2017-04-24T09:39:01.870Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fdc79cd32c6f2f0935a172"
    text: "live is a miracle!"
    sent: "2017-04-24T09:38:36.980Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fdc7788bb56c2d11d8ea68"
    text: "first newline markers, now this"
    sent: "2017-04-24T09:38:00.882Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fdc6ed8bb56c2d11d8e8d3"
    text: {```^/>> f: function [a b] [a + b]^/== func [a b][a + b]^/>> f 1 2^/== 3^/>> clear spec-of :f^/== []^/>> ?? f^/f: func [][a + b]^/>> f 1 2^/== 3^/>> f 3 4^/== 7^/```^/so you need to use arguments you gonna delete at least once}
    sent: "2017-04-24T09:35:41.391Z"
    editedAt: "2017-04-24T09:36:51.394Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fdc65b881b89e1017db7c4"
    text: {Ah, got it, the arguments cache is not updated when you change the spec block, so the old arity is preserved. So actually, we haven't implemented the policy I had in mind yet.}
    sent: "2017-04-24T09:33:15.055Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fdc5bf6aea30763d382348"
    text: {@rebolek You're right, there's something odd there.}
    sent: "2017-04-24T09:30:39.960Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fdc524f22385553d6e7dfa"
    text: {```^/>> f: func [a /b c] [either b [a + c] [a + 1]]^/== func [a /b c][either b [a + c] [a + 1]]^/>> remove spec-of :f^/== [/b c]^/>> ?? f^/f: func [/b c][either b [a + c] [a + 1]]^/>> f/b 2 2^/*** Script Error: c is missing its cond argument^/*** Where: c^/>> f 2^/*** Script Error: + does not allow logic! for its value1 argument^/*** Where: +^/>> f: func [a /b c] [either b [a + c] [a + 1]]^/== func [a /b c][either b [a + c] [a + 1]]^/>> f 2^/== 3^/>> remove spec-of :f^/== [/b c]^/>> ?? f^/f: func [/b c][either b [a + c] [a + 1]]^/>> f 2^/== 3^/>> f 3^/== 4^/>> f/b 2 2^/== 4^/>> f/b 10 1^/== 11^/>> ^/```}
    sent: "2017-04-24T09:28:04.273Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fdc4f612d240993591da89"
    text: {@dockimbel if it returns copy, why is spec empty after remove? Shouldn't it be left untouched?^/}
    sent: "2017-04-24T09:27:18.396Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdc3f38e4b63533dfab1fe"
    text: {@endo64 `spec-of` will return a copy of the spec block, so you can't change the original block. That is necessary, as you could easily crash compiled functions that way (changes in body block of compiled functions are obviously ignored). You need to recreate the function if you want to change its spec block.}
    sent: "2017-04-24T09:22:59.329Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fdc05e8bb56c2d11d8ce81"
    text: {@endo64 interesting, I do not think, it is correct behavior :)^/}
    sent: "2017-04-24T09:07:42.579Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdc0468fcce56b202f8822"
    text: "thanks, I'll share the video if we will have it"
    sent: "2017-04-24T09:07:18.766Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fdc0228fcce56b202f87d7"
    text: {Good luck @maximvl !^/^/Is below behavior expected? I can change a body of a function but not its spec. This gives a chance to hide the spec  which I don't see any use of it :) ^/```^/>> f: func [a] [a + 1]^/>> change back tail body-of :f 2^/>> f 5 ; == 7^/>> remove spec-of :f^/>> ?? f^/f: func [ ][a + 2]^/>> f 3^/== 5^/```^/^/}
    sent: "2017-04-24T09:06:42.808Z"
    editedAt: "2017-04-24T09:07:10.770Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdbfb2d32c6f2f09357f9f"
    text: "That one too, yes."
    sent: "2017-04-24T09:04:50.832Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fdbe0f8e4b63533dfa9819"
    text: {hm, good idea, I'll add the clock demo and play with it}
    sent: "2017-04-24T08:57:51.287Z"
    editedAt: "2017-04-24T08:58:05.993Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fdbda4d32c6f2f09357590"
    text: {@maximvl You have time to show some demos, maybe like the livecoding demo?}
    sent: "2017-04-24T08:56:04.182Z"
    editedAt: "2017-04-24T08:56:23.149Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58fdb23a6aea30763d37cea1"
    text: "@dockimbel thanks, I have 30 mins for this talk"
    sent: "2017-04-24T08:07:21.997Z"
    editedAt: "2017-04-24T08:08:26.838Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fdb0a8c1d3b50154148dff"
    text: {@maximvl Great presentation. :+1:  How much time do you have for your talk?}
    sent: "2017-04-24T08:00:40.167Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd99d4881b89e1017cfe5d"
    text: {Anytime is a good time, there is always something new and exciting in Red :)^/}
    sent: "2017-04-24T06:23:16.594Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fd977c8bb56c2d11d82a2a"
    text: {You came back at a good time, what with 0.6.2 released recently.}
    sent: "2017-04-24T06:13:16.611Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd972d6aea30763d37665e"
    text: "I'll check out the url - thanks"
    sent: "2017-04-24T06:11:57.887Z"
    v: 1
    author: "5688aaac16b6c7089cc0ece0"
) #(
    id: "58fd97206aea30763d37660b"
    text: {Thanks for the welcome - I was actually idling in here a few months ago and getting into it but took a promotion at work that ate most of my personal interest time}
    sent: "2017-04-24T06:11:44.961Z"
    v: 1
    author: "5688aaac16b6c7089cc0ece0"
) #(
    id: "58fd96668bb56c2d11d82795"
    text: {@mikeparr might also offer advice on how to contribute to red-by-example.org, where you can play with things to learn them, and doc as you go. Then you can also ask questions when you hit something that trips you up.}
    sent: "2017-04-24T06:08:38.214Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd95ef587a245e2440bad0"
    text: {Yes! Lots!  Testing is a great area to get started. More tests are always welcome. Peter Wood should magically appear at some point and offer suggestions there. ^/^/And welcome to Red!}
    sent: "2017-04-24T06:06:39.742Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd8ea48bb56c2d11d80e9a"
    text: {Are there any small tasks (unit tests for instance) that need looking at? Something a fairly seasoned programmer could use to get a foot in the door}
    sent: "2017-04-24T05:35:32.998Z"
    v: 1
    author: "5688aaac16b6c7089cc0ece0"
) #(
    id: "58fd8af58bb56c2d11d8034c"
    text: {@JacobGood1 That would cover only the needs partially. Moreover, cooperative scheduling implied by coroutines can be a problem in some use-cases.}
    sent: "2017-04-24T05:19:49.061Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd7a6608c00c092aac72bb"
    text: {@dockimbel I know you did not ask me directly but I am all about coroutines.}
    sent: "2017-04-24T04:09:10.688Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fd753cf22385553d6d5778"
    text: {@maximvl I'm for self-modifying examples too, maybe some tiny [subleq](https://esolangs.org/wiki/Subleq) dialect?}
    sent: "2017-04-24T03:47:08.967Z"
    editedAt: "2017-04-24T03:47:23.082Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fd6ba26aea30763d36e095"
    text: {@Sel_ular_twitter What kind of concurrency are you more interested in?}
    sent: "2017-04-24T03:06:10.713Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd67abf22385553d6d2c6b"
    text: "Thanks for your answer @greggirwin "
    sent: "2017-04-24T02:49:15.201Z"
    v: 1
    author: "58fd5d2fd73408ce4f5a7f38"
) #(
    id: "58fd5f4af22385553d6d13a4"
    text: "Concurrency is planned for 0.9.0."
    sent: "2017-04-24T02:13:30.441Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd5d648e4b63533df9482f"
    text: "Any news on concurrent programming?"
    sent: "2017-04-24T02:05:24.737Z"
    v: 1
    author: "58fd5d2fd73408ce4f5a7f38"
) #(
    id: "58fd3f9508c00c092aabce11"
    text: {@gltewalt `context` keyword in Red/System is not directly related to *context* concept in Red.}
    sent: "2017-04-23T23:58:13.043Z"
    editedAt: "2017-04-23T23:58:35.712Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd0f38f22385553d6c1c66"
    text: {@maximvl yep.. I feel showing that you can modify `func` body is good enough.. but you have to mention that's just the tip of the iceberg ;)}
    sent: "2017-04-23T20:31:52.581Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58fd0c046aea30763d35b473"
    text: ":+1: "
    sent: "2017-04-23T20:18:12.084Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fd0a2cf22385553d6c0939"
    text: {you can check any other datatype, they all are made using contexts, but it doesn't mean they are contexts}
    sent: "2017-04-23T20:10:20.724Z"
    editedAt: "2017-04-23T20:10:32.768Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fd0a05cfec91927269ad14"
    text: {because this part is written in Red/System itself - it reuses available data structures, and `context` as well}
    sent: "2017-04-23T20:09:41.385Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fd09e208c00c092aab22d7"
    text: {I think this is just a context to hold all block-related logic}
    sent: "2017-04-23T20:09:06.111Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fd0979c1d3b501541271fa"
    text: "Yeah"
    sent: "2017-04-23T20:07:21.528Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fd096fcfec91927269aa5d"
    text: "But I'm not sure of anything :smile: p"
    sent: "2017-04-23T20:07:11.237Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fd096108c00c092aab2114"
    text: {@gltewalt are you talking about `block: context [` ?}
    sent: "2017-04-23T20:06:57.689Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fd095908c00c092aab20fc"
    text: "And datatype.reds"
    sent: "2017-04-23T20:06:49.568Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fd092408c00c092aab203c"
    text: "Look at block.reds"
    sent: "2017-04-23T20:05:56.773Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fd09006aea30763d35a96c"
    text: {@geekyi I think it's already hardcore enough, I'm thinking to simplify it}
    sent: "2017-04-23T20:05:20.772Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fd08efcfec91927269a80c"
    text: "@gltewalt are you sure block is a context?"
    sent: "2017-04-23T20:05:03.372Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fd05738e4b63533df82f23"
    text: "(In Red/System anyway)"
    sent: "2017-04-23T19:50:11.033Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fd050c8e4b63533df82e3d"
    text: {Block is a context. And is also a datatype with is also a context. }
    sent: "2017-04-23T19:48:28.960Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fd034e587a245e243eeeec"
    text: {@maximvl you managed to put @9214 new line stuff there too! What about some mind blowing self code modifications? Too overwhelming? }
    sent: "2017-04-23T19:41:02.551Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58fcfc4912d24099358f29e8"
    text: "@maximvl Wow! Reallly nice."
    sent: "2017-04-23T19:11:05.542Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcfb9808c00c092aaaeffe"
    text: {https://github.com/red/red/wiki/New-line-markers-in-blocks}
    sent: "2017-04-23T19:08:08.273Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcf5673e27cac331b7986d"
    text: {@maximvl HAHA, your public gonna freak out! great stuff and well done! Never looked at lisp, but red looks nicer ;-)}
    sent: "2017-04-23T18:41:43.440Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fcd06d881b89e1017a776e"
    text: "@maximvl nice!"
    sent: "2017-04-23T16:03:57.177Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fcd01cd32c6f2f0932680b"
    text: "How cool is that? :D"
    sent: "2017-04-23T16:02:36.883Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fccdebc1d3b50154119720"
    text: {hint: you can open presenter view and read the notes}
    sent: "2017-04-23T15:53:15.681Z"
    editedAt: "2017-04-23T15:54:42.250Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fccdb008c00c092aaa53c4"
    text: {here is draft of my presentation & notes for a lisp meetup, comments & feedback are welcome :)^/https://docs.google.com/presentation/d/1Vyn_PkHhf5xgPTrsHK2baKmnUOGEFLc-JNiccSwBZiI/edit?usp=sharing}
    sent: "2017-04-23T15:52:16.493Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcc4cfd32c6f2f0932410f"
    text: {@iceflow19 hopefully, your thesis will be online. It would be nice to have a course like that online as well.}
    sent: "2017-04-23T15:14:23.951Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fcb0de881b89e1017a0a0c"
    text: {@iceflow19 That's great! :+1: Do you have an ETA for the thesis?}
    sent: "2017-04-23T13:49:18.495Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fcaffc8bb56c2d11d53187"
    text: {@rebolek ^/> The math argument could be a strong one, if rest of Red was based on math notation, but it isn't. ^/^/Using math notation for math-related datatype is logical, and that fits the design principle of Redbol, which tries to stick to natural human syntax whenever possible.}
    sent: "2017-04-23T13:45:32.174Z"
    editedAt: "2017-04-23T13:46:49.111Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fcad49cfec919272686374"
    text: {Not everyone in this room is also in red/help. @maximvl just noted a lesser known feature in Red: line markers in blocks. Jump over to red/help, or join that room, to see some examples of how they work.}
    sent: "2017-04-23T13:34:01.499Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fbe83808c00c092aa7ac29"
    text: {Thanks @greggirwin , I've only got my first chapter partway done, so I still have another 3-4 chapters to go.}
    sent: "2017-04-22T23:33:12.805Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "58fbe75712d24099358bd5a8"
    text: {I added examples in Doc's proposed syntax to https://github.com/Ren-data/Ren/wiki/value-point-rfc. Something else to consider is that, in those cases where we use a lot of literal data, the syntax needs to be clear on whitespace sensitivity. For example, in things like Doc's old V-balls demo, and other cases, it can be nice to line things up in columns. }
    sent: "2017-04-22T23:29:27.565Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fbe6cbcfec9192726623bd"
    text: {That's fantastic @iceflow19. The first part anyway. :^^)}
    sent: "2017-04-22T23:27:07.050Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fbe6acad849bcf42ae1a54"
    text: {A professor and I wanted to try to get a "compilers, interpreters, and parsing grammars" course taught in Red. But we got shot down by the department chair.}
    sent: "2017-04-22T23:26:36.853Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "58fbe634c1d3b501540eda14"
    text: {So probably I'm going to be diving into some of theory behind Red to in it.}
    sent: "2017-04-22T23:24:36.659Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "58fbe5593e27cac331b45a5d"
    text: {So... In other news, Red is going to be in my Master's thesis, at least a chapter if not more will be over an assembler and virtual machine I wrote in Red}
    sent: "2017-04-22T23:20:57.695Z"
    editedAt: "2017-04-22T23:21:18.016Z"
    v: 2
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "58fbdbedd32c6f2f092f9424"
    text: {I knew a GIS guy in the late 80s and it was much more specialized and government based back then.}
    sent: "2017-04-22T22:40:45.611Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58fbdbb0d32c6f2f092f930e"
    text: "Good point @gltewalt ."
    sent: "2017-04-22T22:39:43.999Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fbdb248bb56c2d11d2db09"
    text: {Probably because GIS wasn't a big thing back then. ^/Dialects do become natural feeling with use - that's true}
    sent: "2017-04-22T22:37:24.821Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fbda8712d24099358bb416"
    text: {@rebolek, as Arnold says, it's not about math, it's about communication. Here's a thought. Pair! makes perfect sense to me. I never questioned it. But if we had `coord! (10, 10)` and `size! (50x30)` from the beginning, would it now seem more natural to have two separate notations, each with a more specific meaning. I can guess that Carl went down this path too. If so, and we can just imagine that he did, why *didn't* he use two separate notations? And why limit to just 2 values, when he could easily have made it 3 as well?}
    sent: "2017-04-22T22:34:47.785Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fbda5a3e27cac331b4394d"
    text: {There's also Slope and Aspect in GIS. ^/Looks pretty good now that I'm pausing to read through it}
    sent: "2017-04-22T22:34:02.751Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fbd8f08bb56c2d11d2d4d9"
    text: {@gtelwalt :point_up: [April 20, 2017 5:02 PM](https://gitter.im/red/red?at=58f93df1f22385553d5ef984)}
    sent: "2017-04-22T22:28:00.468Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fbc4a38e4b63533df44e50"
    text: "Could do GIS Dialect"
    sent: "2017-04-22T21:01:23.807Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fb94a8881b89e10176d103"
    text: {(So speaking as math person, that math argument is not so important. Remember my viewpoint on "math" precedence)}
    sent: "2017-04-22T17:36:40.567Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58fb932d8e4b63533df3c73f"
    text: {@rebolek  +1 Red is based on human communication not math. Math should not be taken for granted either! Many things in math can be expressed in multiple ways, take integrals as example for that. The notation is subject to meaning.}
    sent: "2017-04-22T17:30:21.646Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58fb7d9fc1d3b501540d9a9e"
    text: {@greggirwin The math argument could be a strong one, if rest of Red was based on math notation, but it isn't. ^/}
    sent: "2017-04-22T15:58:23.110Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb7a378fcce56b202858c8"
    text: {@greggirwin Agreed, I'll sum it up on a wiki page.}
    sent: "2017-04-22T15:43:51.165Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fb79cb8bb56c2d11d1b896"
    text: {@dockimbel, could you write up a very short statement of purpose for this new datatype. Not final rules of course, but the syntax basics (min number of items, comma only OK as literal but will form with comma+space) and the intended use cases? Then we can put that somewhere and let people comment. Even a wiki page would be fine. I don't think the chat approach helps here. }
    sent: "2017-04-22T15:42:03.623Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fb78c2881b89e101767a20"
    text: {With new suggestions, we have to beat Doc's proposal not just on initial readability feelings, but *meaning*. His suggestion has a very strong foundation in that regard. Data science is just going to get bigger. If people are doing math with this data, and exchanging it with each other, what is going to be most natural to them? How would they write them by hand? }
    sent: "2017-04-22T15:37:38.804Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fb76fdcfec91927264d37a"
    text: {Doc's proposal solves the international issue, because it's based on math notation. It may take some getting used to, for some of us. I see the value for large floats. For integers, we all seem to agree that `x` notation is nice, and that will still be available. If `pair!` is limited to int values, that will prevent people from mixing the two much. If the new syntax is limited to float values (just thinking out loud), that would keep people from using it *in place of* pair syntax. My reasoning there is that people might want to adopt the new, and ask for support in all GUI related areas, which means we have to scan for both. But if you're doing 3D calcs and such, you will *have to* map to a 2D space. Need to think about how that will look.^/^/I also agree that we likely won't write these as literals much, but we could have a lot of data files with them. In massive numbers, it's all going to be hard to read directly. }
    sent: "2017-04-22T15:30:05.305Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fb74b6c1d3b501540d78d0"
    text: "or `1.236757656|244.24242444|8768768.765764`"
    sent: "2017-04-22T15:20:22.130Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58fb7492cfec91927264cb37"
    text: {Has anyone thought abou the `*`sign? It could be confused with multiplication, but maybe visually separates a bit better, than `x`: `1.236757656*244.24242444*8768768.765764`}
    sent: "2017-04-22T15:19:46.696Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58fb63158bb56c2d11d15f57"
    text: {Being able to switch between cartesian and polar systems could be a supported feature. Getting the vector's length too.}
    sent: "2017-04-22T14:05:09.566Z"
    editedAt: "2017-04-22T14:09:42.274Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fb628e8e4b63533df31e98"
    text: {Anyway, regardless of the syntax, it would be nice if coordinates datatype could provide things like `/length` or `/angle`.^/}
    sent: "2017-04-22T14:02:54.132Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb61f7c1d3b501540d26ca"
    text: {@tanstaaf1 Discussion starts here: :point_up: [April 20, 2017 4:18 PM](https://gitter.im/red/red?at=58f86ef008c00c092a9a57df)}
    sent: "2017-04-22T14:00:23.307Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fb61ae8fcce56b2027fce1"
    text: "`coord#[1 2 3]` ?"
    sent: "2017-04-22T13:59:10.656Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fb616fc1d3b501540d2479"
    text: "I see"
    sent: "2017-04-22T13:58:07.377Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fb61558bb56c2d11d157e4"
    text: {@maximvl we can, but it may not be very readable with `1.236757656x244.24242444x8768768.765764`^/}
    sent: "2017-04-22T13:57:41.291Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb6132881b89e101761ff1"
    text: "`1x2x3`?"
    sent: "2017-04-22T13:57:06.846Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fb6129cfec91927264833e"
    text: "can't we just extend `x` to any number of items?"
    sent: "2017-04-22T13:56:57.591Z"
    editedAt: "2017-04-22T13:57:24.739Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fb60eef22385553d66e3ab"
    text: {@rebolek ^/> The advantage of 1x1 is that is somehow standard way to write coordinates and is also shorter than [1 1].^/^/In natural language, `...x...` is the usual way to write *dimensions*, the standard way to write coordinates is `(..., ...)`, see the link I posted, or open any math-related web page or book. You can dislike math notation if you want, but such notation fits our lexical constraints and Redbol human-friendliness design principle. A compact form (like pair's one) is usually more appealing than one requiring opening/closing delimiters, but I'm still waiting for someone to offer a better proposition (respecting Redbol principles and existing lexical rules) that would solve the issues with `...x...` that was described earlier.}
    sent: "2017-04-22T13:55:58.991Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fb5f9fad849bcf42ac5715"
    text: {> it is pretty hard to find a computer or printer which can't already handle unicode, isn't it?^/^/of course, you're right here, but the keyboard is problem :)^/}
    sent: "2017-04-22T13:50:23.970Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb58a3d32c6f2f092dea5b"
    text: {(I get *very* excited when I think about red's built in / implicit GUI and how it changes the equation.  While I know a text only red will also be provided I expect it will actually be irrelevant from day one of 1.0; the size differential just isn't important and graphics are ubiquitous on pretty much everything made in the last ten years.)}
    sent: "2017-04-22T13:20:35.792Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb55cf3e27cac331b28ac9"
    text: {BTW I personally agree with you 1x1 as more clear than (1, 2).  I think ASCII has had its day and it is pretty hard to find a computer or printer which can't already handle unicode, isn't it?  I'm not saying we turn red into APL or anything :-) but red has a lot of datatypes and needs a lot of unusual (in programming circles) parsing by the human brain.  Unusual unicode (as opposed to the normal schlock we already have in various languages) provides opportunities to make things unambiguous with a single character -- and, as I said, red's planned IDE will be built in and can make unicode access pretty much trivial.}
    sent: "2017-04-22T13:08:31.423Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb540bd32c6f2f092dd82f"
    text: {@tanstaaf1 I am not against using Unicode, but limiting the basic syntax to ASCII makes sense. Going fully Unicode can bring lot of confusion, just look at `〈 〉` vs `< >` vs `‹ ›`. }
    sent: "2017-04-22T13:00:59.033Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb5329d32c6f2f092dd54a"
    text: {@rebolek I'm not actually arguing AGAINST @dockimbel 's proposal; I said I'm dropping into the middle of this and I just urge a "third" way might actually be BETTER.  Unicode is there; let's USE it to our advantage.}
    sent: "2017-04-22T12:57:13.631Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb52fa8bb56c2d11d12493"
    text: {@tanstaaf1 that may work in repl, but it is fine for π, not for special brackets. ^/}
    sent: "2017-04-22T12:56:26.370Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb52b2c1d3b501540cebcb"
    text: {Play with Julia for a few.  I expect it WILL be one of the most important languages in the next decade as the scientific  community, the data scientists/statisticians, and the quants/finance folk are all hungry for what it is bringing to the table in one package.    In Julia math much of specialized math notation has unicode mapping to "\pi<tab>" type repl translation.  In Red's case the situation could be even easier since there is likely to be a sophisticated IDE which will make things like unique unicode support trivial to access.}
    sent: "2017-04-22T12:55:14.109Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb52768bb56c2d11d12346"
    text: {Anyway, I really do not like `(1, 2, 3)` proposal. It is going to be confusing IMO. The advantage of `1x1` is that is somehow standard way to write coordinates and is also shorter than `[1 1]`. hat is the advantage of `(1, 2, 3)` compared to `[1 2 3]`? It is two chars longer and looks like `paren!`, but is not `paren!`. What is the maximal number of elements in this type? Is there going to be `[1, 2, 3]` for something else also?}
    sent: "2017-04-22T12:54:14.230Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb51ac881b89e10175e33e"
    text: {that eg was supposed to be "\".  In Julia that would get translated in place.  I gitter it waited until I hit a return to change my meaning to something I didn't mean.}
    sent: "2017-04-22T12:50:52.950Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb5189c1d3b501540ce6cd"
    text: {@tanstaaf1 maybe, do you have any ideas or examples?^/}
    sent: "2017-04-22T12:50:17.736Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb5162ad849bcf42ac2055"
    text: {@rebolek Couldn't a single character (e.g., \) prefix be sufficient to indicate unicode to the red repl?  Wouldn't that make more sense than these cultural syntax squabbles?  Choice is better than no choice.}
    sent: "2017-04-22T12:49:38.374Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb50b6ad849bcf42ac1ed8"
    text: {So using them for delimiters doesn't seem like a good idea to me.^/}
    sent: "2017-04-22T12:46:46.973Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb505412d240993589ef11"
    text: {@tanstaaf1 defining π in Red is possible,^/```^/>> π: pi^/== 3.141592653589793^/>> π^/== 3.141592653589793^/```^/the problem is that special Unicode chars are not very accessible on standard keyboards.}
    sent: "2017-04-22T12:45:08.734Z"
    editedAt: "2017-04-22T12:45:49.987Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb5038881b89e10175dd3b"
    text: {Typing \pi<tab> in the repl gives you immediate unicode.  Something similar in Red would make access to Red-context unicode characters easy to access regardless of keyboard constraints.}
    sent: "2017-04-22T12:44:40.161Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb4fbed32c6f2f092dca0e"
    text: {julia> pi^/π = 3.1415926535897...^/julia> π^/π = 3.1415926535897...}
    sent: "2017-04-22T12:42:38.594Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb4fae8bb56c2d11d11849"
    text: {To the above, if you haven't looked at Julia's dexterity with unicode I suggest you do:}
    sent: "2017-04-22T12:42:22.028Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb4a37d32c6f2f092db581"
    text: {@dockimbel I am dropping in late to this discussion on commas and I don't think I fully understand the proposal.  Maybe provide a link to the whole of it?  With that proviso, I want to say my eye naturally scans the bottom of lines to parse things in context and comma has a lot of deeply unconsciously embedded history which might be difficult to work around for some peoples.   I use commas extensively in large numbers of many sorts.  Might I suggest there are a huge number of pretty unique characters in the unicode which will now be supported (https://unicode-table.com/en/#control-character) and maybe you can make more use of them to provide both unambiguous (or less anyway) context and content?   If there isn't pretty much pan-national agreement what proper syntax is I'd suggest you not be too quick to commit Red to one particular syntax which is already in contention.  The discussion about ambiguity on date format differences should be kept in mind - European date formats are NOT used in the US.  I'm pretty confident that for the the next century, at least, 1/12/17 will continue to mean January 12, 2017 in the US.    Assuming, of course, that you want Red to be one of the first real international languages I think it would be nice to use unambigous (not previously regionally co-opted) unicode characters to resolve international ambiguities more than has been done to date.  Just my two cents.}
    sent: "2017-04-22T12:19:03.520Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58fb4155881b89e10175a711"
    text: {> re-introduce the carefully avoided comma separated list^/^/wait, what?}
    sent: "2017-04-22T11:41:09.658Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fb40dc12d240993589b13a"
    text: {The hidden drawbacks are that you make it less human for European style decimal representation, re-introduce the carefully avoided comma separated list in a piece of syntax, and all for a usecase that is not convincing. }
    sent: "2017-04-22T11:39:08.490Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58fb31538bb56c2d11d0acf6"
    text: {Ok, as they are no real argument against my proposal, I will continue study it to be sure there are no hidden drawbacks.}
    sent: "2017-04-22T10:32:51.971Z"
    editedAt: "2017-04-22T10:38:14.203Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fb25f43e27cac331b1e330"
    text: {> It looks like a lot of people are against commas, but nobody is making strong arguments against Doc's proposed syntax.^/^/For being against commas would actually make perfect sense to be against Doc's proposed syntax that uses them exhaustively. Allowing commas in decimal notation give those against commas the chance to avoid commas! ^/I stil think it is un-re(d)bol like to go using commas in this syntax for this rather exceptional usecase.^/Even though maybe 1.23x3.45x4.56 is not really readable and also looks like a malformed `tuple!` to be honest when are you actually going to use such hardcoded values? Most of the time the actual values will be filled by the use of variables constructing these `point!`s.}
    sent: "2017-04-22T09:44:20.220Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58fb1ccb3e27cac331b1c1a8"
    text: ":)"
    sent: "2017-04-22T09:05:15.342Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58fb1ba6ad849bcf42ab674c"
    text: "pero si existe, puedo afiliarme"
    sent: "2017-04-22T09:00:22.059Z"
    editedAt: "2017-04-22T09:00:40.569Z"
    v: 2
    author: "5688aaac16b6c7089cc0ece0"
) #(
    id: "58fb1b428fcce56b2027075c"
    text: ";)"
    sent: "2017-04-22T08:58:42.499Z"
    v: 1
    author: "5688aaac16b6c7089cc0ece0"
) #(
    id: "58fb1b40cfec919272639480"
    text: "recuerdo nada"
    sent: "2017-04-22T08:58:40.670Z"
    v: 1
    author: "5688aaac16b6c7089cc0ece0"
) #(
    id: "58fb19c6881b89e101752020"
    text: "Aped: Recuerda que existe #Red/Spanish "
    sent: "2017-04-22T08:52:22.178Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
)#(
    id: "58fb19a812d2409935892cb7"
    text: "de nada Aped"
    sent: "2017-04-22T08:51:52.388Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58fb19218bb56c2d11d05fd6"
    text: "gracias"
    sent: "2017-04-22T08:49:37.182Z"
    v: 1
    author: "5688aaac16b6c7089cc0ece0"
) #(
    id: "58fb17d68fcce56b2026f99b"
    text: "yeah"
    sent: "2017-04-22T08:44:06.080Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58fb17bcd32c6f2f092d0b3c"
    text: {I remember that exists a #Red/Spanish for spanish questions}
    sent: "2017-04-22T08:43:40.085Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58fb17758bb56c2d11d05995"
    text: "https://github.com/red/VScode-extension"
    sent: "2017-04-22T08:42:29.705Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb17578bb56c2d11d0594a"
    text: {Visual Studio Code (Microsoft is valid, with addon Red Language)}
    sent: "2017-04-22T08:41:59.056Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58fb15328fcce56b2026f245"
    text: {Is there a suggested IDE/workflow/environment for red yet?}
    sent: "2017-04-22T08:32:50.135Z"
    v: 1
    author: "5688aaac16b6c7089cc0ece0"
) #(
    id: "58fa6f838bb56c2d11ce5861"
    text: {I can see that, and since `get-word!` always works, I am happy to leave it.}
    sent: "2017-04-21T20:45:55.920Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58fa6e6008c00c092aa2f81e"
    text: {In that example, it should be fine. It came out of chat here, but I think `get-word!` may have been left as it would work for functions as well. Feel free to clarify and edit.}
    sent: "2017-04-21T20:41:04.976Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa6cf9ad849bcf42a94a5f"
    text: {@greggirwin I just went over the binding stuff in Guru Meditations, and found this:^/```^/c: context [a: 2]^/new: bind 'a (context? in c 'a)^/; 'new now refers to 'a in context c^/Also, you can use :c instead of context? in c 'a. They are strictly equivalent.^/```^/Question referring to last sentence: why `:c`? Will `c`not do?^/}
    sent: "2017-04-21T20:35:05.202Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58fa2c33881b89e10171cd53"
    text: "all right, thanks."
    sent: "2017-04-21T15:58:43.906Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fa2bc78fcce56b2023b81c"
    text: {@Zamlox `insert/part` (or `append/part`) should do the job.}
    sent: "2017-04-21T15:56:55.861Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa2b748bb56c2d11cd26b7"
    text: {@Zamlox Searching for the same function or object value in a block is supported.  If you use `find/same`, it would even be even more effecient.}
    sent: "2017-04-21T15:55:32.602Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa2a8e8bb56c2d11cd21e9"
    text: {@dockimbel would it be possible to enhance ```copy``` to copy a ```series!``` into another ```series!``` in an optimized way like ```move``` (perhaps adding refinement ```/into```)  ? I would like to have the possibility to add a part of a ```series!``` into another ```series!``` without allocating new memory.}
    sent: "2017-04-21T15:51:42.721Z"
    editedAt: "2017-04-21T15:54:56.929Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fa26bbf22385553d629bec"
    text: {I have also noticed that this one will work:^/```^/c: reduce [make obj! [] o1: make obj! []]^/probe find c o1^/```^/will give result:^/```^/[make object! [^/    x: 10^/    f1: func [][]^/]]^/```}
    sent: "2017-04-21T15:35:23.557Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fa2656ad849bcf42a7ffc0"
    text: {I have created a pool of strings and blocks but I got stucked for objects.}
    sent: "2017-04-21T15:33:42.249Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fa2629c1d3b5015408bbdc"
    text: {all right, thanks for explanation. I was trying to create a pool of objects and I noticed that if objects has functions then ```find``` fails.}
    sent: "2017-04-21T15:32:57.515Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58fa25618fcce56b20239b2e"
    text: {@Zamlox I think the reason is really because such comparison is inefficient between function values, and even more for `find`. When you combine then `find` with objects which can have many functions, that becomes a huge work to achieve the search. So implementing a custom comparison method is probably the best option.}
    sent: "2017-04-21T15:29:37.747Z"
    editedAt: "2017-04-21T15:30:02.929Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa21ab08c00c092aa19c3d"
    text: {@Zamlox It boils down to this:^/```lisp^/(func [][]) = (func [][])^/== false^/>> foo: func [][]^/== func [][]^/>> :foo = :foo^/== true^/```^/It's the same in Red and Rebol2/3. Not sure why Rebol does not do a deep comparison, but in Red case, we just postponed implementing the comparison as it was considered very low priority. Anyway, you can write a short custom code for doing such comparison, using the criteria which are the most relevant for your use-case.}
    sent: "2017-04-21T15:13:47.942Z"
    editedAt: "2017-04-21T15:15:29.070Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa1ba3cfec9192725fe67d"
    text: "Sisyphean labor :("
    sent: "2017-04-21T14:48:03.307Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa1ad512d2409935859c8d"
    text: {It's not great... it was done in year 2015... just was looking if there is any chance to push it a little bit.. but I don't think it is possible... we will have to live there with the color chaos.}
    sent: "2017-04-21T14:44:37.582Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58fa139a08c00c092aa14ce6"
    text: "Great work!"
    sent: "2017-04-21T14:13:46.319Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58fa139012d2409935857723"
    text: "Oh man, that is cool :)"
    sent: "2017-04-21T14:13:36.934Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58fa11f308c00c092aa143df"
    text: {(once accepted in above repository.. someone from Gitter would have to enable it in [this list](https://github.com/gitterHQ/gitter-markdown-processor/blob/master/lib/process-chat.js#L24)) }
    sent: "2017-04-21T14:06:43.832Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58fa11453e27cac331adfb54"
    text: {I'm not regex expert.. but as there are people asking to have regex support in Red, maybe someone can optimize it too.}
    sent: "2017-04-21T14:03:49.976Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58fa10dd8bb56c2d11cc9a7f"
    text: {Here is how looks current sample Red code in various styles in my custom build: http://rebol.desajn.net/highlight/demo/}
    sent: "2017-04-21T14:02:05.987Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58fa10773e27cac331adf6c5"
    text: {If there is someone who would like to have proper colors for syntax highlighting here on Gitter, please help me to get this pull request accepted: https://github.com/isagalaev/highlight.js/pull/988 Current problem is, that Javascript sample file is detected as Red file in the tests.}
    sent: "2017-04-21T14:00:23.593Z"
    editedAt: "2017-04-21T14:01:09.673Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f9fe5cad849bcf42a7362a"
    text: {@toomasv Red header is free-form, you can even specify `%*.ico` file in it with `Icon:`field to include inside executable.}
    sent: "2017-04-21T12:43:08.467Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f9fd493e27cac331ad9eff"
    text: {Red header doesn't seem to have `Config:` option:^/```^/>> print system/standard/header^/title: none^/name: none^/type: none^/version: none^/date: none^/file: none^/author: none^/needs: none^/```}
    sent: "2017-04-21T12:38:33.496Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f9fcdaad849bcf42a72dcf"
    text: "You mean `system/build/config`? "
    sent: "2017-04-21T12:36:42.091Z"
    editedAt: "2017-04-21T12:39:48.261Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f9f8abad849bcf42a71b8f"
    text: {Can anyone remind me what the `Config:` option in the Red header should look like?}
    sent: "2017-04-21T12:18:51.906Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58f9f232f22385553d619fca"
    text: {@dockimbel following code works as expected:^/```^/>> obj!: object [x: 10]^/== make object! [^/    x: 10^/]^/>> o: make obj! []^/== make object! [^/    x: 10^/]^/>> c: reduce [make obj! [] make obj! []]^/== [make object! [^/    x: 10^/] make object! [^/    x: 10^/]]^/>> find c o^/== [make object! [^/    x: 10^/] make object! [^/    x: 10^/]]^/```^/how about this one ?^/```^/>> obj!: object [x: 10 f1: does []]^/== make object! [^/    x: 10^/    f1: func [][]^/]^/>> o: make obj! []^/== make object! [^/    x: 10^/    f1: func [][]^/]^/>> c: reduce [make obj! [] make obj! []]^/== [make object! [^/    x: 10^/    f1: func [][]^/] make object! [^/    x: 10^/    f1: func [][]^/]]^/>> find c o^/== none^/```}
    sent: "2017-04-21T11:51:14.062Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58f9da7008c00c092aa05237"
    text: {@dnmurphy Agreed, to some extent. Minimal amount of key strokes is one of the constraint we take into account for the syntax, though in the case of paren+commas for coordinates, we hit a hard limit. Removing commas would make it parse as a `paren!` and not as `pair!`, `point!`, ... More important than minimal key strokes is the need for readability, which a major design principle in Redbol. Code is read (much) more than it is written.}
    sent: "2017-04-21T10:09:52.551Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9cd798bb56c2d11cb7633"
    text: {issues are used extensively in the Red toolchain itself, as compiler directives. Would be difficult to do away with them!!}
    sent: "2017-04-21T09:14:33.807Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58f9c9bcc1d3b50154070853"
    text: {Although there is one problem:^/```^/>> #123^/== #123^/>> to issue! "123"^/*** Syntax Error: invalid character in: "123"^/*** Where: to^/```}
    sent: "2017-04-21T08:58:36.359Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f9c933881b89e1017019ef"
    text: {I used them as error keys in R2, because # could be the first char. `##ERR`.}
    sent: "2017-04-21T08:56:19.344Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9c8ec8bb56c2d11cb63f2"
    text: {Record IDs, tags (hashtag), serial numbers, keywords or alternate to words or ordinal numbers in dialects.}
    sent: "2017-04-21T08:55:08.150Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9c6e28fcce56b2021f598"
    text: {@greggirwin what for do you use `issue!`? maybe I just don't understand how to use it}
    sent: "2017-04-21T08:46:26.251Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9c023ad849bcf42a62da2"
    text: {Unless markup goes away anytime soon...^/^/It's good to question things, but the core datatypes are sound. Carl spent a lot of time defining them, Nenad used them for many years, and then made careful choices about what to keep and what to change. Or maybe I'm just grumpy because I know I shouldn't write code when I'm tired and now I have a bug. :^^)}
    sent: "2017-04-21T08:17:39.474Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9bf6c12d2409935840f72"
    text: {and what about `tag!`? Someone mentioned earlier that it might easier to use strings instead of tags during parsing.}
    sent: "2017-04-21T08:14:36.440Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f9bf148e4b63533decd41c"
    text: {@maximvl, not to discount your view, but `issue!` is *extremely* important to me, and used a *lot*. Red uses it a lot internally as well.}
    sent: "2017-04-21T08:13:08.615Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9bec28fcce56b2021d0c7"
    text: {— hello, my name is @9214 and I'm a dialectoholic^/— this is so brave of you to come up and stand with your issue... I think we need a DSL to help dialectoholics, whatcha say?}
    sent: "2017-04-21T08:11:46.513Z"
    editedAt: "2017-04-21T08:12:34.867Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f9be063e27cac331ac9dc7"
    text: {> I like the idea of common type specification like somebody mentioned above^/^/We need a syntax creation dialect :-)}
    sent: "2017-04-21T08:08:38.923Z"
    editedAt: "2017-04-21T08:08:53.819Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f9b852c1d3b5015406b773"
    text: {also different types sharing same syntax creates confusion, like `block!` and `vector!`}
    sent: "2017-04-21T07:44:18.063Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b7f608c00c092a9fbbdf"
    text: {for example `issue!` is not that important nor often used (I think) and I'd better use this syntax for something else}
    sent: "2017-04-21T07:42:46.669Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b7d7f22385553d60b0db"
    text: {@dockimbel "(x, y) and (x, y, z) is what you all used in highschool and college for writing 2D/3D coordinates."  I think that reflects the medium in use at the time ie pen and paper).  In a modern context on computers any additional keying creates increased risk of error, so I think its about trading off whatever benefit there is to using commas versus whatever dis-benefit there is (extra verbosity and increased error risk.  Just a thought}
    sent: "2017-04-21T07:42:15.400Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "58f9b77b12d240993583ec01"
    text: "the last one :)"
    sent: "2017-04-21T07:40:43.301Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b7778fcce56b2021b068"
    text: "Got it."
    sent: "2017-04-21T07:40:39.225Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9b76b12d240993583eb85"
    text: {Maybe I misunderstood. Are in favor of lexical forms only, construction syntax only, or a pragmatic mix?}
    sent: "2017-04-21T07:40:27.375Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9b755ad849bcf42a601b0"
    text: {other types can have "construction syntax form" like image!}
    sent: "2017-04-21T07:40:05.682Z"
    editedAt: "2017-04-21T07:40:11.679Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58f9b70c8e4b63533deca692"
    text: {@greggirwin I think we should, they help writing short & concise code, but only the most useful ones so we can keep syntax clear of things like `[(< 1,2,3 >)]`}
    sent: "2017-04-21T07:38:52.427Z"
    editedAt: "2017-04-21T07:39:11.091Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b6b48bb56c2d11cb12a4"
    text: "ok, I played with it in a repl, it isn't bad"
    sent: "2017-04-21T07:37:24.614Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b6b1d32c6f2f0927cec8"
    text: {@maximvl , are you suggesting we shouldn't have syntax forms? ;^^)}
    sent: "2017-04-21T07:37:21.344Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9b679c1d3b5015406af96"
    text: {I'm for literal forms. But I think that's more of a missing feature than an inconsistency @maximvl }
    sent: "2017-04-21T07:36:25.166Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9b61dd32c6f2f0927ccc0"
    text: {@geekyi not consistent in a way that some types do have syntax forms and others don't}
    sent: "2017-04-21T07:34:53.336Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b5f4c1d3b5015406ac0e"
    text: {@maximvl not consistent how? I really like `make`, it's transparent, flexible and simple }
    sent: "2017-04-21T07:34:12.818Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9b5838bb56c2d11cb0e5f"
    text: {Construction syntax is used for at least `none, true, false` so far.}
    sent: "2017-04-21T07:32:19.878Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9b4c48e4b63533dec9d38"
    text: {to me it looks strange that some datatypes formatted as code which produces them, it doesn't look consistent, like image:^/```^/>> i^/== make image! [2x2 #{FFFFFFFFFFFFFFFFFFFFFFFF}]^/>> g: do load mold i^/== make image! [2x2 #{FFFFFFFFFFFFFFFFFFFFFFFF}]^/>> g = i^/== true^/```}
    sent: "2017-04-21T07:29:08.035Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b424c1d3b5015406a4d9"
    text: {@dockimbel ^/>`#[...]` is already used by the contruction syntax^/^/for what type? I don't remember seeing it anywhere}
    sent: "2017-04-21T07:26:28.205Z"
    editedAt: "2017-04-21T07:26:47.643Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b3c83e27cac331ac7189"
    text: {`#[vector! integer! 16 [1 2 3]]`, because it's extensible and doesn't bloat syntax (with commas)}
    sent: "2017-04-21T07:24:56.665Z"
    editedAt: "2017-04-21T07:31:21.807Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b39012d240993583dc7f"
    text: {I like the idea of common type specification like somebody mentioned above}
    sent: "2017-04-21T07:24:00.354Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9b31808c00c092a9fa9ba"
    text: {well, you can't have syntax form for everything without making things ugly}
    sent: "2017-04-21T07:22:00.019Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9ae563e27cac331ac5c7f"
    text: {It there will be comma allowed, some people will demand it everywhere.}
    sent: "2017-04-21T07:01:42.329Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f9aaa5cfec9192725dea6e"
    text: {That's the only loss. I don't have any stored data using that form, so I'm safe. :^^)}
    sent: "2017-04-21T06:45:57.077Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9aa718e4b63533dec7913"
    text: "Yes, the alt-dot option goes away with this."
    sent: "2017-04-21T06:45:05.156Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9a9a1c1d3b50154067309"
    text: {You won't be able to use as alt dot inside parenthesis. So either exception, or get rid of alt dot meaning, opening comma up for other uses}
    sent: "2017-04-21T06:41:37.436Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9a8f78bb56c2d11cad463"
    text: {The only other meaning it has right now is, as you say, alt dot. So we just say, in the context of a paren, `num, num opt [, num]` has a specific meaning.}
    sent: "2017-04-21T06:38:46.999Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9a8c3f22385553d60746c"
    text: {This does open up comma for that possibility right? }
    sent: "2017-04-21T06:37:55.461Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9a876881b89e1016f8cc5"
    text: {I like that comma is being used for something, instead of being just an alternative to dot}
    sent: "2017-04-21T06:36:38.050Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9a8713e27cac331ac4563"
    text: {It only needs to be consistent within its own datatype.}
    sent: "2017-04-21T06:36:33.566Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9a8418e4b63533dec715d"
    text: {In other words, how cleanly would it fit with the rest.. In terms of consistency..}
    sent: "2017-04-21T06:35:45.932Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9a80ac1d3b501540668af"
    text: {My biggest gripe with the current proposal is comma is used for a specific datatype. Feels like a waste of punctuation. But if it's only inside parenthesis.. }
    sent: "2017-04-21T06:34:50.840Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9a7d6f22385553d606f45"
    text: {> One of the cons I can see and which should be listed is - many other langs use such format for an array of items.^/^/What other languages use/not use is the lowest concern when choosing datatypes syntax in Redbol, simplicity, consistency, human-friendliness are the most important concerns. As one of oldest Rebol follower, you should be very aware of that.}
    sent: "2017-04-21T06:33:58.802Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9a7048fcce56b20217110"
    text: "There will be official Red specs as well."
    sent: "2017-04-21T06:30:28.221Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9a68908c00c092a9f733e"
    text: {I meant specifically for point! But also other data types too I guess }
    sent: "2017-04-21T06:28:25.126Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9a6403e27cac331ac3c74"
    text: {Thanks. It will be fun to get back to that, but first... `format`. :^^)}
    sent: "2017-04-21T06:27:12.692Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9a61b12d240993583a680"
    text: "@greggirwin ren wiki page is a useful reference! "
    sent: "2017-04-21T06:26:35.903Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9a61bf22385553d6067a1"
    text: {The first you can enter manually, the second is normalized form that the system will always produce.}
    sent: "2017-04-21T06:26:35.583Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9a5978fcce56b20216c58"
    text: "Is it `(x,y,z)` or `(x, y, z)` is also allowed? "
    sent: "2017-04-21T06:24:23.952Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f9a52f8fcce56b20216ada"
    text: {as a rule of thumb, assume that no one reads docs :D}
    sent: "2017-04-21T06:22:39.691Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f9a44c8fcce56b202167af"
    text: {One of the cons I can see and which should be listed is - many other langs use such format for an array of items. Hopefully users are not going to be confused and produce `[x, y, z]` or some other similar forms. But then there are docs to cover that .... }
    sent: "2017-04-21T06:18:52.480Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f9a414cfec9192725dd3b4"
    text: {"Everybody uses commas daily when writing" Just to avoid confusion: I meant natural languages, not code.}
    sent: "2017-04-21T06:17:56.712Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9a0328fcce56b2021557a"
    text: {About commas:^/* I never proposed spreading the use of commas, nor to use them for collections.^/* Purely subjective comments (I like/dislike it) are not helpful.^/* Everybody uses commas daily when writing, you have a key on your keyboard for that, so banning them makes no sense.^/* Paren+commas (+space) *is* the natural way to write [coordinates](https://en.wikipedia.org/wiki/Coordinate_system), any other syntax (except for `x` one, which relates to dimensions) is unnatural. Redbol is trying to provide syntax which is the closest to natural form, so that it makes learning and usage more intuitive.^/* `(x, y)` and `(x, y, z)` is what you all used in highschool and college for writing 2D/3D coordinates.}
    sent: "2017-04-21T06:01:22.673Z"
    editedAt: "2017-04-21T06:11:09.099Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f99e8af22385553d60472f"
    text: {@x8x @greggirwin Rebol has a pass-thru rule for `reduce` that I find problematic as it cannot catch type errors. Though, for sake of compatibility, I've kept it in Red, but for a word argument, it acts as a `get`  and will evaluate the word.^/}
    sent: "2017-04-21T05:54:18.268Z"
    editedAt: "2017-04-21T05:54:39.584Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f99c6fd32c6f2f092760d2"
    text: {@x8x ^/> still, the new behaviour is like a double reduce for lit-word^/^/No, there is no "double reduce", even in Rebol, a lit-word always evaluates to a word:^/```lisp^/>> 'a^/== a^/```}
    sent: "2017-04-21T05:45:19.058Z"
    editedAt: "2017-04-21T05:46:31.428Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f99aa9ad849bcf42a59370"
    text: "Understood."
    sent: "2017-04-21T05:37:45.118Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f99a37ad849bcf42a591ab"
    text: {@greggirwin Just to be clear, I am for keeping the current pair! syntax (like you, I find it great for small integer 2D coordinates, and it's all great for dialects). What I proposed is an additional syntax, which could be also used by pair! as alternative syntax, but also serve as default syntax for other fixed-size vectors.}
    sent: "2017-04-21T05:35:51.036Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f97215cfec9192725d28d7"
    text: "And no commas"
    sent: "2017-04-21T02:44:37.907Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f93df1f22385553d5ef984"
    text: {Hey, look at that, old research on a `point!` type: https://github.com/Ren-data/Ren/wiki/value-point-rfc}
    sent: "2017-04-20T23:02:09.992Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f93c1112d2409935824f2f"
    text: {Right now all my spare time is going into Red proper. We'll get back to it though.}
    sent: "2017-04-20T22:54:09.945Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f93bedcfec9192725c76c8"
    text: "See also: https://github.com/Ren-data/Ren"
    sent: "2017-04-20T22:53:33.521Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f93bb3d32c6f2f09261d8b"
    text: {Happy to have people work on things. The basics are locked down pretty well.}
    sent: "2017-04-20T22:52:35.469Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f93b8ad32c6f2f09261c7a"
    text: {Eventually, but I set things aside for a bit. The goal is to let people build implementations for whatever they want, though libRed will be a main entry point I think.}
    sent: "2017-04-20T22:51:54.493Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f93b793e27cac331aac751"
    text: "I am pretty handy in .Net"
    sent: "2017-04-20T22:51:37.860Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f93b6ad32c6f2f09261c4f"
    text: "Rather, not you specifically,  but the project. "
    sent: "2017-04-20T22:51:22.373Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f93b4fcfec9192725c74fa"
    text: {It looks cool :+1:   Are you trying to get a .Net/C# implementation going?}
    sent: "2017-04-20T22:50:55.655Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f93b3f8bb56c2d11c94931"
    text: {The commas would denote that it's a special kind of paren, limited to numbers and how many values it can contain.}
    sent: "2017-04-20T22:50:39.961Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f93a68ad849bcf42a43d41"
    text: "@AlexanderBaggett, http://ren-data.org"
    sent: "2017-04-20T22:47:04.986Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9377ead849bcf42a431eb"
    text: {I think (1.2 3.14159 456) is fine. What would be the commas purpose, again?}
    sent: "2017-04-20T22:34:38.599Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f92fa7f22385553d5ec3cb"
    text: {Is there a webpage or github where I can see the project?}
    sent: "2017-04-20T22:01:11.265Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "58f92f9a8e4b63533deacacc"
    text: "So is data basically blocks?"
    sent: "2017-04-20T22:00:58.238Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f92e58ad849bcf42a41045"
    text: "Oh interesting."
    sent: "2017-04-20T21:55:36.029Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f92e3f8fcce56b201fbfc7"
    text: {Ren is a project a few of us have tinkered on, which is basically the JSON of Redbol languages. A strictly defined data format to aid compatibility between implementations.}
    sent: "2017-04-20T21:55:11.884Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f92e2d881b89e1016de043"
    text: "Blocks are so versatile."
    sent: "2017-04-20T21:54:53.757Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f92e05881b89e1016ddf80"
    text: {When we start pushing for datatype extensions, it isn't a bad reaction to say "Use a block". :^^)}
    sent: "2017-04-20T21:54:13.398Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f92deff22385553d5ebcbe"
    text: "what is Ren ?"
    sent: "2017-04-20T21:53:51.100Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f92dd708c00c092a9ddc65"
    text: {Something even Reducers don't think about is that datatypes are, themselves, like mini dialects in a way. Very small, problem oriented languages. The more general we try to make them, the more we risk messing up their clarity, elegance, and conceptual integrity. }
    sent: "2017-04-20T21:53:27.123Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f92d738fcce56b201fbc63"
    text: {We could. I even suggested as much for Ren. The question is how much value they have. }
    sent: "2017-04-20T21:51:47.072Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f92cd812d24099358217f5"
    text: ":)"
    sent: "2017-04-20T21:49:12.284Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f92cd1c1d3b5015404b907"
    text: "or something similarly silly"
    sent: "2017-04-20T21:49:05.830Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f92cc7ad849bcf42a40965"
    text: {so we can't have a 4d array  that looks like 400x400x400x400 ?}
    sent: "2017-04-20T21:48:55.198Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f92c5612d240993582154c"
    text: {It looks like a lot of people are against commas, but nobody is making strong arguments against Doc's proposed syntax. It's possible, though not likely, that our suggestions will hit upon some heretofore undiscovered bit of syntax that is better than the current pair syntax or Doc's idea. ^/^/A lot of it is what we get used to. `(1, 2, 3)` feels different because there's an implicitness to the rules. That all values have to be numbers *and* have a comma after it, seems funny right now. There is nothing to indicate that you can't just add more values, because it looks like a normal list.  A single dimension. Where `×` implies, to me, different dimensions which, unless you're into superstrings, are fairly limited. Every new syntax is like that though. We just stop seeing it after while. I really disliked `keep` in `collect` when it was adopted, but am (mostly) used to it now. ;^^)}
    sent: "2017-04-20T21:47:02.435Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f929ae881b89e1016dced7"
    text: {@ericguedespinto here is a `now` version for linux (for macOS, just install `brew install gnutls` and change `'date` with `'gdate`) beware it will always return a `string!` https://pastebin.com/raw/PrqCzv4U}
    sent: "2017-04-20T21:35:42.574Z"
    editedAt: "2017-04-20T21:37:18.926Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f9259f8e4b63533deaa305"
    text: "And probably I was the one who asked.. 😬"
    sent: "2017-04-20T21:18:23.469Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f9253ec1d3b50154049bd5"
    text: {I can't find notes on it right now, though I know Doc has explained it before. }
    sent: "2017-04-20T21:16:46.219Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f925308e4b63533deaa16c"
    text: {I'll take your extended version, `map` and `object` additions are usefull, thx! 😁}
    sent: "2017-04-20T21:16:32.464Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f9248208c00c092a9db383"
    text: {Humm maybe it's rebol that had it wrong, `a` would return the value of `a` so `reduce 'a` should return the value of `a` like red does. So is that a consistency fix?}
    sent: "2017-04-20T21:13:38.574Z"
    editedAt: "2017-04-20T21:14:07.276Z"
    v: 3
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f9238c3e27cac331aa6617"
    text: {@greggirwin still, what's the benefit of the changed behaviour?}
    sent: "2017-04-20T21:09:32.092Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f923678fcce56b201f909c"
    text: {Here's a base version:^/```^/join: func [^/^-"Returns a copy of a value, with other values appended."^/^-value "Base value; copied if series, formed otherwise"^/^-rest  "Value or block of values"^/][^/^-if block? :rest [rest: reduce rest]^/^-append either series? :value [copy value] [form :value] :rest^/]^/```}
    sent: "2017-04-20T21:08:55.809Z"
    editedAt: "2017-04-20T21:09:09.342Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9233a8e4b63533dea96c0"
    text: {ohh, but then in a block it does it like in rebol:^/```^/  reduce ['a]^/;   [a]^/```}
    sent: "2017-04-20T21:08:10.316Z"
    editedAt: "2017-04-20T21:08:25.956Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f922f1cfec9192725c17ab"
    text: {still, the new behaviour is like a double reduce for lit-word}
    sent: "2017-04-20T21:06:57.258Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f922ccad849bcf42a3e227"
    text: "It has a big warning comment. :^^)"
    sent: "2017-04-20T21:06:20.602Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f922a6881b89e1016db33f"
    text: {Ohh that's bigger than the original, thanks will use that.}
    sent: "2017-04-20T21:05:42.826Z"
    editedAt: "2017-04-20T21:10:26.610Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f92265881b89e1016db1dd"
    text: {Experimental. Caveat emptor.^/```^/^-; I have this here because some old format code I'm porting uses it.^/^-; It may all change to `rejoin`, but it gave me a reason to port `join`^/^-; to Red for real and think about object/map support. `Rejoin` doesn't^/^-; work for those. The question, then, is what value there is in a^/^-; uniform interface for copy+extend.^/^-join: func [^/^-^-"Concatenate values"^/^-^-a "Coerced to string if not a series, map, or object"^/^-^-b "Single value or block of values; reduced if a is not an object or map"^/^-][^/^-^-if all [block? :b  not object? :a  not map? :a] [b: reduce b]^/^-^-case [^/^-^-^-series? :a [append copy a :b]^/^-^-^-map?    :a [extend copy a :b]^/^-^-^-object? :a [make a :b]^/^-^-^-'else      [append form :a :b]^/^-^-]^/^-]^/```}
    sent: "2017-04-20T21:04:37.690Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f922498bb56c2d11c8e91a"
    text: "I'd still be interested in the advantage of that"
    sent: "2017-04-20T21:04:09.565Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f92219f22385553d5e8e30"
    text: {would you be so nice and share your `join` :smile: }
    sent: "2017-04-20T21:03:21.490Z"
    editedAt: "2017-04-20T21:03:29.883Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f921dd3e27cac331aa5de0"
    text: {@x8x ^/```red^/>> repend "a" 'b^/*** Script Error: reduce does not allow string! for its out argument^/*** Where: reduce^/```}
    sent: "2017-04-20T21:02:21.287Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f921d608c00c092a9da772"
    text: {Red doesn't have `join` officially yet. The `join` I have works like in Rebol.}
    sent: "2017-04-20T21:02:14.521Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f921598bb56c2d11c8e4d2"
    text: {where is the advantage? `join` and `repend` depends on it:^/rebol:^/```^/  join "a" 'b^/;   "ab"^/  repend "a" 'b^/;   "ab"^/```^/red:^/```^/  join "a" 'b^/*** Script Error: b has no value^/*** Where: reduce^/  repend "a" 'b^/*** Script Error: b has no value^/*** Where: reduce^/```}
    sent: "2017-04-20T21:00:09.599Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f9213408c00c092a9da469"
    text: {About your question earlier though @x8x , It does look like a bug, in Rebol it does evaluate back to a}
    sent: "2017-04-20T20:59:32.803Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f9211f881b89e1016dac10"
    text: {In Rebol:^/```^/>> rebol = system^/== true^/```}
    sent: "2017-04-20T20:59:11.359Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f920ea12d240993581e515"
    text: {Problem solved  ;)^/```^/>> rebol: red^/== 255.0.0^/>> rebol^/== 255.0.0^/```}
    sent: "2017-04-20T20:58:18.060Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f920bc12d240993581e47e"
    text: "Attribute"
    sent: "2017-04-20T20:57:32.375Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f920b5f22385553d5e8846"
    text: "Because rebol: false is in the consoles words"
    sent: "2017-04-20T20:57:25.408Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f9209212d240993581e2e3"
    text: {```^/>> ? rebol^/rebol is a logic! of value: false ^/```}
    sent: "2017-04-20T20:56:50.254Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f9207b3e27cac331aa57f3"
    text: "It said Rebol evaluated to Red."
    sent: "2017-04-20T20:56:27.246Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f920448fcce56b201f83db"
    text: "what was it like? :smile: "
    sent: "2017-04-20T20:55:32.299Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f92015ad849bcf42a3d65f"
    text: {@x8x, by design. Though your temp message was pretty funny. :^^)}
    sent: "2017-04-20T20:54:45.465Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f91fc9f22385553d5e84f9"
    text: {I apologize, I made an assumption about what you had said, before you finished editing it.  I thought  your message was  rebol: red. I thought you literally did `? rebol` and got back `red`}
    sent: "2017-04-20T20:53:29.553Z"
    editedAt: "2017-04-20T20:55:35.115Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f91fb88fcce56b201f81db"
    text: {feature or bug?^/rebol:^/```^/  reduce 'a^/;   a^/```^/red:^/```^/  reduce 'a^/*** Script Error: a has no value^/*** Where: reduce^/```}
    sent: "2017-04-20T20:53:12.752Z"
    editedAt: "2017-04-20T20:53:56.491Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f91e37881b89e1016d9f83"
    text: {I am against commas, because I spent a decent amount of time unlearning commas from other programming languages when I came to Red.}
    sent: "2017-04-20T20:46:47.732Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f91cf2d32c6f2f09259dc3"
    text: {URLs aren't fundamental enough, but it's damned handy}
    sent: "2017-04-20T20:41:22.677Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f9176f3e27cac331aa2eed"
    text: "@geekyi it's Rebol's bastard :feelsgood: "
    sent: "2017-04-20T20:17:51.145Z"
    editedAt: "2017-04-20T20:18:13.720Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f91711c1d3b50154045bfb"
    text: {>- Is what we want a true vector lexical form?^/^/>@dockimbel ^/>> @greggirwin I suggested the paren+comma notation only for fixed-size vectors (`pair!`, `point!`, ... `spacetime!`? ;-)), not for `vector!`.^/^/So that splits this discussion to 2 things: vectors of limited length vs arbitrary, the later which can be deferred^/- Well, I can get behind `spacetime!` (4 dimensional arrays) :smile: in that case,^/> Pair syntax, I believe, was designed with purpose^/^/it may limit what I'd use `point!` for (3D representation) ^/- Literal syntax for arbitrary `vector!`s would be nice}
    sent: "2017-04-20T20:16:17.746Z"
    editedAt: "2017-04-20T20:24:53.837Z"
    v: 5
    author: "569c37abe610378809bccdff"
) #(
    id: "58f916a008c00c092a9d7810"
    text: {@gltewalt ??? json is not fundamental enough ;) It is a composite mix of things}
    sent: "2017-04-20T20:14:24.699Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f916123e27cac331aa2960"
    text: {@geekyi write a json! datatype and submit it for consideration (and probably xml! - but... *shudder*... yuck)}
    sent: "2017-04-20T20:12:02.946Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f912588e4b63533dea48f9"
    text: "Thanks"
    sent: "2017-04-20T19:56:08.937Z"
    v: 1
    author: "58da7a0dd73408ce4f5451ca"
) #(
    id: "58f91236881b89e1016d68fb"
    text: {@ericguedespinto hi Eric, AFAIK no, only `now/time`}
    sent: "2017-04-20T19:55:34.215Z"
    editedAt: "2017-04-20T19:55:41.028Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f911d512d240993581a0df"
    text: {Hi everybody. Is `now`available? I get a "Internal Error: reserved for future use (or not yet implemented)"}
    sent: "2017-04-20T19:53:57.738Z"
    v: 1
    author: "58da7a0dd73408ce4f5451ca"
) #(
    id: "58f9108808c00c092a9d5d75"
    text: {```^/Red []^/^/remove-each x [1 2 3] ['whatever]^/```^/```^/-=== Red Compiler 0.6.2 ===-^/^/Compiling c:\Users\vvv0v\Desktop\RED\bug.red ...^/...using libRedRT built on 20-Apr-2017/12:58:25+5:00^/...compilation time : 24 ms^/^/Target: MSDOS^/^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/natives/remove-each-next^/*** in file: %/c/Users/vvv0v/Desktop/RED/bug.red^/*** at line: 332^/*** near: [^/    natives/remove-each-next 1^/]^/```^/Should I feel a ticket?}
    sent: "2017-04-20T19:48:24.268Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58f90fccad849bcf42a39355"
    text: {@maximvl ^/> >[(<| a b c |>)]^/^/>no, please no^/^/It was only an example! Could be simpler and more mnemonic, classifying by properties, e.g. `()` means unique, for `set!` like stuff.^/My usecase? I like that red has many "primitive" datatypes, and I want more! If this enables user types, better.^/I definitely don't want perl, rules for inclusion should be mathematically fundamental.^/But, it's all an idea of course}
    sent: "2017-04-20T19:45:16.535Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f90e34f22385553d5e378f"
    text: "Oh, I'm probably confusing with Elixir"
    sent: "2017-04-20T19:38:28.268Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f90e048bb56c2d11c89651"
    text: {@gltewalt `'` is the optional separator for numbers}
    sent: "2017-04-20T19:37:40.734Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f90ccc12d24099358189e2"
    text: {Isn't _ already an optional separator for numbers? }
    sent: "2017-04-20T19:32:28.792Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f90c053e27cac331a9faaf"
    text: {One of the nice things about redbol and lisps. No commas necessary in "collections"}
    sent: "2017-04-20T19:29:09.317Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f90b12cfec9192725bb22d"
    text: {Okay, that is one against, now let's ask the rest http://www.worldometers.info/world-population/ ;-)}
    sent: "2017-04-20T19:25:06.614Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f9079012d24099358170ba"
    text: "I'm against commas"
    sent: "2017-04-20T19:10:08.732Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f905bead849bcf42a36385"
    text: {Combining `!` as `not` and `(` as `paren!` gives `!(` to be `not paren!`.  `!(12,34x56,67x78,901)` `!(12.3434 x 3.56722 x 16533.234)`}
    sent: "2017-04-20T19:02:22.353Z"
    editedAt: "2017-04-20T19:02:34.025Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f9032e12d240993581598f"
    text: {I also wish we wont get commas in Red, is the NxNxN.. really such a mess? I'm thinking the use case for those in code would be pixels so very readable, for float vectors, data will mostly get loaded from somewhere or be generated and consumed, no trace of it in code.^/Constructor is a good alternative, I would add a local dialect so that I could write `#[vector! integer! 16 [1 2 3]]` as `#[vi16 [1 2 3]]` or being able to define `v: [vector! integer! 16]` and then use `#[:v [1 2 3]]`}
    sent: "2017-04-20T18:51:26.768Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f9030d7b553c707c525d5e"
    text: {@dockimbel , a while back you said you would probably address tuple as well wrt it's current limitations. That isn't a fixed-size vector, but it is typically a limited length one, which could have some optimizations vs blocks. If you are also going to look at that, where would if fit relative to this suggestion?}
    sent: "2017-04-20T18:50:53.953Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58f9030401d449152eb5f053"
    text: {> @greggirwin I suggested the paren+comma notation only for fixed-size vectors (`pair!`, `point!`, ... `spacetime!`? ;-)), not for `vector!`.}
    sent: "2017-04-20T18:50:44.787Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58f8f8af8e4b63533de9cc92"
    text: {Above is from Rebol... Red is not supporting such a syntax:^/```html^/>> type? #<1,2,3>^/*** Syntax Error: invalid float! at ",2,3>"^/*** Where: do^/```}
    sent: "2017-04-20T18:06:39.072Z"
    editedAt: "2017-04-20T18:07:19.654Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f8f81b8fcce56b201ed48f"
    text: {```html^/>> type? #<1,2,3>^/== issue!^/```^/Another possibility.}
    sent: "2017-04-20T18:04:11.125Z"
    editedAt: "2017-04-20T18:07:08.335Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f8f78dad849bcf42a31d53"
    text: {Honestly... when I was working with markup in Rebol... I've prefered using strings instead of tags anyway.}
    sent: "2017-04-20T18:01:49.047Z"
    editedAt: "2017-04-20T18:02:03.760Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f8f732cfec9192725b56b8"
    text: {I know it is `tag!`... I'm asking, if it it useful `tag!`}
    sent: "2017-04-20T18:00:18.309Z"
    editedAt: "2017-04-20T18:00:32.746Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f8f705cfec9192725b5600"
    text: {Or is above `tag!` which someone would found useful?}
    sent: "2017-04-20T17:59:33.675Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f8f70208c00c092a9ce801"
    text: "Red thinks it's a `tag!`"
    sent: "2017-04-20T17:59:30.388Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8f6c912d2409935811f7d"
    text: {What about this variant?:^/```c^/<1.2, 3.14159, 456>^/<1.2,3.14159,456>^/```}
    sent: "2017-04-20T17:58:33.241Z"
    editedAt: "2017-04-20T17:58:53.664Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f8f64df22385553d5dcca9"
    text: {https://gitter.im/red/red?at=58f86ef008c00c092a9a57df it is the usage of paren which I don't like.. I think there would be too much confusion. Paren is something special.. and using `compose` where you would use also these new sytnax will look really strange to me.}
    sent: "2017-04-20T17:56:29.286Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f8f548ad849bcf42a31358"
    text: {"Collect chokes if `binary!` in body"  ?}
    sent: "2017-04-20T17:52:08.596Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f8f5438fcce56b201ec508"
    text: {`parse` can't match `binary!` datatype inside `collect`?}
    sent: "2017-04-20T17:52:03.088Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8f5198e4b63533de9bc92"
    text: {Sure thing, but I don't know how to name it properly}
    sent: "2017-04-20T17:51:21.118Z"
    editedAt: "2017-04-20T17:52:31.710Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8f503cfec9192725b4d5e"
    text: "@9214, would you submit a ticket for that please?"
    sent: "2017-04-20T17:50:59.661Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f8f3b6cfec9192725b45d9"
    text: {Probably need to think about it more, but adding the `binary!` check solves it for the moment.}
    sent: "2017-04-20T17:45:26.142Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f8f39b8bb56c2d11c819e8"
    text: {```^/collect: func [^/    {Collect in a new block all the values passed to KEEP function from the body block} ^/    body [block!] "Block to evaluate" ^/    /into {Insert into a buffer instead (returns position after insert)} ^/    collected [series!] "The buffer series (modified)" ^/    /local keep rule pos^/][^/    keep: func [v /only] [either only [append/only collected v] [append collected v] v] ^/    unless collected [collected: make block! 16] ^/    parse body rule: [^/        any [pos: ['keep | 'collected] (pos/1: bind pos/1 'keep) | any-string! | binary! | into rule | skip]^/    ] ^/    do body ^/    either into [collected] [head collected]^/]^/```}
    sent: "2017-04-20T17:44:58.966Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f8f30f8e4b63533de9b2fb"
    text: {```^/>> collect [ #{deadbeef} ]^/^/*** Script Error: PARSE - matching by datatype not supported for any-string! input^/*** Where: parse^/```^/:confused: }
    sent: "2017-04-20T17:42:39.834Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8f157ad849bcf42a2fddb"
    text: {ha, `to-integer` ain't do the trick, error still there}
    sent: "2017-04-20T17:35:19.676Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8f11ef22385553d5dafe6"
    text: {I'll stick to `to-integer` for now, but that's an interesting edge case IMO}
    sent: "2017-04-20T17:34:22.464Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8f0e312d240993580fd96"
    text: {this code causes an error:^/```^/collect [^/        loop 4 [^/            keep offset: (to integer! #{00002d55}) + 4^/        ]^/    ]^/```^/```^/*** Script Error: PARSE - matching by datatype not supported for any-string! input^/*** Where: parse^/```^/I think this is because of `to` word inside `collect` block, but, uhm, it seems like a valid type conversion for me, not `to` keyword :(}
    sent: "2017-04-20T17:33:23.011Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8eb9412d240993580e011"
    text: {As a starting point, use Nenad's suggested paren+comma syntax. Let's shoot some holes in it and see how well it holds up. Like Petr, I'm skeptical of the comma, but it does stay clean, and we need a way to distinguish it from normal parens. We can define word-based rules, e.g., `(12.3434 x 3.56722 x 16533.234)` which is just a different can of worms. Special chars don't solve it `(12.3434 × 3.56722 × 16533.234)` either.}
    sent: "2017-04-20T17:10:44.073Z"
    editedAt: "2017-04-20T17:11:09.101Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f8e9a68e4b63533de981bf"
    text: {As Nenad says, we optimize based on constraints. Typing out  number of examples here, subjectively, `x` syntax starts to get ugly with more than 4 int digits in a segment, or if the values in each segment vary widely in their number of digits.  Same for decimals and precision. Comma syntax is marginally cleaner. Paren+comma+spaces stays clean.^/^/Too soon for me to say how natural (320, 240) will become or what other issues might arise with it.^/^/Pair syntax, I believe, was designed with purpose, and it's excellent for that. Small integers. 2D coordinates. Literal values when creating GUIs and rectangular images. Pixels. I thought it would be good to extend it to a third dimension, and others proposed decimal support. Both potentially useful, but also pushing the boundaries and neither, I think, felt right or elegant. At least not enough to build consensus. Maybe the best thing to do is leave pair well enough alone.^/^/If we do that, point! and pair! will have some relationship in people's minds, but they are distinct. We need to define, clearly, what the uses are for point!, value ranges, how often they will be literal, and what it does to overall syntax in exchanged data. }
    sent: "2017-04-20T17:02:30.188Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f8e97812d240993580d59f"
    text: {Yes, Ladislav started the discussion from other reasons, than to create some space for new lexical forms. The tricky thing with Redbol langs is, that you can rather easily ruin the experience. There are some things to which you get used over time, but I am still kind of scratching my head, when seeing commas in any possible Redbol expressions ...}
    sent: "2017-04-20T17:01:44.991Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f8e527f22385553d5d725c"
    text: {I remember discussing that. My problem with it is the subtlety it creates. I'd have to go back and revisit it to remember all the details, but I think I felt it was solving a non-problem.}
    sent: "2017-04-20T16:43:19.508Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f8e485f22385553d5d7066"
    text: {Maybe still too radical, I don't know. Would it free a space for more lexical forms?}
    sent: "2017-04-20T16:40:37.656Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f8e4733e27cac331a945e0"
    text: {@greggirwin Do you remember discussion about "space significancy" in Rebol? It was started by Ladislav. I remember many ppl found it too radical for Rebol like language. But at the end, there was one suggestion. It was called "Plan -4". Simply put, only four cases would not require a space significancy: `][, ](, )[, )(` - these would be equivalent to `] [, ] (, ) [, ) (` }
    sent: "2017-04-20T16:40:19.379Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f8e3c5cfec9192725af320"
    text: {Generalized construction syntax is good for a lot of things, IMO. }
    sent: "2017-04-20T16:37:25.377Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f8e38acfec9192725af1cb"
    text: "interesting"
    sent: "2017-04-20T16:36:26.857Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f8e3588bb56c2d11c7cc4d"
    text: {It is true that, together with image!, vector! is the only series! type that does not have a lexical form of its own. For image! this is not felt as a problem, I think. For vector, it would probably be nice to have it, BUT there are two parameters to be supplied: element-type and bit-size. The former can be deduced from the elements themselves (but what about an empty vector then??). What could one do about the bit-size? In R3, this is solved by construction syntax, like so: `#[vector! integer! 16 [1 2 3]]`. I put my hopes on that, for the moment...}
    sent: "2017-04-20T16:35:36.052Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58f8e336c1d3b501540368c8"
    text: {@greggirwin I suggested the paren+comma notation only for fixed-size vectors (`pair!`, `point!`, ... `spacetime!`? ;-)), not for `vector!`.}
    sent: "2017-04-20T16:35:02.660Z"
    editedAt: "2017-04-20T16:35:34.514Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8e1df881b89e1016c7940"
    text: {- @DideC, `{ }` are already used for ML strings.^/- Many alt construction syntax ideas have come up in the past. Need a generalized model if we extend what is there now.^/- pair syntax is nice because it is both atomic lexically, and `x` implies dimensionality.^/- Doc's suggested paren+comma notation is nice for the reasons he states, but doesn't have those attributes, and now commas become a much more real part of syntax for us.^/- Is what we want a true vector lexical form?^/- Syntax is hard, +10}
    sent: "2017-04-20T16:29:19.807Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f8e19f08c00c092a9c7fb6"
    text: {Syntax is the hardest part in language design, at least according to my own experience. Picking up a good syntax means optimizing on many constraints.}
    sent: "2017-04-20T16:28:15.169Z"
    editedAt: "2017-04-20T16:31:06.460Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8e0bb08c00c092a9c7b90"
    text: {`#[...]` is already used by the contruction syntax. `:` relates to getting/setting, `'` relates to quoting. All those symbols already have defined meaning in the syntactic rules.}
    sent: "2017-04-20T16:24:27.914Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8d88c8fcce56b201e36f3"
    text: "don't read if it's nonsense :smile: "
    sent: "2017-04-20T15:49:32.119Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f8d85508c00c092a9c5307"
    text: {```^/#[1 2 3] :[1 2 3] '[1 2 3]^/:(1 2 3) '(1 2 3)^/:{1 2 3} '{1 2 3}^/```^/then you could have an integer in front to specify the size so `10#[1 2 3]` would be like `#[1 2 3 0 0 0 0 0 0 0]`}
    sent: "2017-04-20T15:48:37.052Z"
    editedAt: "2017-04-20T15:48:48.143Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f8d40608c00c092a9c3987"
    text: {didn't follow the discussion but these would still be available `:[1 2 3]` or `'[1 2 3]` or `:(1 2 3)` or `'(1 2 3)` or `:{1 2 3}` or `'{1 2 3}`}
    sent: "2017-04-20T15:30:14.277Z"
    editedAt: "2017-04-20T15:33:28.981Z"
    v: 3
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f8b8048fcce56b201d8909"
    text: ":-)"
    sent: "2017-04-20T13:30:44.850Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f8b77b3e27cac331a85b05"
    text: "we have perl already"
    sent: "2017-04-20T13:28:27.712Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f8b773f22385553d5c7c17"
    text: ">[(<| a b c |>)]^/^/no, please no"
    sent: "2017-04-20T13:28:19.457Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f8b76208c00c092a9ba00d"
    text: {what about 1x2 for pair! and !1x2x3  for `point!` In !1.2x1.3x1.4 it kind of warns for attention reading it.^/This could also be used for `tuple!` where 255.255.255 is the restrictive one for networking, colorcoding etc and !2012.2013.2014.2015.2016.2017 for the more free form. (Hey there is even room for comma's there to use for decimal place :-P )}
    sent: "2017-04-20T13:28:02.669Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f8b52e8e4b63533de878b0"
    text: {Is accolade `{` and `}`not available on all keyboard ? But I don't like adding another "group of" separator.}
    sent: "2017-04-20T13:18:38.725Z"
    editedAt: "2017-04-20T13:18:46.972Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
)#(
    id: "58f89fc58bb56c2d11c67534"
    text: "I'll do it later when I get time(!) :worried: "
    sent: "2017-04-20T11:47:17.003Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f89f97cfec919272599014"
    text: {This probably requires a fuller spec in the wiki to specify and explain all, but that's the gist of it}
    sent: "2017-04-20T11:46:31.222Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f89f553e27cac331a7e7d6"
    text: {point is, there's a simple, but radical *and backwards incompatible* change you can make}
    sent: "2017-04-20T11:45:25.401Z"
    editedAt: "2017-04-20T11:48:10.093Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58f89f2e8fcce56b201d0ce9"
    text: {@rebolek but if you change the existing syntax to `[ ( < | a b c | > ) ]` you can actually use it}
    sent: "2017-04-20T11:44:46.813Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f89d9d8bb56c2d11c66b5c"
    text: {Because it is valid Red, it can't be used as new syntax.}
    sent: "2017-04-20T11:38:05.988Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f89d9c881b89e1016b23bc"
    text: {The dark side, you know, uses | as a means of expression separator. But it has low value usage, unless you have variadics ...}
    sent: "2017-04-20T11:38:04.276Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f89d1d12d24099357f516a"
    text: {But it is interesting you can still parse some of it as valid red}
    sent: "2017-04-20T11:35:57.990Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f89ceb881b89e1016b1f47"
    text: "> Affects red syntax all over"
    sent: "2017-04-20T11:35:07.839Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f89cd212d24099357f507f"
    text: "@rebolek yeah, it just maybe too radical :smile: "
    sent: "2017-04-20T11:34:42.919Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f89cbf8fcce56b201d011c"
    text: {```^/>> t: [(<| a b c |>)]^/== [(<| a b c |>)]^/>> reduce t^/== [<| a b c |>]^/>> type? t^/== block!^/>> type? t/1^/== paren!^/>> type? t/1/1^/== tag!^/```}
    sent: "2017-04-20T11:34:23.142Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f89c8bcfec919272597c52"
    text: {This is just an idea I had in mind, for an alternative syntax for `series!` types, thus larger in scope, but readily applicable to `vector!` types}
    sent: "2017-04-20T11:33:31.206Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f89c808e4b63533de807db"
    text: {`[(<| a b c |>)]` - this is `tag!` inside `paren!` inside `block!`.}
    sent: "2017-04-20T11:33:20.745Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f89c1f8e4b63533de806c4"
    text: {After reading what was discussed in red/docs channel, there is the more radical alternative of using something like `(| 2 3 4 5 6|)` for higher dimensional values.^/That is a `block!` or series! type with:^/## Semantics^/ `vector!` :  array with items of fixed size   ^/^/## Syntax^/like `block!`:^/ - Starts with a *bracket character* `[(<` with extra punctuation added `[|` `(((` `<$`^/ - Ends with a mirror of that character sequence `[(<| a b c |>)]` ^/ - Space separated like in blocks (but stricter) `3 + [( 3.2 4.2 )] + 8`^/^/## Pros^/- Cleaner, rebol (forth) like^/- Can be used a general framework to add more types^/^/## Cons^/- Affects red syntax all over, requiring whitespace where it didn't before, e.g.  no more `a:[3 [[4]]]` or `#(2)` but would require `a: [ 3 [ [ 4 ] ] ]` or `#( 2 )`^/- Might be less readable}
    sent: "2017-04-20T11:31:43.748Z"
    editedAt: "2017-04-20T11:31:59.983Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58f88597c1d3b501540192c4"
    text: {```^/   2.3e2 2.3e_2 2j3^/230 0.023 2j3^/^/   2p1 1p_1^/6.28319 0.31831^/^/   1x2 2x1 1x_1^/7.38906 5.43656 0.367879^/^/   2e2j_2e2 2e2j2p1 2ad45 2ar0.785398^/200j_200 628.319j6.28319 1.41421j1.41421 1.41421j1.41421^/^/   16b1f 10b23 _10b23 1e2b23 2b111.111^/31 23 _17 203 7.875^/```}
    sent: "2017-04-20T09:55:35.285Z"
    editedAt: "2017-04-20T09:55:47.818Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58f8857c3e27cac331a779c2"
    text: {Adding to  what I said above  :point_up:  [April 20, 2017 2:28 PM](https://gitter.im/red/red?at=58f87f2a881b89e1016a9d7b)^/`J` has the most convenient style for [numeric constants](http://www.jsoftware.com/help/dictionary/dcons.htm) ^/ (apart from using `_` for negative numbers, which I'm indifferent about)}
    sent: "2017-04-20T09:55:08.196Z"
    editedAt: "2017-04-20T09:58:02.693Z"
    v: 5
    author: "569c37abe610378809bccdff"
) #(
    id: "58f883ba8fcce56b201c90fa"
    text: {@maximvl  In that same page, under [Examples_of_use](https://en.wikipedia.org/wiki/Decimal_mark#Examples_of_use), you can see there are quite a few variations in standard (Switzerland uses both comma and dot!).. I'd prefer one way too }
    sent: "2017-04-20T09:47:38.609Z"
    editedAt: "2017-04-20T09:49:58.515Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58f88392881b89e1016ab3b5"
    text: {@dockimbel as a mathematician, I no more use the comma because it is tricky when writing a list of decimal numbers:^/^/* using `,` as the separator when using symbols: a,b,c,... ^/*  using `;` as the separator when replacing symbols with values: 1,2; 3,3, 5, …^/ ^/International convention using `.` for decimal looks more natural. But, this is only my point of view and maybe this convention could be a revolution for other French citizens. However, other numerical languages like `R`, `python`, `julia`, fortunately use `.` for decimal number... }
    sent: "2017-04-20T09:46:58.961Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58f88294c1d3b5015401873d"
    text: {ok, it says nothing about using full-stop vs comma}
    sent: "2017-04-20T09:42:44.727Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f882708fcce56b201c8c98"
    text: {@maximvl https://en.wikipedia.org/wiki/Decimal_mark#Countries_using_Arabic_numerals_with_decimal_comma}
    sent: "2017-04-20T09:42:08.390Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f881efcfec91927259091f"
    text: {so when I was studying in university we were told about https://en.wikipedia.org/wiki/International_System_of_Units}
    sent: "2017-04-20T09:39:59.161Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f881a48fcce56b201c8aca"
    text: {:smile: I think of it like metric vs imperial units, so I'd tend to agree with you (go metric!)}
    sent: "2017-04-20T09:38:44.639Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f8817c12d24099357ee050"
    text: "well, do we live now or in ancient europe?"
    sent: "2017-04-20T09:38:04.659Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f8815acfec919272590629"
    text: {@maximvl `,` is an old european(?) standard, also in some other countries}
    sent: "2017-04-20T09:37:30.357Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f8812212d24099357edf83"
    text: {correct me if I'm wrong, but `.` as delimiter for integer and fractional part is international standard}
    sent: "2017-04-20T09:36:34.327Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f880c7cfec919272590374"
    text: {@rcqls Thanks, but that means forbidding the comma in numbers, do you think that would be acceptable for our fellow French citizens?}
    sent: "2017-04-20T09:35:03.342Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f87f2a881b89e1016a9d7b"
    text: {Agree with @Oldes pretty much, but that may be because I've never used `,` as decimal point. Also the `x`syntax looks nicer, but one of my use cases would be things like complex numbers and quarternions. How would that work? `3.2e6i+4.2e-7`? }
    sent: "2017-04-20T09:28:10.889Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f87f188fcce56b201c8178"
    text: {@dockimbel +1 for your proposal for `pair!` and above all for `point!`}
    sent: "2017-04-20T09:27:52.109Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58f87dc53e27cac331a7591a"
    text: {One of the nice things about Rebol is the duality between dot and comma for decimal notation. There are plenty countries where the comma is used for decimal notation. }
    sent: "2017-04-20T09:22:13.645Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f87d95c1d3b501540174c2"
    text: {The comma gives a better visual cue than `x` as it sticks out on the bottom, but as I said, the space would be optional on input, but enforced on output. And again, that's how you write coordinates in math, so you can hardly find a more natural syntax.}
    sent: "2017-04-20T09:21:25.411Z"
    editedAt: "2017-04-20T09:22:05.151Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8759e08c00c092a9a743c"
    text: {Hm.. cannot find any language which would colorize it correctly in Gitter:) But I think that if the console would display numbers in different colors, the readability would be better.}
    sent: "2017-04-20T08:47:26.847Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f875428e4b63533de7633a"
    text: "```php^/1.23x45.67x89^/```"
    sent: "2017-04-20T08:45:54.914Z"
    editedAt: "2017-04-20T08:53:31.314Z"
    v: 17
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f87529d32c6f2f09228e6e"
    text: {I never use comma in numbers and we have it as a official national decimal char (I guess). But I'm not sure with the parens. Above looks readable, because it is colorized. Having `(1.23,45.67,89)` is not that good.}
    sent: "2017-04-20T08:45:29.348Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f86f3ff22385553d5b36b4"
    text: {Spaces are optional, but would be enforced on serialization. I would also keep the current pair syntax as possible format on input. The lexer should be able to parse unambiguously such forms (unless I missed something). Moreover, that's how you write coordinates in geometry. What do you think about that?}
    sent: "2017-04-20T08:20:15.113Z"
    editedAt: "2017-04-20T08:27:05.260Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f86ef008c00c092a9a57df"
    text: {Continuing the pair/point syntax discussion from red/docs room, if we decided on giving up the comma in numbers, we could introduce a new syntax which could work for `pair!`, `point!` and even fixed-size vectors of higher dimension:^/```lisp^/(1.2, 3.14159, 456)^/(1.2,3.14159,456)^/```}
    sent: "2017-04-20T08:18:56.950Z"
    editedAt: "2017-04-20T08:23:01.053Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f859c33e27cac331a6ba81"
    text: {I can see the point, but it goes against language philosophy IMO}
    sent: "2017-04-20T06:48:35.221Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8599e8bb56c2d11c54650"
    text: {but Redbol is completely free-form, why should we shove down user's throat some preferred code style?}
    sent: "2017-04-20T06:47:58.104Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f82d97f22385553d5a4029"
    text: {Yep, but it could at least admonish people about coding style}
    sent: "2017-04-20T03:40:07.108Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f8281e3e27cac331a60eef"
    text: {@gltewalt Ability to statically analyze Redbol code is limited. Just distinguishing code from data in general case is a big challenge.}
    sent: "2017-04-20T03:16:46.734Z"
    editedAt: "2017-04-20T03:18:01.089Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f80eed3e27cac331a5be6c"
    text: {"A Ruby static code analyzer, based on the community Ruby style guide"}
    sent: "2017-04-20T01:29:17.107Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f80e788e4b63533de5e5fe"
    text: {@mikeparr @greggirwin Something like rubocop would be sweet to have. Best Ruby tool I encounter when I got reacquainted in April 2016 }
    sent: "2017-04-20T01:27:20.504Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f7eb58ad849bcf429ea51b"
    text: "In essence, a better emacs =)"
    sent: "2017-04-19T22:57:28.281Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f7eb3c8bb56c2d11c3dbe3"
    text: {I think that we should have such a malleable ide that new libs/dialects can alter the ide to properly document, error check, code complete, etc. My idea is not a general approach solution but I do not think that a general approach can be found for dialects.}
    sent: "2017-04-19T22:57:00.817Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f7bd838fcce56b2019ba32"
    text: "@mikeparr I agree, I would use it"
    sent: "2017-04-19T19:41:55.449Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7bd533e27cac331a48811"
    text: {A lint style tool would be a great example, and maybe useful for newcomers. There are a lot of existing words even experts forget about too.}
    sent: "2017-04-19T19:41:07.138Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7a9073e27cac331a42845"
    text: {@maximvl Re the checking of pre-defined word+colon.  Yes, I could write it, but my question was: is it a good idea (and would you want it in a Red IDE?)}
    sent: "2017-04-19T18:14:31.281Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58f77a668fcce56b201874e8"
    text: "I see, thanks for clarification!"
    sent: "2017-04-19T14:55:34.257Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f779f78bb56c2d11c1ccd2"
    text: {For example, if you would define a DSL where you can do maths with units and it would look like this:^/```lisp^/do-units "3000m / 5mn"^/== "10m/s"^/```^/That would qualify as an external DSL. My old [Scheduler](http://softinnov.org/rebol/scheduler.shtml) DSL has a string variant which also qualifies an external DSL.}
    sent: "2017-04-19T14:53:43.008Z"
    editedAt: "2017-04-19T14:55:40.051Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f7781e8bb56c2d11c1c2d0"
    text: {A dialect in Redbol, is equivalent to an "embedded" DSL, it shares the same syntax (it is LOADable) as the main language, but has domain-specific semantics. And "external" DSL has different syntax and semantics (it's string-based and not LOADable).^/^/About the "DO dialect" concept (mentioned in some wikis about Rebol), it has been used by some Rebol3 contributors, but Carl (Rebol's author) never acknowledged such concept (I've asked Carl about that in the Redbol conference in 2013), nor do I. The reason is that a "dialect" derives from a "language", so Red and Rebol are languages, from which dialects are derived. Red can also be considered a dialect of Rebol (a language can be a dialect of some other language).}
    sent: "2017-04-19T14:45:50.469Z"
    editedAt: "2017-04-19T14:47:47.044Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f777373e27cac331a320c1"
    text: {@maximvl I was thinking online playground makes for a good collaborative whiteboard - or can be used for teaching and/or Help}
    sent: "2017-04-19T14:41:59.923Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f774018bb56c2d11c1aaf9"
    text: {Some interesting words about dialect. ^/https://en.m.wikibooks.org/wiki/REBOL_Programming/Language_Features/Dialects}
    sent: "2017-04-19T14:28:17.529Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58f7728a881b89e1016651d2"
    text: {same for `draw`, right? `draw [fill-pen red box 10x10 100x100]` is not Redbol code}
    sent: "2017-04-19T14:22:02.544Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f76f278bb56c2d11c1921f"
    text: {This is the loop macro from common lisp; dialect or dsl?^/```^/(loop^/  for item in list^/  for i from 1 to 10^/  do (something))^/```^/I would say dsl because it does not look like lisp, nor does it operate like lisp.}
    sent: "2017-04-19T14:07:35.833Z"
    editedAt: "2017-04-19T14:07:44.469Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f76d89bdf4acc11274613b"
    text: {Programming languages are like a transmogrified monster of formal and informal languages.}
    sent: "2017-04-19T14:00:41.196Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f76cd6a0e48562421c4425"
    text: {In the programmer community, for some odd reason, we love to make everything vague. We use the same word over and over again, with different meanings. I find it difficult to communicate ideas because function, object, etc, have different meanings depending on the language one thinks in. I always have to derive someones definitions when reading their ideas about programming, even though the vocabulary is the same.}
    sent: "2017-04-19T13:57:42.757Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f76bbbd32c6f2f091e3243"
    text: {I think of dialects as another version of that same language(dialect of lisp) while a dsl is a different language for a specific task(regex).^/^/Because Red has a rich number of data types, and a built in parser, people make dialects more often than dsls.^/^/It is, of course, just semantics.}
    sent: "2017-04-19T13:52:59.249Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f769f03e27cac331a2dd6a"
    text: {ok, makes sense, the `#lang` things in Racket also called dialects}
    sent: "2017-04-19T13:45:20.712Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f769868e4b63533de2f656"
    text: {I was thinking that this is the same thing, but maybe there is something else}
    sent: "2017-04-19T13:43:34.334Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f76975cfec91927254752b"
    text: {@maximvl I think, it is just the same. DSL stands for Domain Specific Language. Redbol has a rather clean and nice form. Not sure about how other language dialects might look like ...}
    sent: "2017-04-19T13:43:17.379Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f76954ad849bcf429c3c89"
    text: "terminology? :)"
    sent: "2017-04-19T13:42:44.032Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f768c8cfec9192725470f7"
    text: {@dockimbel some other languages can do DSLs as well, but Redbol has a concept of `dialect`, what is the key difference between DSL and dialect?}
    sent: "2017-04-19T13:40:24.029Z"
    editedAt: "2017-04-19T13:40:26.368Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f76842ad849bcf429c3605"
    text: "@mikeparr you can write such checker yourself ;)"
    sent: "2017-04-19T13:38:10.595Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f762728e4b63533de2d220"
    text: {> @PDelak Currently, the macro expansion is done at preprocessing stage, while `#include` is process during at compile-time (after preprocessing). This will be changed soon, so that expansion happens at compile-time too (should then be more familiar to Lispers).^/^/Sounds good.}
    sent: "2017-04-19T13:13:22.765Z"
    editedAt: "2017-04-19T13:13:33.225Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f759fe3e27cac331a28f5e"
    text: {@mikeparr I guess these belongs to Red compiler written in Red. Current one is written in Rebol.}
    sent: "2017-04-19T12:37:18.431Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7418dbdf4acc1127397ce"
    text: {I'm just thinking about trivial lint-style checks.  Most of the time, would you wish to be warned about a pre-defined word immediately followed by a colon (as in 'view:' or 'sqrt:') and also '+' immediately before a number (as in '2      +3')  ?  Or would this swamp use with warnings about correct code?  (I know that Red's flexibility is powerful, of course.)}
    sent: "2017-04-19T10:53:01.879Z"
    editedAt: "2017-04-19T10:53:31.485Z"
    v: 2
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58f728ae8bb56c2d11c05a6a"
    text: "but it's not the case for us"
    sent: "2017-04-19T09:06:54.045Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f728a68e4b63533de1d836"
    text: {I can understand that for Java or Haskell it's easier to open online repl than install them on your own machine}
    sent: "2017-04-19T09:06:46.717Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f72880bdf4acc112732c12"
    text: {I actually think that online playgrounds are less convenient for Red, because you can't do things like GUI, files, but in the same time installing/running Red is 1MB single binary}
    sent: "2017-04-19T09:06:08.093Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f728023e27cac331a1b7f2"
    text: {Also there is http://theaigames.com where for getting Red lang, supported someone needs to write a sample bot for any of their games in the language you want to be supported,i.e. in Red, and email it to them and they will look into it.}
    sent: "2017-04-19T09:04:02.101Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f726e8f22385553d55c1f5"
    text: {These services generally use simple reading and writing and maybe console redirection (`<` `>` ) for extracting the output. I think red should be usable?}
    sent: "2017-04-19T08:59:20.453Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f72677881b89e10164fdb3"
    text: {I guess we need IO before we can integrate into other things}
    sent: "2017-04-19T08:57:27.815Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f726728e4b63533de1cd77"
    text: "etc etc"
    sent: "2017-04-19T08:57:22.656Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f7266fd32c6f2f091cf9b9"
    text: "https://code.hackerearth.com"
    sent: "2017-04-19T08:57:19.491Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f726603e27cac331a1afc1"
    text: "http://www.tutorialspoint.com/codingground.htm"
    sent: "2017-04-19T08:57:04.881Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f7265608c00c092a950377"
    text: "codepad.org"
    sent: "2017-04-19T08:56:54.358Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f7264bf22385553d55bf45"
    text: "https://ideone.com"
    sent: "2017-04-19T08:56:43.332Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f726408e4b63533de1cceb"
    text: "https://www.codechef.com/ide"
    sent: "2017-04-19T08:56:32.500Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f726368fcce56b2016f35a"
    text: {BTW there are lots of other online compiler services as well. They support some newer languages as well.  I dunno what are their requirements for adding a new language though. Would be good if someone can search their websites or email them asking about supporting Red lang as well.}
    sent: "2017-04-19T08:56:22.877Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f72505f22385553d55b9f8"
    text: {@dockimbel I am not sure but I don't think that JS implementation is required. Their docs show that the code is executed in a sandbox and the result is returned back, so I think that the current compiler would be good enough.}
    sent: "2017-04-19T08:51:17.144Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f720b18fcce56b2016dd2d"
    text: {@PDelak I don't see any simple workaround for the compiler, though it should be trivial to adjust to make it work from the interpreter. I might give it a look in the next days, just to see how much changes in the compiler are required for that.}
    sent: "2017-04-19T08:32:49.481Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f72075cfec919272533005"
    text: "@geekyi thx for info"
    sent: "2017-04-19T08:31:49.464Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7203e3e27cac331a19986"
    text: {@dockimbel thx. When do you plan to change expansion (next release)? Is there any workaround for that? }
    sent: "2017-04-19T08:30:54.143Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f71ffb8fcce56b2016d9a3"
    text: {@nc-x Does that require to have a JS implementation of the language?}
    sent: "2017-04-19T08:29:47.377Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f6f346ad849bcf429a5579"
    text: {@PDelak red/help channel is a better place to ask for help if you have code. Also you can edit your post within a few minutes of posting if you're not on mobile }
    sent: "2017-04-19T05:19:02.434Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f6f027ad849bcf429a4ae9"
    text: {@PDelak Currently, the macro expansion is done at preprocessing stage, while `#include` is process during at compile-time (after preprocessing). This will be changed soon, so that expansion happens at compile-time too (should then be more familiar to Lispers).}
    sent: "2017-04-19T05:05:43.622Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f6d9f8a0e485624219f0ef"
    text: {Just create a new post with the description of the language and then get that post some votes.}
    sent: "2017-04-19T03:31:04.832Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f6d9cad32c6f2f091bf117"
    text: "https://replit.canny.io/languages-requests"
    sent: "2017-04-19T03:30:18.639Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f6d9c88bb56c2d11bf3a90"
    text: {@gltewalt @greggirwin New language support on repl.it can be requested here.}
    sent: "2017-04-19T03:30:16.122Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f67a40f22385553d535551"
    text: {Remote reactivity would be very cool. Basically pub-sub.}
    sent: "2017-04-18T20:42:40.416Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f679debdf4acc11270b9ed"
    text: "I don't know yet. I've just stumbled onto it. "
    sent: "2017-04-18T20:41:02.869Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f679d1ad849bcf4298aac8"
    text: {Mandelbrot is a nice demo because you can show the Red and /System code side by side to see how similar they are.}
    sent: "2017-04-18T20:40:49.990Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f679a5ad849bcf4298a947"
    text: {@gltewalt, any idea what would be involved? They have some lesser known languages there already, so they might allow it.}
    sent: "2017-04-18T20:40:05.977Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f679248bb56c2d11bdeb71"
    text: {Worth seeing about adding Red as a language, here?^/https://repl.it/}
    sent: "2017-04-18T20:37:56.439Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f6700bf22385553d53236d"
    text: {Reactivity -^/I can envision an application that keeps documents updated and in synch across a network, from a master document. }
    sent: "2017-04-18T19:59:07.766Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f66d4e69a692963ec1e918"
    text: {@maximvl Showing Mandelbrot in Red vs. Red/System is a good demo of speed difference. @greggirwin Did it at Boise Code Camp}
    sent: "2017-04-18T19:47:26.297Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f654168e4b63533ddec398"
    text: "@maximvl thx"
    sent: "2017-04-18T17:59:50.828Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f652e069a692963ec16a6d"
    text: {@greggirwin good to know! I'm thinking of showing how easy cross-compilation is as well}
    sent: "2017-04-18T17:54:40.554Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f652a5d32c6f2f0919e93c"
    text: {@PDelak ok, I have the same problem, we should wait for more experienced people to explain why it's not working :D}
    sent: "2017-04-18T17:53:41.878Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f651c7d32c6f2f0919e559"
    text: {@maximvl, showing cross compiling has gone over really well when I've shown it at talks. I just have a little script that launches compilers in parallel for different platforms. Would be great to have the runtime precompiled for each target, so compiling would be fast. }
    sent: "2017-04-18T17:49:59.776Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f651b608c00c092a91da84"
    text: "I'm including it from other file"
    sent: "2017-04-18T17:49:42.042Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f6519ad32c6f2f0919e4b2"
    text: "file is called graphrt.red"
    sent: "2017-04-18T17:49:14.419Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
)#(
    id: "58f65135ad849bcf4297e77c"
    text: "this is macro file"
    sent: "2017-04-18T17:47:33.637Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f65129881b89e10161c8a6"
    text: "or is this a macro file?"
    sent: "2017-04-18T17:47:21.957Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f65127f22385553d529028"
    text: {@9214, sadly, it was long before my Rebol days, so no dialect. :^^)}
    sent: "2017-04-18T17:47:19.077Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f651198fcce56b2013eaaa"
    text: {@PDelak from what I see your macro named `trivial`, while you are calling `trivialFunction`}
    sent: "2017-04-18T17:47:05.700Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f65104a0e485624217d2cc"
    text: {```^/Red[]^/^/trivialFunction: function[][^/  print "trivialFunction"^/]^/^/trivialVar: 5^/^/#macro trivial: function[]^/[^/  print "hello"^/  return []^/]^/```}
    sent: "2017-04-18T17:46:44.492Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f650d5d32c6f2f0919e1fa"
    text: {@maximvl example of trivial library ```^/Red[]^/^/trivialFunction: function[][^/  print "trivialFunction"^/]^/^/trivialVar: 5^/^/#macro trivial: function[]^/[^/  print "hello"^/  return []^/]^/```}
    sent: "2017-04-18T17:45:57.734Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f650c308c00c092a91d5e8"
    text: {@greggirwin "It's time to dust off my reboL-system dialect" :grin: }
    sent: "2017-04-18T17:45:39.412Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f65087bdf4acc112700744"
    text: {@9214, I did some L-system stuff *looooong* ago. Fun.}
    sent: "2017-04-18T17:44:39.830Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f650138e4b63533ddeac8f"
    text: "of how you define macro and include the file"
    sent: "2017-04-18T17:42:43.850Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f65002d32c6f2f0919dec3"
    text: "@PDelak could you post an example?"
    sent: "2017-04-18T17:42:26.755Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f64fc18fcce56b2013e323"
    text: "@maximvl yes"
    sent: "2017-04-18T17:41:21.575Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f64f378e4b63533ddea99d"
    text: "@PDelak can you access regular words?"
    sent: "2017-04-18T17:39:03.719Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f64f2208c00c092a91cf20"
    text: {@maximvl compiler tells me that macro defined there is undefined}
    sent: "2017-04-18T17:38:42.394Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f64edb8fcce56b2013de64"
    text: {@maximvl  I did include via #include ```#include %./graphrt.red```}
    sent: "2017-04-18T17:37:31.825Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f64e6ead849bcf4297db99"
    text: "how did you include the file?"
    sent: "2017-04-18T17:35:42.680Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f64e56f22385553d5283fd"
    text: "@PDelak which word is undefined?"
    sent: "2017-04-18T17:35:18.053Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f64e218e4b63533ddea47d"
    text: {my gut telling me that you should try `do load %file.red` or simply `do %file.red`}
    sent: "2017-04-18T17:34:25.832Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f64ddd8e4b63533ddea3c4"
    text: "@PDelak include with `load %file.red`?"
    sent: "2017-04-18T17:33:17.022Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f6491069a692963ec13ef8"
    text: {and when i'm trying to use it from other file (after inclusion) compiler report undefined word. Everything works for function. Can someone tell me what's going on?}
    sent: "2017-04-18T17:12:48.969Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f648d5a0e485624217ad7d"
    text: "I have a macro defined in one file"
    sent: "2017-04-18T17:11:49.988Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f64669bdf4acc1126fd8d7"
    text: "@dsgeyser thanks :D"
    sent: "2017-04-18T17:01:29.038Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f63a628e4b63533dde4a01"
    text: {@maximvl Sorry. On mobile. Can't delete. Good luck anyway.}
    sent: "2017-04-18T16:10:10.297Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f638d58e4b63533dde43b3"
    text: "@dsgeyser m?"
    sent: "2017-04-18T16:03:33.928Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f636e3a0e4856242175ffb"
    text: "@maximvl "
    sent: "2017-04-18T15:55:15.132Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f636d469a692963ec0e6ee"
    text: "@maximvl "
    sent: "2017-04-18T15:55:00.397Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f633c5d32c6f2f09195f77"
    text: "I'll check it, yep"
    sent: "2017-04-18T15:41:57.517Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f6318cd32c6f2f0919534f"
    text: "@maximvl what about your Forth Haiku clone?"
    sent: "2017-04-18T15:32:28.862Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f6312269a692963ec0ce1b"
    text: {@maximvl You also have the docs: https://doc.red-lang.org/en/reactivity.html}
    sent: "2017-04-18T15:30:42.525Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f630c4a0e4856242174396"
    text: {@maximvl You can just pick up from my posts and the blog articles for that, and go deeper on what you've mastered so far.}
    sent: "2017-04-18T15:29:08.841Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f630a7881b89e101612fc8"
    text: {hm, inline R/S in Red code? Kinda "yo dawg I heard you like full stacks so now you can write C while in Lisp" :D}
    sent: "2017-04-18T15:28:39.240Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f63060bdf4acc1126f72b7"
    text: {thanks, I believe I just scrolled this post to get to cool gifs :D}
    sent: "2017-04-18T15:27:28.080Z"
    editedAt: "2017-04-18T15:27:42.889Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f6303808c00c092a913f8c"
    text: {http://www.red-lang.org/2016/06/061-reactive-programming.html}
    sent: "2017-04-18T15:26:48.268Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f630308bb56c2d11bc904e"
    text: "not sure what are other points of R/S"
    sent: "2017-04-18T15:26:40.900Z"
    editedAt: "2017-04-18T15:26:42.795Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f63027a0e48562421740a5"
    text: {for the R/S I can make few examples showing speed difference}
    sent: "2017-04-18T15:26:31.691Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f630018bb56c2d11bc8f77"
    text: {@dockimbel I'll check your interview for fullstack idea, is there any explanation of reactivity?}
    sent: "2017-04-18T15:25:53.438Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f62fb708c00c092a913d43"
    text: "eg I will not be able to answer questions"
    sent: "2017-04-18T15:24:39.071Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f62f8dbdf4acc1126f6dc9"
    text: {@dockimbel good list, I'm not sure if I understand these things on the required level:^/* fullstack^/* reactive part^/* Red/System}
    sent: "2017-04-18T15:23:57.964Z"
    editedAt: "2017-04-18T15:24:05.660Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f62f6b69a692963ec0c64b"
    text: "with compilation on Wine and OSX"
    sent: "2017-04-18T15:23:23.419Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62f60f22385553d51f069"
    text: {GUI + parse = L-System or something like that, just simple turtle graphics with a twist, and R/S parts for bottlenecks in drawing operations}
    sent: "2017-04-18T15:23:12.220Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62ed30ed3020c382a9be3"
    text: {@maximvl Some key points you can present: ^/* The fullstack approach: one tool to bind them all.^/* Pervasive use of dialects (DSL)^/* Cross-platform GUI engine^/* Reactive programming^/* VID dialect^/* Parse dialect^/* System programming through Red/System^/* 1MB, single-file toolchain, with full cross-compilation support.^/* Demos: Eve clock live coding, Picosheet, Mandelbrot-fast, ... (just pick what you want from red/code).}
    sent: "2017-04-18T15:20:51.727Z"
    editedAt: "2017-04-18T15:23:13.121Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f62d808e4b63533dde14c6"
    text: {* Lisp roots (something like "Red is a Lisp that everyone deserves"): just show some nifty tricks with code-as-data and macros, but without bindology mind-melting examples... or not?^/* Cross-platform GUI (Wine and MacOS for now), reactivity^/* DSL power^/* Maybe a pinch of R/S^/}
    sent: "2017-04-18T15:15:12.011Z"
    editedAt: "2017-04-18T15:18:15.286Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62c8e8e4b63533dde1078"
    text: "https://wiki.winehq.org/MacOS"
    sent: "2017-04-18T15:11:10.377Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62c5c881b89e101611a0b"
    text: {btw, does wine work on OSX? and OSX examples should be carefully tested, since I got few crashes showing it to my colleagues}
    sent: "2017-04-18T15:10:20.400Z"
    editedAt: "2017-04-18T15:11:10.486Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f62c478fcce56b20133f7e"
    text: {I'll make a draft of features, will post it here for discussion}
    sent: "2017-04-18T15:09:59.443Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f62c3d69a692963ec0b60f"
    text: "wow effect guaranteed"
    sent: "2017-04-18T15:09:49.121Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62c2a69a692963ec0b5c1"
    text: "launch on Wine, then launch on OSX"
    sent: "2017-04-18T15:09:30.407Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62c0bad849bcf42973a8b"
    text: "can you somehow get your hands on OSX?"
    sent: "2017-04-18T15:08:59.473Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62bd0ad849bcf42973941"
    text: "I don't know much about L-system, but we'll see"
    sent: "2017-04-18T15:08:00.618Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f62b88a0e4856242172be2"
    text: {[L-system ?](https://en.wikipedia.org/wiki/L-system)}
    sent: "2017-04-18T15:06:48.828Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62b710ed3020c382a8c1c"
    text: {IMO it would be nice to show some tiny turtle-graphics demo with emphasize on cross platform GUI and parsing}
    sent: "2017-04-18T15:06:25.094Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58f62b6d8e4b63533dde0a5a"
    text: {but I can imagine people will be interested in current state, IO, GC, you know}
    sent: "2017-04-18T15:06:21.142Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f62b4f08c00c092a91267f"
    text: {I want to show some live reactive gui examples for sure}
    sent: "2017-04-18T15:05:51.967Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f62afb08c00c092a91254a"
    text: {maybe there will be someone from Racket church, they might be interested in DSLs and `parse` power}
    sent: "2017-04-18T15:04:27.643Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62a7a0ed3020c382a8772"
    text: {Compiling, Android integration, easy to learn,... }
    sent: "2017-04-18T15:02:18.597Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58f62a59f22385553d51d6c9"
    text: "`()` vs `[]` flamewar :fire:"
    sent: "2017-04-18T15:01:45.895Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62a37d32c6f2f09192f1a"
    text: "and full blown fullstackness"
    sent: "2017-04-18T15:01:11.781Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f62a2e69a692963ec0ac77"
    text: {Lisp roots: homoiconity, macros, iterative approach, etc}
    sent: "2017-04-18T15:01:02.871Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f6280cf22385553d51cae0"
    text: "any ideas on what I should focus on?"
    sent: "2017-04-18T14:51:56.051Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f627e7881b89e101610512"
    text: {in 2 weeks there will be Lisp meetup in Amsterdam, I'm going to make a talk about Red}
    sent: "2017-04-18T14:51:19.438Z"
    editedAt: "2017-04-18T14:51:21.526Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f44652d32c6f2f0911df25"
    text: {@x8x There is a bug there `append/only [any] rule` (your rule keeps growing bigger), it should be `append/only copy [any] rule`. Also, avoiding unnecessary memory allocations is desirable in Core functions.}
    sent: "2017-04-17T04:36:34.846Z"
    editedAt: "2017-04-17T04:37:09.735Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f424f869a692963eb8d87e"
    text: {Running multiple tests, they get slower each time, is it due to the missing GC ?^/```^/  timer [loop 10000 [replace/all {abcdefgh} {c} {z}]]^/0:00:00.196711001 >> [loop 10000 [replace/all "abzdefgh" "c" "z"]] ^/;   "abzdefgh"^/  timer [loop 10000 [replace/all {abcdefgh} {c} {z}]]^/0:00:00.459775001 >> [loop 10000 [replace/all "abzdefgh" "c" "z"]] ^/;   "abzdefgh"^/  timer [loop 10000 [replace/all {abcdefgh} {c} {z}]]^/0:00:00.728943001 >> [loop 10000 [replace/all "abzdefgh" "c" "z"]] ^/;   "abzdefgh"^/  timer [loop 10000 [replace/all {abcdefgh} {c} {z}]]^/0:00:00.996378001 >> [loop 10000 [replace/all "abzdefgh" "c" "z"]] ^/;   "abzdefgh"^/  timer [loop 10000 [replace/all {abcdefgh} {c} {z}]]^/0:00:01.262201 >> [loop 10000 [replace/all "abzdefgh" "c" "z"]] ^/;   "abzdefgh"^/  timer [loop 10000 [replace/all {abcdefgh} {c} {z}]]^/0:00:01.532575 >> [loop 10000 [replace/all "abzdefgh" "c" "z"]] ^/;   "abzdefgh"^/  timer [loop 10000 [replace/all {abcdefgh} {c} {z}]]^/0:00:01.798488 >> [loop 10000 [replace/all "abzdefgh" "c" "z"]] ^/;   "abzdefgh"^/  timer [loop 10000 [replace/all {abcdefgh} {c} {z}]]^/0:00:02.153246 >> [loop 10000 [replace/all "abzdefgh" "c" "z"]] ^/;   "abzdefgh"^/```}
    sent: "2017-04-17T02:14:16.317Z"
    editedAt: "2017-04-17T02:14:41.495Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f424bb0ed3020c3822d646"
    text: {Humm.. well yea it's slower.. not sure what kind of quick test did I do. :worried: }
    sent: "2017-04-17T02:13:15.554Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f404d58fcce56b200b1e62"
    text: {If Doc isn't concerned about the speed hit, or if my test is shown to be bad, I'm all for it. It's beautiful.}
    sent: "2017-04-16T23:57:09.338Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f40492408f90be66c88adc"
    text: {%series-test.red has a small number of `replace` tests. We should add to that. I love the elegance, and new-old features, but a simple test shows it being ~25% slower here. I just did a simple replace in a string. And it takes a lot of iterations to see a difference. }
    sent: "2017-04-16T23:56:02.551Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f3f909bdf4acc11266f991"
    text: {That can be done, I pasted it here for comments as I'm not sure it covers all cases and datatypes}
    sent: "2017-04-16T23:06:49.128Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f3d7d6f22385553d492314"
    text: {@x8x nice one! You should add missing doc strings and make a pull request.}
    sent: "2017-04-16T20:45:10.180Z"
    editedAt: "2017-04-16T20:48:18.419Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f3d412881b89e101583a0a"
    text: {`replace` is missing `/tail` and `/case`, this `parse` based func provide both and is faster:^/```^/replace: func [^/^-series [series!] pattern value^/^-/all /case /tail^/^-/local rule pos^/][^/^-rule: [to pattern change pattern value pos:]^/^-if all [rule: append/only [any] rule]^/^-either case [^/^-^-parse/case series rule^/^-][^/^-^-parse series rule^/^-]^/^-either tail [pos][series]^/]^/^/```}
    sent: "2017-04-16T20:29:06.941Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f396274cb8d0917397426b"
    text: "OK, thanks."
    sent: "2017-04-16T16:04:55.027Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f3960b69a692963eb6faef"
    text: {@greggirwin Not by design, we should probably exclude `percent!` for trig functions.}
    sent: "2017-04-16T16:04:27.324Z"
    editedAt: "2017-04-16T16:04:31.630Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f3948c8e4b63533dd43440"
    text: {@dockimbel, trig functions take `number!`, which contains `percent!`. Is that by design, so tests should exercise it?}
    sent: "2017-04-16T15:58:04.012Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f38626f22385553d47f6ad"
    text: {I think macros would be useful as a hacky way to optimize code too}
    sent: "2017-04-16T14:56:38.603Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f385ff69a692963eb6c563"
    text: {@maximvl  not as hard as you think with dependent types (at least the type checking). I had a rudimentary design of how the interface could look, but wasn't sure how to prototype the implementation (until now). Will try to clean up the code and publish as a gist when I get time..}
    sent: "2017-04-16T14:55:59.836Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f31636ad849bcf428b859b"
    text: {@PDelak It is totally possible to make a typed dialect with inferred types and strict checks before running the code, I would do it myself, but lambda theory is too complex for me right now :)}
    sent: "2017-04-16T06:59:02.083Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f2d4df08c00c092a84e109"
    text: {It is quite easy do checking for some dataytypes such as the numbers manually:^/```text^/>> #macro inc: func [i][either number? i [i: i + 1][i]]^/== func [i][either number? i [i: i + 1] [i]]^/>> inc 1^/== 2^/>> inc #"a"^/== #"a"^/```}
    sent: "2017-04-16T02:20:15.005Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58f2d40c8fcce56b20072804"
    text: {@PDelak You can get Red to perform checks in macros but a script error will be raised if the argument is not of the correct type:^/```text^/>> #macro inc: func [i [number!]][i: i + 1]^/== func [i [number!]][i: i + 1]^/>> inc 1^/== 2^/>> inc #"a"^/*** Script Error: inc does not allow char! for its i argument^/*** Where: inc^/```}
    sent: "2017-04-16T02:16:44.057Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58f28dd1ad849bcf4289e79d"
    text: {ok, thanks. I was just wondering if I can do some checks regarding arguments types inside macros}
    sent: "2017-04-15T21:17:05.835Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f28c1b408f90be66c3b60a"
    text: {Red is first, and foremost, a dynamic language (Rebol was only ever interpreted). If you want compile time checks, just drop down to Red/System and optimize away.}
    sent: "2017-04-15T21:09:47.488Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f28be5f22385553d44e807"
    text: "That will be up to JIT when the time comes."
    sent: "2017-04-15T21:08:53.532Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f28bb708c00c092a840628"
    text: {Make sense. I understand the way chosen by red, but checking such things at compile time would result in better optimized code at runtime}
    sent: "2017-04-15T21:08:07.799Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f28b444cb8d0917393eb0d"
    text: {That is, `a` can refer to any type of value, which could change at any time, so the compiler can't know, until runtime, when `a` is evaluated, what it refers to at any given moment.}
    sent: "2017-04-15T21:06:12.991Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f28b048fcce56b20063b75"
    text: "Does that make sense?"
    sent: "2017-04-15T21:05:08.262Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f28a9cf22385553d44e3fb"
    text: {While Red could catch simple cases like the above, doing it in real programs is a different story.}
    sent: "2017-04-15T21:03:24.722Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f28969a0e485624209f0ca"
    text: {Nope. That's not how Red works. Some checking can be improved, but Red is dynamic and values are strongly typed, not the words (variables) that refer to them.}
    sent: "2017-04-15T20:58:17.214Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f289118bb56c2d11af35a3"
    text: {Hi all^/^/I have two questions. In the following snippet, variable types are not checked at compile time, so error will be thrown at runtime^/^/```^/a: make string! 1^/b: make string! "str"^/^/a + b^/```^/^/Will it be fixed in 1.0?^/^/Are there any plans for compile time reflection?}
    sent: "2017-04-15T20:56:49.428Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f288e3bdf4acc112624419"
    text: {Hi all^/^/I have two questions. In the following snippet, variable types are not checked at compile time, so error will be thrown at runtime^/^/'''^/a: make string! 1^/b: make string! "str"^/^/a + b^/'''^/^/Will it be fixed in 1.0?^/^/Are there any plans for compile time reflection?}
    sent: "2017-04-15T20:56:03.897Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f288bcf22385553d44ddc1"
    text: {@maximvl, blocks are flexible. You can't use integers in path notation that way, but `select` works just fine. ^/```^/>> c: [1 2 3 4]^/== [1 2 3 4]^/>> select c 3^/== 4^/```^/Don't forget `/skip` though, if you need it.}
    sent: "2017-04-15T20:55:24.451Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f2882f8fcce56b20063085"
    text: {@luis-rj, if you can avoid using parens as keys, do so. You could open a request ticket for `put` to support paren values as keys, which would be the cleanest way. Since parens are used in path syntax, using them as keys is just asking for more work and confusion.}
    sent: "2017-04-15T20:53:03.960Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f27c8608c00c092a83d0c2"
    text: {this feature to use block and a key/map store looks strange to me, because you can't use integers as keys:^/```^/>> d: [a 1 b 2]^/== [a 1 b 2]^/>> d/a^/== 1^/>> d/b^/== 2^/>> c: [1 2 3 4]^/== [1 2 3 4]^/>> c/1^/== 1^/```}
    sent: "2017-04-15T20:03:18.100Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f27c3f8fcce56b20060467"
    text: {@luis-rj if it's possible in Rebol probably it's not yet implemented in Red}
    sent: "2017-04-15T20:02:07.895Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f276548bb56c2d11aef102"
    text: {Ups.. firt line must be:^/```^/ b: [(55) hello (66) bye]^/```}
    sent: "2017-04-15T19:36:52.921Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "58f2755e8fcce56b2005ed07"
    text: { ```^/red>> b: [(55) hello (66) [bye]]^/== [(55) hello (66) [bye]]^/red>>  b/(to paren! (55))^/== hello^/red>>  b/(to paren! (66)): to-word "good-bye"^/*** Script Error: cannot set none in path b/(to paren! (66))^/*** Where: catch^/```^/In Rebol this is possible,  how I can change "bye" word in Red ?  }
    sent: "2017-04-15T19:32:46.361Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "58f26db18bb56c2d11aed01b"
    text: " No, just get the kettle with water boiling..."
    sent: "2017-04-15T19:00:01.055Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f268988fcce56b2005bffe"
    text: {https://lobste.rs/s/jajdfm/scheme_even_your_keywords_could_be any fellow Lobster wants to say something about Red/Rebol in this thread? ;)}
    sent: "2017-04-15T18:38:16.467Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f264778fcce56b2005b0e3"
    text: "I'll create an issue :D"
    sent: "2017-04-15T18:20:39.195Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f2646b8bb56c2d11aeb00c"
    text: {Then we need a way to reflect them.  Something to consider though.}
    sent: "2017-04-15T18:20:27.271Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f2644408c00c092a83776a"
    text: "or `words-of tuple!`"
    sent: "2017-04-15T18:19:48.142Z"
    editedAt: "2017-04-15T18:19:54.591Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f263f4408f90be66c324f0"
    text: {@greggirwin yep, but all these things are `datatype!`, maybe we can have a refinement on it, like `tuple!/fields`}
    sent: "2017-04-15T18:18:28.099Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f262b9f22385553d4451f1"
    text: {@mikeparr, FYI, looks like red-by-example doesn't have `email!` in the datatype list.}
    sent: "2017-04-15T18:13:13.719Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f262928bb56c2d11aea8c3"
    text: {@maximvl, from gui-branch room, maybe a special `type-help` func or other tool. `? <type>!` shows values for a given type. Adding properties of each type might be better done elsewhere.}
    sent: "2017-04-15T18:12:34.540Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f249754cb8d0917392fbd6"
    text: "@dockimbel I see, thanks"
    sent: "2017-04-15T16:25:25.197Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58f2494a8e4b63533dcff3e9"
    text: {:point_up: [April 15, 2017 1:00 AM](https://gitter.im/red/red?at=58f1c4f4f22385553d42336a) @sadajana, what encoding is your file using? I've had cases here where Red wasn't happy because the file wasn't UTF-8.}
    sent: "2017-04-15T16:24:42.727Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f23aa8ad849bcf4288adfb"
    text: {@maximvl There are two different realms, Red is very high-level, Red/System is as close to the hardware as C (even closer actually, thanks to its `system/*` instrinsic features). R/S manipulates values which can fit into CPU/FPU registers, while Red handles only boxed values. Typical R/S code runs two orders of magnitude faster than Red code (for the cases where such comparison makes sense). As a rule of thumb, you should use Red by default, and keep R/S only for the most CPU-intensive tasks (see the [mandelbrot-fast.red](https://github.com/red/code/blob/master/Scripts/mandelbrot-fast.red) and [perlin.red](https://github.com/red/code/blob/master/Scripts/perlin.red) scripts as examples). Moreover, R/S requires compilation for now, while Red can run on the interpreter, so you should add the R/S code dependency last (as a last optimization stage), to minimize your development time.}
    sent: "2017-04-15T15:22:16.184Z"
    editedAt: "2017-04-15T15:28:47.544Z"
    v: 9
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f2262269a692963eb23081"
    text: {@dockimbel what is the performance difference between Red and Red/System? How doI find out which code to write in Red and which in R/S?}
    sent: "2017-04-15T13:54:42.396Z"
    editedAt: "2017-04-15T13:54:56.597Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f1f28b8e4b63533dcebf32"
    text: {@PeterWAWood The source files you see in `./red` folder are emitted by Red toolchain for compiling the console (just a temporary trick until we enable compiling sources from memory). They are deleted once the console is compiled. As the previous attempt failed, you see them lying in the folder. I still see no good reason why it would error out like that, though @qtxie might have an idea.}
    sent: "2017-04-15T10:14:35.279Z"
    editedAt: "2017-04-15T10:15:11.056Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1cfd0f22385553d42537f"
    text: {@dockimbel @ralfwenske I downloaded the binary again and put it in a new folder. It ran successfully. The change in the contents of my ```~/.red``` dir may throw some light on the issue:^/^/After the failure:^/```text^/mbp:red peter$ ls ../../../.red^/POSIX.reds^-^-^-engine.red^/auto-complete.red^-^-help.red^/console-2015-4-25-73974^-^-input.red^/console-2015-4-26-36174^-^-red-console.red^/console-2016-6-29-84518^-^-terminal.reds^/crush-2015-4-25-73974.dylib^-wcwidth.reds^/crush-2015-4-26-36174.dylib^-win32.reds^/crush-2016-6-29-84518.dylib^-windows.reds^/crush-2017-4-14-49641.dylib^/```^/^/After successfully running the downloaded binary in a new directory:^/```text^/mbp:Testing peter$ ls ../.red^/console-2015-4-25-73974^-^-crush-2015-4-25-73974.dylib^/console-2015-4-26-36174^-^-crush-2015-4-26-36174.dylib^/console-2016-6-29-84518^-^-crush-2016-6-29-84518.dylib^/console-2017-4-14-49641^-^-crush-2017-4-14-49641.dylib^/```}
    sent: "2017-04-15T07:46:24.303Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58f1cd9f881b89e101514c70"
    text: {@PeterWAWood Peter, could you also try to put the executable into a new folder and see if it runs there? If that works for you too, that might be a good hint for a trouble shooting section if one has difficulties with starting up red.}
    sent: "2017-04-15T07:37:03.471Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1cc2b8bb56c2d11acaaff"
    text: {@dockimbel @ralfwenske I downloaded  and ran ```red-14apr17-3ff52f9``` and got the same error as Ralf.^/^/```text^/$ ./red-14apr17-3ff52f9^/Compiling compression library...^/Compiling Red console...^/*** Compilation Error: argument type mismatch on calling: exec/gui/OS-matrix-transform ^/*** expected: [struct! [^/        header [integer!] ^/        padding [integer!] ^/        x [integer!] ^/        y [integer!]^/    ]], found: [struct! [^/        header [integer!] ^/        padding [integer!] ^/        value [integer!] ^/        _pad [integer!]^/    ]] ^/*** in file: %/Users/peter/.red/red-console.red ^/*** in function: exec/parse-draw^/*** at line: 1894 ^/*** near: [^/    parse-draw DC as red-block! cmd catch? ^/    OS-matrix-pop DC^/]^/```}
    sent: "2017-04-15T07:30:51.813Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58f1ca688fcce56b200399b9"
    text: {@ralfwenske Glad you solved it.^/> Looks like I must have some files somewhere that confuse the compile somehow^/^/Let me know if you find the cause of that (might be the weird way Win10 is redirected some system folders...)}
    sent: "2017-04-15T07:23:20.086Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1ca04ad849bcf42872202"
    text: {@sadajana A Red program needs to start with a Red header (even if empty), that's how the Red toolchain can recognize it:^/```lisp^/Red []^/^/print "hello world!"^/```}
    sent: "2017-04-15T07:21:40.256Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1c7608e4b63533dce40c9"
    text: "Bonne journée from Spain @sadajana :)"
    sent: "2017-04-15T07:10:24.520Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58f1c649ad849bcf4287159d"
    text: "Bonne journée from France :smile: "
    sent: "2017-04-15T07:05:45.186Z"
    v: 1
    author: "58f1c47ed73408ce4f5888b6"
) #(
    id: "58f1c63469a692963eb0ed59"
    text: "sure I'll do that, thanks again for the reply"
    sent: "2017-04-15T07:05:24.179Z"
    v: 1
    author: "58f1c47ed73408ce4f5888b6"
) #(
    id: "58f1c61969a692963eb0ecec"
    text: {@ralfwenske , greetings ! thanks for the prompt reply^/}
    sent: "2017-04-15T07:04:57.319Z"
    v: 1
    author: "58f1c47ed73408ce4f5888b6"
) #(
    id: "58f1c6134cb8d09173914888"
    text: {@sadajana also you might consider using the red/help room for questions like this}
    sent: "2017-04-15T07:04:51.719Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1c57fa0e4856242074b59"
    text: {@sadajana Do you have^/`Red []^/in you first line of your source?}
    sent: "2017-04-15T07:02:23.118Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1c4f9f22385553d423379"
    text: "*** Error: Red header not found!"
    sent: "2017-04-15T07:00:09.799Z"
    v: 1
    author: "58f1c47ed73408ce4f5888b6"
) #(
    id: "58f1c4f4f22385553d42336a"
    text: {Hello, can anyone help on how to resolve this error message ?^/I'm trying to run a red script file in visual studio code with RED extension installed}
    sent: "2017-04-15T07:00:04.221Z"
    v: 1
    author: "58f1c47ed73408ce4f5888b6"
) #(
    id: "58f1c42a8e4b63533dce37cb"
    text: {@dockimbel I just pasted the red-14apr17-3ff52f9.exe into a newly created folder and it works!^/Looks like I must have some files somewhere that confuse the compile somehow - may have to do some cleaning! ^/Sorry to have used up your precious time for this. Thank you.^/Will probably have to think about a cleaner 'Dropbox' setup.}
    sent: "2017-04-15T06:56:42.766Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1c1c5881b89e1015128d1"
    text: {Let me try it on Win10 here... I've download the red executable, put it on the Desktop, the GUI console compiles and runs fine.}
    sent: "2017-04-15T06:46:29.877Z"
    editedAt: "2017-04-15T06:50:38.959Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1c1b3bdf4acc1125f90e4"
    text: "Yes"
    sent: "2017-04-15T06:46:11.718Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1c19f8bb56c2d11ac8cab"
    text: "Is it Win10?"
    sent: "2017-04-15T06:45:51.457Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1c195408f90be66c1029f"
    text: {@dockimbel Nothing outside Windows - Windows might do something? I'd have to look into it}
    sent: "2017-04-15T06:45:41.875Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1c1244cb8d09173913915"
    text: {@ralfwenske Do you have any anti-virus software running?}
    sent: "2017-04-15T06:43:48.401Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1c0d9881b89e1015125b4"
    text: {@dockimbel @PeterWAWood It must have to do with 'Dropbox' mixing some files:^/I just downloaded the latest Mac-red executable into a newly created folder and in compiles and works fine!^/(On windows though with the latest - as reported above - I had no 'Dropbox' involvement)^/I'll look into it a bit more closely...^/^/on windows my checksum is identical and I still get the error about 'update-scroller' not defined.}
    sent: "2017-04-15T06:42:33.050Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1be5e8fcce56b20037847"
    text: {@ralfwenske Could you do a MD5 checksum of your `red-14apr17-3ff52f9.exe` file? Here's what I get here:^/```lisp^/>> checksum read/binary %tests/red-14apr17-3ff52f9.exe 'md5^/== #{6EBFDDE4C8E7A9D3642A2D6DE9284378}^/```}
    sent: "2017-04-15T06:31:58.338Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1be148bb56c2d11ac8176"
    text: {@dockimbel I know and I never do that. It  was just to be sure that everything was fine like a first install….}
    sent: "2017-04-15T06:30:44.945Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58f1bdb0bdf4acc1125f8539"
    text: {You shoudn't have to clean anything in `~/.red`...}
    sent: "2017-04-15T06:29:04.341Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1bd778e4b63533dce23a6"
    text: {@dockimbel Everything is fine on my macOS with `./red-14apr17-3ff52f9` (after cleaning `~/.red`) }
    sent: "2017-04-15T06:28:07.341Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58f1bd548bb56c2d11ac7e68"
    text: {@PeterWAWood on Windows the red-latest.exe (compiled at 10Apr17) is still working.^/here my 'Dropbox folder':^/```^/macmini:red ralfwenske$ pwd^//Users/ralfwenske/Dropbox/red^/macmini:red ralfwenske$ ls^/BSD-3-License.txt^-docs^-^-^-mytests^-^-^-red.r^/BSL-License.txt^-^-environment^-^-quick-test^-^-run-all.r^/README.md^-^-hello.red^-^-red-061.exe^-^-runtime^/boot.red^-^-ide^-^-^-red-14apr17-3ff52f9^-system^/bridges^-^-^-installRedLatest.red^-red-en.pdf^-^-tests^/build^-^-^-lexer.r^-^-^-red-latest^-^-usage.txt^/compiler.r^-^-libRed^-^-^-red-latest.exe^-^-utils^/console-call.exe^-modules^-^-^-red.pdf^-^-^-version.r^/```}
    sent: "2017-04-15T06:27:32.625Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1bd2f8fcce56b200374a9"
    text: {@ralfwenske What is the size of your `red-14apr17-3ff52f9.exe` file in bytes?}
    sent: "2017-04-15T06:26:55.873Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1bbcc8bb56c2d11ac7973"
    text: {@PeterWAWood Can you reproduce those issues above on macOS?}
    sent: "2017-04-15T06:21:00.862Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1bb64f22385553d4219bf"
    text: {@dockimbel That 'Dropbox' folder which contains the mac- as well as the windows- red exectuble is not in the $PATH}
    sent: "2017-04-15T06:19:16.360Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1ba7b69a692963eb0cb61"
    text: {@ralfwenske Is that other red executable accessible from the PATH?}
    sent: "2017-04-15T06:15:23.815Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1ba4b8fcce56b20036cdb"
    text: {Testing again here:^/```lisp^/C:\Dev\Red>red-14apr17-3ff52f9.exe^/Compiling Red GUI console...^/^/C:\Dev\Red>^/```}
    sent: "2017-04-15T06:14:35.934Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1b9c569a692963eb0c9a9"
    text: {... looking at the contents of this folder I am getting another thought: could the fact that I have the red executable in a 'Dropbox' folder which I also used on Windows (2 days ago though) play a role in this?^/}
    sent: "2017-04-15T06:12:21.805Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1b68a8bb56c2d11ac6ae7"
    text: {@dockimbel for completeness ~/.red/  folder after above compile on Mac:^/```^/macmini:red ralfwenske$ ls ~/.red/^/POSIX.reds^-^-^-help.red^-^-^-wcwidth.reds^/auto-complete.red^-^-input.red^-^-^-win32.reds^/crush-2017-4-14-49641.dylib^-red-console.red^-^-^-windows.reds^/engine.red^-^-^-terminal.reds^/```}
    sent: "2017-04-15T05:58:34.967Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1b416dddd87f332d307e8"
    text: {linux version is now running fine (no 'Compiling Red console ...' any more)}
    sent: "2017-04-15T05:48:06.894Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1b1d17b553c707c520fdf"
    text: {found in "Program Data/Red/" this:    crush-2017-4-14-49641.dll}
    sent: "2017-04-15T05:38:25.089Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1b0dc7b553c707c520fdd"
    text: {on Windows:^/```^/C:\Users\Ralf\Desktop\redx>red-14apr17-3ff52f9.exe^/Compiling compression library...^/Compiling Red GUI console...^/*** Compilation Error: word update-scroller not defined in system/view/platform/update-scroller^/*** in file: C:\ProgramData\Red\red-console.red^/*** near: [^/    system/view/platform/update-scroller self (index? in self word) - 1^/]}
    sent: "2017-04-15T05:34:20.837Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1afa48fcce56b20035026"
    text: {```^/^/macmini:red ralfwenske$ ls ~./red/^/ls: ~./red/: No such file or directory^/macmini:red ralfwenske$ ./red-14apr17-3ff52f9 ^/Compiling compression library...^/Compiling Red console...^/*** Compilation Error: argument type mismatch on calling: exec/gui/OS-matrix-transform ^/*** expected: [struct! [^/        header [integer!] ^/        padding [integer!] ^/        x [integer!] ^/        y [integer!]^/    ]], found: [struct! [^/        header [integer!] ^/        padding [integer!] ^/        value [integer!] ^/        _pad [integer!]^/    ]] ^/*** in file: %/Users/ralfwenske/.red/red-console.red ^/*** in function: exec/parse-draw^/*** at line: 1894 ^/*** near: [^/    parse-draw DC as red-block! cmd catch? ^/    OS-matrix-pop DC^/]^/```^/}
    sent: "2017-04-15T05:29:08.605Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1af7d881b89e10150f72b"
    text: {@dockimbel  After downloading again and then also deleting ~/.red ^/on Mac:}
    sent: "2017-04-15T05:28:29.974Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1ac7f8fcce56b20034854"
    text: {@ralfwenske Please download the binaries again and give it a new try.}
    sent: "2017-04-15T05:15:43.744Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1ac154cb8d0917390faab"
    text: {@qtxie ^^--- The red-14apr17-3ff52f9.exe version works fine here... odd errors... @qtxie Are those errors from previous commits? If so, we might have a caching issue on the web server (though, that would be odd too).}
    sent: "2017-04-15T05:13:57.904Z"
    editedAt: "2017-04-15T05:14:55.877Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f1a0baf22385553d41ce18"
    text: {on Mac:^/```^/macmini:red ralfwenske$ sudo chmod +x red-14apr17-3ff52f9 ^/Password:^/macmini:red ralfwenske$ ./red-14apr17-3ff52f9 ^/Compiling Red console...^/*** Compilation Error: argument type mismatch on calling: exec/gui/OS-matrix-transform ^/*** expected: [struct! [^/        header [integer!] ^/        padding [integer!] ^/        x [integer!] ^/        y [integer!]^/    ]], found: [struct! [^/        header [integer!] ^/        padding [integer!] ^/        value [integer!] ^/        _pad [integer!]^/    ]] ^/*** in file: %/Users/ralfwenske/.red/red-console.red ^/*** in function: exec/parse-draw^/*** at line: 1894 ^/*** near: [^/    parse-draw DC as red-block! cmd catch? ^/    OS-matrix-pop DC^/]^/```^/^/anybody else seeing this? }
    sent: "2017-04-15T04:25:30.782Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f1a03c4cb8d0917390d511"
    text: {on Linux:^/```^/ralf@ThinkPad-Edge-E330 ~/Desktop $ ./red-latest ^/Compiling Red console...^/*** Loading Error: file access error: %wcwidth.reds ^/*** in file: %/home/ralf/.red/red-console.red ^/*** at line: 1^/```^/}
    sent: "2017-04-15T04:23:24.696Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f19f57d7ab15e81724f4cf"
    text: {```^/C:\Users\Ralf\Desktop\redx>red-14apr17-3ff52f9.exe^/Compiling Red GUI console...^/*** Compilation Error: word update-scroller not defined in system/view/platform/update-scroller^/*** in file: C:\ProgramData\Red\red-console.red^/*** near: [^/    system/view/platform/update-scroller self (index? in self word) - 1^/]^/```^/^/^/}
    sent: "2017-04-15T04:19:35.339Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f19ec1e3700b1461c94137"
    text: {With latest red I see different compile errors in Windows, Mac and Linux - on Windows:}
    sent: "2017-04-15T04:17:05.488Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "58f128794cb8d091738f6751"
    text: "Put that as a note before any links. "
    sent: "2017-04-14T19:52:25.021Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f122b8881b89e1014f35d2"
    text: {@gltewalt Yes, and I was thinking I misunderstood something...}
    sent: "2017-04-14T19:27:52.584Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f11179ad849bcf4284d58b"
    text: {The thing they are going to run into "immediately" with Parse, is that none doesn't work - and the very first example in the Rebol Guide uses none}
    sent: "2017-04-14T18:14:17.649Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58f11039a0e4856242052070"
    text: {Will organize documentation or write documentation for mentorship. :smile: }
    sent: "2017-04-14T18:08:57.856Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f0f70b8bb56c2d11a9ff6d"
    text: "ty"
    sent: "2017-04-14T16:21:31.849Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58f0f6eb881b89e1014e8b6a"
    text: {FYI, we have opened a Spanish-speaking Red room: https://gitter.im/red/Spanish}
    sent: "2017-04-14T16:20:59.244Z"
    editedAt: "2017-04-14T16:21:08.435Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0c349ad849bcf4283775a"
    text: {@geekyi Your list looks good to me. :clap:  I remember appreciating the many short overviews on rebol.com, giving different perspectives, before I learned Rebol from the Core Manual.}
    sent: "2017-04-14T12:40:41.249Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0bcd608c00c092a7dc372"
    text: "keey playing and having part, yeah"
    sent: "2017-04-14T12:13:10.473Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f0ba0d08c00c092a7db7ad"
    text: {Maybe that can be shortened to:^/1. Read rebol2 intros and api reference^/2. Read red docs^/3. Read about advanced bindology of wikibooks^/And keep playing, rinse and repeat for an year or more till you grok it :D}
    sent: "2017-04-14T12:01:17.039Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f0b98ba0e485624203b0ea"
    text: {:+1: The Documentation page is much better now than what it was when I started^/In general, what I've found helpful to get started is this:^/1. Read a rebol quickstart guide (one of Nick's, or a host of others)^/2. Read rebol.com short guides^/3. Read wikibooks guide and other rebol.com guides^/4. Read red blog posts^/5. Read red official documentation for View, etc^/6. Read advanced section of wikibooks}
    sent: "2017-04-14T11:59:07.814Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f079b308c00c092a7cbf92"
    text: {@geekyi I've just added a link to the Parse blog article and the Parse wikibook to Documentation page on red-lang.org.}
    sent: "2017-04-14T07:26:42.999Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f078a369a692963eac4a27"
    text: "I have to go off now tho.. later.."
    sent: "2017-04-14T07:22:11.055Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f078858fcce56b20feef19"
    text: {I've been looking at online bookmarking and organizing programs for this}
    sent: "2017-04-14T07:21:41.745Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f07864ad849bcf42824ae9"
    text: {"How do you find documentation for X feature"? For someone who doesn't know it}
    sent: "2017-04-14T07:21:08.606Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f0783169a692963eac4863"
    text: {And that is the problem right now, discoverability..}
    sent: "2017-04-14T07:20:17.117Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f0781e8e4b63533dc98bc8"
    text: {"0.4.1: Introducing Parse " blog post is good enough for now, for those who know where to look ;) }
    sent: "2017-04-14T07:19:58.178Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f077ce69a692963eac4700"
    text: {A documentation for red parse extensions, yes :+1:  the wikibooks one is the best I've seen (which I think was taken from somewhere else, but not sure where now)}
    sent: "2017-04-14T07:18:38.343Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f075884cb8d091738c9e64"
    text: "@greggirwin Very glad to hear that. ;-)"
    sent: "2017-04-14T07:08:56.296Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0654569a692963eac0b24"
    text: {As you might guess, I'm reporting things as I work on `format`.}
    sent: "2017-04-14T05:59:33.002Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f064f64cb8d091738c6e4a"
    text: ":^^)"
    sent: "2017-04-14T05:58:14.317Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f064ec8bb56c2d11a7ceff"
    text: {I think that will be an important behavior to note when we do some `parse` docs. }
    sent: "2017-04-14T05:58:04.476Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f064eb8e4b63533dc94c98"
    text: {A Red Parse documentation is really needed, so we can have all the extensions done by Red documented somewhere.}
    sent: "2017-04-14T05:58:03.013Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0649dad849bcf42820913"
    text: {Thanks @dockimbel. I'll note those in the wiki when I get a chance.}
    sent: "2017-04-14T05:56:45.714Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f06446408f90be66bc29f6"
    text: {@geekyi @greggirwin Hmm, my comment above about `keep digit` is not accurate, the root cause of `keep` not capturing in that case, is because the rule failed (input not advancing is a consequence of that).}
    sent: "2017-04-14T05:55:18.658Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0614208c00c092a7c7553"
    text: "Ah sorry, related to #2561 ? I've not updated yet"
    sent: "2017-04-14T05:42:26.224Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f060ca8bb56c2d11a7c21b"
    text: {```^/>> parse series [collect [keep to delim  delim  keep to end]]^/== [#"." #"#"]^/```}
    sent: "2017-04-14T05:40:26.561Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f060be69a692963eabfef5"
    text: "@greggirwin strange, I get different results:"
    sent: "2017-04-14T05:40:14.106Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f044c908c00c092a7c1955"
    text: {See my comments about `keep` with `pick` / `copy` [here](https://github.com/red/red/issues/2295#issuecomment-281655538) and [there](https://github.com/red/red/issues/2391#issuecomment-281655108).}
    sent: "2017-04-14T03:40:57.774Z"
    editedAt: "2017-04-14T03:41:13.403Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0441fad849bcf4281a509"
    text: {The ability for `keep` to capture only if the input advances by default is necessary, otherwise simple cases like the following one would not work as expected:^/```lisp^/digit: charset "012345789"^/parse "h3llo" [collect some [keep digit | skip]]^/== [#"3"]^/```}
    sent: "2017-04-14T03:38:07.517Z"
    editedAt: "2017-04-14T03:42:31.202Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f04399a0e4856242021b34"
    text: {@greggirwin Yes, `keep` won't extract a value if the input position has not moved (that's the case with the `keep to` above). The second case uses `copy s`, so it will generate a series no matter what (even empty series), and `keep` will then be happy to store the value returned by `copy`.}
    sent: "2017-04-14T03:35:53.551Z"
    editedAt: "2017-04-14T03:43:55.017Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eff375ad849bcf42809ba0"
    text: {@dockimbel , is it by design that `keep to` doesn't keep anything in this example?^/```^/>> series: ".#"^/== ".#"^/>> delim: #"."^/== #"."^/>> parse series [collect [keep to delim  delim  keep to end]]^/== [#"#"]^/>> parse series [collect [keep copy s to delim  delim  keep to end]]^/== ["" #"#"]^/```}
    sent: "2017-04-13T21:53:57.251Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efdbf0a0e485624200a377"
    text: {So the first variable seems to specify the format of the data and the second one actually contains it.  That is a very interesting coupling.}
    sent: "2017-04-13T20:13:36.665Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58efcb694cb8d091738a62d7"
    text: "Indeed! Nice."
    sent: "2017-04-13T19:03:05.507Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efcaa108c00c092a7a6bc7"
    text: {This works:^/```^/>> rec: [name last-name] data: ["john" "taylor" "alice" "smith"]^/== ["john" "taylor" "alice" "smith"]^/>> foreach (rec) data [print rec]^/john taylor^/alice smith^/```}
    sent: "2017-04-13T18:59:45.417Z"
    editedAt: "2017-04-13T19:01:07.291Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58efb287bdf4acc112582127"
    text: {```^/>> rec: [name last-name]^/== [name last-name]^/>> data: ["john" "taylor" "alice" "smith"]^/== ["john" "taylor" "alice" "smith"]^/>> fn: function [data][^/[        foreach rec data [print rec]^/[    ]^/== func [data /local rec][foreach rec data [print rec]]^/>> fn data^/john^/taylor^/alice^/smith^/>> rec^/== [name last-name]^/```}
    sent: "2017-04-13T17:16:55.548Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efb1f869a692963ea99ccf"
    text: {If you're not doing this in a function, and using `function` to capture the first `foreach` arg, a not-so-pretty solution is to use a temp word to refer to them. We don't have `protect` yet, to catch unintended changes like this. }
    sent: "2017-04-13T17:14:32.919Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efb03369a692963ea99346"
    text: {I'm getting a different error than you though. Another way around it would be to `do compose [foreach (rec) ...]`}
    sent: "2017-04-13T17:06:59.616Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efafcfb52518ed4d0b80b6"
    text: {It works in Red too, Petr, but `foreach` doesn't capture in Red yet, and something else is going on. ^/```^/rec: [name last-name]^/data: ["john" "taylor" "alice" "smith"]^/foreach :rec data [print name last-name]^/rec^/foreach rec data [print rec]^/rec^/foreach :rec data [print name last-name]^/rec^/```^/`rec` is being changed when not passed as a `get-word!`.}
    sent: "2017-04-13T17:05:19.733Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ef940cb52518ed4d0af63e"
    text: "Maybe some binding trick would work ..."
    sent: "2017-04-13T15:06:52.121Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ef935bf22385553d3a0c8d"
    text: {In R2, using `foreach :rec data [print reduce [name last-name]]`works, but not so in Red}
    sent: "2017-04-13T15:03:55.094Z"
    editedAt: "2017-04-13T15:05:36.828Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ef9353a0e4856242ff4707"
    text: "are you missing a  `:` after name?"
    sent: "2017-04-13T15:03:47.400Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58ef931a8bb56c2d11a4b155"
    text: {```^/>> rec: [name last-name] data: ["john" "taylor" "alice" "smith"]^/== ["john" "taylor" "alice" "smith"]^/>> foreach rec data [print rec]^/john^/taylor^/alice^/smith^/>> foreach rec data [print name last-name]^/*** Script Error: name has no value^/*** Where: print^/```^/}
    sent: "2017-04-13T15:02:50.819Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ef92d6ad849bcf427ed98f"
    text: {Sorry if it was already answered in the past, but - how do I use a referenced block of words for the `foreach`purpose?}
    sent: "2017-04-13T15:01:42.015Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ef7ee1f22385553d39996c"
    text: {@mikeparr Good catch, please open a ticket for that one.}
    sent: "2017-04-13T13:36:33.166Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef7a69f22385553d3981a0"
    text: {@mikeparr true, also created `out.txt` file has some weird encoding issues}
    sent: "2017-04-13T13:17:29.536Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ef78b3ad849bcf427e4ddf"
    text: {Anyone else finding that the standard console hangs (Win 7 0.62) when redirecting 'call' to  a file, as in:^/```^/call/output "dir" %out.txt^/```^/Redirecting to a string works OK.^/}
    sent: "2017-04-13T13:10:11.708Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58ef71768bb56c2d11a40bd2"
    text: "ok, can't wait as usual :D"
    sent: "2017-04-13T12:39:18.322Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ef715369a692963ea85a69"
    text: "the current one I believe"
    sent: "2017-04-13T12:38:43.724Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ef714f4cb8d0917388b944"
    text: {@dockimbel the one which is built into nightly binary}
    sent: "2017-04-13T12:38:39.191Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ef7138ad849bcf427e26a6"
    text: {@maximvl You mean the current GUI console or the new one in `red-console` branch? The current GUI console is Windows-only. It will get replaced by the new one, which is pure Red (no R/S), and will work on all platforms.}
    sent: "2017-04-13T12:38:16.644Z"
    editedAt: "2017-04-13T12:38:59.110Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef70eabdf4acc11256d1d5"
    text: "and it seems there is no option to force it"
    sent: "2017-04-13T12:36:58.042Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ef70dd8e4b63533dc560d5"
    text: {@dockimbel btw the Mac binary doesn't start gui console}
    sent: "2017-04-13T12:36:45.964Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ef55e94cb8d09173883bfb"
    text: {@9214 Taking a ~~blue~~ red :pill: also works. :sunglasses: }
    sent: "2017-04-13T10:41:45.066Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58ef530df22385553d38c9a0"
    text: "@maximvl :+1: ;-)"
    sent: "2017-04-13T10:29:33.155Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef3e12f22385553d387170"
    text: {@maximvl bring him to the ~~dark~~ red side :smiling_imp:}
    sent: "2017-04-13T09:00:02.713Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ef365fa0e4856242fd9ab6"
    text: {just showed it (and couple examples like clock) to iOS dev in my team, he was stunned}
    sent: "2017-04-13T08:27:11.156Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ef362d8fcce56b20f9f4fb"
    text: "gratz for the mac os gui merge! :clap: "
    sent: "2017-04-13T08:26:21.389Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eeeda04cb8d0917386a7fe"
    text: {@Rebol2Red Secure dialect should come in after we get full I/O support, probably in a 0.7.x release.}
    sent: "2017-04-13T03:16:48.598Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eea28508c00c092a758145"
    text: "Wouldn't even boot"
    sent: "2017-04-12T21:56:21.803Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eea26869a692963ea52938"
    text: {Spirit of adventure. I once locked the whole file system down on my first gen iMac by playing with C shell}
    sent: "2017-04-12T21:55:52.754Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ee9df98bb56c2d11a0b18d"
    text: {@Rebol2Red Red i still alpha, there will be security dialect and warnings, but do not expect them now. There is no GC yet, for example.}
    sent: "2017-04-12T21:36:57.642Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ee9af2f22385553d361a42"
    text: "Yep. Maybe it must be revived."
    sent: "2017-04-12T21:24:02.670Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58ee9ac58e4b63533dc20e9f"
    text: {I believe r/w access was a part of some security dialect in Rebol, no?}
    sent: "2017-04-12T21:23:17.774Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ee9a4969a692963ea50654"
    text: "@9214 Did i wake you up? :)"
    sent: "2017-04-12T21:21:13.575Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58ee9a1008c00c092a755f4c"
    text: ":dog: "
    sent: "2017-04-12T21:20:16.446Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ee7690bdf4acc11252dc35"
    text: {Maybe there should be a warning on red-lang.org to not run just any red file because call can delete all your files or do other things to harm you. In rebol there was a warning when a program wants write access. Hope i did'nt wake up some sleeping dogs.}
    sent: "2017-04-12T18:48:48.983Z"
    editedAt: "2017-04-12T18:52:36.770Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58ecc0ff68bee3091f2fdef9"
    text: "@ericguedespinto `ctrl+shift+m` is useful"
    sent: "2017-04-11T11:41:51.970Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ecaae28fcce56b20ef1fe1"
    text: {`keys-of` is an alias of `words-of` especially created to distinguish the usage of such reflector between objects and maps, as they don't have exactly the same properties. As I said, objects have words, maps have keys (which are not necessarily words).}
    sent: "2017-04-11T10:07:30.373Z"
    editedAt: "2017-04-11T10:08:06.797Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ecaade8e4b63533db949b1"
    text: {Thank you. It seems to me that, although the terminology differences make sense, if I can use only one reflector that works on both maps and objects, I will end up using only that one all the time}
    sent: "2017-04-11T10:07:26.177Z"
    v: 1
    author: "58da7a0dd73408ce4f5451ca"
) #(
    id: "58ecaa30bdf4acc1124acd0c"
    text: {even for maps it's the same:^/```^/red>> x: #(1 2 3 4)^/== #(^/    1 2^/    3 4^/)^/red>> words-of x^/== [1 3]^/red>> keys-of x^/== [1 3]^/```}
    sent: "2017-04-11T10:04:32.204Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eca9f3b52518ed4dfe5b6d"
    text: {Anyway, using `words-of` is suggested as it is not only the proper way, but helps understanding what is going on.}
    sent: "2017-04-11T10:03:31.289Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eca9c98bb56c2d1197e46c"
    text: {@ericguedespinto I don't think it will break. Redbol has pragmatic approach to programming and if people use `keys-of`, let them use it. But that's just my interpretation.}
    sent: "2017-04-11T10:02:49.026Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eca8be4cb8d091737cd2dc"
    text: {>> a: make object! [a: "w" b: "e"]^/== make object! [^/    a: "w"^/    b: "e"^/]^/>> keys-of a^/== [a b]^/>> words-of a^/== [a b]}
    sent: "2017-04-11T09:58:22.602Z"
    v: 1
    author: "58da7a0dd73408ce4f5451ca"
) #(
    id: "58eca83ff22385553d2d45b3"
    text: {@dockimbel Thank you for the clarification. Both keys-of and words-of work on objects. Is that intentional or it will break in the future?}
    sent: "2017-04-11T09:56:15.149Z"
    v: 1
    author: "58da7a0dd73408ce4f5451ca"
) #(
    id: "58ec9788b52518ed4dfe0bfa"
    text: "But it just clears the screen."
    sent: "2017-04-11T08:44:56.006Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58ec97798bb56c2d1197955d"
    text: {@gltewalt this works in not gui console: `print "^^[[2J"`}
    sent: "2017-04-11T08:44:41.547Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58ec661b4cb8d091737bc941"
    text: {@ericguedespinto @maximvl Just a remark about terminology, in Red, objects have *words*, maps have *keys*, so `words-of` is the reflector you're looking for.}
    sent: "2017-04-11T05:14:03.436Z"
    editedAt: "2017-04-11T05:14:44.520Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ec360ba0e4856242f0aac6"
    text: "http://stackoverflow.com/a/37778152"
    sent: "2017-04-11T01:48:59.564Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec3592a0e4856242f0a784"
    text: {There's an ansi way to "quit and restart" but I couldn't figure out how with Red }
    sent: "2017-04-11T01:46:58.963Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec34f2408f90be66aacd33"
    text: {That doesn't clear your environment, just the screen. Good answer though.}
    sent: "2017-04-11T01:44:18.246Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ec012d4cb8d091737a7641"
    text: {For Windows:  red --cli^/```^/cls: does [call/console "cls"]^/```}
    sent: "2017-04-10T22:03:25.923Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec00e58fcce56b20eca7dc"
    text: {For Windows: Red GUI console -   clear with CTRL + L}
    sent: "2017-04-10T22:02:13.967Z"
    editedAt: "2017-04-10T22:03:59.874Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec00d3ad849bcf426f664a"
    text: "thanks"
    sent: "2017-04-10T22:01:55.783Z"
    v: 1
    author: "58da7a0dd73408ce4f5451ca"
) #(
    id: "58ec00cd8fcce56b20eca77c"
    text: "@ericguedespinto `keys-of obj`"
    sent: "2017-04-10T22:01:49.331Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ec00bb8e4b63533db6dca7"
    text: {I am trying to get the keys from an object. In Rebol I can do first obj but that does not work in Red. Is there any alternative? obj/keys would be nice}
    sent: "2017-04-10T22:01:31.051Z"
    v: 1
    author: "58da7a0dd73408ce4f5451ca"
) #(
    id: "58ebf1a28e4b63533db697a7"
    text: {Yes.^/^/https://www.atronixengineering.com/downloads^/http://development.saphirion.com/rebol/saphir/}
    sent: "2017-04-10T20:57:06.168Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ebf0c34cb8d091737a2ee1"
    text: {are the Atronix/Saphirion branches available and free? Thanks for the quick response.}
    sent: "2017-04-10T20:53:23.626Z"
    v: 1
    author: "58ddadf3d73408ce4f54fcbb"
) #(
    id: "58ebef9dbdf4acc112480196"
    text: {1. No. Atronix and Saphirion are still working on their respective R3 branches AFAIK. All work has stopped, a long time ago, on R2.^/^/2. No. }
    sent: "2017-04-10T20:48:29.239Z"
    editedAt: "2017-04-10T20:48:55.472Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ebed4abdf4acc11247f5f6"
    text: {2. is there a command to clear all the words in the console - essentially a quit and restart? I couldn't find one in the dictionary.}
    sent: "2017-04-10T20:38:34.076Z"
    v: 1
    author: "58ddadf3d73408ce4f54fcbb"
) #(
    id: "58ebed058bb56c2d11951979"
    text: {1. Is it correct to say that essentially all new work has stopped on Rebol2/Rebol3 and all new development is going into Red?}
    sent: "2017-04-10T20:37:25.759Z"
    v: 1
    author: "58ddadf3d73408ce4f54fcbb"
) #(
    id: "58ebecc8b52518ed4dfb973f"
    text: "two questions:"
    sent: "2017-04-10T20:36:24.402Z"
    v: 1
    author: "58ddadf3d73408ce4f54fcbb"
) #(
    id: "58ebc8a0a0e4856242eedd98"
    text: { @greggirwin great, can't wait to check it out! :)}
    sent: "2017-04-10T18:02:08.735Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ebc4e908c00c092a692993"
    text: {I have spent quite a bit of time on `format` this past week. I have an old `format` func for R2, but am not just porting that directly. It's a big task, going from a large design view down to details of how to make it work best, then zooming back out, along with revisiting old notes on other systems. There are a lot of things to consider, and I imagine it will generate a lot of discussion once I have something out for review.}
    sent: "2017-04-10T17:46:17.093Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eb1254ad849bcf426b3071"
    text: {It seems we nailed down the Mac builds issues (thanks to tremendous help from @x8x), though we are still a reboot away from completion, so keep fingers crossed. ;-)}
    sent: "2017-04-10T05:04:20.914Z"
    editedAt: "2017-04-10T05:04:42.338Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eb121b68bee3091f28e99a"
    text: {@gltewalt Brew is supported, see [those instructions](https://github.com/red/Homebrew-red).}
    sent: "2017-04-10T05:03:23.582Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eb11efbdf4acc112441886"
    text: {@bilbo872 As said by @nc-x, it's a work on progress from @greggirwin, no ETA yet. We plan to support it through a new versatile `format` dialect.}
    sent: "2017-04-10T05:02:39.228Z"
    editedAt: "2017-04-10T05:05:28.364Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eb052568bee3091f28c1b3"
    text: {There was an issue [#1990](https://github.com/rebol/rebol-issues/issues/1990) on it that contained something of a wish list and a proposed function.}
    sent: "2017-04-10T04:08:05.506Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "58eb0482a0e4856242eb77cb"
    text: {@bilbo872 Rebol 3 introduced REWORD. Not the prettiest function if you look at the source but has some interesting features. Some info in [this question](http://stackoverflow.com/questions/14924801/what-is-the-reword-function-in-rebol-and-how-do-i-use-it).}
    sent: "2017-04-10T04:05:22.413Z"
    editedAt: "2017-04-10T04:05:51.841Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "58eaf82a8fcce56b20e82ed8"
    text: "Though @dockimbel would know better about it."
    sent: "2017-04-10T03:12:42.037Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58eaf810ad849bcf426ad9ce"
    text: "I think it would come with the 0.7.0 release."
    sent: "2017-04-10T03:12:16.374Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58eaf7c88bb56c2d1190ddc5"
    text: {@bilbo872  C-like printf formatting "dialect" is currently in early design phase. @greggirwin is working on it AFAIK.}
    sent: "2017-04-10T03:11:04.684Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58eaeeedf22385553d2640d5"
    text: {```^/>> print ["The number is" pi]^/The number is 3.141592653589793^/>> print ["The number is" round/to pi .001]^/The number is 3.142^/```}
    sent: "2017-04-10T02:33:17.890Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eaec158fcce56b20e804ff"
    text: "What would you need it for?"
    sent: "2017-04-10T02:21:09.904Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58eae2ae8bb56c2d11909e46"
    text: {%f12.3 etc. I've checked Rebol 2 and it seems to have never gotten this as a language feature - only partial and messy workarounds are available. Not sure about Rebol 3 or red.}
    sent: "2017-04-10T01:41:02.951Z"
    v: 1
    author: "58ddadf3d73408ce4f54fcbb"
) #(
    id: "58eae2298e4b63533db1ee5f"
    text: {does red support some sort of C-like printf formatting - especially for reals - like}
    sent: "2017-04-10T01:38:49.494Z"
    v: 1
    author: "58ddadf3d73408ce4f54fcbb"
) #(
    id: "58eabc208bb56c2d11902b83"
    text: {Especially if it would handle install of nightly builds it would be nice.}
    sent: "2017-04-09T22:56:32.473Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58eabbf1408f90be66a4e61a"
    text: {Does "brew" install red to MacOS?}
    sent: "2017-04-09T22:55:45.591Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58ea72ea8bb56c2d118f29d1"
    text: "@CodingFiend_twitter, cool!"
    sent: "2017-04-09T17:44:10.170Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ea6f4e08c00c092a63e18b"
    text: {@Rebol2Red, thanks for posting. Nice example of quick data extraction.}
    sent: "2017-04-09T17:28:46.689Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ea616768bee3091f268935"
    text: {by the way, intel added true random numbers to selected chips recently. One of the only useful instructions they have added for a while; most of their newer instructions are solely designed to keep AMD's engineers pinned down for year, as they have crazy mnemonics and nobody uses them. But they did slip in a true random number generator and it is awesome. It  found in the AVX extensions, RdRand is the mnemonic. You can get 16, 32 or 64 bit random numbers. It had a code name of Bull Mountain, and they were so keen on keeping it a secret that most of us users don't even know it is around since Ivy Bridge chips.}
    sent: "2017-04-09T16:29:27.317Z"
    v: 1
    author: "5784aa88c2f0db084a229500"
) #(
    id: "58ea34ddad849bcf426836b6"
    text: {@Oldes It's unrelated, `ref!` is just meant to provide first-class support for `@<word>` forms. In Rebol, it's an `email!`, I think it would be more valuable (for dialects) to have a separate type for such lexical forms.}
    sent: "2017-04-09T13:19:25.132Z"
    editedAt: "2017-04-09T13:20:49.702Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ea0dd8bdf4acc112408b92"
    text: {@dockimbel there is a plan for a new `ref!` datatype. How it will differ to the existing `handle!`?}
    sent: "2017-04-09T10:32:56.560Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58ea0dcaad849bcf4267ae82"
    text: {@mikeparr Yes, this is the expected behaviour the output is appended to the "buffer" that you supply.}
    sent: "2017-04-09T10:32:42.042Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58ea0af98fcce56b20e500ab"
    text: {This line (Windows):^/```^/call/output  %hi-exe.exe %hi-out.txt^/```^/appends to the output file, rather then clearing  it before the first output.  Is this expected?^/}
    sent: "2017-04-09T10:20:41.715Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58ea01ad4cb8d0917372c634"
    text: {How do you feel about Red language support for cloud based dev environment?^/https://c9.io/}
    sent: "2017-04-09T09:41:01.141Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e9fb044cb8d0917372b22b"
    text: {Perhaps it could be used as example in the `code` repository? https://github.com/red/code}
    sent: "2017-04-09T09:12:36.679Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e9f61008c00c092a623dbc"
    text: {@qtxie Will wait and see. I will use my code for now.}
    sent: "2017-04-09T08:51:28.721Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e9f5b6b52518ed4df40128"
    text: "Not in current plans, we would add it maybe. ;-)"
    sent: "2017-04-09T08:49:58.437Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e9f49f4cb8d09173729df5"
    text: "@qtxie Are there plans to make it available?"
    sent: "2017-04-09T08:45:19.392Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e9f45308c00c092a62394d"
    text: {For now, we have this random function in Red/System and you cannot use it in Red.(Unless you use Routine!)}
    sent: "2017-04-09T08:44:03.842Z"
    editedAt: "2017-04-09T08:45:14.105Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e9f4474cb8d09173729d20"
    text: {@qtxie You mean by exposing that it is not available at the console?}
    sent: "2017-04-09T08:43:51.896Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e9f40708c00c092a623832"
    text: {It depends what you want, after all it's not true random, if you really want true random, then your code would be useful.}
    sent: "2017-04-09T08:42:47.712Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e9f357ad849bcf4267577b"
    text: {@qtxie ^/So there is no need for this true random generator?^/What do you mean by expose it in red layer? }
    sent: "2017-04-09T08:39:51.697Z"
    editedAt: "2017-04-09T08:43:03.345Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e9f24fa0e4856242e7d237"
    text: {@Rebol2Red We use [cryptographically random](https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator) internally in the Red runtime. It is far more random than the data generated by the typical random number generator. Maybe we can expose it in Red layer.}
    sent: "2017-04-09T08:35:27.413Z"
    editedAt: "2017-04-09T08:37:46.320Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e9e724b52518ed4df3d2f0"
    text: {@iArnold @greggirwin About documentation you may have a look at ^/http://www.freebasic.net/wiki/wikka.php?wakka=DocToc and http://www.freebasic.net/wiki/wikka.php?wakka=CatPgFullIndex}
    sent: "2017-04-09T07:47:48.567Z"
    editedAt: "2017-04-09T07:48:34.171Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e9df218e4b63533dae8bdb"
    text: {Just a contribution. Maybe someone have good use for it.^/^/^/GET TRUE RANDOM NUMBERS FROM RANDOM.ORG ^/^/RANDOM.ORG offers true random numbers to anyone on the Internet. ^/The randomness comes from atmospheric noise, which for many purposes ^/is better than the pseudo-random number algorithms typically used in ^/computer programs. ^/^/From faq:^/^/Q1.3: Can I download the generator software and run it on my own ^/computer?^/^/No. It's not just the software you'd need, but also three radios ^/(or one, at any rate), which must be carefully adjusted to pick up ^/atmospheric noise at the right volume. It's not completely trivial ^/to set up.^/^/Q1.5: Will RANDOM.ORG be around in X years?^/^/Probably, depending on your value for X. We have run the service ^/since 1998 with no real interruptions, and it is more popular than ^/ever.^/^/Read https://www.random.org^/^/There is also a lottery picker^/If you win something with it you may share it with me :)^/```^/get-random-numbers: func [^/^-numbers "max 10,000" ^/^-s "max 1,000,000,000" ^/^-e "max 1,000,000,000" ^/^-/local result dest^/][^/^-result: copy [] dest: copy []^-^/^-thepage: to url! rejoin[{https://www.random.org/integers/?num=} numbers {&min=} s {&max=} e {&col=1&base=10&format=html&rnd=new}]^/^-page: read thepage ; https://www.random.org/integers/?num=100&min=1&max=100&col=100&base=10&format=html&rnd=new^/^-parse page [thru {<pre class="data">} copy dest to {</pre>}]^/^-replace/all dest {^^/} { }^/^-foreach item split trim dest { } [^/^-^-append result to integer! item^/^-]^/]^/^/; fetch 100 random numbers from 0 to 10^/randomlist: get-random-numbers 100 0 10 ^/probe randomlist^/print randomlist/1^/^/; fetch 50 random numbers from 22 to 33^/randomlist: get-random-numbers 50 22 33 ^/probe randomlist^/print randomlist/1^/```}
    sent: "2017-04-09T07:13:37.336Z"
    editedAt: "2017-04-09T07:21:35.610Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e90c240e4137042af733d6"
    text: {Ah, got it. You could have a link to a blog entry and a short list of keywords we extract manually.}
    sent: "2017-04-08T16:13:24.748Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e90a1c08c00c092a5f4704"
    text: {@greggirwin I meant, e.g. that looking for date!  with a search, you might get results such as 'will be in the next release!' and other results that you don't want.}
    sent: "2017-04-08T16:04:44.732Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58e9084108c00c092a5f410f"
    text: {A Resources section would be great @mikeparr. Not sure what you mean about keyword search though.}
    sent: "2017-04-08T15:56:49.659Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e8f9764cb8d091736f67fa"
    text: {Somehow collected per subject. The blog articles are very good, but they are just scratching the surface, they are not documentation, and the documentation is great but that lacks examples. Red-by-example should be able to fill the gap between both,using the available info plus experience.}
    sent: "2017-04-08T14:53:42.883Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e8a0f48bb56c2d1188f2b7"
    text: { I'm planning to put some of the 0.62 types, words in Red-By-Example.  I also wondered about creating a table-of-contents - perhaps a screen or 2 in length - of the red-lang.org stuff.   Personally, I use this material, but a keyword search is not the best route to what I want.  Any thoughts?}
    sent: "2017-04-08T08:36:04.448Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58e864388bb56c2d11883412"
    text: {Now I just need to figure out a way to post screenshots from Gitter android.. }
    sent: "2017-04-08T04:16:56.978Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e86409f22385553d1dce17"
    text: {Sketchware is a similar standalone app which uses the scratch programming language by Alan kay}
    sent: "2017-04-08T04:16:09.481Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e8638f8e4b63533da97962"
    text: {@fergus4 I'd tried that out too.. One of the easiest ways to make android (and iOS) apps I've seen. Looks like it's done by the same guys from eclipse? Might be useful for @dockimbel.. The layout syntax, while JavaScript, is pretty terse like rebol. One mode of development is possible using just the app on an android device. The only thing better I've seen is sketchware. }
    sent: "2017-04-08T04:14:07.202Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e7926868bee3091f1cb794"
    text: {where `[data: here]` are data in following format:^/```^/[^/^-Accept: "application/json"^/^-Authorization: "..."^/]^/```}
    sent: "2017-04-07T13:21:44.469Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e791fc8e4b63533da644cd"
    text: {@AlexanderBaggett `write/info link [POST [data: here]]`}
    sent: "2017-04-07T13:19:56.577Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e78d4aad849bcf425ed73b"
    text: {how to do make an http post request in red? I saw someone on stackoverflow say it could be done. Can someone show a minimal example?}
    sent: "2017-04-07T12:59:54.057Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58e6ad8b8fcce56b20d91223"
    text: {This is the main room most new people come to, but for those with questions, or just for extra chat and info, check out https://gitter.im/red/help  and https://gitter.im/red/red/welcome as well. }
    sent: "2017-04-06T21:05:15.228Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6796c08c00c092a556395"
    text: {My js framework of choice (enyojs) is moving to React based core...not my cup of tea...but I need something to hold me over till Red is 1.0. I stumbled upon tabris.js. It's a javascript app dev framework that uses bridges to connect to ios and android ui similar to what red is doing. thought some might be interested. Seems  you are locked into their online dev sdk. Their is a free level but if you need more its $50 per month. Not avail on mac.}
    sent: "2017-04-06T17:22:52.000Z"
    v: 1
    author: "556af11b15522ed4b3e13239"
) #(
    id: "58e65457b52518ed4de69afa"
    text: {Didn't realize you could download adb standalone now, for me, it's around 7MB on windows}
    sent: "2017-04-06T14:44:39.262Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e65417b52518ed4de699e6"
    text: {> The bundle—which is available for Windows, Mac, and Linux—clocks in at around 3.7MB, a far cry from the 1.6GB SDK.}
    sent: "2017-04-06T14:43:35.059Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e653acb52518ed4de69840"
    text: {http://www.greenbot.com/article/3155115/android/google-encourages-android-tinkerers-with-standalone-downloads-of-adb-fastboot.html}
    sent: "2017-04-06T14:41:48.563Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e5df498bb56c2d117dba6c"
    text: {@Gwarks It looks like it segfaults in `redClose()` call. Could you put some printfs around that call to confirm it? Do you know how to use `gdb`? If not I can give you some instructions for extracting some info about that crash.}
    sent: "2017-04-06T06:25:13.769Z"
    editedAt: "2017-04-06T06:26:18.232Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e58151b52518ed4de34d02"
    text: {Interesting live data feed and contest: https://www.satori.com/?campaign_tier1_value=796988604&campaign_tier2_value=41497077076&campaign_tier3_value=189629348524&cp_value1=kwd-28010887184&cp_name2=b&device=c&cp_name1=search&partner=google_search}
    sent: "2017-04-05T23:44:17.121Z"
    v: 1
    author: "5581b27015522ed4b3e20ee8"
) #(
    id: "58e535c50e4137042ae8312b"
    text: {I always use automated build for the official red exe. I was bitten by the "stable" early on - I can't remember the issue, but since then I've used the automated build}
    sent: "2017-04-05T18:21:57.774Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e52725f22385553d10a096"
    text: {Agree with @greggirwin about more releases.. Not too close together for maximum exposure.. Most people here use nightly builds or compile from source right? (tell me if I'm wrong) }
    sent: "2017-04-05T17:19:33.532Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e5246a408f90be668fe3e1"
    text: {When running test this is my output is very similar except the end^/```^/redOpen done^/o_b: o/b^/a: [42 "hello"]^/42^/"hello"^/42 hello^/make error! [^/    code: none^/    type: 'syntax^/    id: 'invalid^/    arg1: 'value^/    arg2: "$%$"^/    arg3: none^/    near: none^/    where: 'do^/    stack: -158920280^/]^/%/home/lee/Projekte/RedScreen/^/0.6.2^/99.0^/add called! 2 3^/5^/routine [[extern] a [integer!] b [integer!]] none^/o_b: o/b^/o/b^/o/b/2^/#"e"^/123^/^/*** Runtime Error 1: access violation^/*** at: F771D331h^/```}
    sent: "2017-04-05T17:07:54.929Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e51ebb8fcce56b20d253f1"
    text: {I think iOS will be the big draw on the Apple side. A lot of devs switched to Mac when it became "Unix Inside", so the bait will be the GUI, then they'll find a nice tool for server use as well.}
    sent: "2017-04-05T16:43:39.270Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e5185608c00c092a4f71fe"
    text: {mac gui would bring us more developers who use mac, which is quite a lot}
    sent: "2017-04-05T16:16:22.686Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e507238fcce56b20d1d65a"
    text: {+1 Plus it would save pointing people over to the macGUI branch.}
    sent: "2017-04-05T15:02:59.819Z"
    editedAt: "2017-04-05T15:03:58.279Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e503a4f22385553d0fe341"
    text: {:point_up: [April 5, 2017 4:39 AM](https://gitter.im/red/red?at=58e4c95f8fcce56b20d09d04) More releases allows for more public announcements and more *perceived* momentum.}
    sent: "2017-04-05T14:48:04.657Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e4fba07ea420cc423e59bd"
    text: "@dockimbel It works now fine again, cool!"
    sent: "2017-04-05T14:13:52.383Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4fa72408f90be668f07c1"
    text: "I am going to try it now."
    sent: "2017-04-05T14:08:50.416Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58e4fa56ad849bcf4253f103"
    text: {I know, I just noted Doc's remark towards Rebolek: "Does it run fine now for you?" , but most probably he referred to something else then ...}
    sent: "2017-04-05T14:08:22.887Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e4f2e5b52518ed4de0a18b"
    text: {@pekr ^/> The new `red-console` should run fine interpreted, until qtxie fixes it for compilation.}
    sent: "2017-04-05T13:36:37.061Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58e4e97f08c00c092a4e7fa4"
    text: {@dockimbel I am on phone now, Iwill let you know in about an hour}
    sent: "2017-04-05T12:56:31.865Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4d99cf22385553d0f0340"
    text: {```^/Compiling c:\!Red\red-red-console\environment\red-console\red-console.red ...^/*** Red Compiler Internal Error: Script Error : clear expected series argument of type: series port bitset none^/*** Where: comp-path^/*** Near:  [insert clear last output compose]^/```^/}
    sent: "2017-04-05T11:48:44.569Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e4d98bad849bcf4253437f"
    text: {Not sure we talk the same thing (sorry, replying from a meeting), but tried to compile qtxie's red-console.red, and got following:}
    sent: "2017-04-05T11:48:27.678Z"
    editedAt: "2017-04-05T11:49:25.640Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e4d8558e4b63533d9ac163"
    text: {@Gwarks This is what I get using your command-lines for compiling it:^/```lisp^/dk@ubuntu:~/Desktop/red/tests/libRed$ gcc -o test.o -c -m32 test.c^/dk@ubuntu:~/Desktop/red/tests/libRed$ gcc -o test -m32 -Wl,-R -Wl,. test.o -L. -lRed^/dk@ubuntu:~/Desktop/red/tests/libRed$ ls^/libRed.dll  libRedTest.c   README.md  test    test.o^/libRed.so   libRedTests.c  red.h      test.c  test.xlsm^/dk@ubuntu:~/Desktop/red/tests/libRed$ ./test^/redOpen done^/o_b: o/b^/a: [42 "hello"]^/42^/"hello"^/42 hello^/make error! [^/    code: none^/    type: 'syntax^/    id: 'invalid^/    arg1: 'value^/    arg2: "$%$"^/    arg3: none^/    near: none^/    where: 'do^/    stack: -160235096^/]^/%/home/dk/Desktop/red/tests/libRed/^/0.6.2^/99.0^/add called! 2 3^/5^/routine [[extern] a [integer!] b [integer!]] none^/o_b: o/b^/o/b^/o/b/2^/#"e"^/123^/```}
    sent: "2017-04-05T11:43:17.711Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e4d7ecf22385553d0efac9"
    text: "@rebolek Does it run fine now for you?"
    sent: "2017-04-05T11:41:32.188Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e4d5690e4137042ae64088"
    text: { @dockimbel i wasn't able to make it work with cca 3 days old sources}
    sent: "2017-04-05T11:30:49.074Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4d09c408f90be668e3150"
    text: {@Oldes The new `red-console` should run fine interpreted, until @qtxie fixes it for compilation.}
    sent: "2017-04-05T11:10:20.612Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e4d03a0e4137042ae62799"
    text: {@Gwarks I just retested and it works fine from here (Ubuntu 16.04 64-bit), using:^/```lisp^/ gcc tests/libRed/test.c -m32 -L ./ -lRed -Wl,-rpath='${ORIGIN}' -I ./libRed -o libRed-test^/```^/You can send me the binary file you compiled, along with your libRed.so version, so I can test it locally.}
    sent: "2017-04-05T11:08:42.971Z"
    editedAt: "2017-04-05T11:11:44.783Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e4ce8dad849bcf42530b5e"
    text: "@Oldes not yet, AFAIK"
    sent: "2017-04-05T11:01:33.871Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e4cbed408f90be668e1d81"
    text: {I know.. I was trying.. and it looks @dockimbel already pushed fix on the master branch, but was not used in any public version with red-console when I checked last time.}
    sent: "2017-04-05T10:50:21.852Z"
    editedAt: "2017-04-05T10:50:45.888Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58e4cbb58e4b63533d9a870c"
    text: {@Oldes if you mean the new View based one, it's not possible.}
    sent: "2017-04-05T10:49:25.268Z"
    editedAt: "2017-04-05T10:49:41.206Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4ca4568bee3091f10e88a"
    text: {you mean a gui console? or the new View based one?}
    sent: "2017-04-05T10:43:17.059Z"
    editedAt: "2017-04-05T10:43:40.194Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e4ca31408f90be668e1748"
    text: {Is it already possible to compile Red-console in some branch?}
    sent: "2017-04-05T10:42:57.188Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58e4c95f8fcce56b20d09d04"
    text: {@maximvl I'm waiting for Mac GUI branch to land on master to make a review of the all the features we want to put in 0.6.3 with @qtxie. There are some extra features I want to get done on the GUI backends and the new console engine. We could release both together or split it into two versions, it is not decided yet.}
    sent: "2017-04-05T10:39:27.342Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e4c53968bee3091f10d194"
    text: {We just got 6.2, aren't you a bit impatient? :-) Well, watch Trello ....}
    sent: "2017-04-05T10:21:45.821Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e4c249408f90be668df4b1"
    text: "@dockimbel how far are we from 6.3? :)"
    sent: "2017-04-05T10:09:13.514Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e4b495408f90be668db65e"
    text: {@Gwarks Did you build libRed using `red build libRed`?}
    sent: "2017-04-05T09:10:45.923Z"
    editedAt: "2017-04-05T09:11:02.162Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e4b4698fcce56b20d0431b"
    text: "@dockimbel No they seem to be all avaible"
    sent: "2017-04-05T09:10:01.679Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e4b128ad849bcf42528c68"
    text: {@Gwarks Does `ldd libRed.so` give you any missing dependency?}
    sent: "2017-04-05T08:56:08.848Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e4af6c7ea420cc423cefe0"
    text: {@dockimbel ^/i compiled test.c with^/```^/gcc -o test.o -c -m32 test.c^/gcc -o test -m32 -Wl,-R -Wl,. test.o -L. -lRed^/```^/still got same error}
    sent: "2017-04-05T08:48:44.911Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e49d8e0e4137042ae54f0d"
    text: {@tanstaaf1 Just porting my old MySQL driver to Red (it was less than 20KB in source form).}
    sent: "2017-04-05T07:32:30.877Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e49b204cb8d091735dc90e"
    text: {@Gwarks What command-line options are you using for compiling your code? Does compiling `%tests/libRed/test.c` and running it with libRed work for you?}
    sent: "2017-04-05T07:22:08.398Z"
    editedAt: "2017-04-05T07:22:30.480Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e486be0e4137042ae4f8d8"
    text: {@dockimbel I used Debian Stretch, c and gcc. I tested it with red-062 and red-03apr17-266c83a}
    sent: "2017-04-05T05:55:10.350Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e4776d4cb8d091735d4846"
    text: {I think it is about the protocol (scheme). You can look here for inspiration: http://softinnov.org/rebol/mysql.shtml}
    sent: "2017-04-05T04:49:49.626Z"
    editedAt: "2017-04-05T04:50:32.200Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e476de8e4b63533d99357d"
    text: {@dockimbel In trello I/O support says "mysql:// (if time permits, else in 1.x)" assigned to you.   Having just withdrawn my request for sqlite as too complicated I am curious what to make of mysql I/O support?   What do you have in mind?}
    sent: "2017-04-05T04:47:26.372Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58e41dad68bee3091f0e6d09"
    text: {@tanstaaf1 During the Cabal era, Haskell was notorious for dependency hell (it's supposedly much better now thanks to Stack). Other languages fare far better (Elm, Rust, etc...).}
    sent: "2017-04-04T22:26:53.580Z"
    editedAt: "2017-04-04T22:31:56.103Z"
    v: 3
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e41a8e0e4137042ae37ee2"
    text: {@ZenoArrow, @greggirwin Well, the file format seems well specified - but also much more complicated than I'd hoped: https://www.sqlite.org/fileformat.html.  I'm going to try and find some well written C code to see if there is a straightforward way - ideally something with straightforward logic to copy.  Otherwise, and until then, I'll shelf my suggestion.  Maybe the red module system will be like a dream come true, but in general I seldom find software contingencies that easy to resolve (it's not my job to stay up with kinky software requirements, I'm supposed to be running companies).  I'll long remember the nightmare of installing haskell + code editor + yesod framework; took me 3 days to find all the hidden secrets of even getting things to run on canned code before I gave up.  "Things should be as simple as possible, and no simpler" I think Einstein said.  Or was that the quote @JacobGood1 called me on before...?}
    sent: "2017-04-04T22:13:34.312Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58e40600f22385553d0bed02"
    text: {@tanstaaf1 Connection to SQL databases would be useful, but I'd prefer to see it included as an optional module rather than something built in. IIRC the plan is to have a module system for Red version 0.8.0.}
    sent: "2017-04-04T20:45:52.162Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e3e70ff22385553d0b514c"
    text: {https://medium.com/message/everything-is-broken-81e5f33a24e1  Forgive me if not directly red related, but *indirectly* very much related. Eventually I believe there will be major consequences to the accretion of complexity -- and eventually a backlash. Red should be just about perfectly positioned when that day comes. }
    sent: "2017-04-04T18:33:51.077Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58e3d42c8fcce56b20ccbcbf"
    text: {I completely agree that small databases cover most needs. I'll go further and say that SQLite's file format is overkill for most of those.}
    sent: "2017-04-04T17:13:16.240Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e3d39b4cb8d091735ac014"
    text: "https://www.sqlite.org/fileformat2.html"
    sent: "2017-04-04T17:10:51.270Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e3d1568e4b63533d9696f9"
    text: {@greggirwin I should think not, but I confess I don't know.   I will try to find a file format description and make it available for you red gurus to consider.  If it is pretty straightforward maybe it can be added without too much effort.  I'm pretty sure it would make for huge bragging rights - as well as quite practical.  For really quite small databases (which I'm guessing make up 80%+ of all the databases created by causal or personal users) this might be all that is needed for a full app.  At least it would get things started.  As I said, if you really need to use full SQLite capability you install SQLite and learn how to interact with it.  But this would probably be good enough for 80%+ of use cases and certainly to get things rolling.}
    sent: "2017-04-04T17:01:10.502Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58e3cf250e4137042ae2155f"
    text: {I expect, with 0.7.0 (or later), many database drivers might be created. But I am too not for the inclusion of some data storage in the official distro, unless it is based upon some abstracted concept, as there was RIF (Rebol Indexed Files) discussed in the past ...}
    sent: "2017-04-04T16:51:49.748Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e3ce9d4cb8d091735aa625"
    text: {I guess I don't see the value in a complex, binary format, if we basically have to reimplement SQLite to use it. I *do* think it will be good to recreate some things in a full Red stack, to see how they might be done (e.g., native 0MQ, zip).}
    sent: "2017-04-04T16:49:33.637Z"
    editedAt: "2017-04-04T16:50:32.235Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e3cdfc4cb8d091735aa1fb"
    text: {@tanstaaf1, the code to do that may not be huge, but the effort will be significant, yes? }
    sent: "2017-04-04T16:46:52.948Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e3cd56408f90be668a179b"
    text: {Well, as time goes by, we might need the bindings group to not flood this channel ....}
    sent: "2017-04-04T16:44:06.634Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e3cd4b8e4b63533d967fc5"
    text: {@greggirwin I'm not arguing for including SQLite query functionality - only native support for the file format.  Read and write in the database in toto.   Then red's existing facilities take over if I insist on searching it.  This could be useful for recording state of an app, in addition to just getting a foot in the door.  It would be cool -- and not very expensive I wouldn't think.}
    sent: "2017-04-04T16:43:55.068Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58e3cd417ea420cc423946a1"
    text: {One gfx app uses lightning DB - https://en.wikipedia.org/wiki/Lightning_Memory-Mapped_Database}
    sent: "2017-04-04T16:43:45.237Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e3cc8268bee3091f0ce963"
    text: {What was also done in the past, was BTN (better than nothing) driver for R2, which was mostly wrapping sqlite.exe into scheme, using `call`. Maybe similar aproach could be used - wrapping the sqlite.exe, parsing results ....}
    sent: "2017-04-04T16:40:34.582Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e3cc448e4b63533d9679e8"
    text: {Kaj did some SQLite driver, it was done using Red/System IIRc, but not sure how useful/functional the wrapper is.}
    sent: "2017-04-04T16:39:32.343Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e3cc1db52518ed4ddbdd79"
    text: {Btw - there is SQLite 4, but not sure what is its future compared to default version. It is more of a storage engine. Kind of how Ashley rewrote RebDB - https://sqlite.org/src4/doc/trunk/www/design.wiki}
    sent: "2017-04-04T16:38:53.325Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e3cbeaf22385553d0acb83"
    text: {I like how small it is in comparison to old big  corporate databases. And although I use quite a lot plain data files, there are cases where more robust solution is better... still without need to install these fat db engines.}
    sent: "2017-04-04T16:38:02.323Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58e3cabf408f90be668a0954"
    text: {I would like to have SQLite binding as I would have usage for it already. Does anybody started work on it?}
    sent: "2017-04-04T16:33:03.692Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58e3c9fc0e4137042ae1f50c"
    text: {@tanstaaf1, certainly someone can do that, but I'm not sure it's a good fit as a native part of Red. Not that SQLite is bad in any way. Having an interface to it will be great, but including SQLite itself will add ~500K at *minimum*. ^/^/As Red apps grow in sophistication, its value may grow as well, but we can do a lot with just the native features we have (`save/load`), and if we get a simple indexing system, we can do even more. ^/^/If you build it, and people love it, you have leverage for future inclusion. }
    sent: "2017-04-04T16:29:48.977Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e3c00768bee3091f0ca960"
    text: {https://www.sqlite.org/appfileformat.html makes the case for ^/SQLite As An Application File Format.   I think this would be a big win for red as it would do more than anything else I can think of to complete the case it being "batteries included".  Red's built-in GUI support is huge and quite rare; SQLite file support would, I think, make a unique offering.  Obviously everything added makes extra size and extra work; but why would basic support for the file format add that much size?  In addition to business apps, this also fits well with the mobile target as I understand a high percentage of apps use SQLite.  Thoughts?}
    sent: "2017-04-04T15:47:19.140Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58e3b8894cb8d091735a365f"
    text: {@pekr I have found that groups where phds abound tend to ask the most irrelevant, useless questions. I have a masters of mathematics from harvard, does that make me a genius of math? No, not at all, in fact, there are plenty of people that far exceed my skills in mathematics from other "lesser" schools and there are plenty of people in this channel that could code circles around me. I still say stupid things and do stupid things all the time. Having a phd does not really mean much to me anymore. Watch some debates on the news between phds and you will see what I mean.}
    sent: "2017-04-04T15:15:21.890Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e3b6a98bb56c2d11749255"
    text: {@pekr Do not be overimpressed by people having Phd's, they probably lack other skills. If raising awareness is the goal that is certainly one way to do that. The time you will be given will for sure be rather limited (30min to an hour?) so no way you can go to deep into the details. Just raise interest and awareness.}
    sent: "2017-04-04T15:07:21.685Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e3a41e408f90be668938bf"
    text: {We will see, what other discussion will bring in and if that group would be interested in some intro. Some old slides form Doc are available (thought those might need some refresh), so we will decide later ...}
    sent: "2017-04-04T13:48:14.562Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "58e3a3c4408f90be668936c4"
    text: {@iArnold - it will be tought for me and Bolek, facing questions from experts, who might have Phd :-) The only reason why I was considering this, was, that the organiser was looking for the Eve language presenter in CZ locally and seemed interested to have Red covered. What other way is there to raise local awareness, right?}
    sent: "2017-04-04T13:46:44.977Z"
    editedAt: "2017-04-04T13:47:03.850Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e3998668bee3091f0be8a8"
    text: {Just a little more confidence guys. Prepare your talk and then be honest that you may not know everything, but take a note of the difficult question and say you want to email the answers on the collected questions to those interested. }
    sent: "2017-04-04T13:03:02.420Z"
    editedAt: "2017-04-04T13:03:37.308Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e3971808c00c092a48cb92"
    text: {I am not available for any conference until 0.7.0 is out, it is just too time-consuming for me. Such conference happens pretty much every day somewhere in the world, I don't see anything special about that one, which is just a local meetup group.}
    sent: "2017-04-04T12:52:40.738Z"
    editedAt: "2017-04-04T12:53:17.023Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e332df4cb8d0917357d72d"
    text: {Yes, that's actually possibility I thought about too ...}
    sent: "2017-04-04T05:45:03.517Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e331eef22385553d07f909"
    text: {@pekr it seems interesting and I would like to attend also, if there will be some Red presentation. Maybe together we could answer more questions?}
    sent: "2017-04-04T05:41:02.586Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3076b408f90be6686a91b"
    text: {Could be done, but not sure how is the connection from China. Also - conferences sometimes tend to slip schedules. For Doc, it could mean it will happen late night or early morning. I would be willing to travel there (PragueLambda) personally, just to coordinate/arrange ....}
    sent: "2017-04-04T02:39:39.261Z"
    editedAt: "2017-04-04T02:40:05.071Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e303dc08c00c092a4689c2"
    text: "What about skype presentation?"
    sent: "2017-04-04T02:24:28.831Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e302c2408f90be66869803"
    text: {... of course don't want to speak on behalf of FS and what Doc has in mind in that regard ....}
    sent: "2017-04-04T02:19:46.879Z"
    editedAt: "2017-04-04T02:20:30.734Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e302aa8bb56c2d1171a393"
    text: {The thing is, that it might lead to create a refreshed set of presentations over time, and then that could be presented by others too. I KNOW that it might be a bit preliminary, but I almost feel, it might be just the time to consider even such marketing dimension?}
    sent: "2017-04-04T02:19:22.195Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e302638bb56c2d1171a2b2"
    text: {Now the question is more towards @dockimbel , but also to @rebolek or @Oldes - I could generally present about Red, but e.g. the guy who replied to me, was studying a Charles University here, and the group might be interested in deep topics, noone from us here is able to be able to answer. Not sure how many from those 600 registered regularly meet - it might just be 20-30 ppl, but the question is, if Doc would eventually consider to attend? Those meetings are long planned ahead.}
    sent: "2017-04-04T02:18:11.699Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e301b14cb8d09173573a15"
    text: "https://www.meetup.com/Lambda-Meetup-Group/"
    sent: "2017-04-04T02:15:13.772Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e301ae68bee3091f0975e6"
    text: {Also - you might remember, how we always created a website for the Rebol conferences. It seems there is kind of a standardised platform for that - meetup.com. I find it just good enough and thinking about opening the Czech Redcons (or whatever the name we will give it). First we can start with the once per 6-12 months one, just few of us here in CZ, in 1-2 years, when we bring in some friends, it might be 10-20, who knows if we don't try it? :-)}
    sent: "2017-04-04T02:15:10.444Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e300b9f22385553d075865"
    text: {"VERY open-minded. Hungry for new ideas and point of views. Could you please recommend me experienced red user who could give a talk on Pλ?"}
    sent: "2017-04-04T02:11:05.944Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e3004f7ea420cc4235d54e"
    text: {Guys, I have received a very positive reply from the Czech organiser of PragueLambda, which is a platform for mostly a Closure, but also other functional languages. Recently they were asking, if there is someoneone in CZ to introduce Eve to the group. Hence I asked, if they are open minded community, to eventually see other FP languages, of course Red this time. And I have received a following reply:}
    sent: "2017-04-04T02:09:19.135Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e2f40e0e4137042ade64f9"
    text: "@mpchean Thanks! ;-)"
    sent: "2017-04-04T01:17:02.954Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e2f38468bee3091f094b41"
    text: {@Gwarks Which OS? Which language? Which toolchain? Which Red build?}
    sent: "2017-04-04T01:14:44.462Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e2a13a68bee3091f080236"
    text: "@dockimbel Good to know."
    sent: "2017-04-03T19:23:38.104Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e2a0fe0e4137042add0c5d"
    text: "Very impressed with latest version.  Good job."
    sent: "2017-04-03T19:22:38.302Z"
    v: 1
    author: "5581b27015522ed4b3e20ee8"
) #(
    id: "58e2929c408f90be6684d725"
    text: "I will enjoy it!"
    sent: "2017-04-03T18:21:16.612Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e29295ad849bcf4249bf52"
    text: "REduce hehe a good expresion I understand. "
    sent: "2017-04-03T18:21:09.026Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e292574cb8d091735588e3"
    text: {That's fine. We all were once. Welcome, and Happy Reducing!}
    sent: "2017-04-03T18:20:07.998Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e290918bb56c2d116fd87a"
    text: "I am very beginner thanks,,"
    sent: "2017-04-03T18:12:33.030Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e290430e4137042adcba2a"
    text: {But has new capabilities, and is currently bootstrapped in Rebol, not written in C.}
    sent: "2017-04-03T18:11:15.162Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e290128e4b63533d912f15"
    text: "Red is a descendant of Rebol, yes."
    sent: "2017-04-03T18:10:26.973Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e28ffdad849bcf4249b232"
    text: "oh thanks I will follow Gregg link then"
    sent: "2017-04-03T18:10:05.511Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e28ff58fcce56b20c76888"
    text: {Red is largely compatible with Rebol as a language, but the GUI system diverges a bit. Reading old Rebol docs is not a bad place to start though. Just don't expect GUI code to work as cut-and-paste.}
    sent: "2017-04-03T18:09:57.327Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e28fd54cb8d09173557cc4"
    text: {"Creating Business Applications" should be Rebol 2}
    sent: "2017-04-03T18:09:25.147Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e28efdb52518ed4dd69e3e"
    text: {I am reading and testing, becuase REBOL examples are not similar to RED,,bur rebol has more docs. as Creating Business Applications With REBOL. and R3 i not the same R2..I suposee Creating Business Applications With REBOL is  R3...¿? and Red is child but not equal to R3...}
    sent: "2017-04-03T18:05:49.087Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e28df4408f90be6684c025"
    text: {You should also be able to create sub-layouts and alter the view pane directly, but I haven't done that myself.}
    sent: "2017-04-03T18:01:24.784Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e28d5aad849bcf4249a589"
    text: "ok thanks!"
    sent: "2017-04-03T17:58:50.785Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e28d3a8e4b63533d911eb8"
    text: {You can use the `panel` style in a layout, and you can use `center-face` to position one window over another, but you can't embed an entire window.}
    sent: "2017-04-03T17:58:18.783Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e28d3a0e4137042adcad84"
    text: "yes  I knw  ' I was saying an example.."
    sent: "2017-04-03T17:58:18.289Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e28cf34cb8d09173556f68"
    text: {Backtick on US keyboard is unshifted tilde key. It's ASCII 96.}
    sent: "2017-04-03T17:57:07.742Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e28c777ea420cc4233ea8c"
    text: {backticks ? I will find for an example thanks..Another question, Can I put a windows inside another windows?}
    sent: "2017-04-03T17:55:03.288Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e28b100e4137042adca60e"
    text: {I also get a really tiny layout, not what the example on red-by-example shows. VID now seems to honor the 8x8 size.}
    sent: "2017-04-03T17:49:04.370Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e28aab0e4137042adca3f0"
    text: {@jmgbsas, you can format short code elements with backticks (`) or long sections with three, each on their own lines and the code between.}
    sent: "2017-04-03T17:47:23.555Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e28a728fcce56b20c74fac"
    text: {Ah, had a thought and found it! @mikeparr, it's in http://www.red-by-example.org/vid.html#11. You have `style:` instead of `style`. ^/^/Thanks for reporting @jmgbsas!}
    sent: "2017-04-03T17:46:26.733Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e28a6f0e4137042adca35b"
    text: "yes in http://www.red-by-example.org/ thanks"
    sent: "2017-04-03T17:46:23.989Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e28a0b7ea420cc4233e1e9"
    text: {@jmgbsas, can you point to the source doc you refer to? I don't know where that is. What error do you get?^/^/https://doc.red-lang.org/en/vid.html#_styling states that `set-word!` syntax is used, and that is what VID expects.}
    sent: "2017-04-03T17:44:43.791Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e26a12ad849bcf4248f913"
    text: {the error is 1.2.5. Basic properties of GUI elements - styles example the correct way is without ':' in style view/tight [^/^-style  mytext: text 8x8 yellow bold^/^-across mytext "1" mytext "2" mytext "3"^/^-return^/^-across mytext "4" mytext "5" mytext "6"^/] }
    sent: "2017-04-03T15:28:18.231Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e2661f8fcce56b20c69e24"
    text: {Good Day I am following Gui examples one of them has an error}
    sent: "2017-04-03T15:11:27.323Z"
    v: 1
    author: "58e265e8d73408ce4f55c6ff"
) #(
    id: "58e2613a7ea420cc423308aa"
    text: {When invoking redOpen and redClose i get:^/```^/*** Runtime Error 1: access violation^/*** at: F766D331h^/```}
    sent: "2017-04-03T14:50:34.719Z"
    editedAt: "2017-04-03T14:52:00.057Z"
    v: 3
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e261258fcce56b20c68611"
    text: {When linking against libRed i get an Speicherzugriffsfehler}
    sent: "2017-04-03T14:50:13.836Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e1e0eb8bb56c2d116cb320"
    text: {Oh, weird. I can in this room, but no longer in red/help}
    sent: "2017-04-03T05:43:07.900Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1e0c8b52518ed4dd379a1"
    text: {It was there for many minutes when talking in red/help. Now... gone}
    sent: "2017-04-03T05:42:32.545Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1e0a58fcce56b20c4434f"
    text: {I can still edit. Perhaps you are using the wrong browser.}
    sent: "2017-04-03T05:41:57.781Z"
    editedAt: "2017-04-03T05:42:35.570Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58e1e092b52518ed4dd378d6"
    text: "Just now my edit option is grayed out"
    sent: "2017-04-03T05:41:38.743Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1ce5a8e4b63533d8dbefb"
    text: "I still see it"
    sent: "2017-04-03T04:23:54.676Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1ce01b52518ed4dd341fb"
    text: {Was the EDIT option gone from Gitter, I can't edit my posts anymore, even just after posting them!?}
    sent: "2017-04-03T04:22:25.859Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1ac970e4137042ad8f831"
    text: {@ZenoArrow Simplicity is the cornerstone of Red, so the trade-off you suggest is what we will aim for.}
    sent: "2017-04-03T01:59:51.800Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58e1751f7ea420cc422f68d2"
    text: {or network, sometimes free wifi messes up cetificates}
    sent: "2017-04-02T22:03:11.027Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e175118fcce56b20c3020a"
    text: "thanks"
    sent: "2017-04-02T22:02:57.633Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58e175034cb8d0917350fbd9"
    text: "mhmm so its my machine"
    sent: "2017-04-02T22:02:43.476Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58e174a0b52518ed4dd2329a"
    text: {@Danielez ^/```^/>> read https://www.reddit.com/r/lolcats/.json^/== ^{^^^{"kind": "Listing", "data": ^^^{"modhash": "", "children": [^^^{"kind": "t3", "data": ^^^{"contest_mode": false, "banned_by": null, "media_embed": ^^^{^^^}, "subreddit": "lolcats", "selftext^/```}
    sent: "2017-04-02T22:01:04.514Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e173c84cb8d0917350f83a"
    text: {Same request with curl from command line works normally.}
    sent: "2017-04-02T21:57:28.117Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58e172cb0e4137042ad84a68"
    text: "red 0.62"
    sent: "2017-04-02T21:53:15.917Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58e172c28e4b63533d8c9abc"
    text: "Fedora release 25 (Twenty Five)"
    sent: "2017-04-02T21:53:06.408Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58e1725ef22385553d011f35"
    text: {```>> data: json/decode read https://www.reddit.com/r/lolcats/.json^/ERROR: Problem with the SSL CA cert (path? access rights?)^/*** Access Error: cannot connect: https://www.reddit.com/r/lolcats/.json reason: timeout^/*** Where: read```}
    sent: "2017-04-02T21:51:26.208Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58e1681908c00c092a3ff68a"
    text: {Considering the wide range of uses for Red, I'd say whatever is chosen should be something simple to debug (e.g. https://en.wikipedia.org/wiki/Rendezvous_(Plan_9) ), even if it's not the absolute optimum performance-wise, but I'm not in the Red dev team so I'm not in a position to decide, whatever route they take is up to them. }
    sent: "2017-04-02T21:07:37.551Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e1652f8e4b63533d8c6a82"
    text: {Taken from: http://www.red-lang.org/2015/12/answers-to-community-questions.html}
    sent: "2017-04-02T20:55:11.475Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e165208e4b63533d8c6a70"
    text: {> "Will Red have built-in support for some type of concurrency and/or parallel processing? What kind of model is it going to follow?^/^/ >Certainly. Increase in computation power is now horizontal, with multiple cores, multiple processors and distributed architectures, so, strong concurrency support is a key part of a modern general-purpose language.^/^/>For now, the model we aim at is the Actor model. It is a good fit for Red and would provide a clean way to handle concurrent and parallel tasks across multiple cores and processors. Though, a few years has passed since that plan was made, so we will need to revisit it when the work on 0.9.0 will start, and define what is the best option for Red then. One thing is sure, we do not want multithreading nor callback hell in Red. ;-)"}
    sent: "2017-04-02T20:54:56.024Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e164cf4cb8d0917350c70d"
    text: {@geekyi This was written in 2015, but I'm guessing it's still the plan...}
    sent: "2017-04-02T20:53:35.009Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e15eed8e4b63533d8c52dd"
    text: {Or at least for data parallelism and concurrency.. I prefer the former}
    sent: "2017-04-02T20:28:29.327Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e15e80408f90be66801754"
    text: {Personally, I think we need different models of parallelism}
    sent: "2017-04-02T20:26:40.636Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e15da38e4b63533d8c4ccb"
    text: {@maximvl io is supposed to be better.. It has an actor model. Doc also he was considering an actor model}
    sent: "2017-04-02T20:22:59.076Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e151dd8bb56c2d116ad868"
    text: {Erlang did it exceptionally well, but the cost is also high - it has it's own scheduler and it can balance load across processors, which is quite a complex thing to code I think and overhead is significant for regular one-thread tasks}
    sent: "2017-04-02T19:32:45.108Z"
    editedAt: "2017-04-02T19:33:05.301Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e15110408f90be667fe72a"
    text: {@greggirwin I'm just saying that we still need real concurrency :)}
    sent: "2017-04-02T19:29:20.568Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e147c78fcce56b20c25971"
    text: {Of course, this isn't really parallelism either, just round-robing scheduling of small steps.}
    sent: "2017-04-02T18:49:43.615Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e1465908c00c092a3f73f2"
    text: {Yes, did I say concurrent somewhere? I meant parallel for these simple examples.}
    sent: "2017-04-02T18:43:37.767Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e14310ad849bcf42447c1a"
    text: "well, this is parallel not concurrent"
    sent: "2017-04-02T18:29:36.231Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e141e98fcce56b20c24145"
    text: {Still very basic, but with contexts for tasks:^/```^/do-tasks-in-parallel: function [tasks [block!] "Task objects"][^/^-orig-list: tasks^/^-tasks: copy tasks^/^-while [not empty? tasks][^/^-^-forall tasks [^/^-^-^-task: tasks/1^/^-^-    task/_state: do/next task/_prog 'prog^/^-^-    task/_prog: prog^/^-^-    if task/_state = 'done [remove tasks]^/^-^-]^/^-^-head tasks^/^-]^/^-orig-list^/]^/^/task-proto: context [_prog: none _state: none]^/make-task: func [spec body][^/^-task: make task-proto spec^/^-task/_prog: bind body task^/^-task^/]^/t-a: make-task [a: 1 b: 2][^/^-a: a + 1  print a * b^/^-a: a + 1  print a * b^/^-a: a + 1  print a * b^/^-'done^/]^/t-b: make-task [s: copy "" c: 'x][^/^-append s c print mold s^/^-append s c print mold s^/^-append s c print mold s^/^-append s c print mold s^/^-append s c print mold s^/^-'done^/]^/print mold do-tasks-in-parallel reduce [t-a t-b]^/```^/Note that `do/next` does complete iterations of loop constructs, not just one iterations per `/next`. And we don't have non-blocking I/O as Node does from libuv, so this is conceptual mor than useful. }
    sent: "2017-04-02T18:24:41.488Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e13e35bc370d964edf7072"
    text: {Or short you don't need to do everything in fast language. For example the C64 does collision checking and rendering in hardware but game logic could be done in interpreted basic. So there was no need for the scripting language to be fast. But there was an need to be easy or at least easier then plain assembler.}
    sent: "2017-04-02T18:08:53.497Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e13d57408f90be667f961e"
    text: {Also chip factory is too expensive for simple jobs}
    sent: "2017-04-02T18:05:11.575Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e13d308fcce56b20c22a2c"
    text: {VHDL is fastest language but not very well suited for scripting burning new ICs each time when you change little things takes to much time…}
    sent: "2017-04-02T18:04:32.788Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e13ccff22385553d005311"
    text: {No context or anything here of course.^/```^/do-in-parallel: func [progs [block!] "key-val pairs"][^/^-while [not empty? progs][^/^-^-foreach [key prog] progs [^/^-^-    do/next prog 'prog^/^-^-    progs/:key: prog^/^-^-    if empty? prog [remove/part find progs key 2]^/^-^-]^/^-]^/]^/^/do-in-parallel [^/^-a [print 1 print 2 print 3]^/^-b [ print "^^-v" print "^^-w" print "^^-x" print "^^-y" print "^^-z"]^/^-c [print [tab tab mold #qrs]  print [tab tab now/time]]^/]^/```}
    sent: "2017-04-02T18:02:55.854Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e13b068fcce56b20c2235a"
    text: {Found an old co-routine experiment here, but it depends on an old FSM dialect I did in R2 as well.}
    sent: "2017-04-02T17:55:18.396Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e1376fbc370d964edf5bb8"
    text: {I used to have a little parallel-do example, WRT co-routines, but Doc and Maarten Koopmans both wrote things (Uniserve and Storm) that show it can be done. }
    sent: "2017-04-02T17:39:59.564Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e132c708c00c092a3f2a02"
    text: {When people complain that X will be (not "is" but "will be") too slow--I got that a *lot* with VB, and some with R2--I ask "how much too slow? Please give me concrete examples to work against." Often this leads to "It has to be as fast as possible." While that's always nice, we don't know what that is unless we build the fastest one. My take is that things have to be fast *enough*, which is a soft constraint that varies by context. Animation and games have minimum response times or FPS goals, real-time systems have hard limits, but most performance requirements are very, very soft. 0:5:0 vs 0:0:5 may not matter at all, but a working solution in 5 days vs 5 weeks may be huge.}
    sent: "2017-04-02T17:20:07.620Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e130c2ad849bcf42442b92"
    text: {As I said in a HN comment, Red will never be fast enough for everyone, but benchmarks are also meaningless in many cases. Are Python and Ruby blazing fast? Has a lot of useful software been written with them? }
    sent: "2017-04-02T17:11:30.842Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e1303fad849bcf424429e2"
    text: {@JacobGood1, nice Rich Hickey analysis. There is no single way to do this, but its design should be deeply designed as part of the host language. In Red we can emulate almost any behavior, but we don't have best practices for doing so yet. The recent chat on with/using/let/dynamic might be used to think about how we go about it. For missing methods, we could emulate it with objects, but it might be better in the standard path evaluator. That will add overhead though. And then we have to think about how it works for function refinements. Do you have a similar handler for "refinement missing"? If so, how does that work compared to remaking functions. ^/^/Multiple dispatch can make for lots of separate functions. Red's type checking system lets us combine shared behavior in different ways, but it's fundamental design also means we may not *want* to emulate certain things. }
    sent: "2017-04-02T17:09:19.028Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e12ae68fcce56b20c1e6ab"
    text: {This is cool from Lua, and might fit Red/System^/http://stackoverflow.com/a/2870781}
    sent: "2017-04-02T16:46:30.034Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e12792ad849bcf42440873"
    text: {Ruby fixes that with method_missing and respond_to?}
    sent: "2017-04-02T16:32:18.671Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1022f7ea420cc422dc25c"
    text: {Rich hickey once discussed that he did not like pattern matching because it was closed, while he did like multimethods because they were open.^/^/It took me some time to digest what he was saying but basically it is this; if you want to extend the patterns a function is matching you must alter its source, while with multimethods you can extend what it matches by simply writing another multimethod in your own source. If you were to use someones library, with their multimethods, you could easily extend what those methods match, without altering the library at the source level. This means that you can extend any data structure with new multimethods without ever needing to mess with the original implementation of the method.^/^/When programming in red it dawned on me that red takes that idea to the extreme, literally every single thing in the language is extensible. You could import someones lib and extend their code just by altering the data that the code is composed of; you do not have to touch the source code of the library at all. In this sense, all of red is open, while every other language is closed in one form or another.^/^/}
    sent: "2017-04-02T13:52:47.732Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e0ffb27ea420cc422db95a"
    text: {I agree that Lua is not really comparable to Red, as you say they seem (to me) to work at different levels of abstraction. LPeg being the one exception that I am familiar with.}
    sent: "2017-04-02T13:42:10.134Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58e0fec9f22385553dff6bac"
    text: {Well, difficult is a subjective term, but I am sure you would agree that abstraction creation in red is more powerful than pretty much any language(that I know of)}
    sent: "2017-04-02T13:38:17.333Z"
    editedAt: "2017-04-02T13:40:03.636Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e0fe268e4b63533d8ad913"
    text: {Personally, I don't agree that specifying a DSL is **much** more difficult in Lua than Red. [Lua's LPeg implementation](http://leafo.net/guides/parsing-expression-grammars.html) has a lot of similarities with ```parse```. It isn't quite as readable but it isn't so difficult to build a DSL.}
    sent: "2017-04-02T13:35:34.110Z"
    editedAt: "2017-04-02T13:37:00.821Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58e0fdb48fcce56b20c13cee"
    text: {Without a doubt red's abstraction capabilities far exceed luas, but you have to be able to use the abstractions at 60/30 fps }
    sent: "2017-04-02T13:33:40.755Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e0fd000e4137042ad67dc4"
    text: {But it was only talked about scripting an engine written in another language. In LUA specifiying DSL is difficult in Red it is much easier. }
    sent: "2017-04-02T13:30:40.503Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e0f617bc370d964ede6292"
    text: {Doc has said before that he would like to achieve lua performance, well see}
    sent: "2017-04-02T13:01:11.300Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e0f5fc0e4137042ad6626e"
    text: {Yea, lua is very fast, I do not know if it is the best all around scripting language but if performance is a concern lua should be chosen.}
    sent: "2017-04-02T13:00:44.820Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e0f2768bb56c2d11696c6b"
    text: {These [benchmarks](https://attractivechaos.github.io/plb/) show that LuaJIT performs better than Go language on some benchmarks.}
    sent: "2017-04-02T12:45:42.485Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58e0f16b8bb56c2d116967fa"
    text: {Red has no optimisation yet. The version of Lua used in games is normally LuaJIT which performs at close to C speeds. It is written in Assembler unlike Lua which is written in C.}
    sent: "2017-04-02T12:41:15.333Z"
    editedAt: "2017-04-02T12:41:36.618Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58e0d38d8e4b63533d8a3dab"
    text: "Red is slow?"
    sent: "2017-04-02T10:33:49.872Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e0d1c8f22385553dfec56e"
    text: {@Gwarks They're right. Red doesn't have gc and its current implemetation is rather slow. So, it can't be used for game development yet.}
    sent: "2017-04-02T10:26:16.196Z"
    editedAt: "2017-04-02T10:26:55.503Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58e0b0c3ad849bcf42425ac7"
    text: {A few days ago, in the löve2d forums they said that lua is best for game scripting, but now with libRed available they should be proven wrong.}
    sent: "2017-04-02T08:05:23.119Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58e043f2f22385553dfd2b28"
    text: "*feels"
    sent: "2017-04-02T00:21:06.631Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58e0432c0e4137042ad44007"
    text: "@9214 Thanks,  Red feel like a Lisp indeed."
    sent: "2017-04-02T00:17:48.200Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58e003557ea420cc422a9b21"
    text: {I also linked this talk a while ago: https://www.youtube.com/watch?v=Ztr8QvMhqmQ}
    sent: "2017-04-01T19:45:25.001Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e00290f22385553dfc5475"
    text: {I do not have any links that come to mind, promises can be implemented with co-routines, co-routines are more general and powerful than promises.^/^/Here is a link to piss off your Haskell friends =): http://blog.paralleluniverse.co/2015/08/07/scoped-continuations/}
    sent: "2017-04-01T19:42:08.431Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dff8e80e4137042ad3485d"
    text: {@JacobGood1 do you have any good links for explaining co-routines? Are they related to promises?}
    sent: "2017-04-01T19:00:56.989Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "58dff581bc370d964edb2e80"
    text: {My favorite abstraction for game programming that I have come across is co-routines}
    sent: "2017-04-01T18:46:25.180Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dff5338bb56c2d11666b63"
    text: {@pekr it relates more so to how functional programming is slow as hades when it comes to game programming}
    sent: "2017-04-01T18:45:07.920Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dff4f908c00c092a3b18bb"
    text: {Off-topic: when I actually get back to writing red code I am going to be such a newbie again.}
    sent: "2017-04-01T18:44:09.989Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dff499b52518ed4dcd4d38"
    text: {Well, if ClojureScript generates JS code, in the same sense as R/S is generating a target code, then the resulting script is a pure JS code. Doesn't it, in fact, relate to the performance of JS itself? Well, or the efficiency of the engine CS generates for JS to execute?}
    sent: "2017-04-01T18:42:33.794Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58dff40e7ea420cc422a5ade"
    text: {In 2017 I cannot agree, you are right in saying that some games can be made, but that "some" is very small.}
    sent: "2017-04-01T18:40:14.902Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dff40b408f90be667b7ae9"
    text: {*But*, it has to remove a lot of pain for you if it's going to be slow. It shouldn't be both slow *and* painful.}
    sent: "2017-04-01T18:40:11.902Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dff3d68fcce56b20be0d8c"
    text: {But 100 objects isn't bad, if it's on-screen objects and not your entire dataset. I mean, you could still write nice small games with it. Some games only have a few objects.}
    sent: "2017-04-01T18:39:18.285Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dff2c108c00c092a3b1142"
    text: "Some things just aren't a good fit. "
    sent: "2017-04-01T18:34:41.549Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dff27d408f90be667b7678"
    text: {Well, it is a ClojureScript, not just a Clojure? So it is mostly Clojure generating some JS code?}
    sent: "2017-04-01T18:33:33.874Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58dff1cf4cb8d091734c01a1"
    text: {One more point about functional game programming, notice this game engine being developed for the web: https://github.com/alexkehayias/chocolatier^/^/Go down to the performance section, read this quote:^/"The game engine is being tested to get to 100 "game objects" with meaningful functionality, tilemaps, sound, etc at 60 FPS. "^/^/100 objects at 60fps? Wow, that is pathetic.^/^/Finally read the tips section, caveat after caveat, what you will garner from that is... don't use clojure for game development. }
    sent: "2017-04-01T18:30:39.660Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dfedfab52518ed4dcd340a"
    text: {This article is good as well as the various links in it: http://prog21.dadgum.com/54.html}
    sent: "2017-04-01T18:14:18.825Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dfedc28e4b63533d878ae9"
    text: "Excellent feedback. Thanks."
    sent: "2017-04-01T18:13:22.587Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfed79ad849bcf42401bb6"
    text: {I would say the biggest strength in clojure was free snapshots of the state of the program, other than that, it was a major chore.}
    sent: "2017-04-01T18:12:09.134Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dfed4408c00c092a3afcd7"
    text: {The haskell game was a real time text game, basically instead of graphics I used ascii. I will admit that it worked very well when it actually compiled, however, getting to that magical compile is an arduous task. ^/^/The clojure games I have made are a 2d platformer, arcade style shooter, and some others.  It was much easier to create a game in clojure, but it still took far too much mental effort.}
    sent: "2017-04-01T18:11:16.544Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dfecfb08c00c092a3afba3"
    text: {I admit to some envy for those who "get" things like that.}
    sent: "2017-04-01T18:10:03.664Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfecc88fcce56b20bdf3d2"
    text: "That's the game I usually play with Haskell."
    sent: "2017-04-01T18:09:12.780Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfecaa8bb56c2d11664f36"
    text: {How is it for that? Strengths? Weaknesses? Was the Haskell game called "guess what this does?"? ;^^)}
    sent: "2017-04-01T18:08:42.076Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfec7fb52518ed4dcd2e55"
    text: "I also made a game in Haskell."
    sent: "2017-04-01T18:07:59.742Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dfec68bc370d964edb0c6c"
    text: {I have programmed a good bit in clojure, I have also made games in clojure.}
    sent: "2017-04-01T18:07:36.162Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dfec45408f90be667b622a"
    text: {I also think there's absolutely a place for pure FP, and languages that protect you at all costs. }
    sent: "2017-04-01T18:07:01.405Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfec0308c00c092a3af7b4"
    text: "Nothing is good for everything."
    sent: "2017-04-01T18:05:55.875Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfebf6bc370d964edb0a63"
    text: {I have already gone down that route...multi-paradigm languages are the way to go. FP is not good for everything, just like oop is not good for everything.}
    sent: "2017-04-01T18:05:42.255Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dfebf40e4137042ad3155b"
    text: {Not that Clojure is bad in any way. I don't think it is. And I really enjoy watching Rich Hickey talk about it. I have some `transducer` experiments around here even.}
    sent: "2017-04-01T18:05:40.443Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfebb18fcce56b20bdf01a"
    text: "I wish her lots of luck. "
    sent: "2017-04-01T18:04:33.134Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfeb98b52518ed4dcd2aef"
    text: {And, of all things, she was going to do game programming with clojure...}
    sent: "2017-04-01T18:04:08.608Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dfeb95408f90be667b5e92"
    text: "That's hysterical. :^^)"
    sent: "2017-04-01T18:04:05.680Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfeb4af22385553dfbfeef"
    text: {I read an article just the other day where this lady, who had never programmed before, was talking about how bad mutable state was and how fp was going to save us all. She decided that fp was superior, parroted the usual arguments, without ever having programmed imperatively before. It was amusing to say the least.}
    sent: "2017-04-01T18:02:50.823Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dfea9a0e4137042ad30faa"
    text: {@JacobGood1, it is *very much* like the hype days of OOP. I was around then.}
    sent: "2017-04-01T17:59:54.829Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfea58bc370d964edb0376"
    text: {:point_up: [April 1, 2017 2:42 AM](https://gitter.im/red/red?at=58df68137ea420cc42286657) Yes @pekr. Functional is gaining steam. I suppose we have JS to thank in part, because now a mainstream language has first class functions, so more people know about them. Now comes the fight about lazy evaluation, copy on write semantics, and all the rest. :^^)}
    sent: "2017-04-01T17:58:48.101Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfe9b68fcce56b20bde920"
    text: {@karadi2016, welcome! Glad you got it to work. Many of us have editors set up, so the target file and/or exe is fully specified, so we forget some of these issues. You might try using VSCode, which has a Red extension, if you don't already have a working environment set up for it.^/^/Happy Reducing!}
    sent: "2017-04-01T17:56:06.761Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfded9f22385553dfbce4c"
    text: {it's an alias for anonymous function, which is the same function word `compose` points to ;)}
    sent: "2017-04-01T17:09:45.528Z"
    editedAt: "2017-04-01T17:10:01.118Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dfd93a08c00c092a3aae8e"
    text: {yeah, here backquote symbol is an alias for `compose` function}
    sent: "2017-04-01T16:45:46.931Z"
    editedAt: "2017-04-01T16:46:23.426Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58dfd524408f90be667b069f"
    text: {^^Shows some nice possibilities of Red, but... it does not create a ``[` and `]` pair of brackets, since any whitespace is allowed between the  backtick and the `[`.}
    sent: "2017-04-01T16:28:20.771Z"
    editedAt: "2017-04-01T16:29:45.039Z"
    v: 4
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58dfcdaf08c00c092a3a7f1e"
    text: {@Danielez ;)^/```^/>> `: :compose^/== make native! [[^/    "Returns a copy of a block, evaluating only...^/>> a: 1^/== 1^/>> b: 2^/== 2^/>> `[(a) (b) c]^/== [1 2 c]^/>> ^/```}
    sent: "2017-04-01T15:56:31.927Z"
    editedAt: "2017-04-01T16:00:16.419Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58dfad5e8fcce56b20bd1717"
    text: {@pekr they are  definitely getting more popular, "feels like the days when oop was being evangelized to us all"... =)^/^/I quoted that because I was not actually around for that time =P}
    sent: "2017-04-01T13:38:38.616Z"
    editedAt: "2017-04-01T13:40:45.602Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58df9b878fcce56b20bcd5e2"
    text: "Thank you.  "
    sent: "2017-04-01T12:22:31.809Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58df9b17408f90be667a2bd9"
    text: {haha, we'll see, feel free to ask questions and join the discussions on `red/lisp`, `red/code`, `red/help` and `red/welcome` :)}
    sent: "2017-04-01T12:20:39.079Z"
    editedAt: "2017-04-01T12:21:41.009Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df9adf08c00c092a39ca34"
    text: {Ok. Red is very cool I hope it conquer the universe.}
    sent: "2017-04-01T12:19:43.723Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58df9a9d8fcce56b20bcd3f9"
    text: {@Danielez exactly, lisp has an agreement that first item in the list is function call, in Red it's not, you have to specify what you want to execute}
    sent: "2017-04-01T12:18:37.177Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df9a727ea420cc422912f3"
    text: {ok so we manually call eval on it when we "do" it}
    sent: "2017-04-01T12:17:54.150Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58df9a5e4cb8d091734ac565"
    text: {@Danielez this is example of backquoting:^/```^/>> a: 1^/== 1^/>> b: 2^/== 2^/>> compose [(a) (b) c]^/== [1 2 c]^/```}
    sent: "2017-04-01T12:17:34.579Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df9a2f4cb8d091734ac509"
    text: {@Danielez lisp's quote is just a block:^/```^/>> [a b c]^/== [a b c]^/```}
    sent: "2017-04-01T12:16:47.786Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df9a05ad849bcf423edb4e"
    text: "Ok thank you."
    sent: "2017-04-01T12:16:05.791Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58df99ee8e4b63533d865043"
    text: {@Danielez Hi, nope, `quote` is not a lisp quote and backquote equivalent is `compose`}
    sent: "2017-04-01T12:15:42.406Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df99b08bb56c2d1165237b"
    text: {Hello,  Is the quote function basically common lisp quote? and if so is there a backquote equivalent? ( http://www.lispworks.com/documentation/HyperSpec/Body/02_df.htm ) Thank you.  }
    sent: "2017-04-01T12:14:40.948Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58df6846f22385553dfa1c5e"
    text: "@pekr this sounds like a great idea."
    sent: "2017-04-01T08:43:50.902Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58df68137ea420cc42286657"
    text: {Are functional languages on its rise? I am watching Eve on Twitter and noticed one guy in CZ asks, if anyone is using it locally and would be able to present at PragueLambda ( https://twitter.com/PragueLambda ), which is followed by cca 1K ppl and the group seems to be about Clojure, Scheme, Erlang, Haskell and related frameworks. Now the question is, if making an introduction to Red there, would be welcomed (ppl being open-minded) or contraproductive? What do you guys think? ( @dockimbel ) . I might try to contact that guy and at least have some basic info exchange?}
    sent: "2017-04-01T08:42:59.890Z"
    editedAt: "2017-04-01T08:44:18.606Z"
    v: 3
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58df63a6b52518ed4dcb51f0"
    text: {@pekr  @rebolek  Got it to work! It needs the executable to be in the same folder as the script. (SO it is a path thing). When you write the cmd you have to give the entire name of the executable for it to compile e.g. red-062 -c hello.red. Will try your suggestion @pekr }
    sent: "2017-04-01T08:24:06.792Z"
    v: 1
    author: "58df6034d73408ce4f55507b"
) #(
    id: "58df6316408f90be667971c0"
    text: {So in your above case, try to provide a path to even the script you are compiling, or first switch to that directory ...}
    sent: "2017-04-01T08:21:42.542Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58df62ee7ea420cc42285536"
    text: {When I try, while in a root directory, to do the same, it errors out, but console launches (not compiling, just trying to run one demo script). The `what-dir`then reveals, I am still at `%/C/`root folder. Following works though: `c:\!red\red\red c:\!red\red\particles.red`}
    sent: "2017-04-01T08:21:02.878Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "58df6143ad849bcf423e1c38"
    text: {@rebolek file is there. and the error is more of a path issue.. :(}
    sent: "2017-04-01T08:13:55.317Z"
    v: 1
    author: "58df6034d73408ce4f55507b"
) #(
    id: "58df60ff408f90be6679690c"
    text: {Hm, I don't see why it shouldn't work. I guess you checked if the file is there.}
    sent: "2017-04-01T08:12:47.158Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58df60ab0e4137042ad11e87"
    text: "it sounds very interesting @rebolek"
    sent: "2017-04-01T08:11:23.948Z"
    editedAt: "2017-04-01T08:12:29.057Z"
    v: 2
    author: "58df6034d73408ce4f55507b"
) #(
    id: "58df609f8e4b63533d859427"
    text: "PLs help"
    sent: "2017-04-01T08:11:11.978Z"
    v: 1
    author: "58df6034d73408ce4f55507b"
) #(
    id: "58df609d8e4b63533d85941c"
    text: {Just havving some trouble in executing a script in Windows. C:\Users\kaRadi\Desktop\Red>red -c hello.red^/'red' is not recognized as an internal or external command,^/operable program or batch file. }
    sent: "2017-04-01T08:11:09.330Z"
    v: 1
    author: "58df6034d73408ce4f55507b"
) #(
    id: "58df60918e4b63533d859407"
    text: "@karadi2016 Hi! Hope you like it :)"
    sent: "2017-04-01T08:10:57.310Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58df6068ad849bcf423e18e6"
    text: "Hi Everyone. Very new to Red. "
    sent: "2017-04-01T08:10:16.940Z"
    v: 1
    author: "58df6034d73408ce4f55507b"
) #(
    id: "58decf068fcce56b20ba55df"
    text: "@x8x you're welcome :)"
    sent: "2017-03-31T21:49:58.863Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dec0c47ea420cc42265a14"
    text: {Thank you for the link @greggirwin ! (No need for the HD version, it made the fan of my old Macbook want to make it fly)}
    sent: "2017-03-31T20:49:08.603Z"
    editedAt: "2017-03-31T20:50:22.792Z"
    v: 3
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58dec0590e4137042acf186a"
    text: "Not Red-ified yet."
    sent: "2017-03-31T20:47:21.970Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "58deafa9408f90be66772194"
    text: {@Danielez And there's also altjson by @rgchris, just mentioning all the alternatives out there.. }
    sent: "2017-03-31T19:36:09.028Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58deaaaa8fcce56b20b9be21"
    text: "@rebolek Nice! Thanks for that! :smile: "
    sent: "2017-03-31T19:14:50.122Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58de95f74cb8d09173474367"
    text: "Thanks"
    sent: "2017-03-31T17:46:31.158Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58de95c9ad849bcf423b5ab2"
    text: {@Danielez you may also check different implementation - https://github.com/rebolek/gritter/blob/tools/json.red - I use it in my Gitter and GitHub APIs.}
    sent: "2017-03-31T17:45:45.600Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58de93508e4b63533d82c2bb"
    text: "in my script I mean"
    sent: "2017-03-31T17:35:12.092Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58de933b7ea420cc42258181"
    text: {Yes, so to use these libraries I just clone the project and the `do %/path/to/library.red` right?}
    sent: "2017-03-31T17:34:51.977Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58de8f4e08c00c092a361568"
    text: {@Danielez I think this would help https://github.com/kealist/RS-fossil-mirror/tree/master/JSON}
    sent: "2017-03-31T17:18:06.969Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58de8e1fb402a53211d0f9fd"
    text: "Ok, thank you."
    sent: "2017-03-31T17:13:03.420Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58de8ddd0e4137042ace32cc"
    text: {@Danielez the refinement should be on the method, and `json` should be a `lit-word!` (otherwise it tries to get the value) like `load/as %test.json 'json`... but I don't think loading json has been implemented yet. I bet someone has a parser for it though}
    sent: "2017-03-31T17:11:57.330Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58de8bc8ad849bcf423b2481"
    text: {Hello how can I convert a json file to a red block? I've tried the `load %test.json /as json` but I get the following `>> load %test.json /as json^/*** Syntax Error: missing #"]" at {,         "html",         "google",}^/*** Where: do`}
    sent: "2017-03-31T17:03:04.111Z"
    v: 1
    author: "58de8b02d73408ce4f553019"
) #(
    id: "58de85910e4137042ace08a5"
    text: {Now I'm thinking.. why this unnecessary facade.. so much boilerplate.. getting help is so complex, I have to search on google!}
    sent: "2017-03-31T16:36:33.705Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58de8532b402a53211d0ce7a"
    text: "Everything else feels so complex now.."
    sent: "2017-03-31T16:34:58.888Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58de8503b402a53211d0cd8c"
    text: {@JacobGood1 I've been spoiled by redbol :worried: }
    sent: "2017-03-31T16:34:11.429Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58de82c8ad849bcf423af4c3"
    text: {In one of VPRI's articles or talks, there is more detail about their approach to shrinking things.}
    sent: "2017-03-31T16:24:40.019Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58de825ab402a53211d0c026"
    text: {@pekr, et al, I can't find the link I wanted, but here's the end of a talk by Alan Kay that is worth watching: https://youtu.be/YyIQKBzIuBY?t=2877 (stay to the end). }
    sent: "2017-03-31T16:22:50.644Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58de7a80408f90be667619f0"
    text: "Maybe it works for c++"
    sent: "2017-03-31T15:49:20.428Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58de7a73b402a53211d09705"
    text: {I wouldn't recommend those to a beginner.. everything feels so complex, more like something built to distract from the pain of programming in more verbose languages}
    sent: "2017-03-31T15:49:07.849Z"
    editedAt: "2017-03-31T15:51:10.148Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58de7a4d8bb56c2d11612abe"
    text: "Yep, popular languages suck"
    sent: "2017-03-31T15:48:29.939Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58de7a0708c00c092a35a79b"
    text: {@JacobGood1   @maximvl  ^/> This news is timely: https://www.codingame.com/blog/building-a-free-knowledge-sharing-technology-platform/^/^/Playing those games made me feel just how awful and verbose everything other than redbol is. So much boilerplate for a simple exercise!^/On closer inspection, it looks as if the games are biased towards imperative, stream based languages.. [this haskell](http://stackoverflow.com/a/37577644) stackoverflow question is the same exercise if I'm not mistaken; and shows just how unidiomatic the initial boilerplate code is}
    sent: "2017-03-31T15:47:19.828Z"
    editedAt: "2017-03-31T15:51:50.532Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58de21c0b402a53211cee80c"
    text: {You could just change Smalltalk for Red there - similar philosophy ...}
    sent: "2017-03-31T09:30:40.638Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58de215ead849bcf423924bd"
    text: {Nice article about Smalltalk reneisance and road to Pharo project. It shows, it just can be done, with even a small team. And btw - Carl kind of liked Smalltalk too. https://thenewstack.io/can-man-spark-renaissance-smalltalk-programming-language/}
    sent: "2017-03-31T09:29:02.009Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58de1f2a7ea420cc42235dd6"
    text: {I feel like Red editor will be something similar to Smalltalk live IDEs}
    sent: "2017-03-31T09:19:38.695Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ddf20bad849bcf423846d8"
    text: {Pharo (Smalltalk) has an interactive tutorial called Prof Stef that familiarises new users to the windows and controls of the GUI, image and language.}
    sent: "2017-03-31T06:07:07.019Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "58dd831f408f90be6672166e"
    text: {Thanks for the link @JacobGood1! Of course they use a hero image from a Luc Besson film. :^^)}
    sent: "2017-03-30T22:13:51.894Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dd6d8d8e4b63533d7de0c8"
    text: "I'll try to ask on forum"
    sent: "2017-03-30T20:41:49.431Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dd6d674cb8d091734260a9"
    text: {not sure how they add languages, chances are popularity is the most important factor}
    sent: "2017-03-30T20:41:11.695Z"
    editedAt: "2017-03-30T20:41:35.552Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dd695e08c00c092a313052"
    text: "that's for sure"
    sent: "2017-03-30T20:23:58.772Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dd68b0ad849bcf4236501d"
    text: {Yea, if we had red on there it would be a great teaching tool... I think}
    sent: "2017-03-30T20:21:04.063Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dd68794cb8d09173424ab0"
    text: {@JacobGood1 wow, I just opened your link and spent an hour playing these games :D}
    sent: "2017-03-30T20:20:09.410Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dd55d4b52518ed4dc34411"
    text: {Would be interesting to have red hooked up to codingame}
    sent: "2017-03-30T19:00:36.329Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dd55ba408f90be66714520"
    text: {This news is timely: https://www.codingame.com/blog/building-a-free-knowledge-sharing-technology-platform/}
    sent: "2017-03-30T19:00:10.328Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dd3565ad849bcf42356069"
    text: "SICP in Red?"
    sent: "2017-03-30T16:42:13.395Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58dd0c72b52518ed4dc1df93"
    text: {Such interactive tutorial is basically enhanced help, help with examples and deeper description than just a doc string.}
    sent: "2017-03-30T13:47:30.529Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dcfd0cb402a53211ca1999"
    text: {@dander inspired by clojure, inpired by ruby, inspired by Lisp.. (Little LISPer) :smile: }
    sent: "2017-03-30T12:41:48.572Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dcd7064cb8d091733f9f59"
    text: {@dander Yes, something like. It is fun way to introduce the language IMO.}
    sent: "2017-03-30T09:59:34.907Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dccfc98e4b63533d7af961"
    text: {@rebolek maybe something like http://clojurescriptkoans.com/ ? I played with it a while back, and thought it was pretty fun. But I already had some experience with lisp, so I don't know how it would be for a pure beginner}
    sent: "2017-03-30T09:28:41.782Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58dcc7317ea420cc421da156"
    text: {I've been thinking recently about gamified tutorial in console (or View). Basically, you will start with some few simple values (like integer and math functions) and once you solve given task (how to do addition, etc), new datatypes and functions will be unlocked (block, append, ...). I think it could be fun way to introduce Red to people with no experience. }
    sent: "2017-03-30T08:52:01.753Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dcc5b1ad849bcf423342f2"
    text: {From the blog comments:^/> austenStrine has left a new comment on your post "Incursion into "explorable explanations" lands":^/>^/> I second the motion from the above anonymous that a tutorial should be developed for beginners. I'm new to code as well (started about 8 months ago, I know some C++ and JavaScript, working on Java right now) and am very interested in investing time and energy into teaching myself Red. The simplicity and speed is extremely appealing to me as a beginner especially, and it seems like the flexibility suits a lot of my eventual goals. Keep up the good work! If you need help with develop​ing a tutorial, I'll be a guinea pig!^/> Posted by austenStrine to Red Programming Language at March 30, 2017 at 8:17 AM ^/^/Anyone interested in making a tutorial for beginners (or pointing him to existing ones)?}
    sent: "2017-03-30T08:45:37.124Z"
    editedAt: "2017-03-30T08:46:36.271Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dcbbf84cb8d091733f22fb"
    text: {Thanks :) What I want to achieve - run Red script from red in separate process (using `call`) and get back the return.}
    sent: "2017-03-30T08:04:08.741Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dcbabdf22385553def1093"
    text: {Yes, but they also have commands that outputs values :)}
    sent: "2017-03-30T07:58:53.860Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58dcba91ad849bcf42330de9"
    text: {OS shells are not REPL (though, some might argue otherwise), they don't work like the Rebol console. ;-) Try ^-`echo $?` after the console invocation.}
    sent: "2017-03-30T07:58:09.517Z"
    editedAt: "2017-03-30T08:00:26.507Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dcba777ea420cc421d6857"
    text: "`2`"
    sent: "2017-03-30T07:57:43.786Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dcba6f408f90be666e5a31"
    text: "What do you expect?"
    sent: "2017-03-30T07:57:35.674Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dcba4e8fcce56b20b12391"
    text: {@dockimbel I tried this without success:^/```^/fakemac:release sony$ echo "Red[] value: 1 + 1 quit/return value" >> temp.red^/fakemac:release sony$ ./console temp.red^/fakemac:release sony$^/```}
    sent: "2017-03-30T07:57:02.340Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dcb97c8fcce56b20b11fb0"
    text: {So I want `quit/return value` in my case, I guess. Thanks, I will try it.}
    sent: "2017-03-30T07:53:32.007Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dcb94b4cb8d091733f1745"
    text: {Yes, if your script finishes with a `quit`, you'll get back to terminal.}
    sent: "2017-03-30T07:52:43.711Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dcb92a8fcce56b20b11dc5"
    text: {@dockimbel so something like `console myscript.red`?}
    sent: "2017-03-30T07:52:10.756Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dcb8a77ea420cc421d5e18"
    text: {@rebolek `--do` option is not implemented yet, so the only way to run code is to pass a script as argument.}
    sent: "2017-03-30T07:49:59.191Z"
    editedAt: "2017-03-30T07:50:23.109Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dcb7fd08c00c092a2de519"
    text: {Can I run Red console with some code as argument and have it execute the code and return result back to terminal? I tried some approaches to it, but so far wasn't successful.}
    sent: "2017-03-30T07:47:09.215Z"
    editedAt: "2017-03-30T07:47:19.080Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dca9608e4b63533d7a4eee"
    text: {that'd be really nice, I'm excited to see what gets developed!}
    sent: "2017-03-30T06:44:48.112Z"
    v: 1
    author: "5885b9e2d73408ce4f455bb6"
) #(
    id: "58dca94ab52518ed4dc025ed"
    text: "I was thinking of the Rust ownership system, yes."
    sent: "2017-03-30T06:44:26.216Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dca90e8fcce56b20b0dc69"
    text: {raii => destructor in c++/drop trait in rust, not necessarily OO}
    sent: "2017-03-30T06:43:26.281Z"
    v: 1
    author: "5885b9e2d73408ce4f455bb6"
) #(
    id: "58dca8c508c00c092a2da5c3"
    text: "rust uses raii :), do you mean tracking lifetime?"
    sent: "2017-03-30T06:42:13.342Z"
    v: 1
    author: "5885b9e2d73408ce4f455bb6"
) #(
    id: "58dca85a408f90be666e0eb9"
    text: {@jacobdufault AFAIK, RAII is tied to OOP, Red/System is not an OO language. For memory management in R/S, you get currently the same features as in C. Though, we have plans for adding some features for memory-safety to R/S, but probably post-1.0, probably more Rust-like.}
    sent: "2017-03-30T06:40:26.082Z"
    editedAt: "2017-03-30T06:41:41.014Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dca709b52518ed4dc01d04"
    text: {AVM deprecation is a good example of why we need to update our plans for Red regularly, as the landscape is changing.}
    sent: "2017-03-30T06:34:49.256Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dca61e8bb56c2d115921b8"
    text: {does red/system offer any sort of memory management utilities? ex, RAII in C++}
    sent: "2017-03-30T06:30:54.227Z"
    v: 1
    author: "5885b9e2d73408ce4f455bb6"
) #(
    id: "58dca56d0e4137042ac5b8f4"
    text: {I was considering AVM output.. but it does not make much sense these days.. especially when it is posible to use libred library}
    sent: "2017-03-30T06:27:57.933Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58dca2a2b402a53211c8862e"
    text: "@Gwarks @Oldes has bindings for air"
    sent: "2017-03-30T06:16:02.255Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dc9c164cb8d091733ea837"
    text: "How Flash has fallen since that was written. "
    sent: "2017-03-30T05:48:06.722Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc9b8c408f90be666de01f"
    text: "Oh, you're right."
    sent: "2017-03-30T05:45:48.890Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dc9b51b52518ed4dbff068"
    text: {https://www.google.it/url?sa=t&source=web&rct=j&url=http://static.red-lang.org/Red-SFD2011-45mn.pdf&ved=0ahUKEwjPlc_6wv3SAhVMXRQKHd6TAxsQFggjMAE&usg=AFQjCNE6VGE5laT74xdtRUtfg_D7saxdsw}
    sent: "2017-03-30T05:44:49.248Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58dc9b07b402a53211c86d85"
    text: "I do not think it was ever considered as target."
    sent: "2017-03-30T05:43:35.147Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dc9b03ad849bcf423290a5"
    text: "Better say part of Adobe Flash"
    sent: "2017-03-30T05:43:31.463Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58dc9aee8e4b63533d7a1ac5"
    text: "It is built in Adobe Flash"
    sent: "2017-03-30T05:43:10.561Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58dc9a8e8fcce56b20b0a93a"
    text: "Ah, thanks. Never heard of it."
    sent: "2017-03-30T05:41:34.375Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc9a82ad849bcf42328f08"
    text: "AVM was/is Action Script Virtual Machine"
    sent: "2017-03-30T05:41:22.336Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58dc9a690e4137042ac59533"
    text: "Ok AVM seems already to be canceled"
    sent: "2017-03-30T05:40:57.513Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58dc9a14f22385553dee90e7"
    text: {WASM will likely be the web target, but no final decision there yet.}
    sent: "2017-03-30T05:39:32.832Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc99f808c00c092a2d6e9a"
    text: "What is AVM?"
    sent: "2017-03-30T05:39:04.211Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc999db402a53211c86894"
    text: "What about WebAssembly instead of AVM"
    sent: "2017-03-30T05:37:33.849Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58dc6664408f90be666d3171"
    text: "Done."
    sent: "2017-03-30T01:59:00.914Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dc60718fcce56b20afef29"
    text: "I will do it."
    sent: "2017-03-30T01:33:37.705Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dc5e33408f90be666d176f"
    text: {@dockimbel I have added instructions for CentOS in here: http://red.github.io/, but I don't know how to add it in red-lang.org.}
    sent: "2017-03-30T01:24:03.080Z"
    editedAt: "2017-03-30T01:24:08.219Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58dc5ca4f22385553dedca2f"
    text: {@jacobdufault Yup. Still Alpha, though pretty robust. If you look at the code, it might give you ideas. As with any app, there will be hotspots in game engines. With libRed you can now call into the runtime, as you might with Lua, as well as calling out via FFI, so you can mix and match to each tool's strength.}
    sent: "2017-03-30T01:17:24.131Z"
    editedAt: "2017-03-30T01:17:49.218Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc5c8f08c00c092a2caabd"
    text: {@red-first-user If you figure out the list of packages to install for making it run on Fedora, let us know, we'll add the instructions on the Download page.}
    sent: "2017-03-30T01:17:03.798Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dc5c347ea420cc421c1dba"
    text: {Fair enough, sounds like the language currently has a lot of growing to go through :)}
    sent: "2017-03-30T01:15:32.586Z"
    v: 1
    author: "5885b9e2d73408ce4f455bb6"
) #(
    id: "58dc5b9fb402a53211c79c75"
    text: {@jacobdufault I don't think it would be considered against Red's philosophy. However, the current compiler has been written to bootstrap Red. It will be replaced and thrown away for the Red 2.0. (To put things into perspective Red is currently at 0.6.2).^/^/The compiler has not been coded to be extensible, it's replacement will be much better structured, such as supporting plug-ins.}
    sent: "2017-03-30T01:13:03.256Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58dc5b8d8fcce56b20afdf0b"
    text: {I'm not planning on doing any work just yet, just exploring the language :). Though I wonder how much of a difference there would be between an llvm-ir emitter compared to x86/arm. Only real reason for doing such would be performance (ie, using red/system as a credible alternative to c/c++ in ie, games)}
    sent: "2017-03-30T01:12:45.956Z"
    v: 1
    author: "5885b9e2d73408ce4f455bb6"
) #(
    id: "58dc5a8d408f90be666d0aa3"
    text: {It would be a huge patch, yes? :^^) Before doing the work, make a good case for it. What is the big win? Red contains its entire toolchain today, and size is important. Do you think it could be embedded entirely in Red, and how much size do you think it would add?}
    sent: "2017-03-30T01:08:29.394Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc5a038e4b63533d7953f0"
    text: {Do you know if such a thing would be considered against red's philosophy (ie, patches would be rejected)?}
    sent: "2017-03-30T01:06:11.008Z"
    v: 1
    author: "5885b9e2d73408ce4f455bb6"
) #(
    id: "58dc585c8bb56c2d1158294a"
    text: "Not at this time. Early days."
    sent: "2017-03-30T00:59:08.687Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc571e08c00c092a2c9bdb"
    text: {any plans to have red be able to use external optimizers like llvm? ie, emit llvm ir or just plain c?}
    sent: "2017-03-30T00:53:50.278Z"
    v: 1
    author: "5885b9e2d73408ce4f455bb6"
) #(
    id: "58dc1d06f22385553decdfc7"
    text: {@red-first-user  it seems this one should do it: `yum install libstdc++.i686`}
    sent: "2017-03-29T20:45:58.556Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dc1cce8e4b63533d7866e6"
    text: "@maximvl I've got to go now. thanks a lot :)"
    sent: "2017-03-29T20:45:02.890Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1bd8f22385553decda8b"
    text: "unfortunately fedora is not mentioned"
    sent: "2017-03-29T20:40:56.213Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1bc84cb8d091733cf3b5"
    text: {(*) For Linux 64-bit distros, you need to install 32-bit supporting libraries. So, for Debian-based distros, install them using:^/^/    sudo apt-get install ia32-libs libc6-i386 libcurl3^/^/^/If you are using a Debian 7+ or Ubuntu 13.10+ version, you should use the multiarch way:^/^/    dpkg --add-architecture i386^/    apt-get update^/    apt-get install libc6:i386 libcurl3:i386^/}
    sent: "2017-03-29T20:40:40.311Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1bbf7ea420cc421b3239"
    text: {i've noticed on the red language download page this note:}
    sent: "2017-03-29T20:40:31.065Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1b65f22385553decd804"
    text: {maybe it's because i'm running a live distribution from an usb key?}
    sent: "2017-03-29T20:39:01.419Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1b4f8bb56c2d11573bcb"
    text: {bash: ./red-062: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory}
    sent: "2017-03-29T20:38:39.762Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1b038e4b63533d785e44"
    text: "what do you get as an output?"
    sent: "2017-03-29T20:37:23.892Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58dc1ae608c00c092a2bb8fc"
    text: "already done chmod u+x red-062"
    sent: "2017-03-29T20:36:54.787Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1ad508c00c092a2bb8b3"
    text: {maybe it's me, but I've already tried it (./red-062 on terminal)}
    sent: "2017-03-29T20:36:37.834Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1aae0e4137042ac3ca2d"
    text: "thanks :)"
    sent: "2017-03-29T20:35:58.433Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1a977ea420cc421b2d32"
    text: {@red-first-user hi and welcome, Red needs no installation, just download it from the website and run ;)}
    sent: "2017-03-29T20:35:35.080Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dc1a740e4137042ac3c8e0"
    text: "can anyone help?"
    sent: "2017-03-29T20:35:00.982Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1a6c8e4b63533d785c0f"
    text: {i'd like to know how to install red-062 on fedora 25}
    sent: "2017-03-29T20:34:52.421Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1a5708c00c092a2bb5ca"
    text: "I'm almost new to programming and linux"
    sent: "2017-03-29T20:34:31.286Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dc1a458e4b63533d785b2b"
    text: "hi everyone"
    sent: "2017-03-29T20:34:13.286Z"
    v: 1
    author: "58dc1a0ad73408ce4f54abe7"
) #(
    id: "58dbf833f22385553dec2e28"
    text: "lol! And, thank you to you both!"
    sent: "2017-03-29T18:08:51.385Z"
    v: 1
    author: "570eca21187bb6f0eadf5530"
) #(
    id: "58dbf7ec8bb56c2d1156919d"
    text: {And you will see Bolek always beats me by seconds when posting. Now he's creating a Red bot who will beat us both. :^^)}
    sent: "2017-03-29T18:07:40.675Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbf7b98bb56c2d115690f1"
    text: {@greglearns, http://www.rebol.com/docs/core23/rebolcore.html will give you an overview of the language fundamentals. One of the best ways to learn is to play, and ask questions here in https://gitter.im/red/help or https://gitter.im/red/red/welcome.}
    sent: "2017-03-29T18:06:49.046Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbf76c0e4137042ac32086"
    text: {@greglearns read Rebol docs, try examples in Red console and ask here. Or maybe start with asking here, there's always someone willing to help.}
    sent: "2017-03-29T18:05:32.790Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dbf6df8e4b63533d77afe5"
    text: {good point about getting familiar early. I looked at http://www.red-lang.org/, http://redprogramming.com/Home.html and all of the other links I can find on the web about learning it, and it sounds like the best way is to learn Rebol2. Any suggestions on best way to learn Red?}
    sent: "2017-03-29T18:03:11.154Z"
    editedAt: "2017-03-29T18:04:38.561Z"
    v: 2
    author: "570eca21187bb6f0eadf5530"
) #(
    id: "58dbf5b808c00c092a2af992"
    text: {By the time you get comfortable with it, 7.0 will probably be here :smile: }
    sent: "2017-03-29T17:58:16.174Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dbf5b28fcce56b20ae38a6"
    text: {@greglearns, as Bolek says, it's a good idea to get familiar. No deadline pressure that way. :^^) Red looks familiar in many ways, but is quite different under the hood, so it can take some time to ramp up, and there are a few gotchas that catch everyone when they start. Get those out of the way and you'll be in better shape to do real work when the time comes. }
    sent: "2017-03-29T17:58:10.118Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbf4edb52518ed4dbd8718"
    text: {@greglearns in the meantime you can get familiar with the language - there is lot of nice things already :smile: }
    sent: "2017-03-29T17:54:53.239Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dbf4848e4b63533d77a3d3"
    text: {@rebolek thanks for the welcome! and thank you for the info. Red looks so amazing -- I really want to use it. I think that I'll have to wait for 0.7 sadly.}
    sent: "2017-03-29T17:53:08.217Z"
    v: 1
    author: "570eca21187bb6f0eadf5530"
) #(
    id: "58dbf41b7ea420cc421a6e31"
    text: {@greglearns Welcome! @dockimbel, author of Red is also author of [Cheyenne web server](http://cheyenne-server.org/), so you can expect that Red would support such capabilities. However, not before 0.7.0, that will bring us full I/O support. Currently we have just limited I/O, not capable of writing web server.}
    sent: "2017-03-29T17:51:23.960Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dbf370ad849bcf42301e87"
    text: {I just discovered Red, and am greatly intrigued. To use it professionally, I'd need to use it on the server as an HTTP server (and not just as CGI scripts). Is there any activity in that area?}
    sent: "2017-03-29T17:48:32.343Z"
    editedAt: "2017-03-29T17:48:53.855Z"
    v: 2
    author: "570eca21187bb6f0eadf5530"
) #(
    id: "58dbb34f7ea420cc42190cd6"
    text: "Great :+1: "
    sent: "2017-03-29T13:14:55.687Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58dba3210e4137042ac16272"
    text: "@Phryxe Links fixed."
    sent: "2017-03-29T12:05:53.875Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58db9af6408f90be6669977c"
    text: {@Phryxe Thanks a lot for the report, we'll get that fixed asap.}
    sent: "2017-03-29T11:31:02.832Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58db914b408f90be66696854"
    text: {Contributions^/Quick-Test - Opens in same window^/SDL binding - Dead link^/ImageMagick binding - Dead link^/Float and String helping functions - Opens in same window^/Red bindings builder scripts - Dead link}
    sent: "2017-03-29T10:49:47.493Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58db779c4cb8d0917339eea5"
    text: {@dockimbel Fedora should have enabled it by default, so I think this should be good place to start.}
    sent: "2017-03-29T09:00:12.410Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58db6f38f22385553de99b40"
    text: {Could anyone point me out to a SELinux-enabled ISO to download, which can be easily set up and run as VM?}
    sent: "2017-03-29T08:24:24.057Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58db6ef508c00c092a285c56"
    text: "@x8x Thanks!"
    sent: "2017-03-29T08:23:17.592Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58db1b378e4b63533d73e194"
    text: {Ohh! I'm late to the party.. Congrats Team Red @qtxie @dockimbel on another awesome milestone! You are heroes! :smile: }
    sent: "2017-03-29T02:25:59.136Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58dabdff4cb8d091733727fd"
    text: {Ok can't get around the problem without an pc so i have to wait some days}
    sent: "2017-03-28T19:48:15.992Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58daaec47ea420cc4214e464"
    text: {The Problem to be more complicated i can't disable SELinux on that way}
    sent: "2017-03-28T18:43:16.316Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58daae2df22385553de69d1e"
    text: {reminded me on discussion about built-in documentation https://kite.com/}
    sent: "2017-03-28T18:40:45.711Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58daa2c2b402a53211c01c7f"
    text: {@Gwarks You might want to try this [easy workaround](https://blog.hostonnet.com/libphp5-so-cannot-enable-executable-stack-as-shared-object-requires-permission-denied), and this is the [deeper explanation](http://www.crypt.gen.nz/selinux/faq.html#CP.19). So it seems that we might be able to add an ELF section for our compiled libs to make SELinux happy.}
    sent: "2017-03-28T17:52:02.476Z"
    editedAt: "2017-03-28T17:56:35.001Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58daa1be08c00c092a251745"
    text: "Ok thanks"
    sent: "2017-03-28T17:47:42.561Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58daa1778bb56c2d1150d1fd"
    text: {Our toolchain cannot work on SELinux (which your Debian flavor seems to be using) without [additional](https://support.ceisoftware.com/hc/en-us/articles/202370087-Cannot-enable-executable-stack-as-shared-object-requires-Permission-denied) [tweaking](http://tatsuya-y.hatenablog.com/entry/2016/08/29/183331) by the user. Though, using the console app directly (cross-compiling it from another platform) should work fine. Rebol and R3 are just an interpreter in an executable (same as our "console" app), the `red` binary is a toolchain, which pre-builds some libraries used during the compilation process. As `red` cannot run by default on your platform, the console app cannot be built, so it requires cross-compilation in your specific case.}
    sent: "2017-03-28T17:46:31.834Z"
    editedAt: "2017-03-28T17:50:27.431Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da9fe68e4b63533d71d1ea"
    text: {Compiling libRed is done using: `red build libRed` and that works fine from a DOS prompt (just tested it). Your above command-line for building libRed is invalid. The MSDOS target means "Windows CLI", so it will redirect standard input/ouput to the system console (and will require a system console to run).}
    sent: "2017-03-28T17:39:50.383Z"
    editedAt: "2017-03-28T17:48:18.816Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da9f868fcce56b20a89263"
    text: {But on the other hand MS-DOS doesn't seem to target real MS-DOS}
    sent: "2017-03-28T17:38:14.793Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58da9f53b402a53211c0077b"
    text: "Ok other question libRed can't compile for MS-DOS"
    sent: "2017-03-28T17:37:23.224Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58da9ee54cb8d091733692d7"
    text: "Can run rebol and r3 but red fails"
    sent: "2017-03-28T17:35:33.968Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58da9ec58bb56c2d1150c3f4"
    text: "Tried Debian NoRoot on android"
    sent: "2017-03-28T17:35:01.423Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58da9e078e4b63533d71c8a7"
    text: {Never seen such error before... What OS are you using?}
    sent: "2017-03-28T17:31:51.936Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da9d5a8bb56c2d1150bbc5"
    text: "Did anyone knews what this means?"
    sent: "2017-03-28T17:28:58.938Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58da9d47b52518ed4db7b9b7"
    text: {root@localhost:/# /red^/Compiling compression library...^/*** Driver Internal Error: Script Error : Library error: /home/.red/crush-2017-3-26-60790.so: cannot enable executable stack as shared object requires: Permission denied^/*** Where: build-compress-lib^/*** Near:  [crush-lib: load/library filename^/crush-compress: make^/]}
    sent: "2017-03-28T17:28:39.689Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58da9b574cb8d09173367f21"
    text: {@Gwarks Android is not a supported target for libRed yet, it is scheduled for 0.6.4.}
    sent: "2017-03-28T17:20:23.925Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da9b3608c00c092a24f5ce"
    text: {Hi i tried to compile libRed for android using "red build libRed -t Android-x86" but i did not worked. I still need libc, lbm and libcurl when it try to link on android.}
    sent: "2017-03-28T17:19:50.997Z"
    v: 1
    author: "58da9a7cd73408ce4f545a8e"
) #(
    id: "58da7f178fcce56b20a7e465"
    text: {You can also make a macro to inline such things, be careful though... =)}
    sent: "2017-03-28T15:19:51.274Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58da7d568fcce56b20a7dcfa"
    text: "Heh, redifined above for `..`, works too ..."
    sent: "2017-03-28T15:12:22.418Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da7ca78e4b63533d7113a9"
    text: "Great! Really powerful stuff!"
    sent: "2017-03-28T15:09:27.872Z"
    v: 1
    author: "58da7a0dd73408ce4f5451ca"
) #(
    id: "58da7bcb4cb8d0917335d73a"
    text: {@ericguedespinto Another example:^/```lisp^/make-range: function [a b][^/^-list: make block! b - a^/^-i: a while [i <= b][^/^-^-append list i^/^-^-i: i + 1^/^-]^/^-list^/]^/->: make op! :make-range^/^/>> 2 -> 8^/== [2 3 4 5 6 7 8]^/```}
    sent: "2017-03-28T15:05:47.492Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da7b4b8bb56c2d1150036c"
    text: {@ericguedespinto Hey Eric, they are already there :)^/```^/red>> o: make op! func [x y] [x + y]^/== make op! [[x y]]^/red>> 1 o 2^/== 3^/```}
    sent: "2017-03-28T15:03:39.325Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da7aadb402a53211bf3baa"
    text: {Hi everybody! Can anyone tell me what the plans are for custom infix operators? I know that we can redefine one but will it be possible to declare a function as infix as well?  }
    sent: "2017-03-28T15:01:01.215Z"
    v: 1
    author: "58da7a0dd73408ce4f5451ca"
) #(
    id: "58da7833f22385553de577ab"
    text: {So no sockets, no tcp/udp stack, no other protocols ...}
    sent: "2017-03-28T14:50:27.477Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "58da78220e4137042abc5aa2"
    text: {Full IO is scheduled for 0.7.0. Right now we have so called simple-io, which is fine for reading/writing files and http(s)}
    sent: "2017-03-28T14:50:10.096Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da780108c00c092a2433c1"
    text: "https://trello.com/b/FlQ6pzdB/red-tasks-overview"
    sent: "2017-03-28T14:49:37.612Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da77978bb56c2d114feccf"
    text: {0.7 release will be focused on IO, members of the Red team can give more info on that}
    sent: "2017-03-28T14:47:51.363Z"
    editedAt: "2017-03-28T14:48:22.164Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da777fad849bcf422969c7"
    text: {Thanks for the pointer, at least I know where I need to start. My focus is definitely at the network level. For me that's where I've traditionally reached into rebol; quick client server architectures based on state-machines}
    sent: "2017-03-28T14:47:27.025Z"
    v: 1
    author: "58da70a8d73408ce4f544ec9"
) #(
    id: "58da77107ea420cc4213b16a"
    text: {I definitely do have rebol experience. Been using it on an off for years }
    sent: "2017-03-28T14:45:36.189Z"
    v: 1
    author: "58da70a8d73408ce4f544ec9"
) #(
    id: "58da76f0ad849bcf4229674c"
    text: {and, of course, if you have experience with Rebol - contributions are welcome :)}
    sent: "2017-03-28T14:45:04.242Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da76c58fcce56b20a7b29f"
    text: {@rmcilmoyle you might want to check roadmap to get an idea of overall state: http://www.red-lang.org/p/roadmap.html}
    sent: "2017-03-28T14:44:21.575Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da76c3b52518ed4db6ea01"
    text: {so maybe I'll need to roll my sleeves up a bit more than I thought. }
    sent: "2017-03-28T14:44:19.260Z"
    v: 1
    author: "58da70a8d73408ce4f544ec9"
) #(
    id: "58da768a8e4b63533d70f3b2"
    text: {by `neworking` I mean you can do only `http` queries for now}
    sent: "2017-03-28T14:43:22.455Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da76898bb56c2d114fe53e"
    text: "ok, that explains it definitely"
    sent: "2017-03-28T14:43:21.525Z"
    v: 1
    author: "58da70a8d73408ce4f544ec9"
) #(
    id: "58da766d8bb56c2d114fe4a6"
    text: {@rmcilmoyle Hi Roger, IO is in very basic state and networking is done via `curl` and we don't have Red code for protocols yet}
    sent: "2017-03-28T14:42:53.309Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da71e3b402a53211bf04d8"
    text: {I deceptively simple monitoring tool built in rebol that I figured red would be a better choice for...}
    sent: "2017-03-28T14:23:31.720Z"
    v: 1
    author: "58da70a8d73408ce4f544ec9"
) #(
    id: "58da71af8e4b63533d70d6bd"
    text: {This may well not be the forum; I've tinkered with Rebol for a long time and thought I'd move some code into Red yet all is network related and right from the start the most basic "open tcp://...." statement fails. Are network and protocols not supported ? }
    sent: "2017-03-28T14:22:39.146Z"
    v: 1
    author: "58da70a8d73408ce4f544ec9"
) #(
    id: "58da5595408f90be66642236"
    text: {@Oldes As the error message says, you cannot compile that (though, might be allowed for `return` and `exit` out of a function's body in the future). Anyway, that's asking for trouble. ;-)}
    sent: "2017-03-28T12:22:45.447Z"
    editedAt: "2017-03-28T12:23:05.079Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da436f0e4137042abb40f2"
    text: {I had hopes to get the GTK branch documented a bit so other enthousiasts could join the development of the GTK branch without the need to do all research over.}
    sent: "2017-03-28T11:05:19.711Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58da42a98fcce56b20a6acf3"
    text: {@9214 ^/> GTK backend development is stalled because major contributor has disappeared - that's what I heard from Nenad^/^/Correct. I asked Thiago if he wanted to write a short article about his work on GTK support for Red and he was very enthousiast about it, but all of a sudden he did not show up anymore. He has been away since about november 7th. I tried to contact him using LinkedIn, but that has not resulted in contact either. So anybody have contacts in Manaus Brazil, let them hang up a 'missing poster' sign.}
    sent: "2017-03-28T11:02:01.112Z"
    editedAt: "2017-03-28T11:02:10.327Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58da3e4a408f90be6663b00b"
    text: {@dockimbel Just noticed, that this code is not possible to compile, is it ok?^/```^/Red []^/ctx: context [^/^-return: none^/]^/```^/```^/Compiling R:\test.red ...^/*** Compilation Error: attempt to redefine a keyword: return ^/*** in file: R:\test.red^/*** near: [none]^/```}
    sent: "2017-03-28T10:43:22.900Z"
    editedAt: "2017-03-28T10:44:37.692Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da38c18fcce56b20a68065"
    text: {I can't tell, we experience issues accessing the web on a daily basis from here. ;-)}
    sent: "2017-03-28T10:19:45.127Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da38368fcce56b20a67e80"
    text: {offtopic: is it just me who is experiencing problems to post messages on Gitter recently?}
    sent: "2017-03-28T10:17:26.169Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da2e47ad849bcf4227fe31"
    text: "anyway, time will tell ;)"
    sent: "2017-03-28T09:35:03.299Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da2e448bb56c2d114e731f"
    text: {@kless Currently Red code performs in the same class as other scripting languages, like Rebol, Ruby, Python... Red/System currently performs about 4-6 times slower than C. FYI, there are no optimization layers for now in Red and Red/System compilers, so there is a lot of space for progress. There are many ways to improve raw performances, but there are not a concern for now.}
    sent: "2017-03-28T09:35:00.657Z"
    editedAt: "2017-03-28T09:36:08.071Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da2e2aad849bcf4227fdd2"
    text: {GTK backend development is stalled because major contributor has disappeared - that's what I heard from Nenad}
    sent: "2017-03-28T09:34:34.429Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da2dd44cb8d0917334575b"
    text: "(this is what I do)"
    sent: "2017-03-28T09:33:08.938Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da2dc94cb8d0917334573a"
    text: {@kless you can play with Windows one using Wine, it works very well}
    sent: "2017-03-28T09:32:57.280Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da2daa8bb56c2d114e70e4"
    text: {It could be a great language for GUIs. I hope that the GUI for Linux is ready for this year to be able to play with it.}
    sent: "2017-03-28T09:32:26.395Z"
    v: 1
    author: "57038ade187bb6f0eaddeca9"
) #(
    id: "58da253aad849bcf4227dae1"
    text: {@kless I think it depends on what you are writing. There is no GC yet, so the memory usage usually grows in the program's lifetime.}
    sent: "2017-03-28T08:56:26.380Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58da24058fcce56b20a61f93"
    text: {@kless as far as I remember R/S is 3-4 times slower than C (w/o any optimizations), can't tell much about high-level Red.}
    sent: "2017-03-28T08:51:17.259Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da23880e4137042abaada2"
    text: {How is the performance of Red? A program built in Red, with which language could be compared respect to speed? And respect to usage of memory?}
    sent: "2017-03-28T08:49:12.592Z"
    v: 1
    author: "57038ade187bb6f0eaddeca9"
) #(
    id: "58da1f2bf22385553de3bcd4"
    text: {@jocko-jc I have exactly the same impression. While 0.6.2, I am hesitant to refer to Red as an alpha. For me, it is not even a beta - I regard it being a full product, which is just missing on some features :-)}
    sent: "2017-03-28T08:30:35.005Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da1dbdf22385553de3b420"
    text: { @dockimbel Yes, i remember ! The amount of achievements so far is amazing, and while still in alpha stage, red is already usable, and more achieved than rebol on several points !}
    sent: "2017-03-28T08:24:29.123Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "58da1bd88fcce56b20a5fc28"
    text: {In my favourite Alien movie sense - we are Terraforming :-)}
    sent: "2017-03-28T08:16:24.806Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da1bc6ad849bcf4227abb9"
    text: {What I am glad for is, that with newcomers, we don't get only Red beginners, but I can see new gurus are forming :-)}
    sent: "2017-03-28T08:16:06.250Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da1ab68e4b63533d6f3378"
    text: {@jocko-jc Thank you Joseph. Do you remember when I proposed launching a new Rebol-like language at the meetup with some other Rebolers in Paris at La Cantine, around May, 2010. So much done since then! ;-) View for macOS should land on master tomorrow, we want to finish some fixes for libRed first. }
    sent: "2017-03-28T08:11:34.769Z"
    editedAt: "2017-03-28T08:12:14.746Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da19d308c00c092a226a94"
    text: "and , of course, integrating 'view for osx"
    sent: "2017-03-28T08:07:47.735Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "58da1998b402a53211bd551e"
    text: {many thanks to you, Doc, and your team, for the great work already done. Still following with much interest the development of red. The 'call utility of this release is great. Waiting the finalization of 'now (date).}
    sent: "2017-03-28T08:06:48.071Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "58da03dd8e4b63533d6ed069"
    text: {I have to say that the great support we get from you guys, in the Red community, is the best reward we can get from all the hard work and short nights we put into this project. We had a great, friendly, Rebol community 15 years ago, with great discussions, knowledge sharing (I learned a lot from the ML posts back then) and unlimited amount of help with code. When I read some discussions here and see kind help to newcomers by both old timers and new users who recently mastered the language, it really fills me with joy, because it feel like the great old days are back again. Thank you so much for that. Cheers! ;-)}
    sent: "2017-03-28T06:34:05.783Z"
    editedAt: "2017-03-28T06:36:02.920Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d9f1787ea420cc42114054"
    text: {This time, the HN post did nicely. Even all comments are quite possitive. Gregg and others did a great support there too!}
    sent: "2017-03-28T05:15:36.538Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d9e8154cb8d09173334546"
    text: {It's a common practice on HN to re-post several times a popular news which didn't make it to the front page.}
    sent: "2017-03-28T04:35:33.502Z"
    editedAt: "2017-03-28T04:35:42.824Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d97c1f408f90be6660bbd1"
    text: {isn't that posted for at least third time already? :-)}
    sent: "2017-03-27T20:54:55.929Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d979a78e4b63533d6cdba3"
    text: "let's see if we can do #1 with a minor release"
    sent: "2017-03-27T20:44:23.030Z"
    editedAt: "2017-03-27T20:49:21.463Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d9798e8bb56c2d114bd6d2"
    text: "yep :)"
    sent: "2017-03-27T20:43:58.475Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d9777c08c00c092a20085d"
    text: "(3rd place??!!)"
    sent: "2017-03-27T20:35:08.634Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58d976958e4b63533d6cca6f"
    text: "we did it to the first page on HN :clap: "
    sent: "2017-03-27T20:31:17.293Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d953be0e4137042ab74ff3"
    text: "Brain lock :smile: "
    sent: "2017-03-27T18:02:38.217Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d953b24cb8d0917330fd24"
    text: "happens to everybody, haha"
    sent: "2017-03-27T18:02:26.605Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d9538f4cb8d0917330fcb5"
    text: "lol... I'm stupid"
    sent: "2017-03-27T18:01:51.452Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d9533e408f90be665ff23a"
    text: "oh yeah!  lol   :smile: "
    sent: "2017-03-27T18:00:30.547Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d951b74cb8d0917330f237"
    text: "@gltewalt now you are calling `p` inside `p` :D"
    sent: "2017-03-27T17:53:59.347Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d9513a08c00c092a1f4ff1"
    text: {It doesn't matter.^/```^/>> p: func [val] [prin p]^/== func [val][prin p]^/>> p "ok"^/*** Script Error: p is missing its val argument^/*** Where: p^/>> type? p "ok"^/*** Script Error: p is missing its val argument^/*** Where: p^/>> type? (p "ok")^/*** Script Error: p is missing its val argument^/*** Where: p^/```}
    sent: "2017-03-27T17:51:54.373Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d94ff7f22385553de075cd"
    text: {in the last one you are executing `p` without argument, what do you expect?}
    sent: "2017-03-27T17:46:31.416Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58d94f747ea420cc420eb16f"
    text: {Seems like some behavior has changed? ^/```^/>> p: func [val] [prin p]^/== func [val][prin p]^/>> type? 'p^/== word!^/>> type? :p^/== function!^/>> type? p^/*** Script Error: p is missing its val argument^/*** Where: p^/```}
    sent: "2017-03-27T17:44:20.624Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d94bec8fcce56b20a2b7fc"
    text: ":D"
    sent: "2017-03-27T17:29:16.524Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d94b96408f90be665fc9a0"
    text: {On Reddit, someone posted a link to the Blue language. I hadn't heard of it, so I scanned the doc real quick. Not active anymore, and nothing big jumped out at me, but it has an `|` operator that I implemented in Red real quick and added as a comment. Paste into the console.^/```^/a-or-b: function [a b][any reduce [a b]]^/|: make op! :a-or-b^/1 | 2^/none | 2^/set [w x y z] [none none none 4]^/w | x | y | z^/```}
    sent: "2017-03-27T17:27:50.783Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d944eb8e4b63533d6bc3f8"
    text: {On `split-path`, long ago there was quite some discussion on the R2 behavior WRT `rejoin`. That is, should `split-path` produce values that recreate the original when rejoined. split-path+rejoin test-case results where that doesn't hold true in Red:^/```^/input       output^/%foo        %./foo^/%""         %./^/%/          %/none^/%.          %./none^/%./         %./none^/%./.        %././^/%..         %../none^/%../        %../none^/%../..      %../../^/%foo/..     %foo/../^/%foo/.      %foo/./^/%foo/../.   %foo/.././^/http://..   http://../^/http://.    http://./^/http://../. http://.././^/```^/It looks like Red matches R2 behavior. The main differences between that and `rejoin` consistency is that you'll get an empty file (`%""`) rather than none at times, and trailing `%.` or `%..` don't get dirized.}
    sent: "2017-03-27T16:59:23.966Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d94145b402a53211b9e6b7"
    text: {Yay for bug fixes that make you happy!^/^/Maarten Koopmans might help organize a gathering, if he's not somewhere else working.}
    sent: "2017-03-27T16:43:49.709Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d930288bb56c2d114a565e"
    text: "Yes that was impressive."
    sent: "2017-03-27T15:30:48.706Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d93024f22385553ddfd2f8"
    text: {> Excel pong demo made my friend to look into Red, claiming that "how is that possible with so few of line of code"?}
    sent: "2017-03-27T15:30:44.533Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d8f6477ea420cc420cefa7"
    text: {Well, yes, we don't have Apache module yet and browser plugins are moot. The question is, if Apache on server is still the way to go nowadays ...}
    sent: "2017-03-27T11:23:51.132Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8f6158fcce56b20a10a13"
    text: {Integration-wise Red really seems like everything we wished for during the old Rebol days ...}
    sent: "2017-03-27T11:23:01.475Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8f5e7b402a53211b8682f"
    text: {Excel pong demo made my friend to look into Red, claiming that "how is that possible with so few of line of code"? :-)}
    sent: "2017-03-27T11:22:15.263Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8f5a10e4137042ab5614c"
    text: "A new high-level FFI (vs current low-level FFI)."
    sent: "2017-03-27T11:21:05.561Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8f56cad849bcf42228909"
    text: {@dockimbel for 0.6.3 we can see stuff like `struct! library! ref!` and extended `load/library`. What is that going to be mostly about? To allow loading our wrappers dynamically in runtime, or just a prerequisite to support some mechanisms like FFI (as it was mentioned here in the past)? The thing is, that we can mostly wrap anything nowadays, we just can't postpone its loading. So is that mostly to allow the DLL usage during the app runtime?}
    sent: "2017-03-27T11:20:12.346Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8f49b08c00c092a1d7a49"
    text: {That bug seems to have been caused by a copy/paste of a few lines of code, from a place where they were protected by some tests, to other places where it was not the case anymore. Nasty one.}
    sent: "2017-03-27T11:16:43.624Z"
    editedAt: "2017-03-27T11:17:02.621Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8f1a8ad849bcf422278a4"
    text: {@maximvl Weird Parse behavior in `split-path` on second call (hinting at a race condition). The bug resulted in backtracking on a wrong position in the parsed series. The tests were not exhibiting the conditions requires to produce such error. We will remedy that too.}
    sent: "2017-03-27T11:04:08.871Z"
    editedAt: "2017-03-27T11:06:18.817Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8efa5408f90be665deb1b"
    text: "I see"
    sent: "2017-03-27T10:55:33.979Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8ef668e4b63533d6a16c4"
    text: {They were investigating bug in split-path, which uses parse internally ... }
    sent: "2017-03-27T10:54:30.805Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8eee98e4b63533d6a14f6"
    text: "automatic tests or ?"
    sent: "2017-03-27T10:52:25.946Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8eee0ad849bcf42226a7e"
    text: {@dockimbel could you give more insights on how did you found the parse bug?}
    sent: "2017-03-27T10:52:16.503Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8ee3f8e4b63533d6a11da"
    text: {I went into contact with our LED screen vendor, actually with 3 companies and they all seem to be switched from Skype to WhatsApp}
    sent: "2017-03-27T10:49:35.403Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8ee0ff22385553dde7b99"
    text: {I would be glad if Baidu would provide support, no need for Google. ;-)}
    sent: "2017-03-27T10:48:47.305Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8edd18fcce56b20a0e363"
    text: {@pekr `-t` currently forces release mode (we might need to tweak that), but anyway, the GUI console cannot be compiled using libRedRT (we mentioned that many times here already), as it is deeply intertwined with the runtime library code. The new console and GUI console engines in 0.6.3 are fixing that by rewritting the GUI console entirely in pure Red (no R/S).}
    sent: "2017-03-27T10:47:45.410Z"
    editedAt: "2017-03-27T10:50:49.093Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8edc8b402a53211b843b8"
    text: {When I started to read your above sentence, I though - OK, now Google is going to back-up Red project!}
    sent: "2017-03-27T10:47:36.869Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8ed91b402a53211b84282"
    text: {Sometimes even some simple things make us happy :-)}
    sent: "2017-03-27T10:46:41.657Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8ed364cb8d091732efd8a"
    text: {As a gift received for the new release, while investigating a strange bug in `split-path` today with Qingtian, I found a really nasty buffer overflow bug in Parse, which would be triggered only on deep Parse recursions. It made me so happy to have found such (actually stupid) bug, that I felt like sharing it here. :gift:  :)}
    sent: "2017-03-27T10:45:10.743Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8ebcfb52518ed4dafec84"
    text: {tried with `rc "-c -t Windows %environment/console/gui-console.red"`, as well as with `-r`switch, but the build time is the same - over 50 secs here ...}
    sent: "2017-03-27T10:39:11.675Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8eb6aad849bcf42225d42"
    text: {@pekr Yes, it works fine when compiling from sources.}
    sent: "2017-03-27T10:37:30.934Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8ead38fcce56b20a0d774"
    text: {@dockimbel should fast compilation work even using `rc`R2 function, or should I finally get into using Red executable? :-)}
    sent: "2017-03-27T10:34:59.630Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8e422ad849bcf42223994"
    text: {Just an internal feature for now, objects have a class ID internally in Red. If it can be reliable, we might make that an official feature in the future.}
    sent: "2017-03-27T10:06:26.542Z"
    editedAt: "2017-03-27T10:08:22.715Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8e2e0408f90be665db0ac"
    text: {`Returns the class ID of an object.`- whatever it means :-)}
    sent: "2017-03-27T10:01:04.508Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8e2b2408f90be665dafcd"
    text: {and I suppose it can be auto generated based on `help` data}
    sent: "2017-03-27T10:00:18.441Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8e27e4cb8d091732ece3d"
    text: {yep, not clear at all, would be good to have an explanation for each added word in the release notes ;)}
    sent: "2017-03-27T09:59:26.837Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8e22ab52518ed4dafbea1"
    text: {related to objects. It returns some integer. Maybe some kind of internal handle. Could be used to check, what is the origin of object ....}
    sent: "2017-03-27T09:58:02.909Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8e036b402a53211b80507"
    text: "what are these new `class` and `class-of` about?"
    sent: "2017-03-27T09:49:42.449Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8de5cb52518ed4dafae67"
    text: {Ooh release! What a nice surprise! I've been a bit away from red learning other stuff}
    sent: "2017-03-27T09:41:48.690Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d8de4508c00c092a1d18a7"
    text: {@metaperl Now you're thinking ;) yes, search in this chat for "qemu" and "webassembly"}
    sent: "2017-03-27T09:41:25.617Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d8cfadf22385553dddef97"
    text: {... and say he is welcomed to join Red, if time permits :-)}
    sent: "2017-03-27T08:39:09.563Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8ceba08c00c092a1cccd8"
    text: {@dockimbel give Carl best wishes from the Red community when you meet him next time :)}
    sent: "2017-03-27T08:35:06.724Z"
    editedAt: "2017-03-27T08:35:23.126Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8c4f2408f90be665d2c48"
    text: {Congrats for reaching a great milestone! I'm looking forward to digging through this blog post}
    sent: "2017-03-27T07:53:22.534Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d8c2b408c00c092a1c97f7"
    text: {I guess it was bad timing, 2 years earlier and everything would have been different (though, probably several incompatible forks would have emerged anyway).}
    sent: "2017-03-27T07:43:48.589Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8c2908fcce56b20a0281b"
    text: {Red is imo on a good track. We can see "new blood" joining in, and it feels really refreshing ... and maybe even inspiring - we've got Macros, right? Well, if it has anything in common with our Red Lispers and their influence here ...}
    sent: "2017-03-27T07:43:12.906Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8c24b7ea420cc420c08f4"
    text: {I always wondered, how that might happen. We raved so much about Rebol not being open sourced, and once it is, we lose ppl like Andreas or BrianH ...}
    sent: "2017-03-27T07:42:03.449Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8c21f4cb8d091732e3c79"
    text: {Andreas seems to have no interest in Rebol world anymore.}
    sent: "2017-03-27T07:41:19.355Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8c20c08c00c092a1c942b"
    text: {We should organise one in Brno or Vienna and get even Andreas, Robert and Ladislav there. Possibly others. }
    sent: "2017-03-27T07:41:00.642Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8c2018e4b63533d694c82"
    text: {I met him many times already. But if you mean this year, yes.}
    sent: "2017-03-27T07:40:49.015Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8c1e68e4b63533d694c15"
    text: "Yes ... you still plan to meet with Carl one day?"
    sent: "2017-03-27T07:40:22.429Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8c1beb52518ed4daf25cb"
    text: {Live meetings are always more interesting and informative.}
    sent: "2017-03-27T07:39:42.761Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8c1578bb56c2d11484924"
    text: {There was also Kaj and Bas in Netherlands and Doc visited  them too, IIRC. Not sure, how much of a userbase is there nowadays. Last time the Redcon was held in Brno/Czechia - me, Oldes, Rebolek, Cyphre and Andreas and of course Doc :-)}
    sent: "2017-03-27T07:37:59.839Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8c150f22385553dddaa9d"
    text: {If we have some local organizer in NL, why not. Though, Kaj seems to be gone.}
    sent: "2017-03-27T07:37:52.424Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8c105b52518ed4daf226c"
    text: {well, Netherlands - always wanted to visit that country. Ma most favourite bands are from Netherlands (The Gathering, Anneke van Giersbergen, Within Temptation, EPICA) :-)}
    sent: "2017-03-27T07:36:37.058Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8c005b402a53211b76c97"
    text: {haha, I'd definitely attend one in EU, preferably the Netherlands ;)}
    sent: "2017-03-27T07:32:21.159Z"
    editedAt: "2017-03-27T07:34:56.529Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58d8bfb28e4b63533d6941aa"
    text: {Not sure if 0.7.0 comes this year (2017), but maybe we should start to plan some Redcons for fall of 2018? There is already so much good stuff in there and it will get even better ;-)}
    sent: "2017-03-27T07:30:58.162Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8bf3ab52518ed4daf1ac3"
    text: "@maximvl Java bridge."
    sent: "2017-03-27T07:28:58.450Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8bf35408f90be665d136a"
    text: {I am eager to see, how is View going to perform on Android (ARM), once there :-)}
    sent: "2017-03-27T07:28:53.249Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8bec67ea420cc420bf998"
    text: "so how do we plan to go for fully-featured apps?"
    sent: "2017-03-27T07:27:02.596Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8be7b4cb8d091732e2c25"
    text: {@maximvl `Android` target compiles to executables directly. So you can't have a GUI that way, but it should run fine from an Android terminal (modulo eventual bugs/regressions). Natives can only access native libs. In order to access the Android API in Java, you need a JNI bridge.}
    sent: "2017-03-27T07:25:47.520Z"
    editedAt: "2017-03-27T07:27:12.687Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8be2db402a53211b7640e"
    text: {I wonder if natives still have access to Android systems & frameworks}
    sent: "2017-03-27T07:24:29.212Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8be117ea420cc420bf706"
    text: {@dockimbel but what we are compiling to is not APK, it's a native, right?}
    sent: "2017-03-27T07:24:01.956Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8bbe28e4b63533d69326b"
    text: {I just saw a new Python tool which compiles 10M hello worlds for Android :D}
    sent: "2017-03-27T07:14:42.801Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8bbcdad849bcf422175b0"
    text: {good, I just was wondering about the size of native compiled binary}
    sent: "2017-03-27T07:14:21.780Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8bb6bb52518ed4daf0a3b"
    text: {"hello world with view" The current View engine is not supported on Android, only the simple prototype we built two years ago in the android branch could work. 0.6.4 is for bringing the View engine to Android, and improve the ARM support (as it is a bit lagging behind for now).}
    sent: "2017-03-27T07:12:43.280Z"
    editedAt: "2017-03-27T07:13:25.348Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8bb357ea420cc420be826"
    text: "Did you compile in release mode (`-r`)?"
    sent: "2017-03-27T07:11:49.215Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8bb18ad849bcf4221728c"
    text: "nope, just 6.2 release binary"
    sent: "2017-03-27T07:11:20.801Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8bacc8fcce56b20a00a23"
    text: "@maximvl You compiled with the android branch?"
    sent: "2017-03-27T07:10:04.326Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8baab8e4b63533d692cd5"
    text: {@dockimbel what is the state of Android compiler? It compiled me hello world with view, but when I try to run the binary on device it says "only position independent executables (PIE) are supported"}
    sent: "2017-03-27T07:09:31.732Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8b6fd0e4137042ab44eaa"
    text: "@xqlab Thanks. :+1: "
    sent: "2017-03-27T06:53:49.733Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8b5a4f22385553ddd79bb"
    text: "cudos to Red and the team"
    sent: "2017-03-27T06:48:04.905Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "58d8860b408f90be665c4451"
    text: "@greggirwin You have full permissions there."
    sent: "2017-03-27T03:24:59.222Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d88348408f90be665c397f"
    text: "Maybe a Red bot listening in did it. :^^)"
    sent: "2017-03-27T03:13:12.225Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d88335f22385553ddcccc6"
    text: {Not me, must have been Peter. I don't think I have write permissions there.}
    sent: "2017-03-27T03:12:53.351Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d88314b402a53211b68df4"
    text: {@greggirwin Oh I see you fixed it already, I didn't refresh my page. Thank you!}
    sent: "2017-03-27T03:12:20.851Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d8828c8e4b63533d685d1f"
    text: {@dockimbel "arose" sounds better to my eye, or looks better to my ear.}
    sent: "2017-03-27T03:10:04.351Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d880a77ea420cc420b19cd"
    text: {@maximvl Unfortunately, there is not much we can do for some (minor) AV vendors which have badly tuned heuristics in their product, and not taken care seriously about our reports. I guess we can just keep sending them reports about false positive until they get bored and do something about it. ;-)}
    sent: "2017-03-27T03:01:59.424Z"
    editedAt: "2017-03-27T03:03:29.491Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d87ff0b402a53211b684cc"
    text: {@tanstaaf1 I'm unsure about the right version of the verb. It seems "arised" is [in use](https://en.wiktionary.org/wiki/arised). Could any other native speaker confirm which version is the right one?}
    sent: "2017-03-27T02:58:56.592Z"
    editedAt: "2017-03-27T02:59:45.684Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d87fa8b402a53211b683cb"
    text: "@nc-x Thank you!"
    sent: "2017-03-27T02:57:44.967Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d87cfd08c00c092a1ba0d5"
    text: "Congrats on the release"
    sent: "2017-03-27T02:46:21.397Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d84be2ad849bcf421fdd9a"
    text: {Also https://www.reddit.com/r/programming/comments/61n2zf/red_programming_language_062_libred_and_macros/}
    sent: "2017-03-26T23:16:50.232Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d84b678bb56c2d1146a1d0"
    text: {Please, be nice to https://news.ycombinator.com/item?id=13962267}
    sent: "2017-03-26T23:14:47.077Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d83cfb408f90be665b374c"
    text: {@dockimbel btw, about false positives on antiviruses, did situation improved or was release binary manually added again? I see only few complains here: https://www.virustotal.com/en/file/2319797046bc653e8ac05a7daf4f44aef37e9e73ae65c831302f5ba5dd41987b/analysis/1490566210/}
    sent: "2017-03-26T22:13:15.748Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d83426ad849bcf421f865c"
    text: {Thanks for the clear description of what's new in 0.6.2, it's impressive! }
    sent: "2017-03-26T21:35:34.580Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58d819c78bb56c2d1145dcd9"
    text: {> 0.6.3 was advancing at the same time, is now almost ready, and will be merged into master in a couple of days (if you happen to have a Mac, it contains the macOS GUI backend for Red!). As soon as 0.6.3 is out, 0.7.0 will start (full async I/O)^/> Yay! :dancers: :clap: ^/^/[I can't resist](https://www.youtube.com/watch?v=PUIa7GXGKM8) :dancer: }
    sent: "2017-03-26T19:43:03.674Z"
    editedAt: "2017-03-26T19:43:18.197Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d80f027ea420cc42096f56"
    text: {>0.6.3 was advancing at the same time, is now almost ready, and will be merged into master in a couple of days (if you happen to have a Mac, it contains the macOS GUI backend for Red!). As soon as 0.6.3 is out, 0.7.0 will start (full async I/O)^/^/^/Yay! :dancers: :clap: }
    sent: "2017-03-26T18:57:06.232Z"
    editedAt: "2017-03-26T18:57:16.656Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d80ead408f90be665a7528"
    text: ":thumbsup:  for the release!"
    sent: "2017-03-26T18:55:41.391Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58d80a127ea420cc420954f2"
    text: {@dockimbel Don't know if it is even worth your time to fix a grammar typo in the release announcement, but you use a word "arised" in the first paragraph and I think correct English would be "arose".   Apologize for distracting you with such a little thing, but your English in general is quite elegant - better than mine, and I'm native - so I thought I'd point it out.}
    sent: "2017-03-26T18:36:02.864Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58d80a08408f90be665a5bca"
    text: {@tanstaaf1 Thanks! Well, it is indeed a big challenge and a huge work, but step by step, we're getting there. ;-)}
    sent: "2017-03-26T18:35:52.986Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d7fda57ea420cc42091817"
    text: {We could use it to obfuscate things, but probably not the idea behind it. :^^)}
    sent: "2017-03-26T17:43:01.734Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d7fd7bb52518ed4dac38cb"
    text: "ah, I see"
    sent: "2017-03-26T17:42:19.855Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7fd588e4b63533d664d84"
    text: {But the func itself is not affected if you mod it. Source is changed though.}
    sent: "2017-03-26T17:41:44.398Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d7fd3a8e4b63533d664cd6"
    text: "@greggirwin looks good in 6.2"
    sent: "2017-03-26T17:41:14.178Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7fd1f8bb56c2d11455406"
    text: {```^/>> probe spec-of :test-fn^/["Doc" a "AA" b [block!] c [string!] "CC" return: [integer!] "Return doc string" /local x y]^/== ["Doc" a "AA" b [block!] c [string!] "CC" return: [integer!] "Return doc string" ...^/>> system/version^/== "0.6.2"^/```}
    sent: "2017-03-26T17:40:47.716Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7fcf75982df9373add17e"
    text: {@greggirwin Yes,  for now, direct access is permitted. We might add control over such feature through a future extended version of the `secure` dialect.}
    sent: "2017-03-26T17:40:07.878Z"
    editedAt: "2017-03-26T17:41:05.763Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d7f4cb4cb8d091732b3082"
    text: {Not related to 0.6.2, but working on a new `help` and am a bit confused. `spec-of/body-of` don't return a copy of what they reflect. Is that by design. ^/```^/>> test-fn: func ["Doc" a "AA" b [block!] c [string!] "CC" return: [integer!] "Return doc string" /local x y ][print [a b c]]^/== func ["Doc" a "AA" b [block!] c [string!] "CC" return: [integer!] "Return doc string" /local x y][print [a b c]]^/>> test-fn 'a [2] "c"^/a 2 c^/>> clear spec-of :test-fn^/== []^/>> test-fn 'a [2] "c"^/a 2 c^/>> source test-fn^/test-fn: func [][print [a b c]]^/>> spec-of :test-fn^/== []^/```}
    sent: "2017-03-26T17:05:15.522Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d7f2d4ad849bcf421e6a84"
    text: {@dockimbel @qtxie etal. THANKS and congrats!  You guys seem superhuman to me; or certainly clear enough you are on a great mission!  I would label what you are doing as "heroic" and I think that is a legitimate use of the word. Anyway, thank you for your creation.}
    sent: "2017-03-26T16:56:52.658Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58d7e9660e4137042ab1322f"
    text: "Go Team Red! Congratulations on another release."
    sent: "2017-03-26T16:16:38.279Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d7e908408f90be6659d035"
    text: {@metaperl, yes, there are lots of ways to look at things. RT had an app system call IOS that was sort of a mini desktop browser for reblets.^/^/Thanks @maximvl, anxious to see yours.}
    sent: "2017-03-26T16:15:04.406Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d7e2f4b402a53211b41dee"
    text: ":clap: great job Red team!"
    sent: "2017-03-26T15:49:08.978Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d7dd90b402a53211b40939"
    text: "got it, didn't know about `/extern`, thanks!"
    sent: "2017-03-26T15:26:08.811Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7dd69408f90be66599e02"
    text: {@maximvl I don't see any weirdness in your above code. It works as intented, and yes, using `function` means been aware of how it works. In your case, you want `system` to be excluded from the local context, so you should use the `/extern` refinement:^/```lisp^/>> f: function [/extern system] [s: [system: true user: false] system/build]^/== func [/local s user][s: [system: true user: false] system/build]^/```}
    sent: "2017-03-26T15:25:29.203Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d7da26408f90be665991f4"
    text: {I understand that it goes deep into body and binds every set-word, thus one can rebind something without realizing it}
    sent: "2017-03-26T15:11:34.381Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7d9a40e4137042ab0f66f"
    text: "@dockimbel is this also a known thing?"
    sent: "2017-03-26T15:09:24.061Z"
    editedAt: "2017-03-26T15:09:29.293Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7d98df22385553dda39ef"
    text: {```^/>> f: function [] [s: [system: true user: false] system/build]^/== func [/local s system user][s: [system: true user: false] system/b...^/>> f^/*** Script Error: path system/build is not valid for none! type^/*** Where: f^/```}
    sent: "2017-03-26T15:09:01.584Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58d7d9240e4137042ab0f4b8"
    text: {I also just found wierd behavior of `function` word, will test it on new binaries as well}
    sent: "2017-03-26T15:07:16.567Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7d8ab5982df9373ad3cc6"
    text: "great, will test my scripts!"
    sent: "2017-03-26T15:05:15.074Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7d86108c00c092a19155e"
    text: {FYI, the 0.6.2 binaries are out. The blog article should follow in about an hour. In the meantime, please test the binaries, in case we let a regression pass.}
    sent: "2017-03-26T15:04:01.589Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d7c98e4cb8d091732a7d84"
    text: {Actually something like [JSLinux](http://bellard.org/jslinux/) that ran X-Windows would elimminate the need for webapps. You would just authenticate the user and then move them over to a Linux/X-windows session}
    sent: "2017-03-26T14:00:46.359Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d7c3ff0e4137042ab09fc5"
    text: {@greggirwin very nice! I'm working on something similar for funcs & values}
    sent: "2017-03-26T13:37:03.013Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7c2258bb56c2d1144722c"
    text: {Actually I woke up with a revelation: there is no need for webapps. Just write a desktop app and provide a web interface to the desktop. Have you all seen QEMU - http://www.qemu-project.org/}
    sent: "2017-03-26T13:29:09.754Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d71b937ea420cc4206217f"
    text: {And while it will take some work to add a web back end, Red chose to solve some much harder problems first. That has kept it from being pigeon-holed and lost in the sea of others in that area, but also makes people ask about its web future.}
    sent: "2017-03-26T01:38:27.297Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d71b0a8e4b63533d634cf0"
    text: {@geekyi, I think it's a common belief that new languages will be web oriented, because so many are. SO's annual developer survey has a lot of info in it. It's great that they do that. Not that we don't know the web is where people live, but the trends in different areas aren't always visible.}
    sent: "2017-03-26T01:36:10.968Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d6f2ce5982df9373aa5c57"
    text: {Probably using the red plugin for your favorite IDE is the easy and fast way right now.. Or writing one of it doesn't exist ;)}
    sent: "2017-03-25T22:44:30.523Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d6f03941a045e94dc91cfa"
    text: {@metaperl red is probably more alpha than you think. But why nodejs.. Why not directly? If you're curious tho.. There's been attempts like world, geomol, boron already in the rebol world. Red will probably web assembly}
    sent: "2017-03-25T22:33:29.461Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d6e9378e4b63533d6292bf"
    text: {What we can do, is use Red more effectively. The simple LiveCode example and the idea of *-lab tools give us an interactive place to learn and experiment. Of course we can do that in the console as well, but tools can provide extra hints, constraints, and visualizations that make learning faster and easier.}
    sent: "2017-03-25T22:03:35.595Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d6e8b60e4137042aade13f"
    text: {It shows a couple things. 1) We can easily make simple tools to help ourselves. 2) Just showing static data, especially until we get rich text, probably isn't as valuable as spending time helping the www.red-by-example.org team add content. They have a huge amount of information there already. }
    sent: "2017-03-25T22:01:26.997Z"
    editedAt: "2017-03-25T22:10:25.107Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d6e8207ea420cc4205711a"
    text: {Per the recent chat about datatype help, I tinkered this up real quick: https://gist.github.com/greggirwin/b3604f2acd6ac70c70691bd54d8a814b}
    sent: "2017-03-25T21:58:56.348Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d6970208c00c092a14bfaf"
    text: "@metaperl We'll get there. ;-)"
    sent: "2017-03-25T16:12:50.587Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d68828b52518ed4da7318d"
    text: {I want an easy fast and fun way to make web apps. I would imagine something like Seaside would exist for Red.}
    sent: "2017-03-25T15:09:28.818Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d6880e4cb8d0917326407c"
    text: "It sure would be nice... "
    sent: "2017-03-25T15:09:02.804Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d687f90e4137042aac5709"
    text: {No. Why you think it should? Red is work on progress not a finished product.}
    sent: "2017-03-25T15:08:41.487Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d67f6408c00c092a145fcc"
    text: {So, is it possible to develop a desktop GUI app in Red and then deploy to NodeJS to have it run on the web?}
    sent: "2017-03-25T14:32:04.510Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d60f548e4b63533d5f8366"
    text: {@dockimbel it makes sense, I just never thought about it.}
    sent: "2017-03-25T06:33:56.638Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d5ead908c00c092a127974"
    text: {@Oldes Updating `system/console/limit` according to console's width is only implemented in gui-console.}
    sent: "2017-03-25T03:58:17.666Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58d5e0d308c00c092a1259f5"
    text: "@rebolek A typeset is internally a bit-array."
    sent: "2017-03-25T03:15:31.482Z"
    editedAt: "2017-03-25T03:15:36.131Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d5e0adf22385553dd38279"
    text: {@greggirwin For manipulating a typeset as a list, you can just convert it to a `block!`:^/```lisp^/>> to-block scalar!^/== [char! integer! float! pair! percent! tuple! time!]^/```}
    sent: "2017-03-25T03:14:53.137Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d5de650e4137042aaa4318"
    text: {@Oldes Support for compiling functions in functions is currently limited.}
    sent: "2017-03-25T03:05:09.071Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d5c3ebf22385553dd32a7e"
    text: "Thanks for digging that up."
    sent: "2017-03-25T01:12:11.530Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5c3d74cb8d0917323dca0"
    text: "Nice!"
    sent: "2017-03-25T01:11:51.425Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5b83e4cb8d0917323b624"
    text: {https://github.com/red/red/blob/c798eaea3d9e94e48ec4790abd4c217dfe73bf51/runtime/datatypes/datatype.reds?ts=4}
    sent: "2017-03-25T00:22:22.750Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d5b83ab52518ed4da497a0"
    text: {@greggirwin @dockimbel Looks like the github indentation issue can be corrected by editorconfig.^/https://github.com/editorconfig/^/Or by adding `?ts=4` at the end of an url. Like: `}
    sent: "2017-03-25T00:22:18.754Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d5a051b2eadab3653c0248"
    text: {@dockimbel I found this inconsistency... this simple script does not work compiled, but works when interpreted:^/```^/Red []^/^/test: function[][^/^-out: make string! 64^/^-output: func[value][ out: insert out form reduce value ]^/^-output ["bla" 42 "bla"]^/^-head out^/]^/^/print test^/```}
    sent: "2017-03-24T22:40:17.862Z"
    editedAt: "2017-03-24T22:40:58.984Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d591211382fc2b592c20cc"
    text: "That's all I was trying to say"
    sent: "2017-03-24T21:35:29.139Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d590f8685a04fd0e9fa7f6"
    text: {This:^/^/```^/>> ? datatype!^/datatype! is a datatype! of value: datatype!^/^/Found these related words:^/    action!            datatype!   Datatype native function (standard polymorphic)^/    binary!            datatype!   String series of bytes^/    bitset!            datatype!   Set of bit flags^/    block!             datatype!   Series of values^/    char!              datatype!   8bit and 16bit character^/    datatype!          datatype!   Type of datatype^/    email!             datatype!   Email address^/    error!             datatype!   Errors and throws^/    file!              datatype!   File name or path^/    float!             datatype!   64bit floating point number (IEEE standard)^/    function!          datatype!   Interpreted function (user-defined or mezzanine)^/    get-path!          datatype!   The value of a path^/    get-word!          datatype!   The value of a word (variable)^/    handle!            datatype!   Arbitrary internal object or value^/    hash!              datatype!^/    image!             datatype!   RGB image with alpha channel^/    integer!           datatype!   64 bit integer^/    issue!             datatype!   Identifying marker word^/    lit-path!          datatype!   Literal path value^/    lit-word!          datatype!   Literal word value^/    logic!             datatype!   Boolean true or false^/    map!               datatype!   Name-value pairs (hash associative)^/    native!            datatype!   Direct CPU evaluated function^/    none!              datatype!   No value represented^/    object!            datatype!   Context of names with values^/    op!                datatype!   Infix operator (special evaluation exception)^/    pair!              datatype!   Two dimensional point or size^/    paren!             datatype!   Automatically evaluating block^/    path!              datatype!   Refinements to functions, objects, files^/    percent!           datatype!   Special form of decimals (used mainly for layout)^/    point!             datatype!^/    refinement!        datatype!   Variation of meaning or location^/    routine!           datatype!^/    set-path!          datatype!   Definition of a path's value^/    set-word!          datatype!   Definition of a word's value^/    string!            datatype!   String series of characters^/    tag!               datatype!   Markup string (HTML or XML)^/    time!              datatype!   Time of day or duration^/    tuple!             datatype!   Sequence of small integers (colors, versions, IP)^/    typeset!           datatype!   Set of datatypes^/    unset!             datatype!   No value returned or set^/    url!               datatype!   Uniform resource locator or identifier^/    vector!            datatype!   High performance arrays (single datatype)^/    word!              datatype!   Word (symbol or variable)^/```}
    sent: "2017-03-24T21:34:48.012Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d58fc61382fc2b592c1ad6"
    text: {I was asking for corrections.. like the description for `integer!` as Red does not have 64bit integer yet.}
    sent: "2017-03-24T21:29:42.000Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d58f5f2f7d097c106aee51"
    text: {I don't understand.. so you don't want the textual description what each datatype is used for?}
    sent: "2017-03-24T21:27:59.337Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d58f20cbc40f02638ed103"
    text: {You asked about any modifications. I would use the current way that is describes just before "Found these related words:"}
    sent: "2017-03-24T21:26:56.383Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d58f12f91f99f40e6e457e"
    text: {```^/>> a: 1 reduce ['a a]^/== [a 1]^/```}
    sent: "2017-03-24T21:26:42.106Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d58edbf91f99f40e6e44c6"
    text: {btw.. single quote is not valid syntax... it is used for `lit-word!` like `'something` }
    sent: "2017-03-24T21:25:47.248Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d58eb5cbc40f02638ecfe8"
    text: "I'm making a new help."
    sent: "2017-03-24T21:25:09.138Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d58e9f5231ebb865b24d74"
    text: "The way help currently explains the value"
    sent: "2017-03-24T21:24:47.620Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d58ce35231ebb865b24448"
    text: {@Oldes    This makes sense to me? `datatype! is a datatype! of value: datatype!`}
    sent: "2017-03-24T21:17:23.631Z"
    editedAt: "2017-03-24T21:20:45.713Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d58c97fb69977d10ec3c1b"
    text: {```^/C:\Users\Old Man>red --cli^/--== Red 0.6.1 ==--^/Type HELP for starting information.^/^/>> system/console/run^/--== Red 0.6.1 ==--^/Type HELP for starting information.^/^/>> '^/*** Syntax Error: invalid value at "'"^/*** Where: do^/>> help^/Use HELP or ? to see built-in info:^/^/    help insert^/    ? insert^/^/To see all words of a specific datatype:^/^/    ? native!^/    ? function!^/    ? datatype!^/^/Other useful functions:^/^/    ?? - display a variable and its value^/    probe - print a value (molded)^/    source func - show source code of func^/    what - show a list of known functions^/    about - display version number and build date^/    q or quit - leave the Red console^/^/>> 2 + 2^/== 4^/```}
    sent: "2017-03-24T21:16:07.940Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d58c83685a04fd0e9f9045"
    text: {Feeding it a single quote produces an error and then it works again:}
    sent: "2017-03-24T21:15:47.046Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d58c6d155e992759b615a8"
    text: {Is there something what should be modified?^/```^/>> ? datatype!^/datatype! is a datatype.^/Found these related words:^/    action!            datatype!   Datatype native function (standard polymorphic)^/    binary!            datatype!   String series of bytes^/    bitset!            datatype!   Set of bit flags^/    block!             datatype!   Series of values^/    char!              datatype!   8bit and 16bit character^/    datatype!          datatype!   Type of datatype^/    email!             datatype!   Email address^/    error!             datatype!   Errors and throws^/    file!              datatype!   File name or path^/    float!             datatype!   64bit floating point number (IEEE standard)^/    function!          datatype!   Interpreted function (user-defined or mezzanine)^/    get-path!          datatype!   The value of a path^/    get-word!          datatype!   The value of a word (variable)^/    handle!            datatype!   Arbitrary internal object or value^/    hash!              datatype!^/    image!             datatype!   RGB image with alpha channel^/    integer!           datatype!   64 bit integer^/    issue!             datatype!   Identifying marker word^/    lit-path!          datatype!   Literal path value^/    lit-word!          datatype!   Literal word value^/    logic!             datatype!   Boolean true or false^/    map!               datatype!   Name-value pairs (hash associative)^/    native!            datatype!   Direct CPU evaluated function^/    none!              datatype!   No value represented^/    object!            datatype!   Context of names with values^/    op!                datatype!   Infix operator (special evaluation exception)^/    pair!              datatype!   Two dimensional point or size^/    paren!             datatype!   Automatically evaluating block^/    path!              datatype!   Refinements to functions, objects, files^/    percent!           datatype!   Special form of decimals (used mainly for layout)^/    point!             datatype!^/    refinement!        datatype!   Variation of meaning or location^/    routine!           datatype!^/    set-path!          datatype!   Definition of a path's value^/    set-word!          datatype!   Definition of a word's value^/    string!            datatype!   String series of characters^/    tag!               datatype!   Markup string (HTML or XML)^/    time!              datatype!   Time of day or duration^/    tuple!             datatype!   Sequence of small integers (colors, versions, IP)^/    typeset!           datatype!   Set of datatypes^/    unset!             datatype!   No value returned or set^/    url!               datatype!   Uniform resource locator or identifier^/    vector!            datatype!   High performance arrays (single datatype)^/    word!              datatype!   Word (symbol or variable)^/```}
    sent: "2017-03-24T21:15:25.513Z"
    editedAt: "2017-03-24T21:16:51.037Z"
    v: 4
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d587495231ebb865b22ac4"
    text: {`system/console/run` or `system/console/launch` doesn't seem to evaluate.^/(Playing and poking at things, I noticed the following)^/```^/C:\Users\Old Man>red --cli^/--== Red 0.6.1 ==--^/Type HELP for starting information.^/^/>> system/console/run^/--== Red 0.6.1 ==--^/Type HELP for starting information.^/^/>> help^/--== Red 0.6.1 ==--^/Type HELP for starting information.^/^/>> "test"^/--== Red 0.6.1 ==--^/Type HELP for starting information.^/^/>>^/```}
    sent: "2017-03-24T20:53:29.613Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d585facbc40f02638ead57"
    text: {Yeah, but is there any way to automagically handle that? If I'm reading a comment near the top of the page, it's a pain to have to scroll all the way to the bottom of the frame}
    sent: "2017-03-24T20:47:54.974Z"
    editedAt: "2017-03-24T20:48:07.788Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d57dcad660bdf528c86047"
    text: "Github always seems to use a tab width of 8. "
    sent: "2017-03-24T20:12:58.000Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d57cbafb69977d10ebfade"
    text: "Scroll right at the bottom of the code area? "
    sent: "2017-03-24T20:08:26.399Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d57c69155e992759b5c99f"
    text: {@dockimbel There is something weird with the formatting of datatype.reds on github. Not enough horizontal space to read some comments in full}
    sent: "2017-03-24T20:07:05.990Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d5752bfb69977d10ebd8d2"
    text: {ok, thanks guys, I appreciate your help, that's enough for today :^^) I'll try to tackle with this on my own on weekends}
    sent: "2017-03-24T19:36:11.247Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5741df91f99f40e6dcfb3"
    text: "but it's all green"
    sent: "2017-03-24T19:31:41.626Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5741a1382fc2b592ba077"
    text: "I'm not saying that I see the matrix code"
    sent: "2017-03-24T19:31:38.891Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d573fb26c446b31c079953"
    text: {```^/red-word!: alias struct! [^/^-header ^-[integer!]^-^-^-^-^-^-^-^-;-- cell header^/^-ctx^-^-[node!]^-^-^-^-^-^-^-^-^-;-- context reference^/^-symbol^-[integer!]^-^-^-^-^-^-^-^-;-- index in symbol table^/^-index^-[integer!]^-^-^-^-^-^-^-^-;-- index in context^/]^/```^/*Tuvan throat singing is heard from my turned off speakers*}
    sent: "2017-03-24T19:31:07.895Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58d57354f91f99f40e6dcc8e"
    text: "basically yes"
    sent: "2017-03-24T19:28:20.485Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d572961382fc2b592b967c"
    text: {say, for `integer!` its' `header: <datatype!> value: <integer!>`}
    sent: "2017-03-24T19:25:10.472Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5727e5231ebb865b1c7f5"
    text: {uh-oh, am I right that for any datatype it will be `header: <datatype! ID> value: <datatype value>`?}
    sent: "2017-03-24T19:24:46.606Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5723a685a04fd0e9f1de1"
    text: {They have very nicely documented things in comments there.}
    sent: "2017-03-24T19:23:38.844Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d571ddcbc40f02638e502e"
    text: {https://github.com/red/red/blob/master/runtime/datatypes/structures.reds}
    sent: "2017-03-24T19:22:05.126Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5719d26c446b31c0790f4"
    text: {for every value `32` bits specify unique cell header (aka ID), and in `96` bits reside all necessary data about that value?}
    sent: "2017-03-24T19:21:01.608Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d57170d660bdf528c8218a"
    text: {Best just to look at the source code until the light bulb goes on. ;^^)}
    sent: "2017-03-24T19:20:16.716Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5712526c446b31c078ee0"
    text: {@greggirwin can I think of that as of datagram, but without networks? :grinning: }
    sent: "2017-03-24T19:19:01.733Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d570d0cbc40f02638e4ab5"
    text: {Red/System doesn't have contexts, so it's a combination of `struct!` and `block!`.}
    sent: "2017-03-24T19:17:36.995Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d570892f7d097c106a688f"
    text: {except that one can't redefine function pointers at run-time}
    sent: "2017-03-24T19:16:25.890Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5706a685a04fd0e9f1769"
    text: {@greggirwin oh, it's similar to contexts by the way}
    sent: "2017-03-24T19:15:54.788Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d57052f91f99f40e6dc08b"
    text: {`datatype!` is a value of type `datatype!`, correct. }
    sent: "2017-03-24T19:15:30.876Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5703d26c446b31c0789f1"
    text: {@9214 `42` is a value and its datatype is `integer!`. Datatype of `integer!` is `datatype!`, yes.}
    sent: "2017-03-24T19:15:09.237Z"
    editedAt: "2017-03-24T19:15:24.205Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d56ff9685a04fd0e9f15f0"
    text: {> and fuction pointers reside in those 96 bits of value slot?^/^/No. Datatypes get registered with the system, so all it needs is the type ID. From there the system catalog finds the block of function pointers.}
    sent: "2017-03-24T19:14:01.396Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d56ff12f7d097c106a6656"
    text: {and `datatype!` itself is a value with datatype `datatype!` :frowning:}
    sent: "2017-03-24T19:13:53.741Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56fb019cdf803632de659"
    text: {@rebolek so, `integer!` is a value, but its datatype is `datatype!`?}
    sent: "2017-03-24T19:12:48.850Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56f1d19cdf803632de359"
    text: {and fuction pointers reside in those 96 bits of value slot?}
    sent: "2017-03-24T19:10:21.083Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56f1826c446b31c0783f7"
    text: {@9214 `42` is a value, `info@red-lang.org` is a value, ... Words are values and they can have values. (let's expect that we are in vanilla console) `print` has a value - `function!`, `red` has a value - `tuple!`, `bfmlpsvz` hasn't a value (but is a value in itself).}
    sent: "2017-03-24T19:10:16.882Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d56ee5155e992759b58c10"
    text: "Correct."
    sent: "2017-03-24T19:09:25.171Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d56ea65231ebb865b1b4f3"
    text: {so `cell header` specifies type (or it can be called "datatype" ?) of value slot?}
    sent: "2017-03-24T19:08:22.587Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56e32685a04fd0e9f0ddc"
    text: "Sounds like a system object, or system struct"
    sent: "2017-03-24T19:06:26.666Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d56e232f7d097c106a5d51"
    text: "@9214 yes, **is**."
    sent: "2017-03-24T19:06:11.507Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d56d8acbc40f02638e37ea"
    text: {*(I'm not sure that newbie apprenticeship is appropriate for `/red` channel)*}
    sent: "2017-03-24T19:03:38.385Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56d00cbc40f02638e357c"
    text: "Correct."
    sent: "2017-03-24T19:01:20.734Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d56ceb5231ebb865b1abf1"
    text: {> everything **is** a value.^/^/**is**, not **has**?}
    sent: "2017-03-24T19:00:59.938Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56c9ed660bdf528c80a9e"
    text: {*(gurus please correct anything I get wrong here)*^/- Everything is a value.^/- Hence, datatypes are values.^/- Values go in value slots. Currently 128 bits, each has a cell header (32 bits), but each datatype can use the remaining 96 bits however it wants.^/- A datatype definition is not the same as a datatype value in a value slot. The datatype definition  uses the data in the value slot in its work on a type. i.e. a datatype def needs to know about the value slot structure for that type.^/- Datatypes get registered with the system, so it knows their type, name, and (importantly) the block of function pointers to dispatch actions on for that type. Function pointers may be null if not needed.^/- When you define a datatype, you can specify a base type it inherits from. Function pointers may be INHERIT_ACTION in this case, which does just what it says.^/^/Enough for a start?}
    sent: "2017-03-24T18:59:42.217Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d56b7019cdf803632dd1b7"
    text: {I suppose it's time for me to become a Hector, the ~~booty~~ datatype inspector :shipit: }
    sent: "2017-03-24T18:54:40.635Z"
    editedAt: "2017-03-24T18:55:13.530Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d568d619cdf803632dc44a"
    text: {@9214, I don't know of any articles that talk about the internals.}
    sent: "2017-03-24T18:43:34.869Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d564b626c446b31c0752d4"
    text: {This is probably the wrong room for it.^/```^/>> help datatype!^/     action!^/     binary!^/     bitset!^/     block!^/     char!^/     datatype!^/     email!^/     error!^/     event!^/     file!^/     float!^/     function!^/     get-path!^/     get-word!^/     handle!^/     hash!^/     image!^/     integer!^/     issue!^/     lit-path!^/     lit-word!^/     logic!^/     map!^/     native!^/     none!^/     object!^/     op!^/     pair!^/     paren!^/     path!^/     percent!^/     point!^/     refinement!^/     routine!^/     set-path!^/     set-word!^/     string!^/     tag!^/     time!^/     tuple!^/     typeset!^/     unset!^/     url!^/     vector!^/     word!^/datatype! is a datatype! of value: datatype!^/```}
    sent: "2017-03-24T18:25:58.893Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d5649c5231ebb865b1875d"
    text: {@greggirwin  :point_up: [24. březen 2017 19:10](https://gitter.im/red/red?at=58d56132f91f99f40e6d79ec) I actually never tested it , thanks for correcting me.}
    sent: "2017-03-24T18:25:32.849Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d564512f7d097c106a2fb7"
    text: {looks like `datatype!` is the root, of sorts. Should I quit thinking in that way?}
    sent: "2017-03-24T18:24:17.676Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d562cd155e992759b551d1"
    text: {But that doesn't mean that all types will support a given reflection.}
    sent: "2017-03-24T18:17:49.196Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d56297cbc40f02638e04f3"
    text: {@gltewalt, that said, all datatypes share a common structure and that contains a slot for a `reflect` function. So you can, if you want, implement it for any type. }
    sent: "2017-03-24T18:16:55.211Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d56257cbc40f02638e031d"
    text: "cuz I'm not sure that I get it all"
    sent: "2017-03-24T18:15:51.717Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5624126c446b31c0747ad"
    text: {can anyone point me to articles and posts about datatypes and type system in Rebol/Red by the way?}
    sent: "2017-03-24T18:15:29.236Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56215b2eadab3653ae015"
    text: {@9214, yes, you can make your own typesets, and use them in function interfaces and such. They are first class values.}
    sent: "2017-03-24T18:14:45.496Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d561f6d660bdf528c7d5a8"
    text: {@gltewalt , every type is not a context. i.e. everything doesn't inherit from a base object as in Ruby or other langs.}
    sent: "2017-03-24T18:14:14.014Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d561e8cbc40f02638e0116"
    text: {```^/>> x: make typeset! [integer! string!]^/== make typeset! [string! integer!]^/>> typeset? x^/== true^/```}
    sent: "2017-03-24T18:14:00.752Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56195155e992759b54b74"
    text: {Yes. They're special, kind of like a bitset of types internally, at a glance.}
    sent: "2017-03-24T18:12:37.831Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d56167fb69977d10eb7d21"
    text: "typeset is `typeset!`?"
    sent: "2017-03-24T18:11:51.414Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56132f91f99f40e6d79ec"
    text: {Typesets aren't really blocks though. ^/```^/>> any-block? any-block!^/== false^/```}
    sent: "2017-03-24T18:10:58.232Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5610fd660bdf528c7d13e"
    text: {If every context is a big object, it feels like words-of should be supported everywhere possible. But I've still a lot to learn, so I will defer to you guys. }
    sent: "2017-03-24T18:10:23.373Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d560eccbc40f02638dfbf3"
    text: "Sorry, typesets are blocks, types are `datatype!`"
    sent: "2017-03-24T18:09:48.430Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d560d4cbc40f02638dfb9b"
    text: "No, blocks."
    sent: "2017-03-24T18:09:24.190Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d560a02f7d097c106a1e6d"
    text: "Are types objects?"
    sent: "2017-03-24T18:08:32.475Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d5607b1382fc2b592b44f6"
    text: {No. It only need to know about types it introspects.}
    sent: "2017-03-24T18:07:55.257Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5601c5231ebb865b17063"
    text: {Help already has to keep track, or know, about every type. No?}
    sent: "2017-03-24T18:06:20.722Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d55ff71382fc2b592b4294"
    text: {How does being in one place solve the problem? That place then has to know the details of every type, breaking modularity, yes?}
    sent: "2017-03-24T18:05:43.578Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d55fc72f7d097c106a19f0"
    text: {If reflection was in one place instead of depending on the object or type. Why is it separated right now?}
    sent: "2017-03-24T18:04:55.753Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d55fbd5231ebb865b16efb"
    text: {Having everything support reflection sounds nice, but what would an `integer!` reflect? `Value-of`?}
    sent: "2017-03-24T18:04:45.447Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58d55f6cf91f99f40e6d72a3"
    text: {@gltewalt, yeah, or we write a nice `types-of` func that could operate...just typesets for now. If we expand it, we have to define a lot more details.}
    sent: "2017-03-24T18:03:24.378Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d55f4a5231ebb865b16d83"
    text: "You could just have everything support reflection"
    sent: "2017-03-24T18:02:50.659Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d55ec8f91f99f40e6d6fe5"
    text: {@dockimbel https://gist.github.com/greggirwin/1495513366febe9bf8019bcb514f19c9}
    sent: "2017-03-24T18:00:40.851Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d55bec685a04fd0e9eb506"
    text: {words-of a typeset would be the types that it encompassed , right?}
    sent: "2017-03-24T17:48:28.281Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d557f4f91f99f40e6d4b30"
    text: "I'll show you shortly."
    sent: "2017-03-24T17:31:32.245Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d557a619cdf803632d7218"
    text: {`all [find scalar! integer! integer!]` should suffice? I'm not sure what is the real need.}
    sent: "2017-03-24T17:30:14.537Z"
    editedAt: "2017-03-24T17:32:16.197Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d55768155e992759b51b54"
    text: {Right now we would do `third load mold <typeset>`, which is no big deal.}
    sent: "2017-03-24T17:29:12.487Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d55724d660bdf528c79b8f"
    text: {The types in the typeset. Per the chat above about help. We can work around it, just thinking about reflective tools.}
    sent: "2017-03-24T17:28:04.704Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d556bdb2eadab3653aa6a8"
    text: {What kind of reflection would that be? A typeset is just a list of datatypes that is trivial to inspect:^/```lisp^/>> scalar!^/== make typeset! [char! integer! float! pair! percent! tuple! time!]^/>> find scalar! integer!^/== true^/```}
    sent: "2017-03-24T17:26:21.694Z"
    editedAt: "2017-03-24T17:28:16.734Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d5568eb2eadab3653aa597"
    text: "@dockimbel, should typesets support reflection?"
    sent: "2017-03-24T17:25:34.712Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d556691382fc2b592b0f5f"
    text: {@9214 That would make a fun language to work with: `1: 0`. ;-)}
    sent: "2017-03-24T17:24:57.034Z"
    editedAt: "2017-03-24T17:25:12.423Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d55622d660bdf528c7979b"
    text: "or, even better, `set-integer!`"
    sent: "2017-03-24T17:23:46.543Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5560bd660bdf528c796f7"
    text: "`'333`"
    sent: "2017-03-24T17:23:23.540Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d55604f91f99f40e6d4389"
    text: "and no such thing as a `lit-integer!` ;)"
    sent: "2017-03-24T17:23:16.002Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d555eecbc40f02638dc2fe"
    text: {Right, there is no such thing as a `set-refinement!`.}
    sent: "2017-03-24T17:22:54.905Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d555c2cbc40f02638dc1b4"
    text: {@greggirwin or this will happen?^/```^/>> obj: make object! [/refinement: 1]^/*** Syntax Error: missing #"]" at ": 1]"^/*** Where: do^/```}
    sent: "2017-03-24T17:22:10.479Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d555adb2eadab3653aa05c"
    text: {We might be able to avoid populating the global context in the case of refinements, as they can only be bound to function contexts.}
    sent: "2017-03-24T17:21:49.308Z"
    editedAt: "2017-03-24T17:23:52.778Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d5558126c446b31c0707e1"
    text: {Red must normalize refinements to words in contexts. }
    sent: "2017-03-24T17:21:05.123Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5555d26c446b31c0706e2"
    text: {and for now I don't think that it's possible to use integers as words}
    sent: "2017-03-24T17:20:29.032Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5553d685a04fd0e9e93d8"
    text: {because for me it seems that `integer!` `333` is unsetted}
    sent: "2017-03-24T17:19:57.090Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5551f1382fc2b592b0a8c"
    text: "Ah, I see what you mean."
    sent: "2017-03-24T17:19:27.868Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5551e19cdf803632d64a4"
    text: "or it doesn't work with `refinement!`s?"
    sent: "2017-03-24T17:19:26.478Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d55506f91f99f40e6d3e10"
    text: {@greggirwin yes, I'm already seasoned in that stuff, but I thought it should be `/333: unset` ?}
    sent: "2017-03-24T17:19:02.573Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d554b6d660bdf528c790d8"
    text: {@9214, when you entered `/333` in the console it was added to `system/words`, but not set to a value. }
    sent: "2017-03-24T17:17:42.206Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5547ef91f99f40e6d3c18"
    text: {Easier to fix help message than to wade through a big wall of junk objects}
    sent: "2017-03-24T17:16:46.098Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d5544426c446b31c070050"
    text: {now that's interesting^/```^/>> /333^/== /333^/>> back back tail body-of system/words^/== [333: unset]^/```}
    sent: "2017-03-24T17:15:48.358Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5535119cdf803632d58e2"
    text: {That's what Rebol did, and generated the web pages from that, along with being able to use it in desktop apps.}
    sent: "2017-03-24T17:11:45.824Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d553241382fc2b592b00ae"
    text: "@gltewalt, of course."
    sent: "2017-03-24T17:11:00.813Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d552f0155e992759b501d1"
    text: {Elaborate help could be stored in red files, couldn't it?^/temp-file: load %string-help.red}
    sent: "2017-03-24T17:10:08.888Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d552d55231ebb865b12c8d"
    text: {And it's kinda tricky to build a user-defined object with `unset` values^/```^/>> obj: make object! [a: 1 b: 2 unset 'a unset 'b]^/== make object! [^/    a: unset^/    b: unset^/]^/```^/without filtering:^/```^/>> ? obj^/`obj` is an object! of value:^/     a                unset!    unset ^/     b                unset!    unset ^/```^/^/with filtering (?):^/```^/>> ? obj^/`obj` is an object! of value^/```^/in this case `help` message is misleading, to say at least}
    sent: "2017-03-24T17:09:41.634Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d550dcb2eadab3653a84ba"
    text: {`unset`s make perfect sense to me, though I'm not sure that I can claim myself a total newbie}
    sent: "2017-03-24T17:01:16.438Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d55091155e992759b4f311"
    text: {Can't get why we need filtering for objects at all :confused: }
    sent: "2017-03-24T17:00:01.063Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d550652f7d097c1069cd6e"
    text: {@dockimbel @Oldes^/unfiltered should be the default for system/words, in my opinion}
    sent: "2017-03-24T16:59:17.662Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d54fd5b2eadab3653a7f82"
    text: {so `unset!` values show up all over the place in `system/words`, but that seems like a special case. My guess is that if someone is doing `help system/words`, they are trying to learn more about system internals. That may be a stretch, but if it is the case, I think hiding the `unset!` words would hamper understanding. I don't always look at all the refinements, or understand what they are for. Actually it took me a while to get how refinements work, since they are sort of a unique language feature}
    sent: "2017-03-24T16:56:53.166Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d54e2f155e992759b4e674"
    text: {:point_up: [24. březen 2017 17:30](https://gitter.im/red/red?at=58d549a81382fc2b592acfa1) we can have docs in (gui) console (probably in normal console also, with some limitations). See `helpr`.}
    sent: "2017-03-24T16:49:51.957Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d54d20b2eadab3653a7181"
    text: {well, anything you mention in your console session and is evaluated, get's in the word list ...}
    sent: "2017-03-24T16:45:20.121Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d54cdccbc40f02638d9529"
    text: {`Unset` is rare in normal code. `None` is the common case.}
    sent: "2017-03-24T16:44:12.305Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d54ca7b2eadab3653a6ec2"
    text: {regarding the `unset!` values, how often to people encounter those in normal code? If it's adding lots of noise all the time, it makes sense to hide them. But if not, I would definitely prefer more (unnecessary) detail over being confused by something being hidden. Still, this is coming from a pretty naive perspective. I wish I had the opportunity to use Red for my "real work" so I could more seriously learn it}
    sent: "2017-03-24T16:43:19.940Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d54bfe685a04fd0e9e62cf"
    text: {@greggirwin Personally I am hoping for a help system which is separate but local (or at least capable of being local).  I think of this as a "bolt on" system - which means it can also be abandoned if not needed; like training wheels can come with a bicycle but be abandoned.  This would also allow different levels of "help" (training wheels) which I think would be especially fitting and needed with Red (deep lake and all that). I think the biggest problem Red is going to face in general acceptance is restricting its visible complexity for people who are just trying to safely get rolling around the block.}
    sent: "2017-03-24T16:40:30.874Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58d54a885231ebb865b0fe05"
    text: {If we want it built in, all the data has to be there all the time, until we have a fixed repo to load it from. That will be easy, once we have data repos. That's the idea behind Redbol and the X-net.}
    sent: "2017-03-24T16:34:16.599Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d54a7019cdf803632d289e"
    text: "yeah, I see"
    sent: "2017-03-24T16:33:52.776Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d54a50155e992759b4d2ac"
    text: {If it's an external module or tool, it can be anything. R2 had some really nice little support tools along these lines. My *-lab tools go in that direction as well.}
    sent: "2017-03-24T16:33:20.309Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d549eed660bdf528c75b48"
    text: "@greggirwin could it be modular?"
    sent: "2017-03-24T16:31:42.890Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d549a81382fc2b592acfa1"
    text: {It's a tradeoff. Adding more docs adds more size. Eventually we can build in more navigation and such, but we won't have linking as we do with real docs. R3 added `docs` which took you to a browser page. Still a context switch, but you need this most when you're new to Red, and much less over time.}
    sent: "2017-03-24T16:30:32.077Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d54982d660bdf528c757c7"
    text: {:point_up: [22 февраля 2017 г., 05:04](https://gitter.im/red/red?at=58acd5731465c46a5697ad5e)}
    sent: "2017-03-24T16:29:54.603Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d549351382fc2b592acc84"
    text: {I'm all for no-web and offline self-contained experience}
    sent: "2017-03-24T16:28:37.053Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d548fc5231ebb865b0f6ed"
    text: {Yes, I remember that tree was really nice to see. I don't have enough knowledge to know whether it is a good idea or not. I mean people are going to have a web browser open anyway, but it's nice not needing to context switch}
    sent: "2017-03-24T16:27:40.568Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d5486b19cdf803632d1ebf"
    text: {and we should get datatype hierarchy tree to get the whole picture (I think @greggirwin posted it some time ago)}
    sent: "2017-03-24T16:25:15.382Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d54809155e992759b4c80e"
    text: {docstrings should be embedded inside every build-in datatype (and for user-defined datatypes, in the future)}
    sent: "2017-03-24T16:23:37.504Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d547de5231ebb865b0f1f3"
    text: {In that case `help` should extract documentation from... hm}
    sent: "2017-03-24T16:22:54.000Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58d547cd1382fc2b592ac5ee"
    text: {yeah, something like that. Enough to get started experimenting without having to fire up a web browser necessarily}
    sent: "2017-03-24T16:22:37.353Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d5478ad660bdf528c74db9"
    text: {e.g. string is constructed with `""` and `{}`, or `make string! <spec>`, and since string is a `series!`, all series selectors can be applied to it to get charaters/substrings/etc}
    sent: "2017-03-24T16:21:30.255Z"
    editedAt: "2017-03-24T16:21:57.746Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d547422f7d097c1069a1b2"
    text: {I.e. specify constructors and selectors available for every datatype?}
    sent: "2017-03-24T16:20:18.609Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5471e19cdf803632d17ec"
    text: {like for string! a person needs to know it can be wrapped in `""` or `{}` that the escape character is `^^` and so forth. That really starts to border on documentation though, so it's hard to say how much of it should be right in the console}
    sent: "2017-03-24T16:19:42.986Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d546b95231ebb865b0ebe5"
    text: "I'm mostly just thinking the lexical rules"
    sent: "2017-03-24T16:18:01.039Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d5466319cdf803632d14d6"
    text: "`make <datatype> <prototype or spec>`?"
    sent: "2017-03-24T16:16:35.882Z"
    editedAt: "2017-03-24T16:16:42.217Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d54645cbc40f02638d7253"
    text: {but some way of doing `<how do you make a> map!` and having an example of the map construction syntax}
    sent: "2017-03-24T16:16:05.287Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d545dd1382fc2b592abc4c"
    text: {I didn't realize until now that `help` would summarize the contents of an object!. One other thing that I think would be useful for newcomers would be to have some guidance on syntax for various types... though I don't know if `help` is the right place for that}
    sent: "2017-03-24T16:14:21.571Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d5453b19cdf803632d0f1e"
    text: {Creating words from partials isn't a big deal in a standalone console, but it could be in an IDE setting, where `help` is used by an intellisense system of some kind. Could `help` run in its own context to prevent global pollution?}
    sent: "2017-03-24T16:11:39.227Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5445bf91f99f40e6ce8a9"
    text: {> readme and license can be specified in Red header, I think ;)^/^/or in a preface (text before the header)}
    sent: "2017-03-24T16:07:55.056Z"
    editedAt: "2017-03-24T16:08:01.092Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d54399cbc40f02638d6543"
    text: {- Please don't sort words when dumping objects.^/- `/all` to see all values? Unset values won't be normal in most user code.^/- Nice @nc-x^/- Now that we can change Red's console color, I don't get confused with Rebol. I think I had the same issue specifically when working on `help` long ago. :^^)^/- Make sure we don't confuse /width in chars vs /width in pixels.}
    sent: "2017-03-24T16:04:41.743Z"
    editedAt: "2017-03-24T16:09:41.510Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d5407a19cdf803632cf664"
    text: {readme and license can be specified in Red header, I think ;)}
    sent: "2017-03-24T15:51:22.859Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d53f85d660bdf528c7230b"
    text: {it's funny how Red repos consist of Readme, License and a signle Red file :D}
    sent: "2017-03-24T15:47:17.174Z"
    editedAt: "2017-03-24T15:47:26.382Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d53f4519cdf803632cee53"
    text: "@nc-x very nice, can't wait for the blog post!"
    sent: "2017-03-24T15:46:13.436Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d53b9ab2eadab3653a191b"
    text: {@Oldes It's only for the GUI console. The default value is not updated for the CLI console (you can ask @qtxie about that).}
    sent: "2017-03-24T15:30:34.676Z"
    editedAt: "2017-03-24T15:31:24.681Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d5347d5231ebb865b08cae"
    text: {@dockimbel the `system/console/limit` does not provide correct values in the CLI console.}
    sent: "2017-03-24T15:00:13.555Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d50da1b2eadab365390e38"
    text: "done @dockimbel . Thank You"
    sent: "2017-03-24T12:14:25.350Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d505655231ebb865af9670"
    text: {@nc-x Also I would suggest replacing the `case` with the verbose conditions with something simpler and more efficient, like:^/```lisp^/get-botname^/at-bot: rejoin ["@" botname] ^/^/forever [^/...^/ ^/    parse text [^/        "/start" opt at-bot (^/            ...^/        )^/        | "/hi" opt at-bot (^/            ...^/        )^/        | "/links" at-bot (^/            ...^/        )^/    ]^/```}
    sent: "2017-03-24T11:39:17.826Z"
    editedAt: "2017-03-24T11:45:08.115Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d503c226c446b31c0563db"
    text: {@nc-x `if text <> ""`=> `unless empty? text` or `if not empty? text`. Same for `update-id <> ""`.}
    sent: "2017-03-24T11:32:18.414Z"
    editedAt: "2017-03-24T11:32:44.472Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d50144b2eadab36538d6ac"
    text: {Will write a blog post tomorrow maybe regarding how easy it is to write telegram bots in red.}
    sent: "2017-03-24T11:21:40.470Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d500dc2f7d097c10682eb6"
    text: {The telegram bot code is idiomatic now IMO, so i posted a tweet https://twitter.com/uninitialized_/status/845232971267301376}
    sent: "2017-03-24T11:19:56.954Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d4fe9826c446b31c054c5a"
    text: {@Oldes `system/console/limit` We should probably rename it to  `width`.}
    sent: "2017-03-24T11:10:16.067Z"
    editedAt: "2017-03-24T11:10:50.671Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d4fdd2cbc40f02638bfe99"
    text: {@dockimbel is it possible to get width of the console in chars?}
    sent: "2017-03-24T11:06:58.059Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d4fd84155e992759b35c1b"
    text: {Red is still not that much compatible. But ok.. it's just me who was fooled twice this today.}
    sent: "2017-03-24T11:05:40.223Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d4fce3d660bdf528c5e013"
    text: {I don't think that is necessary, as Rebol2 and Rebol3 are sharing the same prompt, and it has not been a problem when posting console sessions on AltMe or elsewhere.}
    sent: "2017-03-24T11:02:59.435Z"
    editedAt: "2017-03-24T11:03:09.151Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d4fb01155e992759b34fa0"
    text: {@dockimbel could you please change the Red prompt to `R>`, so indentation would be same and we can see if the code was in Rebol or Red?}
    sent: "2017-03-24T10:54:57.671Z"
    editedAt: "2017-03-24T10:55:50.296Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d4fa67b2eadab36538b7c1"
    text: {Yes:^/```lisp^/>> help to-^/Found these words:^/...^/>> back tail first system/words^/== [to-]^/```}
    sent: "2017-03-24T10:52:23.973Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d4f9e62f7d097c10680ea8"
    text: {So writing help to- in R2 also adds to- as a word?}
    sent: "2017-03-24T10:50:14.278Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d4f82126c446b31c052e86"
    text: "Rebol also does not filter unset values"
    sent: "2017-03-24T10:42:41.919Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d4f7eacbc40f02638bdf61"
    text: {Well, noticed that few days ago. Simple evaluated word is stored as a word in system/words as an unset value, right? Was that the same with R2, and did R2 filtered out unset values for help?}
    sent: "2017-03-24T10:41:46.754Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d4f5ca19cdf803632b8721"
    text: {@dockimbel alright @pekr probably not a problem, but are you aware, that you are creating words using this method?}
    sent: "2017-03-24T10:32:42.278Z"
    editedAt: "2017-03-24T10:33:43.434Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d4f4e758ad4eb028495653"
    text: {oldes - could we have a search for partial words without actually put them in quotes? Just like with R2? Got burned by that several times. I really want just to type: `help to-` and get all conversion functions ...}
    sent: "2017-03-24T10:28:55.367Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d4f4466d7eb18404ff2698"
    text: {@Oldes I can foresee questions about newcomers trying to understand binding and failing to find where a global word is defined. ;-) Also, I'm not sure sorting is a good thing, the object words needs to appear in the same order as in the object, otherwise, the difference would be confusing. I can remember one of my worst programming issue was caused by the CUPS (Unix printing system) documentation listing all the C structures with the member names sorted... As we will have `struct!` type in the close future, I don't think that having `help` sort the fields for objects and not sorting them for structs be a good thing.}
    sent: "2017-03-24T10:26:14.198Z"
    editedAt: "2017-03-24T10:34:10.923Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d4f40ea84f611959daf475"
    text: {also... I added sort into object word list, I guess that the hard core user would like to see the last added value at the end like it was before, right?}
    sent: "2017-03-24T10:25:18.114Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d4f372a84f611959daf1f7"
    text: {My opinion is, that majority users don't want to see the unset values... I can imagine that hard core users may need this info to understand internals.}
    sent: "2017-03-24T10:22:42.140Z"
    editedAt: "2017-03-24T10:23:22.176Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d4f323caf143ab6657500a"
    text: {FYI, I'm writing the release article for 0.6.2 (quite long, as it's an heavy one). We still have tests to run to be sure there is no regression before the release, if no new fixes are needed, the release should come out quickly.}
    sent: "2017-03-24T10:21:23.047Z"
    editedAt: "2017-03-24T10:22:14.095Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d4f300a84f611959daf06c"
    text: {@Oldes Ability to see it filtered and unfiltered would be nice. Not sure which one should be the default when using `? system/words`.}
    sent: "2017-03-24T10:20:48.022Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d4f25ef7f7d481044e53af"
    text: {I consider seeing the unset values quite disturbing, especially for newbies, but as you wish... I already have `dump-obj`... it would not be difficult to add there a refinement to filter out the `unset` values... just don't know, how such a switch would be used with help.}
    sent: "2017-03-24T10:18:06.178Z"
    editedAt: "2017-03-24T10:20:09.027Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d4f20da84f611959daec71"
    text: {@Oldes Good, the current `help` code needs some dusting off. `help` should not filter any content out, it should give you the content as it is. Knowing which word as a value and which not in the global context is a valuable information.}
    sent: "2017-03-24T10:16:45.898Z"
    editedAt: "2017-03-24T10:17:27.488Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d4f1878fa16339540fe662"
    text: {@KDr2 No, it is not a task currently worked on. On which platform do you need it? Do you need it for a particular reason?}
    sent: "2017-03-24T10:14:31.003Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d4efee590d72c864fe7bb5"
    text: {I started rewrite of the current `help` function... I have a question, do we really need to see all the `unset!` values when displaying content of an object? Like when you type:^/```^/? system/words^/```}
    sent: "2017-03-24T10:07:42.517Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d4d7492f1f48666ea3a225"
    text: "Do we hava a x64 version compiler now?"
    sent: "2017-03-24T08:22:33.111Z"
    v: 1
    author: "56712f8916b6c7089cbee1d1"
) #(
    id: "58d48d03a84f611959d9770c"
    text: "Or maybe i did something wrong."
    sent: "2017-03-24T03:05:39.032Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d48cfa6701410e586cefee"
    text: {Or you can use https://github.com/nc-x/SampleTelegramBotInRed/blob/master/TelegramBot.red for checking this - "%0A" gives newline in message , "^^/" doesn't}
    sent: "2017-03-24T03:05:30.780Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d48c8f58ad4eb02847d11a"
    text: "I will pm you a smaller test case later today."
    sent: "2017-03-24T03:03:43.633Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d48c6a8fa16339540e6d6c"
    text: {If the url contains "%0A" in sendMessage msg parameter, then telegram shows a newline in the message  but no newline is present in message when I use "^^/"}
    sent: "2017-03-24T03:03:06.007Z"
    editedAt: "2017-03-24T03:06:01.518Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d48c036d7eb18404fda539"
    text: {@qtxie Then why is it not working for me? :scratches-head:}
    sent: "2017-03-24T03:01:23.742Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d47a606d7eb18404fd6fad"
    text: {@nc-x No. The `url` won't be changed by `read`.^/```^/>> url: https://gitter.im/red/red%0A^/== https://gitter.im/red/red%0A^/>> read url^/== ^{<!DOCTYPE html>^^/<html lang="en">^^/  <head>^^/    <title>Gitter – Not Found</title>^^/    <meta cha^/>> url^/== https://gitter.im/red/red%0A^/```}
    sent: "2017-03-24T01:46:08.505Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58d466a75917e26076c94ee6"
    text: "To the power of Rebol?"
    sent: "2017-03-24T00:21:59.885Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d46696caf143ab66555256"
    text: {[![to-the-power-R.png](https://files.gitter.im/red/red/Dbcw/thumb/to-the-power-R.png)](https://files.gitter.im/red/red/Dbcw/to-the-power-R.png)}
    sent: "2017-03-24T00:21:42.095Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58d44a388fa16339540d830a"
    text: {"Many have said that one of the biggest problems with lisp is the proliferation of non-standard and incompatible mascots"}
    sent: "2017-03-23T22:20:40.879Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d43ebd58ad4eb02846b4bd"
    text: {@dockimbel, in `load-any` you have `'pos` as the target for `load/next`, but it's never used. It looks like, with `/trap` that the `position` arg for `/next` gets set to `[[values] position error]`, which is the same as the result of `load`. Is that by design?}
    sent: "2017-03-23T21:31:41.188Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d3f6928fa16339540bdafe"
    text: {@9214 I played with it today, it's a nice work, though I don't have time to work on porting that to Red.}
    sent: "2017-03-23T16:23:46.281Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d3f1b6b809ca5f4a7551ff"
    text: {should we create new showcase with [this](http://ncase.me/loopy/), a la explorable explanations?}
    sent: "2017-03-23T16:03:02.669Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d3e6ea7b3f37e75429b99c"
    text: "@qtxie ^^--- Please have a look at this one."
    sent: "2017-03-23T15:16:58.479Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d3dd97590d72c864f9ec7b"
    text: {>  I would be able to use `^^/` instead of `%0A` from here^/ ^/[This is the link](https://github.com/nc-x/SampleTelegramBotInRed/blob/58ad81f2ecdb6d196982f70536931a279fa89627/TelegramBot.red#L85)}
    sent: "2017-03-23T14:37:11.926Z"
    editedAt: "2017-03-23T14:38:21.356Z"
    v: 5
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d3cd467b3f37e754292ede"
    text: {@dockimbel @qtxie Does `read` remove `%0A` from `url!` when `read url` is done?^/Because I had assumed that after the fix to https://github.com/red/red/issues/2491, I would be able to use `^^/` instead of `%0A` from [here]( https://github.com/nc-x/SampleTelegramBotInRed/blob/master/TelegramBot.red#L75) and everywhere else as all this text gets appended and hence converted to a `url!` which is then `read`.^/But that does not work.^/`probe`ing the value just before `read` is used gives the correct url though.}
    sent: "2017-03-23T13:27:34.840Z"
    editedAt: "2017-03-23T13:34:10.741Z"
    v: 7
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d397756701410e586888ea"
    text: {@btiffin Could you please publish your fixes for `load-any`? }
    sent: "2017-03-23T09:37:57.851Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d365d458ad4eb02842a491"
    text: {@pekr For the fields beeping issue, I let @qtxie handle it (there is a SO [solution](http://stackoverflow.com/questions/3588526/how-to-turn-off-beeping-when-pressing-enter-on-a-single-line-edit-control-under) for that).}
    sent: "2017-03-23T06:06:12.199Z"
    editedAt: "2017-03-23T06:06:14.263Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d35f32a84f611959d4274a"
    text: {I reverted all the changes made yesterday on the fonts for red/docs. I'll wait until someone sends a PR to improve the CSS.}
    sent: "2017-03-23T05:37:54.113Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d35ca55917e26076c49c62"
    text: {@greggirwin ^/> @dockimbel, in the new `load/trap check`, you use `unless :all`. Are you using a get-word! as a convention if a refinement is a standard system word?^/^/I used it as an escape mechanism to pass compilation and avoid `all` being recognized as a native. Though, I think nowadays that the compiler should be able to process it properly as a simple word. But it might be good to keep it anyway, as a visual clue for readers that we are not using the `all` native. I am not sure if we need to make it a strict convention, as `next` which is also a refinement in that function, reads fine (at least to me) as a word inside the `case` body. So, it depends on the context, if it can be ambiguous, using the get-word form should be considered a good practice.}
    sent: "2017-03-23T05:27:01.498Z"
    editedAt: "2017-03-23T05:30:42.173Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d3349b6701410e58672745"
    text: {@gltewalt Nope, multi-line mode is only triggered by unclosed `[`, `(` or `^{` characters.}
    sent: "2017-03-23T02:36:11.131Z"
    editedAt: "2017-03-23T02:36:58.999Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d31f046d7eb18404f78fb5"
    text: "Should escape character trigger multi-line mode?"
    sent: "2017-03-23T01:04:04.754Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d31d9758ad4eb02841bf0f"
    text: {@gltewalt `^{` opens a string which can span over multiple lines, it will trigger the multi-line mode in the console until it finds a proper closing `^}`. In your example case, as `^}` is escaped, it does not count.}
    sent: "2017-03-23T00:57:59.123Z"
    editedAt: "2017-03-23T00:58:16.371Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d31cdd590d72c864f70550"
    text: {@rebolek Yes, it should be possible to accept strings.}
    sent: "2017-03-23T00:54:53.595Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d319d8a84f611959d34c9d"
    text: {If you type {^^} it waits for more input. If you type "^^" it doesn't.}
    sent: "2017-03-23T00:42:00.073Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d30afa6d7eb18404f740bb"
    text: {`^^` is the escape character.^/```^/>> "^^""^/== {"}^/```}
    sent: "2017-03-22T23:38:34.611Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d304e66d7eb18404f727f3"
    text: {```^/>> "^^"^/*** Syntax Error: invalid value at {"^^^^"}^/*** Where: do^/```}
    sent: "2017-03-22T23:12:38.369Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2deca5917e26076c2b553"
    text: {Which make sense, `cd` is for shell-like use, while `change-dir` gives you more power.}
    sent: "2017-03-22T20:30:02.741Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2deb4f7f7d48104459452"
    text: {My guy feeling is that it new users may like it at first, because it's familiar, but it will have negative value long term. }
    sent: "2017-03-22T20:29:40.515Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d2de246d7eb18404f66e19"
    text: {The rationale is surely that it makes `cd` more shell like.}
    sent: "2017-03-22T20:27:16.307Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d2dde2f7f7d4810445909d"
    text: {Adding word support for `change-dir` was news to me. And since it's a `get-word!` arg for `cd` it could be confusing.  Very subtle difference, if you're not paying close attention to which one you're using.}
    sent: "2017-03-22T20:26:10.837Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d2dc2d7b3f37e754255581"
    text: {could `cd` support `string!` also, so `cd "My Changes"` would work? It probably can.}
    sent: "2017-03-22T20:18:53.911Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2dc005917e26076c2a7d0"
    text: {changing directory is setting `system/options/path` to new value and it must be `file!`}
    sent: "2017-03-22T20:18:08.789Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2db6ab809ca5f4a70bc75"
    text: {yes, but that's just shortcut for making life bit easier}
    sent: "2017-03-22T20:15:38.269Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2da83a84f611959d22da4"
    text: "When running inside command shell"
    sent: "2017-03-22T20:11:47.739Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2da5e6d7eb18404f65b39"
    text: {It's irregular though?  % isn't needed for one word directories  `cd docs`}
    sent: "2017-03-22T20:11:10.474Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d9f12215a08f04b3e1f5"
    text: "doh...  :worried: "
    sent: "2017-03-22T20:09:21.577Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d7cb7b3f37e754253e93"
    text: {`cd %"my changes"`}
    sent: "2017-03-22T20:00:11.256Z"
    editedAt: "2017-03-22T20:00:29.272Z"
    v: 4
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d2cde25917e26076c25f3d"
    text: {red --cli (windows console) wont allow changing to directories that have spaces in their names.^/^/```^/>> pwd^/%/C/Users/Old%20Man/Desktop/^/>> cd My Changes^/*** Access Error: cannot open: %/C/Users/Old%20Man/Desktop/My/^/*** Where: do^/>> cd "My Changes"^/*** Script Error: cd does not allow string! for its :dir argument^/*** Where: cd^/>>^/```}
    sent: "2017-03-22T19:17:54.150Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2b1acb809ca5f4a6fd3ee"
    text: {@henrikmk No problem, it is easy to get it wrong because of lack of documentation and I must admit that it's my fault. }
    sent: "2017-03-22T17:17:32.218Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2ae136701410e5864d603"
    text: "@rebolek apologies for getting it wrong, sorry."
    sent: "2017-03-22T17:02:11.503Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d2ac2c7b3f37e754245ac4"
    text: "@rcqls Right."
    sent: "2017-03-22T16:54:04.089Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d2ac145917e26076c19ff7"
    text: {R3GUI has troubled history, it was based on Carl's original design that showed few widgets and looked great, but actually wasn't that great inside. Maybe rewriting everything from scratch instead of trying to add new features to that system would be better and probably faster also.}
    sent: "2017-03-22T16:53:40.203Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2ab4eb809ca5f4a6fb12f"
    text: {> you can't do that offline so you can't programmatically set it up, or you can't hook it into an undo/redo system^/^/Actually, you can do it offline/programmatically. Undo/redo - I'm not sure, this was never tried.^/Regarding the layout system, I think that it needed another layer on top of it to make it easy for user to actually use it. It is very powerful but hard to use.}
    sent: "2017-03-22T16:50:22.744Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2a9fb590d72c864f4ce1b"
    text: {@pekr Yes, it did address some of these things and I do think it's easier to use and is also a good demonstration in that a functioning GUI is separate from it being pretty. :-) I really hate its layout system, though, but again, this is because the layout engine is theoretically sound and a well thought out design that is very well tested for accuracy. It just isn't designed to be used.^/^/But an important thing that happened, when Saphirion started working on it, was that some widgets became developed extremely toward specific apps, and other widgets are hardly developed at all.^/^/For example, the table widget has elaborate pivot and filtering features now, and while that may be a good feature to have, the approach taken was to implement that at the cost of the overall design of the table. So as far as I know, you can't do that offline so you can't programmatically set it up, or you can't hook it into an undo/redo system.^/^/I think, this is because the requirement was set by a different person than the person who coded it and with a deadline on it, and neither of them have the big picture of the design of the widget, and you know how that goes.}
    sent: "2017-03-22T16:44:43.543Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d2a6d98fa16339540602d9"
    text: {@henrikmk didn't R3 GUI engine adress most of that? I thought it did. And if it did eventually, the quality of widgets was not great either}
    sent: "2017-03-22T16:31:21.548Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d2a57e5917e26076c17ca7"
    text: "@greggirwin thanks, I'll try my best"
    sent: "2017-03-22T16:25:34.989Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d2a453a84f611959d10d5b"
    text: {@dockimbel, in the new `load/trap check`, you use `unless :all`. Are you using a get-word! as a convention if a refinement is a standard system word?}
    sent: "2017-03-22T16:20:35.643Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d2a3fea84f611959d10c3e"
    text: {and also Carl's incessant "act on mouse down" philosophy adds to its difficulty of use, because of course nobody ever clicks wrong, right? :-) we had many discussions on that, but he never relented.}
    sent: "2017-03-22T16:19:10.763Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d2a3805917e26076c1702e"
    text: {@dockimbel Underperforming, by that I mean, in VID you have a drop list that you can click to open with the mouse, but is limited by window height. There's no keyboard operation possible. You can't use the scroll wheel and you can of course not use touch.^/^/From the developer side, setting it and getting its current setting is laborious because you always use direct values rather than an a key/value block.^/^/This adds code you need to write for localization and for mapping strings to values.^/^/So by self-imposed I mean, it's a neat widget for what it is. What it is, is just not very much.}
    sent: "2017-03-22T16:17:04.126Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d2a2c3a84f611959d105da"
    text: {@dockimbel There is no more problem with uggly space but only with old font. Right? }
    sent: "2017-03-22T16:13:55.609Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d2a0b28fa163395405e563"
    text: {@henrikmk @rcqls Bullet points and tables are also using the old font... I think I should revert all my changes and just wait until someone more skilled than me makes a better CSS...}
    sent: "2017-03-22T16:05:06.333Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d2a082fe6a638b1af17886"
    text: {@dockimbel I used an eat.r script, but it's probably  the same one.}
    sent: "2017-03-22T16:04:18.375Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d2a02a6701410e58648d31"
    text: {@henrikmk ^/> [...] where all the self-imposed limitations occur [...]^/^/Which limitations are you thinking about?}
    sent: "2017-03-22T16:02:50.192Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29fd95917e26076c158b6"
    text: {@greggirwin Indeed, drop-lists are very tricky to implement properly.}
    sent: "2017-03-22T16:01:29.710Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29fd26d7eb18404f516e7"
    text: "I remember eat-events too."
    sent: "2017-03-22T16:01:22.695Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d29f97b809ca5f4a6f748f"
    text: {@henrikmk You mean `eat-events.r` script? I used it a couple of times, mostly for faster scrolling.}
    sent: "2017-03-22T16:00:23.245Z"
    editedAt: "2017-03-22T16:05:59.533Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29f792215a08f04b29db9"
    text: {Before I forget, event throttling should be possible and easy. This is key to having a responsive UI despite low frame rates. Gabriele built something which I used with his permission for VID Extension Kit and it works fantastic.}
    sent: "2017-03-22T15:59:53.541Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d29f42a84f611959d0f1c8"
    text: {@henrikmk You have a unique perspective on Rebol GUIs, having worked on complex widgets for R2 and on a full GUI system in R3. Your feedback is very interesting and would certainly be helpful to improve Red/GUI. So feel free, to share it here, whenever you want.}
    sent: "2017-03-22T15:58:58.671Z"
    editedAt: "2017-03-22T15:59:28.205Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58d29ebf7b3f37e754240c5a"
    text: {@rcqls Thanks. The "Note:" blocks are still using the old font (see in "2.16. Line-join" for example).}
    sent: "2017-03-22T15:56:47.402Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29eb67b3f37e754240c4b"
    text: {@henrikmk, this is much more your area than mine. If you have suggestions about what is needed at the lower levels to achieve what you want, please share them. I know you worked around a lot with `list-view` for R2, and it wasn't fun for you. }
    sent: "2017-03-22T15:56:38.194Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d29e8a58ad4eb0283f513d"
    text: {@dockimbel I confirm that’s it works with @Oldes fix.}
    sent: "2017-03-22T15:55:54.645Z"
    editedAt: "2017-03-22T15:56:46.494Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d29e335917e26076c14e76"
    text: {`drop-list` is a great example of a tricky widget, because of the dropdown part extending past the original face region. In Windows, that part is actually a child of the desktop window IIRC.}
    sent: "2017-03-22T15:54:27.609Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d29dba58ad4eb0283f4c0d"
    text: {@henrikmk I'm not sure what you mean by VID underperforming? VID is just a front-end dialect that compiles to a tree of face objects. VID is not constraining anything, as you can always change the face tree how and when you want. You can even build additional dialects if required. What matters are the View engine capabilities, the upper layer(s) can be adjusted easily (it's all Red code).}
    sent: "2017-03-22T15:52:26.456Z"
    editedAt: "2017-03-22T15:55:46.400Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29d6ab809ca5f4a6f68ba"
    text: {@dockimbel I agree, and I think also if you want it done, it has to be done by someone in the background so not to interfere with whatever is being done now.}
    sent: "2017-03-22T15:51:06.109Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d29d30590d72c864f489da"
    text: {@Oldes @rcqls It seems the change proposed by Oldes worked! So now we have Github-style Asciidoc text. Looks good to me (and the kerning issue is gone from here).}
    sent: "2017-03-22T15:50:08.636Z"
    editedAt: "2017-03-22T15:50:12.606Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29d14f7f7d48104442a70"
    text: {@greggirwin, whatever DRAW system is available doesn't matter so much, but it looks to me that the Red/View engine tries to incorporate widget styles directly?^/^/Talking about drop lists that spec is very dangerous, because of how complicated it can be to create this style correctly and you can end up with something that underperforms like VID.^/^/I would separate all talk about face styles out, so the face tree handling doesn't get mixed up with style creation, because that's where all the self-imposed limitations occur, because we think we know what is needed to build a drop list widget. We really don't.^/^/Face objects can of course be of different capabilities if the View engine demands it for performance, so it's fine, if some faces are not supporting text and others not graphics and whatever.^/^/The rest looks OK.}
    sent: "2017-03-22T15:49:40.175Z"
    editedAt: "2017-03-22T15:49:58.319Z"
    v: 2
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d29d11a84f611959d0e497"
    text: {@maximvl In your browser, it's one of the development tool.}
    sent: "2017-03-22T15:49:37.140Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58d29d05b809ca5f4a6f66f0"
    text: {ah, I didn't follow the discussion, I thought about some kind of Red objects inspector :D}
    sent: "2017-03-22T15:49:25.531Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d29cfea84f611959d0e464"
    text: {@dockimbel So that’s a problem with css priority...}
    sent: "2017-03-22T15:49:18.399Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d29cda5917e26076c146db"
    text: "@maximvl CTRL-Shift-i in your browser's window."
    sent: "2017-03-22T15:48:42.014Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29cbb2215a08f04b28d40"
    text: "@dockimbel what is the inspector?"
    sent: "2017-03-22T15:48:11.108Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d29ca4a84f611959d0e2da"
    text: {@henrikmk, as you build it, keep in mind some of those handy R2 facets like `stretch/extend` and `edge`. I remember Chris R-G building a beautiful custom GUI with tiny PNGs that were basically just the edges he wanted, with a small center region that was the background. When extended in a button, etc., they looked great.}
    sent: "2017-03-22T15:47:48.352Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d29c9d5917e26076c14546"
    text: {@rcqls I made many successful changes in the inspector, every one failing once I pushed them online... }
    sent: "2017-03-22T15:47:41.015Z"
    editedAt: "2017-03-22T15:47:55.065Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29c667b3f37e75423fe38"
    text: {@henrikmk ^/> If you have stupid widgets that are crude and simple, it's because they haven't been developed well enough. It's not because of any fundamental limits at all. Even with R2/View as a baseline, we've never hit the limit for what we can do with UI widgets, except for having to work around some bugs.^/^/Agreed. But we learned that the costs of having a better set of widgets is very high.}
    sent: "2017-03-22T15:46:46.233Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29bec6701410e586473bb"
    text: {@dockimbel Yes,but it seems that changing  the style file has no effect since I can see that `rendering-text` has the same value after the change you made on `red/docs`.   So the first thing to do is to check that changing the value of this property has an effect within the inspector. If it works, we’ll have to fix the problem of the css file. }
    sent: "2017-03-22T15:44:44.703Z"
    editedAt: "2017-03-22T15:46:43.408Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d29b19590d72c864f47e75"
    text: {@rcqls I [tried](https://github.com/red/docs/commit/b6ff67c8529cfbb10fb2f7099076c9b686d4a8b3) something you suggested.}
    sent: "2017-03-22T15:41:13.312Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29aa0f7f7d48104441c25"
    text: {@Oldes I only have access to one CSS file in my gitbook...Though, you're right that the `.book` class is part of another CSS file (not sure if it's loaded before/after the one I have).}
    sent: "2017-03-22T15:39:12.196Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29a878fa163395405c176"
    text: {@dockimbel Changing style file does not seem to change the property `text-rendering` of `body`. Have you check with the inspector that unselecting this property solves the problem as it does on my `win7` virtual box ? }
    sent: "2017-03-22T15:38:47.521Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d29a6f2215a08f04b28151"
    text: {@dockimbel it looks ok with:^/```^/.book.font-family-1 {^/  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";^/}^/```^/Just there are wrong text sizes.. probably because of your changes before.}
    sent: "2017-03-22T15:38:23.542Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d29a61fe6a638b1af15592"
    text: {@greggirwin `base` is meant for that, if you want to get the most support from the OS, that is what we should start with, as such widget can be then used with native ones. Though, you can also write a full custom GUI system, just using Draw dialect. That is what Max did for Glass.}
    sent: "2017-03-22T15:38:09.063Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d2991d7b3f37e75423ec57"
    text: {Need to revisit QNX Photon. It was interesting as I recall.}
    sent: "2017-03-22T15:32:45.581Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d29908fe6a638b1af14b89"
    text: {@dockimbel, agreed. Do you think it should/will be built on `base` face being a generic OS window, or only the top level windows will be OS and everything else is managed regions in View? }
    sent: "2017-03-22T15:32:24.455Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d298735917e26076c12b95"
    text: {@dockimbel are you editing correct file? In the page is used this: https://doc.red-lang.org/gitbook/gitbook-plugin-fontsettings/website.css^/Where is still:^/```^/.book.font-family-1 {^/  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;^/}^/```}
    sent: "2017-03-22T15:29:55.542Z"
    editedAt: "2017-03-22T15:31:24.508Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d2986e2215a08f04b276e5"
    text: "`load/trap`. Wow."
    sent: "2017-03-22T15:29:50.924Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d298666d7eb18404f4eb8c"
    text: {@henrikmk @greggirwin In fact, we need both. We started with the low hanging fruits first.}
    sent: "2017-03-22T15:29:42.973Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d29776b809ca5f4a6f470a"
    text: {@henrikmk, if you look at the underlying View Engine (https://doc.red-lang.org/en/view.html) and Draw dialect (https://doc.red-lang.org/en/draw.html), what features are needed for you to build what you want? Red's default VID will use OS widgets, but that doesn't mean you can't build a portable version as well. }
    sent: "2017-03-22T15:25:42.368Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d2977358ad4eb0283f2a9f"
    text: {@Oldes I tried to inject the github font-family, I can make it work by hacking the CSS from the browser in developer mode, but once uploaded on Gitbook, it does not change the font. I probably don't specify the right classes... Any help with that would be appreciated, [CSS](http://sadness.dance/img/hell-is-sm.png) is not my cup of tea. ;-)}
    sent: "2017-03-22T15:25:39.518Z"
    editedAt: "2017-03-22T15:26:02.682Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d295ca6d7eb18404f4dcf0"
    text: {@pekr  It's not difficult to get them reasonably functional. It just takes time. The problem is that nobody has sat down for a year to do it right. Rather it seemed more important to build UI systems as small as possible, that used a dialect that someone thought very, very hard of, so they could be used by a 10-year old, without consideration about completeness or flexibility.^/^/That works well, if you just want to post screenshots of some UIs and impressive one-liners. It's crap, if you need to develop apps or use REBOL/Red apps. It absolutely kills the development pace, if you want to build and automatically test apps on a larger scale, because you spend 90% of the time debugging.^/^/If you recall all the talks about ATTACH for R3 GUI and how to attach scrollers to other widgets via the dialect, it turns out, this is not useful at all in developing a UI. It's the wrong approach.^/^/With VID, we've probably taken 20% advantage of what R2/View could do. RebGUI, probably 30-40%, as it severely lacks in testing/debugging friendliness and IMHO has an incorrect design foundation.^/^/If you have stupid widgets that are crude and simple, it's because they haven't been developed well enough. It's not because of any fundamental limits at all. Even with R2/View as a baseline, we've never hit the limit for what we can do with UI widgets, except for having to work around some bugs.^/^/Visual similarity to OS is less important, since everyone seem to be doing custom UIs and looks anyway nowadays.}
    sent: "2017-03-22T15:18:34.365Z"
    editedAt: "2017-03-22T15:24:33.536Z"
    v: 3
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d293c8a84f611959d0b29e"
    text: "Note that we have a red/GUI channel 😜 "
    sent: "2017-03-22T15:10:00.232Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d291ea58ad4eb0283f0e05"
    text: {@henrikmk  - yes and no. We also remember, how difficult it is to get those widgets right, in a system friendly way. To this date, no single Rebol GUI provided that in a finished form. The stuff like focusing, keyboard navigation, accelerator keys, proper OS metrics, ability be visually close to the OS settings, etc.}
    sent: "2017-03-22T15:02:02.117Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d28fa3a84f611959d09976"
    text: {@maximvl as I see it, REBOL/Red will continue to have a need for a GUI system with REBOL/Red native widgets rather than OS provided widgets. it is just so much simpler to deal with cross platform issues that way.}
    sent: "2017-03-22T14:52:19.176Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58d28d456d7eb18404f4a9da"
    text: {You should use the font-family which is using GitHub}
    sent: "2017-03-22T14:42:13.975Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d2850a8fa163395405428b"
    text: {@rcqls I push your proposed fix online, I don't see any effect. I wonder if I shouldn't rather try to tweak the`font-kerning` property, or maybe just switch to a better looking font?}
    sent: "2017-03-22T14:07:06.874Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d2847cf7f7d48104439936"
    text: {Maybe enter is not defined for an editable field? Might be system/widget related ... Difficult to say, where the focus is by default. But once I enter the field, the field gets blueish outline = is in focus. Enter, and e.g. tab keys, both produce a beep ...}
    sent: "2017-03-22T14:04:44.660Z"
    editedAt: "2017-03-22T14:06:14.508Z"
    v: 3
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d2844e590d72c864f3fbe2"
    text: {@pekr I can reproduce the beep, not sure why we get it...}
    sent: "2017-03-22T14:03:58.124Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d2843c2215a08f04b2074b"
    text: {@dockimbel  @btiffin let's say this stuff is "somehow" usefull, can't clearly define it in my head. Wouldn't just writing a parse rule be more precise? I remember parsing some Win server system stuff report. I am not much skilled user, but it was easy enough, and it was precise ... Well, some might say that `parse`is difficult to get info, hence I wonder - could there be some meta-abstraction, or how to call it, for `parse`, to easy the creation of dialects/rules?}
    sent: "2017-03-22T14:03:40.526Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d283867b3f37e754237238"
    text: {Small improvement suggestion for the console settings - when you edit the color related fields, you can change tuples, but hitting Enter only a system sound is played, most probably notifying us, that the change can't be made. But when you change a tuple and close the dialog, the change is reflected after all ...}
    sent: "2017-03-22T14:00:38.741Z"
    editedAt: "2017-03-22T14:00:48.326Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d283027b3f37e754236fff"
    text: {@btiffin ^/> So a random web page, (with some 50 pieces of junk) has 1200 ish unique items out of some 3400. Took 7 verbs to get a rough count.^/^/Well, the real number of unique items in the document could be 900 or 1500, you can't know unless you analyze the junk parts. If the input is short enough, you can do a quick visual review and guesstimate an error margin. If the input is big (not possible to review visually), then you need to analyze the junk parts, and calculate a good approximation for the error margin. Depending on the context and structure of the input, this can go from "pretty easy" to "terribly hard/long". But I don't want to diminish your enthousiasm ;-), I'm curious about the feedback of your experiments, and how much it can really help in a corporate environment.^/^/Maybe a kind of "visual lab" tool, for cutting a random input text into pieces, and be able to quickly tweak different kind of analyzers to extract some stats (with semi-assisted error margin calculator), could be a useful tool for some companies.}
    sent: "2017-03-22T13:58:26.682Z"
    editedAt: "2017-03-22T14:03:11.043Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d27b5a2215a08f04b1dcda"
    text: {If you list properties of the DataGrid Control I posted above, the amount of parameters is excessive. I can't imagine we would wrap all of that ...}
    sent: "2017-03-22T13:25:46.612Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d27b09a84f611959d01b62"
    text: {@Oldes  - that's what I fear. But then we start to draw our own buttons, scrollbars etc. and we are back at the R2 VID league ...}
    sent: "2017-03-22T13:24:25.624Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d27ae96d7eb18404f43fd4"
    text: {yes, most of the time, IS/ERP vendors implement their own. There tend to be very specific requirements. I sponsored one for RebGUI, it was developed by Cyphre. My requirements were - virtual columns, frozen columns, sortable columns, multiline, multi-row/column hilite, keyboard navigation, endless scrolling (buffering - no dataset size limitation), direct block/sql query display without reshufling the dataset (related to virtual columns/rows), etc.}
    sent: "2017-03-22T13:23:53.339Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d27a3e6d7eb18404f43b12"
    text: {But I'm not sure, if it would not be easier to do it directly in Red from the primitives.. as dealing with all the possibilities in Red/System is not easy.}
    sent: "2017-03-22T13:21:02.901Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d27a376701410e5863b8a7"
    text: "and also check Doc's grid implementation"
    sent: "2017-03-22T13:20:55.559Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d27a0d8fa163395405098d"
    text: {I would read couple of them to find out which approaches are the best for Red}
    sent: "2017-03-22T13:20:13.607Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d279f95917e26076c08c11"
    text: {grid systems can be pretty powerful, there are a lot of posts & discussions on the web}
    sent: "2017-03-22T13:19:53.034Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d279e0fe6a638b1af0ac62"
    text: "cool beginning, first multicolumnt in Red :-)"
    sent: "2017-03-22T13:19:28.607Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d279af5917e26076c0898f"
    text: ":clap: "
    sent: "2017-03-22T13:18:39.888Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d278965917e26076c083a5"
    text: {I'm able to do this... but you know.. it starts to be complex pretty quicky.}
    sent: "2017-03-22T13:13:58.227Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
)#(
    id: "58d2788c7b3f37e7542339f2"
    text: {[![blob](https://files.gitter.im/red/red/ekzR/thumb/blob.png)](https://files.gitter.im/red/red/ekzR/blob)}
    sent: "2017-03-22T13:13:48.427Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d273d18fa163395404e692"
    text: {Well, there are imo only 2-3 ways. 1) Implement it using some draw primitives. Strong Grid, as Henrik's one. That would be cross platform, but more diffitcult to read to change od GUI related Windows settings 2) Use what is available on particular platform, which might mean a different experience for users 3) kind of text-list, which sits in the middle and is for simpler scenarios ...}
    sent: "2017-03-22T12:53:37.354Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d27350a84f611959cfee4f"
    text: {https://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview(v=vs.110).aspx}
    sent: "2017-03-22T12:51:28.266Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d272d4b809ca5f4a6e7692"
    text: {speaking about GUI elements, how do you want to deal with ones which have native implementations in some OS'es but not in the others?}
    sent: "2017-03-22T12:49:24.219Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d27296f7f7d481044331d4"
    text: {Yes, those two are similar. Wonder about the macOS. Found also a DataGrid control, which is more DB oriented, but that's a different beast. Difficult to guess for me, what is part of the default Windows}
    sent: "2017-03-22T12:48:22.468Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d27277f7f7d4810443313d"
    text: "@pekr haha, true, but it's a great idea :+1: "
    sent: "2017-03-22T12:47:51.126Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d272618fa163395404dff1"
    text: {It would be good to have it somehow similar to http://www.hmkdesign.dk/rebol/list-view/docs/list-view.html}
    sent: "2017-03-22T12:47:29.178Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d2725c6701410e586386a2"
    text: {I pay for much more nonsense in different areas of life sometimes :-)}
    sent: "2017-03-22T12:47:24.032Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d2722d6d7eb18404f408b0"
    text: "@pekr are you willing to pay 30 eur for this? :)"
    sent: "2017-03-22T12:46:37.602Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d27209a84f611959cfe2bd"
    text: {hm, looks like a table with different representations}
    sent: "2017-03-22T12:46:01.662Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d271a67b3f37e754230a52"
    text: {I'm trying to implement this one: https://msdn.microsoft.com/en-us/library/bb774735(v=vs.85).aspx}
    sent: "2017-03-22T12:44:22.195Z"
    editedAt: "2017-03-22T12:44:40.164Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d271842215a08f04b19e26"
    text: "a table or?"
    sent: "2017-03-22T12:43:48.786Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d2717dfe6a638b1af07d87"
    text: "what do you mean by `multi-columnt text list` ?"
    sent: "2017-03-22T12:43:41.219Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d26deab809ca5f4a6e566d"
    text: {Is 30 EUR, as a motivation, OK? :-) btw - what widget are you going to wrap? If I remember correctly, there were multiple ones? The question also is - how to do it in a cross-platform like manner - will we see first native, yet incompatible widgets? (I don't mind eventually)}
    sent: "2017-03-22T12:28:26.992Z"
    editedAt: "2017-03-22T12:30:17.262Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d26cc4590d72c864f37bc5"
    text: {@pekr^/> yes, multi-columnt text list is a must for the DB related apps. But - it could also be volunteered by some semi-skilled user. Now where to find one? :-) I could sponsor some bounty for that, the question is, if the code would be good enough to be oficially included into Red. That would be my condition ...^/^/I'm giving it a try.. just don't know how far I will get.}
    sent: "2017-03-22T12:23:32.328Z"
    editedAt: "2017-03-22T12:24:02.166Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d265536d7eb18404f3c1c1"
    text: {@dockimbel I had to add an extra ```next``` to the second ```input:``` as the sample load-any spins with two pieces of junk in a row.  But here is a sample of the type of things I think people will be able to do, Doc.  And this is just making it up without any current need.^/^/```>> a: read https://sourceforge.net/p/open-cobol/discussion/cobol/thread/2b41632f/?limit=25&page=1#76dc^/== ^{<!DOCTYPE html>^^/<!-- Server: sfn-web-10 -->^^/^^/^^/    ^^/^^/^^/^^/^^/^^/^^/^^/^^/^^/^^/^^/^^/^^/^^/^^/^^^/>> d: load-any a^/limiter:  3524^/== [<!DOCTYPE html> <!-- Server: sfn-web-10 -->^/    <!--[if lt IE^/>> length? d^/== 3398^/>> length? sort unique d^/== 1204^/```^/So a random web page, (with some 50 pieces of junk) has 1200 ish unique items out of some 3400.  Took 7 verbs to get a rough count.  And zero thinking.  I can't see this **not** being attractive to so many different areas of study.  And with a little tweaking, it'll be world domination time.}
    sent: "2017-03-22T11:51:47.581Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58d25ed37b3f37e75422aeef"
    text: {@dockimbel Don’t know if it works but I would try creating `styles/website.css` to redefine `body`^/```^/body {^/    font-smoothing: antialiased;^/    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;^/    font-size: 14px;^/    letter-spacing: .2px;^/    text-size-adjust: 100%;^/    -ms-text-size-adjust: 100%;^/    -webkit-text-size-adjust: 100%^/}^/```^/^/instead of ^/```^/body {^/    text-rendering: optimizeLegibility;^/    font-smoothing: antialiased;^/    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;^/    font-size: 14px;^/    letter-spacing: .2px;^/    text-size-adjust: 100%;^/    -ms-text-size-adjust: 100%;^/    -webkit-text-size-adjust: 100%^/}^/```}
    sent: "2017-03-22T11:24:03.318Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d25e637b3f37e75422ad70"
    text: {Probably a hassle to use it, even with [this css](https://gist.github.com/AndrewBarba/2c0f6612ceef30f5f55d).}
    sent: "2017-03-22T11:22:11.078Z"
    editedAt: "2017-03-22T11:22:28.304Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d25d846d7eb18404f39c01"
    text: {Apple now uses the SF Pro Text and SF Pro Display for its online tech docs.}
    sent: "2017-03-22T11:18:28.343Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d25c9e8fa1633954047526"
    text: "I like the look on Github."
    sent: "2017-03-22T11:14:38.530Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d25c0f6d7eb18404f396eb"
    text: {@dockimbel unselecting in the inspector of development tools  `text-rendering: optmizedLegibility` makes the text nicer. }
    sent: "2017-03-22T11:12:15.581Z"
    editedAt: "2017-03-22T11:16:14.514Z"
    v: 6
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d25b9658ad4eb0283df4ba"
    text: {I am looking at the rendered result only, on docs.red-lang.org.}
    sent: "2017-03-22T11:10:14.951Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d25aa1590d72c864f325b9"
    text: {And this on the second page:^/```^/font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;^/```}
    sent: "2017-03-22T11:06:09.589Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d25a7f5917e26076bfd31a"
    text: {This is on Github:^/```^/font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";^/```}
    sent: "2017-03-22T11:05:35.663Z"
    editedAt: "2017-03-22T11:07:28.148Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d259496d7eb18404f389eb"
    text: {I can see the spaces here: https://doc.red-lang.org/en/draw.html#_fill_pen}
    sent: "2017-03-22T11:00:25.177Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d2589a58ad4eb0283de799"
    text: {@dockimbel are we checking same page? I was trying https://github.com/red/docs/blob/master/en/draw.adoc}
    sent: "2017-03-22T10:57:30.257Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d2586a6701410e586305d7"
    text: "True."
    sent: "2017-03-22T10:56:42.648Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d257ed2215a08f04b11cf7"
    text: "@PeterWAWood But it is not so convenient…."
    sent: "2017-03-22T10:54:37.061Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d257ea5917e26076bfc723"
    text: {>> parse dat [copy to preprocedure to 'program-id. copy code to end]^/>> parse dat [copy preproc to 'program-id. copy code to end]^/== true^/>> help code^/code is a block! of value: [PROGRAM-ID. hello.^/    400 PROCEDURE DIVISION.^/    500 DISPLAY "Hello, world" .^/    600 STOP RUN.^/]^/Just pulled out the procedure division from a fixed format source COBOL program, Doc.  Zero effort.  Refinements and domain specific tweaks to load-any are going to make this a huge boon, huge.  Yeah, there are going to be some early rough edges, and some training to get people comfortable, but this is way cool.  Many many kudos.}
    sent: "2017-03-22T10:54:34.601Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58d257c26d7eb18404f382d5"
    text: "@dockimbel I see the gaps on Chrome/Win 7 too."
    sent: "2017-03-22T10:53:54.849Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d2577f6d7eb18404f38195"
    text: {Anyway, the font does not look that nice, does anyone have a suggestion for a better font to use for such technical documentation.}
    sent: "2017-03-22T10:52:47.667Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d257558fa1633954045e07"
    text: {@Oldes So, you don't see those unusually large gaps like in my capture? That's odd...  I just checked on another Chrome/Win7 box and the gaps are present, but at different places...}
    sent: "2017-03-22T10:52:05.078Z"
    editedAt: "2017-03-22T10:54:47.339Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d254648fa1633954044e4d"
    text: "@rebolek Thanks too."
    sent: "2017-03-22T10:39:32.601Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d2544ef7f7d48104429c5e"
    text: {@rcqls Either widening the window a little or reducing the font works for me. Thanks for working that out :-)}
    sent: "2017-03-22T10:39:10.632Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d253cb8fa1633954044b29"
    text: "@btiffin Let the experiment start. ;-)"
    sent: "2017-03-22T10:36:59.814Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d253b22215a08f04b10ce7"
    text: {@rebolek @PeterWAWood when making font size smaller, it is fine.}
    sent: "2017-03-22T10:36:34.799Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d253938fa1633954044a13"
    text: "When I make it big again, the text is back."
    sent: "2017-03-22T10:36:03.483Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d253616701410e5862ed97"
    text: {I've resized window to make it smaller and now the text is gone.}
    sent: "2017-03-22T10:35:13.749Z"
    editedAt: "2017-03-22T10:35:19.101Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d253486701410e5862ed21"
    text: "@rcqls yes, that looks like it is the problem!"
    sent: "2017-03-22T10:34:48.693Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d253335917e26076bfb1c4"
    text: "Maybe Adblocker"
    sent: "2017-03-22T10:34:27.458Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d253248fa16339540447fc"
    text: {@rebolek @PeterWAWood Maybe a problem when size of browser is too small.}
    sent: "2017-03-22T10:34:12.450Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d253186701410e5862ec10"
    text: {@PeterWAWood me too: `Verze 10.0.3 (11602.4.8.0.1)` . Do you use some extensions? }
    sent: "2017-03-22T10:34:00.217Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d253176d7eb18404f36de6"
    text: {@rcqls I think you are correct, the problem does not relate just to the Red pages.}
    sent: "2017-03-22T10:33:59.493Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d252f25917e26076bfb0fe"
    text: "@rebolek I'm using Safari 10.0.3"
    sent: "2017-03-22T10:33:22.906Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d252e5a84f611959cf4d1f"
    text: {@dockimbel, looking and smiling Doc.  You'll be having history majors and geologists and sports bookies and maybe even the odd professional programmer all a giddy in no time.  Thanks for the update. ^/^/COBOL in a block.  WOOHOO^/^/>> cob: read %/home/btiffin/lang/cobol/hello.cob^/== ^{000100* HELLO.COB GnuCOBOL FAQ example^^/000200 IDENTIFICATION DIVIS^/>> dat: load-any cob^/== [#junk "000100" * HELLO.COB GnuCOBOL FAQ example^/    200 IDENTIFI...^/>> help dat^/dat is a block! of value: [#junk "000100" * HELLO.COB GnuCOBOL FAQ example^/    200 IDENTIFICATION DIVISION.^/    300 PROGRAM-ID. hello.^/    400 PROCEDURE DIVISION.^/    500 DISPLAY "Hello, world" .^/    600 STOP RUN.^/]^/That is some sweet looking help.  Effortless start.  WOOHOO!  Ima go tell.  Ima go tell.^/^/Ok, one more before leaving to go tell.  WOOHOO!}
    sent: "2017-03-22T10:33:09.148Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58d252befe6a638b1aefed82"
    text: "Safari on macOS and nothing disappears."
    sent: "2017-03-22T10:32:30.869Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d252af7b3f37e754227a04"
    text: {@PeterWAWood same problem in safari but not in Firefox. Don’t think it is specific to Red doc. }
    sent: "2017-03-22T10:32:15.604Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d252a1fe6a638b1aefed0f"
    text: {[![Snímek obrazovky 2017-03-22 v 11.31.21.png](https://files.gitter.im/red/red/ZoIf/thumb/Sni_mek-obrazovky-2017-03-22-v-11.31.21.png)](https://files.gitter.im/red/red/ZoIf/Sni_mek-obrazovky-2017-03-22-v-11.31.21.png)}
    sent: "2017-03-22T10:32:01.086Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d25281f7f7d481044294e0"
    text: {[![blob](https://files.gitter.im/red/red/EsaU/thumb/blob.png)](https://files.gitter.im/red/red/EsaU/blob)}
    sent: "2017-03-22T10:31:29.815Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d25267fe6a638b1aefec55"
    text: "@PeterWAWood interesting, let me check it here"
    sent: "2017-03-22T10:31:03.565Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58d252588fa1633954044269"
    text: "Well the text disappears."
    sent: "2017-03-22T10:30:48.983Z"
    editedAt: "2017-03-22T10:31:14.948Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d252532215a08f04b1073a"
    text: "I have it ok on Windows 7 in Chrome"
    sent: "2017-03-22T10:30:43.360Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d252405917e26076bfadaf"
    text: {I can never view the Gitbook docs in Safari as the page disappears  after ten seconds or so.}
    sent: "2017-03-22T10:30:24.932Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d252225917e26076bfad24"
    text: {@PeterWAWood Looks good in FF and IE, it seems to be a Chrome issue with font rendering...}
    sent: "2017-03-22T10:29:54.893Z"
    editedAt: "2017-03-22T10:30:07.129Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d25210fe6a638b1aefeb0f"
    text: "It looks fine on Firefox/macOS"
    sent: "2017-03-22T10:29:36.484Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d251f6fe6a638b1aefeaa8"
    text: "chapter 2.14.2"
    sent: "2017-03-22T10:29:10.137Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d251e76d7eb18404f36735"
    text: "https://doc.red-lang.org/en/draw.html"
    sent: "2017-03-22T10:28:55.509Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d25142a84f611959cf4413"
    text: {Yes, from published docs, screenshot from Chrome/Win7.}
    sent: "2017-03-22T10:26:10.807Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d2513c5917e26076bfa9cf"
    text: {[![Screen Shot 2017-03-22 at 18.23.58.png](https://files.gitter.im/red/red/KHbj/thumb/Screen-Shot-2017-03-22-at-18.23.58.png)](https://files.gitter.im/red/red/KHbj/Screen-Shot-2017-03-22-at-18.23.58.png)}
    sent: "2017-03-22T10:26:04.831Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d251256701410e5862e2e4"
    text: {@dockimbel Was that taken from the published docs?^/^/This is what it looks likes when rendered in Firefox:^/}
    sent: "2017-03-22T10:25:41.503Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d24bbb6d7eb18404f34b64"
    text: {See the gaps in words like "following", "method",  "not", "horizontal", ... Is it a font problem (in such case which font should we use?) or is it a CSS issue (which can be solved by fixing the [CSS file](https://github.com/red/docs/blob/master/en/styles/website.css))?}
    sent: "2017-03-22T10:02:35.936Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d24b306701410e5862c72e"
    text: {[![blob](https://files.gitter.im/red/red/Cm1b/thumb/blob.png)](https://files.gitter.im/red/red/Cm1b/blob)}
    sent: "2017-03-22T10:00:16.048Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d24b26a84f611959cf298c"
    text: {I have a question for the web/CSS experts here: the default font used for general text by gitbook looks really bad:^/}
    sent: "2017-03-22T10:00:06.889Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d2417b590d72c864f2b4b5"
    text: {@pekr I encourage you, if you have the time and the skills (that's not my own case) ...}
    sent: "2017-03-22T09:18:51.128Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "58d240205917e26076bf5e28"
    text: {yes, multi-columnt text list is a must for the DB related apps. But - it could also be volunteered by some semi-skilled user. Now where to find one? :-) I could sponsor some bounty for that, the question is, if the code would be good enough to be oficially included into Red. That would be my condition ...}
    sent: "2017-03-22T09:13:04.347Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d23fab6701410e5862937c"
    text: {@pekr  I still remember multi-column text-list, do you? But it seems more a task for @qtxie, and I dont want to disturb guru's from their main work :smile: }
    sent: "2017-03-22T09:11:07.080Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "58d2324af7f7d4810441fe6a"
    text: {@pekr `load/trap` can be a useful feature for IDE, it's not a private wish.}
    sent: "2017-03-22T08:14:02.245Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d2301cf7f7d4810441f4b5"
    text: {My CSV loader is available [here](https://github.com/rebolek/red-tools/blob/master/csv.red). I will add CSV saver also, but I do not have any use for it now, so it may take some time. The loader seems to work fine with moderately big (~10 000 lines), messy and UTF-8 files and produces same results as BrianH's `csv-tools`.}
    sent: "2017-03-22T08:04:44.010Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d22ee558ad4eb0283d307c"
    text: {Well, I already got CALL, so nothing more comes to my mind recently ...}
    sent: "2017-03-22T07:59:33.191Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d22eb27b3f37e75421d833"
    text: {This week Doc is in a good mood to implement some private wishes. I wonder what favourite feature I would remember to get into Red :-)}
    sent: "2017-03-22T07:58:42.510Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d22b78a84f611959ce9b3d"
    text: "Cool!"
    sent: "2017-03-22T07:44:56.256Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d229232215a08f04b051cc"
    text: "Feel free to fork/improve my `load-any` version."
    sent: "2017-03-22T07:34:59.931Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d228d68fa1633954039126"
    text: {I made a simple [`load-any`](https://gist.github.com/dockimbel/bffe92eb070b24f5573b677589a94591) implementation:^/```lisp^/load-any "aaa 456z 3 abc"^/== [aaa #junk "456" z 3 abc]^/```^/Erroneous segments are stored as string prefixed with `#junk`.}
    sent: "2017-03-22T07:33:42.124Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d228795917e26076befcff"
    text: {FYI (especially @btiffin), `load` has a `trap` refinement now, allowing to return some extra information in case of a syntax error. Using it, it is possible to build a `load-any`.}
    sent: "2017-03-22T07:32:09.127Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d179685917e26076bc48d3"
    text: "@gltewalt, yes."
    sent: "2017-03-21T19:05:12.694Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d174805917e26076bc2e94"
    text: "Do I get points for breaking things?"
    sent: "2017-03-21T18:44:16.805Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d1744ea84f611959cbc246"
    text: {@9214 It appears that feature is called [git submodules](https://github.com/blog/2104-working-with-submodules). Looks like there are pros and cons associated with it, but it doesn't have to be all or nothing. Maybe larger projects that have a life of their own would rather be a submodule, but toys/demos are better just being a subfolder...}
    sent: "2017-03-21T18:43:26.191Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d1701da84f611959cbb0e8"
    text: "can repos on github be cross-referenced somehow?"
    sent: "2017-03-21T18:25:33.317Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d17009fe6a638b1aec4548"
    text: {If someone searches for a repo for red telegram api, they wouldn't easily find it}
    sent: "2017-03-21T18:25:13.920Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d16fc96701410e585f6b23"
    text: {Think in terms of simplicity.. if someone was to fork it to create their bot.. they are also cloning this extra code..}
    sent: "2017-03-21T18:24:09.196Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d16f66fe6a638b1aec423d"
    text: {@rebolek no… as a showcase it's OK I guess.. but that code mixed with others is not so accessible}
    sent: "2017-03-21T18:22:30.714Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d15aeb6701410e585f01f0"
    text: {Is red/code repo somehow harder to access than other repos?}
    sent: "2017-03-21T16:55:07.479Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d15989fe6a638b1aebc947"
    text: {@nc-x that's really cool.. although, I'd rather you have it living separately instead of in red/code repo. Ease of access and all..}
    sent: "2017-03-21T16:49:13.319Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d150ee6d7eb18404ef2923"
    text: {@nc-x Nice work! Could go to red/code, once modified to be more idiomatic.}
    sent: "2017-03-21T16:12:30.617Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d15073fe6a638b1aeb981d"
    text: "Red/Code would be better, yes."
    sent: "2017-03-21T16:10:27.913Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d15026f7f7d481043e4b62"
    text: {```^/reply: ^-^-""^/msg: ^-^-""^/user-id: ^-""^/text: ""^/```^/could be `reply: msg: user-id: text: copy ""` ? IMO this discussion is for a `/code` room}
    sent: "2017-03-21T16:09:10.793Z"
    editedAt: "2017-03-21T16:09:27.072Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d14fb1b809ca5f4a697d1b"
    text: {And if you're initializing empty strings, `copy` them. Otherwise they all refer to the same string. If they will always be set to new strings later, you can set them to `none` to start, and a comment can note what type they should contain later if needed.}
    sent: "2017-03-21T16:07:13.176Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d14f536d7eb18404ef202b"
    text: "and `while [true]` should be `forever` I think"
    sent: "2017-03-21T16:05:39.432Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d14eff7b3f37e7541e2f11"
    text: {@rebolek great!^/^/@endo64 I'm anxious to see what Doc comes up with for experimentation.^/^/@nc-x cool.^/`to url! append append https://api.telegram.org/bot token "/getUpdates"`^/can be^/`rejoin [https://api.telegram.org/bot token "/getUpdates"]`^/^/`append append append append reply {?chat_id=} user-id {&text=} msg`^/can be^/`rejoin [reply {?chat_id=} user-id {&text=} msg]`^/^/Other multi-appends can use `rejoin` as well.}
    sent: "2017-03-21T16:04:15.649Z"
    editedAt: "2017-03-21T16:04:27.926Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d14d2658ad4eb028399e7a"
    text: {@dockimbel If this is material for Red/Code, then please tell me the branch and any changes that have to be made before sending the PR.}
    sent: "2017-03-21T15:56:22.299Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d14ceb7b3f37e7541e24a5"
    text: {**Also, I might write down a blog article on this topic in a few days.**}
    sent: "2017-03-21T15:55:23.094Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d14cc3a84f611959caeff6"
    text: {I created a sample [**telegram**](https://telegram.org/) bot in Red. https://github.com/nc-x/SampleTelegramBotInRed^/^/It is accompanied with a bit too many comments, so I might remove many of them soon.^/^/It might not be idiomatic Red as I haven't yet got the time to learn Red properly. ^/^/I think it more or less works, but if any one finds any bugs, bug reports as well as fixes welcome.^/^/So Pull Requests to make the code idiomatic or bug fixes or any improvements welcome.}
    sent: "2017-03-21T15:54:43.144Z"
    editedAt: "2017-03-21T16:00:58.296Z"
    v: 4
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58d1301f590d72c864ee3809"
    text: {Honey badger could be fine, but... could be easily confused with a sconse. Not smeeling good !}
    sent: "2017-03-21T13:52:31.575Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58d129c858ad4eb02838d90d"
    text: {@dockimbel oooh, I like the idea of a rebellious looking mascot.}
    sent: "2017-03-21T13:25:28.688Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58d1227ff7f7d481043d4f2f"
    text: {@greggirwin On kwatz! discussion, my need was to skip (or keep them as a string! or some other format like kwatz!) of non-loadable parts of the string without parsing and changing the input string to fix its format to make it loadable, before load.^/Keeping non-loadables in a different type (say kwatz! or error!) makes it easy to find / skip them or give error if any.^/I know it is error-prone but it also relaxes if I know the data is almost loadable (like csv or similar tabular format, but non-loadable by Red).}
    sent: "2017-03-21T12:54:23.258Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58d10c158fa1633954fe9b9b"
    text: {@dockimbel there's no level ^/:sunglasses:  🥄 :baby: }
    sent: "2017-03-21T11:18:45.911Z"
    editedAt: "2017-03-21T11:21:56.445Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d10b9f590d72c864ed876c"
    text: "@9214 Ah, we reached the 31337 h4x0r level! ;-)"
    sent: "2017-03-21T11:16:47.413Z"
    editedAt: "2017-03-21T11:21:28.177Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d108d4a84f611959c9972f"
    text: "will do for PR and twitter"
    sent: "2017-03-21T11:04:52.149Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d108acf7f7d481043cdaea"
    text: "yeah it's kinda trandy"
    sent: "2017-03-21T11:04:12.924Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d108a8590d72c864ed7a2a"
    text: "@pekr https://cs.wikipedia.org/wiki/Leetspeak"
    sent: "2017-03-21T11:04:08.902Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58d1086ca84f611959c994c4"
    text: "Is that any special number, or what?"
    sent: "2017-03-21T11:03:08.018Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d1076ca84f611959c9904d"
    text: {[![изображение.png](https://files.gitter.im/red/red/2B7a/thumb/___________.png)](https://files.gitter.im/red/red/2B7a/___________.png)}
    sent: "2017-03-21T10:58:52.124Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d0ff878fa1633954fe5fe0"
    text: {Better take your leet screen shot now @dockimbel @qtxie ! You got the 1337 from me ;-P}
    sent: "2017-03-21T10:25:11.923Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58d0e99ff7f7d481043c44e7"
    text: {@greggirwin so I wrote my own `load-csv` because porting Brian's one wasn't very easy, the only difference is that mine's one trims spaces at the end (not sure why, it shouldn't when you look at the rule, but maybe I overlooked something). I don't care much, because it saves me work, I want trimming in my case :)^/I've tested it with messy ~10 000 lines CSV with multiline values and quotes inside quotes and besides the trimming issue, there are no differences in the result.}
    sent: "2017-03-21T08:51:43.196Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d0b8cf6d7eb18404ec7a13"
    text: "Ok. :ok_hand: "
    sent: "2017-03-21T05:23:27.535Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58d0b7bda84f611959c84391"
    text: "@qtxie Sent you a gist"
    sent: "2017-03-21T05:18:53.312Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0b38b6701410e585c13a7"
    text: {@gltewalt Would you paste your code somewhere, so I can debug it?}
    sent: "2017-03-21T05:00:59.767Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58d0b2ee58ad4eb02836e82c"
    text: "I'm having a bad night, in general :worried: "
    sent: "2017-03-21T04:58:22.456Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0b265590d72c864ec2a8b"
    text: {Gahhh... :worried: ^/^/calling the exe from the command line still has the access violation^/^/```^/Microsoft Windows [Version 6.1.7601]^/Copyright (c) 2009 Microsoft Corporation.  All rights reserved.^/^/C:\Users\Old Man>red -r "C:\Users\Old Man\Desktop\My Changes\red-play.red"^/^/-=== Red Compiler 0.6.1 ===-^/^/Compiling C:\Users\Old Man\Desktop\My Changes\red-play.red ...^/Compiling compression library...^/...compilation time : 1076 ms^/^/Target: MSDOS^/^/Compiling to native code...^/...compilation time : 29126 ms^/...linking time     : 234 ms^/...output file size : 556544 bytes^/...output file      : C:\Users\Old Man\red-play.exe^/^/^/C:\Users\Old Man>red-play.exe^/The sum of cat is:^/*** Runtime Error 1: access violation^/*** at: 75529B60h^/^/C:\Users\Old Man>^/```}
    sent: "2017-03-21T04:56:05.602Z"
    editedAt: "2017-03-21T04:57:50.767Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0af7df7f7d481043b692c"
    text: {> Maybe a rebellious language deserves some rebellious mascot?^/^/@dockimbel makes me think "honey badger" :smile: }
    sent: "2017-03-21T04:43:41.230Z"
    editedAt: "2017-03-21T04:43:57.083Z"
    v: 2
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d0aeb92215a08f04aa15ab"
    text: {It doesn't recognize `ask` or `input` when compiling.^/^/```^/Microsoft Windows [Version 6.1.7601]^/Copyright (c) 2009 Microsoft Corporation.  All rights reserved.^/^/C:\Users\Old Man>red -r "C:\Users\Old Man\Desktop\My Changes\red-play.red"^/^/-=== Red Compiler 0.6.1 ===-^/^/Compiling C:\Users\Old Man\Desktop\My Changes\red-play.red ...^/*** Compilation Error: undefined word input^/*** in file: C:\Users\Old Man\Desktop\My Changes\red-play.red^/*** near: [^/    input^/]^/^/```}
    sent: "2017-03-21T04:40:25.088Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0aceb5917e26076b89653"
    text: {I'm sorry. That was with -c flag.  It's fine with -r flag.}
    sent: "2017-03-21T04:32:43.766Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0abe26d7eb18404ec5144"
    text: {@qtxie  When I compile from windows terminal it compiles, but when I double click the .exe, I get this error `The procedure entry point exec/f_quit could not be located in the dynamic link library LIBREDRT.DLL`}
    sent: "2017-03-21T04:28:18.833Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0aa8f7b3f37e7541b5c1d"
    text: {@dockimbel, maybe a shape-shifting amoeba then, which normally looks like a red pill? :^^)}
    sent: "2017-03-21T04:22:39.503Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d0a9b46701410e585bf67d"
    text: {(or libRed directory has to be in the same directory as red.exe for compiling?)}
    sent: "2017-03-21T04:19:00.424Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0a9712215a08f04aa05ff"
    text: {Yes. I think it might be because I moved the red.exe into the root Users folder and there are permissions issues. I'm trying to use VSCODE from C:\Users\Old Man\, but it doesn't read the path correctly from preferences.  It only reads C:\Users\Old}
    sent: "2017-03-21T04:17:53.542Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0a762fe6a638b1ae8a127"
    text: {@gltewalt You mean the interpreter works fine, but the compiled code crashes?}
    sent: "2017-03-21T04:09:06.324Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58d0a6257b3f37e7541b4e17"
    text: {Maybe a rebellious language deserves some rebellious mascot?}
    sent: "2017-03-21T04:03:49.145Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d0a5d47b3f37e7541b4d45"
    text: {@greggirwin So a chimera? That would look awesome, but could backfire on us as the analogy might not be the best one in the programming languages realm. ;-)}
    sent: "2017-03-21T04:02:28.136Z"
    editedAt: "2017-03-21T04:02:56.284Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d0a5917b3f37e7541b4c35"
    text: "@qtxie ^^----"
    sent: "2017-03-21T04:01:21.899Z"
    editedAt: "2017-03-21T04:01:27.667Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d0a29a58ad4eb02836b715"
    text: {VSCode is irritating me...^/^/```^/C:\Users\RedBin>red-play.exe^/^/The sum of cat is:^/*** Runtime Error 1: access violation^/*** at: 7552A069h^/```^/^/```^/c:\Users\Old Man\Desktop\My Changes>C:/Users/red --cli "c:\Users\Old Man\Desktop\My Changes\red-play.red"^/^/The sum of cat is: 312^/^/Thanks^/^/c:\Users\Old Man\Desktop\My Changes>^/```}
    sent: "2017-03-21T03:48:42.834Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0420efe6a638b1ae731bf"
    text: "XenoAntCephalaBeeBirdMorphPod mascot?"
    sent: "2017-03-20T20:56:46.939Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d04197590d72c864ea946f"
    text: ":+1:  :smile: "
    sent: "2017-03-20T20:54:47.958Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0416ff7f7d4810439cd7b"
    text: "So cute and...cuttley."
    sent: "2017-03-20T20:54:07.504Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d040d4fe6a638b1ae72c14"
    text: {Look lol - https://www.amazon.com/Little-Red-Cuttlefish-Henry-Herz/dp/1455621463}
    sent: "2017-03-20T20:51:32.485Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d040c858ad4eb028355008"
    text: "And an apt analogy. :^^)"
    sent: "2017-03-20T20:51:20.256Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d040adb809ca5f4a653507"
    text: {The octopus/cuttlefish is one of my favorite animals.}
    sent: "2017-03-20T20:50:53.678Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d0408af7f7d4810439c783"
    text: {A gist is fine, or short list in chat here that we can extract.}
    sent: "2017-03-20T20:50:18.004Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d04071a84f611959c688d8"
    text: {If you just note all the surprises and encounters, that would be great. Some of us don't know what we know anymore. Certain holes you have to fall into yourself, but we forget the bumps new Reducers hit and have to be reminded.}
    sent: "2017-03-20T20:49:53.626Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d03fbd5917e26076b6fdd3"
    text: {If you have 50 minutes to spare, sometime - https://youtu.be/6SCrRYDOg_s}
    sent: "2017-03-20T20:46:53.904Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d03f757b3f37e75419cc1d"
    text: {I'm still in the "I don't know what I don't know" camp, but from the surprises I've encountered and the holes I've fallen into while learning about Red so far - one animal that comes to mind - cuttlefish}
    sent: "2017-03-20T20:45:41.068Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d03ada6701410e585a5c7b"
    text: "-1abees"
    sent: "2017-03-20T20:26:02.030Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58d039e2f7f7d4810439a44b"
    text: "No bees"
    sent: "2017-03-20T20:21:54.273Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d01ab38fa1633954fad987"
    text: {I like some simple kind of gfx. Google for `simple hummingbird tattoo drawing`- some nice ideas ....}
    sent: "2017-03-20T18:08:51.615Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d0195c590d72c864e9c80b"
    text: {@DideC Pierre Rabhi reference! That explains my +1 when @dockimbel proposed it first. }
    sent: "2017-03-20T18:03:08.254Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58d00a08a84f611959c57704"
    text: "Nice @DideC ."
    sent: "2017-03-20T16:57:44.626Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d005a6fe6a638b1ae5f6f3"
    text: ":clap: "
    sent: "2017-03-20T16:39:02.590Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d0057d590d72c864e96414"
    text: {The humminbird's share^/^/A huge fire ravages the jungle.^/Animals are fleeing in all directions.^/Only a hummingbird, relentlessly,^/Made the return of the river to the brazier,^/A tiny drop of water in its beak,^/To place it on the fire.^/A toucan with an enormous beak calls out to him:^/"You're crazy, hummingbird, you see that it is useless."^/"Yes, I know," replied the hummingbird, "but I do my part" ...}
    sent: "2017-03-20T16:38:21.606Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58d004d8590d72c864e9605e"
    text: "... and rebelling against complexity"
    sent: "2017-03-20T16:35:36.827Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d00492fe6a638b1ae5f23a"
    text: {@greggirwin Hummingbirds can do things other birds wish they could too, like stationary or backwards flight. ;-)  For the "bee" species, it has the title of smallest bird in the world.}
    sent: "2017-03-20T16:34:26.232Z"
    editedAt: "2017-03-20T16:35:57.478Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d001262215a08f04a742d6"
    text: {one could meditate on Ant Zen label logo ^/![ant-zen](https://f4.bcbits.com/img/0006599212_10.jpg)}
    sent: "2017-03-20T16:19:50.796Z"
    editedAt: "2017-03-20T16:19:58.821Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d000f05917e26076b5b3a1"
    text: "And bird is just cute and tiny, that's it"
    sent: "2017-03-20T16:18:56.120Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d000d8f7f7d48104387541"
    text: {Ants are small too! But while small, they do a good job by building complex things.}
    sent: "2017-03-20T16:18:32.418Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d0007f8fa1633954fa4e36"
    text: {On mascot/logo, is the bee hummingbird just tiny, or does it have other attributes we want associated with Red?  Think about how a graphic will scale as well. WRT ants, I was thinking just a straight-on, vector, face. Maybe I'm just too attached to turtles and self organizing systems though. :^^)}
    sent: "2017-03-20T16:17:03.956Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cfff9b6701410e5859309d"
    text: {On unknown!/kwatz! (agree that it's a bad name), @btiffin if you have some examples, that would help. And maybe see if Wolfram can make sense of them. If Doc can do a quick hack to test, that will be cool. }
    sent: "2017-03-20T16:13:15.534Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cfec156701410e5858d00b"
    text: {In fact Mayans pyramids were built 3k years ago to praise the hanoi tower of Red.}
    sent: "2017-03-20T14:49:57.361Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfe9ef6d7eb18404e8e55e"
    text: "Hopefully, Covenant should be good."
    sent: "2017-03-20T14:40:47.305Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfe9c66d7eb18404e8e4e3"
    text: "Can't wait for the next Alien movie"
    sent: "2017-03-20T14:40:06.319Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58cfe9a9590d72c864e8cdce"
    text: "Hahaha :-)"
    sent: "2017-03-20T14:39:37.445Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfe99f58ad4eb028339312"
    text: "@dockimbel that would be flat out awesome!"
    sent: "2017-03-20T14:39:27.125Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
)#(
    id: "58cfe99d6701410e5858c339"
    text: {~~grey~~ red [goo](https://en.wikipedia.org/wiki/Grey_goo)}
    sent: "2017-03-20T14:39:25.671Z"
    editedAt: "2017-03-20T14:40:24.399Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfe9866d7eb18404e8e3d6"
    text: "@JacobGood1 What about a Xenomorph then? :-)"
    sent: "2017-03-20T14:39:02.606Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfe9765917e26076b53a5e"
    text: "homing zunzuncito :D"
    sent: "2017-03-20T14:38:46.163Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfe93e6d7eb18404e8e203"
    text: "bird could be for a package/module manager"
    sent: "2017-03-20T14:37:50.135Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfe7a25917e26076b531bd"
    text: {I like the ant idea more than the bird, but hopefully it will look cool... not like the previous pic that was linked}
    sent: "2017-03-20T14:30:58.798Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58cfe7506701410e5858b84f"
    text: "Dart already has a bird I think, not sure though"
    sent: "2017-03-20T14:29:36.009Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58cfe6fd6701410e5858b692"
    text: {Please do not go with a cutesy mascot I hate that, something intimidating, zany... not cutesy. Of course, for marketing, I am sure a "fuzzy wuzzy" character would be popular with the Chinese.^/^/llvm or lisp have cool mascots}
    sent: "2017-03-20T14:28:13.889Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58cfda5f58ad4eb028333eb5"
    text: "@rebolek thanks, I'll try to meditate on that"
    sent: "2017-03-20T13:34:23.578Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfd8e1f7f7d4810437a7e5"
    text: "@9214 also, `action!`"
    sent: "2017-03-20T13:28:01.259Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfd866a84f611959c474f3"
    text: {Also, some natives are natives just to make them faster. They can be rewritten as functions.}
    sent: "2017-03-20T13:25:58.140Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfd8162215a08f04a66d9c"
    text: "Yes, I think so."
    sent: "2017-03-20T13:24:38.424Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfd7cf8fa1633954f97141"
    text: "@rebolek `help native!` should list everything?"
    sent: "2017-03-20T13:23:27.439Z"
    editedAt: "2017-03-20T13:23:47.607Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfd760b809ca5f4a6303f5"
    text: {@9214 there are natives, you can think of them as "fundamental primitives". However, they are, as everything, anonymous and their names can be changed.}
    sent: "2017-03-20T13:21:36.514Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfd6c32215a08f04a6650d"
    text: {Are there any "fundamental primitives" in Red/Rebol? Like the holy seven `car cdr cons cond eq atom quote` ?}
    sent: "2017-03-20T13:18:59.204Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfce39a84f611959c43dc1"
    text: {@dockimbel your description is correct ;) It is between the previous and current.}
    sent: "2017-03-20T12:42:33.851Z"
    editedAt: "2017-03-20T12:46:25.345Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58cfcbe458ad4eb02832f9c6"
    text: {@Zamlox I think I got it, let me know if my [description](https://doc.red-lang.org/en/draw.html#_clip) is incorrect.}
    sent: "2017-03-20T12:32:36.347Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfc6217b3f37e754176651"
    text: {Anyway... there is interesting difference:^/```^/red>> load "6,371.0km FOO"^/*** Syntax Error: invalid float! at "6,371.0km FOO"^/*** Where: do^/```^/versus:^/```^/>>  load "6,371.0km FOO"^/** Syntax Error: Invalid decimal -- 6,371.0km^/** Near: (line 1) 6,371.0km FOO^/```}
    sent: "2017-03-20T12:08:01.279Z"
    editedAt: "2017-03-20T12:08:47.851Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cfc59c590d72c864e82365"
    text: "text! has ring to it"
    sent: "2017-03-20T12:05:48.850Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cfc4896d7eb18404e82f18"
    text: {@Zamlox I have a hard time understanding how the mode (`replace`, `intersect`, `union`,...) in `clip` command works...}
    sent: "2017-03-20T12:01:13.321Z"
    editedAt: "2017-03-20T12:01:22.525Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfc3c958ad4eb02832d5a3"
    text: {@endo64 's example is nice, but problem is, that it is not junk. Junk is something like mentioned un-closed strings in Doc's example. ^/Or: `"radius: 6,371.0 km mass: 5.9736e24kg"`}
    sent: "2017-03-20T11:58:01.592Z"
    editedAt: "2017-03-20T12:00:51.794Z"
    v: 5
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cfc035f7f7d481043726ad"
    text: "Agreed :)"
    sent: "2017-03-20T11:42:45.622Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58cfbfc96d7eb18404e81562"
    text: {`kwatz!` is a terrible name :-) I would still call it just `junk!`or `whatever!`}
    sent: "2017-03-20T11:40:57.602Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cfbe526701410e5857f477"
    text: {Not the same thing exactly but it reminds me that:^/`The KWATZ! datatype is used for values, which are not recognized as being of any known datatype.^/This can be utilized for example in dealing with UTM Coordinates.^/LOAD can load anything:`^/^/```^/w> block: load "17T 630084 4833438"^/== [#{313754} 630084 4833438]^/w> type? block/1^/== KWATZ!^/w> to string! block/1^/== "17T"^/w> type? block/2^/== integer!^/```^/^/`So it's easier to make dialects, that for example can deal with numbers with units, like:`^/^/```^/w> Earth: load "radius: 6,371.0km mass: 5.9736e24kg"^/== [radius: #{362C3337312E306B6D} mass: #{352E393733366532346B67}]^/w> type? earth/1^/== set-word!^/w> type? earth/2^/== KWATZ!^/w> parse Earth [some [set w set-word! set k kwatz! (print [w form k])]]^/radius 6,371.0km^/mass 5.9736e24kg^/== true^/```^/^/`The KWATZ! datatype works much like the binary! datatype and can be converted to e.g. binary! or string! for further parsing.`}
    sent: "2017-03-20T11:34:42.357Z"
    editedAt: "2017-03-20T11:35:39.498Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58cfbe35f7f7d48104371e83"
    text: {@dockimbel  @btiffin  Isn't it you are discussing similar to `kwatz!` datatype! in World lang? http://www.world-lang.org/search?updated-max=2011-12-02T00:51:00-08:00&max-results=7 ^/}
    sent: "2017-03-20T11:34:13.659Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58cfa71c5917e26076b3f7dd"
    text: {And no rush, as stated, not out to derail progress.}
    sent: "2017-03-20T09:55:40.034Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cfa70d58ad4eb028325513"
    text: "And the crowd goes wild.  :-)"
    sent: "2017-03-20T09:55:25.539Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cfa6e3fe6a638b1ae421f3"
    text: {Let's do the experiment then. ;-) Let me finish with the 0.6.1 release and I will implement it.}
    sent: "2017-03-20T09:54:43.640Z"
    editedAt: "2017-03-20T09:55:03.663Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa6b76701410e58578b77"
    text: {I'm willing to try, and give feedback if you're willing to put it in, Doc.  And I'll do my best to wave poms poms at non-programmers so they see what an amazing tool Red is.  Perhaps we'll both be surprised (but I'm wagering you might be pleasantly surprised at the uptake and entirely new fields of interest).}
    sent: "2017-03-20T09:53:59.820Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cfa5fc590d72c864e79101"
    text: {Well, sure.  Sitting at the console, Red has more than enough introspective tools to quickly show when a dataset is totally unsuited to purpose, but it will also easily show when the information is close enough to satisfy the boss'es latest wonky request for the average time spent with employee washroom breaks from the new chip sensor data that was just installed on the fourth floor.  Header records and trailer records could be safely ignored, and also verifiable as the only data that actually counted as unclassified without having to take the time to make edits. }
    sent: "2017-03-20T09:50:52.893Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cfa5d16d7eb18404e7a06c"
    text: {@btiffin But I'm willing to implement such feature now, because until you try it for real, you will not realize how unusable it is. ;-)}
    sent: "2017-03-20T09:50:09.006Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa55c7b3f37e75416dfd5"
    text: {Your geospatial case is a good use-case for writing a simple Parse rule to extract the lat/long coordinates. `LOAD/ANY` cannot be a general substitute to writing parsers.}
    sent: "2017-03-20T09:48:12.581Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa484f7f7d4810436ae06"
    text: {Using your own example:^/```lisp^/Code: ^{a2#2.3..4^/^/Here is some text with a number 5 and a dollar amount $12.23 preceded and followed by^/random garbage that some other processor can handle^/^/#$#3.2.1^/```^/This would load as: `[Code: junk!]`. The non-programmer using that needs to know that `^{` is the beginning of a multi-line string, otherwise, he would not know how to "fix" the input. This is just a very simple case, but there are *many* cases where one or several symbols would ruin most of the input to load. Imagine such `^{` in dozens/hundreds of places in a multi-megabyte (or gigabyte) file...}
    sent: "2017-03-20T09:44:36.027Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa469590d72c864e78985"
    text: {Nope, just an example.  It could be geospatial data coming off a web stream, looking for particular lat/longs (and willing on first round to miss a few).  Or it might be a spreadsheet with one stray element of unloadable data, which be easy to find and verify by having Red show the unclassified tokens.  If that list is too funky, then an edit is required.  If not, then you just saved a clerk a boatload of mucking around while racing to get the boss some particular tally. }
    sent: "2017-03-20T09:44:09.616Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cfa36f2215a08f04a57ddd"
    text: {So what you really want is a NLP library, which would be simple enough to use (like a single `load-text` function). That would actually be better for non-programmers, because they know the lexical rules of their language, but not the intricacies of lexical rules of Red/Rebol.}
    sent: "2017-03-20T09:39:59.592Z"
    editedAt: "2017-03-20T09:40:48.411Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa2f56701410e5857783f"
    text: {Oh, that was just for effect Nenad, in reality it would be more like "accurate within 0-100% 4 times out of 50".  But it would still let a professor load the combined works of Shakespeare to get a close count of how many times "thee" was used.  It they wanted to publish the count and still keep a reputation, they would need to do iterative loads with edits until no unclassified data was found (or look and see that all the unclassified data was reasonable as some form of librarian data or stray commas).  But what you may end up with is thousands of professors using Red as a tool of first round analysis.  Leading to code that helps them refine the initial rounds, leading to students hearing about it, rinse and repeat.}
    sent: "2017-03-20T09:37:57.626Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cfa1f15917e26076b3e1ba"
    text: {I would prefer the ability to read/parse in a stream to any of that. Hope it comes with IO ...}
    sent: "2017-03-20T09:33:37.517Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cfa149b809ca5f4a620896"
    text: {I suppose you start with the implicit assumption that the "junk" parts will represent a (very) small portion of any given input, which I think is wrong in the general case. So, for a text-oriented content, with very little number of non-loadable forms, you could get a small percent of junk parts, so you could extract some usable stats from it, but such approach would probably not work for non-latin languages (Chinese for example, where the spaces are optional).}
    sent: "2017-03-20T09:30:49.189Z"
    editedAt: "2017-03-20T09:34:49.549Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa080f7f7d48104369b87"
    text: {@btiffin *3.2% 19 times out of 20* I seriously doubt it could be possible to calculate any reliable error margin with LOAD/ANY. If I give you a file of 10GB to LOAD/ANY without information about its structure, you have no way to calculate an error margin. If the structure is known, then you can write a set of parse rules to *accurately* extract the wanted information. Basically, if you really need reliable stats, you will not use LOAD/ANY.}
    sent: "2017-03-20T09:27:28.509Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cf9f80590d72c864e77485"
    text: {I can imagine some Amiga like datatypes functionality, simply having some codec, which would handle such case, but - I am highly unskilled, when touching the low level stuff, so feel just relaxed about what I say here :-)}
    sent: "2017-03-20T09:23:12.261Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cf9f396d7eb18404e77f62"
    text: {We've got already `load/as`, there might be some universal mark to load anything, but the question is, if it makes a sense. For foreign formats, I was used to simply use `parse`. If I think about any foreign format, once you eventually load it, you need to know what to do with that anyway ...}
    sent: "2017-03-20T09:22:01.256Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cf9f1f58ad4eb02832323e"
    text: {I could be wrong, yep.  But I'd wager that there are a lot of people that would give it a try.  There are a lot of non-programming types that still want to get 3.2% 19 times out of 20.  ;-)^/}
    sent: "2017-03-20T09:21:35.399Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cf9ecbf7f7d4810436930d"
    text: "I"
    sent: "2017-03-20T09:20:11.594Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cf9ebdac314c8a1a69e389"
    text: {@btiffin "Triggered on syntax error, continue from next character. " That is doable, but I still think you overestimate greatly how usable the result can be.}
    sent: "2017-03-20T09:19:57.619Z"
    editedAt: "2017-03-20T09:28:52.325Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cf9e9c58ad4eb028323060"
    text: {Can't find it, but remember World Rebol spin-off language had something like a junk! datatype?}
    sent: "2017-03-20T09:19:24.541Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cf9e74fe6a638b1ae3fc9a"
    text: {It's not really that exhaustive.  Trigger on syntax error, continue at next character.  Don't try and second guess anything.  It's for loading junk.^/^/Example: (surrounded by ~~~)^/^/~~~^/Code: a2#2.3..4^/^/Here is some text with a number 5 and a dollar amount $12.23 preceded and followed by^/random garbage that some other processor can handle^/^/#$#3.2.1^/~~~^/^/red>> load %sometext.txt^/*** Syntax Error: invalid value at "$12.23 fol"^/*** Where: do^/^/So, mark the current token as unclassified! and keep going.  This isn't code, just junk that someone wants to count for curiosity sake.  If there are requirements for accuracy, then don't use LOAD/ANY.  Big data folk (non-programmer types) would love a first round tool like that, no?^/^/But, I'll stop now.  Not out to frustrate or anger or sidetrack the dev team.  There are too many cool things in the pipeline.}
    sent: "2017-03-20T09:18:44.194Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cf9abafe6a638b1ae3eef6"
    text: {For example, years ago, I wanted to be able load _comma_ so `load "a,b"` would not throw an error, but return `[a , b]`. But it does not make sense, when `1,1` is `1.1`}
    sent: "2017-03-20T09:02:50.438Z"
    editedAt: "2017-03-20T09:04:09.485Z"
    v: 4
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cf99b6b809ca5f4a61e915"
    text: {@btiffin I think you should provide real examples and how they should be handled. As Doc asked: _If you would write down an exhaustive set of parsing rules you want for a LOAD/ANY, that would help (and would also narrow down the kind of text input which could give usable results)._}
    sent: "2017-03-20T08:58:30.414Z"
    editedAt: "2017-03-20T08:59:08.332Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cf98807b3f37e75416a6fa"
    text: {Ahh, but doc, you are thinking as a computer scientist again.  Think like a plumber.  When data is smooshed into OTHERWISE-UNCLASSIFIED!, all bets are off in terms of reproducibility after a system update.  Or even, changing a single comma coming up with a completely different set.  The algorithm could be explained as simply, loaded junk (which is triggered whenever a syntax error would be flagged), marked it, and continued from the next character; your use of LOAD/ANY is temporal and not reliable, but here's a block!, go ahead and use it for now, results will always be deemed fuzzy and inaccurate until corrections are made.^/^/That was the point of the link (kinda), provide a tool that a computer scientist may eschew (so they don't use LOAD/ANY) but that a normal person could load any old text file and then get a quick count of how many integer! elements are inside.   (Or url! or word!, etc).  Perhaps a linter could quickly point out how many elements are normally non-loadable, but still do the load and provide a count.  LOAD/ANY would NOT be for code, as it would lead to disaster.  But an author loading a markdown file just to get today's count of swear words +/- the weird ISBN number that normally would cause a syntax error and the odd exclamation won't really care (until they need to actually care).  Make the algorithm simple.  Triggered on syntax error, continue from next character.  When one or more UNCLASSIFIED! elements are found, put up a warning of an unreliable load.^/^/Again, I'm not out to make you mad or make you feel like you'd be corrupting or tainting Red, Nenad, I'm just of the belief that providing a tool feature that is less than 100% reliable but very easy to use will make a lot of people very happy.  Statisticians rarely get 100% reliable, but they still keep pumping out stats, "accurate within 3.2% 19 times out of 20".}
    sent: "2017-03-20T08:53:20.134Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cf7c2bfe6a638b1ae371a6"
    text: "+1 for bee hummingbird"
    sent: "2017-03-20T06:52:27.721Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "58cf7a476701410e5856d64c"
    text: "+1 for bee hummingbird"
    sent: "2017-03-20T06:44:23.875Z"
    editedAt: "2017-03-20T06:44:57.459Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
)#(
    id: "58cf7735b809ca5f4a61639b"
    text: {@btiffin We've been through this discussion many times, so I don't want to re-open it, but just to remind you that there is no algorithm for what you ask for. An undefined text segment can start where all the lexer rules fail, but there is no reliable method for determining where such segment ends for arbitrary text inputs. This means that each time we change/fix the lexer rules, you will get a different result from a LOAD/ANY on the *same* input text. It is the same class of problem as trying to find a compression method for reducing the size of arbitrary data. If you would write down an exhaustive set of parsing rules you want for a LOAD/ANY, that would help (and would also narrow down the kind of text input which could give usable results).}
    sent: "2017-03-20T06:31:17.970Z"
    editedAt: "2017-03-20T06:33:56.549Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cf71d26701410e5856b958"
    text: {Perhaps the Red version could be pictured lifting a train car (or tanker ship).}
    sent: "2017-03-20T06:08:18.414Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cf70eaac314c8a1a692f92"
    text: {+1 for humming bird too. We can introduce its bad counterpart - human borg :-)}
    sent: "2017-03-20T06:04:26.140Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cf70a65917e26076b31b15"
    text: {Nice choice of animal by the way, +1 for the bee humming bird.  Hits on so many levels.  And, cute, so +2.}
    sent: "2017-03-20T06:03:18.229Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cf7076b809ca5f4a614eea"
    text: {I still hope Red goes strong for IO, even some kind of streamed protocols, etc., allowing exactly stuff like that - providing many protocols to foreign systems ...}
    sent: "2017-03-20T06:02:30.472Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cf7052f7f7d4810435d72c"
    text: {There's something towards what @btiffin says. Not sure if it should be done allowing to load any data source just into the console, but imo protocols could do. I still remember what kind of wonders I got from my colleagues, using odbc:// or mysql:// form @dockimbel . They asked - wait, and now what? That's just it?}
    sent: "2017-03-20T06:01:54.064Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cf7036ef369b900482f0c7"
    text: {Ferda also had a nice slogan: Ferda Mravenec - work of all kinds}
    sent: "2017-03-20T06:01:26.091Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cf6fee794f24854d4e10df"
    text: {Of course :D I also remember Brouk Pytlík, he could be mascot for PHP ;)}
    sent: "2017-03-20T06:00:14.346Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cf6fb05917e26076b31849"
    text: {@rebolek not true - you remember Ferda mravenec (Ferdinand ant) from our child era? :-) https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRaGHXeiXNLssqBnkpiCmXXT9f04wwuIN_kb1-3lzG_0mOk94b6}
    sent: "2017-03-20T05:59:12.600Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cf6f5ffa8a98870455eaaf"
    text: "A bee hummingbird is certainly more photogenic :)"
    sent: "2017-03-20T05:57:51.950Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cf6ddd6701410e5856ada2"
    text: {Pestering.  Can't help it.   As ammunition in the argument for LOAD/ANY and a TEXT! (or OTHERWISE-UNCLASSIFIED! as you will) datatype.^/^/http://programmer.97things.oreilly.com/wiki/index.php/Read_the_Humanities^/^/And pointing out that is not just about word smithing, or numbering, but making a tool that non-programmer brained people can use to load a dataset, any and all datasets, and have a Red prompt available to slice and dice the information to the best of their abilities.  Even for those times that might make a professional computer scientist shudder.  I'm still of the belief a feature like that would increase the potential user base by orders of magnitude (even if it takes years to slowly catch on).}
    sent: "2017-03-20T05:51:25.774Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58cf6d462215a08f04a4aad8"
    text: {An ant could do, a [bee hummingbird](https://en.wikipedia.org/wiki/Bee_hummingbird) could be another candidate. ;-)}
    sent: "2017-03-20T05:48:54.915Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cee902a84f611959c0fbd1"
    text: {It just looks big, because there are both R2 and R3 versions and lot of comments.}
    sent: "2017-03-19T20:24:34.566Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cee733590d72c864e5179e"
    text: "Hmmmm."
    sent: "2017-03-19T20:16:51.857Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cee68fb809ca5f4a5f9af2"
    text: {Actually it's not that big, loader is some 80 lines with comments and emitter about 30 lines.}
    sent: "2017-03-19T20:14:07.188Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cee52a2215a08f04a2f927"
    text: {I think Brian's would be worth having, but Doc may not want anything that complex built in. Certainly it's valuable.}
    sent: "2017-03-19T20:08:10.841Z"
    editedAt: "2017-03-19T20:08:27.904Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cee4f2590d72c864e50f46"
    text: {Just glanced at mine, and it doesn't even try to handle embedded delimiters in quotes. Mainly it was for clean data with the option to include first-line values as keys in each sub-block.}
    sent: "2017-03-19T20:07:14.154Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cee49cfe6a638b1ae19c42"
    text: {@greggirwin I tried to convert BrianH's one but wasn't successful yet.}
    sent: "2017-03-19T20:05:48.188Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cee45a05a31d5a4a752b64"
    text: {I haven't ported my (very small, old) one to Red. BrianH's work was great, since he did so much research and covered all the bases. Don't know how big we want to go.}
    sent: "2017-03-19T20:04:42.929Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cee37ff7f7d48104341c2b"
    text: "Does anyone have some CSV parser for Red?"
    sent: "2017-03-19T20:01:03.732Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cec4856701410e58548756"
    text: "chitin could be drawn as *blocks* btw ;)"
    sent: "2017-03-19T17:48:53.115Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cec3e6e8800cd70c7af636"
    text: "red ants FTW, I'm with  @rebolek on that"
    sent: "2017-03-19T17:46:14.135Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cec3986d7eb18404e47d71"
    text: {and that holistic idea that ant colony is a *system* which is greater than a sum of its parts}
    sent: "2017-03-19T17:44:56.768Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cec33fa88e334071079379"
    text: {Yes, ants are small but powerful, it is ideal IMO.}
    sent: "2017-03-19T17:43:27.869Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cec317590d72c864e491aa"
    text: {plus all that algorithmic stuff about ant optimization and swarm intelligence}
    sent: "2017-03-19T17:42:47.889Z"
    editedAt: "2017-03-19T17:42:56.897Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cec313ef369b900482ec3e"
    text: "Yes :)"
    sent: "2017-03-19T17:42:43.143Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cec28afe6a638b1ae11495"
    text: "And Hanoi tower could be ant hill"
    sent: "2017-03-19T17:40:26.574Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cec0a8794f24854d4e0bc7"
    text: ":)"
    sent: "2017-03-19T17:32:24.926Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cec09f590d72c864e48857"
    text: {Be careful. We sometimes use "R" letter for naming stuff. So it might turn into being a RAnt :-)}
    sent: "2017-03-19T17:32:15.503Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cec0444ec6efa73051b613"
    text: "Ant."
    sent: "2017-03-19T17:30:44.888Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cebfedfe6a638b1ae1095e"
    text: {Red spider, to express limbs extending into other  areas.  Maybe a spider is creepy for some, though.}
    sent: "2017-03-19T17:29:17.399Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58cebd5e2215a08f04a25e23"
    text: {@9214, I go back and forth on that. I've played with a couple paper sketches of a layer diagram, where the boxes make a kind of square face. A Red ant is another possibility. }
    sent: "2017-03-19T17:18:22.129Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ceb495fe6a638b1ae0d82d"
    text: {Has anyone thought about Red's mascot? Hanoi tower is very smart and symbolical, but I wonder if we can come up with something more... alive? For Rust it's Ferris the crab, Gopher for Go and Glenda for Plan 9, Alien for Lisp, Perl's Camelia, etc etc.}
    sent: "2017-03-19T16:40:53.393Z"
    editedAt: "2017-03-19T16:41:06.284Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cea82305a31d5a4a7434f5"
    text: {@WiseGenius My question was for the latter point as you guessed. Right, the added value is the filling capabilities that cannot be emulated easily using Draw. Thanks for the accurate explanation, that was the last piece I was missing to get the full picture. }
    sent: "2017-03-19T15:47:47.984Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ce974a6d7eb18404e3c17e"
    text: {In Rebol, the __outlines__ (and inside lines, curves and arcs) of the above shapes can easily be put together using `line`s, `curve`s, and `arc`s. However, AFAICT, there is currently no simple way to __fill__ them as a single shape onto any given background without using the `shape` dialect. This is the case with most simple (and complicated) shapes.}
    sent: "2017-03-19T14:35:54.258Z"
    editedAt: "2017-03-19T14:38:22.394Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58ce9737fe6a638b1ae05c95"
    text: {[![shapes.png](https://files.gitter.im/red/red/ltZo/thumb/shapes.png)](https://files.gitter.im/red/red/ltZo/shapes.png)}
    sent: "2017-03-19T14:35:35.140Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58ce972aa84f611959bfb9a6"
    text: {For example, the following simple shapes were drawn using SVG's `<path />` and Rebol's `shape`:}
    sent: "2017-03-19T14:35:22.378Z"
    editedAt: "2017-03-19T14:38:35.763Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58ce972305a31d5a4a73edf9"
    text: {[<path />](http://www.w3.org/TR/SVG/paths.html#PathElement) is SVG's only indispensable [shape element](http://www.w3.org/TR/SVG/intro.html#TermShapeElement), since `<path />` can be used as a substitute for any other shape element but it cannot itself be substituted.^/Rebol's `shape` dialect has the same purpose and the same story. Without it, not all shapes can be drawn.}
    sent: "2017-03-19T14:35:15.170Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58ce9716590d72c864e3e974"
    text: {@dockimbel Was your AltME question about `shape` as having its own sub-dialect or was it questioning the need for the functionality of that dialect. In case it was the latter, here is my quick/feeble attempt at communicating its importance:}
    sent: "2017-03-19T14:35:02.665Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58ce6d7cfe6a638b1adfc238"
    text: "That maybe useful "
    sent: "2017-03-19T11:37:32.039Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ce66f17b3f37e754125d6d"
    text: "excellent ! :thumbsup:"
    sent: "2017-03-19T11:09:37.069Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58ce66ade8800cd70c79915d"
    text: {Extending `pair!` in our plans anyway, I can add it to the 0.6.3 todo-list. (done)}
    sent: "2017-03-19T11:08:29.452Z"
    editedAt: "2017-03-19T11:09:34.039Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ce666505a31d5a4a73422b"
    text: {@dockimbel  I think it might be something you could do. If you can implement a ```pair!``` type with ```float!``` elements. Drawing would be more accurate.}
    sent: "2017-03-19T11:07:17.207Z"
    editedAt: "2017-03-19T11:07:56.882Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58ce6563a84f611959bf04fd"
    text: "yes, indeed."
    sent: "2017-03-19T11:02:59.863Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58ce6538f7f7d48104321f4d"
    text: {@Zamlox Got it. Well, SVG files can be pretty heavy, so streaming the conversion to Draw/Shape should be a big win.}
    sent: "2017-03-19T11:02:16.819Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ce64fb7b3f37e75412576f"
    text: {the XML parser would be excellent (especially if it's memory efficient).}
    sent: "2017-03-19T11:01:15.838Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58ce645505a31d5a4a733a53"
    text: {well, nothing from your side. Currently I have stopped implementation due to other priorities, but I will try to continue it when I have more free time. I recall I had some issues related to gradients but it was because of the way how Windows implements them.}
    sent: "2017-03-19T10:58:29.726Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58ce63d3e8800cd70c7984fd"
    text: {Ok. BTW, are there any show-stoppers for the SVG implementation you would like us to solve? I might add a stream-oriented XML parser soon to Red, which should be very memory-efficient.}
    sent: "2017-03-19T10:56:19.038Z"
    editedAt: "2017-03-19T10:57:06.144Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ce63a26701410e58532142"
    text: "Not really."
    sent: "2017-03-19T10:55:30.530Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58ce6374f7f7d4810432191d"
    text: "@Zamlox Do you think we need it for SVG support?"
    sent: "2017-03-19T10:54:44.980Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58ce63507b3f37e7541250e9"
    text: {@dockimbel I have implemented only R2 related shape commands. ```close``` is not listed as command on http://www.rebol.com/docs/draw-ref.html, so I didn't implement. Let me know  if you want to have it in Red and I will add it.}
    sent: "2017-03-19T10:54:08.920Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58cde0a06d7eb18404e183ff"
    text: {@metaperl, I only glanced at Rust briefly, quite a while back, but Red is very thread safe. It's single threaded. Catching type errors works great, as long as you spec the types and write your code accordingly. The more flexibility you want, the more work you'll need to do. Values are strongly typed, and Red's large array of datatypes means that you can catch a lot of errors other languages can't.^/^/Terrifying indeed. :^^) Not all types have a literal form. Lexical space is just too tight for that, without things becoming line noise.}
    sent: "2017-03-19T01:36:32.253Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cdb07fa84f611959bced9e"
    text: {@dockimbel I understand that construction syntax is not a general feature (yet) but that is no reason why interpreter and compiler should treat them (subtly) differently...}
    sent: "2017-03-18T22:11:11.169Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cd9917794f24854d4e0493"
    text: {@tanstaaf1 @metaperl There is optional type safety already. Rebol had it from the beginning.}
    sent: "2017-03-18T20:31:19.067Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cd9133ac314c8a1a6311eb"
    text: {@metaperl The only person who can speak definitively to your question is @dockimbel .  I have cajoled for type safety at least as an optional switch but, last I understood, it was not in the plans.  Since racket and even python (per a comment I heard from Guido in a podcast) are going to working to support at least some optional typesafety, I expect Red can be modified to do so as well.  But, again, I think this is a question for @dockimbel.  And his calendar is pretty full, even if it sees it as a desirable and achievable  longer term feature.  Right now he is working hard for a near term release of 0.62, I think; that's a big achievement.}
    sent: "2017-03-18T19:57:39.030Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "58cd803f4ec6efa73051ae5d"
    text: {@metaperl Hi and welcome! Comments here aren’t relayed with IRC channel.}
    sent: "2017-03-18T18:45:19.978Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cd5682590d72c864dfbff6"
    text: "red/help would also be good for me."
    sent: "2017-03-18T15:47:14.466Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58cd5677fe6a638b1adc2fb0"
    text: {Im sorry I didnt realize I was in red/red not red/welcome.}
    sent: "2017-03-18T15:47:03.644Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58cd564e6d7eb18404df8b15"
    text: {Would you say that all types can be inferred from textual representation? Isnt there some ambiguity possible? Are comments here relayed bi-directionally with the IRC channel? I'm in #red-lang on FreeNode and I dont see my typing here going there.}
    sent: "2017-03-18T15:46:22.914Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58cd560f1c040b8e040e246d"
    text: {By the way, the ability to develop lots of code in short amounts of space in Red is terrifying!}
    sent: "2017-03-18T15:45:19.620Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58cd55f16d7eb18404df8959"
    text: {Hello everyone. I program in Python professionally. But I have been looking for a faster language and one more type-safe. I thought I would settle on Rust. Would you say that Red is as thread-safe as Rust? And will you have many type errors caught at compile-time as in Rust?}
    sent: "2017-03-18T15:44:49.342Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58cd43a605a31d5a4a6f78db"
    text: {@meijeru Contruction syntax (`#[...]`) is not officially supported nor implemented yet (except for a few basic types).}
    sent: "2017-03-18T14:26:46.815Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cd304e7b3f37e7540e272d"
    text: {Well, a wrong terminology. I just meant, that we don't need to be fully compatible (in upper levels) with the Rebol gfx engines in general ...}
    sent: "2017-03-18T13:04:14.449Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cd2b5a05a31d5a4a6f1f45"
    text: {@dockimbel While experimenting for #2486 I noticed that the `#[...]` constructs are handled differently by the two lexers. Is that intentional???^/}
    sent: "2017-03-18T12:43:06.072Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cd17012215a08f049cafb0"
    text: {*Do we need being 100% compatible with R3 GUI here?* What has R3 GUI anything to do with that?}
    sent: "2017-03-18T11:16:17.646Z"
    editedAt: "2017-03-18T11:16:29.069Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cd1443590d72c864dec7b0"
    text: {Just checked - taken from Tiger.r demo: `shape [move 270x287 curve 270x287 258x277 256x273 curve 256x273 269x292 269x299 curve 269x299 272x291 270x287]`- full of `shape` commands .... Not sure it helps with porting an SVG, or it was only mostly to easy the port of an AGG stuff ....}
    sent: "2017-03-18T11:04:35.643Z"
    editedAt: "2017-03-18T11:05:13.822Z"
    v: 3
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cd10156701410e584eb212"
    text: {Do we need being 100% compatible with R3 GUI here? I regard it being an unfinished attempt at the NG Rebol gfx engine. We should take best ideas and implement. So if such dialect helps to port some stuff, why not. IIRC, I saw it in the Tiger AGG demo, where vectors are stored ...}
    sent: "2017-03-18T10:46:45.805Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cd0c871c040b8e040d14ad"
    text: {I asked the question because there is quite a big overlap with the Draw dialect.}
    sent: "2017-03-18T10:31:35.359Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cd0c3ca84f611959ba6baf"
    text: {re your altme question - I always wondered, if we need a subdialect. It reminds me of the R3 Gob dialect, which Gabriele used to construct compound styles.}
    sent: "2017-03-18T10:30:20.521Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cd09711c040b8e040d0a1e"
    text: {@Zamlox I just noticed that the `close` command from Rebol's SHAPE dialect is not present in the Red version. What's the reason?}
    sent: "2017-03-18T10:18:25.872Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbf44a7b3f37e754095166"
    text: {@dockimbel thanks for the update on 64 bit support. Good to hear that cross-compilation is not affected, I really find that a very impressive feature :-)}
    sent: "2017-03-17T14:35:54.635Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "58cbcded05a31d5a4a698cc1"
    text: "@dockimbel thanks fixed"
    sent: "2017-03-17T11:52:13.837Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cbcce8fe6a638b1ad600bb"
    text: "Uh-oh, my bad! Thx  @meijeru "
    sent: "2017-03-17T11:47:52.514Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbccd2ac314c8a1a5c0d3c"
    text: {The word is `<>` See:^/```^/>> :<>^/== make op! [[^/    "Returns TRUE if two values are not equal" ^/    value1 [any-type!] ^/    value2 [any-type!]^/]]^/```^/}
    sent: "2017-03-17T11:47:30.768Z"
    editedAt: "2017-03-17T11:47:57.694Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cbcc3c590d72c864d99384"
    text: {@dockimbel is there infix alternative for `not-equal?` ? Can't find `!=` word :(}
    sent: "2017-03-17T11:45:00.772Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbcb667b3f37e7540883b7"
    text: ";-)"
    sent: "2017-03-17T11:41:26.026Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbcb15590d72c864d98cf8"
    text: "**l** isp?! how dare you, sir! :scream: "
    sent: "2017-03-17T11:40:05.758Z"
    editedAt: "2017-03-17T11:40:18.378Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbca5bf7f7d48104283a53"
    text: {@geekyi A few typos to fix:^/* "contexts and dynamic binding makes" => make^/* "homiconic" => homoiconic^/* "lisp" => Lisp (just to avoid bashing from purists) ;-)}
    sent: "2017-03-17T11:36:59.036Z"
    editedAt: "2017-03-17T11:37:25.912Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbc9bb6d7eb18404d96042"
    text: {@geekyi Great question on SO, thanks! http://stackoverflow.com/questions/42854953/which-are-the-cases-that-make-it-hard-to-distinguish-between-code-and-data}
    sent: "2017-03-17T11:34:19.350Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cb85670b2625d0648af4b4"
    text: {@dockimbel In the macos world languages (R, julia, nodejs) become (unfortunately) no more universal but 64-bit only. Don’t know really why but I am frustrated to not be able to play with red to interact with such languages since in my opinion red is a really nice master language.}
    sent: "2017-03-17T06:42:47.079Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58cb7afb590d72c864d8326e"
    text: {@keesse @dander We'll add 64-bit support when we'll have a real need for it, which might be in a  0.7.x version, for iOS support (if we decide to do iOS at that time). If we postpone iOS for whatever reason, then probably after 1.0. Cross-compilation in Red is not be affected by the host platform where the toolchain is running on, as we don't rely on any external tool to build executables for target desktop platforms.}
    sent: "2017-03-17T05:58:19.484Z"
    editedAt: "2017-03-17T05:59:10.117Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cae11ca84f611959b17b94"
    text: {@dander  thanks, I missed that, 64 bit is still in the Roadmap voor 1.0, it probably will be updated if 0.6.2 is released.}
    sent: "2017-03-16T19:01:48.091Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "58cae09a2215a08f04939866"
    text: {:point_up: [March 16, 2017 7:29 PM](https://gitter.im/red/red?at=58ca854405a31d5a4a637b23) Feels like it will be much easier to hack :smile:   Hopefully we'll get all the features needed to work on a red curses library :smile:  }
    sent: "2017-03-16T18:59:38.178Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58cae066ac314c8a1a582d9b"
    text: {@keesse it seems to be a post-1.0 feature^/https://github.com/red/red/wiki/Guru-Meditations#why-is-red-32-bit-only}
    sent: "2017-03-16T18:58:46.298Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58cadcc4f7f7d48104244baa"
    text: {@dockimbel where in the milestones will be 64 bit? The last step before 1.0? Will cross-compiling from e.g. Linux 64 bit to Windows 32 bit be possible?}
    sent: "2017-03-16T18:43:16.215Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "58caa227a84f611959b0004f"
    text: {Thanks for your comments, those are valuable notes. Could be also a part of the blog article ...}
    sent: "2017-03-16T14:33:11.374Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58caa1bbfe6a638b1ad0b959"
    text: {The work on Linux GUI is stalled because the contributor working on it seems to be gone. So, it will only resume when someone else picks up the work from there. Our internal resources are not enough for handling it in short term. We might resume the work on it if nobody else does, after 0.7.0 or 0.7.1, though iOS being way more important for us, will probably take precedence.}
    sent: "2017-03-16T14:31:23.787Z"
    editedAt: "2017-03-16T14:31:51.612Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58caa0aafe6a638b1ad0b2c0"
    text: {Since 0.6.1, we are having two development branches in parallel. 0.6.3 should be short (about a couple of months), as most of the work on Mac GUI has been done. 0.6.4 should start in a few weeks. 0.7.0 will start as soon as 0.6.3 is released.}
    sent: "2017-03-16T14:26:50.701Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca9d3d05a31d5a4a640ca6"
    text: "no CIA hacks, RMS guarantees"
    sent: "2017-03-16T14:12:13.825Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca9d0f6d7eb18404d3daef"
    text: "you can use Emacs for now :P"
    sent: "2017-03-16T14:11:27.888Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca9c1c0b2625d06486b15f"
    text: {@dockimbel  about Red Editor need, today I updated my notepad++ version, and found this on changelog: 1.  Fix CIA Hacking Notepad++ issue (https://wikileaks.org/ciav7p1/cms/page_26968090.html).  So I feel it is a very important need by editing in Red, I encourage the whole team to go on ;) }
    sent: "2017-03-16T14:07:24.710Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "58ca9977ac314c8a1a5674f2"
    text: "the IO is the most interesting part :)"
    sent: "2017-03-16T13:56:07.561Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca9906ac314c8a1a5672bb"
    text: {IIRC, the plan was to work on 0.6.3 and 0.7.0 simultaneously. Also the Linux GUI was planned to be released before or around 0.7.0 and also the time taken for development of Linux GUI is supposed to take less time than the MacOS Gui.}
    sent: "2017-03-16T13:54:14.226Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ca9195f7f7d48104226e9f"
    text: {@Oldes  - it is there but some work was done imo by Thiago. Not sure what the recent progress is ....}
    sent: "2017-03-16T13:22:29.701Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ca8ba905a31d5a4a63a038"
    text: {@pekr Linux is on Trello in section _work in progress_ (GTK3)}
    sent: "2017-03-16T12:57:13.276Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58ca8ae42215a08f04919534"
    text: {[So far](https://trello.com/b/FlQ6pzdB/red-tasks-overview) at least 3 with 0.6.2}
    sent: "2017-03-16T12:53:56.752Z"
    editedAt: "2017-03-16T12:54:25.875Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58ca8867ac314c8a1a560b83"
    text: "how many releases are planned before 0.7?"
    sent: "2017-03-16T12:43:19.755Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca87302215a08f049180fb"
    text: {It depends on how many bugs and wishes we submit... Doc like to clean the issue ques before releases.}
    sent: "2017-03-16T12:38:08.605Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58ca87007b3f37e7540293dc"
    text: {What I miss in Trello, is kind of schedule for Linux GUI. I know there was some volunteer working on it, but seems stalled. Is Linux kind of strategic to Red too? I can see some oportunity for an embedded field, but who knows, especially with the limited resources FullStack has ....}
    sent: "2017-03-16T12:37:20.909Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ca869c05a31d5a4a638270"
    text: {@dockimbel Do you think that the 0.6.3 / 0.6.4 release cycle could be shorter than 0.6.2? 0.6.2 was imo a big architecture change, no? Mac GUI is almost done, so at least 0.6.3 could come in 2-3 months?}
    sent: "2017-03-16T12:35:40.194Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "58ca8666f7f7d4810422277d"
    text: {but yeah, since it's written in Red it's already possible to hack it}
    sent: "2017-03-16T12:34:46.095Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca864505a31d5a4a638003"
    text: "I thing console could be integrated into it"
    sent: "2017-03-16T12:34:13.941Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca864405a31d5a4a637fd9"
    text: "Yes, a few. ;-)"
    sent: "2017-03-16T12:34:12.356Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca86360b2625d064862bbd"
    text: "@dockimbel are there any plans for Red editor?"
    sent: "2017-03-16T12:33:58.595Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca8597fe6a638b1ad006e7"
    text: {The Red GUI console can be many things, we plan to extend it much further this year.}
    sent: "2017-03-16T12:31:19.433Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca8581ac314c8a1a55fa48"
    text: "while there are not many others around"
    sent: "2017-03-16T12:30:57.861Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca85750b2625d064862757"
    text: {the console can be application to demonstrate Red features}
    sent: "2017-03-16T12:30:45.958Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca854405a31d5a4a637b23"
    text: {Most of the current console is written in R/S, and a minor part in Red. The new one in 0.6.3 is only in Red (we have extended Draw with rich-text capabilities to cover the console needs).}
    sent: "2017-03-16T12:29:56.645Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca853a590d72c864d3a67d"
    text: {found it, https://github.com/red/red/tree/master/environment/console, nice :+1: }
    sent: "2017-03-16T12:29:46.613Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca84fc1c040b8e04020852"
    text: "is the console written in Red itself?"
    sent: "2017-03-16T12:28:44.284Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ca84a605a31d5a4a637750"
    text: {No, the fully View-based GUI console is for 0.6.3 (same console code will run on all platforms with a GUI backend). I use dark blue background with white font. ;-)}
    sent: "2017-03-16T12:27:18.827Z"
    editedAt: "2017-03-16T12:28:41.720Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca7f3c590d72c864d38549"
    text: {My favourite color combinations are `7.54.66 147.161.161`}
    sent: "2017-03-16T12:04:12.593Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ca7ed9590d72c864d38313"
    text: {It's getting better and better. Is the console fully View based, so relatively easy to port to other platforms, where Red GUI is available?}
    sent: "2017-03-16T12:02:33.025Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ca7b9a6d7eb18404d31111"
    text: {I picked a sub-set from [Solarized](http://ethanschoonover.com/solarized), plus some custom ones from some vintage terminals. ;-)}
    sent: "2017-03-16T11:48:42.199Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca7b5ffe6a638b1acfccd7"
    text: "nice ! :thumbsup:"
    sent: "2017-03-16T11:47:43.616Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58ca7b04fe6a638b1acfc9d6"
    text: {You can choose from pre-selected colors now and preview the result at once.}
    sent: "2017-03-16T11:46:12.424Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca7ae4f7f7d4810421e636"
    text: {[![colors.gif](https://files.gitter.im/red/red/yRio/thumb/colors.gif)](https://files.gitter.im/red/red/yRio/colors.gif)}
    sent: "2017-03-16T11:45:40.077Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca2497a84f611959ad444f"
    text: "HA! too quick! Thanks! :smile: "
    sent: "2017-03-16T05:37:27.489Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58ca21d9ac314c8a1a53dc36"
    text: "@x8x You have it now. ;-)"
    sent: "2017-03-16T05:25:45.313Z"
    editedAt: "2017-03-16T05:25:47.420Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca1e1ffe6a638b1acde4f6"
    text: {in `%environment/console/engine.red` change:^/`prompt: "red>> "` to `prompt: "red>> "^^/^^-result: "== "`^/`print ["==" result]` to `print [system/console/result result]`}
    sent: "2017-03-16T05:09:51.609Z"
    editedAt: "2017-03-16T05:11:39.449Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58ca1d621c040b8e04ffee54"
    text: {What about `system/console/result` to be able to customize also the `==` ? :-)}
    sent: "2017-03-16T05:06:42.923Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58ca1aa30b2625d06483f6b3"
    text: {FYI, the Red consoles default prompt has been changed back to `>> `. We used `red>> ` from the beginning to more easily identify if console session snippets where coming from Red or Rebol, though I don't think there is a need for that anymore, and the original prompt from Rebol is the one we've always wanted, as it indents the lines equally to `== `, resulting in a more pleasant layout. As a reminder, you can always customize the prompt using `system/console/prompt`.}
    sent: "2017-03-16T04:54:59.321Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca0fd3590d72c864d155f4"
    text: {@rebolek also:^/> This will not only allow the community to give back and improve Gitter for everyone, but will also allow communities to run their own Gitter instances.}
    sent: "2017-03-16T04:08:51.536Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "58c9c35bf7f7d481041e508c"
    text: {@xificurC With the latest source you need to use the -r compile option to compile the console. The readme will be updated with the 0.6.2 release.}
    sent: "2017-03-15T22:42:35.761Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58c9b377b809ca5f4a49d070"
    text: {looking at the `README` I don't see any steps that I would miss but maybe I'm just blind so posting here before opening an issue}
    sent: "2017-03-15T21:34:47.302Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "58c9b3360b2625d0648207fa"
    text: {hello everyone, after a long long time I'm compiling red again from sources. I cloned the github repo and building the console I got this:^/```^/>> do/args %red.r "%environment/console/console.red" ^/Script: "Red command-line front-end" (none)^/Script: "Encap virtual filesystem" (21-Sep-2009)^/^/-=== Red Compiler 0.6.1 ===- ^/^/Compiling /home/bubo/code/red/environment/console/console.red ...^/...using libRedRT for Linux^/...compilation time : 266 ms^/^/Target: Linux ^/^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/unicode/decode-utf8-char ^/*** in file: %/home/bubo/code/red/environment/console/POSIX.reds ^/*** in function: exec/terminal/fd-read^/*** at line: 235 ^/*** near: [^/    unicode/decode-utf8-char utf-char :len^/]^/>> ^/```}
    sent: "2017-03-15T21:33:42.582Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "58c9750a05a31d5a4a5d9a7e"
    text: {So Gitter has been acquired by Gitlab http://blog.gitter.im/2017/03/15/gitter-gitlab-acquisition/}
    sent: "2017-03-15T17:08:26.579Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c9126c21d548df2cdea2b2"
    text: "Ah, i missed that one, Thanks"
    sent: "2017-03-15T10:07:40.068Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58c911ad09e7ba8510cbe2dc"
    text: {@Rebol2Red ? https://github.com/red/red/issues/2480}
    sent: "2017-03-15T10:04:29.015Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c91156872fc8ce6207a6d6"
    text: {I have isolated the problem with the one line remark:^/^/Only if i use ";test" at the end of my source file and there is no newline after it then the error occurs. ^/^/Can someone check this with another editor?^/^/Note: I use geany as editor  so maybe the problem is only with geany!}
    sent: "2017-03-15T10:03:02.796Z"
    editedAt: "2017-03-15T10:04:11.360Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58c8e7a8e961e53c7febcd3c"
    text: {It's good for rendering opaque the low-level values which are surfacing at Red layer.}
    sent: "2017-03-15T07:05:12.022Z"
    editedAt: "2017-03-15T07:05:51.916Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c8e466de504908229204c4"
    text: {What is new handle dtype good for? Kind of a pointer?}
    sent: "2017-03-15T06:51:18.073Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c87c9309e7ba8510c8c0fa"
    text: {With latest red (15-3-2017):^/^/```^/Red []^/^/;test^/```^/I get this error:^/^/*** Syntax Error: invalid value at ";test"^/*** Where: do^/^/File an issue? How could i name this issue?}
    sent: "2017-03-14T23:28:19.969Z"
    editedAt: "2017-03-14T23:36:26.792Z"
    v: 8
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58c7e9ba21d548df2cd749d2"
    text: {@dockimbel I thought you knew I was trying to use c++ with it this whole time, lol}
    sent: "2017-03-14T13:01:46.336Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c7c044dd08b4b859cb3fbc"
    text: {@gltewalt Thanks for pointing out the compatibility issue with C++. ;-)}
    sent: "2017-03-14T10:04:52.834Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7bee7872fc8ce62ff1bfe"
    text: "Many thanks."
    sent: "2017-03-14T09:59:03.115Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7be0521d548df2cd611a0"
    text: {Note that now, you need to prefix the C++ callbacks used by Red with an `extern "C"` directive.}
    sent: "2017-03-14T09:55:17.591Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7bab200c00c3d4f0532d1"
    text: "Excellent "
    sent: "2017-03-14T09:41:06.790Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7ba4009e7ba8510c308ca"
    text: {@gltewalt `red.h` should now be usable in a C++ project.}
    sent: "2017-03-14T09:39:12.795Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7b89bdd08b4b859cb0dd4"
    text: "@9214 Haha, looking forward to that. ;-)"
    sent: "2017-03-14T09:32:11.471Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7b86421d548df2cd5edb1"
    text: {@dockimbel  with upcoming `0.6.2` release, be prepared to take fancy screenshot of `1337` stargazers on github (it's `1329` for now) ;) }
    sent: "2017-03-14T09:31:16.381Z"
    editedAt: "2017-03-14T09:31:48.584Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c7b7c6dd08b4b859cb09d5"
    text: {the Compile As Default option also errors but I assume Default is set to c++}
    sent: "2017-03-14T09:28:38.494Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7b73000c00c3d4f051e51"
    text: "Compile as C++ does not"
    sent: "2017-03-14T09:26:08.596Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7b6d200c00c3d4f051b90"
    text: {Yes - Placing the .dll in Debug build folder after `red build libRed` and compiling as C code works.}
    sent: "2017-03-14T09:24:34.517Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7b5a909e7ba8510c2eceb"
    text: {`stdcall` is not the default calling convention for a C app, you should build it with: `red build libRed`. ^/`stdcall` convention is used mostly by Pascal language, Windows API and MS Office apps.}
    sent: "2017-03-14T09:19:37.711Z"
    editedAt: "2017-03-14T09:21:44.790Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7b5737ceae5376ab70fd6"
    text: "red build libRed stdcall"
    sent: "2017-03-14T09:18:43.526Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7b558de504908228a93e1"
    text: "@gltewalt How did you compile libRed.dll?"
    sent: "2017-03-14T09:18:16.539Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7b53a09e7ba8510c2eb00"
    text: {If I place a copy there and Compile as C code, it throws this exception:^/```^/Run-Time Check Failure #0 - The value of ESP was not properly saved across a function call.  This is usually a result of calling a function declared with one calling convention with a function pointer declared with a different calling convention.^/```}
    sent: "2017-03-14T09:17:46.712Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7b305dd08b4b859caebec"
    text: "No"
    sent: "2017-03-14T09:08:21.358Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7b27921d548df2cd5c767"
    text: {@gltewalt ^/>  but will fail as cannot find libRed.dll when I run Debug^/^/Is `libRed.dll` file present in your Debug build folder?}
    sent: "2017-03-14T09:06:01.539Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58c7b257872fc8ce62feca25"
    text: {Ah, indeed, we haven't wrapped red.h declarations in an `extern "C"`clause... @qtxie }
    sent: "2017-03-14T09:05:27.933Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7b1c4dd08b4b859cae363"
    text: {I get the LNK2019 errors in VS 2017.  ^/If I switch the compiler to Compile as C, it builds without error, but will fail as cannot find libRed.dll when I run Debug}
    sent: "2017-03-14T09:03:00.948Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7ae14de504908228a67a0"
    text: {It looks like a misconfiguration of libRed.lib in his linker's settings. Does anyone else have issues compiling C apps with libRed integrated?}
    sent: "2017-03-14T08:47:16.546Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7aca77ceae5376ab6dac3"
    text: "(function declarations)"
    sent: "2017-03-14T08:41:11.372Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7abdc00c00c3d4f04d6fa"
    text: {Jacob has been investigating. I thought I'd mention it since you said that 0.6.2 is coming soon}
    sent: "2017-03-14T08:37:48.845Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7ab9421d548df2cd59b07"
    text: "Some sort of issue with __cdecl"
    sent: "2017-03-14T08:36:36.009Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7ab70e961e53c7fe3bf57"
    text: "All of the library functions. "
    sent: "2017-03-14T08:36:00.452Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7aa4f00c00c3d4f04cc6b"
    text: {@pekr There are tons of new features, but it should not be very long as macros have been covered already by an article, so this one will mostly focus on introducing libRed/RT (which has its own documentation already).}
    sent: "2017-03-14T08:31:11.922Z"
    editedAt: "2017-03-14T08:31:34.117Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7a9ffde504908228a5013"
    text: "@gltewalt Which symbols?"
    sent: "2017-03-14T08:29:51.616Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7a8af872fc8ce62fe8c6b"
    text: "VC++"
    sent: "2017-03-14T08:24:15.743Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7a82cdd08b4b859caa0c0"
    text: {https://msdn.microsoft.com/en-us/library/799kze2z.aspx}
    sent: "2017-03-14T08:22:04.594Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7a829de504908228a44c7"
    text: {libRed has errors with unresolved external symbols in visual studio}
    sent: "2017-03-14T08:22:01.701Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c7a742e961e53c7fe3a61f"
    text: "That blog article is going to be long, no? :-)^/"
    sent: "2017-03-14T08:18:10.131Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7a6fd09e7ba8510c2889b"
    text: {FYI, we are preparing for the 0.6.2 release. I'm gathering all the info for the blog release article. We still have a few more minor fixes and additions to do, but I'm hoping we can finish all that before the weekend.}
    sent: "2017-03-14T08:17:01.164Z"
    editedAt: "2017-03-14T08:17:18.071Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c79dd521d548df2cd544ba"
    text: {Maybe not needed, but for me it is really a convenient way of how to compile from latest sources ....}
    sent: "2017-03-14T07:37:57.689Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c79db700c00c3d4f047ce5"
    text: "Good."
    sent: "2017-03-14T07:37:27.178Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c79db2dd08b4b859ca61e6"
    text: "Works like a charm, thanks a lot ...."
    sent: "2017-03-14T07:37:22.112Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c79ccd21d548df2cd53ea1"
    text: {aha, my shortcut is just to the red.r, not the rebol executable. Will change that accordingly ....}
    sent: "2017-03-14T07:33:33.484Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c79c62872fc8ce62fe41ca"
    text: {@pekr It works fine here using (Win7):^/* Target: `C:\Dev\SDK\tools\rebpro.exe -s C:\Dev\Red\red.r halt`^/* Start in: `C:\Dev\Red`}
    sent: "2017-03-14T07:31:46.488Z"
    editedAt: "2017-03-14T07:32:17.391Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c75df500c00c3d4f032b58"
    text: "yes. `C:\!Red\red\red.r halt`"
    sent: "2017-03-14T03:05:25.625Z"
    editedAt: "2017-03-14T03:06:05.340Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c75d1f09e7ba8510c107e3"
    text: {@pekr Did you set up a shortcut as explained in the ticket?}
    sent: "2017-03-14T03:01:51.640Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c75b767ceae5376ab52d2b"
    text: {btw, re `red.r`and its supposed launch by double-click. I can see my ticket already closed with the note that even case 1), launch by double-click, should work. But here, with the 2.7.8 it does not? The security dialog box appears, but then it does not halt and does not end in an R2 console session ....}
    sent: "2017-03-14T02:54:46.072Z"
    editedAt: "2017-03-14T02:56:34.281Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7597121d548df2cd3e4ef"
    text: {You're welcome. `call` was pending since a while, and I really wanted to get rid of all those arguments passing issues. Even the `red.r` wrapper script (in encapped form or when `/library` is present) accepts Unicode arguments now. ;-)}
    sent: "2017-03-14T02:46:09.012Z"
    editedAt: "2017-03-14T02:48:07.820Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c739b4e961e53c7fe16a97"
    text: {Is Christmas earlier this year?? `call` integration and arguments passing = douple present !^/Thank you Red Team!! :smile: @dockimbel @qtxie }
    sent: "2017-03-14T00:30:44.848Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c6364b00c00c3d4ffb7ffc"
    text: "@nc-x Thank you!"
    sent: "2017-03-13T06:03:55.481Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c6241121d548df2ccc2c3e"
    text: {> https://www.reddit.com/r/redlang/comments/5nx6lg/what_makes_red_so_small/^/I think we already processed such question here, so if someone is willing to gather the various answers and post them to /r/redlang, that would be nice. ;-)^/^/@dockimbel done}
    sent: "2017-03-13T04:46:09.783Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58c586f6872fc8ce62f1e748"
    text: {@btiffin I'm also grateful for the lexer/pre-load, but I'm not sure it's much different from what some of us were probably already doing for certain types of DSLs, which is take input as a string and do our own massaging and loading of the data.}
    sent: "2017-03-12T17:35:50.948Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "58c5533ddd08b4b859bd4bc9"
    text: {Just one more question, if I wanted to import and export to a flat file source (CSV, etc...), are there any recommended libraries for this?}
    sent: "2017-03-12T13:55:09.416Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c552f27ceae5376aa8e4c9"
    text: {Using the original file I downloaded worked, thank you @koba-yu . Good to know it can run from any directory as well.}
    sent: "2017-03-12T13:53:54.176Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c55271e961e53c7fd5dbea"
    text: {you can use downloaded red-061.exe on any path. so you can^/```^/red-061.exe -c "C:\Work\Red\RedTest\test1.red"^/```}
    sent: "2017-03-12T13:51:45.357Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58c55270dd08b4b859bd4634"
    text: {That's okay. That tells me something I can try. One sec...}
    sent: "2017-03-12T13:51:44.620Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c5522921d548df2cc7c5b2"
    text: {uh, sorry.  Maybe I copyed red-latet.exe to ProgramData by myself. }
    sent: "2017-03-12T13:50:33.893Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58c552001465c46a562094ec"
    text: "gui-console-2016-6-30-23134.exe"
    sent: "2017-03-12T13:49:52.008Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c551f3e961e53c7fd5d890"
    text: "crush-2016-6-30-23134.dll"
    sent: "2017-03-12T13:49:39.088Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c551e821d548df2cc7c4b6"
    text: "console-cfg.red"
    sent: "2017-03-12T13:49:28.308Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c551dce961e53c7fd5d7e8"
    text: {Thanks @koba-yu . I had downloaded http://static.red-lang.org/dl/win/red-061.exe . However, can't see red-061.exe. There's only three files in the C:\ProgramData\Red\ directory...}
    sent: "2017-03-12T13:49:16.044Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c551287ceae5376aa8db34"
    text: {@ZenoArrow "gui-console-2016-6-30-23134.exe" is not a red executable but red's gui console.^/you may have red-latest.exe or red-061.exe (depends on which link you downloaded).^/If you got red-latest.exe, what you should do is^/^/```^/C:\ProgramData\Red\red-latest.exe -c "C:\Work\Red\RedTest\test1.red"^/```^/}
    sent: "2017-03-12T13:46:16.543Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58c550a4dd08b4b859bd3e84"
    text: "Thanks in advance for any advice."
    sent: "2017-03-12T13:44:04.623Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c55081e961e53c7fd5d0b9"
    text: {Is there meant to  be a separate executable for the compiler and the REPL?}
    sent: "2017-03-12T13:43:29.049Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c550681465c46a56208e4a"
    text: {What's throwing me is there's no 'red' executable that's suggested in the 'Getting Started' page: http://www.red-lang.org/p/getting-started.html}
    sent: "2017-03-12T13:43:04.520Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c55013872fc8ce62f09937"
    text: {The path to the test1.red file is definitely valid.}
    sent: "2017-03-12T13:41:39.930Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c550041465c46a56208bbe"
    text: {So at the moment I'm running... C:\ProgramData\Red\gui-console-2016-6-30-23134.exe -c "C:\Work\Red\RedTest\test1.red"}
    sent: "2017-03-12T13:41:24.381Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c54f8b872fc8ce62f096f9"
    text: {There also doesn't seem to be a 'red' executable, only the REPL, not sure if that's normal or not.}
    sent: "2017-03-12T13:39:23.710Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c54f6add08b4b859bd3a6d"
    text: {Hi, I've got a really basic question about setting up Red on a Windows box... I've downloaded the Red EXE from the website, ran it to unpack it, and the REPL seems to be fine. However, when I try to compile a hello world script I get the error "cannot access argument file".}
    sent: "2017-03-12T13:38:50.792Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c52a19dd08b4b859bc7aad"
    text: {yes, with an open bracket, have to ESC then CTRL-C}
    sent: "2017-03-12T10:59:37.869Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c5247c872fc8ce62efc5f1"
    text: "Escape in windows also.. er.. interrupts `[`"
    sent: "2017-03-12T10:35:40.719Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c5241cdd08b4b859bc5eb9"
    text: {@x8x curious how `ESC` works on mac; windows:^/```red^/red>> 2 + 5^/(escape)^/red>> test: [^/[    ^/(escape)^/red>>^/```}
    sent: "2017-03-12T10:34:04.626Z"
    editedAt: "2017-03-12T10:34:23.899Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58c519da1465c46a561f7d28"
    text: {`CTR-C` on mac and linux is supposed to terminate current process, in Red Console, it does that as well, unless I have an open square bracket, is that by design?}
    sent: "2017-03-12T09:50:18.639Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c446ab1465c46a561bbc26"
    text: {Ah, thanks ... did not know about the existence of `dir`, thought all we've got is R2 `list-dir`.... thanks for the explanation ...}
    sent: "2017-03-11T18:49:15.329Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c43456872fc8ce62eb7333"
    text: {@pekr You cannot pass a word! to `call`. `dir` word is calling a function in Red which displays the content of the current directory. `/console` does not work properly with the GUI console (works fine with the CLI one), as it does not support fully IO redirection.}
    sent: "2017-03-11T17:31:02.630Z"
    editedAt: "2017-03-11T17:32:11.285Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58c42d7c00c00c3d4ff16ee6"
    text: {Using `"dir"`in quotes returns just `0`and no output, for either of above refinement cases}
    sent: "2017-03-11T17:01:48.572Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c42d3b7ceae5376aa366bc"
    text: {`call/console/shell dir`does just the same, what `call/console dir`- returns output of the command, but errors out with `*** Script Error: call does not allow unset! for its cmd argument`}
    sent: "2017-03-11T17:00:43.958Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c41f1a1465c46a561ad2cf"
    text: {I think we already processed such question here, so if someone is willing to gather the various answers and post them to /r/redlang, that would be nice. ;-)}
    sent: "2017-03-11T16:00:26.725Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c41e711465c46a561acf9f"
    text: {https://www.reddit.com/r/redlang/comments/5nx6lg/what_makes_red_so_small/}
    sent: "2017-03-11T15:57:37.221Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c4169000c00c3d4ff0e637"
    text: {Have just received good explanation from @dockimbel. See comments to the issue.}
    sent: "2017-03-11T15:24:00.195Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58c3f9187ceae5376aa247b0"
    text: {I can't figure out how to make `call` work. See new issue #2475}
    sent: "2017-03-11T13:18:16.763Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58c3ca3100c00c3d4fef4846"
    text: {@maximvl See the above solution proposed by Gregg, `bind` is not the right tool for such need.}
    sent: "2017-03-11T09:58:09.787Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c3c3d600c00c3d4fef280a"
    text: {@rebolek Thank you very much, your application runs fine on Linux now!  Have a nice day.}
    sent: "2017-03-11T09:31:02.877Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58c3c3b3de50490822758e60"
    text: {> @lpvm I think you do not have to wait anymore, this [commit](https://github.com/red/red/commit/485d57b98c3c9e320e30a76db6f6c9db967eb99c) should fix it :)}
    sent: "2017-03-11T09:30:27.157Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58c3c21b1465c46a5618e1ae"
    text: {but some parts of code may be constructed in runtime, so this will not work in all the cases, while CL's approach with dynamic lookup seems to be the only possible option}
    sent: "2017-03-11T09:23:39.797Z"
    editedAt: "2017-03-11T09:25:20.502Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c3c1101465c46a5618de13"
    text: {even if a lot of code branches will not be executed in the end}
    sent: "2017-03-11T09:19:12.151Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c3c0e2dd08b4b859b5e032"
    text: {using `bind` one would have to go through all the underlying code in runtime and bind every executable thing to context with new value}
    sent: "2017-03-11T09:18:26.584Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c3c0981465c46a5618dc48"
    text: "this is the most elegant solution I've seen"
    sent: "2017-03-11T09:17:12.734Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c3c0371465c46a5618da96"
    text: {like `(let ((*read-base* 16)) (print (read-from-string "FF"))) ; => 255`}
    sent: "2017-03-11T09:15:35.785Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c3c02121d548df2cc00ca2"
    text: {>While global vars can cause issues, they are sometimes very useful. This would be another tool that allows you to structure your code how you think best, without forcing you to do it in a way that makes the language happy.^/^/Exactly, things like stdin, stdout, parameters of different system facilities can be controlled in this way}
    sent: "2017-03-11T09:15:13.277Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c3be80e961e53c7fce3247"
    text: {@dockimbel Happy Birthday! (well, if the FB is right :-)}
    sent: "2017-03-11T09:08:16.096Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c3a7cc00c00c3d4feeab63"
    text: {as for some names, in the past, Cyphre asked me for the name of his JIT R2 tool, and I came up with jitteR or ReJit. ReGit might be for some Git tool.}
    sent: "2017-03-11T07:31:24.618Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c39aa8e961e53c7fcd91b9"
    text: "red[user]"
    sent: "2017-03-11T06:35:20.715Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c39891872fc8ce62e84019"
    text: "Nice."
    sent: "2017-03-11T06:26:25.828Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58c39727dd08b4b859b527a4"
    text: "reducers is the right term, imo ;)"
    sent: "2017-03-11T06:20:23.990Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c396bf00c00c3d4fee6430"
    text: {Normal user, reddy, core team, reddier, winner, reddiest.  :-)}
    sent: "2017-03-11T06:18:39.532Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58c39575872fc8ce62e8336f"
    text: {@dockimbel, Hey Doc.  This masterpiece of yours is getting more and more masterpiece-y.  Kudos.  And pass that on to qtxie, and Andreas, and David, and Peter, and Gregg, and the rest of the team.  It's well past time to back fill the missing rebol of the year awards and start in on the reddite awards.  (just looked that up, redite is a poor choice of word, translates to needless repetition), redders?  Programmers that partake in software development using the language known as Red?  PTPISDUTLKAR awards?  Or maybe just reddier, with the award going to the reddiest?}
    sent: "2017-03-11T06:13:09.871Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58c38459dd08b4b859b4e1ea"
    text: {@greggirwin An alternative implementation:^/```lisp^/let: function [spec body][^/    words:  extract spec 2^/    values: extract/index spec 2 2^/    forall words [words/1: to-word words/1]^/    ^/    orig-vals: reduce words^/    set words values^/    also try body set words orig-vals^/]^/```^/It could be made even shorter once we have an `unzip` HOF.}
    sent: "2017-03-11T05:00:09.979Z"
    editedAt: "2017-03-11T05:01:04.406Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c384221465c46a5617bedc"
    text: "@btiffin Hi Brian!"
    sent: "2017-03-11T04:59:14.036Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c37639872fc8ce62e7ab9d"
    text: {@pekr, Got your note, but my response bounced off SourceForge.  Thanks for the heads up.  Digging into Red6 latest and trying out system/lexer/pre-load.  It's not quite a LOAD/ANY, but it ~~might~~ will lead to some nifty experiments.  It certainly ups the ante regarding DSL coding.^/^/Hello, room.}
    sent: "2017-03-11T03:59:53.511Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "58c3221ddd08b4b859b32b8b"
    text: {```^/let: func [spec body /local orig-vals res][^/    orig-vals: collect [^/    ^-foreach [word val] spec [keep reduce [word get to word! word]]^/    ]^/    foreach [word val] spec [set word val]^/    set/any 'res try body^/    foreach [word val] orig-vals [set word val]^/    get/any 'res^/]^/z: 1^/foo: does [z]^/bar: does [let [z: 2][foo]]^/baz: does [let [z: 2][foo 1 / 0]]^/^/foo^/bar^/baz^/z^/```}
    sent: "2017-03-10T22:01:01.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c3214ade5049082272be51"
    text: {Have to think about what other risks it poses, but it shows that we don't need to necessarily alter the core language behavior in all cases.}
    sent: "2017-03-10T21:57:30.569Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c32108872fc8ce62e60656"
    text: "e.g. using a `try` around it."
    sent: "2017-03-10T21:56:24.315Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c320ce7ceae5376a9e65d4"
    text: {The above example of a `let` func would need to be robust, catching any errors in `body` and ensuring it resets all words it affects.}
    sent: "2017-03-10T21:55:26.685Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c3206100c00c3d4fec3f79"
    text: {While global vars can cause issues, they are sometimes very useful. This would be another tool that allows you to structure your code how you think best, without forcing you to do it in a way that makes the language happy.}
    sent: "2017-03-10T21:53:37.202Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c31ffc872fc8ce62e5fff1"
    text: "ok"
    sent: "2017-03-10T21:51:56.136Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c31fdfe961e53c7fcb4902"
    text: "Nesting only works if you  control everything."
    sent: "2017-03-10T21:51:27.500Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c31f9a00c00c3d4fec3bf5"
    text: "Paste into console to see results."
    sent: "2017-03-10T21:50:18.824Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c31f8b00c00c3d4fec3b7b"
    text: {```^/let: func [spec body /local orig-vals res][^/    orig-vals: collect [^/    ^-foreach [word val] spec [keep reduce [word get to word! word]]^/    ]^/    foreach [word val] spec [set word val]^/    set/any 'res do body^/    foreach [word val] orig-vals [set word val]^/    get/any 'res^/]^/z: 1^/foo: does [z]^/baz: does [let [z: 2][foo]]^/^/foo^/baz^/z^/```}
    sent: "2017-03-10T21:50:03.727Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c31f7bdd08b4b859b31c10"
    text: "So would nesting func, wouldn't it?"
    sent: "2017-03-10T21:49:47.656Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c31f591465c46a5615de58"
    text: {yep, but this is just a blueprint to understanding}
    sent: "2017-03-10T21:49:13.579Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c31f1e7ceae5376a9e5bea"
    text: {@JacobGood1 , beat me. ;^^) The CL approach resets the bindings automatically. Give me a minute...}
    sent: "2017-03-10T21:48:14.489Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c31ee200c00c3d4fec37f2"
    text: "just a ridiculous example"
    sent: "2017-03-10T21:47:14.200Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c31ecbdd08b4b859b31800"
    text: {```^/red>> z1: object [z: 1]^/== make object! [^/    z: 1^/]^/red>> z2: object [z: 2]^/== make object! [^/    z: 2^/]^/red>> z3: object [z: 3]^/== make object! [^/    z: 3^/]^/^/red>> ex: func [] head bind skip bind skip bind [print z print z print z] z1 2 z2 2 z3^/== func [][print z print z print z]^/red>> ex^/1^/2^/3^/```^/^/}
    sent: "2017-03-10T21:46:51.018Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c31e52de5049082272ac46"
    text: {'Use`, in Rebol, keeps words from leaking into outer contexts.}
    sent: "2017-03-10T21:44:50.903Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c31e28dd08b4b859b314c1"
    text: {@gltewalt , not exactly. `Foo`'s body is already using `z` and its global binding. A `let` func would have to create the new context and rebind a copy of the body of every func, or it would have to munge the values of global words, which I think is what @maximvl  says CL does. }
    sent: "2017-03-10T21:44:08.841Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c31d9e7ceae5376a9e5422"
    text: {@maximvl you can set z to any context you choose, make as many objects as you want with z in them, bind the func to any one of those objects}
    sent: "2017-03-10T21:41:50.571Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c31ccf1465c46a5615cee3"
    text: {local works similar to let, but that is not what he is showing there}
    sent: "2017-03-10T21:38:23.240Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c31ca7dd08b4b859b30a0b"
    text: "Or am I thinking of use ?"
    sent: "2017-03-10T21:37:43.428Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c31c88dd08b4b859b309b4"
    text: {probably should be speaking about this stuff on the lisp channel}
    sent: "2017-03-10T21:37:12.996Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c318cb872fc8ce62e5d2b6"
    text: "Isn't /local used like let?"
    sent: "2017-03-10T21:21:15.629Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c2deabde50490822711d0a"
    text: {or more deep one: http://www.flownet.com/ron/specials.pdf}
    sent: "2017-03-10T17:13:15.344Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2ddf0de50490822711849"
    text: {I suggest to at least take a look at this idea, for example here under `Dynamic, a.k.a. Special, Variables`^/ http://www.gigamonkeys.com/book/variables.html}
    sent: "2017-03-10T17:10:08.113Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2dd38e961e53c7fc97fc9"
    text: "using `bind` in Redbol you can't do this"
    sent: "2017-03-10T17:07:04.225Z"
    editedAt: "2017-03-10T17:07:35.658Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2dce2872fc8ce62e4466e"
    text: "but their capabilities are also bigger"
    sent: "2017-03-10T17:05:38.291Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58c2dcb7872fc8ce62e444f8"
    text: "of course this lookup is slower than direct one"
    sent: "2017-03-10T17:04:55.674Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2dc9fde50490822710f85"
    text: {So here `foo` returns 1, but `baz` returns 2^/^/```^/(defvar z 1)^/(defun foo () z)^/(defun baz ()^/  (let ((z 2)) ; Establish binding Z*2^/    (foo)))^/```}
    sent: "2017-03-10T17:04:31.311Z"
    editedAt: "2017-03-10T17:04:40.144Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2dc657ceae5376a9c96d9"
    text: {and their value is found using the runtime bindings, rather than "code" ones}
    sent: "2017-03-10T17:03:33.732Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2dc2d872fc8ce62e44079"
    text: {@dockimbel so in CL there are so called "special variables"}
    sent: "2017-03-10T17:02:37.492Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2da0b872fc8ce62e43015"
    text: {@maximvl The SO entry I pointed above should answer all your questions about binding/scoping. In Red and R2, all words are bound to global context on load. Then the various constructors will bind some words to other contexts during evaluation.}
    sent: "2017-03-10T16:53:31.331Z"
    editedAt: "2017-03-10T16:55:15.642Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c2d9d47ceae5376a9c8435"
    text: "are words binded during load?"
    sent: "2017-03-10T16:52:36.059Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d96f1465c46a56141266"
    text: {I'm not saying it works wrong or something, I wonder if binding we have can provide similar capabilities or not?}
    sent: "2017-03-10T16:50:55.259Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d946de5049082270f9e1"
    text: {@maximvl no, it's not a solution, it is illustration of how it works}
    sent: "2017-03-10T16:50:14.097Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c2d93c00c00c3d4fea6b92"
    text: "@dockimbel I did, yes"
    sent: "2017-03-10T16:50:04.263Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d928e961e53c7fc9646e"
    text: {@rebolek doesn't look like a solution, you can't rebind every nested function}
    sent: "2017-03-10T16:49:44.306Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d90d1465c46a56140fa2"
    text: {@maximvl Have you read this [SO entry](http://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red?rq=1) about scoping rules in Redbol?}
    sent: "2017-03-10T16:49:17.956Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c2d8f3dd08b4b859b158c2"
    text: {then all output which would go to STDOUT will be collected in `my-buffer`}
    sent: "2017-03-10T16:48:51.617Z"
    editedAt: "2017-03-10T16:48:59.689Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d8de872fc8ce62e4279d"
    text: {for example: `(let ((*standard-output* my-buffer)) (call-some-funcs))`}
    sent: "2017-03-10T16:48:30.620Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d8ae00c00c3d4fea6831"
    text: {@maximvl ^/```^/red>> with [+: :*] [bind body-of :f '+ print f 3 3]^/9^/```}
    sent: "2017-03-10T16:47:42.735Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c2d88d21d548df2cbb59b5"
    text: "this is why I'm asking if this is possible"
    sent: "2017-03-10T16:47:09.860Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d86ae961e53c7fc95ee7"
    text: {@dockimbel so, one step back, the CL shows how lexical rebinding works nice for a lot of different things}
    sent: "2017-03-10T16:46:34.331Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d836e961e53c7fc95d4c"
    text: "I see"
    sent: "2017-03-10T16:45:42.114Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d83400c00c3d4fea64ba"
    text: {```^/red>> with [+: :*] [ print 3 + 3 z: func [x y] [x + y] print z 3 3]^/9^/9^/```}
    sent: "2017-03-10T16:45:40.644Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d8251465c46a561409ad"
    text: "@maximvl `bind` binds deeply."
    sent: "2017-03-10T16:45:25.011Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c2d80000c00c3d4fea62f6"
    text: "Yes, it was bound already."
    sent: "2017-03-10T16:44:48.594Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c2d7f621d548df2cbb54fe"
    text: "so `+` in `f` is not affected by the change"
    sent: "2017-03-10T16:44:38.757Z"
    editedAt: "2017-03-10T16:44:46.568Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d795872fc8ce62e41ed7"
    text: {eg:^/```^/red>> f: func [x y] [x + y]^/== func [x y][x + y]^/red>> with [+: :*] [ print 3 + 3 print f 3 3]^/9^/6^/```}
    sent: "2017-03-10T16:43:01.888Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d71c7ceae5376a9c7235"
    text: {while `bind` in Redbol only binds "first level" words of the block}
    sent: "2017-03-10T16:41:00.650Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d70821d548df2cbb4f27"
    text: {all the code below lexical bindings uses latest bindings}
    sent: "2017-03-10T16:40:40.786Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d6f521d548df2cbb4ee4"
    text: "so, the trick is"
    sent: "2017-03-10T16:40:21.861Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d6e1e961e53c7fc95472"
    text: {@dockimbel interesting, but will it work in the cases like `pre-load` above?}
    sent: "2017-03-10T16:40:01.899Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d65cde5049082270e6a4"
    text: {see this:^/```^/red>> context [a: 5 system/words/about: "pwned"]^/== make object! [^/    a: 5^/]^/red>> about^/== "pwned"^/```}
    sent: "2017-03-10T16:37:48.778Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c2d619dd08b4b859b14469"
    text: {@maximvl yes, but is different case, you are changing value in `system/words`, not in flat block that can be turned into `object!`}
    sent: "2017-03-10T16:36:41.086Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c2d5e6de5049082270e327"
    text: {@maximvl You can look at `use` in Rebol for such usage, it will come to Red too.}
    sent: "2017-03-10T16:35:50.141Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c2d5b91465c46a5613fa7f"
    text: {> @dockimbel I think he wants to be able to apply `pre-load` only to a specific block^/^/You cannot apply `load` or `pre-load` on a block (it's already a loaded value), but on strings only.}
    sent: "2017-03-10T16:35:05.651Z"
    editedAt: "2017-03-10T16:35:17.639Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c2d5071465c46a5613f62b"
    text: {@rebolek wait, the change stays afterwards...^/```^/red>> with: function [data block] [do bind block context data]^/== func [data block][do bind block context data]^/red>> with [system/words/about: does [print "my about"]] [about]^/my about^/red>> about^/my about^/```}
    sent: "2017-03-10T16:32:07.647Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d3c800c00c3d4fea457a"
    text: {@endo64 so you can do `with [system/lexer/pre-load: func [...] ] [parse ...]`}
    sent: "2017-03-10T16:26:48.477Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d397e961e53c7fc93c7d"
    text: "@rebolek nice!"
    sent: "2017-03-10T16:25:59.138Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d37fde5049082270d021"
    text: ">  we don't have bindings...^/^/Of course we do :)"
    sent: "2017-03-10T16:25:35.841Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c2d34cde5049082270cec4"
    text: {```^/red>> with: function [data block] [do bind block context data]     ^/== func [data block][do bind block context data]                   ^/red>> a: 5                                                         ^/== 5                                                               ^/red>> with [a: 6] [print a]                                        ^/6                                                                  ^/red>> a                                                            ^/== 5                                                               ^/```}
    sent: "2017-03-10T16:24:44.640Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c2d340e961e53c7fc93913"
    text: "Of course, that is very easy"
    sent: "2017-03-10T16:24:32.143Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c2d2c2dd08b4b859b12eb1"
    text: {in lisps this is made using lexical bindings, but we don't have bindings in Redbol}
    sent: "2017-03-10T16:22:26.013Z"
    editedAt: "2017-03-10T16:22:35.156Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2d2a1dd08b4b859b12d60"
    text: {I wonder if it is possible in Red do something like ^/```^/a: 5 ^/with [a: 6] [print a] ; outputs 6^/print a ; outputs 5^/```}
    sent: "2017-03-10T16:21:53.693Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2c3ca872fc8ce62e38e3f"
    text: "which totally makes sense as for me"
    sent: "2017-03-10T15:18:34.595Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2c3b1e961e53c7fc8c599"
    text: {@dockimbel I think he wants to be able to apply `pre-load` only to a specific block}
    sent: "2017-03-10T15:18:09.584Z"
    editedAt: "2017-03-10T15:18:21.845Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2c32021d548df2cbab9e5"
    text: {@endo64 Why not just:^/```lisp^/src: "[1-]"^/parse trim/with src "-" [integer!]^/```}
    sent: "2017-03-10T15:15:44.569Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c2bb2b21d548df2cba7c59"
    text: {or `parse (load/with [1-] func [src part] [trim/with src "-"]) [integer!]`}
    sent: "2017-03-10T14:41:47.926Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58c2bafe00c00c3d4fe98aaf"
    text: {`pre-load` is cool! It could be nice to have it only during `parse`ing, something like `parse/with [1-] [integer!] func [src part] [trim/with src "-"]` (normally gives `Syntax Error: invalid integer! at "1-]"` )}
    sent: "2017-03-10T14:41:02.353Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58c2b1d07ceae5376a9b65ad"
    text: "Haha ;-)"
    sent: "2017-03-10T14:01:52.289Z"
    editedAt: "2017-03-10T14:02:28.438Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c2b133de504908226fe053"
    text: {@dockimbel `pre-load` is just amazing! You just created  a new language called `Rouge`.}
    sent: "2017-03-10T13:59:15.001Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58c281b8e961e53c7fc70e3e"
    text: {> I've just updated all of Kaj's links to point to the Github mirror repo.^/^/@dockimbel The mirror repo is highly outdated, and I don't think that code works with the latest Red version. IMHO it would be better to remove all the links from the page (temporarily) to avoid confusion. }
    sent: "2017-03-10T10:36:40.162Z"
    editedAt: "2017-03-10T10:36:45.347Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58c27b3500c00c3d4fe7f495"
    text: {@dockimbel `pre-load` is nice, it looks like it can be used to implement CL's readtables :D}
    sent: "2017-03-10T10:08:53.615Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c2725321d548df2cb8b427"
    text: "@meijeru Yes."
    sent: "2017-03-10T09:30:59.724Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c271f000c00c3d4fe7b67c"
    text: {Glad to see `call` native! I note that Rebol 3 had a very restricted one. On the other hand, Rebol 2 has an additional refinement `/info` which returns an object containing the exit-code. Would that be worthwhile?}
    sent: "2017-03-10T09:29:20.055Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58c26e4edd08b4b859aeb0d6"
    text: "Heh, that would make Brian Tiffin happy, no? :-)"
    sent: "2017-03-10T09:13:50.534Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "58c26dc3dd08b4b859aeadbf"
    text: {Translating words on the fly:^/```lisp^/system/lexer/pre-load: function [src part][^/    parse src [^/        any [^/            s: [^/                "affiche"       (new: "print")^/                | "si"          (new: "if")^/                | "tant que"    (new: "while")^/                | "pair?"       (new: "even?")^/                | "impair?"     (new: "odd?")^/            ] e: (s: change/part s new e) :s^/            | skip^/        ]^/    ]^/]^/^/red>> i: 10 tant que [i > 0][si impair? i [affiche i] i: i - 1]^/9^/7^/5^/3^/1^/```}
    sent: "2017-03-10T09:11:31.494Z"
    editedAt: "2017-03-10T09:12:40.941Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c26da5e961e53c7fc693eb"
    text: {If you need to preprocess the input to LOAD, you can now do it easily by plugging a function in `system/lexer/pre-load`. For example:^/```lisp^/system/lexer/pre-load: func [src part][^/    parse src [any [remove comma insert #" " | skip]]^/]^/^/>> [1,2,3,abd,"hello"]^/== [1 2 3 abd "hello"]^/```}
    sent: "2017-03-10T09:11:01.767Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c25faade504908226ded0a"
    text: {I've just updated all of Kaj's links to point to the Github mirror repo.}
    sent: "2017-03-10T08:11:22.324Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c2593edd08b4b859ae38c7"
    text: "I've sent him a message at Syllable"
    sent: "2017-03-10T07:43:58.063Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c2573c21d548df2cb81bb8"
    text: {Well, we should somehow check with Kaj, if it is possible to reach him}
    sent: "2017-03-10T07:35:24.366Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c255e47ceae5376a9916f3"
    text: {On the same page, Oldes ImageMagick binding link should be updated to https://github.com/red/code/tree/master/Library/ImageMagick}
    sent: "2017-03-10T07:29:40.483Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c251ce21d548df2cb80114"
    text: {Well then maybe all his contributions should be temporarily removed from http://www.red-lang.org/p/contributions.html}
    sent: "2017-03-10T07:12:14.608Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c24ef621d548df2cb7f0f0"
    text: {Kaj does not seem to be available, maybe he even left our language ecosystem, there seem to be some indications from  private chat.}
    sent: "2017-03-10T07:00:06.001Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c24d6421d548df2cb7e9a0"
    text: "Anybody know if Kaj repo is a temporary down?"
    sent: "2017-03-10T06:53:24.791Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c1f21a872fc8ce62deecc4"
    text: {R2 had some issues, depending on the version, and whether you used `/show` after they added it. That's why Nenad's `call` replacement was a safer choice.}
    sent: "2017-03-10T00:23:54.292Z"
    editedAt: "2017-03-10T00:24:00.844Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c1e71c872fc8ce62deb332"
    text: {@maximvl Not on unix, but `call/wait {blah}` does hang sometimes as expected. Now to check on unsafe code! :p }
    sent: "2017-03-09T23:37:00.763Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c1e5d300c00c3d4fe4f6d0"
    text: "@geekyi try `call/wait {grep x}` :D"
    sent: "2017-03-09T23:31:31.177Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c1ddd3de504908226b9f46"
    text: {I don't have the `call` code I used before on REBOL2 anymore. (Was on my old laptop, which I don't have atm). But I think one of the problems was rebol2 hanging (and thus unable to be debugged).^/Red doesn't hang so far :smile: }
    sent: "2017-03-09T22:57:23.194Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c194a600c00c3d4fe2e7cd"
    text: "@JacobGood1 Thanks!"
    sent: "2017-03-09T17:45:10.081Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c186bfe961e53c7fc18829"
    text: {I was actually just wondering when command line manipulation was coming}
    sent: "2017-03-09T16:45:51.841Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c186a900c00c3d4fe286a1"
    text: "@dockimbel gratz on call btw, good stuff"
    sent: "2017-03-09T16:45:29.634Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c1842bde50490822696c86"
    text: {@dockimbel actually no, never used a file with 'call/input', going to fix that, not sure how to write that routine but will try, thx}
    sent: "2017-03-09T16:34:51.551Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c182571465c46a560c32c3"
    text: {@rebolek Our Mac backend is again unreachable...we'll investigate again this weekend.}
    sent: "2017-03-09T16:27:03.840Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c18032dd08b4b859a9965f"
    text: "@dockimbel that was fast, thanks"
    sent: "2017-03-09T16:17:54.358Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c17f7bde50490822694c86"
    text: {There has to be some loser in here that uses windows like me =)}
    sent: "2017-03-09T16:14:51.475Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c178f8de5049082269219f"
    text: {Hey guys I posted a question in red/help, just putting this here to coerce some people that are here to go read it}
    sent: "2017-03-09T15:47:04.149Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c1785b4150746b15163737"
    text: {Nightly build for macOS leads to 404: http://static.red-lang.org/dl/auto/mac/red-09mar17-aa73d88}
    sent: "2017-03-09T15:44:27.717Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c1773d21d548df2cb3392c"
    text: {@x8x The current `call` code is just the integration of the one which was in `%system/library/call`, the features are not changed. }
    sent: "2017-03-09T15:39:41.768Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c176ce00c00c3d4fe21137"
    text: {@maximvl I pushed a fix for the `call/input` issue with files. }
    sent: "2017-03-09T15:37:50.034Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c16e4721d548df2cb2fcb6"
    text: {@x8x Did you ever use `call/input` with a file! argument? I'm asking because your wrapper will prevent that from working properly as it converts such argument to a string!.}
    sent: "2017-03-09T15:01:27.301Z"
    editedAt: "2017-03-09T15:02:10.217Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c16e1b7ceae5376a93eba4"
    text: {@x8x You can simply write a `redsys-call` routine that will call `ext-process/call` just passing the arguments, so you don't have to change your wrapper.}
    sent: "2017-03-09T15:00:43.588Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c16db01465c46a560b9f66"
    text: {@geekyi Do you have any suggestion to make `call` easier?}
    sent: "2017-03-09T14:58:56.768Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c16bdf00c00c3d4fe1bd1f"
    text: {Of course I could do so, just dunno if it is a bug (regression), or a feature :-) Well, at least `rc` should work, so will report it ....}
    sent: "2017-03-09T14:51:11.729Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c16af0e961e53c7fc0b368"
    text: {@pekr Yes, arguments processing was changed/improved in `red.r` and in many other places. If you see regressions, please open tickets with examples to reproduce the issues.}
    sent: "2017-03-09T14:47:12.392Z"
    editedAt: "2017-03-09T14:56:26.319Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c167f21465c46a560b79d4"
    text: "`call` support! Great news!"
    sent: "2017-03-09T14:34:26.992Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58c14e6600c00c3d4fe0f963"
    text: "That's nice! I think that's what I really want"
    sent: "2017-03-09T12:45:26.518Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c14c9ade5049082268098b"
    text: {@geekyi see the difference:^/```^/  r: make string! 10^/;   ""^/  call/output "uname" r^/;   0^/  r^/;   "Linux^^/"^/  ecall/o "uname"^/;   "Linux^^/"^/```}
    sent: "2017-03-09T12:37:46.856Z"
    editedAt: "2017-03-09T12:38:02.336Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c14c167ceae5376a930d8d"
    text: {Looking at the gist, I was actually `reform`ing `block` as argument as it was confusing without it}
    sent: "2017-03-09T12:35:34.465Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c14bd3e961e53c7fbff007"
    text: {@x8x what new thing does your wrapper offer? (hmm.. there's block input)}
    sent: "2017-03-09T12:34:27.168Z"
    editedAt: "2017-03-09T12:37:07.712Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58c14b8300c00c3d4fe0e8e8"
    text: {@pekr I mean as an interface. Maybe the rest of the things in Redbol world being so easy, makes me forget the underlying complexity of calling things}
    sent: "2017-03-09T12:33:07.087Z"
    editedAt: "2017-03-09T12:34:47.198Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58c14b14e961e53c7fbfecb6"
    text: "Ah, I just tried it"
    sent: "2017-03-09T12:31:16.841Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c145ca872fc8ce62da85ae"
    text: {I mostly use `call` with this user friendly wrapper: https://gist.github.com/x8x/394a5dd3e77451a61f03d4198d9f108e^/Now I'm wondering if there is an easy way to adapt it to the new `call`.^/This function was relying on `redsys-call` from the old `call` that was exposed globally.^/I see a similar function in the new `call*` definition in `runtime/natives.reds`:^/`ext-process/call cmd wait > -1 console > -1 shell > -1 in out err`^/but I'm not sure how and if I can access it.^/A quick guidance on which way to go would be much appreciated.^/}
    sent: "2017-03-09T12:08:42.481Z"
    editedAt: "2017-03-09T12:10:06.762Z"
    v: 3
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c143ad1465c46a560aa1db"
    text: {@geekyi I liked `call`a lot with Rebol. It was imo a mistake since day one, that library interface and call were not for free. So easy to plug the language into foreign stuff - run something, get the result into buffer, parse it. There is also SQLite light "protocol" for R2, which simply calls SQLite.exe and parses the output - it just works :-)}
    sent: "2017-03-09T11:59:41.830Z"
    editedAt: "2017-03-09T12:00:31.760Z"
    v: 3
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c14063e961e53c7fbfac21"
    text: {Is block as argument coming or has the feature been dropped?}
    sent: "2017-03-09T11:45:39.660Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c1403ee961e53c7fbfaaf3"
    text: {very nice to see a brand new `call`, didn't see that coming as the old one was working fine after @qtxie fixes, thanks a lot for that :smile: !! I rely heavily on `call`.}
    sent: "2017-03-09T11:45:02.347Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58c13e7a00c00c3d4fe09adb"
    text: {It was changed in a commit to enable better scripting I think}
    sent: "2017-03-09T11:37:30.037Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c13e5bdd08b4b859a7ec2a"
    text: "@pekr yeah"
    sent: "2017-03-09T11:36:59.640Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c13e51de5049082267bc21"
    text: {@maximvl I've always thought `call` was a bit unintuitive in rebol}
    sent: "2017-03-09T11:36:49.364Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c13cdc872fc8ce62da5107"
    text: {Was there any change to the `red.r`script? In the past (well, old habits), I just double-clicked the file, and in the console I typed `rc "-t Windows %environment/console/gui-console.red"` and got new build of the gui console. Now when I double-click the file, it ends, and `rc`does return some Driver internal error. But maybe I just forgot, how to use it properly or should switch to use the red.exe :-)}
    sent: "2017-03-09T11:30:36.895Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c12f7d7ceae5376a92653a"
    text: {@dockimbel it seems urls are not allowed at all:^/```^/red>> call/console/input {grep Host} read http://httpbin.org/headers^/    "Host": "httpbin.org"^/== 0^/red>> call/console/input {grep Host} http://httpbin.org/headers^/*** Script Error: call does not allow url! for its in argument^/*** Where: call^/```}
    sent: "2017-03-09T10:33:33.817Z"
    editedAt: "2017-03-09T10:35:53.461Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12f1200c00c3d4fe0405c"
    text: "@nc-x Thanks, looking at it now."
    sent: "2017-03-09T10:31:46.362Z"
    editedAt: "2017-03-09T10:40:01.797Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c12df6dd08b4b859a78fe7"
    text: "probably so :D"
    sent: "2017-03-09T10:27:02.359Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12da21465c46a560a2626"
    text: {It seems our implementation is missing pre-reading of files and urls:^/```lisp^/red>> call/input/console {grep "5"} read %/etc/passwd^/sync:x:4:65534:sync:/bin:/bin/sync^/games:x:5:60:games:/usr/games:/usr/sbin/nologin^/nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin^/```^/}
    sent: "2017-03-09T10:25:38.213Z"
    editedAt: "2017-03-09T10:26:01.016Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c12cddde50490822675330"
    text: {@dockimbel ok, then issue is exactly with `input` with files:^/```^/red>> call/input/console {grep "5"} "abc 5 t"^/abc 5 t^/== 0^/red>> call/input/console {grep "5"} %/etc/passwd^/== 1^/```}
    sent: "2017-03-09T10:22:21.906Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12c73872fc8ce62d9f344"
    text: {Ah, I forgot that you need `/console` option if you want the output displayed:^/```lisp^/red>> str: "this is a string of text"^/== "this is a string of text"^/red>> call/input/console "wc" str^/      0       6      24^/== 0^/```}
    sent: "2017-03-09T10:20:35.511Z"
    editedAt: "2017-03-09T10:20:52.178Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58c12af700c00c3d4fe02766"
    text: {well, to me this doesn't mean we should not support this :D}
    sent: "2017-03-09T10:14:15.665Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12ac921d548df2cb15cfb"
    text: "You don't always need the output."
    sent: "2017-03-09T10:13:29.943Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c12a99de504908226746ae"
    text: "but this is not always the case"
    sent: "2017-03-09T10:12:41.055Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12a8edd08b4b859a77b03"
    text: {I mean, in simple cases I can hard-code filename into the command}
    sent: "2017-03-09T10:12:30.769Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12a4a21d548df2cb15a2c"
    text: {but what is the reason behind running `call/input` without getting output?}
    sent: "2017-03-09T10:11:22.259Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12a15de5049082267437b"
    text: {You're right, I can make it work with Rebol's `call`.}
    sent: "2017-03-09T10:10:29.297Z"
    editedAt: "2017-03-09T10:13:02.228Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c12928872fc8ce62d9e1b4"
    text: {```^/red>> call/input/output ^{grep "5"^} %/etc/passwd x^/== 1^/red>> x^/== ""^/red>> call/output ^{grep "5" /etc/passwd^} x^/== 0^/red>> x^/== ^{sync:x:4:65534:sync:/bin:/bin/sync^^/games:x:5:60:games:/usr/games:/^/```}
    sent: "2017-03-09T10:06:32.504Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12913872fc8ce62d9e125"
    text: "@dockimbel ok, it's `input` which is not working:"
    sent: "2017-03-09T10:06:11.784Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c128efde50490822673d5b"
    text: "`/output` implies `/wait`."
    sent: "2017-03-09T10:05:35.093Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c128d67ceae5376a924118"
    text: {When the `/output` or `/wait` options are used, `call` is blocking and will always return 0.}
    sent: "2017-03-09T10:05:10.778Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c128a721d548df2cb151cb"
    text: {```lisp^/red>> call/output "echo $USER" s: ""^/== 0^/red>> s^/== "dk^^/"^/```}
    sent: "2017-03-09T10:04:23.934Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c128947ceae5376a923fc9"
    text: "em, now it works"
    sent: "2017-03-09T10:04:04.072Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c1287bdd08b4b859a76f19"
    text: "I can see it is readable to everybody"
    sent: "2017-03-09T10:03:39.482Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c1287000c00c3d4fe01a1e"
    text: {```^/red>> call/wait/output "ls -lha /etc/passwd" x^/== 0^/red>> x^/== ^{-rw-r--r-- 1 root root 2,4K Dec  9 10:56 /etc/passw^/```}
    sent: "2017-03-09T10:03:28.679Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c1283600c00c3d4fe01921"
    text: "The PID of the child process, or -1 if it failed."
    sent: "2017-03-09T10:02:30.557Z"
    editedAt: "2017-03-09T10:02:40.144Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c1282800c00c3d4fe01856"
    text: "wait, what is return value of `call`?"
    sent: "2017-03-09T10:02:16.363Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12825dd08b4b859a76d14"
    text: {On my Linux image, I have to sudo or su in order for `call` to access %/etc/passwd.}
    sent: "2017-03-09T10:02:13.553Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c1280300c00c3d4fe0166c"
    text: {```^/red>> call "echo $USER"^/== 8969^/red>> call "echo $UID"^/== 8988^/red>> call "echo $UID"^/== 8989^/red>> call "echo $UID"^/== 8990^/red>> call "echo $UID"^/== 8991^/red>> call "echo $UID"^/== 8992^/red>> call "echo $UID"^/== 8993^/red>> call "echo $UID"^/== 9022^/red>> call "echo $UID"^/== 9023^/red>> call "echo $UID"^/== 9024^/```}
    sent: "2017-03-09T10:01:39.223Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c127fe1465c46a560a0612"
    text: "oh wow"
    sent: "2017-03-09T10:01:34.460Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c127c7de50490822673798"
    text: {@dockimbel should not be an issue:^/```^/> grep 5 /etc/passwd^/sync:x:4:65534:sync:/bin:/bin/sync^/games:x:5:60:games:/usr/games:/usr/sbin/nologin^/nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin^/systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false^/_apt:x:105:65534::/nonexistent:/bin/false^/dnsmasq:x:111:65534:dnsmasq,,,:/var/lib/misc:/bin/false^/kernoops:x:115:65534:Kernel Oops Tracking Daemon,,,:/:/bin/false^/rtkit:x:118:125:RealtimeKit,,,:/proc:/bin/false^/statd:x:122:65534::/var/lib/nfs:/bin/false^/```}
    sent: "2017-03-09T10:00:39.035Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c1279e872fc8ce62d9d684"
    text: {@maximvl Your user has probably not the rights for that operation. Try launching Red using `sudo`.}
    sent: "2017-03-09T09:59:58.360Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c125fade50490822672e85"
    text: "how do I use it guys?"
    sent: "2017-03-09T09:52:58.161Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c125edde50490822672e56"
    text: {```^/red>> x: copy ""^/== ""^/red>> call/input/output {grep "5"} %/etc/passwd x^/== 1^/red>> x^/== ""^/```}
    sent: "2017-03-09T09:52:45.775Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c125c6de50490822672dc5"
    text: "I assume this is return value"
    sent: "2017-03-09T09:52:06.613Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12586de50490822672c59"
    text: "=\"
    sent: "2017-03-09T09:51:02.107Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c1258421d548df2cb1416d"
    text: {```^/red>> call/input {grep "5"} %/etc/passwd^/== 1^/```}
    sent: "2017-03-09T09:51:00.185Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c124b17ceae5376a922954"
    text: {@maximvl See the [doc](http://www.rebol.com/docs/shell.html). Only the block arguments are not supported, all the other features are there.}
    sent: "2017-03-09T09:47:29.012Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c124a9de5049082267288a"
    text: "@dockimbel :+1: "
    sent: "2017-03-09T09:47:21.286Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c124a0de5049082267281d"
    text: "nice to see help is already there"
    sent: "2017-03-09T09:47:12.865Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c1249b1465c46a5609ef1f"
    text: "ok, just downloaded a new Red :)"
    sent: "2017-03-09T09:47:07.111Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c124689eb1bd81481f3419"
    text: {`Executes a shell command to run another process.`}
    sent: "2017-03-09T09:46:16.977Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c1241f1465c46a5609ecd4"
    text: "`call` ?"
    sent: "2017-03-09T09:45:03.923Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c12416fef1d2de52aca6f0"
    text: ":+1: "
    sent: "2017-03-09T09:44:54.162Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c1240cdd08b4b859a7520d"
    text: {FYI, `call` is now integrated in the runtime library as a native. Enjoy. ;-)}
    sent: "2017-03-09T09:44:44.636Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c1155100c00c3d4fdfaa0d"
    text: {@mydoghasworms Welcome back! No specific benefit except for supporting series with more than 2B elements.}
    sent: "2017-03-09T08:41:53.623Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c110a69eb1bd81481f3136"
    text: {@mydoghasworms 64-bit version will be there after Red will be self-hosted.}
    sent: "2017-03-09T08:21:58.353Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c10e391465c46a56095aea"
    text: {Thanks Gregg. Is there any benefit for Red itself to support 64-bit or will it remain 32-bit for the foreseeable future?}
    sent: "2017-03-09T08:11:37.202Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "58c10d64872fc8ce62d92d70"
    text: "Nice to see you again. No 64-bit yet."
    sent: "2017-03-09T08:08:04.518Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c104a8e961e53c7fbe2e64"
    text: {Hi guys, I have been absent from this community for a long time, so I feel a bit like a prodigal son showing up here, but I wanted to ask: are there 64-bit builds for Red as well? Reason I am asking is that I want to build a Ruby to Red bridge via Ruby FFI, and using the available build it obviously works for the Ruby 32-bit version, but not for 64-bit.}
    sent: "2017-03-09T07:30:48.871Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "58c10450de5049082266528b"
    text: "@nc-x Me too"
    sent: "2017-03-09T07:29:20.196Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "58c00479de50490822601406"
    text: {@dockimbel @qtxie The latest red automated build gives this error when run on windows ^/```^/λ red^/*** Driver Internal Error: Script Error : gui-sys-call expected args argument of type: string^/*** Where: run-console^/*** Near:  [gui-sys-call exe file]^/```^/`red --cli` works fine.^/^/It seems the gui-console is requiring an argument to be passed to it always, as it works when `red test.red` is done.}
    sent: "2017-03-08T13:17:45.823Z"
    editedAt: "2017-03-08T13:22:19.276Z"
    v: 4
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58c002684150746b1516169a"
    text: "(I haven’t tested it yet)"
    sent: "2017-03-08T13:08:56.193Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c0025d4150746b15161697"
    text: {@lpvm I think you do not have to wait anymore, this [commit](https://github.com/red/red/commit/485d57b98c3c9e320e30a76db6f6c9db967eb99c) should fix it :)}
    sent: "2017-03-08T13:08:45.379Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c002147ceae5376a8a7b63"
    text: {@rebolek Thank you for all.  I'll wait for the correction, no problem, I'm here for the long-term ;-)}
    sent: "2017-03-08T13:07:32.253Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bfb636de504908225e5b4e"
    text: "@geekyi Thanks! That's very useful."
    sent: "2017-03-08T07:43:50.339Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58bfa67dfef1d2de52ac89ef"
    text: "@lpvm https://github.com/red/red/issues/2470"
    sent: "2017-03-08T06:36:45.086Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bf9ce64150746b1516102a"
    text: "Nice, now I crashed Red."
    sent: "2017-03-08T05:55:50.449Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bf9c33567b0fc8138faa20"
    text: {@lpvm There is strange `compose` related problem that I can reproduce only on Linux so far. I know where it happens, but I haven't been able to isolate it yet.}
    sent: "2017-03-08T05:52:51.290Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bf860a7ceae5376a87d167"
    text: "Agreed. A refactor too far."
    sent: "2017-03-08T04:18:18.699Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf84fbde504908225d76a1"
    text: {There is definitely a balance between brevity and clarity... I just do not know what that is(nor does anyone else since it is subjective)}
    sent: "2017-03-08T04:13:47.930Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
)#(
    id: "58bf84be00c00c3d4fd591bd"
    text: {My old R2 n-queens response to a challenge was, perhaps, intentionally contrary. It returned the answer as instructions for a human to follow. Not concise at all, but still correct. :^^)}
    sent: "2017-03-08T04:12:46.861Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf84bdf1a33b6275948bc8"
    text: {In other news Firefox 52 was released with webassembly support, it came a lot sooner than I thought it would...}
    sent: "2017-03-08T04:12:45.707Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58bf84037ceae5376a87c881"
    text: {Not sure. It may be that you can't create a language based on fewer, simpler primitives. Forth can be very concise, and J or other APL-like languages are...dense. I haven't used J for real, so can't fairly say what it reads like to an expert. For me, as an outsider, it's very hard to read. J gurus may see the most transparent expression of a clear and elegant solution, where I see line noise. :^^\}
    sent: "2017-03-08T04:09:39.021Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf6f8c1465c46a56ff3732"
    text: {@greggirwin well, theoretically nothing can be as concise as a language that follows the lisp heritage such as red, one just has to be willing to create that concision}
    sent: "2017-03-08T02:42:20.609Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58bf66c3de504908225ceba6"
    text: {> Try to write an n-queens example in J and Red. I am curious if Red is similarly concise.^/^/We would need to write a dialect. J, while described as a GPL, is really targeted at a set of needs and users. Certainly, many of us love a good round of code golf at times (see: Rebmu), but Red's use of special characters in the lexicon means it will probably never be as concise as languages that...use them like J does. ^/}
    sent: "2017-03-08T02:04:51.442Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf5ea721d548df2ca64c96"
    text: "I stil need to grasp to code too, but yes"
    sent: "2017-03-08T01:30:15.662Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf5e65e961e53c7fb410ce"
    text: {It took me quite a while to understand how https://github.com/arcfide/Co-dfns was organized. In alphabetical order I suppose?}
    sent: "2017-03-08T01:29:09.094Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf5e2b1465c46a56fedc1d"
    text: "Agree"
    sent: "2017-03-08T01:28:11.546Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf5def21d548df2ca645e0"
    text: {I don't think you need extreme performance in the first step}
    sent: "2017-03-08T01:27:11.124Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf5dc6de504908225cbe6b"
    text: "That's an alternative"
    sent: "2017-03-08T01:26:30.823Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf5bd71465c46a56fed100"
    text: "Probably where the PEG shines "
    sent: "2017-03-08T01:18:15.905Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf5bba00c00c3d4fd4cffa"
    text: {How about using Shaders for computation? That would be vendor neutral (I think) and need no other deps. That could already be done without Array Fire, however you still need a dynamic scheduler that is generated via a solver to balance CPU, GPU and IPC tasks.}
    sent: "2017-03-08T01:17:46.852Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf5a9700c00c3d4fd4cb61"
    text: {I am all ears on any possible way of adding this to Red without an external library. But I think what I mentioned earlier with osv.io.. ie. exposing a low level API to the kernel via it's hypervisor is the only way I can imagine to getting GPU access without being driver dependant }
    sent: "2017-03-08T01:12:55.401Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf5985e961e53c7fb3f91e"
    text: {@geekyi yes it does, as I mentioned earlier CUDA is nice if all you ever want is just support for recent NVIDIA GPUs. Otherwise there is no way around ArrayFire, because it gives you CPU, GPU support and optimized math kernel libraries ontop.  }
    sent: "2017-03-08T01:08:21.240Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf581e21d548df2ca624e5"
    text: {And apex is interesting too, but I'm not sure if it would work on windows..}
    sent: "2017-03-08T01:02:22.625Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf57e921d548df2ca623c8"
    text: {Co-dfns uses Arrayfire? It looks to be a not so small dependency..}
    sent: "2017-03-08T01:01:29.238Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf56b821d548df2ca61ed5"
    text: {Indeed, just hit the description there is a link to an AMA and github}
    sent: "2017-03-08T00:56:24.283Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf5674e961e53c7fb3e917"
    text: "The video is *tl;dw* for me :p "
    sent: "2017-03-08T00:55:16.836Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf54c5872fc8ce62ce9675"
    text: {The coolest ist Co-dfns, but Apex really kicks ass when it comes to performance, seriously pure genius in there http://www.snakeisland.com/apexup.htm}
    sent: "2017-03-08T00:48:05.432Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf5358e961e53c7fb3da22"
    text: {I have seen weird ways to bootstrap, the weirdest but cooles is APLTAIL https://github.com/melsman/apltail}
    sent: "2017-03-08T00:42:00.983Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf529300c00c3d4fd4a360"
    text: "750 line APL compiler with GPU Support"
    sent: "2017-03-08T00:38:43.892Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf527400c00c3d4fd4a325"
    text: {@geekyi I even agree on J being needlessly complex. Here''s my favorite take on that https://m.youtube.com/watch?v=gcUWTa16Jc0}
    sent: "2017-03-08T00:38:12.182Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf51b6de504908225c876e"
    text: {Red is missing quite a lot of functional combinators, so you have to wait or write yourself *hint hint*}
    sent: "2017-03-08T00:35:02.534Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf513521d548df2ca6066e"
    text: {That makes sense, but I don't know the Red synthax.. didn't click for me yet. Although I've read every line in the whole sourcecode rigorously and get it. Try to write an n-queens example in J and Red. I am curious if Red is similarly concise.}
    sent: "2017-03-08T00:32:53.361Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf50e7de504908225c851d"
    text: {Except the semantics of function composition doesn't easily map over.. Needless complex in J, imho}
    sent: "2017-03-08T00:31:35.100Z"
    editedAt: "2017-03-08T00:32:15.751Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf50a300c00c3d4fd499d7"
    text: "Something like `do-j [ + / % #  ] [ data ]`"
    sent: "2017-03-08T00:30:27.012Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf504400c00c3d4fd497b8"
    text: {The fastest way forward right now may be implementing the whole of `j` primitives as a dialect (your axioms) for the frontend (to get an array manipulation functions), and perhaps interface in red/system to one of the mentioned backends}
    sent: "2017-03-08T00:28:52.994Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf50237ceae5376a86d819"
    text: {I am just incredibly curious 🙈 J already allows access to LAPACK however I prefer to have a full stack language and compiled output, even though interpreted J is most often faster than other languages}
    sent: "2017-03-08T00:28:19.591Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf4f277ceae5376a86d354"
    text: {@X4 you mention `J` and  `neural networks` :point_up: [March 7, 2017 7:17 AM](https://gitter.im/red/red?at=58be1848872fc8ce62c6e43c)  :point_up: [March 7, 2017 7:42 AM](https://gitter.im/red/red?at=58be1e1c21d548df2c9ea3bb) . What's wrong with your existing tools? :p (just curious, what can't you do, that you think you can do with red?)}
    sent: "2017-03-08T00:24:07.193Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf4d9b00c00c3d4fd48a97"
    text: {@X4 and others. If you find any framework or app missing, you can always check to see if there is a rebol version of it. Same for documentation}
    sent: "2017-03-08T00:17:31.376Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf4d4c872fc8ce62ce72bb"
    text: {:point_up: [March 6, 2017 1:25 AM](https://gitter.im/red/red?at=58bc744100c00c3d4fc35a4b) @dander build time last I checked. `system/build/config/build-basename` is more helpful as it has the commit hash}
    sent: "2017-03-08T00:16:12.804Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bf0ac17ceae5376a853129"
    text: {@X4, Nenad wrote an excellent MySQL driver for R2 many years ago, so that will surely come.}
    sent: "2017-03-07T19:32:17.195Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf068f872fc8ce62cca0c9"
    text: "Likewise. Have a nice dinner."
    sent: "2017-03-07T19:14:23.761Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf06777ceae5376a851101"
    text: {Highly appreciate the pleasant conversation with you @greggirwin =) Going for dinner, have a nice day btw.  :+1: }
    sent: "2017-03-07T19:13:59.247Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf066621d548df2ca439e1"
    text: "Well, we can't do everything. :^^)"
    sent: "2017-03-07T19:13:42.068Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf06407ceae5376a85101e"
    text: {I see.. there is sooo much to do :) Go's Approach is this: https://github.com/Go-SQL-Driver/MySQL/ }
    sent: "2017-03-07T19:13:04.889Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf054900c00c3d4fd2d129"
    text: {No SQL in Red at this time. Drivers will be DB dependent, but we could have a SQL dialect that they share, to help prevent injection attacks and such.}
    sent: "2017-03-07T19:08:57.965Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf03751465c46a56fcb86a"
    text: {basically is there jet another sql driver bridge or did you implement the whole driver in red?}
    sent: "2017-03-07T19:01:09.936Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf03401465c46a56fcb562"
    text: "How do you make SQL queries in Red? "
    sent: "2017-03-07T19:00:16.271Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf030f1465c46a56fcb3f8"
    text: "I'll try to make time to read more about OSv.io. "
    sent: "2017-03-07T18:59:27.717Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf0266872fc8ce62cc8039"
    text: {Right now FullStack has their targets and goals. As new ideas come up, they either need to align with those directly, or someone has to take the lead on them.}
    sent: "2017-03-07T18:56:38.696Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf01fdde504908225aa7a3"
    text: {But Red already shows that it's possible. It emits machine code for all target platforms directly. And that's with Rebol as the foundation. When Nenad can do v2 of the compiler, using Red itself, using all he's learned so far, it will be even better.}
    sent: "2017-03-07T18:54:53.157Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf01f2de504908225aa763"
    text: {That's why I thought going the osv.io route or copying it might help a lot on the way. No more driver dependencies and a solid API to all external hardware (regardless if virtual or physical)}
    sent: "2017-03-07T18:54:42.716Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf01b0de504908225aa3d2"
    text: {I would love for Red to be Red all the way down. It's just a matter of resources, as you note the effort for building it all ourselves. }
    sent: "2017-03-07T18:53:36.108Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf017e872fc8ce62cc7abd"
    text: {Everything is a tradeoff. If libs offer a lot of value, we should absolutely use them. Doesn't mean they should be a standard dependency though, if they are specialized. It sounds like you're the expert here on CUDA, so you know best what the options are. }
    sent: "2017-03-07T18:52:46.754Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf01211465c46a56fca163"
    text: {I fully agree, that's why Red's way of doing it, should be dependency free and self-hosting like everything else}
    sent: "2017-03-07T18:51:13.460Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf00fb21d548df2ca40abc"
    text: {I don't think we can just do it like others do. It would work, of course, but would not leverage Red's abilities. We need to learn from them, but not necessarily emulate them. }
    sent: "2017-03-07T18:50:34.995Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bf00f600c00c3d4fd2aef6"
    text: {You were recommending CUDA libraries, that would add dependency bloat, no? I think accessing underlying hardware for compute tasks is the hardest nut to crack, because it's so immensly driver dependent.}
    sent: "2017-03-07T18:50:30.130Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bf0091e961e53c7fb1d21d"
    text: {I can only speak for myself of course. In larger environs, where you have a lot of tools in your stack, it will differ. And whether you roll your own. We use CouchDB for some things, and there wasn't an R2 lib for it, so I wrote one. As the ecosystem grows, we'll learn how best to architect systems.}
    sent: "2017-03-07T18:48:49.951Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58befebef1a33b627591ca6f"
    text: {I hadn't seen OSv, but thought SmartOS had a lot going for it a couple years ago when I looked at it. The downside was that you really want to have Solaris experience to move to it. Maybe they've hidden more details now, but we still have to manage a stack of technologies. I'm not a fan of containers. With Red, you can often avoid dependency bloat, so containers don't offer much, and are just added weight themselves. }
    sent: "2017-03-07T18:41:02.943Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58bef4da872fc8ce62cc22a9"
    text: {@X4 I am not really familiar with those technologies but that stuff looks neat}
    sent: "2017-03-07T17:58:50.755Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58bef4bb4150746b15160223"
    text: {@lpvm reproduced, I will take a look at it, thanks.}
    sent: "2017-03-07T17:58:19.748Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bef1a4e961e53c7fb16be1"
    text: {That would end up similar to something like http://smartos.org (just thinking out loud). I know this is far fetched, but a good and future proof way of evolving as os independent red apps }
    sent: "2017-03-07T17:45:08.806Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bef0fb21d548df2ca3a46e"
    text: {That would allow red apps to run without an os ontop of a lightweight Hypervisor that exposes your favorite Kernel's APIs}
    sent: "2017-03-07T17:42:19.500Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bef0b57ceae5376a8476c5"
    text: {I think such a sandboxed deployment model is better, but due to the osv license I think a reimplementation would be better. }
    sent: "2017-03-07T17:41:09.074Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bef0547ceae5376a8474a5"
    text: {If you put a red executable into an http://OSv.io container it can run ontop of that hypervisor and access low-level kernel APIs.}
    sent: "2017-03-07T17:39:32.655Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58bef039de504908225a311f"
    text: {That is true, AMD can't beat the NV marketing, so they gave up and offer this converter. I would still not endorse CUDA, except you've personal experience with it. It has a cumbersome not well thought out API which surely will break a few times in the future. }
    sent: "2017-03-07T17:39:05.698Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58beef6021d548df2ca397f6"
    text: {@X4  amd is making a cuda->compile-everywhere conversion tool: https://github.com/GPUOpen-ProfessionalCompute-Tools/HIP}
    sent: "2017-03-07T17:35:28.399Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58beeeb8e961e53c7fb1576d"
    text: {@JacobGood1 Yes, but I hardly trust NVidia and adding such limited graphics support would be unwise. ArrayFire.com is much more suited for any GPU model and also supports the CPU while being faster than Intel's MKL. It works with CUDA too. But to be honest I believe that at this point the language evolves to a mini-kernel. So why not just directly access already existing bindings, or virtualize driver access.}
    sent: "2017-03-07T17:32:40.490Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58beed25de504908225a1c72"
    text: {@X4 have you thought about writing a dialect that compiles to Cuda, gets compiled by the Cuda compiler into a dll, then is connected to through red system, and finally consumed in Red?}
    sent: "2017-03-07T17:25:57.099Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58beeae900c00c3d4fd2178f"
    text: {I think this is still years ahead... Crystal on the other hand somehow flourishes and evolves much faster. But there are rarely such geniuses like red author unfortunately..}
    sent: "2017-03-07T17:16:25.168Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58beea7f00c00c3d4fd21426"
    text: {@greggirwin Yes indeed. I am mostly looking for usage of Red for numeric processing on either CPU and/or GPU. NumRed is a cool and descriptive name, R(ed)PL might be even catchier for APLers.}
    sent: "2017-03-07T17:14:39.172Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58beea55567b0fc8138f9c3a"
    text: {Ok, I will try it and let you know. Browser should have no influence on Gritter’s behavior.}
    sent: "2017-03-07T17:13:57.446Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58beea107ceae5376a84493c"
    text: "bbl"
    sent: "2017-03-07T17:12:48.120Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58beea08f1a33b6275914299"
    text: {I was logged in browser, logged out, but it's the same Bad Request under Linux version}
    sent: "2017-03-07T17:12:40.872Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bee9bdfef1d2de52ac78b2"
    text: "Hm, I will try on Linux, thanks for info."
    sent: "2017-03-07T17:11:25.454Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bee9a921d548df2ca36cdc"
    text: {red>> rooms: user-rooms user/id^/== #(^/    error: "Bad Request"}
    sent: "2017-03-07T17:11:05.648Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bee9a400c00c3d4fd20e5d"
    text: "under Linux, was able to get user-info but then"
    sent: "2017-03-07T17:11:00.626Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bee989de504908225a04a1"
    text: {With windows version under wine in Linux it gives me red>> user: user-info^/*** Access Error: cannot connect: https://api.gitter.im/v1/user reason: timeout^/*** Where: write}
    sent: "2017-03-07T17:10:33.030Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bee97f567b0fc8138f9c1f"
    text: "Do you have some troubles running it?"
    sent: "2017-03-07T17:10:23.681Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bee96bfef1d2de52ac78ad"
    text: "OS X."
    sent: "2017-03-07T17:10:03.090Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bee968fef1d2de52ac78ab"
    text: {I guess it should work with latest version, I will check it.}
    sent: "2017-03-07T17:10:00.960Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bee96221d548df2ca36aca"
    text: "Windows version? Linux?"
    sent: "2017-03-07T17:09:54.324Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bee953fef1d2de52ac78a9"
    text: "It is custom build from 28. January."
    sent: "2017-03-07T17:09:39.437Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bee928e961e53c7fb12e3f"
    text: "Do you use this with which version of Red?"
    sent: "2017-03-07T17:08:56.598Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bee912872fc8ce62cbcea3"
    text: {@rebolek ^/^/```^/red>> do %gitter-tools.red^/red>> token: <your-token>^/red>> user: user-info^/red>> rooms: user-rooms user/id^/red>> room: select-room rooms "red/red" ; or other room, see ROOMS for list of your rooms^/red>> download-all-messages room/id^/```^/Messages will be downloaded to file `%messages.red`. It will take some time, this room takes around 23MB.}
    sent: "2017-03-07T17:08:34.333Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58beb77dde50490822589280"
    text: {If any of you likes math this debate is neat... it challenges the idea of axioms in mathematics: https://www.youtube.com/watch?v=WabHm1QWVCA^/Of course, this is the red channel, soooo... \back-on-topic}
    sent: "2017-03-07T13:37:01.468Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58beb4a000c00c3d4fd07e00"
    text: {I just want to know what an optimized "axiomatic" routine is...}
    sent: "2017-03-07T13:24:48.930Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be34afe961e53c7facb4c8"
    text: {@X4, we can certainly write an array-language dialect, and if those libs have an API that can be called from Red/System, they could be integrated. It needs a champion, as our resources are limited. Whether "optimized mathematical axiomatic routines should be a core feature of every programming language" comes down to tradeoffs. I haven't needed them in my work, and every feature has a cost. As we fight to keep things simple, we have to be open to the most important new features we don't have yet, without including everything. Since Red can be compiled, it will be possible to build a version of Red (NumRed) that does all that, while the general purpose version doesn't. Then we have to fight to keep from proliferating versions. :^^)}
    sent: "2017-03-07T04:18:55.793Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58be28c4872fc8ce62c72b29"
    text: "Both are faster than Intel's MKL"
    sent: "2017-03-07T03:28:04.846Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58be28af7ceae5376a7fa12f"
    text: {A more lightweight library can be found here, albeit that gives you just CPU optimized primitives https://bitbucket.org/MDukhan/yeppp/}
    sent: "2017-03-07T03:27:43.897Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58be21ea00c00c3d4fcd334f"
    text: {If you used ArrayFire, you could immediately go fast now. https://arrayfire.com/why-arrayfire/ }
    sent: "2017-03-07T02:58:50.119Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58be21cfe961e53c7fac5f3f"
    text: {I mainly do large, complex computations and transformations which usually blows code-size up immensely, with mostly boilerplate code, that you can reduce by making most of the code a black-box for new-comers. That's why I find a terse and concise language (like APL/J) very highly favorable over a verbose and celebratory one. Because I'd like implement neural networks without external dependencies. Everyone in Pythonland uses numpy and many ignorantly don't even consider that as a dependency anymore. I think optimized mathematical axiomatic routines should be a core feature of every programming language. }
    sent: "2017-03-07T02:58:23.275Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58be210a00c00c3d4fcd2fbb"
    text: "@gltewalt Thanks."
    sent: "2017-03-07T02:55:06.318Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58be20c37ceae5376a7f7f77"
    text: "@PeterWAWood You're a good writer. "
    sent: "2017-03-07T02:53:55.135Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be1f7a21d548df2c9ea949"
    text: {@X4 Red is still in the Alpha stage (using a bootstrap toolchain) and there is much functionality to be implemented before its initial release. Things such as built-in GPU access are not planned for the initial release and can only be considered once the Red toolchain is self-hosted.}
    sent: "2017-03-07T02:48:26.819Z"
    editedAt: "2017-03-07T02:48:58.545Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58be1e2f1465c46a56f73fd6"
    text: {I mainly want to implement neural networks (deep-learning etc.)}
    sent: "2017-03-07T02:42:55.313Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58be1e1c21d548df2c9ea3bb"
    text: "Can I already use lapack/blas using Red?"
    sent: "2017-03-07T02:42:36.943Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58be1de321d548df2c9ea2f4"
    text: {I guess Red/System is an easier to understand example of a Red dialect with keywords. Trying to compile ```if: 1``` will result in ```*** Compilation Error: attempt to redefine a protected keyword: if ```}
    sent: "2017-03-07T02:41:39.452Z"
    editedAt: "2017-03-07T02:42:09.188Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58be1d061465c46a56f73bae"
    text: {In terms of inconsistency in the documentation, I don't think there is any inconsistency in the use of keywords. The Visual Interface Dialect document does assume the reader understands the difference between the Red language and a Red dialect.}
    sent: "2017-03-07T02:37:58.467Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58be1bffde50490822554d1a"
    text: {What many people conceptualise as keywords in Red, I think of as pre-defined words in the global context bound to Red standard functions. You can bind such a word to a different value. Unless done carefully, this has the side-effect of access to the standard function being lost.}
    sent: "2017-03-07T02:33:35.574Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58be1aedde504908225548ae"
    text: {@Greg The VID dialect (or DSL) has keywords as do most dialects. They cannot be redefined by the user and have a specific meaning. }
    sent: "2017-03-07T02:29:01.800Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58be1ae7f1a33b62758c8d03"
    text: {No, he is not right. I have two friends who are both named Will, when I say Will, come here... which Will am I referring to? Probably the one I am pointing at or gesturing towards. The documentation is using keywords in a different way according to a different context, it is fine to do that, we do it all the time when we speak.}
    sent: "2017-03-07T02:28:55.263Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be1a891465c46a56f731f4"
    text: {It doesn't matter much to me - I just think a consensus would be beneficial }
    sent: "2017-03-07T02:27:21.433Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be1a58f1a33b62758c8a99"
    text: {Yes, but he's right as long as there are docs that use Keyword}
    sent: "2017-03-07T02:26:32.046Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be1a181465c46a56f72ff5"
    text: {I read the arguments, I think that redites were trying to explain that there are no keywords in the traditional sense}
    sent: "2017-03-07T02:25:28.803Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be19d3f1a33b62758c8927"
    text: {The argument was @WildYorkies, not mine. ^/I recognize the function isn't exactly the same across languages, but there were adamant arguments that Keyword was the wrong term}
    sent: "2017-03-07T02:24:19.284Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be19a7872fc8ce62c6eb9c"
    text: {@X4 anything is possible really, where there is a will there is a way}
    sent: "2017-03-07T02:23:35.361Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be19697ceae5376a7f5ddf"
    text: {I think at this point things are too far gone in programming land, you just have to learn the lingo of every language, ecosystem, etc.. when programming in them}
    sent: "2017-03-07T02:22:33.529Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be19041465c46a56f72b88"
    text: {If I ask you to write a function in clojure or haskell, and write a function in c... does function mean the same thing in those languages?}
    sent: "2017-03-07T02:20:52.674Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
)#(
    id: "58be18b57ceae5376a7f5ad5"
    text: {I think that most people assume that context is key}
    sent: "2017-03-07T02:19:33.862Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be18a3f1a33b62758c826b"
    text: {What's the right thing to do in documentation? Inconsistency promotes confusion and arguments, no?}
    sent: "2017-03-07T02:19:15.057Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be186f1465c46a56f727e1"
    text: {Can a kind of J get implemented in System/Red that has also access to the GPU? }
    sent: "2017-03-07T02:18:23.906Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58be184a1465c46a56f72743"
    text: {Java  has fields, c++ has members, common lisp has slots, Dart has properties, Red has words... All of these things are very similar and yet quite different, however, you will hear programmers from every language using these terms interchangeably }
    sent: "2017-03-07T02:17:46.339Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be1848872fc8ce62c6e43c"
    text: {Hi :)^/What I find awesome about APL and J ist that you can have an immensly concise language that is still performing interpretation faster than an optimized and compiled C solution (most often times, but of course not always). How can we do Array-Programming in Red? What I'm most interested in is to do tensor and matrix operations on very large fields and let the compiler decide if it's run on a DSP, GPU or CPU.}
    sent: "2017-03-07T02:17:44.940Z"
    v: 1
    author: "55eb7f170fc9f982beafc78d"
) #(
    id: "58be17ddde50490822553adf"
    text: "So what to do?"
    sent: "2017-03-07T02:15:57.714Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be17d31465c46a56f72562"
    text: {There was just a big disagreement over keyword, and at least one of the Red documents uses the term. }
    sent: "2017-03-07T02:15:47.459Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be17c621d548df2c9e8760"
    text: {The odd thing about red is the whole language is super general anyway, generalization is something that just falls out everywhere}
    sent: "2017-03-07T02:15:34.049Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be174ff1a33b62758c7c89"
    text: {@gltewalt you can create all kinds of react objects right now it is not bound to vid.}
    sent: "2017-03-07T02:13:35.402Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be16ed7ceae5376a7f5404"
    text: {This is the problem with programming, too much overloaded terminology... keywords usually refer to words that are reserved and cannot be redefined.  If a programmer from another language asks what are the keywords of red, the answer invariably has to be that there are none. Thinking in terms of keywords, coming from other languages, is an incorrect way of thinking when learning red. This is why redites take the onus upon themselves to help clarify meaning when someone is new to the language and asks about keywords.}
    sent: "2017-03-07T02:11:57.049Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58be11b27ceae5376a7f3b00"
    text: {Also, the disagreement over keywords recently... the VID docs has "Keywords" in section 5}
    sent: "2017-03-07T01:49:38.313Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be112521d548df2c9e6e13"
    text: "the react word only in vid, currently?"
    sent: "2017-03-07T01:47:17.492Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be0f59f1a33b62758c5911"
    text: {Maybe I misread it?^/^/""""^/Last release introduced, for the first time in the Rebol world, a reactive programming framework, as a part of the GUI engine. While working on improving it, we realized that it could actually be easily generalized beyond GUIs, with just minor changes to its design and implementation.^/""""}
    sent: "2017-03-07T01:39:37.227Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58be0e64872fc8ce62c6baa9"
    text: {@gltewalt isn't it already generalized? http://www.red-lang.org/2016/06/061-reactive-programming.html}
    sent: "2017-03-07T01:35:32.762Z"
    editedAt: "2017-03-07T01:35:47.217Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58be0d6d1465c46a56f6f4e8"
    text: {The time might be NOW to start generalizing react. It could be nice in network programming and system scripting. }
    sent: "2017-03-07T01:31:25.177Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58bdfc1de961e53c7fabae00"
    text: {Thanks Gregg. Implementing APIs is not that hard, it just takes time. Well, not OAuth2. That beast scares me to death.}
    sent: "2017-03-07T00:17:33.510Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bda6d9f1a33b627589d309"
    text: {We'll make things better, but you already show how we can do it today. }
    sent: "2017-03-06T18:13:45.620Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bd93649eb1bd81481ee83b"
    text: {Sockets would be cool, it would make talking to Redis much easier and much much faster than using `call` as I do now.}
    sent: "2017-03-06T16:50:44.627Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bd9333567b0fc8138f7eef"
    text: ":)"
    sent: "2017-03-06T16:49:55.141Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bd9328e961e53c7fa8de05"
    text: {it was surprisingly easy to just insert 9p specs into program and parse them, much easier than I did in lisp in the past}
    sent: "2017-03-06T16:49:44.518Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd92a0e961e53c7fa8db3c"
    text: {it's too limited, I'm working on 9p implementation for Red (writing in Rebol now) and without sockets it's not fun at all :D}
    sent: "2017-03-06T16:47:28.717Z"
    editedAt: "2017-03-06T16:48:13.915Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd923a4150746b1515e3d2"
    text: {OTOH with current limited I/O lot of things is possible already}
    sent: "2017-03-06T16:45:46.245Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bd9222567b0fc8138f7ec3"
    text: "wait for 0.7"
    sent: "2017-03-06T16:45:22.070Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bd91f17ceae5376a7bde3e"
    text: {@maximvl is not urging anything, but we need sockets so badly}
    status: true
    sent: "2017-03-06T16:44:33.282Z"
    editedAt: "2017-03-06T16:44:39.349Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd91bcde50490822520d5c"
    text: "@rebolek nice, well done"
    sent: "2017-03-06T16:43:40.454Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd80c7fef1d2de52ac5922"
    text: {@maximvl yes, exactly: https://developer.github.com/v3/}
    sent: "2017-03-06T15:31:19.012Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bd7e0fde50490822517e42"
    text: {@rebolek do you use some kind of commit rest api on github?}
    sent: "2017-03-06T15:19:43.387Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd7dd721d548df2c9a8107"
    text: "@rebolek no local git used? O_o"
    sent: "2017-03-06T15:18:47.751Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd7d5c9eb1bd81481ee59b"
    text: "@WiseGenius thanks!"
    sent: "2017-03-06T15:16:44.213Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bd7b3cf1a33b627588975a"
    text: "@rebolek Nice!"
    sent: "2017-03-06T15:07:40.792Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bd788e4150746b1515df51"
    text: {This commit https://github.com/rebolek/try_git/commit/6ff58e098050a0da61582386ac448aec58de95c6 may not look very interesting, but it was done with this line using GitHub API (no local Git used):^/```^/github/commit 'rebolek/try_git %README.md "Commit from Red"^/```}
    sent: "2017-03-06T14:56:14.235Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bd54b1f1a33b62758798ff"
    text: {Perhaps functions like `pick` could have a refinement so that they would error when out of bounds, etc.?}
    sent: "2017-03-06T12:23:13.457Z"
    editedAt: "2017-03-06T12:23:51.590Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bd54611465c46a56f1e1be"
    text: "or this"
    sent: "2017-03-06T12:21:53.744Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd544cde50490822506c53"
    text: {@maximvl You would need a whole new set of datatypes to cover all series, an alternative set of accessors would be simpler.}
    sent: "2017-03-06T12:21:32.943Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58bd53e721d548df2c9951ee"
    text: {interesting, maybe it even makes sense to have separate block type which raises errors on out-of-bound access,}
    sent: "2017-03-06T12:19:51.831Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd532521d548df2c994d50"
    text: {@maximvl About `none` as value-in-block vs `none` as result of an out-of-bound access, Red inherits from a change done in Rebol [a decade ago](http://www.rebol.net/cgi-bin/r3blog.r?view=0008). I still have mixed feelings about that, as I think some ordinal accessors raising an error in such case would still be useful, and not just for beginners.}
    sent: "2017-03-06T12:16:37.828Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58bd47b3fef1d2de52ac50fd"
    text: "`$` is probably reserved for `money!` type"
    sent: "2017-03-06T11:27:47.157Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bd45ae872fc8ce62c15de1"
    text: {`$` breaks reader for some reason:^/```^/red>> [echo $?]^/*** Syntax Error: missing #"]" at "$?]"^/*** Where: do^/```}
    sent: "2017-03-06T11:19:10.398Z"
    editedAt: "2017-03-06T11:19:38.572Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd42d3e961e53c7fa6b8b3"
    text: {Extending `value?` was just a casual suggestion for the convenience of checking using a single `path!` value. There may be a more appropriate `word!` for this. Otherwise it doesn't matter as we already have `find`.}
    sent: "2017-03-06T11:06:59.926Z"
    editedAt: "2017-03-06T11:16:36.943Z"
    v: 3
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bd40b000c00c3d4fc75d3e"
    text: {@maximvl I just remembered `find` can be used directly on `map!`s:^/```lisp^/red>> find m 'b^/== true^/red>> find m 'c^/== none^/```}
    sent: "2017-03-06T10:57:52.183Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bd3f69872fc8ce62c1392f"
    text: {@WiseGenius also, I think more efficient version could use details of internal implementation}
    sent: "2017-03-06T10:52:25.399Z"
    editedAt: "2017-03-06T10:52:43.843Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd3ef84150746b1515d7df"
    text: {Hm, my console just hanged up again. This is strange problem, It is impossible to reproduce, happens randomly after some hours of use and only way to recover is to close the console, CTRL+C does nothing.}
    sent: "2017-03-06T10:50:32.762Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58bd3eddf1a33b6275871c84"
    text: "yes"
    sent: "2017-03-06T10:50:05.561Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd3ed000c00c3d4fc75349"
    text: {I demonstrated one above:^/> However, even if `value?` weren't extended, one could always achieve the same result with:^/```lisp^/red>> to logic! find keys-of m 'b^/== true^/red>> to logic! find keys-of m 'c^/== false^/```}
    sent: "2017-03-06T10:49:52.059Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bd3e7f1465c46a56f15a3d"
    text: "I'm trying to think about similar check for maps"
    sent: "2017-03-06T10:48:31.269Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd3e2be961e53c7fa699d0"
    text: {@maximvl ^/```lisp^/red>> a: [none]^/== [none]^/red>> 1 <= length? a^/== true^/red>> 2 <= length? a^/== false^/```}
    sent: "2017-03-06T10:47:07.917Z"
    editedAt: "2017-03-06T10:48:49.293Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bd3d2c872fc8ce62c12d47"
    text: "was there a need for such check in Rebol at all?"
    sent: "2017-03-06T10:42:52.559Z"
    editedAt: "2017-03-06T10:42:58.309Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd3cfb7ceae5376a799576"
    text: {@dockimbel ^/```^/red>> a: [none]^/== [none]^/red>> a/1^/== none^/red>> a/2^/== none^/```}
    sent: "2017-03-06T10:42:03.415Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd3cbef1a33b6275870f7b"
    text: {@maximvl  What does `block has a value` mean? Do you mean: is it `empty?` or not?}
    sent: "2017-03-06T10:41:02.160Z"
    editedAt: "2017-03-06T10:41:20.349Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58bd3c50de504908224fe0ae"
    text: {or is this important at all? seems like a lot of functions return `none` which can be both result and absence of result}
    sent: "2017-03-06T10:39:12.359Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58bd3bb51465c46a56f148af"
    text: {@dockimbel what was the way to check if block has a value or not in Rebol?}
    sent: "2017-03-06T10:36:37.679Z"
    editedAt: "2017-03-06T10:36:47.974Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd3aa521d548df2c98b79b"
    text: {@maximvl ^/```lisp^/red>> a: []^/== []^/red>> a/1^/== none^/red>> value? none^/== true^/```}
    sent: "2017-03-06T10:32:05.255Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58bd3a0ee961e53c7fa67dc1"
    text: {following this logic blocks are not contexts either, and `value?` doesn't work with them}
    sent: "2017-03-06T10:29:34.505Z"
    editedAt: "2017-03-06T10:29:49.843Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd39cd7ceae5376a798297"
    text: {whoops^/```^/red>> a: []^/== []^/red>> value? a^/== true^/red>> value? a/1^/== true^/red>> value? a/2^/== true^/```}
    sent: "2017-03-06T10:28:29.172Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd397b21d548df2c98b040"
    text: {`Returns TRUE if the word has a value.` A word has a value in a context, maps are not contexts, they rely on keys which are not necessarily words.}
    sent: "2017-03-06T10:27:07.152Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58bd3057872fc8ce62c0ddd0"
    text: {and I'm still not sure if we need all three: hashes, maps and objects}
    sent: "2017-03-06T09:48:07.513Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd2fcb00c00c3d4fc6f7e9"
    text: {>To check the difference between keys with none! values and non-existent keys, I suggest extending value?^/^/I agree, `value?` works with `unset` and `none` in the same way, even description makes sense: `Returns TRUE if the word has a value.`}
    sent: "2017-03-06T09:45:47.105Z"
    editedAt: "2017-03-06T09:45:59.906Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bd1581e961e53c7fa5a793"
    text: {@dockimbel Why was [#2201](https://github.com/red/red/issues/2201) recently labeled as `type.wish`? Is it no longer considered a bug? Which part of it is being considered as a wish?}
    sent: "2017-03-06T07:53:37.255Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bd15287ceae5376a78a0d8"
    text: {Can an `unset!` “value” be used as a key? I vote “no”. Currently it can, but I that's a bug ([#2201](https://github.com/red/red/issues/2201)).}
    sent: "2017-03-06T07:52:08.800Z"
    editedAt: "2017-03-06T07:53:13.748Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bd151f7ceae5376a78a0b5"
    text: {Can a `none!` value be used as a key? I vote “yes” until I hear the first good argument against it. Currently it already can.}
    sent: "2017-03-06T07:51:59.524Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bd12c8de504908224ef7fe"
    text: {@dockimbel [Your “proposition for maps”](https://gitter.im/red/red?at=5831968db563b5516c41e69b) would definitely work, providing the following details were implied:^/^/**1. Literal maps could contain `none!` values**^/Eg:^/```lisp^/red>> m: #(a 1 b #[none])^/== #(^/    a: 1^/    b: none^/)^/red>> mold/all m^/== {#(^^/    a: 1^^/    b: #[none]^^/)}^/```^/^/This is because:^/ 1. Otherwise, `load`ing a `save/all` or `mold/all`d map would be lossy.^/ 2. Otherwise, one couldn't construct all maps in one pass.^/ 3. I see no reason for the key to be discarded in this case, as there is no reason for a user to bother including `#[none]` in the construction if the key was unwanted.^/ 4. This is analogous to `/case` currently working in `m: #(a 1 A 2)` to keep both keys, which I assume is for similar reasons.^/^/I suppose this would also be the case for `m: make map! [a: 1 b: #[none]]`^/^/However, I don't know about the following statement:^/^/> “Moreover, LOADing a serialized map would reduce the none word if present as value.”^/^/You may have to give an example, but if this means what I think it does, I'm not sure that it would be necessary, and may be confusing (since other values aren't reduced) and even unwanted (especially if a word were intended).^/Is there a good reason for this part of the suggestion that I'm missing here? Otherwise, it seems to me that it's just for a small convenience which would be better met by `none` having it's own default literal form, and thus solving the problem everywhere. I was previously liking `_` for this, but I'm currently hoping for something less likely to be used in words. Maybe `\`. Anyway, that's for a different discussion.^/^/**2. Both keys with `none!` values and non-existent keys would return `none`**^/I think this is kind of obvious, but I'll make it explicit just in case. Eg:^/```lisp^/red>> m^/== #(^/    a: 1^/    b: none^/)^/red>> m/a^/== 1^/red>> m/b^/== none^/red>> m/c^/== none^/```^/^/To check the difference between keys with `none!` values and non-existent keys, I suggest extending `value?`. Eg:^/```lisp^/red>> value? 'm/b^/== true^/red>> value? 'm/c^/== false^/```^/This would also extend to objects. Eg:^/```lisp^/red>> o: make object! [a: 1 b: none]^/== make object! [^/    a: 1^/    b: none^/]^/red>> value? 'o/b^/== true^/red>> value? 'o/c^/== false^/```^/Currently, that last line returns:^/```lisp^/== true^/```^/However, even if `value?` weren't extended, one could always achieve the same result with:^/```lisp^/red>> to logic! find keys-of m 'b^/== true^/red>> to logic! find keys-of m 'c^/== false^/```^/^/**3. `set`ting a key to `none` without using `/any` still removes keys, even if their value was already `none`**^/Again, this seems obvious to me, but I just wanted to clarify. Eg:^/```lisp^/red>> m^/== #(^/    a: 1^/    b: none^/)^/red>> set 'm/b none^/== none^/red>> m^/== #(^/    a: 1^/)^/```^/^/When you said:^/> “It would also be safe to re-use unset on map keys, as an additional way to remove keys”^/^/I assume you meant `unset 'm/a` as you'd already mentioned just above it, and not `m/a: ()` as in my original proposal. As I see it, neither would be necessary, but the former may be desired.^/However, `unset` may also be expected to work on objects. Eg:^/```lisp^/red>> o^/== make object! [^/    a: 1^/    b: none^/]^/red>> unset 'o/b^/red>> o^/== make object! [^/    a: 1^/]^/```^/Should it be possible to remove a word from an object? Is it already possible and I've missed how?^/^/Anything I've missed or misunderstood?}
    sent: "2017-03-06T07:42:00.327Z"
    editedAt: "2017-03-06T07:43:44.403Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58bcceb4f1a33b627584e67d"
    text: {@dander I suspect an issue with our build server, maybe a silently failing `git pull` would not update to the latest version, generating a build with newer timestamp, but older code...}
    sent: "2017-03-06T02:51:32.879Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58bcc62f7ceae5376a77230d"
    text: "They are part of a language grammar."
    sent: "2017-03-06T02:15:11.020Z"
    editedAt: "2017-03-06T02:17:26.605Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bcc6171465c46a56eeeae6"
    text: {As Maxim says, that's not the accepted definition. We can call them built-ins, or something else. A keyword/reserved word in a language is one you can't change. }
    sent: "2017-03-06T02:14:47.881Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bcc5d41465c46a56eee9fa"
    text: {> To me, if a word comes built in with a value attached, it's a keyword. }
    sent: "2017-03-06T02:13:40.694Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bcaec2e961e53c7fa3d559"
    text: {The special words (out of the box) are react and is^/There's an entry about react on redlang}
    sent: "2017-03-06T00:35:14.871Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58bca4ff872fc8ce62be3d27"
    text: {terminology is very important, starting talking about things be sure you explained your own versions of words :D}
    sent: "2017-03-05T23:53:35.287Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca459de504908224d0af9"
    text: "this is what i'm talking about"
    sent: "2017-03-05T23:50:49.900Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca4521465c46a56ee4fad"
    text: {>By contrast, names in a standard library but not built into the language are not considered reserved words or keywords.}
    sent: "2017-03-05T23:50:42.336Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca438f1a33b62758437c3"
    text: "https://en.wikipedia.org/wiki/Reserved_word"
    sent: "2017-03-05T23:50:16.861Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca406e961e53c7fa3a3e7"
    text: "ok, lets take step back"
    sent: "2017-03-05T23:49:26.277Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca3f5de504908224d091e"
    text: "lol what?"
    sent: "2017-03-05T23:49:09.616Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca3e421d548df2c95b9f1"
    text: "jesus... you have a bad day?"
    sent: "2017-03-05T23:48:52.936Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58bca3dcde504908224d08fc"
    text: "2. in JS `if` does not return any value"
    sent: "2017-03-05T23:48:44.949Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca3d8de504908224d08f1"
    text: {@maximvl I'm talking about red and rebol though. I'm not talking about _every language ever written_}
    sent: "2017-03-05T23:48:40.176Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58bca3cc21d548df2c95b9b4"
    text: {@WildYorkies 1. this is not a value of the word itself}
    sent: "2017-03-05T23:48:28.018Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca3b5e961e53c7fa3a31a"
    text: "following your logic`if` is not a keyword"
    sent: "2017-03-05T23:48:05.761Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca3b4f1a33b6275843595"
    text: {@maximvl The value is the result of the expression that follows....}
    sent: "2017-03-05T23:48:04.644Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58bca39ff1a33b6275843547"
    text: {you just said ` if a word comes built in with a value attached, it's a keyword`}
    sent: "2017-03-05T23:47:43.296Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca37c1465c46a56ee4c69"
    text: "@WildYorkies ok, what's the value of `if` in JS?"
    sent: "2017-03-05T23:47:08.668Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca3671465c46a56ee4c2f"
    text: {To me, if a word comes built in with a value attached, it's a keyword. It doesn't matter if you can overwrite it. For example, how could Red possibly implement anything like concurrency or asynchrony without shipping with a special word for such a thing? It doesn't matter if you can overwrite it later}
    sent: "2017-03-05T23:46:47.558Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58bca356e961e53c7fa3a1ca"
    text: "do they give you any flexibility? nope"
    sent: "2017-03-05T23:46:30.901Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca3427ceae5376a768667"
    text: "do they have value? nope"
    sent: "2017-03-05T23:46:10.704Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca33600c00c3d4fc44af8"
    text: "keywords, lets say, in JS are `for`, `if`"
    sent: "2017-03-05T23:45:58.160Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca32421d548df2c95b6be"
    text: {@WildYorkies yes, but this has nothing to do with keywords}
    sent: "2017-03-05T23:45:40.920Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca2b1e961e53c7fa39ec8"
    text: {@maximvl Those values have to come from somewhere...}
    sent: "2017-03-05T23:43:45.726Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58bca07ce961e53c7fa39375"
    text: {to me this approach is fundamentally different from others, evaluation and everything takes into account values only, and words just point to values}
    sent: "2017-03-05T23:34:20.972Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bca02600c00c3d4fc43998"
    text: "I know"
    sent: "2017-03-05T23:32:54.598Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58bc9ffc21d548df2c95a807"
    text: {```^/red>> type? :+^/== op!^/red>> +: "test"^/== "test"^/red>> type? :+^/== string!^/```^/nope, not a fixed thing}
    sent: "2017-03-05T23:32:12.182Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bc9fa4e961e53c7fa38f64"
    text: "Probably means thing like op!"
    sent: "2017-03-05T23:30:44.171Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58bc9f65872fc8ce62be21ce"
    text: {exactly, there are just words and values and some of them are connected}
    sent: "2017-03-05T23:29:41.064Z"
    editedAt: "2017-03-05T23:30:04.960Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bc9b121465c46a56ee24f8"
    text: {Red has predefined values for a lot of things, but the language doesn't have keywords. Of course, you can easily break things by redefining them.}
    sent: "2017-03-05T23:11:14.824Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bc9a6821d548df2c958eae"
    text: {The Electron stuff all seems really big to me.  I'm anxious to see how little we need, like Bolek's rich text, as fundamental pieces. }
    sent: "2017-03-05T23:08:24.748Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bc9a141465c46a56ee1f7c"
    text: {@dander the build date is compiled in AFAICT. Sounds like Scoop is doing something funky.}
    sent: "2017-03-05T23:07:00.208Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bc96f67ceae5376a764cbe"
    text: "@WildYorkies give me example of Red keyword"
    sent: "2017-03-05T22:53:42.288Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bc7c74de504908224c4fde"
    text: {@WildYorkies I think he means keywords in the traditional sense}
    sent: "2017-03-05T21:00:36.825Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58bc7c64f1a33b6275837d21"
    text: {What do you all think about Electron and the future of client-side apps? Most Electron apps I've used are quite slow because they use the resource hog (Chrome) in the background. VS Code is nice and fast though, so maybe there is a future with it.}
    sent: "2017-03-05T21:00:20.278Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58bc7928872fc8ce62bd66ad"
    text: {@maximvl Red does have keywords, though. It has built in datatypes, built in words, etc. Otherwise Red would require you to write absolutely everything from scratch for every program}
    sent: "2017-03-05T20:46:32.288Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58bc744100c00c3d4fc35a4b"
    text: {Does the timestamp shown by `about` actually represent the time that the ProgramData files are generated? I was assuming they were baked in during the automated build}
    sent: "2017-03-05T20:25:37.468Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58bc50bc872fc8ce62bc8911"
    text: {@dockimbel @geekyi @greggirwin I figured out what was going on. I was using scoop to try to update to the latest automated build, but it was using a cached version of the download. What I don't understand is why it was reporting the build version that it did. When I would run red.exe from the scoop shim, it would regenerate the crush.dll and gui-console from 2016-11-26-64912 inside ProgramData, and seemed to be running using those. Does it make any sense that it would report an updated build number if it was so old?^/There is a 'disable cache' flag `-k` on scoop, and when I added that, it successfully updated.}
    sent: "2017-03-05T17:54:04.966Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "58bc416300c00c3d4fc24200"
    text: "Fine here, too, once I rebuilt. "
    sent: "2017-03-05T16:48:35.139Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58bbf9c2f1a33b627580fb4e"
    text: {@dander working for me too.. ^/```red^/red>> system/build/config/build-basename^/== %gui-console-2017-2-27-48438^/red>> system/build/config/OS^/== Windows^/```}
    sent: "2017-03-05T11:42:58.694Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bbeb661465c46a56eab280"
    text: {@dander Works fine here:^/```lisp^/red>> parse [x -- ] [collect [keep pick to '-- ]]^/== [x]^/red>> parse [x y -- ] [collect [keep pick to '-- ]]^/== [x y]^/red>> about^/Red 0.6.1 - 5-Mar-2017/18:35:41+8:00^/```}
    sent: "2017-03-05T10:41:42.465Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58bbcccede504908224909b9"
    text: {I was just looking at the new behavior described in #2391, and `keep pick` doesn't seem to be working as expected.^/```^/red>> about^/Red 0.6.1 - 4-Mar-2017/23:13:47-8:00^/red>> parse [x -- ] [collect [keep pick to '-- ]]^/== []^/red>> parse [x y -- ] [collect [keep pick to '-- ]]^/== []^/```}
    sent: "2017-03-05T08:31:10.516Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58ba0faa00c00c3d4fb8ae40"
    text: {this is something to be designed in the future, hopefully all options will be supported, since each have it's own use cases}
    sent: "2017-03-04T00:51:54.109Z"
    editedAt: "2017-03-04T00:52:14.664Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ba0f2421d548df2c8a1817"
    text: {@WildYorkies what kind of asynchronous execution you would expect? event in same thread? parallel in separate thread?  or green threads?}
    sent: "2017-03-04T00:49:40.242Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ba0e9de961e53c7f980873"
    text: {@WildYorkies it worth repeating that Red has no keywords, because keywords are something expected to be reserved by the language designers and have fixed meaning, in Red every word can be redefined}
    sent: "2017-03-04T00:47:25.632Z"
    editedAt: "2017-03-04T00:53:24.072Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b9d4ad1465c46a56e1a73b"
    text: {It would be interesting to see what a `libuv` binding for Red would allow. I wouldn't want it as the only way to do things though. And the flow-based model of Red's reactive system will likely be integrated with port events when those come. The GUI reactive system is built on the underlying reactive design.}
    sent: "2017-03-03T20:40:13.045Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b9bb11872fc8ce62b10f90"
    text: "Is it restrictd to GUI events for now?"
    sent: "2017-03-03T18:50:57.661Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b9ba4fde50490822403885"
    text: {reactive programming is all about "Observer".  Can reactor! be used ?}
    sent: "2017-03-03T18:47:43.632Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b9b9099eb1bd81481eafbc"
    text: {@WildYorkies you can add your own functions to event handler with `insert-event-func`but I think that you can run it with Red/View only.}
    sent: "2017-03-03T18:42:17.914Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b9b6ebf1a33b62757773dd"
    text: {@rebolek Is there a keyword to make a function call evaluate asynchronously then? Or is the natural flow to be blocking?}
    sent: "2017-03-03T18:33:15.515Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b9b6a3567b0fc8138f4c09"
    text: {@WildYorkies event loop. Checking for unread messages with time! event i.e. every second.}
    sent: "2017-03-03T18:32:03.405Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b9b4657ceae5376a68f061"
    text: {Wondering what kind of pattern would be used to "listen" on incoming messages}
    sent: "2017-03-03T18:22:29.305Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b9b451e961e53c7f96114e"
    text: "Has anyone tried writing a chat bot in Red?"
    sent: "2017-03-03T18:22:09.260Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b91c434150746b151597d4"
    text: {So it's even more than 50%, in case of this channel it is 58,5%. Nice.}
    sent: "2017-03-03T07:33:23.706Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b91001fef1d2de52ac0ea6"
    text: {:) I've just implemented it, so let's see how much smaller the file will be.}
    sent: "2017-03-03T06:41:05.235Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b90f711465c46a56dcbf30"
    text: {@rebolek, I had the same exact thought, just didn't post it. :^^)}
    sent: "2017-03-03T06:38:41.604Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b90313567b0fc8138f35de"
    text: {@greggirwin There is certainly room for improvements, storing everything is not necessary. i.e. `fromUser`can be replaced by id and `html` can be removed completely. Just that should reduce the size to ~ 50% IMO.}
    sent: "2017-03-03T05:45:55.715Z"
    editedAt: "2017-03-03T05:46:12.598Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b8dc5521d548df2c83123a"
    text: "Very cool :+1: "
    sent: "2017-03-03T03:00:37.778Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b8dc3c00c00c3d4fb1b00f"
    text: {No C underneath, Red/System compiles directly to native code using our own toolchain (written in Rebol). Performances are currently around 4 -6 times slower than C, we don't have any optimizing layer yet.}
    sent: "2017-03-03T03:00:12.763Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b8dbe67ceae5376a63e161"
    text: {Thanks! Have any benchmarks been done for Red/System? It's gotta be C under the hood, right?}
    sent: "2017-03-03T02:58:46.653Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b8dbbd7ceae5376a63e0c3"
    text: {@WildYorkies Red/System is mostly C-like, but using Red syntax. Red and Rebol borrow some ideas from Forth, but they are not stack-based languages.}
    sent: "2017-03-03T02:58:05.830Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b8dba51465c46a56dbb700"
    text: {@WildYorkies Red/System is more like C than Forth.}
    sent: "2017-03-03T02:57:41.028Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58b8db1621d548df2c830d51"
    text: {@WildYorkies See Parsing examples [here](http://www.red-lang.org/2013/11/041-introducing-parse.html). Yes, you can Parse a programming language using it. Red's lexer is using Parse.}
    sent: "2017-03-03T02:55:18.351Z"
    editedAt: "2017-03-03T02:58:54.239Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b8db0ff1a33b6275728bd9"
    text: {@greggirwin So Red/System uses a Forth-like DSL for doing low level code?}
    sent: "2017-03-03T02:55:11.393Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b8dab3872fc8ce62abcd84"
    text: "Is it fast enough for that?"
    sent: "2017-03-03T02:53:39.353Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b8daabf1a33b6275728a2b"
    text: {What can you do with Red parsing? For example, could you parse a programming language and then execute the AST?}
    sent: "2017-03-03T02:53:31.702Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b8b006e961e53c7f9012b3"
    text: {If you're patient, Red can even `load` the entire result, though it uses a lot of memory.}
    sent: "2017-03-02T23:51:34.362Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b8ada1de504908223a805b"
    text: "Works great @rebolek. "
    sent: "2017-03-02T23:41:21.710Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b8aac27ceae5376a62fd8e"
    text: {R/S is where you'll see the stack, which Red doesn't expose as a global mechanism.}
    sent: "2017-03-02T23:29:06.878Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b8aa7200c00c3d4fb0c56b"
    text: {Red's heritage, via Rebol, comes from Lisp, Forth, and Logo. And Self for objects. It's similar in some ways. There are no keywords, and you can redefine anything. The importance of words, and the concept of building up a language to write your program in works well, though not a lot of people do that. }
    sent: "2017-03-02T23:27:46.804Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b8a4b3f1a33b62757192fa"
    text: "Is Red's distant cousin Factor?"
    sent: "2017-03-02T23:03:15.902Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b8a4a37ceae5376a62dd53"
    text: {How similar is Rebol to Forth? It seems like a lot of cross over}
    sent: "2017-03-02T23:02:59.783Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b894457ceae5376a62752c"
    text: {@lpvm How to get archive of this (and other) room:^/^/1. get `tools` branch of Gritter: https://github.com/rebolek/gritter/tree/tools^/2. get your Gitter token at https://developer.gitter.im/docs/welcome^/3. Run Red console in Gritter directory and do following:^/```^/red>> do %gitter-tools.red^/red>> token: <your-token>^/red>> user: user-info^/red>> rooms: user-rooms user/id^/red>> room: select-room rooms "red/red" ; or other room, see ROOMS for list of your rooms^/red>> download-all-messages room/id^/```^/Messages will be downloaded to file `%messages.red`. It will take some time, this room takes around 23MB.}
    sent: "2017-03-02T21:53:09.587Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b89258e961e53c7f8f5de2"
    text: {I have looked at Wasm and the S-expression format ("wast") could probably be generated from Red/System in a rather straightforward manner (wast level is only slightly lower than R/S) *except* that in the first version (MVP or Minimal Viable Product) there is no support for structures, which is one of the strong points of R/S. This is promised for a future extension.}
    sent: "2017-03-02T21:44:56.877Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58b88a27e961e53c7f8f27a3"
    text: {@Oldes ^/> Somehow I feel, that having inbuild browser widget would be big addition to Red.. You could even have this chat directly in Red window.^/^/You can have this chat in Red window already, even without browser widget.}
    sent: "2017-03-02T21:09:59.485Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b888ed00c00c3d4faff6c1"
    text: "+1  for `trim` to `trim/tail` also by default"
    sent: "2017-03-02T21:04:45.104Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58b888a97ceae5376a622744"
    text: {No, but it is super interesting to think of red running in the browser}
    sent: "2017-03-02T21:03:37.768Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b888897ceae5376a622655"
    text: {@greggirwin there is also this: https://github.com/WebAssembly/design/blob/master/GC.md}
    sent: "2017-03-02T21:03:05.609Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b862eb1465c46a56d8e5dc"
    text: {@JacobGood1, any sense of how hard it would be to emit WASM as s-expressions from Red? Seems like it might be easier than the asm format.}
    sent: "2017-03-02T18:22:35.839Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b7d82c872fc8ce62a54a8f"
    text: {@greggirwin  Thanks re the pretty-printer (I use the R2 one, nice to have Red version.)}
    sent: "2017-03-02T08:30:36.230Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58b78759f1a33b62756ac599"
    text: {Hey everyone, here is some cool news: https://news.ycombinator.com/item?id=13755981}
    sent: "2017-03-02T02:45:45.426Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b76ba400c00c3d4fa8ecfd"
    text: {@mikeparr, https://gist.github.com/greggirwin/3085f9cbed23f62b37cc5bb4e7095066 is a very quick port of the R2 pretty printer to Red.}
    sent: "2017-03-02T00:47:32.967Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b767d81465c46a56d2f4dd"
    text: {It doesn't look like it's setting those as defaults anywhere though.}
    sent: "2017-03-02T00:31:20.211Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b7671e872fc8ce62a3165b"
    text: {Which may happen if the default of `/head/tail`applies.}
    sent: "2017-03-02T00:28:14.601Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b766bd872fc8ce62a3143b"
    text: "I agree that it should trim in that case."
    sent: "2017-03-02T00:26:37.743Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b765fcde5049082232fdb9"
    text: {```^/red>> trim "abcd^^/"^/== "abcd^^/"^/```}
    sent: "2017-03-02T00:23:24.137Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b765f5f1a33b62756a261f"
    text: "`trim` could be great, but it isn't."
    sent: "2017-03-02T00:23:17.770Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b765091465c46a56d2e719"
    text: {`Trim` on a string looks like it wants to default to `/head/tail`, but doesn't:^/```^/red>> trim "  abc      ^^/         def  "^/== "abc^^/def"^/```^/Looks like it's doing a `trim/with`, defaulting to a space for the `with` value. Using `/head/tail` explicitly works fine.}
    sent: "2017-03-02T00:19:21.393Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58b6fa8121d548df2c7736fa"
    text: {Also, I have an *oooold* R2 intellisense experiment. It won't work in Red, obviously, and I'd need to see if it still works at all, but we could play with that. }
    sent: "2017-03-01T16:44:49.259Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b6f8907ceae5376a583809"
    text: {@mikeparr: http://www.rebol.net/cookbook/recipes/0042.html^/^/Semantic analysis isn't meaningless, especially for code that doesn't get tricky. One of the tricky things is knowing when you're inside a dialect, and how to deal with that. There is probably a lot we can do, but since I haven't written one, I don't know how hard some of it will be. }
    sent: "2017-03-01T16:36:32.313Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b6f78821d548df2c7720b7"
    text: {I imagine binary parsing will improve, but even now it works. Strings are not binary, so we can't just treat them as such. Plain binary is fine though.^/```^/red>> r1: #{FF}^/== #{FF}^/red>> r2: #{EE}^/== #{EE}^/red>> parse #{FFEE} [r1 r2]^/== true^/red>> parse #{FFEE} [r1 r1 r2]^/== false^/```^/Keeping values at the Red/System level would be an optimization, but we should define the goals clearly, and need to think about what it looks like. It could be tricky to get right. }
    sent: "2017-03-01T16:32:08.618Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b6dc20f1a33b6275667a99"
    text: {Somehow I feel, that having inbuild browser widget would be big addition to Red.. You could even have this chat directly in Red window.}
    sent: "2017-03-01T14:35:12.564Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6db88de504908222f65b3"
    text: {CLSID_WebBrowser... but it is mainly for learning purposes so far:)}
    sent: "2017-03-01T14:32:40.025Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6daa3f1a33b62756671c7"
    text: {What component are you going to you for a browser widget?}
    sent: "2017-03-01T14:28:51.062Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58b6d9801465c46a56cef8f5"
    text: "I bet Doc don't have time to follow every input."
    sent: "2017-03-01T14:24:00.305Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d94ff1a33b6275666948"
    text: {I'm now trying to implement `browser` widget. Don't worry, I'm interested in Red. Binary parsing is not what I want to do now. I was just following the discussion.}
    sent: "2017-03-01T14:23:11.085Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d8eb00c00c3d4fa4e302"
    text: {@Oldes Red needs ANY person, who tries to do some practical stuff. So please - keep on the Red usage and don't hesitate to throw ideas at Doc. I bet Doc welcomes a constructive input. }
    sent: "2017-03-01T14:21:31.676Z"
    editedAt: "2017-03-01T14:21:47.004Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58b6d7ea00c00c3d4fa4dad3"
    text: {@Oldes Please no, your thoughts are very valuable.}
    sent: "2017-03-01T14:17:14.427Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b6d75b00c00c3d4fa4d811"
    text: {@Oldes yes, it isn't. I thought that strings are stored as UTF8, which makes sense, unfortunately, they are not.}
    sent: "2017-03-01T14:14:51.409Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b6d729872fc8ce629f1dda"
    text: {Never mind... maybe I should keep my though personal. Of course I know it is not done _yet_. }
    sent: "2017-03-01T14:14:01.758Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d69bf1a33b627566592f"
    text: {Parse has to support binary parsing - how else do you implement Amiga datatypes system and recreate AmigaOS using Red? :-)}
    sent: "2017-03-01T14:11:39.291Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58b6d6991465c46a56cee30f"
    text: {I mean this is not much friendly: ^/https://gitter.im/red/red?at=58b3f6e89eb1bd81481e1f66^/https://gitter.im/red/red?at=58b3feffde504908221ebc29}
    sent: "2017-03-01T14:11:37.730Z"
    editedAt: "2017-03-01T14:12:56.775Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d658872fc8ce629f1988"
    text: {@pekr  @Oldes must answer this, I have different opinion.}
    sent: "2017-03-01T14:10:32.869Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b6d6051465c46a56cedf12"
    text: "Let's assume we have one. "
    sent: "2017-03-01T14:09:09.866Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58b6d5e400c00c3d4fa4cece"
    text: {@Oldes  We still do not have proper I/O, so `parse` could not work on streams yet.}
    sent: "2017-03-01T14:08:36.823Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b6d5c1872fc8ce629f1600"
    text: "Why is not Red parse friendly to binary parsing?"
    sent: "2017-03-01T14:08:01.762Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58b6d55df1a33b627566519e"
    text: {As you noticed, current `parse` state is not much friendly for binary parsing anyway.}
    sent: "2017-03-01T14:06:21.918Z"
    editedAt: "2017-03-01T14:06:33.858Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d50ce961e53c7f842338"
    text: {I don't know yet... I just know, that until regular `parse` command will not support streaming, for big data it is not the best tool.. that is why I use my `stream-io` and not just `parse`.}
    sent: "2017-03-01T14:05:00.337Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d4a000c00c3d4fa4c4db"
    text: {Ok, I probably misunderstood you somehow, I guess it's the language barrier ;) So you basically want to being able to use R/S integer, float, etc on binary data?}
    sent: "2017-03-01T14:03:12.295Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b6d4107ceae5376a5714f6"
    text: {You can even just seek the raw data not to read everything.}
    sent: "2017-03-01T14:00:48.059Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d3cd00c00c3d4fa4bf07"
    text: {You have the raw data in memory while parsing some binary format ... no need to convert everything to Red values.}
    sent: "2017-03-01T13:59:41.947Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d386de504908222f3608"
    text: {@Oldes Red does not have GC yet, but imagine it does. How you can use garbage collector on raw memory? You need some metadata that Red provides (would provide).}
    sent: "2017-03-01T13:58:30.335Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b6d35921d548df2c760349"
    text: {@mikeparr maybe something like this? https://github.com/qtxie/red/blob/red-console/environment/red-console/highlight.red}
    sent: "2017-03-01T13:57:45.982Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d2fef1a33b62756642f4"
    text: {Don't understand what you mean.. my idea is definitely not making Red unsafe. Never mind.. one day I will make it as it is one of my key needs.}
    sent: "2017-03-01T13:56:14.294Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d2c0872fc8ce629f021d"
    text: {Red is safe lang while R/S isn't. Making Red unsafe is not a solution IMO.}
    sent: "2017-03-01T13:55:12.682Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b6d2bcf1a33b62756641a7"
    text: "Of course.. there is many things I want."
    sent: "2017-03-01T13:55:08.077Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6d23de961e53c7f840e8e"
    text: {If you want to use R/S structures, just use R/S. It would be nice, if R/S provided some parsing capabilities :)}
    sent: "2017-03-01T13:53:01.438Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b6d14800c00c3d4fa4abb4"
    text: {Regarding binary parsing dialects... in Red it would be good to use internal structures of the Red/System and not to convert every internal value to high level values... because often just concrete information is wanted... it would be something like _binary query dilect_ :)   }
    sent: "2017-03-01T13:48:56.943Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6b64ff1a33b6275657d09"
    text: {Wow, I can't believe I missed that one! I'll examine it ASAP.}
    sent: "2017-03-01T11:53:51.555Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58b6b2b3de504908222e5ad4"
    text: {@WiseGenius  Could you tell me if this proposition for maps :point_up: [November 20, 2016 8:26 PM](https://gitter.im/red/red?at=5831968db563b5516c41e69b) would satisfy your needs?}
    sent: "2017-03-01T11:38:27.327Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b690787ceae5376a555898"
    text: {I'm thinking ahead about an IDE in Red (or one that allows Red scripting).  Any ideas or code for Red programs/tools which manipulate Red code? A pretty-printer is one, for example.  I guess that the code=data concept in Red means that a semantic analysis is meaningless.}
    sent: "2017-03-01T09:12:24.128Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58b59f04872fc8ce6297a06b"
    text: {Your are right, I did not notice the `open` one because it's in between the function definition. The second was easier to see ;-)  There was no pun intended!}
    sent: "2017-02-28T16:02:12.768Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58b579f2872fc8ce62968b66"
    text: {There is second help string in the `open` function and is correct:) It looks I made AVI parser before WAV:)}
    sent: "2017-02-28T13:24:02.159Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b5731bf1a33b62755e2470"
    text: {@Oldes There is just one help string in your WAVE decoder, and it is wrong : https://github.com/Oldes/rs/blob/master/projects/wav/latest/wav.r#L84^/By the way, `stream-io` is nice !}
    sent: "2017-02-28T12:54:51.338Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58b572d0e961e53c7f7b6177"
    text: "@rebolek me too."
    sent: "2017-02-28T12:53:36.139Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58b535acfef1d2de52abb027"
    text: {@gltewalt In Rebol, you could search just with incomplete word, in Red you must use string for searching. I found Rebol approach more user friendly.}
    sent: "2017-02-28T08:32:44.794Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b5346fe961e53c7f79d098"
    text: "Thanks for clarifying it for me."
    sent: "2017-02-28T08:27:27.681Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b5344fde5049082225a894"
    text: {That's interesting, but seems an unusual approach to me}
    sent: "2017-02-28T08:26:55.088Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b532d09eb1bd81481e3d2a"
    text: "I don’t think so."
    sent: "2017-02-28T08:20:32.952Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b532567ceae5376a4cb89b"
    text: "Oh, interesting, can I use glob patterns in it?"
    sent: "2017-02-28T08:18:30.116Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58b5322dfef1d2de52abaf76"
    text: {It returns all functions that have at least one space in docstrings.}
    sent: "2017-02-28T08:17:49.175Z"
    editedAt: "2017-02-28T08:18:00.150Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b531f5f1a33b62755c9edb"
    text: {This returns nothing `help ""`^/string with one space appears to return the same info as `what`}
    sent: "2017-02-28T08:16:53.309Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b531e7567b0fc8138eddca"
    text: {```^/c> help "lesser"^/     lesser-or-equal? ^-=>  Returns TRUE if the first value is less than or equal to the second^/     lesser? ^-=>  Returns TRUE if the first value is less than the second^/     min ^-=>  Returns the lesser of the two values^/```}
    sent: "2017-02-28T08:16:39.921Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b531b8fef1d2de52abaf59"
    text: {@gltewalt when you pass a string to `help`, it searches for that string}
    sent: "2017-02-28T08:15:52.263Z"
    editedAt: "2017-02-28T08:16:02.988Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b530f7de50490822259456"
    text: "Any code snippets to look at?"
    sent: "2017-02-28T08:12:39.058Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58b530cd1465c46a56c46bd5"
    text: {It doesn't throw an error though. It emits seemingly random amounts of information.}
    sent: "2017-02-28T08:11:57.309Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b530837ceae5376a4caf08"
    text: {I think that's because `help` expecting `word!` value, not `string!`}
    sent: "2017-02-28T08:10:43.432Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58b52fe5872fc8ce6294b686"
    text: {`help` behaves unexpectedly if fed a non-empty string}
    sent: "2017-02-28T08:08:05.212Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58b49419e961e53c7f7687b4"
    text: {Right... I would like to create binary parsing dialect in Red one day.. it could be used to generate the `ksy` source too:)}
    sent: "2017-02-27T21:03:21.452Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b493b1e961e53c7f76845c"
    text: {We can at least agree that there are a lot of tools out there for this, so some people must still need it. JSON hasn't won everywhere yet. :^^)}
    sent: "2017-02-27T21:01:37.407Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b49305872fc8ce62917ae6"
    text: {well, i woudn't say php or perl is something what human would write :D}
    sent: "2017-02-27T20:58:45.519Z"
    editedAt: "2017-02-27T20:58:54.212Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b492237ceae5376a496512"
    text: {When I read [Kaitai ksy source](https://github.com/kaitai-io/kaitai_struct_formats/blob/master/game/doom_wad.ksy), I don't have a feeling that it is something what human would write.}
    sent: "2017-02-27T20:54:59.861Z"
    editedAt: "2017-02-27T20:57:43.934Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48fc5f1a33b62755954ab"
    text: {but it doesn't match the one you can do with Redbol, of course}
    sent: "2017-02-27T20:44:53.221Z"
    editedAt: "2017-02-27T20:44:58.793Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48fba7ceae5376a4956e8"
    text: {I made own binary format few years ago.. I'm using the same `stream-io` script to write it.. https://github.com/Oldes/rs/blob/master/projects-rswf/pack-assets/divided/pack-assets.r}
    sent: "2017-02-27T20:44:42.763Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48fb2872fc8ce62916525"
    text: {@Oldes there is basic support for conditionals and other things: http://doc.kaitai.io/user_guide.html#_conditionals}
    sent: "2017-02-27T20:44:34.259Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48f171465c46a56c111e3"
    text: "The binary formats are full of conditions "
    sent: "2017-02-27T20:41:59.931Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48f167ceae5376a4951f5"
    text: {@Oldes well, SWF format is defined, but maybe you are using your own in your project}
    sent: "2017-02-27T20:41:58.079Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48ef31465c46a56c11073"
    text: "based os some logic"
    sent: "2017-02-27T20:41:23.072Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48ef21465c46a56c1106d"
    text: {I made my SWF parser in 2007 and still use it.. no need to touch it.}
    sent: "2017-02-27T20:41:22.146Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48eea21d548df2c686db5"
    text: {well, your code fills `Bitrate` and `SamplingRate` fields}
    sent: "2017-02-27T20:41:14.454Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48e9d7ceae5376a495023"
    text: {Don't understand what you mean with _you still have to write code separately_}
    sent: "2017-02-27T20:39:57.264Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48e9a7ceae5376a49501e"
    text: "@Oldes well, each time your format is changed"
    sent: "2017-02-27T20:39:54.576Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48e8521d548df2c686bfb"
    text: "oh, yep"
    sent: "2017-02-27T20:39:33.787Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48e7a872fc8ce62915f11"
    text: {It is Rebol code, not Red yet:) I know.. but how many times you will use the generator?}
    sent: "2017-02-27T20:39:22.345Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48e73872fc8ce62915ef6"
    text: {so you still have to write code separately to repeat Red version}
    sent: "2017-02-27T20:39:15.468Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48e4b872fc8ce62915e35"
    text: {Kaitai only creates parsers which will return you raw data. AFAIK}
    sent: "2017-02-27T20:38:35.466Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48e2e1465c46a56c10cea"
    text: {@Oldes from what I see there - Red code does some transformations while parsing}
    sent: "2017-02-27T20:38:06.103Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58b48d9be961e53c7f765ef9"
    text: "Bindata examples are almost unreadable to me."
    sent: "2017-02-27T20:35:39.642Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48c55f1a33b627559418f"
    text: {Imagine how you would write something like this https://github.com/Oldes/rs/blob/master/projects-rswf/swf-parser/latest/parsers/sound.r#L68 in Kaitai?}
    sent: "2017-02-27T20:30:13.140Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48c29f1a33b6275593fff"
    text: {I think it is pretty limited... that is probably also reason, why they don't have format for something so basic as MP3}
    sent: "2017-02-27T20:29:29.677Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48c0bf1a33b6275593f81"
    text: {I think it is pretty limited... that is probably also reason, why they don't have format for something so basic as MP3}
    sent: "2017-02-27T20:28:59.590Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48b2e21d548df2c6853e3"
    text: {Not entirely its fault though. The format may not let you break things up or reformat for clarity, which would be the issue. Good things in there, though, like endian handling.}
    sent: "2017-02-27T20:25:18.885Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b48abee961e53c7f764574"
    text: {Kaitai looks nice on the first look, but I'm not sure how practical it is, when you need more complex structures. It could get messy pretty quickly.}
    sent: "2017-02-27T20:23:26.342Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48a5bf1a33b6275593643"
    text: {Kaitai has a nice repo of formats as well. The only thing that doesn't grab me is the layout. I think the YAML format is what makes it stretch so much vertically.}
    sent: "2017-02-27T20:21:47.613Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b488f47ceae5376a49270f"
    text: "Nice @Oldes. Using `rebcode` no less!"
    sent: "2017-02-27T20:15:48.082Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b48881de50490822222a15"
    text: {Here is for example WAV parser https://github.com/Oldes/rs/blob/master/projects/wav/latest/wav.r}
    sent: "2017-02-27T20:13:53.413Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b48841872fc8ce62913905"
    text: {I'm using `stream-io` script for all my binary parsing in Rebol2 https://github.com/Oldes/rs/blob/master/projects/stream-io/latest/stream-io.r}
    sent: "2017-02-27T20:12:49.827Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b4879421d548df2c683e11"
    text: {Kaitai looks nice, and is an example of something we could use libRed for, rather than generating code in different languages. }
    sent: "2017-02-27T20:09:56.723Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b486cbde5049082222206c"
    text: {Couldn't turn it up quickly, though there are a lot of them out there. I hadn't seen https://www.protlr.com/, but am a big fan of code generators. With Red, it's also possible to avoid the generation element in many cases. e.g., I used to write state machine generators. In R2, I finally just wrote an FSM interpreter with `parse`.}
    sent: "2017-02-27T20:06:35.913Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b47f1e1465c46a56c0ad3d"
    text: {Thanks @nc-x, though I don't think it was either of those. A quick search turned up a lot, but I'll see if I can find the one I noted.}
    sent: "2017-02-27T19:33:50.802Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b47e37872fc8ce6290f320"
    text: {@greggirwin, Was the DSL for binary parsing one of these (or both), ^/https://github.com/dmendel/bindata^/http://kaitai.io/}
    sent: "2017-02-27T19:29:59.135Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58b47011fef1d2de52ab9f3f"
    text: "I must have missed it."
    sent: "2017-02-27T18:29:37.072Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b46e271465c46a56c02027"
    text: {On `vector!`, some time back, someone posted about a binary reader lib, that used a DSL to describe the data for parsing. I might have made some notes on it, but also thought about the ArrayBuffer idea in JS (a typed interface to raw data). Has anyone used that? }
    sent: "2017-02-27T18:21:27.167Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b45d98567b0fc8138ecd52"
    text: {I can get logs (manually) with my Gritter client, I will add simple way to download all messages to new version.}
    sent: "2017-02-27T17:10:48.981Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b45c75e961e53c7f74df50"
    text: {This chat is very valuable, full of examples.  Is there an easy way to get the whole log of it?}
    sent: "2017-02-27T17:05:57.310Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58b433647ceae5376a46a468"
    text: {> @WildYorkies how is your `read` example different from how it's done now in, for ex :point_up: [February 25, 2017 3:11 AM](https://gitter.im/red/red?at=58b0afade961e53c7f631999)? ^/^/I'm not sure. I don't _know_ how it's done now. I just sort of assumed :smile: }
    sent: "2017-02-27T14:10:44.778Z"
    editedAt: "2017-02-27T14:12:13.709Z"
    v: 2
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b4146900c00c3d4f93c031"
    text: "Right."
    sent: "2017-02-27T11:58:33.114Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b413654150746b15151cd7"
    text: {@dockimbel Of course, with `make`, I think that `vector!` is basically `binary!` with metadata, isn’t it. }
    sent: "2017-02-27T11:54:13.197Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b4130a4150746b15151cc5"
    text: {@dockimbel @qtxie https://github.com/red/red/issues/2453}
    sent: "2017-02-27T11:52:42.458Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b412e5e961e53c7f72f0c6"
    text: {@rebolek It would be possible to support that, but only using `make`, as it needs additional information in order to build a proper `vector!`.}
    sent: "2017-02-27T11:52:05.779Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b412309eb1bd81481e2217"
    text: {@rebolek Yes. It's a bug. Please open a ticket for it.}
    sent: "2017-02-27T11:49:04.410Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58b40a3a567b0fc8138ec2e2"
    text: {Also, would it be possible to set vector directly from binary?}
    sent: "2017-02-27T11:15:06.947Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b4077b567b0fc8138ec27f"
    text: "Ah! :)"
    sent: "2017-02-27T11:03:23.422Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b406e500c00c3d4f936f16"
    text: {```lisp^/r> make vector! [integer! 32 [-1 -5 ]]^/== make vector! [-1 -5]^/r> make vector! [integer! 16 [-1 -5 ]]^/== make vector! [integer! 16 [65535 65531]]^/```^/That's a bug.}
    sent: "2017-02-27T11:00:53.871Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b40490fef1d2de52ab91bb"
    text: {In R3 vectors you can decide if the integers are signed or unsigned. Red seems to support unsigned values only:^/```^/c> v: make vector! [integer! 16 [-1]]^/== make vector! [integer! 16 [65535]]^/```^/Is there a way to get signed `vector!` ?}
    sent: "2017-02-27T10:50:56.543Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b3feffde504908221ebc29"
    text: {You can still convert the strings to match upfront:^/```lisp^/red>> asdf: to-binary "asdf"^/== #{61736466}^/red>> parse to binary! "asdf" [asdf]^/== true^/```}
    sent: "2017-02-27T10:27:11.470Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b3feab4150746b15151acf"
    text: "Thanks."
    sent: "2017-02-27T10:25:47.419Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b3fea7567b0fc8138ec1b8"
    text: "Ok, now I understand."
    sent: "2017-02-27T10:25:43.063Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58b3fe99872fc8ce628d9845"
    text: "No, that's in R3 only."
    sent: "2017-02-27T10:25:29.975Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b3fe8c4150746b15151acb"
    text: "Ah, I thought they are."
    sent: "2017-02-27T10:25:16.019Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b3fe7d7ceae5376a456aa8"
    text: "Red strings are not UTF8-encoded in memory."
    sent: "2017-02-27T10:25:01.465Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b3fe5efef1d2de52ab912d"
    text: {what I want is just match the ASCII/UTF8 representation of the string, so what conversion is needed here?}
    sent: "2017-02-27T10:24:30.275Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b3fdb400c00c3d4f933a1e"
    text: {Because going from `string!` to `binary!` requires a deep conversion, so they are not compatible types, like in R2. In that above case, a Parse error would be more appropriate. Though, that wouldn't make it convenient for parsing binary inputs.}
    sent: "2017-02-27T10:21:40.287Z"
    editedAt: "2017-02-27T10:24:26.330Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b3f6e89eb1bd81481e1f66"
    text: {When I parse binary, why can't I use strings?^/```^/c> parse to binary! "asdf" ["asdf"]^/== false^/```}
    sent: "2017-02-27T09:52:40.831Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b3c89c1465c46a56bc149a"
    text: {@dockimbel Fixed. @endo64 Thank you for reporting it.}
    sent: "2017-02-27T06:35:08.117Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58b37029f1a33b6275531e63"
    text: {Of course, now we'll have to use SHA-2+ for package hashes. ;^^)}
    sent: "2017-02-27T00:17:45.704Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b36dce872fc8ce628ade00"
    text: {Some good thoughts in the announcement for Elm's package system: http://elm-lang.org/blog/announce/package-manager}
    sent: "2017-02-27T00:07:42.944Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b3698dde504908221c0550"
    text: {Enforceable semantic versioning, with their package system. (If Red wanted to go that route). Relies on json, but that can be modeled in redbol itself. ^/Qualified, unqualified, and aliased imports. ^/^/There are other great systems out there, I'm sure - rust was mentioned, but I have no exposure to it^/}
    sent: "2017-02-26T23:49:33.070Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b35e6cf1a33b627552d461"
    text: "What are the big wins in Elm's module system?"
    sent: "2017-02-26T23:02:04.082Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b320e8872fc8ce62895408"
    text: {Might be beneficial for a contributor to look at the Elm way of doing modules}
    sent: "2017-02-26T18:39:36.178Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b2b8d8f1a33b62754fb06e"
    text: {Ah sorry not in the same file, `environment\console\win32.reds on line 21` and `modules\view\backends\windows\win32.reds line 326`.}
    sent: "2017-02-26T11:15:36.299Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58b2b86fe961e53c7f6c19cb"
    text: "We just need to do a bit of cleanup."
    sent: "2017-02-26T11:13:51.249Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b2b81bf1a33b62754fae42"
    text: {I see that there are duplicate definition of those constants in file `environment\console\win32.reds` (on line 21 and 326)}
    sent: "2017-02-26T11:12:27.484Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58b2b417e961e53c7f6c0681"
    text: "@qtxie ^^----"
    sent: "2017-02-26T10:55:19.165Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b2b3f71465c46a56b6dff1"
    text: {During compiling the latest Red from its source I saw some warnings, ^/Happened only during the first compile, then Red console works without those warnings.^/I just wanted to report here;^/```^/C:\Users\endo\Documents\Red\red\build\bin>red --cli^/Compiling Red console...^/*** Warning: VK_SHIFT macro in R/S is redefined^/*** Warning: VK_CONTROL macro in R/S is redefined^/*** Warning: VK_PRIOR macro in R/S is redefined^/*** Warning: VK_NEXT macro in R/S is redefined^/*** Warning: VK_END macro in R/S is redefined^/*** Warning: VK_HOME macro in R/S is redefined^/*** Warning: VK_LEFT macro in R/S is redefined^/*** Warning: VK_UP macro in R/S is redefined^/*** Warning: VK_RIGHT macro in R/S is redefined^/*** Warning: VK_DOWN macro in R/S is redefined^/*** Warning: VK_SELECT macro in R/S is redefined^/*** Warning: VK_INSERT macro in R/S is redefined^/*** Warning: VK_DELETE macro in R/S is redefined^/--== Red 0.6.1 ==--^/Type HELP for starting information.^/^/red>>^/```}
    sent: "2017-02-26T10:54:47.517Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58b2b1e921d548df2c5e0c10"
    text: {@WildYorkies how is your `read` example different from how it's done now in, for ex :point_up: [February 25, 2017 3:11 AM](https://gitter.im/red/red?at=58b0afade961e53c7f631999)? }
    sent: "2017-02-26T10:46:01.240Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58b2b0aade50490822187f61"
    text: {@greggirwin ^/> I have a matrix of old package system metadata.^/^/That would be very useful!}
    sent: "2017-02-26T10:40:42.363Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58b25ef121d548df2c5ca910"
    text: {The `export` bit is the key. You also need to `load` the file, not just `read` it. It will come.}
    sent: "2017-02-26T04:52:01.538Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b22f81f1a33b62754d7f01"
    text: {Definitely need something that locks in a particular version of a module. Rust's `cargo` does this nicely. ^/*But* if you wanted something simple, it could be as easy as using the `read` word to read in a Red file. Then that particular Red file would have various words marked as `export` that would make them available to use.^/^/```rebol^/oauth: read www.github.com/red-user/oauth.red^/auth: oauth/signature key secret token tokensecret^/```}
    sent: "2017-02-26T01:29:37.422Z"
    editedAt: "2017-02-26T01:30:00.500Z"
    v: 2
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b1e3e300c00c3d4f896a45"
    text: {We can certainly learn a couple lessons from NPM: Don't nest packages forever (I've had that blow what Windows can handle in the length of a single path name), allow a way around naming conflicts. You can't just tell everyone to use short names and leave it at that. And be clear on the separation of modules/subsystems and packages.}
    sent: "2017-02-25T20:06:59.587Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b1e34a1465c46a56b38169"
    text: {I remember that entry on modules. It's very helpful. Thanks @rebolek. I have a matrix of old package system metadata. So old it doesn't have NPM in it. I'll look at that, so there's a reference if needed. }
    sent: "2017-02-25T20:04:26.491Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b169b4872fc8ce62818cde"
    text: {@geekyi Saw that yesterday, such a mess, and will last for [a while](https://news.ycombinator.com/item?id=13727279).}
    sent: "2017-02-25T11:25:40.968Z"
    editedAt: "2017-02-25T11:27:25.813Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b1639a21d548df2c581451"
    text: {Off-topic but important: If you aren't already aware about this, [Cloudflare Reverse Proxies Are Dumping Uninitialized Memory](https://news.ycombinator.com/item?id=13718752).^/Your *passwords* (tokens too?) could be compromised (since september?) for any websites that use *specific features* of cloudflare as a proxy (email obfuscation, http to https, Server Side Excludes) and transmit auth data^/If curious, details are on [cloudflare blog](https://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/)^/You can check [here](http://www.doesitusecloudflare.com/)^/**tl;dr** heartbleed like vulnerability in cloudflare (people are calling it cloudbleed)}
    sent: "2017-02-25T10:59:38.153Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58b135f6872fc8ce6280a623"
    text: {Honestly, it would be really something if it can be made more complicated than R3 modules ;) For anyone interested, here is some overview http://stackoverflow.com/questions/14420942/how-are-words-bound-within-a-rebol-module}
    sent: "2017-02-25T07:44:54.364Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b1352200c00c3d4f86268e"
    text: {I remember to talk with Doc about modules and he wanted to get something simpler to use ....}
    sent: "2017-02-25T07:41:22.814Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58b134f71465c46a56b0283a"
    text: {I really wanted to use it but it wasn't worth the effort IMO.}
    sent: "2017-02-25T07:40:39.612Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b1349ae961e53c7f6549e4"
    text: {@pekr I won't say buggy but  it certainly was very confusing to use.}
    sent: "2017-02-25T07:39:06.740Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b13441872fc8ce62809f73"
    text: {Well, not only that. The work was done by BrianH. If I remember correctly, it went thru the complete rewrite. Not sure it was revised by Carl, although BrianH consulted it with him. He also missed few features, something along the /protect functionality. Really not sure anymore after such time. IIRC @rebolek got it some try, but found it buggy?}
    sent: "2017-02-25T07:37:37.196Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58b1249e1465c46a56afe2b4"
    text: {I'm all for simple, but I think the lack of module usage in R3 was due to...the lack of use of R3.}
    sent: "2017-02-25T06:30:54.674Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b1038ede504908221159e7"
    text: {It was imo an over complicated system noone really used nor understood. There is imo exactly 0 percent chance anything from that might be used directly. Maybe few ideas, but that's imo just it ...}
    sent: "2017-02-25T04:09:50.909Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58b10178e961e53c7f64797b"
    text: {We'll certainly learn a lot from it, but I don't know how much of the implementation might be used.}
    sent: "2017-02-25T04:00:56.969Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0d3807ceae5376a36cc10"
    text: {there was quite significant work done on modules for R3. is that work transferrable to Red or will there be different ideas about modules there?}
    sent: "2017-02-25T00:44:48.715Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58b0c3e1f1a33b6275472716"
    text: {You can see a hint with the one module we have today, where you put `needs: View` in your script header.}
    sent: "2017-02-24T23:38:09.397Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0c36df1a33b627547257d"
    text: {Modules are planned for 0.8 with full I/O in 0.7. I don't know details about package management targets, but Nenad knows the history and how others do it now. I have tons of notes with my own thoughts from R2 days, which I'm happy to share. ^/^/My guess is that package management will be built in, with modern features like versioning and side-by-side support for modules. }
    sent: "2017-02-24T23:36:13.667Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0babc872fc8ce627ec095"
    text: {@greggirwin is the long term plan to build a package manager into the CLI of Red?}
    sent: "2017-02-24T22:59:08.952Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b0ba84de504908221028ae"
    text: {Sure. You can read modules from anywhere. With SHA-1 on the blocks, prepare for git hashes to change. :^^)}
    sent: "2017-02-24T22:58:12.975Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0b33ade5049082210054a"
    text: {would an alternative module solution be to `read` in Red files from github urls? :P}
    sent: "2017-02-24T22:27:06.303Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b0b0c000c00c3d4f8400ed"
    text: {Using `set` in a context:^/```^/red>> ctx: context [a: 1 fn: does [print a]  set 'show-a does [fn]]^/== make object! [^/    a: 1^/    fn: func [][print a]^/]^/red>> show-a^/1^/```}
    sent: "2017-02-24T22:16:32.557Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0b07f7ceae5376a362c71"
    text: {Right. You can use `set` in a context to make a word globally available as well, so you don't have to reference the context to use it. A number of models were used in R2, and R3 had a module system defined, but we don't know exactly what it will be in Red yet.}
    sent: "2017-02-24T22:15:27.794Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0afade961e53c7f631999"
    text: {So like in this file https://github.com/WayneCui/re-scripts/blob/master/2048.red^/^/The game: context [] contains all of the "exports" for that file}
    sent: "2017-02-24T22:11:57.119Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b0ae0221d548df2c550d3a"
    text: {And choose to `do` or `#include` based on your design.}
    sent: "2017-02-24T22:04:50.064Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0adcce961e53c7f630fca"
    text: {So it's low tech approaches, using contexts as namespaces to prevent conflicts, for now.}
    sent: "2017-02-24T22:03:56.859Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0ada200c00c3d4f83f088"
    text: {Not yet. PiTL was a known shortcoming in Rebol, and Red will address that, but it's not there yet.}
    sent: "2017-02-24T22:03:14.877Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0ac921465c46a56ade8ce"
    text: {is there a practical way to share work and build large programs from smaller ones?}
    sent: "2017-02-24T21:58:42.212Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b0a9e900c00c3d4f83ddbf"
    text: {We have `checksum` which covers a bit of ground, but not OAuth.}
    sent: "2017-02-24T21:47:21.709Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0a98b21d548df2c54f128"
    text: {Well my other issue is shareable modules. For example, has anyone worked with oauth1? any module for making a signature? or hmac crypto stuff at least?}
    sent: "2017-02-24T21:45:47.048Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58b0a877f1a33b62754698a3"
    text: {While a good tool, it doesn't solve the organization issue IMO. We hvae `help <string!>` today, though it's not always clear why some things appear in results. And where Haskell is strongly typed, Red funcs don't have to be. We can map based on typesets, but you may get a flood of results that way. Then we could order by strongest type match, but it still doesn't organize things. ^/^/It doesn't mean we *can't* create self-organizing documentation, but I haven't seen one before that we can model on. }
    sent: "2017-02-24T21:41:11.676Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b0a50c1465c46a56adbad5"
    text: {> Red will let us do all kinds of things. For example, we can have a site/tool where you say "list all the funcs that take a string as their first arg, and return a string", or "funcs that take 3 args that are ..."^/^/If a Red version of Hoogle could be made, documentation organization issue would be solved }
    sent: "2017-02-24T21:26:36.800Z"
    editedAt: "2017-02-24T21:26:57.972Z"
    v: 2
    author: "581a1e32d73408ce4f332476"
)#(
    id: "58afd659872fc8ce62794df4"
    text: "cool :-)"
    sent: "2017-02-24T06:44:41.560Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58afac64e961e53c7f5d042f"
    text: {@pekr That means we support both commands in Draw now. :smile: }
    sent: "2017-02-24T03:45:40.658Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58af9a847ceae5376a2fcfeb"
    text: {I was working on some sdl2 bindings a while ago when I was learning reds(prob forgot everything now):^/https://github.com/JacobGood1/red-sdl-bindings^/There is some directx crap in there I was playing around with, you would have to delete that}
    sent: "2017-02-24T02:29:24.996Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58af7c3a872fc8ce6277c48a"
    text: {I wonder if that repo is the most updated version available?}
    sent: "2017-02-24T00:20:10.964Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58af7bfc7ceae5376a2f4474"
    text: {"Whatever happened to Kaj?"}
    sent: "2017-02-24T00:19:08.079Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58af7b7f00c00c3d4f7d2b14"
    text: {@zetashift there's a mirror on github: https://github.com/red/RS-fossil-mirror/tree/master/SDL , which you can also now find under Red organization}
    sent: "2017-02-24T00:17:03.319Z"
    editedAt: "2017-02-24T00:17:43.560Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58af465e21d548df2c4ce6b4"
    text: "he didn't ping me afterwards, though"
    sent: "2017-02-23T20:30:22.669Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58af4633f1a33b62753ef920"
    text: "we agreed to meet once he visits the Amsterdam"
    sent: "2017-02-23T20:29:39.126Z"
    editedAt: "2017-02-23T20:29:46.506Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58af45f57ceae5376a2e063a"
    text: {I also talked to Kaj on linkedin in beginning of January}
    sent: "2017-02-23T20:28:37.072Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58af4527872fc8ce62768b6f"
    text: {<unhide>I have sent Bas a message on LinkedIn. I had no contact on LinkedIn from Kaj since Januari 25th. Syllable world is down, all their sites down, Syllable forum spammed rotten. Anybody know where Thiago went since 7th Nov 2016? Perhaps time for a MIA room?<hide>}
    sent: "2017-02-23T20:25:11.011Z"
    editedAt: "2017-02-23T20:26:13.783Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58af43b221d548df2c4cd59f"
    text: {I saw Bas on AltMe not too long ago I think. We could try there.}
    sent: "2017-02-23T20:18:58.301Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58af3866872fc8ce62763433"
    text: {I tried to contact a friend of Kai, Bas from Esper Consultancy, but got no reply}
    sent: "2017-02-23T19:30:46.132Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "58af2d50e961e53c7f5a39c3"
    text: {@qtxie adding back old gradient pen - does it mean the complex pen merge was reverted? Or just unrelated?}
    sent: "2017-02-23T18:43:28.640Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58af18e700c00c3d4f7ab491"
    text: "Many of us wonder what happened to Kaj !"
    sent: "2017-02-23T17:16:23.022Z"
    editedAt: "2017-02-23T17:16:27.969Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58af12631465c46a56a47497"
    text: {I wonder what happened to Kaj and all his Fossil repositories.}
    sent: "2017-02-23T16:48:35.676Z"
    editedAt: "2017-02-23T16:49:24.659Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58af11817ceae5376a2ca1c4"
    text: {@zetashift there is some curses code in the Red repository: https://github.com/red/red/tree/master/system/library/curses but don't know if it still works.. I never used it and Red internals are still changing rapidly.}
    sent: "2017-02-23T16:44:49.824Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58af05f31465c46a56a41a72"
    text: "IO was coming up in the 0.7 update, right?"
    sent: "2017-02-23T15:55:31.006Z"
    v: 1
    author: "57510021c43b8c6019767b53"
) #(
    id: "58af0574872fc8ce6274d94c"
    text: {@zetashift practice is always good :) IO and GC are the most important missing parts now}
    sent: "2017-02-23T15:53:24.829Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58af04c5e961e53c7f592050"
    text: {awwh shucks I'll keep it to small GUI programs then for practicing! haha}
    sent: "2017-02-23T15:50:29.082Z"
    v: 1
    author: "57510021c43b8c6019767b53"
) #(
    id: "58af041ee961e53c7f591b45"
    text: {I would say it's too early to do such things in Red}
    sent: "2017-02-23T15:47:42.142Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58af03f9de50490822068333"
    text: "@zetashift hi and welcome"
    sent: "2017-02-23T15:47:05.277Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58af01cd7ceae5376a2c32ff"
    text: {http://red.esperconsultancy.nl/Red-SDL/tree?ci=trunk&expand (this one is dead!)}
    sent: "2017-02-23T15:37:49.052Z"
    v: 1
    author: "57510021c43b8c6019767b53"
) #(
    id: "58af01b5de50490822067566"
    text: {Interested in making a roguelike in Red; Is there a SDL package or a curses lib for red?}
    sent: "2017-02-23T15:37:25.422Z"
    v: 1
    author: "57510021c43b8c6019767b53"
) #(
    id: "58ae10cf7ceae5376a272a66"
    text: {also https://gitter.im/red/red?at=55f8bdf178514db1064f3ea4}
    sent: "2017-02-22T22:29:35.844Z"
    editedAt: "2017-02-22T22:30:37.079Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58ae0fcb7ceae5376a272507"
    text: "#2365 has a code example @opsaaspo "
    sent: "2017-02-22T22:25:15.483Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ae0e36e961e53c7f53f72a"
    text: "@geekyi ^/Thanks. My apologies."
    sent: "2017-02-22T22:18:30.373Z"
    v: 1
    author: "5894d968d73408ce4f47ee68"
) #(
    id: "58ae0c867ceae5376a2710ce"
    text: {P.S. the help, or welcome gitter channels are best for questions}
    sent: "2017-02-22T22:11:18.642Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ae0c5600c00c3d4f74e838"
    text: {@opsaaspo it's not yet implemented, but if you know red/system, you can `#include` it yourself}
    sent: "2017-02-22T22:10:30.888Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ae0863872fc8ce626f9a7c"
    text: {Does anyone know - I might use something like a function call from red console? (For example call/shell some_command etc.) Now I've got the following output:^/red>> help call^/Word call is not defined }
    sent: "2017-02-22T21:53:39.594Z"
    editedAt: "2017-02-22T21:54:11.018Z"
    v: 2
    author: "5894d968d73408ce4f47ee68"
) #(
    id: "58adc95ade50490822ffe5b0"
    text: {As cool as it would be to generate the type tree via reflection, in the console, we could just create a string or block to print, which would give us control over the layout and ordering. Then it's just a question of whether it adds value, to determine if it's worth including.}
    sent: "2017-02-22T17:24:42.505Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58adaffaaa800ee52ccd0deb"
    text: "hats off to @greggirwin !"
    sent: "2017-02-22T15:36:26.590Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58adaee01465c46a569c5714"
    text: "exactly"
    sent: "2017-02-22T15:31:44.431Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58adad951465c46a569c4cba"
    text: {So, the uppercase convention is useful in contexts where you can't escape characters like \`}
    sent: "2017-02-22T15:26:13.691Z"
    editedAt: "2017-02-22T15:26:57.779Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58ad916faa800ee52ccc2cad"
    text: "ok, sorry, I thought you meant in general."
    sent: "2017-02-22T13:26:07.804Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58ad9136f045df0a227dd75d"
    text: "here you can use backquotes to highlight code"
    sent: "2017-02-22T13:25:10.222Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad90fb1465c46a569b84cb"
    text: {that's precisely why I always uppercase REBOL names}
    sent: "2017-02-22T13:24:11.893Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58ad90df7ceae5376a23b349"
    text: "but your English is not upper-cased"
    sent: "2017-02-22T13:23:43.751Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad90b47ceae5376a23b270"
    text: {@maximvl since REBOL can be very close to English, I find it necessary.}
    sent: "2017-02-22T13:23:00.938Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58ad8ffc872fc8ce626c6726"
    text: {btw, guys, it's not 80s anymore, you don't have to type function names in upper-case}
    sent: "2017-02-22T13:19:56.784Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad8fb01465c46a569b7f1e"
    text: {@henrikmk > `that` would be nice to have direct access to in the console. maybe a TYPE-TREE function.^/^/what do you mean by `that`? ClojureAtlas ? Or :point_up: [February 22, 2017 5:04 AM](https://gitter.im/red/red?at=58acd5731465c46a5697ad5e)}
    sent: "2017-02-22T13:18:40.280Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ad81801465c46a569b28fb"
    text: {I believe that Red team knows how to fit this naturally and ergonomically into the language, so let's leave this to them :)}
    sent: "2017-02-22T12:18:08.281Z"
    editedAt: "2017-02-22T12:18:21.584Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad81101465c46a569b25c8"
    text: {and even more, thinking in terms of Redbol, `help` can be a dialect like `help [builtin datatypes]` or `help [describe string!]`}
    sent: "2017-02-22T12:16:16.397Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad8088aa800ee52ccbc20e"
    text: "but I still don't see any need for another entity"
    sent: "2017-02-22T12:14:00.157Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad807f21d548df2c420689"
    text: "well, output format can be improved"
    sent: "2017-02-22T12:13:51.168Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad8049aa800ee52ccbbff6"
    text: "@maximvl that is not a tree"
    sent: "2017-02-22T12:12:57.731Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58ad7fdbde50490822fdfe5a"
    text: {in fact it already does:^/```^/red>> help datatype!^/     action!         ^/     binary!         ^/     bitset!         ^/     block!          ^/     char!           ^/     datatype!       ^/     email!          ^/     error!          ^/     file!           ^/     float!          ^/     function!       ^/     get-path!       ^/     get-word!       ^/     hash!           ^/     integer!        ^/     issue!          ^/     lit-path!       ^/     lit-word!       ^/     logic!          ^/     map!            ^/     native!         ^/     none!           ^/     object!         ^/     op!             ^/     pair!           ^/     paren!          ^/     path!           ^/     percent!        ^/     point!          ^/     refinement!     ^/     routine!        ^/     set-path!       ^/     set-word!       ^/     string!         ^/     tag!            ^/     time!           ^/     tuple!          ^/     typeset!        ^/     unset!          ^/     url!            ^/     vector!         ^/     word!           ^/datatype! is a datatype! of value: datatype! ^/```}
    sent: "2017-02-22T12:11:07.351Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad7fcb872fc8ce626bf918"
    text: "@henrikmk `help datatype!` can do this"
    sent: "2017-02-22T12:10:51.656Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad7aa77ceae5376a232260"
    text: {HELP displays one thing. DESCRIBE could show different things, like the tree above.}
    sent: "2017-02-22T11:48:55.743Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58ad7377f045df0a227d2659"
    text: "there is `help` already"
    sent: "2017-02-22T11:18:15.324Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ad73517ceae5376a22f39b"
    text: {or a general DESCRIBE function that outputs interesting information about a type or value.}
    sent: "2017-02-22T11:17:37.826Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
)#(
    id: "58ad73007ceae5376a22f191"
    text: { @greggirwin, that would be nice to have direct access to in the console. maybe a TYPE-TREE function.}
    sent: "2017-02-22T11:16:16.333Z"
    editedAt: "2017-02-22T11:16:27.692Z"
    v: 2
    author: "5571645815522ed4b3e175c3"
) #(
    id: "58acfe6fde50490822fb647b"
    text: "> http://xiki.org/^/^/Not loading for me"
    sent: "2017-02-22T02:58:55.084Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58acddd37ceae5376a200376"
    text: {I like the idea of an extensible system a lot, but it's a sizable code base to dig into for the core design elements, how to hook things, etc. }
    sent: "2017-02-22T00:39:47.735Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acdafd872fc8ce6268ac70"
    text: {Thanks @rebolek. ^/^/Xiki reminds me of Oberon, but in text mode. Looks pretty cool, but I'm on Windows so can't play with it right now.}
    sent: "2017-02-22T00:27:41.575Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acd9a27ceae5376a1fee64"
    text: "Gregg, that is really nice tree!"
    sent: "2017-02-22T00:21:54.581Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58acd9571465c46a5697be13"
    text: {At a glance, ClojureAtlas made me a bit woozy. I quickly lost track of where I came from as things oozed around.}
    sent: "2017-02-22T00:20:39.465Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acd5731465c46a5697ad5e"
    text: {@9214, it looks something like this:^/```^/any-type!^/    event!^/    unset!^/    any-function!^/        native! action! op! function! routine!^/    any-object!^/        object! error!^/    series!^/        any-block!^/            any-list!^/                block! paren! hash!^/            any-path!^/                path! lit-path! set-path! get-path!^/        any-string!^/            string! file! url! tag! email!^/        binary!^/        image!^/        vector!^/    immediate!^/        any-word!^/            word! set-word! lit-word! get-word! refinement! issue!^/        scalar!^/            number!^/                integer! float! percent!^/            char!^/            pair!^/            tuple!^/            time!^/        datatype!^/        none!^/        logic!^/        typeset!^/```}
    sent: "2017-02-22T00:04:03.799Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acd23baa800ee52cc82a51"
    text: {all what's left is to stick it into Emacs + Xiki Red IDE ;)^/http://xiki.org/}
    sent: "2017-02-21T23:50:19.200Z"
    editedAt: "2017-02-21T23:51:25.099Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58acd1bdaa800ee52cc82765"
    text: {as for documentation, I really like Clojure Atlas idea: http://www.clojureatlas.com/}
    sent: "2017-02-21T23:48:13.782Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58acd0687ceae5376a1fc011"
    text: {Is there a diagram of Red/Rebol type hierarchy btw?}
    sent: "2017-02-21T23:42:32.897Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58accdf8de50490822fa975c"
    text: {I've found that it's easier to treat datatypes as an indication of what sort of stuff you're allowed to do with some value. So, `series!` indicates that you can traverse it, reverse, append, etc. `number!` means that you can do math, `datatype!`... hm, this is a tough one... type-casting maybe?}
    sent: "2017-02-21T23:32:08.026Z"
    editedAt: "2017-02-21T23:34:34.134Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58accbef21d548df2c3e5432"
    text: {Yeah. I like to learn by comparing things to what I already know, and it isn't going smoothly. }
    sent: "2017-02-21T23:23:27.924Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58accb5700c00c3d4f6da9c6"
    text: {@gltewalt you try yo guess things, this will not lead you anywhere, I have experience with very different languages but still had to learn Rebol/Red from scratch}
    sent: "2017-02-21T23:20:55.216Z"
    editedAt: "2017-02-21T23:21:12.534Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58acc9de1465c46a56976984"
    text: {I read that Common Lisp had that characteristic, back when I was learning some of that. They said that they just built what they needed as they needed it. ^/I'm not sure how true it was. }
    sent: "2017-02-21T23:14:38.901Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acc8e0f045df0a2279f1c3"
    text: {We build just what we need. Or have in our Rebol past. Red is changing that mindset, but it will take time.}
    sent: "2017-02-21T23:10:24.713Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc889de50490822fa7b57"
    text: {Ironically, even though we can build all kinds of tools, we, as a community, haven't. There's something about the way we work, the scope we work in, and the kind of thinking Red encourages that seems to have kept us from building tools we see for other languages.}
    sent: "2017-02-21T23:08:57.760Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc801de50490822fa7810"
    text: {Red will let us do all kinds of things. For example, we can have a site/tool where you say "list all the funcs that take a string as their first arg, and return a string", or "funcs that take 3 args that are ..."}
    sent: "2017-02-21T23:06:41.351Z"
    editedAt: "2017-02-21T23:06:59.920Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc7377ceae5376a1f8eea"
    text: "Just start with simple things."
    sent: "2017-02-21T23:03:19.071Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58acc6e2de50490822fa72d4"
    text: {what-takes? is a compelling idea. To my beginning brain. }
    sent: "2017-02-21T23:01:54.392Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acc67e21d548df2c3e35d7"
    text: {Every value has its datatype. There are no keywords, no variables.}
    sent: "2017-02-21T23:00:14.412Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58acc64321d548df2c3e347f"
    text: "And `typeset!` is, of course, a datatype itself. "
    sent: "2017-02-21T22:59:15.587Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc62200c00c3d4f6d8802"
    text: {If you look at the datatypes, you won't see an `any-block!` type. That's a typeset that groups other types. }
    sent: "2017-02-21T22:58:42.807Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc527de50490822fa6916"
    text: "You propose grouping by behaviour ?"
    sent: "2017-02-21T22:54:31.872Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acc50e21d548df2c3e2e86"
    text: {You can also use `help` on datatypes that are typesets, and it will list all the types in that set. e.g. `? series!`.}
    sent: "2017-02-21T22:54:06.592Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc4ee872fc8ce62683948"
    text: "? tuple!"
    sent: "2017-02-21T22:53:34.731Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acc4ca21d548df2c3e2d38"
    text: "I just saw your last entry"
    sent: "2017-02-21T22:52:58.465Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acc4abaa800ee52cc7e1dc"
    text: "What is the opposite of that?"
    sent: "2017-02-21T22:52:27.881Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc4981465c46a56974ae8"
    text: "Can we do the opposite of that?"
    sent: "2017-02-21T22:52:08.428Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acc47221d548df2c3e2bd4"
    text: {Not sure what you mean, but you can certainly do things like `? tuple!` and get a list of known words in the system. And what Bolek said.}
    sent: "2017-02-21T22:51:30.308Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc45ade50490822fa6563"
    text: "That is easy, you can use `type?` for it."
    sent: "2017-02-21T22:51:06.768Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58acc43421d548df2c3e2aa0"
    text: {I'm just thinking that it shouldn't be complicated to ask Red itself which words go with which datatype}
    sent: "2017-02-21T22:50:28.740Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acc429872fc8ce62683559"
    text: {Datatypes can be grouped by shared behavior, or what we call pseudo-types. Things like series!, any-string!, etc.}
    sent: "2017-02-21T22:50:17.580Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc3efaa800ee52cc7dca4"
    text: "Basically yes, but no ;)"
    sent: "2017-02-21T22:49:19.432Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58acc3e8872fc8ce626833cb"
    text: {No. A series of values. Some of those are, in turn, series, with which you can create nested structures.}
    sent: "2017-02-21T22:49:12.718Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc3af00c00c3d4f6d799b"
    text: "tree data structure"
    sent: "2017-02-21T22:48:15.860Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acc39d872fc8ce626831db"
    text: "And the language is basically a Tree?"
    sent: "2017-02-21T22:47:57.029Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acc331872fc8ce62682f5f"
    text: "Red script is series of values."
    sent: "2017-02-21T22:46:09.458Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58acc32a7ceae5376a1f7809"
    text: ";)"
    sent: "2017-02-21T22:46:02.450Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58acc2f61465c46a569741bc"
    text: "Dang. ;^^)"
    sent: "2017-02-21T22:45:10.759Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc2e921d548df2c3e2023"
    text: "Value"
    sent: "2017-02-21T22:44:57.672Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acc2e3872fc8ce62682e42"
    text: "`value!`"
    sent: "2017-02-21T22:44:51.974Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58acc1f9872fc8ce6268284f"
    text: "Is there one type that is the root type? word! ?"
    sent: "2017-02-21T22:40:57.454Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58acbbde21d548df2c3df3ad"
    text: {I think it's similar, but supports inheritance via a list of ancestor prototypes.}
    sent: "2017-02-21T22:14:54.229Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58acbb1cde50490822fa2eb7"
    text: {@greggirwin I've heard very good things about io's object system, wonder what's the difference with Self}
    sent: "2017-02-21T22:11:40.437Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58acba8b7ceae5376a1f3ddb"
    text: {Yes, the object system is prototype based, like Self, and Carl noted that influence. He also said the heritage for the language design was primary Lisp, Forth, and Logo.}
    sent: "2017-02-21T22:09:15.260Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58aca3aade50490822f9a075"
    text: "More like Lisp + Self"
    sent: "2017-02-21T20:31:38.364Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ac8e86872fc8ce6266dc16"
    text: "Thanks @rebolek. "
    sent: "2017-02-21T19:01:26.586Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ac8875567b0fc8138e38bb"
    text: {I am in contact with http://www.red-by-example.org/ guys to use their data, it is wonderful resource.}
    sent: "2017-02-21T18:35:33.671Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ac878afef1d2de52ab0035"
    text: {But it shows what is possible with Red (under development).}
    sent: "2017-02-21T18:31:38.430Z"
    editedAt: "2017-02-21T18:31:54.948Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ac872ffef1d2de52ab0031"
    text: {So it is not exactly the easiest thing to run right now, sorry :)}
    sent: "2017-02-21T18:30:07.987Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58ac86949eb1bd81481d908a"
    text: {Also it needs Rich Text Dialect (everything is in that branch) that currently outputs custom Draw code. It is going to be rewritten with `text-box!`.}
    sent: "2017-02-21T18:27:32.601Z"
    editedAt: "2017-02-21T18:28:03.061Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ac86369eb1bd81481d9088"
    text: {It needs STYLIZE that I hope would be part of 0.6.2.}
    sent: "2017-02-21T18:25:58.221Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ac85e2567b0fc8138e3887"
    text: {@greggirwin it is bit hard to use now. You can get it here: https://github.com/rebolek/gritter/blob/stylize/helpr.red , but let me explain }
    sent: "2017-02-21T18:24:34.983Z"
    editedAt: "2017-02-21T18:32:13.872Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ac82d2de50490822f8cd81"
    text: {@geekyi, searching for strings in specs, yes, thanks!^/^/@bolek, I already forgot about `helpr`. Where is it? I don't see it on your github or http://red.qyz.cz/.^/^/Rebol/Red heritage comes from Lisp+Forth+Logo. At the core, we have both blocks and words. As @9214 says, it's about molding it to be what you want. For deep work, knowing how bindings and contexts operate is important, but you can do a lot without that.}
    sent: "2017-02-21T18:11:30.017Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ac8165f045df0a22784374"
    text: {In lisp there is a distinction but that distinction is not present in rebolville}
    sent: "2017-02-21T18:05:25.212Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ac7d08de50490822f8a787"
    text: {Everything is code and data at all times, no decision needs to be made}
    sent: "2017-02-21T17:46:48.785Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ac7cfd872fc8ce62666987"
    text: {> @WildYorkies language is homoiconic (you decide what is code and what is data)}
    sent: "2017-02-21T17:46:37.374Z"
    editedAt: "2017-02-21T17:46:47.089Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ac7c71de50490822f8a3fa"
    text: {In my point of view, Rebol/Red pushes you to do things with bottom-up approach, creating programs which looks like mini-languages for a specific subsets of problems they solve.^/^/So, instead of asking "What's that mean?" you should ask "What I want it to be?" => you should create your own contexts for solutions, not trying to squeeze in an existing paradigm. ^/That's because syntax is freeform (you decide how to write your code) and language is homoiconic (you decide what is code and what is data); there's free range in valuation (yep, you define the boundaries), oh,  and there's beautiful `parse` (you define the meaning of things). IMO, It's about program designer, not language design ;)^/^/Feels like Lisp + Forth (though I don't know Forth that much to clarify, but you definetly can feel Lisp-vibes with your heart, ain't ya?)}
    sent: "2017-02-21T17:44:17.126Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ac730f872fc8ce62662119"
    text: {@WildYorkies it's all about series of values inside contexts, I think. Heavy emphasis on dialects (DSL), parsing, and data exchange.}
    sent: "2017-02-21T17:04:15.879Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ac692d00c00c3d4f6b0489"
    text: {:point_up: [February 21, 2017 12:21 PM](https://gitter.im/red/red?at=58abea8700c00c3d4f67e1dc) @greggirwin ^/> ```^/red>> what-takes? string!^/```^/^/`? "string!"` works more or less as you want in this case:^/```^/what-takes?: func [x [datatype!]] [print fetch-help append form x #"!"]^/```}
    sent: "2017-02-21T16:22:05.097Z"
    editedAt: "2017-02-21T16:22:12.554Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58ac48c1f045df0a2276bd02"
    text: {@pekr [Rebol Core 2.3 manual](http://www.rebol.com/docs/core23/rebolcore.html) is must read for anyone thinking about working with Red.}
    sent: "2017-02-21T14:03:45.321Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ac47f8872fc8ce6264d84f"
    text: {@WildYorkies you have to use C as Rebol is implemented in it. (i.e. it's an implementation detail) . In Red there are plans for a design for user types (which would be implemented in Red/System)}
    sent: "2017-02-21T14:00:24.306Z"
    editedAt: "2017-02-21T14:02:06.562Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58ac47c9aa800ee52cc49325"
    text: {You could also say a `block!` is more fundamental.. (common?) which is a subset of a series}
    sent: "2017-02-21T13:59:37.272Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ac47867ceae5376a1c0d95"
    text: {@pekr I was getting to that :p (still it is debatable if you can settle on just series! at least for me)}
    sent: "2017-02-21T13:58:30.815Z"
    editedAt: "2017-02-21T14:04:39.317Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58ac477bde50490822f72964"
    text: {I still think Rebol Core 2.3 manual does a good job in that regard}
    sent: "2017-02-21T13:58:19.888Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ac4769f045df0a2276b433"
    text: {@geekyi the datatype or concept, which should Rebol users learn to master, is a series imo ...}
    sent: "2017-02-21T13:58:01.426Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ac472baa800ee52cc48efe"
    text: {> You know depending on the design of the language. If everything is an object, you are doing `a.+(b)`. If you're in a functional language, you are doing `(+) a b`. ^/^/The *design* of Rebol is to make both of those possible if you really want, is what I've understood}
    sent: "2017-02-21T13:56:59.632Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ac4707aa800ee52cc48e64"
    text: {Can you even make custom datatypes in rebol? If you can, then the datatype itself would be very important to understand}
    sent: "2017-02-21T13:56:23.546Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ac46c8de50490822f725ce"
    text: {I've not found such a construct in Rebol unfortunately.. which may be a good thing from a different perspective}
    sent: "2017-02-21T13:55:20.298Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ac464621d548df2c3ac316"
    text: {@WildYorkies ^/> @greggirwin the most confusing part is understanding the underlying paradigm or structure at the core of the language. In Ruby, everything is an object. In Haskell, you have types and functions that operate with them. In Lisp (and REBOL?) you have lists that reduce^/^/I know where you're coming from. One of the easiest ways to *grok* a new language is to learn the *fundamental datatype* of the language. Like *lists* in haskell and lisp. *Objects* in most mainstream languages. *Arrays* in APL and MATLAB}
    sent: "2017-02-21T13:53:10.542Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ac45cef045df0a2276ab18"
    text: {@WildYorkies  http://red-by-example.org/ is great resource and I really want to help Arie and Mike to make it much better. Having an API where you could pull one word's help, etc. could really improve it. Also - user editable tags, comments, examples, ... This is is great thing already and I believe we can make it better together.}
    sent: "2017-02-21T13:51:10.400Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ac3f9e7ceae5376a1bdbb4"
    text: {It looks like http://red-by-example.org/ has words/functions grouped into categories already}
    sent: "2017-02-21T13:24:46.312Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ac3f4121d548df2c3a967b"
    text: {>How do we create useful docs without overwhelming the user?^/^/I believe it would be far more useless to _not_ have organized docs. I'm just thinking about what a modern developer expects. The first two things would be organized docs and an ecosystem of libraries that they can re-use}
    sent: "2017-02-21T13:23:13.731Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58abed1221d548df2c38b251"
    text: {I guess you've seen my `helpr` script, which is similar to Word Browser. It is missing categories that must be added manually, but OTOH has interactive examples.}
    sent: "2017-02-21T07:32:34.264Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58abeb60de50490822f51c4b"
    text: {We can also re-implement the Rebol Word Browser, which required tagging things, but was a nice interactive exploration tool. We could combine that with the above. Sadly, I have far more ideas and half-baked notions than time allows me to pursue. }
    sent: "2017-02-21T07:25:20.447Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58abea8700c00c3d4f67e1dc"
    text: {@WildYorkies, it would be great to have comprehensive documentation, but it will also be a *huge* undertaking. Coming back to your original question, how is it best to do that? As @PeterWAWood  said, there is a lot of polymorphism, and new functions may be added that a type knows nothing about. Add typesets and varying behaviors and you get the usual combinatorial explosion of possibilities. How do we create *useful* docs without overwhelming the user? ^/Because of Red's reflective capabilities, one way would be to enhance the help functions, so you can just ask what funcs take an arg of type X. e.g.:^/```^/red>> what-takes? string!^/a-an           ^/charset        ^/checksum       : Computes a checksum, CRC, hash, or HMAC^/clean-path     : Cleans-up '.' and '..' in path; returns the cleaned path^/debase         : Decodes binary-coded string (BASE-64 default) to binary value^/...^/```^/I'll have to put more work into my quick hack on this (which produced the above) to make it useful, but the concept is the idea.}
    sent: "2017-02-21T07:21:43.780Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58abb8bcaa800ee52cc19f27"
    text: "Sorry, Peter. Just noticed your embedded link. "
    sent: "2017-02-21T03:49:16.162Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58abb886aa800ee52cc19c63"
    text: "http://www.rebol.com/docs/dictionary.html"
    sent: "2017-02-21T03:48:22.524Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab9ec4872fc8ce62615b00"
    text: {@WildYorkies Values in Red are not objects, they do not have associated functionality or properties (except in rare cases such as image! providing a size property and date!/time! having "methods") [The creator of Rebol, Carl Sassenrath, always said Rebol was a pragmatic language not a purist one.]^/^/Most Red functions are polymorphic and can be used with most datatypes. The [Rebol Function Dictionary](http://www.rebol.com/docs/dictionary.html) gives a brief description of the standard Rebol functions. The majority of these are already implemented in the current Red alpha, there are some differences from Rebol. ^/}
    sent: "2017-02-21T01:58:28.908Z"
    editedAt: "2017-02-21T01:58:54.289Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58ab9bc421d548df2c374b3f"
    text: {@PeterWAWood Most of the datatypes documented there in Rebol only show how to write the types and how to create them with to-type functions. I would expect to see more ways to operate on them in the documentation. For example, with the File type, why doesn't it show functions for open and close. For Strings, why doesn't it show functions for substring, or capitalize, etc?}
    sent: "2017-02-21T01:45:40.248Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab9444872fc8ce626132f7"
    text: {@WildYorkies There isn't any Red specific document on datatypes yet. I would guess that it will only be written when Red get close to beta status. In the meantime, [Rebol values](http://www.rebol.com/docs/core23/rebolcore-16.html) covers the same fundamentals and 90% of the details are the same as Red. Not all of those datatypes are implemented in the current Red alpha (e.g. port!, date!, money!), decimal! is float! in Red, Rebol doesn't have map! or vector!. }
    sent: "2017-02-21T01:13:40.345Z"
    editedAt: "2017-02-21T01:14:13.209Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58ab777d00c00c3d4f65d94d"
    text: {Are there any examples of documented datatypes?  Like a really good example?}
    sent: "2017-02-20T23:10:53.292Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab69adaa800ee52cc03990"
    text: {@opsaaspo To just "get it working you need to change two files" - red/system/runtime/lib-names.reds & red/system/runtime/libc.reds.^/^/In the first you need to add an entry for ld-linux in the "default" section.  Call it something like LIBLD. In the second you need to add an import section for LIBLD. Then move the dlopen entries  (and other functions in ld-linux) from the LIBC import to the LIBLD import.}
    sent: "2017-02-20T22:11:57.644Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58ab6829aa800ee52cc02f86"
    text: "Yes, by documenting datatypes."
    sent: "2017-02-20T22:05:29.351Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab672af045df0a22726f50"
    text: {And also leads to how to effectively document Red }
    sent: "2017-02-20T22:01:14.849Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab66a7de50490822f2c659"
    text: {An excellent question, which leads to what you need to know to use Red effectively: how datatypes behave.}
    sent: "2017-02-20T21:59:03.354Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab65ba00c00c3d4f6576f8"
    text: {@greggirwin once you see that something is a tuple, what knowledge does that bring you? Is a tuple an object that you can do things with? How do you know what you can do to a tuple?}
    sent: "2017-02-20T21:55:06.307Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab63f2de50490822f2b799"
    text: {> what is `a + b`? is it a plus b? does it send message `+ b` to a? is it a command which wipes your hard drive?^/^/You know depending on the design of the language. If everything is an object, you are doing `a.+(b)`. If you're in a functional language, you are doing `(+) a b`. }
    sent: "2017-02-20T21:47:30.619Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab63487ceae5376a176a12"
    text: {Free ranging evaluation is another thing that throws people at first.}
    sent: "2017-02-20T21:44:40.526Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab624a872fc8ce62603eda"
    text: {Conversely, it is abundantly clear in Redbol when something is a tuple, file, money, date, time, or other value type with a literal form. Comes back to thinking in terms of data first. Another good point you can include in your beginner's doc (or gist for notes) is that the universal path syntax is an important design element.}
    sent: "2017-02-20T21:40:26.297Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab6212f045df0a22724f40"
    text: "not the language"
    sent: "2017-02-20T21:39:30.697Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ab620921d548df2c3630de"
    text: "interpreter defines what is what"
    sent: "2017-02-20T21:39:21.169Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ab61e51465c46a568f36e4"
    text: {what is `a + b`? is it a plus b? does it send message `+ b` to a? is it a command which wipes your hard drive?}
    sent: "2017-02-20T21:38:45.937Z"
    editedAt: "2017-02-20T21:39:45.865Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ab61a17ceae5376a176308"
    text: {@WildYorkies you newer can tell what is what, lisp/rebol just brings this to the surface and lets you use this}
    sent: "2017-02-20T21:37:37.581Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ab611221d548df2c362b1a"
    text: {rebol has the same learning curve as LISP where you can't immediately tell what is what.}
    sent: "2017-02-20T21:35:14.665Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab60f9872fc8ce62603673"
    text: {The trickiest part about rebol from a beginner's perspective is parsing the code that you're looking at. In other languages it is abundantly clear what words are objects and what words are functions/methods because of the semantic markers}
    sent: "2017-02-20T21:34:49.576Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab60c8de50490822f2a520"
    text: {<unhide> @WildYorkies check your personal messages more links there <hide>}
    sent: "2017-02-20T21:34:00.682Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58ab60a51465c46a568f301b"
    text: {I do have some things started, using various books as models. }
    sent: "2017-02-20T21:33:25.736Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab6061aa800ee52cbffa94"
    text: {The old R2 core guide did a great job, I think: http://www.rebol.com/docs/core23/rebolcore.html}
    sent: "2017-02-20T21:32:17.500Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab5ffb21d548df2c36227c"
    text: {How do we describe that moment, or what you understand after it, without any prior experience? Yet, with experience from things that are very different.}
    sent: "2017-02-20T21:30:35.274Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58ab5fc2872fc8ce62602e6f"
    text: {Your question makes my point. If we just say "Everything is data." it doesn't really help. I think most Rebolers and Reducers I know used it for some time before having their *Aha!* moment.}
    sent: "2017-02-20T21:29:38.653Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab5f2721d548df2c361e04"
    text: {I think it helps to understand that Rebol was designed as a messaging language, for the exchange of information between people and machines. It just so happens that part of that process is describing what to do with the information, as well as representing it.}
    sent: "2017-02-20T21:27:03.705Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab5f147ceae5376a174fe8"
    text: {@greggirwin To put it a different way, how would documentation look in a language where everything is data? For example, look at the elixir docs https://hexdocs.pm/elixir/Integer.html#to_string/1^/^/You have modules like Integer and a bunch of related functions inside the modules.^/^/In Red docs, you would have... data?}
    sent: "2017-02-20T21:26:44.957Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab5ee5872fc8ce62602942"
    text: {You can use it like an OOPL. You can also use it like an FPL. Prototype based and not pure, but you could build those if you want. One key is that is it what you want it to be. With full disclosure you find it's not truly those things at all.}
    sent: "2017-02-20T21:25:57.956Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab5e75f045df0a22723bb7"
    text: {Yes, the hard part is that the intro book might be "Everything is data. Sometimes it's evaluated." in its entirety. :^^) But that doesn't make any sense when start out.}
    sent: "2017-02-20T21:24:05.946Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab5e45872fc8ce6260256c"
    text: {Everything starts to click if you can grasp the fundamental idea, right? But in REBOL and Red, you have objects, but it's not OOP. You have functions, but it's not functional programming.}
    sent: "2017-02-20T21:23:17.255Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab5e1a872fc8ce6260247b"
    text: {@greggirwin the most confusing part is understanding the underlying paradigm or structure at the core of the language. In Ruby, everything is an object. In Haskell, you have types and functions that operate with them. In Lisp (and REBOL?) you have lists that reduce}
    sent: "2017-02-20T21:22:34.824Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab5cef00c00c3d4f65406c"
    text: {@dockimbel Thanks for your advice. Unfortunately , I'm not experienced in "changing importing declaration for dlopen and etc." Could you please explain how it should be done?}
    sent: "2017-02-20T21:17:35.336Z"
    v: 1
    author: "5894d968d73408ce4f47ee68"
) #(
    id: "58ab5ac37ceae5376a1735bc"
    text: "Yup. That sudden drop off into the deep end."
    sent: "2017-02-20T21:08:19.601Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab5a4421d548df2c35fba9"
    text: {Deep diving into semantics would arguably be more important. Semantics have been where I've had the "what the heck?" moments}
    sent: "2017-02-20T21:06:12.537Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab5a2ff045df0a22721dc9"
    text: {Not sure how much effort we want to put into "core mechanisms" though, since that will be subject to change more than high level features and language design.}
    sent: "2017-02-20T21:05:51.358Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab59e7872fc8ce62600acc"
    text: {I love small books. My entire series is called "ALL Things - A Lot of Little Things". :^^)}
    sent: "2017-02-20T21:04:39.453Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab592e00c00c3d4f652aa7"
    text: {I'd like to see a book in the style of You Don't Know JS}
    sent: "2017-02-20T21:01:34.599Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab58d200c00c3d4f652889"
    text: {There are general resources, but no transition book in the works that I know of. It comes up periodically, as it did through the years with Rebol. The most common advice is to just use it. Yes, I know, it helps to have guides that orient you.  And any Rebol2 resources are largely valid from a language design standpoint, at least for the interpreter and fundamentals. Only Red has a full cross compiler, macros, and more. ^/^/This brings me to your offer of help. Yes! OK, you'll be helping by starting it, but if you see the need, let's get it rolling. People new to Red have the best perspective on what new people need. And how best to explain things, or what to cover, depend on the environment and language you're coming *from*. When I found Rebol, I started a "Rebol for VB Programmers" idea, including mezzanines to provide familiar functions.^/^/}
    sent: "2017-02-20T21:00:02.371Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab42ff1465c46a568e6d54"
    text: {I guess this is the closest thing? http://redprogramming.com/Getting%20Started.html^/^/Just wondering if anyone is looking for help}
    sent: "2017-02-20T19:26:55.763Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58ab4059aa800ee52cbf365f"
    text: {hey all, is there a book in the works to teach red-lang to people that have already programmed in more conventional languages?}
    sent: "2017-02-20T19:15:37.373Z"
    v: 1
    author: "581a1e32d73408ce4f332476"
) #(
    id: "58a8bd7f0ad50ac315336514"
    text: "@dockimbel weird."
    sent: "2017-02-18T21:32:47.064Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58a87be821d548df2c27e505"
    text: "Thanks @dander!"
    sent: "2017-02-18T16:52:56.058Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a81aab00c00c3d4f556818"
    text: {@dander I updated my repo's readme, clarifying that it uses libRed built with stdcall calling convention. }
    sent: "2017-02-18T09:58:03.545Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58a7f458de50490822e28330"
    text: {@Skrylar I get na `undefined word rake` compilation error from the source code you provided.}
    sent: "2017-02-18T07:14:32.414Z"
    editedAt: "2017-02-18T07:15:44.676Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a7d2d021d548df2c25049a"
    text: {For just playing around with things, LINQPad is nice as a demo though, because you don't need all the Visual Studio / msbuild / .NET SDK stuff}
    sent: "2017-02-18T04:51:28.466Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58a7d271f045df0a22619489"
    text: {@greggirwin I certainly don't mind. I mostly posted that because I was impressed at how trivial it was to do... And I didn't even realize, until I saw @koba-yu 's example, that I didn't need to specify the calling convention. Probably the ideal situation would be to have a nice dotnet core library wrapper that includes all the libRed calls, plus some convenience methods for converting certain data types that could be published as a NuGet package. @koba-yu 's project could be a good start for that.}
    sent: "2017-02-18T04:49:53.897Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58a7ade5de50490822e1815e"
    text: "Thanks!"
    sent: "2017-02-18T02:13:57.344Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a7a2741465c46a567d545c"
    text: {@greggirwin Sure. I hope it helpful for someone...}
    sent: "2017-02-18T01:25:08.485Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58a7942dde50490822e121a4"
    text: {Here's an example of calling libRed from Ruby using the FFI Gem. I ran it on Ubuntu32 as I haven't found the correct combination of 32-bit Ruby and the FFI Gem on macOS yet.^/^/```ruby^/require 'ffi'^/^/module RubyRed^/  extend FFI::Library^/  ffi_lib "./libRed.so"^/  attach_function :redOpen, [], :void^/  attach_function :redClose, [], :void^/  attach_function :redDo, [ :string ], :pointer^/end^/^/RubyRed::redOpen^/RubyRed::redDo "print {Hello Ruby, I'm Red}"^/RubyRed::redClose^/``` }
    sent: "2017-02-18T00:24:13.311Z"
    editedAt: "2017-02-18T00:25:28.800Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a793ec00c00c3d4f536c8c"
    text: {@greggirwin Sounds a good idea to have a libRed wiki page.}
    sent: "2017-02-18T00:23:08.721Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a75685f045df0a225f6dec"
    text: {@PeterWAWood @dockimbel, should we have a libRed or bindings wiki page? If so, @dander @koba-yu may we link to your examples from there?}
    sent: "2017-02-17T20:01:09.580Z"
    editedAt: "2017-02-17T20:02:02.433Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a706d5de50490822de0a23"
    text: "Thanks a lot ..."
    sent: "2017-02-17T14:21:09.251Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58a706cd1465c46a5679dd4c"
    text: { https://gitter.im/red/red?at=56ac45a1586242210ae0704d}
    sent: "2017-02-17T14:21:01.893Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58a706a3f045df0a225d71ea"
    text: {@pekr  It is a fundamental change and as such would require a lot of time for implementing it. @dockimbel  had once described what all needs to be done in this room, I will try to find it and link it here.}
    sent: "2017-02-17T14:20:18.983Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58a6f911872fc8ce624a786b"
    text: {Guys, what is needed for Red to support 64bit? Is it just a cosmetic change, which needs to be scheduled and not so much important right now, or is that a fundamental change, which is needed? }
    sent: "2017-02-17T13:22:25.788Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58a6db129eb1bd81481d237f"
    text: "@PeterWAWood nice!"
    sent: "2017-02-17T11:14:26.145Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58a6daa41465c46a5678de68"
    text: {it also feels that I'm missing some theoretical knowledge on this part, feel free to point me to related readings}
    sent: "2017-02-17T11:12:36.967Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a6d9bbaa800ee52ca9adce"
    text: {I checked this https://github.com/red/red/blob/master/system/formats/ELF.r and format doesn't seem to depend on target OS}
    sent: "2017-02-17T11:08:43.789Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a6d98f21d548df2c1fd633"
    text: {how does that affect compiler, how does ABI affect format of binaries?}
    sent: "2017-02-17T11:07:59.998Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a6d947f045df0a225c7500"
    text: {Hi guys, I have a question regarding compilation, so don't have experience in compilers & linkers, I want to add one more target OS for Red's compiler, the OS uses ELF format, which is already supported, but standard library, syscalls and ABI are different}
    sent: "2017-02-17T11:06:47.840Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a6d69821d548df2c1fc4eb"
    text: {I was able to write, compile and run a simple C program that calls libRed on macOS. As libRed is 32-bit, I had to use gcc to compile the program so that it could call libRed. I thought that I post it here in case anybody else wants to try.^/^/Here's the code in file red-in-c:^/```c^/#include "<path to>/libRed/red.h"^/^/int main(int argc, const char * argv[]) {^/    redOpen();^/    redDo("print {Hello Red}");^/    redClose();^/    return 0;^/}^/```^/^/Here's the command to compile it:^/```text^/$ gcc -m32 <path to>/libRed.dylib -o red-in-c red-in-c.c^/```^/}
    sent: "2017-02-17T10:55:20.720Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a6c8c4de50490822dcbbcd"
    text: {@dockimbel It will be useful. I will be able to test it on my linux installation :).}
    sent: "2017-02-17T09:56:20.446Z"
    v: 1
    author: "5894d968d73408ce4f47ee68"
) #(
    id: "58a6c7f9aa800ee52ca94784"
    text: {@opsaaspo No, I mean changing the importing declaration for `"dlopen"`, and all the other related functions.}
    sent: "2017-02-17T09:52:57.655Z"
    editedAt: "2017-02-17T09:53:32.931Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a6c7cd872fc8ce624970f4"
    text: {@dockimbel Do you mean add into red.r  code like this ?^/```^/...^/exists? libc: %/lib/ld-linux.so.2^/...^/```}
    sent: "2017-02-17T09:52:13.166Z"
    v: 1
    author: "5894d968d73408ce4f47ee68"
) #(
    id: "58a6c39d0ad50ac31529a376"
    text: {@dander 　^/I also wrote some codes in C# ^/https://github.com/koba-yu/LibRedSharp^/It is not tested much, so I am not sure all API import works but feel free to copy if you use.}
    sent: "2017-02-17T09:34:21.874Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58a6c2be1465c46a56785cf3"
    text: "@dander Nice! ;-)"
    sent: "2017-02-17T09:30:38.560Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a6c29b00c00c3d4f4e98f6"
    text: {@opsaaspo It seems that on your platform, `dlopen()` is located in ld-linux.so instead of libc.so, as in most Linux distros. Red imports it from libc by default. You can change that in the sources to make it work on your distro. We might add a compilation option to let the user configure it more easily.}
    sent: "2017-02-17T09:30:03.445Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a6c1e0872fc8ce62494eec"
    text: {I figure this has already been done, but I just wanted to say that I started reading some of the libRed docs, and it turned out to be really easy for me to get to the "hello world" point calling red from C#. Here's my LINQpad script:^/https://gist.github.com/dander/a02c8837e12e70ec24396da3a18b1168}
    sent: "2017-02-17T09:26:56.525Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58a6be1400c00c3d4f4e81cc"
    text: {@dockimbel ^/```^/ldd /home/o/.red/console-2017-2-13-60590^/^-linux-gate.so.1 (0xf76e0000)^/^-libc.so.6 => /usr/lib32/libc.so.6 (0xf7518000)^/^-libm.so.6 => /usr/lib32/libm.so.6 (0xf74bf000)^/^-libcurl.so.4 => /usr/lib32/libcurl.so.4 (0xf7444000)^/^-/lib/ld-linux.so.2 (0xf76e2000)^/^-libnghttp2.so.14 => /usr/lib32/libnghttp2.so.14 (0xf741d000)^/^-libssh2.so.1 => /usr/lib32/libssh2.so.1 (0xf73ec000)^/^-libssl.so.39 => /usr/lib32/libssl.so.39 (0xf7395000)^/^-libcrypto.so.38 => /usr/lib32/libcrypto.so.38 (0xf71db000)^/^-libz.so.1 => /usr/lib32/libz.so.1 (0xf71c2000)^/^-libpthread.so.0 => /usr/lib32/libpthread.so.0 (0xf71a4000)^/```^/Add some later:^/```^/ls -la ld-linux.so.2 ^/lrwxrwxrwx 1 root root 19 Feb  6 11:52 ld-linux.so.2 -> ../lib32/ld-2.25.so^/```^/}
    sent: "2017-02-17T09:10:44.628Z"
    editedAt: "2017-02-17T09:14:27.816Z"
    v: 2
    author: "5894d968d73408ce4f47ee68"
) #(
    id: "58a6be03872fc8ce62493c88"
    text: {BTW, you can just invoke `red` executable, it will proxy the call to the compiled console.}
    sent: "2017-02-17T09:10:27.175Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a6bdcc872fc8ce62493b5a"
    text: {@opsaaspo What does a ldd report?^/```lisp^/ldd /home/o/.red/console-2017-2-13-60590^/```}
    sent: "2017-02-17T09:09:32.648Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a6bab70ad50ac3152970d1"
    text: {@PeterWAWood ^/>  Please could you show the command with which you tried to run Red and the actual error message.^/^/My output is here:^/```^/./red-13feb17-e06c7d2^/Compiling compression library...^/Compiling Red console...^//home/o/.red/console-2017-2-13-60590: symbol lookup error: /home/op/.red/console-2017-2-13-60590: undefined symbol: dlopen^/```^/FYI:  I've tried to run it on 32 and 64 bit version voidlinux. The error was the same. ^/}
    sent: "2017-02-17T08:56:23.105Z"
    editedAt: "2017-02-17T09:03:09.447Z"
    v: 5
    author: "5894d968d73408ce4f47ee68"
) #(
    id: "58a67edf21d548df2c1e129d"
    text: {Please could you show the command with which you tried to run Red and the actual error message.}
    sent: "2017-02-17T04:41:03.515Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a6078e21d548df2c1baa30"
    text: {Hello all, I've tried to run run on voidlinux (http://www.voidlinux.eu/) but got some error - .red/console-2017-2-13-60590: undefined symbol: dlopen). Could you give some help - what I've done wrong?}
    sent: "2017-02-16T20:11:58.466Z"
    v: 1
    author: "5894d968d73408ce4f47ee68"
)#(
    id: "58a569ae872fc8ce6241c577"
    text: {Nowhere that I know of, actually. Except the mention in this chat above.}
    sent: "2017-02-16T08:58:22.151Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58a55f29f045df0a22544ff1"
    text: {@dockimbel I notice that the Red header can contain a `config:` field. Where is the handling of that described??}
    sent: "2017-02-16T08:13:29.103Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58a5004821d548df2c15bedb"
    text: {@nicolas42 I thank you for the question, it helped me to write the article.}
    sent: "2017-02-16T01:28:40.719Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58a4dc6521d548df2c150830"
    text: "Thanks alot @rebolek!"
    sent: "2017-02-15T22:55:33.757Z"
    v: 1
    author: "56e49b9885d51f252ab87ee8"
) #(
    id: "58a48d4021d548df2c12fb96"
    text: "Done. Thanks Rudolf."
    sent: "2017-02-15T17:17:52.670Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a44f52f045df0a224e8d99"
    text: {From the comments on #2420 (I had asked how to find the tab-index of the selected tab inside a tab-panel):^/^/>After some tests, `on-select` would not be useful there (Windows OS does not provide any information for such event), `on-change` is enough anyway.^/^/>So to answer your query, in `on-change`, the `face/selected` property contains the previously selected tab index, while `event/picked` contains the new one.*^/^/I have an addition to make: if the previous and new tab-index are the same,`event/picked`is 0. Something for the guru meditations, perhaps.}
    sent: "2017-02-15T12:53:38.513Z"
    editedAt: "2017-02-15T13:01:20.544Z"
    v: 11
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58a4411921d548df2c10f9eb"
    text: {The long version of the code keeps a block with a reference object inside, then a sub-block of that is modified and the reference object is `copy/deep`'d as a silly way of making copies of an object with parts selectively modified without a lot of painful splicing code. It also seems to, well, freak Red out.}
    sent: "2017-02-15T11:52:57.773Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58a440b521d548df2c10f747"
    text: {Also it seems i need to fix that minimizer because it didn't quite get rid of ALL the irrelevant text :\}
    sent: "2017-02-15T11:51:17.084Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58a4408d00c00c3d4f4050d4"
    text: {```^/Red[]func[[]]mkinduction:[t d[]]mkagent: func[][#()][[]]subtrees: func[][candidates: make block! 2]-crossover-loop: func[e a s here][if here[-crossover-loop rake here/3: first subtrees reduce[copy/deep rake/1]]]crossover: func[t][trees: subtrees rake: reduce[t]-crossover-loop rake candidates trees t]learn: func[t induction /s][probe crossover induction]agent: mkagent^/learn agent mkinduction()^/```^/That is the output of my minimizer, it produces a segfault. The original code is a bit longer and does more stuff.}
    sent: "2017-02-15T11:50:37.318Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58a40b44872fc8ce6239f684"
    text: "@geekyi minimizer is running"
    sent: "2017-02-15T08:03:16.836Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58a3eeff872fc8ce62397247"
    text: "@Skrylar sample code or it didn't happen 😂😜 "
    sent: "2017-02-15T06:02:39.482Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58a3c2ab21d548df2c0e6baf"
    text: "@Skrylar How so?"
    sent: "2017-02-15T02:53:31.051Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a38b9300c00c3d4f3cc09e"
    text: { @geekyi @luminarious usually Chocolatey packages are wrapping an installer, which would do file extension registration. However, the red package just downloads the exe and shims it into the Path. It certainly could do that registration though if that is desirable}
    sent: "2017-02-14T22:58:27.624Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58a3851c00c00c3d4f3c957a"
    text: "I managed to break `copy/deep` ._."
    sent: "2017-02-14T22:30:52.091Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58a31d5821d548df2c0a60c1"
    text: {Please let me know your opinion/feedback about #2391, especially if your code relies on that `keep` feature.}
    sent: "2017-02-14T15:08:08.115Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a2d3e9238b1dae57094384"
    text: {@dockimbel looking at the Trello board for 0.6.2 - do you plan to move GUI stuff to some later release? Or in reverse - are Red/System and Red/Core features going to be added, or moved too, and we are mostly in a fixing stage period, not adding new stuff to 0.6.2 already?}
    sent: "2017-02-14T09:54:49.054Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58a2d3851465c46a5661c011"
    text: {@dockimbel ^/>the metadata accessors^/^/Good to hear you have something planned about this one}
    sent: "2017-02-14T09:53:09.969Z"
    editedAt: "2017-02-14T09:53:12.137Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a2d2d321d548df2c088cbd"
    text: {@luminarious does choco usually associate files? Can you give an example package which does that? }
    sent: "2017-02-14T09:50:11.516Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58a298baf045df0a2244f621"
    text: {FYI, thanks to ticket #2411, I realized that the preprocessor documentation about pattern-matching macros was outdated and not reflecting the way it works currently. I am rewriting those outdated parts right now. If you got stuck with such macros or experienced systematic freezing, the documentation is to blame for that. Sorry for the inconvenience.}
    sent: "2017-02-14T05:42:18.084Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a297f11465c46a56608bb2"
    text: {@maximvl ^/> is there any way to get all refinements of a word?^/> for example if I have image, can I find out properties names like `size` etc^/^/Only functions have refinements. Some datatypes are exposing some of their properties using path notation, which will be exhaustively described in the documentation for each datatype (once available). The list of such accessors might be exposed through the metadata accessors once implemented (`set-modes`, `get-modes`, ...).}
    sent: "2017-02-14T05:38:57.920Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a1e212238b1dae5703fd30"
    text: "What timing! :^^)"
    sent: "2017-02-13T16:42:58.233Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a1e2101465c46a565c884e"
    text: ":)"
    sent: "2017-02-13T16:42:56.871Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58a1e1fc00c00c3d4f32b8b4"
    text: {@luminarious on Windows you may use right-long-click on file you want to run and use `Open With` option to assosicate the extension with file.  At this moment there are 2 official REPL consoles for Red and one being developed in this branch https://github.com/qtxie/red/tree/red-console .}
    sent: "2017-02-13T16:42:36.196Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58a1e1f9f045df0a22411dda"
    text: {@luminarious, right-click on a `.red` file in Explorer. In the context menu, if there's an `Open With` command, choose that and select the "Always use this..." option after you browse to the Red exe. If that option isn't there, go to Properties and the General tab has an "Opens with:" setting. Details depend on Windows version.}
    sent: "2017-02-13T16:42:33.464Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a1d84a1465c46a565c4298"
    text: {Hey, can I ask a really basic question? Doing `choco install red` completed, but didn't actually associate *.red files with anything. Meanwhile, VSCode extension recommends F6 as the 'interpret file' command, but that just tries to open the .red file, assuming the association already works. I have, unfortunately, no experience with associating file extensions with command-line programs on Windows. How would I go about it?}
    sent: "2017-02-13T16:01:14.418Z"
    v: 1
    author: "552a4bf515522ed4b3dee179"
) #(
    id: "58a16b4b1465c46a5659a5e2"
    text: {`#if modules contains 'View [...]` .... English wise, it does not sound right, but that is first a minor point, second - a bit tricky situation. "modules contain" is right ... but then you can call "modules" e.g. "list", and voila `#if list contains 'View [...]` sounds correct :-)}
    sent: "2017-02-13T08:16:11.611Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58a16975aa800ee52c8a6789"
    text: {@gltewalt No problem, the blog post should have been more clear about that being a possible evolution, not a certain feature.}
    sent: "2017-02-13T08:08:21.888Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a16158238b1dae5700f03a"
    text: "That's cool. "
    sent: "2017-02-13T07:33:44.711Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a160f4de50490822befd40"
    text: {@gltewalt ^/```^/red>> O: 13^/== 13^/red>> _: :+^/== make op! [[^/    "Returns the sum of the two values" ^/    value1 [number! char! pair! tupl...^/red>> o: 37^/== 37^/red>> (O _ o)^/== 74^/```}
    sent: "2017-02-13T07:32:04.027Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58a160d3238b1dae5700edbe"
    text: "😞   sorry..."
    sent: "2017-02-13T07:31:31.732Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a15f38872fc8ce622aa0b8"
    text: {That blog post talks about *the upcoming #alias directive*, but that was never actually implemented. So in your above code, it is just an `issue!` value, with no effect.}
    sent: "2017-02-13T07:24:40.026Z"
    editedAt: "2017-02-13T07:25:27.811Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a15cb41465c46a565952a5"
    text: {Either that or my-int!: integer! will have the same effect without alias}
    sent: "2017-02-13T07:13:56.586Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a15c45238b1dae5700d4c3"
    text: {I saw from red-lang.org entry on objects that pseudo types could be made with alias. I didn't know that it could sort of work with types also. }
    sent: "2017-02-13T07:12:05.118Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a15b90f045df0a223dedd7"
    text: {@gltewalt What is `#alias` for in your code example?}
    sent: "2017-02-13T07:09:04.070Z"
    editedAt: "2017-02-13T07:09:13.463Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a15804238b1dae5700bd71"
    text: "@geekyi It is for the R/S preprocessor. "
    sent: "2017-02-13T06:53:56.012Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58a157a9872fc8ce622a7e83"
    text: {> ^/```lisp^/#if modules contains 'View [...]^/```^/^/ :point_up: [February 11, 2017 12:49 PM](https://gitter.im/red/red?at=589ec1fe6b2d8dd5522cabb5)^/Where does `contains` work?}
    sent: "2017-02-13T06:52:25.807Z"
    editedAt: "2017-02-13T06:52:32.076Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58a155f5aa800ee52c8a07fd"
    text: "😁"
    sent: "2017-02-13T06:45:09.582Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a1510521d548df2cffe82e"
    text: "these things happens every day in Redboland ;)"
    sent: "2017-02-13T06:24:05.001Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58a14a8fde50490822be9447"
    text: {You can do all sorts of fun things, which is very helpful when you start creating dialects.^/```^/red>> hashtag!: :issue!^/== issue!^/red>> hashtag?: :issue?^/== func ["Returns true if the value is this type" value [any-type!]][issue! = type? :value]^/^/red>> hashtag? #test^/== true^/red>> to hashtag! "test"^/== #test^/^/red>> blk: [#test]^/== [#test]^/red>> parse blk [hashtag!]^/== true^/```}
    sent: "2017-02-13T05:56:31.445Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a10206f045df0a223c7a14"
    text: {This is interesting.^/^/```^/red>> #alias my-int!: integer!^/== integer!^/red>> type? my-int!^/== datatype!^/red>> s: func [n [my-int!]] [ n ]^/== func [n [my-int!]][n]^/red>> s 1^/== 1^/red>> s 1.0^/*** Script Error: s does not allow float! for its n argument^/*** Where: s^/```^/}
    sent: "2017-02-13T00:47:02.967Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a02760de50490822b97848"
    text: "@dockimbel thanks for explanation!"
    sent: "2017-02-12T09:14:08.459Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ff449238b1dae57faa101"
    text: {@maximvl `load` is optimized for the common use-case, if the input string contains only one value, the value is returned directly instead of been wrapped in a block. `load/all` forces the wrapping block in all cases, when consistent result is needed.}
    sent: "2017-02-12T05:36:09.279Z"
    editedAt: "2017-02-12T05:36:34.893Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589ff3c2238b1dae57fa9fb1"
    text: {@gltewalt `help object!` does what it is supposed to do (list existing objects from global context), it's just that the output is unreadable. `help` needs to specifically format the output in that case. You can open a ticket for that.}
    sent: "2017-02-12T05:33:54.242Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589ff337de50490822b8bea0"
    text: {`tuple!` in Red and Rebol is a limited sequence of bytes (3 to 12 in Red, 3 to 10 in Rebol).}
    sent: "2017-02-12T05:31:35.171Z"
    editedAt: "2017-02-12T05:32:19.078Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589fd3f7872fc8ce62240065"
    text: "```^/#alias my-type!: object [ ... ]^/```"
    sent: "2017-02-12T03:18:15.547Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589fc0fb00c00c3d4f287762"
    text: {@maximvl ^/According to this blog post [0.5.4: New datatypes, exceptions and set operations](http://www.red-lang.org/2015/06/054-new-datatypes-exceptions-and-set.html),^/Seems there is a plan to extend tuple's value range.^/^/> We are considering for a future release, the option of extending the tuples with 3 or 4 elements to 16-bit values, as the internal storage space allow us to do so.}
    sent: "2017-02-12T01:57:15.804Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "589f8777aa800ee52c824d7f"
    text: {@maximvl  looks like help is inconsistent?  `help action!` `help routine!` ^/Those instances appear to emit the available actions and routines.^/`help object!` appears to dump the console source?^/}
    sent: "2017-02-11T21:51:51.776Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589f84b600c00c3d4f277bd1"
    text: {if you type `help object!` in the Red console, it looks like it dumps out the whole environment}
    sent: "2017-02-11T21:40:06.636Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589f7af621d548df2cf7f983"
    text: "Doesn't Bind create an object?"
    sent: "2017-02-11T20:58:30.639Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589f736df045df0a223602ef"
    text: {@geekyi yes, but the thing is you can traverse object's fields, but can't datatype like `image!`}
    sent: "2017-02-11T20:26:21.823Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "589f669e6b2d8dd5522fbc69"
    text: {@maximvl Also about the other thing, I think you mean `object!` traversal right?}
    sent: "2017-02-11T19:31:42.721Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589f666900c00c3d4f26f80d"
    text: "@maximvl multiple dispatch? `? action!`"
    sent: "2017-02-11T19:30:49.496Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589f53e11465c46a56508aa5"
    text: {@9214 I can, but I don't know all fields, I though of it as quick help for repl, like I use `help` for functions}
    sent: "2017-02-11T18:11:45.224Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589f5244de50490822b6543d"
    text: {@maximvl hm, can you wrap user-defined `object!` over `image!` ? Something like that:^/```^/foo: make my-image! [^/    image-src: ... ; image! goes here^/    width: ... ; could be calculated from image-src I suppose^/    height: ...^/    ...^/]^/```}
    sent: "2017-02-11T18:04:52.707Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "589efc9e1465c46a564edc29"
    text: "and there were ideas about user-defined ones"
    sent: "2017-02-11T11:59:26.142Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efc896b2d8dd5522db1fc"
    text: {@endo64 well, we will have new datatypes in the future, won't we?}
    sent: "2017-02-11T11:59:05.951Z"
    editedAt: "2017-02-11T11:59:13.196Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efc7021d548df2cf59d13"
    text: "yes"
    sent: "2017-02-11T11:58:40.316Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efc46de50490822b4c16e"
    text: {Then you probably mean for all datatypes. It is not a matter of being good enough it is a matter of being clear.}
    sent: "2017-02-11T11:57:58.912Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589efc286b2d8dd5522db0b4"
    text: "is this wording good enough for you?"
    sent: "2017-02-11T11:57:28.640Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efc1f872fc8ce62204602"
    text: {ok, to have one polymorphic function and have it's implementations for each datatype?}
    sent: "2017-02-11T11:57:19.327Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efc1f872fc8ce62204600"
    text: {I think only `image!`s is a special datatype. Others don't have those kind of properties like an image: /size, /alpha etc.}
    sent: "2017-02-11T11:57:19.137Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "589efbfade50490822b4c0a0"
    text: {Because you said to have a "polymorphic function for each datatype"}
    sent: "2017-02-11T11:56:42.809Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589efbdff045df0a2233d9e9"
    text: "image, char, string you name it"
    sent: "2017-02-11T11:56:15.724Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efbd2de50490822b4c036"
    text: {@PeterWAWood why single? I want it for all of them}
    sent: "2017-02-11T11:56:02.428Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efbc521d548df2cf59a43"
    text: {it's useful both now, while docs are not fully ready and then for introspection}
    sent: "2017-02-11T11:55:49.208Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efbbff045df0a2233d9a8"
    text: {Why would you need a polymorphic function for a single datatype?}
    sent: "2017-02-11T11:55:43.091Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589efb7e6b2d8dd5522dadf6"
    text: {@PeterWAWood ok, good, so what stops us from having polymorphic function for each datatype which will return it's defined properties?}
    sent: "2017-02-11T11:54:38.191Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efb50aa800ee52c7fa785"
    text: "Yes the functions are polymorphic."
    sent: "2017-02-11T11:53:52.096Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589efb496b2d8dd5522dad0f"
    text: "@endo64 thanks, didn't know about that one"
    sent: "2017-02-11T11:53:45.416Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efaf000c00c3d4f24fce7"
    text: {Otherwise we have to use `first` for many cases: `load "print" ; == print not [print]`}
    sent: "2017-02-11T11:52:16.316Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "589efac96b2d8dd5522daab2"
    text: {at leas this part of code shows this: https://github.com/red/red/blob/master/runtime/datatypes/char.reds#L132}
    sent: "2017-02-11T11:51:37.558Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efabdde50490822b4ba9f"
    text: {@PeterWAWood ok, look, there is a single implementation of `mold` function, but implementation of `mold` for `char` is different from `mold` of `number`, right?}
    sent: "2017-02-11T11:51:25.072Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efa811465c46a564ed2ad"
    text: {> guys, do you think this is inconsistent behaviour?^/```^/red>> load "1"^/== 1^/red>> load "1 2 3"^/== [1 2 3]^/``` ^/^/@maximvl  try using `/all` refinement:^/```^/red>> load/all "1"^/== [1]^/red>> load/all "1 2 3"^/== [1 2 3]^/```^/}
    sent: "2017-02-11T11:50:25.501Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "589efa6b1465c46a564ed271"
    text: {There is one implementation of the function which is bound to the word ```at```. }
    sent: "2017-02-11T11:50:03.385Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589efa2d6b2d8dd5522da611"
    text: {@PeterWAWood ok, but each series can have it's own implementation of `at`, right?}
    sent: "2017-02-11T11:49:01.109Z"
    editedAt: "2017-02-11T11:49:17.955Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589efa02aa800ee52c7fa2ac"
    text: "```at``` is a function"
    sent: "2017-02-11T11:48:18.069Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589efa011465c46a564ed0d6"
    text: "or bytes"
    sent: "2017-02-11T11:48:17.733Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ef9efaa800ee52c7fa226"
    text: "tuples can be of any type, not just colors"
    sent: "2017-02-11T11:47:59.461Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ef9e000c00c3d4f24f926"
    text: {@endo64 yep, so my question is why limit ourselves with 255?}
    sent: "2017-02-11T11:47:44.608Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ef9c2de50490822b4b7f8"
    text: "or all series have `at`"
    sent: "2017-02-11T11:47:14.407Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ef9b3872fc8ce622039e7"
    text: {@PeterWAWood well, I mean like all images have `size`}
    sent: "2017-02-11T11:46:59.839Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ef99d21d548df2cf58eac"
    text: {would be nice to have for introspection & live IDE}
    sent: "2017-02-11T11:46:37.505Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ef99af045df0a2233d0d0"
    text: {"255.256.0" is evaluated as tuple and 256 is invalid in a tuple.}
    sent: "2017-02-11T11:46:34.302Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "589ef985de50490822b4b6ad"
    text: "Datatypes don't have refinements."
    sent: "2017-02-11T11:46:13.421Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589ef96df045df0a2233d08d"
    text: {isn't it possible to add a refinement for each datatype to return list of all it's refinements?}
    sent: "2017-02-11T11:45:49.147Z"
    editedAt: "2017-02-11T11:46:09.024Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ef9421465c46a564ecded"
    text: {@endo64 well, you know that the state of the docs for now is so-so}
    sent: "2017-02-11T11:45:06.748Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ef908aa800ee52c7f9ee3"
    text: {@maximvl "refinements of a word" this is only possible for functions, otherwise you should find them in docs or in the sources.}
    sent: "2017-02-11T11:44:08.142Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "589eeecc872fc8ce62200a1a"
    text: {for example if I have image, can I find out properties names like `size` etc}
    sent: "2017-02-11T11:00:28.511Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589eee9f6b2d8dd5522d7620"
    text: {is there any way to get all refinements of a word?}
    sent: "2017-02-11T10:59:43.329Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589eeca421d548df2cf556b6"
    text: {integers more than `255` seem not allowed in tuples:^/```^/red>> 255.255.0^/== 255.255.0^/red>> 255.256.0^/*** Syntax Error: invalid float! at "255.256.0"^/*** Where: do^/```}
    sent: "2017-02-11T10:51:16.594Z"
    editedAt: "2017-02-11T10:52:31.322Z"
    v: 6
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589eec036b2d8dd5522d6af5"
    text: {`load` sometimes returns the thing and sometimes block}
    sent: "2017-02-11T10:48:35.852Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589eebf5872fc8ce621ffd3e"
    text: {guys, do you think this is inconsistent behaviour?^/```^/red>> load "1"^/== 1^/red>> load "1 2 3"^/== [1 2 3]^/``` }
    sent: "2017-02-11T10:48:21.031Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589ed4a91465c46a564e2e0d"
    text: {FYI, we are starting processing tickets in preparation for the 0.6.2 release.}
    sent: "2017-02-11T09:08:57.581Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589ed049aa800ee52c7edfb2"
    text: {Oh, I posted in the wrong channel...anyway, this can be useful to others too. ;-) The first one is for the R/S preprocessor.}
    sent: "2017-02-11T08:50:17.956Z"
    editedAt: "2017-02-11T08:55:55.795Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589ed00a6b2d8dd5522ce85f"
    text: "sweet thanks @nc-x "
    sent: "2017-02-11T08:49:14.822Z"
    v: 1
    author: "57510021c43b8c6019767b53"
) #(
    id: "589ec21cf045df0a2232f40f"
    text: {From Red preprocessor:^/```lisp^/#if find config/modules 'View [...]^/```}
    sent: "2017-02-11T07:49:48.923Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589ec1fe6b2d8dd5522cabb5"
    text: {Code for testing if View module is available from the preprocessor:^/```lisp^/#if modules contains 'View [...]^/```}
    sent: "2017-02-11T07:49:18.906Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589ea27eaa800ee52c7e3444"
    text: {@zetashift  Red is in alpha state right now. It is a WIP. Actors are not yet implemented but planned. You can see the current roadmap over here -  https://trello.com/b/FlQ6pzdB/red-tasks-overview}
    sent: "2017-02-11T05:34:54.536Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "589e99fe1465c46a564d56c3"
    text: {Hey! I recently got interested in actor based programming languages? Currently Pony and Red has got me really curious; but I can't find anything about actors in Red at all! Is my google-fu just weak or is it a WIP?}
    sent: "2017-02-11T04:58:38.214Z"
    v: 1
    author: "57510021c43b8c6019767b53"
) #(
    id: "589e99b1aa800ee52c7e13ac"
    text: {@geekyi I will add some topics, feel free to propose better ones.}
    sent: "2017-02-11T04:57:21.130Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "589e9969f045df0a2232624d"
    text: {@geekyi We use [Zenhub](https://www.zenhub.com/) here since a year, it's a more feature-complete version of activity-view.}
    sent: "2017-02-11T04:56:09.791Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589e329a21d548df2cf23eb5"
    text: {In other news, they are also adding more trello-like features aka [activity-view](https://github.com/blog/2311-see-your-project-s-history-with-the-activity-view)}
    sent: "2017-02-10T21:37:30.851Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589e3256aa800ee52c7c549c"
    text: {Github has a new feature named [topics](https://github.com/blog/2309-introducing-topics), which are tags for repos, similar to ones we have in gitter}
    sent: "2017-02-10T21:36:22.916Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589d4d891465c46a56464f1f"
    text: "@PeterWAWood OK, Wine is great for now. Thanks."
    sent: "2017-02-10T05:20:09.191Z"
    v: 1
    author: "589d44b6d73408ce4f49550f"
) #(
    id: "589d4d6bf045df0a222ba55d"
    text: {@marccarson Work has only just started on a GTK+3 based View for Linux. You would need to run Red under Wine on Linux to use the GUI.}
    sent: "2017-02-10T05:19:39.541Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589d4973de50490822ac6b08"
    text: {I see, thanks @PeterWAWood - I might just give Wine a shot with Consolas installed. Looking forward to trying it in Linux tomorrow at work as well.}
    sent: "2017-02-10T05:02:43.054Z"
    v: 1
    author: "589d44b6d73408ce4f49550f"
) #(
    id: "589d48fa6b2d8dd552250d6a"
    text: {@marccarson The macOS 0.6.1 build does not include View. Good progress is being made on View for macOS and it is planned to be include in Red Alpha 0.6.3. If you want to try out Red macGUI, it can be found in the ```macGUI``` branch in Github.}
    sent: "2017-02-10T05:00:42.614Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589d451e872fc8ce6217ab84"
    text: {Hi, I was just trying the Mac OS build 061 from the Red website and I can't seem to compile example code that needs 'view. Any tips on this? It says invalid definition for function exec/gui/GdipCreateFromHWND.}
    sent: "2017-02-10T04:44:14.919Z"
    v: 1
    author: "589d44b6d73408ce4f49550f"
) #(
    id: "589cfa9900c00c3d4f1af9d6"
    text: "Yep, automated build works. ^/^/Stable blows up. "
    sent: "2017-02-09T23:26:17.745Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf9f21465c46a5644f12e"
    text: "On the same page"
    sent: "2017-02-09T23:23:30.442Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589cf9df6b2d8dd55223c45e"
    text: {Use the automated builds; they are pretty stable to be fair :point_up: [February 10, 2017 3:48 AM](https://gitter.im/red/red?at=589cf1da6b2d8dd5522399be)}
    sent: "2017-02-09T23:23:11.905Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589cf99100c00c3d4f1af604"
    text: "@geekyi I'm grabbing the Stable"
    sent: "2017-02-09T23:21:53.790Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf881aa800ee52c75a00b"
    text: {Stumbled onto it when testing a Digital Root function.^/^/```^/red>> drt: func [n [integer!]] [1 + ((n - 1) % 9)]^/== func [n [integer!]][1 + ((n - 1) % 9)]^/red>> drt 2345^/== 5^/red>> drt 234534566^/== 2^/red>> drt 2345345666^/*** Syntax Error: invalid value at "2345345666"^/*** Where: do^/```^/}
    sent: "2017-02-09T23:17:21.098Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf869de50490822ab2972"
    text: "Report as bug if still errors"
    sent: "2017-02-09T23:16:57.802Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589cf8541465c46a5644e789"
    text: {@gltewalt Strange.. with latest I don't get the error, can you confirm it's the same build as mine from above link? :^/```^/red>> type? 12345678901^/== float!^/red>> system/build/config/build-basename^/== %gui-console-2017-1-25-13785^/```^/Because I do get error if using red-0.6.1 stable:^/```^/red>> type? 12345678901^/*** Syntax Error: invalid value at "1234567890"^/*** Where: do^/red>> system/build ; only shows date^/== "21-Nov-2016/1:06:30+5:00"^/```}
    sent: "2017-02-09T23:16:36.228Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589cf5f400c00c3d4f1ae47c"
    text: {```^/red>> 8888888888^/*** Syntax Error: invalid value at "8888888888"^/*** Where: do^/red>> 9999999999^/== 1410065407^/```}
    sent: "2017-02-09T23:06:28.915Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf597872fc8ce62164ac6"
    text: {```^/red>> type? 5555555555^/== integer!^/red>> 5555555555^/== 1260588259^/```}
    sent: "2017-02-09T23:04:55.122Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf54d1465c46a5644d68c"
    text: {^/```^/red>> type? 222222222^/== integer!^/red>> type? 2222222222^/*** Syntax Error: invalid value at "2222222222"^/*** Where: do^/```^/}
    sent: "2017-02-09T23:03:41.845Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf4b4aa800ee52c758ca1"
    text: "Same issue. Breaks on Win 7 64bit"
    sent: "2017-02-09T23:01:08.451Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf250de50490822ab067f"
    text: "Re download "
    sent: "2017-02-09T22:50:56.815Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf245872fc8ce621637ca"
    text: "I'll grab the current one"
    sent: "2017-02-09T22:50:45.771Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf1da6b2d8dd5522399be"
    text: {I'm using one click download [*Automated builds, master branch*](http://static.red-lang.org/dl/auto/win/red-25jan17-080ebed.exe)  binary from http://www.red-lang.org/p/download.html page (Yeah, I can reproduce error with stable 0.6.1)}
    sent: "2017-02-09T22:48:58.032Z"
    editedAt: "2017-02-09T22:55:00.609Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "589cf13d1465c46a5644bb2b"
    text: {I don't recall the date - not on the laptop anymore}
    sent: "2017-02-09T22:46:21.828Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf10dde50490822ab003c"
    text: {Also, this isn't Windows from source. It's the one click download for the .exe^/I haven't tested on Windows 10}
    sent: "2017-02-09T22:45:33.569Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589cf0d821d548df2ceb6dd9"
    text: {```^/red>> type? 5555555555^/== float!^/red>> type? 555555555^/== integer!^/```}
    sent: "2017-02-09T22:44:40.183Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589cf08bde50490822aafeb5"
    text: { @gltewalt Works for me with red-25jan17-080ebed.exe Windows 10^/```^/red>> 555555555555555555^/== 5.555555555555556e17^/```}
    sent: "2017-02-09T22:43:23.264Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589ceb9f6b2d8dd552237083"
    text: "s/lady/last"
    sent: "2017-02-09T22:22:23.705Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589ceb856b2d8dd552237011"
    text: {Well, the lady part is my assumption. I stopped when all numbers of eleven places blew up. I didn't try numbers of more than 11 places. }
    sent: "2017-02-09T22:21:57.214Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589ce9d1de50490822aad1fa"
    text: {Strange behavior from Red 0.61 console. Windows 7.^/^/Ten digits of 5 or 9, return a different value. ^/^/5555555555^/^/9999999999^/^/All other numbers of ten digits in length error with "Invalid value".^/^/All numbers of 11 or more places in length error with "Invalid value"}
    sent: "2017-02-09T22:14:41.837Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589c9d146b2d8dd552217d35"
    text: {I agree. On a grand scale, it will also drive part of the data science explosion. The flip side to writing useful parsers is having data you can parse, easily. }
    sent: "2017-02-09T16:47:16.017Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589c7fd5f045df0a222752df"
    text: {https://thorstenball.com/blog/2017/02/08/higher-value-tools/^/> There are certain tools that provide incredibly high value. <...> And I think there’s something they all have in common <...> It seems to me what they all have in common, what is close to their center of power, is *parsing*.^/^/:wink:   }
    sent: "2017-02-09T14:42:29.582Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "589b2cac6b2d8dd5521993bc"
    text: {@dockimbel yes... it is just a simple AS console with binding to Red... I was doing it mainly as a prove of concept, so nothing fancy.}
    sent: "2017-02-08T14:35:24.881Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "589afc4421d548df2ce01edc"
    text: {@meijeru  :point_up: [January 25, 2017 8:45 PM](https://gitter.im/red/red?at=58889dfd11e7a7f61de244d1) Sounds cool! I'm putting #2420 in my top list.}
    sent: "2017-02-08T11:08:52.196Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589afa8af045df0a221f48a8"
    text: {@Oldes :point_up: [January 26, 2017 4:09 AM](https://gitter.im/red/red?at=588905f6519afee26bb036d8) Is that console built using ActionScript? }
    sent: "2017-02-08T11:01:30.529Z"
    editedAt: "2017-02-08T11:01:38.509Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589af9336b2d8dd552184f83"
    text: "good to see you back :D"
    sent: "2017-02-08T10:55:47.093Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589af9306b2d8dd552184f6d"
    text: {@Skrylar We should update the compilation instructions soon on the red/red landing page, as we prepare for the new release (as soon as we process enough tickets).}
    sent: "2017-02-08T10:55:44.727Z"
    editedAt: "2017-02-08T10:55:46.138Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589af8daf045df0a221f3dfc"
    text: {@endo64 ^/> @dockimbel `get` doesn't allow `none` for its argument, but it does on Rebol, is this a intended change?^/It was useful when using like `get pick [word1 word2] 3`^/^/Yes, intended. I don't think such code pattern is nice to use or common enough to justify relaxing `get`. Though, this is open to debate if there are some common use-cases which could benefit from it.}
    sent: "2017-02-08T10:54:18.050Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589af6c6872fc8ce620acc27"
    text: {@Oldes IIRC, you can disable the auto-upscaling Windows feature from the executable properties (in Compatibility tab). We will switch to that mode by default when we'll add the (auto-)scaling support to View engine.}
    sent: "2017-02-08T10:45:26.203Z"
    editedAt: "2017-02-08T10:45:35.299Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589aebd74150746b151305b9"
    text: "Welcome! :)"
    sent: "2017-02-08T09:58:47.825Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "589aeac46b2d8dd552180140"
    text: "Back! ;-) Unpiling emails and messages..."
    sent: "2017-02-08T09:54:12.255Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589a0fec9eb1bd81481bed7c"
    text: "@greggirwin Thanks, fixed."
    sent: "2017-02-07T18:20:28.553Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "589a0f86f045df0a221a934c"
    text: "In the `#include` section."
    sent: "2017-02-07T18:18:46.053Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589a0f6000c00c3d4f0a73b9"
    text: {Nice update @rebolek. Small typo: "Here is *na* example"}
    sent: "2017-02-07T18:18:08.818Z"
    editedAt: "2017-02-07T18:19:06.682Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5899acff567b0fc8138c9272"
    text: {Anyway, that one article is not full book covering everything. I will write an article about types conversion later.}
    sent: "2017-02-07T11:18:23.912Z"
    editedAt: "2017-02-07T11:18:33.551Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5899acce4150746b1512e1eb"
    text: {@Oldes it is not hard, but it is not easy n the sense that you probably can’t figure it out yourself. It certainly is out of the scope of that article, because I as author think it is ;)}
    sent: "2017-02-07T11:17:34.728Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5899a8e5f045df0a22180c04"
    text: {@rebolek I don't think that conversion of ```string!``` and ```block!``` is _something outside the scope of this article_ as you claim. Especially when you say it is _not hard_ in the same sentence. Actually these more advanced steps are key one.}
    sent: "2017-02-07T11:00:53.334Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "589989ee4150746b1512de6d"
    text: {@DideC [article updated](http://red.qyz.cz/red-system-from-red.html)}
    sent: "2017-02-07T08:48:46.851Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5898b876567b0fc8138c7ac4"
    text: {@greggirwin Thanks, I will release updated version tomorrow.}
    sent: "2017-02-06T17:55:02.942Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5898b8541465c46a562cc74d"
    text: {Thanks for doing that @rebolek. All the little things add up.}
    sent: "2017-02-06T17:54:28.076Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589856d34150746b1512bef6"
    text: "@DideC Thanks for the tip, I add it."
    sent: "2017-02-06T10:58:27.430Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "589854fe6b2d8dd55209553a"
    text: {@rebolek nice tuto. But it can be expand to show the "all-in-one file" syntax that Peter just put up there.}
    sent: "2017-02-06T10:50:38.645Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "589846ecfef1d2de52a92471"
    text: {@nicolas42 this is frequently asked, so here is simple guide http://red.qyz.cz/red-system-from-red.html}
    sent: "2017-02-06T09:50:36.537Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5897dfaa6b2d8dd55206baa1"
    text: {There is no official documentation on using Red/System code from Red yet. The features are introduced in the [Red Language Blog](http://www.red-lang.org).}
    sent: "2017-02-06T02:30:02.874Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5897df181465c46a5627bb2a"
    text: {@nicolas42 Please don't double post in multiple threads.}
    sent: "2017-02-06T02:27:36.588Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5897ddb11465c46a5627b538"
    text: {```integer!```, ```logic!```, and ```float!``` values are automatically "converted" when passed via a routine, others are not in the current alpha releases.}
    sent: "2017-02-06T02:21:37.624Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5897dd5aaa800ee52c583aef"
    text: {@nicolas42 At the moment you need to incorporate the Red/System code inside a Red program and compile the Red program. You can incorporate Red/System code using the ```#system``` and ```#system-global``` directives or in a ```routine!```. A ```routine!``` allows you to interact between the Red code and the Red/System code.^/^/Here is a trivial example:^/```text^/Red []^/i: 1^/double: routine [i [integer!] return: [integer!]] [i * 2]^/print double i^/```}
    sent: "2017-02-06T02:20:10.928Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5897b7fd6018ccd6527463d5"
    text: {How do I compile red/system code then access it from red?}
    sent: "2017-02-05T23:40:45.336Z"
    v: 1
    author: "56e49b9885d51f252ab87ee8"
) #(
    id: "589782cafef1d2de52a914e3"
    text: "I'm in the browser too."
    sent: "2017-02-05T19:53:46.089Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "589782a76b2d8dd552050ce8"
    text: {I haven't specifically selected Next anytime in recent memory. I know the Glip desktop app always wanted me to do that, but I'm only using Gitter in the browser.}
    sent: "2017-02-05T19:53:11.983Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58978017fef1d2de52a914a7"
    text: {@greggirwin are you using the "Next" version of Gitter or the stable release? I'm on Next and haven't had any issues recently.}
    sent: "2017-02-05T19:42:15.889Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58976ab321d548df2ccc3a3f"
    text: {Gitter having issues just posting messages now too.}
    sent: "2017-02-05T18:10:59.721Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58976a9b6018ccd65272d5ae"
    text: {```^/date-part: func [^/    "Return one or more unit parts of a date!"^/    date [date! time!]^/    part [word! block!] "One or more of the following: date month year day time hour minute second weekday yearday utc zone"^/    /local res^/][^/    res: reb-collect [^/        foreach word compose [(part)] [^/            keep switch/default word [^/                date     [date/date]^/                month    [date/month]^/                year     [date/year]^/                day      [date/day]^/                time     [date/time]^/                hour     [date/time/hour]^/                minute   [date/time/minute]^/                second   [date/time/second]^/                weekday  [date/weekday]^/                yearday  [date/yearday]^/                utc      [as-utc date]^/                zone     [date/zone]^/            ] [none]^/        ]^/    ]^/    either block? part [res] [pick res 1]^/]^/```}
    sent: "2017-02-05T18:10:35.933Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58976a3b6b2d8dd552048fb2"
    text: {Here's an old func I wrote for R2, which won't work in Red yet because we don't have a `date!`. }
    sent: "2017-02-05T18:08:59.162Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5897699121d548df2ccc34b3"
    text: {Note that you can also use `pick` to select field values. }
    sent: "2017-02-05T18:06:09.055Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589767c46b2d8dd552048239"
    text: {Fun with words. :^^) To clarify @meijeru's comment `second <time!>` gets the second value from a time, when you look at a time as 3 segments (HH:MM:SS), but `t/second` returns the number of seconds in the time. You can see this in %time.reds in the `eval-path` function, but that doesn't tell you more than just playing in the console to see how it works.}
    sent: "2017-02-05T17:58:28.014Z"
    editedAt: "2017-02-05T18:05:31.569Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58972a973f5ec4d0075a6ae9"
    text: {A curiosity for your Sunday entertainment: `second` is defined on values of type `time!` and yields the minutes :smile: To get at the seconds, you need to apply `third`.}
    sent: "2017-02-05T13:37:27.843Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58970691a5805a273e177f40"
    text: {OK, since that doesn't work right now, archives: https://gitter.im/red/red/archives/2017/01/10}
    sent: "2017-02-05T11:03:45.009Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5897053cca6c6eb4494a3d5b"
    text: {@Skrylar ^/> @Skrylar bothers @dockimbel to have someone update the compile instructions on the site to include the -r requirement^/^/https://gitter.im/?at=5874051adec171b811c94d5e}
    sent: "2017-02-05T10:58:04.207Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5896fb6e46101c12098d1ffe"
    text: "Again, Github feed (right panel) is unstable!"
    sent: "2017-02-05T10:16:14.498Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "589666b55bc3025608c99e74"
    text: {The documentation on Github reflects the latest stable release, 0.6.1. It will be updated during the 0.6.2 release process.}
    sent: "2017-02-04T23:41:41.475Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5896664646101c12098af0f3"
    text: {@Skrylar bothers @dockimbel to have someone update the compile instructions on the site to include the -r requirement}
    status: true
    sent: "2017-02-04T23:39:50.315Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58966601a5805a273e15219c"
    text: {@PeterWAWood Using -r works to compile a repl from master (arch.) Compiled version still has #2426, running red.r through rebol work  as expected.}
    sent: "2017-02-04T23:38:41.463Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "5896656873e8cb0a091915c5"
    text: {@Skrylar I finally remembered that the error is caused because the pre-compiled  LibRedRT does not include all the functions required by the console. Since the introduction of LibRedRT, the console needs to be compiled using the ```-r``` release option.^/^/```rebol -qs red.r -r -o repl environment/console/console.red``` }
    sent: "2017-02-04T23:36:08.655Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58966562ca6c6eb44947de18"
    text: "But not through a standalone"
    sent: "2017-02-04T23:36:02.339Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "5896655d3f5ec4d0075791b2"
    text: {Interestingly, if I run red (master or 0.6.1) through rebol I get working command lines (rebol -qw red.r -h)}
    sent: "2017-02-04T23:35:57.019Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58966504ca6c6eb44947dc89"
    text: {`1fc6453437b6fac0e8517b0aec3b3718fe464159` is the first commit to break master with unicode decoding errors}
    sent: "2017-02-04T23:34:28.058Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "5896621f3bcc9b3b25dd85b2"
    text: {Bleh. Was going to do a bisect but none of the versions before the qtixie-console merge run without a copy of readline that isn't on arch }
    sent: "2017-02-04T23:22:07.330Z"
    editedAt: "2017-02-04T23:22:15.837Z"
    v: 2
    author: "561110a7d33f749381a839d7"
) #(
    id: "589661923f5ec4d007578553"
    text: {@Skrylar ponders why its doing file I/O for command line parsing}
    status: true
    sent: "2017-02-04T23:19:46.102Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58966133ca6c6eb44947cd96"
    text: {0.5.4 says `*** Error: File not found` in response to #2426 while 0.6 still says can't find file}
    sent: "2017-02-04T23:18:11.164Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58965d5aca6c6eb44947bead"
    text: {that ones for `080ebedffdfc14f732d96874ec69b72d0aea8e54`}
    sent: "2017-02-04T23:01:46.309Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58965d16a5805a273e14ff3c"
    text: {@PeterWAWood that's what i did too, without the `-o repl` part.^/```^/[pkgbuilder@UFO red.git]$ rebol -qw red.r environment/console/console.red^/^/-=== Red Compiler 0.6.1 ===-^/^/Compiling /home/pkgbuilder/red.git/environment/console/console.red ...^/...using libRedRT for Linux^/...compilation time : 245 ms^/^/Target: Linux^/^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/unicode/decode-utf8-char^/*** in file: %/home/pkgbuilder/red.git/environment/console/POSIX.reds^/*** in function: exec/terminal/fd-read^/*** at line: 235^/*** near: [^/    unicode/decode-utf8-char utf-char :len^/]^/```}
    sent: "2017-02-04T23:00:38.299Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58958fa03f5ec4d00753e7e2"
    text: {At the moment, I am getting a compile error which I need to investigate.}
    sent: "2017-02-04T08:24:00.334Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58958f85a5805a273e115aec"
    text: {This is how I would built the "repl" using the master branch:^/```text^/rebol -qs red.r -o repl environment/console/console.red^/```}
    sent: "2017-02-04T08:23:33.096Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58958de93f5ec4d00753df89"
    text: {@Skrylar How did you try to build the "repl" with the master branch?}
    sent: "2017-02-04T08:16:41.671Z"
    editedAt: "2017-02-04T08:18:01.726Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58952b015bc3025608c47aa5"
    text: "[whack-a-mole intensifies]"
    sent: "2017-02-04T01:14:41.897Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58952af71319d8183eecea1e"
    text: {@PeterWAWood hm. well the master branch doesn't succomb to #2426 on my system, but it doesn't build the repl.}
    sent: "2017-02-04T01:14:31.888Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "5894a2c81e4d4bd962ce252a"
    text: {This must be something to do with libRedRT presumably.}
    sent: "2017-02-03T15:33:28.857Z"
    editedAt: "2017-02-03T15:33:39.423Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5894a2982ff29dec067239c1"
    text: {Further to the virus discussion: I have a GUI script which, when compiled under W10 with target MSDOS is refused by Norton because of `Heur.AdvML.B` and when compiled with target Windows is accepted.}
    sent: "2017-02-03T15:32:40.222Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5891ef795309d6b358954bc4"
    text: "conversation moved to https://gitter.im/red/help"
    sent: "2017-02-01T14:23:53.699Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5891eedd5309d6b3589549ae"
    text: "@gltewalt there is no scope at all"
    sent: "2017-02-01T14:21:17.894Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58912ac8c0f28dd8626aac78"
    text: "(or State goto)"
    sent: "2017-02-01T00:24:40.464Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58912aa0e836bf7010b6fa2d"
    text: "With a scope goto in Bind ?"
    sent: "2017-02-01T00:24:00.218Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58912a85fba5bfea06b2862c"
    text: "Oh, so it's functional scoping?"
    sent: "2017-02-01T00:23:33.475Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58912619c0f28dd8626a952f"
    text: {As far as docs, related to scoping there is http://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red/21964858#21964858, and a number of old articles by Ladislav Mecir on *bindology*. ^/^/There are a lot of mechanisms but perhaps one of the main, deeper things to grasp is that everything is data until it's evaluated, and words carry a binding with them, that determines their context when evaluated. }
    sent: "2017-02-01T00:04:41.191Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589125544c04e9a44e5598c0"
    text: {Rebol's designer once said it's like a lake. There are shallow parts but it goes deep. And it's not always a gradual slope. There's a long way you can go without finding a deep spot, then you walk off the edge and flounder around for a while, trying to catch your breath. :^^)}
    sent: "2017-02-01T00:01:24.589Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58910dc95309d6b358910065"
    text: "*mechanisms"
    sent: "2017-01-31T22:20:57.305Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58910db3dcb66e4f76d5a403"
    text: {Are there docs on the core mechanism of red (or rebol)? Turns out I've been getting by with misconceptions}
    sent: "2017-01-31T22:20:35.326Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58906f4d4c04e9a44e51446f"
    text: {@meijeru Isn't the gap mostly because lunar new year in China and Nenad traveling around globe?}
    sent: "2017-01-31T11:04:45.836Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "588f72662ff29dec0655fd10"
    text: {Feed from Github seems re-established, but there is a 3-day gap! }
    sent: "2017-01-30T17:05:42.045Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "588f3f385309d6b35886ed80"
    text: {Proper behavior is to have window which is not scaled, but layout defined with the scaling counted.}
    sent: "2017-01-30T13:27:20.287Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
)#(
    id: "588f22f6e836bf7010abd93c"
    text: {Red and many other not updated apps is using just simple method, where window is rendered in original size (100%) and than scaled up by OS, so even on HiDPI 200% scaling (recommended and default) it looks ugly.}
    sent: "2017-01-30T11:26:46.144Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "588f2117dcb66e4f76cadcba"
    text: {Actually the app is responsible to respond on OS scaling change. Most of them probably don't do that. I guess that most developers are still using FullHD and Windows7 so don't care much.}
    sent: "2017-01-30T11:18:47.755Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "588f18184c04e9a44e4a309a"
    text: {In regards to HiDPI, it might be some other issue, never owned such a monitor :-)}
    sent: "2017-01-30T10:40:24.796Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "588f18001e4d4bd962aecc1b"
    text: {As for the text in general. Windows still did not get scaling right imo. When I use my FullHD monitor, and my ntb monitor as a secondary one, I set ntb to 125%, as FullHD on 14" lcd is not a pleasure to use. I have to relogin or reboot, or some of apps are blurry, including the MS ones as Outlook.}
    sent: "2017-01-30T10:40:00.739Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "588f167f4c04e9a44e4a27a6"
    text: {@qtxie @dockimbel as I'm forced to use Windows10 with HiDPI resolution, I noticed, that text in Red apps is blurred, probably because using old api. I wonder what must be done to have crisp text as in Windows modern apps and or browsers and so also Red having modern look on this OS?}
    sent: "2017-01-30T10:33:35.540Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "588ee4592ff29dec06527476"
    text: {I agree too much relaxing makes difficult to find errors, but some relaxing is useful.^/On R3 `get` is much more relaxed. `get 5 ; >> 5`, `get context [a: 1 b: 2] ; >> [1 2]` which I don't think that much relaxing is necessary.}
    sent: "2017-01-30T06:59:37.727Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "588e9f12fba5bfea06a4167b"
    text: {I don't know that I've ever relied on that behavior. Tricky choices, because sometimes transparent `none` handling is useful. Other times it hides errors I want to know about.}
    sent: "2017-01-30T02:04:02.011Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588e4429e836bf7010a7a2be"
    text: {@dockimbel `get` doesn't allow `none` for its argument, but it does on Rebol, is this a intended change?^/It was useful when using like `get pick [word1 word2] 3`}
    sent: "2017-01-29T19:36:09.694Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "588cc0e82ff29dec06499166"
    text: "Thanks @geekyi."
    sent: "2017-01-28T16:03:52.136Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588c3eb8e836bf70109f5e35"
    text: {@ModalSeoul  > Heya, compiling a simple program throws `invalid flag -c`^/^/Could you share the command that you used to compile the program as I was unable to locate such a message in the compiler.}
    sent: "2017-01-28T06:48:24.157Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "588c39665309d6b35879b0d4"
    text: {@meijeru  @greggirwin :point_left: [known issue with gitter](https://gitter.im/gitterHQ/gitter?at=588bb77ffba5bfea06981893)}
    sent: "2017-01-28T06:25:42.856Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588bc4d04c04e9a44e3c9375"
    text: {He may be traveling. Does anyone know if this is a known gitter issue?}
    sent: "2017-01-27T22:08:16.649Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588bbd1b4c04e9a44e3c70cc"
    text: {@dockimbel We have a serious problem with the feed!}
    sent: "2017-01-27T21:35:23.828Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "588baf655309d6b35877a040"
    text: {@ModalSeoul, can you post the exact example that's failing for you?}
    sent: "2017-01-27T20:36:53.062Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588baf42fba5bfea0697f12d"
    text: {@meijeru I just commented on #2423, but now I don't remember if comments show up in notifications. If they should, I agree that it stopped working.}
    sent: "2017-01-27T20:36:18.320Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588b7901dcb66e4f76bb3741"
    text: {Heya, compiling a simple program throws `invalid flag -c`}
    sent: "2017-01-27T16:44:49.632Z"
    v: 1
    author: "58128264d73408ce4f315479"
) #(
    id: "588b6efec0f28dd8624e0908"
    text: {It looks like the feed from the Red repository to this room (notifications in right panel) has stopped !?!}
    sent: "2017-01-27T16:02:06.692Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "588a1643db9cafe9183ddf87"
    text: "I understand. It’s moving target right now."
    sent: "2017-01-26T15:31:15.791Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "588a160dc0f28dd862481401"
    text: {Thanks, I will wait till doc incorporates it in the master branch.}
    sent: "2017-01-26T15:30:21.518Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "588a0dc261e516c1579253b5"
    text: "also https://github.com/rebolek/red/tree/editor"
    sent: "2017-01-26T14:54:58.671Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "588a0da0d99b1dd03d317557"
    text: "https://github.com/qtxie/red/tree/red-console"
    sent: "2017-01-26T14:54:24.125Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "588a0c36e836bf7010960d0a"
    text: "Could you point me to the source, please?"
    sent: "2017-01-26T14:48:22.233Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5889d1b0d99b1dd03d316d84"
    text: {It is not documented yet, but it is really easy to use. New Red (View based) console uses it. I use it to write an editor. It already has syntax highlighting and partial support for multiple selections.}
    sent: "2017-01-26T10:38:40.064Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5889d13b61e516c157924c07"
    text: ":)"
    sent: "2017-01-26T10:36:43.203Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5889d089074f7be7631e2818"
    text: {Some say, that the source code is your best documentation :-) Well, just kidding :-)}
    sent: "2017-01-26T10:33:45.330Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5889cf4ec19662f15391a599"
    text: {I will wait then till it becomes available in the main branch AND documented...}
    sent: "2017-01-26T10:28:30.797Z"
    editedAt: "2017-01-26T10:28:38.938Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5889ce38074f7be7631e19a9"
    text: {It's relatively new stuff, implemented in terms of one of Qtxie's branches ... maybe it is in mainline already, dunno ...}
    sent: "2017-01-26T10:23:52.359Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5889cc98e836bf7010943413"
    text: {Where is that defined?? I don't see it in the documentation.}
    sent: "2017-01-26T10:16:56.381Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5889c86f61e516c157924b5c"
    text: {@meijeru if you use the new `text-box!`, you can get cursor position.}
    sent: "2017-01-26T09:59:11.583Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5889c7a011e7a7f61de982b7"
    text: {Re editors written in Red, I have formulated another issue #2422 concerning the cursor position in an `area` face. I believe that Rebol had the necessary facilities. Anyone meet the same problem? Any solutions already?}
    sent: "2017-01-26T09:55:44.925Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5889a6f1cbcb281770b9fd46"
    text: "Thanks for explanation @nc-x "
    sent: "2017-01-26T07:36:17.808Z"
    v: 1
    author: "561bba46d33f749381a919bf"
) #(
    id: "58898d2e519afee26bb32978"
    text: {(I may be wrong but) AFAIK, there are plans to add something like rebol's "load/library" to Red, so then you will be able to write bindings in Red which you will be able to use through the interpreter as well.}
    sent: "2017-01-26T05:46:22.710Z"
    editedAt: "2017-01-26T05:48:39.180Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58898cdcdcb66e4f76b1ea40"
    text: {@InvoiceFox  You can't use any R/S script from the interpreter be it a binding or anything else. You will have to compile  it. You will be able to use it through the interpreter once JIT is available.}
    sent: "2017-01-26T05:45:00.385Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "588951f0519afee26bb1c1e9"
    text: "@Oldes Nice! :+1: It's written by AIR?"
    sent: "2017-01-26T01:33:36.870Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5889177edcb66e4f76af349b"
    text: {@rgchris thanks for the link! @Oldes ok, I could ... but if I understand, this means that for now for example you can't use Kaj's SQLite binding with the interpreter ./red somescript.r (or console). You have to compile if you use the binding?}
    sent: "2017-01-25T21:24:14.989Z"
    v: 1
    author: "561bba46d33f749381a919bf"
) #(
    id: "588913d5c0de6f017ff008d7"
    text: {@InvoiceFox Not sure how much the scripts have changed since, but @kealist created a backup repository a while back of the esperconsultancy bindings: https://github.com/kealist/RS-fossil-mirror}
    sent: "2017-01-25T21:08:37.330Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "588911d911e7a7f61de57794"
    text: {For example here: https://github.com/red/red/blob/master/environment/console/gui-console.red#L23}
    sent: "2017-01-25T21:00:09.162Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58891168c19662f1538d47f0"
    text: {@InvoiceFox  cannot you just include your red-system file in the ```environment/console/gui-console.red``` file?}
    sent: "2017-01-25T20:58:16.166Z"
    editedAt: "2017-01-25T20:58:29.243Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58890c2ddcb66e4f76aee855"
    text: {is there any example out there that I can look at?}
    sent: "2017-01-25T20:35:57.055Z"
    v: 1
    author: "561bba46d33f749381a919bf"
) #(
    id: "58890c0de836bf70108fdf6c"
    text: {I made a simple binding with red/system, but I can't see any examples on how to make it in red now ... or use it from red well. esperconsultancy is down so I can't see the code for most of bindings. Other I see just red system variants. I know the #system [] and then routine, but I see I need to compile such script then, can't run it interactively}
    sent: "2017-01-25T20:35:25.880Z"
    v: 1
    author: "561bba46d33f749381a919bf"
) #(
    id: "588905f6519afee26bb036d8"
    text: {I improved my AIR - Red extension a little bit with simple text coloring.. so it looks like this now:^/https://raw.githubusercontent.com/Oldes/ANERed/master/Test-app-screenshot.png}
    sent: "2017-01-25T20:09:26.398Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5888ab59cbcb281770b4129e"
    text: {there is simple one, in Rebol: https://github.com/ldci/RedEdit}
    sent: "2017-01-25T13:42:49.393Z"
    editedAt: "2017-01-25T13:44:03.266Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58889dfd11e7a7f61de244d1"
    text: {I am writing a text editor with the following features: tab-panel with multiple tabs for sources, interpretation (no compilation, no `call` needed), output capturing and full error reporting, resizable, somewhat configurable. Cannot publish at the moment because of issue #2420 which prevents proper  handling of source tabs (editing areas). Is almost operational with exactly one tab. Done in some 300 LOC.}
    sent: "2017-01-25T12:45:49.930Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58886ca2e836bf70108bdf48"
    text: {Actually a basic Red text editor can [look like this](https://gist.github.com/DideC/61138fe905a6950359087a07a374e0d4). But it just handle the basic of loading/saving a file. No fancy features for the moment.}
    sent: "2017-01-25T09:15:14.794Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5887f0c2c19662f15386acda"
    text: {And the source for the GUI editor in R2 (`ctx-text`) is viewable, so things could be learned there as well.}
    sent: "2017-01-25T00:26:42.991Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5887f00ddcb66e4f76a83a64"
    text: {Probably not too much of a challenge. The source is compressed on rebol.org, but Cate Dixon wrote an editor for R2 a long time ago: http://www.rebol.org/view-script.r?script=rem-ext42.r}
    sent: "2017-01-25T00:23:41.187Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5887c39fdcb66e4f76a72b8f"
    text: {NeoVim is a great vim. I wonder how much of a challenge it would be to implement it in Red. Anyways, the philisophy of NeoVim is that vims  only necessary feature is it's interface, and not the legacy of it's implementation.}
    sent: "2017-01-24T21:14:07.219Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5887add7dcb66e4f76a693a5"
    text: "The current milestone is windows support :)  "
    sent: "2017-01-24T19:41:11.279Z"
    v: 1
    author: "5659cd6016b6c7089cbc824a"
) #(
    id: "5887a94011e7a7f61ddcf10b"
    text: {@timeyyy, it looks like NeoVIM is experimental on Windows. Base download is ~6M and neovim-qt is ~18M on top of that. Probably not a good fit for embedding in Red.}
    sent: "2017-01-24T19:21:36.189Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58877d9211e7a7f61ddbade2"
    text: {I do program Rebol since more than 10 years without debugger. I could not do that in C.}
    sent: "2017-01-24T16:15:14.232Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
)#(
    id: "58877d34074f7be7631049c6"
    text: {Without a proper GC, that would not be so usefull as you could not use it without eating memory.}
    sent: "2017-01-24T16:13:40.504Z"
    editedAt: "2017-01-24T16:13:56.000Z"
    v: 3
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5887762fc19662f153835cdd"
    text: {In my mind, IO and good debugger would be most important }
    sent: "2017-01-24T15:43:43.495Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58873dfbc0de6f017fe4b9d6"
    text: {I personally am waiting for Red version of Cheyenne web server, an object database system on rebin format, a document db holding Red objects in native format and serves them in Red/JSON/BSON/XML formats when necessary. Of course after ports, IO, Networking and GUI. }
    sent: "2017-01-24T11:43:55.913Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "588735e1dcb66e4f76a389a3"
    text: {(`call`is also missing to launch compilation or run a script easily from a red program)}
    sent: "2017-01-24T11:09:21.584Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58871db8074f7be7630dee25"
    text: {@pekr +1.^/Editor choice is a personnal taste. If not there will not be so much of them in the world. It's probably the most duplicated kind of program out there, like flowers in Nature.^/And actually, Nenad and Quinktian are working on the Red language. I'm pretty sure an integrated IDE will be packed in the .exe in the future, but there is some missing parts that make it not ready to be in right know (mostly I/O and GC for Windows, but needs also View on all platforms to be relevant).}
    sent: "2017-01-24T09:26:16.778Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5887068d519afee26ba5294c"
    text: "Agree much with  @pekr "
    sent: "2017-01-24T07:47:25.912Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58870286c19662f153808a71"
    text: {Should Red provide it's own editor? Well, sure, sometimes in the future, why not? It's not a crucial feature for me though, I want IO and other features first ...}
    sent: "2017-01-24T07:30:14.637Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58870251519afee26ba51437"
    text: {Should we not have VBA interface, because - well, MS is evil? That's not a way to go.}
    sent: "2017-01-24T07:29:21.713Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5887023acbcb281770ab34e8"
    text: {@CodeTortoise @justjenny I somehow miss the point. One of the fatal mistakes of Rebol, was - let's do it all ourselves. Basice/free variant did not allow you to call into the shell, nor library interfacing. So most of the outer world successfuly ignored it. Chances are, that ppl are alredy using some editor - the more we support, the better imo. }
    sent: "2017-01-24T07:28:58.834Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5886fa81c19662f153805c17"
    text: "All "
    sent: "2017-01-24T06:56:01.656Z"
    v: 1
    author: "5659cd6016b6c7089cbc824a"
) #(
    id: "5886fa61074f7be7630d3107"
    text: {Might consider embedding neovim like https://github.com/oakes/SolidOak}
    sent: "2017-01-24T06:55:29.331Z"
    v: 1
    author: "5659cd6016b6c7089cbc824a"
) #(
    id: "5886f52b61e516c157920424"
    text: {@justjenny remember that Red is still in Alpha. There are still missing some crucial things for editor like system clipboard. So can we expect built-in editor/IDE? IMO, certainly yet. But when? That’s different question.}
    sent: "2017-01-24T06:33:15.927Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5886cdd4c0de6f017fe27c9f"
    text: "Ah... oops"
    sent: "2017-01-24T03:45:24.958Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5886cdc5cbcb281770aa66fb"
    text: {Console is half there in a way. It has 'what' and 'source' and tab completion. (At least on Windows)^/Just need an edit mode and a few other whistles. ^/No?}
    sent: "2017-01-24T03:45:09.734Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5886cda0cbcb281770aa66b2"
    text: {Oops, I see the discussion has moved to https://gitter.im/red/red/welcome. Sorry about the noise}
    sent: "2017-01-24T03:44:32.633Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5886cd4611e7a7f61dd7af04"
    text: "Diversity is also always good"
    sent: "2017-01-24T03:43:02.625Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5886cd3ccbcb281770aa6568"
    text: {Also, it's good for marketing when we have integrations in all of the editors and IDEs}
    sent: "2017-01-24T03:42:52.290Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5886cce7c19662f1537f964b"
    text: {What I've noticed is the community use a vast number of different editors. I'm using mostly sublime, and try others from time to time}
    sent: "2017-01-24T03:41:27.231Z"
    editedAt: "2017-01-24T03:42:39.360Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5886cc93dcb66e4f76a186db"
    text: "But until then.."
    sent: "2017-01-24T03:40:03.540Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5886cc49074f7be7630c75b2"
    text: {@justjenny It would be better if we have a tiny editor written in red ;)}
    sent: "2017-01-24T03:38:49.002Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5886b1f6519afee26ba3c19a"
    text: {yes the Vscode editor is pretty good, but as usual withe ms, at a cost, we have a 'one meg' - tiny and fully functional language - but then we use this over sized text editor - what is the original Red dream ?}
    sent: "2017-01-24T01:46:30.394Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886b156c19662f1537f25dd"
    text: {Heck, swipl Prolog has a useful editor built in. So does QT J}
    sent: "2017-01-24T01:43:50.700Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5886b128c19662f1537f254b"
    text: {Rebol2 has it. I can just type editor none in the console and get an admittedly sparse editor, but it's there.}
    sent: "2017-01-24T01:43:04.805Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5886b094c19662f1537f22fe"
    text: "Language"
    sent: "2017-01-24T01:40:36.678Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5886b091c0de6f017fe20c6c"
    text: {I do however agree that a built in editor with syntax highlighting and indenting makes sense to have, and is sort od necessary given the philosophy and ambition of Red being a tiny yet full stack a}
    sent: "2017-01-24T01:40:33.148Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5886b029e836bf7010826bb6"
    text: {whats the point of having a portable language like Red, and then encumbering it with an over sized resource hungry text editor}
    sent: "2017-01-24T01:38:49.735Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886afe5c0de6f017fe20972"
    text: {Personally, I like VSCode because it is fairly fast load up, is very minimal, and more often than not has a high quality plugin for a language or feature I need. This is in contrast to Atom, which is a lot more fully featured but often slows down, and has a longer start up time. Also in contrast to Sublime, which is great, but is relatively expensive and is not updated as frequently.}
    sent: "2017-01-24T01:37:41.456Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5886ae51c19662f1537f1a07"
    text: {just wondering - The superb and brilliant  'Red' in under one meg in size,  but everyone is dribbling over this pimped up text editor that is what, 32 ish meg and then all  its dependancies on top of that - what's it all about ? - just a question .^/}
    sent: "2017-01-24T01:30:57.722Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "588692ac074f7be7630b60b8"
    text: {There is, but at this point it should be... included. I think. }
    sent: "2017-01-23T23:33:00.404Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588691ddcbcb281770a964e6"
    text: {@gltewalt  @idkjs  yes thats it, i think there's an #include needed to compile with 'ask'}
    sent: "2017-01-23T23:29:33.156Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "58867b38dcb66e4f769fe9df"
    text: "thanks."
    sent: "2017-01-23T21:52:56.435Z"
    v: 1
    author: "562f6e1216b6c7089cb86c31"
) #(
    id: "58866d25519afee26ba2615e"
    text: "(Well, working in VSCode it's that way)"
    sent: "2017-01-23T20:52:53.618Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58866ceccbcb281770a89afb"
    text: {ask is included in Red console, or when you run scripts - but not if you want to compile }
    sent: "2017-01-23T20:51:56.001Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5886692d519afee26ba24c80"
    text: {I think the automated builds aren't working again @dockimbel }
    sent: "2017-01-23T20:35:56.907Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588668ddcbcb281770a8867c"
    text: {@idkjs only if running from sources. The recommended way is from http://www.red-lang.org/p/download.html}
    sent: "2017-01-23T20:34:37.538Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5886630ae836bf701080c7c0"
    text: {started over. looks like i was supposed to also install rebol?}
    sent: "2017-01-23T20:09:46.321Z"
    v: 1
    author: "562f6e1216b6c7089cb86c31"
) #(
    id: "588658f0d43728124e9541f2"
    text: "Is that the full error message?"
    sent: "2017-01-23T19:26:40.378Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58865795d43728124e95353b"
    text: "Thanks."
    sent: "2017-01-23T19:20:53.280Z"
    v: 1
    author: "562f6e1216b6c7089cb86c31"
) #(
    id: "58865791519afee26ba1d736"
    text: {hi folks. trying to run red on a mac. getting unknown command. Cant seem to find an issue that addresses. Any pointers?}
    sent: "2017-01-23T19:20:49.128Z"
    v: 1
    author: "562f6e1216b6c7089cb86c31"
) #(
    id: "58855468e836bf70107ae26a"
    text: {@mikeparr Kaj seems to have disappeared :/  *or hasn't been able to renew his website?*}
    sent: "2017-01-23T00:55:04.142Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58850b91cbcb281770a1b9d7"
    text: {On the  www.red-lang.org/p/contributions.html  page, around 16 links are not working - the ones that use red.esperconsultancy.nl/}
    sent: "2017-01-22T19:44:17.524Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5884d4c0e836bf7010787509"
    text: {^/@SpoonBytes  I have the 8th Jan Red, and "ask" is in that, without a directive.}
    sent: "2017-01-22T15:50:24.580Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5884aac1074f7be763015b6a"
    text: {:point_up: [January 22, 2017 2:44 AM](https://gitter.im/red/red?at=5883cf2ad43728124e8897f4) @gltewalt  ^/Pong is here - https://github.com/red/red/tree/master/tests/libRed (read the README)}
    sent: "2017-01-22T12:51:13.931Z"
    editedAt: "2017-01-22T12:51:31.921Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "588498f7cbcb2817709f8a2e"
    text: "Need more community and contributions"
    sent: "2017-01-22T11:35:19.453Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588498ebe836bf7010775e85"
    text: "As a curated list"
    sent: "2017-01-22T11:35:07.816Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588498decbcb2817709f89ec"
    text: {@timeyyy not enough content, but http://www.red-lang.org/p/contributions.html works right now}
    sent: "2017-01-22T11:34:54.113Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58849872cbcb2817709f8891"
    text: "I suppose *curated*  ?"
    sent: "2017-01-22T11:33:06.878Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58848705e836bf7010771220"
    text: {Might need one of those community vurated awesome lists for red}
    sent: "2017-01-22T10:18:45.787Z"
    v: 1
    author: "5659cd6016b6c7089cbc824a"
) #(
    id: "5883f90cdcb66e4f76938d69"
    text: "And welcome to Red @SpoonBytes !"
    sent: "2017-01-22T00:13:00.197Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5883f8e2cbcb2817709d3aba"
    text: {If you scroll back a bit in the red/welcome and red/help groups there are a number of links to resources and some chat about getting started. ^/^/`Ask` seems to be tried by a lot of people new to Red. Perhaps it should be included by default. I can't remember if the reason it isn't was a console bootstrap issue.}
    sent: "2017-01-22T00:12:18.007Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5883e460300f220a661892f4"
    text: {I'm just getting started with the newest version of Red, so others may have better answers for you}
    sent: "2017-01-21T22:44:48.911Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883e44111e7a7f61dc93322"
    text: "Thanks."
    sent: "2017-01-21T22:44:17.564Z"
    v: 1
    author: "5883d0bed73408ce4f451ab9"
) #(
    id: "5883e438d43728124e890777"
    text: "I see."
    sent: "2017-01-21T22:44:08.209Z"
    v: 1
    author: "5883d0bed73408ce4f451ab9"
) #(
    id: "5883e427cbcb2817709ce75e"
    text: {If the functionality isn't currently included in compiler, then the include (from source file) allows it to be compiled}
    sent: "2017-01-21T22:43:51.497Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883e360e836bf701074957e"
    text: {I didn't see any documentation regarding include directives. Is that something required for other functionality?}
    sent: "2017-01-21T22:40:32.582Z"
    v: 1
    author: "5883d0bed73408ce4f451ab9"
) #(
    id: "5883e351dcb66e4f76932c90"
    text: "Thank you very much. "
    sent: "2017-01-21T22:40:17.844Z"
    v: 1
    author: "5883d0bed73408ce4f451ab9"
) #(
    id: "5883e347cbcb2817709ce4a8"
    text: "At the top of your script, after the Red header"
    sent: "2017-01-21T22:40:07.105Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883e32311e7a7f61dc92f4f"
    text: "Ah, okay."
    sent: "2017-01-21T22:39:31.832Z"
    v: 1
    author: "5883d0bed73408ce4f451ab9"
) #(
    id: "5883e31edcb66e4f76932c32"
    text: {oops, forgot about the markdown symbols. ^/Pound sign in front of include}
    sent: "2017-01-21T22:39:26.386Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883e31be836bf701074948b"
    text: "Where would that include statement be placed?"
    sent: "2017-01-21T22:39:23.243Z"
    v: 1
    author: "5883d0bed73408ce4f451ab9"
) #(
    id: "5883e2e5074f7be763fe5d4f"
    text: {Do you have input.red?^/You might need to include it like:^/#include %environment/console/input.red}
    sent: "2017-01-21T22:38:29.751Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883e0e611e7a7f61dc92657"
    text: {Is there any reason why whenever I try to compile Red code it claims that the word "ask" is undefined?}
    sent: "2017-01-21T22:29:58.330Z"
    v: 1
    author: "5883d0bed73408ce4f451ab9"
) #(
    id: "5883d484dcb66e4f7692eb99"
    text: "Thank you."
    sent: "2017-01-21T21:37:08.260Z"
    v: 1
    author: "5883d0bed73408ce4f451ab9"
) #(
    id: "5883d2c7dcb66e4f7692e315"
    text: {This might be a better home guide?^/http://redprogramming.com/Home.html}
    sent: "2017-01-21T21:29:43.067Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883d239dcb66e4f7692e0cf"
    text: "That's for REBOL"
    sent: "2017-01-21T21:27:21.780Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883d1af11e7a7f61dc8d32b"
    text: {This gentlemans contribution looks like it might fit your need. ^/http://musiclessonz.com/rebol_tutorial.html}
    sent: "2017-01-21T21:25:03.452Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883d0f2dcb66e4f7692d8fb"
    text: {Hello everyone. As someone new to Red/REBOL, is there a specific resource you'd recommend to learn it?}
    sent: "2017-01-21T21:21:54.820Z"
    v: 1
    author: "5883d0bed73408ce4f451ab9"
) #(
    id: "5883cf2ad43728124e8897f4"
    text: "Where's Pong? I don't see it"
    sent: "2017-01-21T21:14:18.739Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883c434074f7be763fdcc0e"
    text: {So did document on my own [wiki](https://github.com/geekyi/code/wiki)}
    sent: "2017-01-21T20:27:32.264Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5883bdaf074f7be763fda831"
    text: {Btw, I tried to add to the wiki there, but have no permission}
    sent: "2017-01-21T19:59:43.119Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5883bd7b074f7be763fda757"
    text: {previous discussion: by @greggirwin  :point_up: [rgrep  / like / rawk](https://gitter.im/red/red?at=58387b748d65e3830e9d1026) and  by @meijeru  :point_up: [grep](https://gitter.im/red/red?at=5838b6d289d179bf4dc5be79)^/I think it would be a good idea to have at least one of those in the red/code repo?}
    sent: "2017-01-21T19:58:51.831Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588385a1cbcb2817709b298d"
    text: "@asampal Thanks!"
    sent: "2017-01-21T16:00:33.412Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58837c86d99b1dd03d30deed"
    text: {@dockimbel , I don't have more than passing VB experience, but I can take a look later today}
    sent: "2017-01-21T15:21:41.995Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "588375ddd43728124e86d36d"
    text: {@pekr Questions about which target can Red toolchain/runtime currently support should IMO best go into a FAQ page.}
    sent: "2017-01-21T14:53:17.967Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "588366d0cbcb2817709aa40d"
    text: {@dockimbel looking into the libRed docs, I can find only few specific mentions about something being 32 bit. Not understanding the issue properly, I am not sure, where, if at all, should/could it be mentioned, that we are not supporting 64bit? Or are we and the issue is specific to the Office64 bit VBA?}
    sent: "2017-01-21T13:49:04.198Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58834b3e11e7a7f61dc63385"
    text: {Maybe someone else, well versed in VB's intricacies, could help improve the Pong demo code? @asampal interested?}
    sent: "2017-01-21T11:51:26.920Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58834ad7e836bf701071c28f"
    text: {Font size is 100%. It must be related to coordinate system issue that you said above, but as I have no idea about Excel or its Macros, unfortunately I won't be able to fix the issue.}
    sent: "2017-01-21T11:49:43.796Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "588348a1cbcb2817709a27dc"
    text: {The VB code might also require tweaking of the coordinate system in addition to the Form position/size adjustments.}
    sent: "2017-01-21T11:40:17.009Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58834870dcb66e4f76902f53"
    text: {_This demo is optimized for Windows 7, using display font size of 100% and Aero activated. Other Windows settings and versions would need some code tweaking to get the VB form window position and size adjusted (a contributed general solution for that is welcome)._}
    sent: "2017-01-21T11:39:28.237Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58834823d43728124e85fdc4"
    text: "Is your desktop set to use 100% font size?"
    sent: "2017-01-21T11:38:11.819Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "588347e6074f7be763fb90cb"
    text: "I am on windows 8.1 using 32 bit Office 2010"
    sent: "2017-01-21T11:37:10.237Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58834795300f220a6615c416"
    text: {@nc-x Did you check the requirements from [here](https://github.com/red/red/tree/master/tests/libRed)? Can you debug it (VB is probably using a wrong coordinates system due to specfic local settings)?}
    sent: "2017-01-21T11:35:49.979Z"
    editedAt: "2017-01-21T11:37:35.705Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5883473511e7a7f61dc61ed0"
    text: {[![an.gif](https://files.gitter.im/red/red/PRwy/thumb/an.gif)](https://files.gitter.im/red/red/PRwy/an.gif)}
    sent: "2017-01-21T11:34:13.193Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58834726dcb66e4f769029bd"
    text: "The pong demo doesn't work fine for me -"
    sent: "2017-01-21T11:33:58.553Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5883466dcbcb2817709a1bb0"
    text: "@dockimbel "
    sent: "2017-01-21T11:30:53.399Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58833f26300f220a66159a8a"
    text: {My GREP tool finds patterns in strings or text files, not in filenames as PAF appears to do.}
    sent: "2017-01-21T10:59:50.094Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "588282b811e7a7f61dc2ea65"
    text: {It is Red and Red/System: https://github.com/red/red/tree/master/system/library/call}
    sent: "2017-01-20T21:35:52.455Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "588280d8d43728124e82beb9"
    text: {Are these functions constructed with C, or with red/system?}
    sent: "2017-01-20T21:27:52.088Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588275df11e7a7f61dc28836"
    text: "Ok, thank you"
    sent: "2017-01-20T20:41:03.085Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588275adcbcb28177096c70a"
    text: {There is a `call`fucntion, but it is not automatically included in Red yet. Not sure, if it is fully finished either ....}
    sent: "2017-01-20T20:40:13.591Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5882726bcbcb28177096b36c"
    text: {Is there a way to escape into O.S. command line, or interpolate command line into Red code?^/Like maybe a Command! type?}
    sent: "2017-01-20T20:26:19.872Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58824d0cd99b1dd03d30d008"
    text: "Great!"
    sent: "2017-01-20T17:46:52.100Z"
    editedAt: "2017-01-20T17:46:56.609Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58824b10074f7be763f709e5"
    text: "Gotta try them all!"
    sent: "2017-01-20T17:38:24.642Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58824af9d43728124e81719b"
    text: {:point_up: [January 20, 2017 3:22 AM](https://gitter.im/red/red?at=58813c1061e516c1579199a7) ^/> Sometimes I want to find some string in some directory (like grep can do) but I don’t want to leave red console. So I wrote PAF^/^/@meijeru  also wrote a similar [grep](https://gist.github.com/meijeru/badcc5184f312aedf51a010b4718a148) tool}
    sent: "2017-01-20T17:38:01.824Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5881f84c11e7a7f61dbf7640"
    text: {Damned, sorry for wasting your time Doc :-( It actually is 64 bit. I should have checked myself, instead of asking admins. My ntb was reinstalled few weeks ago after SSD crash ... I have never ever used 64 bit version before :-(}
    sent: "2017-01-20T11:45:16.261Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881f73411e7a7f61dbf7086"
    text: {Well, not anymore. My admins told me, we never use 64bit versions, but mine got downloaded from testing Office365, will check ...}
    sent: "2017-01-20T11:40:36.168Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881f6cce836bf70106b35ca"
    text: {Are you sure your Office version is 32-bit and not 64?}
    sent: "2017-01-20T11:38:52.396Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5881f6b611e7a7f61dbf6e5b"
    text: {Let me investigate further, to not confuse you .... found also this - http://stackoverflow.com/questions/39610157/vba-calling-c-dll-error-48-file-not-found}
    sent: "2017-01-20T11:38:30.402Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881f6a3dcb66e4f76899e32"
    text: "yes ...."
    sent: "2017-01-20T11:38:11.254Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881f697300f220a660f7e48"
    text: {Did you use the DLL provided in the same folder as the Excel file?}
    sent: "2017-01-20T11:37:59.050Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5881f67ce836bf70106b34b4"
    text: {Hmm, maybe something wrong with the DLL itself. Used dependencywalker.com}
    sent: "2017-01-20T11:37:32.587Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881f66cdcb66e4f76899d8b"
    text: {@pekr Those are not the same as "current path" for the process, which is used to search for DLLs. `ChDir` is mandatory.}
    sent: "2017-01-20T11:37:16.083Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5881eb996c1635643c531ca2"
    text: {The path is the same when I just hit enter, without even ChDir. }
    sent: "2017-01-20T10:51:05.689Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881eb7a11e7a7f61dbf3253"
    text: {Hmm, the path is correct. Tried both ActiveWorkBook and ThisWorkBook ... the question is, why it does not work ....}
    sent: "2017-01-20T10:50:34.021Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881ea38e836bf70106aee83"
    text: {The current folder change happens in the `runPong()` macro which is behind the "Run Demo" button.}
    sent: "2017-01-20T10:45:12.895Z"
    editedAt: "2017-01-20T10:45:20.540Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5881e9d8519afee26b8d7df3"
    text: {I was at Pong. The code is short ... will try to somehow get it to print the path ....}
    sent: "2017-01-20T10:43:36.262Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881e9a5cbcb28177093940a"
    text: "Ah, sorry, there are three sheets ...."
    sent: "2017-01-20T10:42:45.539Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881e974300f220a660f38cd"
    text: "@pekr Which demo/sheet are you using?"
    sent: "2017-01-20T10:41:56.078Z"
    editedAt: "2017-01-20T10:42:07.173Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5881e95411e7a7f61dbf2922"
    text: {@dockimbel The debugger stops on `redOpenReal` ... which just seems to be a wrapper to `redOpen()`. Can't find any `ChDir ActiveWorkbook.path`in the displayed code. Sorry if I am confused, have only limited understanding of what is actually going on :-)}
    sent: "2017-01-20T10:41:24.238Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881de4d61e516c15791a48c"
    text: "@dockimbel I see. I will try to rewrite it."
    sent: "2017-01-20T09:54:21.110Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5881ddbfe836bf70106aa815"
    text: {@rebolek That code could work, though, I would prefer an object wrapper instead of a function, which would be more compiler-friendly (dynamically created functions can't be compiled AOT).}
    sent: "2017-01-20T09:51:59.453Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5881dd1f11e7a7f61dbedc0e"
    text: {@pekr The provided demo Excel file is using `ChDir ActiveWorkbook.path` to force Excel to use the current folder as working folder. Maybe that trick does not work in newer Office?}
    sent: "2017-01-20T09:49:19.121Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5881d89fd99b1dd03d30c153"
    text: "Thanks, @DideC "
    sent: "2017-01-20T09:30:07.352Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5881d7f311e7a7f61dbec002"
    text: {Well, at least now the code stops with error 48, not finding DLL, but that might be the path problem .... just wondering where is the Excel looking it for, if the lib is in the same dir as the .xlsm file?}
    sent: "2017-01-20T09:27:15.448Z"
    editedAt: "2017-01-20T09:28:57.089Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881d7d1e836bf70106a8ac7"
    text: {The strange thing is, I am running 64bit Windows, but 32 bit Office. Anyway - adding `PtrSafe` after each `Declare` statement (in front of a `Function` or `Sub`), might do the trick?}
    sent: "2017-01-20T09:26:41.676Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881d78bdcb66e4f7688e39b"
    text: "@rebolek Very nice en usefull little script."
    sent: "2017-01-20T09:25:31.274Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5881d751dcb66e4f7688e268"
    text: {@dockimbel Saw some changes to Excel demo, still not sufficient here. I might found the solution - https://msdn.microsoft.com/en-us/library/office/gg264421.aspx}
    sent: "2017-01-20T09:24:33.108Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881c9c2db9cafe9183d315c"
    text: {@dockimbel at 70 lines I think it is minimal (but it can be probably smaller, I think) and it prints out to console or return matches in block :) Wildcards are missing, but I think of adding them.}
    sent: "2017-01-20T08:26:42.370Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5881c616300f220a660e707c"
    text: {there is also a red/help. I thought it was already directed towards red/welcome. Needs checking then ....}
    sent: "2017-01-20T08:11:02.958Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5881c12f074f7be763f3e871"
    text: {The chat link in Getting Started and Contributions on red-lang.org both point to red/red. ^/Does this need updated?}
    sent: "2017-01-20T07:50:07.679Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5881ae74cbcb2817709269ae"
    text: {Ok, I'll post my questions and opinions there, to begin with. }
    sent: "2017-01-20T06:30:12.732Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5881ad81dcb66e4f76880bce"
    text: "@gltewalt red/welcome is a good place for newbies"
    sent: "2017-01-20T06:26:09.398Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5881acd6300f220a660dfe8f"
    text: {I see many Gitter "rooms"}
    sent: "2017-01-20T06:23:18.984Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5881acaee836bf701069abf2"
    text: {Which Red channel should be used for newbies? Those who aren't part of the development team, or contributors. Those of us who want to learn something new, or are checking back in on the progress of the language and want to pick their learning back up}
    sent: "2017-01-20T06:22:38.681Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58818b7ddcb66e4f768785d5"
    text: {Agreed. The whole shell space is something that sounds simple, but the right design will make all the difference. I'll try to make time to work up some thoughts.}
    sent: "2017-01-20T04:01:01.082Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58817dcbe836bf701068edb7"
    text: {I would be glad to add a grep-like tool to the console environment, though, I would prefer a minimal one to start with, able to print the found matches in the console, or alternatively returning them in a block. For specifying the pattern to search, I think both wildcards and a dedicated dialect (or just Parse) would be nice to have.}
    sent: "2017-01-20T03:02:35.321Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58817a95074f7be763f2c381"
    text: {When we eventually build Red shell tools, I think it's good to offer what people are used to, but best to start as simple as possible and add features as they are requested. }
    sent: "2017-01-20T02:48:53.058Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58817a55300f220a660d3787"
    text: {Rgrep is ~50 lines, built on rawk, and only so large because it has 8 refinements, to try and match what normal grep offers. e.g. count, list, quiet, etc.}
    sent: "2017-01-20T02:47:49.912Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5881796edcb66e4f7687334b"
    text: {@rebolek, always good to see different approaches. Mine uses some others, to do file globbing as well. My old file-list/rawk/rgrep is good for me, but I think it ended up too complex and heavy, at least the file-list stuff did. Flexible, but I rarely use the advanced features.}
    sent: "2017-01-20T02:43:58.529Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588178d1300f220a660d2bbd"
    text: {@qtxie Please have a look at the crash on macGUI with the clock demo code above ^^---}
    sent: "2017-01-20T02:41:21.857Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58814b3b61e516c157919ab5"
    text: {@greggirwin Thanks. And if I knew about about `rgrep` I could save some minutes. But I would also lose some fun doing it :smile: }
    sent: "2017-01-19T23:26:51.076Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58814abce836bf701067eeba"
    text: {Nice stuff as always Bolek. I use my old `rgrep` script regularly. }
    sent: "2017-01-19T23:24:44.051Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5881414adcb66e4f76861a45"
    text: "@geekyi Did you look at the log file?"
    sent: "2017-01-19T22:44:26.341Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58813c1061e516c1579199a7"
    text: {Sometimes I want to find some string in some directory (like grep can do) but I don’t want to leave red console. So I wrote PAF https://github.com/rebolek/red-tools/blob/master/paf.red that does exactly this.^/Usage: `paf %./ "cossi"` or you can use parse rule: `paf %./ ["co" 2 #"s" #"i"]`. Do not use `to` or `thru` otherwise line counting won’t work. There are also two refinements, `/quiet` to suppress messages and `/only` to just return logic value. I wrote it yesterday so there may be some problems  and there’s certainly space for improvements. But it works good enough right now.}
    sent: "2017-01-19T22:22:08.206Z"
    editedAt: "2017-01-19T22:22:28.692Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "588124316c1635643c4f322e"
    text: "P.S. I'm not on mac so can't verify myself"
    sent: "2017-01-19T20:40:17.532Z"
    editedAt: "2017-01-19T20:40:25.169Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "588123d7e836bf7010670095"
    text: {@loganmac looks like macgui is under heavy development. So the bug may go away. If you can get a minimum reproducible code sample, that would be useful to report as a bug}
    sent: "2017-01-19T20:38:47.173Z"
    editedAt: "2017-01-19T20:39:31.138Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "588123c7300f220a660b7302"
    text: "Very cool Pekr!"
    sent: "2017-01-19T20:38:31.836Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588121f2074f7be763f0e72f"
    text: {Hey guys. I'm trying to do some of the livecoding example clock from the homepage. I have a console that I built from the macGUI branch, and any time I change any of the code in the editor part of the example I get ^/`*** Runtime Error 1: access violation^/*** at: 9EED2013h`^/and it crashes D:}
    sent: "2017-01-19T20:30:42.474Z"
    v: 1
    author: "55ce61210fc9f982bead6c20"
) #(
    id: "5880dadf6c1635643c4d1cdb"
    text: {I was doing this on windows command prompt:^/```^/..\..\rebol\rebview.exe -s tests\run-all.r^/```}
    sent: "2017-01-19T15:27:27.151Z"
    editedAt: "2017-01-19T15:27:54.597Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5880da79e836bf701064fc4d"
    text: {Tests fail if rebview is run from a relative path? There is no indication of this. Was a real head-scratcher for me until I figured it out}
    sent: "2017-01-19T15:25:45.422Z"
    editedAt: "2017-01-19T15:26:41.990Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5880d63911e7a7f61db8e974"
    text: {`red/docs` repository contains the current state of libRed API documentation, and this is readable in the [GitBook](https://doc.red-lang.org/en/)}
    sent: "2017-01-19T15:07:37.580Z"
    editedAt: "2017-01-19T15:08:11.006Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5880d3cd519afee26b8785ed"
    text: {`LibRed` is part of near 0.6.2 release. So we will have documentation (blog entry at least) about it when this version will be out.}
    sent: "2017-01-19T14:57:17.053Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5880d2e2dcb66e4f76832c1c"
    text: {So I keep hearing about this `libRed` thing on the sidebar of the home page, but it's actually difficult to read about it :P You ought to do a special post about it that's mentioned somewhere (at the time I tried to search the site, there was maybe one reference to libRed existing and that was it.)}
    sent: "2017-01-19T14:53:22.908Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "5880c414dcb66e4f7682c66d"
    text: {I can see the source and the `Sub`being hilited, so that's where it stopped to work, well, my guess ....}
    sent: "2017-01-19T13:50:12.430Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5880c3ed300f220a6608e69a"
    text: "I have Office 2016, 32 bit here ..."
    sent: "2017-01-19T13:49:33.626Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5880c350074f7be763ee5f2e"
    text: {@pekr Odd, it runs fine on Windows 7 64-bit. I have Office 2010 here. We'll try to get a more recent Office version to test.}
    sent: "2017-01-19T13:46:56.238Z"
    editedAt: "2017-01-19T13:48:08.606Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5880c33f074f7be763ee5e84"
    text: {Was just notified, that it was supposed to run on 32 bit systems, so you can regard above being just answered ...}
    sent: "2017-01-19T13:46:39.198Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5880c19b074f7be763ee55aa"
    text: {@dockimbel - just a note - test.xlsm does not run on Win10 64 bit (my Office is 32 bit), but I get a message: "Compile error: The code in this project must be updated for use on 64-bit systems. Please review and update Declare statements and then mark them with the PtrSafe attribute."}
    sent: "2017-01-19T13:39:39.163Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5880bf8cdcb66e4f7682aca9"
    text: {So cool once again :-) https://twitter.com/red_lang/status/822024154681487360}
    sent: "2017-01-19T13:30:52.233Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58808b9c873d96e16d89e8a6"
    text: "Ok"
    sent: "2017-01-19T09:49:16.880Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "5880886d11e7a7f61db6dcad"
    text: {@geekyi It is only required for compiling in _release_ mode. The README should reflect the state of latest stable version (0.6.1). The new stable should be out very soon anyway.}
    sent: "2017-01-19T09:35:41.547Z"
    editedAt: "2017-01-19T09:37:28.086Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58807d7a300f220a660755e7"
    text: {Well, it should be updated anyway for the changes. I may pull request}
    sent: "2017-01-19T08:48:58.426Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58807d5e300f220a6607557a"
    text: {@JerryTsai  @dockimbel  is the `-r` flag required? If so, the README should be updated}
    sent: "2017-01-19T08:48:30.636Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588066a66c1635643c4a57ec"
    text: "@loganmac :+1:  ;-)"
    sent: "2017-01-19T07:11:34.193Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5880606a6c1635643c4a3c3d"
    text: {Awesome! I just got that to work with the poll demo on the site. :) Really exciting stuff}
    sent: "2017-01-19T06:44:58.383Z"
    v: 1
    author: "55ce61210fc9f982bead6c20"
) #(
    id: "588053d811e7a7f61db5ca2b"
    text: {Should work with just `-r`, `-u` is for dev mode, for forcing a custom recompilation of libRedRT.}
    sent: "2017-01-19T05:51:20.890Z"
    editedAt: "2017-01-19T05:51:27.881Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "588051fe300f220a66067c0f"
    text: {[![Screen Shot 2017-01-18 at 10.43.05 PM.png](https://files.gitter.im/red/red/V25a/thumb/Screen-Shot-2017-01-18-at-10.43.05-PM.png)](https://files.gitter.im/red/red/V25a/Screen-Shot-2017-01-18-at-10.43.05-PM.png)}
    sent: "2017-01-19T05:43:26.918Z"
    v: 1
    author: "55ce61210fc9f982bead6c20"
) #(
    id: "588051fe873d96e16d88c06a"
    text: "@JerryTsai ^^ That's what I get :/"
    sent: "2017-01-19T05:43:26.732Z"
    v: 1
    author: "55ce61210fc9f982bead6c20"
) #(
    id: "58805154873d96e16d88bcf6"
    text: {@loganmac In the REBOL 2 console, type in `do/args %red.r "-u %environment/console/console.red"` then you get the macOS console with view functions. }
    sent: "2017-01-19T05:40:36.651Z"
    v: 1
    author: "559257c315522ed4b3e313ce"
) #(
    id: "58804c466c1635643c49e1b5"
    text: {@JerryTsai how do I build that branch? I couldn't find any instructions for compiling that branch.}
    sent: "2017-01-19T05:19:02.718Z"
    v: 1
    author: "55ce61210fc9f982bead6c20"
) #(
    id: "5880451d11e7a7f61db580fb"
    text: {@theideasmith I've beeb using macGUI branch. From my experience, I consider it ready.}
    sent: "2017-01-19T04:48:29.275Z"
    v: 1
    author: "559257c315522ed4b3e313ce"
) #(
    id: "588029a811e7a7f61db50934"
    text: {@theideasmith See the `macGUI` branch, the work is almost finished, just needs some polishing and bugfixing.}
    sent: "2017-01-19T02:51:20.595Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58802883cbcb2817708a2472"
    text: {@theideasmith Working has been progressing well on Mac GUI support. You can take a look at the current state in the macGUI branch in the repository. I believe it is already starting to be useable.^/^/Red Alpha 0.6.2 (LibRed) should be released within weeks. At the moment, Red Alpha 0.6.3 (MacOSGUI) is expected to follow within a couple of months . }
    sent: "2017-01-19T02:46:27.532Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58801d48dcb66e4f767f6acc"
    text: {Hey guys I'm wondering if mac graphics support is ready yet? }
    sent: "2017-01-19T01:58:32.240Z"
    v: 1
    author: "5568574115522ed4b3e11db1"
) #(
    id: "587faa966c1635643c4672aa"
    text: "you do have to learn erlang to use elixir."
    sent: "2017-01-18T17:49:10.945Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "587fa8e3873d96e16d8527ad"
    text: {@pr-yemibedu Yes, I do know about Elixir! At the moment I find Erlang more accessible, first because I am on a Windows machine and I got WERL, and second because I somehow find the syntax more interesting. I do however, appreciate the Ruby syntax, plus the apparently more consistent library support and metaprogramming. }
    sent: "2017-01-18T17:41:55.239Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587f9adae836bf70105dabfa"
    text: {@CodeTortoise also the https://gitter.im/red/red/welcome is active}
    sent: "2017-01-18T16:42:01.665Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "587f9acd11e7a7f61db1ceaf"
    text: "@CodeTortoise Welcome! :smile_cat:"
    sent: "2017-01-18T16:41:49.821Z"
    editedAt: "2017-01-18T16:42:42.994Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587f9a70873d96e16d84cd13"
    text: {@CodeTortoise do you know about elixir (http://elixir-lang.org/)? }
    sent: "2017-01-18T16:40:16.773Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "587f96b961e516c157916fe7"
    text: {Hi @CodeTortoise, see for example http://www.mycode4fun.co.uk/About-Red-Programming or http://red-by-example.org/ or http://redprogramming.com/Home.html}
    sent: "2017-01-18T16:24:25.712Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587f9528873d96e16d84a287"
    text: {Welp. Now I have 3 incredible languages vying for my full love and attention, the other two are J and Erlang. Can anyone here point me to the best material to begin learning Red? I know there are the hundreds of Rebol examples, but I would rather start learning Red fresh on it's own.}
    sent: "2017-01-18T16:17:44.599Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587f9436300f220a6602ae8c"
    text: {I recently rediscovered Red after somewhat dismissing it a few months ago. It seemed like it wasn't really being worked on at the the time, and I didn't know it had a community. I am overjoyed to see it is active. Like, impressively active. The blog and it's many examples more than give me confidence this is a language worth using and getting used to.}
    sent: "2017-01-18T16:13:42.620Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587f9391074f7be763e83283"
    text: {Hello Redsters... I don't know if the community has their own sobriquets yet.}
    sent: "2017-01-18T16:10:57.012Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587f52d561e516c1579164a0"
    text: {@geekyi Yes, I posted gif here (or maybe in gui-branch channel, I’m not sure).}
    sent: "2017-01-18T11:34:45.517Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587f52a9e836bf70105bdb76"
    text: {@rebolek `helpr` .. I think he may have showed this before, but I forgot}
    sent: "2017-01-18T11:34:01.909Z"
    editedAt: "2017-01-18T11:34:24.963Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "587f5278300f220a660113f2"
    text: {[![image.png](https://files.gitter.im/red/red/9GgS/thumb/image.png)](https://files.gitter.im/red/red/9GgS/image.png)}
    sent: "2017-01-18T11:33:12.902Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f4f6e11e7a7f61daff60a"
    text: "@rebolek Thx. Bo. I'll dig in. Lots to learn!"
    sent: "2017-01-18T11:20:14.101Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "587f4f146c1635643c44174c"
    text: "@rebolek ooh nice"
    sent: "2017-01-18T11:18:44.195Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f4edfd99b1dd03d307cd8"
    text: {@Arie-vw [Here](https://github.com/rebolek/gritter/blob/stylize/helpr.red#L16)'s the **helpr** script I showed you, this code gets help string, arguments and refinements and builds draw block from them. With some small changes this can be used to build HTML pages.}
    sent: "2017-01-18T11:17:51.668Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587f4df6300f220a6600fad9"
    text: {@maximvl  Ah. That is nice! Thx. There are sooo many words to learn :smile: ^/}
    sent: "2017-01-18T11:13:58.790Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "587f4db211e7a7f61dafec4a"
    text: {@Arie-vw I guess you can use `spec-of`:^/```^/red>> probe spec-of :at^/[^/    "Returns a series at a given index" ^/    series [series!] ^/    index [integer! pair!] ^/    return: [series!]^/]^/```}
    sent: "2017-01-18T11:12:50.833Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587f4d62e836bf70105bbb54"
    text: "OK. Thx.^/"
    sent: "2017-01-18T11:11:30.830Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "587f4d5011e7a7f61dafea8a"
    text: "Yes ...^/"
    sent: "2017-01-18T11:11:12.996Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "587f4d43dcb66e4f767a93b6"
    text: {@Arie-vw You mean the embedded doc-strings in functions? You can freely extract and use them.}
    sent: "2017-01-18T11:10:59.781Z"
    editedAt: "2017-01-18T11:11:20.744Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587f4cf111e7a7f61dafe8e5"
    text: {Ah OK!! Thx. I tried the get-path for the last element, but that was not ok.^/ @dockimbel  Is this the right place where you get the help info for words when using the help word? We want to use that help in red-by-example in the near future.^/}
    sent: "2017-01-18T11:09:37.459Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "587f49b2cbcb28177084edb5"
    text: {@Arie-vw Use get-paths: ^/```lisp^/red>> :system/words/break^/== make native! [[^/    {Breaks out of a loop, while, until, repeat, foreach, etc} ^/    /retu...^/```}
    sent: "2017-01-18T10:55:46.953Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587f4884873d96e16d82c5ba"
    text: {I'd like to access word definitions in system/words.^/However, so far I cannot get it to work, probably due to the fact that those words have a special meaning.^/`red>> system/words/break^/*** Throw Error: no loop to break^/*** Where: break`^/How can I get this kind of info?}
    sent: "2017-01-18T10:50:44.947Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "587f3e7961e516c1579161e0"
    text: "@maximvl you’re welcome"
    sent: "2017-01-18T10:07:53.177Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587f3e6edcb66e4f767a46ee"
    text: "@rebolek yes, thanks, forgot about it"
    sent: "2017-01-18T10:07:42.075Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587f3e6e96a565f8440955ee"
    text: {```^/red>> pick [a b c d] 3^/== c^/```}
    sent: "2017-01-18T10:07:42.011Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587f3e5bdb9cafe9183cecfd"
    text: "`pick` ?"
    sent: "2017-01-18T10:07:23.400Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587f3e2cdcb66e4f767a44cc"
    text: "to get element by index?"
    sent: "2017-01-18T10:06:36.293Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587f3e18300f220a66009f1d"
    text: "@dockimbel is there an shortcut for `first at` ?"
    sent: "2017-01-18T10:06:16.952Z"
    editedAt: "2017-01-18T10:06:27.451Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587f39cd6c1635643c439e0c"
    text: "I upvoted too. ;-)"
    sent: "2017-01-18T09:47:57.378Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587f3966cbcb281770848d11"
    text: "but I upvoted the comment about Red, yes :D"
    sent: "2017-01-18T09:46:14.180Z"
    editedAt: "2017-01-18T09:46:36.096Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587f395c11e7a7f61daf728d"
    text: "Not a competitor at all"
    sent: "2017-01-18T09:46:04.345Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587f36fa11e7a7f61daf65a2"
    text: {**tl;dr** It's a lisp implemented on the python pypy backend that has been abandoned a year ago. As mentioned by the author on that hacker news thread}
    sent: "2017-01-18T09:35:54.385Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f362bcbcb281770847aba"
    text: {@pekr Not a competitor to Red. Anyway, it's a stalled project.}
    sent: "2017-01-18T09:32:27.193Z"
    editedAt: "2017-01-18T09:33:10.823Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587f3172873d96e16d823ee1"
    text: "Quite positive mentions, nice to read!"
    sent: "2017-01-18T09:12:18.804Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "587f30b36c1635643c436d5b"
    text: {I can see someone mentioned Red there, so that's why :-)}
    sent: "2017-01-18T09:09:07.865Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "587f307bdcb66e4f7679f6c0"
    text: "pixie is inactive"
    sent: "2017-01-18T09:08:11.645Z"
    v: 1
    author: "5659cd6016b6c7089cbc824a"
) #(
    id: "587f30436c1635643c436b8b"
    text: "Do you find is as a potential competition?"
    sent: "2017-01-18T09:07:15.709Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "587f1691cbcb28177083d420"
    text: {Seems like the articles on HackerNews yesterday about the new Pixie Lisp language brought us a lot of traffic on Red sites. ;-)}
    sent: "2017-01-18T07:17:37.295Z"
    editedAt: "2017-01-18T07:18:52.752Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587e4ee66c1635643c3eacce"
    text: {Here's my interim `join`.^/```^/join: func [^/^-"Returns a copy of a value, with other values appended."^/^-value "Base value; copied if series, formed otherwise"^/^-rest  "Value or block of values"^/][^/^-repend either series? :value [copy value] [form :value] :rest^/]^/```}
    sent: "2017-01-17T17:05:42.679Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "587e161a873d96e16d7bf3f2"
    text: {Until we provide `join` or an equivalent replacement, `join a b` can be simply replaced by `repend copy a b` if `a` is a series, or `repend form a b` otherwise.}
    sent: "2017-01-17T13:03:22.282Z"
    editedAt: "2017-01-17T13:03:49.413Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587e11b111e7a7f61da8db08"
    text: {@qtxie Started using Everedit using your highlighter. THX!}
    sent: "2017-01-17T12:44:33.879Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "587e11596c1635643c3cf935"
    text: "Sorry for format ..."
    sent: "2017-01-17T12:43:05.705Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "587e1132cbcb2817707e1223"
    text: {@gearss ^/I "stole" this rejoin function somewhere:^/rejoin: func [^/    "Reduces and joins a block of values."^/    block [block!] "Values to reduce and join"^/][^/    if empty? block: reduce block [return block]^/    append either series? first block [copy first block] [^/        form first block^/    ] next block^/]^/}
    sent: "2017-01-17T12:42:26.017Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "587de790e836bf701053953d"
    text: "@dockimbel I will"
    sent: "2017-01-17T09:44:48.828Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587dda71e836bf701053515f"
    text: {@gearss `alert` is not yet implemented, as we need to decide if we provide a platform-specific version or a cross-platform one... or both. For the `break` issue, it seems `attempt` is catching the exception produced by `break` instead of letting it pass. That is a bug worth reporting on our bugtracker.}
    sent: "2017-01-17T08:48:49.738Z"
    editedAt: "2017-01-17T08:50:14.216Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587dd25ecbcb2817707ca950"
    text: "I use it on a cell phone daily."
    sent: "2017-01-17T08:14:22.365Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "587dd258300f220a66f8db31"
    text: {@gearss - yes, you can either use Gitter website, it has a smartphone responsive mode, but I found it buggy and am quite happy with the Android app they provide.}
    sent: "2017-01-17T08:14:16.149Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "587dd03311e7a7f61da76661"
    text: {@gearss you can report this as a bug:^/```^/red>> forever [ print "1" break ]^/1^/red>> forever [ attempt [ print "1" break ] ]^/1^/*** Throw Error: no loop to break^/*** Where: break^/```}
    sent: "2017-01-17T08:05:07.650Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587dcf0e074f7be763de47e8"
    text: {is possible to read and reply this chatting room in smart phone?}
    sent: "2017-01-17T08:00:14.702Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587dcec3074f7be763de4672"
    text: "I use rebol for years."
    sent: "2017-01-17T07:58:59.920Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587dce8211e7a7f61da75aaf"
    text: {Re `attempt`I don't know - you already seem being more skilled than me anyway, so :-)}
    sent: "2017-01-17T07:57:54.397Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "587dce2c074f7be763de44bf"
    text: {As for join, I think it is not there yet. There was some discussion, which of "mezzanines" (functions written in Red/Rebol itself) are going to be included, and which ones are going to be provided in terms of some mezzanine library. You can use `source join`and copy Rebol's one, should work. Or I remember @greggirwin might have done something in that regard?}
    sent: "2017-01-17T07:56:28.278Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "587dce1a300f220a66f8c90a"
    text: {but if I writethe code in Red like this: forever [attempt [cont: read to url! "http://phys.org"    break]], error occured and prompted there is no loop to break. how to solve the problem?}
    sent: "2017-01-17T07:56:10.503Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587dcdbd873d96e16d7a55d2"
    text: {@gearss First, you can use functions without parens. I am not good at Rebol/Red internals, but my understanding was, that parens have some evaluation overhead. So: `alert "OK"`is just fine.}
    sent: "2017-01-17T07:54:37.070Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "587dcd9de836bf7010531471"
    text: {forever [attempt [cont: read to-url "http://phys.org"    break]]}
    sent: "2017-01-17T07:54:05.728Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587dcd3d11e7a7f61da75518"
    text: {in Red, the break function is not the same as in Rebol, in rebol, we can writethe code:}
    sent: "2017-01-17T07:52:29.392Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587dcd10cbcb2817707c90db"
    text: {sorry, it sould be alert("OK").}
    sent: "2017-01-17T07:51:44.232Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587dccf6873d96e16d7a5231"
    text: {is there a function in Red like the join in rebol? in rebol, we get a string by str:  join "ab" "cd", the result is "abcd". is there a function in Red like the alert in rebol? we can use alert('OK") in rebol.}
    sent: "2017-01-17T07:51:18.352Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587d97a4e836bf7010522a17"
    text: {Just to clarify, the android branch on Github is an experimental branch. It is not at Alpha quality.}
    sent: "2017-01-17T04:03:48.401Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "587d975a11e7a7f61da670af"
    text: {@gearss The prototype is in the ```android``` branch in Github. There is no documentation. It hasn't been updated for a long time so it is unlikely to work now. To give you an idea of  state of the android branch, it is nearly 4,000 commits behind the master branch.}
    sent: "2017-01-17T04:02:34.220Z"
    editedAt: "2017-01-17T04:04:51.253Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "587d900c873d96e16d7951bb"
    text: {can you send the prototype to me? I would like to test it.}
    sent: "2017-01-17T03:31:24.154Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587d8e15d99b1dd03d3049d8"
    text: {@gearss It's not ready yet. We do have a prototype, not sure if it's still working now. We'll start working on it after 0.6.2 release.}
    sent: "2017-01-17T03:23:01.228Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "587d89e9e836bf701051fa1c"
    text: "do have an apk to install Red on android phone?"
    sent: "2017-01-17T03:05:13.733Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587d89a1dec171b811fa2ef9"
    text: {@qtxie , how to run the Red codes on android phone?}
    sent: "2017-01-17T03:04:01.340Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587c5dd3074f7be763d70e54"
    text: {@gearss FYI, the CLI console works fine. You can try it with `red --cli`.}
    sent: "2017-01-16T05:44:51.200Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "587c5d73300f220a66f1a408"
    text: {@gearss It's a known issue in the gui-console. I'll have a look at it today.}
    sent: "2017-01-16T05:43:15.271Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "587c3e5111e7a7f61d9f614c"
    text: {@redredwine ^/>  it will save every new person joining, from having to ask this question, in the forum.^/^/Which question?}
    sent: "2017-01-16T03:30:25.455Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587c3d16dec171b811f37b05"
    text: {@gearss Use `read/binary`. Only UTF-8 decoder is provided for now. For the delayed printing issue, I let @qtxie answer it.}
    sent: "2017-01-16T03:25:10.760Z"
    editedAt: "2017-01-16T03:25:25.297Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587c20b711e7a7f61d9eddeb"
    text: {It seems Red only can read the webpage which is UTF-8 format, how to read webpage in other format, like GBK, or GB3212?}
    sent: "2017-01-16T01:24:07.579Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587c2064cbcb28177073f661"
    text: {I must wait long time until the codes run for 100 times.  How I can see the result of "length? xx" of each running?}
    sent: "2017-01-16T01:22:44.253Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587c2018cbcb28177073f4df"
    text: {repeat time 100 [^/print time^/xx: read http://phys.org^/print length? xx^/]}
    sent: "2017-01-16T01:21:28.402Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587c1ff4873d96e16d71d770"
    text: "I run following code:"
    sent: "2017-01-16T01:20:52.635Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587c1fe96c1635643c32fae2"
    text: {I find Red canont print the resultimmediately， is  different from rebol.}
    sent: "2017-01-16T01:20:41.021Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "587be085873d96e16d70b875"
    text: "Ok, then I'll check that out (no pun intended :P)"
    sent: "2017-01-15T20:50:13.150Z"
    v: 1
    author: "587bc446d73408ce4f43b631"
) #(
    id: "587bdf73d99b1dd03d3023e2"
    text: {@MatthewScholefield there is already some work done on GTK version. Nothing is included in the master branch yet, but you can check the GTK branch.}
    sent: "2017-01-15T20:45:39.079Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587bdf13074f7be763d5043a"
    text: {@maximvl I'll just wait for a Linux GUI backend to be written.}
    sent: "2017-01-15T20:44:03.603Z"
    v: 1
    author: "587bc446d73408ce4f43b631"
) #(
    id: "587bd30f074f7be763d4c218"
    text: "(this is how I write GUI now :))"
    sent: "2017-01-15T19:52:47.287Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587bd2f4cbcb28177072947f"
    text: "with windows Red binary of course"
    sent: "2017-01-15T19:52:20.327Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587bd2e5074f7be763d4bfea"
    text: {@MatthewScholefield on linux you can just use wine, it works more or less fine}
    sent: "2017-01-15T19:52:05.838Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587bd2b8cbcb2817707293c6"
    text: {@maximvl Oh, then that's why; I'm doing this on Linux. Thanks!}
    sent: "2017-01-15T19:51:20.092Z"
    v: 1
    author: "587bc446d73408ce4f43b631"
) #(
    id: "587bd27a074f7be763d4bcfd"
    text: "mac & linux don't have GUI backends yet"
    sent: "2017-01-15T19:50:18.051Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587bd264074f7be763d4bcea"
    text: {@MatthewScholefield are you doing this on windows?}
    sent: "2017-01-15T19:49:56.361Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587bd08edec171b811f1b048"
    text: {@endo64 I tried running [the following example](https://github.com/red/code/blob/master/Showcase/tile-game.red) but I got the error: `Script Error: view has no value`.}
    sent: "2017-01-15T19:42:06.026Z"
    v: 1
    author: "587bc446d73408ce4f43b631"
) #(
    id: "587bcd8edec171b811f1a23c"
    text: {@MatthewScholefield It's already included by default, you can simply download the latest binary build and execute demo scripts, you can find many scripts inside the tests folder. If you compile your script into .exe then you just need to include `Needs: View` in your Red header.}
    sent: "2017-01-15T19:29:18.915Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "587bc5d46c1635643c3156b0"
    text: {Is there a way to get Red's GUI system? I read [this](http://www.red-lang.org/2016/03/060-red-gui-system.html) about it but I didn't find a download link and it doesn't seem like it's included by default in the standalone executable.}
    sent: "2017-01-15T18:56:20.614Z"
    v: 1
    author: "587bc446d73408ce4f43b631"
)#(
    id: "587bb4f46c1635643c30f88d"
    text: {the vba-red bridge will actually be a good way to get a foot inside  the corporate world.   There are billions of spreadsheets out there, (it's true though that not every one of them is using VBA),   however even 1% of a billion is a huge amount of possibilities. }
    sent: "2017-01-15T17:44:20.318Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "587bb1ca873d96e16d6fd76e"
    text: {@dockimbel ,    with reference to you explanation about the red "installer" ,   could this page be updated http://www.red-lang.org/p/getting-started.html   to show that something is being put in the c:/programdata/Red folder ?   I had the same problem  as @RnBrgn     and had help from @greggirwin  and a couple of folks in the red/welcome  room.    If this is  mentioned in the getting-started.html page, then it will save every new person joining,  from having to ask this question,  in the forum. ^/}
    sent: "2017-01-15T17:30:50.186Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "587a4f39e836bf7010434d5a"
    text: {@dockimbel now it has a "little" debugger:)))) (OMG I must clean it up:). Especially 228-234l)}
    sent: "2017-01-14T16:18:01.324Z"
    editedAt: "2017-01-14T16:20:53.224Z"
    v: 5
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "587a3d63873d96e16d698301"
    text: "@ifgem Nice Ruby-style macro, you're welcome. :-)"
    sent: "2017-01-14T15:01:55.035Z"
    editedAt: "2017-01-14T15:02:11.211Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587a2672dec171b811eaef2f"
    text: {@dockimbel thank you for this craziness:)))^/https://gist.github.com/ifgem/12110ddfb0091d33798a957b09a2f964}
    sent: "2017-01-14T13:24:02.172Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5879fc4ecbcb2817706ae343"
    text: {@pekr You cannot use libRed with Office365 online, at least not until we get a JS backend support for Red. For the offline version, yes, you need to provide the libRed version that goes with the OS, though, Office does not run on that many platforms.}
    sent: "2017-01-14T10:24:14.047Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5879fb78e836bf701041e99f"
    text: {@dockimbel - for me to better understand. Let's say Excel uses it's own "scripting" language. It might be cross-platform. Then me, as not a good coder in Exce terms (well, in any terms :-) ), wants to do some stuff using Red. So I use some example code and do some stuff using Red. How much I am limiting cross-platform usability and/or even Office365 online usability? Is my understanding correct, that we have to compile libRed for each target platform?}
    sent: "2017-01-14T10:20:40.221Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5879f65411e7a7f61d958831"
    text: "nice demo !"
    sent: "2017-01-14T09:58:44.128Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5879f4a36c1635643c2974c8"
    text: {Here it is: [![pong-src.png](https://files.gitter.im/red/red/pzza/thumb/pong-src.png)](https://files.gitter.im/red/red/pzza/pong-src.png)}
    sent: "2017-01-14T09:51:31.575Z"
    editedAt: "2017-01-14T09:54:26.849Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5879f237cbcb2817706ab913"
    text: "Splendid! Can't wait to see the source!!!"
    sent: "2017-01-14T09:41:11.058Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5879f080cbcb2817706ab377"
    text: {It's just a one code page demo. ;-) I'll publish the code soon with other ones showing Excel/libRed integration. In that first demo, VB is doing the whole work, even updating the position of Red face objects.}
    sent: "2017-01-14T09:33:52.541Z"
    editedAt: "2017-01-14T09:35:50.935Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5879e83fe836bf701041a265"
    text: {Guys, you don't stop to amaze me - libRed bidning for VBA, just excellent! https://twitter.com/red_lang/status/820116853104091136}
    sent: "2017-01-14T08:58:39.348Z"
    editedAt: "2017-01-14T08:59:20.617Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58799dab300f220a66e6a228"
    text: {There is no "installer" in Red, the `red.exe` binary is located where you put it. When invoked the first time, the Red console is compiled and saved in `C:\ProgramData\Red\`, though this is transparent for the user and the `red.exe` acts as a proxy, so you don't have to care about this. In a nutshell, you download `red.exe`, you put it where you want and just run it (the first time you run it takes a bit more time), that's all.}
    sent: "2017-01-14T03:40:27.726Z"
    editedAt: "2017-01-14T03:41:41.028Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58797e0d074f7be763cb73a1"
    text: {@RedXTech   The  installation file is the red binary. You run the install and it will compile the program and place files in c:\programdata. When the install is finished, run the install file again and you should get the Red console.}
    sent: "2017-01-14T01:25:33.638Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "58793b60e836bf70103ecdc6"
    text: "@9214 right :)"
    sent: "2017-01-13T20:41:04.679Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "587927e66c1635643c261a64"
    text: "@endo64 *anti* virus"
    sent: "2017-01-13T19:17:58.927Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58792299873d96e16d64ed3d"
    text: {Some virus programs don't allow to create those files, check that out too.}
    sent: "2017-01-13T18:55:21.423Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5879225acbcb28177067360f"
    text: {Did you check `C:\ProgramData\Red` by default CLI console and GUI console executables created there named like `console-2016-12-14-42993.exe` or `gui-console-2016-12-14-42993.exe`}
    sent: "2017-01-13T18:54:18.427Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58790c4411e7a7f61d9189f9"
    text: {On windows, does anyone know where the red binary is installed by default? I installed red but when I run 'red' in the console nothing happens.}
    sent: "2017-01-13T17:20:04.913Z"
    v: 1
    author: "58790c08d73408ce4f435572"
) #(
    id: "58790bf9dec171b811e61f2e"
    text: "@dockimbel found two bugs in #macro :)"
    sent: "2017-01-13T17:18:49.886Z"
    editedAt: "2017-01-13T17:18:55.949Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5878f42711e7a7f61d90dc40"
    text: {@Oldes  atom and vscode a really great editors. they have vibrant communities and lots of plugins to get your work done. the TS/JS part provide low hanging fruit for new comers to add extensions, and the HTML/CSS mean many existing developers can use existing skills to create new and flexible UI components. It is one reason they call themselves (hackable) editors.}
    sent: "2017-01-13T15:37:11.010Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "5878e694cbcb28177065acb1"
    text: {@nc-x That's really odd, I never seen this error here. It seems like gcc tried to make a static linking instead of a dynamic one... @qtxie Any idea?}
    sent: "2017-01-13T14:39:16.055Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5877977d11e7a7f61d88e649"
    text: {On a fresh installation of 32 bit Ubuntu, using `gcc tests/libRed-test.c -L ./ -l Red -I ./libRed -o libRed-test` gives -^/```^//usr/bin/ld: errno: TLS definition in /lib/i386-linux-gnu/libc.so.6 section .tbss mismatches non-TLS reference in .//libRed.so^//lib/i386-linux-gnu/libc.so.6: error adding symbols: Bad value^/collect2: error: ld returned 1 exit status^/```}
    sent: "2017-01-12T14:49:33.334Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5877498acbcb2817705ca62e"
    text: {I am using the 32 bit Rust compiler so I think it automatically uses 32 bit gcc or -m32 option as appropriate .}
    sent: "2017-01-12T09:16:58.142Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "587726f1cbcb2817705bfcf8"
    text: {@nc-x Forgot to add that if you're on 64-bit OS, you need to use the `-m32` option.}
    sent: "2017-01-12T06:49:21.804Z"
    editedAt: "2017-01-12T06:49:36.514Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587709fecbcb2817705b81fc"
    text: {Hmmm... Using just the *.so file on linux gave me an error - "skipping incompatible libred.so" or something like that. I used the Rust compiler which essentially uses gcc for linking. I will have a look later today.}
    sent: "2017-01-12T04:45:50.207Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5876fd6d11e7a7f61d85d1fd"
    text: {This is how we compile the C test file with libRed on Unix platforms:^/```lisp^/$ gcc tests/libRed-test.c -L ./ -l Red -I ./libRed -o libRed-test^/```}
    sent: "2017-01-12T03:52:13.935Z"
    editedAt: "2017-01-12T03:53:03.692Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5876fc45cbcb2817705b4dda"
    text: {@nc-x You just need the `.so` file, the `.a`file is for static linking only. }
    sent: "2017-01-12T03:47:17.198Z"
    editedAt: "2017-01-12T03:49:32.920Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58767265300f220a66d6257c"
    text: {I think I got the `libred.a` file (using dlltool) and the linking of a sample test file succeeds and gives an executable but running it fails with `(signal: 11, SIGSEGV: invalid memory reference)`. ^/Here is the code - `https://github.com/nc-x/libred-rs/blob/travis/src/lib.rs#L296` ^/The code works as expected on Windows. Need to check why it doesn't work in linux. Will use a linux vm and test it whenever I have time.}
    sent: "2017-01-11T17:59:01.162Z"
    editedAt: "2017-01-11T18:00:00.466Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58764b7d300f220a66d51626"
    text: {@dockimbel ^/For libred on linux, do we need a `libred.a` file?}
    sent: "2017-01-11T15:13:01.933Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "587626d9cbcb281770563c89"
    text: {@dockimbel I don't think there is any Common Control library version 6 added by default. ^/^/1) Adding `#pragma comment(linker,"\"/manifestdependency:type='win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'\"")` to the c file in which libred api is used.^/  ^/OR^/^/2) Using `cl libred-test.c libred.lib /link /MANIFEST` to generate the manifest and then manually editing the `libred-test.exe.manifest` file to add ^/```^/<?xml version='1.0' encoding='UTF-8' standalone='yes'?>^/<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>^/  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">^/    <security>^/      <requestedPrivileges>^/        <requestedExecutionLevel level='asInvoker' uiAccess='false' />^/      </requestedPrivileges>^/    </security>^/  </trustInfo>^/  <dependency>^/    <dependentAssembly>^/      <assemblyIdentity type='win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*' />^/    </dependentAssembly>^/  </dependency>^/</assembly>^/```^/(This manifest can then be merged with the *.exe file using `mt.exe -nologo -manifest "libred-t.exe.manifest" -outputresource:"libred-t.exe;#1"`)^/ ^/This enables the Visual Styles.}
    sent: "2017-01-11T12:36:41.183Z"
    editedAt: "2017-01-11T12:41:55.539Z"
    v: 8
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "587600ef11e7a7f61d7fc6e4"
    text: {When searching for such definitions, you can grep on `#define <symbol>` or `<symbol>:` from the red repo root folder.}
    sent: "2017-01-11T09:54:55.179Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587600b5873d96e16d534c33"
    text: {@ifgem Here: https://github.com/red/red/blob/master/runtime/datatypes/structures.reds#L17}
    sent: "2017-01-11T09:53:57.065Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5875f925873d96e16d5321f6"
    text: {@dockimbel sorry for silly question, where can I find the definition of red-value! ?:)}
    sent: "2017-01-11T09:21:41.494Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5875d091074f7be763b7a454"
    text: {@Oldes Cool! Do you have some visual demos using libRed we could see/share?}
    sent: "2017-01-11T06:28:33.946Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5875d04acbcb281770547e3b"
    text: {@nc-x I've pushed some fixes, it should (cross-)compile fine now.}
    sent: "2017-01-11T06:27:22.000Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5875cc2c61fac5a03dc2b6a2"
    text: {@DideC Clipboard: not yet, we need ports support first for that.}
    sent: "2017-01-11T06:09:48.416Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5875caafdec171b811d31e1b"
    text: {@nc-x About LibRed cross-compilation, there are a couple of functions in the API which are Windows-specific, so we need to make them optional. Otherwise, cross-compilation of libRed.red should work fine.}
    sent: "2017-01-11T06:03:27.046Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5875c958cbcb28177054636a"
    text: {@nc-x MSVC: it should work fine then. You can check if your executable contains a manifest file (XML format) in the resources section, indicating the loading of Common Control library version 6+. If that manifest is not present, Visual Styles are disabled.}
    sent: "2017-01-11T05:57:44.400Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587568bb873d96e16d507b8b"
    text: {@DideC Not yet. But I'll implement it soon as I need it for the new red console. :smirk: }
    sent: "2017-01-10T23:05:31.652Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58754ad8cbcb28177051c09b"
    text: {Of course, there is Unity, which could be used now with some afford, but AIR is free and it has all we needed several years back.. so right.. _Adobe was too much in advance for its time_ . Unfortunately Adobe is not interested in its own technology much. At least not like Unity is. Probably because they have no income from it.}
    sent: "2017-01-10T20:58:00.812Z"
    editedAt: "2017-01-10T20:58:16.428Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "587549d16c1635643c10020b"
    text: {@geekyi I never heard about Electron yet. Regarding AIR, we used it for game Samorost 3 (development started 5 years ago) and I must say, that I still don't know anything else which I could use for all main (no linux) platforms (at least not when we started and had to decide, what technology to use). Now Haxe is more mature, but still not ready for my need. But true is, that AIR is quite heavy for simple utilities... that's why I use Rebol (v2) every day and follow Red development.^/^/Just quick look at Electron site - it is JS with HTML+CSS = I don't want to touch it and it really cannot be same like AIR.}
    sent: "2017-01-10T20:53:37.375Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58753125300f220a66cf6b46"
    text: "Meaning AIR and Electron are basically same"
    sent: "2017-01-10T19:08:21.935Z"
    editedAt: "2017-01-10T19:08:50.935Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "587530f564d5fd7e16a083e9"
    text: {> The only way I can explain it is that Adobe was too much in advance for its time}
    sent: "2017-01-10T19:07:33.814Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587530cb61fac5a03dbf824e"
    text: {Also a [perspective](https://discuss.as3lang.org/t/the-best-move-that-adobe-could-do/418)}
    sent: "2017-01-10T19:06:51.097Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58753076300f220a66cf66ca"
    text: {[Comparisons](https://mobidev.biz/blog/cross-platform_development_for_desktops_choosing_the_right_technology) of similar platforms}
    sent: "2017-01-10T19:05:26.121Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5875296b6c1635643c0f2996"
    text: "Nothing wrong with AIR support, just saying"
    sent: "2017-01-10T18:35:23.670Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5875294bdec171b811cfa78a"
    text: {@Oldes do you know of Electron? It's what the *"cool kids"* use these days. From what I know of AIR, it seems to be a competing platform}
    sent: "2017-01-10T18:34:50.974Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5875279f6c1635643c0f1c40"
    text: "@Oldes what can you do with AIR these days? "
    sent: "2017-01-10T18:27:43.751Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58750d7d64d5fd7e169f96d8"
    text: {@dockimbel  So now is my AIR native extension for Red language more polished for public review: https://github.com/Oldes/ANERed}
    sent: "2017-01-10T16:36:13.734Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
)#(
    id: "5875094e61e516c157908bcf"
    text: ":)"
    sent: "2017-01-10T16:18:22.444Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587509426c1635643c0e3bf6"
    text: {`day-length: day-length * 3  sleep-time: sleep-time / 3` could make the trick ;-)}
    sent: "2017-01-10T16:18:10.668Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "587507c961fac5a03dbe678a"
    text: {@DideC this encourages me to work on my forth-mimic thingy =)}
    sent: "2017-01-10T16:11:53.367Z"
    editedAt: "2017-01-10T16:12:02.839Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587507446c1635643c0e2d10"
    text: {I updated again my [Heart-animation gist](https://gist.github.com/DideC/d58d43d3dfeddc19d7a1f980e6930313): new control parameters + reordered control panel + credits.}
    sent: "2017-01-10T16:09:40.758Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5874ef90cbcb2817704f6bba"
    text: {@qtxie @dockimbel Does the clipboard is available to Red code (under Windows) ?}
    sent: "2017-01-10T14:28:32.204Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5874cd0d6c1635643c0cb4a8"
    text: "@qtxie Yes they are. Thanks."
    sent: "2017-01-10T12:01:17.830Z"
    editedAt: "2017-01-10T12:01:26.242Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5874c924873d96e16d4c841d"
    text: {Thanks guys. I'll finish all the features I planned (saving as png and custom project format, grid widget, editing widget's text and some other properties) then I'll put the sources to github.^/@mikeparr The original one written in JS using backbone.js and local storage, it's development is not active so I decided to write my own using Red. ^/Reloading the generated code will be possible.^/@pekr @dockimbel I'll post it on Twitter & FB when it's ready to use. I want to share the complete version but a half-working code.}
    sent: "2017-01-10T11:44:36.960Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5874c7ca6c1635643c0c9678"
    text: {@dockimbel regarding libred on linux, I was trying to cross-compile the .red file from here - https://github.com/red/red/tree/master/libRed . I didn't try using "red build libred" on a linux machine. Is cross compiling to linux libred.so not supported from windows?}
    sent: "2017-01-10T11:38:50.399Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5874c72acbcb2817704e705a"
    text: {@dockimbel I am using msvc compiler. Is there any command line switch that msvc uses for compiling as a GUI? Because I didn't use any and that's the most probable reason for getting such old looking GUI through libred. I will check this out and report back.}
    sent: "2017-01-10T11:36:10.398Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5874b1c8074f7be763b19d14"
    text: "@pekr Ah, thanks.   Even better!"
    sent: "2017-01-10T10:04:56.143Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5874ae9cd99b1dd03d2f8946"
    text: {@DideC The two issues should be fixed in the master branch.}
    sent: "2017-01-10T09:51:24.974Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5874a82e6c1635643c0bdc37"
    text: {@endo64 Very cool! :+1:  If you want to tweet your screen capture, I'll be glad to retweet it. ;-)}
    sent: "2017-01-10T09:23:58.953Z"
    editedAt: "2017-01-10T09:26:31.787Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5874a72d6c1635643c0bd5ff"
    text: {@mikeparr my understanding is, that the original is a web form, hence JS, but what Endo is showing, is actually a Red implementation ....}
    sent: "2017-01-10T09:19:41.741Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5874a683074f7be763b15df3"
    text: {@endo64  Looks good!  Written in js?  Could it be coded in Red? Can I reload generated 'code' (data) into it, and it generates the design form?}
    sent: "2017-01-10T09:16:51.788Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5874a32adec171b811cc5183"
    text: {@endo64 Looks cool! Could you post to the Facebook Red group page, if you are a memember?}
    sent: "2017-01-10T09:02:34.051Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58749f8b64d5fd7e169cf860"
    text: "Thanks  @Zamlox  @qtxie "
    sent: "2017-01-10T08:47:07.084Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58749f21db9cafe9183bffe8"
    text: "@endo64 Awesome! :clap: "
    sent: "2017-01-10T08:45:21.561Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58749d94074f7be763b12d63"
    text: "@endo64 nice work !"
    sent: "2017-01-10T08:38:44.440Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58749d4d300f220a66cc034b"
    text: {[![events.gif](https://files.gitter.im/red/red/nzKK/thumb/events.gif)](https://files.gitter.im/red/red/nzKK/events.gif)}
    sent: "2017-01-10T08:37:33.514Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58749cccdec171b811cc32dd"
    text: {This is what I'm working on, it is a very easy & fast mockup designer inspired by http://fatiherikli.github.io/mockup-designer^/}
    sent: "2017-01-10T08:35:24.532Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58749a41cbcb2817704d7045"
    text: {Ah! Shame on me! I execute my scripts using my text editors' shortcut which executes with `--cli` option to be able to capture the output. That is why it fails. Sorry guy. Thanks for the help.}
    sent: "2017-01-10T08:24:33.377Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5874996a6c1635643c0b8c2a"
    text: "Let me check..."
    sent: "2017-01-10T08:20:58.889Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5874982264d5fd7e169ccc41"
    text: {>  I execute my script using red.exe without compilation.^/^/Not sure how you would do that..}
    sent: "2017-01-10T08:15:30.507Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587498016c1635643c0b842e"
    text: {First screenshot is saved by red. Are you pasting code on gui-console  @endo64 ? Maybe executing another way doesn't work?}
    sent: "2017-01-10T08:14:57.216Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587497866c1635643c0b8230"
    text: {[![image.png](https://files.gitter.im/red/red/ij4P/thumb/image.png)](https://files.gitter.im/red/red/ij4P/image.png)}
    sent: "2017-01-10T08:12:54.095Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5874971761fac5a03dbbb42e"
    text: {@endo64  :point_up: [January 10, 2017 12:55 AM](https://gitter.im/red/red?at=5873eabc873d96e16d47ffa9) works for me on gui-console built from source}
    sent: "2017-01-10T08:11:03.697Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587496fa6c1635643c0b7f1a"
    text: "ok"
    sent: "2017-01-10T08:10:34.876Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587496b16c1635643c0b7d39"
    text: "@geekyi You can make a PR, just test it well."
    sent: "2017-01-10T08:09:21.249Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5874968f873d96e16d4b7852"
    text: {@qtxie Doesn't work on GUI console? I execute my script using red.exe without compilation.}
    sent: "2017-01-10T08:08:47.472Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58748e7661e516c157907e75"
    text: {@endo64 Need to compiled the Red program with `-t Windows` to make `to-image face!` work.}
    sent: "2017-01-10T07:34:14.205Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58748bbe6c1635643c0b3dd2"
    text: "Should I make a pull request, or you'll fix it?"
    sent: "2017-01-10T07:22:38.757Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58748ba4300f220a66cba3a4"
    text: "Precisely, yes."
    sent: "2017-01-10T07:22:12.987Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58748b8f300f220a66cba31c"
    text: {@dockimbel here? https://github.com/red/red/blob/master/red.r#L584}
    sent: "2017-01-10T07:21:51.052Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58748ae5873d96e16d4b3bcc"
    text: "Yeah, it should use a `halt` instead of a `quit`."
    sent: "2017-01-10T07:19:01.755Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58748ad3cbcb2817704d24ae"
    text: "(rebol/view console exits here)"
    sent: "2017-01-10T07:18:43.429Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58748abb6c1635643c0b38c8"
    text: {@dockimbel Another thing is, console exit:^/```^/do/args %red.r "--help"^/```}
    sent: "2017-01-10T07:18:19.196Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58748a4a6c1635643c0b3694"
    text: {"files cleared": agreed.}
    sent: "2017-01-10T07:16:26.473Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58748a3064d5fd7e169c8827"
    text: {From what I remember, you can use only a file! or string! value as argument to `rc`.}
    sent: "2017-01-10T07:16:00.902Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587489e9074f7be763b0d2e5"
    text: {Ah. Maybe `clear` should output a message: "files cleared"}
    sent: "2017-01-10T07:14:49.580Z"
    editedAt: "2017-01-10T07:15:59.577Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "587489d2dec171b811cbd70a"
    text: {Have you tried `rc "clear"`? The system shell and Rebol console are not equivalent, they don't have the same semantics.}
    sent: "2017-01-10T07:14:26.530Z"
    editedAt: "2017-01-10T07:15:21.102Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587489b564d5fd7e169c867b"
    text: {```^/>> rc clear^/** Script Error: clear expected series argument of type: series port bitset none^/** Where: fail^/** Near: rc clear^/```}
    sent: "2017-01-10T07:13:57.281Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587489a36c1635643c0b3447"
    text: "`rc clear` doesn't work for example"
    sent: "2017-01-10T07:13:39.678Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5874898f300f220a66cb9924"
    text: "@dockimbel so I shouldn't file bugs for `rc` ?"
    sent: "2017-01-10T07:13:19.665Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58748978300f220a66cb9890"
    text: {@geekyi That's possible, we never use `rc` here (I use build scripts for compiling my Red scripts).}
    sent: "2017-01-10T07:12:56.721Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5874894461fac5a03dbb6b43"
    text: "Will post a more detailed bug report for that"
    sent: "2017-01-10T07:12:04.632Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58748938dec171b811cbd324"
    text: {Another thing is, I'd also been trying to get to compile red sources from commandline, but it gives exit code 1 sometimes}
    sent: "2017-01-10T07:11:52.346Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5874891dcbcb2817704d1d1e"
    text: {@dockimbel there are minor differences which don't work}
    sent: "2017-01-10T07:11:25.977Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587488fd6c1635643c0b3168"
    text: {@geekyi `rc` is just a shortcut to the latter form, so it's the same.}
    sent: "2017-01-10T07:10:53.265Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587488bf074f7be763b0ce8f"
    text: {@dockimbel One more thing, which is better? `rc <file>` or `do/args %red.r <file>`}
    sent: "2017-01-10T07:09:51.193Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5874886f074f7be763b0cdb5"
    text: "@geekyi Okay."
    sent: "2017-01-10T07:08:31.130Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "587488546c1635643c0b2dfc"
    text: {@dockimbel I may post a few more minor usability bugs}
    sent: "2017-01-10T07:08:04.488Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587487b6cbcb2817704d17d7"
    text: {@dockimbel if you're going to work on it for 0.6.3, then OK. Well, I'm going to post a bug report just in case for future reference}
    sent: "2017-01-10T07:05:26.119Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587487606c1635643c0b2a0b"
    text: "@geekyi Hmm, odd. Will need to investigate that."
    sent: "2017-01-10T07:04:00.185Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5874872c300f220a66cb8f21"
    text: {@dockimbel the following works:^/```^/>> rc "-t windows %environment/console/gui-console.red"^/```}
    sent: "2017-01-10T07:03:08.898Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587486e461fac5a03dbb5fa6"
    text: {@geekyi Red GUI console needs to be compiled in release mode (using `-r`), dev mode using libRedRT is not supported (it will for the new console engine in 0.6.3).}
    sent: "2017-01-10T07:01:56.823Z"
    editedAt: "2017-01-10T07:02:25.012Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587480f8074f7be763b0aeac"
    text: {:point_up: [September 29, 2016 6:40 PM](https://gitter.im/red/red?at=57ed19b816c37362201235c1) similar problem, but that variation works}
    sent: "2017-01-10T06:36:40.460Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58747cf7300f220a66cb6324"
    text: {Ok, I think I'm just encountering a host of minor usability bugs created by introduction of libred.. which I'd tried to debug before and forgot about}
    sent: "2017-01-10T06:19:35.709Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58747a90300f220a66cb5a83"
    text: "I'm going to open a bug"
    sent: "2017-01-10T06:09:20.187Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58747a8261fac5a03dbb2992"
    text: {```^/Target: MSDOS^/^/Compiling to native code...^/*** Compilation Error: undefined context gui^/*** in file: %/C/Users/HM/Documents/GitHub/red/red/environment/console/terminal.reds^/*** at line: 1478^/```}
    sent: "2017-01-10T06:09:06.581Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58747a63dec171b811cb8f2f"
    text: {Oh wait, I think this is related to the missing View}
    sent: "2017-01-10T06:08:35.279Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58747a1864d5fd7e169c3fdd"
    text: {@dockimbel I do either of 2 things when compiling from source:^/1. a. Double click and run `red.r`, where `*.r` files are automatically run by Rebol2/View^/*or*^/1. b. Run Rebol/View and `cd` to the red source directory^/^/then,^/2. a. Run the command in red README: `>> do/args %red.r "%environment/console/gui-console.red"`^/*or*^/2. b. Run `>> rc %environment/console/gui-console.red`}
    sent: "2017-01-10T06:07:20.141Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58746f2c61fac5a03dbaf698"
    text: {@geekyi  You need to use `-c` or `-r` to trigger the compilation, though, when using the toolchain from sources, compilation should be always implied. So, there might be a regression there (please open a ticket in such case).}
    sent: "2017-01-10T05:20:44.042Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58746ecc873d96e16d4ab330"
    text: {@qtxie Please have a look at @endo64 's issue with `to-image`.}
    sent: "2017-01-10T05:19:08.367Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58746e8b300f220a66cb2785"
    text: {@nc-x Yes, it is supposed to work on Linux, though I haven't tested it since a while there. Are you using `red build libRed` to build it?}
    sent: "2017-01-10T05:18:03.879Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58746cb86c1635643c0aade0"
    text: {@nc-x "Old look" for the GUI means the Visual Styles are not active. Visual Styles need to be activated by the host app. Which C compiler are you using?}
    sent: "2017-01-10T05:10:16.862Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587445d061e516c1579079a2"
    text: "@TomGrey303 you’re welcome"
    sent: "2017-01-10T02:24:16.267Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5874459b64d5fd7e169b54b3"
    text: {@rebolek  many thanks, yes thats it  -works perfectly now }
    sent: "2017-01-10T02:23:23.019Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "587443cedb9cafe9183bfa46"
    text: {@TomGrey303 ok, then you probably should try some newer version from [here](http://www.red-lang.org/p/download.html). IIRC, `sqrt` is new addition.}
    sent: "2017-01-10T02:15:42.292Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5874438e074f7be763afa993"
    text: "its a november 2016 auto build "
    sent: "2017-01-10T02:14:38.197Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "587442dc96a565f844085cd2"
    text: "Hi @TomGrey303 what version of Red are you using?"
    sent: "2017-01-10T02:11:40.441Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5874428a6c1635643c09e239"
    text: {hi, i tried the 'heart animation' but get ' *** Script Error: sqrt has no value'  - im a bit new to red so not sure if its me ?}
    sent: "2017-01-10T02:10:18.368Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "58740799873d96e16d48b0a0"
    text: "`REBOL/View 2.7.8.3.1 1-Jan-2011`"
    sent: "2017-01-09T21:58:49.573Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5874051adec171b811c94d5e"
    text: {Not sure  if bug. Does the instructions in the README need to be updated?}
    sent: "2017-01-09T21:48:10.390Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587404c6074f7be763ae50bb"
    text: {```^/        #script %/C/Users/HM/Documents/GitHub/red/red/environment/console/terminal.reds^/    ]^/    set-buffer-lines: func [n [integer!] /local vt out] [^/        vt: as terminal! v-terminal^/        out: vt/out^/        out/max: n^/        out/lines: as line-node! realloc as pointer! [byte!] out/lines out/max * size? line-node!^/^/        edit vt 11^/    ]^/    set-font-color:^/]^/```}
    sent: "2017-01-09T21:46:46.328Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587404c164d5fd7e1699e5ed"
    text: {There's a huge dump of red code in Rebol2/View console ending with:}
    sent: "2017-01-09T21:46:41.398Z"
    editedAt: "2017-01-09T21:47:32.416Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5874042361fac5a03db8d677"
    text: "Windows 10 64-bit"
    sent: "2017-01-09T21:44:03.270Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58740414cbcb2817704a970e"
    text: {@endo64 I did `do/args %red.r "clear"` before build, but I'm unable to compile with `do/args %red.r "%environment/console/gui-console.red"`}
    sent: "2017-01-09T21:43:48.346Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5873fedd61fac5a03db8b5ee"
    text: {@endo64 works same as @meijeru on Jan 5 and 8 binaries; will try to compile gui-console from source}
    sent: "2017-01-09T21:21:33.641Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5873fd15cbcb2817704a6a79"
    text: {My version is `Red 0.6.1 - 23-Dec-2016/15:54:29+1:00`}
    sent: "2017-01-09T21:13:57.567Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5873f033873d96e16d482656"
    text: {it doesn't work on my W10, I just built red from its source. Did you try with the version from web site?}
    sent: "2017-01-09T20:18:59.690Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5873eabc873d96e16d47ffa9"
    text: {On my W10 box it works:^/```^/lay: layout [^/    button 168x36 "Ok" [^/        img: to image! lay^/        print img/size^/    ]^/]^/^/view lay^/194x85^/```^/}
    sent: "2017-01-09T19:55:40.223Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5873e8a6300f220a66c86e66"
    text: {@meijeru is that should work then?^/```^/lay: layout [^/^-button 168x36 "Ok" [^/^-^-img: to image! lay^/^-^-print img/size^/^-]^/]^/^/view lay^/```^/^/`*** Script Error: cannot MAKE/TO image! from: make object! [type: 'window ...`}
    sent: "2017-01-09T19:46:46.340Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5873d9c6300f220a66c810ae"
    text: {@dockimbel when I would like to run ```view/no-wait``` from app (not Red) using ```libRed```, what would be the best way to update events? Using ```do-events``` would halt processing of the parent app. Also there is quite a lot ways how to kill or stop the parent app using inappropriate code passed to ```redDo```. I wonder  if it would be possible to make it more secure... probably using just DSL to pass code to  libRed only.}
    sent: "2017-01-09T18:43:18.570Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5873b4eb873d96e16d46ab1d"
    text: {@dockimbel^/(A)   :point_up: [January 9, 2017 5:34 PM](https://gitter.im/red/red?at=58737c6364d5fd7e16966a5f)^/(B) Is libRed supposed to work on linux because I am not able to compile the *.so file? }
    sent: "2017-01-09T16:06:03.629Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5873aa65873d96e16d4668d0"
    text: {(Heart animation note: I take care of memory consumption. Here, It is very stable)}
    sent: "2017-01-09T15:21:09.475Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5873aa2fcbcb2817704859b2"
    text: {@qtxie OK, so there are known, no need to post issue then.}
    sent: "2017-01-09T15:20:15.513Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5873a41964d5fd7e16976746"
    text: {interesting, that is what I already tried but it failed. I'll try again..}
    sent: "2017-01-09T14:54:17.663Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "587390d661fac5a03db5e169"
    text: {With `layout` you create a window (`face!` object). With `view` you display this. While it is displayed, you can do `to-image <window>` and obtain a value of type `image!` which you can save with `save/as`. The `format` argument is a word like `jpg` or `bmp` etc.}
    sent: "2017-01-09T13:32:06.677Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58738960dec171b811c61105"
    text: "not sure how to do whole thing though"
    sent: "2017-01-09T13:00:16.493Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58738953cbcb28177047857d"
    text: {@endo64 there is an `/as format` refinement to `save` which mentions images in documentation}
    sent: "2017-01-09T13:00:03.308Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873890861fac5a03db5b2bc"
    text: {Is it possible to `save` whole window as an image as we do in Rebol2?}
    sent: "2017-01-09T12:58:48.123Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5873882c074f7be763ab4215"
    text: {@DideC Amazing! :+1: Yes, we need to fix those two issues.}
    sent: "2017-01-09T12:55:08.463Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5873849d64d5fd7e16969f82"
    text: {By the way, I have things that seems strange to me. Please, tell me for you guys.^/Maybe some things to correct  ( @qtxie !? ) :^/- First, the "W" of the check box caption  is partly under the check box.^/- Second, the Snapshot function save an image of the screen region where is `img` face, not the face itself. So here, I obtain a picture of the request-file window part that overlap the face.}
    sent: "2017-01-09T12:39:57.103Z"
    editedAt: "2017-01-09T12:40:36.840Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58738394cbcb281770476364"
    text: {Thanks all.  @nc-x  thanks, I have made the correction.}
    sent: "2017-01-09T12:35:32.067Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "587380c6db9cafe9183bdf67"
    text: "@DideC :clap: "
    sent: "2017-01-09T12:23:34.236Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58737d24dec171b811c5c81a"
    text: {A spelling mistake -`https://gist.github.com/DideC/d58d43d3dfeddc19d7a1f980e6930313#file-heart-animation-red-L207` should be Snapshot}
    sent: "2017-01-09T12:08:04.017Z"
    editedAt: "2017-01-09T12:08:20.987Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58737cee074f7be763ab01fc"
    text: "oh wow"
    sent: "2017-01-09T12:07:10.688Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58737ceddec171b811c5c663"
    text: "Very fun to play with ;-)"
    sent: "2017-01-09T12:07:09.902Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58737cdccbcb281770473d38"
    text: "@DideC  Looks amazing"
    sent: "2017-01-09T12:06:52.007Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58737ccf64d5fd7e16966ce7"
    text: {[![heart-animation.gif](https://files.gitter.im/red/red/xv5d/thumb/heart-animation.gif)](https://files.gitter.im/red/red/xv5d/heart-animation.gif)}
    sent: "2017-01-09T12:06:39.944Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
)#(
    id: "58737c74873d96e16d454c11"
    text: {[![Untitled.png](https://files.gitter.im/red/red/xsjN/thumb/Untitled.png)](https://files.gitter.im/red/red/xsjN/Untitled.png)}
    sent: "2017-01-09T12:05:08.193Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58737c6364d5fd7e16966a5f"
    text: {@dockimbel, any reasons why the GUI built using libRed (through redDo() ) looks ancient as compared to GUI's built using Red/View in Red? For eg. look at the buttons in this image :arrow_down: }
    sent: "2017-01-09T12:04:51.077Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "587379d5074f7be763aaf2c2"
    text: {@dockimbel It still not compile with last-build! (target: windows / release mode).}
    sent: "2017-01-09T11:53:57.317Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5873797861fac5a03db55435"
    text: ":+1: "
    sent: "2017-01-09T11:52:24.676Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587379076c1635643c04fb8f"
    text: {I updated my [Heart-animation gist](https://gist.github.com/DideC/d58d43d3dfeddc19d7a1f980e6930313): now with a complete control panel to twick animation parameters.}
    sent: "2017-01-09T11:50:31.410Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58734982dec171b811c49692"
    text: {@ifgem You might be able to hack something, but not easily achieve it as we haven't exposed the required internal API for that at Red level nor in libRed.}
    sent: "2017-01-09T08:27:46.061Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5873496d873d96e16d441799"
    text: {Of course, not everything is available as a library. That's where other bindings are going to be useful. Simply put - Red allows for several kinds of integrations ... well, that's at least my understanding of all of this. Surely I don't want to confuse others ...}
    sent: "2017-01-09T08:27:25.553Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58734908873d96e16d4415a8"
    text: {For most of the time, ppl like me, will stand on the other side of the barrier - writing app in Red, linking to foreign env. libraries for the needed functionality. Few years ago, when even Red did not exist, I wrote our LED screen library wrapper using R/S.}
    sent: "2017-01-09T08:25:44.659Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "587348b4dec171b811c4934d"
    text: {Because RedDo(), to us, non-skilled with e.g. C, allows us to falsely believe, that by using just basic C wrapper and 99% of our app bein in Red anyway, we are a C coders :-) Was just spoiled by your earlier C example, which basically called RedDo, surrounded by invoking/closing LibRed. I can easily admit, that such aproach has not much sense, if any sense at all ....}
    sent: "2017-01-09T08:24:20.520Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5873449861fac5a03db4132f"
    text: {I don't know why your are making a special case for `redDo()`, it's part of the API, like the other functions. The API provides different ways to evaluate Red code, with different granularity levels.}
    sent: "2017-01-09T08:06:48.686Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587343e264d5fd7e16951611"
    text: "Sorry for wording, if that was not obvious"
    sent: "2017-01-09T08:03:46.597Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "587343c7cbcb28177045d98d"
    text: "That is what I meant as 2)"
    sent: "2017-01-09T08:03:19.755Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58734335300f220a66c4604e"
    text: {@dockimbel can I add my datatype to Red from C program?:)}
    sent: "2017-01-09T08:00:53.123Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "587342fe300f220a66c45f6c"
    text: {@pekr You are missing the point of the libRed API. It is not meant for writing "large programs", it is a glue for integrating Red into another language. The API is there for exchanging data and invoking code between Red and the host app.}
    sent: "2017-01-09T07:59:58.424Z"
    editedAt: "2017-01-09T08:01:57.955Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5873423161fac5a03db3ff51"
    text: "@nc-x Nice work!"
    sent: "2017-01-09T07:56:33.606Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58727abc873d96e16d406e6f"
    text: {@dockimbel Thank you!  This is exactly what I was looking for.  I'm trying to see what it would take to target an alternate libc.}
    sent: "2017-01-08T17:45:32.811Z"
    v: 1
    author: "553a644115522ed4b3df792f"
) #(
    id: "58725f76cbcb28177041ad77"
    text: {@pekr you are right, it makes little sense to write large programs like that, but using Rust *fast* and *safe* libraries is a nice thing to have}
    sent: "2017-01-08T15:49:10.501Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58725cfb6c1635643cff7205"
    text: {Uploaded the code to https://github.com/nc-x/libRed-Rust for anyone interested.}
    sent: "2017-01-08T15:38:35.381Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5872587ccbcb281770418731"
    text: {The public api in Rust needs to be cleaned up and made more idiomatic by someone skilled in Rust, only then will this be usable for big projects. Until then, this is just for small examples.}
    sent: "2017-01-08T15:19:24.836Z"
    editedAt: "2017-01-08T15:26:28.237Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "587257f9300f220a66c01c92"
    text: {I am far from skilled in inter-tool interfaces, but I can't imagine you write larger program like that. I can see basically two options - instantiate Red and use RedDo() to call some larger amount of code in Red. Or second - use above aproach to get directly to datatype buffers to use/manipulate data from foreign environment.}
    sent: "2017-01-08T15:17:13.563Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5872556bcbcb281770417a5b"
    text: {@nc-x oh wow, I was thinking that Rust becoming something really big and it would be cool to make use of it in Red}
    sent: "2017-01-08T15:06:19.412Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587254d1873d96e16d3fb6e5"
    text: {[![output.png](https://files.gitter.im/red/red/3YCB/thumb/output.png)](https://files.gitter.im/red/red/3YCB/output.png)}
    sent: "2017-01-08T15:03:45.833Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "587254bacbcb281770417729"
    text: {[![libred.png](https://files.gitter.im/red/red/KWA0/thumb/libred.png)](https://files.gitter.im/red/red/KWA0/libred.png)}
    sent: "2017-01-08T15:03:22.312Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "587254a264d5fd7e16908971"
    text: {After getting a lot of headaches trying to link Rust code with libRed.lib, then getting runtime errors for Red code, finally got libRed working through Rust, and the code is ugly as hell and most probably un-idiomatic.}
    sent: "2017-01-08T15:02:58.593Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5871ea7bda229f8d5bf9cde5"
    text: "@rcqls Thanks! :smiley: "
    sent: "2017-01-08T07:30:03.576Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5871e9aa9d4cc4fc538bc18e"
    text: {@dockimbel Nice! `brew cask reinstall red-latest` is back. BTW, best wishes for 2017! }
    sent: "2017-01-08T07:26:34.308Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5871e8d0aa6be0472f2115be"
    text: {FYI, we have done some tests on our Mac building backend, and it seems to work fine and fast now. The latest Mac builds are available again now. We are putting it under surveillance during the next days to see if that behavior is stable now.}
    sent: "2017-01-08T07:22:56.398Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5871cf9aaf6b364a29430b44"
    text: {@rhencke You can grep on `LIBC-file` and then filter only the files which are related to Linux. Then after `LIBC-file` in each file, you'll find the list of imported functions and variables.}
    sent: "2017-01-08T05:35:22.591Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5871cef5aa6be0472f20ad8a"
    text: {@meijeru It has been updated in the %usage.txt file which is displayed when invoking `red -h` or `red --help`. The README file at the repo's root needs to reflect the last stable release, it will be updated for the new release.}
    sent: "2017-01-08T05:32:37.096Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5871ca65aa6be0472f209ea1"
    text: "@rhencke probably. Well, definitely"
    sent: "2017-01-08T05:13:09.094Z"
    editedAt: "2017-01-08T05:13:27.237Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5871906baa6be0472f1fc97b"
    text: {Does anyone know where I could find information on Red's dependency on glibc on Linux?  Would that be in the Red/system parts?}
    sent: "2017-01-08T01:05:47.776Z"
    v: 1
    author: "553a644115522ed4b3df792f"
) #(
    id: "587108df5ffdeea7231a7d1f"
    text: {@dockimbel I have read the explanations concerning `libRedRT` for which I thank you.  The `-r` option used to mean `--no-runtime`, what about that? Should the README not be updated?}
    sent: "2017-01-07T15:27:27.581Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5870b3ad7a3f79ef5de84b05"
    text: {I might do some tests with it later to see how it works}
    sent: "2017-01-07T09:23:57.441Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5870b2b8af6b364a293ea20f"
    text: {@dockimbel It looks like it is available for the free ones. At least, I didn't see any mention of that anywhere. Here are some docs: https://docs.travis-ci.com/user/encryption-keys/^/https://www.appveyor.com/docs/how-to/secure-files/^/They look fairly similar}
    sent: "2017-01-07T09:19:52.193Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5870a63faf6b364a293e7bec"
    text: {@dander Is that feature available for the free CI accounts or paid ones only? It would still not provide realtime builds (see my point 2), though, it would be better than the current state.}
    sent: "2017-01-07T08:26:39.423Z"
    editedAt: "2017-01-07T08:29:12.296Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5870a5bdaf6b364a293e7931"
    text: {@dockimbel my understanding from reading some of their docs is that both CI services can create a private encryption key that is stored in the CI account. It's possible to encrypt either an environment variable or file, which gets checked into the public repo, but the private key comes from the CI account during the build, so it is not exposed. They disable decryption for PR builds in case of malicious PRs. Still, I would be concerned about making a mistake and leaking something in the log or build artifacts. It also implies some level of trust of that third-party. I just thought it was interesting, and could be potentially useful}
    sent: "2017-01-07T08:24:29.717Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5870880d9e6f00e74a077180"
    text: {Sorry, wrong link, this is the [right one](https://gitter.im/red/red?at=57fb868370fcb5db0c444edf).}
    sent: "2017-01-07T06:17:49.270Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5870846faa6be0472f1b04b2"
    text: {> BTW, what is the switch for dev mode?^/^/No switch, it's the default mode.  See my [early post](https://gitter.im/red/red?at=57fb86c184f1db0614998ecc) about the new compilation modes.}
    sent: "2017-01-07T06:02:22.999Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5870836d9e6f00e74a076299"
    text: {@meijeru Yes, syntax coloring rules will be fully configurable. Moreover, the coloring is just the tip of the iceberg of the new features we plan for the console, but we'll see that after the 0.6.2 release.}
    sent: "2017-01-07T05:58:05.283Z"
    editedAt: "2017-01-07T05:58:32.738Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5870826cc02c1a3959f80c56"
    text: {> How does it currently know when to start a build?^/^/Github allows to set webhooks (basically URLs) for any repo, that will be triggered on every new commit on master (or any branch), and optionally on new PRs.}
    sent: "2017-01-07T05:53:48.606Z"
    editedAt: "2017-01-07T05:55:41.773Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5870820a5ffdeea723184740"
    text: {@dander We considered using those online CI services for that but:^/1. We cannot secure the Rebol license key nor server credentials that way, as you need to provide a public build script (and public access to all required dependencies) that anyone else can download and use (and so can access easily everything, encryption wouldn't help there).^/2. The CI jobs are queued and depending on the servers load, can be run in a few minutes up to a few hours after the  notification from github, or even time out sometimes (happens more and more often on Travis) because of temporary high load. Basically, they are not very reliable as a daily building backend for binaries.}
    sent: "2017-01-07T05:52:10.988Z"
    editedAt: "2017-01-07T05:56:26.648Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587019da7a3f79ef5de5e7f1"
    text: {@meijeru AFAIK this is very early stage, but my guess is yes.}
    sent: "2017-01-06T22:27:37.998Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "586fefab9d4cc4fc538401be"
    text: {If that seems too sketchy, maybe the build host could poll for changes instead of listening to the public internet. How does it currently know when to start a build?}
    sent: "2017-01-06T19:27:39.193Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "586fef2daa6be0472f182694"
    text: {@dockimbel Regarding the build issues you mentioned, would you want to consider using AppVeyor / Travis for generating the build artifacts and pushing those to the website? If you did that, you'd need to push the encrypted rebol license and your web server credentials for deploying to the website into the public repo. It would imply some level of trust of AppVeyor and Travis, and care to avoid accidentally releasing some sensitive information, but it appears that both CI services support that, and will not perform decryption when running PR builds.}
    sent: "2017-01-06T19:25:33.575Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "586fed479d4cc4fc5383f2a9"
    text: ":rainbow: colors yay"
    sent: "2017-01-06T19:17:27.238Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586fe186da229f8d5bf1074e"
    text: {New tweet says Console in 0.6.3 will be multi-color. Will those colors be configurable?}
    sent: "2017-01-06T18:27:18.650Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "586fc6e4da229f8d5bf065a7"
    text: {@dockimbel Happy New Year, Red team! :christmas_tree:}
    sent: "2017-01-06T16:33:39.990Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586f851b9d4cc4fc5381baa0"
    text: {Thanks, it is precisely that info I was after -- these switches are not explained in the README; unfortunately it is the R/S code that is being developed, so I guess libRedRT will change every time with re-compilation. BTW, what is the switch for dev mode?}
    sent: "2017-01-06T11:52:59.554Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "586f83747a3f79ef5de29caa"
    text: {@meijeru ^/> I need to compile for the GUI console^/^/I'm not sure what you mean by "compile for the GUI console". If you need to compile the View module with your code, that works fine in dev mode (using libRedRT). Though, if you have R/S code and call some functions from the Red runtime API, then you need to force a custom build of libRedRT, which is achieved by compiling once with the `-u` option (then you can compile with just `-c`).}
    sent: "2017-01-06T11:45:56.474Z"
    editedAt: "2017-01-06T11:47:39.877Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f82feaa6be0472f1589c9"
    text: {Ok, so you mean libRedRT.dll (which is different from libRed.dll). The current GUI console code cannot be compiled in dev mode, only release mode (`-r`).}
    sent: "2017-01-06T11:43:58.289Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "586f820faa6be0472f158601"
    text: {... and I need to **compile** for the GUI console, because my program has `routine`s and cannot be interpreted.}
    sent: "2017-01-06T11:39:59.643Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "586f813caf6b364a29393c2e"
    text: {To shorten the compilation time -- if I re-compile a program for `MSDOS`, the compiled `libRed.dll` is used, so the re-compilation time is minimal.}
    sent: "2017-01-06T11:36:28.527Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "586f809dda229f8d5beedd95"
    text: {@meijeru I'm not sure how you relate libRed with the console. Both consoles already contain the Red runtime library, so what do you need libRed for then?}
    sent: "2017-01-06T11:33:49.110Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f7ec1c02c1a3959f34330"
    text: {@dockimbel Can I profit from libRed while using the GUI console? So far, I notice only usage of `libRed.dll` if I compile for the MSDOS target...}
    sent: "2017-01-06T11:25:53.698Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "586f7da7aa6be0472f156fc7"
    text: {@dockimbel I try to compile code here :point_up: [6 janvier 2017 11:27](https://gitter.im/red/red?at=586f71059d4cc4fc5381680a)}
    sent: "2017-01-06T11:21:11.474Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586f71059d4cc4fc5381680a"
    text: {how do I start a room? or can you create one for discussions? red/talks?}
    sent: "2017-01-06T10:27:17.592Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586f6ea0af6b364a2938df5a"
    text: {@meijeru If you have general questions about libRed, I can answer them here while waiting for the full documentation.}
    sent: "2017-01-06T10:17:04.837Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f6e7ac02c1a3959f2fc3a"
    text: "@maximvl Thanks for the new year gift. ;-)"
    sent: "2017-01-06T10:16:26.968Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f6e6baf6b364a2938de96"
    text: {@dockimbel happy new year, I also added few tickets for you not to be too  bored :D}
    sent: "2017-01-06T10:16:11.022Z"
    editedAt: "2017-01-06T10:16:42.058Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586f6d5bda229f8d5bee8941"
    text: {@dockimbel Best wishes! I look forward to the libRed explanations. Will save my questions ( I do have some) until then :smile: }
    sent: "2017-01-06T10:11:39.943Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "586f6978da229f8d5bee76fc"
    text: {Yes, I mean that printing the command line arguments in the output would be the simpler. Because the command is recorded in my editor : I just click a button, so I don't type it and can't simply report it when there is a problem (I evn don't see it myself).^/Probably same for others here. Something (more) to think about}
    sent: "2017-01-06T09:55:04.075Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586f686ada229f8d5bee7270"
    text: {Actually, you get an extra "Using libRedRT..." extra line when in dev mode. I just remembered it now. ;-)}
    sent: "2017-01-06T09:50:34.819Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f68195ffdeea7231244f1"
    text: {@dockimbel Same in release mode (-r).^/By the way, maybe adding the current compilation mode in the output texts (like target) would be helpfull (no need to ask each time).}
    sent: "2017-01-06T09:49:13.993Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586f66485ffdeea723123c0e"
    text: {@DideC Is your compilation error above happening both in dev mode (using libRedRT) and release mode?}
    sent: "2017-01-06T09:41:28.295Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f66059d4cc4fc5381367f"
    text: {@DideC Not much left to do, just writing the libRed documentation, make a few examples, and process a bunch of tickets (we'll probably limit it to a week).}
    sent: "2017-01-06T09:40:21.298Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f65529d4cc4fc5381331c"
    text: {@pekr I was in Europe, yes. It was pretty busy, as usual when I travel to meet with friends & family. ;-)}
    sent: "2017-01-06T09:37:22.511Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f64439d4cc4fc53812e05"
    text: "@maximvl ok"
    sent: "2017-01-06T09:32:51.153Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "586f643cc02c1a3959f2cd22"
    text: "@dockimbel Happy New Year to you too."
    sent: "2017-01-06T09:32:44.707Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "586f63a8af6b364a2938b062"
    text: {@dockimbel - how was your journey to Europe (if you were there)? :-)}
    sent: "2017-01-06T09:30:16.224Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "586f63799d4cc4fc53812a89"
    text: {Happy new (occidental) year Nenad and welcome back.^/Are you near 0.6.2 release time?}
    sent: "2017-01-06T09:29:29.792Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586f631eaa6be0472f14e926"
    text: "@Zamlox it has nothing to do with Forth syntax"
    sent: "2017-01-06T09:27:58.646Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586f62977a3f79ef5de2066e"
    text: "@dockimbel Welcome back. "
    sent: "2017-01-06T09:25:43.146Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "586f5facaf6b364a29389c51"
    text: "Happy New Year, Nenad!"
    sent: "2017-01-06T09:13:16.675Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "586f593aaf6b364a293880e9"
    text: {About the Mac builds issue, we are really unlucky. We have a working Mac mini for handling the builds, but as we are hosting it in the office, we have a issue accessing it from the (real) Internet outside of China, the connection is unreliable, as we need to use a DynDNS service (we cannot have a public IP address as we need the [ICP](https://en.wikipedia.org/wiki/ICP_license) licence for that).}
    sent: "2017-01-06T08:45:46.232Z"
    editedAt: "2017-01-06T08:46:49.020Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f580aaa6be0472f14ac62"
    text: {I'm back after a long pause offline, Happy New Year to all the Red-ucers! ;-)}
    sent: "2017-01-06T08:40:42.914Z"
    editedAt: "2017-01-06T08:47:56.032Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "586f3e289e6f00e74a0177b4"
    text: {@geekyi thanks for example, but I haven't used forth, so such syntax might not be handy for me.}
    sent: "2017-01-06T06:50:16.332Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "586f3c81af6b364a29380e51"
    text: {```red^/pattern-1-size: as-pair width + step-x * 4 + start-x  height + start-y^/== 670x130^/```}
    sent: "2017-01-06T06:43:13.152Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586f3b41c02c1a3959f22407"
    text: {I usually refactor my code so that I don't need to put `(parens)`. May or may not be more readable. Having used a forth-like helps}
    sent: "2017-01-06T06:37:53.970Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586f3a987a3f79ef5de15ab9"
    text: "yep. I was bitten again :)"
    sent: "2017-01-06T06:35:04.839Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "586f3a82aa6be0472f142d99"
    text: {@Zamlox Forgot about lack of operator precedence? ;)}
    sent: "2017-01-06T06:34:42.596Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586eb111da229f8d5beb1800"
    text: {I am wrong. I was expecting other value: ^/```^/red>> pattern-1-size: as-pair start-x + (4 * (width + step-x)) start-y + height^/== 670x130^/```^/My bad.}
    sent: "2017-01-05T20:48:17.191Z"
    editedAt: "2017-01-05T20:48:35.986Z"
    v: 3
    author: "56f909e585d51f252abb2f03"
) #(
    id: "586eaff4da229f8d5beb0ccd"
    text: {Am I missing something or it's a bug ?^/```^/red>> start-x: 30^/== 30^/red>> start-y: 30^/== 30^/red>> width: 150^/== 150^/red>> height: 100^/== 100^/red>> step-x: 10^/== 10^/red>> pattern-1-size: as-pair start-x + 4 * (width + step-x) start-y + height^/== 5440x130^/```^/wrong value.^/}
    sent: "2017-01-05T20:43:32.905Z"
    editedAt: "2017-01-05T20:46:16.725Z"
    v: 3
    author: "56f909e585d51f252abb2f03"
) #(
    id: "586ea3689d4cc4fc537de3ef"
    text: {I just updated the [Gist](https://gist.github.com/DideC/d58d43d3dfeddc19d7a1f980e6930313) with the version that handle aplha value. It looks better... but is a bit slower.}
    sent: "2017-01-05T19:50:00.016Z"
    editedAt: "2017-01-05T19:50:23.004Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586ea32eaa6be0472f1118c6"
    text: {@pekr If you poke in an image with a color that has an alpha value, you get a pixel that goes tranparent (you see the background under the image). Here the desired behaviour is to "mixed" the new pixel with the one already in the image, so the need to compute this mixing in the script (pick the pixel color, do the math regarding alpha of new color, then poke the result to the image.}
    sent: "2017-01-05T19:49:02.284Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586e8e76af6b364a2934f70a"
    text: {@DideC `poke` on image does not support Alpha value?}
    sent: "2017-01-05T18:20:38.830Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "586e875bda229f8d5be9fee2"
    text: "http://i.imgur.com/0JS1Tqd.png"
    sent: "2017-01-05T17:50:19.632Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586e872aaf6b364a2934ce4e"
    text: {@DideC your original script it worked without any problems on Wine, wow! there is a bug in positioning canvas, but this is subject for an issue}
    sent: "2017-01-05T17:49:30.277Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586e7e9fc02c1a3959eeaf5b"
    text: "I need some Guru guidelines in this area !!"
    sent: "2017-01-05T17:13:03.433Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586e7e60af6b364a293496f1"
    text: {When I try to compile this script (with some small twicks to pass the compilation phase), it error out like this :^/```^/-=== Red Compiler 0.6.1 ===- ^/^/Compiling E:\REBOL\RED\Tests\heart-animation-comp.red ...^/...compilation time : 1487 ms^/^/Target: windows ^/^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/natives/sqrt* ^/*** in file: %/E/REBOL/RED/Tests/heart-animation-comp.red ^/*** in function: exec/f_the-loop^/*** at line: 1 ^/*** near: [^/    natives/sqrt* true ^/    stack/unwind ^/    word/set ^/    stack/unwind ^/    stack/reset ^/    stack/mark-native ~if^/]^/```}
    sent: "2017-01-05T17:12:00.863Z"
    editedAt: "2017-01-05T17:12:19.191Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586e7dfb9d4cc4fc537d1136"
    text: {@RiVeND  @maximvl  @endo64  @Zamlox Thanks. Saddly it is not as beautiful as the Javascript one. I have to poke pixels in the image and so this one don't manage alpha value of the point. I have a version that compute the pixel based on the src pixel, the dst color and alpha, but it's a bit slower in interpreted mode (but works nicely).}
    sent: "2017-01-05T17:10:19.126Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586e56adaf6b364a2933c081"
    text: {@dockimbel btw.. .there will be something unusual in the libRed.dll as I was trying to compress it with UPX tool and it fails with Internal error, which should not happen. Not a big issue at this moment I guess.}
    sent: "2017-01-05T14:22:37.925Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "586e541f9e6f00e74afd008a"
    text: {Ok.. found the libRed-test.c in tests folder so probably can use it for reference.}
    sent: "2017-01-05T14:11:43.458Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "586e53de7a3f79ef5ddc8bad"
    text: {@dockimbel is there any libRed.dll embedding example available?}
    sent: "2017-01-05T14:10:38.459Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "586e53349e6f00e74afcfba2"
    text: "@DideC good work !"
    sent: "2017-01-05T14:07:48.167Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "586e53049d4cc4fc537c1e68"
    text: "@DideC Great work!"
    sent: "2017-01-05T14:07:00.545Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "586e32e69e6f00e74afc5448"
    text: "@DideC great, can't wait to try it"
    sent: "2017-01-05T11:49:58.785Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586e2c50c895451b755aa522"
    text: {@onetom @dockimbel told me that the mac computer in charge of providing latest red is more or less broken.  [`https://github.com/red/Homebrew-red`](https://github.com/red/Homebrew-red) supposed to install latest red is then useless. To install last official `red` from homebrew/cask: `brew cask install red`.}
    sent: "2017-01-05T11:21:52.553Z"
    editedAt: "2017-01-05T11:22:45.506Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "586e29e59d4cc4fc537b4cb5"
    text: "@DideC Nice!"
    sent: "2017-01-05T11:11:33.289Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "586e2008aa6be0472f0dd036"
    text: {Here is a first Red version, that works also in Rebol 2. Interpreted mode only at this time.^/https://gist.github.com/DideC/d58d43d3dfeddc19d7a1f980e6930313}
    sent: "2017-01-05T10:29:28.135Z"
    editedAt: "2017-01-05T10:30:09.971Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "586e1fd7aa6be0472f0dcede"
    text: {Someone post this very nice [animation deconstruction article](https://martijnbrekelmans.com/generative-art/heart-deconstruction/techniques.html) in Altme. Its a javascript animation, and you can see [the code in codepen.io here](http://codepen.io/tvolodimir/pen/wqKuJ)}
    sent: "2017-01-05T10:28:39.880Z"
    editedAt: "2017-01-05T10:28:59.202Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
)#(
    id: "586d6f79af6b364a292faa44"
    text: {I mean [these tests](https://travis-ci.org/red/red/builds/186471337) .. mac looks green}
    sent: "2017-01-04T21:56:09.942Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d6f2f7a3f79ef5dd85684"
    text: {@onetom but latest sources should work.. as the cI tests are working? (unless the tests were changed?) Sorry, I can only check on windows}
    sent: "2017-01-04T21:54:55.255Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d6d857a3f79ef5dd84d9a"
    text: "but nevermind, thanks for chiming in."
    sent: "2017-01-04T21:47:49.567Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d6d2dc02c1a3959e9d9ce"
    text: {exactly, but even if it would work, that's probably not suitable for running the ballot demo}
    sent: "2017-01-04T21:46:21.317Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d6cfc7a3f79ef5dd84a34"
    text: "No, wait.. that's 0MB for Mac.. I see"
    sent: "2017-01-04T21:45:32.506Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d6cd3058ca96737cbb16d"
    text: {@onetom btw, see the web page and download the 28-dec automated build?}
    sent: "2017-01-04T21:44:51.042Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d6c0eaa6be0472f0a647c"
    text: {Should notify @dockimbel about the broken download}
    sent: "2017-01-04T21:41:34.157Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d6c08058ca96737cbad2f"
    text: "ok, i was just about to search the github issues"
    sent: "2017-01-04T21:41:28.142Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d6bdf9d4cc4fc53782da1"
    text: {https://github.com/red/red/issues/1547 *maybe* relevant}
    sent: "2017-01-04T21:40:47.399Z"
    editedAt: "2017-01-04T21:42:01.397Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "586d6bcc058ca96737cbab3e"
    text: {the brew version runs, but i can't try the voting demo with that and the latest download link is still broken on the download page...}
    sent: "2017-01-04T21:40:28.950Z"
    editedAt: "2017-01-04T21:40:56.282Z"
    v: 2
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d6baac895451b755743b2"
    text: {> I tried the binary mentioned in the blog entry too, but I just got another error too:^/```^/fish: './red-console-osx' terminated by signal SIGKILL (Forced quit)^/```^/^/Actually, I think this is a known error with the fish console}
    sent: "2017-01-04T21:39:54.708Z"
    editedAt: "2017-01-04T21:40:00.052Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "586d6b7cc02c1a3959e9d1d6"
    text: "@onetom so it works then?"
    sent: "2017-01-04T21:39:08.668Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d6979aa6be0472f0a561e"
    text: {If I run `/usr/local/bin/red -> /usr/local/Caskroom/red/0.6.1/red-061` from `bash`, then it compiles the console; no `PROGRAM ERROR: Invalid encapsulated data.`...^/Interesting...}
    sent: "2017-01-04T21:30:33.720Z"
    editedAt: "2017-01-04T21:31:13.499Z"
    v: 3
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d6872c895451b75573023"
    text: {I tried the binary mentioned in the blog entry too, but I just got another error too:^/```^/pair@sloth /p/tmp> curl -O http://static.red-lang.org/tmp/red-console-osx^/  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current^/                                 Dload  Upload   Total   Spent    Left  Speed^/100  256k  100  256k    0     0  52661      0  0:00:04  0:00:04 --:--:-- 58816^/pair@sloth /p/tmp> chmod +x red-console-osx^/pair@sloth /p/tmp> ./red-console-osx^/fish: './red-console-osx' terminated by signal SIGKILL (Forced quit)^/```}
    sent: "2017-01-04T21:26:10.297Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d67fcaa6be0472f0a4ab4"
    text: {I just wanted to try that voting demo I saw in the latest blog entry :(}
    sent: "2017-01-04T21:24:12.751Z"
    editedAt: "2017-01-04T21:24:26.013Z"
    v: 2
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d67ccaf6b364a292f827c"
    text: {Compiling from source failed too (on the macGUI branch):^/```^/>> do/args %red.r "%environment/console/console.red"^/...^/-=== Red Compiler 0.6.1 ===-^/...^/Target: Darwin^/^/Compiling to native code...^/*** Compilation Error: undefined symbol: alloc-cells^/*** in file: %/Users/pair/github.com/red/red/modules/view/backends/osx/events.reds^/*** at line: 28^/*** near: [alloc-cells 4^/    char-keys: [^/        268485632 -1057030016 -520093825 63487 0 1056964608 520093824 16547640^/    ]^/    keycode-table: [65 83 68 70 72 71 90 88 67 86 192 66 81 87 69 82 89 84 49 50 51 52 54 53 187 57 55 189 56 48 221 79 85 219 73 80 13 76 74 222 75 186 220 188 191 78 77 190 9 32 192 8 0 27 93 91 16 20 18 17 16 18 17 0 128 110 0 106 0 107 0 12 175 174 173 111 13 0 109 129 130 187 96 97 98 99 100 101 102 103 131 104 105 0 0 0 116 117 118 114 119 120 0 122 0 124 127 125 0 121 0 123 0 126 45 36 33 46 115 35 113 34 112 37 39 40 38 0]^/    make-at: func^/]^/```}
    sent: "2017-01-04T21:23:24.686Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d674b9d4cc4fc537814e7"
    text: {I tried `brew install red` too, but I got:^/```^/pair@sloth ~/g/r/red> red^/PROGRAM ERROR: Invalid encapsulated data.^/```}
    sent: "2017-01-04T21:21:15.484Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d670ec895451b75572905"
    text: {Can't download the latest macOS binary from http://www.red-lang.org/p/download.html^/Who can help to fix it?^/^/```^/pair@sloth ~/g/r/red> curl -I http://static.red-lang.org/dl/auto/mac/red-latest.zip^/HTTP/1.1 404 Not Found^/Server: Cheyenne/0.9.20.dev^/Date: Wed, 04 Jan 2017 21:10:49 GMT^/Content-Length: 53^/Content-Type: text/html^/Connection: close^/```}
    sent: "2017-01-04T21:20:14.048Z"
    v: 1
    author: "54e6d6cd15522ed4b3dc3baa"
) #(
    id: "586d47517a3f79ef5dd76834"
    text: {@santoshbn see also this recent [conversation about io](https://gitter.im/red/help?at=586c808b058ca96737c62561) Also feel free to post your questions [here](https://gitter.im/red/red/welcome)}
    sent: "2017-01-04T19:04:49.801Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d3cd9db9cafe9183b6440"
    text: {@santoshbn Welcome. No, serial port is not available yet, however, in Red/System, you can accesss OS functions to deal with serial port. It’s just harder.}
    sent: "2017-01-04T18:20:09.551Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "586d36b6aa6be0472f08f9e9"
    text: {I am new to red, so this question might have been answered multiple times - is serial port IO available on red 0.6.1?}
    sent: "2017-01-04T17:53:58.650Z"
    v: 1
    author: "586d3625d73408ce4f413756"
) #(
    id: "586d368f058ca96737ca4e53"
    text: "Hi, "
    sent: "2017-01-04T17:53:19.769Z"
    v: 1
    author: "586d3625d73408ce4f413756"
) #(
    id: "586ac612aa6be0472ffc208c"
    text: {`base` face's word wrap works only if the face is transparent,^/```^/b: make face! [^/^-type:^-^-'base^/^-color:^-^-red^/^-size:^-^-80x80^/^-text:^-^-{Lorem ipsum dolor sit amet, consectetur adipiscing elit.}^/^-offset:^-^-0x0^/]^/view make face! [^/^-type: 'window^/^-size: 200x90^/^-pane: reduce [^/^-^-b^/^-^-make b [color: none offset: 90x0]^/^-]^/]^/```^/ }
    sent: "2017-01-02T21:28:50.692Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "586ac60f9e6f00e74aec57fc"
    text: {[![blob](https://files.gitter.im/red/red/uw77/thumb/blob.png)](https://files.gitter.im/red/red/uw77/blob)}
    sent: "2017-01-02T21:28:47.306Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "586a20429e6f00e74ae90de0"
    text: "@geekyi it's not. See #2178"
    sent: "2017-01-02T09:41:22.829Z"
    editedAt: "2017-01-02T09:41:33.442Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58699471af6b364a291d776b"
    text: {@rubricanis ^/> Hmmm, according to https://github.com/red/red/tree/master/build I need a SDK^/^/It's a point of confusion for a lot of newcomers. It's for a particular internal feature only. Not needed for building from sources. I've wondered how the wording could be changed to remove the misunderstanding. ^/> FAQ: For temporary red team use only. Not needed to build or run red from sources}
    sent: "2017-01-01T23:44:49.316Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586992c0af6b364a291d732c"
    text: "@ifgem that should probably be a bug"
    sent: "2017-01-01T23:37:36.289Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58696a189e6f00e74ae65c81"
    text: {@rubricanis if you're on windows, you can't use rebol core to compile Red from source:). You have to use rebol view instead.}
    sent: "2017-01-01T20:44:08.853Z"
    editedAt: "2017-01-01T20:45:30.292Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "586948297a3f79ef5dc4a8cc"
    text: "np"
    sent: "2017-01-01T18:19:21.252Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58694816058ca96737b5ac5e"
    text: "Thanks!"
    sent: "2017-01-01T18:19:02.384Z"
    v: 1
    author: "58693f79d73408ce4f4082b9"
) #(
    id: "586947c0c895451b75439917"
    text: {https://github.com/red/red#running-red-from-the-sources is that what you're looking for?}
    sent: "2017-01-01T18:17:36.320Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5869472fc02c1a3959d6b666"
    text: {Hmmm, according to https://github.com/red/red/tree/master/build I need a SDK}
    sent: "2017-01-01T18:15:11.217Z"
    v: 1
    author: "58693f79d73408ce4f4082b9"
) #(
    id: "58694655aa6be0472ff51b22"
    text: {I don't think you need SDK to build Red from source, just a Rebol interpreter (see readme file on github)}
    sent: "2017-01-01T18:11:33.071Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58694146aa6be0472ff50516"
    text: "I get an 500 server error."
    sent: "2017-01-01T17:49:58.875Z"
    v: 1
    author: "58693f79d73408ce4f4082b9"
) #(
    id: "58694071aa6be0472ff501ea"
    text: {get it, fails. Are there other possibilities than the rebol website?}
    sent: "2017-01-01T17:46:25.642Z"
    v: 1
    author: "58693f79d73408ce4f4082b9"
) #(
    id: "58694052af6b364a291c0a36"
    text: {I would like to compile and test red but there is a rebol SDK needed. Tryin to f}
    sent: "2017-01-01T17:45:54.463Z"
    v: 1
    author: "58693f79d73408ce4f4082b9"
) #(
    id: "58693fd19d4cc4fc5364c935"
    text: "Hi everyone!"
    sent: "2017-01-01T17:43:45.665Z"
    v: 1
    author: "58693f79d73408ce4f4082b9"
) #(
    id: "5868fba5c02c1a3959d5806b"
    text: ":christmas_tree: :gift: happy new year everyone!"
    sent: "2017-01-01T12:52:53.907Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5867fb869d4cc4fc5360351b"
    text: "Peter, you really helped me. Thanks for that!"
    sent: "2016-12-31T18:40:06.173Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "5867e7fd9e6f00e74ae0abb9"
    text: {@meijeru  Yes to both - thanks!  mikeparr@live.com}
    sent: "2016-12-31T17:16:45.986Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5867ac400730ce69372cce4e"
    text: {@mikeparr Are you the (or a) maintainer of Red-By-Example? If so, I will send you some comments on the `error!` entry}
    sent: "2016-12-31T13:01:52.908Z"
    editedAt: "2016-12-31T13:02:13.200Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58678624c02c1a3959d03a1c"
    text: {@asampal - could you take a look at Red-By-Example please?  I took some of your suggestions on board.}
    sent: "2016-12-31T10:19:16.748Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "586746950730ce69372b5e98"
    text: {@mp3 To use a similar approach, you need to find the actual address of where the binary data is being stored:^/```text^/Red []^/^/bin: routine [^/    bin-str     [binary!]^/    /local^/        bp      [byte-ptr!]^/        fp      [pointer! [float32!]]^/        ip      [int-ptr!]^/        s       [series!]^/][^/    s: GET_BUFFER(bin-str)^/    bp: (as byte-ptr! s/offset) + bin-str/head^/    fp: as pointer! [float32!] bp^/    ip: as int-ptr! bp^/    ^/    print ["First byte " as integer! bp/1 lf]^/    print ["First float32 " fp/1 lf]^/    print ["First integer " ip/1 lf]^/    print ["Second byte " as integer! bp/2 lf]^/    print ["Second float32 " fp/2 lf]^/    print ["Second integer " ip/2 lf]^/    ^/    ;; a little faster if speed is essential^/    print ["First byte " as integer! bp/value lf]^/    print ["First float32 " fp/value lf]^/    print ["First integer " ip/value lf]^/    ^/    bp: bp + 1^/    fp: fp + 1^/    ip: ip + 1^/    ^/    print ["Second byte " as integer! bp/value lf]^/    print ["Second float32 " fp/value lf]^/    print ["Second integer " ip/value lf]^/    ^/]^/^/bin #{0100000002000000}^/```}
    sent: "2016-12-31T05:48:05.728Z"
    editedAt: "2016-12-31T05:48:24.814Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5867196dc02c1a3959cedb5e"
    text: {^/Peter, binary/rs-abs-at bin-str 1 (red/system ) is equivalent to bin/1 (red).Which is the red/system code for:  bin/1:   bin/2 ?^/}
    sent: "2016-12-31T02:35:25.167Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "586714350730ce69372aaa90"
    text: ""
    sent: "2016-12-31T02:13:09.628Z"
    editedAt: "2016-12-31T02:13:45.244Z"
    v: 2
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "58666f767a3f79ef5db9c497"
    text: {But I now realize that, if the `#import` should take place in a `#system` section, we are back to square one :worried: }
    sent: "2016-12-30T14:30:14.813Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58666a3c9e6f00e74adab632"
    text: "Yes that should be possible."
    sent: "2016-12-30T14:07:56.108Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5866641ec895451b753896fc"
    text: {What about the compiler generating a `.dll` that one can `#import` from? }
    sent: "2016-12-30T13:41:50.230Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "586663b17a3f79ef5db98e0e"
    text: "okey, I see now"
    sent: "2016-12-30T13:40:01.587Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58666388058ca96737a9fe55"
    text: {I'm sure that the self-hosted compiler will perform better in this aspect but I believe that it will be impossible to statically compile all Red code. Hence the plans for a JIT compiler.}
    sent: "2016-12-30T13:39:20.075Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "586663289d4cc4fc535998b4"
    text: {One thing that needs to be made clear about the compilation process. The current compiler cannot compile all Red constructs to machine code. Those that it cannot are interpreted at runtime. (The runtime is included in the executable).}
    sent: "2016-12-30T13:37:44.852Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "586661eec895451b75388e51"
    text: {because compilation being quite fast still takes more time than just interpretation}
    sent: "2016-12-30T13:32:30.957Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586661e99d4cc4fc53599330"
    text: "Not yet."
    sent: "2016-12-30T13:32:25.963Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "586661da0730ce6937276d2f"
    text: {yes, but is it possible to separate compiled part, compile it once and just use in my scripts?}
    sent: "2016-12-30T13:32:10.336Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586661b99d4cc4fc53599216"
    text: {and if you ```red -c script.red```, it will be compiled.}
    sent: "2016-12-30T13:31:37.192Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58666155058ca96737a9f3e3"
    text: {@PeterWAWood wait, but I can just `red script.red` and it is not compiled}
    sent: "2016-12-30T13:29:57.530Z"
    editedAt: "2016-12-30T13:29:59.101Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5866612e9e6f00e74ada8e86"
    text: {@maximvl  "how can I have interpreted part which uses compiled R/S code?" You can't. The Red code is compiled just as the Red/System code is compiled.}
    sent: "2016-12-30T13:29:18.062Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5866313a058ca96737a92240"
    text: {or, from another angle, how can I have interpreted part which uses compiled R/S code?}
    sent: "2016-12-30T10:04:42.912Z"
    editedAt: "2016-12-30T10:05:02.037Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586631177a3f79ef5db8afb6"
    text: {@PeterWAWood I don't really get it, so routines have to be compiled, but you can write them in the file with Red code?}
    sent: "2016-12-30T10:04:07.060Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586627170730ce69372661ea"
    text: {Routines [introduction](http://www.red-lang.org/2013/03/032-repl-release.html)}
    sent: "2016-12-30T09:21:27.172Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5866251a9d4cc4fc53589749"
    text: {@maximvl A ```routine!``` is the way to include Red/System code in a Red program. Routines have to be compiled with the current alpha. (It is probable that they will be JIT compilable with self-hosted Red).}
    sent: "2016-12-30T09:12:58.652Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58661d0c058ca96737a8d20a"
    text: {@PeterWAWood does it mean just changing `fun` to `routine` makes it compilable Red/System?}
    sent: "2016-12-30T08:38:36.723Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58661459c895451b75373fba"
    text: {If you don't need (for other reasons, presumably) to work in Red/System, the same result can be obtained by simple indexing in Red.^/```^/b: #{0001}^/b/1 ; == 0^/b/2 ; == 1^/```^/}
    sent: "2016-12-30T08:01:29.372Z"
    editedAt: "2016-12-30T08:03:32.311Z"
    v: 4
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5865f337c02c1a3959c9d913"
    text: {The ```rs-abs-at``` function gives an easy way to get at each byte in a binary! value. It returns an integer:^/```test^/Red []^/^/bin: routine [^/    bin-str     [binary!]^/    /local^/        pos     [integer!]^/          ^/][^/    print ["The first byte is " binary/rs-abs-at bin-str 0 lf]^/    print ["The second byte is " binary/rs-abs-at bin-str 1 lf]^/]^/^/bin #{0001}^/```}
    sent: "2016-12-30T05:40:07.467Z"
    editedAt: "2016-12-30T05:41:53.210Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5865eb10c895451b7536aceb"
    text: {Yes, array of bytes.  I get i.e. #^{5249464686A35C025741564562... from  read/binary }
    sent: "2016-12-30T05:05:20.823Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "5865e8fc7a3f79ef5db7961e"
    text: {The binary! datatype in Red is simply a series of uninterpreted bytes. When you say "I need to process arrays of binary! types", do you want to process arrays of bytes?}
    sent: "2016-12-30T04:56:28.331Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5865e6c69d4cc4fc53579f2b"
    text: {You need to "unload" values of other datatypes by using relevant Red runtime api functions. (These are not yet documented in the current alpha version). When accessing runtime functions, you need to compile with the ```-r``` command line argument (or build a version of LibRedRT including the functions that you wish to call.)^/^/Here's an example of unloading a Red string to an UTF-8 string:^/```text^/Red []^/^/s: routine [^/    str [string!]^/    /local len [integer!]  ^/][^/    len: -1                                 ;; Convert the whole string^/    print [unicode/to-utf8 str :len lf]^/]^/^/s "a string"^/```^/}
    sent: "2016-12-30T04:47:02.862Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5865e286af6b364a290edf7a"
    text: {Ok, but I need to process arrays of  binary! data types i.e. from read/binary %mySound.wav}
    sent: "2016-12-30T04:28:54.101Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "5865dde19e6f00e74ad89896"
    text: {The easy values to pass from Red to Red/System are of the integer!, float! and logic! types as the compiler automatically "unloads" the values:^/^/```text^/Red []^/^/p: routine [int [integer!]][^/    print ["The integer is " int lf]^/]^/^/p 1^/p 200^/^/pl: routine [l [logic!]][^/    print ["The value is " l lf]^/]^/^/pl true^/pl 0 = 1^/^/pf: routine [f [float!]][^/    print ["The float is " f lf]^/]^/^/pf 3.12345^/pf 0.0000000001^/```}
    sent: "2016-12-30T04:09:05.040Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5865dd669e6f00e74ad89531"
    text: {It is possible to pass data from red to red/system. All data in Red programs is loaded as Red values (each Red datatype! having its own format). }
    sent: "2016-12-30T04:07:02.530Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5865d79d7a3f79ef5db7584a"
    text: {Hi !, is it possible to pass binary data from red to red/system ?}
    sent: "2016-12-30T03:42:21.844Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "5865681faf6b364a290ccf5b"
    text: {ok, I think it's better to report an issue than paste everything here )}
    sent: "2016-12-29T19:46:39.450Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5865677fc895451b753497ba"
    text: {wow, there is very interesting `image` behaviour on wine}
    sent: "2016-12-29T19:43:59.345Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58656353058ca96737a5a568"
    text: "@dockimbel thanks, i'll try that"
    sent: "2016-12-29T19:26:11.342Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586563290730ce69372315af"
    text: {@greggirwin it could be better, I'm not yet that good with Red )}
    sent: "2016-12-29T19:25:29.449Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58655d15c02c1a3959c75498"
    text: {@maximvl, great to see that a quick v1 of it in under 100 lines.}
    sent: "2016-12-29T18:59:33.270Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586523b60730ce693721b7ce"
    text: {@maximvl If you are plotting points, you should use a `image!` directly. Using Draw would be too slow for that. Also, your code is doing many intermediary block allocations which could be avoided. It should be fast enough when painting on a small image directly, if not, dropping to R/S for the painting loop will bring you back realtime performances.}
    sent: "2016-12-29T14:54:46.677Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5864ca7faf6b364a2909dec9"
    text: "@endo64 I see, thanks, gonna try in the evening"
    sent: "2016-12-29T08:34:07.241Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5864b4f17a3f79ef5db226ae"
    text: {Ah you are creating a new layout and put into face/pane each time, it would be much better if you `clear` the draw block and just generate & `insert` the new draw block.}
    sent: "2016-12-29T07:02:09.089Z"
    editedAt: "2016-12-29T07:02:17.091Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5864b3df9e6f00e74ad3613a"
    text: {In that case you should put `show` to refresh you `panel`. Additionally, I think it would be better to use `base` instead of `panel` as panels have some refreshing problems.}
    sent: "2016-12-29T06:57:35.094Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5864b2cec895451b75315f8e"
    text: {You could try with `system/view/auto-sync?: false` to prevent auto refresh of View. So it doesn't refresh while you are typing.}
    sent: "2016-12-29T06:53:02.612Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "586430e19e6f00e74ad14ae5"
    text: "code is based on clock demo"
    sent: "2016-12-28T21:38:41.767Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58643082c02c1a3959c21e80"
    text: {basically if you try to type few letters in input area you will see draw pane blinking because it can't keep up with refreshing}
    sent: "2016-12-28T21:37:06.934Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586430359d4cc4fc535009b1"
    text: {I would appreciate some comments on what makes it so slow and how to deal with it}
    sent: "2016-12-28T21:35:49.258Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58643014af6b364a290768ae"
    text: {https://gist.github.com/maximvl/81f31f26b49a7a3a5891b9a63f47171a}
    sent: "2016-12-28T21:35:16.084Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5864300d7a3f79ef5daff555"
    text: {ok, I wrote base gui code to emulate this thing, but its *terribly* slow}
    sent: "2016-12-28T21:35:09.771Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58640b1b058ca967379f7dd2"
    text: "@9214 looks nice, good exercise :muscle: "
    sent: "2016-12-28T18:57:31.288Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586408df9e6f00e74ad067bf"
    text: "Yes, very doable in Red."
    sent: "2016-12-28T18:47:59.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5863f17fc02c1a3959c0b4cd"
    text: {by the way, just remembered Forth haiku project, should be friggin' awesome to organize something like that in Red (I'm pretty sure it's capable of doing such things)^/^/http://forthsalon.appspot.com/haiku-about}
    sent: "2016-12-28T17:08:15.038Z"
    editedAt: "2016-12-28T17:08:28.636Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5863eee59e6f00e74acfe153"
    text: {@maximvl the whole world will be ours :smiling_imp: }
    sent: "2016-12-28T16:57:09.523Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5863c8139d4cc4fc534de3d8"
    text: "can't wait for 1.0 and documentation :D"
    sent: "2016-12-28T14:11:31.132Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5863c7c7058ca967379e23cd"
    text: "in 10 lines, wonderful"
    sent: "2016-12-28T14:10:15.457Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5863c7bec02c1a3959bfdb44"
    text: "autosorted list of integers"
    sent: "2016-12-28T14:10:06.336Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5863bc569d4cc4fc534da8eb"
    text: {@maximvl There is a good explanation and an example usage in above link, check it out.}
    sent: "2016-12-28T13:21:26.582Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5863b86a7a3f79ef5dad7463"
    text: {but it's still interesting to know what ideas are there}
    sent: "2016-12-28T13:04:42.426Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5863b83261e516c1578f2ed1"
    text: {@endo64 You're welcome.^/@maximvl The ownership system is experimental, so it's not well documented.}
    sent: "2016-12-28T13:03:46.989Z"
    editedAt: "2016-12-28T13:04:40.365Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5863b76b0730ce69371b0895"
    text: {there is some info in the above link, maybe Object chapter might contain some too ....}
    sent: "2016-12-28T13:00:27.319Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5863b75e058ca967379dcefb"
    text: "Thank you for the explanation @qtxie "
    sent: "2016-12-28T13:00:14.118Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5863b7579e6f00e74acec4ae"
    text: {http://www.red-lang.org/2016/03/060-red-gui-system.html}
    sent: "2016-12-28T13:00:07.008Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5863b7359d4cc4fc534d8e3a"
    text: "@qtxie I see, gonna check out, thanks!"
    sent: "2016-12-28T12:59:33.936Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "5863b717db9cafe9183ab133"
    text: {@maximvl Search `ownership` in this blog entry. http://www.red-lang.org/2016/03/060-red-gui-system.html}
    sent: "2016-12-28T12:59:03.326Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5863b7049e6f00e74acec36f"
    text: {there is ownership system page in Red docs, but it's empty =)}
    sent: "2016-12-28T12:58:44.795Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5863b6e5af6b364a2904ff14"
    text: "no, it does not ... "
    sent: "2016-12-28T12:58:13.590Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5863b6989d4cc4fc534d89f7"
    text: "does it also come from Rebol?"
    sent: "2016-12-28T12:56:56.152Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5863b68a9d4cc4fc534d89d0"
    text: {@qtxie what is this "owner" concept?}
    sent: "2016-12-28T12:56:42.305Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5863b62bdb9cafe9183ab113"
    text: {FYI, the view engine will ignore changes in `extra` and `state` fields in face! object.}
    sent: "2016-12-28T12:55:07.001Z"
    editedAt: "2016-12-28T12:55:24.920Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5863b60496a565f84406fa87"
    text: {@endo64 A value in Red can only have one owner for now, and it won't change after it's set. (Unless you manully change it by `modify` function)^/^/In this case, the string "test" is bind to the `extra` field in the face. When changing it, the view engine will know that the `extra` field is changed. But in current implementation, the view engine will just ignore it and do nothing.}
    sent: "2016-12-28T12:54:28.229Z"
    editedAt: "2016-12-28T12:56:08.409Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5862f359058ca967379a82aa"
    text: {@qtxie Can you please check the below code:^/^/If a text in a draw block points to a string in the face object itself, changes on the string doesn't refresh the face even if I use `show`.^/If the string is at outside of the face (put `s: "test"` somewhere and change `self/extra` to `s` in draw block), then it works.^/^/```^/f: make face! [^/^-type: 'base^/^-extra: "test"  ;<<< this is my string^/^-size: 100x100^/^-offset: 20x120^/^-color: red^/^-draw: compose [^/^-^-text 10x10 (self/extra) ;<<< this points to same string in extra field^/^-]^/]^/^/win: layout [^/^-size 300x300^/^-button "ok" [^/^-^-;*** change the string in draw block should be shown on face^/^-^-probe append probe last f/draw random 9^/^-^-show [win f]  ;<<< even this doesn't refresh the face^/^-]^/^-button "show" [^/^-^-probe f/extra ; these both change but face didn't get refreshed^/^-^-probe f/draw^/^-]^/]^/^/append win/pane f^/view win^/```^/}
    sent: "2016-12-27T23:03:53.314Z"
    editedAt: "2016-12-27T23:05:56.444Z"
    v: 4
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58616d227a3f79ef5da3201e"
    text: {Welcome @MPrieto88011_twitter. Red can be quite different, even if things look similar on the surface. Don't be afraid to ask questions and we'll help to get you started.}
    sent: "2016-12-26T19:18:58.743Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58616815c02c1a3959b54eea"
    text: "@MPrieto88011_twitter welcome!"
    sent: "2016-12-26T18:57:25.587Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586166eec5a4e0233bd0e6c5"
    text: {Hi guys, I am new to Red. I have a background in other programming languages (Python, Xojo, PHP, Javascript). I saw the roadmap for Red and I immediately became interested. I will be studying hard to get to a decent leve where I can hopefully contribute to the development of Red.}
    sent: "2016-12-26T18:52:30.078Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "5860e3f4c895451b7520491d"
    text: {I hinted at a resolution, see comment to that issue.}
    sent: "2016-12-26T09:33:40.261Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5860d18bc02c1a3959b2ba0f"
    text: "I opened a ticket for it #2380 "
    sent: "2016-12-26T08:15:07.524Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5860c0e1e7bdfe4e299b58e9"
    text: {But! There is a bug in VID's merging font settings,  `size` and `color` doesn't overwrite the old value:^/```^/f1: make font! [name: "Arial" size: 24 color: red]^/view [f2: text "Test" font f1 font-color blue font-size 22]^/? f2/font^/size  block!    [24 22]^/color  block!    [255.0.0 0.0.255]^/^/view [f3: text "Test" font f2/font font-color green font-size 20]^/? f3/font^/size             block!    [24 22 20]^/color            block!    [255.0.0 0.0.255 0.255.0]^/```^/}
    sent: "2016-12-26T07:04:01.352Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5860bef6c5a4e0233bce2a71"
    text: {> > I'm not sure whether it's a design choice in VID or a bug. I have recorded this issue in here: https://github.com/red/red/issues/2379^/^/I think it is design choice, because VID can apply (merge) other settings to the given font object without changing the original font which is correct way, otherwise it wouldn't be useful at all.^/^/```^/fnt: make font! [name: "Arial" size: 24 color: red]^/view [t: text "Test" font fnt font-size 12] ; text size will be 12 instead of 24 but fnt/size is still 24^/```^/}
    sent: "2016-12-26T06:55:50.064Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585e2ef1c5a4e0233bc4d05c"
    text: "Thank you @qtxie it works now. (Win10 x64)"
    sent: "2016-12-24T08:16:49.058Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585dda6296a565f84406a6fb"
    text: {As a workaround, you can set the font after created the window instead of set it in VID.^/```^/fnt: make font! [name: "Arial" size: 24 color: red]^/win: layout [^/    b: base 300x300 "TEST" draw [font fnt text 0x0 "TEST"] []^/    button "Test" [^/        fnt/size: 12^/        probe b/font/size^/    ]^/]^/b/font: fnt^/view win^/```}
    sent: "2016-12-24T02:16:02.492Z"
    editedAt: "2016-12-24T02:16:07.990Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "585dd938d99b1dd03d2dedad"
    text: {> A new font object is created for each face.^/^/I'm not sure whether it's a design choice in VID or a bug. I have recorded this issue in here: https://github.com/red/red/issues/2379}
    sent: "2016-12-24T02:11:04.448Z"
    editedAt: "2016-12-24T02:12:00.433Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "585dd887db9cafe9183a64ec"
    text: {@endo64 Yes. I have fixed one of the two issues. See: https://github.com/red/red/issues/2378}
    sent: "2016-12-24T02:08:07.990Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "585da45d7a3f79ef5d94d11b"
    text: {Other issues with font are:^/Changing a font property doesn't reflect to face even if I call `show`.^/A new font object is created for each face.^/```^/fnt: make font! [name: "Arial" size: 24 color: red]^/view [^/    b: base 300x300 font fnt "TEST" draw [font fnt text 0x0 "TEST"] []^/^-button "Test" [^/^-^-fnt/size: 12               ; <<< no refresh^/^-^-probe b/font/size  ; <<< this is different than fnt/size^/^-^-show b                       ; <<< no refresh even with this^/;^-^-append last b/draw "."  ; <<< any of these two lines makes face refresh and font change is visible^/;^-^-append b/text "."^/^-]^/]^/```^/@qtxie Could you please check above font issues?^/}
    sent: "2016-12-23T22:25:33.235Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585da0657a3f79ef5d94c078"
    text: {```^/update-font-faces: func [parent [block! none!]^/    /local f^/][^/    if block? parent [^/        foreach f parent [^/            if f/state [   ; <<<<<< parent is [none] hence f is none, f/state gives error^/^-^-^-^-system/reactivity/check/only f 'font f/state/2: f/state/2 or 524288^/                show f^/            ]^/        ]^/    ]^/]^/```^/I think the line should be `if all [f f/state]` ^/}
    sent: "2016-12-23T22:08:37.948Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585d9f82af6b364a29ed47fe"
    text: {Error happens inside the `update-font-faces` function in `on-change*` event of font.}
    sent: "2016-12-23T22:04:50.391Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585d9ecbe7bdfe4e2990389e"
    text: {If font is not used in a draw block then no error appears. Changing any property gives error, not just size.}
    sent: "2016-12-23T22:01:47.718Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585d9e75c895451b75145671"
    text: {Changing a font property gives `*** Script Error: path none is not valid for none! type *** Where: if` error if font used in a draw block:^/```^/fnt: make font! [name: "Arial" size: 24]^/view [^/    b: base 300x300 draw [font fnt text 0x0 "TEST"]^/^-button "Test" [^/^-^-fnt/size: 12^-;error^/^-]^/]^/```}
    sent: "2016-12-23T22:00:21.326Z"
    editedAt: "2016-12-23T22:00:29.246Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585c3282c5a4e0233bbb865d"
    text: {Find of the day [theorymaker](http://theorymaker.info/)^/A versatile online diagram maker. ~~bit like~~ inspired by graphViz (and using the same engine?) for those familiar. DIagrams node graph like things}
    sent: "2016-12-22T20:07:30.595Z"
    editedAt: "2016-12-22T20:12:53.199Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "585b5ca8d99b1dd03d2dba08"
    text: {i did not know how much of a concern legacy would be}
    sent: "2016-12-22T04:55:04.550Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "585b241fd99b1dd03d2db7be"
    text: "@JacobGood1 Yes. of course. :smile: "
    sent: "2016-12-22T00:53:51.714Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "585b2407d99b1dd03d2db7b9"
    text: {@asampal Nope. For UWP apps, we just need to find a way to call the WinRT APIs.(through .Net bridge?)}
    sent: "2016-12-22T00:53:27.533Z"
    editedAt: "2016-12-22T00:54:17.899Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "585af600d99b1dd03d2db3d1"
    text: {will the direct2d implementation take advantage of any of the windows 10 updates?^/https://msdn.microsoft.com/en-us/library/windows/desktop/hh802478(v=vs.85).aspx}
    sent: "2016-12-21T21:37:04.958Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "585acae9db9cafe9183a20d7"
    text: {@qtxie did you say some time ago that a Direct2D backend would be needed for creating UWP apps in Windows?}
    sent: "2016-12-21T18:33:13.300Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "585a8efbc02c1a3959964293"
    text: {Any improvement, is simply an improvement, so glad that those things are coming ...}
    sent: "2016-12-21T14:17:31.188Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "585a8ee17a3f79ef5d843550"
    text: {OK ... the flicker of the base scrolling is still not going to be easily fixable, right?}
    sent: "2016-12-21T14:17:05.551Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "585a8e87c5a4e0233bb241e4"
    text: {@pekr  Yes. But will just implement the features I need for now. (mainly for drawing text) ;-)}
    sent: "2016-12-21T14:15:35.184Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "585a8bf57a3f79ef5d84217a"
    text: {Noticed some work has started upon the Direct2D Draw backend? }
    sent: "2016-12-21T14:04:37.116Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "585a3f5d058ca9673773409b"
    text: {@asampal - yes, I agree, and will look into it - thanks.}
    sent: "2016-12-21T08:37:49.287Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "585a2fb1db9cafe9183a0498"
    text: {@mikeparr , I think I might have suggested this before, but it seems to me that the text "Category:" and "Red word:" should not prefix every entry in the respective sections. As it is, I find that they dominate the lines they're on, being large and right at the start. They make it harder to see the intended text on these lines and they just seem redundant being repeated for every entry. ^/It would be better, IMO, to indicate that an entry is part of these sections with some lighter-weight, smaller text that follows the main text you want to be looking at. Another possibility would be to omit the text "Category:" and "Red word:" except for right at the start of the sections, and use a very light background color to indicate the section. Also, think of the ink that could be saved!}
    sent: "2016-12-21T07:30:57.010Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58597f400730ce6937ecd255"
    text: "Thanks for the update Mike."
    sent: "2016-12-20T18:58:08.509Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58597aa2af6b364a29d7fa31"
    text: "@mikeparr :clap: very nice refference"
    sent: "2016-12-20T18:38:26.246Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585962ffc02c1a39598fddc9"
    text: {A lot of new words (including types) have just been uploaded to the Red-by-Example site.  Also, I want to mention that @Arie, who created the site and the Red software to generate it, has passed over the main running of the site to me.  It is a pleasure to work with him.  Suggestions on the site are very welcome.  [link](http://www.red-by-example.org/)^/^/^/}
    sent: "2016-12-20T16:57:35.347Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58583dffaf6b364a29d18aeb"
    text: "@geekyi Maybe, yes."
    sent: "2016-12-19T20:07:27.977Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58581bbcaf6b364a29d0c4da"
    text: "@jocko-jc @geekyi @dockimbel The same for avast"
    sent: "2016-12-19T17:41:16.841Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "5857e8217a3f79ef5d75b8fc"
    text: "Maybe digitally signing would help?"
    sent: "2016-12-19T14:01:05.575Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5857e807058ca96737669c5d"
    text: {@geekyi yeah, fighting with my antivirus was cumbersome, in the end I've just excluded red-related folder from scanning}
    sent: "2016-12-19T14:00:39.493Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5857e7f1058ca96737669c0e"
    text: {Most frustrating thing is I don't know the cause of it. Initially, I had thought it was due to the encapping (red.exe being stored compressed) but the AV removed the gui-console.exe files too, which AFAIK, aren't compressed}
    sent: "2016-12-19T14:00:17.038Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5857e7850730ce6937e3e722"
    text: {But I wonder, will this drive away others who aren't aware of this? Who simply stop when they find that their antivirus reports red.exe or gui-console.exe as a virus}
    sent: "2016-12-19T13:58:29.986Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5857e6e80730ce6937e3df66"
    text: "@jocko-jc :+1: "
    sent: "2016-12-19T13:55:52.395Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5857e6b0058ca967376693de"
    text: "@geekyi thanks for your advice"
    sent: "2016-12-19T13:54:56.835Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "5857d4587a3f79ef5d754986"
    text: {@jocko-jc I'd had the same problem with Avira, which I'd been using for years. It happens like doc says. I was able to workaround before (lowering the heuristics, whitelisting) but at one point my workarounds stopped working :(^/Had to uninstall Avira and go with the stock microsoft antivirus (defender)}
    sent: "2016-12-19T12:36:40.774Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585790b87a3f79ef5d73e987"
    text: {@dockimbel yes, so on XP/7 it gives me what was on screenshots, for 8/10 it fails with ^/>fixme:dwmapi:DwmIsCompositionEnabled 0x33fc28^/>fixme:d2d:d2d_factory_CreateDCRenderTarget iface 0x141660, desc 0x57e7b0, render_target 0x33f3d4 stub!^/}
    sent: "2016-12-19T07:48:08.898Z"
    editedAt: "2016-12-19T07:48:14.810Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58578860d99b1dd03d2d2523"
    text: "I'll check it when I process wine related issues."
    sent: "2016-12-19T07:12:32.553Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
)#(
    id: "5857881661e516c1578e1f1a"
    text: {@dockimbel Yes. The layered windows are not working properly on Wine. Not sure why...}
    sent: "2016-12-19T07:11:18.050Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58578061e7bdfe4e2970033b"
    text: {@jocko-jc Thanks for the report. Unfortunately, Avira is one of the few AV with pretty aggressive  heuristics for unknown threats. My false positive reports to them have just resulted in whitelisting the particular executable sent and no correcting their detection heuristics.}
    sent: "2016-12-19T06:38:25.839Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58577e100730ce6937e1d1a8"
    text: {only one point: not compatible with my antivirus (Avira)}
    sent: "2016-12-19T06:28:32.535Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "58577d6ac895451b75f34168"
    text: "works nice here on win10 and osx"
    sent: "2016-12-19T06:25:46.872Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "58577cadc895451b75f33e88"
    text: {@maximvl Is there any wine settings for switching to a post-WinXP compatibility mode?}
    sent: "2016-12-19T06:22:37.929Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58577c0c0730ce6937e1c52d"
    text: {@qtxie What do you think about that? Looks like layered windows are not displayed? }
    sent: "2016-12-19T06:19:56.078Z"
    editedAt: "2016-12-19T06:20:45.040Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58566745c5a4e0233b9c8f40"
    text: "same on 1.9.14"
    sent: "2016-12-18T10:39:01.099Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58566646058ca967375fa5b4"
    text: {I've tried to run ballots on wine 1.9.9, interactive elements don't work and this is how it looks: http://imgur.com/a/WHZir}
    sent: "2016-12-18T10:34:46.835Z"
    editedAt: "2016-12-18T10:39:37.001Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585575187a3f79ef5d6ac5cc"
    text: "Nice!"
    sent: "2016-12-17T17:25:44.859Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58555e03af6b364a29c49785"
    text: "@dockimbel wow! :O"
    sent: "2016-12-17T15:47:15.724Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585552e9e7bdfe4e2966d85f"
    text: "@dockimbel great, thanks for this demo!"
    sent: "2016-12-17T14:59:53.133Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58552175af6b364a29c389be"
    text: {https://twitter.com/red_lang/status/810083882729172993}
    sent: "2016-12-17T11:28:53.619Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "585503ad058ca9673759e990"
    text: {Worth an issue? If not a bug, then at least a wish...}
    sent: "2016-12-17T09:21:49.050Z"
    editedAt: "2016-12-17T09:22:30.305Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5854fedec5a4e0233b96d110"
    text: {In the Rebol docs there is this example, which works the same way in Red^/```^/red>> sort/compare [100 101 -20 37 42 -4] func [a b][a > b]^/== [101 100 42 37 -4 -20]^/```^/It makes me think the func definition could be replaced with `:>` since the sort help indicates that refinement parameter can be `op!`, but it doesn't work.^/```^/red>> sort/compare [100 101 -20 37 42 -4] :>^/*** Script Error: invalid /compare argument: make op! [[{Returns TRUE if the first value is greater than the second} value1 [any-type!] value2 [any-type!]]]^/*** Where: sort^/```}
    sent: "2016-12-17T09:01:18.928Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5853b66c058ca9673753456b"
    text: {@endo64 Similar to `set-modes` from R2. In Red, it has been extended for setting any meta-data on values, like the `owner` flag (see examples in Red codebase).}
    sent: "2016-12-16T09:39:56.015Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5853ab39c895451b75e1e81d"
    text: {What does `modify`? I couldn't find info on R3 as well.}
    sent: "2016-12-16T08:52:09.785Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5853a4b3c5a4e0233b9010a4"
    text: {@JenniferLee520 It needs a bit of design work as the way it works in Rebol3 is not fully satisfying. Also, we need to consider HOF naming scheme and eventually use a different name than `apply`. So, not this month as we are already fully booked, but we can work on it in January.}
    sent: "2016-12-16T08:24:19.600Z"
    editedAt: "2016-12-16T08:25:11.873Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58539ceac5a4e0233b8feb77"
    text: {When will "APPLY" be supported in Red? Thanks. @dockimbel }
    sent: "2016-12-16T07:51:06.939Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "58533d0a0730ce6937ce9be2"
    text: {@geekyi That's correct, the only new thing in Red introduced by macros (and the preprocessor) is the ability to run code at compile-time, so you can improve run-time performance.}
    sent: "2016-12-16T01:02:02.987Z"
    editedAt: "2016-12-16T01:03:23.023Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852f5defb22792b3b6afff9"
    text: "Maybe veterans too?"
    sent: "2016-12-15T19:58:22.733Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5852f5d1058ca967374f9c71"
    text: {That `#macro` isn't needed to do meta-programming "magic"; especially newcomers might get confused because lisp macros}
    sent: "2016-12-15T19:58:09.914Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5852f54afb22792b3b6afb83"
    text: {I think you highlighted this in the blogspot, but still think there is a high chance of misunderstanding this feature}
    sent: "2016-12-15T19:55:54.510Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5852f51dfb22792b3b6afa9b"
    text: {Also @dockimbel, correct me if I'm wrong, but red is already pretty powerful/expressive enough for highlevel meta-programming; and the only *really* new thing `#macro` introduces is performance benefits?}
    sent: "2016-12-15T19:55:09.971Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5852f44bc895451b75de4050"
    text: {@maximvl this discussion reminds me of when I tried to `quote '` :D (was it to do `type? '`) I think I managed to do it, but don't remember how}
    sent: "2016-12-15T19:51:39.597Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5852c1c3589f411830eacc8f"
    text: {Yes, that would be the accurate equivalent of your REPL version.}
    sent: "2016-12-15T16:16:03.885Z"
    editedAt: "2016-12-15T16:16:34.691Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852c197af6b364a29b7f04a"
    text: "ok, it's enough of meta-programming for today"
    sent: "2016-12-15T16:15:19.955Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852c174e7bdfe4e295a4d9c"
    text: {exact translation is (backtick) => `compose`, `,` => `(:x)` and `'` => `[]`}
    sent: "2016-12-15T16:14:44.974Z"
    editedAt: "2016-12-15T16:15:00.214Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852c08f058ca967374e4baf"
    text: "okey, now it's correct one"
    sent: "2016-12-15T16:10:55.949Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852c08aaf6b364a29b7eb54"
    text: {```^/Red []^/^/#macro test: func [x] [^/   reduce [:x]^/]^/^/probe [test z]^/```}
    sent: "2016-12-15T16:10:50.376Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852bfdeaf6b364a29b7e751"
    text: {BTW, you can also use `do/expand` for testing if you don't need to look at the result of th expansion.}
    sent: "2016-12-15T16:07:58.299Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852bfc2af6b364a29b7e6e9"
    text: "yeah :D"
    sent: "2016-12-15T16:07:30.588Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852bfbde7bdfe4e295a417b"
    text: {oh, after you expand it you evaluate it since it's argument for `probe`}
    sent: "2016-12-15T16:07:25.707Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852bfb0af6b364a29b7e6b6"
    text: {`expand-directives` just does the expansion, not the evaluation. When you compile a Red script, you get expansion+evaluation.}
    sent: "2016-12-15T16:07:12.936Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852bf83c895451b75dcf0d9"
    text: "@dockimbel where does the `do` come from?"
    sent: "2016-12-15T16:06:27.620Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852bf72fb22792b3b69aceb"
    text: {The `probe` should be inside the "script".}
    sent: "2016-12-15T16:06:10.741Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852bf59af6b364a29b7e4c5"
    text: {The two versions are not the same, in the REPL, it should be:^/```lisp^/red>> do expand-directives [#macro test: func [x] [ reduce [x] ] probe test z]^/*** Script Error: z has no value^/*** Where: probe^/```}
    sent: "2016-12-15T16:05:45.979Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852be92fb22792b3b69a906"
    text: "everything looks fine in repl"
    sent: "2016-12-15T16:02:26.929Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852be8aaf6b364a29b7e051"
    text: "why does red script fail here?"
    sent: "2016-12-15T16:02:18.422Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852be82af6b364a29b7e021"
    text: {`reduce [x]` => `reduce [reduce [x]]` or `compose/deep [[(x)]]`.}
    sent: "2016-12-15T16:02:10.435Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852be6de7bdfe4e295a39a7"
    text: {```^/red>> expand-directives [#macro test: func [x] [ reduce [x] ] test z]^/== [z]^/red>> probe [z]^/== [z]^/```}
    sent: "2016-12-15T16:01:49.331Z"
    editedAt: "2016-12-15T16:02:01.152Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852be56058ca967374e3d2f"
    text: "okey, this is interesting"
    sent: "2016-12-15T16:01:26.851Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852bc97c895451b75dce01e"
    text: "question is how you return `[z]` here"
    sent: "2016-12-15T15:53:59.122Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852bc31e7bdfe4e295a2de6"
    text: "this is what I'm talking about"
    sent: "2016-12-15T15:52:17.514Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852bc24fb22792b3b699c2d"
    text: {```^/Red []^/#macro test: func [x] [^/   reduce [x]^/]^/probe test z^/```^/```^/>red test.red ^/*** Script Error: z has no value^/*** Where: probe^/```}
    sent: "2016-12-15T15:52:04.157Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852bbf7af6b364a29b7d322"
    text: "@dockimbel this is not exactly what happens"
    sent: "2016-12-15T15:51:19.067Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852bab8e7bdfe4e295a24e5"
    text: {@qtxie Great to have `crop` for images now! ;-) Such a useful feature!}
    sent: "2016-12-15T15:46:00.727Z"
    editedAt: "2016-12-15T15:46:21.083Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852ba40c5a4e0233b8b49d9"
    text: {@maximvl In Redbol, you would just move the quote inside the function specification: ^/```lisp^/red>> test: func ['x][x]^/== func ['x][x]^/red>> test 5^/== 5^/red>> test z^/== z^/```}
    sent: "2016-12-15T15:44:00.716Z"
    editedAt: "2016-12-15T15:45:20.298Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852ba15c5a4e0233b8b48b7"
    text: {without quote the second one will fail because `z` is unbound}
    sent: "2016-12-15T15:43:17.209Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b9fcc895451b75dcd117"
    text: {so this is how it can be used:^/```^/* (defmacro test (x) `(list ',x))^/TEST^/* (test 5)^/(5)^/* (test z)^/(Z)^/```}
    sent: "2016-12-15T15:42:52.219Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b977c5a4e0233b8b45e3"
    text: {In Red, you would just use lit-word arguments to fetch values withouth evaluating them.}
    sent: "2016-12-15T15:40:39.808Z"
    editedAt: "2016-12-15T15:41:24.357Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5852b976c5a4e0233b8b45db"
    text: {so you can safely do something like `',x`, so if `x` is a constant it will be constant in the end, or if it's symbol or expression that it will not be evaluated}
    sent: "2016-12-15T15:40:38.758Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b936058ca967374e201e"
    text: {no reason to type like this, but trick here is if you want to quote dynamic values in macro, and value can be anything}
    sent: "2016-12-15T15:39:34.290Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b858af6b364a29b7be15"
    text: {I see, a lot of things to think about, thanks for explanations :)}
    sent: "2016-12-15T15:35:52.782Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b82fe7bdfe4e295a18c7"
    text: {It evaluates to `true` because `=` operator (`equal?`) checks equality loosely between compatible datatypes. Use strict comparison if that's what you want:^/```lisp^/red>> (first ['x]) == 'x^/== false^/```}
    sent: "2016-12-15T15:35:11.135Z"
    editedAt: "2016-12-15T15:35:32.552Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b7dbc895451b75dcc255"
    text: {okay, it doesn't check for a type^/```^/red>> (first ['x]) = (first [x])^/== true^/```}
    sent: "2016-12-15T15:33:47.289Z"
    editedAt: "2016-12-15T15:34:06.726Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b78ec895451b75dcc079"
    text: {@dockimbel fair enough, but then why does comparison evaluate to `true`?}
    sent: "2016-12-15T15:32:30.426Z"
    editedAt: "2016-12-15T15:32:36.196Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b760af6b364a29b7b786"
    text: {> why `y` is a `word!` and not `lit-word!` ?^/^/Because you set `y` to `x` word and not a lit-word. You forgot that arguments are evaluated, so `'x` becomes `x` when assigned. What you want is:^/```lisp^/red>> y: to-lit-word 'x^/== 'x^/red>> type? y^/== lit-word!^/```}
    sent: "2016-12-15T15:31:44.104Z"
    editedAt: "2016-12-15T15:32:36.463Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b72ee7bdfe4e295a139a"
    text: {@dockimbel  ;)^/```^/* (+ '1 '2 '3)^/6^/```}
    sent: "2016-12-15T15:30:54.288Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b6f2e7bdfe4e295a12dd"
    text: {> lit-integer! is integer!^/^/```lisp^/>> 1 + 2^/== 3^/>> '1 + '2^/== 3^/```^/Good luck explaning that lit-integer a sound feature of the language to newcomers. ;-)}
    sent: "2016-12-15T15:29:54.519Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b6d7058ca967374e0f53"
    text: "why `y` is a `word!` and not `lit-word!` ?"
    sent: "2016-12-15T15:29:27.795Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b6c80730ce6937cb9808"
    text: {@dockimbel I'm trying to understand things and this confuses me:^/```^/red>> first ['x]^/== 'x^/red>> type? first ['x]^/== lit-word!^/red>> (first ['x]) = 'x;^/== true^/red>> y: 'x^/== x^/red>> type? y^/== word!^/```}
    sent: "2016-12-15T15:29:12.654Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b5b4af6b364a29b7aed3"
    text: {You can look at it as Lisp quotes migrating to the datatypes themselves in Redbol. The quoting has been "applied by design", there is no need to add another syntactic layer on that. The Parse case with integers is specific to Parse dialect and solved specifically with the `quote` Parse keyword.}
    sent: "2016-12-15T15:24:36.507Z"
    editedAt: "2016-12-15T15:27:39.422Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b583c5a4e0233b8b2cc0"
    text: {maybe I'm trying to apply my lisp experience too much to Redbol world}
    sent: "2016-12-15T15:23:47.168Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b56ffb22792b3b6972b0"
    text: "there are no lit-words in lisp, you are right"
    sent: "2016-12-15T15:23:27.924Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b556af6b364a29b7acee"
    text: {> in parse 1 by default means number of repetitions^/^/In Parse dialect, integers denote a number of repetitions of the following rule. That is one of the semantic rules of Parse dialect. There is no "by default".}
    sent: "2016-12-15T15:23:02.024Z"
    editedAt: "2016-12-15T15:23:23.078Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b4d7589f411830ea7b3c"
    text: {> `x` by default replaced by it's value, and if you want `x` itself, you want to stop default behaviour you quote it^/^/That's how you would describe it in Lisp, but in Red, it would be: "The `x` word evaluates to the value it references or `unset!`. The `'x` lit-word evaluates to the `x` word." There is no "default behavior", each datatype has specific semantics related to it. Word is not lit-word (you don't have such distinction in Lisp, as you don't have a first-class quoted word IIRC).}
    sent: "2016-12-15T15:20:55.284Z"
    editedAt: "2016-12-15T15:21:52.971Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b427af6b364a29b7a58d"
    text: {at least this is how I think, maybe it's not logical at all}
    sent: "2016-12-15T15:17:59.490Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b409af6b364a29b7a4d2"
    text: {in parse `1` by default means number of repetitions, so I assume that to stop default behaviour and get just `1`  itself I should quote it}
    sent: "2016-12-15T15:17:29.932Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b3e0c5a4e0233b8b2255"
    text: {`x` by default replaced by it's value, and if you want `x` itself, you want to stop default behaviour you quote it}
    sent: "2016-12-15T15:16:48.711Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b3bbc5a4e0233b8b2144"
    text: "ok, let me show you what I mean"
    sent: "2016-12-15T15:16:11.297Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b387c5a4e0233b8b202d"
    text: "lit-integer! is integer!"
    sent: "2016-12-15T15:15:19.717Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b365e7bdfe4e2959fd32"
    text: {So you want a lit-integer! datatype? Can you define the semantics for that?}
    sent: "2016-12-15T15:14:45.179Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b33faf6b364a29b79e68"
    text: {@dockimbel do you think this is a bug? since it prints only once?^/```^/red>> parse [a 1] [2 [s: 'a (print "after a") [number! :s |]]]^/after a^/== false^/```}
    sent: "2016-12-15T15:14:07.648Z"
    editedAt: "2016-12-15T15:14:18.945Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b326058ca967374df749"
    text: {but ok, if they are different - they are different, I'm fine with it}
    sent: "2016-12-15T15:13:42.425Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b312af6b364a29b79d28"
    text: "with the way you quote words"
    sent: "2016-12-15T15:13:22.084Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b2ff589f411830ea6f5a"
    text: "Consistency with what? Lisp?"
    sent: "2016-12-15T15:13:03.228Z"
    editedAt: "2016-12-15T15:13:13.389Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b2e4e7bdfe4e2959f92f"
    text: "for now only consistancy"
    sent: "2016-12-15T15:12:36.583Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b28d0730ce6937cb7ecf"
    text: {@maximvl Why would you want that when you already have the `quote` keyword to escape integers? Given how rarely it is needed to match specific integer values in Parse rules, it looks good enough to me.}
    sent: "2016-12-15T15:11:09.708Z"
    editedAt: "2016-12-15T15:12:52.764Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b25e589f411830ea6b4f"
    text: {oh, well, it's not only integers, it's about any loadable literal value}
    sent: "2016-12-15T15:10:22.191Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b2230730ce6937cb7cdc"
    text: {@dockimbel makes sense, do you think it also makes sense to allow quoted integers for `parse`?}
    sent: "2016-12-15T15:09:23.994Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852b1cb058ca967374defff"
    text: {Quoting has been integrated deeply into the Rebol language through dedicated first-class datatypes (block! vs paren!, lit-word! vs word!, lit-path! vs path!). Beyond those types, the syntactic "quoting" makes no sense, as the values either evaluate to themselves, or denote different semantics (like set-word!, set-path! and any-function!). Anyway, you can always pass quoted values (regardless of their datatype) using lit-word! arguments in functions, or use `quote` when you need to dynamically block a value from evaluating (only useful for word!, path!, paren! and (eventually) any-function! values).}
    sent: "2016-12-15T15:07:55.876Z"
    editedAt: "2016-12-15T15:09:25.631Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852a4390730ce6937cb1c0c"
    text: {@maximvl ^/> in common lisps `'` is a reader-macro which transforms `'thing` into `(quote thing)`^/so both are the same, it's just a shortcut^/^/It is very different in Red. `'` is part of literal forms of some datatypes, it is not a syntactic sugar.}
    sent: "2016-12-15T14:10:01.243Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852a3e6c895451b75dc4395"
    text: {@dockimbel hm, ok, but is there any reason why `'` can't do the same?}
    sent: "2016-12-15T14:08:38.763Z"
    editedAt: "2016-12-15T14:08:47.789Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852a3a7af6b364a29b73dc2"
    text: {@maximvl ^/> since `quote` is `'` I would expect it to work on all literals^/^/It is not. See `source quote`.}
    sent: "2016-12-15T14:07:35.451Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "585297ddaf6b364a29b6f67e"
    text: {my arguments towards change:^/* you can use it with all literal values in same way you use it for lit-words^/* `quote` and `'` will be synonyms }
    sent: "2016-12-15T13:17:17.628Z"
    editedAt: "2016-12-15T13:17:46.854Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529728058ca967374d426a"
    text: {I’m not saying you can’t, I am just describing how it is now :)}
    sent: "2016-12-15T13:14:16.298Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585296f20730ce6937cac297"
    text: {@rebolek but these things don't intersect - you can still have only lit words and `'` working on other values}
    sent: "2016-12-15T13:13:22.732Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852963ec895451b75dbeb50"
    text: {In Rebol&Red, `lit-word!` is a datatype and no other types than words have literal representation.}
    sent: "2016-12-15T13:10:22.433Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585295f8af6b364a29b6ec24"
    text: "so both are the same, it's just a shortcut"
    sent: "2016-12-15T13:09:12.431Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585295e6c5a4e0233b8a6071"
    text: {in common lisps `'` is a reader-macro which transforms `'thing` into `(quote thing)`}
    sent: "2016-12-15T13:08:54.243Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585295b8c5a4e0233b8a6003"
    text: {okey, this is something I'd like @dockimbel to comment on}
    sent: "2016-12-15T13:08:08.669Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529597e7bdfe4e29594fc7"
    text: {You may argue that it should be, but that’s different thing.}
    sent: "2016-12-15T13:07:35.445Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5852957faf6b364a29b6e9d0"
    text: {`'` denotes `lit-word!`. It is not some universal syntactic sugar.}
    sent: "2016-12-15T13:07:11.260Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5852954e058ca967374d370c"
    text: "this is exactly what `quote` returns"
    sent: "2016-12-15T13:06:22.011Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852953dc5a4e0233b8a5e04"
    text: "if it does - literal value of `1` is `1`"
    sent: "2016-12-15T13:06:05.012Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529531589f411830e9bb38"
    text: {@rebolek doesn't it return literal value of argument?}
    sent: "2016-12-15T13:05:53.101Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585294d40730ce6937cab799"
    text: {since `quote` is `'` I would expect it to work on all literals}
    sent: "2016-12-15T13:04:20.809Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585294d0c895451b75dbe425"
    text: {@maximvl it’s not a bug, it’s more a limitation of Red’s type system. `lit-` is not universal, there are only `lit-word!`s.}
    sent: "2016-12-15T13:04:16.853Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585294a0fb22792b3b68ab39"
    text: {```^/red>> '1^/*** Syntax Error: invalid value at "'1"^/*** Where: do^/red>> quote 1^/== 1^/```}
    sent: "2016-12-15T13:03:28.356Z"
    editedAt: "2016-12-15T13:03:45.148Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529493c895451b75dbe319"
    text: {@maximvl hmm, this is more interesting. Here it probably should print "after a" twice.}
    sent: "2016-12-15T13:03:15.096Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58529491af6b364a29b6e5f1"
    text: {```^/red>> (quote a) = 'a^/== true^/```}
    sent: "2016-12-15T13:03:13.070Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529489fb22792b3b68aa7b"
    text: "this is not a solution, I would say it's a bug"
    sent: "2016-12-15T13:03:05.426Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585294750730ce6937cab54b"
    text: "@xqlab thanks, much easier solution :)"
    sent: "2016-12-15T13:02:45.346Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58529452fb22792b3b68a979"
    text: "red>> parse [1] [quote 1]^/== true^/"
    sent: "2016-12-15T13:02:10.233Z"
    editedAt: "2016-12-15T13:02:43.040Z"
    v: 2
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "585293ddc895451b75dbdf54"
    text: "oh, sorry, my bad. `s:` stores, `:s` resumes"
    sent: "2016-12-15T13:00:13.799Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585293daaf6b364a29b6e2e8"
    text: {@rebolek ok, then why doesn't this one work?^/```^/red>> parse [a 1] [2 [s: 'a (print "after a") [number! :s |]]]^/after a^/== false^/```}
    sent: "2016-12-15T13:00:10.112Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585293ab0730ce6937cab01c"
    text: {```^/red>> parse [1 2 3 4] [skip p: (print first p)]^/2^/```}
    sent: "2016-12-15T12:59:23.734Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58529399c5a4e0233b8a5513"
    text: {>:word : resume input at the position referenced by the word.}
    sent: "2016-12-15T12:59:05.761Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5852937d0730ce6937caaefd"
    text: {so you rewind the source with `s:`, but not the rules}
    sent: "2016-12-15T12:58:37.475Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58529376c5a4e0233b8a53e6"
    text: "em what"
    sent: "2016-12-15T12:58:30.285Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585293610730ce6937caae7d"
    text: "`:s` stores position in *source*, not in *rules*"
    sent: "2016-12-15T12:58:09.618Z"
    editedAt: "2016-12-15T12:58:17.633Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58529345589f411830e9b0a9"
    text: "@rebolek isn't `:s` a reason?"
    sent: "2016-12-15T12:57:41.352Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529322fb22792b3b68a2d9"
    text: {@maximvl why should it run twice? there is no reason to go back.}
    sent: "2016-12-15T12:57:06.039Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585292f6e7bdfe4e29593f28"
    text: "@maximvl this is one way to match integer value"
    sent: "2016-12-15T12:56:22.799Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585292e00730ce6937caabcd"
    text: {```^/red>> parse [1] [set n number! if (n = 1)]^/== true^/red>> parse [2] [set n number! if (n = 1)]^/== false^/```}
    sent: "2016-12-15T12:56:00.222Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585292b10730ce6937caaabc"
    text: {@rebolek okey, what about last example, why shouldn't it run twice?}
    sent: "2016-12-15T12:55:13.623Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585292a0058ca967374d2a39"
    text: {well, literal integer is what I would expect to work, but it just breaks the parser}
    sent: "2016-12-15T12:54:56.887Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529282e7bdfe4e29593ced"
    text: {As I said, integer in rules is count. You probably can’t have both}
    sent: "2016-12-15T12:54:26.422Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58529229fb22792b3b689c37"
    text: "is there a reason for that?"
    sent: "2016-12-15T12:52:57.434Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529225058ca967374d289d"
    text: "em"
    sent: "2016-12-15T12:52:53.563Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529219058ca967374d2857"
    text: {@maximvl in block parsing no, at least not directly}
    sent: "2016-12-15T12:52:41.321Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585291fbc5a4e0233b8a4a47"
    text: {@rebolek so `parse` can match literals but not numbers?}
    sent: "2016-12-15T12:52:11.487Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585291f9c5a4e0233b8a4a43"
    text: {1) integer in rules is count, 2) there’s no lit-integer, 3) it can’t run twice}
    sent: "2016-12-15T12:52:09.400Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585291be0730ce6937caa402"
    text: {@maximvl I think this result is expected. I haven’t tried to run the examples.}
    sent: "2016-12-15T12:51:10.558Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5852918ee7bdfe4e2959367e"
    text: {@rebolek do you mean this result is expected or you have different results on your machine?}
    sent: "2016-12-15T12:50:22.133Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58529139058ca967374d2399"
    text: {It looks to me that all three examples are working fine.}
    sent: "2016-12-15T12:48:57.772Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585282b2c5a4e0233b89eed2"
    text: "I would expect last one to print twice"
    sent: "2016-12-15T11:46:58.381Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585282aafb22792b3b68352a"
    text: {```^/red>> parse [a 1] [s: 'a (print "after a") [number! :s |]]^/after a^/== false^/```}
    sent: "2016-12-15T11:46:50.161Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58528276058ca967374ccfa3"
    text: {```^/red>> parse [1] [1]^/*** Script Error: PARSE - invalid rule or usage of rule: 1^/*** Where: parse^/red>> parse [1] ['1]^/*** Syntax Error: missing #"]" at "1] ['1]"^/*** Where: do^/```}
    sent: "2016-12-15T11:45:58.043Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58528265fb22792b3b683336"
    text: "I think something is wrong with parse"
    sent: "2016-12-15T11:45:41.761Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5851d8d0c5a4e0233b86c09a"
    text: {@meijeru This one: https://github.com/red/red/commit/1aaa7087fe2ae4770a5014f8e5b83a017482697f}
    sent: "2016-12-14T23:42:08.309Z"
    editedAt: "2016-12-14T23:42:29.267Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58518568c5a4e0233b84a1c8"
    text: {@dockimbel great ! I will update %draw.reds later.}
    sent: "2016-12-14T17:46:16.207Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58517fa9af6b364a29b12584"
    text: {@Zamlox I have fixed the conflicting trigonometric functions names in R/S, so the `system/words/` prefix should not be needed anymore in `%draw.reds`.}
    sent: "2016-12-14T17:21:45.034Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5851654ec895451b75d531fd"
    text: "@qtxie ^^---"
    sent: "2016-12-14T15:29:18.179Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "585143a3589f411830e236e9"
    text: {Am I mistaken, or has that fix not come through? I see it nowhere.}
    sent: "2016-12-14T13:05:39.487Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58510a06db9cafe91838fab0"
    text: "@endo64 I have pushed a fix, should be fixed now."
    sent: "2016-12-14T08:59:50.157Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "585109f8be9d43bc635bd31f"
    text: "Same error if `color` is `none`"
    sent: "2016-12-14T08:59:36.088Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585109d97a58ca60554ef968"
    text: {@qtxie Error happens on Win10 x64,  it works on Win8.1 x64.}
    sent: "2016-12-14T08:59:05.899Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5850aedfaeb490080487a164"
    text: "@geekyi @endo64 Thanks. I'll push a fix soon."
    sent: "2016-12-14T02:30:55.511Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5850860e28d755bf1400a669"
    text: "@endo64  @qtxie can reproduce on win 10 64bit"
    sent: "2016-12-13T23:36:46.865Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585082497a58ca60554c3a3e"
    text: {It's working fine on my Win7 64bit in gui-console.}
    sent: "2016-12-13T23:20:41.709Z"
    editedAt: "2016-12-13T23:21:51.029Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5850822528d755bf140088ee"
    text: "@endo64 Which version of Windows are you using?"
    sent: "2016-12-13T23:20:05.736Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "585071230da034021ba7193e"
    text: {I think it is about transparency:^/```^/view [^/^-base 255.0.0.50 ; CreateWindowEx failed!^/^-base 255.0.0  ; no error^/]^/```}
    sent: "2016-12-13T22:07:31.008Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58506fac0da034021ba71046"
    text: {@dockimbel @qtxie I think latest build breaks something on GUI side,^/This was working just before I build the latest version:^/```^/p: reduce [^/^-make face! [^/^-^-type: 'base^/^-^-size: 96x40^/^-^-offset: 0x0^/^-]^/]^/win: layout [^/^-button "test"^/]^/append win/pane p^/view win^/```^/Now it gets `*** View Error: CreateWindowEx failed!` ^/`test\vid.red`  also gives the same error.}
    sent: "2016-12-13T22:01:16.209Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58506a11b4ffd59e3824ff04"
    text: {> @endo64 Do you have a way to reproduce this issue?^/^/@qtxie I encapped the latest version and `do %test.red` doesn't give access error anymore.}
    sent: "2016-12-13T21:37:21.322Z"
    editedAt: "2016-12-13T21:37:30.072Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58504aed0da034021ba620eb"
    text: "nice achievment !"
    sent: "2016-12-13T19:24:29.038Z"
    v: 1
    author: "56dee5f5e610378809c59dd0"
) #(
    id: "58504188bb7d528222f3d98d"
    text: ":clap:"
    sent: "2016-12-13T18:44:24.076Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "585026e87a58ca6055499878"
    text: "Go Team Red!"
    sent: "2016-12-13T16:50:48.461Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "584ff635be9d43bc63553bd7"
    text: "Great work!"
    sent: "2016-12-13T13:23:01.026Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "584ff1e228d755bf14fcc73d"
    text: {@dockimbel Thanks! Nice to see `red` embedded in C executable. }
    sent: "2016-12-13T13:04:34.439Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
)#(
    id: "584ff0e6b4ffd59e3821ba37"
    text: {@rcqls View on Mac is a work in progress on a separate branch. We should upgrade that branch with the latest changes in master in the next days.}
    sent: "2016-12-13T13:00:22.806Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584ff08bb4ffd59e3821b847"
    text: {@dockimbel The example above with `VID/View` code  is it supposed to work on macOS too? I managed to compile a simple `print` but  not the above example as is (even though it compiles).}
    sent: "2016-12-13T12:58:51.474Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "584febfc7a58ca605547bd52"
    text: "Oops, right `libRed.red`, not `libRed.r`. ;-)"
    sent: "2016-12-13T12:39:24.096Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584febc7b4ffd59e38219e0d"
    text: {@dockimbel Nice :+1: ! You meant `rebol -s red.r -r libRed/libRed.red` instead of  `rebol -s red.r -r libRed/libRed.r`.}
    sent: "2016-12-13T12:38:31.667Z"
    editedAt: "2016-12-13T12:41:14.461Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "584fe212b4ffd59e38216943"
    text: {When using `red build libRed`, it will extract locally the `libRed/` folder for you.}
    sent: "2016-12-13T11:57:06.872Z"
    editedAt: "2016-12-13T11:57:08.585Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584fe1edb4ffd59e382168e8"
    text: "ok"
    sent: "2016-12-13T11:56:29.527Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "584fe1d7b4ffd59e38216865"
    text: {`libRed/` folder. It's missing some entries though.}
    sent: "2016-12-13T11:56:07.046Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584fe1a20da034021ba38b47"
    text: {where is located "red.h" ?}
    sent: "2016-12-13T11:55:14.171Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "584fe175aeb490080481ef88"
    text: "nice work :+1: "
    sent: "2016-12-13T11:54:29.944Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "584fe1729750c95b4f8ad2b9"
    text: ":clap: "
    sent: "2016-12-13T11:54:26.347Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fe14d0da034021ba38876"
    text: {You can use VID/View from it too (e.g. using C):^/```c^/#include "red.h"^/^/int main() {^/    redOpen();^/    redDo("view [text 24 {Hello from libRed!}]");^/    redClose();^/    return(0);^/}^/```}
    sent: "2016-12-13T11:53:49.145Z"
    editedAt: "2016-12-13T11:53:52.829Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584fe0aabb7d528222f13a13"
    text: "It has been tested on the 3 big platforms."
    sent: "2016-12-13T11:51:06.940Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584fe07eb4ffd59e3821619d"
    text: "The API documentation and demos should come soon."
    sent: "2016-12-13T11:50:22.446Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584fe05eaeb490080481e915"
    text: {To build it from sources:^/```lisp^/rebol -s red.r -r libRed/libRed.r^/```}
    sent: "2016-12-13T11:49:50.663Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584fe02e28d755bf14fc64ac"
    text: {FYI, libRed branch has just been merged with master. The API still needs some little extra work, though, it is already usable. You can build libRed using:^/```lisp^/red build libRed^/```^/And you can have a look at this [test file](https://github.com/red/red/blob/master/tests/libRed-test.c) for the API (it is a *test* file, not a *demo*).}
    sent: "2016-12-13T11:49:02.223Z"
    editedAt: "2016-12-13T11:50:39.953Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584f9ebb0da034021ba2469d"
    text: {I think #2156 is the same issue. I just tested on my work PC (Win8 x64) it worked. But at home (Win10 x64) it did not. I'll check tonight.}
    sent: "2016-12-13T07:09:47.036Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "584f51b69ce5147013cd7e63"
    text: {@endo64 Do you have a way to reproduce this issue?}
    sent: "2016-12-13T01:41:10.979Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "584f48caaeb49008047ec6b1"
    text: "@endo64 #2156 ?"
    sent: "2016-12-13T01:03:06.632Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584f21dcf666c5a13804b71a"
    text: {Is this a regression?^/```^/red>> do %test.red^/*** Access Error: cannot open: %/C/red/build/bin/test.red/^/```^/There is a `test.red` file and it works by `red.exe test.red` but not with `do`.^/Please note that there is a trailing slash at the end.}
    sent: "2016-12-12T22:17:00.446Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "584875e40da034021b804192"
    text: " As far as I know, Kaj lives in Amersfoort"
    sent: "2016-12-07T20:49:40.558Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "584851220da034021b7f475d"
    text: "@btiffin hi, it's good to hear from you again :-)"
    sent: "2016-12-07T18:12:50.125Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5847f30228d755bf14d5dfba"
    text: {@maximvl Lucky you. ;-) Kaj lives about an hour from Amsterdam. I went once at the [CWI](https://www.cwi.nl/) in Amsterdam to make a Red presentation a few years ago.}
    sent: "2016-12-07T11:31:14.843Z"
    editedAt: "2016-12-07T11:34:31.918Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5847ef711eb3d6486969e7e0"
    text: {I never heard of Syllable OS, so more interesting stuff to read and learn}
    sent: "2016-12-07T11:16:01.995Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5847ef1f1eb3d6486969e54f"
    text: {@dockimbel oh nice, since I moved to Amsterdam recently it would be nice to meet with you guys here :)}
    sent: "2016-12-07T11:14:39.359Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5847ee4644f3e83528ecf88c"
    text: {@maximvl Good guess. I went to visit him a few times there, mostly attending conferences.}
    sent: "2016-12-07T11:11:02.295Z"
    editedAt: "2016-12-07T11:11:58.272Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5847ee376b32e87049999dca"
    text: "Not since more than a year."
    sent: "2016-12-07T11:10:47.742Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5847ee34be9d43bc632bfbb6"
    text: {his name sounds Dutch, I wonder if he lives in the Netherlands}
    sent: "2016-12-07T11:10:44.763Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5847ee1744f3e83528ecf6ff"
    text: {@dockimbel are you still in contact with Kaj? He somehow disappeared even from AltME?}
    sent: "2016-12-07T11:10:15.630Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5847ed506b32e87049999806"
    text: {@geekyi You might be interested to know that SyllableOS maintainer is Kaj de Vos, who contributed a lot to Red a few years ago (most of the low-level bindings on our Contribution page are his work). ;-)}
    sent: "2016-12-07T11:06:56.426Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5847e5861eb3d6486969ab2f"
    text: {Amazing how a few years ago  we had functional OSes of just a few KBs}
    sent: "2016-12-07T10:33:42.172Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5847e503be9d43bc632bcec9"
    text: {Just found this today: http://www.qemu-advent-calendar.org/2016/ ^/For the second day, there is syllable OS, it is a rebol based Operating System^/*tldr;* a list of lightweight qemu images to try on everyday of december^/Qemu is a pretty lightweight (~34mb on windows) cross-platform virtualization engine^/}
    sent: "2016-12-07T10:31:31.328Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5847d84128d755bf14d555be"
    text: {@btiffin A Tardis it is ("bigger on the inside"), we should expose an API for the time-travelling engine soon. ;-)}
    sent: "2016-12-07T09:37:05.730Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5847c2b4bc32453c289f69cc"
    text: {Nicely defended.  Haters can hate on, and the love will just keep giving.  Ah, the love.  :-)^/^/Especially once we can LOAD/ALL ;-)  Word smiths and non-techies will love a block/set/quick'n'easy data muncher  that pops out that one magic tally while they sit at a console pondering the fate of humanity and where the cheapest house is.  Then giggle with a "take that programmers, see what I just did done".^/^/Always a pleasure to see the new blog entries, @dockimbel, and still amazed at what is being packed in the box.  Hmm, it is even a box?  More like a tardis.^/^/And hey @greggirwin, always nice to read your level headed sanity coming from the intertubes.^/^/Have good, make well.}
    sent: "2016-12-07T08:05:08.917Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "5847b2971eb3d6486968836f"
    text: {@greggirwin Too late ;-) I wrote a couple of replies to, at least, debunk some false statements made about Red and avoid them propagating. It's funny how some people looking at Red from 10'000 ft, not even participating, think they have a strong and definitive understanding.}
    sent: "2016-12-07T06:56:23.540Z"
    editedAt: "2016-12-07T07:05:41.313Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5847b1a2f666c5a138dec542"
    text: "@btiffin Hi Brian, nice to see you around!"
    sent: "2016-12-07T06:52:18.639Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5847adf56b32e87049982c6b"
    text: {Hey Brian! Probably best to let sleeping dogs lie there at this point. At least I doubt it would be constructive.}
    sent: "2016-12-07T06:36:37.540Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58472fe0f666c5a138dc5e4a"
    text: {Hello all, and congrats @dockimbel and @qtxie on the new 6.1 master.  Works the beauty. ^/^/I don't have a Reddit account, but just read through the latest.  Can someone go on there and rebut (perhaps refute) the complaints by dlyund that self hosted Red bootstrapping is taking too long so there must be problems, "Ours took one dev a week to cook up the pudding".  Someone asks to see it.  "Oh, we'll do a public release in a year or two, the pudding isn't ready yet".  Me thinks there are ulterior motives to the complaint.}
    sent: "2016-12-06T21:38:40.880Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "5846dd626b32e8704993995a"
    text: {We got on HackerNews now, please upvote ;-) https://news.ycombinator.com/item?id=13113646}
    sent: "2016-12-06T15:46:42.765Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5845917a0da034021b6fd693"
    text: {Thanks for reporting that @ifgem, I had seen the same thing.}
    sent: "2016-12-05T16:10:34.166Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58458c68b4ffd59e38eaef39"
    text: "@ifgem Pushed a fix. "
    sent: "2016-12-05T15:48:56.952Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584582091eb3d648695bb3d9"
    text: "@ifgem Looking at it..."
    sent: "2016-12-05T15:04:41.625Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5845712f0da034021b6ef5ee"
    text: {@PeterWAWood thx man - this is hard stuff; lets see if I could deal with that}
    sent: "2016-12-05T13:52:47.111Z"
    v: 1
    author: "584540aed73408ce4f3acd47"
) #(
    id: "58456cdbf666c5a138d1911f"
    text: {@HeinzSchmitt12_twitter Try [Computer Vision with Red](https://github.com/ldci/redCV)}
    sent: "2016-12-05T13:34:19.223Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5845665e0da034021b6eb170"
    text: {@rebolek  Where can I find the documentation for such image processing stuff?}
    sent: "2016-12-05T13:06:38.221Z"
    v: 1
    author: "584540aed73408ce4f3acd47"
) #(
    id: "58455cf00da034021b6e78f2"
    text: {@dockimbel why doesn't it work? Is it a bug?^/```^/last-pos: none^/^/parse-trace: func [^/    {Wrapper for parse/trace using the default event processor} ^/    input [series!] ^/    rules [block!] ^/    return: [logic! block!]^/][^/    last-pos: input^/    parse/trace input rules :on-parse-event^/]^/^/on-parse-event: func [^/    event [word!] {Trace events: push, pop, fetch, match, iterate, paren, end} ^/    match? [logic!] "Result of last matching operation" ^/    rule [block!] "Current rule at current position" ^/    input [series!] "Input series at next position to match" ^/    stack [block!] "Internal parse rules stack" ^/    return: [logic!] {TRUE: continue parsing, FALSE: stop and exit parsing}^/][^/    if event = 'match [^/        either match? [^/            print copy/part last-pos input^/        ][^/            print "todo:)"^/        ]^/    ]^/    true^/]^/^/parse-trace "wow" ["wow"]^/*** Script Error: invalid type specifier: [event [word!] match? [logic!] rule [block!] input [series!] stack [block!] return: [logic!]]^/*** Where: parse^/^/on: func [e m r i s] []^/parse/trace "wow" ["wow"] :on^/*** Script Error: invalid type specifier: [event [word!] match? [logic!] rule [block!] input [series!] stack [block!] return: [logic!]]^/*** Where: parse^/```}
    sent: "2016-12-05T12:26:24.916Z"
    editedAt: "2016-12-05T12:36:05.871Z"
    v: 4
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5845453b0da034021b6dfa78"
    text: "@maximvl Thanks, it should be default."
    sent: "2016-12-05T10:45:15.534Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584544bef666c5a138d09956"
    text: "@rebolek it is collapsible at least"
    sent: "2016-12-05T10:43:10.471Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5845429a1eb3d648695a1e35"
    text: {@HeinzSchmitt12_twitter see Francois Jouen work: https://twitter.com/fjephe}
    sent: "2016-12-05T10:34:02.683Z"
    collapsed: true
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5845413f1eb3d648695a1781"
    text: {Question: I want to do image processing for medical images (quality assurance stuff) - using regions, Pixel calculations, profiles, histograms ....; how far can I use red for this (or use rebol2 or 3 instead?)? - BR Heinz}
    sent: "2016-12-05T10:28:15.779Z"
    editedAt: "2016-12-05T10:32:37.368Z"
    v: 3
    author: "584540aed73408ce4f3acd47"
) #(
    id: "5845200e03554185047a228b"
    text: {There are two limitations in current implementation (Using COM to interop with .NET), it cannot create delegate and cannot use enum (Maybe it's possible, just I don't figure it out). The advantage is it's not rely on third party libraries.^/^/A fully functional brigde need to use VC++ in /clr mode, create a DLL to expose the native functions we need, like [this one](https://github.com/wnxd/UseDotNet/tree/master/UseDotNet). This DLL is mixed with native code and CIL (.NET bytecode), so maybe it can be used to bind with .NET Core (even on Linux, Mac).^/^/Using this DLL we can easily create any .NET datatypes from Red side, using libRed, .NET can create red values, so we can make the bridge completed.}
    sent: "2016-12-05T08:06:38.904Z"
    editedAt: "2016-12-05T08:10:36.294Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
)#(
    id: "58451d889ce5147013cc3a46"
    text: {@dockimbel in your macros post, it might be worth making a little note when using `maximum-of` that this won't run in the interpreter. You do mention what functions can be used there, lower down, but for people who aren't too familiar with the environment and attempt to paste into the console, it might not be clear why the sample macro you give doesn't find the `maximum-of` function. Putting a note that, as is, it won't run in the interpreter right by the example would help.}
    sent: "2016-12-05T07:55:52.655Z"
    editedAt: "2016-12-05T07:57:04.230Z"
    v: 2
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58451776b4ffd59e38e7fd7f"
    text: {Actually, this bridge uses Red as master and .Net as slave. For a real integration with existing .Net-based applications, you would want the converse, so .Net as master, loading libRed.}
    sent: "2016-12-05T07:29:58.939Z"
    editedAt: "2016-12-05T07:30:58.011Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584515a1b4ffd59e38e7f64d"
    text: {Well, a toy project ... might be useful for interfacing in corporate environments, so maybe we are talking enterprise rather than toy :-)}
    sent: "2016-12-05T07:22:09.346Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5845156044f3e83528dc3075"
    text: "@x8x I see."
    sent: "2016-12-05T07:21:04.817Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584511f70da034021b6ce027"
    text: {It's a toy project of @qtxie ;-) The demo code loads a .Net SVG library, then call it to load/convert a SVG file to XAML, then uses WPF to display it.}
    sent: "2016-12-05T07:06:31.403Z"
    editedAt: "2016-12-05T07:08:20.389Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584510f290f847041bfc40d3"
    text: {Thanks, sounds cool! Did not expect it come before 1.0, so nice surprise :-)}
    sent: "2016-12-05T07:02:10.996Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "584510a01eb3d6486959000c"
    text: {It's a pretty advanced prototype, you can instantiate objects, call methods (including static ones) and get/set properties.}
    sent: "2016-12-05T07:00:48.865Z"
    editedAt: "2016-12-05T07:01:30.846Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584508ac90f847041bfc1d87"
    text: "Red .NET bridge! Bravo!"
    sent: "2016-12-05T06:26:52.632Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "584507871eb3d6486958d57c"
    text: {@dockimbel @qtxie - surprised by the Prototype .NET bridge.  Is that going to be the same level as JAVA one, allowing to instantiate objects, call methods, etc? Or just some simplified one, to allow specific functionality?}
    sent: "2016-12-05T06:21:59.211Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5844e6ee9ce5147013cc370e"
    text: "@maximvl Yes. It's a bug. Please report it."
    sent: "2016-12-05T04:02:54.142Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5844db966b32e87049883e13"
    text: {@maximvl ask @qtxie if it's worth reporting or if we're just not clear on the behavior.}
    sent: "2016-12-05T03:14:30.460Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5844b8dfb4ffd59e38e67032"
    text: {@x8x^/```lisp^/pick [1 2] to logic! none^/```}
    sent: "2016-12-05T00:46:23.970Z"
    editedAt: "2016-12-05T00:46:28.697Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5844b8a41eb3d64869578bec"
    text: {@x8x That is part of the internal Red runtime library API, those are low-level helper functions for compiled Red code.}
    sent: "2016-12-05T00:45:24.041Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5844b83eb4ffd59e38e66cb6"
    text: "@Skrylar Hahaha, hopefully for the best. ;-)"
    sent: "2016-12-05T00:43:42.532Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5844acb0f666c5a138cdbf2b"
    text: "Also curious about `save/all`, Thanks!"
    sent: "2016-12-04T23:54:24.627Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5844ac7f44f3e83528da62ab"
    text: {@dockimbel Just curious if `date!` datatype is planned somewhere in the near future :-)}
    sent: "2016-12-04T23:53:35.075Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5844aa4fbc32453c288e2bc9"
    text: {@rebolek ^/```^/  pick [1 2] none^/*** Script Error: pick does not allow none! for its index argument^/*** Where: pick^/  pick [1 2] true? none^/  ;   2^/```}
    sent: "2016-12-04T23:44:15.040Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58448c8ff666c5a138cd20f7"
    text: {The simplified one doesn't need any real logic, it just has to show an example of how the dialect works. So the editor can read it and go "Oh, let me suggest these verbs for you." kind of thing}
    sent: "2016-12-04T21:37:19.883Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58448c2c6b32e8704986b3ec"
    text: {Then you'd just have a simplified peg (red's parse could handle that i'm sure) that someone who writes a dialect supplies}
    sent: "2016-12-04T21:35:40.335Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58448c0a6b32e8704986b363"
    text: {My guess is you would need a customized editor engine to run Red properly. Probably something like LPeg (Lua's PEG parser) with the ability to insert arbitrary sidechains. Like TextMate (and derivatives) understand scope, so they do understand the concept of "this block begins a new dialect." So you'd need something like that, and not the old stuff (vim/emacs are great but their regular ex. based lexers are insufficient for some of the truly crazy things)}
    sent: "2016-12-04T21:35:06.094Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58448b35bc32453c288d89c5"
    text: {TextMate doesn't run an interpreter IIRC so you can't really hook it like that.}
    sent: "2016-12-04T21:31:33.875Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58448b2744f3e83528d9b3db"
    text: {@x8x I'm only aware of a scarce few text editors that can integrate with libraries. Textadept and Sublime can, although that's by abusing their scripting languages.}
    sent: "2016-12-04T21:31:19.946Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58448a996b32e8704986ab83"
    text: {@dockimbel you madman you actually did it. you made macros :o}
    sent: "2016-12-04T21:28:57.278Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58446b680da034021b69e61b"
    text: {@x8x Do they have to be? I se no need for them. `if something [...]`and `unless something [...]` is enough IMO.}
    sent: "2016-12-04T19:15:52.798Z"
    editedAt: "2016-12-04T19:16:08.901Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584462d91eb3d6486955d885"
    text: {are `true?` and `false?` supposed to be part of core? I can see them in `%libRedRT-include.red`:^/```^/logic: context [^/        #import [libRedRT-file stdcall [^/                false?: "red/logic/false?" [return: [logic!]] ^/                true?: "red/logic/true?" [return: [logic!]] ^/                push: "red/logic/push" [value [logic!] return: [red-logic!]] ^/                get: "red/logic/get" [value [cell!] return: [logic!]] ^/                box: "red/logic/box" [value [logic!] return: [red-logic!]]^/            ]]^/    ]^/```}
    sent: "2016-12-04T18:39:21.561Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "584455f4f666c5a138cc0656"
    text: "@greggirwin should I report it?"
    sent: "2016-12-04T17:44:20.344Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584453071eb3d64869557a5d"
    text: {@maximvl That might be a bug. The face refreshes, but always draws the changed data into the first slow.}
    sent: "2016-12-04T17:31:51.614Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5844449a90f847041bf89553"
    text: {@geekyi CLI vs GUI: it also changes a few low-level features, like where the standard output should be sent to. `MSDOS` target + View module is fine, as it redirects all output to the DOS shell, which can be very useful.}
    sent: "2016-12-04T16:30:18.927Z"
    editedAt: "2016-12-04T16:32:20.340Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58440fe21eb3d64869542b8f"
    text: "Probably overthinking this.."
    sent: "2016-12-04T12:45:22.744Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58440fa70da034021b6829fb"
    text: {I'm thinking what if the user provides `Needs View` in header; and then specifies `-t msdos`. Should probably error out as well (instead of going the route of not including View module then)}
    sent: "2016-12-04T12:44:23.941Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58440f2544f3e83528d7369f"
    text: {The only distinction right now between CLI vs GUI is inclusion of VIew engine, right?}
    sent: "2016-12-04T12:42:13.748Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58440da5b4ffd59e38e2dbba"
    text: {I think the best way for now is to show an error. Fail fast than do automagic correction}
    sent: "2016-12-04T12:35:49.121Z"
    editedAt: "2016-12-04T12:36:31.541Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58440d0290f847041bf7939c"
    text: {We'll have such distinct CLI vs GUI targets for all platforms where it makes sense (OSX, Android,...), but not Linux. OSX: `darwin/macOS` (CLI vs bundled app), Android: `android/APK`.}
    sent: "2016-12-04T12:33:06.735Z"
    editedAt: "2016-12-04T12:35:33.313Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58440c711eb3d64869541d4c"
    text: {Ah, I see. There is no such distinction in OSX, Android and Linux, so I wasn't getting the error there}
    sent: "2016-12-04T12:30:41.642Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58440beabc32453c288af23e"
    text: {@geekyi The cause is the missing View module declaration in the header, when compiling to a non-console target like `Windows`. We could force the View module in for such targets, if the user doesn't provide it, or just output a relevant error message.}
    sent: "2016-12-04T12:28:26.169Z"
    editedAt: "2016-12-04T12:28:52.715Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58440837bc32453c288ae0bb"
    text: "(Omitting `-t` compiles to msdos by default tho)"
    sent: "2016-12-04T12:12:39.472Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58440819b4ffd59e38e2bc38"
    text: {Actually omitting `-t` works, it only fails on `-t Windows`. Cross compiling to anything else works}
    sent: "2016-12-04T12:12:09.662Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5844070b90f847041bf7775c"
    text: {Same platform, windows 10 64-bit. `-t msdos` works @dockimbel }
    sent: "2016-12-04T12:07:39.812Z"
    editedAt: "2016-12-04T12:10:20.960Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "584406d144f3e83528d70b3c"
    text: {@geekyi Is *compiling* failing or *cross-compiling*? If the latter, what is the host platform?}
    sent: "2016-12-04T12:06:41.369Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5843f40a44f3e83528d6b093"
    text: {What's the best way to do a `git bisect` of red source?}
    sent: "2016-12-04T10:46:34.451Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5843ec200da034021b6797b0"
    text: {MAybe a problem with https://github.com/red/red/commit/3175be554e4901234f49d1f817ed8e406937b582 ?}
    sent: "2016-12-04T10:12:48.975Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5843eb470da034021b6794cb"
    text: "Tried with and without `-r`, `-u`"
    sent: "2016-12-04T10:09:11.762Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5843eb1d44f3e83528d68dad"
    text: {```^/>> do/args %red.r "-r -t Windows %tests/hello.red"^/[...]^/^/Target: Windows^/^/Compiling to native code...^/*** Compilation Error: invalid #call function name: face?^/*** in file: %/C/Users/HM/Documents/GitHub/red/red/tests/hello.red^/*** near: []^/```}
    sent: "2016-12-04T10:08:29.712Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5843ead244f3e83528d68b85"
    text: {Trying to compile a program for windows fails for me right now with latest source and last prebuilt binary. Cross compiling to Darwin or Android works}
    sent: "2016-12-04T10:07:14.240Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5843dc9490f847041bf6c10a"
    text: {@greggirwin I think it should be `lowercase list/data/(list/selected)`, however it always changes first element for me}
    sent: "2016-12-04T09:06:28.659Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5843737e6b32e8704981ab72"
    text: {From View docs: https://doc.red-lang.org/gui/View.html^/```^/view [^/    list: text-list data ["John" "Bob" "Alice"]^/    button "Add" [append list/data "Sue"]^/    button "Change" [lowercase list/data/1]^/]^/```}
    sent: "2016-12-04T01:38:06.417Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58435e146b32e870498154ef"
    text: {The 3rd example on this link is a todo app - http://re-bol.com/short_rebol_examples.r}
    sent: "2016-12-04T00:06:44.223Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58435ddc6b32e870498153c8"
    text: {I thought I saw one, but I didnt think it could be that short}
    sent: "2016-12-04T00:05:48.084Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58435dd06b32e87049815384"
    text: {Hello, is there a short version of ToDoMVC in Red?}
    sent: "2016-12-04T00:05:36.979Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58435bc990f847041bf4baf9"
    text: "Might be still incomplete"
    sent: "2016-12-03T23:56:57.823Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "58435ba61eb3d64869513078"
    text: {@gearss .apk support is in another branch.. which I've not personally tried yet}
    sent: "2016-12-03T23:56:22.733Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5843542790f847041bf499e4"
    text: {is there an *.apk that can install Red on android phone? so that user can double-click a *.red file to run it.}
    sent: "2016-12-03T23:24:23.720Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "58432cd2bc32453c28872b60"
    text: {upvoted, it is pretty high (5th position right here, right now)}
    sent: "2016-12-03T20:36:34.307Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5842f1b5035541850479f6a1"
    text: {I just like to complain about it because of the confusion with the mathematical definition of a function}
    sent: "2016-12-03T16:24:21.107Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5842f0acb4ffd59e38dde86f"
    text: {About the terminology, in programming languages, "procedure" usually designates a routine which does not return a value, while "function" does return one.  See [those](http://stackoverflow.com/questions/721090/what-is-the-difference-between-a-function-and-a-procedure) [links](http://softwareengineering.stackexchange.com/questions/20909/method-vs-function-vs-procedure). In Redbol, all routines return a value (even if it an unset!), so the "function" word usage fits it.}
    sent: "2016-12-03T16:19:56.607Z"
    editedAt: "2016-12-03T16:21:59.450Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5842efc01eb3d648694f16ef"
    text: {@JacobGood1 Thank you for your help, much appreciated.}
    sent: "2016-12-03T16:16:00.218Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5842ddf47e2af9d12299e2ea"
    text: {proc [] []^/if anyone likes rpgs this is an exciting idea =)}
    sent: "2016-12-03T15:00:04.502Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5842dcc29ce5147013cc0e0c"
    text: {I would actually prefer that red/rebol funcs be called procs, short for procedure, because I am tired of people using the mathematical name in place of procedures/routines}
    sent: "2016-12-03T14:54:58.359Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5842db619750c95b4f894b0b"
    text: {made some comments and up voted, I tried to reply to the language comparison question, I hope I correctly interpreted the essence of red}
    sent: "2016-12-03T14:49:05.296Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5842950d0da034021b61b6a9"
    text: {I've posted on Reddit, please upvote: https://www.reddit.com/r/programming/comments/5g8wg9/macros_the_red_language_way/}
    sent: "2016-12-03T09:49:01.339Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5842452044f3e83528cf3625"
    text: "@JacobGood1 Indeed. ;-)"
    sent: "2016-12-03T04:08:00.545Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5841d06e9ce5147013cbf7f4"
    text: {Welp, a rebol dialect now has macros, this ought to allow it to score even better on that expression metric test =)... http://dberkholz-media.redmonk.com/dberkholz/files/2013/03/expressiveness_weighted2.png}
    sent: "2016-12-02T19:50:06.237Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5841cfe390f847041bedb749"
    text: {@pekr why not, any password manager is better than none :)}
    sent: "2016-12-02T19:47:47.692Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5841cf3490f847041bedb403"
    text: "we use keepass here ..."
    sent: "2016-12-02T19:44:52.856Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5841ced590f847041bedb24b"
    text: "@dander +1 for LastPass"
    sent: "2016-12-02T19:43:17.548Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5841be2590f847041bed4cb6"
    text: {@dander That's correct, actually the module! datatype will offer a stronger isolation than regular context (like no way to leak any word  and a separate symbol table).}
    sent: "2016-12-02T18:32:05.316Z"
    editedAt: "2016-12-02T18:32:18.762Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5841b7740da034021b5d9fbb"
    text: {> The preprocessing (including macro-time) happens between load and compile phases. It has been designed as a separate phase, with a separate execution context (to the extent allowed by current Red semantics, until we get the module! type implemented)^/^/This took a bit of mental stretching for me. Am I understanding this correctly? A special execution context is created for processing the macro to keep its "namespace" (for lack of a better term) isolated from the surrounding code. And that once module! support has been added, that context won't be necessary because that isolation will be provided by the module?}
    sent: "2016-12-02T18:03:32.133Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5841b0ca1a501b4769b71357"
    text: {Great! I look forward to reading through this. By the way, if you need a good password manager, I recommend LastPass}
    sent: "2016-12-02T17:35:06.385Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5841afb590f847041becf7ea"
    text: {I can't find my Reddit password for now, so feel free to post it there.}
    sent: "2016-12-02T17:30:29.154Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5841af9c90f847041becf729"
    text: {http://www.red-lang.org/2016/12/entering-world-of-macros.html}
    sent: "2016-12-02T17:30:04.959Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5841a95a44f3e83528cc12ba"
    text: {> should i try using this chat extensively? - BR^/^/@ERIPECH https://gitter.im/red/red/welcome is best for newbie questions, and https://gitter.im/red/help for posting code}
    sent: "2016-12-02T17:03:22.161Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5841a3adb4ffd59e38d7b9d0"
    text: "@ERIPECH you can draw graphs using Draw"
    sent: "2016-12-02T16:39:09.965Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58419e9d7e2af9d12299c03c"
    text: {eschewing html, css, would be so nice... I might actually build a website for once in my life}
    sent: "2016-12-02T16:17:33.291Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58419e5b9ce5147013cbed02"
    text: {Since browsers are essentially embedded operating systems, would a goal for Red be to be able to run vid(view whatever it is called) in the browser?}
    sent: "2016-12-02T16:16:27.424Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58419e4e1a501b4769b694d5"
    text: {@dockimbel - many thanks for your help (now working), now I can try to figure whats going on  ...^/@rebolek - what does it mean "write graphs yourself"?^/}
    sent: "2016-12-02T16:16:14.049Z"
    v: 1
    author: "5836a57fd73408ce4f384bc8"
) #(
    id: "584175668255fe6b76f74827"
    text: {@geekyi Ach. Bummer. You were able to get your emulator to `chmod +x` your app, though? I love Linux, the command line, all that stuff. But I hate the way this silly problem makes me feel completely inept. Meh. I'll keep trying.}
    sent: "2016-12-02T13:21:42.163Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "58417485381827c24dac642d"
    text: {@jeffmaner that's ok. Last time I tried, I had a problem because libcurl was required}
    sent: "2016-12-02T13:17:57.262Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584173fe381827c24dac6081"
    text: {@geekyi Thanks for asking. Sorry for my tardy response. I have not succeeded yet. I installed Termux and Jack Palevich's Android Terminal Emulator on my BlackBerry PRIV. I've attempted `chmod 555 myapp` in both emulators, and they both complain `Operation not permitted`. I was researching that, finding nothing, when work stood up and demanded the rest of my day.}
    sent: "2016-12-02T13:15:41.997Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "5840e775381827c24da9823c"
    text: {@ERIPECH There was a change in the behavior of `to` action on words. In order to make the picosheet script work, you just need to replace `#" "` in it by `#"_"`.}
    sent: "2016-12-02T03:16:05.521Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58408e36c5bc35217da46b51"
    text: {@ERIPECH You’re welcome, I would love to fix it. I am just really tired today ;)}
    sent: "2016-12-01T20:55:18.716Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58408dfe381827c24da7b569"
    text: "@rebolek of course - many thanks! BR"
    sent: "2016-12-01T20:54:22.572Z"
    v: 1
    author: "5836a57fd73408ce4f384bc8"
) #(
    id: "58408dbc38afd97d3b847cd7"
    text: {I will take a look at it, but not today, can you check in tomorrow?}
    sent: "2016-12-01T20:53:16.776Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58408d80b4d7ca3b7a188aba"
    text: {@ERIPECH Ja, it throws an error, there’s certainly a workaround.}
    sent: "2016-12-01T20:52:16.078Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58408c738255fe6b76f29333"
    text: {@rebolek - thanks; there ist a spreadsheet around gist.github.com/dockimbel/08e40961e5f7836d29591dd06d1a56f9 which is not working in the new release because of this rejoin error - is there a workaround? or how to overcome such sort of issues?}
    sent: "2016-12-01T20:47:47.842Z"
    editedAt: "2016-12-01T20:49:44.953Z"
    v: 3
    author: "5836a57fd73408ce4f384bc8"
) #(
    id: "58408c138e29aeee601b7ae5"
    text: {@ERIPECH ^/> desktop application using excel like spreadsheet and graphs for the data^/^/Yes, this is possible. But you have to write the spreadsheet and graphs yourself. It would be fun to do if you are into that kind of stuff ;) ^/^/>  configuration via textfile, saving data to disk^/^/That is much easier, basically just `load` and `save` and some code around it.}
    sent: "2016-12-01T20:46:11.304Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58408b528255fe6b76f28b59"
    text: {@rebolek sorry Boleslav I was not ready with my text right now - what I want to e.g: desktop application using excel like spreadsheet and graphs for the data - configuration via textfile, saving data to disk - would this be possible ? I think, but not based on available information; should i try using this chat extensively? - BR}
    sent: "2016-12-01T20:42:58.501Z"
    v: 1
    author: "5836a57fd73408ce4f384bc8"
) #(
    id: "58408b0cb4d7ca3b7a188a81"
    text: {> red examples are often not working^/^/Do you have some links to them? I wonder what examples do not work.^/^/> Should I start using rebol (is there a lice key around)^/^/First, you do not need license to use Rebol, it is free to use. Second, if you are starting with Red/Rebol, I thing that you can start with Red, it is good enough already.^/^/}
    sent: "2016-12-01T20:41:48.174Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58408a2ec5bc35217da46aa6"
    text: {So, you can do many useful things with it, if you know the limits.}
    sent: "2016-12-01T20:38:06.964Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584089ee8e29aeee601b7a98"
    text: {It is still in alpha. It can do many things, but there are things that still has to be implemented, like GC, proper IO, etc.}
    sent: "2016-12-01T20:37:02.950Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584089c7b4d7ca3b7a188a2f"
    text: {@ERIPECH Hi! It certainly depends on your definition of *prime*, but in general, NO.}
    sent: "2016-12-01T20:36:23.758Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5840894e16207f7b0ecef300"
    text: {Hallo guys! Is red ready for prime? ^/I am trying to get some orientation and struggled to find the basics. There are many links to rebol examples which are not working and even the red examples are often not working, or just on an old release. Should I start using rebol (is there a lice key around) or is red already the right choice? Or do I have to wait for 1.0 for doing useful stuff. I appreciate your help BR ^/}
    sent: "2016-12-01T20:34:22.685Z"
    editedAt: "2016-12-01T20:38:23.980Z"
    v: 2
    author: "5836a57fd73408ce4f384bc8"
) #(
    id: "58406ed1381827c24da6ea90"
    text: "@maximvl hey"
    sent: "2016-12-01T18:41:21.602Z"
    v: 1
    author: "58406e6fd73408ce4f3a0f03"
) #(
    id: "58404430381827c24da5d875"
    text: "@MarlburroW38_twitter how is this related to Red?"
    sent: "2016-12-01T15:39:28.301Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5840303e73abd79c55bde56d"
    text: {> Yes, sorry. So - I wish console to have such environments available at hand ...^/^/This is good enough for me, `call` within the console}
    sent: "2016-12-01T14:14:22.029Z"
    editedAt: "2016-12-01T14:14:32.122Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58402fcd16207f7b0ecca366"
    text: "@jeffmaner did you succeed?"
    sent: "2016-12-01T14:12:29.290Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58401b29381827c24da4dced"
    text: "@rebolek  @pekr  + 1    better all on hand"
    sent: "2016-12-01T12:44:25.747Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "583fe61189d179bf4de9bf70"
    text: {You should stop looking at Red with the limitations of the Rebol interpreter or SDK. Red has a toolchain for producing a lot of different kind of executables, and this changes a lot about how optional features should be managed.}
    sent: "2016-12-01T08:57:53.131Z"
    editedAt: "2016-12-01T08:59:13.355Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583fe53616207f7b0ecb00ad"
    text: {Yes, sorry. So - I wish console to have such environments available at hand ...}
    sent: "2016-12-01T08:54:14.381Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "583fe5068d65e3830ec281cd"
    text: {@pekr I think you are mistaking the Red console environment with Red programs. Besides, on Android, iOS, or a future web backend, `call` would be useless.}
    sent: "2016-12-01T08:53:26.313Z"
    editedAt: "2016-12-01T08:55:02.260Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583fe4ab1dec193f14121d11"
    text: {@dockimbel I absolutly don't want to upset you :-) , but I am with Rebolek here. Well, my intention is not have Rebol/Command-everything-inside package, but I do remember, how I wished Rebol would have the lowest common denominator having /Library and CALL interface. Not having one by default might imo have impact on general usefulness of the Red. Just my opinion, nothing more. I know it might be difficult to find the right balance for all those things we would wish for to have inside :-)}
    sent: "2016-12-01T08:51:55.357Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "583fd3f489d179bf4de960be"
    text: {@rebolek It indeed depends on the code size, I haven't yet checked how big is the latest version.}
    sent: "2016-12-01T07:40:36.425Z"
    editedAt: "2016-12-01T07:40:49.884Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583fd2f5c5bc35217da44611"
    text: {@dockimbel IMO it should be `native!`, it is too important to leave it just as optional. Others may feel different about it, but if the code is not too big, why move it out.}
    sent: "2016-12-01T07:36:21.777Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583fd2261dec193f1411b352"
    text: {@x8x No difference in speed, it's about deciding if it's part of the integrated core library or if it's an optional module.}
    sent: "2016-12-01T07:32:54.015Z"
    editedAt: "2016-12-01T07:33:04.646Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583fbab48255fe6b76edea64"
    text: {@henrikmk never had issues with nightly, it's a careful team. TM2 has been labeled Beta for a long time.}
    sent: "2016-12-01T05:52:52.190Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "583fb99d444b3778767a7f48"
    text: {@dockimbel is that just architectural decision or would there be differences in speed?}
    sent: "2016-12-01T05:48:13.577Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "583f9dae73abd79c55bae442"
    text: {@x8x We need to decide to either integrate `call` as a native! or as a module.}
    sent: "2016-12-01T03:49:02.460Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583f6db873abd79c55ba01d2"
    text: {@maximvl Uh... Duh! Where is my head? Lol. Thanks. Now to get a terminal emulator up and running...}
    sent: "2016-12-01T00:24:24.191Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "583f683d444b3778767920a2"
    text: "maybe do `chmod +x my-program` before"
    sent: "2016-12-01T00:01:01.623Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583f68171dec193f140fa8b0"
    text: {@jeffmaner since Red compiles to native I would guess that you just need to run terminal and type `./my-program`}
    sent: "2016-12-01T00:00:23.545Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583f65f98255fe6b76ec6a67"
    text: {I have just successfully compiled my red code file for Android. Then I copied the compiled output file to my Android phone. And now I'm a complete n00b again. How do I run this on my phone? My naive hope was to tap the file in a file manager, possibly specify that the phone should run it as an application, and magically see the generated output in some kind of console window. I'm definitely missing something.}
    sent: "2016-11-30T23:51:21.056Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "583f2370444b3778767786fb"
    text: {@x8x: I don't use nightly, as I assume there's higher risk of broken builds, but I don't know if you've experienced that?}
    sent: "2016-11-30T19:07:28.552Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583f149373abd79c55b7c46c"
    text: {@henrikmk Same here, tried Atom, Sublime and Visual Studio Code, TM2 is indeed in another category. Are you using nightly updates?, Many speed improvments lately, like multi file searches, they fly now. :-)}
    sent: "2016-11-30T18:04:03.797Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "583f0a2b444b37787676dd1f"
    text: {@x8x: thanks, I think I have it working now. the speed issue is nearly gone for me, though I've noticed that opening big files causes slowdowns in other windows. Allan remains unconvinced, so I have to study this a bit more. I recently spent a month in a variety of different text editors, like Atom, Sublime, VIM and a few others to see if there was anything they could improve on, but I ended up back with TM2, because it simply is far above them, except in speed and window organization.}
    sent: "2016-11-30T17:19:39.537Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583efa791dec193f140ce5a5"
    text: {@dockimbel just curious, why has `call` status on trello been downgraded to incomplete ?}
    sent: "2016-11-30T16:12:41.947Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "583efa50444b377876766c34"
    text: {@henrikmk I use TextMate2 (and love it! ..if only they would integrate libred, and we could write syntax files in red.. :-) ) I have a Rebol boundle, long time not touched it, still have some small issues, but mostly working. If you want to have a look, I could post it somewhere. The only issues I have with TM2 language highlighting speed in any languages, is with files that have very long lines, but I think they improved/fixed that lately.}
    sent: "2016-11-30T16:12:00.759Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "583e75b4444b377876736ccf"
    text: {http://modernperlbooks.com/mt/2013/02/goodnight-parrot.html}
    sent: "2016-11-30T06:46:12.796Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583e75b1444b377876736cc8"
    text: "and "
    sent: "2016-11-30T06:46:09.248Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583e75aa89d179bf4de17dc5"
    text: {http://whiteknight.github.io/2015/01/15/parrottheend.html}
    sent: "2016-11-30T06:46:02.566Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583e75a81dec193f1409c93e"
    text: {You can read why some developers left the parrotvm project here -}
    sent: "2016-11-30T06:46:00.282Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583e751373abd79c55b403ce"
    text: {@DonaldTsang  Firstly, When you have native code compilation, why would you want a bytecode interpreter? Secondly, parrot was designed to be useful for a wide range of dynamic programming languages and as such neither its design, nor its development went good. Parrot was supposed to be the VM used by perl 6 but because parrot was not good enough due to wrong design decisions as well as it was too slow, hence the perl developers had to move on to other backends like JVM and their own moarvm in the end. (And no, moarvm is also not suited for red as it is built with perl and its object system in mind) . Thirdly, using parrot would make it impossible to use red (r/s) for systems programming which goes against the red's fullstack philosophy. BTW as @dockimbel  asked what is your use case for using other backend than the current one?}
    sent: "2016-11-30T06:43:31.057Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583e603a381827c24d9ae932"
    text: {@DonaldTsang Before asking such question, you should make a case about why having a VM would be better than the current architecture.}
    sent: "2016-11-30T05:14:34.782Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583e5fb789d179bf4de11ac7"
    text: {@nc-x Another question, is Parrot a good VM for Red? It has C, Java, Lua, Ruby, Python, PHP, Perl and Lisp/Scheme support.}
    sent: "2016-11-30T05:12:23.265Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "583e0555444b3778767165a4"
    text: {cool. that was the semantics that i was initially aiming for, but failed to correctly express until the coffee kicked in, a clear violation of the No Chatting Before Coffee policy. :-/}
    sent: "2016-11-29T22:46:45.371Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "583e041d89d179bf4ddf5ada"
    text: "Yep, that works too."
    sent: "2016-11-29T22:41:33.054Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583e031e8255fe6b76e48e7b"
    text: {Could you use `\s*($|;)` (in however textmate expresses that -- I use Vim, which has more backslashes: `^^[^^;]*[\[\^{\(]\+\s*\($\|;\)`}
    sent: "2016-11-29T22:37:18.819Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "583e02bf73abd79c55b1eae8"
    text: {And got it:^/^/```lisp^/test: [some ["[" any " " opt [";" any skip] end | not ";" skip not end]]^/```}
    sent: "2016-11-29T22:35:43.191Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583e011373abd79c55b1dd3d"
    text: {@dahu This is an attempt to express it in Red's (and Rebol 3) PARSE:^/^/```lisp^/test: [some ["[" any " " opt [";" any skip] end | ";" break | skip not end]]^/^/foreach [line expected] reduce [^/    "["           true^/    "foo ["       true^/    "foo [ ;"     true^/    "foo [ ; bar" true^/    "[foo]"       false^/    "foo ;"       false^/    "foo ; ["     false^/][^/    print [^/        expected^/        parse line test^/        mold line^/    ]^/]^/```^/^/As you can see, I fail in one instance.}
    sent: "2016-11-29T22:28:35.332Z"
    editedAt: "2016-11-29T22:33:53.821Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dfa9616207f7b0ec031bb"
    text: {i can't test my musings, not being a textmate user, so i should retire now ._.}
    sent: "2016-11-29T22:00:54.939Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "583dfa34381827c24d98f654"
    text: "bah"
    sent: "2016-11-29T21:59:16.875Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "583dfa2c444b377876710e4d"
    text: "@rgchris  would `\s*;?` suffice?"
    sent: "2016-11-29T21:59:08.893Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "583df9768d65e3830eb7aaf1"
    text: "@rgchris  right, i see"
    sent: "2016-11-29T21:56:06.878Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "583df8b889d179bf4ddf0e79"
    text: {@dahu I'm looking for a `[` that demonstrably occurs at the end of the line—the only possible things succeeding it will be space and/or comment. Omitting this check will create a lot of false positives.}
    sent: "2016-11-29T21:52:56.507Z"
    editedAt: "2016-11-29T21:54:27.513Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583df7508d65e3830eb79ea3"
    text: {@rgchris  Couldn't you remove the trailing `\s*(;.*)?$` in your  increaseIndentPattern for the same effect?}
    sent: "2016-11-29T21:46:56.029Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "583ddddb1dec193f1406a888"
    text: "alright, sorry for hijacking the chat"
    sent: "2016-11-29T19:58:19.380Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dddcf16207f7b0ebf7708"
    text: {@rgchris on the old macbook, it seems the increaseIndentPattern line alone won't do it. both the folding marker lines must be added too, before the problem disappears. I didn't have those lines before.}
    sent: "2016-11-29T19:58:07.296Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583ddd908d65e3830eb70404"
    text: "Thanks for the LLVM analysis @nc-x."
    sent: "2016-11-29T19:57:04.143Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583dd92a16207f7b0ebf57fc"
    text: "I can also repeat the problem on my old macbook."
    sent: "2016-11-29T19:38:18.984Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dd8c289d179bf4dde49e3"
    text: {So far it seemed to help. Will see if it keeps up.}
    sent: "2016-11-29T19:36:34.261Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dd69c73abd79c55b0d28a"
    text: {How about: `increaseIndentPattern = '^^[^^;]*[\[\^{\(]+\s*(;.*)?$';` ?}
    sent: "2016-11-29T19:27:24.681Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dd61b381827c24d9819b1"
    text: "Hm, I have the same."
    sent: "2016-11-29T19:25:15.623Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dd57789d179bf4dde352e"
    text: {OK, got it now. These lines are offensive:^/^/```^/increaseIndentPattern = '^^([^^;]*[\[\{\(])+\s*(\;.*)?$';^/decreaseIndentPattern = '^^\s*[\]\}\)].*$';^/```^/Need to check what they are in your newest release.}
    sent: "2016-11-29T19:22:31.032Z"
    editedAt: "2016-11-29T19:22:55.951Z"
    v: 2
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dd1e1381827c24d97fe05"
    text: {the slowdown disappeared after pasting your lines into my bundle}
    sent: "2016-11-29T19:07:13.991Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dd1d673abd79c55b0b704"
    text: {now it appears to be gone, no more slowdown. I need to do a diff between your lines and the old ones I had. maybe there are subtle differences.}
    sent: "2016-11-29T19:07:02.456Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dcfca8255fe6b76e358ef"
    text: {I'm trying TextMate 2 and still not getting slowdown. I wonder if there's another variable external to the Rebol bundle at play.}
    sent: "2016-11-29T18:58:18.782Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dcf8a1dec193f140651ea"
    text: "Yikes!"
    sent: "2016-11-29T18:57:14.663Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dce2b73abd79c55b0a0d6"
    text: {in fact, thanks for pasting it, because commenting things out in a bundle, deletes those lines of code on next start of textmate}
    sent: "2016-11-29T18:51:23.934Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dce03381827c24d97e272"
    text: "they are all commented out with no effect"
    sent: "2016-11-29T18:50:43.717Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dc8fa444b3778766fe495"
    text: {Could try commenting out each of the main pattern groups, see if it's one of those that's offending:^/^/```^/patterns = (^/^-^-{^-include = '#comments'; },^/^-^-{^-include = '#type-literal'; },^/^-^-{^-include = '#logic'; },^/^-^-{^-include = '#strings'; },^/^-^-{^-include = '#values'; },^/^-^-{^-include = '#words'; },^/^-^-{^-include = '#errors'; },^/^-);^/```}
    sent: "2016-11-29T18:29:14.868Z"
    editedAt: "2016-11-29T18:29:43.598Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dc7ca73abd79c55b07496"
    text: {commented them out with no effect, so I'm not sure where else...}
    sent: "2016-11-29T18:24:10.695Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dc68a73abd79c55b06cbb"
    text: {Also check the `decrease/increase IndentPattern` in Miscellaneous.}
    sent: "2016-11-29T18:18:50.729Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
)#(
    id: "583dc64e16207f7b0ebee3f9"
    text: {OK, I tried removing the folding markers and a number of other bracket related things and that had no effect.}
    sent: "2016-11-29T18:17:50.114Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dc5dc444b3778766fd07f"
    text: {I've been using this latterly:^/^/```^/foldingStartMarker = '^^[^^;]*[\[\{\(]\s*(;.*)?$';^/foldingStopMarker = '^^\s*[\]\}\)].*$';^/```^/^/Not sure if that's what you have in your current bundle, but any line that ends in `[({` (with optional comment) opens and a line that starts with `])}` (with optional preceding space) closes. Has worked as a compromise.}
    sent: "2016-11-29T18:15:56.442Z"
    editedAt: "2016-11-29T18:18:01.373Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dc40873abd79c55b05e7e"
    text: {Allan asked me to take samples of the TextMate process. I did that, but have no idea what I'm supposed to look for.}
    sent: "2016-11-29T18:08:08.678Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dc3e81dec193f14060512"
    text: "Yep. Or less useful."
    sent: "2016-11-29T18:07:36.222Z"
    editedAt: "2016-11-29T18:07:47.538Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dc3e1381827c24d97a167"
    text: {@rgchris: I see, thanks. I suppose any kind of disabling it will basically make the syntax bundle useless?}
    sent: "2016-11-29T18:07:29.214Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dc38f8d65e3830eb65a37"
    text: {@henrikmk Bracket closing is the weak link in my bundle. While it's infinitely complex, it's still difficult to write even for basic cases: `][` `[ ; ]` `]][` Would appreciate thoughts and feedback about how to go about this.}
    sent: "2016-11-29T18:06:07.817Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dc2bb1dec193f1405fe2f"
    text: {@rgchris If you use TM1, then you probably won't see it. With automatic bracket closing, simply type [[[[[[[. After 30-40 of those, TM2 simply hangs, because of some syntax parsing problem, but generally, files with many []s are slower to process and give annoying typing delays.}
    sent: "2016-11-29T18:02:35.262Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583dad8e89d179bf4ddd32aa"
    text: "(I still use TextMate v1)"
    sent: "2016-11-29T16:32:14.169Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583dad631dec193f140562a3"
    text: {@henrikmk This is my [latest version](https://github.com/rgchris/rebol-tmbundle). Don't notice any slowdown though—any particular case or conditions I could test?}
    sent: "2016-11-29T16:31:31.245Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "583da8171dec193f140541c5"
    text: {I consider Red having own compiling toolchain without external dependencies as one of main benefits of the Red language (and I'm sure I'm not alone:)}
    sent: "2016-11-29T16:08:55.098Z"
    editedAt: "2016-11-29T16:09:11.332Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "583d9b7316207f7b0ebda777"
    text: "@henrikmk I think @x8x might be maintaining it."
    sent: "2016-11-29T15:14:59.845Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d9adc73abd79c55af3ffb"
    text: {@ifgem If it has an ARM cpu using the standard instruction set (not the Thumb one), then yes. ;-)}
    sent: "2016-11-29T15:12:28.720Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d93bb444b3778766e612a"
    text: {anyone maintaining the Red or REBOL textmate bundle? there's a serious speed issue in mine, but was wondering which one available is the official or most current one.}
    sent: "2016-11-29T14:42:03.836Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "583d8f5c16207f7b0ebd5a93"
    text: {@dockimbel by the way, can I compile Red/System to lego mindstorm nxt2.0?:)}
    sent: "2016-11-29T14:23:24.872Z"
    editedAt: "2016-11-29T14:23:31.003Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583d7ab81dec193f1404203a"
    text: {There are many programming languages which have alternative compilers created by the community, so even we can have one in the future. But anyways i would still prefer the red toolchain :smile: }
    sent: "2016-11-29T12:55:20.116Z"
    editedAt: "2016-11-29T12:56:46.435Z"
    v: 3
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583d7a3f8d65e3830eb47427"
    text: {it can be optional somewhere in the future, or third-party addon}
    sent: "2016-11-29T12:53:19.731Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583d7a1573abd79c55ae6906"
    text: {good points, I agree, LLVM seems unnecessary for Red}
    sent: "2016-11-29T12:52:37.895Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583d79f473abd79c55ae6821"
    text: {For me, the points 2, 6, 7, 8 are good enough reasons to stay away from LLVM.}
    sent: "2016-11-29T12:52:04.933Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583d799473abd79c55ae65aa"
    text: {@DonaldTsang  ^/^/1.    Some reasons for not choosing LLVM are given here https://github.com/red/red/wiki/FAQ^/^/2.    Besides LLVM support for windows is not particularly good - for eg. Rust and Haskell bundle mingw with them for the linker and some other stuff.^/^/3.    Also LLVM was created specifically for C-like programming languages hence its optimisations are well-suited for such languages. On the other hand, Red's performance under LLVM would still suffer just like Haskell's. So performance is not any reason to choose LLVM. ^/^/4.    Using LLVM means it becomes more work to support both the interpreter and compiler.^/^/5.    GC options are pretty much limited on LLVM but some work was being done on this recently, i don't know what it's status is right now.^/^/6.    You lose the cross compiling benefits that you have right now in the Red toolchain if you choose LLVM. Cross compiling using llvm and gcc is a mess, just building the cross compiler takes hours. ^/^/7.    Using LLVM would also mean that the easy-to-use android backend to come soon woudn't have been that easy to use.^/^/8.    Using LLVM also means that the red executable is not portable any more. Also it is no longer < 1 mb. ^/^/Also creating asm.js target in the red toolchain is pretty much feasible, so why not do it?}
    sent: "2016-11-29T12:50:28.988Z"
    editedAt: "2016-11-29T12:52:20.218Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583d71ed8d65e3830eb4403d"
    text: {Using `stats` native would also work (it will report the total allocated count from the OS by the Red memory manager).}
    sent: "2016-11-29T12:17:49.001Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d716f8d65e3830eb43dc1"
    text: "thanks."
    sent: "2016-11-29T12:15:43.986Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d7160381827c24d9580da"
    text: {@dockimbel  yes, I tried and it looks more accurate like you suggested.}
    sent: "2016-11-29T12:15:28.518Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d70d516207f7b0ebca246"
    text: {@Zamlox From Task manager's menu -> View -> Select Columns.. Then select "Memory Commit size". It looks more accurate to me.}
    sent: "2016-11-29T12:13:09.511Z"
    editedAt: "2016-11-29T12:13:28.737Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d708d444b3778766d943c"
    text: {ok, good to know not to use Task Manager memory status .}
    sent: "2016-11-29T12:11:57.293Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d70578255fe6b76e0f0fd"
    text: {Is there any profiling in Red yet? something like stats?}
    sent: "2016-11-29T12:11:03.950Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "583d704c381827c24d957b36"
    text: "yes, that's what I'm using."
    sent: "2016-11-29T12:10:52.375Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d704073abd79c55ae3219"
    text: {@Zamlox If you are using the default memory display from the task manager, you'll get a wrong picture.}
    sent: "2016-11-29T12:10:40.440Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d703773abd79c55ae31d4"
    text: "only when I append the memory will grow"
    sent: "2016-11-29T12:10:31.918Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d701a8d65e3830eb435dd"
    text: {@Zamlox High memory usages on small datasets are usually caused by many temporary allocations.}
    sent: "2016-11-29T12:10:02.964Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d7016444b3778766d921c"
    text: {when I do like above ```a: make block! 1000000``` will not take any memory on Windows 7}
    sent: "2016-11-29T12:09:58.431Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d6fcf8d65e3830eb4347d"
    text: {I just tried your example code above on Windows, I see a +15MB just on commited memory, then 0 more allocation during the appending.}
    sent: "2016-11-29T12:08:47.693Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d6f91444b3778766d8e81"
    text: {@Zamlox No, just preallocating the series with enough slots (like you did above).}
    sent: "2016-11-29T12:07:45.762Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d6f4f16207f7b0ebc9a67"
    text: {@dockimbel by preallocating you mean adding as much data as needed beforehand then clearing the block and adding again data into it.}
    sent: "2016-11-29T12:06:39.065Z"
    editedAt: "2016-11-29T12:06:53.427Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d6f0689d179bf4ddba461"
    text: {@maximvl It shouldn't, until you hit the max allocated size of the block.}
    sent: "2016-11-29T12:05:26.214Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d6ee116207f7b0ebc9827"
    text: {@dockimbel but even with default-sized block, it shouldn't consume additional memory on _each_ addition, right?}
    sent: "2016-11-29T12:04:49.678Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583d6e94381827c24d957194"
    text: {@Zamlox `I noticed that each append took more memory than the size of data` If you preallocate the block, appending values should not use any extra memory.}
    sent: "2016-11-29T12:03:32.139Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d6ccb89d179bf4ddb96eb"
    text: {perhaps I should reconsider how I transform those path related data into draw commands}
    sent: "2016-11-29T11:55:55.422Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d6c9a444b3778766d7eb7"
    text: {I was experiencing a lot of memory consumption while I worked on SVG module. For processing an svg file of 197KB I had a 30MB memory consumption. And for an svg file of 5MB I had a 800MB memory consumption. I noticed that each append took more memory than the size of data I have added into a block.}
    sent: "2016-11-29T11:55:06.018Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d6b768d65e3830eb41d59"
    text: {@Zamlox Each Red value is taking at least 16 bytes (128-bit slots, like in Rebol), so the memory usage looks correct.}
    sent: "2016-11-29T11:50:14.563Z"
    editedAt: "2016-11-29T11:50:34.565Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583d6a1e8d65e3830eb416a5"
    text: {when I try to add data in a block, each call of ```append``` will take more memory than size of data added to block:^/```^/red>> a: make block! 1000000^/== []^/red>> loop 1000000 [append a #"a"]^/```^/takes about 15MB^/will this be fixed once GC will be in place ?}
    sent: "2016-11-29T11:44:30.833Z"
    editedAt: "2016-11-29T11:48:11.681Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583d65ce73abd79c55adf50c"
    text: {@dockimbel @pekr but LLVM allows language compilation from other programming languages, not just C and C++. And those code in LLVM can "decompile" into other languages. Basically LLVM allows transpiling.}
    sent: "2016-11-29T11:26:06.010Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "583d64851dec193f1403a478"
    text: "@dockimbel @pekr L"
    sent: "2016-11-29T11:20:37.375Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "583d0af889d179bf4dd99d2a"
    text: {@greggirwin Agreed about the org plan for the docs repo.}
    sent: "2016-11-29T04:58:32.738Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c893f8255fe6b76dc571b"
    text: "https://gitter.im/red/docs"
    sent: "2016-11-28T19:45:03.695Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583c8775444b37787668e434"
    text: {@greggirwin what is the best place for doc discussions, Red/Docs?}
    sent: "2016-11-28T19:37:25.892Z"
    v: 1
    author: "5815712bd73408ce4f31c2d2"
) #(
    id: "583c8201444b37787668c53e"
    text: {I will track down my old notes  on Red docs as well.}
    sent: "2016-11-28T19:14:09.857Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583c809b8255fe6b76dc2256"
    text: {And while I'm sorry if R2 problems force your hand @dockimbel, but I'm anxious for Red to be self hosted. :^^)}
    sent: "2016-11-28T19:08:11.051Z"
    editedAt: "2016-11-28T19:08:17.739Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583c805116207f7b0eb77a68"
    text: {@Tovim thanks for the work on this so far! @stvpwrs, thanks for the offer to help with docs. Always important, and having a beginner's view helps, because we can't un-learn Red and see it with fresh eyes.^/^/Notes:^/- We need an org plan. Either naming conventions or dir structure. e.g. %overview.adoc is GUI related, but nothing in the name tells you that. ^/- %ownership.adoc appears to just contain a GUI hierarchy image. Should be object ownership, correct?^/^/I don't see a reason not to use @tovim's work (and thanks for the annotations section as well!). }
    sent: "2016-11-28T19:06:57.178Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583c566b8d65e3830eae115b"
    text: "@endo64 Should be fixed now."
    sent: "2016-11-28T16:08:11.801Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c418416207f7b0eb5d72e"
    text: "Is it missing in the repo?"
    sent: "2016-11-28T14:39:00.190Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
)#(
    id: "583c41411dec193f14fd421e"
    text: {```^/Combining all source files together...^/** Access Error: Cannot open /E/Git/red/environment/macros.red^/```}
    sent: "2016-11-28T14:37:53.659Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "583c413773abd79c55a7a814"
    text: {Encapping the latest master cannot find `macros.red` : }
    sent: "2016-11-28T14:37:43.864Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "583c23c173abd79c55a6fdee"
    text: {@ifgem You can easily add new widgets using `style` keyword, `stylize` function from @rebolek or just appending new widgets definitions to `system/view/VID/styles`. There are many ways to extend it, what is lacking, is a built-in framework for defining custom widgets (you can define new ones already using Draw, but it's up to you to figure out how to achieve it and how to integrate it within View).}
    sent: "2016-11-28T12:32:01.985Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c234216207f7b0eb530b4"
    text: {@dockimbel I know about them, thanks, I'll try it soon:))))}
    sent: "2016-11-28T12:29:54.571Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583c22a473abd79c55a6f8ee"
    text: {@dockimbel also, why isn't VID extensible? I.e why can't I add some new widgets to it?}
    sent: "2016-11-28T12:27:16.499Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583c22328255fe6b76d9d485"
    text: {@ifgem As it is a R/S binding only, you need to write a Red layer on top of it, using *routines* to expose the features to Red. You can do a 1:1 mapping between the R/S API and the Red one, or you can merge/abstract some lower-level features to provide a higher-level Red API. I'm pretty sure someone can get you started if you don't know about routines.}
    sent: "2016-11-28T12:25:22.207Z"
    editedAt: "2016-11-28T12:28:32.796Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c21be73abd79c55a6f4ee"
    text: {@dockimbel how can I use standard curses binding in my Red code?}
    sent: "2016-11-28T12:23:26.063Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583c20dd8d65e3830eacc4eb"
    text: {It is, but not limited to that. It's a natural evolution for Red and a good showcase for 1.0.}
    sent: "2016-11-28T12:19:41.743Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c1ce5444b377876664724"
    text: {that's superb! Re the self-hosting, I expect it being a reaction to the repeated R2 related problems, right?}
    sent: "2016-11-28T12:02:45.540Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "583c1bb38255fe6b76d9b3aa"
    text: {BTW, I'm writing an article about macros support in Red to be released today or tomorrow. ;-)}
    sent: "2016-11-28T11:57:39.640Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c1bacc5bc35217da39ee4"
    text: {I see, thanks. It’s true that the docs for AsciiDoc are much longer than for Markdown :)}
    sent: "2016-11-28T11:57:32.257Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583c1b4589d179bf4dd44a41"
    text: {@rebolek MD is lacking too many basic features, like section/chapters numbering, and decent tables formatting options.}
    sent: "2016-11-28T11:55:49.060Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c1b148255fe6b76d9b0dd"
    text: {Well, I'm the bottleneck there, so as soon as we merge libRed to master, I'll give it a deeper look and do the switch if there is no show-stopper (@greggirwin and @PeterWAWood help is welcome for that).}
    sent: "2016-11-28T11:55:00.540Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c1acd8d65e3830eaca281"
    text: {@dockimbel BTW, #2351 why is event/key none on CapsLock?}
    sent: "2016-11-28T11:53:49.788Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583c1aa18e29aeee601ab365"
    text: "@dockimbel why was AsciiDoc chosen over Markdown?"
    sent: "2016-11-28T11:53:05.670Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583c1a8573abd79c55a6cb88"
    text: "@dockimbel Asciidoc:)"
    sent: "2016-11-28T11:52:37.392Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583c1a7589d179bf4dd44576"
    text: "@ifgem You mean the move to Asciidoc or libRed?"
    sent: "2016-11-28T11:52:21.460Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c1a4616207f7b0eb5010d"
    text: "@nc-x Android: me too! :fire:  ;-)"
    sent: "2016-11-28T11:51:34.659Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c1a1573abd79c55a6c8c6"
    text: "@dockimbel in a matter of days?:)))"
    sent: "2016-11-28T11:50:45.823Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583c19ec381827c24d8e2700"
    text: {@ifgem Russian translation is welcome, but should wait our move to Asciidoc first (which should happen very soon).}
    sent: "2016-11-28T11:50:04.577Z"
    editedAt: "2016-11-28T11:50:06.309Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c196a8255fe6b76d9a906"
    text: {@ifgem Like for any other coding task involving design and prototyping for something never built before: a certain amount of time. ;-) I think 0.7 is mostly about designing the right architecture, with several layers, rather than coding time. I don't expect a lot of new code for I/O support, so it really depends how long will the design/prototyping take.}
    sent: "2016-11-28T11:47:54.723Z"
    editedAt: "2016-11-28T11:49:08.746Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c196973abd79c55a6c569"
    text: {That's great... Moves us closer to the android release for which i am waiting for a long time...}
    sent: "2016-11-28T11:47:53.562Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583c193816207f7b0eb4fab7"
    text: {@nc-x We are currently working on demos for libRed and making some last minute adjustments to the libRed API, which should be over in the next days. After that, we need to process the tickets on the tracker before the release. I would like to allocate a week for processing as many tickets as possible before the 0.6.2 release. So the release date should be between one and two weeks from now.}
    sent: "2016-11-28T11:47:04.425Z"
    editedAt: "2016-11-28T11:50:34.271Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c18fb73abd79c55a6c204"
    text: {@dockimbel by the way, what do you think about translating current documentation into Russian?:)}
    sent: "2016-11-28T11:46:03.134Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583c18c989d179bf4dd43ac9"
    text: {@dockimbel  how long would it take to release Red 0.7?}
    sent: "2016-11-28T11:45:13.171Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583c188b16207f7b0eb4f743"
    text: "BTW how long for the next release?"
    sent: "2016-11-28T11:44:11.025Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583c187f89d179bf4dd43869"
    text: "Okay"
    sent: "2016-11-28T11:43:59.252Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583c185d1dec193f14fc55da"
    text: {Direct port, the modular compiler and toolchain we have in mind for 2.0, is a different architecture from the current one, so it still remains the main goal for Red 2.0. It will be a rewrite from scratch of the toolchain code to fit the target architecture and leverage some Red specific features that Rebol lacks.}
    sent: "2016-11-28T11:43:25.822Z"
    editedAt: "2016-11-28T11:44:21.086Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c17fe1dec193f14fc53a0"
    text: {@dockimbel  Will the 0.9.5 selfhosted release be the modular toolchain as planned or will it be a direct port of the current toolchain and be refactored later on?}
    sent: "2016-11-28T11:41:50.908Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583c17c5381827c24d8e1af3"
    text: {Though, the time required for such task is unpredictable. Could be anything between a couple of weeks to a couple of months. If we are not pressured to go 1.0 once we reach 0.9, we *really* want to make that happen.}
    sent: "2016-11-28T11:40:53.594Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c1792c5bc35217da39e0f"
    text: "@dockimbel great decision!"
    sent: "2016-11-28T11:40:02.674Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583c176389d179bf4dd43208"
    text: "@dockimbel excellent ;)"
    sent: "2016-11-28T11:39:15.850Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "583c173916207f7b0eb4ef76"
    text: {Red is already pretty much capable of running the toolchain code written for Rebol2. Though, we need a GC first, make some changes in the toolchain source code (like dropping the %lexer.r file in favor of %lexer.red), and fix the unavoidable bugs resulting from that move. So, we decided to accomplish that before 1.0, in order to drop the annoying dependency, and demonstrate that Red is capable of handling a big and complex codebase flawlessly.}
    sent: "2016-11-28T11:38:33.020Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583c17371dec193f14fc4fd7"
    text: "@dockimbel That's great :smile: "
    sent: "2016-11-28T11:38:31.786Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "583c161a8255fe6b76d99654"
    text: {We have decided to make Red selfhosted for 1.0 release: https://trello.com/c/zUiFKF8B/159-0-9-5-move-the-toolchain-to-red-if-time-permits}
    sent: "2016-11-28T11:33:46.625Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583bf4df381827c24d8d5ccf"
    text: "@pekr AFAIK, only preinstalled on iOS."
    sent: "2016-11-28T09:11:59.513Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583bea2a444b3778766536cc"
    text: {Just curious - is LLVM preinstalled on Windows, Mac and other platforms? I mean - by the OS vendor, hence no need to download? }
    sent: "2016-11-28T08:26:18.706Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "583be4d68255fe6b76d8979a"
    text: {@DonaldTsang Red is not written in C, like the "other programming languages" you are referring too. Therefore, the best option for them does not equate to "best option" for Red.}
    sent: "2016-11-28T08:03:34.013Z"
    editedAt: "2016-11-28T08:04:19.061Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583bdf5516207f7b0eb3c16a"
    text: {@dockimbel The reason why LLVM should be included in the roadmap is that other programming languages are also ported (e.g. C++) to asm.js that way. LLVM is going the Haxe route of being a "universal translator".}
    sent: "2016-11-28T07:40:05.250Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "583bb13989d179bf4dd2328b"
    text: {@dahu It's not a real choice, as on Gitbook we are limited to just Markdown or Asciidoc.}
    sent: "2016-11-28T04:23:21.033Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583b85f416207f7b0eb241c6"
    text: {@rcqls I'm not using the tap yet as I usually use the source compiler rather than the binary. Having the current "official" release available is very useful.}
    sent: "2016-11-28T01:18:44.833Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "583b525e1dec193f14f8c2aa"
    text: "FWIW, I also support using Asciidoc"
    sent: "2016-11-27T21:38:38.969Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "583b4b1b89d179bf4dd07e47"
    text: {@dockimbel ok, got it, thanks! I wasn't sure how to use `bind`}
    sent: "2016-11-27T21:07:39.782Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583b20881dec193f14f7ccde"
    text: {@Tovim @greggirwin @PeterWAWood Hey, I am very new to Red and open source in general, but I would love to pitch in on the docs. }
    sent: "2016-11-27T18:06:00.078Z"
    v: 1
    author: "5815712bd73408ce4f31c2d2"
) #(
    id: "583b1039444b3778766199dd"
    text: {Sorry for duplicate answers, Gitter is very unstable from here (China) right now.}
    sent: "2016-11-27T16:56:25.850Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583b0cf573abd79c55a1d202"
    text: {Another approach is to pre-bind the `body` block before passing it (eventually avoiding multiple re-bindings across multiple calls):^/```lisp^/with-word "abc" bind [ probe tmp ] :with-word^/```^/Though, as the function's context is only fully available during function's evaluation (default functions are not closures), you would get an error if such pre-bound block would be evaluated outside of the function.}
    sent: "2016-11-27T16:42:29.935Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583b0bc68d65e3830ea79708"
    text: {Note that `bind body :with-word` would have worked also in this case, though the above method (extracting the context from a locally bound word) can work even if no word is referring to the function}
    sent: "2016-11-27T16:37:26.137Z"
    editedAt: "2016-11-27T16:39:16.000Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583b0ae51dec193f14f773a4"
    text: {@maximvl The words in `[probe tmp]` are bound to global context after LOADing, so you need to re-BIND them to the function's context. Here's how to do it:^/```lisp^/with-word: func [x body /local tmp] [^/   unless error? tmp: try compose [to-word (x)] bind body 'x^/]^/```}
    sent: "2016-11-27T16:33:41.388Z"
    editedAt: "2016-11-27T16:39:16.302Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583b0a4d8255fe6b76d4e7a5"
    text: {@maximvl You `[probe tmp]` block is bound to global context after being loaded, so you need to re-BIND it to the function's context (which only exists during the function evaluation, until we get closures). This is how to do it:^/```lisp^/with-word: func [x body /local tmp] [^/   unless error? tmp: try compose [to-word (x)] bind body 'x^/]^/with-word "abc" [ probe tmp ]^/```}
    sent: "2016-11-27T16:31:09.137Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583b099216207f7b0eaffadb"
    text: {@Tovim Hi! Glad to see you here. It is a more convenient place for quick exchanges than email for me (I get about 50 emails a day). The docs look good to me overall (just some details to fix). I think we could consider merging your changes and switching to Asciidoc definitely very soon. @greggirwin @PeterWAWood What do you think about it?}
    sent: "2016-11-27T16:28:02.167Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "583b035f8d65e3830ea771c0"
    text: {Any ideas and help welcomed -  maybe at Google+/ Pavel Dolana in Red-lang-docs community too.}
    sent: "2016-11-27T16:01:35.749Z"
    v: 1
    author: "583afc33d73408ce4f38f771"
) #(
    id: "583afe7a73abd79c55a18dab"
    text: {Hello, some two months ago I´ve started (with Dockimbel´s consent) a transformation of the Red documentation from markdown to asciidoc format, as well as it´s translation from English to Czech language. Please, look at it at the https://github.com/Tovim/new-docs page.}
    sent: "2016-11-27T15:40:42.682Z"
    v: 1
    author: "583afc33d73408ce4f38f771"
) #(
    id: "583ad9a773abd79c55a0e6cf"
    text: {what am I missing here?^/```^/with-word: func [x body /local tmp] [^/   unless error? tmp: try compose [to-word (x)] body^/]^/red>> with-word "abc" [ probe tmp ]^/*** Script Error: tmp has no value^/*** Where: probe^/```}
    sent: "2016-11-27T13:03:35.826Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583ac5fd89d179bf4dce02ec"
    text: {@PeterWAWood My pleasure! Are you also using the [tap](https://github.com/red/Homebrew-red) `red/Homebrew-red`? I think it is currently more useful since it installs `red-latest` as `red` binary . Thanks to your comment, the execution permissions fix allow any account to launch red.}
    sent: "2016-11-27T11:39:41.292Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583ac0b689d179bf4dcdef00"
    text: {@rcqls I've just got back to my machine ... I too noticed the permissions on the executable in the Cask and have changed them ... the permissions on ```/usr/local/bin/red``` were okay on my machine. ^/^/Thanks for looking into this and especially for taking the time to get Red into Homebrew.  }
    sent: "2016-11-27T11:17:10.152Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "583aac2273abd79c55a02ffd"
    text: "README was not visible since in the PR."
    sent: "2016-11-27T09:49:22.203Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583aabe216207f7b0eae4d0b"
    text: {I forgot to even look at that :-|^/Perhaps I will, but sleep first.}
    sent: "2016-11-27T09:48:18.509Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583aaafa444b3778765fc36e"
    text: {@dander The first 3 commands are already in the README but you can add a PR to add the 2 other last commands. }
    sent: "2016-11-27T09:44:26.638Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583aaa8c73abd79c55a02832"
    text: "pretty easy"
    sent: "2016-11-27T09:42:36.898Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583aaa718255fe6b76d34fb0"
    text: {so just to recap, in case others are interested, once scoop is installed, the process is like this:^/```^/scoop bucket add red https://github.com/red/scoop-bucket.git^/scoop install red^/or^/scoop install red-latest^/```^/and to update red-latest:^/`scoop update red-latest -f`^/and to switch between the two (because they clobber each-others shims)^/`scoop reset red` (or red-latest)}
    sent: "2016-11-27T09:42:09.878Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583aa95216207f7b0eae4386"
    text: {I switched over now, and that is working. I just thought it was an interesting quirk to comment on.}
    sent: "2016-11-27T09:37:22.542Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583aa6b68d65e3830ea5cf3c"
    text: {@dander , as @dockimbel merged the PR, you can use the `red/scoop-bucket`. I guess that you used `rcqls/scoop-bucket`  instead of  `rcqls/scoop-extras` (no need `git checkout red`).}
    sent: "2016-11-27T09:26:14.024Z"
    editedAt: "2016-11-27T09:26:51.555Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583aa5f78255fe6b76d33e3b"
    text: {@rcqls It seems to work great! I did have to manually check out the 'red' branch on your repo where scoop pulled it down. I didn't see a way from the scoop interface to specify a branch to use}
    sent: "2016-11-27T09:23:03.390Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583aa5df1dec193f14f5a398"
    text: "@dockimbel Just saw that. Thanks!"
    sent: "2016-11-27T09:22:39.966Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583aa5b416207f7b0eae3784"
    text: "@rcqls I've merged your PRs."
    sent: "2016-11-27T09:21:56.836Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583aa14a8255fe6b76d32e6f"
    text: {@dander To test it, you can create your own scoop-bucket or use mine `rcqls\scoop-extras`. The `red.json` and  `red-latest.json` are inside my bucket. }
    sent: "2016-11-27T09:03:06.013Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583aa0318d65e3830ea5b81b"
    text: "ahh, found your PR"
    sent: "2016-11-27T08:58:25.631Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583aa000381827c24d874608"
    text: {actually, the one little step of needing to launch an elevated shell for Chocolatey could push me over the edge to using scoop. But it probably depends on what packages are available}
    sent: "2016-11-27T08:57:36.307Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583a9fb016207f7b0eae2128"
    text: {@rcqls I saw the repo, but I didn't see a PR for it. Actually, I don't see a reason not to use one or the other. It doesn't seem like they would conflict with one another, and I like trying out new tools... though it would be a bit silly to install the same software from more than one package manager}
    sent: "2016-11-27T08:56:16.332Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583a9e5f444b3778765f8c7a"
    text: {@dander I found it when I was looking for Homebrew-like project on Windows. It is actually more HomebrewCaskroom-like. Have you seen that there is a repo `red\scoop-bucket` to install red and red-latest? You have to check the pull request since I think @dockimbel did not yet accept the PR. But since you are on chocolatey, I think you will not use it.}
    sent: "2016-11-27T08:50:39.721Z"
    editedAt: "2016-11-27T08:51:20.427Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583a9cf7381827c24d873b99"
    text: {@rcqls @dockimbel , I hadn't seen it scoop before, but it looks really interesting. I particularly like how it focuses on local-user installation. It seems to have some limitations compared with Chocolatey, but the simplicity gives it a very smooth experience}
    sent: "2016-11-27T08:44:39.708Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583a839c381827c24d86e6d2"
    text: {@PeterWAWood You were fully right. The problem is that the staged `red-061` does have only the executable right for user which seems to be the default behavior. In the `red-latest.rb` cask proposed in `red\Homebrew-red` I’ll make a PR to fix that. In the next official cask we will change that too. }
    sent: "2016-11-27T06:56:28.075Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583a77098d65e3830ea51e75"
    text: {@PeterWAWood I have checked with a second account and `sudo chmod g+w /usr/local/bin/red` makes the trick. I guess we can change the permission in the cask. Since the official cask is currently only related  to `red-061`, I think we can wait for the next release if we think that is interesting and feasible. Don’t know if you see `red\Homebrew-red` repo where we can our own formulae and casks. `red-latest.rb` is there and I can try to change the exec permission. }
    sent: "2016-11-27T06:02:49.908Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583a7309381827c24d86aff3"
    text: {@PeterWAWood I had a quick look on internet and more often HB is single account installation. There is some fix for multi-accounts installation. What is a bit weird is that execution permision could be allowed for other account even for a single-account installation. I’ll check to create a new account on my macbook.}
    sent: "2016-11-27T05:45:45.699Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583a71cb16207f7b0ead6d3e"
    text: {@rcqls I'm not sure if it is usual to access software installed with Homebrew from a user account but it works with other languages I install with Homebrew, such as R, Ruby and Lua. I'm not near my machine at the moment but will check the permissions of the executables in /usr/local/bin as soon as I can.}
    sent: "2016-11-27T05:40:27.141Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "583a6bd016207f7b0ead56ce"
    text: {@PeterWAWood Are your `/usr/local` with the proper right? Check on Homebrew Website but usually something like that is required to use Homebrew: `sudo chown -R $(whoami) /usr/local`. Sorry, I realize that I did not read properly your message. In fact, I think it is not usual to have a system-based Homebrew but only a user-based Homebrew installation. Check on Homebrew Website if it possible to have a system-based system.}
    sent: "2016-11-27T05:14:56.109Z"
    editedAt: "2016-11-27T05:18:47.737Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583a50e51dec193f14f46950"
    text: {The ```append``` help text says ```/only  => Insert block types as single values (overrides /part). ``` which does contradict the behaviour. Probably only @dockimbel can say which is correct - the code or the docstring.}
    sent: "2016-11-27T03:20:05.537Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "583a4fff8d65e3830ea4a1bb"
    text: {@maximvl ```path!``` values are ```series!``` so ```append``` is appending each value in the series to the empty block. If you user ```append/only``` it will append the path ```tmp/1``` to the block.^/```text^/red>> tmp: [1 2 3]^/== [1 2 3]^/red>> append copy [] 'tmp/1 ^/== [tmp 1]^/red>> append/only copy [] 'tmp/1 ^/== [tmp/1]^/red>> type? 'tmp/1^/== path!^/red>> series? 'tmp/1^/== true^/```}
    sent: "2016-11-27T03:16:15.157Z"
    editedAt: "2016-11-27T03:17:34.613Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "583a4d1689d179bf4dcc3656"
    text: {@rcqls @dockimbel I installed Red on my machine from Homebrew. It works fine from the account under which I installed it but can't be accessed from other accounts on the machine. (As a precaution, I have an admin account for administering the machine and a user account in which I do every thing else.)^/^/This is the message that I get:^/```text^/$ red^/-bash: /usr/local/bin/red: Permission denied^/```^/^/}
    sent: "2016-11-27T03:03:50.846Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "583a2ecc1dec193f14f3f5db"
    text: {refinements disappear on some operations:^/```^/red>> append copy [] 'tmp/1^/== [tmp 1]^/```}
    sent: "2016-11-27T00:54:36.567Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583a1a9b73abd79c559e151f"
    text: "any way to check if `charset`/`bitset` is empty?"
    sent: "2016-11-26T23:28:27.786Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839e65516207f7b0eab3117"
    text: {One way around it:^/```^/red>> apply: func ['f arg] [do reduce [f arg]]^/== func ['f arg][do reduce [f arg]]^/red>> apply empty? []^/== true^/```}
    sent: "2016-11-26T19:45:25.788Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5839e59789d179bf4dca6d62"
    text: "Hmmm, I thought so too."
    sent: "2016-11-26T19:42:15.485Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5839e5508255fe6b76d05996"
    text: {afaik `[:f]` in arguments should do that, but it doesn't work}
    sent: "2016-11-26T19:41:04.515Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839e5358255fe6b76d05934"
    text: {@greggirwin any way to make it transparent and remove `:` ?}
    sent: "2016-11-26T19:40:37.868Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839e5251dec193f14f2ad91"
    text: {But you don't have to make it a lit-word! param^/```^/red>> apply: func [f [any-function!] arg] [f arg]^/== func [f [any-function!] arg][f arg]^/red>>  apply :empty? []^/== true^/```}
    sent: "2016-11-26T19:40:21.892Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5839e4f11dec193f14f2ac0c"
    text: {```^/red>> apply: func ['f arg] [f arg]^/== func ['f arg][f arg]^/red>>  apply :empty? []^/== true^/```}
    sent: "2016-11-26T19:39:29.983Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5839e3e316207f7b0eab24c2"
    text: {how do I apply quoted function/argument?^/```^/red>> apply: func ['f arg] [get f arg]^/== func ['f arg][get f arg]^/red>> apply empty? []^/== []^/```}
    sent: "2016-11-26T19:34:59.118Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839e1db8d65e3830ea2cab8"
    text: "Agreed. That's a bug."
    sent: "2016-11-26T19:26:19.648Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5839e1d01dec193f14f29f30"
    text: "anyway it shouldn't crash whole runtime :)"
    sent: "2016-11-26T19:26:08.443Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839e1a189d179bf4dca5ccd"
    text: {A map isn't a series. `Change` will set the value at an index in a series though.}
    sent: "2016-11-26T19:25:21.663Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5839e05a16207f7b0eab14a1"
    text: {```^/red>> x: #(1 2)^/== #(^/    1 2^/)^/red>> set x 3 5^/^/*** Runtime Error 1: access violation^/*** at: 0808AB4Ah^/```}
    sent: "2016-11-26T19:19:54.877Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839e00c381827c24d84423d"
    text: "@geekyi `forall` is enough =)"
    sent: "2016-11-26T19:18:36.045Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839dfc973abd79c559d01ac"
    text: {`foreach` or `map-each` (currently rebol only?) might do the job?}
    sent: "2016-11-26T19:17:29.712Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5839dfa28d65e3830ea2bf82"
    text: {@maximvl better question would be, what are you trying to accomplish}
    sent: "2016-11-26T19:16:50.307Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5839d5f073abd79c559cd615"
    text: "it's `change`, silly me )"
    sent: "2016-11-26T18:35:28.216Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839d5b873abd79c559cd51b"
    text: {like^/```^/forall list [ list/(current): transform first list]^/```}
    sent: "2016-11-26T18:34:32.415Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839d562381827c24d840c34"
    text: {is there a simple way to set value in current index in series?}
    sent: "2016-11-26T18:33:06.940Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839c3ab73abd79c559c772a"
    text: {@dockimbel saw that and I am already in the « likers » !}
    sent: "2016-11-26T17:17:31.925Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5839c2d41dec193f14f1fbe3"
    text: "Ok, tweet posted. ;-)"
    sent: "2016-11-26T17:13:56.518Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5839bf2c1dec193f14f1e559"
    text: "Maybe, I have one but it really does not matter! "
    sent: "2016-11-26T16:58:20.941Z"
    editedAt: "2016-11-26T17:00:08.310Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5839ba97444b3778765be3c6"
    text: {@rcqls Great! Do you have a Twitter account, so I can mention you?}
    sent: "2016-11-26T16:38:47.793Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5839abc2381827c24d834069"
    text: {@dockimbel Now, `red` is officially in `Homebrew Caskroom` as a cask. So, `brew update` and then  `brew cask install red`. You can then tweet! Congrats!  }
    sent: "2016-11-26T15:35:30.680Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58398f171dec193f14f10e39"
    text: "@PeterWAWood Thanks for this info!"
    sent: "2016-11-26T13:33:11.589Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58397e678d65e3830ea0fa48"
    text: {@rcqls @dockimbel It seems that Microsoft has started developing a package manager -  https://github.com/Microsoft/vcpkg - though it might only be targetted at C/C++ libs.}
    sent: "2016-11-26T12:21:59.566Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58396f9216207f7b0ea91f0b"
    text: "@dockimbel Ok! I’ll give a look."
    sent: "2016-11-26T11:18:42.739Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58396f5e16207f7b0ea91e40"
    text: {@rcqls `red/scoop-bucket` [created](https://github.com/red/scoop-bucket), feel free to submit PRs.}
    sent: "2016-11-26T11:17:50.148Z"
    editedAt: "2016-11-26T11:18:04.534Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58396f498255fe6b76ce48f3"
    text: {@dockimbel Ok, the outputs are differents now. I already removed everything in `~/.red` to force recompilation. Test with `red —help` works. Thanks!}
    sent: "2016-11-26T11:17:29.417Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58396eda16207f7b0ea91c4b"
    text: {You can try `red --help` and see if `-u` option for libRedRT is mentioned (means latest) or not (means 0.6.1).}
    sent: "2016-11-26T11:15:38.527Z"
    editedAt: "2016-11-26T11:16:28.675Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58396e8b8255fe6b76ce4510"
    text: {@rcqls If `about` gives you the same output, it means you are running the same Red console (which is hidden in your local `%COMMON_APPDATA%` folder). You should clean-up that folder if you are switching between Red versions back and forth.}
    sent: "2016-11-26T11:14:19.337Z"
    editedAt: "2016-11-26T11:14:27.972Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58396dbc8d65e3830ea0bc0f"
    text: {@dockimbel whenever I play with `red(-061)` or `red(-latest)`, `about`(as you suggest before) gives me the same output. So I can’t see if the switch between version works properly.^/Could you remind me a tiny piece of code not suppose to work on `red-061` to be sure. I think I have to wait more than one minute to see the difference between the two `about` outputs.}
    sent: "2016-11-26T11:10:52.269Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5839681316207f7b0ea901ef"
    text: {@dockimbel I can do it first. In terms of visibilty, you add on github a repo called `scoop-red` or `scoop-bucket`. I am thinking of developers looking at `scoop-*`on github and seeing `red/scoop-*`. They can then meet `red`. Moreover, when you want to fix some installation you are free to do it in your repo. But, we can wait if we need it later and of course I can do it. }
    sent: "2016-11-26T10:46:43.344Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583966218255fe6b76ce2335"
    text: {@rcqls I'm not against supporting a wide range of package managers if that can help spread Red, as long as support for them is contributed, our resources being limited.}
    sent: "2016-11-26T10:38:25.088Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583965cf1dec193f14f067c6"
    text: {@dockimbel Yes I know I saw it at the bottom of the download page but I prefer scoop. In terms of visibility chocolatey is a better choice. With scoop you could add a repo in the same way we did with Homebred-red. This is really nice since you are free to offer what you want. I can have a look if you want. The purpose here is not to make red more visible except if I do not realize the impact of scoop today. }
    sent: "2016-11-26T10:37:03.206Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583964b0444b3778765a8221"
    text: {@rcqls Don't know about it. Though, we have Chocolatey support for Windows, thanks to @dander.}
    sent: "2016-11-26T10:32:16.437Z"
    editedAt: "2016-11-26T10:33:30.766Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5839648e8255fe6b76ce1fa8"
    text: {@dockimbel BTW, do you know [scoop](http://scoop.sh). It is an homebrew-like (cask) installer on Windows. I found it interesting when installing Windows tools. Msys2 is really interesting too. }
    sent: "2016-11-26T10:31:42.407Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5839641a1dec193f14f06228"
    text: {@rcqls Got it. I've added your usage info to the README, feel free to send PR to fix/improve it if required.}
    sent: "2016-11-26T10:29:46.005Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583963558d65e3830ea0963f"
    text: {@dockimbel Anticipating the official Homebrew cask (or formula but I think it would be a cask), this is how you can switch to the stable red version:^/```^/brew cask uninstall red-latest^/brew install red^/```^/Since, `red` latest changes very often to install a new latest: `brew reinstall red-latest`.^/Of course, no need to do again `brew tap red/red` since like `deb` this has to be done only once.^/}
    sent: "2016-11-26T10:26:29.247Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58396201381827c24d820c87"
    text: "As soon as I have the answer, I tell you."
    sent: "2016-11-26T10:20:49.836Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583961cc16207f7b0ea8e826"
    text: "I'll wait then."
    sent: "2016-11-26T10:19:56.827Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583961b01dec193f14f0566e"
    text: {@dockimbel Not yet! I think you should wait for official HB PR}
    sent: "2016-11-26T10:19:28.503Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58396191381827c24d820b55"
    text: "Good, so I can tweet it now. ;-)"
    sent: "2016-11-26T10:18:57.118Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5839618116207f7b0ea8e694"
    text: "@dockimbel Thanks! It works!"
    sent: "2016-11-26T10:18:41.726Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5839616189d179bf4dc820c7"
    text: {@rcqls Type `about` in the console, you'll get the build date.}
    sent: "2016-11-26T10:18:09.513Z"
    editedAt: "2016-11-26T10:18:27.283Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5839613f1dec193f14f054ea"
    text: {seems to work! Do you have a tip to know that it is the latest version? I guess not}
    sent: "2016-11-26T10:17:35.739Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58396093381827c24d820765"
    text: "@dockimbel Ok, I'll test that..."
    sent: "2016-11-26T10:14:43.200Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5839604273abd79c559ad5b5"
    text: {@rcqls [Done](https://github.com/red/Homebrew-red).}
    sent: "2016-11-26T10:13:22.593Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58395e8c8255fe6b76ce07fc"
    text: {@dockimbel ^/* create `red/Homebrew-red` as an empty repo^/* create a folder `Casks` inside^/* add the following file `red-latest.rb` in this folder:^/```^/cask 'red-latest' do^/  version :latest^/  sha256 :no_check^/^/   url "http://static.red-lang.org/dl/auto/mac/red-latest"^/   name 'Red Programming Language'^/   homepage 'http://www.red-lang.org'^/^/   container type: :naked^/^/   binary "red-latest", target: 'red'^/end^/```^/* Now to use it: ^/```^/brew tap red/red # mandatory: to add red/Homebrew-red to your local install^/brew tap                 # optional: to check that red/Homebrew-red is in the list^/brew update         # optional: to update brew ^/brew cask search red-latest # optional: to check that red-latest is^/brew cask install red-latest # mandatory: to install red-latest as red binary^/```^/In this tap you could freely put every formulae or casks that you want.}
    sent: "2016-11-26T10:06:04.918Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58395cd689d179bf4dc80dc2"
    text: "@maximvl Regression should be fixed now."
    sent: "2016-11-26T09:58:46.765Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583957fb73abd79c559ab507"
    text: {@dockimbel I do not know it precisely now but, as an example, I know that people from `crystal` has a simple repo `Homebrew-crystal` with simple formulas inside. I am checking for casks integration and I'll tell you more precisely. But I am pretty sure that an empty repo is fine. }
    sent: "2016-11-26T09:38:03.982Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5839568316207f7b0ea8be26"
    text: {@rcqls Do I need to fork an existing repo, or an empty repo is fine?}
    sent: "2016-11-26T09:31:47.297Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5839564f73abd79c559aa99d"
    text: {@maximvl Red's Parse has a few more features and changed some command names (`and` => `ahead`).}
    sent: "2016-11-26T09:30:55.038Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5839545b444b3778765a4674"
    text: {@dockimbel Nice! I’ll try first from my github account to test everything and confirm that everything works properly. Then, you’ll add the cask or formula to `red/Homebrew-red`. Just to be clear,  a tap repo is not visible using `brew search` or `brew cask search` since it is not an offical repo.  It is mostly like `deb` url in the `apt-get` world. }
    sent: "2016-11-26T09:22:35.237Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5839544f73abd79c559aa1f2"
    text: {ok, I will, I was using Rebol parse article on wiki as reference, and it doesn't have `collect/keep` and other new features}
    sent: "2016-11-26T09:22:23.350Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839541516207f7b0ea8b6b6"
    text: "@maximvl Right, it looks related."
    sent: "2016-11-26T09:21:25.934Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583953ff1dec193f14f025e5"
    text: {You should re-read [Parse's intro article](http://www.red-lang.org/2013/11/041-introducing-parse.html) for more examples and documentation.}
    sent: "2016-11-26T09:21:03.060Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583953e9381827c24d81d5bf"
    text: {probably same commit you mentioned caused this:^/```^/>red analizer.red^/*** Syntax Error: missing #"[" at " ]]lines: read/lines %/etc/issuefora"^/*** Where: do^/``` ^/on this code:^/```^/lines: read/lines %/etc/issue^/forall lines [^/   print parse-row first l^/]^/```}
    sent: "2016-11-26T09:20:41.796Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583953ab73abd79c559a9f38"
    text: "@dockimbel cool, thanks!"
    sent: "2016-11-26T09:19:39.669Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839539316207f7b0ea8b48c"
    text: {@maximvl Here are a few examples for `collect/keep` in Parse:^/```lisp^/rule: [keep copy x to end]^/parse [1] [collect rule]^/^/rule: [keep set x to end]^/parse [1] [collect rule]^/^/rule: [keep skip to end]^/parse [1] [collect rule]^/```}
    sent: "2016-11-26T09:19:15.046Z"
    editedAt: "2016-11-26T09:19:25.451Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5839530b16207f7b0ea8b276"
    text: "@maximvl No need, I will look at it right now."
    sent: "2016-11-26T09:16:59.658Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583952f2381827c24d81d0f7"
    text: "@dockimbel should I create issue?"
    sent: "2016-11-26T09:16:34.576Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583952d973abd79c559a9c49"
    text: {@maximvl Probably a regression caused by an earlier commit from today.}
    sent: "2016-11-26T09:16:09.547Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583952ba16207f7b0ea8b12d"
    text: {@dockimbel how can I do that? could you give short example?}
    sent: "2016-11-26T09:15:38.196Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839528b89d179bf4dc7e7ac"
    text: {@maximvl `keep` is defined only inside `collect` function, therefore, you can't use it outside of the argument block (the argument gets bound to `collect` internal context). You can use `collect/keep` from within Parse itself, that would work in such case.}
    sent: "2016-11-26T09:14:51.895Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583952261dec193f14f01e9a"
    text: {running this file fails: https://gist.github.com/maximvl/8b520968a1149467ae0c12f5d2e89668^/```^/>red analizer.red^/*** Error: not a Red program!^/```}
    sent: "2016-11-26T09:13:10.362Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583951be8d65e3830ea05064"
    text: {@rcqls Adding a new `red/Homebrew-red` repository is fine.}
    sent: "2016-11-26T09:11:26.642Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5839512b444b3778765a36d3"
    text: {@dockimbel It makes sense to have it (from few months) and that’s right it is not so visible (so I am not so stupid) but the good news is that it exists. ^/BTW, I am waiting for the final decision about the PR of the cask. After a  long discussion, I think Homebrew Caskroom members (in coordination with Homebrew members) now understand that Red is an open-source project. They were hesitating since they did not understand first that `red-061` depends currently on Rebol SDK and make install from source impossible or maybe very difficult. I did my best to convince them that soon Red would depend only on Red. When Red can self-bootstrap the cask will become  a formula (since red could be installed from source).  In terms of visibility, `brew search red` redirects to the cask so the visibility is mostly the same as a formula. Another point is that when a formula is source-based, it does not mean that each installation of Red via brew is made by compiling the source. It would be the same as copying the red binary. ^/I’ll try the idea to install red-latest from a tap. After, if you agree, you could then create (after my test) a tap repository `Homebrew-red` where to put the cask and the formula as we wish since a tap does not rely on HB and HBC members. A tap is maybe good also in terms of visibility since people can check on Github every repo with name of the form `Homebrew-*` dedicated to tap.}
    sent: "2016-11-26T09:08:59.383Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583950bc73abd79c559a9241"
    text: {@maximvl Whitespaces separating tokens is not a mandatory rule in Red/Rebol syntax. They are mandatory only when there are no other delimiters. Though, most of the time, it is visually more appealing to have tokens separated by a whitespace.}
    sent: "2016-11-26T09:07:08.649Z"
    editedAt: "2016-11-26T09:07:16.035Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583950a5381827c24d81c7e7"
    text: {how do I use `collect/keep` in separate rules?^/```^/red>> collect [parse [1] [copy x to end (keep x) end]]^/== [1]^/red>> rule: [copy x to end (keep x) end]^/== [copy x to end (keep x) end]^/red>> collect [parse [1] rule]^/*** Script Error: keep has no value^/*** Where: parse^/```}
    sent: "2016-11-26T09:06:45.552Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58394ff3381827c24d81c586"
    text: {@dockimbel it's ok, just looks a bit inconsistent }
    sent: "2016-11-26T09:03:47.389Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58394fab381827c24d81c49c"
    text: {@maximvl It is, because `#` is not allowed in words, so there is no ambiguity in the syntax, `#(` serves as a delimiter. Same as `type?[]` or `word()`. This broadens the lexical space Red accepts as input, without breaking the lexical rules, which is good for DSLs.}
    sent: "2016-11-26T09:02:35.644Z"
    editedAt: "2016-11-26T09:03:47.577Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58394cc716207f7b0ea89a24"
    text: {it seems that `#` is allowed to use without space separation:^/```^/red>> type?#(1 2)^/== map!^/```}
    sent: "2016-11-26T08:50:15.717Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58394b99381827c24d81b4dc"
    text: {@rcqls It's there since a few months, though not very visible.}
    sent: "2016-11-26T08:45:13.479Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583947878d65e3830ea022d0"
    text: {@Phryxe I created this directory and file with `Red []`, at least repl is not failing now}
    sent: "2016-11-26T08:27:51.363Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839471c8d65e3830ea02175"
    text: "^^ same on linux"
    sent: "2016-11-26T08:26:04.346Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5839416b381827c24d819217"
    text: {With latest automated build on Win 10. The environment dir is missing ...}
    sent: "2016-11-26T08:01:47.920Z"
    editedAt: "2016-11-26T08:03:48.179Z"
    v: 2
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "583941361dec193f14efd72b"
    text: {```^/Compiling Red GUI console...^/*** Driver Internal Error: Access Error : Cannot open /D/Program/Red/environment/macros.red^/*** Where: read-cache^/*** Near:  [any [get-cache file read file]]^/```}
    sent: "2016-11-26T08:00:54.832Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58393da389d179bf4dc79484"
    text: {@dockimbel Did you add it just after my message? Or am I so stupid to not notice it? Excellent!}
    sent: "2016-11-26T07:45:39.721Z"
    editedAt: "2016-11-26T07:46:39.622Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583913298d65e3830e9f7728"
    text: {@rcqls It's already there, see the bottom of the Download page or just try your URL. ;-)}
    sent: "2016-11-26T04:44:25.807Z"
    editedAt: "2016-11-26T04:44:54.006Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58390cda1dec193f14ef25d3"
    text: {@dockimbel Just a question about the name of the latest automated build? The url is `http://static.red-lang.org/dl/auto/mac/red-26nov16-cc699fc` (for example). Could it be possible to provide another link `http://static.red-lang.org/dl/auto/mac/red-latest` pointing on `http://static.red-lang.org/dl/auto/mac/red-26nov16-cc699fc`. Since, red is evolving a lot it would be nice to have a cask (or formula) to install it very easily. We can create a tap (personal repo) Homebrew-red with folfer Casks containing this cask. ^/```^/cask ‘red-latest' do^/  version :latest^/  sha256 :no_check^/ ^/   url "http://static.red-lang.org/dl/mac/red-#{version.no_dots}"^/   name 'Red Programming Language'^/   homepage 'http://www.red-lang.org'^/ ^/   container type: :naked^/ ^/   binary "red-#{version.no_dots}", target: ‘red'^/end^/``` ^/After initializing the tap, you could alternatively install :^/* stable red : `brew cask install red` or `brew install Caskroom/cask/red` (assuming they accept the last PR)^/* latest automated red: `brew cask reinstall red-latest`^/^/If it is not possible to have download url `http://static.red-lang.org/dl/auto/mac/red-latest`, one can manually update the tap to the latest interesting version. This is also interesting...}
    sent: "2016-11-26T04:17:30.303Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5838b7e189d179bf4dc5c1fe"
    text: {`[:xdigit:]` is equivalent to `0-9A-Fa-f` hence the need for one more pair of brackets around it...^/}
    sent: "2016-11-25T22:14:57.112Z"
    editedAt: "2016-11-25T22:15:09.196Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5838b7891dec193f14ede117"
    text: {The above code should be:^/```^/>>grep "[[:xdigit:]]{2,8}h" %sources/^/```^/}
    sent: "2016-11-25T22:13:29.162Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5838b6d289d179bf4dc5be79"
    text: {As you see, it works by converting the regexp to a Red parse rule block, but not by using parse itself for the conversion, but rather a direct traversal of the regexp string. It is probably not foolproof with respect to meta-characters. Comments are very welcome. I sent a slightly earlier version to @dockimbel already, on his request, before I was sure enough of the quality. }
    sent: "2016-11-25T22:10:26.889Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5838b40d16207f7b0ea66a97"
    text: {@greggirwin I now feel somewhat confident to publish my grep implementation: [here it is](https://gist.github.com/meijeru/badcc5184f312aedf51a010b4718a148). It is limited to ASCII regexps, and has only a few options, but should be very practical for answering such questions as: in which lines of any of the files of the toolchain is there a hexadecimal number. That would be e.g.^/```^/>>grep "[[:xdigit:]{2,8}h" %sources/^/```^/It did this, searching ~156000 lines in ~440 files in under 2 seconds.^/}
    sent: "2016-11-25T21:58:37.267Z"
    editedAt: "2016-11-25T22:01:08.051Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58387eabb9016e42149ad421"
    text: {https://gist.github.com/greggirwin/0e9085af43984f1fdf400498ba8ceb11 is my old `like?` func. Is yours something like that @meijeru? Or did you go more full regex compatible? I think something like this (not my code, but the functionality) would be both useful and a nice example. }
    sent: "2016-11-25T18:10:51.520Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58387b748d65e3830e9d1026"
    text: {`like + rawk + rgrep` = ~330 LoC. The big one is the file-list stuff, that was an experiment in dialect design. It's large because it has sub-dialects for filtering by date, size, and attributes, in addition to globbing on the name.}
    sent: "2016-11-25T17:57:08.176Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583830fbb9016e4214992601"
    text: {For the moment, you can save an `image!` value as JPEG, PNG, BMP, GIF or TIFF. See `help save`. You can make an `image!` value from any `face` object using `to-image`. The JPEG etc. file you can turn into a PDF using print to PDF (facility existing on every OS, I think).  }
    sent: "2016-11-25T12:39:23.492Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "583829ae444b377876556038"
    text: {how do I safe a pdf file from gui? - thanks for help - BR EP}
    sent: "2016-11-25T12:08:14.128Z"
    v: 1
    author: "5836a57fd73408ce4f384bc8"
) #(
    id: "5837ce6789d179bf4dc10d8a"
    text: "@dockimbel done!"
    sent: "2016-11-25T05:38:47.804Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5837cd0116207f7b0ea1bbd7"
    text: {@rcqls Let's try to own the `red` name, so `red.rb`.}
    sent: "2016-11-25T05:32:49.481Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5837c81389d179bf4dc0f49b"
    text: {@dockimbel I’ll send a pull request then. `red.rb` or `red-lang.rb`? }
    sent: "2016-11-25T05:11:47.029Z"
    editedAt: "2016-11-25T05:13:44.439Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5837c78616207f7b0ea1a339"
    text: {@rcqls Looks good to me, let's use that. Thanks a lot for your efforts and help with that.}
    sent: "2016-11-25T05:09:26.556Z"
    editedAt: "2016-11-25T05:10:36.649Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5837c75d8255fe6b76c702ac"
    text: {@greggirwin Having strong CLI tools for Red is desirable (as long as the payload is light enough).}
    sent: "2016-11-25T05:08:45.080Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5837c70889d179bf4dc0f0e3"
    text: {@dockimbel `brew cask install red`  (or `brew cask install red-lang`)}
    sent: "2016-11-25T05:07:20.401Z"
    editedAt: "2016-11-25T05:07:57.942Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5837c64789d179bf4dc0edcf"
    text: {@rcqls What command-line would users type to install such cask?}
    sent: "2016-11-25T05:04:07.946Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5837b701b9016e421496bd00"
    text: {@dockimbel As I told you, an alternative proposed by Homebrew members is to install red through a cask devoted to binary stuff.  This is the cask `red.rb` to possibly propose as a pull request to repo Homebrew-cask avaliable then at [caskroom.io](http://caskroom.io)^/Maybe it would be better to rename it `red-lang.rb`.^/```^/cask 'red' do^/  version '0.6.1'^/  sha256 "afefaa392e5dbc1ec6d8805376ecffe86a1f6d1ce46d426800556f3c4f698693"^/^/  url "http://static.red-lang.org/dl/mac/red-061"^/  name 'red-lang'^/  homepage "http://www.red-lang.org"^/^/  container type: :naked^/^/  binary 'red'^/^/  preflight do^/    system_command '/bin/mv', args: ["#{staged_path}/red-061", "#{staged_path}/red"]^/  end^/^/  postflight do^/    set_permissions "#{staged_path}/red", '0755'^/  end^/end^/```^/ Maybe, it will be also possible to prepare a cask for automated build...}
    sent: "2016-11-25T03:58:57.215Z"
    editedAt: "2016-11-25T04:00:26.664Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58375236444b377876519cd0"
    text: {@meijeru and @dockimbel, I have some old stuff I haven't ported to Red. A `like?` func that converts glob patterns to parse rules, file list builders, an AWK dialect, and a grep built on that. I did them looooonnnggg ago, so a rethink would be good. Ultimately, I would like to have CLI tools that are strong enough to be a portable shell. Mine were only built for me. :^^\ }
    sent: "2016-11-24T20:48:54.173Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58374be88255fe6b76c4fcf7"
    text: {<breakout>Brew is an obfuscating process, not suitable for elegant stuff like Rebol and Red.  Never ever liked brew anyway and all software I ever installed using brew was a disappointment at most. All selfrespecting software should be able to install itself or not be installed at all.</breakout>}
    sent: "2016-11-24T20:22:00.963Z"
    editedAt: "2016-11-24T20:26:30.582Z"
    v: 3
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58372f91381827c24d783f07"
    text: {Nerds, probably living on some distant, imaginatory planet, with their own rules ...}
    sent: "2016-11-24T18:21:05.601Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58372f5b89d179bf4dbe52ef"
    text: "sad and funny :("
    sent: "2016-11-24T18:20:11.479Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583728f08d65e3830e968b50"
    text: {@dockimbel I did my best to convince Homebrew members to accept the pull request but they want source installation. They think it is feasible so I have to ask you if you agree with them.^/I think rebol2 SDK is required from now to create red-061 and soon red-062. Maybe, with your new development you could propose this kind of installation. They also say that you could  create a tap (Homebred-red repo with the red formula) but it is not visible  for Homebrew users. However, you could use the `brew` command to install red executable. }
    sent: "2016-11-24T17:52:48.789Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58371c878d65e3830e964974"
    text: {@maximvl I agree with you and it is what I tried to explain. They think  that binary executable does not look like open-source project. I gave us the link of the github project. I can also understand that binary is risky when considering security issues. Homebrew Cask is maybe more well-suited. I have to check...}
    sent: "2016-11-24T16:59:51.463Z"
    editedAt: "2016-11-24T17:00:53.360Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58371aec444b377876507144"
    text: {@rcqls source-based installations should have commands to compile binary, shouldn't they?}
    sent: "2016-11-24T16:53:00.886Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583710fe1dec193f14e5b3ad"
    text: {@dockimbel The pull request seems to be rejected since homebrew only accepts source-based installation and red is currently a binary. As an alternative there is Homebrew Cask devoted to binary install. Do you still want me to look through this new direction? }
    sent: "2016-11-24T16:10:38.426Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5836ce66bc17b2e7560dbcc3"
    text: {FYI, I have changed the default behavior of pattern-matching macros, so existing code will not work. Please have a look at the related [commit](https://github.com/red/red/commit/38dd528bc001656d6a009f32cbc06b8db7c7f391) and updated [documentation](https://doc.red-lang.org/preprocessor.html#macro). Basically, by default now, pattern-matching macros returned value is replacing the matched pattern (similar to named macros). You can get back the old behavior by inserting a `[manual]` attribute in the macro spec.}
    sent: "2016-11-24T11:26:30.779Z"
    editedAt: "2016-11-24T11:29:27.622Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5836c7cf7f83e6c97729a2aa"
    text: {@meijeru I don't think it is worth the trouble of writing code to sync such sets, as adding members to `any-string` would affect several files and code in the runtime anyway. Moreover, those R/S macros should be replaced at some point by bitsets lookups.}
    sent: "2016-11-24T10:58:23.320Z"
    editedAt: "2016-11-24T10:59:42.843Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5836c09dc790e0ec56271923"
    text: {The grep works by converting the regexp to a parse rule. I will send it to you by mail first, later today. It is probably not yet mezzanine quality.}
    sent: "2016-11-24T10:27:41.769Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5836c047b07a1fd34836efaf"
    text: {I made a suggestion earlier about keeping typesets like `any-string` and `#defines` like `TYPE_ANY_STRING` in sync by the use of macros. Or maybe you can solve that by `#do`, I don't know.}
    sent: "2016-11-24T10:26:15.237Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5836c00d2db9526704760b95"
    text: {@meijeru I would be curious to see your Red `grep` code, if you are willing to share it.}
    sent: "2016-11-24T10:25:17.357Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5836bfa7bc17b2e7560d6a16"
    text: {@meijeru You mean the runtime library, not the toolchain? We will be adding some soon.}
    sent: "2016-11-24T10:23:35.833Z"
    editedAt: "2016-11-24T10:24:37.568Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5836bf4abc17b2e7560d688a"
    text: {@dockimbel On macros: as far as I can see the toolchain itself does not use macros yet. Do you see any scope for that? Incidentally, I did this check using my own implementation in Red of (a practical subset of) **grep**, the Unix/Linux utility.}
    sent: "2016-11-24T10:22:02.980Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5836b21e2db952670475bad7"
    text: "@ifgem `context? 'word` ;-)"
    sent: "2016-11-24T09:25:50.230Z"
    editedAt: "2016-11-24T09:25:58.739Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5836a3009a5479d048562551"
    text: "@dockimbel is there any way to get word! context?"
    sent: "2016-11-24T08:21:20.106Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583639809a5479d048545e57"
    text: {@rcqls Great! Let me know when it's accepted, so I can tweet it (or retweet you if you post).}
    sent: "2016-11-24T00:51:12.439Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5835d3d0b07a1fd348322494"
    text: {@dockimbel done! Waiting for acceptance of pull request. We’ll see...}
    sent: "2016-11-23T17:37:20.770Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835d1a752af72f05433b18e"
    text: {@dockimbel it definitely does increase interop, very cool}
    sent: "2016-11-23T17:28:07.327Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5835cf37c790e0ec56223bbd"
    text: "Thanks a lot!"
    sent: "2016-11-23T17:17:43.196Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5835cf162db9526704711ebf"
    text: "@dockimbel No problem! I’ll do it."
    sent: "2016-11-23T17:17:10.169Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835ced39a5479d04851f30d"
    text: {@rcqls Could you please take care of the whole submission process? Reading all the docs and setting up all the tools is just too time-consuming for me.}
    sent: "2016-11-23T17:16:03.679Z"
    editedAt: "2016-11-23T17:16:32.134Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5835cd9cc790e0ec562230de"
    text: "Of course, this can be done in `red`."
    sent: "2016-11-23T17:10:52.078Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
)#(
    id: "5835ccf32db95267047110cd"
    text: {ok, the sha256 field is just `shasum -a 256 red061`. So you could update easily the `red.rb` file even on Windows (I think) since you only need to update the red binary.  }
    sent: "2016-11-23T17:08:03.596Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835cb4abc17b2e756088690"
    text: {As I told you, to be accepted the pull request has to satisfiy `brew audit` and it was the case with the `red.rb`}
    sent: "2016-11-23T17:00:58.272Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835cab2cc0ea2cf77889995"
    text: {@dockimbel I think you can just add the `red.rb` in the forked repo even on Windows. `brew create` which generates the first file `red.rb` puts it in the folder `/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core`. That’s why `brew --repository homebrew/core` is mentionned. My only problem is to know how the sha256 is generated by `brew create`.}
    sent: "2016-11-23T16:58:26.471Z"
    editedAt: "2016-11-23T16:58:57.647Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835c8dd9a5479d04851ccc9"
    text: {@dockimbel `brew --repository homebrew/core` corresponds to `/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core` in a regular brew install. The second section maybe is better. I read it more carefully}
    sent: "2016-11-23T16:50:37.930Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835c77a2db952670470e726"
    text: "or maybe not! I’ll check.."
    sent: "2016-11-23T16:44:42.726Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835c7472db952670470e5e6"
    text: "How convenient..."
    sent: "2016-11-23T16:43:51.181Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5835c732cc0ea2cf7788837f"
    text: "@dockimbel yes I think so!"
    sent: "2016-11-23T16:43:30.615Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835c704b07a1fd34831ccd7"
    text: {@rcqls How am I supposed to run this on Windows: `cd $(brew --repository homebrew/core)`? So you need to be on a Mac to contribute a new formula?}
    sent: "2016-11-23T16:42:44.578Z"
    editedAt: "2016-11-23T16:42:52.877Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5835c5fdb07a1fd34831c7af"
    text: {@greggirwin first input doesn't work for string! `parse/trace "@@@@" [4 "@"] my-trace -> none`}
    sent: "2016-11-23T16:38:21.521Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5835c59c9a5479d04851baaa"
    text: {see `https://github.com/Homebrew/brew/blob/master/docs/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md`}
    sent: "2016-11-23T16:36:44.883Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835c56fb07a1fd34831c51d"
    text: {@dockimbel  Sorry, the homebrew repo with all the formulas.}
    sent: "2016-11-23T16:35:59.575Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5835c522bc17b2e756085cc6"
    text: {@rcqls ^/> The process for submitting seems to be by cloning the repo ^/^/Which repo?}
    sent: "2016-11-23T16:34:42.721Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5835c4329a5479d04851afec"
    text: {@ifgem, you should, I think, be able to use `first input` in the `match` case in your callback. Callback not working for me right now. Getting this error, even with the standard callback:^/```^/parse/trace "abc123" [some skip] :on-parse-event^/*** Script Error: invalid type specifier: [event [word!] match? [logic!] rule [block!] input [series!] stack [block!] return: [logic!]]^/```^/`parse-trace` works fine. Will try to look into it later.}
    sent: "2016-11-23T16:30:42.216Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5835c35c16ee9e640479070f"
    text: "@rcqls Great! Thanks a lot! "
    sent: "2016-11-23T16:27:08.013Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5835c1aacc0ea2cf778863d6"
    text: {@dockimbel how can I get the last value matched in parse/trace callback function?}
    sent: "2016-11-23T16:19:54.344Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58358b347f83e6c97722cd46"
    text: {@dockimbel as you suggest the formula below saved as `red.rb` make the trick onmy computer. I have checked that `brew audit` works properly. The process for submitting seems to be by cloning the repo and submitting a pull request. To test the formula, just copy-paste it and `brew install red.rb`. When in the official repo of homebrew, only `brew update` and `brew install red` is required (of course).  ^/```^/class Red < Formula^/  desc "Next-gen programming language, strongly inspired by REBOL"^/  homepage "http://www.red-lang.org"^/  url "http://static.red-lang.org/dl/mac/red-061"^/  sha256 "afefaa392e5dbc1ec6d8805376ecffe86a1f6d1ce46d426800556f3c4f698693"^/  head "https://github.com/red/red.git"^/^/  def install^/    mv "red-061", "red"^/    bin.install "red"^/  end^/^/  test do^/    system "#{bin}/red", "--version"^/  end^/end^/```}
    sent: "2016-11-23T12:27:32.275Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58357bf116ee9e6404774635"
    text: "@qtxie thanks. It works now."
    sent: "2016-11-23T11:22:25.128Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58357a49c0a2732923007545"
    text: {@ifgem Terminate all the gui console processes and delete the `console-cfg.red` file in `C:\ProgramData\Red`.}
    sent: "2016-11-23T11:15:21.584Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5835704a9a5479d0484fa4b1"
    text: {@dockimbel it's working(process), but I can't see the console^/http://imgur.com/a/9ILsz}
    sent: "2016-11-23T10:32:42.012Z"
    editedAt: "2016-11-23T10:33:01.493Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58356f31b07a1fd3482fb365"
    text: "@qtxie  ^^--- Please have a look at that."
    sent: "2016-11-23T10:28:01.541Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58356ee89a5479d0484f9d64"
    text: {@dockimbel can't launch gui console on Windows 7, cli version works fine:)}
    sent: "2016-11-23T10:26:48.430Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58356e2bcc0ea2cf77866d95"
    text: {Are u sure? Among developers it is for sure but arround me most mac users are not developers (no xcode installed) and would be really interested in Red for its simplicity. I am pretty busy from now but I can have a look .}
    sent: "2016-11-23T10:23:39.684Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58356e152db95267046ecec7"
    text: {it is, Nix is very geeky and few people know about it}
    sent: "2016-11-23T10:23:17.484Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58356c717f83e6c977221fd0"
    text: {Right, macport support would also be nice, though, it seems brew is the most used one from what I can see.}
    sent: "2016-11-23T10:16:17.122Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58356bc82db95267046ec0ef"
    text: {@dockimbel The point is that I think homebrew is mostly devoted to developers who have no difficulty to install Red. Maybe it is also better to provide macport installer or any other binary installation system. There is nix too which is also useable for both linux and MacOSX. }
    sent: "2016-11-23T10:13:28.012Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58356a837f83e6c977221658"
    text: {@rcqls You're right, it is just for marketing purpose, many newcomers may not be aware that Red is a no-brainer to install (as there's nothing to "install" really), so they might skip it if it doesn't use the mainstream way for installing command-line tools on Mac.}
    sent: "2016-11-23T10:08:03.186Z"
    editedAt: "2016-11-23T10:08:23.059Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583569ef7f83e6c9772212e0"
    text: {@dockimbel At first, I can’t see the usefulness of brew for red install. It is so simple to install? Maybe I miss something. Oh! Maybe to have the executable in some folder in the PATH.}
    sent: "2016-11-23T10:05:35.921Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "583568ecb07a1fd3482f9068"
    text: {Talking about Mac, is anyone here interested in providing a [brew](https://github.com/Homebrew/brew/blob/master/docs/README.md) for Red?}
    sent: "2016-11-23T10:01:16.713Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5835657bb07a1fd3482f7a5d"
    text: {@ifgem Happens sometimes, our Mac backend is located very far from our main server, and has very little available bandwidth, so it can fail to deliver the build in time. I re-launched the build script manually, the Mac build is available now.}
    sent: "2016-11-23T09:46:35.235Z"
    editedAt: "2016-11-23T09:51:19.529Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5835650f9a5479d0484f5fd1"
    text: {@dockimbel http://www.red-lang.org/p/download.html^/can't download Macos executable.}
    sent: "2016-11-23T09:44:47.877Z"
    editedAt: "2016-11-23T09:44:56.244Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583564352db95267046e9486"
    text: {@DonaldTsang ^/> @dockimbel When will Red add support for LLVM on its roadmap (since Emscripten allows LLVM bytecode to compile to asm.js, for use in browsers)?^/^/Why do you think using LLVM to generate asm.js is the best option? I think a direct R/S to asm.js could be very efficient and would require much less efforts. Moreover, it would probably enable a better and more direct matching between R/S language and JS.}
    sent: "2016-11-23T09:41:09.269Z"
    editedAt: "2016-11-23T09:41:24.818Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583562f4c790e0ec561fa796"
    text: {@JacobGood1 ^/> @dockimbel does libRed allow for easier interop with C?^/^/It allows C (or other langs with basic FFI) to embed Red, run Red code and interact with the Red environment.}
    sent: "2016-11-23T09:35:48.497Z"
    editedAt: "2016-11-23T09:36:48.807Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58340c32b07a1fd34827e6e6"
    text: "Just found beautiful Runtime crash:)))"
    sent: "2016-11-22T09:13:22.842Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58336e4a7f83e6c9771768c4"
    text: {No there aren't, but as this is one of the main additions of 0.6.2, I am sure that the accompanying blogpost will give the necessary info.}
    sent: "2016-11-21T21:59:38.118Z"
    editedAt: "2016-11-21T22:02:36.972Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5833674923157bcb1cc139fb"
    text: "@meijeru are there any docs for it yet?"
    sent: "2016-11-21T21:29:45.745Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "583366b4c0a2732923ffe5fa"
    text: "@meijeru ty, looks very cool..."
    sent: "2016-11-21T21:27:16.883Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5833663ebc17b2e756fb3cbc"
    text: {@JacobGood1 please see the conversation starting at https://gitter.im/red/red?at=58318920613368f619d66e6b}
    sent: "2016-11-21T21:25:18.100Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58334c4b52af72f05432f67f"
    text: {@dockimbel I am sure that you are going to make a blog post about this, however, I thought I would ask anyway:^/does libRed allow for easier interop with C?}
    sent: "2016-11-21T19:34:35.720Z"
    editedAt: "2016-11-21T19:35:23.272Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58334c049fd0a9bb47093205"
    text: {I am glad Doc trusts the users of his language enough to use things like this, a lot of languages nowadays are doing everything they can to limit bugs... by handicapping the programmers}
    sent: "2016-11-21T19:33:24.530Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58334b7fc0a2732923ffdd88"
    text: "erm typed... you get the point"
    sent: "2016-11-21T19:31:11.626Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58334b73c0a2732923ffdd78"
    text: "whoops should have said dialects =P"
    sent: "2016-11-21T19:30:59.951Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58334b3452af72f05432f63a"
    text: {@pekr the original argument for macros was to eliminate run time over head for certain dsls, so there is no overhead if one does it right.}
    sent: "2016-11-21T19:29:56.878Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58334aa023157bcb1cc131a2"
    text: {@ifgem context should allow red to experience less collision problems, well have to see}
    sent: "2016-11-21T19:27:28.865Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58334a7f9fd0a9bb470931b4"
    text: "@dockimbel those improvements sound great"
    sent: "2016-11-21T19:26:55.395Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58334a3b23157bcb1cc1317c"
    text: "lol, finally the rebolites see the light"
    sent: "2016-11-21T19:25:47.714Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "583340992db952670462cdaa"
    text: "Hi"
    sent: "2016-11-21T18:44:41.806Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583333b7bc17b2e756f9efbd"
    text: {@ifgem  Whoa! Macros look very interesting for dialects. I need to wrap my head around it to understand pros & cons, and when I would use macros instead of parse (or a combination?). Thanks for those examples.}
    sent: "2016-11-21T17:49:43.257Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "583330debc17b2e756f9dfe7"
    text: {@dockimbel When will Red add support for LLVM on its roadmap (since Emscripten allows LLVM bytecode to compile to asm.js, for use in browsers)?}
    sent: "2016-11-21T17:37:34.110Z"
    editedAt: "2016-11-21T17:39:35.336Z"
    v: 2
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "583328b0b07a1fd348234be4"
    text: "@rebolek thanks:)"
    sent: "2016-11-21T17:02:40.424Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5833285f23157bcb1cc12363"
    text: {@ifgem for example:^/```^/red>> dt: func [code /local t][t: now/time/precise do code now/time/precise - t]^/== func [code /local t][t: now/time/precise do code now/time/precise ...^/red>> dt [loop 10000 [1 + 1]]^/== 0:00:00.001147001^/red>> dt [loop 10000 [add 1 1]]^/== 0:00:00.001780001^/```}
    sent: "2016-11-21T17:01:19.951Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "583327be16ee9e64046a2f8f"
    text: {@dockimbel sorry for silly question, but how can I  measure code performance in Red?}
    sent: "2016-11-21T16:58:38.178Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583326f29fd0a9bb47091ec0"
    text: {Indeed, nice examples @ifgem, macros look pretty cool.}
    sent: "2016-11-21T16:55:14.444Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583320f7cc0ea2cf7779b1a8"
    text: {That sounds like a nice feature @dockimbel. Nice examples @ifgem.}
    sent: "2016-11-21T16:29:43.658Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58331f3b16ee9e640469f499"
    text: {I think I need to add something to pattern-matching macros to auto-replace the matched input with the returned value by default (like named macros), and optionally support the version where you can do whatever you want with the input/output.}
    sent: "2016-11-21T16:22:19.504Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58331db0b07a1fd34822f934"
    text: "@ifgem Cool one. ;-)"
    sent: "2016-11-21T16:15:44.453Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5833191e16ee9e640469c92a"
    text: {@dockimbel omg!!!!^/```^/#macro ['sum 'of integer! 'and integer! 'named word!] func [start end] [^/^-change/part start^/^-^-compose/deep [^/^-^-^-(to set-word! start/7) routine [return: [integer!]]^/^-^-^- [^/^-^-^-^-(start/3) + (start/5)^/^-^-^-]^/^-^-]^/^-end^/^-start^/]^/^/sum of 50 and 30 named wow^/print wow^/```}
    sent: "2016-11-21T15:56:14.008Z"
    editedAt: "2016-11-21T15:58:46.935Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58331569e712c9a118952978"
    text: {@pekr yes. I guess, you only loose some compilation speed as Red has to parse your code using parse dialect. Well, I have an idea to implement list comprehention:^/```^/~[ [x + 1] | x in [1 2 3] ]^/```^/We already have an interpreted version of it, written by Maxim, but now it's possible to compile it into ordinary Red code, that will be executed much faster:))}
    sent: "2016-11-21T15:40:25.839Z"
    editedAt: "2016-11-21T15:45:55.153Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58331497238757566cd4871b"
    text: {What is the macro performance overhead? I can see, we can crete alternative syntaxes, that's nice, while also scary :-), but e.g. when interpreted, the macro just replaces (expand) original source code, so in the end, regular Red code is evaluated?}
    sent: "2016-11-21T15:36:55.681Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "583312e2b563b5516c4950c5"
    text: "@ifgem i see, impressive :)"
    sent: "2016-11-21T15:29:38.713Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58330fe95eb8ea792a4a249c"
    text: {@maximvl change/part start (content) end replaces the result of match with content}
    sent: "2016-11-21T15:16:57.414Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58330f81238757566cd4654c"
    text: {Here's another macro:))).^/```^/#macro ['for word! 'in series! block!] func [start end] [^/^-change/part start^/^-^-reduce [^/^-^-^-'foreach start/2 start/4 start/5^/^-^-]^/^-end^/^/^-start^/]^/^/for wow in [1 2 3 4 5] [^/^-print wow^/]^/```}
    sent: "2016-11-21T15:15:13.903Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58330eb0613368f619dde99a"
    text: {As I undestand it, if want to execute what macro generated you need to return start, if you just want to do some computing in compile time without executing generated code you need to return end.}
    sent: "2016-11-21T15:11:44.861Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58330e2e238757566cd45b0b"
    text: {Now it's compiled rather than executed in compile time}
    sent: "2016-11-21T15:09:34.173Z"
    editedAt: "2016-11-21T15:09:42.039Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58330e18297a180b4f1fa7f8"
    text: {@maximvl, my macro wasn't correct. Here's correct version^/```^/#macro [integer! 'times block!] func [start end][^/    change/part start^/    ^-reduce [^/    ^-^-'loop start/1 start/3^/    ^-]^/    end^/    start^/]^/^/5 times [^/^-wow: []^/^-append wow "@"^/^/^-probe wow^/]^/```}
    sent: "2016-11-21T15:09:12.006Z"
    editedAt: "2016-11-21T15:12:07.030Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58330ce1e712c9a11894f0f8"
    text: {ok, `e` is environment, but I still don't get whole idea of changing `s` with `/part e`}
    sent: "2016-11-21T15:04:01.140Z"
    editedAt: "2016-11-21T15:04:10.509Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58330abcb563b5516c491e76"
    text: {@ifgem what is `e`, why do you specify it as `/part` ?}
    sent: "2016-11-21T14:54:52.021Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58330a22297a180b4f1f8ec7"
    text: "I though this is what advances the input position"
    sent: "2016-11-21T14:52:18.461Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58330a15613368f619ddccb2"
    text: "wait, but you skipped `next s` as result"
    sent: "2016-11-21T14:52:05.318Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583309ea297a180b4f1f8d38"
    text: {@maximvl if you don't change it(currently matched pattern), it'll be processed over and over again.^/```^/#macro [^/    integer!^/    'times^/    block!^/] func [s e] [^/    ^-loop s/1 s/3 s^/]^/```}
    sent: "2016-11-21T14:51:21.997Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "583308e0b563b5516c49114b"
    text: "@maximvl try to run this code with #trace on."
    sent: "2016-11-21T14:46:56.141Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5833081f238757566cd437ce"
    text: {@ifgem I'm not getting the idea of `change/part` here, why do you nee it?}
    sent: "2016-11-21T14:43:43.050Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "583307b1238757566cd4355a"
    text: {@maximvl  now we can implement loop macro by the Red way:))}
    sent: "2016-11-21T14:41:53.944Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5833074323ce1ae73c0b5fe6"
    text: "I didn't realize it works like this"
    sent: "2016-11-21T14:40:03.781Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5833071fe712c9a11894cb14"
    text: "@ifgem wow, very nice!"
    sent: "2016-11-21T14:39:27.880Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5832ffba238757566cd40776"
    text: {@ifgem Up to you. Order definition matters. You can also use `#local` when possible.}
    sent: "2016-11-21T14:07:54.164Z"
    editedAt: "2016-11-21T14:08:20.257Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5832fb08297a180b4f1f2a87"
    text: "@dockimbel how to solve macros collision?:)))"
    sent: "2016-11-21T13:47:52.989Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5832fa25b7cf637f2ac9f5c8"
    text: {@pekr No, macros are supported by the interpreter too. Though, you either need to put them in a file and `do %file` or use the `expand-directives` function.}
    sent: "2016-11-21T13:44:05.247Z"
    editedAt: "2016-11-21T13:44:43.309Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5832f6065eb8ea792a497da9"
    text: "Those are compile only macros, right?"
    sent: "2016-11-21T13:26:30.004Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5832f56a613368f619dd4b38"
    text: {It seems so. :) I knew allowing macros would be like opening the Pandora's box. ;-)}
    sent: "2016-11-21T13:23:54.434Z"
    editedAt: "2016-11-21T13:25:53.977Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5832f55d238757566cd3c698"
    text: "@dockimbel you've woke the dragon:)"
    sent: "2016-11-21T13:23:41.041Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5832f538613368f619dd49d6"
    text: "Oh my... :scream:  :-)"
    sent: "2016-11-21T13:23:04.624Z"
    editedAt: "2016-11-21T13:23:25.155Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5832f4fcb7cf637f2ac9d0db"
    text: {@dockimbel let's port what we love from Python/Ruby:)).}
    sent: "2016-11-21T13:22:04.913Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5832f4dcb563b5516c488a89"
    text: "@ifgem Right. ;-)"
    sent: "2016-11-21T13:21:32.561Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5832f4c6b563b5516c488a5e"
    text: {@dockimbel, Magic!!!^/```^/#macro [^/^-integer!^/^-'times^/^-block!^/] func [s e] [^/^-change/part s ^/^-^-loop s/1 s/3^/^- e^/^-next s^/]^/^/10 times [^/^-print "hello"^/]^/```}
    sent: "2016-11-21T13:21:10.579Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5832f18ab7cf637f2ac9b89d"
    text: {@ifgem A pattern-matching macro needs to return a suitable value (see the documentation). In the above case, you are creating an infinite loop.}
    sent: "2016-11-21T13:07:22.988Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5832eb6eb7cf637f2ac996c3"
    text: "Should preprocessor Error crash the console?"
    sent: "2016-11-21T12:41:18.607Z"
    editedAt: "2016-11-21T12:41:59.099Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5832e9b6b563b5516c484b91"
    text: {I haven't been here for a long time:)). So happy to be here again.^/Found a little bug(?): you can't use probe in macors definition as it causes processor overloading, memory leak.^/```^/#macros integer! func [s e] [probe s]^/```}
    sent: "2016-11-21T12:33:58.596Z"
    editedAt: "2016-11-21T12:34:13.914Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5832a52a613368f619db8bd1"
    text: "At some point in the future. ;-)"
    sent: "2016-11-21T07:41:30.629Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5832a518c6c4993013c26a66"
    text: {certainly meaning it'll have streaming pretty soon, or certainly it will have it eventually? :-)}
    sent: "2016-11-21T07:41:12.206Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "5832a4dae712c9a118927ab2"
    text: "@asampal Certainly."
    sent: "2016-11-21T07:40:10.802Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5832a4803418b2e57f2bcc9c"
    text: {@dockimbel , for embedded use (and not only), do you think that parse will be enhanced to allow parsing streams any time soon? When full I/O will be added are you considering any enhancements to parse along those lines?}
    sent: "2016-11-21T07:38:40.604Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "5831d5015eb8ea792a43bfae"
    text: {@dockimbel, I think your proposal is sound, but also want to make sure you think it's a *good* idea, and fits in the larger Red design picture comfortably. ^/^/@WiseGenius, the big issue with using `hash!` is the creation aspect, correct? e.g. we want to be able to extend a hash by adding new elements as we find them in a JSON stream. If that's the only issue, it's simple enough, in this case, to collect the data in a block and convert it to a hash once the structure is closed. To handle streaming conversions, the loader could still emit that it's a hash! coming to the consumer.}
    sent: "2016-11-20T16:53:21.841Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5831d3665eb8ea792a43b77c"
    text: {So for calling into C, `redCall()`is used. Is it possible to extend the foreign environment, getting it "first class way"? E.g. in the case of print example, to define a print function in C, which would call into red, using redCall()?}
    sent: "2016-11-20T16:46:30.734Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5831d323b563b5516c42fb98"
    text: {@PeterWAWood, there will always be things that don't quite fit. Red already has a `null` word, which is a `char!` value and means something different than the JSON null. This is an important distinction. JSON is one case, but we should think about general rules for how best to represent foreign data of various kinds. I will try to get to that structure comparison doc before long, as I think that will help. }
    sent: "2016-11-20T16:45:23.220Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5831d2ef613368f619d7c1f6"
    text: {looking into libRed-test.c ... interesting stuff. Confused a bit by `redWord("print")`, as it seems like getting a pointer to a function, most probably it is doing so, but expected something like `redFunc()`.}
    sent: "2016-11-20T16:44:31.575Z"
    editedAt: "2016-11-20T16:44:43.892Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5831968db563b5516c41e69b"
    text: {For map!, I am willing to allow *forcing* `none` as value, when it is really desired. It would not change the existing map! semantics, just extend them in the following way:^/^/Setting a key to none:^/```lisp^/set/any '<map>/<key> none^/put/any <map> <key> none^/extend/any <map> <spec>^-^-;-- 'none values will not discard the keys.^/```^/Deleting a key:^/```lisp^/unset '<map>/<key>^/```^/We just extend the existing escape mechanism for invalid values (`/any`) to `none` when used on maps. It would also be safe to re-use `unset` on map keys, as an additional way to remove keys. Moreover, LOADing a serialized map would reduce the `none` word if present as value. Would these extensions cover the use-cases expressed for `none` support?}
    sent: "2016-11-20T12:26:53.938Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58318c27297a180b4f18397b"
    text: {@meijeru It just lacks a few more constructor functions and a few more accessors. Maybe a dozen more functions. Though, it's already usable to embed Red efficiently in another app. Yes, the API can be used pretty much from any language that has a C-compatible FFI.}
    sent: "2016-11-20T11:42:31.285Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58318a46b7cf637f2ac2fa81"
    text: {How big will the API be? So far, only a few datatypes are exposed... Also, is the API usable from other languages than C?}
    sent: "2016-11-20T11:34:30.831Z"
    editedAt: "2016-11-20T11:36:05.566Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "583189a35eb8ea792a424d84"
    text: {@meijeru That's correct. The latter makes Red embeddable in pretty much any third-party software, where Red could be used for scripting, providing a GUI, a parsing engine,... It's up to the Red users to find applications. ;-)}
    sent: "2016-11-20T11:31:47.553Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58318920613368f619d66e6b"
    text: {@dockimbel Looking at the recent commits in libRed, I conclude that your aim is twofold: to provide a precompiled runtime for the Red compiler, so that compilation times can be drastically shortened, *and* to provide an interface to this runtime from C. What applications do you see for the latter?}
    sent: "2016-11-20T11:29:36.027Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
)#(
    id: "5831230fe712c9a1188ba169"
    text: {```text^/red>> m: #(a: 1 b: null)^/== #(^/    a: 1^/    b: null^/)^/red>> m/b^/== null                    ;; b was present in the JSON^/red>> m/c^/== none                 ;; c was not present in the JSON^/red>> select m 'c^/== none^/red>> select m 'b^/== null^/```^/I don't think there is anyway of making this distinction if ```null``` in JSON is converted to ```none```.^/}
    sent: "2016-11-20T04:14:07.242Z"
    editedAt: "2016-11-20T04:14:51.790Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58312226238757566ccb65ca"
    text: {@greggirwin I see the advantage of using 'null for JSON is that when accessing a ```map!``` either using a ```path``` or a function such as ```select``` you can distinguish between a null value (~null in JS) and a value that is not present (~undefined in JS).}
    sent: "2016-11-20T04:10:14.805Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5830c395c6c4993013c22c67"
    text: {@meijeru Thanks, this is the same problem. It’s caused by `issue!` being based on `word!`. Which I like and makes much more sense that being based on `string!`, but brings some yet unsolved problems.}
    sent: "2016-11-19T21:26:45.250Z"
    editedAt: "2016-11-19T21:27:02.355Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830c2f2297a180b4f154470"
    text: {On the above problem see the discussion in issue #2329 }
    sent: "2016-11-19T21:24:02.948Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5830c0fda5bc784f5657f0f1"
    text: {But does it stop me? Certainly no!^/```^/red>> to word! #1^/== 1^/```}
    sent: "2016-11-19T21:15:41.087Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830c0dec6c4993013c22c14"
    text: {Right, it’s better:^/```^/red>> to word! "1"^/*** Syntax Error: invalid character in: 1^/*** Where: to^/```}
    sent: "2016-11-19T21:15:10.526Z"
    editedAt: "2016-11-19T21:16:57.753Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bf4b3418b2e57f2b87cd"
    text: "Ah, thanks, I will update."
    sent: "2016-11-19T21:08:27.779Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bd89238757566cc9dcb1"
    text: "you must update to latest version"
    sent: "2016-11-19T21:00:57.266Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830bd81e712c9a1188a0cda"
    text: {it is in my case:^/```^/red>> to word! "1"^/*** Syntax Error: invalid character in: 1^/*** Where: to^/```}
    sent: "2016-11-19T21:00:49.459Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830bd49a5bc784f5657f07e"
    text: {It is not, yet(?).^/```^/red>> to word! "1"^/== 1^/```}
    sent: "2016-11-19T20:59:53.268Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bce4c6c4993013c22a2b"
    text: {Rebol wasn’t very strict here and you were able to make invalid words, for example. I hope Red’s will be very strict here.}
    sent: "2016-11-19T20:58:12.245Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bca8a5bc784f5657ef21"
    text: {But to be able to use that power, we must be sure what any sequence of chars means. Like if `a:b` is a `word!` or `url!`.}
    sent: "2016-11-19T20:57:12.857Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bc66a5bc784f5657ef12"
    text: {These are the rules I made. Other people may find other way to handle it. That’s the power of `parse`.}
    sent: "2016-11-19T20:56:06.174Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bc2a3418b2e57f2b8710"
    text: {anyway, my implementation does not make any difference between `[key value]` and `["key" "value"]`. Only thing that makes a difference is `[:key :value]`. That is handled by `parse`.}
    sent: "2016-11-19T20:55:06.200Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bbd53418b2e57f2b86fb"
    text: "It is very powerful database."
    sent: "2016-11-19T20:53:41.937Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bbcadf9f0f6e7f577ade"
    text: "see [here](https://github.com/rebolek/prot-redis)"
    sent: "2016-11-19T20:53:30.058Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bbae613368f619d36dae"
    text: "I don't know Redis protocol."
    sent: "2016-11-19T20:53:02.689Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830bb84b563b5516c3e8495"
    text: "ok :)"
    sent: "2016-11-19T20:52:20.078Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830bb71df9f0f6e7f577ad8"
    text: {In the Redis protocol, everything is converted to `string!`. So `"a:b"` is same as `a:b`, but the later variant is just easier to write :)}
    sent: "2016-11-19T20:52:01.210Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bb18b7cf637f2abfcd8b"
    text: {so if you get an "a:b" ```string!``` how do you know to which type to convert ? do you parse it ?}
    sent: "2016-11-19T20:50:32.117Z"
    editedAt: "2016-11-19T20:51:38.948Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830bb10df9f0f6e7f577987"
    text: {However, if it is `word!` or `url!`, that’s up to debate. Is `:` enough to indicate `url!`?}
    sent: "2016-11-19T20:50:24.626Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830bab6a5bc784f5657eed8"
    text: {I allow almost anything as a key, only `get-word!` is used to get value, but it is nice to have something that Redis uses as default available in Rebol (and in Red later, I hope).}
    sent: "2016-11-19T20:48:54.218Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830ba6bdf9f0f6e7f57797e"
    text: {My Redis implementation is heavily `parse` based and keys like this are parsed to `url!`.}
    sent: "2016-11-19T20:47:39.452Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830ba26df9f0f6e7f577973"
    text: {Redis keys usually take form like `blah:blah:blah`.}
    sent: "2016-11-19T20:46:30.045Z"
    editedAt: "2016-11-19T20:46:37.925Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830ba033418b2e57f2b86b2"
    text: {@Zamlox This is something that I heavily (ab)use in my Redis protocol for Rebol (Red version must wait for proper IO).}
    sent: "2016-11-19T20:45:55.642Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830b8e8b7cf637f2abfbeb7"
    text: {I haven't realized that until my svg project failed with latest red sources. The reason was some elements having names like ```inkscape:version``` which I  converted from ```string !``` to ```word!```. I have to rethink that part.}
    sent: "2016-11-19T20:41:12.511Z"
    editedAt: "2016-11-19T20:41:32.726Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830b844df9f0f6e7f5777f1"
    text: {This is really gray area and I can come up with some counter examples, but this is how I feel it.}
    sent: "2016-11-19T20:38:28.210Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830b840b7cf637f2abfbc43"
    text: "true, good reason ;)"
    sent: "2016-11-19T20:38:24.016Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830b81e3418b2e57f2b8656"
    text: {I think that if something is one datatype, it shouldn’t be other one.}
    sent: "2016-11-19T20:37:50.544Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830b7f93418b2e57f2b8647"
    text: {```^/red>> type? x:y^/== url!^/```}
    sent: "2016-11-19T20:37:13.168Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830b7bab7cf637f2abfba5a"
    text: "any reason for that ?"
    sent: "2016-11-19T20:36:10.694Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830b7523418b2e57f2b863d"
    text: "I hope so."
    sent: "2016-11-19T20:34:26.692Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830b729238757566cc9be7b"
    text: {with latest sources I cannot have word name having #":" character:^/```^/red>> to word! "a:b"^/*** Syntax Error: invalid character in: a:b^/*** Where: to^/```^/is this intended ?}
    sent: "2016-11-19T20:33:45.317Z"
    editedAt: "2016-11-19T20:34:09.823Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58309ece238757566cc93972"
    text: {here is the test I have done:^/```^/red>> orig: deep: copy/deep [push []]^/== [push []]^/red>> loop 1000 [insert first next deep copy/deep [push []] deep: first next deep]^/== [push []]^/red>> orig^/== [push [push [push [push [push [push [push [push [push [push [push [push [push [push [push [push [push [...^/red>> view [base 500x500 draw orig]^/*** Script Error: PARSE - stack limit reached^/*** Where: parse^/```}
    sent: "2016-11-19T18:49:50.919Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830946adf9f0f6e7f576ec7"
    text: {@Zamlox you’re welcome ;) As you can see, people remember and want to answer your question. We will have tools to help with it later. Right now, we do not have them yet, so just ask here and do not delete ;) }
    sent: "2016-11-19T18:05:30.086Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5830927e2cf343a318c83eba"
    text: "@rebolek thanks,I'll keep that in mind ;)"
    sent: "2016-11-19T17:57:18.935Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5830923bdf9f0f6e7f576e96"
    text: {@Zamlox please, do not delete questions. They may not be answered for a while, but it is very important to keep them for reference. Every problem people met may be important some time later.}
    sent: "2016-11-19T17:56:10.973Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58309124b563b5516c3d9928"
    text: {@dockimbel it's not a hurry :) Yes, I have asked related to how deep can go ```parse``` command. I have noticed in source code a value of 10000 but when I did a test with VID using ```push```, it errored at 1000 (I have noticed you are busy with conversions,so I deleted my question :), but thanks asking me ;)  ). So I was curious how deep can go ```parse``` command.}
    sent: "2016-11-19T17:51:32.397Z"
    editedAt: "2016-11-19T17:53:12.041Z"
    v: 5
    author: "56f909e585d51f252abb2f03"
) #(
    id: "58309057b7cf637f2abef46a"
    text: {@PeterWAWood, a 'null suggestion was made, but I don't like it so far. We have `none!` already. If we use a word to indicate that, every piece of code that deals with data that *may* have come from a JSON source (or others that decide to use the new mechanism) has to be aware of that and check differently. Or we write wrappers that cover both bases, but that means the common `if` and `either` tests can't be used.}
    sent: "2016-11-19T17:48:07.179Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583069da2cf343a318c77191"
    text: {@dockimbel I am inspired by the recent changes concerning `ANY-BLOCK?`, `TYPE_ANY_BLOCK` etc. to ask if it would be possible to use the prepocessor to generate such `#define`s from the typesets as defined in `environment/scalars.red`.  That would have the advantage of ensuring automatic correspondence of the `.red` level typesets (and their query functions like `any-string?`) and the `.reds` level constant definitions.}
    sent: "2016-11-19T15:03:54.921Z"
    editedAt: "2016-11-19T15:04:17.659Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58303f45297a180b4f12ca21"
    text: {I remember some message towards the recursion/nesting limit. Was it raised to 10K? The user (don't remember, who it was), reported, it is still only 1K, or something like that ....}
    sent: "2016-11-19T12:02:13.717Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5830363e238757566cc73600"
    text: {@Zamlox Did you ask me something about Parse's stack limit in one of the channels here? I wanted to reply, but can't find your post anymore.}
    sent: "2016-11-19T11:23:42.944Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5830235b238757566cc6dddc"
    text: {@maximvl Here is a shorter version of your `with-temp` function:^/```lisp^/with-temp: function [words body] [^/^-saved: reduce words do body set words saved^/]^/```}
    sent: "2016-11-19T10:03:07.481Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583020985eb8ea792a3c40a7"
    text: {@DonaldTsang `string!` is Unicode. `char!` is a codepoint (up to 32-bit). If you need UTF-8 encoding of a string, you just use `to binary! string`. There is no UTF-16 encoding provided by default, as it is rarely used for data exchange, though, such encoder exists in Red/System and could be exposed at Red level if the need for it arises (maybe through the codecs interface).}
    sent: "2016-11-19T09:51:20.831Z"
    editedAt: "2016-11-19T09:51:34.844Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "583020195eb8ea792a3c3ef4"
    text: {@maximvl ^/> @dockimbel one more question - how does body get access to a in your example?^/does it mean anything you do can do basically everything with globals?^/^/`body` just references the block `[a: "hello" print a]`. There, the word `a` is by default bound to the global context, though you can change that binding before evaluating `body` using `bind` to bind `a` and eventually other words, to the context of your choice (as long as that context defines those words).}
    sent: "2016-11-19T09:49:13.461Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582ffbeb297a180b4f11b775"
    text: {@WiseGenius @Gregg Have you considered defining a ```null``` word to use for JSON's null:^/```text^/red>> null: 'null^/== null^/red>> m: #(a: 1 b: true c: null)^/== #(^/    a: 1^/    b: true^/    c: null^/)^/red>> m/c = null^/== true^/```}
    sent: "2016-11-19T07:14:51.701Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "582f554e297a180b4f0ed67c"
    text: "Good @geekyi "
    sent: "2016-11-18T19:23:58.869Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f551fa5bc784f5657ae15"
    text: {:worried: Unicode terminology is always confusing and tricky. Let's take this to red/help ?}
    sent: "2016-11-18T19:23:11.482Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f5490b7cf637f2ab959ac"
    text: {@geekyi take a Universal Unicode String, encode it to UTF8 (singular byte units) or UTF16 (byte pair units), and convert it back to Unicode}
    sent: "2016-11-18T19:20:48.914Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f542fb7cf637f2ab95774"
    text: {The conversion table that was talked about here is pretty useful}
    sent: "2016-11-18T19:19:11.553Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "582f53e9b563b5516c37fc4d"
    text: {@DonaldTsang I don't know.. maybe you have to make on your own. What's the use case?}
    sent: "2016-11-18T19:18:01.827Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f53b3e712c9a118838197"
    text: {@geekyi I meant UTF-8 and/or UTF-16 byte arrays, not binary arrays}
    sent: "2016-11-18T19:17:07.012Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f53545eb8ea792a38abf5"
    text: "@DonaldTsang `binary!` ?"
    sent: "2016-11-18T19:15:32.716Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f53125eb8ea792a38aa48"
    text: {@geekyi then where is the bytes and/or byte-array data types? Also, what about Unicode Strings?}
    sent: "2016-11-18T19:14:26.086Z"
    editedAt: "2016-11-18T19:14:48.732Z"
    v: 2
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f52b7b563b5516c37f54e"
    text: {@DonaldTsang `char!`is unicode^/```^/red>> test: #"子"^/== #"子"^/red>> type? test^/== char!^/```}
    sent: "2016-11-18T19:12:55.405Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f445de712c9a118831ff7"
    text: {If we are using the C definition of `char` (where it and bytes are the same), then how do we distinguish this and the Unicode code point  (i.e.Unicode characters)?}
    sent: "2016-11-18T18:11:41.556Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f3eb6b7cf637f2ab8d56a"
    text: {(I am making these up since python and js make those distinctions) (See string.split("")  vs [...string] for js... maybe not a good example because js uses utf-16)}
    sent: "2016-11-18T17:47:34.568Z"
    editedAt: "2016-11-18T17:48:50.176Z"
    v: 2
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f3e0a238757566cc2d188"
    text: {@dockimbel @meijeru There should be a difference between `bytes!` (bytes and byte arrays, can represent files/blobs/texts) and `char!` (Unicode characters and its array)}
    sent: "2016-11-18T17:44:42.256Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f300bc6c4993013c1dd70"
    text: {> I have concerns about environments in Red, as it was shown - Red's `func`, `function` don't really create separate environment when executed which makes words leak also the way `function` hides assigned words looks very hacky^/^/Those are not really questions, they are slightly inflammatory statements that are not true.  ^/^/}
    sent: "2016-11-18T16:44:59.021Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "582f2d4b613368f619cc0e9c"
    text: {does it mean anything you `do` can do basically everything with globals?}
    sent: "2016-11-18T16:33:15.790Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582f2d16297a180b4f0dd738"
    text: {@dockimbel one more question - how does  `body` get access to `a` in your example?}
    sent: "2016-11-18T16:32:22.838Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582f2ce0e712c9a118828df4"
    text: {```^/red>> with-temp: function [words body] [saved: reduce words do body forall words [set first words saved/(index? words)]]^/== func [words body /local saved][saved: reduce words do body forall ...^/red>> a: 5^/== 5^/red>> with-temp [a] [a: "hi" print a]^/hi^/== 5^/red>> a^/== 5^/```}
    sent: "2016-11-18T16:31:28.039Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582f1fe25eb8ea792a375da6"
    text: {@dockimbel great explanation, thanks! I don't have deep understanding of contexts, that's why I had these questions =)}
    sent: "2016-11-18T15:36:02.320Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582f1127238757566cc18678"
    text: {If you want indefinite extent for functions, you can either write your own function constructor using objects to  create a persistent context, or wait for the closure! function type to be added to the language (as in Rebol3).}
    sent: "2016-11-18T14:33:11.089Z"
    editedAt: "2016-11-18T14:33:26.619Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582f1015613368f619cb336d"
    text: {Using dynamic binding, you can link any word to any existing context at any time (using `bind`). This gives you freedom to decide on where each word gets its meaning, on a word by word basis.}
    sent: "2016-11-18T14:28:37.478Z"
    editedAt: "2016-11-18T14:30:41.704Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582f0f3e238757566cc17b20"
    text: {In order to create user contexts (currently just for objects and functions), one has to provide the list of words for that context at creation time. Such list is either explicitly provided by the user, or constructed at runtime by the user or by code (like `function`). The auto-gathering of words obey some rules (catching set-words), what is not caught is bound to the global context. Once we have module! type (similar to what Rebol3 offers), you'll be able to set up your own "environment" replacing the global context.}
    sent: "2016-11-18T14:25:02.447Z"
    editedAt: "2016-11-18T14:26:00.984Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582f0d62613368f619cb2225"
    text: {```lisp^/red>> set-temp: function [w [word!] body [block!]][saved: get :w do body set w saved]^/red>> a: 123^/== 123^/red>> set-temp 'a [a: "hello" print a]^/hello^/red>> a^/== 123^/```}
    sent: "2016-11-18T14:17:06.677Z"
    editedAt: "2016-11-18T14:18:11.373Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582f0cb8b7cf637f2ab770bf"
    text: {`which I think are not possible in Redbol for now` It is trivial to write, probably even a one-liner. Why do you think it is not possible?}
    sent: "2016-11-18T14:14:16.905Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582f0c0e238757566cc16847"
    text: {`Red's func, function don't really create separate environment when executed` Right, they don't create environments, they create contexts. `which makes words leak` It is allowed to access words in global context from function contexts and modify their values.}
    sent: "2016-11-18T14:11:26.128Z"
    editedAt: "2016-11-18T14:13:04.052Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582f0bf2b7cf637f2ab76b4c"
    text: {@maximvl `I have concerns about environments in Red` You shouldn't, we don't have `environments` in Red, we have contexts, and soon enough, modules. Using the right terminology would avoid you comparing apple with oranges.}
    sent: "2016-11-18T14:10:58.382Z"
    editedAt: "2016-11-18T14:13:43.284Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582f09cf8409125b1e59abcd"
    text: {@meijeru Status is "stalled". It has similar goals as libRed (pre-compiling the Red runtime library), but without generating a final library file, just saving on disk the raw result of the compilation for later linking. It was early research that should become the basis for modular compilation.}
    sent: "2016-11-18T14:01:51.135Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582f008e8409125b1e59777e"
    text: "I don't see how it helps here, really"
    sent: "2016-11-18T13:22:22.317Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582f003e3f3946057ad09a20"
    text: "@rebolek protected from changes?"
    sent: "2016-11-18T13:21:02.353Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582eff2f99dce7860aff3de2"
    text: {@maximvl Contexts (or environments, as you call them) can be "protected" in Redbol language. See `protect` function or `module` concept in R3. It’s just not implemented in Red yet.}
    sent: "2016-11-18T13:16:31.316Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582efc14e51081951ee06738"
    text: "which I think are not possible in Redbol for now"
    sent: "2016-11-18T13:03:16.945Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582efc0a3f3946057ad0821e"
    text: {and even things like:^/>let-temporarily (now built-into s7) is somewhat similar to fluid-let in other Schemes. Its syntax looks like let, but it first saves the current value, then sets the variable to the new value (via set!), calls the body, and finally restores the original value. It can handle anything settable:}
    sent: "2016-11-18T13:03:06.665Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582efb7be51081951ee063ee"
    text: {they can create/store environments, add/remove bindings on the fly, which looks very similar to `bind` in Redbol, but done right}
    sent: "2016-11-18T13:00:43.374Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582efb158409125b1e5957b7"
    text: {here is, for example, scheme implementation with quite advanced first class environments: https://ccrma.stanford.edu/software/snd/snd/s7.html#environments}
    sent: "2016-11-18T12:59:01.737Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582efac7004785313cbf8f30"
    text: {is there something in the language itself which prevents us having proper environments? }
    sent: "2016-11-18T12:57:43.499Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582efa842291180a7a675689"
    text: {also the way `function` hides assigned words looks very hacky}
    sent: "2016-11-18T12:56:36.312Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582efa37e51081951ee05cb6"
    text: "which makes words leak"
    sent: "2016-11-18T12:55:19.484Z"
    editedAt: "2016-11-18T12:56:51.932Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582efa1d2291180a7a675412"
    text: {I have concerns about environments in Red, as it was shown - Red's `func`, `function` don't really create separate environment when executed}
    sent: "2016-11-18T12:54:53.517Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582ef4ad3f3946057ad0580b"
    text: {Out of curiosity, what is the status of the `precompiled` branch? What is the relation to the work on `libRed`?}
    sent: "2016-11-18T12:31:41.494Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582ecc0399dce7860aff2a00"
    text: {@WiseGenius I could probably live with `none` as value in `map!`, although I find current behavior much more useful. I am usually treating `none` as non-value, so removing key with setting it to `none` is very convenient.}
    sent: "2016-11-18T09:38:11.059Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582ecbfc69eb65323c4aeea8"
    text: {@meijeru Fixed now, I updated the URL used by that component. Though, it seems the component is not able to parse the commits date info.}
    sent: "2016-11-18T09:38:04.183Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582ec7daab171c5d1e6d01cd"
    text: {@dockimbel I have to report that on the homepage, the feed of Recent Commits to Github seems out of order. The latest one is:^/```^/FIX: issue #2162 (Write/info crashes when a custom header is used) - Invalid Date - qtxie^/```^/}
    sent: "2016-11-18T09:20:26.864Z"
    editedAt: "2016-11-18T09:20:56.742Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582eb16cab171c5d1e6c8b03"
    text: {My first choice was still “lookup on non-existing keys giving an error”. I was wary of the idea of “having both “`none`” keys and non-existing keys returning `none`”, but I haven't had a chance to think about what the issues might be with it. Helpful to know that someone has been “bitten” by that in the past. An error is still my first choice for now, then.^/For me, “an absent key” means the same thing as “the key has no associated value” but that's distinct from “a key having the value `none`”.}
    sent: "2016-11-18T07:44:44.565Z"
    editedAt: "2016-11-18T07:48:25.922Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582eaddec3afa78a1e22a1a7"
    text: {`map!` has been optimized to follow that second approach, an absent key means the key has no associated value.}
    sent: "2016-11-18T07:29:34.573Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582ead2d69eb65323c4a4b3e"
    text: {@WiseGenius @greggirwin Yes, you can store `none` values in blocks, though, when creating an implicit key/value store using a block, if `none` is an allowed value, then all the lookups become more verbose, as you need to search for the key first, and then decide if it is worth retrieving the value or not. It is also error-prone as `none` can have two opposite meanings ("not found" or valid result), I've been bitten in the past in my early Rebol projects with such approach, and I'm avoiding it totally since then. Another disadvantage is that the "key has no value associated" information becomes more expensive to record and manipulate if it needs to appear as an entry in the block/map instead of just being absent:^/```lisp^/list: [^/    a: none^/    b: none^/    c: none^/    d: none^/    ...thousands of similar entries...^/    word: 1^/]^/```^/vs:^/```lisp^/list: [^/    word: 1^/]^/```}
    sent: "2016-11-18T07:26:37.116Z"
    editedAt: "2016-11-18T07:31:21.613Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582eabdeab171c5d1e6c7085"
    text: {@WiseGenius Thanks for the answers. See you in two weeks then. ;-)}
    sent: "2016-11-18T07:21:02.483Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582eaaef69eb65323c4a4019"
    text: {@asampal No shortcuts, `select` is the way to go in that case, and for all scalar values, it's constant-time lookups.}
    sent: "2016-11-18T07:17:03.954Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582ea8a448df174b656d4df1"
    text: {Is there a more concise way of getting the value behind an integer key, from a `hash!`?}
    sent: "2016-11-18T07:07:16.739Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "582ea86148df174b656d4de0"
    text: {Trying to follow the `map!` and  `hash!` discussion and I see another difference that hasn't been mentioned (I think). Since `hash` isn't meant to be used with the path notation, primarily, to access keys when keys are integers (this returns a positional look-up into the hash viewed as a series), how are integer keys looked up in a `hash!`? `select` can be used, I suppose, but does that method of access use the hashing if the series is a `hash!` or will look-up be linear time?}
    sent: "2016-11-18T07:06:09.226Z"
    editedAt: "2016-11-18T07:06:26.452Z"
    v: 2
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "582e91168409125b1e5727fc"
    text: {Some advantages of `map!`s over `hash!`s, are that `map!`s:^/ 1. Have convenient `path!` notation for adding non-existing keys with the same syntax as setting them.^/ 2. Have convenient `path!` notation for setting keys in pairs without needing `/skip ... 2`.^/ 3. Cannot have duplicate keys.^/ 4. Have a literal notation (though `hash!` could eventually be given one too, eg. `#[...]`).^/^/I believe that all of the above are necessary for a `datatype!` which fills the need of dictionaries/associative-arrays/maps/whatever-you-want-to-call-them.^/^/Some advantages of `map!`s over `object!`s, are that `map!`s:^/ 1. Can easily add non-existing keys with the same syntax as setting them.^/ 2. Can easily remove keys.^/ 3. Can have `string!`s as keys.^/ 4. `map!` has a literal notation (though `object!` could eventually be given one too, eg. `@[...]` or `@(...)`).^/ 5. Can have more than one `datatype!` for keys.^/^/I believe that all of the above are necessary for a `datatype!` which fills the need of dictionaries/associative-arrays/maps/whatever-you-want-to-call-them, except for 5, which is, for example, something which Python's objects can do that Javascript's objects can't, but even Python can't use both “`word!`s” and strings together as keys.^/^/Note that the worth of `map!` shouldn't be measured by counting the advantages over other datatypes, but to see if it fills its purpose completely in ways other datatypes can't or are an awkward fit for.^/^/Another advantage, which `map!` has over both `hash!`s and `object!`s, which I doubt is necessary for an associative array, but is certainly convenient, is:^/ 1. Have convenient `path!` notation for removing existing keys with the same syntax as setting them.^/^/> Do you have some examples where replacing maps would be an issue or counter-productive?^/^/@dockimbel That's a question I'm definitely looking forward to answering properly when I can do it justice, thanks. Unfortunately, I'll have to leave it alone for now. Early tomorrow morning, I'm leaving for a project where I will have almost no access to computers or internet for 2 weeks. I haven't packed yet, and I've been getting 3-hours sleep each night trying to meet rediculous deadlines. Funny how the more I have to get done, the more time I spend trying to be helpful in Red discussions, haha! I guess that must be my favourite way of procrastinating, which I think says good things about the Red community, etc.}
    sent: "2016-11-18T05:26:46.106Z"
    editedAt: "2016-11-18T05:28:02.728Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582e8b468409125b1e57106d"
    text: {Anyway, and I know I'm being irritating, sorry, but I still think that removing keys with `m/k: ()` or `m/k: print "Red is awesome!"` doesn't require the existence of `unset!` as a `datatype!`. But maybe that's really for a different discussion about which way to go to make `unset!` disappear.}
    sent: "2016-11-18T05:01:58.416Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582e8b39c3afa78a1e220ac9"
    text: {I suppose the value of removing a key with `m/k: none`, also depends on: How often do you actually need to remove the key, when you really just need it to return `none` when accessed? For myself, I'm guessing I don't actually need to remove keys as often as I thought, but maybe others have to reduce the sizes of their `map!`s by one key so often that the convenience is strongly desired. What about you, @rebolek?}
    sent: "2016-11-18T05:01:45.331Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582e8b332291180a7a64fbc2"
    text: {Though I'm not still not sure if this is my first choice (I have to think about it further), I should be biassed to it because it wouldn't break much (if any) of my existing code.}
    sent: "2016-11-18T05:01:39.440Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582e81203f3946057acdf821"
    text: {Sorry, I just noticed  @greggirwin [just suggested this](https://gitter.im/red/red?at=582de6963f3946057aca80a4). Too little sleep.}
    sent: "2016-11-18T04:18:40.237Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582e739d2291180a7a648ea5"
    text: {I'm interested in everyone's thoughts about this one, especially @rebolek's.}
    sent: "2016-11-18T03:21:01.684Z"
    editedAt: "2016-11-18T03:21:26.899Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582e72c8ab171c5d1e6b7a84"
    text: {I don't know if this idea has been discussed, and it may not exactly be my first preference, but I think it's an obvious option to be considered: Rather than give an error, how about having a `map!` return `none` when accessing a non-existent key (as it does now), even though `none` is also a valid value for a key:^/```^/red>> m: #()^/== #()^/red>> m/a: none^/== none^/red>> m^/== #(^/    a: none^/)^/red>> m/a^/== none^/red>> m/b^/== none^/```^/This might seem strange, but when you think about it, that's kind of how `block!`s work:^/```^/red>> blk: [a #[none]]^/== [a none]^/red>> blk/a^/== none^/red>> blk/b^/== none^/```^/One of the advantages of `map!`s is that you can set keys which don't already exist using `path!` notation:^/```^/red>> m/b: none^/== none^/red>> m^/== #(^/    a: none^/    b: none^/)^/red>> blk/b: none^/*** Script Error: cannot set none in path blk/b:^/*** Where: catch^/```}
    sent: "2016-11-18T03:17:28.806Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
)#(
    id: "582e1c0e3f3946057acbea5e"
    text: {I have decided to raise an issue for `make/to string! [1 2]` in spite of your comment.}
    sent: "2016-11-17T21:07:26.894Z"
    editedAt: "2016-11-17T21:09:15.968Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582e0c1d69eb65323c470f71"
    text: {@dockimbel @qtxie in the MAKE conversion table, the description of `to char! <binary>` is still incorrect; the implementation is correct, though.}
    sent: "2016-11-17T19:59:25.919Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582de6963f3946057aca80a4"
    text: {> Moreover, if none were to be accepted as value for map!, what would failed lookup return?^/^/Block and hash allow `none!` values, and return `none!` on a failed lookup (where R2 would throw an error). `Find` on a map works to determine the existence of a key.^/^/> map! has been designed from the ground up to have paths as primary interface. ^/^/This is very helpful! The strongest argument I see against this is that it's more work to wrap HOFs or generic funcs around series/object/map args. I don't have a nice design alternative yet, but will think on it. `Remove` and `change` are the obvious problematic cases.^/^/>  Is that really the interface and behavior you want for map? ^/^/I'm not fixed on a particular interface. I'll try to make time to write up at least a skeleton doc that contrasts the various structures and their interfaces. The current map interface is perfectly valid, and make some things much more concise, per your example. I think the main thing is to lay out the design intent for each type, so people know where to use them. ^/^/> For representing null in JSON, one option could be to use the up-coming handle! type ^/^/I like it as much as the `unset!` idea, meaning I don't. ;^^) }
    sent: "2016-11-17T17:19:18.465Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "582de03d69eb65323c45dc08"
    text: {@dockimbel Re `to any-path!` I agree. Thanks @qtxie for quick repair of the issues I raised. Now I will do the same for `make`.}
    sent: "2016-11-17T16:52:13.641Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d9e8d004785313cb77c25"
    text: "interesting discussion about `hash!` and `map!`"
    sent: "2016-11-17T12:11:57.136Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582d920e88fa21d53c33564e"
    text: {Redboot .... sounds like a base for a virtual OS :-)}
    sent: "2016-11-17T11:18:38.165Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "582d851c65485ebc67a8e726"
    text: {@meijeru Let me amend my answer: having more relaxed rules for paths construction at run-time is necessary (because it can't be avoided anyway), though the `to path!` conversion rules may not be that useful for non-LOADable values (compared to `make path!`). The only one I would keep: `to any-path! word!` and `to any-path! any-list!`.}
    sent: "2016-11-17T10:23:24.874Z"
    editedAt: "2016-11-17T10:25:28.101Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d832588fa21d53c330536"
    text: {@dander Account: redlang. Will send you the API key by pm.}
    sent: "2016-11-17T10:15:01.261Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d81e665485ebc67a8d6ff"
    text: {@meijeru It should be loadable if serialized using construction syntax or Redbin. As a composite type, any-paths can be useful as extra *storage* types (in addition to any-block!) for any values, which can be leveraged at run-time by some algorithms. I think it is worth having (R3 supports it too).}
    sent: "2016-11-17T10:09:42.695Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d7f90e462097a305e89c0"
    text: {@dockimbel no rush. I'm not sure how soon I will be able to get to it, since my time is kind of limited. I won't need the token, but please let me know the user name once you make the account. Thanks!}
    sent: "2016-11-17T09:59:44.037Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "582d7f68c2f2cf727521269c"
    text: {Finally, I don't understand the point of allowing `to any-path!` for all types. The *only* type for which this makes sense to me is `any-list!`. The others will lead to expressions which are not LOADable, thus again the round-trip consistency.}
    sent: "2016-11-17T09:59:04.896Z"
    editedAt: "2016-11-17T10:06:51.377Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d7e7088fa21d53c32ed06"
    text: {`to any-list!` I think we lost those info during one of the merges, working with Excel files in git is not very safe.}
    sent: "2016-11-17T09:54:56.353Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d7df6e462097a305e8092"
    text: {@meijeru Yes, you can raise issues for differences between spec and implementation.}
    sent: "2016-11-17T09:52:54.132Z"
    editedAt: "2016-11-17T09:53:01.272Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d7d93e097df7575c1d0b0"
    text: "Shall I raise an issue for `to binary!`?"
    sent: "2016-11-17T09:51:15.378Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d7d6fe462097a305e7d07"
    text: {`to any-list!` is defined for all but 'image!` `pair!` and `error!` types. Why this omission? }
    sent: "2016-11-17T09:50:39.417Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d7c3de462097a305e76bb"
    text: {@meijeru `to binary!` Agreed, good catch. `to error!` should be all forbidden, the matrix needs fixes there. Pitfall: agreed, though I think the reason should be consistency with other `to string!` conversions, which are using FORM by default. I think round-trip consistency can be broken when more useful/intuitive rules can be defined.}
    sent: "2016-11-17T09:45:33.462Z"
    editedAt: "2016-11-17T09:51:53.297Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d7b50df5ae966456b40fa"
    text: {A pitfall: `to block! "1  2" == [1  2]` but `to string! [1  2] == "12"`whereas `form [1  2] == "1  2"` I would plead for `to string!` and `form` to both conserve the spaces even though this will deviate from R2 and R3 . Reason: round-trip consistency.}
    sent: "2016-11-17T09:41:36.189Z"
    editedAt: "2016-11-17T09:44:21.503Z"
    v: 4
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d7a6365485ebc67a8af76"
    text: {`to float! [<number> <number>]` is worth documenting. I do not remember having seen it in R2 documentation.}
    sent: "2016-11-17T09:37:39.283Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d7a0ee462097a305e6d70"
    text: {Another inconsistency: `to error! <string>` is equivalent to `make`. But `to error! <integer>` is forbidden, it could have the same effect as `make`.}
    sent: "2016-11-17T09:36:14.691Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d766988fa21d53c32c217"
    text: {`to binary! <char>` does UTF encoding, but `to char! <binary>` takes the first byte only, which breaks down beyond the ASCII set.}
    sent: "2016-11-17T09:20:41.842Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d761865485ebc67a89708"
    text: {@dockimbel Inconsistency in `binary!` <-> `char!` conversion with TO:}
    sent: "2016-11-17T09:19:20.329Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d750ae097df7575c1a1d2"
    text: {@dockimbel , @qtxie - late to the party. Sorry for confusion (wrong word) re "counterpart" to `put`. In fact what I meant was - If we can have a special word for setting a value `put`, we could come up with some word to remove a key, which in fact could be a shortcut to setting a map value to `none`. I am not doubting special `map`advantages. Would having such a func to remove map key go against how `map`is envisioned to work? I think not?}
    sent: "2016-11-17T09:14:50.392Z"
    editedAt: "2016-11-17T09:15:24.995Z"
    v: 3
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "582d6fe2df5ae966456b01bf"
    text: "@meijeru Agreed to forbid it."
    sent: "2016-11-17T08:52:50.974Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d6a9be462097a305e1572"
    text: {`to bitset! <integer>` is forbidden in R2, and in R3 it is equivalent to `make bitset! <integer>`There is no need for the facility in this form (duplication), and it is confusing because `to bitset! <char>` sets the bit corresponding to the number value, and `to bitset! <list>` also sets the bits corresponding to the numbers in the list. So I would suggest either to have the implementation which sets the bit, or to forbid it.}
    sent: "2016-11-17T08:30:19.223Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d697231c5cbef43084e83"
    text: {@dockimbel As promised, the first of a series of comments on TO/MAKE.}
    sent: "2016-11-17T08:25:22.343Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582d681c88fa21d53c327465"
    text: {For representing `null` in JSON, one option could be to use the up-coming `handle!` type (opaque pointer), set `null` word to an handle value of 0 (`null: make handle! 0`) and define a `null?` function to test for it. If that is an acceptable solution, then we can add that type at once (it's quick and easy to do).}
    sent: "2016-11-17T08:19:40.590Z"
    editedAt: "2016-11-17T08:21:27.456Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d611465485ebc67a82781"
    text: {@dockimbel Thanks for explaining the purpose of using path as the interface of map.^/^/I may be influenced by my experience in other languages (`map` in C++, `HashMap` in Java, `dict` in python) I used before.  I always need to do something like `remove-map m 'b` to remove a key and `either find m 'c [m/c][...key missing case...]` to test the existence of a key.  ^/^/Now I have better understand. Actually the hash! datatype is the function interface of a hashtable, like in other languages. The path interface is more elegant than using function, but has it's own limitation.}
    sent: "2016-11-17T07:49:40.250Z"
    editedAt: "2016-11-17T07:50:44.141Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "582d51c631c5cbef4307e249"
    text: {(I've excluded `unset!` in the above scenario, as it is not a valid value, you cannot "set to unset" using set-words, it is meant to error out. `Unset!` is not an alternative to `none!`, it's an implementation glitch which is required for reflectivity purpose, until we find a way to get rid of it.)}
    sent: "2016-11-17T06:44:22.807Z"
    editedAt: "2016-11-17T06:45:08.339Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d5002c2f2cf72752033da"
    text: {@qtxie @WiseGenius @greggirwin Is that really the interface and behavior you want for map? Do you see a better option (in case I've missed something)?}
    sent: "2016-11-17T06:36:50.831Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d4e0f65485ebc67a7cc8d"
    text: {Probably an error, as I don't see other alternative. In such case, extra guard code would be needed each time a key is accessed (unless the key is certain to be found):^/```lisp^/m: #(a: 0 b: none)^/either find m 'c [m/c][...key missing case...]^/either find m 'c [select m 'c][...key missing case...]^/```^/}
    sent: "2016-11-17T06:28:31.355Z"
    editedAt: "2016-11-17T06:33:05.463Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d4d18e097df7575c0db8e"
    text: {Moreover, if `none` were to be accepted as value for `map!`, what would failed lookup return?^/```lisp^/m: #(a: 0 b: none)^/m/c^/== ??^/select m 'c^/== ??^/```^/}
    sent: "2016-11-17T06:24:24.522Z"
    editedAt: "2016-11-17T06:31:31.602Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d4c27bd2f135f1a2aba0f"
    text: {@qtxie `It's convenient to set entries using path, then why should I also expect to remove it using path?` For consistency and because `map!` has been designed from the ground up to have paths as primary interface. Here's an example where the key `a` needs to be set if `b` value is even or removed if odd:^/```lisp^/b: 2^/m: #(a: 0)^/m/a: all [even? b b]^/^/b: 2^/m: #(a: 0)^/either even? b [m/a: b][remove-map m 'b]^/```^/*I have to use a imaginary `remove-map` function as `remove` cannot fit the needed arguments*^/^/Which interface is the simplest and most elegant one?}
    sent: "2016-11-17T06:20:23.811Z"
    editedAt: "2016-11-17T06:23:11.316Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d4a43e097df7575c0d072"
    text: {@qtxie `Hash is a bit hard to understand, it's a series, but also a hashtable` Actually, `hash!` is very simple, it is just a block with fixed lookup times (instead of linear times for blocks), that's all. The hashtable is an implementation detail that end-users don't even need to know about, in order to use the datatype. The real issue here is that we don't have a documentation for it yet, and that newcomers make wrong assumptions based on the `hash` name. So, a new name could avoid that, though, naming datatype in Rebol world is notoriously hard.}
    sent: "2016-11-17T06:12:19.908Z"
    editedAt: "2016-11-17T06:12:56.194Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d448a88fa21d53c31cc30"
    text: {This will surely lead to a nice little doc about each structure and their intended use though. :^^) }
    sent: "2016-11-17T05:47:54.579Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "582d43dedf5ae966456a3ed4"
    text: {@qtxie +1, except that `remove m/key` won't work. Or will lead to a change in the `remove` spec that may be confusing. It may be better to use `remove/part` if the target is a map, but that makes the `length` param confusing, or hard to rename without being completely generic.^/^/}
    sent: "2016-11-17T05:45:02.254Z"
    editedAt: "2016-11-17T05:45:47.556Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "582d3f652e5f27c66dfc8f20"
    text: {Yall know what sucks?  When you forget that red works with 32 bit only... just spent about 2 hours trying to get some low level stuff to work with 64 bit... *face palm* }
    sent: "2016-11-17T05:25:57.768Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "582d1eb5c6e9b54d74fcec0a"
    text: {I think another advantage of map!, compare to hash!, is it's provide a more simple and pure model than hash. ^/^/Hash is a bit hard to understand, it's a series, but also a hashtable, so it's very powerful. If we just want a data structure to present`key-value` pairs, then using map! make the code easy to write and also easy to understand.}
    sent: "2016-11-17T03:06:29.314Z"
    editedAt: "2016-11-17T03:08:38.185Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "582d1bbf2e5f27c66dfc8969"
    text: {> 2 Convenient unified path access for setting/removing entries.^/^/I'm doubting the value of it. Maybe it's just looks elegant in page. It's convenient to set entries using path, then why should I also expect to remove it using path?^/^/Also I don't think `m/key: none` is more understandable than something like `remove m/key`, If I'm new to Red, I need to read the document to know that `m/key: none` is meaning to remove a key from a map.}
    sent: "2016-11-17T02:53:51.016Z"
    editedAt: "2016-11-17T02:56:12.094Z"
    v: 4
    author: "55659cf315522ed4b3e10064"
) #(
    id: "582d15d4e462097a305c9d6d"
    text: {When setting `"d"`, it set's what would be considered a value in a `map!`. Therefore the need for `/skip` ... `2`.^/When setting `"i"`, it doesn't work because it doesn't already exist. That's why the extra checking, etc.^/This is why `hash!`s require such verbose unmaintanable code as in my example when trying to make them behave like `map!`s. They're just not a good fit to be used as `map!`s.}
    sent: "2016-11-17T02:28:36.524Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582d142be462097a305c9750"
    text: {```^/red>> c1: #("f" "d" "g" "h")^/== #(^/    "f" "d"^/    "g" "h"^/)^/red>> c1/("d"): ("e")^/== "e"^/red>> c1/("i"): ("e")^/== "e"^/red>> c1^/== #(^/    "f" "d"^/    "g" "h"^/    "d" "e"^/    "i" "e"^/)^/red>> ^/red>> c2: make hash! ["f" "d" "g" "h"]^/== make hash! ["f" "d" "g" "h"]^/red>> c2/("d"): ("e")^/== "e"^/red>> c2/("i"): ("e")^/*** Script Error: cannot set none in path c2/("i"):^/*** Where: catch^/red>> c2^/== make hash! ["f" "d" "e" "h"]^/```}
    sent: "2016-11-17T02:21:31.058Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582d137ae462097a305c9425"
    text: {The construction isn't the most unwieldy part. It's the part which replaces:^/```^/a/("b")/("c")/("d"): "e"^/```^/with:^/```^/if (type? (try [change/only select/only/case/skip select/only/case/skip select/only/case/skip a "b" 2 "c" 2 "d" 2 "e"])) = error! [append select/only/skip select/only/skip a "b" 2 "c" 2 ["d" "e"]]^/```^/That's because once the bug is fixed, the path accessors still don't behave the same way:^/```^/a/("b")/("c")/("d"): "e"^/```^/will give a different result, and:^/```^/a/("b")/("c")/("i"): "e"^/```^/won't work at all.}
    sent: "2016-11-17T02:18:34.465Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582d11c0e462097a305c8d55"
    text: {Advantages of hash, compared to map:^/1. Can contain anything as "keys".^/2. Free-form structure, so multiple keys with multiple values are possible.^/3. Hash is a series, so can be navigated and modified with series actions.^/4. Direct conversion from/to blocks without restriction (map's keys are restricted).}
    sent: "2016-11-17T02:11:12.596Z"
    editedAt: "2016-11-17T02:12:49.508Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d116488fa21d53c30e183"
    text: {The only advantages of map, compared to hash, are:^/1. Only keys are hashed.^/2. Convenient unified path access for setting/removing entries.}
    sent: "2016-11-17T02:09:40.484Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d10ea88fa21d53c30dfea"
    text: {For the path accessors, hash should behave the same as map (once the above bug you found is fixed).}
    sent: "2016-11-17T02:07:38.986Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d1063df5ae96645696125"
    text: {@WiseGenius Block does not have an internal hashtable to maintain for each modification of its content. So for small sets, like a few dozens values, the overhead of hash/map is not worth it compared to blocks, and lookups would not be noticeably faster.}
    sent: "2016-11-17T02:05:23.773Z"
    editedAt: "2016-11-17T02:14:04.556Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d1014df5ae96645695f60"
    text: {For the lack of literal form, a handy `hash` function could be added to ease nested hashs construction:^/```lisp^/hash: function [spec [block!]][^/^-forall spec [if block? spec/1 [spec/1: hash spec/1]]^/^-to-hash spec^/]^/a: hash ["b" ["c" ["f" "d" "g" "h"]]]^/```}
    sent: "2016-11-17T02:04:04.642Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d0ff5c2f2cf72751f2dce"
    text: {But why would `block!`s be any less unwieldy than `hash!`s anyway?}
    sent: "2016-11-17T02:03:33.775Z"
    editedAt: "2016-11-17T02:04:57.453Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582d0f9265485ebc67a6c448"
    text: "Thousands, yes."
    sent: "2016-11-17T02:01:54.593Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582d0f6188fa21d53c30d954"
    text: {@WiseGenius Are you using maps to hold hundreds/thousands of key/value pairs? If not, you'll have no noticeable gains in performance compared to just using blocks.}
    sent: "2016-11-17T02:01:05.628Z"
    editedAt: "2016-11-17T02:01:27.087Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d0f08e097df7575bfd995"
    text: {Oh, and ignore each `/case` refinement in my example, too. That example was copy-pasted from a time when I assumed `map!` keys would be case sensitive by default.}
    sent: "2016-11-17T01:59:36.533Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
)#(
    id: "582d0eabbd2f135f1a29b9a1"
    text: "Looks like a bug."
    sent: "2016-11-17T01:58:03.337Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d0e10c2f2cf72751f2448"
    text: {I'm a little confused. In that example, using the `hash!`, why is:^/```^/red>> a/("b")/("c")^/== none^/```}
    sent: "2016-11-17T01:55:28.114Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582d0ceee462097a305c790d"
    text: {Sorry, in that example, I think I meant to start with these 2:^/```^/a: #("b" #("c" #("f" "d" "g" "h")))^/a: make hash! reduce ["b" make hash! reduce ["c" make hash! ["f" "d" "g" "h"]]]^/```}
    sent: "2016-11-17T01:50:38.648Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582d0a43df5ae96645694403"
    text: {@dockimbel Well, it used to be that to get the same effect as:^/```^/a: #("b" #("c" #("f" "e")))^/a/("b")/("c")/("d"): "e"^/```^/I'd have to write something like:^/```^/a: make hash! reduce ["b" make hash! reduce ["c" make hash! ["f" "e"]]]^/if (type? (try [change/only select/only/case/skip select/only/case/skip select/only/case/skip a "b" 2 "c" 2 "d" 2 "e"])) = error! [append select/only/skip select/only/skip a "b" 2 "c" 2 ["d" "e"]]^/```^/But I'm just playing with `hash!` in Red right now, and it seems to work differently from Rebol 2?^/I'll have some more questions in a moment.}
    sent: "2016-11-17T01:39:15.584Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582d04b631c5cbef4306a63b"
    text: "@WiseGenius What about using `hash!`?"
    sent: "2016-11-17T01:15:34.428Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d0433c2f2cf72751ef9b2"
    text: {@greggirwin Red objects are unfit for JSON, not all JSON object keys can load as word! values.}
    sent: "2016-11-17T01:13:23.376Z"
    editedAt: "2016-11-17T01:14:24.986Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d0387df5ae9664569202e"
    text: {@dander Sounds fine to me (including the proposed naming scheme for releases). We'll create an account today and provide you with the token.}
    sent: "2016-11-17T01:10:31.258Z"
    editedAt: "2016-11-17T01:10:53.654Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d032065485ebc67a69114"
    text: {@meijeru We have finished with TO/MAKE for now, and the new code has been merged to master, so you can raise issues if you find some (*issue* as in difference between the specification and implementation). For questions about the specification, it would be better to post them here.}
    sent: "2016-11-17T01:08:48.187Z"
    editedAt: "2016-11-17T01:09:03.391Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582d0266e097df7575bfa5af"
    text: {@greggirwin My current projects using JSON can't use `object!`s because they frequently add and remove values. Also, a lot of the keys have spaces and other syntax which is difficult/impossible to handle in Red `word!`s. I vagually remember there might have been other issues which we've already discussed.}
    sent: "2016-11-17T01:05:42.522Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582cfed565485ebc67a67f50"
    text: {Sorry I can't keep up here at the moment. The map/none issue is important, but just comes down to choices as I see it. Having `map!` remove keys on assignment is different, and we could argue that using `remove` in all cases is better because of the consistency. However, `map!` *is* different. Uniformity is a big benefit, but we learned in R2 that it can be difficult. Small differences in `block, list, hash` behavior could trip you up if you wanted to substitute them blindly. ^/^/Some people think you should just be able to change one type for another. Blocks too slow now, just change to `hash!`. Sounds great. Is that Red's goal? If so, what is the cost? Could `keys-of/words-of` work on blocks? Sure, though the results may not always make sense. Can you think of `map!` as a series in *some* ways? Yes. In *all*? Not really.^/^/If we accept that map, block, object, hash, etc. are different, and have different interfaces, it will make some things harder, others easier. It does mean you may have to think a little more at times, which I'm not opposed to.^/^/WRT JSON null values, I think it just means that `map!` is probably a bad fit for JSON objects. They may seem convenient, but if we have to hack around `none!` values, it's not worth it. Just use objects. I'll revert my JSON lib to do that unless @dockimbel says maps are the way to go, and offers a solution that fits Red in his mind.}
    sent: "2016-11-17T00:50:29.314Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "582ca4e04182d0a76b3384bc"
    text: {@dockimbel I don't think I need any help with the powershell stuff. I think all I would need from you is approval of the versioning scheme for pre-release Chocolatey packages, and eventually you or qtxie would need to create a Chocolatey account and get the user-token from there and put it into the Appveyor config, and I'd add that account as a package maintainer so submissions would be accepted (unless you'd rather add me to your Appveyor account, but this seems cleaner). I will work out more of the specifics for doing that.^/When it is ready, I guess I can submit a PR for updating the Appveyor config to pull that stuff in. I'll see if I can test some things out in Appveyor and get back to you.}
    sent: "2016-11-16T18:26:40.566Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "582c88c3df5ae96645661b45"
    text: {@dockimbel I am preparing myself for reviewing the TO/MAKE functions as they apply to all possible combinations of source value and target type. How far are you with these, in other words, should I already start to raise issues or are there many combinations still pending?}
    sent: "2016-11-16T16:26:43.549Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582c6507bd2f135f1a25ceeb"
    text: {@WiseGenius `I don't think I could replace many of those uses with object!s and hash!s.` Do you have some examples where replacing maps would be an issue or counter-productive? I seldom use maps, so I'm curious about such use-cases.}
    sent: "2016-11-16T13:54:15.386Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c507fe462097a3057eb7d"
    text: {> I'll try to give more thoughts tomorrow on the options for a JSON null representation in Red.^/^/Well, I just hope we don't end up adding a new datatype just for `null`. That would be a shame and a waste, since it's purpose is basically equivalent to `none`. ;)}
    sent: "2016-11-16T12:26:39.003Z"
    editedAt: "2016-11-16T12:27:27.518Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c4f01bd2f135f1a254836"
    text: {> removing that feature would reduce the added value of the map! datatype, making it a candidate for removal.^/^/Back in September 2014, I said,^/> Anyhow, as soon as the `map!` data-type has been written, I plan to make Red my primary programming language.^/^/And that's exactly what I did. `map!` was the only thing keeping me in Rebol 3 at the time. I heavily use `map!`s in all my projects. I don't think I could replace many of those uses with `object!`s and `hash!`s. They're not as useful to me as `map!`s, and it's certainly not because you can remove their keys with `none`.^/As I keep saying, though, the change I'm suggesting isn't going to make `map!`s a thousand times better for me. Actually, it will break all my code at first. I just think it makes it a slightly better datatype, that's all. JSON isn't the only reason, and not having the change doesn't make JSON impossible. I'll just change my codec to read `null` as `'null`, as you wisely suggest.}
    sent: "2016-11-16T12:20:17.944Z"
    editedAt: "2016-11-16T12:23:37.705Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c4dd531c5cbef43026025"
    text: {@WiseGenius I'm currently focusing on libRed coding, though, I'll try to give more thoughts tomorrow on the options for a JSON `null` representation in Red.}
    sent: "2016-11-16T12:15:17.603Z"
    editedAt: "2016-11-16T12:15:26.709Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c4d0ebd2f135f1a253ec8"
    text: "@rebolek Fair enough. ;-)"
    sent: "2016-11-16T12:11:58.191Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c4c5331c5cbef43025754"
    text: {@pekr ^/> Soon enough, I might need another conversion-matrix file, to describe various datatype accessors. Append, insert, put, set, get, extend, etc. Novice users might wonder, why to extend map, one can't use append, and has to use extend, if the result is just the same ... ^/^/You don't need a matrix for that, a regular documentation would suffice. Different API is required when the datatype semantics differ too much from other ones. For map!, keys need special care wrt casing which cannot be covered by most series actions. Also, map! enforces a key/value structure, so a modifying action like `put` (as a counter-part to `select`) is welcome. `put` also works on `any-block!` values. `set` and `get` are supported by map, because they allow for the convenient path notation to be used to represent `<map>/<key>`. Last but not least, `extend` has been introduced because `append` does not have a `/case` refinement. I suggest you re-read the `map!` documentation in detail.}
    sent: "2016-11-16T12:08:51.268Z"
    editedAt: "2016-11-16T12:13:34.314Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c4b4a715933bd5573aa8d"
    text: {@dockimbel @WiseGenius Yes, it was rhetorical question, I was just showing some examples where Red functions return `none`:)}
    sent: "2016-11-16T12:04:26.644Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c4988e097df7575bb3f28"
    text: {@WiseGenius ^/1. Probably, but removing that feature would reduce the added value of the `map!` datatype, making it a candidate for removal.^/2. So setting the word is allowed, but reading it is not, that asymetry doesn't look good and might cause troubles. Note that is already possible to achieve that, by explicitely forcing the support an unset value (required in order to process specific cases where `unset` can be returned by an expression, but an error is unwanted):^/^/```lisp^/red>> set/any 'a ()^/^/red>> type? get/any 'a^/== unset!^/```}
    sent: "2016-11-16T11:56:56.735Z"
    editedAt: "2016-11-16T11:58:04.978Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c4818bd2f135f1a2523e5"
    text: {> Once again, `unset!` is not a first-class datatype in the general case, it is meant to error out in general usage, that's its purpose.^/^/1. I'm sure there are other easy/elegant ways to remove keys without using either `m/a: none` or `m/a: ()`.^/2. I don't think `a: ()` doing the same as `unset 'a` necessarily makes `unset!` into a higher-class datatype. For example, `type? a` would still error out if `a` is unset, rather than return `unset!`.}
    sent: "2016-11-16T11:50:48.282Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c472e88fa21d53c2c0cf4"
    text: {@dander `Also it's my understanding that the CI server runs a powershell script` Oh, you meant running it on Appveyor to auto-generate new Chocolatey builds. Well, that would be nice indeed, though we are not powershell users/experts here, so can't help you much with it.}
    sent: "2016-11-16T11:46:54.207Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c45dedf5ae966456473df"
    text: {@WiseGenius `handled with care to ensure` You mean quoting `'null` word where due? That is part of regular programming practices. Though, setting it to `none` might not be the safest option, indeed.}
    sent: "2016-11-16T11:41:18.814Z"
    editedAt: "2016-11-16T11:41:33.605Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c452de097df7575bb267f"
    text: {@WiseGenius I wasn't sure, so I answered it anyway, to avoid further comments about it by someone jumping in the middle of  the discussion. ;-)}
    sent: "2016-11-16T11:38:21.008Z"
    editedAt: "2016-11-16T11:38:33.019Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c44ec65485ebc67a1fde7"
    text: {> Why does find return none here and does not raise an error?^/^/@dockimbel I think that  question was directed at me retorically to make a point.}
    sent: "2016-11-16T11:37:16.425Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c4483e097df7575bb23c3"
    text: {@rebolek `Why does find return none here and does not raise an error?` Because `none` represents a possible valid result, while an error represents an invalid or forbidden state, which requires stopping the execution flow, and signalling it to the user. If searching for a value was always expected to succeed, then an error would have been appropriate on failure, but that is not the case. Returning `none` allows to signal a `specific` resulting state without disrupting the execution flow. That is also why `none` is considered the same as `false` in conditional expressions, this leads to short and elegant code patterns in Rebol languages.}
    sent: "2016-11-16T11:35:31.653Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c4468df5ae96645646ae2"
    text: {> Besides, what is wrong with using a `null` word to represent the special `null` value in JSON (especially if you define it as `null: none`)?^/^/All the other JSON values I can think of have a literal representation. The word `null` would be the only `word!`. Unlike the other values, `null` would have to be handled with care to ensure it's not accidentally evaluated when being passed around, etc., _especially_ if `null` is set to `none`, because then the key would be removed if evaluated.^/Also, the purpose of `null` is the same purpose of `none`, and Red functions that use the `null` value should be able to use it as `none`.^/And again, JSON isn't the only reason to have `none` values in `map!`s. There are are other uses for it in Red internally, as there are for associative arrays in any language, which is precisely the reason `null` exists in JSON in the first place.}
    sent: "2016-11-16T11:35:04.068Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c41c931c5cbef43021f83"
    text: {You can look at it differently, `map!` is meant to work like a dictionnary, where each entry has a value. A dictionnary would not contain an entry like: "word: no definition" (which is what `none` means in map!), that would be a mismatch.}
    sent: "2016-11-16T11:23:53.964Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c40fae097df7575bb125c"
    text: {Once again, `unset!` is not a first-class datatype in the general case, it is meant to error out in general usage, that's its purpose.}
    sent: "2016-11-16T11:20:26.083Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c4076bd2f135f1a24fa76"
    text: {@dockimbel This is what I value about `map!` too. I'm not arguing against being able to add/remove key/value couples so easily. I just don't think `none` is the way. I believe that this should work instead:^/```^/red>> m/a: ()^/red>> m^/== #()^/```^/And that this:^/```^/a: ()^/```^/should do the same as:^/```^/unset 'a^/```}
    sent: "2016-11-16T11:18:14.562Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c400adf5ae966456452cd"
    text: {Besides, what is wrong with using a `null` word to represent the special `null` value in JSON (especially if you define it as `null: none`)?}
    sent: "2016-11-16T11:16:26.651Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c3dbce097df7575bb002f"
    text: {@WiseGenius Having keys set to `none` to remove them and being able to set non-existent keys in maps to define them, is what makes `map!` useful. Being able to add/remove key/value couples using a unique expression like: `m/key: <value>` is very valuable, despite being uncommon in the language otherwise. If those features are removed, we can then simply drop `map!` datatype, as it would be redundant with `hash!` or `object!`, depending on the use-case.}
    sent: "2016-11-16T11:06:36.241Z"
    editedAt: "2016-11-16T11:09:36.642Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c3d5cd5990a176b99bd1a"
    text: {And if non-existing keys should raise an error, why not using `object!`?}
    sent: "2016-11-16T11:05:00.820Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c3d29715933bd5573a5c1"
    text: {Also:^/```^/red>> b: [a b c]^/== [a b c]^/red>> b/4^/== none^/```}
    sent: "2016-11-16T11:04:09.216Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c3c6665485ebc67a1d260"
    text: {For me, it sounds like the argument is “Be able to have existing keys with `none` values in `map!`s.” v.s. “Have a more elegant way to check whether a key exists than the standard way.”. I see the first one as an obvious win, as having much more power and use than just doing one little thing more neatly.}
    sent: "2016-11-16T11:00:54.058Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c3c46d5990a176b99bcb6"
    text: {I don’t agree that it’s using `none` it the way it was intended. See this:^/```^/red>> find "abc" #"d"^/== none^/```^/Why does `find` return `none` here and does not raise an error?}
    sent: "2016-11-16T11:00:22.327Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c39fd88fa21d53c2bc203"
    text: {@rebolek Checking like that has very little gain compared to what's lost. `value?` could be used for that. Besides, if a key was expected to exist and doesn't, and code tries to use its value for something (other than just checking its existence), it should give an error and not silently return `none`, because you might want to be aware of that.^/Please note, that if `map!`s were fixed to the way I'm suggesting, it would break every project I've ever written in Red and I'd have to change my code in every one, because I use `map!`s a **lot**! The reason I'm arguing for this, is that I believe it is the proper way for `map!` to function to be consistent with the rest of Red. It's currently not using `none` in the way `none` was intended, and that causes restrictions on what can be done with `map!`s.}
    sent: "2016-11-16T10:50:37.645Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c375e37fbab5354b933ca"
    text: {I understand that for your user-case this is not good, but then you should probably use something else than `map!`.}
    sent: "2016-11-16T10:39:26.253Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c373f37fbab5354b933c8"
    text: {I thought so. But that goes against simplicity and elegancy of `map!`, where you can test for non-existing values without rising an error.}
    sent: "2016-11-16T10:38:55.441Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c36cfdf5ae96645642211"
    text: {@rebolek My first guess is that It should give an error, just as it does here:^/```^/red>> a^/*** Script Error: a has no value^/*** Where: catch^/```^/and here:^/```^/red>> o: make object! []^/== make object! []^/red>> o/a^/*** Script Error: cannot access a in path o/a^/*** Where: catch^/```^/}
    sent: "2016-11-16T10:37:03.266Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c3600d5990a176b99b9f8"
    text: {@WiseGenius So, what should this return:^/```^/m: #()^/m/a^/```^/?}
    sent: "2016-11-16T10:33:36.304Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c35a865485ebc67a1a819"
    text: {@dockimbel The following code:^/```^/red>> m: #()^/== #()^/red>> m/a: none^/== none^/red>> m^/```^/currently, gives this result.^/```^/== #()^/```^/But I'm saying that that is an illogical exception to the rest of the Red language carried over from an early version of Rebol 3, and that the solution to the JSON `null` problem and others, is that Red should give this result:^/```^/== #(^/    a: none^/)^/```^/Since, as you say, `none`s “purpose is to express "nothing" or "no value", but with a value, acting as a place-holder (unlike unset!).”}
    sent: "2016-11-16T10:32:08.076Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c33f865485ebc67a1a0a8"
    text: {For representing the JSON `null` value, I don't have a solution from top of my head, this needs some research. In the meantime, you can try to use `hash!` which is more flexible than `map!`.}
    sent: "2016-11-16T10:24:56.476Z"
    editedAt: "2016-11-16T10:25:08.478Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c3353c2f2cf727519f960"
    text: {It's reported here: [#2201](https://github.com/red/red/issues/2201).}
    sent: "2016-11-16T10:22:11.520Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c3320df5ae96645640d77"
    text: {@WiseGenius Actually, `m/a: ()` should raise an error, that's a bug. Same goes for `obj/a: ()`, it should error out.}
    sent: "2016-11-16T10:21:20.163Z"
    editedAt: "2016-11-16T10:23:17.225Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c3299e097df7575babf0f"
    text: {Currently, this is what happens:^/```^/red>> m/a: ()^/red>> m^/== #(^/    a: unset^/)^/```^/This is what I think should happen:^/```^/red>> m/a: ()^/red>> m^/== #()^/```}
    sent: "2016-11-16T10:19:05.920Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c31e531c5cbef4301c4a6"
    text: {@WiseGenius `Setting keys values to unset!` You cannot do that easily, `unset!` is not a fully first-class datatype, that's on purpose. "Setting to unset" is an oxymoron in regular code (even though we have an escape mechanism to achieve it when really needed).}
    sent: "2016-11-16T10:16:05.060Z"
    editedAt: "2016-11-16T10:18:08.690Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c31cb65485ebc67a191c7"
    text: {That's why `map!` keys shouldn't be removed when being set to `none!` values, but only when they're set to `unset!`.}
    sent: "2016-11-16T10:15:39.193Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c313c65485ebc67a18f2a"
    text: {> @WiseGenius `unset!` datatype is not a regular datatype, it has no literal value to represent it, so you need indirect ways to produce it (like `()` or `prin ""`). It's there only to serve edge cases where we need to test for the *absence* of a value. `none!` datatype has a single value, which literal form is `none`. Its purpose is to express "nothing" or  "no value", but *with a value*, acting as a place-holder (unlike `unset!`).^/^/@dockimbel This is precisely what _I_ was arguing!}
    sent: "2016-11-16T10:13:16.423Z"
    editedAt: "2016-11-16T10:14:26.522Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582c311088fa21d53c2b9003"
    text: {> `m/null` like any other Red value can directly be used as conditional expression, no need to write such verbose code (or just prepend `to-logic` if you need a logic! value).^/^/@dockimbel In that example if mine, `m/null` _was_ being used as a conditional expression. The content of the blocks was irrelevant, and was just representing 2 generic blocks of code.^/The point of my example was that if JSON's `null` has been converted to the `word!` `none` (as in rebolek's example above it) instead of a `none!` value, then it will be seen as `true` in expressions instead of `false`. This is undesirable, but not a big deal.^/The main problem we were discussing, is that if JSON's `null` is converted to a `none!` value, then the key is removed from the `map!`. This is not the only reason that I'm saying that `map!`s shouldn't behave this way. Setting keys values to `unset!` is what should remove them from the `map!`. Ironically, the current implementation allows `map!` keys to have `unset!` values, but that's probably a mistake. Sorry if my English is too lazily concise. Do I need to elaborate on anything else I explained in the discussion above?}
    sent: "2016-11-16T10:12:32.472Z"
    editedAt: "2016-11-16T10:14:00.653Z"
    v: 3
    author: "556ae44715522ed4b3e13190"
)#(
    id: "582c2edd65485ebc67a18437"
    text: {@WiseGenius `unset!` datatype is not a regular datatype, it has no literal value to represent it, so you need indirect ways to produce it (like `()` or `prin ""`). It's there only to serve edge cases where we need to test for the *absence* of a value. `none!` datatype has a single value, which literal form is `none`. Its purpose is to express "nothing" or  "no value", but *with a value*, acting as a place-holder (unlike `unset!`).}
    sent: "2016-11-16T10:03:09.398Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c2b08bd2f135f1a248aa3"
    text: {@WiseGenius  ^/> And although not really a big deal, but it's no longer so neat to check:^/```^/red>> either m/null [true][false]^/== true^/```^/^/`m/null` like any other Red value can directly be used as conditional expression, no need to write such verbose code (or just prepend `to-logic` if you need a logic! value).}
    sent: "2016-11-16T09:46:48.031Z"
    editedAt: "2016-11-16T09:49:26.280Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c2a95df5ae9664563dcc0"
    text: {@pekr `In fact, my first yay came, when object!diverged from series ...` Do you understand that objects and series are different data structures? If you want all composite datatypes to have the same API, then you should switch to Lua and use  tables for everything. That certainly will make your code much more expressive.^/`Shouldn't we just find the counterpart to put? ` It's called `select` and described in [map! documentation](http://doc.red-lang.org/).}
    sent: "2016-11-16T09:44:53.521Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c275088fa21d53c2b52dc"
    text: "I could look into doing it in Red though :smile: "
    sent: "2016-11-16T09:30:56.202Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "582c270f88fa21d53c2b50f7"
    text: {@dockimbel  that would probably make a lot of sense, but I'm still learning Red, so it's perhaps a bit easier for me to use powershell. Also it's my understanding that the CI server runs a powershell script, so I figured that would be easier to integrate.}
    sent: "2016-11-16T09:29:51.547Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "582c262de097df7575ba74d8"
    text: {@dander I'm not sure to understand, you want us to use powershell to generate Red Chocolatey packages? Why not make a Red script for that?}
    sent: "2016-11-16T09:26:05.087Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582c200a88fa21d53c2b2183"
    text: {I don't know how the build artifact gets from the CI server to the web server, so some other pieces may be missing, but I'd be happy to continue on with this project and fill in the missing pieces if it seems useful}
    sent: "2016-11-16T08:59:54.742Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "582c1f8adf5ae96645638b92"
    text: {@dockimbel , @qtxie I just checked in a [powershell script](https://github.com/dander/chocolatey-packages/tree/master/automatic/red) which can be used to produce a Chocolatey package given a red executable. It assumes Chocolatey tools and Powershell (at least 3.0 I believe) are available. It doesn't yet have the capability to upload the package to the Chocolatey repository, but that would be pretty easy to add. It just involves setting a user token in a secure variable on the CI configuration, but I haven't worked out how that works yet, and wanted to check with you guys before figuring that out.^/^/One detail that would need to be determined is the version format for these packages. Including a hyphen in the name implies that it is a pre-release version, so Chocolatey will ignore it unless you specify the --pre flag. Otherwise, it is treated as slightly lower value than the same version number without any hyphens. I think the existing 1.0.<build counter> number with '-alpha' or '-beta' appended seems pretty sensible.^/^/The upshot of doing this is that it makes it pretty easy to keep red updated (while staying in the path) with the command `cup red --pre`}
    sent: "2016-11-16T08:57:46.243Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "582c1ef188fa21d53c2b1b87"
    text: "@pekr Yes, possible, but more complex."
    sent: "2016-11-16T08:55:13.638Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582bf4ec65485ebc67a04d5b"
    text: {Just wonder, if "reverse" scenario would work. Distributing red.exe (gui-console.exe), which is now capable to read http, hence download (some kind of read-thru cache) an R2 interpreter and call it via `CALL`to compile a stuff?}
    sent: "2016-11-16T05:55:56.097Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "582bf48131c5cbef4300866c"
    text: {red.exe should be abandoned, confusing at best :-)}
    sent: "2016-11-16T05:54:09.628Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "582befbd88fa21d53c2a3c50"
    text: {@geekyi There's a section in README explaining how to run Red from sources.}
    sent: "2016-11-16T05:33:49.038Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582b753865485ebc679db5e7"
    text: "(under build/ folder)"
    sent: "2016-11-15T20:51:04.314Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b750c31c5cbef43fe1e16"
    text: {@dockimbel shouldn't something to that effect be there in the README ?}
    sent: "2016-11-15T20:50:20.088Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b74cabd2f135f1a211284"
    text: {@moscati That is a source of confusion for many, so much so that it deserves to be in a FAQ :p Only, it is just a *temporary* thing that is used for building Red binaries for the *covenience* of newcomers to red who cannot go through the steps (not *really* their fault) to building red from sources}
    sent: "2016-11-15T20:49:14.285Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b42a531c5cbef43fcec1f"
    text: {@WiseGenius, correct. Sorry my message wasn't clear. Just got in from travelling.}
    sent: "2016-11-15T17:15:17.214Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "582b3a66071775c573b3a08d"
    text: {@moscati I see. That’s for the Red executable - one exe file that has Rebol inside for compilation. But you don’t need that, to build your own .exe files, you just need standard free version of Rebol and Red sources from Github.}
    sent: "2016-11-15T16:40:06.657Z"
    editedAt: "2016-11-15T16:40:18.090Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582b37a9e097df7575b54c3d"
    text: {@rebolek From here: https://github.com/red/red/tree/master/build}
    sent: "2016-11-15T16:28:25.622Z"
    v: 1
    author: "582b0549d73408ce4f36043b"
) #(
    id: "582b15e4e462097a30510480"
    text: {@TimeSlip Thank you! Sorry for the late response. Too busy :-)}
    sent: "2016-11-15T14:04:20.922Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "582b0da60a085e6214ceface"
    text: "@moscati Definitely not. Why do you think so?"
    sent: "2016-11-15T13:29:10.277Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582b06d888fa21d53c24de65"
    text: {Hi, For building red from sources, do i really need rebol sdk?}
    sent: "2016-11-15T13:00:08.052Z"
    v: 1
    author: "582b0549d73408ce4f36043b"
) #(
    id: "582ac1fbdf5ae966455b9f56"
    text: {@greggirwin ^/> You can define a literal map! with a none value for a key...^/^/I assume you mean the `word!` `none` and not an actual `none!` value?:^/```^/red>> m: #(a none)^/== #(^/    a: none^/)^/red>> type? m/a^/== word!^/```}
    sent: "2016-11-15T08:06:19.926Z"
    editedAt: "2016-11-15T08:06:40.893Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582a2adbc2f2cf72750ecd3f"
    text: {@WiseGenius, my JSON loader also omits values that are null in objects. The map!/none question is deep. On the surface, requiring something like `remove` on maps sounds nice, so you can set a key's value to `none`. @dockimbel will have to say. You can define a literal map! with a none value for a key, but `make` on a spec block with a none value omits that key.^/^/The deeper question, of course, is whether maps are intended to support `none` values for keys. If not, they aren't good targets for decoded JSON objects.}
    sent: "2016-11-14T21:21:31.672Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "582a24a3e462097a304bfcb0"
    text: {I see. Maybe there are some drawbacks. I'll wait and see.}
    sent: "2016-11-14T20:54:59.036Z"
    editedAt: "2016-11-14T20:55:16.758Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "582a23b2ec698d3d289b9aa1"
    text: {It’s not that low level. From a quick look at the source, I think that `pre-load` in `%VID.red` needs to support `path!` also. and that would would be all.}
    sent: "2016-11-14T20:50:58.399Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582a229edf5ae96645587857"
    text: "You mean at low level?"
    sent: "2016-11-14T20:46:22.885Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "582a2266a67790bd6ce1b874"
    text: "Yes. It’s also very easy to add"
    sent: "2016-11-14T20:45:26.665Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582a215165485ebc6795ffae"
    text: "I hope it will. Makes some coding easier."
    sent: "2016-11-14T20:40:49.670Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "582a1c5f0a085e6214cecc69"
    text: {@Rebol2Red VID does not accept `path!` in various places where it accepts `word!`. IMO this will be implemented later.}
    sent: "2016-11-14T20:19:43.616Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582a107665485ebc6795a012"
    text: {Why not^/```^/p: copy []^/append p make image! 100x100^/append p make image! 100x100^/view [image p/1 image p/2]^/```^/Instead of:^/```^/p: copy []^/append p make image! 100x100^/append p make image! 100x100^/p1: p/1^/p2: p/2^/view [image p1 image p2]^/```^/First sample does not work}
    sent: "2016-11-14T19:28:54.561Z"
    editedAt: "2016-11-14T19:38:29.432Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5829808be462097a30479602"
    text: {I don't like ```map/key: none```. It just seems restrictive to not have a distinction between none! and unset!.}
    sent: "2016-11-14T09:14:51.157Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5829767831c5cbef43f28386"
    text: {@rebolek What do you like about `map/key: none` for deletion? Would `map/key: ()` fulfil those desires?}
    sent: "2016-11-14T08:31:52.395Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5829742ddf5ae9664553dfce"
    text: {Although it would break a lot of my existing code, and be incompatible with Rebol 3 (which the `#()` syntax already is anyway), I think the “proper” way for `map!` to work is like this:^/```^/red>> m: #()^/== #()^/^/red>> m/a: none^/== none^/red>> m^/== #(^/    a: none^/)^/^/red>> m/a: ()^/red>> m^/== #()^/```^/However, the last part of that example implies that:^/```^/a: ()^/```^/should do the same as:^/```^/unset 'a^/```^/instead of an error:^/```^/red>> a: ()^/*** Script Error: a: needs a value^/*** Where: a^/```^/This seems logical to me too, but is there a lot of code relying on this error?}
    sent: "2016-11-14T08:22:05.967Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5829707f45c9e3eb4335adf6"
    text: {Yes. I still think it would be tricky to pass this back and forth, though. All the other JSON values I can think of are literal, and this way `none` (or `null`) would be the only `word!`. It would have to be handled with care to ensure it's not accidentally evaluated, etc.^/And although not really a big deal, but it's no longer so neat to check:^/```^/red>> either m/null [true][false]^/== true^/```^/I also considered using `unset!`, but this is even sillier, and contradicts the purpose of it:^/```^/red>> m/null: ()^/red>> m^/== #(^/    null: unset^/)^/red>> either m/null [true][false]^/*** Script Error: block did not return a value^/*** Where: either^/```^/I personally feel that the purpose of `none!` is to represent the empty value of a set key or `word!`, and that `unset!` is for those that are... unset. I don't think that map is being true to the purpose of those datatypes. However, like I said, a lot of my code would break if it was suddenly changed. I think it would be worth it though, so long as a warning of the plan is given early enough ahead of the implementation.}
    sent: "2016-11-14T08:06:23.217Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58296a2c35000772041b9600"
    text: {@WiseGenius you can do something like:^/```^/red>> m: #()^/== #()^/red>> m/null: quote none^/== none^/red>> m^/== #(^/    null: none^/)^/```}
    sent: "2016-11-14T07:39:24.151Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582969793888720c279a1e52"
    text: {I am afraid I don’t. I understand that this behaviour is tricky in case of JSON conversion. }
    sent: "2016-11-14T07:36:25.664Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582968c8df5ae9664553a52f"
    text: {@rebolek Do you have any ideas for how to handle JSON's `null` when wanting to keep a key with a `null` value, as in [my example above](https://gitter.im/red/red?at=58295007c2f2cf7275097858)?}
    sent: "2016-11-14T07:33:28.941Z"
    editedAt: "2016-11-14T07:34:58.974Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58296773fd9dc2742bbf442e"
    text: "I like `map/key: none` for deletion."
    sent: "2016-11-14T07:27:47.111Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5829652ce462097a304708e5"
    text: {Soon enough, I might need another conversion-matrix file, to describe various datatype accessors. Append, insert, put, set, get, extend, etc. Novice users might wonder, why to extend map, one can't use append, and has to use extend, if the result is just the same ... Shouldn't we just find the counterpart to `put`? Pity `delete`is too general word, to be used to `remove`from maps ...}
    sent: "2016-11-14T07:18:04.076Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "582964bd45c9e3eb43357354"
    text: {@qtxie Currently, it's the other way around, which I think is silly:^/```^/red>> m: #()^/== #()^/^/red>> m/a: none^/== none^/red>> m^/== #()^/^/red>> m/a: ()^/red>> m^/== #(^/    a: unset^/)^/```^/See [#2201](https://github.com/red/red/issues/2201).}
    sent: "2016-11-14T07:16:13.286Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5829641931c5cbef43f2270a"
    text: {I am not sure I like `unset`here. I never liked removal of map element by setting it to none. In fact, my first yay came, when `object!`diverged from series ...}
    sent: "2016-11-14T07:13:29.570Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58295edf3888720c279a1cb3"
    text: {We can use `set` to set the map!'s keys, can we use `unset` to delete it? If so, we can get rid of the `#[none]` way.}
    sent: "2016-11-14T06:51:11.019Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58295007c2f2cf7275097858"
    text: {@greggirwin My JSON codec equates Red's `none` with JSON's `null`. But there is a problem with doing this, because `map!` keys set to `none` are removed.^/For example, when writing to CouchDB's "_replicator", I want to send a document with the following field:^/```^/^-"user_ctx": {^/^-^-"name": null,^/^-^-"roles": []^/^-}^/```^/But in Red:^/```^/^-"user_ctx" #(^/^-^-"name" #[none]^/^-^-"roles" []^/^-)^/```^/immediately becomes:^/```^/^-"user_ctx" #(^/^-^-"roles" []^/^-)^/```^/So I get back:^/```^/#(^/^-"error" "forbidden"^/^-"reason" "The given `user_ctx.name' is not valid"^/)^/```^/I haven't tested your codec for this yet, but from a quick glance of the code, I suspect it does this too?^/There are 2 things I'm initially thinking:^/ 1. Should the JSON codec use something other than `#[none]` to represent `null` (such as the `word!` `none` or `null`)?^/ 2. Should Red's `map!` not behave this way, and instead accept `#[none]` as a legitimate value (which has been frequently suggested before)?^/^/I'm leaning towards 2. However, both 1 and 2 would break a lot of my existing code, so I'm not in a hurry to get this fixed any time soon. ;)}
    sent: "2016-11-14T05:47:51.853Z"
    editedAt: "2016-11-14T05:50:17.457Z"
    v: 3
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58294d9945c9e3eb43351527"
    text: {@dockimbel Concerning `object!`<-to->`map!`, I was kind of hoping they would eventually both be allowed.^/A JSON codec will have the same issues, but this doesn't detract from the value of having one.^/Currently, I'm the only user of my unfinished JSON codec, so I can trust that I'm not going to do silly things which don't make sense, like converting this `map!` to either a Red `object!` or a JSON object:^/```^/#(^/^-a 1^/^-"a" 2^/)^/```^/If I were to share my codec (though I hope Red will get a native one first so I don't have to), I would give the user the great power and the great responsibility that comes with it to not try to do such silly things either, but I first have to define what will happen if/when they do try such things before I can let them have it.^/So for now, I see the value of keeping both `map!`-to-`object!` and `object!`-to-`map!` forbidden with the possibility of adding them later when the behaviour in such abused cases are decided and well defined, rather than providing a feature too early and then removing or changing it later when it becomes problematic, thus breaking people's code which relied on it.^/I've been using a very small/crude `to-map` function for Red `object!`s in my JSON codec, and though it works fine for my purposes, I'm looking forward to replacing it with `to map!` when it becomes available in Red so that it will have Red's future-well-thought-out behaviour when it gets abused.}
    sent: "2016-11-14T05:37:29.695Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5829349c45c9e3eb4334bf33"
    text: {@JacobGood1 Building Red *is* a way to enjoy life. ;-)}
    sent: "2016-11-14T03:50:52.623Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5828cb7335000772041b8760"
    text: {before any one gets offended I am joking(not sure there's that many Americans in here, so no one was probably offended)... =)}
    sent: "2016-11-13T20:22:11.517Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5828cb2935000772041b8756"
    text: {@dockimbel you don't have time to enjoy life doc, you have to make red}
    sent: "2016-11-13T20:20:57.117Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5828a65365485ebc678dc678"
    text: {They have uploaded the whole movie.    https://www.youtube.com/watch?v=cEx0MgjG8zc    ,   over and out.  }
    sent: "2016-11-13T17:43:47.983Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5828a24adf5ae96645500b15"
    text: {It's always the imagination and picture in mind , that comes to reallity.  Thank you for now and i will be back again with programming issues.}
    sent: "2016-11-13T17:26:34.026Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5828a19a65485ebc678da7a4"
    text: {@Mennohexo Can't remember it, but will try to see it, sounds interesting.}
    sent: "2016-11-13T17:23:38.015Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5828a05fc2f2cf727506491c"
    text: {It's really fascinating and motivating robot technique and computer algorhytms with artifical intelligence mobile robots.}
    sent: "2016-11-13T17:18:23.382Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "58289ee0df5ae966454ff9f0"
    text: "hi.  have you seen the motion picture EVOLVER ?"
    sent: "2016-11-13T17:12:00.408Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "58288c5045c9e3eb4331b5fd"
    text: "@Mennohexo ??"
    sent: "2016-11-13T15:52:48.165Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582889acdf5ae966454f8bed"
    text: "EVOLVER 20 Bonus Points"
    sent: "2016-11-13T15:41:32.273Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "582866ffe462097a30427950"
    text: {@WiseGenius Good point. `object!` can have functions with words bound to it, and that context would be lost in the `map!` leading to undefined behavior if the function would be called. So probably both ways should be forbidden. }
    sent: "2016-11-13T13:13:35.457Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5828655a88fa21d53c16df88"
    text: {@dockimbel In the `to` matrix, why is `object!`-to-`map!` forbidden and `map!`-to-`object!` allowed? I would have expected it to be the other way around, since `map!` can have `word!`s as keys but `object!` can't have all types of keys as its “word”s.}
    sent: "2016-11-13T13:06:34.474Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5828634088fa21d53c16d83e"
    text: "But red.lang would be very appropriate if it was!"
    sent: "2016-11-13T12:57:36.663Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "58286325c2f2cf7275053380"
    text: {@DonaldTsang I don't think ".lang" is a valid TLD as yet. See: https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains}
    sent: "2016-11-13T12:57:09.600Z"
    editedAt: "2016-11-13T12:57:57.514Z"
    v: 2
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "58281b1d65485ebc678b60e1"
    text: "@maximvl why not http://red.lang/ ?"
    sent: "2016-11-13T07:49:49.050Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "5827a60a31c5cbef43ead472"
    text: "@iceflow19 Yes, if you need to do it now."
    sent: "2016-11-12T23:30:18.752Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "582736f9c2f2cf7275004d82"
    text: {@PeterWAWood Meaning I'll need to write a routine to retrieve them from R/S}
    sent: "2016-11-12T15:36:25.457Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "5826fb336cb720763068b751"
    text: "@dockimbel Thanks"
    sent: "2016-11-12T11:21:23.689Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5826fb1cdf5ae9664548ccdc"
    text: {@henrikmk The labels can only be set by repo owners. We'll process the (long) list of new tickets as soon as we finish with the Todo-list for 0.6.2 (should be close now).}
    sent: "2016-11-12T11:21:00.729Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5826f623df5ae9664548b956"
    text: {In the issues list, there's a lot of issues that appear to be GUI related, yet have no GUI label. Only 5 issues have a GUI label. I don't know if that's intentional, but it makes it hard to distinguish GUI bugs from core bugs, if you're not interested in GUI stuff right now.}
    sent: "2016-11-12T10:59:47.841Z"
    editedAt: "2016-11-12T11:00:05.722Z"
    v: 2
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5826b4aadf5ae9664547bbde"
    text: {@iceflow19 There is an existing wish about command line args - #2242}
    sent: "2016-11-12T06:20:26.716Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5826acd831c5cbef43e6b181"
    text: {Small question is getting command line args the same as in rebol?  For whatever reason I don't get any command line args in system/options when using a compiled exe.}
    sent: "2016-11-12T05:47:04.209Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "5826277b6cb720763065a76e"
    text: {If you have troubles building your own version, check automated builds here http://www.red-lang.org/p/download.html}
    sent: "2016-11-11T20:18:03.092Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5826270045c9e3eb432806ef"
    text: {I was using the GUI version on Win, which did not have email!}
    sent: "2016-11-11T20:16:00.955Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "582626bbe462097a30394230"
    text: {But stable version...Red is still in alpha :smile: So I suggest using always the latest version, I build Red from sources few times a week. There's always something new and always some bug fixes.}
    sent: "2016-11-11T20:14:51.272Z"
    editedAt: "2016-11-11T20:15:01.306Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5826266531c5cbef43e4a443"
    text: "@BlackATTR_twitter 0.6.1 is last release."
    sent: "2016-11-11T20:13:25.239Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582625ce6cb7207630659b0a"
    text: "@rebolek Which is the current stable version..."
    sent: "2016-11-11T20:10:54.588Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5826248ec2f2cf7275fc063a"
    text: "@rebolek Ah, I was using  0.6.1"
    sent: "2016-11-11T20:05:34.561Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "58261d3cdf5ae96645455b0d"
    text: {Perlin.red with 0.6.2 code:^/```^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/image/acquire-buffer^/*** in file: %/C/Users/admin/Downloads/code-0.6.2/Scripts/perlin.red^/*** in function: exec/apply-texture^/*** at line: 326^/*** near: [image/acquire-buffer src :handle^/    s: (as series-buffer! texture/node/value)^/    val: as red-float!^/]^/```^/Line 326 does not exists?!^/^/Note: I am not searching for errors, i just want to use Red and look at what can be done with it.^/}
    sent: "2016-11-11T19:34:20.518Z"
    editedAt: "2016-11-11T19:40:45.378Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5826174445c9e3eb4327b693"
    text: {```^/view [text-list data ["1" "2"][x: face/selected unview]]^/print x^/^/view [drop-list data ["Dutch" 1 "English" 2][x: face/selected unview]]^/;  CODE STOPS HERE!^/print x ^/^/view [button "b" [x: face/text unview]]^/print x^/```}
    sent: "2016-11-11T19:08:52.950Z"
    editedAt: "2016-11-11T19:10:16.284Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58261469df5ae9664545288e"
    text: {@BlackATTR_twitter I’m not sure which version are you using, but `email!` works for me:^/```^/red>> type? looks@like-ema.il^/== email!^/```}
    sent: "2016-11-11T18:56:41.096Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582603116cb720763064ea58"
    text: {@Phryxe Does the value of x shows up in the console?^/First select item1 and then item2!}
    sent: "2016-11-11T17:42:41.669Z"
    editedAt: "2016-11-11T17:44:02.753Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "582600c935000772041b2682"
    text: {No console crash for me (Win 7). The window closes when one chooses one of the items.}
    sent: "2016-11-11T17:32:57.588Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5825fe056cb720763064cf32"
    text: {Regarding the Datatype Matrix - I was working on an article for Red over the past few weeks, and the intro part includes an introduction to the language. I noticed, however, that some values which were prominent in Rebol are not yet implemented in Red (e.g., email!). Is there a dev roadmap that shows a plan or expectation to implement additional values somewhere? Thanks. }
    sent: "2016-11-11T17:21:09.798Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5825fce7df5ae96645449d64"
    text: {Can someone verify this is not working. (It crashes? the console)^/Select the first item AND then the second item to observe it! Nothing shows up in the console anymore^/```^/view [^/^-drop-list data ["Dutch" "English"][x: face/selected unview]^/]^/print x^/```^/I have the latest version.}
    sent: "2016-11-11T17:16:23.361Z"
    editedAt: "2016-11-11T17:18:10.581Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58259f1b31c5cbef43e1da31"
    text: {I went through the matrix quickly  a first time, and detected what I think is an anomaly: `make bitset! integer!`should be `New bitset with integer slots (rounded up to multiple of 8) preallocated` as it is effectively now already.^/}
    sent: "2016-11-11T10:36:11.338Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58259c3531c5cbef43e1cb14"
    text: "@pekr thanks"
    sent: "2016-11-11T10:23:49.896Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58259c32e462097a303663a2"
    text: {I was looking inside red/docs repo, but turns out we also have docs in red repo :)}
    sent: "2016-11-11T10:23:46.690Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58259b57e462097a3036604a"
    text: {TO conversion matrix - an Excel file - https://github.com/red/red/blob/master/docs/to-datatype-matrix.xlsx}
    sent: "2016-11-11T10:20:07.665Z"
    editedAt: "2016-11-11T10:21:17.379Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58259a90c2f2cf7275f92c20"
    text: {@meijeru what is this matrix you are talking about?}
    sent: "2016-11-11T10:16:48.200Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5825987965485ebc67804457"
    text: {Thanks for the explanation on `any-list!`. The analogous comment as on `any-float!` applies to this new definition .}
    sent: "2016-11-11T10:07:53.474Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582596056cb720763062a1fa"
    text: {@dockimbel Happy to hear. The matrix is almost as valuable as the implementation, therefore I have permitted myself another comment (use of `any-list`) as well as a remark on the later commit (`any-float!`).}
    sent: "2016-11-11T09:57:25.599Z"
    editedAt: "2016-11-11T10:05:37.007Z"
    v: 4
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58258c05c2f2cf7275f8e706"
    text: "cool!"
    sent: "2016-11-11T09:14:45.955Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58258aca6cb720763062660d"
    text: {@meijeru Right, coding is the easy and quick part. ;-)}
    sent: "2016-11-11T09:09:30.055Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582589b1c2f2cf7275f8db13"
    text: "All in one day? Wow!"
    sent: "2016-11-11T09:04:49.901Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58258981df5ae96645423724"
    text: "@meijeru It's a plan we will implement today."
    sent: "2016-11-11T09:04:01.869Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5825897d895979485a7ee693"
    text: {@meijeru Definitely a plan, you can try what works now :)}
    sent: "2016-11-11T09:03:57.836Z"
    editedAt: "2016-11-11T09:04:34.556Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5825894165485ebc677ffb41"
    text: {@dockimbel Welcome to the TO/MAKE matrices in red/docs! Do I understand correctly that this is a **plan** for the implementation rather than a description of the current state? BTW I have made a small comment on the commit.}
    sent: "2016-11-11T09:02:57.092Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5824bb09df5ae966453e5d7c"
    text: "There is a newer file."
    sent: "2016-11-10T18:23:05.601Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5824a05bdf5ae966453dbf41"
    text: {I need the source code but http://static.red-lang.org/dl/auto/red-10nov16-bb99121.zip gives a 404 error}
    sent: "2016-11-10T16:29:15.129Z"
    editedAt: "2016-11-10T16:36:52.881Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "582490a945c9e3eb43201665"
    text: "@henrikmk :)"
    sent: "2016-11-10T15:22:17.458Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5824861c6cb72076305d3b41"
    text: "http://red.red/ looks available :P"
    sent: "2016-11-10T14:37:16.093Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582485e0df5ae966453d0638"
    text: {Red is kind of a generic word. How about renaming it to Smompupsiburp? :-)}
    sent: "2016-11-10T14:36:16.081Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "582479a331c5cbef43dc31a0"
    text: {but we can be creative and make up some names for Red-related resources}
    sent: "2016-11-10T13:44:03.767Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5824798ce097df7575941829"
    text: {yep, I think most generic words have been taken, the domain is there for 3 years already}
    sent: "2016-11-10T13:43:40.940Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582478c46cb72076305cddb4"
    text: {@maximvl Looks like http://www.language.red/ has already been taken!}
    sent: "2016-11-10T13:40:20.477Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
)#(
    id: "582453f265485ebc677986fc"
    text: {guys, I'm not sure if you know, but this is something to take into account: http://get.red/}
    sent: "2016-11-10T11:03:14.301Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5823fd18df5ae966453a207b"
    text: "@dockimbel Thanks."
    sent: "2016-11-10T04:52:40.913Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5823f45f6cb72076305a389d"
    text: {@PeterWAWood Runtime errors are not catchable in R/S. `catch` works only with exceptions created with `throw`. }
    sent: "2016-11-10T04:15:27.378Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5823e15fe097df7575912d9e"
    text: {@dockimbel @qtxie I am trying to write some Red/System tests that capture zero-divide runtime errors. I don't seem to be able to capture them using the ```[catch]``` function attribute or  the ```catch``` statement. Any hints on what I am doing wrong?^/^/Code^/```text^/Red/System []^/test: func [[catch]] [^/    print  [1 / 0 lf]^/]^/test^/print ["Zero divide caught by catch attribute" lf]^/print ["system/thrown: " system/thrown lf]^/^/catch 2147483647 [^/    print [1 / 0 lf]^/]^/print ["Zero divide caught by catch statement" lf]^/print ["system/thrown: " system/thrown lf]```^/^/Results^/```text^/../../Code/Red-System/test^/^/*** Runtime Error 13: integer divide by zero^/*** at: 0000242Dh^/``` }
    sent: "2016-11-10T02:54:23.391Z"
    editedAt: "2016-11-10T02:56:36.589Z"
    v: 4
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5823120cc4866354617926f4"
    text: {@meijeru We should support it. I'll update the code. Thanks.}
    sent: "2016-11-09T12:09:48.261Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5823111ce462097a3029149b"
    text: "@DideC I will need to have a look at it."
    sent: "2016-11-09T12:05:48.123Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582310abe097df75758c930e"
    text: {@dockimbel ^/> `-u` should be used just once, so a custom libRedRT is built for specific Red library functions used by R/S user code.  Though, there might be a conflict with `-t Windows`.^/^/I confirm that the `-t windows` always rebuild a full .exe (long lasting compilation), but not the `-t msdos`.^/Why is this ?}
    sent: "2016-11-09T12:03:55.045Z"
    editedAt: "2016-11-09T12:04:02.406Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5822d6aee097df75758b4b3e"
    text: {@greggirwin @JacobGood1 If we decide to allow paths evaluation in Parse at some point, then we'll have to change those rules to act like words/lit-words.}
    sent: "2016-11-09T07:56:30.783Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582256d8e097df757589219d"
    text: "@Zamlox Cool! :clap: "
    sent: "2016-11-08T22:51:04.199Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "582231ef78ec59ab054bfe06"
    text: {Question about image encoding/decoding: Red currently uses GDI+ for this, which recognizes the following image encodings: image/bmp, image/jpeg, image/gif, image/tiff, image/png. Of these, only image/tiff is not (yet?) supported by Red. Will it ever be? If not, why is the constant IMAGE_TIFF defined?}
    sent: "2016-11-08T20:13:35.466Z"
    editedAt: "2016-11-08T20:16:15.563Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582223b0d695f5db0f4d4f9a"
    text: ":+1: "
    sent: "2016-11-08T19:12:48.746Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58221db0c2f2cf7275e73ce6"
    text: {@dockimbel I have uploaded SVG related work to my github repository: https://github.com/Zamlox/red-tools/tree/master/svg^/ You can play with different transformations on rectangles, circles. }
    sent: "2016-11-08T18:47:12.016Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "582213aec2f2cf7275e6fc86"
    text: {That's a good thing to make clear in `parse` docs.}
    sent: "2016-11-08T18:04:30.500Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5822131b35e6cf0547730e75"
    text: {oh wait a minute this is odd...^/```^/red>> parse [there] [there]^/*** Script Error: PARSE - invalid rule or usage of rule: there^/*** Where: parse^/red>> parse [there] ['there]^/== true^/red>> parse [hi/there] [hi/there]^/== true^/red>> parse [hi/there] ['hi/there]^/== false^/```^/^/hmmm, i guess since path! is a datatype that is fine...^/}
    sent: "2016-11-08T18:02:03.607Z"
    editedAt: "2016-11-08T18:03:20.290Z"
    v: 4
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5822128745c9e3eb4312fd96"
    text: "`quote 'hi/there`"
    sent: "2016-11-08T17:59:35.506Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58221229c48663546178ec66"
    text: {What should I do when I want to match an exact path? I don't want to use path! I want it to match like a lit-word! would...^/```^/red>> parse [hi/there] ['hi/there]^/== false^/```}
    sent: "2016-11-08T17:58:01.974Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58220e4a45c9e3eb4312e385"
    text: {@DideC, new actions, natives, changes to `parse`, etc.  Look in %runtime/. If you're not changing anything there, you should be OK.}
    sent: "2016-11-08T17:41:30.464Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5821f34c31c5cbef43cf3753"
    text: {@dockimbel ^/> @DideC Is it a regression? If that's the case, can you tell which commit caused it?^/^/Forget it. Was caused by my code.^/^/> @DideC Only if it adds new calls to Red runtime API.^/^/What does that means (I'm completely dumb with R/S).}
    sent: "2016-11-08T15:46:20.555Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5821f1d2e097df757586ce4b"
    text: {@pekr I'd like to do that. I failed to get as far as making it a community effort, which was my wish. We'll see if I ever get that far. :-)}
    sent: "2016-11-08T15:40:02.308Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5821ef8845c9e3eb4312221e"
    text: {Yes ... you can bring-in your VID Junior project too :-)}
    sent: "2016-11-08T15:30:16.112Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5821ee21df5ae966452f0099"
    text: {@dockimbel thanks. I'll be probing around in here and ask some silly questions once in a while. time for me to get acquainted with Red. :-)}
    sent: "2016-11-08T15:24:17.855Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5821ede031c5cbef43cf17f9"
    text: "@henrikmk Well, glad to see you here anyway. ;-)"
    sent: "2016-11-08T15:23:12.937Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821ecb145c9e3eb4312118b"
    text: {yes, I suppose :-) I haven't used R3 for years now. ok, enough of that. I'm wasting your time.}
    sent: "2016-11-08T15:18:09.742Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5821ec87c2f2cf7275e6059b"
    text: {Same behavior for errors in Rebol3. It simplifies error handling as you don't need to convert it to an object anymore to access its properties safely.}
    sent: "2016-11-08T15:17:27.958Z"
    editedAt: "2016-11-08T15:18:20.203Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821ec5ac2f2cf7275e6040c"
    text: {interesting. I suppose that is a tad misleading, if you come straight from R2, but I guess it will work for everyone else. }
    sent: "2016-11-08T15:16:42.450Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5821ec0fe097df757586ab30"
    text: {The console will FORM the last returned value, including errors:^/```lisp^/red>> error? set/any 'res try [1 / 0]^/== true^/red>> res none^/== none^/red>> res/id^/== zero-divide^/```}
    sent: "2016-11-08T15:15:27.555Z"
    editedAt: "2016-11-08T15:16:14.330Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821eba9c2f2cf7275e5ff38"
    text: {@dockimbel ok? I asked, because that didn't appear to be the case:^/^/```^/red>> error? set/any 'res try [1 / 0]^/== true^/red>> res^/*** Math Error: attempt to divide by zero^/*** Where: /^/```}
    sent: "2016-11-08T15:13:45.496Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5821eb17e462097a30232ff8"
    text: {@DideC Is it a regression? If that's the case, can you tell which commit caused it?}
    sent: "2016-11-08T15:11:19.119Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821eac86cb72076304f5831"
    text: "@henrikmk Errors are disarmed by default in Red."
    sent: "2016-11-08T15:10:00.741Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821e56245c9e3eb4311e43e"
    text: {I get Compilation error with the yesterday build and the "-u" : ^/```^/-=== Red Compiler 0.6.1 ===- ^/^/Compiling E:\REBOL\RED\Github\Red-Raytracer\raytracer-gui-test.red ...^/...compilation time : 1620 ms^/^/Target: windows ^/^/Compiling to native code...^/*** Compilation Error: return type missing in function: red/stack/unwind ^/*** in file: %/E/REBOL/RED/Github/Red-Raytracer/modules/view/styles.red ^/*** in function: exec/render^/*** at line: 1865 ^/*** near: [^/    stack/reset^/]^/^/Processus terminé avec code quitter 1^/```}
    sent: "2016-11-08T14:46:58.463Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5821e2ed6cb72076304f2b89"
    text: {Is the list of unfinished functions on Trello comprehensive? I couldn't find DISARM in there (if it's planned).}
    sent: "2016-11-08T14:36:29.526Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "5821e1dedf5ae966452eb1ca"
    text: {@DideC Only if it adds new calls to Red runtime API.}
    sent: "2016-11-08T14:31:58.954Z"
    editedAt: "2016-11-08T14:32:04.311Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821d53ac2f2cf7275e57335"
    text: {> `-u` should be used just once, so a custom libRedRT is built for specific Red library functions used by R/S user code.  Though, there might be a conflict with `-t Windows`.^/^/@dockimbel Does the library must be rebuilt if the R/S code (in a .red script) is changed ?}
    sent: "2016-11-08T13:38:02.052Z"
    editedAt: "2016-11-08T13:38:57.070Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5821c276e097df757585bd34"
    text: "cool!"
    sent: "2016-11-08T12:17:58.840Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5821c24245c9e3eb43110f8f"
    text: "all right."
    sent: "2016-11-08T12:17:06.463Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5821c2386cb72076304e6875"
    text: {Qingtian says Red/Draw does support SVG gradients.}
    sent: "2016-11-08T12:16:56.018Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821c21f6cb72076304e680c"
    text: ";)"
    sent: "2016-11-08T12:16:31.922Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5821c21a6cb72076304e67e1"
    text: "keep up your great work then! :-)"
    sent: "2016-11-08T12:16:26.715Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5821c20645c9e3eb43110ebe"
    text: "I will tell you when I will get there :)"
    sent: "2016-11-08T12:16:06.935Z"
    editedAt: "2016-11-08T12:16:16.908Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5821c202e097df757585b9f1"
    text: "(Cyphre is the author of R2 AGG port)"
    sent: "2016-11-08T12:16:02.048Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5821c1ed78ec59ab054954aa"
    text: {I remember, in the past, Cyphre stated, that there might be some differences in how are gradients done. Are we compatible here?}
    sent: "2016-11-08T12:15:41.162Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5821c1c1e097df757585b89d"
    text: "exactly, an not only."
    sent: "2016-11-08T12:14:57.335Z"
    editedAt: "2016-11-08T12:15:09.901Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5821c1b331c5cbef43ce1499"
    text: {Cool, so Red would be able to display SVG stuff as icons, etc.}
    sent: "2016-11-08T12:14:43.677Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5821c19531c5cbef43ce13b5"
    text: "yes, it is an XML file format."
    sent: "2016-11-08T12:14:13.632Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5821c172c2f2cf7275e50336"
    text: {@pekr No, the opposite. SVG is an XML file format.}
    sent: "2016-11-08T12:13:38.517Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821c15f31c5cbef43ce12c7"
    text: {well, what I was thinking was to be able to read an SVG file and translated into corresponding  Draw commands to be displayed.}
    sent: "2016-11-08T12:13:19.699Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5821c0fbc2f2cf7275e5011e"
    text: {OK, thanks ... so the basic idea is to "compile" to SVG and let the target engine to process/display it, right?}
    sent: "2016-11-08T12:11:39.256Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5821c0e3e462097a302235b8"
    text: "@Zamlox Thank you!"
    sent: "2016-11-08T12:11:15.289Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821c0e3df5ae966452ded6b"
    text: {if you look at the standard you will realize of its complexity.}
    sent: "2016-11-08T12:11:15.125Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5821c0d345c9e3eb4311099b"
    text: "@pekr SVG is way more complex."
    sent: "2016-11-08T12:10:59.728Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
)#(
    id: "5821c0bbe097df757585b3f4"
    text: {@dockimbel not yet, but I can make it visible on my github repository tonight when I get home.}
    sent: "2016-11-08T12:10:35.649Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5821c0b178ec59ab05494edc"
    text: {Just a stupid question (no knowledge of SVG here), but - if SVG is kind of standard - do we need to keep backwards compatibility to Rebol? Couldn't Draw be just SVG compatible? Or is SVG more complex?}
    sent: "2016-11-08T12:10:25.496Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5821c0816cb72076304e6087"
    text: {@Zamlox Is your latest code available online? I might give it a try with a few SVG files.}
    sent: "2016-11-08T12:09:37.698Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821c00845c9e3eb431106d7"
    text: {@dockimbel still working on it. I had to refactored my initial implementation and now what I have is: a skeleton of handling SVG elements and attributes, converting coordinate transformations into draw related transformations (this was a bit tricky),  started to handle ```svg``` and ```g``` container type elements.}
    sent: "2016-11-08T12:07:36.332Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5821bf176cb72076304e5ad9"
    text: {@Zamlox What is the state of the SVG to Draw converter?}
    sent: "2016-11-08T12:03:35.161Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821b5b4c2f2cf7275e4cb4c"
    text: "@rebolek ok, true, thanks"
    sent: "2016-11-08T11:23:32.834Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5821b5a14aeee0634dc26ee5"
    text: {@maximvl Only partially. There’s no `date!` support yet, so you can get just `time!`:^/```^/red>> now/time^/== 12:22:32^/```}
    sent: "2016-11-08T11:23:13.034Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5821b53ee462097a3021faa1"
    text: {I though `now` was already implemented, wasn't it?}
    sent: "2016-11-08T11:21:34.780Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5821b534c2f2cf7275e4c8a1"
    text: {```^/red>> now^/*** Internal Error: reserved for future use (or not yet implemented)^/*** Where: now^/```}
    sent: "2016-11-08T11:21:24.578Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58217c44e462097a3020ca8c"
    text: {`-u` should be used just once, so a custom libRedRT is built for specific Red library functions used by R/S user code.  Though, there might be a conflict with `-t Windows`.}
    sent: "2016-11-08T07:18:28.700Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582176cb45c9e3eb430f8cec"
    text: "Ah so I shouldn't give `-u` every time may be."
    sent: "2016-11-08T06:55:07.982Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "582175d578ec59ab0547b460"
    text: "I don't know what to do about that"
    sent: "2016-11-08T06:51:01.725Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5821759c45c9e3eb430f891b"
    text: {@endo64 `red -c -u -t Windows raytracer-gui-test.red` gives the error too}
    sent: "2016-11-08T06:50:04.064Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5821750de462097a3020afa9"
    text: {`-u` rebuilds libRedRT, it is necessary for Red scripts with R/S code. I'll try with `-t windows` and let you know, default target is `MSDOS` I think so that might be the problem.}
    sent: "2016-11-08T06:47:41.900Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58214ea7e097df7575838ea9"
    text: {@endo64 I build it with `red -c -t windows raytracer-gui-test.red` What does the `-u` switch do?}
    sent: "2016-11-08T04:03:51.229Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5820ecc7e097df7575819d0d"
    text: {If I comment out `_random/init` in `Trace` routine I get `*** Compilation Error: undefined symbol: red/image/acquire-buffer` I think something is missing..}
    sent: "2016-11-07T21:06:15.979Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5820ec1ac2f2cf7275e11090"
    text: {@Mufferaw `red.exe -c -u raytracer-gui-test.red` gives `*** Compilation Error: invalid path value: _random/init` error now, on Win10 with latest build.}
    sent: "2016-11-07T21:03:22.284Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5820d4c931c5cbef43c991e4"
    text: {@JacobGood1, nice. Perhaps call `words-and-values-to-close-over` just `words` and add a doc string?}
    sent: "2016-11-07T19:23:53.264Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5820af0ee462097a301ca7dd"
    text: {@dockimbel I have now narrowed down the (or *a*) preprocessor error. See [this issue](https://github.com/red/red/issues/2304)}
    sent: "2016-11-07T16:42:54.715Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "582036b7b4046d90642c7808"
    text: "@JacobGood1 yes, that’s also a nice way to do it."
    sent: "2016-11-07T08:09:27.755Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58203627c2f2cf7275dcb407"
    text: "@Mufferaw  Great, thanks!"
    sent: "2016-11-07T08:07:03.083Z"
    v: 1
    author: "55fe876a0fc9f982beb13bac"
) #(
    id: "58203616eed0c3125f46e70a"
    text: {@KenSingleton  @endo64 I've updated the file on github now so you will no longer have to do that}
    sent: "2016-11-07T08:06:46.895Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "582035cbe097df75757d3d57"
    text: {@endo64 I had the same error. You just need to change the path at the top of the raytracer file to where the random.reds file is located. It is in the .../red/red-master/runtime/ folder.}
    sent: "2016-11-07T08:05:31.315Z"
    v: 1
    author: "55fe876a0fc9f982beb13bac"
) #(
    id: "58201bef31c5cbef43c555f9"
    text: {@Mufferaw You could also keep them in `#system-global`, you just need to prefix them with `red/` (all the runtime library is enclosed in the `red/` context). Moreover, you can also use a `#system` directive, which will place your code under `red/` context for you.}
    sent: "2016-11-07T06:15:11.898Z"
    editedAt: "2016-11-07T06:17:07.824Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582010dae097df75757c7d90"
    text: {@dockimbel I had those `_random` calls inside `#system-global`, moved them inside a routine and it's ok now. Thanks!!}
    sent: "2016-11-07T05:27:54.181Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58200d026cb72076304541bb"
    text: {@Mufferaw Yes, it's part of the Red runtime already.}
    sent: "2016-11-07T05:11:30.523Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5820089fe097df75757c5b6f"
    text: {@dockimbel  If I am using the `_random` call inside my routine is it possible to get rid of the include?}
    sent: "2016-11-07T04:52:47.061Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5820054fe097df75757c4f24"
    text: {@Mufferaw In a Red program, `%random.reds` is already included in the runtime, so you shouldn't have to include it.}
    sent: "2016-11-07T04:38:39.971Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58200298c2f2cf7275dbc9ad"
    text: {@endo64  you'll have to change the path to point to the location of `%random.reds` . I was able to use a relative path when I was only using Red/System, but when I wanted to use routines in a Red program I also got that error and had to change it to an absolute path.}
    sent: "2016-11-07T04:27:04.411Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581fd2a90d42ea911cbea978"
    text: {Here is how I create a closure:^/```^/closure: func [words-and-values-to-close-over [block!] ^/               args                           [block!] ^/               body                           [block!]] [^/^-func args compose [(bind body object words-and-values-to-close-over)]^/]^/^/red>> hi: closure [hi: 1] [x] [hi: hi + x ]^/== func [x][hi: hi + x]^/red>> hi 1^/== 2^/red>> hi 1^/== 3^/red>> hi 4^/== 7^/```^/context binding is pretty cool}
    sent: "2016-11-07T01:02:33.821Z"
    editedAt: "2016-11-07T01:03:03.620Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "581fc24bb4046d90642c63c6"
    text: {Here’s something I’ve been thinking about: http://red.qyz.cz/safe-and-persistent-locals.html}
    sent: "2016-11-06T23:52:43.825Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581f55d945c9e3eb430524e0"
    text: {compiling `raytracer-gui-test.red` on Windows with latest build gives `*** Loading Error: file access error: %random.reds` error.}
    sent: "2016-11-06T16:10:01.305Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "581ebaa8e462097a3013a9bf"
    text: {@meijeru I just pushed a fix for a quitting issue on preprocessor error. Let me know if it helps with your issue.}
    sent: "2016-11-06T05:07:52.288Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581e04f6e097df7575741230"
    text: {@meijeru That's correct. The `config` object remains unchanged when used from the interpreter. Though, we could merge the eventual custom config options from source file headers evaluated using `do`.}
    sent: "2016-11-05T16:12:38.708Z"
    editedAt: "2016-11-05T16:15:51.426Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581df8bb45c9e3eb43ffd0be"
    text: {@dockimbel But a totally different question on `config`. In the docs you say "Note: when using the preprocessor at runtime (from Red's interpreter), the config object is also available, and will reflect the options used for compiling the Red executable currently used to run the code.". Do I understand correctly that even when you `do` a file in the console, the `config` information in the header of the source file is not taken into account?  }
    sent: "2016-11-05T15:20:27.961Z"
    editedAt: "2016-11-05T15:20:45.322Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "581df83145c9e3eb43ffced8"
    text: {@dockimbel On my problem with the interpreter quitting, I cannot tell you more now. I will try to investigate later.}
    sent: "2016-11-05T15:18:09.254Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "581dda4a0d42ea911cbe5803"
    text: "I love bug reports ;)"
    sent: "2016-11-05T13:10:34.846Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581dda2f6cb72076303c2b7f"
    text: "@rebolek ok ;)"
    sent: "2016-11-05T13:10:07.252Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581dda130d42ea911cbe57fe"
    text: {@Zamlox No problem, I know ;) I was just reporting bugs, so it can be improved.}
    sent: "2016-11-05T13:09:39.767Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581dd9b4e097df757573541a"
    text: "@rebolek try to copy/paste values in fields"
    sent: "2016-11-05T13:08:04.322Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581dd6e7eed0c3125f3cd836"
    text: {To make it robust, I would suggest to use a validation method.}
    sent: "2016-11-05T12:56:07.332Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581dd6a2e462097a301007ef"
    text: {@rebolek @Mufferaw the crash in the fields are due to casting to ```integer!``` or ```float``` in ```on-change``` events.  Either move the castings in render button ```on-click``` event or use a validation method (perhaps based on parse).}
    sent: "2016-11-05T12:54:58.763Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581d8d08b4046d90642c0b80"
    text: {@Mufferaw Nice! Rendering works now. However I still get a crash in field.}
    sent: "2016-11-05T07:40:56.030Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581d8af3e462097a300ed734"
    text: {@Zamlox Thanks for taking a look at it and for the advice, I've fixed the `scene-block`and changing the `panel` to `base` works much better, it updates properly now. I've also added a file to the github called `example.txt` with the commands for the example scene.^/@KenSingleton  @rebolek It might work for you now that I've made the changes suggested by @Zamlox ^/@greggirwin @TimeSlip Thanks! Using Draw made it very easy (and fun) to add some 'flair' }
    sent: "2016-11-05T07:32:03.051Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581d612a6cb72076303a5cc0"
    text: {@meijeru How do I reproduce it? Can you pinpoint which commit broke it?}
    sent: "2016-11-05T04:33:46.628Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581d3e33e097df757570fe9b"
    text: {@Mufferaw, I get the same error as @Zamlox, just FYI. But the UI is really impressive, what you've done with Draw so far.}
    sent: "2016-11-05T02:04:35.163Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581d2f492d4796175f46aa39"
    text: {@Mufferaw Your Ray-Tracer program looks very nice. }
    sent: "2016-11-05T01:00:57.231Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "581d1f69eed0c3125f3a2561"
    text: "The preprocessor doc is excellent @dockimbel. "
    sent: "2016-11-04T23:53:13.325Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581ce7c4eed0c3125f3913d2"
    text: {@Mufferaw can you share also the commands you used to define the scene from your example ?}
    sent: "2016-11-04T19:55:48.524Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cda30eed0c3125f38cb38"
    text: {@dockimbel Latest Red version (cb3b577) quits without message when called on a Red program in interpreter mode; compilation of this program succeeds, and it is the same program that used to interpret fine. Help!}
    sent: "2016-11-04T18:57:52.045Z"
    editedAt: "2016-11-04T19:00:36.158Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
)#(
    id: "581cd8964aeee0634dc176dc"
    text: "hehe you even included a max example... nice =)"
    sent: "2016-11-04T18:51:02.334Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "581cd7b3aa8f8c4b328ef340"
    text: {@dockimbel I like what I'm seeing in the macro docs, not done reading but it looks really cool so far... I am sure reboler's will love these additions}
    sent: "2016-11-04T18:47:15.051Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "581cd0ffe097df75756eea50"
    text: {@dockimbel Thanks for documenting the preprocessor (and for making it in the first place!). Macros and conditional compilation make Red more powerful for sure.}
    sent: "2016-11-04T18:18:39.880Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "581ccb57e097df75756ec7a4"
    text: {Hmm, restarted the console (still same version) and the issue disappeared. Looks like some corrupt mem maybe from an earlier error??}
    sent: "2016-11-04T17:54:31.138Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cca12e462097a300b8e40"
    text: {To help locate the code causing the error, you can force a call stack trace in the interpreter on errors using:^/```lisp^/system/state/trace?: on^/```}
    sent: "2016-11-04T17:49:06.644Z"
    editedAt: "2016-11-04T17:49:25.718Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581cc9a145c9e3eb43facd17"
    text: "will try that and see if it goes away"
    sent: "2016-11-04T17:47:13.029Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cc982c2f2cf7275ce0a9d"
    text: "Oh, so your build is fresher"
    sent: "2016-11-04T17:46:42.293Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cc96e2d4796175f447fed"
    text: {Windows 7 here, but it should not matter for such error.^/```lisp^/red>> about^/Red 0.6.1 - 4-Nov-2016/11:28:40+8:00^/```}
    sent: "2016-11-04T17:46:22.827Z"
    editedAt: "2016-11-04T17:46:59.485Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581cc96cc2f2cf7275ce09bf"
    text: {And why would it work for me if I don't use 'btn' but something else?}
    sent: "2016-11-04T17:46:20.896Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cc9452d4796175f447f3c"
    text: {strange - unless we are using different builds? OS? I am on Win10 64bit}
    sent: "2016-11-04T17:45:41.981Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cc90cc2f2cf7275ce0805"
    text: {[![blob](https://files.gitter.im/red/red/NU21/thumb/blob.png)](https://files.gitter.im/red/red/NU21/blob)}
    sent: "2016-11-04T17:44:44.246Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581cc8fb45c9e3eb43fac668"
    text: {red>> selector:  [^/[    ^/[       style btn:  button font [size: 11] ^/[       ^/[       across^/[       text "Selection" center 320 font-size 16  return  ^/[       pad 0x10^/[       btn "Module A"  100 [ request-file ""]^/[       btn "Module B"  100 [] return^/[    ]   ^/== [^/    style btn: button font [size: 11] ^/    across ^/    text "Selection" center 320 font-size 16 return ^/    pad 0x10 ^/    btn "Module A" 100 [request-file ""] ^/    btn "Module B" 100 [] return^/]^/red>> ^/red>> view selector^/*** Script Error: copy does not allow word! for its value argument^/*** Where: copy^/red>> }
    sent: "2016-11-04T17:44:27.652Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cc8f4eed0c3125f386677"
    text: {[![blob](https://files.gitter.im/red/red/SzcQ/thumb/blob.png)](https://files.gitter.im/red/red/SzcQ/blob)}
    sent: "2016-11-04T17:44:20.330Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cc8e62d4796175f447bb8"
    text: {@Mufferaw managed to make it work after using a ```base``` facet instead of ```panel``` in ```Display``` object:}
    sent: "2016-11-04T17:44:06.492Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cc89045c9e3eb43fac3d8"
    text: "0.6.1 from 2016-11-03"
    sent: "2016-11-04T17:42:40.825Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cc876c2f2cf7275ce04d8"
    text: {FYI, the preliminary version of the Red preprocessor documentation is [available](https://doc.red-lang.org/preprocessor.html), including macros description.}
    sent: "2016-11-04T17:42:14.912Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581cc84a31c5cbef43b7b352"
    text: "@kpeters58 Using latest build?"
    sent: "2016-11-04T17:41:30.603Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581cc83131c5cbef43b7b288"
    text: {Not for me (0.6.1) - just noticed that it might be tied to the term 'btn' (works when I rename the style to btn1 and use that....)}
    sent: "2016-11-04T17:41:05.808Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cc7cfeed0c3125f386017"
    text: {@kpeters58 If I paste your code in the GUI console, it works fine here, with both buttons enabled.}
    sent: "2016-11-04T17:39:27.029Z"
    editedAt: "2016-11-04T17:39:46.529Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581cc691c2f2cf7275cdf84b"
    text: {I can run the above with either button, but not both. When I attempt that, I get:  *** Script Error: copy does not allow word! for its value argument^/*** Where: copy}
    sent: "2016-11-04T17:34:09.478Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cc66645c9e3eb43fab6d9"
    text: {selector:  [^/^/   style btn:  button font [size: 11] ^/   ^/   across^/   text "Selection" center 320 font-size 16  return  ^/   pad 0x10^/  ; btn "Module A"  100 [ request-file ""]^/   btn "Module B"  100 [] return^/]   ^/^/view selector}
    sent: "2016-11-04T17:33:26.665Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581cc4386cb72076303776dc"
    text: {> @Mufferaw I was using `-t Windows` when compiling. I removed it and now I get this error:^/```^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/image/acquire-buffer^/*** in file: %/E/Code/redworks/raytracer-gui-test.red^/*** in function: exec/render^/*** at line: 326^/*** near: [image/acquire-buffer img :handle^/    lower_left_corner: declare vector3!^/    vertical: declare^/]^/``` I get this same error compiling using RIDE}
    sent: "2016-11-04T17:24:08.909Z"
    v: 1
    author: "55fe876a0fc9f982beb13bac"
) #(
    id: "581cc19445c9e3eb43fa9b9e"
    text: {this is what I got: ^/[![blob](https://files.gitter.im/red/red/WQxh/thumb/blob.png)](https://files.gitter.im/red/red/WQxh/blob)}
    sent: "2016-11-04T17:12:52.469Z"
    editedAt: "2016-11-04T17:14:37.058Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cc164aa8f8c4b328eeab7"
    text: {But I am working at two things at the same time now, so maybe I’ve overlooked something.}
    sent: "2016-11-04T17:12:04.320Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cc139b4046d90642bea1b"
    text: {I’ve also put two prints in the render button to see where it crashes and I don’t see anything printed. That is strange.}
    sent: "2016-11-04T17:11:21.798Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cc10331c5cbef43b78198"
    text: "hmm. interesting. It works for me."
    sent: "2016-11-04T17:10:27.720Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cc0d4b4046d90642be9d5"
    text: "I do"
    sent: "2016-11-04T17:09:40.290Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cc0c46cb72076303762e5"
    text: "run executable from command prompt"
    sent: "2016-11-04T17:09:24.602Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cc0abaa8f8c4b328eea58"
    text: "I tried, but it still crashes silently"
    sent: "2016-11-04T17:08:59.640Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cbedee462097a300b46fb"
    text: {@rebolek try to compile it with options ```-c -r```}
    sent: "2016-11-04T17:01:18.130Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cbebe31c5cbef43b772ba"
    text: {still, after initializing with value "redsphere sphere radius 0.5 position 0.0 0.0 -1.0 lambert 1.0 0.2 0.2 0.0" if I press render, nothing happens on the display image.}
    sent: "2016-11-04T17:00:46.167Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cbe85c2f2cf7275cdc4d6"
    text: {@Mufferaw you have defined ```scene-block: []``` but ```parse-scene``` expects ```string!```.  ```scene-block``` is updated only if area is modified, if not it will remain ```block!```, that's why is crashing.}
    sent: "2016-11-04T16:59:49.282Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cbe1e2d4796175f4438e2"
    text: {I experienced also a quick quit when pressing 'Render' button.}
    sent: "2016-11-04T16:58:06.961Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cbdeae097df75756e6b77"
    text: "@Mufferaw nice work !"
    sent: "2016-11-04T16:57:14.264Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "581cbdc50d42ea911cbe2d19"
    text: {@Mufferaw I was using `-t Windows` when compiling. I removed it and now I get this error:^/```^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/image/acquire-buffer^/*** in file: %/E/Code/redworks/raytracer-gui-test.red^/*** in function: exec/render^/*** at line: 326^/*** near: [image/acquire-buffer img :handle^/    lower_left_corner: declare vector3!^/    vertical: declare^/]^/```}
    sent: "2016-11-04T16:56:36.964Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cbb5d31c5cbef43b75fb3"
    text: {@rebolek Very strange, I'll have to get the latest build and try it}
    sent: "2016-11-04T16:46:21.224Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581cb72aaa8f8c4b328ee692"
    text: "or any non-number, when not on first position"
    sent: "2016-11-04T16:28:26.071Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cb6cfb4046d90642be65a"
    text: {it also happens when I press on some field and press backspace}
    sent: "2016-11-04T16:26:55.344Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cb6b84aeee0634dc16d4b"
    text: "@Mufferaw no error, just quick exit"
    sent: "2016-11-04T16:26:32.672Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cb6a1e462097a300b12da"
    text: {@rebolek is it the quick exit crash or the windows 'this program has encountered an error' crash?}
    sent: "2016-11-04T16:26:09.755Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581cb460aa8f8c4b328ee572"
    text: "Hm, debug mode outputs nothing."
    sent: "2016-11-04T16:16:32.522Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cb3616cb7207630370f49"
    text: "@dockimbel Congratulations! "
    sent: "2016-11-04T16:12:17.927Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581cb2e9eed0c3125f37d870"
    text: "Woohoo! Congratulations!"
    sent: "2016-11-04T16:10:17.695Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581cb2c62d4796175f43f412"
    text: "Yes, 1M views reached on the blog today. ;-)"
    sent: "2016-11-04T16:09:42.816Z"
    editedAt: "2016-11-04T16:10:12.416Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581cb2a8b4046d90642be4e9"
    text: "Congratulations!"
    sent: "2016-11-04T16:09:12.341Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cb2a34aeee0634dc16b98"
    text: {@dockimbel  BTW, I was just looking at the red-lang.org page to see if I can download that particular version and I found that the number of visitors just exceeded 1 million! http://i.imgur.com/YrHzGVw.png}
    sent: "2016-11-04T16:09:07.489Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cb26b6cb72076303709e1"
    text: {@meijeru Good guessing. ;-) All compiler options should be settable from the header. There are only documented in source code for now, and there are likely to get renamed and grouped for 1.0.}
    sent: "2016-11-04T16:08:11.926Z"
    editedAt: "2016-11-04T16:09:03.849Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581cb22c0d42ea911cbe291e"
    text: {Hm, I have probably bit newer version, I will try to compile in debug mode to see what is going wrong.}
    sent: "2016-11-04T16:07:08.428Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cb1ab6cb72076303703c6"
    text: "@rebolek Red 0.6.1 - 27-Oct-2016/20:57:23+8:00"
    sent: "2016-11-04T16:04:59.079Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581cb13b45c9e3eb43fa3c82"
    text: "@greggirwin Thanks, and thanks for all your help!"
    sent: "2016-11-04T16:03:07.092Z"
    v: 1
    author: "56ced090e610378809c36532"
)#(
    id: "581cb1290d42ea911cbe2898"
    text: {@Mufferaw what version of Red are you using? I can compile it, but it crashes when I press Render.}
    sent: "2016-11-04T16:02:49.570Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581cafaac2f2cf7275cd66df"
    text: "Wonderful @Mufferaw ! Can't wait to play."
    sent: "2016-11-04T15:56:26.770Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581ca96145c9e3eb43fa090b"
    text: {Hi everyone, I finally got my little ray tracer program to presentable state. If you are bored you can check it out. It isn't very useful but it was a great Red learning experience. It has a UI and a text area where you can define your own scene.^/https://github.com/Mufferaw/Red-Raytracer^/Thanks to everyone who patiently answered all my noob questions! }
    sent: "2016-11-04T15:29:37.229Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581ca150eed0c3125f376956"
    text: {I suppose all compiler options are shown in `%system/compiler.r` in context `options-class`, but I suppose also that setting some arbitrary combination of options could be dangerous...}
    sent: "2016-11-04T14:55:12.074Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "581c9f2031c5cbef43b6adab"
    text: {@dockimbel How many compiler options are settable in the header, and where are they documented?? Shouldn't they figure in the README.MD?}
    sent: "2016-11-04T14:45:52.831Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "581c9ef82d4796175f437477"
    text: {> There is also a compiler option to control strict words checking (which is on by default), so you can disabling it from your main script header:}
    sent: "2016-11-04T14:45:12.262Z"
    editedAt: "2016-11-04T14:45:43.773Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "581c263a31c5cbef43b41595"
    text: "@kpeters58 Unisignificant performance penalty."
    sent: "2016-11-04T06:10:02.230Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581c26076cb720763033e4d5"
    text: {@kpeters58 Input mask: probably as a custom widget, once we define the API for that.}
    sent: "2016-11-04T06:09:11.001Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581c211945c9e3eb43f732ae"
    text: {@dockimbel Is there a performance penalty for disabling red-strict-check?}
    sent: "2016-11-04T05:48:09.024Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581c20e2e462097a3007cbac"
    text: {@dockimbel Will field input masking show up in a later release or not planned at all?}
    sent: "2016-11-04T05:47:14.014Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581c072c2d4796175f40566e"
    text: "Thanks, Nenad! "
    sent: "2016-11-04T03:57:32.682Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581c00352d4796175f403a17"
    text: {There is also a compiler option to control strict words checking (which is on by default), so you can disabling it from your main script header:^/```lisp^/Red [^/    config: [red-strict-check?: no]^/]^/```}
    sent: "2016-11-04T03:27:49.135Z"
    editedAt: "2016-11-04T03:27:53.240Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581bffdae097df75756a6cc9"
    text: {@kpeters58 Words defined in unevaluated blocks are not seen by the compiler, so you need to declare them out of the block, so the compiler can process them. For example:^/```lisp^/a: [b: 123]^/do a^/print b^/```^/will error out on compilation, because `b` word is undefined. To fix it, you just set the word to any value before using it, like:^/```lisp^/b: none^/a: [b: 123]^/do a^/print b^/```}
    sent: "2016-11-04T03:26:18.692Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581bff062d4796175f4035a3"
    text: {@kpeters58 You need to create a custom field face, overloading the key events.}
    sent: "2016-11-04T03:22:46.483Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581bb53bc2f2cf7275c88af8"
    text: {I have f1.r, f2.r and red itself in the same folder. I can do 'do %f2.r' from the console just fine. When I try to compile f1.r (which has a 'do %f2.r' statement), the compile fails, telling me that the words I defined in f2.r are undefined.... This worked well in Rebol (I am porting an app of mine) - what's going on?}
    sent: "2016-11-03T22:07:55.058Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581b834fe462097a3004b5c4"
    text: "thanks for confirming this"
    sent: "2016-11-03T18:34:55.992Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581b831faa8f8c4b328e9750"
    text: "@kpeters58 I don’t think it’s possible yet."
    sent: "2016-11-03T18:34:07.154Z"
    editedAt: "2016-11-03T18:34:13.415Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581b82d0eed0c3125f319a25"
    text: {How do I realize a field with masked input, such as a password field?}
    sent: "2016-11-03T18:32:48.040Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "581b6715aa8f8c4b328e8c6a"
    text: {SourceTree is a pretty nice gui Git client too. I think it's just Windows / Mac}
    sent: "2016-11-03T16:34:29.639Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "581b6517c2f2cf7275c69817"
    text: "you have to be an Emacs fan, of course"
    sent: "2016-11-03T16:25:59.091Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "581b650931c5cbef43b02051"
    text: "`magit` in Emacs is awesome"
    sent: "2016-11-03T16:25:45.462Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "581b5ff0aa8f8c4b328e878b"
    text: "@dockimbel Ah yes"
    sent: "2016-11-03T16:04:00.123Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581b5fd5e097df757566da53"
    text: {@geekyi You mean `Which git clients...`, right? I use TortoiseGit on Windows, it makes git usage smooth for me. I use Gitbox on OSX and the regular command-line version on Linux.}
    sent: "2016-11-03T16:03:33.780Z"
    editedAt: "2016-11-03T16:07:43.856Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581b4f5e0d42ea911cbdc21c"
    text: {somewhat offtopic.. Which gitter clients are *Redusers* using? I *had* been using the official github windows app.^/The commandline version, *Poshgit* is really nice, for a windows app at least. I'd be happy to replace the gui version with a better, much lightweight solution tho. My major use case for a gui is visualizing the tree of branching and forking^/### Context^/I'd recently bought a new laptop and am slowly reinstalling everything.^/Meanwhile, since last few days, been having problems with my isp (unable to connect to gitter, etc)^/Was unable to download the official github client as it does not go to completion (maybe I should try again)}
    sent: "2016-11-03T14:53:18.356Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581b36ea6cb72076302edb64"
    text: "Many thanks! It's work!"
    sent: "2016-11-03T13:08:58.167Z"
    v: 1
    author: "5819918bd73408ce4f32ef67"
) #(
    id: "581b28b4e097df7575658721"
    text: {@yykav You can use this workaround for now (pushing the returned float value explicitely on the stack):^/```lisp^/test: routine [ v [binary!]] [float/box 123.456]^/```}
    sent: "2016-11-03T12:08:20.660Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581b25b3e097df7575657859"
    text: {@yykav It looks like a bug in routine's return value processing, please open a ticket for it.}
    sent: "2016-11-03T11:55:31.668Z"
    editedAt: "2016-11-03T11:55:56.352Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581b1cf22d4796175f3b198a"
    text: {Tnaks!^/Now output is that:^/```^/$ test1.exe^/123.456^/^/123.456^/123.456^/^/#{0102030405060708090A0B0C}^/#{0102030405060708090A0B0C}^/#{0102030405060708090A0B0C}^/^/#{0102030405060708090A0B0C}^/```^/Why output #{0102030405060708090A0B0C}, not 123.456?}
    sent: "2016-11-03T11:18:10.047Z"
    v: 1
    author: "5819918bd73408ce4f32ef67"
) #(
    id: "581b1bc5e462097a30022944"
    text: { @yykav The Red compiler is not able to identify that `o/t2` is a function call, so for OO style of programming, you should stick to the interpreter for now, or otherwise, wrap the calls in a `do [...]` expression:^/```lisp^/v2: do [o/t2]^/print v2^/print do [o/t2]^/print [lf do [o/t2]]^/```}
    sent: "2016-11-03T11:13:09.191Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581b169745c9e3eb43f18a59"
    text: {Hi!^/Is that wrog code, bug, or why so different output?^/```^/$ cat test1.red^/Red []^/^/test: routine [ v [binary!] return: [float!] ] [ 123.456 ]^/^/f: test #{0102030405060708090A0B0C}^/print f^/print [ lf f ]^/^/print test #{0102030405060708090A0B0C}^/print [ lf test #{0102030405060708090A0B0C} ]^/^/prot: make object! [^/        b: none^/        t2: function [] [ test b ]^/        new: function [nb] [ make prot [b: nb]]^/]^/^/o: prot/new #{0102030405060708090A0B0C}^/v2: o/t2^/print v2^/print o/t2^/print [lf o/t2]^/^/^/$ red-061.exe -c test1.red^/^/-=== Red Compiler 0.6.1 ===-^/^/Compiling g:\os\red\test1.red ...^/...compilation time : 1437 ms^/^/Compiling to native code...^/...compilation time : 42405 ms^/...linking time     : 406 ms^/...output file size : 488448 bytes^/...output file      : g:\os\red\test1.exe^/^/^/$ test1.exe^/123.456^-^-^-^-; print f^/^/123.456^-^-^-^-; print [ lf f ]^/123.456^-^-^-^-; print test #{0102030405060708090A0B0C}^/^/#{0102030405060708090A0B0C}^-; print [ lf test #{0102030405060708090A0B0C} ]^/?function?^-^-^-; print v2^/?function?^-^-^-; print o/t2^/^/#{0102030405060708090A0B0C}^-; print [lf o/t2]^/^/$^/```}
    sent: "2016-11-03T10:51:03.897Z"
    v: 1
    author: "5819918bd73408ce4f32ef67"
) #(
    id: "581b06ffc2f2cf7275c45d0b"
    text: {@dockimbel because I've never implemented a GC, and since there are so many problems with GC's, like stop-the-world, GIL, etc and Java has several GC's and so on - that's why I think this is not trivial thing}
    sent: "2016-11-03T09:44:31.883Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "581ab2a42d4796175f391081"
    text: {@maximvl Because I've already implemented a GC in the past (2004), for my first work on an open-source alternative to Rebol. Also, there's a GC branch on github, with an almost complete simple GC, which takes very little code. Why do you think a GC needs to have a lot of code?}
    sent: "2016-11-03T03:44:36.054Z"
    editedAt: "2016-11-03T03:45:49.452Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581a57c831c5cbef43aaf94d"
    text: {@dockimbel, confirmed that `halt` compiles now. Thanks!}
    sent: "2016-11-02T21:16:56.248Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581a0c49cde075e656118f35"
    text: {@Scureuil, nice! I tinkered a bit on your scripts some time back, when thinking about doing a binary data parsing demo for Red.}
    sent: "2016-11-02T15:54:49.738Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581a06c483a2008d220366e0"
    text: {@dockimbel ^/>@JacobGood1 A GC for Red adds very little code, so no worries on that side. ;-)^/^/how can you be so sure about this?}
    sent: "2016-11-02T15:31:16.757Z"
    editedAt: "2016-11-02T15:31:21.036Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "581a058e27c3e02625f35d86"
    text: {@Scureuil That's very cool! Ports are not yet implemented. You can use zlib, though, on Windows, the library is not available by default. Deflate algorithm is definitely implemented in at least one DLL in Windows, though, it doesn't seem to be exposed. Maybe there is a way to access it, but I haven't found it so far (didn't spend much time digging though).}
    sent: "2016-11-02T15:26:06.294Z"
    editedAt: "2016-11-02T15:26:29.343Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581a04fd9411972d60b77e67"
    text: {@xaduha Just pass a `c-string!` reference for `file` argument with the proper filename (including path if required).}
    sent: "2016-11-02T15:23:41.654Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581a048683a2008d2201a9b6"
    text: {@JacobGood1 A GC for Red adds very little code, so no worries on that side. ;-)}
    sent: "2016-11-02T15:21:42.956Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5819fe7ec3569a036e4bbeeb"
    text: {Hi, I'm revising my old rebzip.r and gunzip.r scripts. I managed to uncompress a gzip in 0.61 with the `load/as data 'png` trick, so the conversion to Red is trivial, but is there a proper `compress`/`uncompress`-like or port-based compression interface available in Red, or should I use zlib with the library interface instead?}
    sent: "2016-11-02T14:55:58.179Z"
    v: 1
    author: "5818a420d73408ce4f327518"
) #(
    id: "5819d62c806316005deb705c"
    text: {@dockimbel Sure, I'll probably  just use ```wait``` from Red. It was temporary anyway, the real question is how to pass a filepath to this function from Red/System^/^/```^/HSTREAM BASS_StreamCreateFile(^/    BOOL mem,^/    void *file,^/    QWORD offset,^/    QWORD length,^/    DWORD flags^/);^/```}
    sent: "2016-11-02T12:03:56.578Z"
    v: 1
    author: "56937e1c16b6c7089cc2025b"
) #(
    id: "5819d5350b10738c73fece00"
    text: {@dockimbel  No, I meant Red's own gc, jit, the whole deal}
    sent: "2016-11-02T11:59:49.503Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58199c4827c3e02625f0eaaf"
    text: {@dander Looking at it, such GC API seems to be targetting class-based languages, it's not possible to use it for Red.}
    sent: "2016-11-02T07:56:56.640Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581999d39411972d60b4dc22"
    text: {@greggirwin `halt` compiles fine now in dev mode (using libRedRt).}
    sent: "2016-11-02T07:46:26.998Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58198182806316005de9bde3"
    text: {I think someone may have linked this here before, though I don't remember who. But about 20 min into this presentation, he talks about how the webassembly team wants to provide generic GC support for higher level languages eventually.^/https://www.infoq.com/presentations/webassembly}
    sent: "2016-11-02T06:02:42.283Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5819694683a2008d22fe3c46"
    text: {@xaduha Busy looping like that is not good, you need to either use the event loop from BASS if it provides one, or otherwise, wrap the `Sleep()` function.}
    sent: "2016-11-02T04:19:18.320Z"
    editedAt: "2016-11-02T04:19:42.342Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5819634b0e25dbfa118b201c"
    text: {@JacobGood1 You mean with using the planned GC provided by the browser through webassembly? I don't think it would be possible to use it, as we wouldn't map Red values to JS objects.}
    sent: "2016-11-02T03:53:47.359Z"
    editedAt: "2016-11-02T03:55:58.141Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581952330e25dbfa118ada01"
    text: {substitute streaming url e.g. http://ice1.somafm.com/secretagent-128-mp3 for instant webradio, although ```while [1 > 0][null]``` probably isn't good}
    sent: "2016-11-02T02:40:51.285Z"
    editedAt: "2016-11-02T02:46:08.560Z"
    v: 2
    author: "56937e1c16b6c7089cc2025b"
) #(
    id: "58194f4427c3e02625efb088"
    text: {Having trouble binding to an imported function which uses void pointer^/^/http://static.red-lang.org/red-system-specs.html#section-4.8.8^/^/http://www.un4seen.com/doc/#bass/BASS_StreamCreateFile.html^/^/This works though, plays ogg sound from wikipedia just fine^/^/http://www.un4seen.com/doc/#bass/BASS_StreamCreateURL.html^/^/```^/Red/System []^/^/#import [^/  "bass.dll" stdcall [^/    bass-init: "BASS_Init" [^/      device  [integer!]^/      freq    [integer!]^/      flags   [integer!]^/      win     [integer!]^/      clsid   [int-ptr!]^/      return: [logic!]^/    ]^/    bass-stream-create-url: "BASS_StreamCreateURL" [^/      url     [c-string!]^/      offset  [integer!]^/      flags   [integer!]^/      proc    [int-ptr!]^/      user    [int-ptr!]^/      return: [integer!]^/    ]^/    bass-channel-play: "BASS_ChannelPlay" [^/      handle  [integer!]^/      restart [logic!]^/      return: [integer!]^/    ]^/  ]^/]^/^/bass-init -1 44100 0 0 null^/url: "https://upload.wikimedia.org/score/p/t/ptifyyxga0aw4mvdvqyx0rovdi2sidw/ptifyyxg.ogg"^/handle: bass-stream-create-url url 0 4 null null^/bass-channel-play handle false^/^/while [1 > 0][null]^/```}
    sent: "2016-11-02T02:28:20.765Z"
    v: 1
    author: "56937e1c16b6c7089cc2025b"
) #(
    id: "5819436995e079a822d0b60c"
    text: {@dockimbel  haha, amazing, I guess it would be completely feasible to put the whole run time in a web page...  You still think it would be that small with a gc?}
    sent: "2016-11-02T01:37:45.875Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5819312427c3e02625ef3afa"
    text: {@JacobGood1 Hard to say how big it would be in webassembly. Based on the current runtime payload, I'd say between 500KB and 1MB uncompressed, and probably around 150-300KB compressed.}
    sent: "2016-11-02T00:19:48.858Z"
    editedAt: "2016-11-02T00:20:11.958Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5818bff749891fe74228904b"
    text: "Thanks @RiVeND!"
    sent: "2016-11-01T16:16:55.258Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58189e44806316005de4e0ba"
    text: {@dockimbel @qtxie (and anyone else working on Red JSON parsers). Just found an interesting article on JSON parsing problems along with various edge case tests and results from existing parsers (no parser passes all the tests): http://seriot.ch/parsing_json.html . Could be a useful test resource. Source: http://www.theregister.co.uk/2016/11/01/json_parsers_tested/}
    sent: "2016-11-01T13:53:08.741Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "58189db2acf50f5d7d162f6c"
    text: {@dockimbel  quote from hacker news about web assembly: ^/^/"The initial MVP of WASM won't have privileged support for any custom runtime services, so in order to run Go code in the browser (or any other GC'd language) you'd have to compile the entire runtime with it and ship it all over the wire to the client. Eventually they do hope to lift this restriction."^/^/Bundling the run time would be restrictive for one of my preferred languages(Common Lisp) but I bet it would not be restrictive for Red.  How big do you estimate a full Red 2.0 bundled run time would be?}
    sent: "2016-11-01T13:50:42.091Z"
    editedAt: "2016-11-01T13:52:59.685Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5818678f0e25dbfa11859724"
    text: "@dockimbel done - #2295"
    sent: "2016-11-01T09:59:43.396Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58185d8f806316005de3694e"
    text: "@Skrylar Path issue fixed in the source archives."
    sent: "2016-11-01T09:17:03.427Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5818415a27c3e02625e9b837"
    text: {@PeterWAWood `keep` returns the input matched by the rule following it. Though, I missed your first post about it, the returned char value is indeed not intuitive. You might want to open a ticket about it, so we can see if it can be improved.}
    sent: "2016-11-01T07:16:42.246Z"
    editedAt: "2016-11-01T07:18:44.953Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581817a283a2008d22f66f90"
    text: {@dockimbel I think the result that confused me was when ```keep``` returned the ```char!``` value when I was expecting a ```string!``` containing a single character. I understand the logic but I hadn't expected the change in datatype from ```string!```.}
    sent: "2016-11-01T04:18:42.493Z"
    editedAt: "2016-11-01T04:19:33.842Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "581812e66c83252b61ff16bf"
    text: "yea, interesting times..."
    sent: "2016-11-01T03:58:30.916Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5818129683a2008d22f65c1d"
    text: {@PeterWAWood It's correct. What result were you expecting?}
    sent: "2016-11-01T03:57:10.473Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5818126683a2008d22f65bc5"
    text: {@JacobGood1 It seems it will become available by default in 2017.}
    sent: "2016-11-01T03:56:22.025Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581811fe806316005de0b546"
    text: {Also, is this expected:^/```text^/red>> parse "{1}" [collect [keep to end]]^/== ["{1}"]^/red>> parse {"1"} [collect [keep to end]]^/== [{"1"}]^/```}
    sent: "2016-11-01T03:54:38.695Z"
    editedAt: "2016-11-01T03:55:24.715Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58180ffb806316005de0ad5d"
    text: {In many cases, it would be easier to handle if ```keep``` appended a string rather than a char.}
    sent: "2016-11-01T03:46:03.458Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58180e1d5f27a2ed2a7b3d3d"
    text: {it seems to have been a coordinated announcement... which is good:^/https://blogs.windows.com/msedgedev/2016/10/31/webassembly-browser-preview/^/https://hacks.mozilla.org/2016/10/webassembly-browser-preview}
    sent: "2016-11-01T03:38:05.453Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58180d065f27a2ed2a7b3cce"
    text: {Just in case it was missed: http://v8project.blogspot.com/2016/10/webassembly-browser-preview.html}
    sent: "2016-11-01T03:33:26.023Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58180b1bc3569a036e3f33b0"
    text: {@dockimbel I have a question about ```collect``` in ```parse```. If you ```keep``` a single character from a string parse appends a char! value to the collecting block:^/```text^/red>> parse "1" [collect [keep to end]]^/== [#"1"]^/red>> parse "12" [collect [keep to end]]^/== ["12"]^/```^/}
    sent: "2016-11-01T03:25:15.088Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5818090e0e25dbfa1183045c"
    text: {@Skrylar Thanks for reporting it, will have a look at the batch script.}
    sent: "2016-11-01T03:16:30.141Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5817cf71482c168b22d8df1b"
    text: {Perhaps, finally, a good use for that small meadow in lexical space.}
    sent: "2016-10-31T23:10:41.326Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5817ce7e0e25dbfa1182070d"
    text: "Ooooh, `&`."
    sent: "2016-10-31T23:06:38.137Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5817c6dd482c168b22d8b1c3"
    text: "Alternatively, ```&``` could be used."
    sent: "2016-10-31T22:34:05.721Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5817c69e83a2008d22f4b70b"
    text: {As ```|``` is used to denote "one of these sub-rules", perhaps ```||``` could be used to denote "one of each of these sub-rules" (obviously unordered as sub-rules are ordered by default).}
    sent: "2016-10-31T22:33:02.325Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5817b1a00e25dbfa11816328"
    text: {Aaaand it doesn't run :( Gave me errors about libcurl (which actually is installed.) Guess I'll set up a testing container for it and report on it in a bit}
    sent: "2016-10-31T21:03:28.661Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "5817b1040e25dbfa11816095"
    text: {@dockimbel Hrmm. The zipped downloader for linux has a lot of cruft in it. It unpacks to `home/dk/static.red-lang.org/dl/auto/linux/red-31oct16-80f57d2` }
    sent: "2016-10-31T21:00:52.348Z"
    editedAt: "2016-10-31T21:01:08.462Z"
    v: 2
    author: "561110a7d33f749381a839d7"
) #(
    id: "5817b0508ed1c0ff5c4c6b4e"
    text: {Now is the time where I appear again for a brief period of time to update `red.el` and see how far things have gone since i wandered off :)}
    sent: "2016-10-31T20:57:52.451Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "5817b015c3569a036e3d5898"
    text: "Hiyo."
    sent: "2016-10-31T20:56:53.027Z"
    v: 1
    author: "561110a7d33f749381a839d7"
) #(
    id: "58178a6c806316005ddddc4e"
    text: {@dockimbel Is `all` reserved for future use in `parse`? It seems to silently do nothing right now, but scanning the parse code quickly I don't see it treated specially. That's my second thought.^/^/My first thought was `take`, and the expression for it would be a sub-dialect. e.g. `[take [1 3 'hello opt 'red 'world]]`, where a match for each value "takes" it from the expression, reducing its required count. So the above expr would take 1-3 'hellos, an optional 'red, and 1 'world, in any order. *Way* more complicated, but your need of `opt` made my brain head down the long path of generalization.}
    sent: "2016-10-31T18:16:12.873Z"
    editedAt: "2016-10-31T18:16:35.530Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5817857f8ed1c0ff5c4b6540"
    text: {:point_up: [October 31, 2016 4:01 AM](https://gitter.im/red/red?at=581716700e25dbfa117dabdb) @Rebol2Red, we don't have control over the internals of slider today. The workaround would be to increase the data ranges. I also played with using decimal values for the ranges and not truncating during interpolation, but it's a coarse control. Having text fields may be the best way to get exact control. ^/And this is one of those funny areas. I want exact numbers too, though I know getting my exact weight can't happen and doesn't make a difference anyway. }
    sent: "2016-10-31T17:55:11.254Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58177180806316005ddd3741"
    text: "@7hi4g0 Parse rules are ordered by default."
    sent: "2016-10-31T16:29:52.566Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58176b93c8e86772742e7b04"
    text: {> Is there an ordered counterpart yet?^/```^/red>> parse [hello red world] ['hello 'red 'world]^/== true^/```}
    sent: "2016-10-31T16:04:35.163Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58176a84482c168b22d65c34"
    text: "Is there an ordered counterpart yet?"
    sent: "2016-10-31T16:00:04.293Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58176a6e5a1cfa016e68397c"
    text: {I would suggest `chain` or `order`, but then I saw it's an unordered rule.}
    sent: "2016-10-31T15:59:42.506Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58176a317b15d16e55cb16fd"
    text: "Let me try again."
    sent: "2016-10-31T15:58:41.609Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58176a2ac3569a036e3b7bcf"
    text: "Gutter Android app is REALLY BAD."
    sent: "2016-10-31T15:58:34.381Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58176a1a83a2008d22f2693c"
    text: "Sorry about that :point_up_2: ."
    sent: "2016-10-31T15:58:18.522Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5817683d806316005ddcf4a3"
    text: "I would suggest `chain` or ``"
    sent: "2016-10-31T15:50:21.891Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5817368e8ed1c0ff5c49570e"
    text: {Though, for the VID needs (and in many other use-cases), you want to match each rule zero or once at most. Signifying success/failure then becomes difficult. So, this requires a bit more research.}
    sent: "2016-10-31T12:18:22.140Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58173575482c168b22d5043b"
    text: {@maximvl That would be implementation-specific I guess (probably ordered then, so first one), because both rules could match. Better avoid overlapping rules when using unordered matching.}
    sent: "2016-10-31T12:13:41.550Z"
    editedAt: "2016-10-31T12:15:03.177Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58173413806316005ddbaa55"
    text: {@dockimbel unordered matching? that's interesting, would `[a b]` match first or second block in `[[a b opt z] [a b]]` ?}
    sent: "2016-10-31T12:07:47.585Z"
    editedAt: "2016-10-31T12:09:58.828Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58172c135a1cfa016e66a12e"
    text: "Indeed, but valid. ;-)"
    sent: "2016-10-31T11:33:39.272Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58172bcb7b15d16e55c9803c"
    text: {Haha! That's a fun coincidence:^/```^/red>> random [hello red world]^/== [hello red world]^/red>> random [hello red world]^/== [red hello world]^/```}
    sent: "2016-10-31T11:32:27.067Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58172bbb5a1cfa016e669fe8"
    text: {@maximvl ^/```lisp^/red>> random/seed 123^/red>> random [hello nice world]^/== [world hello nice]^/```}
    sent: "2016-10-31T11:32:11.626Z"
    editedAt: "2016-10-31T11:33:04.147Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58172b7283a2008d22f0d7f6"
    text: "@pekr I am talking about unordered matching."
    sent: "2016-10-31T11:30:58.776Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58172b28806316005ddb7cf6"
    text: {@maximvl ^/```lisp^/red>> random random [hello nice world]^/== [world nice hello]^/```}
    sent: "2016-10-31T11:29:44.676Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58172b270e25dbfa117e0f44"
    text: {for any order | separator would be required? Isn't it identical to parsing a block to `[a | b | c]`- simply, match what comes first? .... sorry, just very shallow thinking during the meeting ;-)}
    sent: "2016-10-31T11:29:43.285Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58172ae4806316005ddb7c23"
    text: {@maximvl It's a valid result. ;-) Set a different random seed first.}
    sent: "2016-10-31T11:28:36.472Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58172a90c3569a036e39f0b2"
    text: "I'm confused =)"
    sent: "2016-10-31T11:27:12.489Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58172a8a0e25dbfa117e0ccd"
    text: {```^/random [hello nice world]^/== [hello nice world]^/```}
    sent: "2016-10-31T11:27:06.255Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58172a6f83a2008d22f0d451"
    text: {@maximvl Let me rephrase it: matching each rule once. ;-) Though, we would still need a zero or one matching mode it seems... }
    sent: "2016-10-31T11:26:39.836Z"
    editedAt: "2016-10-31T11:29:03.414Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58172a3483a2008d22f0d312"
    text: {For example, parsing this VID code: `button red "Ok" 20x20` is not easy as the widget arguments can be provided in any order. Using any: `any [word! | string! | pair!]` would match many invalid inputs.}
    sent: "2016-10-31T11:25:40.354Z"
    editedAt: "2016-10-31T11:25:58.264Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58172a1a8ed1c0ff5c49174d"
    text: "I would call it `once`"
    sent: "2016-10-31T11:25:14.629Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58172a0a83a2008d22f0d223"
    text: {@dockimbel how is that different from `parse random [hello nice world] ['hello | 'nice | 'world]` ?}
    sent: "2016-10-31T11:24:58.083Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "581729345a1cfa016e66944c"
    text: {@maximvl Matching once only, and matching each. Hmm, maybe `each` would do. ;-)}
    sent: "2016-10-31T11:21:24.881Z"
    editedAt: "2016-10-31T11:23:02.663Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581728e40e25dbfa117e04e3"
    text: "@dockimbel what's the difference from `any`?"
    sent: "2016-10-31T11:20:04.289Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "581727e583a2008d22f0c5a0"
    text: {Just having a quick look at Parse to see how to support matching unordered rules (matching each rule once). Seems not difficult to implement, I would just need a good name for the keyword:^/```lisp^/parse random [hello nice world] [<keyword> ['hello 'nice 'world]]^/```^/Any proposition?}
    sent: "2016-10-31T11:15:49.158Z"
    editedAt: "2016-10-31T11:18:02.100Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581716700e25dbfa117dabdb"
    text: {@greggirwin About your really awesome BMR calculator. ^/I am having problems to set the values of the sliders while using the  scroll wheel of the mouse. ^/It increments/decrements mostly 2 units but sometimes 3. Can this be adjusted to always be one unit or maybe three units somehow?  ^/Note: i know scrollwheels are set to 3 units by default}
    sent: "2016-10-31T10:01:20.689Z"
    editedAt: "2016-10-31T10:05:37.343Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5817155e83a2008d22f06cb5"
    text: ":smile: "
    sent: "2016-10-31T09:56:46.010Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5817149d83a2008d22f069e9"
    text: "@geekyi Thanks for the links, interesting stuff."
    sent: "2016-10-31T09:53:33.633Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581714847b15d16e55c90b29"
    text: "Trying it now, thanks."
    sent: "2016-10-31T09:53:08.101Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5817146d83a2008d22f0696d"
    text: {@WiseGenius I just pushed a patch for it, works fine now from the command prompt.}
    sent: "2016-10-31T09:52:45.929Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581712700e25dbfa117d986b"
    text: {@geekyi also wonders the best way to collect and organize these links to projects}
    status: true
    sent: "2016-10-31T09:44:16.069Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5817124b83a2008d22f05d63"
    text: "@dockimbel Thanks, that would be awesome!"
    sent: "2016-10-31T09:43:39.863Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5817123a0e25dbfa117d9713"
    text: {Both of those use javascript under the hood like eve}
    sent: "2016-10-31T09:43:22.750Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581712120e25dbfa117d9667"
    text: {- carbide has reactive widgets, and 2-way bindings (modify code from widgets)^/- kajero, while not as revolutionary, is more of a notebook interface. However, it's better than most scientific notebooks I've seen, in that editing and interaction is better. Also, it has a `reshaper` library, and looks useful for data manipulation and plotting}
    sent: "2016-10-31T09:42:42.257Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5817111f0e25dbfa117d934e"
    text: {I've been looking at Eve [alternatives](http://alternativeto.net/software/eve/) , most interesting of those seem to be [carbide](https://alpha.trycarbide.com/#examples) (see also [widgets](http://alpha.trycarbide.com/@bijection/b1542b3b90cc0b80a56f8393afa46821) ) and [kajero](http://www.joelotter.com/kajero/)}
    sent: "2016-10-31T09:38:39.755Z"
    editedAt: "2016-10-31T09:39:01.100Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "581710aa0e25dbfa117d90e1"
    text: {@WiseGenius Indeed, it doesn't work if run from command prompt...Let me fix that.}
    sent: "2016-10-31T09:36:42.875Z"
    editedAt: "2016-10-31T09:37:46.281Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58170fb4806316005ddaf80e"
    text: {@yoffset Please post only links relevant to Red in future.}
    sent: "2016-10-31T09:32:36.086Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58170f868ed1c0ff5c48946d"
    text: {I personally have no use for my second example (typing `#include` in the console). What is causing severe headaches for me is my first example of running `red b.red` from the Windows command prompt. Any ideas?}
    sent: "2016-10-31T09:31:50.912Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58170d7f7b15d16e55c8eaaf"
    text: {The console is not applying the preprocessor to the input, maybe it should, I'm not sure. Anyway, you can invoke the preprocessor using `expand-directives` if needed. For now, only `do <file!>` will invoke it.}
    sent: "2016-10-31T09:23:11.452Z"
    editedAt: "2016-10-31T09:24:25.418Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58170ce1c3569a036e395eef"
    text: {@WiseGenius It should be working, let me give it a try...Using the latest build:^/```lisp^/red>> write %a.red {Red [] print "a"}^/red>> write %b.red {Red [] #include %a.red print "b"}^/red>> do %b.red^/a^/b^/```}
    sent: "2016-10-31T09:20:33.546Z"
    editedAt: "2016-10-31T09:22:00.782Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58170a970e25dbfa117d7422"
    text: {@dockimbel I notice that [#1601](https://github.com/red/red/issues/1601) is labeled as `status.built` but is still open. Is this because you are already aware that it currently only works properly within a `do` block and not directly in red, or should I report it somewhere?^/^/Example:^/^/Contents of **a.red**:^/```^/Red []^/^/print "a"^/```^/^/Contents of **b.red**:^/```^/Red []^/^/#include %a.red^/print "b"^/```^/^/Contents of **c.red**:^/```^/Red []^/^/do %b.red^/print "c"^/```^/^/Result of `red a.red`:^/```^/a^/```^/Result of `red b.red`:^/```^/b^/```^/Result of `red c.red`:^/```^/a^/b^/c^/```^/^/Expected result of `red b.red`:^/```^/a^/b^/```^/^/Another example from the console:^/```^/red>> do %b.red^/a^/b^/red>> #include %b.red^/== %b.red^/```}
    sent: "2016-10-31T09:10:47.396Z"
    editedAt: "2016-10-31T09:16:24.277Z"
    v: 3
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5816d6e5c3569a036e3888bf"
    text: {Maybe it's the View requirement that is different for this. Will try to make time to confirm.}
    sent: "2016-10-31T05:30:13.320Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5816d6a05a1cfa016e652987"
    text: {Interesting. Changing to UTF-8 encoding in my editor fixed it. Though some other 1252 encoded scripts work fine. }
    sent: "2016-10-31T05:29:04.621Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5816d56c0e25dbfa117ca78b"
    text: {Has anyone else seen `*** Error: cannot access argument file` recently? I haven't in a long time, but the uncommented version of my BMR app triggers it. Pasting the code into the console is fine. No spaces in the filename, which I think was the issue before. }
    sent: "2016-10-31T05:23:56.160Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5816d4b05a1cfa016e65230d"
    text: "@greggirwin the commentary was helpful!"
    sent: "2016-10-31T05:20:48.414Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5816d1fe7b15d16e55c7fbfb"
    text: {I put up a version of the code without all the extra commentary: https://gist.github.com/greggirwin/6745b96d0531ee88f5755d6e62515a9d}
    sent: "2016-10-31T05:09:18.702Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5816d18c7b15d16e55c7faf1"
    text: {@geekyi, that's the complete reactivity part, but it's built on the object ownership system. I think we can count them separately. :^^)}
    sent: "2016-10-31T05:07:24.671Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5816bfee5a1cfa016e64d9aa"
    text: "https://milen.me/writings/mac-platform-decline/"
    sent: "2016-10-31T03:52:14.482Z"
    v: 1
    author: "57369493c43b8c601972d80b"
) #(
    id: "5816b49fc3569a036e3807c5"
    text: {So https://github.com/red/red/blob/master/environment/reactivity.red is the *complete* implementation? It's smaller than I expected..}
    sent: "2016-10-31T03:03:59.566Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5816b402482c168b22d2e048"
    text: {@greggirwin really interesting use of reactivity.. I need to spend more time going over the code}
    sent: "2016-10-31T03:01:22.028Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58163de1806316005dd7bf1f"
    text: {Changed the wording slightly, as "kludge" was really too strong.}
    sent: "2016-10-30T18:37:21.173Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58163d28c3569a036e361519"
    text: {@dockimbel, I should probably say "workaround", since it all works as intended. :^^)}
    sent: "2016-10-30T18:34:16.036Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5815cc2e83a2008d22eb4f93"
    text: {@pekr @maximvl @geekyi @geekyi *Red vs Eve! The boxing match of the century!*}
    sent: "2016-10-30T10:32:14.055Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "5815ab9783a2008d22eae917"
    text: "OMG...how could I forget that... Thanks."
    sent: "2016-10-30T08:13:11.285Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5815ab10482c168b22ced237"
    text: "@rebolek `extend m1 m2`"
    sent: "2016-10-30T08:10:56.951Z"
    editedAt: "2016-10-30T08:12:53.121Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "58159f7f0e25dbfa117819e4"
    text: {Or,more specifically, how do I append one map to another.}
    sent: "2016-10-30T07:21:35.641Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58159d2c83a2008d22eabcaf"
    text: "How do I join two maps?"
    sent: "2016-10-30T07:11:40.782Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58157c4f0e25dbfa1177b69c"
    text: {@greggirwin Very interesting reactive experiment. Will look into the kludges you've encountered to see how we can improve the reactive framework.}
    sent: "2016-10-30T04:51:27.383Z"
    editedAt: "2016-10-30T04:51:45.403Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581531160e25dbfa1176dc77"
    text: {- https://en.wikipedia.org/wiki/UserLand_Software (I have https://www.amazon.com/Frontier-Definitive-Guide-Matt-Neuburg/dp/1565923839 as well)^/- https://en.wikipedia.org/wiki/MUMPS^/- https://en.wikipedia.org/wiki/Linda_(coordination_language)^/^/They are older (in order, M/Mumps, Linda, Frontier), but have important lessons for us. I spoke at a couple Intersystems/M conferences many years ago. As an outsider, my view was "How can you even make a system like that scale and maintain it?" Then you watch experts use it and see how powerful it is. }
    sent: "2016-10-29T23:30:30.638Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58152de383a2008d22e973ec"
    text: {@greggirwin Could you provide links for those projects and languages you mentioned? :flushed: I've never heard of half of them and got curious}
    sent: "2016-10-29T23:16:51.557Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58151ba2806316005dd3f841"
    text: {Here's another Red experiment and essay (ess-periment?): https://gist.github.com/greggirwin/38883ca5109175a60896d2f406ee49f6}
    sent: "2016-10-29T21:58:58.033Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58150b3d806316005dd3b98e"
    text: {The setup is the "not simple" part for sure.}
    sent: "2016-10-29T20:49:01.706Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581505d5c3569a036e31e5a7"
    text: {This sticks out like a sore thumb http://docs.witheve.com/handbook/installation/ : ^/> If you’re running Windows 10, you can install Eve via Ubuntu for Windows. Unfortunately, Eve is not supported on earlier versions of Windows at this time}
    sent: "2016-10-29T20:25:57.201Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581503df0e25dbfa11762705"
    text: {Eve code looks in some ways very similar to red (the logo like syntax with blocks).  [This](https://news.ycombinator.com/item?id=12819365) also says it is based on [datalog](http://ysangkok.github.io/mitre-datalog.js/wrapper.html), which cleared up things pretty much (for me at least)}
    sent: "2016-10-29T20:17:35.811Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58150237482c168b22ccac24"
    text: {@pekr >  I tried their demo yesterday and it did not work in Firefox^/^/[this one?](http://play.witheve.com/#/examples/quickstart.eve) works for me in firefox 50.0beta11 windows 10}
    sent: "2016-10-29T20:10:31.788Z"
    editedAt: "2016-10-29T20:10:42.422Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5814f3cc482c168b22cc7473"
    text: {Reading more, Eve clearly wants to make things simple, just in a different way than Red right now. }
    sent: "2016-10-29T19:09:00.293Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5814f1dc0e25dbfa1175e171"
    text: {In some ways, Eve reminds me of Frontier (though it was triple based), which I thought was a cool system, or even Mumps in some ways, being database centric, or even tuplespaces. I think they updated the intro docs, because it's much clearer now. }
    sent: "2016-10-29T19:00:44.851Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5814f0415a1cfa016e5e1e29"
    text: {They both have unifying principles, which I think is important and are tackling things from different angles. I think it's great that all these projects exist.}
    sent: "2016-10-29T18:53:53.943Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5814ed218ed1c0ff5c40e3dc"
    text: {I'm pulling for the Eve team. It doesn't click for me yet but, like Red, they want to change how we do things, and see many of the same problems we do. Wolfram as well. Their approaches are both very high level though, where Red is building from the ground up, so you have consistency all the way down. Of course people will want XML and JSON libs in Red, and we need to enable interop, but what only Red seems to be addressing (of those 3) is the huge gain from simplifying things.}
    sent: "2016-10-29T18:40:33.934Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5814a430482c168b22cb30c4"
    text: {@fergus4 Eve has leaky abstractions for GUI, this is not how you make it more suitable for "non-programmers", nor for programmers unfamiliar with the underlying GUI system (e.g. HTML).}
    sent: "2016-10-29T13:29:20.151Z"
    editedAt: "2016-10-29T13:33:29.559Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5814a01383a2008d22e74615"
    text: {It looks simple at first but when I look at how they build their browser GUI it looks like a mess like html. They said it's still only for programmers at this point, perhaps it will be more intuitive on later versions directed at non programmers.}
    sent: "2016-10-29T13:11:47.463Z"
    v: 1
    author: "556af11b15522ed4b3e13239"
) #(
    id: "58147fc45a1cfa016e5c6ee1"
    text: {Red is doing it bottom-up, while Eve is rather top-down. We have now almost completed the foundations for building higher-level layers. Implementing a Eve-like environment on top of Red is not a big deal. The question is more: what parts of Eve are really relevant and improve our productivity/efficiency? Eve has still to demonstrate in real world that such model is "better" than existing ones. Ability to have an accurate mental model of how your tool is working is AFAICT, an important part of programming. Red pervasive DSLs approach is trying to help on that by specializing the tools by domain and reducing the cognitive load required to build that mental model for each one.}
    sent: "2016-10-29T10:53:56.723Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58147e7083a2008d22e6c6b5"
    text: {@maximvl Lot of food for thoughts there. I'm personnaly not a fan of literate programming. Rebol makes it trivial to use, and there was at least [one attempt](http://web.archive.org/web/20140330055322/http://www.rebol.it/power-mezz/#section-7) at that in Rebol community, but it never caught up. There are several issues with literate programming, like extra costs and the [double authority](https://news.ycombinator.com/item?id=12818016) problem.}
    sent: "2016-10-29T10:48:16.880Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58146f127b15d16e55bf28db"
    text: {and especially I love that they are trying to bring back literate programming, which have been forgotten for decades}
    sent: "2016-10-29T09:42:42.125Z"
    editedAt: "2016-10-29T09:42:57.758Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58146ea383a2008d22e6909d"
    text: "@Mufferaw I see, thanks"
    sent: "2016-10-29T09:40:51.212Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58146e070e25dbfa1173df93"
    text: {@pekr  @maximvl  This page talks a bit about their goals http://programming.witheve.com/deepdives/whateveis.html}
    sent: "2016-10-29T09:38:15.155Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58146dd47b15d16e55bf250d"
    text: {Red went the hard way here, but yeah, at least we can use Eve's developers experience}
    sent: "2016-10-29T09:37:24.576Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58146da08ed1c0ff5c3eeae9"
    text: {from what I see they concentrated on having quick start with browser environment and jump right into implementing their own ideas}
    sent: "2016-10-29T09:36:32.960Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58146d6b806316005dd1629b"
    text: {@pekr ^/>can Eve have a native GUI, work embedded in other environments, etc?^/^/I really doubt it}
    sent: "2016-10-29T09:35:39.223Z"
    editedAt: "2016-10-29T09:35:43.784Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58146d3cc3569a036e2f73ec"
    text: {Well - they are kind of stealing Red/Rebol's thunder re expressivity.  I tried their demo yesterday and it did not work in Firefox. We know we should be present in browser too. I just wonder the reverse - can Eve have a native GUI, work embedded in other environments, etc?^/}
    sent: "2016-10-29T09:34:52.332Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58146640806316005dd14908"
    text: {Chris Granger has some progress on Eve, very impressive:  http://programming.witheve.com/}
    sent: "2016-10-29T09:05:04.622Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58141fd7482c168b22c950bb"
    text: {@greggirwin It should compile fine. I can reproduce the error, will look into it. Seems unsupported by libRedRT, it compiles fine in release mode (`-r`).}
    sent: "2016-10-29T04:04:39.728Z"
    editedAt: "2016-10-29T04:06:40.891Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58138075806316005dcdc2b7"
    text: {Should `halt` prevent compiling?^/```^/Red []^/; Do stuff^/halt^/```^/```^/...^/Compiling to native code...^/*** Compilation Error: undefined symbol: f_halt ^/*** in file: %/D/Red/temp/halt-compiled.red ^/*** at line: 326 ^/*** near: [^/    f_halt ^/    stack/unwind #user-code^/]^/```}
    sent: "2016-10-28T16:44:36.996Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581322480e25dbfa116e2431"
    text: {@maximvl Difference between "stable" (documented/tested) and "development" (unstable) version. Releases are just stable milestones, while `master` branch is  a perpetual work in progress.}
    sent: "2016-10-28T10:02:48.903Z"
    editedAt: "2016-10-28T10:02:53.467Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58131fbc7b15d16e55b97a86"
    text: {what's the reason in having feature in exact release, since everybody still can just download latest build?}
    sent: "2016-10-28T09:51:56.709Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5812f50f806316005dcb1dcb"
    text: "+1 on `to` action for 0.6.2. I miss that a lot"
    sent: "2016-10-28T06:49:51.304Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5812d87e7b15d16e55b85ac2"
    text: {Right, I want to have external libraries binding support at Red level too (same as with Rebol2), though I am unsure if we will have time to implement it for 0.6.2, given the number of new tickets to process. Though, I still want `to` action to be done for this release, as it's really a PIA to not have it properly supported.}
    sent: "2016-10-28T04:47:58.597Z"
    editedAt: "2016-10-28T04:48:47.115Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58124a9f0e25dbfa116ab602"
    text: {Well, if GUI stuff is moving, maybe one item might move downwards the release chain - loading libraries for Red, not just R/S :-)^/}
    sent: "2016-10-27T18:42:39.637Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "581234d87b15d16e55b5bdb6"
    text: {@dockimbel  sounds good, a lot of stuff is inc as it is.}
    sent: "2016-10-27T17:09:44.594Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58122e5e806316005dc7ef16"
    text: "@dockimbel Ok, thanks again!"
    sent: "2016-10-27T16:42:06.126Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58122d6f8ed1c0ff5c355a2b"
    text: {@Mufferaw You can use `#system` if you don't mind your code to be under the internal `red` namespace, or `#system-global` otherwise.}
    sent: "2016-10-27T16:38:07.376Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58122d33c3569a036e25bf68"
    text: {@JacobGood1 We are close to a new release. I think we'll move the GUI-related entries to following releases.}
    sent: "2016-10-27T16:37:07.634Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58122a0683a2008d22dc9f02"
    text: "@rebolek Thanks! "
    sent: "2016-10-27T16:23:34.383Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58122786c3569a036e25a37c"
    text: "@Mufferaw take a look at `#system-global`"
    sent: "2016-10-27T16:12:54.057Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5812143f0e25dbfa1169953e"
    text: {When using routines is there a way to have 'global' variables? Accessible  between routines or between functions within a  routine?}
    sent: "2016-10-27T14:50:39.050Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5812129b5a1cfa016e51b2d7"
    text: "Oh yea, the trello board... thanks @pekr "
    sent: "2016-10-27T14:43:39.810Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "581211947b15d16e55b50178"
    text: {I think not yet. If you look into a Trello board for 0.6.2, only 11 from 21 tasks are done ... well, unless Doc decides on some interim release .... https://trello.com/c/wJRJhxBz/150-0-6-2-libred}
    sent: "2016-10-27T14:39:16.715Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "581210ce5a1cfa016e51a68e"
    text: {@dockimbel considering libred and macros are mostly/completely done, is there a new release with a blog post looming?}
    sent: "2016-10-27T14:35:58.356Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5811fe9bc3569a036e24b849"
    text: {@dockimbel I know it. I renamed those functions in the macGUI branch. Forgot to change it in master branch.}
    sent: "2016-10-27T13:18:19.084Z"
    editedAt: "2016-10-27T13:18:29.277Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5811fe36806316005dc6f000"
    text: {@Mufferaw I can reproduce it now. It seems there's a name clash between the trigonometric routines and C imports at R/S level.}
    sent: "2016-10-27T13:16:38.844Z"
    editedAt: "2016-10-27T13:16:52.052Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5811edb30e25dbfa1168d1d0"
    text: {`Compilation Error: return type missing in function: red/tan`}
    sent: "2016-10-27T12:06:11.863Z"
    editedAt: "2016-10-27T12:06:30.291Z"
    v: 2
    author: "56ced090e610378809c36532"
) #(
    id: "5811edad7b15d16e55b44d9a"
    text: "@dockimbel This is what I get"
    sent: "2016-10-27T12:06:05.570Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5811e89083a2008d22db3f0a"
    text: "@Mufferaw That routine compiles fine here."
    sent: "2016-10-27T11:44:16.388Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5811a836d61a904a084b74fb"
    text: {@7hi4g0 And I'm going to merge master into GTK branch as it has some fixes for libRed. }
    sent: "2016-10-27T07:09:42.933Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5811a7ea5a1cfa016e4f9966"
    text: "@qtxie :+1: :smile: "
    sent: "2016-10-27T07:08:26.375Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5811a7ae010b919c1b66cd5f"
    text: "@7hi4g0 Fixed the crash."
    sent: "2016-10-27T07:07:26.983Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58119f347b15d16e55b2e901"
    text: "@qtxie Ok. I'll ignore it then. :+1: "
    sent: "2016-10-27T06:31:16.047Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58119a8c997ba838692ebe09"
    text: {@7hi4g0 `probe system` crashes. It's a regression.}
    sent: "2016-10-27T06:11:24.067Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "581195bc0e25dbfa11674aab"
    text: {I'm trying to mix red/system with red. In red/system the following is ok^/```^/Red/System[]^/number: tan 39.9^/print number^/```^/When I try to put that into a routine in Red I get a compilation error^/```^/tang: routine[^/^-/local number^/][^/^-number: tan 39.9^/]^/```}
    sent: "2016-10-27T05:50:52.434Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581191037b15d16e55b2b213"
    text: {should this be happening?^/```^/red>> probe system^/^/*** Runtime Error 1: access violation^/*** at: F7705DE1h^/```}
    sent: "2016-10-27T05:30:43.843Z"
    editedAt: "2016-10-27T05:30:51.525Z"
    v: 2
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "581190d8806316005dc50b50"
    text: "I guess `system/platform` will be enough."
    sent: "2016-10-27T05:30:00.857Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5811903e482c168b22bdc290"
    text: {Thinking about it, it doesn't need to be a preprocessor directive. A regular `if` will do if I there's some way to know which OS I'm running in.}
    sent: "2016-10-27T05:27:26.206Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58118ec7806316005dc50555"
    text: {GTK already handles that and it's giving me infinite loop and stack overflow with that code there. If I comment it, it runs fine.}
    sent: "2016-10-27T05:21:11.968Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58118e94c3569a036e22cc70"
    text: {I'm trying to remove this code from Linux: https://github.com/red/red/blob/master/modules/view/view.red#L851}
    sent: "2016-10-27T05:20:20.091Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58118dc7482c168b22bdbbf1"
    text: {@dockimbel It compiled but it's giving me errors when I run.^/```^/*** Script Error: path none is not valid for unset! type^/*** Where: <>^/*** Stack: <>^/```}
    sent: "2016-10-27T05:16:55.888Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "581178835a1cfa016e4ef4ee"
    text: {In Red's preprocessor, it should be `#if config/OS <> 'Linux`.}
    sent: "2016-10-27T03:46:11.968Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581171f6482c168b22bd6a10"
    text: {`#if OS <> 'Linux` is Red/System directive, so it cannot be used in Red. (it's allowed in master branch now).}
    sent: "2016-10-27T03:18:14.734Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58115bc9482c168b22bd2bc8"
    text: {I know this if directive exists in the source code, but it gives me this error if I put it in `modules/view/view.red`}
    sent: "2016-10-27T01:43:37.466Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58115b9283a2008d22d914e6"
    text: {I'm getting `*** Compilation Error: undefined word OS` on `#if OS <> 'Linux`. Why is that?}
    sent: "2016-10-27T01:42:42.302Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5811041c00847298798017d6"
    text: "Nice, @greggirwin "
    sent: "2016-10-26T19:29:32.937Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5811039a806316005dc2e7d9"
    text: "Done."
    sent: "2016-10-26T19:27:22.575Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581101e4482c168b22bba8fe"
    text: {I can post some notes, but don't want to get drawn in to rants.}
    sent: "2016-10-26T19:20:04.166Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "581101d0806316005dc2df48"
    text: {Not sure how to help clear up confusion, or how much time it's worth, based on the current chat there.}
    sent: "2016-10-26T19:19:44.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5810ed85997ba838692eb261"
    text: {They don’t seem to care match or willing to check it.}
    sent: "2016-10-26T17:53:09.080Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810e32a83a2008d22d70567"
    text: "(willful confusion, perhaps)"
    sent: "2016-10-26T17:08:58.291Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5810e2c10e25dbfa116480ca"
    text: {Red's 'About' page causing confusion in [this discussion](https://chat.stackoverflow.com/transcript/message/33694476#33694476).}
    sent: "2016-10-26T17:07:13.437Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5810d04a008472987980117d"
    text: "Yes, that should work."
    sent: "2016-10-26T15:48:26.503Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810cf8f8ed1c0ff5c2f7e85"
    text: "That will serve my purposes fine"
    sent: "2016-10-26T15:45:19.706Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810cf6d5a1cfa016e4c20cb"
    text: {It seems if I put those functions in the same routine it will work!}
    sent: "2016-10-26T15:44:45.711Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810ca7b997ba838692eae68"
    text: {So you have to pass three floats and make that struct inside your routine.}
    sent: "2016-10-26T15:23:39.768Z"
    editedAt: "2016-10-26T15:24:03.439Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810ca5c00847298798010c9"
    text: {@Mufferaw No, `struct!` is not supported under Red (IIRC, ***yet***, it would be).}
    sent: "2016-10-26T15:23:08.537Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810ca09c3569a036e1f983b"
    text: {@rebolek I tried this and it works fine^/```^/vector3: routine[^/^-^-][^/^-^-vector3!: alias struct! [^/^-^-    x [float!]^/^-^-    y [float!]^/^-^-    z [float!]^/^-^-]^-^/]^/^/dostuff: routine[^/^-^-/local num flt^/^-^-][^/^-^- num: declare vector3!^/^-^- num/x: 0.5 num/y: 10.5 num/z: 1.5 ^/^-^- flt: 5.0^/^-^- vec3-Mfloat num flt^/^-^- print["Num x " num/x lf]^/^-^- ]^/```^/But when I try to use vector3! as an argument it doesn't^/```^/vec3-Mfloat: routine [^/^-dest[vector3!]^/    vec [vector3!]^/    f [float!]^/    ][      ^/        dest/x: vec/x * f^/        dest/y: vec/y * f^/        dest/z: vec/z * f^/^-]^/```^/Is it possible to use Vector3! as an argument?}
    sent: "2016-10-26T15:21:45.739Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810c205010b919c1b66bb56"
    text: {It is. Do not forget that whole Red is written in Red/System. So technically it is just a layer on top of R/S. All Red code is converted to R/S and then to machine code.}
    sent: "2016-10-26T14:47:33.332Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810c1c70084729879800f47"
    text: ":D"
    sent: "2016-10-26T14:46:31.335Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810c1a5c3569a036e1f68e0"
    text: {@rebolek That works, I can't believe it's so easy.}
    sent: "2016-10-26T14:45:57.348Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810bea0d61a904a084b62cb"
    text: {If you want to pass numbers and other simple types like boolean values from Red to R/S, it’s pretty straightforward, but for other types, you need to do some conversion. }
    sent: "2016-10-26T14:33:04.630Z"
    editedAt: "2016-10-26T14:33:34.302Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810bddd010b919c1b66bab3"
    text: {@Mufferaw at Red level you need to add some routines. Routine is written in Red/System but Red sees it as normal function. So it will take Red arguments that can be used to make your structs and call your R/S functions.}
    sent: "2016-10-26T14:29:49.540Z"
    editedAt: "2016-10-26T14:30:09.981Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810bd670e25dbfa1163b7ae"
    text: "I don't know how to put them into Red"
    sent: "2016-10-26T14:27:51.621Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810bd430e25dbfa1163b66e"
    text: {@rebolek I just started trying but the first problem I ran into was with the structs  I am using}
    sent: "2016-10-26T14:27:15.832Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810bd068ed1c0ff5c2f1384"
    text: {@maximvl Great! If you want to add more spheres you'll also have to change line 290.}
    sent: "2016-10-26T14:26:14.070Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810bbedd61a904a084b6274"
    text: {@Mufferaw It is definitely possible to mix it with Red, what exactly do you need to help with?}
    sent: "2016-10-26T14:21:33.606Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810b9190a2d07ff119134ef"
    text: {@Mufferaw very nice, I'll try it in the evening and post some screenshots ;)}
    sent: "2016-10-26T14:09:29.235Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5810b90d83a2008d22d6151a"
    text: {Next step is to try to make a gui for it but I'm not sure if it's possible to mix this with Red because of the structs I'm using...If anyone has advice about that I'd love to hear it!}
    sent: "2016-10-26T14:09:17.642Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810b871806316005dc151bd"
    text: {Camera can be moved and spheres and materials can be edited. }
    sent: "2016-10-26T14:06:41.708Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810b81f5a1cfa016e4b8683"
    text: {I finally got my ray-tracing program to a somewhat functional state. Thanks to all the help I received here! So far it only draws spheres and two types of materials.^/https://gist.github.com/Mufferaw/1fab30a52d968fd96defd66d0d61a650^/It just outputs to the console so you must pipe the output to a file, raytracer > image.ppm}
    sent: "2016-10-26T14:05:19.897Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5810a8e90a2d07ff1190daf0"
    text: {As it happens, `reflect` is defined (or inherited) by quite a few types where it is still `--NOT IMPLEMENTED--`.}
    sent: "2016-10-26T13:00:25.620Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "581073f30a2d07ff118ff965"
    text: "@dockimbel Thanks"
    sent: "2016-10-26T09:14:27.350Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "581071fc806316005dbff92e"
    text: {@mikeparr Search in the Red source code in which datatypes `reflect` function is defined.}
    sent: "2016-10-26T09:06:04.469Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58107046c3569a036e1dd1b4"
    text: {Can anyone tell me how to get a list of types that support reflection?  Thanks.}
    sent: "2016-10-26T08:58:46.211Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58105a3eba810c1d5fd154a8"
    text: {@pekr  Thanks for replying, do you know where can I find an example?}
    sent: "2016-10-26T07:24:46.037Z"
    v: 1
    author: "57247fef659847a7aff54399"
) #(
    id: "58104aab0a2d07ff118f6365"
    text: {I think so - even with recent simple-io stack, you can read/write http}
    sent: "2016-10-26T06:18:19.484Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58103976df0fb2245fc365b9"
    text: {Hi all,  if I want to create desktop apps with http data source,  does Red programming fit for the development?}
    sent: "2016-10-26T05:04:54.432Z"
    v: 1
    author: "57247fef659847a7aff54399"
) #(
    id: "58102602806316005dbf2479"
    text: {@Mufferaw The debugging compilation mode is currently limited to Red/System (though that should change soon). When enabled, you get stack traces and more detailed error info on crashing. It also enables `assert` expressions and additional debugging [functions](https://github.com/red/red/blob/master/system/runtime/debug.reds) for Red/System code: `dump4`, `dump1` or `hex-dump` for various hex dumps. Moreover, it also enables extra verbose outputs, for parts of the runtime where `verbose` is set to a value > 0 (e.g. for [interpreter](https://github.com/red/red/blob/master/runtime/interpreter.reds#L88), or [parse](https://github.com/red/red/blob/master/runtime/parse.reds#L14)). You can search in the Red source code for `#if debug?` pattern to see all the features unlocked by debugging mode.}
    sent: "2016-10-26T03:41:54.944Z"
    editedAt: "2016-10-26T03:49:47.865Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5810228b0e25dbfa1161734b"
    text: {Hi, if I compile with the debug flag how can I make use of this?}
    sent: "2016-10-26T03:27:07.974Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "580ee9e0ab78365b205841c0"
    text: "@geekyi Good news. ;-)"
    sent: "2016-10-25T05:13:04.961Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580ee04aecbf06273a67ded3"
    text: "gitter now allows deleting msges!"
    sent: "2016-10-25T04:32:10.546Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580e5d7b472236f05c9e3cb1"
    text: "@TimeSlip Thanks. It’s far from finished."
    sent: "2016-10-24T19:14:03.992Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580e576becbf06273a660cac"
    text: "@rebolek Testing your gritter app. Pretty cool."
    sent: "2016-10-24T18:48:11.782Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "580e32a69aea834129ea7568"
    text: {`irx` I need to do the equivalent of ^/    curl_easy_setopt curl CURLOPT_CUSTOMREQUEST "PUT"^/^/I get an error, that it expects [pointer [integer!]] What do I have to do to make the string acceptable for curl_easy_setopt?}
    sent: "2016-10-24T16:11:18.874Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "580e20580f612c121dc22740"
    text: {`irx` For Linux, in line 1818 of simple-io.red, PUT is listed, but commented out, so it falls through to not implemented error.}
    sent: "2016-10-24T14:53:12.514Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "580e202a1ebe422f14ca9b39"
    text: {From the source it seems it’s not implemented on Windows, but should be on OSX.}
    sent: "2016-10-24T14:52:26.603Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580e1fd8472236f05c9e301f"
    text: {@matrixbot @DideC I have the commands there, but IIRC, I haven’t tested them. It also may depend on OS you are using.}
    sent: "2016-10-24T14:51:04.725Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580e1f87077a86f6383e249e"
    text: {`irx` That's what I tried, but doesn't work. I get a not implemented error.}
    sent: "2016-10-24T14:49:43.996Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "580e1a17b6fc192f56368af9"
    text: {@matrixbot In the gitter-api coded by Rebolek, there is some [command that use HTTP PUT](https://github.com/rebolek/gritter/blob/master/gitter-api.red#L104). Is is what you need ? }
    sent: "2016-10-24T14:26:31.553Z"
    editedAt: "2016-10-24T14:28:42.548Z"
    v: 3
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "580e1860015db84e6fc090ce"
    text: {`irx` No, support for post is coded, and put has branch that is marked no implemented.}
    sent: "2016-10-24T14:19:12.279Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "580e16b844b8d6cc0bd16f59"
    text: {irx , I think you can manually construct right now? Not sure how hard it would be..}
    sent: "2016-10-24T14:12:08.476Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580e15815c42d8522911db5e"
    text: {`irx` Is there any chance to get http PUT support into simple-io?}
    sent: "2016-10-24T14:06:57.991Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "580e1414422eeaf86240060e"
    text: {I’ve added [room for Gritter](https://gitter.im/red-gitter/Lobby) so we do not pollute this room.}
    sent: "2016-10-24T14:00:52.969Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580e122244b8d6cc0bd16e69"
    text: {I wasn’t able to get OAuth running yet, so you have to use this method now.}
    sent: "2016-10-24T13:52:34.799Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580e11ed44b8d6cc0bd16e64"
    text: "(upper right)"
    sent: "2016-10-24T13:51:41.568Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580e11dd2d2654c706c4d1c7"
    text: "@DideC go to http://api.gitter.im and login"
    sent: "2016-10-24T13:51:25.078Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580e112856121b9c7eb5a9b5"
    text: {Dumb mode enable: I don't get how to get a "Gitter token" ?}
    sent: "2016-10-24T13:48:24.507Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
)#(
    id: "580e0b8244b8d6cc0bd16d70"
    text: "Thanks for info, I’ll add it."
    sent: "2016-10-24T13:24:18.790Z"
    editedAt: "2016-10-24T13:24:23.003Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580e03fc4fe896192d52a162"
    text: "just fyi"
    sent: "2016-10-24T12:52:12.504Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580e03e22d2654c706c4cfe0"
    text: {(btw, doesn't work on red stable 0.6.1 from august due to missing `rejoin`)}
    sent: "2016-10-24T12:51:46.109Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580df49044b8d6cc0bd16a4f"
    text: {@dsgeyser as @geekyi said, I started playing with it around 3. October, but it’s not like I am working on it full-time :) Basic client took one or two days (gitter API plus basic GUI), most of the time I was working on the Rich Text viewer which is really great thing in itself. Plus some time for basic Markdown parser.}
    sent: "2016-10-24T11:46:24.111Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580df3f7015db84e6fbfe352"
    text: "+1 for the IO"
    sent: "2016-10-24T11:43:51.016Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580df3b72d2654c706c4ce1e"
    text: {I will fix the bug, so it will be much better. With async IO, it will be even better.}
    sent: "2016-10-24T11:42:47.185Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580df3992d2654c706c4ce17"
    text: {@geekyi Yes, IO is blocking and there is some bug in the client that forces constant updates. It should update only on new message, when you switch to different room, it should be better.}
    sent: "2016-10-24T11:42:17.238Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580dd26156121b9c7eb49208"
    text: {@dsgeyser at least Oct 3, when he was playing with the api}
    sent: "2016-10-24T09:20:33.428Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580dc7995af5969e7ef56fac"
    text: "From scratch"
    sent: "2016-10-24T08:34:33.446Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "580dc782fb138dce65f2acd0"
    text: {@rebolek How long did iy take you to get client to this stage?}
    sent: "2016-10-24T08:34:10.034Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "580d8d97015db84e6fbe366a"
    text: {Same here @geekyi, but it's early days for it, and only simple IO in place right now, so I think your guess is correct.}
    sent: "2016-10-24T04:27:03.235Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580d81e9b6fc192f5633f4e5"
    text: {@rebolek A bit laggy on my computer(especially noticeable if you drag windows). Maybe because of the continous network updates?}
    sent: "2016-10-24T03:37:13.156Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580d4014577f2c22790e5939"
    text: "Works here too @rebolek!"
    sent: "2016-10-23T22:56:20.639Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580d1ea75af5969e7ef33181"
    text: {@fergus4 nice to see it works not only on my computer ;)}
    sent: "2016-10-23T20:33:43.449Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580d1d7f278cc54c6f60ccfe"
    text: {I dont' like the gitter web client that much and I really dislike their app on android. Lets see what Red can do!!!}
    sent: "2016-10-23T20:28:47.565Z"
    v: 1
    author: "556af11b15522ed4b3e13239"
) #(
    id: "580d1d46015db84e6fbce6e3"
    text: "Very Cool Bo! Sending this with your client..."
    sent: "2016-10-23T20:27:50.658Z"
    v: 1
    author: "556af11b15522ed4b3e13239"
) #(
    id: "580d1c86e897cd3a71e061e0"
    text: {Here’s a screenshot: http://i.imgur.com/FXYQLtp.png}
    sent: "2016-10-23T20:24:38.806Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580d1be35636a5602eef8c9e"
    text: {Not much to play with, you can switch rooms, read and send messages. IMO the best part is rich text viewer with word wrapping and active links (on-over only right now).}
    sent: "2016-10-23T20:21:55.631Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580d0f9a278cc54c6f609422"
    text: "Can't wait to play with it Bolek!"
    sent: "2016-10-23T19:29:30.384Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580cfd4bb813566a4c6ea10d"
    text: {It’s a work in progress, so do not expect anything fancy.}
    sent: "2016-10-23T18:11:23.344Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580cfd2fb813566a4c6ea109"
    text: {You can take a look at my Gitter client at https://github.com/rebolek/gritter}
    sent: "2016-10-23T18:10:55.296Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580b8be9fb138dce65ebc449"
    text: {Yea, parse makes it easier but it is not necessary... parse is a dialect of red itself i believe}
    sent: "2016-10-22T15:55:21.112Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "580b27985af5969e7eecfc2d"
    text: {@maximvl The regular Red language can already handle all cases, `parse` is just sugar. ;-)}
    sent: "2016-10-22T08:47:20.529Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580a349e56121b9c7ea91978"
    text: {Copying large files in R2 was only hard if you needed to do other work while it was going on, though it wasn't a one-liner of course. But I'm sure Red will have a more advanced model, with an eye on how easy it should be to write new schemes. }
    sent: "2016-10-21T15:30:38.430Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580a1c63b827179842e248b8"
    text: {I'll be curious to see if there will be better (port) handling for very large files/streams of data in Red. Rebol had been designed to make simple things easy, but sometimes that simple thing was "i need to copy a 2GB log file" or a rich-media file, which then abruptly is no longer a simple thing.}
    sent: "2016-10-21T13:47:15.828Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5809e2ee482925776143fedd"
    text: {I think `parse` covers all cases for runtime macros}
    sent: "2016-10-21T09:42:06.551Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5809dd65759f6d2436d25bfa"
    text: {Runtime macros are trivial to implement in Rebol languages, and not that useful. We are talking about compile-time macros.}
    sent: "2016-10-21T09:18:29.152Z"
    editedAt: "2016-10-21T09:19:13.873Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5809dcb9759f6d2436d25965"
    text: {I am usually excited about any kind of Red news ;-)}
    sent: "2016-10-21T09:15:37.603Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5809dca480020cc608fe689f"
    text: {Will it be runtime macros, or compile time, preprocessor, both, all of them? Sorry for the lack of insight :-)}
    sent: "2016-10-21T09:15:16.126Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5809db64482925776143e1b9"
    text: "@pekr The one macro-proponents here expect. ;-)"
    sent: "2016-10-21T09:09:56.390Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5809c300b827179842e0e6f9"
    text: {@dockimbel - what kind of macros will we get? Re your tweet ... :-)}
    sent: "2016-10-21T07:25:52.512Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5809775d80020cc608fd2a09"
    text: {@dockimbel So Doc, how close are you all to an Android Vid?}
    sent: "2016-10-21T02:03:09.273Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5808f3f0b17b667961dcfc8e"
    text: ""
    sent: "2016-10-20T16:42:24.478Z"
    editedAt: "2016-10-20T16:46:13.979Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5808eff72189c68f42057eeb"
    text: "@qtxie cool, thanks!"
    sent: "2016-10-20T16:25:27.094Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5808e86e759f6d2436cedd16"
    text: ""
    sent: "2016-10-20T15:53:18.460Z"
    editedAt: "2016-10-20T15:53:27.803Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5808b2b0714642af22cc64eb"
    text: {@dander I have added the commands for running/compiling the current file back. :smile: }
    sent: "2016-10-20T12:04:00.441Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58072b548d2babbd08874979"
    text: {I actually meant the auto-complete and usage tooltips will be very helpful (for me included). I think I've mostly figured out the tasks thing, but now it's time for bed :smile: }
    sent: "2016-10-19T08:14:12.190Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "580728305636a5602eef2319"
    text: "Yes. I agree. We'll add it back soon. :smile: "
    sent: "2016-10-19T08:00:48.529Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5807278eb827179842d623a8"
    text: {Okay, thanks! I think this will be really helpful to learners.}
    sent: "2016-10-19T07:58:06.759Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5807268ae897cd3a71dffa7f"
    text: {Nope. I temporary remove it as it's trival to do with `Task`(and more flexible). We'll add features such as interpret red script in later versions.}
    sent: "2016-10-19T07:53:46.056Z"
    editedAt: "2016-10-19T07:58:05.586Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "580724c9482925776138b42d"
    text: {@qtxie this is terrific! Quick question though. It used to have a set of commands for running/compiling the current file. Do those still exist? I'm not seeing them.}
    sent: "2016-10-19T07:46:17.272Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5807074db827179842d59948"
    text: {Needs latest red binary to make autocompletion work.}
    sent: "2016-10-19T05:40:29.092Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5807070680020cc608f31460"
    text: {Just upgraded vscode extension for red: ^/https://marketplace.visualstudio.com/items?itemName=red-auto.red}
    sent: "2016-10-19T05:39:18.039Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5806dafe8d2babbd0886364b"
    text: {@Arie-vw Thank you for your work. I have relied on your site a lot with my first R2 to Red conversion.}
    sent: "2016-10-19T02:31:26.840Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5806a59b759f6d2436c545c7"
    text: {What do you mean by "encoding"? e.g. BOM or file type from magic numbers.}
    sent: "2016-10-18T22:43:39.340Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58065e4a759f6d2436c40080"
    text: {is there anyway to detect the encoding of a document automatically in red or rebol ? }
    sent: "2016-10-18T17:39:22.028Z"
    v: 1
    author: "556e664e15522ed4b3e15324"
) #(
    id: "58065a2036d6422636827662"
    text: {+10 on having predefined parse rules for common needs. }
    sent: "2016-10-18T17:21:36.728Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5806523cb813566a4c6e29c3"
    text: {But it was just an experiment done in five minutes. }
    sent: "2016-10-18T16:47:56.043Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58065202714642af22cc31dc"
    text: {I don’t know. Having predefined `dot` may be useful in `parse`. I should’ve checked if that word isn’t already taken :)}
    sent: "2016-10-18T16:46:58.304Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580650dab17b667961d1de13"
    text: {Probably safe to say "don't do that" for now, for that small set of chars.}
    sent: "2016-10-18T16:42:02.863Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5806509080020cc608f04f06"
    text: "In %scalars.red"
    sent: "2016-10-18T16:40:48.230Z"
    editedAt: "2016-10-18T16:40:56.167Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58064fdb759f6d2436c3bcb9"
    text: "It is a global. Hmmm."
    sent: "2016-10-18T16:37:47.902Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58064fc8759f6d2436c3bc81"
    text: "Or maybe it's a global `dot` somewhere else."
    sent: "2016-10-18T16:37:28.212Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58064faa80020cc608f04a30"
    text: {Shouldn't `dot` be protected in the lexer context though?}
    sent: "2016-10-18T16:36:58.140Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58064ead80020cc608f04617"
    text: {@greggirwin Oh, so it's a collision with the predefined `dot`... I'm not sure we can do anything about it for now in such cases (same as redefining `print` or other core words in the console). We need to wait for modules for a clean solution to that.}
    sent: "2016-10-18T16:32:45.979Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58064da836d64226368235da"
    text: {@dockimbel  https://github.com/red/red/issues/2277}
    sent: "2016-10-18T16:28:24.427Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580648002189c68f42fa1c8b"
    text: {In archiving your version, @endo64 , I found another old one, very similar, called `with-series` that I probably did around the same time as `walk`.  Not worth posting since it's almost the same.}
    sent: "2016-10-18T16:04:16.605Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5806471b80020cc608f0226a"
    text: "@endo64 Thanks!^/^/@dockimbel Will do."
    sent: "2016-10-18T16:00:27.506Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5805e4e34829257761336e7f"
    text: "@dockimbel  Thanks!"
    sent: "2016-10-18T09:01:23.787Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5805e23d4829257761336567"
    text: {@mikeparr From the user perspective, errors and exceptions are distinct concepts (errors are unwanted, exceptions are intended). From implementation perspective, errors are just a sub-category of exceptions.}
    sent: "2016-10-18T08:50:05.633Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5805db1c80020cc608ee3bff"
    text: {@rebolek  -The red-lang site talks about exception-handling, but the word used have names such as error!  cause-error, etc.  Maybe it is for Rebol compatibility?  Its not a big point, just that I am writing about it, and wish to use the correct  terms.}
    sent: "2016-10-18T08:19:40.534Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5805d2874829257761331fe3"
    text: {@greggirwin Please fill a ticket for that odd behavior.}
    sent: "2016-10-18T07:43:03.614Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5805cc5e2189c68f42f7d118"
    text: {@greggirwin `walk` function is really nice, I've made some small changes on it, added `take` and `paren!` support,^/^/```^/walk: func [^/^-series [series!]^/^-cmds [any-block!]^/^-/local result cmd^/][^/^-rules: [^/^-^-any [^/^-^-^-  ['skip    set val integer!]  (series: skip series val)^/^-^-^-| ['insert  set val any-type!] (series: insert series val)^/^-^-^-| ['remove  set val integer!]  (series: remove/part series val)^/^-^-^-| ['reverse set val integer!]  (series: skip reverse/part series val val)^/^-^-^-| [set cmd ['copy | 'take] set val integer!] (^/^-^-^-^-append/only result do reduce [pick [copy/part take/part] cmd = 'copy series val]^/^-^-^-^-series: skip series val^/^-^-^-)^/^-^-^-| [set cmd paren! (do cmd)]^/^-^-]^/^-]^/^-result: copy []^/^-parse cmds rules^/^-either empty? result [head series] [reduce [head series result]]^/]^/^/red>> walk [1 2 3 4] [take 1 (print "ok") copy 1]^/ok^/== [[2 3 4] [[1] [3]]]^/```}
    sent: "2016-10-18T07:16:46.243Z"
    editedAt: "2016-10-18T07:17:01.043Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5805450db827179842cea28b"
    text: {However, I'm getting some unexpected errors in the console after running it.^/```^/red>> 0:00:00.089000001 - 0:00:00.007000001^/*** Script Error: .089000001 has no value^/*** Where: -^/red>> 0.089000001 - 0.007000001^/*** Syntax Error: invalid integer! at "0.089000001 - 0.007000001"^/*** Where: do^/red>> ? -^/^/USAGE:^/    value1 - value2*** Script Error: PARSE - matching by datatype not supported for any-string! input^/*** Where: parse^/```}
    sent: "2016-10-17T21:39:25.230Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5805441a759f6d2436bf9590"
    text: {Using @rebolek's example above, the overhead of his `dot`func for 10K calls is ~0:00:00.082. I can live with that.}
    sent: "2016-10-17T21:35:22.364Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580541b98d2babbd087fd6cc"
    text: {@7hi4g0 , interesting idea. Might be confusing if used with `/some`. That's a good question for @dockimbel.}
    sent: "2016-10-17T21:25:13.450Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58053e60b827179842ce8afe"
    text: {>Lispers do not see any real distinctions between compiling, interpreting, reading^/^/nonsense, of course they do}
    sent: "2016-10-17T21:10:56.849Z"
    editedAt: "2016-10-17T21:11:01.533Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580536cc714642af22cc1a42"
    text: {@rebolek `dot` looks like you have moved back to forth :p}
    sent: "2016-10-17T20:38:36.556Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58052e62b827179842ce40b5"
    text: {@rebolek fearing that we are about to talk too much about Lisp, I will say that we have tread this territory once before, we should discontinue our conversation or move it to the Lisp channel.  Lispers do not see any real distinctions between compiling, interpreting, reading, etc.  See previous comments in the Lisp channel.}
    sent: "2016-10-17T20:02:42.658Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58052b6cb813566a4c6e1104"
    text: "That’s a good idea."
    sent: "2016-10-17T19:50:04.192Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580529e52189c68f42f5a5fa"
    text: {@greggirwin About that `default` function. Since it's very similar to `set`, it could be added to `set` as a refinement.^/Like in `set/default [a b c] [1 2 3]`.}
    sent: "2016-10-17T19:43:33.496Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "580525f1714642af22cc18f3"
    text: "Perf hit - you mean when compiled, do you?"
    sent: "2016-10-17T19:26:41.891Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580524a5b827179842ce13aa"
    text: {If you don't want a perf hit they are needed, if all you care about is semantic equivalence then it is fine as you have constructed it.}
    sent: "2016-10-17T19:21:09.930Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "580523f4b813566a4c6e105a"
    text: {@JacobGood1 I used `dot` because it is often referred as dot syntax, but any other name is as good as this one. Anyway, as you see, no macros needed ;)}
    sent: "2016-10-17T19:18:12.983Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5805217db827179842ce04de"
    text: {dot is one of the reasons I argued for macros in previous discussions}
    sent: "2016-10-17T19:07:41.039Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "580520dc2189c68f42f57f32"
    text: {essentially allowing one to read from left to right instead of right to left or inside out}
    sent: "2016-10-17T19:05:00.585Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "580520bab827179842ce018d"
    text: {dot is referred to as the arrow macro in lisp, it is used very often}
    sent: "2016-10-17T19:04:26.748Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58051cdf2189c68f42f56c14"
    text: {Congratulations to the red-by-example team on their 1 year anniversary!}
    sent: "2016-10-17T18:47:59.166Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58050d97714642af22cc1640"
    text: "@mikeparr I guess so. Do you have any example?"
    sent: "2016-10-17T17:42:47.345Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58050bb64829257761306b5e"
    text: {In Red are the terms  'error' and 'exception' synonymous?}
    sent: "2016-10-17T17:34:46.172Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "580503e4b827179842cd7262"
    text: "*Nice.*"
    sent: "2016-10-17T17:01:24.535Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5805023fe897cd3a71dfce43"
    text: {```^/red>> b: [1 2 3 4 5]^/== [1 2 3 4 5]^/red>> dot b [skip [3] remove append [6]]^/== [1 2 3 5 6]^/```}
    sent: "2016-10-17T16:54:22.959Z"
    editedAt: "2016-10-17T16:54:38.556Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580501f9714642af22cc14df"
    text: {Version with arguments (but not refinements yet):^/```^/dot: function [^/^-value^/^-actions^/] [^/^-action: none^/^-args: none^/^-out: reduce [value]^/^-word-rule: [set action word! (insert out action)]^/^-arg-rule: [set action word! set args block! (insert out action append out args)]^/^-parse actions [^/^-^-some [arg-rule | word-rule]^/^-]^/^-do out^/]^/```}
    sent: "2016-10-17T16:53:13.257Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580501dfe897cd3a71dfce39"
    text: {Exactly. I'm not going to use it myself, but others may find it useful.}
    sent: "2016-10-17T16:52:47.183Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58050129b827179842cd58ee"
    text: {I wrote it many years ago, but only used it a couple times. It may be useful in dialects targeted at users who aren't programmers that use Red regularly.}
    sent: "2016-10-17T16:49:45.342Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580500d180020cc608eb4569"
    text: {```^/    ;!! PROTOTYPE IDEA!^/    ; series "walker" dialect - perform named ops on series at the^/    ; "current" location.^/    ; skip 4 remove 2 copy 6 skip 3 reverse 2 copy 3 insert <value>^/    walk: func [^/        series [series!]^/        cmds [any-block!]^/        /local result^/    ][^/        rules: [^/            any [^/                  ['skip    set val integer!]  (series: skip series val)^/                | ['insert  set val any-type!] (series: insert series val)^/                | ['remove  set val integer!]  (series: remove/part series val)^/                ; if REVERSE behavior changes, this will need to change too.^/                ;old REVERSE behavior | ['reverse set val integer!]  (series: reverse/part series val)^/                | ['reverse set val integer!]  (series: skip reverse/part series val val)^/                | ['copy set val integer!] (^/                    append/only result copy/part series val^/                    series: skip series val^/                )^/            ]^/        ]^/        result: copy []^/        parse cmds rules^/        either empty? result [head series] [reduce [head series result]]^/    ]^/    b: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20]^/    walk b [reverse 4 skip 10 remove 2 reverse 3 insert [x y z]]^/```}
    sent: "2016-10-17T16:48:17.700Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5805005be897cd3a71dfce10"
    text: "I just wonder if it’s useful."
    sent: "2016-10-17T16:46:19.001Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58050047b813566a4c6e0ccb"
    text: "Yes, it’s just an experiment."
    sent: "2016-10-17T16:45:59.641Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58050028759f6d2436be6922"
    text: {I've done something similar Bolek, just as an experiment.}
    sent: "2016-10-17T16:45:28.188Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5804fe1db813566a4c6e0c98"
    text: {This is actually very simple code as there is no support for arguments, but adding them wouldn’t be that hard.}
    sent: "2016-10-17T16:36:45.817Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5804fdb1b813566a4c6e0c7c"
    text: {Some people may find the stack nature of Red unnatural, especially when coming from JS, where you can do `something.doThis().doThat().whatever().somethingElse()` or what is the syntax, but in Red, you have to write things in reverse, like `something-else whatever do-that do-this something`. ^/So I wonder - would people be interested in something like:^/```^/red>> b: [1 2 3 4 5]^/== [1 2 3 4 5]^/red>> dot b [tail back remove head]^/== [1 2 3 4]^/```^/as an alternative to^/```^/red>> b: [1 2 3 4 5]^/== [1 2 3 4 5]^/red>> head remove back tail b^/== [1 2 3 4]^/```^/?}
    sent: "2016-10-17T16:34:57.765Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5804fd652189c68f42f4cd6f"
    text: "Thanks for the input @endo64  and @7hi4g0 . "
    sent: "2016-10-17T16:33:41.297Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5804f0a136d64226367caec0"
    text: {@BlackATTR_twitter We'll probably publish some specs for discussion before implementing it.}
    sent: "2016-10-17T15:39:13.418Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804ea8880020cc608eacba6"
    text: {@dockimbel Would like to be part of that discussion, when the right time arrives.}
    sent: "2016-10-17T15:13:12.459Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5804dd3f48292577612f5e69"
    text: "ok, I see. "
    sent: "2016-10-17T14:16:31.453Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5804dd2a5636a5602eeeedf1"
    text: "@Zamlox check the red/help channel"
    sent: "2016-10-17T14:16:10.074Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804dd01759f6d2436bd9938"
    text: {@Zamlox I wanted not just skip, but proceed only if the type is `word!`, by order I mean that `any [a | b | c]` does not work for cases when `c` can only go after `b` and `b` only after `a`}
    sent: "2016-10-17T14:15:29.300Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804dc411cc4cda4565ade0a"
    text: {@maximvl yes, it does skip. ^/> I want to have an order and parse some words until a specific one,^/^/What do you mean by ```order``` ?}
    sent: "2016-10-17T14:12:17.319Z"
    editedAt: "2016-10-17T14:13:53.213Z"
    v: 5
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5804da29614116a2568f8831"
    text: {@BlackATTR_twitter Indeed, we plan for better support of dialects building using extensions of Parse, or maybe another dialect on top of it, we'll see.}
    sent: "2016-10-17T14:03:21.882Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804d7df7972c5734212db29"
    text: {Parse is already great, but any additions to improve robustness/clarity of Parse for supporting dialects would be welcome!}
    sent: "2016-10-17T13:53:35.521Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
)#(
    id: "5804bdcd1cc4cda4565a5863"
    text: {Though, conditional loops may be an interesting addition to simplify Parse.}
    sent: "2016-10-17T12:02:21.897Z"
    editedAt: "2016-10-17T12:10:58.657Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804bb7130abd799718fd363"
    text: {@dockimbel hm, very interesting, let me try it, thanks!}
    sent: "2016-10-17T11:52:17.005Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804bb2b1cc4cda4565a4c60"
    text: {@maximvl It does if you write the <rest of rules> properly to enforce it. For example:^/```lisp^/red>> parse [a test] [any ['test break | word!]]^/== true^/red>> parse [a test b] [any ['test break | word!]]^/== false^/```}
    sent: "2016-10-17T11:51:07.172Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804bac8b68c1ca566c2691f"
    text: {@dockimbel I was thinking about second one, but it doesn't force the order}
    sent: "2016-10-17T11:49:28.187Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804ba35891a530163188d17"
    text: {@maximvl You can do it using a more verbose rule:^/```lisp^/parse [a test] [any [ahead 'test break | word!] 'test]^/```^/Though, a more idiomatic way would be to put your rules following 'test nested after matching it (you would need to be more careful with the termination rule then):^/```lisp^/parse [a test] [any ['test <rest of rules> | word!]]^/```}
    sent: "2016-10-17T11:47:01.124Z"
    editedAt: "2016-10-17T11:49:21.004Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804ba0b7972c573421255de"
    text: {@Zamlox but doesn't thru just skip everything until it finds match?}
    sent: "2016-10-17T11:46:19.645Z"
    editedAt: "2016-10-17T11:46:23.814Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804b84a891a530163188458"
    text: {Today we celebrate the first anniversary of the Red-By-Example website. We are still adding lots of documentation there. Any help or comments appreciated!}
    sent: "2016-10-17T11:38:50.432Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5804b361614116a2568edbec"
    text: "@maximvl you can use ```to``` or ```thru```"
    sent: "2016-10-17T11:17:53.447Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5804b2fc30abd799718faefc"
    text: {```^/parse [a b c d test] [thru 'test (print "matched 'test")]^/```^/}
    sent: "2016-10-17T11:16:12.104Z"
    editedAt: "2016-10-17T11:16:34.850Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5804aaaa7972c57342121e5c"
    text: "and maybe I shouldn't )"
    sent: "2016-10-17T10:40:42.370Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804aa9b891a5301631847ee"
    text: {I'm thinking in the same way as in regular expressions, like `[^^t]*t ...`}
    sent: "2016-10-17T10:40:27.518Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804aa3d78bd0d0363ce1d37"
    text: {something like (this doesn't work, but) `[any [not 'test word!] 'test any next-rule]`}
    sent: "2016-10-17T10:38:53.690Z"
    editedAt: "2016-10-17T10:39:19.653Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804aa2730abd799718f8f4f"
    text: {I understand now that `any!` is greedy, but there should be a way to stop it}
    sent: "2016-10-17T10:38:31.646Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804a9f97972c57342121be8"
    text: {@geekyi nope, I want to have an order and parse some words until a specific one, and then use another rule}
    sent: "2016-10-17T10:37:45.822Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804a954c5e30d676437b0be"
    text: {@maximvl depends on what you are trying to accomplish,`to end` works for you? }
    sent: "2016-10-17T10:35:00.883Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804a91e671ea7ae6c467bd8"
    text: "will test later myself"
    sent: "2016-10-17T10:34:06.367Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804a90cfa6b78846e260ae5"
    text: {@endo64 that's what I meant by the issue with the arguments, does view work for you tho?}
    sent: "2016-10-17T10:33:48.842Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804a6918eaaaea366a23606"
    text: {it feels like there is a common pattern which I'm not aware about ;)}
    sent: "2016-10-17T10:23:13.599Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804a64c614116a2568ea865"
    text: {@dockimbel hm, how do I prevent `any` form consuming everything?}
    sent: "2016-10-17T10:22:04.452Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804a58f30abd799718f7ef7"
    text: {@maximvl `any word!` consumes all the words in the input block, so when `'test` is reached, the input is at tail already, resulting in a mismatch. `any number!` consumes all the numbers, so `'test`will match the remaining part of the input.}
    sent: "2016-10-17T10:18:55.832Z"
    editedAt: "2016-10-17T10:19:39.589Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804a485b68c1ca566c2179d"
    text: {this one works too^/```^/print parse [1 test] [any number! 'test]^/```}
    sent: "2016-10-17T10:14:29.628Z"
    editedAt: "2016-10-17T10:14:33.547Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804a2f1614116a2568e9bcb"
    text: {why does the first one work and second one doesn't?}
    sent: "2016-10-17T10:07:45.278Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804a2e61cc4cda45659ea8c"
    text: {```^/print parse [a b] [any word!] ; => true^/print parse [a test] [any word! 'test] ; => false^/```^/}
    sent: "2016-10-17T10:07:34.663Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804a2d71cc4cda45659ea69"
    text: "hey guys"
    sent: "2016-10-17T10:07:19.355Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58049db41cc4cda45659d445"
    text: {@geekyi after building `red.exe`, try `red.exe -r` this solves the issue above.}
    sent: "2016-10-17T09:45:24.100Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "580474ea891a530163178456"
    text: {The word-value pairs seems like a better option to me. But given that `set` is already part of the language it could be better to maintain consistency.}
    sent: "2016-10-17T06:51:22.818Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "580472c4891a530163177dac"
    text: {I prefer `set` style args, we usually set default values for a few words not many of them at the same time.}
    sent: "2016-10-17T06:42:12.650Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58045d2d30abd799718e77c9"
    text: {With a `set` model, having a large number of defaults won't be as clear, though you could still break them out into separate `default` calls. The word-value pairs won't *force* you to split them over lines, but it reads much more like documentation that way, and eliminates the redundant `default` word on each line. For single values, the `set` approach seems clearer to me. }
    sent: "2016-10-17T05:10:05.362Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58045baa891a530163173822"
    text: {:point_up: [October 15, 2016 6:17 PM](https://gitter.im/red/red?at=5802c712614116a25688f573) @7hi4g0 (and anyone else), should a `default` func take args that match `set`'s interface, as I did above, or should it be word-value pairs in a single input block? e.g. ^/```^/default [a 1]^/default [^/^-a 2^/^-b 3^/^-c 4^/^-[d e] -1^/]^/```}
    sent: "2016-10-17T05:03:38.926Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58041a8994b459a576dceb7f"
    text: {(with red/red@076afee4ef2af2919a8bb048175cc4b59a8c43cf  reverted, on top of latest master)}
    sent: "2016-10-17T00:25:45.225Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58041a07c5e30d676437a6ca"
    text: {```^/cmd>vid.exe^/^/*** Runtime Error 1: access violation^/*** at: 5E2609AFh^/```}
    sent: "2016-10-17T00:23:35.471Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804198c671ea7ae6c4673cf"
    text: {Actually the commit is red/red@076afee4ef2af2919a8bb048175cc4b59a8c43cf , caused by introduction of `clear` command, for the case when there are no args to the compiler. Wasn't able to find out the cause of the other problem tho}
    sent: "2016-10-17T00:21:32.456Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58040aa6c5e30d676437a63f"
    text: {Found the problematic commit https://github.com/red/red/commit/44c24d1f401f249c8ee171a13b4509dd4e462465. Looks like rebol is choking on `clear`?}
    sent: "2016-10-16T23:17:58.920Z"
    editedAt: "2016-10-16T23:21:12.904Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58040a35c5e30d676437a633"
    text: {~~ok, running the tests are taking too long (or they are stuck), but I suspect they won't fail just like on appveyor  :point_up: [October 17, 2016 2:29 AM](https://gitter.im/red/red?at=5803f11dfa6b78846e260156)~~}
    sent: "2016-10-16T23:16:05.418Z"
    editedAt: "2016-10-16T23:17:37.200Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "580402d3671ea7ae6c4672e0"
    text: {still, `view` doesn't work, maybe a problem with that.. from git I can see there has been a lot of refactoring recently in preparation for mac. Might be the cause}
    sent: "2016-10-16T22:44:35.578Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58040206671ea7ae6c4672de"
    text: {`do/args %red.r "-r %environment/console/console.red"`}
    sent: "2016-10-16T22:41:10.132Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580401d4671ea7ae6c4672db"
    text: "@geekyi well, that worked"
    sent: "2016-10-16T22:40:20.230Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580401a5614116a2568caf6e"
    text: "ok tomorrow I'll test as well."
    sent: "2016-10-16T22:39:33.065Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5804016f671ea7ae6c4672d6"
    text: {@endo64 not sure if tha will solve the problem, I'm using a fresh libred build from latest commit, but will try}
    sent: "2016-10-16T22:38:39.326Z"
    editedAt: "2016-10-16T22:38:46.916Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "580401387972c57342101bd1"
    text: {there is an option to build the libred instead of using the last build, I didn't try with that option.}
    sent: "2016-10-16T22:37:44.421Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "580400e8614116a2568cad84"
    text: "with -r option. "
    sent: "2016-10-16T22:36:24.807Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "580400dafa6b78846e260207"
    text: "@endo64 what do you mean?"
    sent: "2016-10-16T22:36:10.033Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580400c7b68c1ca566c00f7f"
    text: "hmm may be we should rebuild with libred? "
    sent: "2016-10-16T22:35:51.567Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "580400a28eaaaea366a03a70"
    text: {But if you can build demos probably one of last commits cause problems building of console.}
    sent: "2016-10-16T22:35:14.577Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5804009cfa6b78846e260205"
    text: {*but the build time is damn fast now with libred!* :smile: }
    sent: "2016-10-16T22:35:08.322Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58040064fa6b78846e260203"
    text: {Some of the demos in %red/tests do not run tho (vid.red, view-test.red)}
    sent: "2016-10-16T22:34:12.224Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580400587972c5734210193d"
    text: "Sorry it's too late here. I'll go to sleep now."
    sent: "2016-10-16T22:34:00.908Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5804000194b459a576dcea97"
    text: {@endo64 I can build a lot of the demos (hello.red and demo.red)}
    sent: "2016-10-16T22:32:33.843Z"
    editedAt: "2016-10-16T22:33:10.311Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5803ffdb891a530163164611"
    text: "Same error here."
    sent: "2016-10-16T22:31:55.468Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5803f272fa6b78846e260165"
    text: {Yep, the website build gives me the same error :point_up: [October 17, 2016 1:33 AM](https://gitter.im/red/red?at=5803e415614116a2568c482d)}
    sent: "2016-10-16T21:34:42.152Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "5803f210c5e30d676437a56e"
    text: {I can see windows succeeds build on [appveyor](https://ci.appveyor.com/project/red/red/branch/master) for the commit you mention  @endo64, and there is a build on the website.. hmm}
    sent: "2016-10-16T21:33:04.903Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5803f15194b459a576dce9d5"
    text: {I dont' really know about travis, but it looks like travis builds only for linux and OSX?}
    sent: "2016-10-16T21:29:53.085Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5803f11dfa6b78846e260156"
    text: "Were you able to trace failure down to that? "
    sent: "2016-10-16T21:29:01.788Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5803ef80c5e30d676437a547"
    text: {@endo64 looks like it was failing on travis long before that? Can you see the activity side bar to the right ->}
    sent: "2016-10-16T21:22:08.119Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5803e596614116a2568c4d24"
    text: {It looks `FEAT: use manifest file in DLL on Windows` commit fails on Travis CI.}
    sent: "2016-10-16T20:39:50.508Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5803e415614116a2568c482d"
    text: {I just pulled the latest master branch, build the red.exe on Win10, but it gives error during compilation,^/^/for GUI console:^/```^/*** Driver Internal Error: Script Error : Out of range or past end^/*** Where: parse-options^/*** Near:  [if cmd: select [^/"clear" do-clear^/] first]^/```^/^/for CLI:^/```^/C:\Users\endo\Documents\Red\red\build\bin>red --cli^/Compiling compression library...^/Compiling Red console...^/*** Loading Error: file access error: %comdlgs.reds^/*** in file: %/C/Users/endo/Documents/Red/red/build/bin/modules/view/backends/windows/draw.reds^/*** at line: 46^/```}
    sent: "2016-10-16T20:33:25.731Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "580319aa457ae29b71e337fe"
    text: {@7hi4g0, for blocks to work like parens, taking their place, they have to auto-evaluate, correct? That is, it would have to implicitly do this:^/```^/red>> do [blk: do [append do [copy []] do [1 + 1]]]^/== [2]^/```^/It's a good thought experiment, and easy (if tedious) to play with. Write some code, and everywhere you have a block, put `do` in front of it. For example, instead of ^/```^/red>> fn: func [blk [block!]][print mold blk]^/== func [blk [block!]][print mold blk]^/red>> fn [a b c]^/[a b c]^/```^/You would have^/```^/== func [blk [block!]][print mold do blk]^/red>> fn [a b c]^/*** Script Error: a has no value^/*** Where: do^/```}
    sent: "2016-10-16T06:09:46.873Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5802d505b68c1ca566bc8cb3"
    text: {@greggirwin Thanks for completing your explanation about default args.}
    sent: "2016-10-16T01:16:53.038Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5802d04cfa6b78846e25f64c"
    text: {@rebolek  :point_up: [October 16, 2016 1:04 AM](https://gitter.im/red/red?at=58028bd094b459a576dcdb74) that's an interesting read about dependent types}
    sent: "2016-10-16T00:56:44.187Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5802ca5e30abd799718a0c9d"
    text: {@qtxie I'll continue the discussion on GTK implementation and wheter to use CSS or not to the `red/gui-branch` room}
    sent: "2016-10-16T00:31:26.833Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802c81d30abd799718a0897"
    text: {On the C macros, I'll have a look at them and if I consider it too much effort I'll come here asking for help :wink: }
    sent: "2016-10-16T00:21:49.273Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802c7e5457ae29b71e27041"
    text: {About the block-LIsp, is not possible with raw Red then? That's ok. It was more of a curiosity.}
    sent: "2016-10-16T00:20:53.837Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802c75e614116a25688f5f6"
    text: {@greggirwin Wow! Really liked this default function. I would propose for it to become part of the core language. :+1: }
    sent: "2016-10-16T00:18:38.854Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802c712614116a25688f573"
    text: {@qtxie I'm not sure if using pango directly will work. From what I understood reading the code, the pango context is handled by GTK and anything directly set may be overwritten.^/I will check these codes you send me.}
    sent: "2016-10-16T00:17:22.736Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802c0451cc4cda456545c4f"
    text: {Also for font handling, we should use pango as we need to query the information of the font. (e.g. font height, width)}
    sent: "2016-10-15T23:48:21.444Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5802bf8f457ae29b71e25b5f"
    text: {@7hi4g0 Maybe we can just define what we need. ^/I search though the swt source code, find that actually just a few places use CSS styling. (it uses CSS since GTK 3.16) ^/So I think we can use CSS for now, if it's really slow, then we can change it later. [Check here](https://git.eclipse.org/c/platform/eclipse.platform.swt.git/tree/bundles/org.eclipse.swt/Eclipse%20SWT/gtk/org/eclipse/swt/widgets/Button.java#n921) and [here](https://git.eclipse.org/c/platform/eclipse.platform.swt.git/tree/bundles/org.eclipse.swt/Eclipse%20SWT/gtk/org/eclipse/swt/widgets/Button.java#n696) for how SWT handle the styling.}
    sent: "2016-10-15T23:45:19.071Z"
    editedAt: "2016-10-15T23:50:54.145Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5802be0430abd7997189f253"
    text: "@rebolek , your `afunc` example is *really* cool."
    sent: "2016-10-15T23:38:44.698Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5802bda230abd7997189f174"
    text: {This is just a named approach to Bolek's `unless` example, expanded to support multiple words, as @rcqls noted that can become a bit of work.}
    sent: "2016-10-15T23:37:06.688Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5802bd508eaaaea3669c7ce7"
    text: {On the subject of default values:^/```^/default: function [^/^-"Sets the value(s) one or more words refer to, if the word is none or unset"^/^-'word "Word, or block of words, to set."^/^-value "Value, or block of values, to assign to words."^/][^/^-def: func [w "Word" v "Value"][^/^-^-; We're setting one word, so don't need to use set/only.^/^-^-if any [not value? :w  none? get w][set w :v]^/^-^-get w^/^-]^/^-; CASE is used, rather than COMPOSE, to avoid the block allocation.^/^-case [^/^-^-word?  :word [def word :value]^/^-^-block? :word [^/^-^-^-collect [^/^-^-^-^-repeat i length? word [^/^-^-^-^-^-keep/only def word/:i either block? :value [value/:i][:value]^/^-^-^-^-]^/^-^-^-]^/^-^-]^/^-]^/]^/default a 1^/default [a b c] [2 3 4]^/default f :append^/default [g h i j k l m] [1 2 [3] 4 5 6 7]^/default [g h i j k l m n o] [. . . . . . . .]^/```^/The core, if you only want to default single values is the inner `def` func. }
    sent: "2016-10-15T23:35:44.733Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5802bb4bb68c1ca566bc510a"
    text: {@7hi4g0, WRT writing everything in blocks, remember that evaluation, and controlling it, is an important concept in Red. If you implicitly evaluate every block, you lose that control. Doesn't mean you can write something to do it. e.g. ^/```^/;!! Not a real Lisp-in-blocks system !! :^^)^/block-lisp: func [code [block!]][^/^-forall code [^/^-^-either block? code/1 [block-lisp reduce code/1][do/next code 'code]^/^-]^/]^/block-lisp [print 1 + 1]^/block-lisp [print 1 + 1 [blk: append copy [] 'xxx]]^/```}
    sent: "2016-10-15T23:27:07.792Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5802b59d457ae29b71e2447a"
    text: {@rcqls, default arg values and keyword args are two different things, though often conflated I suppose. We can address default values much more easily by extending the func spec dialect.}
    sent: "2016-10-15T23:02:53.428Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5802b51330abd7997189de4f"
    text: {:point_up: [October 15, 2016 10:56 AM](https://gitter.im/red/red?at=58025fa578bd0d0363c71ae3) Depending on the source, we might be able to generate the code without too much effort. Or it may be a lot of effort. If you want to pursue that, we could team up.}
    sent: "2016-10-15T23:00:35.735Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5802b495891a53016312ad1b"
    text: {@rcqls, yes, related to named args. Though there's another approach I'll post about sometime soon. Basically, in some JS circles there is a trend in using objects as single "container" args to funcs. Not an entirely new idea, and comes with its own problems. My son started using it some places and then wrote a little module to vet objects, ensuring contents, types, etc. I thought I'd port it to Red, but am putting a twist on it compared to his.}
    sent: "2016-10-15T22:58:29.629Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5802a48c457ae29b71e20f75"
    text: "@rebolek and thanks for the article :+1: "
    sent: "2016-10-15T21:50:04.219Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58029ee530abd79971899fef"
    text: {@rebolek I agree it's strange. But it's a cool thing.}
    sent: "2016-10-15T21:25:57.537Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58029b54c5e30d67643796b1"
    text: {This is IMO problematic. Local values shouldn’t be accessible from outside.}
    sent: "2016-10-15T21:10:44.143Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58029ad8c5e30d6764379693"
    text: {Also note that currently, `/local` is refinement as any other:^/```^/red>> f: func [/local word][word]^/== func [/local word][word]^/red>> f^/== none^/red>> f/local 3^/== 3^/```}
    sent: "2016-10-15T21:08:40.147Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58028be2671ea7ae6c4663cb"
    text: {It was written for Rebol, but it’s basically the same in Red.}
    sent: "2016-10-15T20:04:50.438Z"
    editedAt: "2016-10-15T20:12:29.911Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58028bd094b459a576dcdb74"
    text: {@7hi4g0 Here’s the description how to make your own function generator. You can addapt it to add default values for refinement args. http://rebol.qyz.cz/dependent-types.html}
    sent: "2016-10-15T20:04:32.265Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5802709e671ea7ae6c466234"
    text: {Fortunately I have. I will publish it later today, time for dinner.}
    sent: "2016-10-15T18:08:30.585Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58026fc794b459a576dcd937"
    text: {@7hi4g0 Ok, so that website does not exist anymore. That’s the joy of using third-party solutions... I will try to find the source, I hope I have some backup. }
    sent: "2016-10-15T18:04:55.832Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58026dc594b459a576dcd922"
    text: {@7hi4g0 If only I could remember the name of the website where I published it... I let you know, when I find it.}
    sent: "2016-10-15T17:56:21.287Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58026bd278bd0d0363c74d0f"
    text: "@rcqls I see what you mean."
    sent: "2016-10-15T17:48:02.374Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58026ba08eaaaea3669b55e1"
    text: {@7hi4g0 I still miss the fact to call the argument in its named form like objective-C (message concept) and like in the example given by @dockimbel . It is much more readable when you have ten parameters with default values.}
    sent: "2016-10-15T17:47:12.109Z"
    editedAt: "2016-10-15T17:50:56.122Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58026b941cc4cda456532829"
    text: {@rebolek If you find it I would be interested in reading the article.}
    sent: "2016-10-15T17:47:00.397Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58026b4fc5e30d67643793a8"
    text: {So you can have that syntax sugar even if it’s not part of the language (yet?).}
    sent: "2016-10-15T17:45:51.167Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58026b30fa6b78846e25f12a"
    text: {@7hi4g0 It’s pretty easy to write your own function generator, I wrote an article about it, but now I can’t find it... Damn...}
    sent: "2016-10-15T17:45:20.806Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58026a86614116a25687b48c"
    text: {@rebolek I was talking exactly about creating a syntax sugar for default values.I think it would be a great addition to the language.}
    sent: "2016-10-15T17:42:30.439Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58026a46457ae29b71e13ad1"
    text: {@rcqls Yes. That's what I was talking about. But I guess I needed to give an example like @rebolek did. :wink: }
    sent: "2016-10-15T17:41:26.180Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58026992457ae29b71e13867"
    text: {@rebolek Thanks! I understand that you finally manage to mimic the behavior of default value with refinement. Redbol is very flexible.}
    sent: "2016-10-15T17:38:26.707Z"
    editedAt: "2016-10-15T17:38:42.199Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58026941c5e30d676437938d"
    text: "Let me find something..."
    sent: "2016-10-15T17:37:05.321Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5802693a671ea7ae6c4661c0"
    text: {@rcqls It doesn’t change much, you just define them all in the same `unless` block, but as I wrote, it’s possible to invent better syntax for this and make special function constructor.}
    sent: "2016-10-15T17:36:58.551Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580268ce8eaaaea3669b4d0c"
    text: {@rebolek What about if there are many variables attached to the refinement?}
    sent: "2016-10-15T17:35:10.320Z"
    editedAt: "2016-10-15T17:35:29.008Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5802688e8eaaaea3669b4c63"
    text: {@rebolek well done! But it is a bit tricky to do that for every parameters. }
    sent: "2016-10-15T17:34:06.074Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58026871fa6b78846e25f105"
    text: {moving this to spec is not that hard, you can define your own function constructor}
    sent: "2016-10-15T17:33:37.171Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5802681cc5e30d6764379366"
    text: {@7hi4g0 actually, refinement arguments can have default values already:^/```^/red>> f: func [/ref val][unless ref [val: "default value"] val]^/== func [/ref val][unless ref [val: "default value"] val]^/red>> f^/== "default value"^/red>> f/ref "not default value"^/== "not default value"^/```}
    sent: "2016-10-15T17:32:12.477Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580267c5891a53016311a611"
    text: {@7hi4g0 The default value of refinement would be true or false. If we accept other values, it is no more refinement IMHO. Refinements are very elegant since it alter the function call.}
    sent: "2016-10-15T17:30:45.446Z"
    editedAt: "2016-10-15T17:32:51.586Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580267c178bd0d0363c73a37"
    text: "@rcqls Got it? :wink: "
    sent: "2016-10-15T17:30:41.814Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802677b457ae29b71e1321b"
    text: {And since Red already has refinements, the easier route is to change it to allow default values.}
    sent: "2016-10-15T17:29:31.112Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802675530abd7997188d30c"
    text: {@rcqls What I'm saying is that we could implement refinements with default values nd that would be pretty close to named parameters with default values.}
    sent: "2016-10-15T17:28:53.238Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
)#(
    id: "580266df671ea7ae6c46618a"
    text: {@7hi4g0 you’re probably right. I was just pointing out that it’s possible ;)}
    sent: "2016-10-15T17:26:55.247Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580266c5b68c1ca566bb2c6f"
    text: {@7hi4g0 I think we are not talking about the same thing. In my example, default values are attached to parameters. A refinement is like a logical. Some parameters with other names can be associated to refinement but I think it is different of named parameters with default values.}
    sent: "2016-10-15T17:26:29.968Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580266678eaaaea3669b4523"
    text: {@rebolek But if I were to be crazy enough to write Red code pretending it's Common Lisp, the mixture of parentheses and square brackets would be even more annoying than the parentheses in Common Lisp.}
    sent: "2016-10-15T17:24:55.795Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "580265e28eaaaea3669b436f"
    text: {@rcqls Maybe. But I think refinements are already a pretty good option.}
    sent: "2016-10-15T17:22:42.566Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802658c671ea7ae6c466171"
    text: {@pekr but with right IDE, it can help you to distinguish them even visually ;)}
    sent: "2016-10-15T17:21:16.374Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58026551671ea7ae6c46616e"
    text: {`b: make block! append b 1` is same as `(b: make block!) (append b 1)`}
    sent: "2016-10-15T17:20:17.180Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58026537891a530163119eb7"
    text: {@rebolek It would work. But it's not the same thing.}
    sent: "2016-10-15T17:19:51.456Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802652bc5e30d6764379320"
    text: {@pekr Now I understand. You’re right that visually you can’t distinguish them.}
    sent: "2016-10-15T17:19:39.195Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58026514614116a25687a395"
    text: {@7hi4g0 In the example I proposed before, the rule was that the named argument is attached in priority to the closest function to the left. I thought it was the more natural in literal mode.}
    sent: "2016-10-15T17:19:16.904Z"
    editedAt: "2016-10-15T17:19:37.935Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580264d1671ea7ae6c46614b"
    text: {@7hi4g0 It’s possible to wrap all functions in parenthesis.}
    sent: "2016-10-15T17:18:09.194Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580264bf1cc4cda456531294"
    text: {@rcqls I believe that's already a priority rule, even if implicit. I just don't know what it is.}
    sent: "2016-10-15T17:17:51.034Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "580264b2614116a25687a21f"
    text: {@rebolek foo/bar/baz can be legitimate representation of those two cases: foo function, refinement /bar, baz sub-function .... or foo function, bar subfunction /baz refinement ... or three nested function and zero refinements .... it's not about identical naming of refinement vs sub-function, but about inability to visually distinguish by path notation itself ... The question is, if it is a big deal at all ...}
    sent: "2016-10-15T17:17:38.617Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5802647c78bd0d0363c72a12"
    text: {I know the proposal of Revolution and Red is to minimize the use of parentheses or square brackets, but sometimes I miss the simplicity of knowing where the function arguments ends.}
    sent: "2016-10-15T17:16:44.515Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802647530abd7997188c831"
    text: {@7hi4g0 I just think that one can define a priority rule to decide what has to be evaluated.}
    sent: "2016-10-15T17:16:37.416Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5802642f891a530163119ba0"
    text: {About @dockimbel point of ambiguity earlier. Is it possible to write Red like Lisp, that is, wrapping all functions in square brackets?}
    sent: "2016-10-15T17:15:27.595Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "580263c91cc4cda456530f61"
    text: {@rcqls That could definitely be an improvement to refinements.}
    sent: "2016-10-15T17:13:45.620Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58026374891a5301631198ab"
    text: {I think the misunderstanding comes from the fact that a good thing with keyword args is to offer default values too.}
    sent: "2016-10-15T17:12:20.050Z"
    editedAt: "2016-10-15T17:12:52.375Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5802636fb68c1ca566bb20af"
    text: {@rebolek Thanks! But most of the foundation was already set by @dockimbel and @qtxie. I'm just filling in what's missing.}
    sent: "2016-10-15T17:12:15.019Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58026315457ae29b71e1220a"
    text: {If we can call multiple refinements, then I don't see the need for keyword args. That's already covered by /refinements, like it's been said already.}
    sent: "2016-10-15T17:10:45.281Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5802628bc5e30d67643792fe"
    text: {@7hi4g0 you may be new to Red, but you already wrote GTK binding for View. Well, that’s quite an achievement IMO.}
    sent: "2016-10-15T17:08:27.835Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58026220fa6b78846e25f095"
    text: "(in same context)"
    sent: "2016-10-15T17:06:40.700Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580261e7c5e30d67643792dc"
    text: {@pekr How would that work? How can you have two things that have same name?}
    sent: "2016-10-15T17:05:43.458Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580261c094b459a576dcd869"
    text: {@7hi4g0 You’re welcome :) You can also change order of refinements.}
    sent: "2016-10-15T17:05:04.964Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5802616b891a5301631191aa"
    text: {@rebolek what if your refinement and nested function have identical name? The thing is, that you can't distinguish that by path syntax ...}
    sent: "2016-10-15T17:03:39.076Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5802614c1cc4cda456530879"
    text: {@rebolek That's new to me. But I'm also new to Red. Thanks :smile: }
    sent: "2016-10-15T17:03:08.626Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "580260fe671ea7ae6c466111"
    text: {@7hi4g0 of course you can call function with more than one refinement:^/```^/red>> f: func [/ref1 /ref2][reduce [ref1 ref2]]^/== func [/ref1 /ref2][reduce [ref1 ref2]]^/red>> f^/== [false false]^/red>> f/ref1^/== [true false]^/red>> f/ref2^/== [false true]^/red>> f/ref1/ref2^/== [true true]^/```}
    sent: "2016-10-15T17:01:50.343Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5802600ab68c1ca566bb132f"
    text: {I was under the impression that you can only call one refinement.}
    sent: "2016-10-15T16:57:46.438Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58025ff81cc4cda456530399"
    text: {Regarding the /refinements x keyword discussion: Is it possible to pass more than one refinement in a function call?}
    sent: "2016-10-15T16:57:28.018Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58025fa578bd0d0363c71ae3"
    text: {@dockimbel At the end it's all functions. But there are a lot of them and is cumbersome to define all of them manually. That's why GTK, through GObject, relies heavily on macros. It's possible to define it all in R/S, but it will be a good amount of work.}
    sent: "2016-10-15T16:56:05.067Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58025d0bfa6b78846e25f01a"
    text: {@pekr How? For example:^/```^/red>> foo: object [bar: object [baz: 1]]^/== make object! [^/    bar: make object! [^/        baz: 1^/    ]^/]^/red>> type? :foo/bar^/== object!^/red>> foo: object [bar: func [/baz][]]^/== make object! [^/    bar: func [/baz][]^/]^/red>> type? :foo/bar^/== function!^/```}
    sent: "2016-10-15T16:44:59.339Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58025b568eaaaea3669b2063"
    text: {Not read all this discussion yet, but refinements don't work with nested function calls too - how do you distinguis in foo/bar/baz path notation, if the parameter is a refinement to upper function, or the nested function? But sorry, if I am consused ....}
    sent: "2016-10-15T16:37:42.671Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "580244fd614116a256873c26"
    text: {@greggirwin Is your example related to the example given by @dockimbel answering @maximvl question?}
    sent: "2016-10-15T15:02:21.638Z"
    editedAt: "2016-10-15T15:02:29.215Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58024456b68c1ca566bab647"
    text: {My goal was not to support keyword args, but to make it easier to propagate refined function calls. That's a pain point for me in R2.}
    sent: "2016-10-15T14:59:34.925Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580243ea8eaaaea3669ad0ec"
    text: {A third model could use a single block but work like #2.}
    sent: "2016-10-15T14:57:46.497Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58024393b68c1ca566bab40d"
    text: {I have two interface approaches currently. The first takes the func name and a block of all args, but doesn't yet reorder fixed args that may come after refinements. I think it's OK to require them to be first in the block, but something to be aware of.^/```^/do-refined 'append [[] [a] /dup 3 /only]^/do-refined 'append [[] /dup 3 /only [a]]^-; error, args out of order^/```^/The second uses 2 blocks, one for the fixed part, and one for optional args.^/```^/do-refined [append [] [a]] [/only /dup 3]^/do-refined [append [] [a]] [/dup /only 3]^/```^/}
    sent: "2016-10-15T14:56:19.834Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580241b98eaaaea3669aca96"
    text: {Some time back I experimented with how to refine function calls. Let me find it.}
    sent: "2016-10-15T14:48:25.645Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58023db230abd79971884380"
    text: "@geekyi Not at all profound!"
    sent: "2016-10-15T14:31:14.202Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58023da41cc4cda456529795"
    text: {@geekyi redbol when used in literal mode you do not have to. But in programming mode, you have to as any programming language even if redbol minimizes this use. }
    sent: "2016-10-15T14:31:00.859Z"
    editedAt: "2016-10-15T14:32:34.333Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58023d6d94b459a576dcd52d"
    text: {@rcqls aww I was hoping you were going to say something profound :wink: }
    sent: "2016-10-15T14:30:05.198Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58023d17fa6b78846e25eda0"
    text: {@rcqls because mathematics has order of precedence, rebol doesn't}
    sent: "2016-10-15T14:28:39.344Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58023cfa891a530163111099"
    text: "@geekyi you're right"
    sent: "2016-10-15T14:28:10.955Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58023cd2891a530163111011"
    text: {@geekyi when you do mathematics you can’t avoid parentheses. In English or French, you do not have to use parentheses (except for comment like this one).}
    sent: "2016-10-15T14:27:30.002Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58023c7afa6b78846e25ed99"
    text: {@rcqls that is just a deficiency of that programming language, in functional languages, you commonly use nesting and function composition; because there are no drawbacks, and in my opinion, helps readability too}
    sent: "2016-10-15T14:26:02.338Z"
    editedAt: "2016-10-15T14:27:15.681Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58023c18891a530163110e20"
    text: {@geekyi I am just trying to follow the spirit of rebol which as a literal language try to avoid parentheses. In a verbal language you do not use commonly nested expressions. It is supposed to be bad expression.}
    sent: "2016-10-15T14:24:24.073Z"
    editedAt: "2016-10-15T14:25:00.037Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58023bfe671ea7ae6c465d7b"
    text: {I've come to accept that refinements are a trade-off between simpler functions and simpler apis}
    sent: "2016-10-15T14:23:58.839Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58023baa671ea7ae6c465d6e"
    text: {Haskell code with monads is usually not readable tho}
    sent: "2016-10-15T14:22:34.537Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58023b8f671ea7ae6c465d6b"
    text: {When I first started with rebol, as a beginner, I had a problem with reading code, as refinements meant funcctions can have  a variable number of arguments. In haskell for example, you have fixed number of arguments (actually just 1), and just by glancing at the type signature, you can easily grok what the function does}
    sent: "2016-10-15T14:22:07.376Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58023b53671ea7ae6c465d65"
    text: {@rcqls Or maybe there is and I'm wrong, can you give an example where parens are required?}
    sent: "2016-10-15T14:21:07.979Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58023b0ac5e30d6764378ebe"
    text: {@rcqls Actually it is very common, you don't nest functions at all? I see, you thought it is not possible to avoid parentheses}
    sent: "2016-10-15T14:19:54.887Z"
    editedAt: "2016-10-15T14:20:33.908Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58023aa830abd79971883b76"
    text: {Yes except if you require priority rule. The example given by doc is not so common… In some tricky example you cannot avoid parentheses even in regular redbol.}
    sent: "2016-10-15T14:18:16.751Z"
    editedAt: "2016-10-15T14:18:57.032Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
)#(
    id: "58023a0d94b459a576dcd4db"
    text: {:point_up: [October 15, 2016 6:47 PM](https://gitter.im/red/red?at=58023361891a53016310f340)^/>  With default values in the definiiton of function, the number of values to fulfill in the function call can vary. ^/^/There is a problem with varargs, of ambiguity and readability^/ Same as doc said :point_up: [October 15, 2016 5:29 PM](https://gitter.im/red/red?at=58022134614116a25686ca76)}
    sent: "2016-10-15T14:15:41.082Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580239538eaaaea3669aaac6"
    text: {What I do not like too much is the constraint to put the refinement attached to the function. Objective-c does not with the message concept and I prefer it. Refinement in redbol is ok when attached to the function name. Named argument with value to provide could be in the arguments list like objective-C.}
    sent: "2016-10-15T14:12:35.430Z"
    editedAt: "2016-10-15T14:14:00.109Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5802391cfa6b78846e25ed5a"
    text: {@rcqls slightly different syntax, not currently possible, but I think you may be able to write your own which behaves as you want}
    sent: "2016-10-15T14:11:40.771Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58023892891a5301631103b6"
    text: {I do not get it. It is the same code as I wrote before in the definition of the function. Right? You mean that this could be possible in red? }
    sent: "2016-10-15T14:09:22.468Z"
    editedAt: "2016-10-15T14:15:11.393Z"
    v: 4
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580236f3671ea7ae6c465cf3"
    text: {:point_up: [October 15, 2016 4:36 PM](https://gitter.im/red/red?at=580214ab30abd7997187c876)}
    sent: "2016-10-15T14:02:27.188Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580235a7671ea7ae6c465ca9"
    text: {>or even lighter^/^/```^/foo: function [a b /c 3 /d 1][a * d + b * c]  ; but not /a /b^/^/foo 5 2 ;hmm.. :-(^/== 21^/^/print foo/b/a 2 5^/== 21^/^/foo/c/b/a 4 2 5^/== 28^/```^/Maybe there is a possibility of using the specified argument to a refinement as a default if it is a literal value instead of a word!}
    sent: "2016-10-15T13:56:55.130Z"
    editedAt: "2016-10-15T14:02:11.652Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "5802345778bd0d0363c68ed2"
    text: {@geekyi Something like that! But I am not still very clear. In R, refinement would be replaced by a boolean parameter and the attached parameters to each refinement would be simple parameters with possibly default values.  }
    sent: "2016-10-15T13:51:19.336Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580233bafa6b78846e25ed09"
    text: {@rcqls I think I see what you mean, a simpler syntax in refinements for default values}
    sent: "2016-10-15T13:48:42.957Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58023361891a53016310f340"
    text: {I think that a key point in redbol is that  you know exactly the number of values to fulfill in the function call depending on  the definition of the function depending of course of the refinement in the call. With default values in the definiiton of function, the number of values to fulfill in the function call can vary.  I think this is what I think very interesting and that I miss in redbol. Maybe, I am wrong...}
    sent: "2016-10-15T13:47:13.121Z"
    editedAt: "2016-10-15T13:47:57.281Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5802323b671ea7ae6c465c7b"
    text: {In matlab and julia, some constructs are similar, so I *think* I know what you are talking about}
    sent: "2016-10-15T13:42:19.715Z"
    editedAt: "2016-10-15T13:43:26.342Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5802320efa6b78846e25ece9"
    text: "@rcqls Not used it"
    sent: "2016-10-15T13:41:34.370Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580231e6b68c1ca566ba7b51"
    text: "@geekyi do you know R?"
    sent: "2016-10-15T13:40:54.126Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580231758eaaaea3669a93f8"
    text: {@geekyi I made a mistake with refinement which can have additional arguments attached to it. However, no default value for the attached arguments. That the main points in my opinion in the current discussion.}
    sent: "2016-10-15T13:39:01.818Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58022fe6c5e30d6764378dd4"
    text: {@rcqls ^/```^/test: func [a /b barg /c carg][^/    ?? a^/    ?? barg^/    ?? carg^/]^/```^/```^/>> test/b/c 1 2 3^/a: 1^/barg: 2^/carg: 3^/== 3^/>> test/c/b 1 2 3^/a: 1^/barg: 3^/carg: 2^/== 2^/```}
    sent: "2016-10-15T13:32:22.767Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58022eefc5e30d6764378dcc"
    text: {For context (and to help me understand) there are 3 concepts:^/(related concepts: in [python](https://docs.python.org/3.4/tutorial/controlflow.html#keyword-arguments) and [julia](http://docs.julialang.org/en/latest/manual/functions/#varargs-functions) )^/## Varargs^/Not in rebol or red (not wanted?)^/## Optional Args^/Refinements in redbol: a boolean `/only`, or a "parameter" `/param 2` positional in most other languages (I'm thinking python `*args` for e.g.), but not in rebol^/##  Keyword Args^/Can't we do this with refinements already? What's the extra value add? (same as python `**kwargs`, splats or spreads in ruby and [javscript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator) `...args`)}
    sent: "2016-10-15T13:28:15.164Z"
    editedAt: "2016-10-15T13:33:50.757Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58022d688eaaaea3669a87f1"
    text: {@dockimbel Could ```$```  be used as a prefix to the name of the arg?  It shouldn't interfere with the use of ```$``` as a prefix for a fixed decimal number if you want it for that (unless you were to allow ```$``` to be followed by a hex number).^/^/```text^/foo: function [a b][a - b]^/^/foo $a 5 $b 2^/== 3^/print foo $b 2 $a 5^/== 3^/```^/Though it does look like PHP :-(}
    sent: "2016-10-15T13:21:44.149Z"
    editedAt: "2016-10-15T13:26:17.402Z"
    v: 5
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5802296430abd79971880206"
    text: {I am not an expert in redbol but refinement is in my opinion equivalent (at least in R) to a named argument with logical value. That's why I think refinement is elegant avoiding a boolean parameter.  In my first version, I extended the concept of named argument since it is similar to refinement `/param`. With default value, it becomes  `/param:  2` for example. }
    sent: "2016-10-15T13:04:36.079Z"
    editedAt: "2016-10-15T13:12:39.469Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580226b4614116a25686d9a6"
    text: {@geekyi I am just trying to mimic R that's why I prefer my first version. In R, combining named arguments and default value   is a powerful ability to avoid definition of multiple functions in the same family.}
    sent: "2016-10-15T12:53:08.007Z"
    editedAt: "2016-10-15T12:54:07.730Z"
    v: 4
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580225b7671ea7ae6c465bc6"
    text: {@rcqls  :point_up: [October 15, 2016 4:36 PM](https://gitter.im/red/red?at=580214ab30abd7997187c876) actually, I'm not sure what the value add is here for kwargs over refinements(ok, maybe I get it, or not.. still not sure how it can be more useful , need to think about it)}
    sent: "2016-10-15T12:48:55.323Z"
    editedAt: "2016-10-15T12:51:57.785Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "5802252cc5e30d6764378d59"
    text: {@maximvl what's the use case for keyword arguments? Usually, you can use /refinements for most, and things are simpler when you break down into smaller functions, or use an `object!` to store defaults /configuration?}
    sent: "2016-10-15T12:46:36.790Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5802250630abd7997187f568"
    text: {@dockimbel I don’t understand the last ambiguity but between the two remaining the second one is the one corresponding to the default one. The first one needs parentheses, the rule being that keyword is attached to the closest (to the left) function call.}
    sent: "2016-10-15T12:45:58.845Z"
    editedAt: "2016-10-15T12:46:36.132Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5802230a30abd7997187f0a0"
    text: {That’s interesting. Some food for me to think about redbol. Thanks again!}
    sent: "2016-10-15T12:37:30.550Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580222bbb68c1ca566ba4ce7"
    text: {@rcqls Same issue with my `name::` syntax, nested calls would be problematic too, I don't have a simple and elegant solution for that.}
    sent: "2016-10-15T12:36:11.617Z"
    editedAt: "2016-10-15T12:36:19.309Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5802225b8eaaaea3669a67f3"
    text: {Thanks! Ok, now I understand better your comment about ponctuation.  The last one is  a bit weird for me. In fact, I prefer my first version since I understand that you need to be a bit esoteric to be recognized by the parser like you did with `name::`}
    sent: "2016-10-15T12:34:35.044Z"
    editedAt: "2016-10-15T12:35:15.138Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580221a5b68c1ca566ba4a6b"
    text: {(I've dropped the mandatory arguments for sake of simplicity)}
    sent: "2016-10-15T12:31:33.111Z"
    editedAt: "2016-10-15T12:31:54.575Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58022134614116a25686ca76"
    text: {@rcqls With nested calls, you get ambiguous expressions:^/```lisp^/foo foo /c 3 /d 2^/```^/Could be: `foo (foo /c 3) /d 2` or `foo (foo /c 3 /d 2)` or `foo foo (/c 3 /d 2)`.}
    sent: "2016-10-15T12:29:40.210Z"
    editedAt: "2016-10-15T12:30:17.952Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58021e5178bd0d0363c64de7"
    text: {Do you have an example? Piority is not from left to right?}
    sent: "2016-10-15T12:17:21.319Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58021dc2891a53016310b694"
    text: {@rcqls Yes, those are probably nicer looking options, though, they still won't work with nested calls.}
    sent: "2016-10-15T12:14:58.840Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5802182b30abd7997187d033"
    text: {Sorry for the second try some delimiter as @maximvl  suggested is missing^/`foo: function [a b /keywords /c 3 /d 1][a * d + b * c]` since it is regular red. }
    sent: "2016-10-15T11:51:07.187Z"
    editedAt: "2016-10-15T11:51:42.969Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580214ab30abd7997187c876"
    text: {@dockimbel  @maximvl  Very interesting discussion. As an R user, I would propose  `/name:` instead of `name::` since, name is for me both similar to refinement and word.^/^/```^/foo: function [a b /c: 3 /d: 1][a * d + b * c]^/^/foo 5 2^/== 21^/^/print foo /b: 2 /a: 5^/== 21^/^/foo /c: 4 /b: 2 /a: 5^/== 28^/```^/^/or even lighter^/^/```^/foo: function [a b /c 3 /d 1][a * d + b * c]^/^/foo 5 2^/== 21^/^/print foo /b 2 /a 5^/== 21^/^/foo /c 4 /b 2 /a 5^/== 28^/```^/^/But, actually, since I am not really experimented in Red it is likely that my thought is just irrelevant. }
    sent: "2016-10-15T11:36:11.083Z"
    editedAt: "2016-10-15T11:36:47.208Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "5802085c30abd7997187a451"
    text: {@DonaldTsang Hi, for progress, you can read the Red blog and look at our Trello [board](https://trello.com/b/FlQ6pzdB/red-tasks-overview).}
    sent: "2016-10-15T10:43:40.247Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5802075b78bd0d0363c6067e"
    text: "I moved it to red/red/lisp"
    sent: "2016-10-15T10:39:23.953Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "58020748457ae29b71dff7e6"
    text: "@room please delete my comments in this room"
    sent: "2016-10-15T10:39:04.516Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "580206ce78bd0d0363c60545"
    text: {it will not look like something builtin, however will not bloat language with new syntax constructions / function call rules }
    sent: "2016-10-15T10:37:02.491Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58020646b68c1ca566b9f9a5"
    text: {@dockimbel I think I can try it on user level, write a wrap to define functions which will convert `func [a [x 1]] [..]` into `func [arg-spec] [ parse arg-spec .. call original body]`and call it later as `f [1 [x 10]]`}
    sent: "2016-10-15T10:34:46.507Z"
    editedAt: "2016-10-15T10:35:33.015Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5802047730abd799718791d4"
    text: "@dockimbel So how is the progress on Red?"
    sent: "2016-10-15T10:27:03.489Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "580202e478bd0d0363c5fc55"
    text: {@dockimbel the trick here is every symbol which starts from `:` is a keyword, so reader puts these symbols into specific package, which is really like a separate datatype}
    sent: "2016-10-15T10:20:20.199Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580202a7891a530163107130"
    text: {@maximvl You can simulate it with refinements then.}
    sent: "2016-10-15T10:19:19.467Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5802027a30abd79971878d46"
    text: "(and also with optional and accumulation)"
    sent: "2016-10-15T10:18:34.771Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58020252614116a256867b3d"
    text: {so it combines positional arguments with keyword ones}
    sent: "2016-10-15T10:17:54.323Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5802022a457ae29b71dfec0e"
    text: "@maximvl That makes it more clear, thanks. "
    sent: "2016-10-15T10:17:14.635Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5802022978bd0d0363c5fa1f"
    text: {and function definition in CL would be like ^/`(defun function (arg1 arg2 &key key1 key2) ...)`}
    sent: "2016-10-15T10:17:13.302Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580201eb30abd79971878bcd"
    text: {it's same in CL, the simplified logic looks like this:^/`(function arg1 arg2 :key1 k1 :key2 k2)`^/* arg1 and arg2 are "ordinary" symbols, so they will be replaced by their symbol-value^/* :key1 and :key2 are keyword symbols, so compiler looks for keywords in function definition and puts values of k1 and k2 into appropriate places }
    sent: "2016-10-15T10:16:11.698Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580201da891a530163106d55"
    text: {Though, I don't find that syntax elegant enough for my taste. Moreover, it wouldn't work with nested calls unless extra syntax/punctation is provided.}
    sent: "2016-10-15T10:15:54.133Z"
    editedAt: "2016-10-15T10:21:04.586Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580201ac30abd79971878b62"
    text: {Here is how I see it:^/```lisp^/foo: function [a b][a - b]^/^/foo a:: 5 b:: 2^/== 3^/print foo b:: 2 a:: 5^/== 3^/```}
    sent: "2016-10-15T10:15:08.538Z"
    editedAt: "2016-10-15T10:15:11.891Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5802012d1cc4cda45651dcb9"
    text: {I'm not sure if "separating names from arguments" is relevant in Red/Rebol where symbols and the values they eventually reference are separated by design.}
    sent: "2016-10-15T10:13:01.713Z"
    editedAt: "2016-10-15T10:13:13.017Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580200d5891a530163106b21"
    text: "but we have no packages in Red"
    sent: "2016-10-15T10:11:33.020Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58020084b68c1ca566b9eb8a"
    text: "@dockimbel definition"
    sent: "2016-10-15T10:10:12.195Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5802007d78bd0d0363c5f38c"
    text: {CL has special symbol's package called `keyword` which is used to separate names from arguments}
    sent: "2016-10-15T10:10:05.242Z"
    editedAt: "2016-10-15T10:10:44.714Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5802007b614116a256867683"
    text: {@maximvl So your code above was a function definition or a function call?}
    sent: "2016-10-15T10:10:03.822Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58020046891a5301631069c7"
    text: {yes, this is what I'm talking about, I'm thinking how to do it on function call site}
    sent: "2016-10-15T10:09:10.822Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5801ffdb78bd0d0363c5f17e"
    text: {@maximvl I'm not sure we are talking about the same thing. I was talking about [named arguments](https://en.wikipedia.org/wiki/Named_parameter), where the labelling of arguments happens at functions call sites.}
    sent: "2016-10-15T10:07:23.888Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5801ff7c614116a25686746e"
    text: "where `c` will be default to `1` and `d` to none"
    sent: "2016-10-15T10:05:48.066Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5801ff68b68c1ca566b9e91a"
    text: "like `/local` in Rebol"
    sent: "2016-10-15T10:05:28.211Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5801ff56457ae29b71dfe529"
    text: {syntax can be something like^/`func f [a b /keyword [c 1] [d]] ...`}
    sent: "2016-10-15T10:05:10.311Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5801ff10614116a2568673b8"
    text: {@maximvl Refinements are extra arguments, they don't replace them.}
    sent: "2016-10-15T10:04:00.634Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5801fece891a5301631061d4"
    text: {@dockimbel but Rebol has refinements, aren't they similar to keyword args?}
    sent: "2016-10-15T10:02:54.361Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5801fe8b614116a2568672dd"
    text: {@maximvl It's in my wish-list for Red since the beginning, though, I haven't come up yet with a satisfying enough syntax for supporting it. The closest thing I got in my notes for that, relies on introducing a new word datatype which literal form would be `name::` with a sticky or non-sticky argument following it.}
    sent: "2016-10-15T10:01:46.999Z"
    editedAt: "2016-10-15T10:02:44.740Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5801fcc2b68c1ca566b9e349"
    text: {@7hi4g0 Thanks. It seems that we can just use function calls directly to read/write objects properties, instead of the macro calls.}
    sent: "2016-10-15T09:54:10.813Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5801f170b68c1ca566b9c503"
    text: {@dockimbel I would like to have keyword arguments in both, but did you consider having keyword arguments? what was the decision?}
    sent: "2016-10-15T09:05:52.941Z"
    editedAt: "2016-10-15T09:06:00.461Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5801e66030abd799718746c8"
    text: {I'm looking into it but any help is welcome. :smile: }
    sent: "2016-10-15T08:18:40.725Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5801e635b68c1ca566b9a36a"
    text: {@pekr For now GtkCssProvider. To implement GtkStyleProvider we need to port some macros from GObject to Red/System.}
    sent: "2016-10-15T08:17:57.123Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5801e5b5b68c1ca566b9a22d"
    text: {I'm not sure but I suspect these macros actually call other macros.}
    sent: "2016-10-15T08:15:49.222Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5801e58c78bd0d0363c5a897"
    text: {re the following post - https://github.com/red/red/pull/2270 , are we going to use GtkCssProvider or GtkStyleProvider?}
    sent: "2016-10-15T08:15:08.039Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5801e588891a5301631021c1"
    text: {@dockimbel The ones listed in this page and in the pages linked there: https://developer.gnome.org/gobject/stable/howto-interface-implement.html}
    sent: "2016-10-15T08:15:04.761Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5801e530c5e30d6764378b3f"
    text: "Hi @DonaldTsang "
    sent: "2016-10-15T08:13:36.860Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5801e50b614116a256862e80"
    text: "@room long time no see!"
    sent: "2016-10-15T08:12:59.310Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "5801e45fb68c1ca566b99e42"
    text: "@dockimbel long time no see!"
    sent: "2016-10-15T08:10:07.838Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "5801e187891a5301631017ff"
    text: {@7hi4g0 Can you give me a link to those GTK macros which are expensive to convert to R/S?}
    sent: "2016-10-15T07:57:59.080Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5801cff330abd79971870dc6"
    text: {Does anyone here know kdb+ from Kx Systems? They have two compressed programming languages called K and Q (based on J and APL), that I think Red/Dialect could get a few ideas from.}
    sent: "2016-10-15T06:42:59.232Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "5801ce1b30abd79971870a39"
    text: {@qtxie I agree that it wouldn't be the best option.}
    sent: "2016-10-15T06:35:07.561Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5801ccad891a5301630fe4c4"
    text: "@everyone LONG TIME NO SEE!"
    sent: "2016-10-15T06:29:01.486Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "5801cbf1614116a25685ef2c"
    text: {Agreed about not introducing dependencies on the c toolchain though.}
    sent: "2016-10-15T06:25:53.936Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5801cbbc8eaaaea366997f97"
    text: {[see here](https://gitter.im/red/red?at=570f0c37b30cfa0f384b3a55)}
    sent: "2016-10-15T06:25:00.967Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5801cac330abd79971870271"
    text: {@qtxie it was @moliad who was working on the static linker.}
    sent: "2016-10-15T06:20:51.382Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5801ca9c1cc4cda4565143ff"
    text: ""
    sent: "2016-10-15T06:20:12.202Z"
    editedAt: "2016-10-15T06:20:24.474Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5801bc5c614116a25685c7cd"
    text: {@7hi4g0 Even though we can link with static library, we should avoid introducing C code into `view`. We'll depends on the C toolchain which we were trying to get rid of from beginning.}
    sent: "2016-10-15T05:19:24.325Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5801bab5457ae29b71df36e0"
    text: "I don't know who was working on it. :question: "
    sent: "2016-10-15T05:12:21.047Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5801b7f1b68c1ca566b929b1"
    text: {IIRC someone was working on static library linker. How far has the work been done?}
    sent: "2016-10-15T05:00:33.291Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5801b3cbb68c1ca566b9205a"
    text: "Thought so. That's unfortunate. :disappointed: "
    sent: "2016-10-15T04:42:51.259Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5801aad0891a5301630f88e7"
    text: {Red can only link with shared library for now, cannot static link with C library.}
    sent: "2016-10-15T04:04:32.229Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5801a5338eaaaea36699268f"
    text: {So my question is: Is there any way to compile C code together with Red/System?}
    sent: "2016-10-15T03:40:35.049Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "5801a511614116a256858d4e"
    text: {Implementing the GTK backend for `view` I'm needing to use some convoluted C macros. My two options are port the macros to Red/System or write the code in C and link together while compilation.}
    sent: "2016-10-15T03:40:01.955Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "58010cdb30abd7997184ae05"
    text: "@maximvl You mean Red or Red/System?"
    sent: "2016-10-14T16:50:35.042Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580101be78bd0d0363c2c66e"
    text: {@maximvl, keyword arguments in Red/System would be a big change, but if you have a concrete proposal for how to do it, or other improvements to R/S, now is the time to propose them.}
    sent: "2016-10-14T16:03:10.345Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580100261cc4cda4564e9985"
    text: "@pekr, `ref!` would be a value like `@pekr`. "
    sent: "2016-10-14T15:56:22.340Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5800f586457ae29b71dc6c48"
    text: {I can see `ref!`datatype on a Trello card for 0.6.2 release - what is it going to be about? Some kind of pointer?}
    sent: "2016-10-14T15:11:02.916Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5800dd19b68c1ca566b6016b"
    text: {every time I'm looking at `datatype/register` I wonder if Red should have keyword arguments}
    sent: "2016-10-14T13:26:49.699Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58009fdd891a5301630bc542"
    text: {and I found that python version sets recursion limit explicitly to pass it}
    sent: "2016-10-14T09:05:33.578Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58009fbf1cc4cda4564d108e"
    text: {hi guys, yes, I was going to try to implement Knuth's man-or-boy compiler test}
    sent: "2016-10-14T09:05:03.019Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58006951eab966c85fbbe06e"
    text: {:point_up: [October 13, 2016 7:01 PM](https://gitter.im/red/red?at=57ff93a1614116a2567db897) @maximvl it's the resolution the user wants, so why not? What use case have you in mind instead?}
    sent: "2016-10-14T05:12:49.369Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ffed4a1cc4cda4564ac3b1"
    text: {It would be helpful if following error message:^/```^/Compiling to native code...^/*** Loading Error: file access error: %definitions.reds ^/*** in file: %/red/master/system/library/call/call.reds ^/*** at line: 26^/```^/would actually return the full path of where it is looking for the `%definitions.red` file.}
    sent: "2016-10-13T20:23:38.131Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57ffebee30abd7997180740c"
    text: {Thank you @dockimbel . I tried to make a short example reproducing the error but failed. I'll have to reduce the problematic code to get an example. Will open an issue then.}
    sent: "2016-10-13T20:17:50.215Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57ffc3c220390f67704e3314"
    text: {But maybe it was a typo. Having it as compilation option for Red makes sense IMO.}
    sent: "2016-10-13T17:26:26.327Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ffc30a30abd799717fbd09"
    text: {Ah, sorry, overlooked it. AFAIK, no way to change it in Rebol2.}
    sent: "2016-10-13T17:23:22.451Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ffbec840e7960d7b465db8"
    text: {@dockimbel He asked about Rebol, not sure if that was a mistake or not.}
    sent: "2016-10-13T17:05:12.847Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ffbb11457ae29b71d7d850"
    text: {@maximvl It's hardcoded for now, we need to expose it as a compilation option.}
    sent: "2016-10-13T16:49:21.861Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ffb47eeab966c85fbbcd17"
    text: {@maximvl Yes, there is:^/```^/>> i: 0^/== 0^/>> f: func [][i: i + 1 f]^/>> f^/** Internal Error: Stack overflow^/** Where: f^/** Near: f^/>> i^/== 1334^/```}
    sent: "2016-10-13T16:21:18.318Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ffac0a1cc4cda45649a1ec"
    text: {is there a recursion limit in Rebol? can I change it?}
    sent: "2016-10-13T15:45:14.740Z"
    editedAt: "2016-10-13T15:45:30.892Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ffa9131cc4cda45649940a"
    text: {@maximvl I noticed. I plan to rework that part once we add DPI handling to View engine.}
    sent: "2016-10-13T15:32:35.066Z"
    editedAt: "2016-10-13T15:32:40.851Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "57ffa8491cc4cda456498f8a"
    text: "which is wierd"
    sent: "2016-10-13T15:29:13.456Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ffa824b68c1ca566b17ac7"
    text: {@dockimbel hm, discussion there ended on accepting whatever OS returns}
    sent: "2016-10-13T15:28:36.383Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ffa5028eaaaea36691c6a5"
    text: ""
    sent: "2016-10-13T15:15:14.781Z"
    editedAt: "2016-10-13T15:15:29.586Z"
    v: 2
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57ffa3821cc4cda456497c07"
    text: {@maximvl Absolute size. It should be possible to get it from the system.}
    sent: "2016-10-13T15:08:50.996Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ff93dd30abd799717ede72"
    text: "and is there a way to get absolute screen size?"
    sent: "2016-10-13T14:02:05.084Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ff93ca457ae29b71d72321"
    text: {do we really want screen size to return relative value?}
    sent: "2016-10-13T14:01:46.954Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ff93a1614116a2567db897"
    text: {guys, about this one: https://github.com/red/red/issues/2267}
    sent: "2016-10-13T14:01:05.851Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ff77988eaaaea366910311"
    text: {@endo64 It's meant for error catching, for debugging purposes. We could catch `halt` also I guess.}
    sent: "2016-10-13T12:01:28.455Z"
    editedAt: "2016-10-13T12:01:37.182Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ff5b701cc4cda4564852c3"
    text: {Shouldn't `--catch` arg catch `halt` and not quit after executing `user.red` file?^/^/```^/E:\Git\red\build\bin>red --cli user.red^/ok^/(halted)^/E:\Git\red\build\bin>^/^/E:\Git\red\build\bin>red --cli --catch user.red^/ok^/(halted)^/E:\Git\red\build\bin>^/```}
    sent: "2016-10-13T10:01:20.458Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57ff1f051cc4cda456477ccd"
    text: {@qtxie Ok. Will make some tests and open the issue.}
    sent: "2016-10-13T05:43:33.217Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57ff181f614116a2567bdcc3"
    text: {@x8x Please open a ticket with an example code for that issue. I will recheck the changes today wrt to output path.}
    sent: "2016-10-13T05:14:07.620Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ff02fd614116a2567ba34a"
    text: {@7hi4g0 Just remove `Needs: View` in the Red header of the console.red.}
    sent: "2016-10-13T03:43:57.194Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57fef747891a53016305bc17"
    text: "I want to test this before opening a bug."
    sent: "2016-10-13T02:53:59.516Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57fef72430abd799717ca4e7"
    text: {Is there any way to compile from that branch without `view`?}
    sent: "2016-10-13T02:53:24.827Z"
    editedAt: "2016-10-13T02:54:31.629Z"
    v: 2
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57fef708457ae29b71d4f9b7"
    text: {I'm noticing some locale bugs while building from the GTK branch.^/I believe this is caused due to GTK automatically setting the system locale on start.}
    sent: "2016-10-13T02:52:56.267Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57fe85d8614116a2567a054d"
    text: {I'm having path problems on macOS, compiling with `-r` or `-c -u` wheres it was compiling fine before, any one else on macOS having similar problem?}
    sent: "2016-10-12T18:50:00.250Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57fe75a7891a53016303e35f"
    text: {Just to make things clear: simply use `-r` command-line option, and the compilation process will work as before.}
    sent: "2016-10-12T17:40:55.521Z"
    editedAt: "2016-10-12T17:41:04.012Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fe7578457ae29b71d32616"
    text: "Thank you"
    sent: "2016-10-12T17:40:08.449Z"
    v: 1
    author: "57a7213240f3a6eec05e4e9d"
) #(
    id: "57fe754f78bd0d0363b9734a"
    text: {I see, I had a slight feeling that something like this might be happening ...}
    sent: "2016-10-12T17:39:27.570Z"
    v: 1
    author: "57a7213240f3a6eec05e4e9d"
) #(
    id: "57fe750cb68c1ca566ad4811"
    text: {@IngoHohmann Console, like any other Red app embedding R/S code, needs to be compiled once with `-u` to build a custom version of libRed for it. Alternatively, you can build in release mode directly using `-r` option. See my post about libRed  :point_up: [October 10, 2016 8:16 PM](https://gitter.im/red/red?at=57fb868370fcb5db0c444edf).}
    sent: "2016-10-12T17:38:20.640Z"
    editedAt: "2016-10-12T17:38:28.305Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fe7075b68c1ca566ad2a58"
    text: "This is what I get."
    sent: "2016-10-12T17:18:45.788Z"
    v: 1
    author: "57a7213240f3a6eec05e4e9d"
) #(
    id: "57fe706978bd0d0363b95946"
    text: {Target: Linux ^/^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/unicode/decode-utf8-char ^/*** in file: %/red-master/environment/console/POSIX.reds ^/*** in function: exec/terminal/fd-read^/*** at line: 235 ^/*** near: [^/    unicode/decode-utf8-char utf-char :len^/]^/}
    sent: "2016-10-12T17:18:33.621Z"
    v: 1
    author: "57a7213240f3a6eec05e4e9d"
) #(
    id: "57fe7065457ae29b71d3063e"
    text: "I am unable to compile the console on linux."
    sent: "2016-10-12T17:18:28.999Z"
    v: 1
    author: "57a7213240f3a6eec05e4e9d"
) #(
    id: "57fe6054b68c1ca566acd736"
    text: {By the way, libcrypto.so is available in the travis container}
    sent: "2016-10-12T16:09:56.632Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe5f7f78bd0d0363b9056b"
    text: {The only difference is then that the code is not executed in the console}
    sent: "2016-10-12T16:06:23.277Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe5f2c891a530163037896"
    text: {@dockimbel @qtxie It seems more complicated since fectching the last red binary and executing the test (in the travis container) does not fail. }
    sent: "2016-10-12T16:05:00.929Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe5b941cc4cda45644c4d5"
    text: {No, it does not fix the problem. This libssl-dev was already installed}
    sent: "2016-10-12T15:49:40.524Z"
    editedAt: "2016-10-12T15:51:10.137Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe5b8d457ae29b71d2a122"
    text: {It's strange that the compiled version works fine on docker....}
    sent: "2016-10-12T15:49:33.536Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57fe5b64891a5301630365ee"
    text: {@dockimbel We don't use libcrypto on Linux, we use the [Kernel Crypto API](http://www.chronox.de/crypto-API/).}
    sent: "2016-10-12T15:48:52.271Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57fe5a2078bd0d0363b8ec6b"
    text: "I'll give a try"
    sent: "2016-10-12T15:43:28.818Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe59bc30abd799717a673f"
    text: {@rcqls Does installing libcrypto in your image solve it? `apt-get install libssl-dev`}
    sent: "2016-10-12T15:41:48.922Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fe5865891a53016303571c"
    text: {Commenting only the `PRF` tests , there is no more failures in the docker travis container}
    sent: "2016-10-12T15:36:05.241Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe574978bd0d0363b8dc22"
    text: {Maybe it is caused by we use the kernel crypto feature on Linux which is not available in docker?}
    sent: "2016-10-12T15:31:21.009Z"
    editedAt: "2016-10-12T15:31:37.379Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57fe553e1cc4cda456449f39"
    text: {The next test is failing too. I guess all tests in the same group are the culprits}
    sent: "2016-10-12T15:22:38.418Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe54ef891a530163034300"
    text: {@dockimbel @Zamlox `--test-- "PRF-1-HMAC-SHA-256 « ` is the first to fail }
    sent: "2016-10-12T15:21:19.517Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe5312b68c1ca566ac8ef5"
    text: {@rcqls @Zamlox Thank you for pinpointing the culprit.}
    sent: "2016-10-12T15:13:22.990Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fe4f651cc4cda45644796a"
    text: "@rcqls  yep. Just found out same thing ;)"
    sent: "2016-10-12T14:57:41.124Z"
    editedAt: "2016-10-12T14:58:26.293Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fe4f4c891a530163031bfd"
    text: {@Zamlox  I think I have a solution by removing all lines except checksum-test.red in all-tests.txt}
    sent: "2016-10-12T14:57:16.523Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe4c9a457ae29b71d24d1a"
    text: "@rcqls I don't know yet, I'll try to find out."
    sent: "2016-10-12T14:45:46.683Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fe4bc0891a530163030b34"
    text: "@Zamlox how do I test only this test file?"
    sent: "2016-10-12T14:42:08.759Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe4b4430abd799717a1699"
    text: {@rcqls if you have time you can play by eliminating tests from that file and running until you find the test which gives the error.}
    sent: "2016-10-12T14:40:04.443Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fe4a97614116a25678d857"
    text: {The error in the log is the same that I mentionned before}
    sent: "2016-10-12T14:37:11.129Z"
    editedAt: "2016-10-12T14:38:07.363Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe4a371cc4cda45644604c"
    text: "@rcqls great :)"
    sent: "2016-10-12T14:35:35.324Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fe4a22891a5301630301f5"
    text: {@docimbel @Zamlox And the winner is `** - interp-checksum**********************************0 / 1 **`}
    sent: "2016-10-12T14:35:14.221Z"
    editedAt: "2016-10-12T14:35:41.916Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe49e430abd799717a0fea"
    text: "@rcqls ok ;)"
    sent: "2016-10-12T14:34:12.510Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fe49cf457ae29b71d23fb7"
    text: {@Zamlox  Exactly what I am doing after commenting the two first long tests}
    sent: "2016-10-12T14:33:51.541Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe4995891a53016302ff9b"
    text: {@rcqls try to run as @PeterWAWood suggested to see which test fails.}
    sent: "2016-10-12T14:32:53.119Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fe462b84f1db0614a35edc"
    text: {@dockimbel I can confirm the problem with the docker travis container.}
    sent: "2016-10-12T14:18:19.542Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe41cc84f1db0614a34aa9"
    text: {(Though it's a long time since I used the --each argument, hope it still works.)}
    sent: "2016-10-12T13:59:40.229Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57fe419fd6251fd126b18ec9"
    text: {@dockimbel You could change the Travis run-all command to use the ```--each``` command line arg. It will then run the test files individually and should  show which file contains the failing test.}
    sent: "2016-10-12T13:58:55.766Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "57fe3fe2dfe82a365b1bf5d1"
    text: {@dockimbel you can try to eliminate tests (using half-interval method) from ```run-all-interp.red``` and run it individually. Eventually you will find the culprit, but it will take time.}
    sent: "2016-10-12T13:51:30.723Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fe3cb50aa72e3c5bf6d3ff"
    text: {Do you expect to have more expressive return with the docker travis container?^/```{bash}^/signify failure^/~~~started test~~~ run-all-interp^/^/*** Runtime Error 1: access violation^/*** at: F7763A15h^/```}
    sent: "2016-10-12T13:37:57.321Z"
    editedAt: "2016-10-12T13:39:33.370Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe36f570fcb5db0c4e5ebd"
    text: {@PeterWAWood @Zamlox @rcqls Thanks for testing it! So now we need a way to figure out why is it failing on Travis... Looks like the [only way](https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image) is installing locally a Docker image.}
    sent: "2016-10-12T13:13:25.778Z"
    editedAt: "2016-10-12T13:18:48.643Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fe361968f560d80cfb9095"
    text: {@dockimbel  everything fine also on Ubuntu 14.04.5 LTS 64bit}
    sent: "2016-10-12T13:09:45.260Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "57fe34cedfe82a365b1bb5c0"
    text: "@dockimbel running well on Ubuntu 16.04 LTS 64bit"
    sent: "2016-10-12T13:04:14.846Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fe3377d6251fd126b147bf"
    text: {@dockimbel Sorry. The tests run successfully on my Ubuntu 32 VM.}
    sent: "2016-10-12T12:58:31.560Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57fe280cd6251fd126b1188f"
    text: {Can anyone reproduce the Travis [crash](https://travis-ci.org/red/red/jobs/167021342) on the interpreted tests? My Linux image runs the tests just fine.}
    sent: "2016-10-12T12:09:48.899Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fdfe7b70fcb5db0c4d816a"
    text: "@greggirwin Thanks for  those links"
    sent: "2016-10-12T09:12:27.704Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "57fdc146dfe82a365b1a2cb8"
    text: "@dockimbel all right, thanks."
    sent: "2016-10-12T04:51:18.522Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fdc13368f560d80cf9e59a"
    text: {@Zamlox Needs to be added to libRedRT-export.r file.}
    sent: "2016-10-12T04:50:59.045Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fdc043a7c618cd260366d8"
    text: {missing ```now``` from ```libRedRT```:^/```^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/natives/now*^/```}
    sent: "2016-10-12T04:46:59.080Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57fd2ed170fcb5db0c4ae08e"
    text: {Thanks for taking the lead on that @BlackATTR_twitter! }
    sent: "2016-10-11T18:26:25.063Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57fd2b61bb20dfad43c46455"
    text: {From [wikipedia](https://en.wikipedia.org/wiki/Rebol#parse):^/>The parse dialect belongs to the family of grammars represented by the *top-down parsing language* or the *parsing expression grammar (PEG)*}
    sent: "2016-10-11T18:11:45.933Z"
    editedAt: "2016-10-11T18:12:26.389Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57fd2af6470c6bb20f5e1201"
    text: {:point_up: [October 11, 2016 1:54 PM](https://gitter.im/red/red?at=57fca8e34fde72031428a31c) @dockimbel  @maximvl ^/>I wonder how OMeta/Ohm is different from Redbol's parsers^/^/From https://ohmlang.github.io/ :^/>The Ohm language is based on parsing expression grammars (PEGs)^/^/That means it basically uses the same underlying concept as Rebol's `parse`?  (I'd thought rebol 's parse was based on PEGs, need to find a proper source)}
    sent: "2016-10-11T18:09:58.905Z"
    editedAt: "2016-10-11T18:10:11.965Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57fd20bd0aa72e3c5bf2f16f"
    text: "@pekr  all longtime rebollers"
    sent: "2016-10-11T17:26:21.502Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "57fd16dc4fde7203142aa19d"
    text: "Thanks for the links @maximvl."
    sent: "2016-10-11T16:44:12.837Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57fd16be70fcb5db0c4a6f9d"
    text: {I'll have to read more on Viewpoints. Alan Kay seems to be part of it. I did an FSM dialect many years ago and built a few versions where I generated code before I realized I didn't need to generate code. I could just interpret the spec dynamically and directly. I think building a protocol dialect, that uses an FSM dialect could be great. Those two concepts are in a lot of what we do, but they are implicit, spread out, and not truly specified in our code.^/^/I always wanted more of Rebol to be written in Rebol, which is part of why I like Red so much. But I think we can go even further, as they seem to be trying to do. The TCP stuff looks like a combination of Forth and Lisp concepts, which is also what I think makes Red powerful. }
    sent: "2016-10-11T16:43:42.268Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57fd11c584f1db06149f72ba"
    text: "Welcome :-) Any prior Rebol background?"
    sent: "2016-10-11T16:22:29.797Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57fd07ea4fde7203142a544d"
    text: {A few of us in the red community from the mid-atlantic states of the US just started getting organized as a Red user group. We've been discussing community resources, documentation etc. I'd like to propose that our group take a shot at this Dialect article. Of course, some of us are somewhat new to Red, so we may ask for some feeback in the appropriate rooms here.}
    sent: "2016-10-11T15:40:26.741Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "57fcbe264fde72031428f69e"
    text: {fyi: this is the final report after five years of VPRI's research and development: http://www.vpri.org/pdf/tr2011004_steps11.pdf}
    sent: "2016-10-11T10:25:42.617Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fcbd8970fcb5db0c48d253"
    text: {@maximvl Very interesting. I had some ideas about a protocol framework similar to that.}
    sent: "2016-10-11T10:23:05.121Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fcb66870fcb5db0c48b5b8"
    text: {@dockimbel http://www.moserware.com/2008/04/towards-moores-law-software-part-3-of-3.html}
    sent: "2016-10-11T09:52:40.913Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fcb6484fde72031428db50"
    text: "let me find a post then"
    sent: "2016-10-11T09:52:08.722Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fcb63484f1db06149dcb8e"
    text: "@maximvl Yes, but vaguely."
    sent: "2016-10-11T09:51:48.237Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fcb5fb4fde72031428da07"
    text: {@dockimbel there are should be some, have you heard about TCP/IP stack in 300 LoC?}
    sent: "2016-10-11T09:50:51.799Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fcb52a68f560d80cf5e2ba"
    text: {@maximvl Maybe some interesting features in Ohm for Red's Parse, worth having a deeper look.}
    sent: "2016-10-11T09:47:22.784Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fcab1c4fde72031428a9de"
    text: {I wonder how OMeta/Ohm is different from Redbol's parsers}
    sent: "2016-10-11T09:04:28.599Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fcaa4984f1db06149d9ea3"
    text: "OMG VPRI's work wasn't wasted"
    sent: "2016-10-11T09:00:57.288Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fcaa3170fcb5db0c488403"
    text: {>Ohm is based on years of research into making parsers easier and more flexible. VPRI’s STEPS program (pdf) created many custom languages for specific tasks (like a fully parallelizable graphics renderer in 400 lines of code!) using Ohm’s precursor OMeta.}
    sent: "2016-10-11T09:00:33.355Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fca9b270fcb5db0c488187"
    text: "not sure if I have enough knowledge to do it"
    sent: "2016-10-11T08:58:26.258Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fca9a4dfe82a365b160a58"
    text: "this must be interesting"
    sent: "2016-10-11T08:58:12.285Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fca95470fcb5db0c488093"
    text: "Hm, that sounds interesting."
    sent: "2016-10-11T08:56:52.880Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fca8e34fde72031428a31c"
    text: {Food for thought: anyone willing to write an article for Red covering the same topic as: https://www.pubnub.com/blog/2016-09-26-4-tutorials-create-language-in-less-than-200-lines-of-code/ ?}
    sent: "2016-10-11T08:54:59.690Z"
    editedAt: "2016-10-11T08:55:09.786Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fc9626d6251fd126ababba"
    text: "I hope not :smile: "
    sent: "2016-10-11T07:35:02.337Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57fc940bd6251fd126aba3dd"
    text: "Great! Do they monitor this channel? ;)"
    sent: "2016-10-11T07:26:03.122Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fc93d384f1db06149d4dc9"
    text: "Github access is working now, in Turkey."
    sent: "2016-10-11T07:25:07.336Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57fc71da0aa72e3c5beffc96"
    text: {@dockimbel Never mind, it was something wrong with my code :smile: }
    sent: "2016-10-11T05:00:10.850Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57fc6af870fcb5db0c47a537"
    text: "@nc-x It should work. Any example code?"
    sent: "2016-10-11T04:30:48.007Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fc68e4d6251fd126ab0fd1"
    text: {@dockimbel ^/Red scripts containing preprocessor directives work when compiled but give error when interpreted. ^/Is the preprocessor a WIP and this will be fixed before release? or Is this expected behaviour? }
    sent: "2016-10-11T04:21:56.974Z"
    editedAt: "2016-10-11T04:25:36.956Z"
    v: 4
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57fc689a70fcb5db0c479fb6"
    text: "@nc-x Thank you for the update."
    sent: "2016-10-11T04:20:42.446Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc687084f1db06149cc04c"
    text: {@TimeSlip  Android version will be part of next release, not this release. So no work has been done on it yet.}
    sent: "2016-10-11T04:20:00.811Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57fc58b468f560d80cf4b04d"
    text: {@dockimbel , Thanks for the help in red/help. BTW, how's the Android version coming along?}
    sent: "2016-10-11T03:12:52.898Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fbab734fde7203142534a9"
    text: {Gui-console can only be compiled in release mode (-r), it cannot use libRedRT, due to some tight coupling with the runtime library (mostly because of printing functions mutual dependencies).}
    sent: "2016-10-10T14:53:39.407Z"
    editedAt: "2016-10-10T14:54:38.920Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fbab10a7c618cd26fc166e"
    text: {Can we compile gui-console from R2 console via `rc`already?}
    sent: "2016-10-10T14:52:00.055Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57fba9cb4fde720314252bd1"
    text: {@dockimbel I tried running from the Rebol console and it compiles alright.}
    sent: "2016-10-10T14:46:35.431Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57fba682d6251fd126a877f7"
    text: {@7hi4g0 I cannot reproduce your error with the latest auto-build, I get a libRedRT-related error rather.}
    sent: "2016-10-10T14:32:34.275Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fba31668f560d80cf214e2"
    text: {We haven't much tested the binary version of the toolchain, just from sources. Let me give it a try.}
    sent: "2016-10-10T14:17:58.252Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fb9d5c70fcb5db0c44b6da"
    text: "Bug?"
    sent: "2016-10-10T13:53:32.821Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57fb9d580aa72e3c5becf38e"
    text: {`red -c` does not work for me on Linux.^/It always give me `*** Error: cannot access argument file`.}
    sent: "2016-10-10T13:53:28.555Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57fb8d9768f560d80cf1b513"
    text: {great work! now really need a vpn to get those changes :worried: }
    sent: "2016-10-10T12:46:15.238Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
)#(
    id: "57fb888b68f560d80cf1a09c"
    text: {If you want to get back to old toolchain behavior, just specifiy `-r` on command-line.}
    sent: "2016-10-10T12:24:43.064Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fb88040aa72e3c5bec994b"
    text: {@maximvl Nope, user code stays in the executable (as you need to recompile it often, which is why the runtime is precompiled in a shared library). LibRedRT is only for Red's runtime code  + modules. Currently the list of modules is fixed, but it will be possible to set it manually soon. On Windows, you get View module precompiled in libRedRT.}
    sent: "2016-10-10T12:22:28.112Z"
    editedAt: "2016-10-10T12:23:28.468Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fb879fdfe82a365b11cbcd"
    text: {@dockimbel about #5 - will that R/S code go directly into libRedRT?}
    sent: "2016-10-10T12:20:47.396Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fb879068f560d80cf19cc8"
    text: "@dockimbel great thanks!"
    sent: "2016-10-10T12:20:32.912Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fb86c184f1db0614998ecc"
    text: {I have just merged libRed branch to master. The toolchain now behaves differently, so here is a brief overview:^/1. Compilation of Red scripts now has two modes: development and release.^/2. Development mode (or just "dev mode") is the default one, release mode is achieved with an extra `-r` or `--release` compilation option.^/3. Dev mode will first build the Red runtime as a shared library (libRedRT) and reuse it across compilations. It will put it in the working folder, along with some other temporary libRedRT* files. You can freealy delete them at any time.^/4. Dev mode provides much faster compilation time, by compiling only user code and not the Red runtime library.^/5. If your Red scripts contains R/S code and relies on Red runtime API, you should compile once with `-u` option, to force a custom update of libRedRT (takes a bit of time), then you can compile as usual and enjoy fast compilation too.^/6. Pure R/S scripts are unaffected by those changes, so they are handled as usual.^/^/There are still some details we need to work on, but it is already very usable as is.}
    sent: "2016-10-10T12:17:05.705Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fb868370fcb5db0c444edf"
    text: "@endo64 Time to install a VPN. ;-)"
    sent: "2016-10-10T12:16:03.932Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fb5d4c68f560d80cf102a0"
    text: {Here people and companies cannot push government to not look like they are on the same side with terrorists. So we just wait.}
    sent: "2016-10-10T09:20:12.213Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57fb5b7fa7c618cd26fad200"
    text: {ok, in Russia we had similar thing, but Github ban had too much impact on IT companies, so they pushed government to unblock it back}
    sent: "2016-10-10T09:12:31.334Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fb587da7c618cd26fac77b"
    text: {Turkey :( when ever some people put some files, documents etc. on some platform, that government thinks that they related to terrorism (sometimes they are probably) they block the whole access to the system, it happened to twitter, Facebook or file sharing platforms time to time. The stupid thing is blocking the whole system, not just the file or subdomain.. Anyway its not the place to chat here. }
    sent: "2016-10-10T08:59:41.411Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57fb542868f560d80cf0df77"
    text: {@maximvl turkey - https://turkeyblocks.org/2016/10/08/google-drive-dropbox-blocked-in-turkey/}
    sent: "2016-10-10T08:41:12.382Z"
    editedAt: "2016-10-10T08:43:01.136Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57fb4e4d0aa72e3c5bebc7c9"
    text: "@endo64 wow, which country is it?"
    sent: "2016-10-10T08:16:13.859Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57fb4accd6251fd126a71191"
    text: "Wow. That’s sad :("
    sent: "2016-10-10T08:01:16.150Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fb479e70fcb5db0c43613f"
    text: {I cannot even see gists, how stupid government officers we have.. sorry for the bad words, but they really are.}
    sent: "2016-10-10T07:47:42.612Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57fb4742d6251fd126a70381"
    text: {> @endo64 Should be easy enough to fix by a contributor. ;-)^/^/I know I tried to fix but my f**** government blocks access to whole github so I cannot even pull the latest sources :( (they blocked dropbox, gdrive, onedrive too)}
    sent: "2016-10-10T07:46:10.205Z"
    editedAt: "2016-10-10T07:46:19.576Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57fb3865d6251fd126a6d757"
    text: {Yeah. I assumed it was a trivial (albeit internal) fix.}
    sent: "2016-10-10T06:42:45.231Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57fb3849dfe82a365b10ad15"
    text: {@dahu It's possible that Rebol's stack is deeper by default, we can increase Red's one to match it.}
    sent: "2016-10-10T06:42:17.371Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fb35134fde720314236516"
    text: {Ackerman function causes stack overflow in Red: https://gist.github.com/dahu/66989ec585654726b97bb4124deb9713}
    sent: "2016-10-10T06:28:35.746Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57fb304984f1db06149862d6"
    text: {@endo64 Should be easy enough to fix by a contributor. ;-)}
    sent: "2016-10-10T06:08:09.221Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fac83868f560d80cef813d"
    text: {`?` function doesn't mold strings,^/```^/o: context [a: "te^^/st"]^/? o^/^/`o` is an object! of value:^/     a                string!   te^/st^/```}
    sent: "2016-10-09T22:44:08.251Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57faa823a7c618cd26f8f578"
    text: "sorry - random keypressing above!"
    sent: "2016-10-09T20:27:15.188Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57fa8bf90aa72e3c5be9c1e8"
    text: "zity"
    sent: "2016-10-09T18:27:05.258Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57fa2b3568f560d80cedc139"
    text: {@maximvl Not a bug. View will not create a string until you start putting something in the field. You can use it to check if the field has been previously used or not.}
    sent: "2016-10-09T11:34:13.484Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fa166ea7c618cd26f74acf"
    text: {not sure if it's a bug or not, but by default view `field/text` has `none` value, but if you type and delete text it becomes empty string}
    sent: "2016-10-09T10:05:34.363Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f9184a70fcb5db0c3d74fe"
    text: {https://doc.red-lang.org/gui/View.html^/http://doc.red-lang.org/gui/VID.html^/http://doc.red-lang.org/gui/Draw.html^/http://doc.red-lang.org/reactivity.html}
    sent: "2016-10-08T16:01:14.377Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f905c00aa72e3c5be57b13"
    text: {I just need, for now, a basic way to convert a face tree to graphical regions.}
    sent: "2016-10-08T14:42:08.236Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "57f90508a7c618cd26f45ef0"
    text: "just read few blog posts on the red-lang.org site"
    sent: "2016-10-08T14:39:04.591Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f904f60aa72e3c5be57391"
    text: {it also has very nice gui console, coded in Red View}
    sent: "2016-10-08T14:38:46.197Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f904e468f560d80cea8a80"
    text: {Along with reactive programming - look at the demo - http://www.red-lang.org/2016/07/eve-style-clock-demo-in-red-livecoded.html}
    sent: "2016-10-08T14:38:28.221Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f904b6dfe82a365b0a8dc8"
    text: "Yes, it does ..."
    sent: "2016-10-08T14:37:42.963Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f904b10aa72e3c5be572ec"
    text: ":-)"
    sent: "2016-10-08T14:37:37.939Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f90441dfe82a365b0a8c1a"
    text: {hasn't really moved since last I talked about it on AltME. I figured, it's better to code than talk. So Red has a View engine now?}
    sent: "2016-10-08T14:35:45.013Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "57f9026ed6251fd126a0ffa8"
    text: {underlying View engine differs though. Red provides native widgets mapping, although it has identical drawing primitives as R2}
    sent: "2016-10-08T14:27:58.769Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f9022684f1db0614928092"
    text: "how far is your projects?"
    sent: "2016-10-08T14:26:46.949Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f901c30aa72e3c5be569f7"
    text: {thanks, pekr. contemplating continuing VID Junior development with R2 as the starting point and object manipulation is the key feature in it. if I could bring it directly to Red without changes, that would be a big step.}
    sent: "2016-10-08T14:25:07.618Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "57f8fcf084f1db06149271bf"
    text: "@rebolek  - re round - I see your point. Thanks"
    sent: "2016-10-08T14:04:32.956Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57f8fc7e4fde7203141d578a"
    text: {You can read Future evolutions part of the blog post - http://www.red-lang.org/2014/12/050-objects-support.html}
    sent: "2016-10-08T14:02:38.751Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f8fbfb0aa72e3c5be55826"
    text: {I think it is just the same, but not sure about the details ... Object support is available since 0.5.0, which was released a long time ago, hence objects are not experimental, but should be fully supported feature ...}
    sent: "2016-10-08T14:00:27.541Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f8fb4070fcb5db0c3d0c90"
    text: {is there anything that Red can't do with objects that R2 can?}
    sent: "2016-10-08T13:57:20.057Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "57f8f7f084f1db0614926302"
    text: {Red also introduced so called reactive programming support ...}
    sent: "2016-10-08T13:43:12.771Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f8f7d8dfe82a365b0a6675"
    text: {Notice objects in Red have broader functionality - offering on-change callback ....}
    sent: "2016-10-08T13:42:48.519Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f8f76170fcb5db0c3d021d"
    text: "thanks, pekr"
    sent: "2016-10-08T13:40:49.518Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "57f8f6264fde7203141d4661"
    text: "http://www.red-lang.org/search/label/objects"
    sent: "2016-10-08T13:35:34.072Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f8f5f20aa72e3c5be5473d"
    text: "Hi Henrik. Yes, for quite some time already ..."
    sent: "2016-10-08T13:34:42.800Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f8f5d3d6251fd126a0d97d"
    text: {hi, all. been a while. does Red have object support yet?}
    sent: "2016-10-08T13:34:10.999Z"
    v: 1
    author: "5571645815522ed4b3e175c3"
) #(
    id: "57f8bb13dfe82a365b09c222"
    text: {Thank you Doc, both `/skip ` and crash issue solved now.}
    sent: "2016-10-08T09:23:31.247Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57f8aad4bb20dfad43c41ee2"
    text: {@mikeparr it makes sense, see this:^/```^/red>> round/to 3.14 0.1^/== 3.1^/```}
    sent: "2016-10-08T08:14:12.063Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f8aa4470fcb5db0c3c2fcf"
    text: {Q on return type of round.  I was expecting it to always return an integer type, but  it normally returns float! - unless the arg is an integer!.^/```^/Red 0.6.1 - 1-Oct-2016/10:43:56+1:00^/red>> type? round 1.5^/== float!^/red>> type? round 2.0^/== float!^/red>> type? round 2^/== integer!^/```}
    sent: "2016-10-08T08:11:48.812Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57f8837fdfe82a365b093ff4"
    text: "@endo64 Issue fixed now."
    sent: "2016-10-08T05:26:23.811Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f8656068f560d80ce8e7f7"
    text: "@endo64 Looks like a bug, `/skip` is not honored."
    sent: "2016-10-08T03:17:52.834Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f81f7284f1db0614905a1e"
    text: {There is a small difference in `new-line` function on Red and Rebol,^/```^/red>> new-line/skip [1 2 3 4] true 2^/== [^/    1 2 3 4^/]^/^/R2> new-line/skip [1 2 3 4] true 2^/== [^/    1 2^/    3 4^/]^/```^/}
    sent: "2016-10-07T22:19:30.021Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
)#(
    id: "57f7dde614e9dbfd785745ee"
    text: {Not sure about displays, but security is well know limit of IoT devices ;)}
    sent: "2016-10-07T17:39:50.542Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7da12dfe82a365b074156"
    text: "IoT devices with limited displays?"
    sent: "2016-10-07T17:23:30.769Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7cc29a7c618cd26f0dd87"
    text: {`irx` Or on a raspberrypi which doesn't GUI installed.}
    sent: "2016-10-07T16:24:09.762Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "57f7c73170fcb5db0c399ef0"
    text: {the only reason I see for text UI is you can use it with applications running remotely}
    sent: "2016-10-07T16:02:57.133Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f7c6fa84f1db06148eedbb"
    text: {@nc-x It would be nice to have, though, as you know, we don't have the resources for that in the Red team currently. Hopefully, after a few more GUI backends, it should be relatively easy for someone to pick up such task, and contribute extra backends.}
    sent: "2016-10-07T16:02:02.277Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f7c6bed6251fd1269d99ca"
    text: "why would you want one?"
    sent: "2016-10-07T16:01:02.432Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f7c5b60aa72e3c5be1dd78"
    text: {@dockimbel any plans to have text based ui  backend for view - something like DlangUI has (see in this blog post) - https://dlang.org/blog/2016/10/07/project-highlight-dlangui/}
    sent: "2016-10-07T15:56:38.243Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57f7c21fd6251fd1269d83d6"
    text: {I think it makes sense to add timezone conversion to date/time compare functions}
    sent: "2016-10-07T15:41:19.020Z"
    editedAt: "2016-10-07T15:41:46.294Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f7afcf0aa72e3c5be164c8"
    text: {I wondered many times why the [Red updater script](https://gist.github.com/dockimbel/22d3c007fffab0e3388d#file-red-updater-r) always updates, even if run just a second ago on my system.^/I found today : `modified?` on URL does not set timezone, so the date/time comparison is wrong.^/So I patched my script with this lines, and now it works fine:^/```^/path-to-red-executable: %/path/to/folder/filename-without-extension^/timezone: 8:00    ; Xiamen, China TZ^/^/if environ/win? [append path-to-red-executable ".exe"]^/^/update-required?: does [^/^-t: modified? site^/^-t/zone: timezone^/^-t > modified? path-to-red-executable^/]^/```}
    sent: "2016-10-07T14:23:11.906Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f73a11470c6bb20f5dadc6"
    text: "That would be nice."
    sent: "2016-10-07T06:00:49.446Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f73a0268f560d80ce4aacc"
    text: {Cool!—Definitely worth the look to see if it's feasible.}
    sent: "2016-10-07T06:00:34.241Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57f738d7dfe82a365b04a18a"
    text: {@rgchris I had a quick look back at Parse implementation, it seems there is a way to include `keep` in the backtracking process. I should give it a try later today.}
    sent: "2016-10-07T05:55:35.291Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f71581a7c618cd26ee3b89"
    text: {You do lose out in expressivity though and definitely needs to be marked as *user beware* (see above JSON bug as an example where even seasoned users are tripped up).}
    sent: "2016-10-07T03:24:49.087Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57f70fbd68f560d80ce444ed"
    text: {**keep** behavior is consistent with how backtracking works in Parse, as it only affects input and rule positions, all other changes are final. Including arbitrary state changes in backtracking seems not only very complex and expensive to implement, but I'm also unsure if it can be made accurate in all cases (as related state changes might happen in the environment due to (future) concurrency).}
    sent: "2016-10-07T03:00:13.516Z"
    editedAt: "2016-10-07T03:08:51.507Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f70cdda9a0a333752fee4c"
    text: {But it makes sense that `keep` should work only with successful rule.}
    sent: "2016-10-07T02:47:57.676Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f70cbfa9a0a333752fee48"
    text: "True."
    sent: "2016-10-07T02:47:27.646Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f70c5d84f1db06148c48bb"
    text: {At least in this case, you can switch around to say:^/`array: [#"[" collect opt [ws value any [ws #"," ws value]] ws #"]"]`}
    sent: "2016-10-07T02:45:49.549Z"
    editedAt: "2016-10-07T02:49:09.028Z"
    v: 5
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57f70bf568f560d80ce43cd7"
    text: {It may be a case of *user beware*, but I can't shake the sense that **keep** should only stick if part of a successful branch.}
    sent: "2016-10-07T02:44:05.691Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57f70b3b4fde720314172d0a"
    text: {```rebol^/parse ["a"] [collect [keep "a" keep "b" | keep "a"]]^/```}
    sent: "2016-10-07T02:40:59.279Z"
    editedAt: "2016-10-07T02:41:19.275Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57f70aefa7c618cd26ee2273"
    text: {I'd say this is the weakest part of the collect/keep implementation as-is.}
    sent: "2016-10-07T02:39:43.605Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57f70ae5a9a0a333752fee3d"
    text: {`array: [#"[" collect opt [any [ws value #","] ws value] ws #"]"]`}
    sent: "2016-10-07T02:39:33.876Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f70ace14e9dbfd78573369"
    text: "@rgchris that’s what it exactly is"
    sent: "2016-10-07T02:39:10.690Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f70ab34fde720314172b7c"
    text: {Any chance this is an issue with **collect** honouring a **keep** from a failed branch?}
    sent: "2016-10-07T02:38:43.573Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57f709f6470c6bb20f5dabb1"
    text: {@qtxie However your version still has the array bug:^/```^/red>> json/decode {["a","b"]}^/== [["a" "b" "b"]]^/```}
    sent: "2016-10-07T02:35:34.754Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7099314e9dbfd78573354"
    text: "@qtxie great, thanks for sharing!"
    sent: "2016-10-07T02:33:55.623Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f70985470c6bb20f5dabab"
    text: "@rgchris good question, I didn’t even notice :)"
    sent: "2016-10-07T02:33:41.570Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f6e61970fcb5db0c36a673"
    text: "@dockimbel thanks, sounds good!"
    sent: "2016-10-07T00:02:33.091Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57f6d34268f560d80ce3ac7d"
    text: {https://gist.github.com/qtxie/445dff8fba8a9eb8b82df7f3a055841d}
    sent: "2016-10-06T22:42:10.249Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f6d33784f1db06148bb2ed"
    text: {@rebolek I also improved it when I made the VSCode plugin. I also add `encode` function. :-)}
    sent: "2016-10-06T22:41:59.131Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f6b3a10aa72e3c5bde1639"
    text: {@rebolek I know you said ignore, but is there any reason why **hexa** doesn't include 'F' ?}
    sent: "2016-10-06T20:27:13.251Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57f6ab53a9a0a333752fe5a0"
    text: {Ignore my last message, I introduced new bugs and now I can’t delete it.}
    sent: "2016-10-06T19:51:47.967Z"
    editedAt: "2016-10-06T19:51:53.068Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f6a8a2a9a0a333752fe532"
    text: {I made few fixes to JSON parser by @dockimbel , now it converts tabs too and array conversion is fixed (it included last value twice). You can get it here: https://gist.github.com/rebolek/93d7e958a0abde838b72890d1692d86b}
    sent: "2016-10-06T19:40:18.464Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f6a2874fde72031415e3f4"
    text: "do you think Red can do better? ;)"
    sent: "2016-10-06T19:14:15.495Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f6a27a70fcb5db0c35baa9"
    text: "download size is ~35MB"
    sent: "2016-10-06T19:14:02.372Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f6a26cdfe82a365b02d379"
    text: {fyi: modern cool terminal in JS/HTML/CSS: https://hyper.is/}
    sent: "2016-10-06T19:13:48.748Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f66fe5d6251fd12698e5c6"
    text: {@pekr Certainly, but for now, the optional modules are limited.}
    sent: "2016-10-06T15:38:13.125Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f66e6c4fde72031414e24f"
    text: {@dockimbel some time ago we used an embedded programming environment (Ubicom, now Qualcomm), which provided a GUI tool, where you simply clicked/ticked modules/parts you want to have available. Do you think we could have a visual tool, which would allow us to (de)select, what goes inside the runtime, etc.?}
    sent: "2016-10-06T15:31:56.394Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f66d3c70fcb5db0c34b6a2"
    text: {@raimundasa  Sorry for late reply. Please be more specific on repeat problem. AFAICT  the docs look OK ... In first example a value is returned. In second example an error occurs because x is local. In third example value of y is only printed, so not used outside repeat.}
    sent: "2016-10-06T15:26:52.779Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "57f66a1768f560d80ce1d7a3"
    text: {@JacobGood1 Hello! Not yet, though libRed allows you to compile Red + R/S code very quickly now (just wait a couple more days for libRed branch to be merged into master).}
    sent: "2016-10-06T15:13:27.803Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f65cfaa7c618cd26eb76c2"
    text: "yep, makes sense"
    sent: "2016-10-06T14:17:30.075Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f65ccebb20dfad43c3ebc8"
    text: {Current compiler is written in Rebol. So you can’t expect it before the compiler is rewritten to Red.}
    sent: "2016-10-06T14:16:46.618Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f65bbed6251fd12698742f"
    text: {I suppose he was thinking of a more "built-in" way, and others might wish the same, but it is clear that that is not (yet?) on the books.}
    sent: "2016-10-06T14:12:14.328Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57f65b8e14e9dbfd78571e46"
    text: {Then you can call Rebol to compile R/S function and import resulting DLL.}
    sent: "2016-10-06T14:11:26.068Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f65b6ca9a0a333752fd92d"
    text: {You must compile REPL with `call` support, so you can run Rebol from Red.}
    sent: "2016-10-06T14:10:52.598Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f65b53a9a0a333752fd92b"
    text: "Well, it is possible, but not easy."
    sent: "2016-10-06T14:10:27.177Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f65af40aa72e3c5bdc618b"
    text: {So what Jacob is asking for is being able, in the REPL,  to invoke the compiler on a (fragment of) Red + Red/System code and then to execute the resulting compiled code. That seems like a tall order.}
    sent: "2016-10-06T14:08:52.510Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57f65a63a9a0a333752fd912"
    text: {You can compile your own REPL with required R/S code.}
    sent: "2016-10-06T14:06:27.958Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f65a45470c6bb20f5d9669"
    text: "no, R/S code must be compiled right now."
    sent: "2016-10-06T14:05:57.855Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f65a21dfe82a365b016735"
    text: "Can the REPL handle R/S code at all?"
    sent: "2016-10-06T14:05:21.017Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57f64edda7c618cd26eb3000"
    text: {good question, is the R/S code available in runtime?}
    sent: "2016-10-06T13:17:17.496Z"
    editedAt: "2016-10-06T13:17:36.821Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57f64ecf70fcb5db0c340bbc"
    text: "ah, I see"
    sent: "2016-10-06T13:17:03.329Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f64e684fde720314143344"
    text: {I want to be able to manipulate and compile reds code from red, even in the repl =)}
    sent: "2016-10-06T13:15:20.163Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57f64e284fde7203141431b2"
    text: {@JacobGood1 do you want something here to happen in compile time?}
    sent: "2016-10-06T13:14:16.856Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f64c4d84f1db0614894c0e"
    text: {@dockimbel hello Doc =), nice discussion here... are we able to compile something like:^/^/```^/;hypothetical code^/func [code] [^/    create-some-system-code-here: parse code manipulate-code-rule ^/    do system create-some-system-code-here^/]^/```^/^/I asked this question a while ago but I have not kept up with things}
    sent: "2016-10-06T13:06:21.375Z"
    editedAt: "2016-10-06T13:06:40.675Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57f64a14dfe82a365b011850"
    text: "I see, great! :)"
    sent: "2016-10-06T12:56:52.195Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f649e10aa72e3c5bdc0e06"
    text: "Precisely. ;-)"
    sent: "2016-10-06T12:56:01.892Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f649d2dfe82a365b01174e"
    text: {that's interesting, so we will have metaprogramming capabilities in both, runtime and compile time}
    sent: "2016-10-06T12:55:46.881Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f6499370fcb5db0c33f3e5"
    text: {@maximvl The latter one. Preprocessing source code in string form, is trivial to do already.}
    sent: "2016-10-06T12:54:43.457Z"
    editedAt: "2016-10-06T12:55:30.315Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f6497b68f560d80ce12e85"
    text: {@dockimbel are you aiming for C-like string insertion macros, or Lisp-like AST ones?}
    sent: "2016-10-06T12:54:19.310Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f648e7dfe82a365b011301"
    text: "@maximvl Macros will be part of the preprocessor."
    sent: "2016-10-06T12:51:51.149Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f6482cdfe82a365b011075"
    text: "is this somehow different from macros?"
    sent: "2016-10-06T12:48:44.680Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f6480c4fde7203141417cc"
    text: {@maximvl Because we have a compiler, so we want to take advantage of compile-time to modify the code when needed.}
    sent: "2016-10-06T12:48:12.837Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f6416e68f560d80ce109f1"
    text: "to me it sounds like a practice from C times"
    sent: "2016-10-06T12:19:58.005Z"
    editedAt: "2016-10-06T12:20:02.962Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f6414d70fcb5db0c33cc40"
    text: "@dockimbel why do we need a preprocessor?"
    sent: "2016-10-06T12:19:25.779Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f6176d43b5aeb0099f94da"
    text: "@pekr A preprocessor for Red source code."
    sent: "2016-10-06T09:20:45.115Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f6104229403a416fce3c87"
    text: {@dockimbel - sorry for my lack of knowledge, but - what are "compilation directives at Red level" good for?}
    sent: "2016-10-06T08:50:10.843Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f547dd43b5aeb0099d354b"
    text: {i like `tag!` too, but this discussion is opening up lots of directions :)}
    sent: "2016-10-05T18:35:09.162Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f5389e3c59573f6f0f0961"
    text: "Getting into much bigger design questions though."
    sent: "2016-10-05T17:30:06.307Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f538448b26e33e7d2d2732"
    text: {I considered $$$ in the past, because it's as close as you can get to § with a normal key. But I don't like conflating the currency symbol.}
    sent: "2016-10-05T17:28:36.803Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f537b8f69c94ad09904b42"
    text: {<sigil+><marker string> content... <marker string>}
    sent: "2016-10-05T17:26:16.600Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f5376391d6af1152304464"
    text: "IIRC, yes."
    sent: "2016-10-05T17:24:51.215Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f53735d45d7f0f5265fe81"
    text: "That's the Heredoc spec, right? "
    sent: "2016-10-05T17:24:05.402Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f536fc29403a416fcba19e"
    text: {@greggirwin We would need an optional unique sequence to identify the ending (when needed). IIRC Python's Heredoc has such feature.}
    sent: "2016-10-05T17:23:08.767Z"
    editedAt: "2016-10-05T17:23:15.808Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f536b6d45d7f0f5265fcc3"
    text: {But if ''' is used (or some other syntax), what distinguishes the contents from a regular string?}
    sent: "2016-10-05T17:21:58.942Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f5366ad45d7f0f5265fbe3"
    text: {Ick. ;^^) I suppose it's as valid as Heredoc though.}
    sent: "2016-10-05T17:20:42.699Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f535f1f69c94ad09904566"
    text: {@greggirwin `note!` could be valuable for a multi-line oriented type, maybe something using triple quotes.}
    sent: "2016-10-05T17:18:41.247Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f5359ff69c94ad099043ce"
    text: {`note!` is one I hadn't thought of before, as an alternate name for `issue!`. A common theme in its uses is to denote something.}
    sent: "2016-10-05T17:17:19.946Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f533b18b26e33e7d2d1323"
    text: "And `issue!` is multipurpose, as `ref!` will be."
    sent: "2016-10-05T17:09:05.218Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f533243c59573f6f0ef41c"
    text: {OTOH, this is a computer centric format, so we should define things in that context as well (e.g. `tag!`).}
    sent: "2016-10-05T17:06:44.223Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f532e1f69c94ad09903798"
    text: {My resistance to `hashtag!` is that it has a very specific meaning in current internet culture, and we want Red-as-data to last beyond Twitter and the hashtag fad.}
    sent: "2016-10-05T17:05:37.073Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f5325591d6af1152302ea6"
    text: "@greggirwin It's fine here for now. "
    sent: "2016-10-05T17:03:17.545Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f5320c0ec6f9457da47e40"
    text: {I can set up a Ren room for it if you want, to avoid more channels here.}
    sent: "2016-10-05T17:02:04.563Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f531bdd45d7f0f5265e933"
    text: {I don't think so. Mainly old chat on altme and some here, or maybe in the Ren room.}
    sent: "2016-10-05T17:00:45.681Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f53198d45d7f0f5265e8cd"
    text: {@greggirwin Did we have a page somewhere summing up the naming options for such new type?}
    sent: "2016-10-05T17:00:08.436Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f53149d45d7f0f5265e7a2"
    text: {Remember `at-tag!` was a proposed name, though I still like `ref!` better. I think the `*-tag!` idea isn't something we want to extend across sigils.}
    sent: "2016-10-05T16:58:49.202Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f530a23c59573f6f0eea85"
    text: {`tag!` is a nice name, but so general I sometimes wish it had been called `markup!`. }
    sent: "2016-10-05T16:56:02.725Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f530700ec6f9457da4782a"
    text: {@wolframkriesing_twitter We have plans to allow extending the Red lexer in an easy way (if possible), so when we'll add support for custom types, you should be able to define a new type entirely from high-level user code.}
    sent: "2016-10-05T16:55:12.462Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f530418b26e33e7d2d0308"
    text: "Moving from red/help"
    sent: "2016-10-05T16:54:25.029Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f530350ec6f9457da476a0"
    text: "/topic types and type names"
    sent: "2016-10-05T16:54:13.577Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f5195043b5aeb0099c740f"
    text: "you"
    sent: "2016-10-05T15:16:32.482Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57f4eddbd45d7f0f5264a538"
    text: "OK, thanks, got it ..."
    sent: "2016-10-05T12:11:07.221Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f4ed6b8b26e33e7d2bcb0f"
    text: "@pekr The answer is in the commit log."
    sent: "2016-10-05T12:09:15.306Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f4e89c43b5aeb0099b953f"
    text: {re renaming libRed to libRedRT (RT: runtime) ... couldn't we call it just Red/Runtime, libRT, libRed, libRuntime? I mean - do we need to free libRed for some other usage? libRedRT looks/sounds a bit cumbersome ...}
    sent: "2016-10-05T11:48:44.029Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f4c8fa43b5aeb0099b2a34"
    text: {yep, this is one of the cool things - reducing amount of native dependencies which your app may require}
    sent: "2016-10-05T09:33:46.892Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f4c8bed45d7f0f5264208e"
    text: {It is imo nice to have native R/S implementation - should show some Red + R/S power!}
    sent: "2016-10-05T09:32:46.409Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f4c87529403a416fc9d435"
    text: {Of course there might be some disadvantages - some speed panalty of R/S code vs C, plus - once the OpenCV library evolves, someone has to adapt RedCV too. But - in the case of wrapper, you have to adapt the wrapper too, so ...}
    sent: "2016-10-05T09:31:33.721Z"
    editedAt: "2016-10-05T09:32:20.279Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f4c873391be02318ce4f57"
    text: {AFAIK it is completely done in Red(/System), not a wrapper.}
    sent: "2016-10-05T09:31:31.333Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f4c8488b26e33e7d2b45e5"
    text: {I did not look (nor am I able to properly understand) into the low level, but R/S port might be quite straighforward, as the language is close to C in its nature?}
    sent: "2016-10-05T09:30:48.084Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f4c81b29403a416fc9d2c0"
    text: {I think that Francois started with the OpenCV wrapper for the 3.0 library. It still can be found on Github. Later on, he started to port OpenCV function to Red/System, providing it 1:1 Red routine wrappers.}
    sent: "2016-10-05T09:30:03.778Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f4c7928b26e33e7d2b43ba"
    text: {@pekr is RedCV is just an FFI for OpenCV or it's own implementation?}
    sent: "2016-10-05T09:27:46.528Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57f4c75991d6af11522e6817"
    text: {Good news from the RedCV camp - Francois got an PhD student involved in the project, new documentation is also in the works!}
    sent: "2016-10-05T09:26:49.796Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f4b767a9662a63571ce15d"
    text: "Tested with Wireshark, no headers, as in Windows."
    sent: "2016-10-05T08:18:47.103Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f4b707a9662a63571ce159"
    text: {@qtxie when pasted to console, I get same behavior as you (I haven’t inspected it with Wireshark yet, so I don’t know if it’s sending headers), when I run it from script, I get the crash I posted.}
    sent: "2016-10-05T08:17:11.599Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f4b6e90ec6f9457da27419"
    text: {```^/red>> system/platform^/== Linux^/red>> system/build^/== "5-Oct-2016/10:13:25+2:00"^/```}
    sent: "2016-10-05T08:16:41.749Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f4b69cd45d7f0f5263de3b"
    text: {```^/red>> print write/info http://httpbin.org/post  [POST [Header1: "text1"]]^/^/*** Runtime Error 1: access violation^/*** at: 08081372h^/```}
    sent: "2016-10-05T08:15:24.211Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f4b424982034f8405d03d7"
    text: {```^/red>> probe write/info http://api.gitter.im/v1/rooms/ [^/[        POST  [^/[            Accept: "application/json"^/[        ] {{test}}^/[    ]^/[403 #(^/    Etag: {W/"15-BOD3e569EKnzuMK5eYTqnA"}^/    Server: "nginx"^/    Content-Type: "application/json; charset=utf-8"^/    X-Powered-By: "Express"^/    Content-Length: "21"^/    Date: "Wed, 05 Oct 2016 08:03:33 GMT"^/    Vary: "X-HTTP-Method-Override"^/    Set-Cookie: {connect.sid=s%3AdoCCMGc3Oq_rnyY2GKGzojJfCkynIlbJ.5neoNP9yrjlwGiQE5BBrkhJZRIhrjYF5QhxX%2BIcZx5g; Path=/; HttpOnly}^/    Connection: "Close"^/) {{"error":"Forbidden"}}]^/```}
    sent: "2016-10-05T08:04:52.685Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f4b41f391be02318ce4db7"
    text: "For issue #2256, Seems it works on my OSX VM."
    sent: "2016-10-05T08:04:47.311Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f4b14246fa805160f62a1a"
    text: {@qtxie I just tested it on OSX and I get crash in both cases.}
    sent: "2016-10-05T07:52:34.307Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f4b0b946fa805160f62a06"
    text: "@qtxie Yes, I tested that on W7 VM."
    sent: "2016-10-05T07:50:17.315Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f4ac18391be02318ce4d31"
    text: "@rebolek The bugs are on Windows?"
    sent: "2016-10-05T07:30:32.828Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f49a01982034f8405d0219"
    text: "See #2256 and #2257"
    sent: "2016-10-05T06:13:21.388Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f4956a982034f8405d01d4"
    text: {@dockimbel also, can you give me some example of POST, so I can be sure I am doing it right? ;)}
    sent: "2016-10-05T05:53:46.237Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f49404a9662a63571cdf2d"
    text: "@dockimbel Thanks for info, I will."
    sent: "2016-10-05T05:47:48.069Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f492198b26e33e7d2a9602"
    text: {@rebolek HTTP POST should be working fine. Yes, you can report bugs for it.}
    sent: "2016-10-05T05:39:37.407Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f4491c29403a416fc86edc"
    text: "That looks good, @greggirwin , for combination."
    sent: "2016-10-05T00:28:12.972Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f41ac8a9662a63571cd6b3"
    text: {I know that IO is not finished, but there is some simple IO already and it seems there is POST for HTTP. Should I expect it to work? Should I report bugs for it?}
    sent: "2016-10-04T21:10:32.119Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3e52943b5aeb009984d3e"
    text: {This Red room has the most people, but for those new to Red, or wanting to ask questions, there are also https://gitter.im/red/help and https://gitter.im/red/red/welcome. Don't hesitate to ask questions there, or ask a question on SO and put a link here so someone can answer there.}
    sent: "2016-10-04T17:21:45.611Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f3e353f69c94ad098b8e36"
    text: {Thanks Mike! I think you're OK as you link to the download page as well, and you're not including a license key for a paid version.}
    sent: "2016-10-04T17:13:55.894Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f3d2da43b5aeb00997fc8c"
    text: {I uploaded a new version of the Ride editor (http://www.mikeparr.info/redlang.html), now with pretty-printer.  BTW I included a version of R2 in the zip - is this legal?}
    sent: "2016-10-04T16:03:38.636Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57f3bcad0ec6f9457d9f1c73"
    text: {:point_up: [October 4, 2016 3:15 AM](https://gitter.im/red/red?at=57f3732f91d6af115229bec9) @dahu, something like this?^/```^/recombine: func [^/   "Returns a block containing all possible combinations of sub-block values"^/    blocks [block!] "Block of sub-blocks whose values you want to combine"^/    start  [block!] "Used as an accumulator"^/][^/    collect [^/        either tail? blocks [keep reduce [start]] [^/            foreach val first blocks [^/                keep recombine  next blocks  append copy start val^/            ]^/        ]^/    ]^/]^/^/red>> x: [[a b c] [1 2 3]]^/== [[a b c] [1 2 3]]^/red>> recombine x copy []^/== [[a 1] [a 2] [a 3] [b 1] [b 2] [b 3] [c 1] [c 2] [c 3]]^/^/red>> x: [[a b c] [1 2 3]]^/== [[a b c] [1 2 3]]^/red>> y: [[yes no] [-4.0 -5.0]]^/== [[yes no] [-4.0 -5.0]]^/red>> z: [[! & ?]  ["" {} []]]^/== [[! & ?] ["" "" []]]^/red>> recombine reduce [x y z] copy []^/== [[a b c yes no ! & ?] [a b c yes no "" "" []] [a b c -4.0 -5.0 ! & ?] [a b c -4.0 -5.0 "" "" []] [1 2 3 yes no ! & ?] [1 2 3 yes no "" "" []] [1 2 3 -4.0 -5....^/```}
    sent: "2016-10-04T14:29:01.681Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f3abd90ec6f9457d9ece90"
    text: "`irx` I tried to delete it, but :-("
    sent: "2016-10-04T13:17:13.766Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "57f3abaf43b5aeb009974e53"
    text: {`irx` Sorry this text somehow ended up in my textbuffer on mobile.}
    sent: "2016-10-04T13:16:31.304Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "57f3ab7a91d6af11522a850a"
    text: {`irx` I haven't posted any mezzanines lately, so here's a little one that uses the random function in Red, along with a few subtleties to keep in mind.^/^/sample: func [ "Return a random sample of series values" series [series!] size [integer!] "How many elements to return" ][ ; Copy the series so it isn't modified, but don't use copy/part ; on the random result, since we don't need to copy again. head clear at random copy series size + 1 ] red>> b: [1 2 3 4 5 6 7 8 9 10] == [1 2 3 4 5 6 7 8 9 10] red>> sample b 3 == [3 6 5] red>> b == [1 2 3 4 5 6 7 8 9 10] red>> s: "abcdefghijkl" == "abcdefghijkl" red>> sample s 4 == "klhd" red>> s == "abcdefghijkl"^/^/Note that the series arg is copied. That's because random will modify it in place. Ifven't used random, you may be surprised that it can operate on a series^/^/}
    sent: "2016-10-04T13:15:38.882Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "57f38c8dd45d7f0f525fc9da"
    text: {There is a separate chat room for Lisp related discussions - https://gitter.im/red/red/lisp}
    sent: "2016-10-04T11:03:41.010Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57f387260ec6f9457d9e4824"
    text: {I'm not up on the mathy-theory side of Bayes either, but from reading the manual, the `bool-chain` flag controls how non-existent tokens are considered and (presumably) activates the non-default chain-bayesian algorithm. The `context` is newlisp's namespace, object and hash/tree data structure. }
    sent: "2016-10-04T10:40:38.878Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f383da8b26e33e7d26c9a7"
    text: {@dahu So bayesian inference is done using 2 words, `bayes-train`, and `bayes-query`[Manual](http://www.newlisp.org/downloads/newlisp_manual.html#bayes-query), [wkibooks](https://en.wikibooks.org/wiki/Introduction_to_newLISP/Working_with_numbers#Bayesian_analysis)^/```^/(bayes-train list-M1 [list-M2 ... ] sym-context-D)^/(bayes-query list-L context-D [bool-chain [bool-probs]])^/```^/In redbol syntax would that be:^/```^/bayes-train [list1 list2 .. series!] /into context!^/bayes-query other-list context! /bool-chain bool-probs^/```^/I don't know enough about bayesian inference to know what bool-chain does.^/In addition, it also support logic programming, and the api is pretty well documented in the online manual}
    sent: "2016-10-04T10:26:34.551Z"
    editedAt: "2016-10-04T10:26:53.439Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f37f7cf69c94ad0989e566"
    text: {@geekyi  I like newlisp; Lutz has put a lot of love into it over the years}
    sent: "2016-10-04T10:07:56.502Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f37f3c29403a416fc54503"
    text: {@dahu [NewLisp](http://www.newlisp.org/downloads/manual_frame.html) , a 2.8MB [Install](http://www.newlisp.org/downloads/) on windows, implemented in a [single file!](https://github.com/kosh04/newlisp/blob/develop/newlisp.c) of 7k LOC C. }
    sent: "2016-10-04T10:06:52.197Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f37b5d29403a416fc539c8"
    text: {The binary includes a copy of Rebol so the self-hosted binary may well be smaller.}
    sent: "2016-10-04T09:50:21.347Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57f373ff0ec6f9457d9e0a3e"
    text: {@PeterWAWood in terms of size of resulting binary it's quite good, I'm not talking about extensibility or anything like this}
    sent: "2016-10-04T09:18:55.344Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f373960ec6f9457d9e0944"
    text: {And I've been meaning to ask if you've ever taken a look at NewLISP? It has built-in Bayes functions.}
    sent: "2016-10-04T09:17:10.511Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f3735b8b26e33e7d269204"
    text: {That's cool, @greggirwin . Now we need combination / permutation mezs.}
    sent: "2016-10-04T09:16:11.958Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f37331d45d7f0f525f736f"
    text: "meh"
    sent: "2016-10-04T09:15:29.687Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f3732f91d6af115229bec9"
    text: "That"
    sent: "2016-10-04T09:15:27.668Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f3452c3c59573f6f07e111"
    text: {And there's a lot going on in that one line. At first glance, especially if you're new to Red, it may take a minute to scan. Free ranging evaluation doesn't always give you clues about arg application, though you can use parens if you want. And as you write more Red, you'll find yourself building up lines like this step by step. ^/Notes:^/- We could use `copy/part` after using random on the series, but that's an extra copy we don't need. If that's clearer to you, there's nothing wrong in doing it that way. ^/- Instead, we use `clear` in combination with `at`. `At` specifies an offset in the series and `clear` removes everything after that.^/- Series! indexes are 1-based. `Size + 1` is used to start clearing just past the number of items we want.^/- `Clear` returns the new tail of the cleared series, but we want to return the `head` of it.}
    sent: "2016-10-04T05:59:08.129Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f342b83c59573f6f07d8bc"
    text: {I haven't posted any mezzanines lately, so here's a little one that uses the `random` function in Red, along with a few subtleties to keep in mind.^/```^/sample: func [^/^-"Return a random sample of series values"^/^-series [series!]^/^-size   [integer!] "How many elements to return"^/][^/^-; Copy the series so it isn't modified, but don't use copy/part^/^-; on the random result, since we don't need to copy again.^/    head clear at random copy series size + 1^/]^/red>> b: [1 2 3 4 5 6 7 8 9 10]^/== [1 2 3 4 5 6 7 8 9 10]^/red>> sample b 3^/== [3 6 5]^/red>> b^/== [1 2 3 4 5 6 7 8 9 10]^/red>> s: "abcdefghijkl"^/== "abcdefghijkl"^/red>> sample s 4^/== "klhd"^/red>> s^/== "abcdefghijkl"^/```^/Note that the `series` arg is copied. That's because `random` will modify it in place. If you haven't used `random`, you may be surprised that it can operate on a series rather than just reproducing a random number. It's a handy function, and is far more flexible than in languages where it only returns a value between 0 and 1. e.g.^/```^/red>> random 1:0:0^/== 0:45:04.20318372^/```^/And if you want it to select only a single random item from a series, use `random/only`.}
    sent: "2016-10-04T05:48:40.464Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f2e7ec91d6af1152282231"
    text: {Good design relative to Doc's ideal versus good design compared to most software? ;^^)}
    sent: "2016-10-03T23:21:16.193Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f2da4a29403a416fc32a38"
    text: {@maximvl I don't think that the bootstrap compiler is considered to have good design. I believe that it is monolithic and difficult to extend. The real Red compiler, that @dockimbel has in mind, will be well designed, modular and easy to extend. }
    sent: "2016-10-03T22:23:06.954Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57f275e8f69c94ad09863416"
    text: {rebol/red is one of the things that really excite me on the web, sure I am using all the hippest shit, JS, react, react-native ... but they are all not really game changer, but red feels like it could be.}
    sent: "2016-10-03T15:14:48.948Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f2751891d6af115226493a"
    text: {@dockimbel thx for the answer, actually my question 1) was rather a rhetorical one, I read all info I could find on the web and am following/playing with rebol/red since >5years ... now I am trying to dive in a bit more, hoping to keep up. Great work everyone!!! Keep it up}
    sent: "2016-10-03T15:11:20.833Z"
    editedAt: "2016-10-03T15:13:47.362Z"
    v: 2
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f26d5a91d6af115226204d"
    text: {well, yeah, my point was that it is a compiler has a good design and implementation, rather than Rebol's direct feature}
    sent: "2016-10-03T14:38:18.308Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f26956fb0028975a4f8142"
    text: "It will be rewritten in Red eventually."
    sent: "2016-10-03T14:21:10.993Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f2694571cb81d37384702c"
    text: "Yes, you can."
    sent: "2016-10-03T14:20:53.051Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f26920d45d7f0f525bc2ed"
    text: "you can write same compiler in any language"
    sent: "2016-10-03T14:20:16.638Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f2690d43b5aeb00992bd7f"
    text: {yes, but 1M binary result is because the compiler is good}
    sent: "2016-10-03T14:19:57.393Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f2690bf69c94ad0985ee40"
    text: {@maximvl ^/> the size of Red binary is a result of compiler written by Red team^/^/Yes, currently written in rebol2 because it's stable. Only a temporary measure. It would get replaced by Red eventually}
    sent: "2016-10-03T14:19:55.975Z"
    editedAt: "2016-10-03T14:20:03.476Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f268f271cb81d373847013"
    text: {@maximvl what do you not get about it? The toolchain - compiler, linker, etc. - is written in Rebol.}
    sent: "2016-10-03T14:19:30.031Z"
    editedAt: "2016-10-03T14:19:39.554Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f26865fb0028975a4f8116"
    text: {You can take a look at the compiler [here](https://github.com/red/red/blob/master/system/compiler.r)}
    sent: "2016-10-03T14:17:09.033Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f26848d45d7f0f525bbf8d"
    text: {the size of Red binary is a result of compiler written by Red team}
    sent: "2016-10-03T14:16:40.195Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f2682ff69c94ad0985e871"
    text: {then I don't get this:^/>Moreover, as the toolchain is coded in Rebol, it is a testimony of how productive and efficient Rebol languages are}
    sent: "2016-10-03T14:16:15.867Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57f2681a0f8e273e6818d7a0"
    text: "Rebol interpreter compiles Red source."
    sent: "2016-10-03T14:15:54.211Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f267ddfb0028975a4f8104"
    text: "It takes Red source and emits executable."
    sent: "2016-10-03T14:14:53.719Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f267cb0f8e273e6818d79c"
    text: "@maximvl No, compiler is written in Rebol."
    sent: "2016-10-03T14:14:35.880Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f267af29403a416fc14ab4"
    text: {does it mean that Red binary contain Rebol interpreter inside?}
    sent: "2016-10-03T14:14:07.744Z"
    editedAt: "2016-10-03T14:14:23.628Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f2678771cb81d373846fd9"
    text: "@maximvl Rebol."
    sent: "2016-10-03T14:13:27.043Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f267648b26e33e7d22edbe"
    text: {@dockimbel wat, the Rebol toolchain is one thing, but what makes the final binary?}
    sent: "2016-10-03T14:12:52.066Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57f249f791d6af11522580c2"
    text: "zity"
    sent: "2016-10-03T12:07:19.974Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57f240443c59573f6f04234a"
    text: {Got it, thanks to your mention : https://gitter.im/geekyi/Lobby}
    sent: "2016-10-03T11:25:56.596Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f23ffcf69c94ad098532fd"
    text: "Simply put the URL, no?"
    sent: "2016-10-03T11:24:44.787Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f23e2c0ec6f9457d99b2db"
    text: "@DideC How do you link to rooms? "
    sent: "2016-10-03T11:17:00.831Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f23dcaf69c94ad09852a7a"
    text: "@geekyi A link would be easier !"
    sent: "2016-10-03T11:15:22.381Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f22c88d38f186520bda5f1"
    text: {@PeterWAWood sorry, "Geeky's tests/Lobby" for anyone who wants to test}
    sent: "2016-10-03T10:01:43.999Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f22c1e16c373622020eff4"
    text: {Please don't flood this channel with chat about Gitter bots. It would be best to open another chat channel. Let me know if you have difficulty doing so. }
    sent: "2016-10-03T09:59:58.741Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57f22bcad38f186520bda38d"
    text: {@matrixbot irx ^/`read https://www.gitter.im` Windows 10 works for me with latest(?) red binary}
    sent: "2016-10-03T09:58:34.659Z"
    editedAt: "2016-10-03T09:59:40.096Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f22b1f859fdb9f4d1e7502"
    text: "@matrixbot OSX."
    sent: "2016-10-03T09:55:43.988Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f22af334a8d5681cd8f776"
    text: {`irx` @Boleslav Březovský: On which platform are you, I get a segmentation fault on the exact same call.}
    sent: "2016-10-03T09:54:59.953Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "57f22ae4c512d9653a612e8c"
    text: {`irx` @Boleslav Březovský: On which platform are you, I get a segmentation fault on the exact call.}
    sent: "2016-10-03T09:54:44.197Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "57f21e91c512d9653a6102a1"
    text: {@wolframkriesing_twitter Welcome! Email! and tag! datatypes were added in the current master branch, we mark then as done in the "Road to 1.0" only when released officially. Note that in the "0.6.2 LibRed" card, they are marked as done though. To answer your other questions:^/*1) how can it be so tiny?*^/It is mostly because we have no external dependencies other than the OS (with exception to libCurl on Unix platform until 0.7.0). We've built our own toolchain and runtime library implementing only what is really needed. Moreover, as the toolchain is coded in Rebol, it is a testimony of how productive and efficient Rebol languages are. ;-)^/*2) How hard will it be to keep red up to date, when going so low-level? E.g. when a new MacOSX, Android, etc. version comes out, how much effort will red require to catch up?*^/We rely mostly on core OS APIs which are not changing between OS versions to another, so I can't recall we had to change anything inside our code because of a new OS update. Basically, if an OS will change its core API enough to break Red compatibility, you can expect most other software on that platform will be broken too, so unlikely to happen, except for major OS changes (like MacOS 9 => OS X).}
    sent: "2016-10-03T09:02:09.339Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f216e4723d38a733d93fcc"
    text: {HTTPS:^/```^/red>> read https://www.gitter.im^/== ^{<!doctype html>^^/<html class="no-js " lang="en">^^/    <head>^^/      <^/```}
    sent: "2016-10-03T08:29:24.112Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f21683859fdb9f4d1e7303"
    text: {Red can do https and POST (with write/info). However right now I am using `call` to `curl`.}
    sent: "2016-10-03T08:27:47.257Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f215af0ff4ef7a50fd4284"
    text: {`irx` How did you post to this room? As far as I know Red can't do https or POST and PUT at the moment.}
    sent: "2016-10-03T08:24:15.351Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "57f2150d859fdb9f4d1e72e2"
    text: "it seems like the limit resets in just one minute"
    sent: "2016-10-03T08:21:33.237Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f214eb723d38a733d93faf"
    text: "http://www.epochconverter.com/"
    sent: "2016-10-03T08:20:59.261Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f214c8be5dec755015727f"
    text: "The one right now is 1475483044825"
    sent: "2016-10-03T08:20:24.431Z"
    editedAt: "2016-10-03T08:23:16.162Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f214814380866f04cb4c06"
    text: "Even then it’s strange."
    sent: "2016-10-03T08:19:13.089Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f21473b0ff456d3add9398"
    text: "SO it's actually milliseconds"
    sent: "2016-10-03T08:18:59.774Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f2144920e68b7636130c45"
    text: "Hm, it’s strange date."
    sent: "2016-10-03T08:18:17.511Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f2124a0ff4ef7a50fd3869"
    text: {Or my search engine isn't reporting it correctly..}
    sent: "2016-10-03T08:09:46.947Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f211c6be5dec75501568aa"
    text: "Wait.. that's actually in the past.."
    sent: "2016-10-03T08:07:34.505Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f2118ab0ff456d3add8aa6"
    text: {```^/X-RateLimit-Remaining:^/    99^/X-RateLimit-Limit:^/    100^/X-RateLimit-Reset:^/    1475479753895^/```}
    sent: "2016-10-03T08:06:34.982Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f20fdd723d38a733d93f1e"
    text: "4 months? That’s not what I see."
    sent: "2016-10-03T07:59:25.069Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f20d12d38f186520bd4004"
    text: "Ratelimit resets in 4 months.."
    sent: "2016-10-03T07:47:30.286Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f20a246f39416b1ce31dab"
    text: {**Markdown** *works*, @rebolek? (writing text as usual.. duh)}
    sent: "2016-10-03T07:35:00.529Z"
    editedAt: "2016-10-03T07:35:40.210Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f20943b0ff456d3add6b69"
    text: "Testing.. This is sent using that"
    sent: "2016-10-03T07:31:15.310Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f208c14380866f04cb4afc"
    text: {So I downloaded all messages from this room and wanted to do some stats, unfortunately, the file is ~20MB and Red can’t load it.}
    sent: "2016-10-03T07:29:05.225Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f2082d4380866f04cb4ae6"
    text: "@geekyi Thanks, I take a look"
    sent: "2016-10-03T07:26:37.640Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f2080020e68b7636130b25"
    text: {The first message is something I had together in an hour, it’s really easy, just take a look at https://developer.gitter.im/docs/welcome}
    sent: "2016-10-03T07:25:52.001Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f207f2d38f186520bd2c49"
    text: {@rebolek do you know of https://apigee.com/abhisekp/embed/console/gitter ? might find it useful}
    sent: "2016-10-03T07:25:38.184Z"
    editedAt: "2016-10-03T07:26:21.722Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57f207ce4380866f04cb4ae3"
    text: {@geekyi Of course, once it moves from total mess to something others will be able to use ;)}
    sent: "2016-10-03T07:25:02.855Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f20775b0ff456d3add65a3"
    text: "@rebolek can I haz code? "
    sent: "2016-10-03T07:23:33.034Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f1e98420e68b7636130973"
    text: "Also a bot."
    sent: "2016-10-03T05:15:48.814Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f1e9534380866f04cb48fc"
    text: "Yes."
    sent: "2016-10-03T05:14:59.185Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f1e921b0ff456d3add05b9"
    text: "So we can make a gitter client in Red. └(^^O^^)┘"
    sent: "2016-10-03T05:14:09.439Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f1e3e04380866f04cb48d2"
    text: "Wow, it works! :D"
    sent: "2016-10-03T04:51:44.145Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f1e3c5c512d9653a604789"
    text: "This message was send from Red"
    sent: "2016-10-03T04:51:17.954Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f157650ff4ef7a50fb40e3"
    text: {thanks for the info @greggirwin ... esp. the last part is the most interesting one}
    sent: "2016-10-02T18:52:21.724Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f14bdb34a8d5681cd6753d"
    text: {@wolframkriesing_twitter, welcome! All Bolek said +1.^/^/The tiny size comes from its Forth heritage, an elegant design, and much discussion about what is worth including. On the one hand, having "batteries included" in modern parlance, makes it widely usable without external dependencies. On the other, the more batteries we include, the bigger it gets. It's also a decision about what to write in Red/System, which may be more verbose, versus how much of Red is written in Red, which may impact performance. A tough balancing act to be sure.^/^/The finale of the balancing act, which is part of your second question, is that Red is a self-contained toolchain. Huge benefits there, but also means that new back ends will increase the size of the standard runtime. There will surely be options to omit it, as Rebol had the /base interpreter option, but Red has a clean architecture WRT platforms, targets, an formats. Keeping these up-to-date will affect some layers more than others. The ELF and PE formats aren't going to change. ARM and IA-32 targets are stable, but may get optimizations. GUIs and mobile OSs are moving targets. Much work there, but Red gives us a huge advantage in being self-contained, with a full cross-compiler. And all that is there today.}
    sent: "2016-10-02T18:03:07.383Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f13093b0ff456d3adb15c4"
    text: "@wolframkriesing_twitter yes"
    sent: "2016-10-02T16:06:43.001Z"
    editedAt: "2016-10-02T16:07:08.833Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f12ecdd38f186520baf90f"
    text: {of course, that's what the JS world is doing to come down to all platforms :)^/but I guess you mean to generate webassembly, right? yeah thought so too.}
    sent: "2016-10-02T15:59:09.637Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f12e74d38f186520baf834"
    text: {@wolframkriesing_twitter I think the way forward is with "webassembly". Have you heard of it?}
    sent: "2016-10-02T15:57:40.715Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "57f12ba6b0ff456d3adb05bf"
    text: {seen it too. ^/if one would build it, would you add it just like another platform? or would there be a better/preferred way?}
    sent: "2016-10-02T15:45:42.047Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f127af723d38a733d93415"
    text: {@wolframkriesing_twitter you can take a look at [Topaz](https://github.com/giesse/Project-SnowBall) - Rebol like language compiled to JS.}
    sent: "2016-10-02T15:28:47.742Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f1273dbe5dec755012c715"
    text: {it is a long term plan ... not sure it is scheduled pred 1.0 though ...}
    sent: "2016-10-02T15:26:53.361Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f126930ff4ef7a50faaad7"
    text: {are there any cross compiling efforts towards JS going on? I am still home on the web and having red/rebol as a language that can compile for the web would be awesome imho}
    sent: "2016-10-02T15:24:03.189Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f1266e859fdb9f4d1e65d8"
    text: {It is always great to see someone interested in Red/Rebol core values.}
    sent: "2016-10-02T15:23:26.155Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f1264420e68b7636130001"
    text: ":+1: "
    sent: "2016-10-02T15:22:44.702Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f124ccc512d9653a5e5084"
    text: {absolutely. /me doing JS the last 15 years this is something that is a burden and pain, so I am really glad to see red challenging the status quo}
    sent: "2016-10-02T15:16:28.181Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f1247120e68b763612ffec"
    text: {@wolframkriesing_twitter  *how can it be so tiny?* - the right question is: how can other languages be so large?}
    sent: "2016-10-02T15:14:57.213Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f123f934a8d5681cd5fd55"
    text: {@rebolek I will have to dive deeper into it, now I am intrigued ... wanna see and understand the implementation behind "We rebel against the idea that modern software must be large and complex" #like}
    sent: "2016-10-02T15:12:57.977Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f123d4723d38a733d933e5"
    text: {But if you take a look at Rebol2, latest version is from 2011 and works fine on latest Windows, Linux, OSX.}
    sent: "2016-10-02T15:12:20.950Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f1239c723d38a733d933e1"
    text: "Well, in Windows, it does ;)"
    sent: "2016-10-02T15:11:24.350Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f1238320e68b763612ffd9"
    text: "Usually, not much changes on low-level."
    sent: "2016-10-02T15:10:59.324Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f123784380866f04cb3e6c"
    text: {@wolframkriesing_twitter *How hard will it be to keep red up to date, when going so low-level? E.g. when a new MacOSX, Android, etc. version comes out, how much effort will red require to catch up?*}
    sent: "2016-10-02T15:10:48.888Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f123420ff4ef7a50faa248"
    text: {aha, i see https://github.com/red/red/blob/master/runtime/simple-io.reds#L1981}
    sent: "2016-10-02T15:09:54.983Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f1232e859fdb9f4d1e6593"
    text: "@pekr Yes, you are right I think."
    sent: "2016-10-02T15:09:34.805Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f12312be5dec755012bb99"
    text: {Not sure it is Curl on all platforms, Windows version uses no such dependency?}
    sent: "2016-10-02T15:09:06.947Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f123024380866f04cb3e5c"
    text: {In Rebol, you can add your own protocols (ftp://, mysql://, smtp://, redis://, ...). This will be possible with Red also.}
    sent: "2016-10-02T15:08:50.325Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f122efb0ff456d3adaf016"
    text: {ah got it, currently it is directly bound to curl #assuming}
    sent: "2016-10-02T15:08:31.370Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f122d9859fdb9f4d1e658e"
    text: {@wolframkriesing_twitter Yeah, they will stay natives, but you would be able to do `read basicaly-anything-here://...`. You can’ do that now.}
    sent: "2016-10-02T15:08:09.737Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f122c7b0ff456d3adaef63"
    text: {ad, sorry, came in from the offline mode and did not see earlier answers ...}
    sent: "2016-10-02T15:07:51.565Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f122c5d38f186520bad94e"
    text: "awesome, thx"
    sent: "2016-10-02T15:07:49.919Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f122b2be5dec755012ba91"
    text: {hello @wolframkriesing_twitter - Trello mostly reflects actual state of the affairs. Red recently contains so called simple-io, which is supposed to be replaced by full IO stack in terms of the 0.7.0. }
    sent: "2016-10-02T15:07:30.055Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f1229d6f39416b1ce0b697"
    text: "abstracted? but they stay natives, right?"
    sent: "2016-10-02T15:07:09.594Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f1225f4380866f04cb3e52"
    text: {Also, right now there is no port, `read` and `write` are natives. This will be abstracted.}
    sent: "2016-10-02T15:06:07.195Z"
    editedAt: "2016-10-02T15:06:37.274Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f12249d38f186520bad7e9"
    text: "@rebolek ah thx"
    sent: "2016-10-02T15:05:45.021Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f1222f723d38a733d933bf"
    text: {@wolframkriesing_twitter Current http uses Curl. 0.7.0 will have native implementation.}
    sent: "2016-10-02T15:05:19.450Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f119dad38f186520bab928"
    text: {running the danger that this question was asked million times: how come that red can be so tiny (1MB) with support for things that other languages don't even ship? I am digging the source for a couple days now and see what is being done and two things burn on my mind:^/1) how can it be so tiny? AND^/2) How hard will it be to keep red up to date, when going so low-level? E.g. when a new MacOSX, Android, etc. version comes out, how much effort will red require to catch up?}
    sent: "2016-10-02T14:29:46.496Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f118fdbe5dec755012a29a"
    text: {@rebolek ah ok, what else is required for the http part of I/O? #curious}
    sent: "2016-10-02T14:26:05.310Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f117ab859fdb9f4d1e64c8"
    text: {@wolframkriesing_twitter `read http://` works fine, but that does not mean I/O is ready ;) Full I/O support will be there in 0.7.0}
    sent: "2016-10-02T14:20:27.421Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f1138ad38f186520baa69a"
    text: {but first and foremost, its amazing to see red coming about, more every day, congrats to  keeping up the spirit for such a long time and building such a tiny+efficient thing that everybody would expect to be at least 100MB big ... wow!!!}
    sent: "2016-10-02T14:02:50.095Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f11320d38f186520baa5a8"
    text: {hi, I am currently playing with red, reading through trello to understand what's state of the art, and found out those diffs:^/- the email type seems to be implemented, is marked as not-done in trello and^/- I/O support is not ticked off in https://trello.com/c/BW1SPeOU/48-i-o-support, but `read http://...` works fine^/I am on Mac OS X, using rebol from the source (cloned the repo, etc.)^/Is the trello not the right place, or am I just not patient enough to wait for it's update? :)}
    sent: "2016-10-02T14:01:04.948Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f063ccbe5dec755011018f"
    text: {@greggirwin use `/me blah blah`. Gitter was definitely reading @geekyi's mind and bot-posting :smile:}
    sent: "2016-10-02T01:33:00.932Z"
    editedAt: "2016-10-02T01:35:05.822Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f05ca5b0ff456d3ad925ae"
    text: {@greggirwin wonders why @geekyi refers to self in the third person. Or is Gitter reading @geekyi's mind and bot-posting?}
    sent: "2016-10-02T01:02:29.438Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f038e26f39416b1cdea31f"
    text: {I thought some ppl proposed to use the REP, but not to use `for` as a name, and use `loop`name instead. I don't agree with removal of `while`or other funcs ppl are used to ...}
    sent: "2016-10-01T22:29:54.222Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57f037fa34a8d5681cd3f60f"
    text: {@geekyi would use `loop` for the simplest loops and `for` for the range like features if it get's introduced}
    status: true
    sent: "2016-10-01T22:26:02.854Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f037c234a8d5681cd3f5af"
    text: {@geekyi mostly agrees with gregg's comments and finds there's nothing to add to.. other than nitpicking about using the word `for`and having too many overloaded features}
    status: true
    sent: "2016-10-01T22:25:06.446Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f02f8016c37362201be962"
    text: {@geekyi is also looking at the new gitter topics feature}
    status: true
    sent: "2016-10-01T21:49:52.111Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f02f1516c37362201be80c"
    text: {@dockimbel  :point_up: [September 29, 2016 3:26 PM](https://gitter.im/red/red?at=57ecec42783fe9b945a7f569) ^/>host the REPs as files in a git repo [..] The processing workflow could be then implemented using issues and their tags.^/^/I think a seperate repo would be a good idea, so we don't pollute the main red repo activity. Also, more freedom can be given to community in that case? REPs can then be managed with the new project features. I have some ideas. For instance, the math functions REP should have label "needs-split" (and the parent labelled as "meta")^/^/So.. how can I help to move this forward?}
    sent: "2016-10-01T21:48:05.831Z"
    editedAt: "2016-10-01T21:48:52.317Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f021eac512d9653a5c19bb"
    text: {REP 101 comments: https://gist.github.com/greggirwin/5526e07cafa97e2c3e3b283f113dd121}
    sent: "2016-10-01T20:51:54.588Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f0174434a8d5681cd39d59"
    text: "@greggirwin  Thanks Gregg."
    sent: "2016-10-01T20:06:28.234Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57f00b3dd38f186520b84cca"
    text: {Also @mikeparr (and @Arie-vw), I hadn't been to http://www.red-by-example.org in a while. Wow! You have a ton of material there. Keep up the great work!}
    sent: "2016-10-01T19:15:09.533Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f002e2be5dec7550101885"
    text: {@mikeparr, this has been noted in an issue: https://github.com/red/red/issues/2126 The doc string changed, but the issue is tagged with review. I don't know if that means the behavior may change in the future. R2 returned the series, R3 changed to return the count. Red may be undecided. While returning the count may be helpful sometimes, it means you can't chain calls and use the result of `remove-each`. }
    sent: "2016-10-01T18:39:30.820Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ef89bfb0ff456d3ad6f235"
    text: {OK. As regards the type of the first argument, the expression `'word` just means that the first argument is not to be evaluated.}
    sent: "2016-10-01T10:02:39.763Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57ef869116c37362201a0e0c"
    text: {@meijeru Sorry - have tried latest,  help doc is fine - my fault}
    sent: "2016-10-01T09:49:05.684Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57ef84ec0ff4ef7a50f69052"
    text: {@meijeru  - by typing:     ?    remove-each.        It also tells me that the first argument is a 'word, when I think is should be  just a word.  (Works OK, just questioning the help info)}
    sent: "2016-10-01T09:42:04.802Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57ef7f1ac512d9653a5a575c"
    text: {Where do you find the help info saying that it has a return value? The actual code in `/runtime/natives.reds` says `stack/set-last unset-value`.}
    sent: "2016-10-01T09:17:14.011Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57ef7c0216c373622019f315"
    text: {Error in remove-each - or maybe in its spec?  The help info says that it returns the number of removed items, but in my tests it returns nothing. Example:^/```^/red>> s: [1 2 3 4 5]^/red>> n: remove-each i s [i > 1]^/*** Script Error: n: needs a value^/```^/}
    sent: "2016-10-01T09:04:02.070Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57ee9da6b0ff456d3ad477cc"
    text: {I just skimmed the messages here, but it will take me a bit to assemble thoughts in response. Thanks to all for contributing to the process!}
    sent: "2016-09-30T17:15:18.994Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ee9d480ff4ef7a50f3fe3a"
    text: {:point_up: [September 30, 2016 6:53 AM](https://gitter.im/red/red?at=57ee6061c512d9653a56fc0b) @pekr, on ranges: http://www.rebol.org/ml-display-message.r?m=rmlGGHC}
    sent: "2016-09-30T17:13:44.972Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ee9cfd6f39416b1cda3c3d"
    text: {@ifgem `def: :does` ;^^) Yours is a good example, though, of how we can use different datatypes and transform things.}
    sent: "2016-09-30T17:12:29.180Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57ee8d60be5dec75500be51a"
    text: {we should have both fine grained control and nice abstractions... this is red after all}
    sent: "2016-09-30T16:05:52.465Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ee835a34a8d5681ccf1ac6"
    text: "J"
    sent: "2016-09-30T15:23:06.103Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57ee6de3c512d9653a573436"
    text: {Funny function:)^/```^/hack: func [tag] [^/^-to word! to string! tag^/]^/^/def: function [block] [^/^-args: copy []^/^-parse block [^/^-^-any [^/^-^-^-pos: set word tag! (^/^-^-^-^-word: hack word^/^-^-^-^-append args word^/^-^-^-)^/^-^-^-change pos word^/^-^-^-| skip^/^-^-]^/^-]^/^-func unique args block^/]^/^/sum: def [<x> + <y>]^/sum 10 20 => 30^/```}
    sent: "2016-09-30T13:51:31.088Z"
    editedAt: "2016-09-30T13:51:56.440Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57ee62a2d56b91170dfc8231"
    text: "code is also data ;)"
    sent: "2016-09-30T13:03:30.753Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ee6253d38f186520b372b1"
    text: {@maximvl lambdas are *expression* based, but blocks are data.. blocks based?}
    sent: "2016-09-30T13:02:11.184Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ee6236d56b91170dfc81f9"
    text: {@geekyi I don’t know. It was proposal for R3 that was never implemented. But there are some good ideas worth looking at.}
    sent: "2016-09-30T13:01:42.756Z"
    editedAt: "2016-09-30T13:01:51.417Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ee61b1c512d9653a5701b3"
    text: {I feel like sometimes they are used for the same thing, but block is much more generic concept}
    sent: "2016-09-30T12:59:29.071Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee61540ff4ef7a50f2f2b8"
    text: {btw what is the key difference between lambdas in other languages and Redbol blocks?}
    sent: "2016-09-30T12:57:56.334Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee6061c512d9653a56fc0b"
    text: {IIRC @greggirwin had some proposal for ranges too? Don't remember exactly, was it a datatype? 1..10?}
    sent: "2016-09-30T12:53:53.788Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ee5f51b0ff456d3ad37326"
    text: {like list comprehensions, lazy numbers comprehensions}
    sent: "2016-09-30T12:49:21.876Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee5f3516c37362201693ca"
    text: {it actually could be nice to have filters here, like^/`[2 to 10 step 3 if [X  % 2 = 0]]`}
    sent: "2016-09-30T12:48:53.914Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee5e5e34a8d5681cce796d"
    text: "`make-range! [2 to 10 step 3]` is fine for me"
    sent: "2016-09-30T12:45:18.223Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee5e2b34a8d5681cce790b"
    text: {the question is do we want a separate visual representation for ranges}
    sent: "2016-09-30T12:44:27.255Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee5d72c512d9653a56effd"
    text: {@rebolek ^/> http://www.rebol.net/cgi-bin/r3blog.r?view=0058^/^/I like that, but what about steps? `2..10,3` "2 to 10 step 3". Or `floats!`? `2.2..10.5,0.1`?}
    sent: "2016-09-30T12:41:22.104Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ee5bbd34a8d5681cce6f79"
    text: {@greggirwin you mention there is an implementation already? If it is small enough, I don't think it would be a problem including it and avoiding DLL hell}
    sent: "2016-09-30T12:34:05.913Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ee5a96be5dec75500b0719"
    text: {in a way that everybody can have their own loops and it will still work  ;)}
    sent: "2016-09-30T12:29:10.938Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee5a5f0ff4ef7a50f2d2a0"
    text: {there must be a very neat module/dependencies thing for such extensible language as Red is}
    sent: "2016-09-30T12:28:15.467Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee5a156f39416b1cd915d5"
    text: {@pekr I don't believe Red modules will cause the equivalent of "DLL" hell. As far a I can tell, the compiler will statically link the modules into a single executable.}
    sent: "2016-09-30T12:27:01.060Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ee590234a8d5681cce6638"
    text: {@maximvl not exactly sure what you mean, array languages (MATLAB, j, Julia) are usually faster, especially for parallelism. But it actually does have loops as fallback for those who want control flow constructs}
    sent: "2016-09-30T12:22:26.261Z"
    editedAt: "2016-09-30T12:23:28.673Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57ee5841fdfac4436c131890"
    text: "http://www.rebol.net/cgi-bin/r3blog.r?view=0058"
    sent: "2016-09-30T12:19:13.794Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ee582f16c3736220167538"
    text: "at least from performance perspective"
    sent: "2016-09-30T12:18:55.041Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee57f3b0ff456d3ad3577c"
    text: {I don't like this, there must be a fine-grained low-level control over looping}
    sent: "2016-09-30T12:17:55.822Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee57ca34a8d5681cce61c5"
    text: {>It doesn't have explicit looping, but uses other simple operators to get the result you want}
    sent: "2016-09-30T12:17:14.442Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee57bcd6c90e8a6e65fc71"
    text: {@geekyi you should put it on GitHub, it will be lost here.}
    sent: "2016-09-30T12:17:00.209Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ee578d6f39416b1cd90dd8"
    text: {### Future workflow?^/I'd like to talk about 2 languages which handles "looping" very much the way I like. They have quite different implementations tho^/#### Julia^/Is very similar to redbol. Has 2 [words](http://julia.readthedocs.io/en/latest/manual/control-flow/#man-loops) `for` and `while` and uses a range syntax `start:optional_step:end`. For is nicely combined with [comprehensions](http://julia.readthedocs.io/en/latest/manual/arrays/#comprehensions). It all works well for upto 2-3 dimensions. For higher ones you have to explicitly reshape^/#### J^/Is very much different. It transparently handles the cases for multiple dimensions. The basic operator for ranges is `i.` so for example, `i. 2 _5` gives^/```^/4 3 2 1 0^/9 8 7 6 5^/```^/It doesn't have explicit looping, but uses other simple operators to get the result you want. It is an extreme case of trying to simplify things (which I personally like)^/## Use case^/The motivation for this seems to be to ease adoption for people from other programming languages? I think @PeterWAWood and @Arie-vw raises raises good points. Would this help adoption like @greggirwin says or introduce more complexities? I'm more inclined to agree with Ptere here. I myself am a bit conflicted. I'd still use `loop`, but perhaps `for` for most others, and then functions to operate on collections}
    sent: "2016-09-30T12:16:13.648Z"
    editedAt: "2016-09-30T12:20:09.176Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57ee5729d38f186520b3434a"
    text: {(sorry for the length)^/**Edit**: After writing all this, I realized this may be a design for a range construct? (mentioned in http://curecode.org/rebol3/ticket.rsp?id=1993) If so, there seems to be 2 goals here:^/1. Cater for programmers from other languages^/2. Design a range construct^/^/# Original:^/I like the proposal overall, gregg has put in all the features that I'd probably want. (Except for some like looping over collections `map-each`, `foreach`,  multidimensional arrays, .. :tongue: ). That said, would I use it? My intuition is.. probably not.. except to use some of the features (like rebol `for`). I want to ignore the syntax and talk about the semantics (is that the right word?) for the moment.^/## Symantics^/### Current workflow^/I tend to to work with series functional programming style, directly working on the data / collection type if possible. I do use `loop` and sometimes `repeat`, but it's mostly `foreach` and `collect` if there already is data (`series`) to work on. I miss `map-each` and `fold` being built-in. Handling collections may be out of scope for this?^/>The idea is to support mainly numeric loop constructs. Working like foreach and forskip is also possible^/^/#### Advantages of a single `word!` for looping^/I'll be easily able to refactor my code from `loop` to `repeat` to `for` without changing the syntax much (Hmm.. would that be as easy as I think it is?)}
    sent: "2016-09-30T12:14:33.972Z"
    editedAt: "2016-09-30T12:20:40.456Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "57ee56efbe5dec75500af9c5"
    text: {well, simple solution is to use it in loops, so any kind of iterative thing will do the job}
    sent: "2016-09-30T12:13:35.959Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee56acbe5dec75500af8f9"
    text: {@dockimbel do we have some kind of iterative interface?}
    sent: "2016-09-30T12:12:28.833Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee564534a8d5681cce5be2"
    text: {@DideC I wrote `(series) ranges`, and not `series ranges` to imply ranges not limited to series.}
    sent: "2016-09-30T12:10:45.314Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee55fe16c3736220166e0d"
    text: {I am asking the question because ranges (if handled explicitly) would not be limited to loops usage. If we can define how to best handle ranges, it would answer some questions about what looping constructs we really need.}
    sent: "2016-09-30T12:09:34.902Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee55600ff4ef7a50f2bbb7"
    text: {@dockimbel with the dialect looping this is not a problem, in CL, again this looks like:^/```^/(loop for x from 0 upto 100 do ...)^/(loop for x in items do ...)^/```}
    sent: "2016-09-30T12:06:56.276Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee545f16c37362201668b2"
    text: {There are `foreach`, `forall` and `forskip` for that, and names are pretty expressive. ^/To me, `for` stay bind to looping in a range of numerical values, not traversing series.}
    sent: "2016-09-30T12:02:39.715Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee446334a8d5681cce1be4"
    text: {The underlying question is: how do we handle (series) ranges?}
    sent: "2016-09-30T10:54:27.974Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee4050d38f186520b2f17a"
    text: {I don't like the "additional" module attitude. At least not for the stuff, which makes the part of the language syntax. User scripts/target apps are a different matter. I don't want to come into the dependency hell, by someone using `for`and publishing the script without the link for the dependency. The I prefer not to have such function at all. }
    sent: "2016-09-30T10:37:04.709Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ee3ebdc512d9653a5685a2"
    text: {I feel that the interface  ```for``` the proposed function has a level of complexity beyond that of the functions supplied with Red. It's interface falls midway between the "core" functions (insert, copy, until, etc.) and the builtin dialects (view, parse). It doesn't feel to be a natural fit.^/^/I also feel that as It is seems to be based in a procedural programming paradigm and whilst it may be familiar to many people, it could also serve to delay a deeper understanding of Red for such people.^/^/I'm not convinced that it fits naturally with Red's rich datatypes (rich when compared with a pointer addressed block of memory). Traditional for loops are now being seen as an opportunity to introduce error. Even the conservative Apple removed them from Swift 3.0.^/^/I do see this flexible ```for``` function being attractive to many people so would suggest that if it is adopted, it is adopted in an additional module not the core distribution.^/^/ }
    sent: "2016-09-30T10:30:21.255Z"
    editedAt: "2016-09-30T10:31:34.942Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ee3c6434a8d5681cce03cb"
    text: {>Having different words for different syntaxes, make it easier to remember as our brain is more taillored for that.^/^/This is your personal opinion until you show us researches in that area}
    sent: "2016-09-30T10:20:20.776Z"
    editedAt: "2016-09-30T10:20:43.070Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee3c436f39416b1cd8b2e5"
    text: {@DideC^/>you have to know how something will be "understand" by the interpreter^/^/To chose the right word for each case you also have to know what you are doing and with what}
    sent: "2016-09-30T10:19:47.683Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee3b2dbe5dec75500a999d"
    text: {If everything is a `for something [do-that]` you have to know how `something` will be "understand" by the interpreter/compiler. So it happens that you have to learn syntax rather than words (but you have to learn anyway). Having different words for different syntaxes, make it easier to remember as our brain is more taillored for that.}
    sent: "2016-09-30T10:15:09.588Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee3aa0d38f186520b2dddc"
    text: {it's just looks like after Go was mentioned discussion turned to be: make it simple or make it good}
    sent: "2016-09-30T10:12:48.545Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee3a23d38f186520b2dc6b"
    text: ""
    sent: "2016-09-30T10:10:43.218Z"
    editedAt: "2016-09-30T10:11:40.710Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee39c70ff4ef7a50f25e50"
    text: {can we have at least one for people who can deal with more than one looping construction?}
    sent: "2016-09-30T10:09:11.696Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee39c9d38f186520b2da65"
    text: {@maximvl @nc-x Redbol, is not just a computer language. It as several words for things that seem similar just to be more precise or more concise, cause they are similar, not identical. Like in any speaking language (eg: love / like). }
    sent: "2016-09-30T10:09:07.911Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee39a36f39416b1cd8aab3"
    text: "there are a lot of languages for newcomers"
    sent: "2016-09-30T10:08:35.385Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee3958d38f186520b2d995"
    text: {:+1:  I'd also prefer just one `word!`/construct for looping / ranges. `For` & co. is useful only for programmers who are used to such things. For newcomers, it will more than likely confuse things for them}
    sent: "2016-09-30T10:07:20.939Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ee392bbe5dec75500a940a"
    text: {so you have to deal with indexes and everything every time you need a loop over collection}
    sent: "2016-09-30T10:06:35.125Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee37c016c37362201609df"
    text: "I :heart:  simplicity."
    sent: "2016-09-30T10:00:32.618Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57ee37a7be5dec75500a8ebc"
    text: {Instead of having for, foreach, while, etc etc a single for loop for everything.}
    sent: "2016-09-30T10:00:07.558Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57ee3786d38f186520b2d43a"
    text: {Well, i prefer golang. It has a single looping construct which can be used for everything.}
    sent: "2016-09-30T09:59:34.513Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57ee36d7be5dec75500a8b07"
    text: {@dockimbel FYI format intro: http://www.gigamonkeys.com/book/a-few-format-recipes.html}
    sent: "2016-09-30T09:56:39.251Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee3380be5dec75500a754c"
    text: {also, since `loop` is a macro, it does some compile time optimizations, ending up using collection-specific looping/accessing functions, so it's very likely will be faster than your hand-made loop}
    sent: "2016-09-30T09:42:24.094Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57ee336316c373622015f4af"
    text: {if, either, while, untill are not verbs for eg., so not sure if we have to be such strict ...}
    sent: "2016-09-30T09:41:55.565Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ee32fd0ff4ef7a50f245df"
    text: {like `foreach`? Cl also have `do`, several `map`'s}
    sent: "2016-09-30T09:40:13.420Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee32cfd38f186520b2be68"
    text: {Redbol have different loop functions, and some of them have strong usage cases.}
    sent: "2016-09-30T09:39:27.334Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee3299be5dec75500a7228"
    text: {it's just my opinion, but since I understood basics of CL's `loop` I never used any other looping constructions in CL (and it has many)}
    sent: "2016-09-30T09:38:33.473Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee32856f39416b1cd89223"
    text: "Yes, and `repeat` too."
    sent: "2016-09-30T09:38:13.583Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee324d6f39416b1cd89143"
    text: "`loop` is a verb ;)"
    sent: "2016-09-30T09:37:17.114Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee322f34a8d5681ccddd3c"
    text: {It's already 5 exceptions (actually), and all for loop construct! So one more, one less: they would be all in the same chapter in the doc.}
    sent: "2016-09-30T09:36:47.783Z"
    editedAt: "2016-09-30T09:37:43.680Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee3205c512d9653a565452"
    text: "The less exceptions, the better. ;-)"
    sent: "2016-09-30T09:36:05.176Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee31f80ff4ef7a50f23eae"
    text: "So not a good enough reason to me ;-)"
    sent: "2016-09-30T09:35:52.278Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee31e40ff4ef7a50f23e55"
    text: {> `for` is not a verb, so not consistent with our naming scheme for functions.^/Nor `foreach`, `forall`, `while` or `until` !!}
    sent: "2016-09-30T09:35:32.749Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee318ed38f186520b2b868"
    text: "sure, no rush here )"
    sent: "2016-09-30T09:34:06.684Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee317ab0ff456d3ad2c9b5"
    text: {For a `print` dialect, we'll wait to have the `console://` port implemented first.}
    sent: "2016-09-30T09:33:46.663Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee3144d38f186520b2b7a7"
    text: {like printing tables with specified columns size in characters}
    sent: "2016-09-30T09:32:52.490Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee312db0ff456d3ad2c8ac"
    text: {good, actually they have a lot of features which are more or less outdated and could be skipped to simplify implementation}
    sent: "2016-09-30T09:32:29.075Z"
    editedAt: "2016-09-30T09:33:09.228Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee30e96f39416b1cd88b37"
    text: {We do have plans for a `format` and `print` dialects too.}
    sent: "2016-09-30T09:31:21.721Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee30e76f39416b1cd88b32"
    text: "I'll try to find it"
    sent: "2016-09-30T09:31:19.850Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee30da6f39416b1cd88b0d"
    text: {there was a nice example of adding directive to format numbers in Roman style to `format`}
    sent: "2016-09-30T09:31:06.225Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee307f6f39416b1cd889d3"
    text: {the second one is `print` on steroids, with it's own looping support and it's even extensible}
    sent: "2016-09-30T09:29:35.097Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee3056c512d9653a564d9d"
    text: {very likely, CL has two famous built-in dialects: `loop` and `format`}
    sent: "2016-09-30T09:28:54.241Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee300e6f39416b1cd887d5"
    text: {Thanks. Ah, I have bookmarked it already before. :-)}
    sent: "2016-09-30T09:27:42.636Z"
    editedAt: "2016-09-30T09:28:13.230Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee30046f39416b1cd887ac"
    text: {this one is great intro http://www.gigamonkeys.com/book/loop-for-black-belts.html}
    sent: "2016-09-30T09:27:32.076Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee2ff8be5dec75500a671b"
    text: "Usage."
    sent: "2016-09-30T09:27:20.201Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee2ff2c512d9653a564c27"
    text: {@dockimbel link for usage or implementation details?}
    sent: "2016-09-30T09:27:14.618Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee2fde34a8d5681ccdd48f"
    text: {```^/(loop for i from 1 to 100^/      if (evenp i)^/        minimize i into min-even and ^/        maximize i into max-even and^/        unless (zerop (mod i 4))^/          sum i into even-not-fours-total^/        end^/        and sum i into even-total^/      else^/        minimize i into min-odd and^/        maximize i into max-odd and^/        when (zerop (mod i 5)) ^/          sum i into fives-total^/        end^/        and sum i into odd-total^/      do (update-analysis min-even^/                          max-even^/                          min-odd^/                          max-odd^/                          even-total^/                          odd-total^/                          fives-total^/                          even-not-fours-total))^/```}
    sent: "2016-09-30T09:26:53.980Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee2fd9be5dec75500a66af"
    text: "@maximvl Any link?"
    sent: "2016-09-30T09:26:49.930Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee2fd734a8d5681ccdd47f"
    text: "to show you the nice example"
    sent: "2016-09-30T09:26:47.966Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee2fb40ff4ef7a50f23656"
    text: "I can easily agree ..."
    sent: "2016-09-30T09:26:12.621Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ee2fa734a8d5681ccdd339"
    text: {its a looping dialect which is the most powerful out there}
    sent: "2016-09-30T09:25:59.180Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee2f9334a8d5681ccdd308"
    text: {I feel like we can just copy CL's `loop` and thats it}
    sent: "2016-09-30T09:25:39.161Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ee2d97be5dec75500a5e9c"
    text: {`for` is not a verb, so not consistent with our naming scheme for functions.}
    sent: "2016-09-30T09:17:11.725Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee2d00b0ff456d3ad2b848"
    text: {I am still debating myself between - let's do, what is innovative and fits best ... vs - don't be so much special and do what ppl expect ... newcomers will naturally look for `for`as a loop construct. We will see, I am open on that ...}
    sent: "2016-09-30T09:14:40.644Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ee2b82d38f186520b2a1ef"
    text: {REP 101 is good food for thought. Using `loop` for such function would be nice and would free `for` name for list comprehensions.}
    sent: "2016-09-30T09:08:18.012Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee1b6abe5dec75500a1929"
    text: "My only comment is - I like the proposal ;-)"
    sent: "2016-09-30T07:59:38.215Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ede5e1b0ff456d3ad1ddbd"
    text: {If you have any comments or suggestions about the proposal, please make them here or on the [Red ML](https://groups.google.com/forum/#!topic/red-lang/w239OCl9MgI)}
    sent: "2016-09-30T04:11:13.970Z"
    editedAt: "2016-09-30T04:13:27.851Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ede4460ff4ef7a50f14de5"
    text: {The first complete Red Enhancement Proposal has been submitted. It is [REP 0101 - For Loop](https://github.com/red/red/wiki/REP-0101---For-loop-function), submitted by @greggirwin }
    sent: "2016-09-30T04:04:22.273Z"
    editedAt: "2016-09-30T04:06:42.030Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ed3fefc512d9653a532edd"
    text: {@pekr pfft! I usually use the nightly builds because it's faster :tongue:}
    sent: "2016-09-29T16:23:11.969Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed3f42c512d9653a532bf5"
    text: {I just hope that we will be able to compile it (gui console) manually, once merged? I always work from sources and don't want to be dependant upon the downloadable .exe stuff :-) }
    sent: "2016-09-29T16:20:18.534Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ed3d70b0ff456d3acf9eb0"
    text: ""
    sent: "2016-09-29T16:12:32.937Z"
    editedAt: "2016-09-29T16:15:22.435Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57ed391916c373622012ce86"
    text: {Moreover the GUI console script does rely on the `gui` context defined in View module inside libRed, so it will probably need some specific changes.}
    sent: "2016-09-29T15:54:01.695Z"
    editedAt: "2016-09-29T15:54:05.476Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ed38a00ff4ef7a50eef122"
    text: {@nc-x ^/1. libRed compilation mode does not work currently with Red scripts containing R/S code (like the GUI console script).^/2. No, libRed will be refreshed automatically when the Red toolchain changes (in binary form).}
    sent: "2016-09-29T15:52:00.108Z"
    editedAt: "2016-09-29T15:52:23.018Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ed19b816c37362201235c1"
    text: {@dockimbel ^/^/1)   Is libred support complete on Windows? Because I get error when trying to compile gui-console from the libred branch.^/```^/>> rc "-t windows %environment/console/gui-console.red"^/^/-=== Red Compiler 0.6.1 ===-^/^/Compiling C:\Users\ABC\Desktop\red-libRed\environment\console\gui-console.red ...^/...compilation time : 359 ms^/^/Target: windows^/^/Compiling to native code...^/*** Compilation Error: undefined context gui^/*** in file: %/C/Users/ABC/Desktop/red-libRed/environment/console/terminal.reds^/*** at line: 1538^/*** near: [^/    with gui [^/        #script %/C/Users/ABC/Desktop/red-libRed/environment/console/windows.reds^/        ps: as tagPAINTSTRUCT 0^/        hdc: as handle! 0^/        mdc: as handle! 0^/        mbmp: as handle! 0^/        timer: as handle! 0^/^/      (etc etc etc)^/```^/^/2)  Once libred branch gets merged into master, and I use automated builds, then wouldn't there be this problem of incompatible dll's?}
    sent: "2016-09-29T13:40:07.902Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57ed070616c373622011d1ee"
    text: {In the list there is a red/red/sets room that seems to be 'private (that's what Gitter said). }
    sent: "2016-09-29T12:20:22.989Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ed06f20ff4ef7a50edf2b5"
    text: {> Done. Index of Red rooms on Gitter can be found here: https://github.com/red/red/wiki/Gitter-Room-Index}
    sent: "2016-09-29T12:20:02.828Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ecec42783fe9b945a7f569"
    text: {@geekyi We should host the REPs as files in a git repo, indeed. The processing workflow could be then implemented using issues and their tags.}
    sent: "2016-09-29T10:26:10.276Z"
    editedAt: "2016-09-29T10:26:23.660Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ecea97857ab70f7d4eebff"
    text: {Also wondering if we can use the new github project features?}
    sent: "2016-09-29T10:19:03.924Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ecea6954302caa6f2bde14"
    text: {What I'm trying to say is I'm wondering if the proposals should be complete when submitting to Stage 1, if so where do we dump uh.. `Stage 0`?}
    sent: "2016-09-29T10:18:17.057Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ece9e3783fe9b945a7ed9b"
    text: {If I were to, should I move to `Stage 1 - Developed` or should there be a `Stage 0 - Developing`?}
    sent: "2016-09-29T10:16:03.861Z"
    editedAt: "2016-09-29T10:16:06.787Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57ece97ee4e41c6a4a02e137"
    text: {I see the wiki pages for older REPs have been moved from `[proposal] ...` to `REP XXXX ...` I'm not sure if I should edit the wiki home page to reflect this}
    sent: "2016-09-29T10:14:22.831Z"
    editedAt: "2016-09-29T10:14:51.837Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57ece8b0ab9ba81255f2d557"
    text: {Done. Index of Red rooms on Gitter can be found here: https://github.com/red/red/wiki/Gitter-Room-Index}
    sent: "2016-09-29T10:10:56.525Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ece099857ab70f7d4ec917"
    text: "I agree  "
    sent: "2016-09-29T09:36:25.864Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "57ecdcac009614165526fe26"
    text: "Gets my vote."
    sent: "2016-09-29T09:19:40.563Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ecd5b0c90661384a6e5739"
    text: "Makes sense to me."
    sent: "2016-09-29T08:49:52.086Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ecd4dde4e41c6a4a0291ec"
    text: {I would like to get rid of the red/links room here, and replace it with a wiki page rather (IIRC, we already have it). The issue is that we have no way to remove messages from rooms, so it's unsuitable for hosting links, when anyone can post there any spam, and we can't do anything about it.}
    sent: "2016-09-29T08:46:21.328Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57eca16c54302caa6f2ad949"
    text: {@WiseGenius, I have a similar func, but use `collect` in it. One thing to consider is whether you want to use `/only` when you collect each value. I think it's better to do so, as you can always flatten the final result in the caller.}
    sent: "2016-09-29T05:06:52.186Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ec9488465e867e6278f17f"
    text: {@WiseGenius The compiled version of `function` is not handling the `:word` value properly, please open a ticket about it. As the first argument to `foreach` is  supposed to be a literal word (so unevaluated), your interpreted version should not work (worth a ticket too).}
    sent: "2016-09-29T04:11:52.930Z"
    editedAt: "2016-09-29T04:12:31.607Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ec7d2935e0f31c6c4ff461"
    text: {Also, `remove-each` seems to be already implemented, but not checked off in [Trello](https://trello.com/c/may3KBGh/50-natives).}
    sent: "2016-09-29T02:32:09.878Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ec7bdb009614165525d486"
    text: {Here's a crude `map-each` function I've been using until it's implemented natively in Red:^/```^/map-each: function [^/    {Evaluates a block for each value(s) in a series and returns them as a block.}^/    'word [word! block!] "Word, or words, to set on each iteration"^/    series [series!] "The series to traverse"^/    body [block!] "Block to evaluate on each iteration"^/][^/^-result: copy []^/^-foreach :word series [append result do body]^/^-result^/]^/```^/This seems to work fine when interpreted, but when compiled:^/```^/*** Compilation Error: duplicate word definition: word^/```^/It seems to have added `:word` to the locals:^/```^/*** near: [^/    map-each: function [^/        {Evaluates a block for each value(s) in a series and returns them as a block.}^/        'word [word! block!] "Word, or words, to set on each iteration"^/        series [series!] "The series to traverse"^/        body [block!] "Block to evaluate on each iteration"^/        /local result :word^/    ] [^/        result: copy []^/        foreach :word series [append result do body]^/        result^/    ] #pop-path^/...^/```^/Should it have done this? The interpreter only puts `result` in the locals:^/```^/red>> probe :map-each^/func [^/    {Evaluates a block for each value(s) in a series and returns them as a block.} ^/    'word [word! block!] "Word, or words, to set on each iteration" series [series!] "The series to traverse" body [block!] "Block to evaluate on each iteration" /local result^/][result: copy [] ^/    foreach :word series [append result do body] result^/]^/```^/So I compiled the above `func` code, and got:^/```^/*** Red Compiler Internal Error: Script Error : add-symbol expected name argument of type: word^/*** Where: comp-foreach^/*** Near:  [add-symbol word: pc/1^/add-global word^/]^/```^/Should I be going about this in a totally different way?}
    sent: "2016-09-29T02:26:35.567Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ec6b69ab9ba81255f13dfd"
    text: {I guess I can't do a non-compiled version but that sound stuff was (I hope) the big hump to climb to move my R2 app to Red. How cool. Thank you gentlemen!}
    sent: "2016-09-29T01:16:25.201Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ec6a0d857ab70f7d4d6679"
    text: {https://github.com/red/red/wiki/Red-tutorial-for-newcomers-English-version btw, was the life-saver. That c-string! funkiness was a killer to figure out. I'm still a bit shaky about it but it works.}
    sent: "2016-09-29T01:10:37.759Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ec69c2857ab70f7d4d65c9"
    text: {@rebolek  @dockimbel OK, I was able to make a RED compiled version with "routine" to demonstrate that the routines work. The next step was a compiled version with "View." I'm listening to an mp3 as I type launched by a "Play" button.  Lastly I will attempt a Red-non-compiled version.  Thanks for all your pointers and help. }
    sent: "2016-09-29T01:09:22.702Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ec39afab9ba81255f08d09"
    text: "@geekyi Thanks."
    sent: "2016-09-28T21:44:15.389Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ec320b009614165524f5d7"
    text: {and best post to red/help or red/system channel so everything is organized}
    sent: "2016-09-28T21:11:39.921Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ec314d35e0f31c6c4eef64"
    text: {for simpler code:^/ ```<code> ``` (can't seem to get this to work, check markdown help(Ctrl-shift-M))}
    sent: "2016-09-28T21:08:29.401Z"
    editedAt: "2016-09-28T21:10:32.421Z"
    v: 5
    author: "569c37abe610378809bccdff"
) #(
    id: "57ec30eb783fe9b945a5a18c"
    text: "@TimeSlip you can use a [gist](gist.github.com)"
    sent: "2016-09-28T21:06:51.946Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ec2ae554302caa6f296251"
    text: {Bo, it didn't transfer all the chars but you get the idea.}
    sent: "2016-09-28T20:41:09.709Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ec2abe35e0f31c6c4ecf4a"
    text: {Red/System [^/^-title: "Sound"^/]^/^/ #import [^/ ^-"libwmp3.dll" stdcall [^/^- ^-Mp3_Initialize: "Mp3_Initialize" [ ^/^- ^-^-return: [integer!] ^/^- ^-]^/^-^-Mp3_Destroy: "Mp3_Destroy" ^-[^/^-^-^- ^/^-^-^-initialized [integer!]^/^-^-^-return: [integer!]^/^-^-]^/^-^-Mp3_OpenFile: "Mp3_OpenFile"^-[^/^-^-^-^/^-^-^-class [integer!] ^/^-^-^-filename [c-string!]^/^-^-^-nWaveBufferLengthMs [integer!]^/^-^-^-nSeekFromStart [integer!] ^/^-^-^-nFileSize [integer!]^-^/^-^-^-return: [integer!] ^/^-^-]^/^-^-Mp3_Play: "Mp3_Play"^-^-[^/^-^-^-^/^-^-^-initialized [integer!]^/^-^-^-return: [integer!] ^/^-^-]^/^-]^/]^/initialized: Mp3_Initialize^/^/res: Mp3_OpenFile initialized "Space Ghost - Brak - Mashed Potatoes.mp3" 10000 0 0^/; Then start playing:^/Mp3_Play initialized^/loop 150000 [print "playing"]^/print "done"^/}
    sent: "2016-09-28T20:40:30.064Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ec258cd02791686c3fb78c"
    text: {@TimeSlip do you have an example how you access dll from R/S?}
    sent: "2016-09-28T20:18:20.840Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ec15e054302caa6f29069d"
    text: {@dockimbel  after playing around a bit I can't seem to get the library to work. Do you have a simple example of a routine that is referencing a .dll  AND that is Red?}
    sent: "2016-09-28T19:11:28.736Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ec0866ab9ba81255efb61f"
    text: "@dockimbel Sounds like fun. Thanks."
    sent: "2016-09-28T18:13:58.793Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebe562857ab70f7d4b5cb0"
    text: {@TimeSlip Routines are what you want. You declare them in Red code, the argument specification is like for Red function (except limited to one type per argument), but the locals and body block are pure R/S. Red will marshal some types that have direct correspondance between Red and R/S, and for the rest, you get `red-*` structures used by Red runtime library internally to implement Red types using R/S. Then, you need to learn from the existing examples, the Red internal API, so you can manipulate those structures.}
    sent: "2016-09-28T15:44:34.009Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ebe21b54302caa6f280f63"
    text: {@dockimbel , Doc, my problem was how to incorporate R/S code with Red [] code. Bo gave me some pointers which I will try.}
    sent: "2016-09-28T15:30:35.627Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebe1ad35e0f31c6c4d8ca5"
    text: "@rebolek yea I know, very interested in that"
    sent: "2016-09-28T15:28:45.857Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ebe195857ab70f7d4b4e1d"
    text: {Doc was super helpful, basically taught me how to do low level programming, not that I am some expert now but I can bind stuff just enough to be dangerous}
    sent: "2016-09-28T15:28:21.668Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ebe18ee5887b81555d397d"
    text: {@JacobGood1 libRed is just around the corner, the compile times are *much* shorter with it :)}
    sent: "2016-09-28T15:28:14.261Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebe13b35e0f31c6c4d8a60"
    text: {I got a little annoyed trying to implement it because I started playing with Red calling RedS, the compile times were too long for me.}
    sent: "2016-09-28T15:26:51.767Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ebe0c7ca69aeb745ba1980"
    text: {I have a semi implemented 1/2 crap binding to sdl2... I think red makes bindings pretty easy considering I had never even attempted a binding (or even wrote a pointer in my life) until I used Red.}
    sent: "2016-09-28T15:24:55.746Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ebd86c54302caa6f27d976"
    text: {@TimeSlip^/> Can Red windows version play sound files?^/^/We have no support for sounds in the runtime library for now, but you should be able to achieve it using the [SDL binding](http://red.esperconsultancy.nl/Red-SDL/artifact/61c37fa2afc0657a). }
    sent: "2016-09-28T14:49:16.314Z"
    editedAt: "2016-09-28T14:51:19.214Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ebd3e4c90661384a6e3e30"
    text: ":)"
    sent: "2016-09-28T14:29:56.542Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd3de00961416552345a3"
    text: "I=me"
    sent: "2016-09-28T14:29:50.046Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd3d2783fe9b945a3fbdf"
    text: {I will. I'm hoping this will allow me to port an R2 app whose bitmap display is driving my students and I crazy!}
    sent: "2016-09-28T14:29:38.075Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd375e5887b81555d36a1"
    text: "You’re welcome. let me know about your progress!"
    sent: "2016-09-28T14:28:05.891Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd35fe045d1995506a4b5"
    text: {So `routine` let’s you write R/S code that can be used at Red level.}
    sent: "2016-09-28T14:27:43.209Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd343857ab70f7d4b0d68"
    text: {I see, it is what I was using in R2 when I had to launch some dos program. OK, I'll give this a shot. I would have not been able to figure this out myself so thank you.}
    sent: "2016-09-28T14:27:15.389Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd324c90661384a6e3e21"
    text: {And `system-call/call` is Red/System function defined in https://github.com/red/red/blob/master/system/library/call/call.reds}
    sent: "2016-09-28T14:26:44.302Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd2fde5887b81555d3692"
    text: {then at https://github.com/red/red/blob/master/system/library/call/call.red#L92 it calls `system-call/call` function}
    sent: "2016-09-28T14:26:05.897Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd2d6e5887b81555d368b"
    text: {Look at that file, it is defined at https://github.com/red/red/blob/master/system/library/call/call.red#L20}
    sent: "2016-09-28T14:25:26.807Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd2bc00961416552340aa"
    text: "redsys-call ? Is that like R2 call?"
    sent: "2016-09-28T14:25:00.129Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd293d02791686c3faad6"
    text: "Then there is routine `redsys-call`"
    sent: "2016-09-28T14:24:19.077Z"
    editedAt: "2016-09-28T14:24:42.369Z"
    v: 3
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd289e4e41c6a4afeff0d"
    text: {OK, I'll play around with that and let you know (because I'm sure you are interested)}
    sent: "2016-09-28T14:24:09.207Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd2630096141655233f32"
    text: "Oh, that is interesting."
    sent: "2016-09-28T14:23:31.053Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd246c90661384a6e3dee"
    text: "Line 17: `#system [ #include %call.reds ]`"
    sent: "2016-09-28T14:23:02.333Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd23235e0f31c6c4d406a"
    text: {Is there any counterpart that will run when interpreted?}
    sent: "2016-09-28T14:22:42.049Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd22ae5887b81555d3647"
    text: {@TimeSlip see for example [how CALL is implemented](https://github.com/red/red/blob/master/system/library/call/call.red)}
    sent: "2016-09-28T14:22:34.310Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd20c54302caa6f27b956"
    text: {Or no, I'm looking at your code. It looks like I can simply use those functions.}
    sent: "2016-09-28T14:22:04.067Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd1aa783fe9b945a3f1f6"
    text: {OK, and the routines are the redefinition of the, you know, functions in the DLL?}
    sent: "2016-09-28T14:20:26.415Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd185e045d1995506a43e"
    text: {`routine` works in compiled scripts only, not in interpreter.}
    sent: "2016-09-28T14:19:49.532Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd170d02791686c3faa9e"
    text: "Yes."
    sent: "2016-09-28T14:19:28.723Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ebd16aab9ba81255eeb7b8"
    text: "This include is the #include ?"
    sent: "2016-09-28T14:19:22.594Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd160ca69aeb745b9cf8b"
    text: {Bo, first, thank you brother. I have some questions though. }
    sent: "2016-09-28T14:19:12.807Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebd0a6d02791686c3faa32"
    text: {@TimeSlip At Red level, include the R/S script, then do something like^/```^/call-to-rs: routine [^/    args^/] [^/    rs-args: when-needed-convert args^/    rs-function rs-args^/]^/```}
    sent: "2016-09-28T14:16:06.682Z"
    editedAt: "2016-09-28T14:17:28.185Z"
    v: 3
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "57ebcffd00961416552333ec"
    text: {@dockimbel, Here's the deal: I wanted to add sound to a Red application. I managed to create an R/S test that works but what I don't know how to do is use that in a Red app. Does that make sense? For me, it's the difference between Red System and Red that I can't seem to bridge. In R2 I would use load/library and define the routines so I'm looking for the equivalent so to speak. Again thanks.}
    sent: "2016-09-28T14:13:17.351Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebc201009614165522f7b3"
    text: "looks like it is intended to catch up with GitLab"
    sent: "2016-09-28T13:13:37.281Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ebc1d2009614165522f713"
    text: {I noticed there is now a "Project" on Github, called 0.6.2 (empty for the moment). Is the Project facility of Github intended as a replacement for Trello??}
    sent: "2016-09-28T13:12:50.757Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57ebbc9f783fe9b945a39743"
    text: "@TimeSlip Sure, let me find it..."
    sent: "2016-09-28T12:50:39.576Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ebbc2754302caa6f275ac7"
    text: "BRB"
    sent: "2016-09-28T12:48:39.630Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebbc07857ab70f7d4aa7b5"
    text: {@dockimbel I know I'm being selfish, but could you look at my question from last night? Thanks as always my friend.}
    sent: "2016-09-28T12:48:07.567Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ebbbe1ca69aeb745b96993"
    text: {Well, at least next time he shows up under a new identity, we should be able to spot him more quickly now.}
    sent: "2016-09-28T12:47:29.964Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ebbb2e35e0f31c6c4cd840"
    text: "I see, this is really unacceptable "
    sent: "2016-09-28T12:44:30.261Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ebbb15ca69aeb745b96741"
    text: "I am too not interested in such distractions ..."
    sent: "2016-09-28T12:44:05.639Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ebbb02009614165522d1b9"
    text: {yes, it might be interesting from a history perspective point of view, but it does not help you a bit. That guy wrote me privately some time ago and used some really rude words towards some of guys here ...}
    sent: "2016-09-28T12:43:46.535Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ebbaaa009614165522ceed"
    text: {and all these names related to lisp, ibm and so on}
    sent: "2016-09-28T12:42:18.722Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ebba9035e0f31c6c4cd59b"
    text: "well, I never heard about IPL before"
    sent: "2016-09-28T12:41:52.858Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ebba74ab9ba81255ee5065"
    text: {@pekr Yes he is, he advertised for this TimeSeriesLord web site on HN with his former nickname: https://news.ycombinator.com/item?id=12536720}
    sent: "2016-09-28T12:41:24.079Z"
    editedAt: "2016-09-28T12:41:31.962Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ebb9eaab9ba81255ee4e18"
    text: {Is that the former vexerciser? His rhetoric seemed just similar ... I've learned lots of dirty words and insults, that's all :-)^/}
    sent: "2016-09-28T12:39:06.525Z"
    editedAt: "2016-09-28T12:39:33.415Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ebb9e535e0f31c6c4cd2be"
    text: "ok, I think you are right here"
    sent: "2016-09-28T12:39:01.847Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ebb98535e0f31c6c4cd13a"
    text: {@maximvl It's the same guy we banned a couple of months ago for insulting pretty much everyone he talked to here, including the Red team members. I franckly don't care how much he knows when he displays such inacceptable behavior. His understanding of software technologies seems quite limited to me, and he definitely doesn't understand much about Rebol and Red. From the documentation he wrote, many statements are wrong or misleading, like assigning contexts to blocks...}
    sent: "2016-09-28T12:37:25.631Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ebb97035e0f31c6c4cd061"
    text: {I can see path issues for libRed should be resolved? I still get an error, probably wrong path composition? `Cannot open /C/!rebol/!Red/red/system/system/config.r` ... system is there doubled?}
    sent: "2016-09-28T12:37:04.242Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ebb5f6e4e41c6a4afe8176"
    text: {well, his behaviour wasn't nice, but the guy definitely knows a lot}
    sent: "2016-09-28T12:22:14.646Z"
    editedAt: "2016-09-28T12:22:23.423Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ebb4ee783fe9b945a378e8"
    text: {On behalf of the Red team:^/^/It was unanimously agreed to ban user TimeSeriesLord following the behaviour demonstrated in both public and private conversations.  }
    sent: "2016-09-28T12:17:50.869Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ebb33935e0f31c6c4cb916"
    text: {For those people who have been logged in to this room for a long time, a code of conduct has been added to the welcome message to new visitors:^/^/These are the values members of the Red rooms on Gitter should aspire to:^/^/* Be friendly and welcoming^/* Be patient^/    * Remember that people have varying communication styles and that not everyone is using their native language. (Meaning and tone can be lost in translation.)^/* Be thoughtful^/    * Productive communication requires effort. Think about how your words will be interpreted.^/    * Remember that sometimes it is best to refrain entirely from commenting.^/* Be respectful^/    * In particular, respect differences of opinion. It is important that we resolve disagreements and differing views constructively.^/* Avoid destructive behavior^/    * Derailing: stay on topic; if you want to talk about something else, start a new conversation. Respect the room's topic.^/    * Unconstructive criticism: don't merely decry the current state of affairs; offer (or at least solicit) suggestions as to how things may be improved.^/    * Snarking (pithy, unproductive, sniping comments).^/^/The following actions are explicitly forbidden:^/^/* Insulting, demeaning, hateful, or threatening remarks.^/* Discrimination based on age, disability, gender, nationality, race, religion,   sexuality, or similar personal characteristic.^/* Bullying or systematic harassment.^/* Unwelcome sexual advances.^/* Incitement to any of these.^/^/The Red rooms are moderated, unrespectful behavior will lead to banning.^/^/##Acknowledgements^/This document was based on the Code of Conduct from the Elixir and Go projects with parts derived from Django's Code of Conduct, Rust's Code of Conduct and the Contributor Covenant.}
    sent: "2016-09-28T12:10:33.246Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ebaa7554302caa6f27177b"
    text: {I hope `call` is going to be a default part of the distro, not an option ... too usefull for console session prototyping to be missed imo ....}
    sent: "2016-09-28T11:33:09.084Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57eb9a22e5887b81555d2f96"
    text: {@geekyi The only reason is that `call` is not finished yet ;)}
    sent: "2016-09-28T10:23:30.680Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb99ed00961416552256fd"
    text: {@rebolek I see, thanks.. that was one thing I was missing from rebol.. maybe there is a reason for that design? I would mostly use it from scripts, but hadn't because I thought it wasn't there yet}
    sent: "2016-09-28T10:22:37.487Z"
    editedAt: "2016-09-28T10:23:37.248Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57eb99b7c90661384a6e36da"
    text: {Add line `#include %../../system/library/call/call.red` at the beginning of  %console.red or %gui-console.red and recompile it.}
    sent: "2016-09-28T10:21:43.124Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb98dbe045d19955069da4"
    text: {@geekyi Right now, you need to manually add it to interpreter and recompile it.}
    sent: "2016-09-28T10:18:03.896Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb987aab9ba81255edd18e"
    text: {@endo64 `call` doesn't exist for me in the interpreter in Red}
    sent: "2016-09-28T10:16:26.901Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57eb970454302caa6f26d4ea"
    text: {Doesn't .com file is a normal executable on Windows (DOS)? (https://www.wikiwand.com/en/COM_file)^/If you can run it on command line then you should be able to run it from Red using `call`,^/If it doesn't work that way then try to execute like `call "cmd.exe  /C file.com"`}
    sent: "2016-09-28T10:10:12.730Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57eb7c49e4e41c6a4afdb003"
    text: ""
    sent: "2016-09-28T08:16:09.155Z"
    editedAt: "2016-09-28T08:16:24.943Z"
    v: 2
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57eb70aa54302caa6f2648aa"
    text: "com file?"
    sent: "2016-09-28T07:26:34.945Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57eb5d47ab9ba81255ecf590"
    text: "Sorry, how to call com file in Red?:))"
    sent: "2016-09-28T06:03:51.494Z"
    editedAt: "2016-09-28T06:05:17.876Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57eb47cdca69aeb745b7d7e8"
    text: {Routine can't work with DLL directly imo. You need to define a wrapper to the R/S function, which might wrap some DLL functionality? But hey, I am no expert on low level ...}
    sent: "2016-09-28T04:32:13.533Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57eb441254302caa6f25c1c4"
    text: {@pekr After looking at files that included "routine" I'm still not sure how that works with a .dll. Well, sleep time.}
    sent: "2016-09-28T04:16:18.991Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb4149e4e41c6a4afcfc3f"
    text: "I was just looking that up, pekr. :-) "
    sent: "2016-09-28T04:04:25.081Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb411ae4e41c6a4afcfbc3"
    text: {Have you try to define a routine, which should allow just that?}
    sent: "2016-09-28T04:03:38.248Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57eb4073ab9ba81255ecb266"
    text: {To be clear, I wish to use those routines in a Red (non-/System) application.}
    sent: "2016-09-28T04:00:51.575Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb3b20e4e41c6a4afcee9a"
    text: {I used to use load/library and make routine! in R2 but how does Red do it? Thanks in advance...I'm pretty excited.}
    sent: "2016-09-28T03:38:08.672Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb3ac5ab9ba81255eca677"
    text: {In case Doc or others are around, I have successfully written a Red/System prog that uses the libwmp3.dll library via #import, and plays an mp3 file. What I don't know how to do is use those routines in the app I want to write.}
    sent: "2016-09-28T03:36:37.084Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb394935e0f31c6c4b1b2a"
    text: {So now all I need to learn is how to actually use the code in a program.}
    sent: "2016-09-28T03:30:17.993Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb390654302caa6f25a3a1"
    text: {Hey, I hear sound. OK, so I had to loop 100000000 [print "playing"] but I'm desperate.  }
    sent: "2016-09-28T03:29:10.638Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb360b783fe9b945a1c89d"
    text: {In other words, how do my new functions become part of my app.}
    sent: "2016-09-28T03:16:27.607Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb359dca69aeb745b79fa7"
    text: {What I still don't know is the relationship of my .reds file is to a non-Red/System file. How do I use what I have in a program? }
    sent: "2016-09-28T03:14:37.939Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb352e857ab70f7d48eac0"
    text: {I looked at hello.reds and Oldes iMagick.reds. I'm thinking that perhaps the "play" call gets stopped once the program exits. }
    sent: "2016-09-28T03:12:46.532Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb34cb857ab70f7d48ea38"
    text: {Since my last post I've managed to get a program compiled but I'm not hearing anything yet. }
    sent: "2016-09-28T03:11:07.530Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb34810096141655210376"
    text: {I'm the same way James. Maybe look at %red/runtime/platform/win32.reds to see how functions from DLLs are declared. The syntax is just a little different than in R2. Or if you have the DLL and declarations for it, maybe someone here can help translate a concrete example.}
    sent: "2016-09-28T03:09:53.415Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57eb142354302caa6f254861"
    text: {So what I am trying to do is, as far as I know, is to import an mp3 library (I'm looking at Nick's R2 example) so I can play a sound file.}
    sent: "2016-09-28T00:51:47.393Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb139d857ab70f7d489716"
    text: {Gregg, have you ever seen the Beatles movie "Help"? I'm the mad professor's assistant who says "I'm moving my left foot. I'm moving my right foot." I basically have to see something step by excruciating simple step. Nothing is that obvious to me even after all these years.}
    sent: "2016-09-28T00:49:33.049Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb11ca857ab70f7d489287"
    text: "Thanks Gregg. I'll take a look at that now."
    sent: "2016-09-28T00:41:46.446Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57eb1113e4e41c6a4afc904d"
    text: {@TimeSlip, you can write routines in Red, which are kind of like inline R/S. %red/system/tests/shared-lib.reds shows how to write an SO/DLL.}
    sent: "2016-09-28T00:38:43.978Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57eb0ed6009614165520aabb"
    text: {@rebolek  Well, Bo, can you point me to a fairly simple example of  an R/S library implementation? I've been looking around and kind of have an idea. What I also don't understand is the relationship of something I might create in R/S and using that with R, if that makes sense.}
    sent: "2016-09-28T00:29:10.444Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57e9b965ca69aeb745b28ee1"
    text: {> @7hi4g0 I am using this [syntax file](https://github.com/Oldes/Sublime-REBOL), maybe it can help you a bit.^/^/I use this one for Editplus: https://www.editplus.com/dn.php?n=rebol2.zip }
    sent: "2016-09-27T00:12:21.945Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
)#(
    id: "57e933f7a96e034d3d9a17be"
    text: {I haven’t experimented with sound yet, so I can’t give you more detailed answer, sorry.}
    sent: "2016-09-26T14:43:03.954Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e933d8808246a0620a9433"
    text: ":)"
    sent: "2016-09-26T14:42:32.336Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e933af35e0f31c6c43c893"
    text: "Thanks Bo (Sure I can...:-) )"
    sent: "2016-09-26T14:41:51.258Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57e931bb808246a0620a93c2"
    text: {Not natively. But you can access Windows sound subsystem with few calls in R/S.}
    sent: "2016-09-26T14:33:31.164Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e930f976d85b087daa73a6"
    text: "Can Red windows version play sound files?"
    sent: "2016-09-26T14:30:17.228Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57e9230b76d85b087daa3373"
    text: {@rebolek I created one can work properly last week. Let me push it online.}
    sent: "2016-09-26T13:30:51.934Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57e8e5aff71de5634c617660"
    text: "That is amazing."
    sent: "2016-09-26T09:09:03.467Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e8e546cca6236974b59fc1"
    text: "Wow."
    sent: "2016-09-26T09:07:18.570Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e8e48435e0f31c6c4284f8"
    text: "Try compiling scripts located in %tests/ folder."
    sent: "2016-09-26T09:04:04.113Z"
    editedAt: "2016-09-26T09:04:15.662Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e8e46dcca6236974b59fac"
    text: {I was compiling `%test.red` that is placed in Red root folder}
    sent: "2016-09-26T09:03:41.044Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e8e39535e0f31c6c428218"
    text: {I'm aware of that. It works fine when compiling from red/ codebase root folder.}
    sent: "2016-09-26T09:00:05.116Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e8e33ba96e034d3d9a0de8"
    text: {@dockimbel when trying libRed under Windows, I get this when compiling:^/```^/Compiling to native code...^/*** Loading Error: file access error: %macros.reds^/```}
    sent: "2016-09-26T08:58:35.919Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e8e1c8f71de5634c6175e0"
    text: "@dockimbel great news!"
    sent: "2016-09-26T08:52:24.458Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e8e1960096141655188472"
    text: "ah, ok"
    sent: "2016-09-26T08:51:34.588Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e8e14135e0f31c6c427acf"
    text: {No, it's transparent for users. For now, libRed is just used to speed up compilations. The API for embedding it in third-party software is not yet there.}
    sent: "2016-09-26T08:50:09.135Z"
    editedAt: "2016-09-26T08:50:29.094Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e8e0f735e0f31c6c4279d6"
    text: "@dockimbel great, is there any example of usage?"
    sent: "2016-09-26T08:48:55.014Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e8e0ba009614165518812c"
    text: {FYI, libRed now properly works on Linux, next one is MacOSX.}
    sent: "2016-09-26T08:47:54.452Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e8a03ba96e034d3d9a08c5"
    text: {@7hi4g0 I am using this [syntax file](https://github.com/Oldes/Sublime-REBOL), maybe it can help you a bit.}
    sent: "2016-09-26T04:12:43.539Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e879e776d85b087da812c0"
    text: {@7hi4g0 You would probably also need to look at the "mezzanine" functions that are defined in red/environment/functions.red}
    sent: "2016-09-26T01:29:11.912Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57e87905ca69aeb745addf88"
    text: {@PeterWAWood I forgot about that. I'll also try the red console. Thanks!}
    sent: "2016-09-26T01:25:25.183Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57e878c0857ab70f7d3f360d"
    text: "@jeffmaner Thanks! I'm gonna take a look at that."
    sent: "2016-09-26T01:24:16.417Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57e878a1ca69aeb745addea0"
    text: {@greggirwin Yeah, I'm basing myself on a Rebol syntax file.}
    sent: "2016-09-26T01:23:45.805Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57e877e0ab9ba81255e2e152"
    text: {@7hi4g0 There aren't really any reserved words in Red. Try this code:^/```text^/equal?: func [a b] [a <> b]^/print equal? 1 2^/``` ^/^/You are probably looking for a list of the words that are bound to Red's built-in functions (which many people think of as reserved words).^/^/This is a simple way to get a list of those words; in the Red console:^/```text^/red>> ? op!^/     %              ^-=>  Returns what is left over when one value is divided by another^/     *              ^-=>  Returns the product of two values^/     **    ... ...^/red>> ? action!^/     absolute       ^-=>  Returns the non-negative value^/     add        ... ...^/```}
    sent: "2016-09-26T01:20:31.836Z"
    editedAt: "2016-09-26T01:24:30.426Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57e87560857ab70f7d3f2de0"
    text: {@JacobGood1, you threw me a curve with that one. ;^^)}
    sent: "2016-09-26T01:09:52.568Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e8751935e0f31c6c41422c"
    text: {There are no reserved words in Red, so the common approach is to use standard functions (incl. natives and actions, and maybe ops) for the word list.}
    sent: "2016-09-26T01:08:41.882Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e874dd0096141655175d84"
    text: {@7hi4g0, a good place to start is probably one of the existing syntax files for Rebol, or the VSCode bit that @qtxie did for Red. I can get you my syntax file for UltraEdit, and @rebolek, I think, knows of others. A number of us have parsers for Redbol values as well, if that might help.}
    sent: "2016-09-26T01:07:41.112Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e866fa783fe9b94597ea4a"
    text: {@7hi4g0 http://www.red-by-example.org might be a good place to start. Throw a screen-scrape into vim, eliminate duplicates. I'm sure there's a smarter way, but that's my first though.}
    sent: "2016-09-26T00:08:26.466Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57e863d976d85b087da7e301"
    text: {I'm trying to make a syntax file for Red. Can I find all reserved words somewhere? Or the complete Red syntax?}
    sent: "2016-09-25T23:55:05.639Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57e84d18857ab70f7d3ed47d"
    text: "That is what I told my calculus teacher =P"
    sent: "2016-09-25T22:18:00.245Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57e84763ab9ba81255e26a2c"
    text: "Well, I had to stop somewhere."
    sent: "2016-09-25T21:53:39.422Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e83f4e4ff0c69950455dec"
    text: "that was an infinite level deep reference btw"
    sent: "2016-09-25T21:19:10.577Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57e83a434d4064a34fd05264"
    text: {Red is high level, so you're talking about references, not fixed structures. I can't say what the compiler will do, now, or in the future. A test wouldn't be hard though. In the interpreter, a 4-level deep reference like you have above causes a ~0:0:0.03s hit, over a keyed block access, on 1M iterations in a loop, for me. ~.15s vs ~.12s. Indexed block/vector access is ~.09s for the same 1M iterations. Same when compiled.}
    sent: "2016-09-25T20:57:39.430Z"
    editedAt: "2016-09-25T21:04:08.699Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e831b83ce594735ca1dafd"
    text: {I have a question about objects in red...^/^/In c++ if one nests objects inside of other objects, there is no real penalty for digging into the inner objects as long as they are not placed using a pointer.^/See this post, for example: http://stackoverflow.com/questions/3731623/are-there-any-performance-penalties-when-using-nested-structures^/^/Is it the same case for red?  Could one do this without worry of cache penalties:^/```^/a: object [b: object [c: object [d: etc...]]]^/a/b/c/d/etc...^/```}
    sent: "2016-09-25T20:21:12.449Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57e825d93ce594735ca1b8c9"
    text: "g9 looks great. "
    sent: "2016-09-25T19:30:33.748Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e798b67270539a6d8562c1"
    text: {Thanks, @geekyi . I hadn't seen either of those before. Very cute.  I used to do a lot of manual svg work (in Inkscape). Very cool that these tools are able to so easily programmatically generate interactively modifiable graphics.}
    sent: "2016-09-25T09:28:22.612Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57e79617240a335f12eb976f"
    text: {*Vector graphics*, *direct manipulation* and *constratined programming*}
    sent: "2016-09-25T09:17:11.186Z"
    editedAt: "2016-09-25T09:18:55.052Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57e795e9240a335f12eb96f5"
    text: {Both of these are about combining programming languages and vector graphics. Would be a good exercise to implement them in red (and in my opinion, it's pretty suited for it)}
    sent: "2016-09-25T09:16:25.463Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e79529240a335f12eb9551"
    text: {@dahu talking of graphics, I think these are interesting too:^/[g9](http://omrelli.ug/g9/gallery/) (something I found today on hn) and [Sketch & sketch](http://ravichugh.github.io/sketch-n-sketch/)}
    sent: "2016-09-25T09:13:13.348Z"
    editedAt: "2016-09-25T09:14:45.049Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "57e721e800df3cc422437543"
    text: {You're welcome. I was happy with the talk too and thought it would be well received here. As you said, it's beneficial to us to pay attention to those thinking deeper about languages and communities. I look forward to the emergent thinking such crossover provides.}
    sent: "2016-09-25T01:01:28.065Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57e71ff666e788802211227a"
    text: "Thanks for posting that @dahu!"
    sent: "2016-09-25T00:53:10.021Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e71fc357bec07c30f118f7"
    text: {I want to see, and experiment with, persistent data structures in a larger context. I have probably watched 3 or 4 To Do List examples of it now, all very cool and steps in the right direction. Exciting stuff. Now, what happens when your app is running for longer periods, and your data structures are all immutable? We need push stuff out, mark milestones, skip large chunks and find the interesting signals in the noise.^/^/The important thing, at least one of them, is that people are pushing this line of thinking forward, and we can as well. We can make the internal state of our apps visible, and then write tools to analyze it, live, replayed, analytically, and perhaps even predicatively. }
    sent: "2016-09-25T00:52:19.197Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e71e1700df3cc422436ee6"
    text: {He has a lot of thought about language development and community as well, which is nice to see.}
    sent: "2016-09-25T00:45:11.803Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e71dc7e7e28b6c7616cc0d"
    text: {Even without a reactive GUI, we could do this. Red makes this kind of thing relatively easy, because it's all just data.^/^/It's a good talk, and I'll finish watching it shortly, but I got to the export/import part and decided to update Red Paint real quick: https://gist.github.com/greggirwin/989ca6ffcec29f0700f54a0f3331d7eb^/^/It's a quick hack, but shows the concept. Draw, save, quit, load, and you can pick up right where you left off, with full undo capability from your previous session.}
    sent: "2016-09-25T00:43:51.760Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e712857270539a6d844ece"
    text: {He shows later on in the video another debugger feature he's recently working on, where he can capture a session and export/import it between other sessions.}
    sent: "2016-09-24T23:55:49.740Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57e7124966e78880221107a2"
    text: {I saw this video about the Elm project yesterday and the live debugger and interactive IDE looked nice. Red's reactive GUI would, I assume, allow for such niceties.^/https://www.youtube.com/watch?v=DSjbTC-hvqQ&feature=youtu.be&t=981}
    sent: "2016-09-24T23:54:49.254Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57e71124e7e28b6c7616b517"
    text: {Ah! I was trying to figure out why I saw it as logic! in the console, but I had worked in a session from %run-all.r. Whew!}
    sent: "2016-09-24T23:49:56.930Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e710f766e78880221105da"
    text: "Thanks for your help."
    sent: "2016-09-24T23:49:11.831Z"
    editedAt: "2016-09-24T23:49:18.482Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57e710ede7e28b6c7616b4b0"
    text: {@greggirwin I've found the problem ```run-all.r``` also overwrote ```binary?```}
    sent: "2016-09-24T23:49:01.799Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57e70ef1e7e28b6c7616b196"
    text: {I wondered too.  I'll open things up again and see if I can figure it out, but assumed it was because of the way call was created as a path and `do` was used on it from inside the context.}
    sent: "2016-09-24T23:40:33.251Z"
    editedAt: "2016-09-24T23:40:58.925Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e70daf66e788802211007d"
    text: {@Gregg I'm puzzled that the built-in ```binary?``` is getting overridden as the ```binary?``` defined in ```quick-test.r``` is defined inside the ```qt``` context.}
    sent: "2016-09-24T23:35:11.125Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "57e70c5e57bec07c30f0e880"
    text: "cool"
    sent: "2016-09-24T23:29:34.178Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57e70c2ee7e28b6c7616ad01"
    text: {@dahu, it may be possible in the future. Rebol has a `query` func, which you can use to find words you've introduced. Red doesn't have it yet, but I imagine Nenad has a lot of notes on that, namespacing, and modules in general, to facilitate PitL.}
    sent: "2016-09-24T23:28:46.277Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e70b95b39f35d16d97bf9e"
    text: {@greggirwin Thanks for finding that. I'll change it.}
    sent: "2016-09-24T23:26:13.940Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57e707adb39f35d16d97b61c"
    text: {Is there (or could there be) a facility in Red to show a list of overridden built-ins?}
    sent: "2016-09-24T23:09:33.519Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57e706af87fa803c5eea5b38"
    text: {Found it. %quick-test.r redefines `binary?` as a logic value, overriding the standard action of the same name.}
    sent: "2016-09-24T23:05:19.827Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e6d874e7e28b6c76161cef"
    text: {Can't reproduce in simple scenarios yet. Patching it in to 2.7.6 works fine out of context. }
    sent: "2016-09-24T19:48:04.544Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e6d4e7e7e28b6c76161278"
    text: {I hate looking at code that appears obviously correct, but isn't. }
    sent: "2016-09-24T19:32:55.268Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e6d35257bec07c30f05928"
    text: {%make-dylib-auto-test.r can't find %call.r if I run it directly. }
    sent: "2016-09-24T19:26:10.402Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e6d219240a335f12e9ef27"
    text: {Do I need to run all tests to duplicate the error? Or what is the minimal test case that seems to do it? Not sure if I can just call the func from %compile-test-dylibs.r from a test script.}
    sent: "2016-09-24T19:20:57.584Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e6d09557bec07c30f04bb4"
    text: "If `deline` is the error, then likely so. "
    sent: "2016-09-24T19:14:29.553Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e66b20b39f35d16d95ccf1"
    text: {I'm getting an error when running the tests on Windows:^/```text^/Making /e/Red/red/system/tests/source/units/auto-tests/dylib-auto-test.reds  - it will take a while^/** Script Error: either expected true-block argument of type: block^/** Where: deline^/** Near: parse/all/case either binary? string [as-string string]^/```^/I guess its caused by the changes to win-call.r Any suggestions?^/}
    sent: "2016-09-24T12:01:36.726Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57e56e6220af5e5e3ca8dce2"
    text: {One of the big challenges is how to scale dialects and the personal feel of things. It's not a technical problem, but a design and mindset issue. }
    sent: "2016-09-23T18:03:14.326Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e56db8af81f7ad45c85b7d"
    text: {Language is subjective, and Forth/Red are much more subject to feelings about words than most because they are much more personal. There are words I like, and words I don't. Just look at how much discussion naming gets in Red, compared to other langs. }
    sent: "2016-09-23T18:00:24.702Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e55cdc23e89a273612c11f"
    text: {Not sure I get the lack of love for UNLESS. I recall when it was introduced the relief that I could junk all the clunky IF NOTs that littered my code like a sore.}
    sent: "2016-09-23T16:48:28.419Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57e55541ea8c654c3c075619"
    text: {I think it's relative. I don't think that the noise from unecessary words is significant. I think Carl designed parts of Rebol to be like Logo, i.e., friendly for education, personal programming and PITS. There are things in Rebol that you could jettison if you don't care about these audiences, but doing so might not gain much-- I mean, you likely aren't going to win many converts from the curly-brace world in any event. The developer audience voted with their feet;  they don't much care for free-form expressions which read like a bowl of word-soup. Purging unnecessary words, synonyms or syntactic-sugar seems more of a purity exercise than practical measure. }
    sent: "2016-09-23T16:16:01.350Z"
    v: 1
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "57e54c17af81f7ad45c7c5ff"
    text: {@DideC @BlackATTR Those are the 2 edges: power vs non-gentle slope.  I think a lot can be done to ease the slope and I believe @dockimbel has that in mind.  I (and a few others) are thinking the IDE might ease much of the slope - that's where I was coming from with the earlier comment.  There was also earlier talk of a beginner's or training-wheels-included variant.  I don't know exactly how that would work but if any language can pull it off it would probably be red with the imaginative red-team.  Rebol has a number of words which may improve readability (a worthwhile goal) for experienced programmers but mainly add to the thicket for others, especially newbies.  I learned "unless" because it was in the table of control words and never thought about how it was redundant...or non-essential.  The whole 'to-" series of words is, I believe, similar...they add NOTHING in function but arguably improve readability.  The cost?  IMO, 20+ words of sheer distracting *noise* for the person who is trying rebol on....   It's sort of like instead of learning C++ and then sampling libraries you need to learn C++ PLUS all the libraries at the same time....except worse in that the word nature of rebol tends to elevate everything to the same level of prominence.   Anyway, I'm a big fan of red (as I was of Forth) even though I am, and fear I may remain for some time, "only an egg".}
    sent: "2016-09-23T15:36:55.672Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "57e54308af81f7ad45c79956"
    text: {One of Rebol's ultimate goals was to enable a gentle-slope to domain-sepecific languages, i.e., dialects. Sadly it never got very far down the path to gain notoriety for it, but the foundations are there. So if you don't prefer Rebol's syntax, make your own-- the underpinnings are there to present a higher-level or more focused syntax / 4GL.  See: Tim Berners-Lee - The Rule of Least Power}
    sent: "2016-09-23T14:58:16.254Z"
    v: 1
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "57e5293ca2c0a4aa456044f4"
    text: {There is rarely used words in every languages. I mean real languages, like english, french, whatever, not only computer languages.^/I probably nether have used the word "idiosyncrasie" in my living, but is this a reason to remove it from the french language?^/Rebol was just about that: have a language more human readable and more expressive, and so it have more words to learn. It's what make Rebol different on so productive. But its at the cost of a more complex vocabulary.^/But if you think of it a minute, in most computer languages, you have to learn tons of libraries API or class methods. It's also a long learning curve.}
    sent: "2016-09-23T13:08:12.397Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57e518b288c556fe50689ebe"
    text: {@TimeSeriesLord et al.  As with Forth, Rebol encouraging so many words on top of words is a two edged sword.  It tends to encourage a tower of Babel and the lack of obvious distinction between foundation words and pure syntactic sugar (e.g., "unless") tends to make learning a lot more intimidating.  It would be nice if non-essential words could be somehow easily distinguished.  Maybe a color distinction in the built in IDE?  Anyway, it is one of my worries about red getting the acceptance it deserves.}
    sent: "2016-09-23T11:57:38.899Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "57e4ca28a3c0cb1b6a220d6d"
    text: {@JacobGood1 right, there is https://gitter.im/red/red/lisp exactly for this}
    sent: "2016-09-23T06:22:32.067Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e4c23818291e1048958ccf"
    text: {All this Lisp talk does not belong here, a lot of it is factually vacuous as well...}
    sent: "2016-09-23T05:48:40.923Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57e4b83f90ba43d2173d3a07"
    text: {`irx` As much as I would like a gtk version, IO is more important to me. And I'm a Linux user.}
    sent: "2016-09-23T05:06:07.081Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "57e4498518291e1048943d96"
    text: {@greggirwin  Did you first state that "designers stole?" If you have not then how can you "move away from" something  that you have not stated? ^/^/I've been on record many times that REBOL is a mash-up of LOGO and Forth with pattern-matching from SNOBOL. ^/^/Many hype McCarthey and his LISP, but facts remain. 1) He lifted his ideas from IPL. 2) He hoped for a FORTRAN-syntax like language but could not implement it. 3) Steve Russell, who was not even a collabator of McCarthy, read an abstract article written by McCarthy with an AST and implemented the world's first LISP interpreter  because McCarthy did not know how to do it himself.  4) Daniel Edwards was the first to code garbage collection.  ^/^/There is nothing worse than toady, sycophantic worship of individuals. McCarthy is like that plagiarist musician, Jimmy Page of Led Zeppelin.^/^/I'll be back when people want to discuss Red. }
    sent: "2016-09-22T21:13:41.741Z"
    editedAt: "2016-09-22T21:15:47.215Z"
    v: 3
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e41413aabc89857fc464d6"
    text: {First, I would like to move away from saying designers "stole" from previous language designs. If they are trying to take credit for an innovation or discovery that wasn't theirs, that's a different story. We all stand on the shoulders of giants, and it had to start somewhere.^/^/Carl wrote a wonderful Foreword to `REBOL: The Official Guide` where he lays out languages that influenced him, and REBOL's design. Lisp and Forth are prominently noted, and Logo as well, which I think of as a bridge between the two in some ways. It eliminates Lisp's parens, uses the term *word* heavily, and focuses on building  up vocabularies and explore like Forth. ^/^/REBOL borrows implementation elements from both as well, though they are quite different.^/^/It's nice, and a little funny to me, when I see some of REBOL's ideas (which may have been independently discovered elsewhere as well) show up in other languages. People are still tentative about them, even in simple cases, but Carl and Nenad can be proud when future programmers argue about where their modern language features came from. And they will.}
    sent: "2016-09-22T17:25:39.898Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e3fc1c27a8458f7f383537"
    text: {Oh and I forgot that McCarthy lifted ideas from the FLPL group at IBM who worked alongside John Backus' FORTRAN group at IBM. Again, all HLs descend from FORTRAN.}
    sent: "2016-09-22T15:43:24.003Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3fb5f27a8458f7f3832ad"
    text: {> I found the wiki article^/^/Wikipedia? That's for kids.}
    sent: "2016-09-22T15:40:15.122Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3faccc8af41d45f3983ba"
    text: "I found the wiki article"
    sent: "2016-09-22T15:37:48.754Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3fac127a8458f7f382ff6"
    text: {@maximvl  ^/> @TimeSeriesLord is there any public info about this IPL story?^/^/Yes.}
    sent: "2016-09-22T15:37:37.740Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3fa3b18291e104892ef02"
    text: {@TimeSeriesLord is there any public info about this IPL story?}
    sent: "2016-09-22T15:35:23.541Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3f9d3c8af41d45f397f67"
    text: {@jeffmaner Chuck is one of the greats. colorForth always looked so cool to me. Anyway, I've always looked at REBOL as FORTH-like in the sense that if one builds a custom dictionary of words (functions, parsesets), one controls (scripts) the VM (interpreter).  ^/^/As far as LISP goes, there are many who worship LISP, but John McCarty stole his ideas for it from IPL (1956), which already had list manipulation, virtual machine, dynamic memory allocation, and functions as arguments. It took a guy named Steve Russell to write the first LISP interpreter as McCartney didn't know how. LISP AST as parenthesized prefix notation is pure accident as McCarthy desired but was incapable of compiling from his goal: Fortran-like syntax. So he was stuck peddling his quirky syntax to this day.^/^/And of course, every language truly descends from FORTRAN. ^/^/}
    sent: "2016-09-22T15:33:39.252Z"
    editedAt: "2016-09-22T15:34:47.000Z"
    v: 3
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3f15a18291e104892c735"
    text: {@TimeSeriesLord I'm not sure I have checked that out. I shall. Thanks! Yeah, years ago I was stumped by something in colorForth, and I emailed Chuck my question. He responded. I was incredibly impressed that such a giant would not only respond to a newbie question, but also would be sincerely helpful.}
    sent: "2016-09-22T14:57:30.344Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57e3ee1690ba43d2173a8777"
    text: {@jeffmaner Yeah, Chuck had genius. Have you checked out [REBOL on Rosetta Code](https://rosettacode.org/wiki/Category:REBOL) ever to see how REBOL/ Red solutions stack up to other langs? }
    sent: "2016-09-22T14:43:34.257Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3ec6caabc89857fc3aedf"
    text: {or, in other words, can I change word only for current scope?}
    sent: "2016-09-22T14:36:28.575Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3ec2190ba43d2173a7e60"
    text: {@pekr if you do `unset 'unless` will it affect all code executed after?}
    sent: "2016-09-22T14:35:13.552Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3ec0d90ba43d2173a7df2"
    text: {@pekr ^/> Ok, don't use it or just put `unset 'unless`in your scripts. Can we move on now? :-)^/^/I mentioned that many comments above — not every word of the standard must be used by someone — and I have already.}
    sent: "2016-09-22T14:34:53.942Z"
    editedAt: "2016-09-22T14:36:17.700Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3ec0990ba43d2173a7d9c"
    text: "btw"
    sent: "2016-09-22T14:34:49.509Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3ebf0aabc89857fc3ac41"
    text: {Ok, don't use it or just put `unset 'unless`in your scripts. Can we move on now? :-)}
    sent: "2016-09-22T14:34:24.552Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e3ea98aabc89857fc3a4c6"
    text: {@maximvl   ^/^/>Without these `dullards` you wouldn't have computers, internet and Rebol itself^/^/>Rebol took from lisp it's nature - code is data, so, rebol is pretty much a lisp, btw^/^/Dude, I'm not going to nitpick with you over silliness. Carl alone knows from how many 100s of books and languages he swiped ideas. ^/^/> you probably don't know, but GC was created by Lisp developers,^/^/If you like LISP so much, why are you here? Why attack me over your undying love for LISP?^/^/You seem rankled over nothing. ^/^/Anyway, Carl had genius and I am glad for him and his work. Nenad seems to be the same. Thank God for  both of them.^/^/Unless is still a language wart  that added nothing to REBOL and added nothing to Red. }
    sent: "2016-09-22T14:28:40.212Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3e95afa660dd95f0136f3"
    text: {@dockimbel Who? You seem to have me confused with someone else.}
    sent: "2016-09-22T14:23:22.554Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3e923df21a757301b3f49"
    text: {@dsgeyser It is not a parse example in as much as it leverages parse. [urls.r](https://github.com/TimeSeriesLord/rebol/blob/master/urls.r)}
    sent: "2016-09-22T14:22:27.147Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3e7fd18291e1048929914"
    text: {Thank you for the explanation Doc.^/I tried but console still quits?^/^/```^/E:\Git\red\build\bin>red.exe --catch --cli user.red^/(halted)^/E:\Git\red\build\bin>^/```^/^/`user.red` file is^/```^/Red []^/halt^/```}
    sent: "2016-09-22T14:17:33.197Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57e3dee927a8458f7f37b69d"
    text: {@endo64 Add `--catch` on command-line, it will force the console to stay open, even on errors. It's the intended behavior, so that you can run Red scripts through interpreter from shell scripts, without being annoyed by the console staying open on errors. The GUI console lives in a different environment, where it needs to stay open, otherwise you can't see error messages.}
    sent: "2016-09-22T13:38:49.388Z"
    editedAt: "2016-09-22T13:38:59.132Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e3d888aabc89857fc35434"
    text: {Rebol looks like FORTH in idea of words, however computation model is totally different}
    sent: "2016-09-22T13:11:36.626Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3d7bcc8af41d45f38d803"
    text: {@DideC FORTH and LISP seem to me two opposite ends of a spectrum. I'm not sure I've ever seen them conflated as similar. Rebol and Red remind me more of LISP than FORTH. LISP without the parentheses and the prefix notation, basically. Whereas FORTH is very close to the metal, all about stack manipulation, and uses postfix notation. Both languages are very dear to my heart, though. ;)}
    sent: "2016-09-22T13:08:12.148Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57e3c160fa660dd95f008737"
    text: {Sure it has already. Sorry didn't mention that as it should be default.}
    sent: "2016-09-22T11:32:48.977Z"
    editedAt: "2016-09-22T11:33:11.673Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57e3bcb4c3e7045a306dbb7d"
    text: "shouldn't it also have `Red []` line at least?"
    sent: "2016-09-22T11:12:52.740Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3b98fc8af41d45f385987"
    text: {My `test.red` has only one line `halt`.^/When I execute `red.exe --cli test.red` output is `(halted)`but console quits.^/If I execute with gui console `red.exe test.red` console stays open as expected.^/Is it a bug on CLI console? It wasn't like that before if I remember correctly.}
    sent: "2016-09-22T10:59:27.745Z"
    editedAt: "2016-09-22T11:00:17.638Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57e3a99bdf21a757301a4040"
    text: "I guess its the details Doc speak about."
    sent: "2016-09-22T09:51:23.365Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57e3a97f18291e104891a387"
    text: {@maximvl^/> The Eve clock demo now works on Mac (though still some details to fix):^/}
    sent: "2016-09-22T09:50:55.941Z"
    editedAt: "2016-09-22T09:51:03.528Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57e3a8f9c8af41d45f382293"
    text: {@dockimbel but I can spot some differences, like lines thickness and Mac version has a line around circle}
    sent: "2016-09-22T09:48:41.656Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57e3a89c27a8458f7f36dcbe"
    text: "(I'm a Linux user)"
    sent: "2016-09-22T09:47:08.165Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3a892c3e7045a306d7d30"
    text: {yes, please, GTK backend can wait, IO is really important}
    sent: "2016-09-22T09:46:58.888Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3a83fc8af41d45f381fa4"
    text: {Can you see any demand for a Linux version? Personally I think that OS-X is going to be well received, we will see. Then ppl are most interested in IO (0.7.), while Android is still being a strategic option ...}
    sent: "2016-09-22T09:45:35.795Z"
    editedAt: "2016-09-22T09:46:02.147Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e3a7f7c8af41d45f381e9b"
    text: {For GTK, it's 2-3 months of work, yeah (2 if we are lucky and not hitting any GTK bug or API issue).}
    sent: "2016-09-22T09:44:23.435Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e3a7bfc3e7045a306d7ae0"
    text: "I guess in Linux you can experiment under Wine"
    sent: "2016-09-22T09:43:27.932Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3a77c90ba43d217397700"
    text: {Based upon OS-X port experience - what's the work estimate for the Linux version? 2-3 months? Not saying it should be a priority now ...}
    sent: "2016-09-22T09:42:20.729Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e3a771aabc89857fc29dd0"
    text: "Good job :thumbsup: "
    sent: "2016-09-22T09:42:09.128Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3a733aabc89857fc29d25"
    text: {Cool. I can see only a grad-pen is missing from Mac Draw version}
    sent: "2016-09-22T09:41:07.348Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e3a730a3c0cb1b6a21f4af"
    text: ":+1: Time to check my View scripts on Mac ;)"
    sent: "2016-09-22T09:41:04.911Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e3a68edf21a757301a375e"
    text: "https://files.gitter.im/qtxie/yvn4/eve-clock.png"
    sent: "2016-09-22T09:38:22.595Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e3a68d90ba43d2173974c5"
    text: {The Eve clock demo now works on Mac (though still some details to fix):^/}
    sent: "2016-09-22T09:38:21.154Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e3964f27a8458f7f36a04a"
    text: {@TimeSeriesLord you probably don't know, but GC was created by Lisp developers, so why does Carl use GC in Rebol? Why does he walk the same path here?}
    sent: "2016-09-22T08:29:03.964Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3947c90ba43d2173936cd"
    text: {Carl said that Rebol was strongly inspired by FORTH, and a bit by LISP (don't know these two language myself, but they are similar AFAIK).}
    sent: "2016-09-22T08:21:16.966Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57e3937bdf21a7573019f308"
    text: {@TimeSeriesLord ^/>Carl with REBOL was not to walk on the same worn paths as all of the other inefficient dullards^/^/Without these `dullards` you wouldn't have computers, internet and Rebol itself^/>REBOL/Red aren't LISP, btw.^/^/Rebol took from lisp it's nature - code is data, so, rebol is pretty much a lisp, btw}
    sent: "2016-09-22T08:16:59.482Z"
    editedAt: "2016-09-22T08:17:09.027Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e3910ffa660dd95fffdcac"
    text: {Yeah, speacking of `unless` is... useless. I would just add that there is probably a key in your car to unscrew the weel, as in anybody car. But not everybody use it, just a few, from time to time. Same as `unless`: use it if you want, but its there if one day you need it. Or just let the mechanic use it ;-)}
    sent: "2016-09-22T08:06:39.313Z"
    editedAt: "2016-09-22T08:06:54.432Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57e37f1890ba43d21738f1c9"
    text: {+1 for @pekr , I also waste a little computing time when reading/writing code with `unless` as English is not my main language, but it took only a few weeks, now `unless` is one of my most used words just like `either`, but Red team has many other more important thing to think about.}
    sent: "2016-09-22T06:50:00.528Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57e36b3e18291e104890e132"
    text: "@jeffmaner  :^^)"
    sent: "2016-09-22T05:25:18.070Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e364da06bdca332708354d"
    text: "Exactly."
    sent: "2016-09-22T04:58:02.380Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e364a518291e104890ce14"
    text: {Its existence is very little to care about. We have much important things to finish to get to 1.0 ;-)}
    sent: "2016-09-22T04:57:09.353Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e3647718291e104890cdba"
    text: {I like `unless`. It is exactly the case, which makes language elegent for me. The same goes to `either`as a replacement for if/else ...}
    sent: "2016-09-22T04:56:23.262Z"
    editedAt: "2016-09-22T04:58:37.226Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e35e0890ba43d217389c0e"
    text: {@TimeSeriesLord Are you the same person as "Vexercizer"? Your arrogant and condescending tone looks a lot like his. }
    sent: "2016-09-22T04:28:56.167Z"
    editedAt: "2016-09-22T04:32:01.635Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e35788c8af41d45f372e80"
    text: {@TimeSeriesLord Link to your github account? Want to have a look at your parse example.}
    sent: "2016-09-22T04:01:12.038Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57e3560a06bdca332708349d"
    text: "I am used to UNLESS, I would miss it :cry: "
    sent: "2016-09-22T03:54:50.802Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e351d5df21a757301944b1"
    text: {I like `unless`; [ and | but ] I don't feel like `unless` needs an `unless not` clause. As usual, I find myself on the fence, in the middle between two very well argued sides of the debate. Which is why, again, I am happy to let the more well spoken of those two sides debate openly, and, hopefully, come to a well reasoned, wise decision. ;)}
    sent: "2016-09-22T03:36:53.766Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57e3513427a8458f7f35e379"
    text: {Damned Android Gitter. I don't mean to Post when I press Return. Alas.}
    sent: "2016-09-22T03:34:12.811Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57e350f5df21a757301942a4"
    text: {@TimeSeriesLord  Very well put. I for one like `unless` as an abbreviation for `if not`, but that might just be the novelty of having `unless` available in Red where it's not available in C-style languages. And I'm thrilled to see Chuck Moore's Forth cited here. The languages that have, for better AND for worse, formed my problem-solving programming mentality--LISP and FORTH: it just feels like home.}
    sent: "2016-09-22T03:33:09.008Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57e345fcdf21a75730192925"
    text: {@jeffmaner  Yes, Jeff, that has been a great thing about REBOL and now Red.  There are many ways to get results. ^/^/The best bit about REBOL and Red has been having your own custom dictionary of words (functions, parsesets) to do work and solve programming challenges according to how you think and see things rather than how a typical language designer saw things when he designed his syntax and what have you.^/^/That is what makes REBOL and now Red special. Both embrace the Chuck Moore philosophy of a virtual computer controlled by one's own custom dictionary. ^/^/^/And that is why a better way to use REBOL and Red is simply to write your own dictionary atop the standard. For that reason, there is little reason to pollute the standard with superfluous words like has been done with `unless`. `Unless` would be useful if REBOL and Red lacked `not`.^/^/Only today, after seeing a tangled mess of a script on Rebol.org, I wrote my own version of what that other writer had been trying to achieve. I did so by leveraging `parse`. Yet, to someone else, my well-documented code (see my github) might seem a mess.^/^/All the same, `unless` is a stupid word in the standard. It's a language wart.  REBOL and Red have at least a couple of those. The sad bit though is that Red needs none. That's Nenad's decision to keep those warts.}
    sent: "2016-09-22T02:46:20.064Z"
    editedAt: "2016-09-22T02:54:37.221Z"
    v: 9
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e344f690ba43d217385b89"
    text: {Although I seem to fall on the side of those saying `unless` doesn't need an `unless not` clause. But I'm happy to let the bigger brains battle it out and then use whatever they decide is warranted.}
    sent: "2016-09-22T02:41:58.563Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57e3447aaabc89857fc17efa"
    text: {@greggirwin "I'm partially useless." Lol! Reading others' thoughts and opinions on programming usually leaves me feeling either righteously indignant or thoughtlessly dumbfounded. Rarely does it make me laugh out loud. Thank you for the laugh! I stand up as another partially useless one.}
    sent: "2016-09-22T02:39:54.560Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57e34353c3e7045a306c609d"
    text: {Unless is a language wart. Was it one of those pet things backported by the 3.0 crowd into Carl's 2.x work?}
    sent: "2016-09-22T02:34:59.247Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e33414df21a7573018fd82"
    text: {I'm partially useless. ^/^/Some of us translate `unless` into `if not` in our heads every time we see it. At least Qingtian and I do.^/^/The reason I care about it, without getting too bent, is that the more it's used in standard code (e.g. built-in Red mezzanines), the more other people will use it. There may be certain cases where it makes code clearer, which is what I care most about.}
    sent: "2016-09-22T01:29:56.830Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e31fe8c3e7045a306bf9a3"
    text: {In any case, the nice thing about Red, is that one need not avail himself of all of the built-in words. ^/^/There is no reason for anyone to get bent about it in gitter.}
    sent: "2016-09-22T00:03:52.840Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e31ce890ba43d21737ed39"
    text: {@DideC  ^/^/> if it appears that you write a `either NOT something [do this][do that]` then you just have to write `either something [do that][do this]`. So having `unless` with two block is just the same that `either`: it would be completely useless.^/^/Because having UNLESS isn't (completely) useless?  Can anything be partially useless?^/^/Isn't it clearer? If not false do something ... }
    sent: "2016-09-21T23:51:04.601Z"
    editedAt: "2016-09-21T23:53:09.907Z"
    v: 4
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e31b98fa660dd95ffe8788"
    text: {@maximvl  ^/^/> "appeal to Perl programmers" ? `unless` is more or less standard macro in lisps since the beginning of times and what it basically means is `(unless x body)` => `(if (not x) body)`^/^/Yeah, the whole drive of Carl with REBOL was not to walk on the same worn paths as all of the other inefficient dullards. In that sense, Carl was much like Chuck Moore (Forth).^/^/REBOL/Red aren't LISP, btw.}
    sent: "2016-09-21T23:45:28.090Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e31b01aabc89857fc10314"
    text: {@greggirwin Ha! I didn't get my edit done in time. ^/^/It seems that if the word `unless` belongs as a built-in, it should have something to do with asynchronous programming, e.g., ^/^/p-code: UNLESS the server (or client) responds negatively, keep processing the next response}
    sent: "2016-09-21T23:42:57.603Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e3181090ba43d21737db98"
    text: {> @TimeSeriesLord, I agree about `unless`.^/^/Right on. I see no worth to it when someone  can type: IF ! ... or IF NOT ^/I whipped up this. I doubt I will use either one though. Likely, there are 50 better ways to do it too.^/^/```^/_unless: func [^/ ^-"If the logic test is false do the first block otherwise do the second block"^/ ^-logic-test^/ ^-b [block!]^/ ^-c [block!]^/ ^-/local^/][^/^/    ;; if block? logic-test [reduce logic-test]^/    either all [not true? logic-test][^/        do reduce b^/    ][^/        do reduce c^/    ]^/] ^/^/```^/^/}
    sent: "2016-09-21T23:30:24.772Z"
    editedAt: "2016-09-21T23:36:19.652Z"
    v: 4
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e2b90fc8af41d45f34df99"
    text: {More fantastic progress from TeamRed! Very exciting.}
    sent: "2016-09-21T16:45:03.421Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e2921dfa660dd95ffc3432"
    text: "this will be something to celebrate by itself"
    sent: "2016-09-21T13:58:53.212Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e29214c8af41d45f342037"
    text: ">When the work on 0.6.2 will be completed"
    sent: "2016-09-21T13:58:44.743Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e27720aabc89857fbe62da"
    text: "excellent  !"
    sent: "2016-09-21T12:03:44.523Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57e2765dc2287b924ff753bc"
    text: "Wonderful news!"
    sent: "2016-09-21T12:00:29.277Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e275d2df21a7573015fe63"
    text: {It means that most (maybe all) users won't have to care about it.}
    sent: "2016-09-21T11:58:10.776Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e2757dfa660dd95ffbb9ee"
    text: {"When the work on 0.6.2 will be completed, it will be transparent for users." - what do you think by that sentence? That the system will somehow recognise there was a change in the backend and hence marks the library for recompilation? Is that even easily (with recent toolchain) possible? I can imagine new switch to compiler to force the recompilation, hence not needing to delete it manually? Thanks ...}
    sent: "2016-09-21T11:56:45.186Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e2744d27a8458f7f329faf"
    text: {I should be able to shave some 10-20KB more from the executables relying on libRed, in a few days.}
    sent: "2016-09-21T11:51:41.521Z"
    editedAt: "2016-09-21T11:51:57.344Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e27405c8af41d45f33a32e"
    text: {[![blob](https://files.gitter.im/red/red/DURL/thumb/blob.png)](https://files.gitter.im/red/red/DURL/blob)}
    sent: "2016-09-21T11:50:29.602Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e2737ec3e7045a306928a2"
    text: {@pekr There's no automatic updating system yet, for now I just delete it manually when I want a refresh one. When the work on 0.6.2 will be completed, it will be transparent for users. Sure, you can post on FB. Let me make you a screenshot.}
    sent: "2016-09-21T11:48:14.560Z"
    editedAt: "2016-09-21T11:49:59.770Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e27343df21a7573015f3fb"
    text: {@DideC We're back to normal since the beginning of this week. Except for some short power cuts and trees/garbage everywhere on the streets, it's fine.}
    sent: "2016-09-21T11:47:15.801Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e2730f27a8458f7f329ba2"
    text: "Can I post that to FB? :-) Sounds exciting!"
    sent: "2016-09-21T11:46:23.694Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e27305c3e7045a30692754"
    text: {I hope life is coming back to normality after the typhoon !?}
    sent: "2016-09-21T11:46:13.446Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57e272fd18291e10488d51f3"
    text: {@dockimbel - great news! Just a question - how does the toolchain recognise, that the libRed part was changed and needs a recompile? Is it OK to just manually delete the library file, or will there be any automatic way of how to achieve that?}
    sent: "2016-09-21T11:46:05.014Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "57e272f5fa660dd95ffbae8a"
    text: {It also mean that very soon, you'll have a C-level API for embedding Red in any 3rd-party software. ;-)}
    sent: "2016-09-21T11:45:57.722Z"
    editedAt: "2016-09-21T11:46:04.889Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e272d0c8af41d45f339e97"
    text: "Nice nice nice !"
    sent: "2016-09-21T11:45:20.201Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57e2723dc3e7045a306924c8"
    text: {FYI, libRed can now properly handle View module, so re-compiling a View script takes just a couple of seconds on an average machine now. It also means that libRed is now fully functional (embedding Red's runtime + modules). Next step is cleaning and improving the changes, then cleaning-up the internal Red runtime API.}
    sent: "2016-09-21T11:42:53.464Z"
    editedAt: "2016-09-21T11:44:41.344Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e2617327a8458f7f32628f"
    text: {if it appears that you write a `either NOT something [do this][do that]` then you just have to write `either something [do that][do this]`. So having `unless` with two block is just the same that `either`: it would be completely useless.^/Like it is today it is equal to `if NOT something [do this]`. The gain is only to remove the NOT from the epression, but it is a (small) gain : `unless something [do this]`.}
    sent: "2016-09-21T10:31:15.656Z"
    editedAt: "2016-09-21T10:31:44.031Z"
    v: 3
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57e25b73c2287b924ff75178"
    text: {Anyway, I don’t think that UNLESS will be changed and I like it this way.}
    sent: "2016-09-21T10:05:39.979Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e25b6ec8af41d45f334bd0"
    text: "s / `if` / `either` /"
    sent: "2016-09-21T10:05:34.049Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e25b59aabc89857fbdf12f"
    text: {because if you need a `else` branch - just revert your condition and write with `if`, this will be much more readable}
    sent: "2016-09-21T10:05:13.695Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e25b4ba3c0cb1b6a21d6df"
    text: {I was just pointing out where does the "appeal to Perl programmers" comes from.}
    sent: "2016-09-21T10:04:59.634Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e25b2627a8458f7f324d51"
    text: "I mean, `unless` has no `else` branch"
    sent: "2016-09-21T10:04:22.987Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e25aff27a8458f7f324c96"
    text: "yep, this is what I'm talking about"
    sent: "2016-09-21T10:03:43.477Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e25a8c06bdca3327081f27"
    text: {@maximvl http://www.rebol.com/r3/docs/functions/unless.html}
    sent: "2016-09-21T10:01:48.470Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e253dddf21a75730157628"
    text: {"appeal to Perl programmers" ? `unless` is more or less standard macro in lisps since the beginning of times and what it basically means is `(unless x body)` => `(if (not x) body)`}
    sent: "2016-09-21T09:33:17.890Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e24fc927a8458f7f322169"
    text: {I don't agree. UNLESS (this is true) might be too close to UNTIL (this is tru) iterator, no? I like what the UNLESS does currently ...}
    sent: "2016-09-21T09:15:53.584Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e1b71ffa660dd95ff93bf2"
    text: "@TimeSeriesLord, I agree about `unless`."
    sent: "2016-09-20T22:24:31.266Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e1a09433c63ba01a1bb3a6"
    text: {:point_up: [September 18, 2016 10:29 AM](https://gitter.im/red/red?at=57decefac8af41d45f266c64) @greggirwin It seems like it would be great if `/into` could be generalized for things that write into a series (outside their methods). I can't imagine how it would be accomplished, but maybe it is possible...}
    sent: "2016-09-20T20:48:20.786Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57e1970718291e10488a4d09"
    text: {Having an opposite to `either` is not very usefull. What is the gain to just put the block in another order?}
    sent: "2016-09-20T20:07:35.880Z"
    editedAt: "2016-09-20T20:07:45.466Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57e17dfd33c63ba01a1b206b"
    text: {Could someone explain the gist of UNLESS beyond the "appeal to Perl programmers?" Should not an UNLESS be the opposite of EITHER rather than a short cut for IF ! FALSE. ^/^/Would not a true design for an UNLESS mean this: UNLESS (this is true) [DO THIS][OTHERWISE DO THAT]? If so, is not that merely an opposite EITHER? EITHER true [DO THIS][OTHERWISE DO THAT]?}
    sent: "2016-09-20T18:20:45.387Z"
    editedAt: "2016-09-20T18:22:20.080Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e11fa233c63ba01a197416"
    text: "red/system reminds me a lot of terra. seems nice."
    sent: "2016-09-20T11:38:10.978Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e11860c8af41d45f2e6deb"
    text: "thanks, i will."
    sent: "2016-09-20T11:07:12.336Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e1184cdf21a7573010fec3"
    text: {@randrew Feel free to ask any questions about Red/Rebol here or in the red/help room.}
    sent: "2016-09-20T11:06:52.158Z"
    editedAt: "2016-09-20T11:07:13.860Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e1181adf21a7573010fe70"
    text: {yeah :) i'm just using rebol2 to learn right now. was busy the last couple of weeks so i didn't get to dive in, but i am now.}
    sent: "2016-09-20T11:06:02.933Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e1088827a8458f7f2d65c1"
    text: {:point_up: [September 20, 2016 2:41 PM](https://gitter.im/red/red?at=57e1046233c63ba01a191243) @Dimonax, @randrew }
    sent: "2016-09-20T09:59:36.858Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e107a5aabc89857fb8f478"
    text: "Yes"
    sent: "2016-09-20T09:55:49.994Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e1077cc3e7045a30640076"
    text: {That part is correct. The missing part is that you don't need to rebuild the Red binary for doing whatever you want with it. So, maybe we should reformulate that. Many developers are coming with preconceived ideas about what is a programming language toolchain.}
    sent: "2016-09-20T09:55:08.699Z"
    editedAt: "2016-09-20T09:56:44.308Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e10751fa660dd95ff627c0"
    text: {more emphasis there, that it is not necessary to work with sources}
    sent: "2016-09-20T09:54:25.839Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e10725c8af41d45f2e2a07"
    text: {>Prerequisite^/^/>You need a Rebol SDK copy with a valid license file in order to rebuild the Red binary, this is a constraint from using Rebol2 for the bootstrapping. Once selfhosted, Red will not have such constraint.}
    sent: "2016-09-20T09:53:41.462Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e10712c3e7045a3063ff14"
    text: {@dockimbel I think https://github.com/red/red/blob/master/build/README.md is the problem}
    sent: "2016-09-20T09:53:22.196Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e1064cc3e7045a3063fc78"
    text: {@geekyi The Red homepage on Github and the "Getting Started" page on red-lang.org are already covering that, showing how to use the Red toolchain from sources with the basic Rebol interpreter. Maybe what is missing is an explanation about the lack of "building" need in Red, as the toolchain runs on a interpreter (though it is implied in the above pages).}
    sent: "2016-09-20T09:50:04.067Z"
    editedAt: "2016-09-20T09:52:18.303Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e105fac3e7045a3063fb76"
    text: {@dockimbel I think that needs to be in the faq somewhere, it discourages contributions as a lot of people assume that is needed to compile from source. e.g. [September 11, 2016 2:43 AM](https://gitter.im/red/red/welcome?at=57d47e94b8d4c1384082fb28) and [September 4, 2016 5:56 PM](https://gitter.im/red/red/welcome?at=57cc19e3928ae0e7347680cb)}
    sent: "2016-09-20T09:48:42.566Z"
    editedAt: "2016-09-20T09:51:24.726Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57e104a5fa660dd95ff61d70"
    text: "@geekyi yep, from github"
    sent: "2016-09-20T09:43:00.997Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e1049927a8458f7f2d5801"
    text: {@maximvl latest source? (I'm unable to find that exact code using search but whatever :smile:)}
    sent: "2016-09-20T09:42:49.477Z"
    editedAt: "2016-09-20T09:44:45.656Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57e1046aaabc89857fb8e7bc"
    text: {the thing is this is the only system you can learn to get some understanding of Red/Rebol}
    sent: "2016-09-20T09:42:02.944Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e1046233c63ba01a191243"
    text: {@geekyi Rebol/SDK is not required for using or running Red, it is only used for generating a standalone Red executable, including the whole Red toolchain and runtime library in it. You can run the whole Red toolchain from sources using the basic Rebol interpreter. The standalone Red executable is just provided for convenience.}
    sent: "2016-09-20T09:41:54.188Z"
    editedAt: "2016-09-20T09:44:53.410Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e10441c3e7045a3063f59c"
    text: {My intuition is it's not really necessary, can you clarify tho?}
    sent: "2016-09-20T09:41:21.646Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e1042e18291e104887e211"
    text: {@dockimbel there's been some questions by newcomers about rebol/sdk, on it's requirement to dig deep into the low level guts of RED}
    sent: "2016-09-20T09:41:02.279Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e10402aabc89857fb8e67d"
    text: "You'll find similar code in `red/build/` folder."
    sent: "2016-09-20T09:40:18.139Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e103e4c3e7045a3063f42d"
    text: "@geekyi from Cheyenne I'm running"
    sent: "2016-09-20T09:39:48.348Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e10399c8af41d45f2e1cde"
    text: {@maximvl  :point_up: [September 20, 2016 1:14 AM](https://gitter.im/red/red?at=57e04713c8af41d45f2bae47) where is the code from?}
    sent: "2016-09-20T09:38:33.881Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e1037c18291e104887df44"
    text: {The encapping process is just a way to add a compressed version of the source files to a special version of the Rebol interpreter, creating a standalone executable, which loads and runs your code on start (uncompressing the files from the executable in memory and running them from there).}
    sent: "2016-09-20T09:38:04.577Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e1030b18291e104887dd54"
    text: {ah, I see, thanks, a lot of things to think about here}
    sent: "2016-09-20T09:36:11.281Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e102f5fa660dd95ff616fb"
    text: {Generating executables is the purpose of Rebol/Encap product (part of the Rebol/SDK).}
    sent: "2016-09-20T09:35:49.385Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e102dddf21a7573010a971"
    text: "but Rebol doesn't generate executables, does it?"
    sent: "2016-09-20T09:35:25.473Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e102c0aabc89857fb8e1aa"
    text: {@maximvl It loads cached files content on *encapping*, which is when the executable is generated.}
    sent: "2016-09-20T09:34:56.209Z"
    editedAt: "2016-09-20T09:35:13.057Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e10285c8af41d45f2e18eb"
    text: {does `#include` load file content into the block on start?}
    sent: "2016-09-20T09:33:57.508Z"
    editedAt: "2016-09-20T09:34:01.500Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e1026e33c63ba01a190662"
    text: {@dockimbel but it just contains  lines like `^-%misc/conf-parser.r^-^-[#include %misc/conf-parser.r]`}
    sent: "2016-09-20T09:33:34.905Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e10135aabc89857fb8da62"
    text: {No, that memory cache is not meant for *reducing* disk accesses, it is for *suppressing* all disk accesses from an encapped codebase for the cached files, so that it becomes self-contained and does not pollute the disk with temporary files. It acts like a poor's man virtual filesystem where the files are pulled from memory and not from disk, when in encapped code. This is a specific workaround for the Rebol/Encap constraints. The Red executable could be made to dump its own source code to disk, using a specific command-line argument (to be added), and then let you run the codebase from the disk instead of from memory. ;-)}
    sent: "2016-09-20T09:28:21.137Z"
    editedAt: "2016-09-20T09:34:21.426Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e10058fa660dd95ff60baf"
    text: {@dockimbel I mean, since you put file into cache you want to `do` it several times during program execution}
    sent: "2016-09-20T09:24:40.543Z"
    editedAt: "2016-09-20T09:24:48.501Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0ffbe18291e104887d15d"
    text: "It is just loaded once, through a memory cache."
    sent: "2016-09-20T09:22:06.123Z"
    editedAt: "2016-09-20T09:22:42.817Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e0fc0418291e104887c290"
    text: {@maximvl just not used to idea that one may need to load same file several times}
    status: true
    sent: "2016-09-20T09:06:12.352Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0fbde18291e104887c1fb"
    text: {@maximvl Precisely, yes. That's how the `red` executable works, it pulls source files from memory and runs them using `do`.}
    sent: "2016-09-20T09:05:34.249Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "57e0f96fc8af41d45f2df632"
    text: {does it mean you have content of all these files in memory, and load it from there?}
    sent: "2016-09-20T08:55:11.501Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0f70dc8af41d45f2dedae"
    text: {@maximvl It means: when you access files using the encap-fs *-cache API, which should be then used instead of the standard file I/O functions. Basically, you just replace in your code the file I/O calls, define which files you want to cache, and the framework handles the rest for you. You can then encap your codebase or run it with `do` with no further changes.}
    sent: "2016-09-20T08:45:01.243Z"
    editedAt: "2016-09-20T08:45:32.910Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e0ef7227a8458f7f2d07cf"
    text: {@dockimbel hi, but what does `files are requested from` mean?}
    sent: "2016-09-20T08:12:34.647Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0bab033c63ba01a17f427"
    text: {@endo64 Remember Rebol2 is not Unicode-aware, Red is:^/```lisp^/R2>> "^^(0D0A)"^/== "^^/"^/red>> "^^(0D0A)"^/== "ഊ"^/```^/`^^(0D0A)` is one codepoint only, maybe you wanted `"^^(0D)^^(0A)"` rather?}
    sent: "2016-09-20T04:27:28.252Z"
    editedAt: "2016-09-20T04:29:02.093Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e0ba27c8af41d45f2d0474"
    text: {@maximvl `encap-fs` is an old little framework I wrote a long time ago to allow having a Rebol2 codebase to be encapped (using Rebol/SDK) while still being able to run it from source (running the main script with `do`) without any change (this is not possible by default with the SDK). It works by creating a memory cache where files are requested from, when run from an encapped instance.}
    sent: "2016-09-20T04:25:11.568Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e050fa33c63ba01a16cc8a"
    text: "That's really useful :)"
    sent: "2016-09-19T20:56:26.455Z"
    v: 1
    author: "57e04c5a40f3a6eec0662036"
) #(
    id: "57e05021c8af41d45f2bd614"
    text: {http://www.red-by-example.org/ is working some things up, and you can still use a lot of Rebol docs for reference. If there's a func you need that isn't in Red yet, folks here can often help out.}
    sent: "2016-09-19T20:52:49.175Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e04f73fa660dd95ff3b995"
    text: {Thanks. A propos, is there a red dictionary similar to the rebol one? Googling for "use" or indeed "has" is a no-hoper}
    sent: "2016-09-19T20:49:55.053Z"
    v: 1
    author: "57e04c5a40f3a6eec0662036"
) #(
    id: "57e04e1daabc89857fb68829"
    text: {There are a number of articles that discuss binding in Rebol, and its model of definitional scoping.  Red mimics it very closely, though may differ in some details. Here's how you can write `use` in Red, as a quick stub:^/```^/use: func [^/^-"Defines words local to a block evaluation."^/^-vars [block!] "Words local to the block"^/^-body [block!] "Block to evaluate"^/][^/^-; R3: apply make closure! reduce [to block! vars copy/deep body] []^/^-; Renaud Gombert's simple approach^/^-do has vars body^/]^/```}
    sent: "2016-09-19T20:44:13.927Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e04d6a33c63ba01a16bf83"
    text: {In Rebol there is something called "use". What's the equivalent in red? I'm trying to understand how scopes work. As a lisp enthusiast, http://blog.hostilefork.com/rebol-vs-lisp-macros/ seemed an interesting place to start}
    sent: "2016-09-19T20:41:14.494Z"
    v: 1
    author: "57e04c5a40f3a6eec0662036"
) #(
    id: "57e04783aabc89857fb66a44"
    text: {If Nenad built it, there was certainly a valid rationale behind it, but I can't say what that is without seeing how it all works.}
    sent: "2016-09-19T20:16:03.200Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e04713c8af41d45f2bae47"
    text: {```^/REBOL []^/encap-fs/cache: [^/^-%HTTPd.r^-^-[#include %HTTPd.r]^/^-%httpd.cfg^-^-#include-binary %httpd.cfg^/^-%misc/conf-parser.r^-^-[#include %misc/conf-parser.r]^/^-%misc/debug-head.html^-^-#include-binary %misc/debug-head.html^/^-%misc/debug-menu.rsp^-^-#include-binary %misc/debug-menu.rsp^/^-%misc/mime.types^-^-#include-binary %misc/mime.types^/^-%misc/system.r^-^-[#include %misc/system.r]^/^-%misc/os.r^-^-[#include %misc/os.r]^/```^/}
    sent: "2016-09-19T20:14:11.616Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0470cfa660dd95ff390ea"
    text: {And you have to name and manage all those files, which may mean mapping internal names to safe names for the FS, etc. The alternative may have been a `save/load` model with individual files. I can't say.}
    sent: "2016-09-19T20:14:04.972Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e0470133c63ba01a169d9f"
    text: "here is example of what's there"
    sent: "2016-09-19T20:13:53.035Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e046aec3e7045a306191d5"
    text: {And you didn't have to litter the file system with separate files, any of which the user might mess with and cause your app to crash.}
    sent: "2016-09-19T20:12:30.923Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e046a118291e1048857255"
    text: "I mean, you can `read %dir` to get it"
    sent: "2016-09-19T20:12:17.702Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0469733c63ba01a169c6a"
    text: "but it just contains list of files"
    sent: "2016-09-19T20:12:07.438Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e04669c3e7045a3061912a"
    text: {So you didn't have to use a database for simple, structured data. Remember, not everyone has `load` and `save`. :^^)}
    sent: "2016-09-19T20:11:21.881Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e04601c8af41d45f2baa35"
    text: "but what is the reason for one?"
    sent: "2016-09-19T20:09:37.554Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e045c8fa660dd95ff38bbc"
    text: {I haven't read the source for it, but "FS in a file" is an old idea. Windows called it "structured storage" in the OLE days.}
    sent: "2016-09-19T20:08:40.355Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e042bffa660dd95ff375ea"
    text: "but I don't get overall idea"
    sent: "2016-09-19T19:55:43.011Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e042a1aabc89857fb6557b"
    text: {so far I can see it writes files structure into one file}
    sent: "2016-09-19T19:55:13.433Z"
    editedAt: "2016-09-19T19:55:27.542Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0406e27a8458f7f2abfde"
    text: {what is thing called `encap-fs`? There is also similar module in Red repo}
    sent: "2016-09-19T19:45:50.030Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0404caabc89857fb64aa8"
    text: "I'm reading sources of Cheyenne"
    sent: "2016-09-19T19:45:16.930Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0404227a8458f7f2abf4c"
    text: "hey guys"
    sent: "2016-09-19T19:45:06.274Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e03f7ec8af41d45f2b8f55"
    text: {Good thing is, that Gitter's not written in Red, or we would not be here anymore :-)}
    sent: "2016-09-19T19:41:50.276Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57e03dac7d29cd8645a3c6fd"
    text: ":D"
    sent: "2016-09-19T19:34:04.978Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e03c54c8af41d45f2b833e"
    text: "Sorry. I finished playing with Red not there"
    sent: "2016-09-19T19:28:20.053Z"
    v: 1
    author: "56e2f83685d51f252ab85587"
) #(
    id: "57e03a8727a8458f7f2aa803"
    text: "q"
    sent: "2016-09-19T19:20:39.203Z"
    v: 1
    author: "56e2f83685d51f252ab85587"
) #(
    id: "57dfd8e527a8458f7f28e6c7"
    text: ":D"
    sent: "2016-09-19T12:24:05.723Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dfd8b718291e10488374a5"
    text: "Here it is in all its glory  -->  ഊ"
    sent: "2016-09-19T12:23:19.669Z"
    editedAt: "2016-09-19T12:23:36.557Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57dfd86ec8af41d45f29ba78"
    text: {```"^^(0D0A)"``` is a valid string containing the "MALAYALAM LETTER UU"}
    sent: "2016-09-19T12:22:06.346Z"
    editedAt: "2016-09-19T12:22:16.582Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57dfd810aabc89857fb48172"
    text: "It is correct ;-) just not what you wanted !!"
    sent: "2016-09-19T12:20:32.225Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57dfd555fa660dd95ff17e5c"
    text: "Ah got it, `^^(0D0A)` is not a correct syntax."
    sent: "2016-09-19T12:08:53.556Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57dfd406fa660dd95ff177fa"
    text: {I'm a bit confused on the below issue:^/```^/red>> to integer! first  "^^(41)"^/== 65 (correct)^/red>> to integer! first "^^(0D0A)"^/== 3338 (incorrect?)^/^/R2>> to integer! first "^^(0D0A)"^/== 10^/```}
    sent: "2016-09-19T12:03:18.046Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57dfc985c8af41d45f297d9d"
    text: {0.7 after macOs gui that's almost done?^/Is this the real life? Is this just fantasy?}
    sent: "2016-09-19T11:18:29.363Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57dfad7a1c27d1b525aa313c"
    text: {AFAICT, code using the temporary IO will still work with the future IO. CMIIW, but I don't think beginners need to be aware of the rewrite unless they want to use IO in a more advanced way.}
    sent: "2016-09-19T09:18:50.027Z"
    editedAt: "2016-09-19T09:19:27.171Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57dfac44df21a757300ba9df"
    text: {besides, people might not understand that this IO is temporary and leave before realizing this}
    sent: "2016-09-19T09:13:40.228Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dfac0bfa660dd95ff0e232"
    text: {it has no documentation, so it's hard to talk about `current temporary IO` )}
    sent: "2016-09-19T09:12:43.946Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dfabdf1c27d1b525aa3120"
    text: {IMHO, Red's current temporary IO is already usable enough for beginners to start learning Red and to stick with it.}
    sent: "2016-09-19T09:11:59.470Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57dfab2bdf21a757300ba5f7"
    text: {it is more like people will say "wow, you can write cool gui in Red", and return to their usual programming in python/java/etc}
    sent: "2016-09-19T09:08:59.464Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dfaaf6fa660dd95ff0dec4"
    text: "Android support will not give you that"
    sent: "2016-09-19T09:08:06.577Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dfaae827a8458f7f283f0e"
    text: {so more people will start learning Red, even with a console applications and scripts}
    sent: "2016-09-19T09:07:52.549Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dfaaabc8af41d45f290c3d"
    text: {the thing with IO is Red will become more or less practically usable}
    sent: "2016-09-19T09:06:51.020Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dfaa84f042063656d401c4"
    text: {@pekr there is work on both MacOS GUI and libRed now, so I guess this can be case with Android/IO also.}
    sent: "2016-09-19T09:06:12.034Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dfaa41aabc89857fb3d57f"
    text: {@rebolek I can see Android being still before the IO, so we will see, how Doc decides on that ... Many ppl want IO first, but Android was mentioned several times as being a strategic priority. We will see ...}
    sent: "2016-09-19T09:05:05.319Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57dfaa16f042063656d4019e"
    text: "It seems that the timing was much better now :)"
    sent: "2016-09-19T09:04:22.985Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dfa775c8af41d45f290090"
    text: {It is common on HN to re-post, at a more favorable time, older posts that didn't make it on front-page.}
    sent: "2016-09-19T08:53:09.689Z"
    editedAt: "2016-09-19T08:54:33.825Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57df9f9b1c27d1b525aa2fd2"
    text: {It was, twice, once with 5 points and once with 2 points. Now it’s on 61 points. I don’t think it’s the first time something has been posted on HN more times by different people :)}
    sent: "2016-09-19T08:19:39.108Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57df9e9933c63ba01a13e360"
    text: "wait, but this post already was on HN"
    sent: "2016-09-19T08:15:21.486Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57df9d56f042063656d3ffaf"
    text: {0.7.0 right after Mac backend? That sounds really great!}
    sent: "2016-09-19T08:09:58.601Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57df99f1fa660dd95ff09f53"
    text: {@JacobGood1 Well, a little yes, as construction quality standards are pretty low in this part of the world. ;-)}
    sent: "2016-09-19T07:55:29.517Z"
    editedAt: "2016-09-19T07:57:50.341Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57df99b533c63ba01a13d026"
    text: {Eager to see, how Mac community feels about the GUI :-)}
    sent: "2016-09-19T07:54:29.361Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57df991cc3e7045a305ebc7c"
    text: {@maximvl Now the Mac GUI backend is almost completed, we can make a better estimation for the work on GTK. We expect it to take 2 to 3 months to achieve. Though, full I/O is higher-priority, so we'll open a 0.7.0 branch as soon as the Mac backend is released.}
    sent: "2016-09-19T07:51:56.828Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57df988faabc89857fb39672"
    text: {We're on HackerNews, please upvote! https://news.ycombinator.com/item?id=12526263}
    sent: "2016-09-19T07:49:35.053Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57df5881df21a757300aa117"
    text: {I should add that a compelling case for `/into` is to collect into a string instead of a block.}
    sent: "2016-09-19T03:16:17.003Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57decefac8af41d45f266c64"
    text: {Thanks @endo64. I had that in my original version, but removed it for simplicity. And our code for pre-allocating the block is almost identical. :^^) I go back and forth about whether I think `/into` is a good thing. While I like the idea of control (and, indeed, an HOF accumulator model comes up in more and more things I look at), it adds this small element of complexity *everywhere*. It means that, if we want consistency, *every* series function should support it, right? And that means every new series function I write should also support it. And it's not hard to get it wrong (IMO). It also means all calling code has the optional `/into`,  which adds another thing you can get wrong.}
    sent: "2016-09-18T17:29:30.091Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57debac0aabc89857fb11e21"
    text: "glad that doc and qtxie are safe :smile: "
    sent: "2016-09-18T16:03:12.074Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57deba6a27a8458f7f257932"
    text: {@maximvl  [gtk on trello roadmap](https://trello.com/c/aoO1zUGr/156-gtk3-gui-backend) I'd expect libred to be next on the list}
    sent: "2016-09-18T16:01:46.794Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57deba6818291e1048800a5e"
    text: "zity"
    sent: "2016-09-18T16:01:44.824Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57de9173aabc89857fb0ab0f"
    text: {Hi @greggirwin I've made some small changes on `gather` function now it can append the values into an existing block,^/^/```^/gather: function [^/    "Gather the specified values from each item in the block"^/    block [block!] "Block of items to gather data from"^/    keys                   "One or more indexes or keys to gather"^/    /only                  "Insert results as sub-blocks"^/    /into output   "Provide an output series instead of creating a new one"^/][^/    keys: compose [(keys)]                        ; blockify keys for consistent iteration^/^-unless into [output: make block! (length? block) * length? keys]^/    collect/into [^/        foreach item block [^/            vals: collect [^/                foreach key keys [keep/only item/:key]^/            ]^/            either only [keep/only vals] [keep vals]^/        ]^/    ] output^/    output^/]^/```^/^/What `gather` function does is very similar to `extract`, so may be we can merge those functions under one, better in `extract`, for example if the `width` parameter is is integer then it works just like `extract` if it is a block then it works as `gather`.^/What do you think?}
    sent: "2016-09-18T13:06:59.091Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57de84cec8af41d45f259168"
    text: {should we expect Linux GUI to be finished fast too?}
    sent: "2016-09-18T12:13:02.457Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57de70f2c8af41d45f255823"
    text: "P"
    sent: "2016-09-18T10:48:18.868Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57de615d27a8458f7f248c00"
    text: {I think that  b  is a reference to the 'a' series.  There is only one series in memory, currently.  Expected.}
    sent: "2016-09-18T09:41:49.972Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57ddebb418291e10487e1723"
    text: {@raimundasa It isn't a bug, but is the expected behaviour:^/```text^/red>> a: [1 2 3 4 5 6 7 8 9]        ; bind word a to the value [1 2 3 4 5 6 7 8 9] ^/== [1 2 3 4 5 6 7 8 9]^/red>> b: at a 5                     ; bind a to the same value with the index set to 5^/== [5 6 7 8 9]^/red>> a/8: "eight"^/== "eight"^/red>> b                             ; show that b and a are bound to the same value^/== [5 6 7 "eight" 9]^/```}
    sent: "2016-09-18T01:19:48.953Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57dd99df27a8458f7f22b4ef"
    text: {This is a bug?^/```^/a: [1 2 3 4 5 6 7 8 9]^/b: at a 5^/append/part b a 4^/print b ; = [5 6 7 8 9 1 2 3 4]^/print a ; = [1 2 3 4 5 6 7 8 9 1 2 3 4] ???^/```}
    sent: "2016-09-17T19:30:39.593Z"
    v: 1
    author: "56e2f83685d51f252ab85587"
) #(
    id: "57dd8dd0fa660dd95feb17e6"
    text: {Here is a basic version of a handy function, when you need to extract one or more fields from records (obj/blk/map):^/```^/gather: function [^/^-"Gather the specified values from each item in the block"^/^-block [block!] "Block of items to gather data from"^/^-keys           "One or more indexes or keys to gather"^/^-/only          "Insert results as sub-blocks"^/][^/^-keys: compose [(keys)]^-^-^-^-^-^-; blockify keys for consistent iteration^/^-collect [^/^-^-foreach item block [^/^-^-^-vals: collect [^/^-^-^-^-foreach key keys [keep/only item/:key]^/^-^-^-]^/^-^-^-either only [keep/only vals] [keep vals]^/^-^-]^/^-]^/]^/e.g. [^/^-blk: [[1 2 3] [4 5 6] [7 8 9]]^/^-gather blk [1 3]^/^-gather/only blk [1 3]^/^-gather blk 2^/^/^-blk: reduce [object [x: y: z: none] object [x: 1 y: 2 z: 3]]^/^-gather blk [x z]^/^-gather/only blk [x z]^/^-gather blk 'y^/^/^-blk: reduce [#(a: 1 b: 2 c: 3) #(x: 4 y: 5 z: 6) #(a: 1 b: 22 z: 33)]^/^-gather blk [a z]^/^-gather/only blk [a z]^/^-gather blk 'b^/]^/```^/As a standard mezzanine, it would need some design work, but even this basic version is very usable.}
    sent: "2016-09-17T18:39:12.875Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dd66ffc3e7045a30590612"
    text: {@dockimbel was that frightening, did you think your building might fall?}
    sent: "2016-09-17T15:53:35.276Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57dd66e8fa660dd95feaa2c4"
    text: {And it looks like *great* progress on the OS X GUI.}
    sent: "2016-09-17T15:53:12.693Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dd66cbc3e7045a30590583"
    text: {@dockimbel, most important is that you and @qtxie are safe. }
    sent: "2016-09-17T15:52:43.259Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dd2f8fdf21a757300520d3"
    text: "but I can easily wait, no worries ...."
    sent: "2016-09-17T11:57:03.496Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57dd2f8018291e10487c2460"
    text: {from geekyi > @pekr I guess doc accidentally reversed my change in a merge conflict red/red@6531d70}
    sent: "2016-09-17T11:56:48.579Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57dd2e8bdf21a75730051e24"
    text: {Yes, it is just that it worked, or so I think ....}
    sent: "2016-09-17T11:52:43.972Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57dd2e7efa660dd95fea0c5c"
    text: {Almost all the unit tests are passing now, only compilation of object inheritance is broken (used in %reactivity-test.red).}
    sent: "2016-09-17T11:52:30.755Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57dd2e3c33c63ba01a0d4cb7"
    text: {:point_up: [September 17, 2016 5:28 PM](https://gitter.im/red/red?at=57dd0ccc27a8458f7f21339d) Absolute paths are required there for now for the compilation process to work properly when source files to compile are located in different folders. It will be replaced once the code is stabilized. Just put your own local paths if you want to test it. Remember it's a development branch, so it is a work in progress.}
    sent: "2016-09-17T11:51:24.275Z"
    editedAt: "2016-09-17T11:53:25.896Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57dd2daec8af41d45f221d7a"
    text: ":-)"
    sent: "2016-09-17T11:49:02.766Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57dd2d8eaabc89857fad4129"
    text: {@pekr Could work, though, if used during a class 5 typhoon, I'm not sure on which continent I would land (and in how many pieces). ;-)}
    sent: "2016-09-17T11:48:30.029Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57dd111b18291e10487bce81"
    text: {Is the 31st floor enough height to have an emergency parachute at home? Just in case? :-)}
    sent: "2016-09-17T09:47:07.415Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57dd1086fa660dd95fe9b56d"
    text: {I'm living on the 31st and last floor of my building. During the typhoon, it was tilting by about 40cm for about 3 hours, I was feeling like on a boat. ;-)}
    sent: "2016-09-17T09:44:38.251Z"
    editedAt: "2016-09-17T09:45:27.639Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57dd103bfa660dd95fe9b4ef"
    text: "3rd floor flooding - unbelievable ...."
    sent: "2016-09-17T09:43:23.297Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57dd1018df21a7573004cd19"
    text: "Fortunately, just the carpet was damaged."
    sent: "2016-09-17T09:42:48.852Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57dd0ff733c63ba01a0cfe5e"
    text: {[![mmexport1473988820335.jpg](https://files.gitter.im/red/red/ePDH/thumb/mmexport1473988820335.jpg)](https://files.gitter.im/red/red/ePDH/mmexport1473988820335.jpg)}
    sent: "2016-09-17T09:42:15.720Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57dd0fc7fa660dd95fe9b3c3"
    text: "Here is our office after the typhoon:^/"
    sent: "2016-09-17T09:41:27.912Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57dd0ccc27a8458f7f21339d"
    text: {@dockimbel you were not here, so you might missed the talk about a possible regression? IIRC, the hardwired path was fixed? Most probably the fix got lost during some merge?^/^/```^/Compiling to native code...^/*** Driver Internal Error: Access Error : Cannot open /c/dev/red/libred-include.red^/*** Where: process^/*** Near:  [write %/c/dev/red/libred-include.red tmpl^/words: to-block^/]^/```}
    sent: "2016-09-17T09:28:44.823Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57dd0c8baabc89857face96a"
    text: "looks like there was a lot of damage"
    sent: "2016-09-17T09:27:39.240Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dd0b7818291e10487bbec7"
    text: "oh wow"
    sent: "2016-09-17T09:23:04.762Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dd0aa733c63ba01a0cf0b0"
    text: {BTW, we are just recovering from a [class 5 typhoon](https://en.wikipedia.org/wiki/Typhoon_Meranti_%282016%29) that [hit](http://edition.cnn.com/2016/09/14/asia/typhoon-meranti-weather/) Xiamen on 14th, leaving us without water/electricity/food until this morning. Our office suffered also a mild flooding (we're on 3rd floor, but the rain with the help of strong wing, found a way in). That typhoon was in the top 3 strongest ones ever recorded in history!}
    sent: "2016-09-17T09:19:35.680Z"
    editedAt: "2016-09-17T09:23:45.696Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57dd09c033c63ba01a0cee92"
    text: {FYI, as the Mac GUI backend is advancing faster than expected, so we have moved it earlier in our schedule (see https://trello.com/b/FlQ6pzdB/red-tasks-overview). The detail of the work on Mac GUI is there: https://trello.com/c/UgsrhiHf/143-macosx-gui-backend}
    sent: "2016-09-17T09:15:44.732Z"
    editedAt: "2016-09-17T09:15:54.797Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57dcffadf042063656d3d028"
    text: {@rebolek Wolfram is the company name, so I'm not sure what you meant by it being online only. The Wolfram Language is not online only, if that's what you were referring to. It's part of the Mathematica products, for example.}
    sent: "2016-09-17T08:32:45.544Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "57dc714e33c63ba01a0b9ccf"
    text: {Topaz has always been experimental. Can't say what the future holds, but it shows that Redbol to JS is, in basic form, a solved problem.}
    sent: "2016-09-16T22:25:18.877Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dc281aaabc89857faa8b41"
    text: "Is there an endorsed Red hashtag? #redlang ?"
    sent: "2016-09-16T17:12:58.583Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57dc27ff18291e10487974fd"
    text: "I've not used it much beyond initial evaluation."
    sent: "2016-09-16T17:12:31.513Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57dbc7cdc3e7045a30542bb4"
    text: {did anybody use Topaz? I can't even get system/words list =\}
    sent: "2016-09-16T10:22:05.939Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57dbbf1c27a8458f7f1d2122"
    text: {@geekyi hi, is there any info how to start with Cheyenne?}
    sent: "2016-09-16T09:45:00.228Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57db28d2fa660dd95fe3af16"
    text: "@geekyl, yes. @BlackATTR, I couldn't agree more."
    sent: "2016-09-15T23:03:46.921Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57db0ea4c8af41d45f1bad2d"
    text: {:point_up: [September 15, 2016 3:06 PM](https://gitter.im/red/red?at=57da8ee327a8458f7f190de2)^/^/I wrote a websocke client six years ago just as an experiment, http://www.moldibi.com/rebol/ws.html^/Here is the SO link http://stackoverflow.com/questions/3329428/any-simple-standalone-code-sample-for-a-websocket-protocol-ws-implementation-i^/And additionally I found this on github: https://github.com/WayneCui/rebol-websocket}
    sent: "2016-09-15T21:12:04.330Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57db0dd827a8458f7f1b1c7c"
    text: {I work for a fortune 500 company where much of our application stack is migrating into the cloud (e.g., SalesForce, Heroku) and big data offerings (MongoDB). Yes this driven by quite a lot of industry hype, but it's a reality. The ability to script in a cloud / big data environment is far more important to my world than to build native GUIs. This trend isn't going away anytime soon. The cloud/big data desperately needs new *simple* languages and customizable syntaxes to cut through all of the complexity in those environments.}
    sent: "2016-09-15T21:08:40.884Z"
    v: 1
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "57db0586df21a75730feabb0"
    text: {You could also argue about it dealing with deployment of changes at scale, but that's not needed for everyone.. *and* simple lightweight systems usually scale better (e.g. erlang). Perhaps I may also not be so upto date on the latest requirements and tech}
    sent: "2016-09-15T20:33:10.312Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57db04bb18291e1048757390"
    text: {@greggirwin I agree with you there, probably overkill for red (like most things out there). Instead, it's more of a marketing thing, having red everywhere, "one-click deployment" etc. Actually there are lighter methods to deployment in between (for e.g. say.. cheyenne) and full "container orchestration" with VMs; such as NixOS and guix (using functional dependencies). The problem they all are trying to solve in my opinion, (in the most abstract sense) is the *dependency problem*}
    sent: "2016-09-15T20:29:47.161Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57dafbdec3e7045a3051d76e"
    text: {Another summary view, for me, is that we should look at *everything* out there, not only to see what they get right, and not to just redo what they've done, but to look at *why they exist*. Look at the problem they're trying to solve and think, independently, about how best to solve that problem.}
    sent: "2016-09-15T19:51:58.361Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57dafb32df21a75730fe81ff"
    text: {I hadn't seen Heroku Languages. That's a smart way to promote their service, and valuable where languages are hard to manage and slurp up lots of other stuff. Another good thing to look into, I agree, but also comes back to how Red doesn't really benefit from containers as much as other stuff, because it is already so self-contained. As the infrastructure grows, it may be a better fit, or maybe we can build frameworks and systems that solve the problem containers purport to, but in a much lighter way.}
    sent: "2016-09-15T19:49:06.492Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dafa53c8af41d45f1b5555"
    text: {And as an alternative, as @BlackATTR  says, it's well integrated with a cloud concept. The idea that you can create something small, deploy it instantly, and have a URL to that functionality is not far from the idea of Reblets...Redlets...Redbol..ets...Red Bullets?}
    sent: "2016-09-15T19:45:23.640Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57daf9a427a8458f7f1ac88e"
    text: {@rebolek, what I mean by closely aligned is in the idea of symbolic processing. If you look at WDF (Wolfram Data Framework), the underlying text representation isn't far from Red. Only Red is cleaner. ;^^)}
    sent: "2016-09-15T19:42:28.467Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57daf897fa660dd95fe2fa96"
    text: {I'm currently having a bit of a problem with windows updates.. has used up 10 GBs (!) worth of data this month}
    sent: "2016-09-15T19:37:59.690Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57daf7fe27a8458f7f1ac1f4"
    text: {@BlackATTR that is (another) good idea! Not just heroku, other similar systems that deploy..}
    sent: "2016-09-15T19:35:26.537Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57daf1feaabc89857fa6817a"
    text: {Nice that Wolfram is well integrated for cloud computing though. Anybody thought about getting redbol into Heroku? https://www.heroku.com/languages}
    sent: "2016-09-15T19:09:50.781Z"
    v: 1
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "57dae8a1c3e7045a30517679"
    text: {@greggirwin nothing against Wolfram, but it’s online-only.}
    sent: "2016-09-15T18:29:53.885Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dae58cdf21a75730fe2b12"
    text: {It's declarative and reactive in a way since there are no lifetimes to manage}
    sent: "2016-09-15T18:16:44.503Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57dae568aabc89857fa64ebf"
    text: {@cthutu The screenshots look great, and the code is almost VID-like (in C++ clothing).}
    sent: "2016-09-15T18:16:08.472Z"
    editedAt: "2016-09-15T18:16:22.268Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dae542df21a75730fe2a23"
    text: {Perhaps ironically, one of the languages I see as closely aligned with Red in many ways is the Wolfram Language. The irony being that it grew out of "thinking large" (knowledge based programming). There's a lesson there, though.}
    sent: "2016-09-15T18:15:30.058Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dae4f4aabc89857fa64d30"
    text: {I use ImGui to implement a professional editor.  It's made UI programming childsplay compared to how it used to be with APIs like Qt and wxWidgets.}
    sent: "2016-09-15T18:14:12.185Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57dae4c227a8458f7f1a75b2"
    text: {I have some old IF stuff too. Fun.^/^/imgui looks interesting. Nice link.^/^/Re SOC, tooling, etc., I don't think of Red as the end point. Red is a language and tool construction kit. It is the beginning. We will learn a lot by implementing existing framework and design ideas, but that's a reactive approach (no pun intended).}
    sent: "2016-09-15T18:13:22.676Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dadbf218291e104874bca0"
    text: {@BlackATTR definitely. Every example how to simplify software development with Red/Rebol principles is great.}
    sent: "2016-09-15T17:35:46.485Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dad82fc3e7045a3051321b"
    text: {@rebolek Yes, cool. Hopefully creating the dynamic interpreter (using forever)  won't pose problems. There are some javascript libraries which handle similar functionality (e.g., http://www.masswerk.at/jsuix/ ) but it would be unique to use redbol.}
    sent: "2016-09-15T17:19:43.131Z"
    v: 1
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "57dad518fa660dd95fe2610f"
    text: {@BlackATTR if you look at his interpreter, it `load`s input and parses it as `block!`. So that is what I described and is possible in Topaz.}
    sent: "2016-09-15T17:06:32.108Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dad433c3e7045a3051231e"
    text: "RebolZine, wow the memories! :)"
    sent: "2016-09-15T17:02:43.818Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dad2fbc3e7045a30511ed5"
    text: {@rebolek Yes, Jeff Kreis of Rebol Technologies circa 2000 even provided a nice how-to:  https://web.archive.org/web/20120510120959/http://www.rebolforces.com/zine/rzine-1-02.html (how to write a simple, interactive-fiction-style dynamic interpreter, not how to port a z-machine.)}
    sent: "2016-09-15T16:57:31.400Z"
    editedAt: "2016-09-15T16:59:25.524Z"
    v: 2
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "57dad2e527a8458f7f1a2b08"
    text: {> I was always interested in porting the Z-machine to Redbol. ^/^/sounds like an interesting project!}
    sent: "2016-09-15T16:57:09.262Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57dad2e418291e104874948e"
    text: ""
    sent: "2016-09-15T16:57:08.127Z"
    editedAt: "2016-09-15T16:57:26.895Z"
    v: 2
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "57dad26ac8af41d45f1aa8d0"
    text: {I was always interested in porting the Z-machine to Redbol. }
    sent: "2016-09-15T16:55:06.981Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dad1bf33c63ba01a05c9ca"
    text: {(For some simple dictionary as in IF. Not in general).}
    sent: "2016-09-15T16:52:15.944Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dad154c3e7045a30511778"
    text: {@BlackATTR things like "go north", "kick door", "pick up dead trout and smash troll with it" can be loaded and parsed as blocks. Thanks to rich set of datatypes, the amount of content that can’t loaded is surprisingly small.}
    sent: "2016-09-15T16:50:28.162Z"
    editedAt: "2016-09-15T16:51:12.498Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dad08327a8458f7f1a21ae"
    text: {@rebolek Yes, I'd need to parse strings. Also, I'd (probably) need the 'forever function to create a dynamic command-line interpreter.}
    sent: "2016-09-15T16:46:59.870Z"
    v: 1
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "57daced8c8af41d45f1a9b90"
    text: {@BlackATTR As @rgchrissaid, Topaz's `parse` is limited to block!s, but for IF UI I guess you would need string! parser. So you either should patch Topaz to support string! or be creative with your IF vocabulary, so it can be loaded and parsed as `block!`. I think the later option is much easier.}
    sent: "2016-09-15T16:39:52.167Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57dacdedc8af41d45f1a9849"
    text: {@rgchris Any chance Topaz could be rigged to host an interactive fiction UI on a website? I've been itching to try a rebol version of IF-- a command-line text "adventure game" interface. }
    sent: "2016-09-15T16:35:57.883Z"
    v: 1
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "57dab65dc8af41d45f1a2e6e"
    text: {@maximvl not really, but there's a websockets demo I tested (chat app) , and it works. I'm using the version from source}
    sent: "2016-09-15T14:55:25.237Z"
    editedAt: "2016-09-15T14:59:27.280Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57dab61233c63ba01a055003"
    text: "@geekyI do you use it's websockets too?"
    sent: "2016-09-15T14:54:10.115Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57daadab33c63ba01a0528a6"
    text: {@maximvl ah I thought of something else when you mentioned *sockets*. Cheyenne is awesome. It has become my go-to webserver for anything without a large database}
    sent: "2016-09-15T14:18:19.536Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57daa59afa660dd95fe193e9"
    text: "@dockimbel "
    sent: "2016-09-15T13:43:54.670Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57daa58cfa660dd95fe193bf"
    text: {Nothing built in but there is this - http://cheyenne-server.org/blog.rsp?view=30 - courtesy of @ }
    sent: "2016-09-15T13:43:40.480Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57daa54633c63ba01a0503c9"
    text: "Nothing built"
    sent: "2016-09-15T13:42:30.765Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57da8ef1c8af41d45f197ee3"
    text: "is there any websockets support for Rebol?"
    sent: "2016-09-15T12:07:13.403Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57da8ee327a8458f7f190de2"
    text: "guys, guys"
    sent: "2016-09-15T12:06:59.377Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57da311dc3e7045a304eb783"
    text: {PARSE is limited to blocks, though does have an early implementation of PARSE's COLLECT/KEEP (not sure if Red was inspired by that or other). There were other innovations but not coming to mind...}
    sent: "2016-09-15T05:26:53.170Z"
    editedAt: "2016-09-15T05:28:00.308Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57da3076fa660dd95fdfcedf"
    text: {It's not complete and is tricky to get a handle on how to alter the build (I did manage to hack in a rudimentary **call** that hooked to the host JS, but it wasn't fun). However, aside from an Emscripten build of *<a Rebol 3 branch>*, it is the most advanced Rebol-in-a-browser thus far.}
    sent: "2016-09-15T05:24:06.186Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57da2fbe33c63ba01a03525d"
    text: {I did a Bootstrap wrapper for *Try Topaz* a while back: http://reb4.me/tt}
    sent: "2016-09-15T05:21:02.411Z"
    editedAt: "2016-09-15T05:21:09.593Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57d974a3fa660dd95fdd4510"
    text: ""
    sent: "2016-09-14T16:02:43.066Z"
    editedAt: "2016-09-14T16:04:49.159Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d97377df21a75730f90002"
    text: {in the makefile: `wget -O topaz/bootstrap.js http://www.colellachiara.com/soft/topaz/bootstrap.js`}
    sent: "2016-09-14T15:57:43.090Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d97372df21a75730f8ffee"
    text: "ah"
    sent: "2016-09-14T15:57:38.622Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d97324df21a75730f8feea"
    text: "At least I think ;)"
    sent: "2016-09-14T15:56:20.218Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9731cc8af41d45f15bc24"
    text: {There must be some JS parser to run all the Rebol-like stuff. }
    sent: "2016-09-14T15:56:12.301Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d972c634eaa30e48760520"
    text: {@rebolek To be honest, I never knew how Topaz works. It just it does and it exists.}
    sent: "2016-09-14T15:54:46.384Z"
    editedAt: "2016-09-14T15:55:18.300Z"
    v: 4
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d972a1fa660dd95fdd3e39"
    text: ""
    sent: "2016-09-14T15:54:09.401Z"
    editedAt: "2016-09-14T15:54:17.694Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d97224fa660dd95fdd3c0d"
    text: "how does it work?"
    sent: "2016-09-14T15:52:04.830Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d9721718291e10486f9bce"
    text: "I can't find any js files in the repo"
    sent: "2016-09-14T15:51:51.514Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d9721127a8458f7f155baa"
    text: "the thing is"
    sent: "2016-09-14T15:51:45.454Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d97208fa660dd95fdd3b89"
    text: "@rebolek nope, Rebol is totally new world for me"
    sent: "2016-09-14T15:51:36.317Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d971edaabc89857fa112f5"
    text: "@dsgeyser but that was not Topaz."
    sent: "2016-09-14T15:51:09.672Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d971c034eaa30e48760071"
    text: {@rebolek  It was Rebol dialect emiiting w2ui framework code - done by Bo.}
    sent: "2016-09-14T15:50:24.506Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d97000c3e7045a304c4fc8"
    text: "Topaz was done by Gabriele, it is CLI only."
    sent: "2016-09-14T15:42:56.158Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "57d96fdf34eaa30e4875f833"
    text: {@dsgeyser You are wrong, Bo wrote different thing. HTML emitter for View.}
    sent: "2016-09-14T15:42:23.857Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96f8b18291e10486f9102"
    text: {@rebolek  It was Rebol dialect code which  emit w2ui framework code. Was started by Bo.}
    sent: "2016-09-14T15:40:59.638Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d96f79aabc89857fa109fa"
    text: {@maximvl I guess you don’t know the history of Rebol ports, do you? :)}
    sent: "2016-09-14T15:40:41.092Z"
    editedAt: "2016-09-14T15:40:51.102Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96f2afa660dd95fdd2fbb"
    text: "@rebolek wtf is this topaz O_o"
    sent: "2016-09-14T15:39:22.280Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d96f1f34eaa30e4875f4b4"
    text: "But it uses same (Redbol) syntax."
    sent: "2016-09-14T15:39:10.999Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96f0127a8458f7f154dc9"
    text: {And it is heavily dependent on [StyleTalk](https://github.com/rgchris/StyleTalk) by @rgchris for styling.}
    sent: "2016-09-14T15:38:41.894Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96e57df21a75730f8ec58"
    text: {@dsgeyser as I said, I have nothing against React. But I think it stopped half away. Things can be made easier. That is what I am trying to show with Lest.}
    sent: "2016-09-14T15:35:51.256Z"
    editedAt: "2016-09-14T15:36:13.457Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96dc1df21a75730f8e97b"
    text: {@rebolek  other frameworks implement JS with HTML syntax. React syntax is more JS syntax. Only one more language to learn. And you can use JSX and/or JS.  And one codebase. }
    sent: "2016-09-14T15:33:21.333Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d96d8918291e10486f88cd"
    text: {Anyway, there is still [Topaz](http://www.colellachiara.com/soft/topaz/try-topaz.html)}
    sent: "2016-09-14T15:32:25.958Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96cd8df21a75730f8e555"
    text: {@dsgeyser (Rebol to JS) exists, I saw it, but unfortunately it was never released and the author disappeared from Redbol world,  so I guess it will never be released :(}
    sent: "2016-09-14T15:29:28.037Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96c61c3e7045a304c4271"
    text: {@dsgeyser  (Rebol to emit JS) it exists I think, need to search a bit.. also have you heard of asm.js and it's successor webassembly? Red will probably emit webassembly in the future I think}
    sent: "2016-09-14T15:27:29.824Z"
    editedAt: "2016-09-14T15:29:22.906Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57d96c52fa660dd95fdd237f"
    text: {Scalability: that is question of underlying structure, not language. We will see.}
    sent: "2016-09-14T15:27:14.169Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96c3bdf21a75730f8e05e"
    text: {@dsgeyser I belive seperation of concerns can be done (conversely there is overlap at times, e.g. interactivity with js & css). Also, I think the best ideas of React can be used in Red,  but I don't know what you mean by scalability?}
    sent: "2016-09-14T15:26:51.109Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d96c23fa660dd95fdd229f"
    text: "@dsgeyser That was not me, sorry."
    sent: "2016-09-14T15:26:27.909Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96c0c27a8458f7f1541e2"
    text: {@rebolek  btw what happened to tool (Rebol to emit JS) which you started developing about a year ago?}
    sent: "2016-09-14T15:26:04.167Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d96bf227a8458f7f154164"
    text: {@dsgeyser Separation - the thing is that you can separate, while using the same syntax. It is like using your language to talk about usual things, latin for lunch and mongolian for dresses. It makes no sense.}
    sent: "2016-09-14T15:25:38.833Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96b00aabc89857fa0f802"
    text: {@rebolek  What about seperation of concerns. And scalability? I really do love Redbol, think its the best, and see a lot of Red's future in React as it is now.}
    sent: "2016-09-14T15:21:36.499Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d96a74df21a75730f8d79d"
    text: {@dsgeyser I believe that we can. That is why I wrote [Lest](http://lest.qyz.cz)}
    sent: "2016-09-14T15:19:16.521Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96a2ffa660dd95fdd1adb"
    text: {@rebolek  Can we really get away from from those 3, if you need to develop webapp?}
    sent: "2016-09-14T15:18:07.065Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d96a0cfa660dd95fdd19dc"
    text: {So you have three languages that are really different to do one simple UI.}
    sent: "2016-09-14T15:17:32.834Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d969da27a8458f7f153862"
    text: "And then CSS. Another different syntax."
    sent: "2016-09-14T15:16:42.432Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d969b234eaa30e4875dc28"
    text: {@maximvl  Use almost same code as ReactJS, but only Android and iOS - Native Apps. All about mobility.}
    sent: "2016-09-14T15:16:02.444Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d969a427a8458f7f1537e1"
    text: {No problem with HTML also, but it is widely different syntax from JS.}
    sent: "2016-09-14T15:15:48.250Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9697c18291e10486f767f"
    text: {But, @dsgeyser , there is one other syntax to learn, HTML.}
    sent: "2016-09-14T15:15:08.525Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96968fa660dd95fdd173d"
    text: {No problem with JS. I like JS, it is no PHP. But Red is better.}
    sent: "2016-09-14T15:14:48.828Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d96909aabc89857fa0f11e"
    text: {Its native UI components being controlled by Javascript, so no other syntax to learn. And cannot get away from JS.}
    sent: "2016-09-14T15:13:13.593Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d968a8aabc89857fa0ef7d"
    text: "can you use react native for desktop apps?"
    sent: "2016-09-14T15:11:36.584Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d9686cc3e7045a304c2fdc"
    text: {That is, why it’s funny. But it’s much better than other options.}
    sent: "2016-09-14T15:10:36.358Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9683bdf21a75730f8cda9"
    text: {There are two paragraphs and some unnecessary code around it.}
    sent: "2016-09-14T15:09:47.818Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d967e227a8458f7f153009"
    text: {Just have a look at their first example:^/```^/import React, { Component } from 'react';^/import { Text, View } from 'react-native';^/^/class WhyReactNativeIsSoGreat extends Component {^/  render() {^/    return (^/      <View>^/        <Text>^/          If you like React on the web, you'll like React Native.^/        </Text>^/        <Text>^/          You just use native components like 'View' and 'Text',^/          instead of web components like 'div' and 'span'.^/        </Text>^/      </View>^/    );^/  }^/}^/```}
    sent: "2016-09-14T15:08:18.831Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d967acc8af41d45f158873"
    text: {@dsgeyser I am not saying it is wrong. I am saying it is funny. It is looking in the right direction, but it puts some unnecessary trees before the eyes.}
    sent: "2016-09-14T15:07:24.329Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9672ddf21a75730f8c9bc"
    text: {@rebolek Need your expert opinion. Always welcome.}
    sent: "2016-09-14T15:05:17.475Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d966bbc8af41d45f158539"
    text: {@rebolek why do you say React Native is funny? Started looking at it yesterday? Red can be used in a declarative manner. React Native is all about interfaces which are described declaratively. Maybe we can take something good from it.}
    sent: "2016-09-14T15:03:23.946Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57d95a34cba69fe735111121"
    text: {Anyway, Red is still alpha. I/O and GC are planned. FullStack is working on that. It will happen, but it takes time.}
    sent: "2016-09-14T14:09:56.591Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d959e1a0e8dbb04f386a28"
    text: {There is partial IO and you can avoid GC with reusing memory, but yes, it is missing.}
    sent: "2016-09-14T14:08:33.151Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d95901cba69fe735110bfe"
    text: {yes, it is so cruel that we can see all great things can be done with this GUI, but without I/O, GC nothing can be actually done yet}
    sent: "2016-09-14T14:04:49.565Z"
    editedAt: "2016-09-14T14:05:01.441Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d95882b8d4c13840917d49"
    text: {But it needs the underlying structure. So we have to wait :D}
    sent: "2016-09-14T14:02:42.741Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9583fb8d4c13840917c3e"
    text: {Red is already capable of Android UI. Just look out for the Android branch. This is the game-changer. }
    sent: "2016-09-14T14:01:35.465Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d957a5d274dbdf35169a53"
    text: "People are doing really cool things with this"
    sent: "2016-09-14T13:59:01.044Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d957a3a0e8dbb04f386049"
    text: "oh, I guess I found binding"
    sent: "2016-09-14T13:58:59.139Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d95796cba69fe7351106a9"
    text: "search for it on github"
    sent: "2016-09-14T13:58:46.099Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d9578cb37816b14fb7a080"
    text: "No, C++"
    sent: "2016-09-14T13:58:36.220Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d9578ab8d4c1384091794c"
    text: {Immediate mode UI writing is much more  productive}
    sent: "2016-09-14T13:58:34.268Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d95787b8d4c13840917934"
    text: "python library?"
    sent: "2016-09-14T13:58:31.012Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d95769cba69fe73511060b"
    text: "I write some of my tools using ImGui"
    sent: "2016-09-14T13:58:01.400Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d95756ef19fa3f408457fe"
    text: "Smalltalk also have wonderful usage of GUI"
    sent: "2016-09-14T13:57:42.728Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d9571fb37816b14fb79f40"
    text: "+1 for Plan9. Amazing piece of work."
    sent: "2016-09-14T13:56:47.002Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d956e5ef19fa3f40845598"
    text: {the last attempts to change this were made in Plan9 / Inferno I believe}
    sent: "2016-09-14T13:55:49.983Z"
    editedAt: "2016-09-14T13:56:09.213Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d956e3cba69fe7351102a3"
    text: {You can hear, *but the targets are different!*. Well, ARM is different from Intel. So what, people are using them basically the same way. As GUI.}
    sent: "2016-09-14T13:55:47.067Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d956c5cba69fe7351101f4"
    text: "this one"
    sent: "2016-09-14T13:55:17.894Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57d956c483c1556511c67c47"
    text: {>It is amazing how GUI and language are disconected today. }
    sent: "2016-09-14T13:55:16.152Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d9566b7b9f81671149a9a9"
    text: {There are at least five different GUI systems in use (Windows, OS X, Linux, iOS, Android and then consoles, "smart" TVs, etc...), all of them following basically the same principles, but there is **NO** language, that can use same code for them.}
    sent: "2016-09-14T13:53:47.398Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9555ca0e8dbb04f38573b"
    text: {It is amazing how GUI and language are disconected today. }
    sent: "2016-09-14T13:49:16.185Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d95533b8d4c13840916eff"
    text: {It was just general discussion about the state of GUI (languages).}
    sent: "2016-09-14T13:48:35.752Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d952267b9f8167114995a4"
    text: {Indeed, I hadn't caught on to the fact that there is something called React (Native) out there. I thought you guys were discussing Red's react.}
    sent: "2016-09-14T13:35:34.135Z"
    editedAt: "2016-09-14T13:39:29.938Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d94e8fb8d4c138409153f4"
    text: {@meijeru Haha, ok I'm going to avoid things unrelated to red now}
    sent: "2016-09-14T13:20:15.209Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d94e4ba0e8dbb04f383973"
    text: {@maximvl Why do you say *react native*? It is a function whose source can be inspected.}
    sent: "2016-09-14T13:19:07.938Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d94e49b37816b14fb77a93"
    text: "so I am all for JS here"
    sent: "2016-09-14T13:19:05.605Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d94e3def19fa3f40842cd5"
    text: {JS has huge mountain of problems but the only other thing that was seriously considered at the time was Visual Basic}
    sent: "2016-09-14T13:18:53.652Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d94e29b8d4c13840915291"
    text: {@maximvl I think we are all here because a lot of our opinions match if not exactly :smile: JS what I'm most familiar with, but I agree with your opinion. However, I do think webassembly *is* the way forward for that to happen}
    sent: "2016-09-14T13:18:33.436Z"
    editedAt: "2016-09-14T13:23:00.308Z"
    v: 5
    author: "569c37abe610378809bccdff"
) #(
    id: "57d94df4ef19fa3f40842bef"
    text: {my opinion is JS not only should not expand on other platforms, but should be removed from the web}
    sent: "2016-09-14T13:17:40.167Z"
    editedAt: "2016-09-14T13:17:57.897Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d94dedef19fa3f40842bd8"
    text: "like haha, how can someone take it seriously"
    sent: "2016-09-14T13:17:33.515Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d94dc6b37816b14fb777f7"
    text: "it is funny to me"
    sent: "2016-09-14T13:16:54.988Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d94dbc7b9f816711498553"
    text: "react native is not even funny"
    sent: "2016-09-14T13:16:44.244Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d94db0a0e8dbb04f383685"
    text: "yes that"
    sent: "2016-09-14T13:16:32.127Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d94daeb37816b14fb77751"
    text: "delphi is not cross platform"
    sent: "2016-09-14T13:16:30.399Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d94d9cb37816b14fb7772f"
    text: "@maximvl react native, delphi"
    sent: "2016-09-14T13:16:12.065Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d94d8cef19fa3f40842989"
    text: {There’s no other 1MB language with native GUI. Period.}
    sent: "2016-09-14T13:15:56.638Z"
    editedAt: "2016-09-14T13:16:30.440Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d94d69b37816b14fb7762e"
    text: "Right."
    sent: "2016-09-14T13:15:21.285Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d94d40d274dbdf35166f54"
    text: "Tcl/Tk - does not compile to native"
    sent: "2016-09-14T13:14:40.418Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d94d30b8d4c13840914f05"
    text: "Java is 70Mb of dependencies"
    sent: "2016-09-14T13:14:24.791Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d94d1083c1556511c65507"
    text: "It has, but look at them... Tcl/Tk? Java?"
    sent: "2016-09-14T13:13:52.456Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d94c77b8d4c13840914ae6"
    text: {true, I believe Red already has no alternatives in cross platform native GUI}
    sent: "2016-09-14T13:11:19.819Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d9473eb8d4c1384091362b"
    text: {Anyway, Red team has great history of delivering, it may not be always when expected, but the releases are here and sometimes with some unexpected goodness. Like the whole reactive system or, as it looks, OS X (or is it MacOS now?) GUI right now.}
    sent: "2016-09-14T12:49:02.557Z"
    editedAt: "2016-09-14T12:50:23.917Z"
    v: 3
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9469d7b9f816711496b45"
    text: {*in the case he isn’t absorbed by solving the problem*}
    sent: "2016-09-14T12:46:21.430Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9462d83c1556511c63beb"
    text: {and in your example after 15 minutes programmer should have come up with a new estimate which will be much closer to the final one}
    sent: "2016-09-14T12:44:29.954Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d94618d274dbdf35165147"
    text: "I know that very well."
    sent: "2016-09-14T12:44:08.264Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d945e583c1556511c63aee"
    text: {but on the other side you have customers, you have sponsors, they need estimates to understand what's going on}
    sent: "2016-09-14T12:43:17.685Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d945abb37816b14fb75a1b"
    text: "ye, I know what you're talking about"
    sent: "2016-09-14T12:42:19.764Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d94576d274dbdf35164f70"
    text: {"yeah, that’s a quick fix, it will be ready in 15 minutes" two weeks later...}
    sent: "2016-09-14T12:41:26.525Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9453bb8d4c138409129ad"
    text: {There should be some law to forbid estimates in software development. }
    sent: "2016-09-14T12:40:27.682Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d943a4d274dbdf3516493b"
    text: {I hope so, because 6.2 is already delayed for 2 months}
    sent: "2016-09-14T12:33:40.875Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d93b83a0e8dbb04f37f1f3"
    text: {and when the compile time will get from 20 seconds to just one, you can also expect much faster development ;)}
    sent: "2016-09-14T11:58:59.044Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d93b57cba69fe735109541"
    text: "@maximvl IO will be there in 0.7"
    sent: "2016-09-14T11:58:15.023Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d937ccb37816b14fb72988"
    text: {nope, I need at least sockets support, GC of course would be great}
    sent: "2016-09-14T11:43:08.449Z"
    editedAt: "2016-09-14T11:43:31.969Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d93741d274dbdf35161640"
    text: {@maximvl what do you mean there aren't any updates? lot of activity here on github, and I'm already having fun playing around.. aren't you? :smile: }
    sent: "2016-09-14T11:40:49.201Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d9277ad274dbdf3515e1d5"
    text: {@maximvl :point_up: [September 10, 2016 1:30 PM](https://gitter.im/red/red?at=57d39a67d274dbdf3505a719)}
    sent: "2016-09-14T10:33:30.687Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d92576cba69fe735104c41"
    text: {@maximvl I don’t know the details of the implementation, I haven’t looked at it yet, but basically yes, right now you have to compile whole runtime.}
    sent: "2016-09-14T10:24:54.028Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d92498b8d4c1384090baa9"
    text: {@rebolek so its a dynamic library, right? And right now do we have whole runtime to be statically compiled into executable?}
    sent: "2016-09-14T10:21:12.198Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d92443ef19fa3f408394d2"
    text: {@maximvl libRed will provide precompiled Red runtime, so compilation times will shorten *significantly*}
    sent: "2016-09-14T10:19:47.778Z"
    editedAt: "2016-09-14T10:19:55.128Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d923b3d274dbdf3515d46d"
    text: "and I'm still not sure what the libRed is about"
    sent: "2016-09-14T10:17:23.633Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d92377ef19fa3f408391b6"
    text: "but other people also want to have fun"
    sent: "2016-09-14T10:16:23.705Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d9236ab37816b14fb6ebfd"
    text: {the red core guys can have fun time playing with red}
    sent: "2016-09-14T10:16:10.287Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d9235bd274dbdf3515d39a"
    text: "or, let me turn it another way"
    sent: "2016-09-14T10:15:55.501Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d921da83c1556511c5c15f"
    text: {There is sneak peak for libRed, so I guess 0.6.2 is around the corner :)}
    sent: "2016-09-14T10:09:30.024Z"
    editedAt: "2016-09-14T10:09:39.224Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9218ad274dbdf3515cca1"
    text: {yep, the twitter is more for sharing progress, but people are waiting more or less big news ;)}
    sent: "2016-09-14T10:08:10.360Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d920e57b9f81671148e4c9"
    text: {@maximvl do you mean on the website? there are regular updates on [Twitter](https://twitter.com/red_lang)}
    sent: "2016-09-14T10:05:25.615Z"
    editedAt: "2016-09-14T10:05:54.805Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d92073b8d4c1384090adac"
    text: " It will be 2 months without any updates soon"
    sent: "2016-09-14T10:03:31.274Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d80626b0cd5c89230eb979"
    text: ":D"
    sent: "2016-09-13T13:59:02.335Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d8047ab0cd5c89230eb925"
    text: {I probably had never heard of Rebol or Red that far back, or maybe I had just discovered them, haha.}
    sent: "2016-09-13T13:51:54.716Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
)#(
    id: "57d80283ef83e1c505c1a20a"
    text: {@WiseGenius Thanks, I was looking for 0.3.0 or 0.3.1 version, but it’s easy to download tagged versions from [GitHub](https://github.com/red/red/releases?after=v0.4.1) and build them.}
    sent: "2016-09-13T13:43:31.825Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d7f98235370b3e4ae70176"
    text: { @rebolek If you're still looking, I have some from `red-042.exe` onwards for Windows and from `red-050` onwards for Linux, almost 100 automated builds for each, and over 200 copies of the source code timestamped since over a year ago. Anything you're after specifically?}
    sent: "2016-09-13T13:05:06.249Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57d7df6a10e83f744cf63f73"
    text: {@pekr no problem, it’s easy to compile specific version from tagged releases and version from (I think) 0.4.0 can be downloaded from red-lang.org}
    sent: "2016-09-13T11:13:46.600Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d7d30f7b9f8167114458eb"
    text: {@rebolek  do you mean red.exe? Ah, sorry, false positive - I've cleaned my downloads section, so older versions are gone ...}
    sent: "2016-09-13T10:21:03.394Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57d7bf353d22ae4f525f6a2a"
    text: "Does anyone have older versions of Red?"
    sent: "2016-09-13T08:56:21.450Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d7a530ef19fa3f407e6495"
    text: {Red sure makes the line blurry.. between what should be generated/what is source code}
    sent: "2016-09-13T07:05:20.178Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d7a524a0e8dbb04f328030"
    text: {My WFL is the double-clicking the red.r and using `rc "-t MSDOS %tests/hello.red"`}
    sent: "2016-09-13T07:05:08.573Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57d7a4deb37816b14fb1ab56"
    text: {Is this a major workflow in developing red.. generating files? Otherwise I'm wondering where the build output should be put}
    sent: "2016-09-13T07:03:58.696Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d7a493d274dbdf3510ac76"
    text: {@pekr I think it is possible to set up a system to auto delete.. based on the modification date.. but I have a question now..}
    sent: "2016-09-13T07:02:43.054Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d7a3897b9f81671143bef8"
    text: "@pekr I do is delete the files.."
    sent: "2016-09-13T06:58:17.543Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d7a315a0e8dbb04f327980"
    text: {It seems so. One further question anyway. Does the compiler somehow recognises, there was some code change in the backend itself, so that it should recompile libRed.dll? So is there any other way, than to manually delete the library, letting the system to generate a new one? }
    sent: "2016-09-13T06:56:21.254Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57d79c86b37816b14fb18bc6"
    text: "best wait for it to get stable I guess"
    sent: "2016-09-13T06:28:22.172Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d79c27a0e8dbb04f32629a"
    text: {@pekr I guess doc accidentally reversed my change in a merge conflict red/red@6531d70}
    sent: "2016-09-13T06:26:47.039Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d6c391d274dbdf350dd19a"
    text: {Compiling to native code...^/*** Driver Internal Error: Access Error : Cannot open /c/dev/red/libred-include.red}
    sent: "2016-09-12T15:02:41.657Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57d6c390ef19fa3f407b6fb9"
    text: {I thought the path issue for the libRed was already resolved? I was able to compile hello.red, but once again I get following:}
    sent: "2016-09-12T15:02:40.357Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57d6c1817b9f81671140e5c8"
    text: "@Cthutu +1"
    sent: "2016-09-12T14:53:53.400Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d6b90583c1556511bd9fa7"
    text: {Is red-12sep16-a45f9b5.exe broken? ^/Compiling Red GUI console... for the longest time now}
    sent: "2016-09-12T14:17:41.360Z"
    v: 1
    author: "53e3b277107e137846ba9bfa"
) #(
    id: "57d6b4dbb8d4c1384088a811"
    text: {@dockimbel I just think that having a single operator be immutable or mutable depending on the parameters is asking for trouble.  + in every language returns a new value.  It's weird that it doesn't in red but only if the parameters are of a certain type.  Do you see where I am coming from?  }
    sent: "2016-09-12T13:59:55.600Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d5d234ef19fa3f4078d2af"
    text: {Just blockify the values of the tuple segments?^/```^/untup: func [tuple [tuple!]][^/^-collect [repeat i length? tuple [keep tuple/:i]]^/]^/e.g. [^/^-set [r g b] untup 0.128.255^/^-print [r g b]^/^/^-set [a b c d e f g h i j] untup 1.2.3.4.5.6.7.8.9.10^/^-print [a b c d e f g h i j]^/^/^-set [x . y . . . z] untup 1.0.2.0.0.0.3^/^-print [x y]^/]^/```}
    sent: "2016-09-11T21:52:52.603Z"
    editedAt: "2016-09-11T21:56:49.127Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d5d12db37816b14fabf249"
    text: {I don't have an `untup` func, but now I want to see how that might work...}
    sent: "2016-09-11T21:48:29.712Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d5d0e0d274dbdf350b270a"
    text: {Here's a fun little func I ran across while looking through old code. Quick job to port it to Red. ^/^/It might seem like just a party trick, out of context. The goal is not "look how we can twist the language around!". Think, instead, of how you can use the language to most clearly express intent in different domains, or for different users. Quite often, when a user wants a different way to express things, we can accommodate them. It's also true that we can suggest a form that exists natively in Red, and they will be just as happy. ^/^/Don't twist the language because you can. But don't be afraid to when it helps.^/^/```^/; Interpolate tuple^/tup: function ['tuple [word!]][^/    words: split form tuple #"."^/    forall words [change/only words to word! first words]^/    make tuple! reduce words^/]^/e.g. [^/^-r: 0^/^-g: 128^/^-b: 255^/^/^-print tup r.g.b^/^/^-set [a b c d e f g h i j] [1 2 3 4 5 6 7 8 9 10]^/^/^-print tup a.b.c.d.e.f.g.h.i.j^/]^/```}
    sent: "2016-09-11T21:47:12.616Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d5b8b7cba69fe735055295"
    text: {Some time back I posted `remove-while/take-while` examples, but gitter doesn't make tracking history easy, so I decided to put them in a gist: https://gist.github.com/greggirwin/9fc085a8b6b2ca38f756e9285c389674}
    sent: "2016-09-11T20:04:07.517Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d56ee283c1556511b9f92b"
    text: {The wonders of predictive text and gutters mobile ui ☺️}
    sent: "2016-09-11T14:49:06.860Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d56ea7a0e8dbb04f2ba6a9"
    text: "Stuffed "
    sent: "2016-09-11T14:48:07.650Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d452bcb37816b14fa84fde"
    text: {@ifgem, these are great edge cases to find. Keep up the good work! :^^)}
    sent: "2016-09-10T18:36:44.658Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d44436b8d4c13840825309"
    text: {ok, I managed to get it to compile :smile: (file paths were wrongly edited last time) and then Avira Cloud protection started acting up. After much tinkering I figured out what to disable.. and now it works! :sparkles: }
    sent: "2016-09-10T17:34:46.596Z"
    editedAt: "2016-09-10T17:35:21.094Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57d43406cba69fe7350197d4"
    text: {@nc-x I'm going to try the new sources. I did change the locations in the source to relative paths (`%./../`) and try, `libRed.dll` and `libred-defs.red` were built but something still needed access to `libRed-include.red` which wasn't built for some reason (I think it worked once tho).}
    sent: "2016-09-10T16:25:42.708Z"
    editedAt: "2016-09-10T16:27:50.346Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57d3e6d283c1556511b66cb9"
    text: ""
    sent: "2016-09-10T10:56:18.418Z"
    editedAt: "2016-09-10T11:00:33.724Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57d3d26e7b9f8167113930c2"
    text: {@ifgem nothing’s wrong with you :) Red is still alpha and some bugs are expected. Especially in corner cases like this.}
    sent: "2016-09-10T09:29:18.427Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d3cfb6ef19fa3f4073d736"
    text: {#2219 it doesn't work in Rebol either. But it should at least raise an error, I think.}
    sent: "2016-09-10T09:17:42.611Z"
    editedAt: "2016-09-10T09:18:10.021Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57d3cf52b8d4c13840810d72"
    text: {Just started playing with image!, found 3 bugs. What's wrong with me?:)))}
    sent: "2016-09-10T09:16:02.161Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57d3a7b9ef19fa3f40737f13"
    text: {@Cthutu @meijeru About the addition operator behavior for vector/vector and vector/scalar, it is just how it was implemented, the precise semantics are not defined yet, it's open to debate about which behavior is the most helpful. In contrast to most other datatypes, vector! has  appeared only in Rebol3 and was never really finished, so it needs additional design work, especially wrt to math operations. Note also that we plan to add a matrix! datatype based on vector!, so this would need to be taken into account too. ^/For the vector math ops, there are two aspects colliding: a) Vectors are series, so mutable. The usual rule is to mutate the series when applying a transformation, so that immutability can be manually controlled through `copy` usage. b) Maths operations apply only on scalar values (so mostly immutable, except for pseudo-scalars like pair!, tuple! and typeset!) in Redbol world.}
    sent: "2016-09-10T06:27:05.939Z"
    editedAt: "2016-09-10T06:27:46.499Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57d39b15b8d4c13840809c99"
    text: {libRed is just the externalization of the Red runtime library, allowing to embed it in third-party software (using a new API to be added), and avoiding the cost of recompiling the runtime library each time, so (much) faster compilation and very small executables as a result. This compilation model will be available in a default "development" mode, a "release" mode will compile & link everything together as usual.}
    sent: "2016-09-10T05:33:09.852Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57d39a67d274dbdf3505a719"
    text: {@nc-x The output is wrong because currently the index in %redbin.r needs to be manually adjusted after compiling libRed.}
    sent: "2016-09-10T05:30:15.872Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57d393f2b8d4c138408090cc"
    text: {@geekyI if you extract the latest source in c:\dev\red\ then compilation works fine. If you extract it somewhere else, then it has problems accessing the path /c/dev/red .^/^/But the output of the compiled executable is not something we expect, after compiling and running %tests/hello.red we get this output -^/```^/make typeset! [datatype! unset! none! logic! block! paren! string! file! url! char! integer! float! word! set-word! lit-word! get-word! refinement! issue! native! action! op! function! path! lit-path! set-path! get-path! routine! bitset! object! typeset! error! vector! hash! pair! percent! tuple! map! binary! image!]^/make typeset! [block!]^/make typeset! [integer!]^/make typeset! [word!]^/```^/^/And View/Vid applications refuse to compile.  For eg.^/```^/Compiling /C/dev/red/tests/vid.red ...^/*** Compilation Error: undefined word view^/```^/(I am not sure if I am doing something wrong or if it's the compiler bcos I am touching Red after a long time)}
    sent: "2016-09-10T05:02:42.848Z"
    editedAt: "2016-09-10T05:08:50.796Z"
    v: 3
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57d3577483c1556511b52671"
    text: {there is a reference to a `/c/dev/red/libred-include.red` file which I don't have obviously^/(REBOL/View 2.7.8.3.1 1-Jan-2011), trying `>> do/args %red.r "%tests/hello.red"`}
    sent: "2016-09-10T00:44:36.854Z"
    editedAt: "2016-09-10T00:49:51.182Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57d3573783c1556511b525f8"
    text: {so I guess libred isn't ready yet? In my excitement I tried to compile from sources the libRed branch}
    sent: "2016-09-10T00:43:35.546Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d357257b9f8167113829e9"
    text: {I'm not sure if it is embeddable in other programs, it may be.}
    sent: "2016-09-10T00:43:17.644Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d356fcef19fa3f4072d386"
    text: "well.. ok :smiley: "
    sent: "2016-09-10T00:42:36.618Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d356d183c1556511b5255c"
    text: {@geekyI LibRed has nothing to do with the interoperability of Red/System with C either.}
    sent: "2016-09-10T00:41:53.912Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d35113d274dbdf350508c7"
    text: {@PeterWAWood perhaps he is implying the interoperatability of Red/system with C?}
    sent: "2016-09-10T00:17:23.970Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d34eaa7b9f816711381760"
    text: "@maximvl LIbRed is not written in C."
    sent: "2016-09-10T00:07:06.601Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d3253caf75d5187be6dafb"
    text: {@pekr This is great news!  I got a little burned out when I was messing around with using red to bind to csfml(and other bindings) because of the super long compile times...}
    sent: "2016-09-09T21:10:20.177Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57d323d3af75d5187be6d6d0"
    text: {TIS-100: (warning: distraction!) teaching (fake?) assembly with a game: [walkthrough](https://www.youtube.com/watch?v=cLfwMXTnhtc), [shorter 1 min version](https://www.youtube.com/watch?v=ZkUHGvy2pNU). Seems to be a simulation of a https://en.wikipedia.org/wiki/Connection_Machine}
    sent: "2016-09-09T21:04:19.789Z"
    editedAt: "2016-09-09T21:08:14.007Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57d30950c475164703c2df33"
    text: "Exciting stuff! Go Team Red!"
    sent: "2016-09-09T19:11:12.437Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d300d51e2af9771893ea91"
    text: {I think @dockimbel should explain it and give a timeframe for its availability in release 0.6.2.}
    sent: "2016-09-09T18:35:01.466Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d2fedf8cd0681e7bfc14ed"
    text: ""
    sent: "2016-09-09T18:26:39.379Z"
    editedAt: "2016-09-09T18:26:46.583Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57d2fe901e2af9771893e14e"
    text: "written in C"
    sent: "2016-09-09T18:25:20.767Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d2fe741aacfaf84b055186"
    text: {@Cthutu it is some kind of minimal runtime/interpretator of Red(System?) to embed Red into native executables / other programs}
    sent: "2016-09-09T18:24:52.846Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d2fd651e2af9771893dd49"
    text: {>faster compilation^/>tiny executables^/^/Yes!! I've been waiting for this}
    sent: "2016-09-09T18:20:21.186Z"
    editedAt: "2016-09-09T18:20:28.272Z"
    v: 2
    author: "569c37abe610378809bccdff"
)#(
    id: "57d2fbc48cd0681e7bfc083f"
    text: "What is LibRed?"
    sent: "2016-09-09T18:13:24.950Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d2e3c43f7260fe4be06eba"
    text: "Awesome. Just awesome:)))))))."
    sent: "2016-09-09T16:31:00.796Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57d2da603f7260fe4be049bd"
    text: "yeah, good Friday news!"
    sent: "2016-09-09T15:50:56.080Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d2da023d16fa4f039837ef"
    text: {Wow - interesting tweet - first sneak peek at LibRed support: https://twitter.com/red_lang/status/774269983253639168}
    sent: "2016-09-09T15:49:22.034Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57d2bcd7c475164703c17aea"
    text: {@greggirwin for sure. There is how it is done, and how we use it. It can be done like I said, then interfaces could be added to make it easier to use. But there is so much to do that, if we do that for all things, Red will grow and grow...}
    sent: "2016-09-09T13:44:55.554Z"
    editedAt: "2016-09-09T13:45:10.194Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d298321aacfaf84b038c80"
    text: {Conclusion: red-by-example needs to be corrected. The statements given there are applicable to Rebol, not Red. This is a significant difference! See the [Wiki](https://github.com/red/red/wiki/Differences-between-Red-and-Rebol#local-contexts-for-loops). }
    sent: "2016-09-09T11:08:34.569Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d27cc71baa312a6be6702b"
    text: {@geekyl Yes^/```a: 33^/repeat a 3 [print a]^/print a ; = 3```}
    sent: "2016-09-09T09:11:35.867Z"
    v: 1
    author: "56e2f83685d51f252ab85587"
) #(
    id: "57d2782f98f8df994d4b164b"
    text: {@raimundasa this? ^/> Warning:^/   1. the count variable can only be referred within the block!;^/      so, if before the repeat a variable exists with the same name,^/      that variable will be untouched after repeat^/   2. when repeat introduces a unique name for count, that name^/      cannot be referenced anymore after repeat}
    sent: "2016-09-09T08:51:59.055Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d26784f33967fc643ecdb4"
    text: "http://red-by-example.org/index.html#repeat"
    sent: "2016-09-09T07:40:52.479Z"
    v: 1
    author: "56e2f83685d51f252ab85587"
) #(
    id: "57d2675df33967fc643ecd05"
    text: {@Arie-vw  If an iteration counter in `repeat` is not local then description on website [title](http://red-by-example.org/index.html#repeat) is wrong.}
    sent: "2016-09-09T07:40:13.953Z"
    v: 1
    author: "56e2f83685d51f252ab85587"
) #(
    id: "57d1893a98f8df994d48730c"
    text: {:point_up: [September 8, 2016 2:26 AM](https://gitter.im/red/red?at=57d120cf89655972304c966e) @DideC, we *could* do that, but it seems inelegant to me. I'm sure we can find a better way. Even if it means having a separate `load-json` func that mirrors `load/as`.}
    sent: "2016-09-08T15:52:26.829Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d188d1fe284f6c3034b642"
    text: {@netroby, Red isn't production ready, but Rebol has a number of success stories, and the same rules apply to Red, plus a lot more capabilities. Rebol has been applied in a lot of areas, and Red will be too. We just have to be a little patient. }
    sent: "2016-09-08T15:50:41.005Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d1888177c1b70d7ff617a3"
    text: "@Cthutu, correct. I think you found a bug. "
    sent: "2016-09-08T15:49:21.502Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d17cf689655972304dddcd"
    text: "@Cthutu  #2216"
    sent: "2016-09-08T15:00:06.836Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d17c2e98f8df994d483e75"
    text: "thanks Rudolf"
    sent: "2016-09-08T14:56:46.791Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d17c2bfe284f6c303479f7"
    text: "by ticket do you mean github issue?"
    sent: "2016-09-08T14:56:43.907Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d17c1d1baa312a6be36a9b"
    text: "@Cthutu I did not, but will do now."
    sent: "2016-09-08T14:56:29.830Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d17a9389655972304dd40f"
    text: {@meijeru Did you submit a ticket?  I don't know how to do it yet.}
    sent: "2016-09-08T14:49:55.631Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d17a83fe284f6c303470d3"
    text: {@greggirwin  So v1 shouldn't change in my example?}
    sent: "2016-09-08T14:49:39.813Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d167f468f483b41caff796"
    text: {I explored `system/codecs` and found a curious inconsistency in the behaviour of `?`. See the latest issue #2215 .}
    sent: "2016-09-08T13:30:28.726Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d120cf89655972304c966e"
    text: {`system/codecs` is a map of `object!`. `encode`and `decode`are the interface, but nothing is preventing us to have parameters block! in it. Ie: like a table of type / encoding or type / decoding pairs used by the interface. Or something like this. There could also be utility functions in the object to help parameterized the encoding/decoding.^/So you will use `system/codecs/json/parameterize/decoding [what you want]` (where `parameterize` is the func and `\decoding`a refinment). Just a rought idea.}
    sent: "2016-09-08T08:26:55.801Z"
    editedAt: "2016-09-08T08:27:19.150Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d11b0b77c1b70d7ff48b0d"
    text: "Thanks for let me know"
    sent: "2016-09-08T08:02:19.740Z"
    v: 1
    author: "56ea448885d51f252ab93d85"
) #(
    id: "57d1183077c1b70d7ff482f7"
    text: {@netroby Red is in development. It is not ready for use in production. As it is not ready for production use, there are not any success stories yet. Red is currently at version 0.6.1, it will be ready for production once it reaches version 1.0.0 }
    sent: "2016-09-08T07:50:08.620Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d10640f33967fc643a8c00"
    text: {Who using red on production or business production.}
    sent: "2016-09-08T06:33:36.061Z"
    v: 1
    author: "56ea448885d51f252ab93d85"
) #(
    id: "57d1062dfe284f6c303302ef"
    text: {I wonder to know any success stories about red language. }
    sent: "2016-09-08T06:33:17.776Z"
    v: 1
    author: "56ea448885d51f252ab93d85"
) #(
    id: "57d1062077c1b70d7ff45344"
    text: "Hello. "
    sent: "2016-09-08T06:33:04.100Z"
    v: 1
    author: "56ea448885d51f252ab93d85"
) #(
    id: "57d08b221baa312a6be0c1f7"
    text: {On JSON, years ago I added pretty formatting to the encoder in %json.r. Is that worth keeping? My instinct is to strip things down, starting fresh.}
    sent: "2016-09-07T21:48:18.331Z"
    editedAt: "2016-09-07T21:49:10.219Z"
    v: 3
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d08ab389655972304b2e6c"
    text: {`load|save/as` is Red's extensible codec mechanism. It can be anything, but there is only dispatch to `encode|decode` funcs, so extra control isn't possible today. It wouldn't be hard to make the codec info a dialected block though, so default formatting could be just the name and a block would mean the name was the first one, and the codec gets the rest of the block as an arg. Cleaner than trying to add `system/options` in an extensible way.}
    sent: "2016-09-07T21:46:27.899Z"
    editedAt: "2016-09-07T21:49:30.564Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d082af89655972304b1661"
    text: {hmm.. I guess I could say I'm talking about formats for `load/as`}
    sent: "2016-09-07T21:12:15.525Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d08278f33967fc6439453e"
    text: {specifically, I'm curious about approaches taken by the red community to deal with exchange formats..}
    sent: "2016-09-07T21:11:20.263Z"
    editedAt: "2016-09-07T21:12:33.768Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57d0821098f8df994d456d45"
    text: {@geekyI also isn't sure where to talk about exchange formats}
    status: true
    sent: "2016-09-07T21:09:36.523Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d081ebcdbf820f7fa620e3"
    text: {Well.. it reduces the number of channels I have to join (also better for new comers). Most other github organiztions don't have that much..}
    sent: "2016-09-07T21:08:59.427Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d0819c89655972304b1275"
    text: {@geekyI it's better idea to concentrate on development rather than channel naming}
    sent: "2016-09-07T21:07:40.385Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d080c0fe284f6c3031b030"
    text: {Talking about channels, isn't it a better idea to have more generic, topical ones `data-types`, `data-exchange` instead of specific ones like `vector` `map`, `json` `yaml` (not sure about `redbin`)?}
    sent: "2016-09-07T21:04:00.051Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d0730668f483b41cad7625"
    text: "Agreed on having a channel for it though."
    sent: "2016-09-07T20:05:26.806Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d072fa1baa312a6be07231"
    text: {The catch is that it looks like JSON will be loaded via `load/as` which doesn't give us extra interface elements to attach to (right now).}
    sent: "2016-09-07T20:05:14.690Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d0715a1baa312a6be06c83"
    text: {In Rebol, some protocol have parameters (like FTP passive mode for example.^/I think a JSON codec could also have some kind of parameters and some of them could be functions that converts values to or from. So they could be changed by others func if the standard behaviour is not what is wanted in a particular case.}
    sent: "2016-09-07T19:58:18.527Z"
    editedAt: "2016-09-07T19:58:40.700Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d070abfe284f6c30317e76"
    text: {About JSON, discussion could have its own whannel IMO.}
    sent: "2016-09-07T19:55:23.102Z"
    editedAt: "2016-09-07T19:55:31.943Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d06dbf77c1b70d7ff2aa03"
    text: {I have a mind to make the ticket myself, unless @Cthutu will do so shortly.}
    sent: "2016-09-07T19:42:55.892Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d0531377c1b70d7ff23e71"
    text: {Good catch. It looks like reverse problem of int vectors and a scalar arg.}
    sent: "2016-09-07T17:49:07.525Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d048c777c1b70d7ff21c11"
    text: {@dockimbel In contrast to what @greggirwin suspects, it also goes wrong with float vectors^/```^/v: make vector! [1.0 2.0 3.0]^/v + 1.0 ; => make vector! [2.0 3.0 4.0]^/v ; => make vector! [2.0 3.0 4.0]^/```^/}
    sent: "2016-09-07T17:05:11.020Z"
    editedAt: "2016-09-07T17:06:21.773Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d02d6ef33967fc64381e3a"
    text: {Note that vectors *are* mutable, and are also `series!` values.^/```^/red>> v11/1: 7.7^/== 7.7^/red>> foreach v v11 [print v]^/7.7^/2.2^/3.3^/```}
    sent: "2016-09-07T15:08:30.492Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d02ab2896559723049d2ae"
    text: {@Cthutu, would you like to create a ticket for that, since you found it?}
    sent: "2016-09-07T14:56:50.675Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d02a62896559723049d176"
    text: {I glanced at the vector code, and it looks like a bug related to integer vectors.^/```^/red>> v11: make vector! [1.1 2.2 3.3]^/== make vector! [1.1 2.2 3.3]^/red>> v12: make vector! [4.4 5.5 6.6]^/== make vector! [4.4 5.5 6.6]^/red>> v11 + v12^/== make vector! [5.5 7.7 9.9]^/red>> v11^/== make vector! [1.1 2.2 3.3]^/```}
    sent: "2016-09-07T14:55:30.973Z"
    editedAt: "2016-09-07T14:56:03.731Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d0272a98f8df994d44193f"
    text: {@PeterWAWood, per @Cthutu's note on vectors, it doesn't look like there are any vector tests for args mutating in the suite. We should add those for each action.}
    sent: "2016-09-07T14:41:46.171Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d023e5fe284f6c30305fa7"
    text: {@Cthutu, consistency is *very* important to Red's designer (and all of us). Red does have both mutable and immutable values. I haven't looked at vectors, but it sounds like a bug to me.}
    sent: "2016-09-07T14:27:49.273Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d023c898f8df994d440cce"
    text: "@greggirwin okey, thx )"
    sent: "2016-09-07T14:27:20.860Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d022f3fe284f6c30305cf8"
    text: {:point_up: [September 7, 2016 7:13 AM](https://gitter.im/red/red?at=57d0127ccdbf820f7fa47777)  Put quotes around the filename: `%"1%1"`}
    sent: "2016-09-07T14:23:47.660Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d01c7c68f483b41cac2c31"
    text: "``"
    sent: "2016-09-07T13:56:12.322Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d01c781baa312a6bdf281e"
    text: {Do the same with tuples:^/```^/t: 1.2.3^/t + 1 ; => 2.3.4^/t ; => 1.2.3^/```}
    sent: "2016-09-07T13:56:08.869Z"
    editedAt: "2016-09-07T13:56:53.900Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
)#(
    id: "57d01ab71baa312a6bdf2128"
    text: {@dockimbel I think what @Cthutu has found is a bug, i.e. an unintentional effect of the implementation of vector addition.^/```^/v: make vector! [1 2 3]^/v + 1 ; => make vector! [2 3 4]^/v ; => make vector! [2 3 4]^/```^/I don't believe this is intentional}
    sent: "2016-09-07T13:48:39.184Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57d013bd68f483b41cac0b6c"
    text: {and percents are common for example in files names of saved pages from the web browsers}
    sent: "2016-09-07T13:18:53.898Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d012e098f8df994d43c905"
    text: {```^/> mkdir 1%1^/red>> read %1%1^/*** Access Error: cannot open: %1%251^/*** Where: read^/red>> read %.^/== [%1%251/ ]^/^/```}
    sent: "2016-09-07T13:15:12.578Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d012a998f8df994d43c89a"
    text: {`%` is a valid character in file names, at least in unix}
    sent: "2016-09-07T13:14:17.485Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d0127ccdbf820f7fa47777"
    text: "hmm"
    sent: "2016-09-07T13:13:32.923Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d00bc41baa312a6bdee87d"
    text: "@geekyI oh shit, this is great!"
    sent: "2016-09-07T12:44:52.340Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d00bb377c1b70d7ff13549"
    text: {@maximvl https://twitter.com/red_lang/status/771268451314696193}
    sent: "2016-09-07T12:44:35.843Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d00b96fe284f6c3030032e"
    text: {@maximvl is too oldscool for fancy things like twitters}
    status: true
    sent: "2016-09-07T12:44:06.142Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d00b85fe284f6c303002f8"
    text: "@geekyI not really, can you share the link?"
    sent: "2016-09-07T12:43:49.364Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d008ef98f8df994d43aa9f"
    text: {@Cthutu I didn't know about that behaviour, not to mention `vector!`s, so had to search for a bit.. couldn't find anything relevant. There is a long discussion on the red/vector channel here..}
    sent: "2016-09-07T12:32:47.225Z"
    editedAt: "2016-09-07T12:33:22.017Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57d0083398f8df994d43a563"
    text: "also, did you see twitter? @maximvl "
    sent: "2016-09-07T12:29:39.494Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d007fe98f8df994d43a4df"
    text: "@geekyI motions to the side bar on the right"
    status: true
    sent: "2016-09-07T12:28:46.565Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d007e898f8df994d43a492"
    text: {@maximvl sheesh! can't you see the devs coding as we speak? :smile: }
    sent: "2016-09-07T12:28:24.973Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d0011198f8df994d438933"
    text: {I just want to understand the thinking behind this to align my thinking more with the red philosophy}
    sent: "2016-09-07T11:59:13.570Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d000f589655972304939f3"
    text: {For example:^/v1: make vector! [1 2 3]^/v2: make vector! [4 5 6]^/v3: v1 - v2  ;; good v1, v2 unchanged and v3 has expected result^/v4: v1 + 5    ;; v4 has expected result, but v1 has changed too (wtf?)}
    sent: "2016-09-07T11:58:45.352Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57d000d2896559723049398a"
    text: "any news about next release?"
    sent: "2016-09-07T11:58:10.939Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d000a298f8df994d4387c4"
    text: "hey guys"
    sent: "2016-09-07T11:57:22.657Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d0001668f483b41cabbc9f"
    text: {By functional I meant immutable - sorry for the terminology used}
    sent: "2016-09-07T11:55:02.628Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57cfffe498f8df994d438612"
    text: "Sorry I am still new to gitter :)"
    sent: "2016-09-07T11:54:12.839Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57cfffd6fe284f6c302fd8a8"
    text: {@Cthutu (also did you know you can edit your post  here -->) you may be surprised to know I myself started gitter a month(?) ago :smile:}
    sent: "2016-09-07T11:53:58.120Z"
    editedAt: "2016-09-07T11:55:21.634Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57cfffc868f483b41cabbbf6"
    text: {red>> v1 - v2^/== make vector! [-97 -198]^/^/red>> v2 - v1^/== make vector! [97 198]^/^/red>> v2^/== make vector! [100 200]^/; v2 is unchanged^/^/red>> v1 - 22^/== make vector! [-19 -20 -21 -18]^/^/red>> v1^/== make vector! [-19 -20 -21 -18]^/; v1 is altered!}
    sent: "2016-09-07T11:53:44.932Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57cfffb389655972304936db"
    text: "http://www.red-by-example.org/"
    sent: "2016-09-07T11:53:23.004Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57cfffa9cdbf820f7fa43549"
    text: "let me link the page"
    sent: "2016-09-07T11:53:13.879Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57cfff9a68f483b41cabbb7b"
    text: {@geekyI  the issue I have is the inconsistency, one returns a new vector, the other doesn't}
    sent: "2016-09-07T11:52:58.989Z"
    v: 1
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57cfff7efe284f6c302fd7a6"
    text: ""
    sent: "2016-09-07T11:52:30.212Z"
    editedAt: "2016-09-07T11:55:16.972Z"
    v: 2
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57cfff7ccdbf820f7fa434f2"
    text: {@Cthutu which tutorial? Short form is, you don't think in terms of functions in red, you think in terms of data}
    sent: "2016-09-07T11:52:28.643Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cffeebf33967fc6437782e"
    text: {Hi there, I've just started looking at red and I was running through the tutorial and was horrified to see that the operator - would be functional when you subtract two vectors but mutable when you subtracted a number to a vector (instead of returning a new vector).  I found this to be a huge turn off from the language with this inconsistency.  What is the reasoning behind this decision?  And if it is about performance, why doesn't v1 - v2 mutate v1 like v1 - n?  Could someone give me some insight into this design decision please?}
    sent: "2016-09-07T11:50:03.664Z"
    editedAt: "2016-09-07T11:54:44.714Z"
    v: 2
    author: "551ae14715522ed4b3de1d89"
) #(
    id: "57cf8393f5a156f5648a3801"
    text: {I'll try to get a gist up before too long, so we have something concrete to base discussions and experiments on.  Quite a bit of refactoring done so far. Have some Unicode stuff to look at, along with adding surrogate pair support.}
    sent: "2016-09-07T03:03:47.095Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cf63949506796a16e5cbb6"
    text: {@rgchris [Solution 5](https://github.com/red/red/wiki/Case-Sensitive-Map!-Keys#5) was chosen:^/```^/red>> m: #("a" 1)^/== #(^/    "a" 1^/)^/red>> set/case 'm/("A") 2^/== 2^/red>> m^/== #(^/    "a" 1^/    "A" 2^/)^/```}
    sent: "2016-09-07T00:47:16.664Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cf4449f5a156f564898e41"
    text: {@WiseGenius Right—I'd say the same. I'd like to see something like my aforementioned *Validate* function as standard so that converting *already loaded* data is a small matter of providing a spec. However, nothing can be implied by default. Incidentally, I assume JSON keys are case-dependent, don't recall. Also don't recall how the map keys case sensitivity question resolved...}
    sent: "2016-09-06T22:33:45.691Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57cf2a39fec98d0a4e2307eb"
    text: {@rgchris I could easily live with unrecognized types being stringified on the way **to** JSON. After all, that's what my own version originally did, until I changed my mind. I currently prefer that they didn't, but it wouldn't get in the way if they did because if anyone doesn't like it they can modify the `map!` before `save`ing it.^/However, I'm very much against the codec trying to convert JSON strings to non-`string!` datatypes, especially if that's the only option because that can't be intercepted.^/Yes, JSON is an unfortunately deficient format.}
    sent: "2016-09-06T20:42:33.772Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cf1ac9fe284f6c302d4e76"
    text: {It says volumes that the most successful messaging format (arguably) is essentially Rebol redesigned to conform to JavaScript's quirks and limitations. And for now we're stuck with it.}
    sent: "2016-09-06T19:36:41.798Z"
    editedAt: "2016-09-06T19:41:36.276Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57cf1a4377c1b70d7fee72ea"
    text: {@WiseGenius I don't think there can be an implied transformation back, but I don't think it's unreasonable to automatically form Rebol values on the way in. It really is like trying to force a square peg into a very small, round hole. I think this [article on XML's flaws](http://www.rebol.com/article/0108.html) could also hold for JSON.}
    sent: "2016-09-06T19:34:27.495Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57cf19b2fe284f6c302d4a57"
    text: {@pekr That's what my [*validate*](http://scripts.rebol.info/scripts/filtered-import,docs) dialect does—designed to work with URL-encoded values which are only strings, it could also describe a JSON response, though needs a little work to properly describe JSON-level data (but should be doable).}
    sent: "2016-09-06T19:32:02.851Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57cf0bc55c0ffa40609f4130"
    text: {@greggirwin I think I finally see I might have misread what you meant by “detailed control”.^/I'm sure it's already overly clear that my preference is to work with the loaded `map!`, haha.}
    sent: "2016-09-06T18:32:37.571Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cefa3ef5a156f564887f00"
    text: {I don't think we want to override `/as` too much, but that was my thought about where the detailed control would come in. The alternative, to me, is no options and you do all your processing out of band, once you have a loaded map.}
    sent: "2016-09-06T17:17:50.866Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ce5ca69506796a16e5af19"
    text: {@pekr That's an interesting idea. Maybe the `/as` refinement  could accept `object!`s for more complicated options besides `word!`s...}
    sent: "2016-09-06T06:05:26.348Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ce5bbb9506796a16e5af11"
    text: {Another datatype (besides `object!`) I can understand the codec accepting when converting **to** JSON is `hash!`. If accepted, that would become a JSON array, but it would still be loaded back as a `block!`.}
    sent: "2016-09-06T06:01:31.291Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ce5a841baa312a6bd968b3"
    text: {Couldn't codec use some kind of a spec/configuration object, which would tailor its functionality?}
    sent: "2016-09-06T05:56:20.079Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ce59269506796a16e5aedb"
    text: {@greggirwin On the contrary, it's simple-and-raw which **gives** detailed control, and automation takes it away.^/For example, as great as RFC3339 is, if the codec automatically converted dates **to** it, then it would be expected to convert dates **from** it. In that case, the codec would be useless when you don't want it to always do that. IMO, the codec should be simple like a lego block you can build on. Otherwise you have to rewrite it whenever you want something simpler.}
    sent: "2016-09-06T05:50:30.625Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cdd4151baa312a6bd8184f"
    text: {By "no detailed control", I mean that the loader is simple, not changing anything about the data. You just get a raw `map!`. ^/^/Re: `m/("Hello, World!")`: I greatly prefer words to strings in paths. But we can do some quick R&D. List 5 big JSON standards or services people want to consume data from (e.g. Twitter, RSS/Atom) and see what their keys look like.^/^/There's a great middle ground between doing everything and doing nothing at all. I do have custom adapters, schema application, etc. but also appreciate the encoder simply converting unknown types to JSON strings for me.^/^/I'm biased, and can only speak from my own experience and the requests I've see over the years for changes to %json.r. I do like Chris Ross-Gills feature that converts dates to RFC3339 format. That seems useful. Again, that would be a great place to see what big players use on the JSON side.}
    sent: "2016-09-05T20:22:45.158Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cdbd849506796a16e5a66a"
    text: {I have some ideas how `to map!` and `to object!` should work, but I should probably go to bed soon. It's almost 5AM here, so hopefully I made some sense.}
    sent: "2016-09-05T18:46:28.869Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cdbd5de9f1246d4ac65564"
    text: {@greggirwin^/I think the real questions arise when deciding how to `save` **to** JSON, since Red `map!`s allow not just more types of keys than JSON, but more types of values. I think that any datatypes which JSON doesn't understand/allow should cause an error. It should be up to the user to write their own function for pre-converting the unrecognized datatypes depending again on what the data is about.^/I regret that my version of the codec I sent you is currently too permissive in accepting datatypes in this direction. That was a mistake which I intend to fix in future versions.^/Here's what I think should be accepted by default when converting to JSON:^/^/Keys:^/ *^-`string!`^/^/Values:^/ *^-`string!`^/ *^-`integer!`^/ *^-`float!`^/ *^-`map!`^/ *^-`block!`^/ *^-`logic!`^/ *^-`none!`^/^/In this direction, I can understand an option to allow `object!`s, in which case `word!`s would be converted to `string!`s.^/However, I doubt that `word!` keys in `map!`s should be automatically accepted by default since they can clash with `string!`s keys in `map!`s.^/I could even understand a future option to `mold` all keys and values and then convert those `string!`s to JSON strings when `save`ing to JSON, and reversing the process when `load`ing from JSON, but again I think only the simple way above should be done for now. Let's see how often people actually use such fancy functions in Red before building them into the codec. I suspect unique custom functions will be much more common than that one, but I don't know for sure. And as you've already pointed out, extra options as refinements on `save` and `load` would be awkward.}
    sent: "2016-09-05T18:45:49.252Z"
    editedAt: "2016-09-05T18:54:07.932Z"
    v: 4
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cdbd3c9506796a16e5a663"
    text: {@greggirwin^/^/> my gut instinct is that the codec needs to be lossless, with extra steps to wordify keys and convert to objects.^/^/I agree with your gut. IMHO, `object!`s are not a good match for JSON, and if someone wants to `load` JSON as `object!`s, they should use an extra step, converting `string!`-key's to `word!`s. If they wrote the data from Red, then they probably know the keys are`word!`-friendly.^/If they're not sure that the keys are `word!`-friendly, then they probably shouldn't be using `object!`s anyway. If they still want to, then they probably have a special use case and therefore would probably want to write their own function to handle the keys and convert the `map!`s themselves anyway.^/In fact, I expect that it would be common to write custom converter functions to and from the `map!`s produced by the JSON codec, depending on what the JSON data represents and how one wants to map that data to Red datatypes. I don't think it's appropriate to try to make the codec do everything. I think simplicity is best here.}
    sent: "2016-09-05T18:45:16.899Z"
    editedAt: "2016-09-05T18:49:50.210Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cdbd2c5c0ffa40609f233c"
    text: {@greggirwin^/^/> The question of defaults depends on what percentage of JSON data we think will be problematic^/^/Lossy should certainly not be the default! I not sure if that's what was being suggested, but the only way this question (as I understood it) depends on the percentage of data being problematic is whether or not we can ensure that that percentage is exactly 0. IMO, the JSON spec promises nothing close to that, so we know the answer.}
    sent: "2016-09-05T18:45:00.633Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cdbd21fec98d0a4e22e702"
    text: {@greggirwin I'm not sure I understand your answer to:^/^/> Why would we even consider a lossy codec?^/^/It sounds like you're saying that until a `map!` is converted to an `object!` we can't “get detailed control of the codec”. What do you mean by this?^/^/It also sounds like you're saying that the `m/("Hello, World!")` syntax is too noisy? In the past I've proposed allowing `m/{Hello, World!}` and `m/"Hello, World!"`. Anyway, I'm not convinced a “noisier syntax” warrents a lossy option.}
    sent: "2016-09-05T18:44:49.960Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cdb4b21baa312a6bd7b427"
    text: {@dockimbel, to be clear, you want the JSON codec to losslessly produce a map! with string keys.}
    sent: "2016-09-05T18:08:50.328Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cd9ed5780310286bb4003c"
    text: {@dockimbel I asked about something like http://www.rebol.com/docs/sdk/encap.html }
    sent: "2016-09-05T16:35:33.289Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57cd7d2df33967fc642fc10a"
    text: {>The question of defaults depends on what percentage of JSON data we think will be problematic^/^/I only have an intuition on this: in general, well designed online apis.. have keys well designed enough for red, while a lot of javascript developer tolls make use of that aspect of json}
    sent: "2016-09-05T14:11:57.020Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cd7d1bf5a156f56483caab"
    text: {@dockimbel *just to confirm*, are you saying `map!` is there specifically for those things that can't be represented as a `word!`in red? Overall I like  @greggirwin 's proposal, especially with regards to lossy vs lossless. Gets even harder to go back to stringly typed after using red :smile:}
    sent: "2016-09-05T14:11:39.308Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "57cd5e32958e6f4729eb8b47"
    text: "@greggirwin Map! is there to cover such use-case."
    sent: "2016-09-05T11:59:46.696Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57cd42b82345e8250cea1c60"
    text: {Thoughts and questions on JSON:^/- If the codec is accessed via `load/as` we don't have complete flexibility in the interface to it, unless `load` is also changed. e.g. adding extra refinements to control loading behavior. ^/- One possibility is to think in terms of lossless and lossy loading. Lossless would mean always returning a map, and always strings as keys. Encoding objects can always be lossless. To ask for lossless decoding, we could leverage the existing `/all` refinement.^/- Lossy conversion is subject to conditions like, but not limited to, those @WiseGenius noted above. If you need detailed control (e.g. keys with spaces should have spaces replaced with an alternate character, invalid conversions are handled by...something, etc.). Detailed control is beyond what `load` could comfortably support in its interface.^/- Why would we even consider a lossy codec? Because it can make things so much nicer. If lossless is our only option, *any* Red code that has to deal with JSON loaded data will either have to use a separate step (which may be included in Red, and generalized) to get detailed control of the codec, or use the noisier syntax required for string key access.^/- The question of defaults depends on what percentage of JSON data we think will be problematic (can't find statistics on that :^^). It will likely be common that Red is both the producer and consumer, hence in complete control, and JSON is just used to talk to a web service, document store DB, etc. The issue, though, is Red's generality. As much as I want details hidden, and to get Red-friendly results by default, my gut instinct is that the codec needs to be lossless, with extra steps to wordify keys and convert to objects. :^^(}
    sent: "2016-09-05T10:02:32.370Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cd0d43861faa7f07b85c5f"
    text: {@ifgem See that commit log: https://github.com/red/red/commit/61f90c07af9670296ae3812f956e1fbd505cc639.}
    sent: "2016-09-05T06:14:27.042Z"
    editedAt: "2016-09-05T06:14:52.784Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57cc57e7ff95228007ad417f"
    text: "Kaj's doesn't do surrogate pairs yet either."
    sent: "2016-09-04T17:20:39.254Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cc5793861faa7f07b6bf29"
    text: "A gist? Or I can get you my email privately."
    sent: "2016-09-04T17:19:15.839Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cc56e26ec242015cdfee01"
    text: {I doubt it, haha! It's rough and simple, and it doesn't yet handle surrogate pairs, but I'm happy to throw it into your mix. Probably tomorrow though. Where should I put it?}
    sent: "2016-09-04T17:16:18.743Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cc5385ff95228007ad31b0"
    text: {Good input @WiseGenius. If you have a working version, feel free to send it over. You may have best-of-breed techniques we can use in the official loader.}
    sent: "2016-09-04T17:01:57.212Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cc3ffc958e6f4729e8a54d"
    text: {Excuse me, is there any way to include resources to Red executable with ability to change them?}
    sent: "2016-09-04T15:38:36.952Z"
    editedAt: "2016-09-04T15:39:43.542Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57cbeaecdbb70a4b09ab0884"
    text: {Of course, when I say that not all JSON keys can be converted to `word!`s, I mean that:^/ * Keys which are differentiated only by case are lost,^/ * Keys which contain only digits or other Red syntax become difficult to handle (which is probably why they are invalid `word!`s in Rebol 3),^/ * Keys with spaces become difficult to handle in Red (which is probably why they are invalid `word!`s in Rebol 3),^/^/It seems to me that JSON should always be loaded as `map!`s with `string!` keys. If someone wants to convert that to an `object!` let there be a separate function for converting `map!`s to `object!`s. Why burden the codec with something which may be useful elsewhere anyway?}
    sent: "2016-09-04T09:35:40.515Z"
    editedAt: "2016-09-04T09:36:07.804Z"
    v: 3
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cbdb4edbb70a4b09ab0801"
    text: {@greggirwin Although my version currently accepts both `map!`s and `object!`s when converting **to** JSON, it doesn't currently have the option to make an `object!` **from** JSON.^/This is because it always returns `string!` keys when converting **from** JSON.^/This is because not all JSON keys can be converted to `word!`s.^/However, it does accept both `word!`s and `string!`s when converting **to** JSON.^/But then it needs to check to ensure that a `map!` doesn't contain an identical `word!` and `string!` key with separate values when converting **to** JSON.}
    sent: "2016-09-04T08:29:02.373Z"
    editedAt: "2016-09-04T08:36:36.864Z"
    v: 3
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57cb499d6efec7117ca54f3e"
    text: {I am looking at Chris and Kaj's versions for ideas, but mainly porting and refactoring %json.r that is on json.org at this point.}
    sent: "2016-09-03T22:07:25.634Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cb4962861faa7f07b47ba7"
    text: {@dockimbel, for JSON:^/- Do you want it to *always* return a map! for JSON objects, or do you want an option to return object!s^/- Do you want it to always return word! keys (assuming map! output), string! keys, or a refinement to control it?}
    sent: "2016-09-03T22:06:26.564Z"
    editedAt: "2016-09-03T22:07:33.904Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cb4605958e6f4729e6ad00"
    text: "Dunno:)))"
    sent: "2016-09-03T21:52:05.740Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57cb3da5958e6f4729e69613"
    text: "You think you should be sleeping instead? ;^^)"
    sent: "2016-09-03T21:16:21.471Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cb3a6029ee4a67058c4175"
    text: {It's 2am(Russia, Ural), I'm playing with Red. What's wrong with me?:)}
    sent: "2016-09-03T21:02:24.334Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57cb2f63d52261ec344ee8f6"
    text: ""
    sent: "2016-09-03T20:15:31.744Z"
    editedAt: "2016-09-03T20:15:46.004Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57cb2ec4ff95228007aad5d8"
    text: {@rgchris lisp code is actually colored, you are missing parens:^/```^/(add 1 2)^/```}
    sent: "2016-09-03T20:12:52.072Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cb2970928ae0e73474a736"
    text: {@geekyI Results in no colouring, which to me is better than bad colouring (no idea why lisp code isn't coloured, but it isn't—and I figure if it is ever coloured, it won't be the worst match).}
    sent: "2016-09-03T19:50:08.892Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57caf1dc958e6f4729e5d252"
    text: {Aha! Even more info. I hadn't quoted anything in Gitter to see that. Thanks!}
    sent: "2016-09-03T15:53:00.765Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caf188958e6f4729e5d1a8"
    text: {@greggirwin I wouldn't have know if not for rgchris writing the same code as you and the highlighting turned out different :tongue: }
    sent: "2016-09-03T15:51:36.406Z"
    editedAt: "2016-09-03T15:52:35.770Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57caf14f928ae0e73473f6e2"
    text: "Ah! See, I didn't know that."
    sent: "2016-09-03T15:50:39.469Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caf12c958e6f4729e5d0b2"
    text: {@greggirwin well I  actually mean, you can write the lang name at the beginning of the triple backquotes to force the language! Not sure if it works with red, but works with others like python}
    sent: "2016-09-03T15:50:03.997Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57caefa0d52261ec344e4ce3"
    text: {Single backquotes for inline, triple for multi-line. Looks like you got it. And Github confuses me too.}
    sent: "2016-09-03T15:43:28.394Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cae70a958e6f4729e5b4ad"
    text: {Damn, I lost formatting, how do you quote quotes?^/> ```red^/^/formats with red. Not sure if it's actually formatting as red or something else. Sorry if you already knew I'm still a bit new to github and it's ecosystem}
    sent: "2016-09-03T15:06:50.060Z"
    editedAt: "2016-09-03T15:08:53.595Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "57cae6936bf4c26505ca0477"
    text: {@greggirwin not sure what you mean.. oh yes, you had written the same code^/I was just talking about and discovered this:^/> ```rebol^/>parse {test} [collect keep to end]^/>```}
    sent: "2016-09-03T15:04:51.876Z"
    editedAt: "2016-09-03T15:07:45.960Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57cae568ff95228007aa14c1"
    text: {I did the same thing @geekyI , to show how Red lexed it, and all the values produced.}
    sent: "2016-09-03T14:59:52.642Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cabcb4ff95228007a9b6f6"
    text: {:point_up: [September 3, 2016 12:21 AM](https://gitter.im/red/red?at=57c9d11c958e6f4729e34923)^/> ```lisp^/^/@rgchris, just curious why you formatted as lisp}
    sent: "2016-09-03T12:06:12.726Z"
    editedAt: "2016-09-03T12:06:51.827Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57ca60f1861faa7f07b2660b"
    text: {The lexer pair! rule is left open for supporting floats in pairs. We should add that before 1.0.}
    sent: "2016-09-03T05:34:41.675Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c9d36a958e6f4729e3514a"
    text: {There's a bit going on in the lexer there. `integer-rule` covers a number of cases, with things like decimal and percent optionally handled before `x` for pairs. After the `x` `integer-number-rule` is used, which does *not* do all that. Then the pair! is created with 0 as the second value in it, *then* the second value is set separately. Whew! ^/^/Seems a combination of things, current lexing rules, `to pair!` truncating the first value, etc.^/^/The pair! structure for Red says they can be floats, so I think that will probably be allowed in the future.}
    sent: "2016-09-02T19:30:50.595Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9d1f96efec7117ca1bd84"
    text: {There has been strong suggestion that all values be separated by space (except when butting up against '`[(])`'), but I guess Red doesn't insist upon this—`10x10` being a valid pair! and `.1` being a valid decimal!.}
    sent: "2016-09-02T19:24:41.070Z"
    editedAt: "2016-09-02T19:27:03.541Z"
    v: 4
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57c9d15aff95228007a7a43a"
    text: "all right, thanks."
    sent: "2016-09-02T19:22:02.011Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57c9d11c958e6f4729e34923"
    text: {```lisp^/red>> [10x10.1]^/== [10x10 0.1]^/```}
    sent: "2016-09-02T19:21:00.098Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57c9d0c629ee4a670588e013"
    text: "I just bumped into it, I'm not using it."
    sent: "2016-09-02T19:19:34.929Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57c9d09a958e6f4729e3471f"
    text: {but^/```^/red>> 10x0.1^/== 0.1^/```^/something relatedto operand positions ?}
    sent: "2016-09-02T19:18:50.280Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57c9d0906efec7117ca1b8ed"
    text: "Yeah. Just don't do that for now. ;^^)"
    sent: "2016-09-02T19:18:40.529Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9d079861faa7f07b11687"
    text: {well^/```^/red>> 10.1x10^/== 10x10^/```}
    sent: "2016-09-02T19:18:17.723Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57c9d034ff95228007a79fb2"
    text: "Rather, it is lexed separately."
    sent: "2016-09-02T19:17:08.942Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9d01dd52261ec344bccb9"
    text: {Pairs with decimal values are still an open design question AFAIK. Right now, the fractional part is ignored.^/```^/red>> [10.1x10.1]^/== [10x10 0.1]^/```}
    sent: "2016-09-02T19:16:45.175Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9cceaff95228007a794a1"
    text: {am I missing something ? is this valid ?^/```^/red>> 10.1x10.1^/== 0.1^/```}
    sent: "2016-09-02T19:03:06.292Z"
    editedAt: "2016-09-02T19:12:20.371Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57c9b4f1928ae0e7347113d4"
    text: {Android app in 'Play Store' did not install - mixed two up}
    sent: "2016-09-02T17:20:49.217Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c9b44e6efec7117ca15191"
    text: { @geekyI Confirmed. Buggy with rooms. But thanks @ifgem better than in Chrome.}
    sent: "2016-09-02T17:18:06.672Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c9a8bf6efec7117ca12883"
    text: {@ifgem trying gitteroid.. I installed it and accidentally left the room.. overall the features are nice, but a bit buggy with the management of rooms}
    sent: "2016-09-02T16:28:47.638Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c994aa861faa7f07b03b5b"
    text: {Bobik (Robert) asks on FB, when is a `date!`dtype scheduled? We now support `now/time` and I remember, some term for date support was mentioned here, but don't remember the outcome ....}
    sent: "2016-09-02T15:03:06.281Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57c992d929ee4a670588048f"
    text: "@geekyI forgive me I was awfully sleepy:)"
    sent: "2016-09-02T14:55:21.501Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c98e10ccfcf7147cb2fee0"
    text: {@ifgem remember this? :smile:  [September 1, 2016 1:42 AM](https://gitter.im/red/help?at=57c7411eccfcf7147cac5ea6)}
    sent: "2016-09-02T14:34:56.891Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c988366efec7117ca0b302"
    text: "@dsgeyser you can use gitteroid:)."
    sent: "2016-09-02T14:09:58.134Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c97027dbb70a4b09aaf3cc"
    text: {Take a look at the documentation:^/```^/red>> ? find^/^/[...some text...]^/^/     /any => TBD: Use * and ? wildcards in string searches.^/^/[...some text...]^/```}
    sent: "2016-09-02T12:27:19.600Z"
    editedAt: "2016-09-02T12:27:45.839Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57c97008dc3c80b559a78161"
    text: "@WaBerlin_twitter Yes, it is not implemented yet"
    sent: "2016-09-02T12:26:48.713Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57c96f09d52261ec344a774e"
    text: {Sorry: should read: print find/any str "c*f"}
    sent: "2016-09-02T12:22:33.784Z"
    v: 1
    author: "57c96bff40f3a6eec062f498"
) #(
    id: "57c96ed5d52261ec344a7670"
    text: {I am new to Red, worked on Rebol before. The following appears not to work: ^/str: "abcdefg"^/print find/any str "c*f"^/*** Internal Error: reserved for future use (or not yet implemented)^/Is it correct that  the refinement /any is not implemented yet?}
    sent: "2016-09-02T12:21:41.380Z"
    v: 1
    author: "57c96bff40f3a6eec062f498"
)#(
    id: "57c94d6a6bf4c26505c5b8f9"
    text: {@DideC  using my phone via webapp/site. Post was done differently from what I expected. Sorry, can't edit or use Android app. Android version too old. Will try to update Android.}
    sent: "2016-09-02T09:59:06.807Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c93c99861faa7f07af22d3"
    text: {(@dsgeyser  : Looks like a "copy/pasting too much than what I want", isn't it ? If yes, you can edit your post by clicking the 3 dots on the header line of it)}
    sent: "2016-09-02T08:47:21.713Z"
    editedAt: "2016-09-02T08:48:15.731Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57c9350dccfcf7147cb1df5e"
    text: {Sorry. Don't know why it was posted like that.  On parse/trace Steeve reported an error, which I get here (Invalid type specifier), which I don't know the status of. The default on-parse-event func just uses the input marker in 'fetch.^/@geekyI , collect the func, or the parse keyword? They're roughly similar.^/^/geekyI Aug 30 02:39^/@greggirwin I think so, without understanding the source of parse, it's hard to say what's wrong^/^/Gregg Irwin Aug 30 02:39^/Basically, they bind keep as a special collector func in their body, so where you call keep that value is added to the result of collect.^/http://www.red-lang.org/2013/11/041-introducing-parse.html mentions collect in that context.^/^/geekyI Aug 30 02:44^/@greggirwin yeah I read it, but it only mentions briefly there..so collect is 2 different things with the same idea. I feel like I am following a pattern parse "text" [collect ... keep something ... ] , either I'm thinking too narrowly or /collect can be a simple refinement to parse?^/the pattern being collect always at the beginning^/(*) If collect keyword is used in any rule in its simplest form, a block will be returned by parse no matter if the root rule succeeded or not.^/this is another reason for why I think it would be better as a refinement^/^/Gregg Irwin Aug 30 03:04^/Collect doesn't always have to be at the beginning. And if you make it a refinement, then you need to decide if it should always take an into target, which is optional today.^/^/Gregg Irwin Aug 30 03:11^/I haven't use collect in parse much yet. Have to play more, as all is not clear to me either.^/^/geekyI Aug 30 03:23^/@greggirwin collect sort of reminds me of Fried quotations in factor, a functional forth with HOFs^/^/Gregg Irwin Aug 30 03:27^/Collect, the function, is really simple, and the basic use of collect in parse is as well (e.g. using it at the beginning of your main rule). Fried quotations, seeing them for the first time, look...complex.^/^/geekyI Aug 30 03:33^/Maybe the analogy is a bit weak (and working in reverse), but I can't help but compare the 2 langs because they are so similar. If you reverse the order in Red and don't treat op! in a special way I think you'd get something similar to Factor^/But true, I admit I didn't get fried quotations at first myself, but collect I grokked almost right away.. basically, it does the reverse of what collect does, fillin in the _^/^/geekyI Aug 30 03:39^/A Red implementation might work like^/red>> fry [ a b c ] [ _ + _ * _ ]^/== [a + b * c]^/^/Gregg Irwin Aug 30 03:39^/Got it. Thanks!^/^/Gregg Irwin Aug 30 03:53^/fry: function [input output][^/    input: copy input^/    _: [change '_ (take input)]^/    output: copy output^/    parse output [some [_ | skip]]^/    output^/]^/fry [ a b c ] b: [ _ + _ * _ ]^/^/geekyI Aug 30 03:59^/In Red, everything is so easy..^/Maybe a combination of fry and collect might help @ifgem ?^/^/Gregg Irwin Aug 30 07:42^/Maybe. Design is hard because we want to keep the base small, but provide all we need to build on. There's always the lure to add just a bit more, to make certain things easy. Figuring out what is general, and worth all the costs, isn't easy. In this case, the return example looks like a really nice wish. Seems easy. So now I need to think about what it looks like if I step back. How does it fit in larger things, with nested rules, partials, and backtracking. Collect seems tricky there too, in my limited experiments nesting around with it in rules.^/But we can easily play with ideas, which is one of Red's great strengths. We can try things, and decide what to pursue, either as REPs or just mezzanines and libs.^/Parse may be especially tricky, when we look at enhancements, because it can be used for anything.^/^/ifgem Aug 30 10:34^/@geekyI^/red>> hello: [collect [keep "hello"]]^/== [collect [keep "hello"]]^/red>> parse "helloworld" [set h hello "world"]^/== ["hello"]^/red>> h^/== #"h"^/^/ifgem Aug 30 10:51^/Fry sometimes will be very useful:).^/^/ifgem Aug 30 11:09^/@greggirwin could you write collect/keep equivalent of the first return example?^/^/Steeve Aug 30 11:39^/FRY using replace. Funny attempt. ^/Replace can take th}
    sent: "2016-09-02T08:15:09.479Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c9344dff95228007a5a10b"
    text: {    @dockimbel  Just want to know how far out is IO support still? Need to have GUI app talk to web app via Ajax? Btw. Many thanks for the long hours you and your team have put into Red already.}
    sent: "2016-09-02T08:11:57.931Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c93205ccfcf7147cb1d0c6"
    text: {@WiseGenius I mean whatever way to represent the tables that takes the less bytes once compiled. Though, if it requires much more code, the gain might be low. In such case, having less code is more important. So, aim at a good trade-off between generated code size vs code size and complexity.}
    sent: "2016-09-02T08:02:13.932Z"
    editedAt: "2016-09-02T08:04:46.816Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c931d96ec242015cdfd131"
    text: {@dockimbel I assume that by “a more compact representation” you mean shortcuts like adding `0020h` to some of the characters' code point values to make them lowercase, etc?}
    sent: "2016-09-02T08:01:29.843Z"
    editedAt: "2016-09-02T08:02:08.945Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57c93084861faa7f07af0149"
    text: {@WiseGenius  Thanks for the deeper analysis. Yes, we want to minimize the generated code size. Though, having a more compact representation that can be expanded into one or two tables at startup, is also an option.}
    sent: "2016-09-02T07:55:48.226Z"
    editedAt: "2016-09-02T07:56:32.043Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c92f45dbb70a4b09aaefb0"
    text: {@dockimbel I tried reversing the order of the generated table for `uppercase`, and it only improved some of the characters:^/```^/red>> uppercase "βεθιπρςφω"^/== "ΒϵΘιϖϱςΦΩ"^/```^/The choice of which ones this did and didn't fix doesn't seem to be caused by their order in the table, since both ϐ and ϵ appear after both Β and Ε, yet Β is fixed this way and Ε isn't. I'm sure if I read the rest of the code properly, I'd see the reason. Or maybe I made a mistake somewhere.^/It might be possible to achieve success, as you say, by rearranging both the order of the table and/or some other part of the code.^/If this doesn't work (and if the concern about a second table is the size of the code), it might be possible to split the existing table into 2 smaller tables:^/The first table would only have one-to-one, 2-way relationships for uppercase and lowercase. For example, it would contain this line:^/```^/0392h 03B2h ; GREEK CAPITAL LETTER BETA^/```^/And the other table would contain the other 1-way relationships. For example, it would contain this line:^/```^/03D0h 03B2h ; GREEK BETA SYMBOL^/```^/So `uppercase` would just go --> through the 2nd table, and then go <-- through the 1st table.^/And `lowercase` would just go --> through the 2nd table, and then go --> through the 1st table.^/Of course, this wouldn't cover everything, but I assume we're only talking about a temporary improvement for now, since handling unicode properly could take a lot of work and is not something which should be skimped on in the long run.^/Final Sigma is the least of our worries. I would just put it in the second table for now:^/```^/03C2h 03C3h ; GREEK SMALL LETTER FINAL SIGMA^/03A2h 03A3h ; <reserved-03A2>^/```^/`lowercase "Σ"` would still become `"σ"` at the end of a word (as it does currently), but that's fine (simple and predictable) for now. However, `uppercase "ς"` would also become `"Σ"` as it should (and doesn't currently).^/At the very least, it seems strange to me that `=` seems to use `uppercase` when `lowercase` is currently more reliable (having it's own table).}
    sent: "2016-09-02T07:50:29.122Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57c8fae76efec7117c9ef5d5"
    text: {@qtxie @WiseGenius Could we find a better smarter layout for that table to make it work and avoid having two tables?}
    sent: "2016-09-02T04:07:03.011Z"
    editedAt: "2016-09-02T04:07:21.213Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c8b018ff95228007a4472a"
    text: {We need to make another 'lowercase-> uppercase' table to make it work correctly.}
    sent: "2016-09-01T22:47:52.388Z"
    editedAt: "2016-09-01T22:48:27.030Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57c84d6c928ae0e7346cf400"
    text: {@WiseGenius @qtxie did the implementation, so he'll have a look at that.}
    sent: "2016-09-01T15:46:52.063Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c84b8b928ae0e7346ced24"
    text: {I had never thought about final sigma. Things would have to be position aware to handle that correctly.}
    sent: "2016-09-01T15:38:51.925Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c81a6ddc3c80b559a76f37"
    text: {@dockimbel Thanks. An observation:^/The entire Greek alphabet seems to be in that table (except for final Sigma).^/For example:^/```^/0392h 03B2h ; GREEK CAPITAL LETTER BETA^/```^/...is correct.^/So for the above letters which are not recognized as equal, `lowercase` works:^/```^/red>> lowercase "ΒΕΘΙΠΡΦΩ"^/== "βεθιπρφω"^/```^/However, the lowercase versions of these letters appear in the table more than once in the second column.^/For example:^/```^/03D0h 03B2h ; GREEK BETA SYMBOL^/```^/I haven't read the code yet, but it seems that the latter occurrence is the one which `uppercase` is using, and it therefore doesn't work for those letters:^/```^/red>> uppercase "βεθιπρφω"^/== "ϐϵϑιϖϱϕΩ"^/```^/I'm guessing `=` is using the same as `uppercase` and that's why it isn't working for those letters.}
    sent: "2016-09-01T12:09:17.615Z"
    editedAt: "2016-09-01T12:09:56.521Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57c812d3ff95228007a24735"
    text: {@WiseGenius See [here](https://github.com/red/red/blob/master/runtime/case-folding.reds).}
    sent: "2016-09-01T11:36:51.521Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c812abdc3c80b559a76ec6"
    text: {Thanks. What generic table is Red currently using?}
    sent: "2016-09-01T11:36:11.341Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57c80fdd6efec7117c9c489c"
    text: {Because we currently use a generic collation table for case-folding, so it does not have all the locale rules. See our Unicode [page](https://github.com/red/red/wiki/Unicode-Issues-with-Proposed-Resolutions) on the wiki. @PeterWAWood can give you more details about it if you need.}
    sent: "2016-09-01T11:24:13.009Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c80d8a6ec242015cdfc1a0"
    text: {```^/red>> "ΑΓΔΖΗΚΛΜΝΞΟΣΤΥΧΨ" = "αγδζηκλμνξοστυχψ"^/== true^/red>> "ΒΕΘΙΠΡ΢ΦΩ" = "βεθιπρςφω"^/== false^/red>> "Β" = "β"^/== false^/red>> "Ε" = "ε"^/== false^/```^/Etc.^/Why?}
    sent: "2016-09-01T11:14:18.379Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57c7dff9ff95228007a1b8e2"
    text: "@dockimbel awesome:)"
    sent: "2016-09-01T07:59:53.284Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c7dfd329ee4a67058305d1"
    text: "Yes, could be used for that too. ;-)"
    sent: "2016-09-01T07:59:15.402Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c7dfa56bf4c26505c187fd"
    text: {@dockimbel I guess it's very useful for implementing smalltalk-like image? :).}
    sent: "2016-09-01T07:58:29.136Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c7df74ccfcf7147cadf19e"
    text: "@dockimbel ok:)."
    sent: "2016-09-01T07:57:40.294Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c7df196bf4c26505c186d4"
    text: {Only a Redbin decoder has been implemented so far in the runtime library, the encoder is missing. If someone wants to tackle it, the spec and decoder implementation in Red/System is available. Also a Rebol encoder exists in the compiler toolchain. It's not a big work, can be done over a weekend. ;-)}
    sent: "2016-09-01T07:56:09.625Z"
    editedAt: "2016-09-01T07:58:16.602Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c7df0929ee4a67058303c5"
    text: "Is it a bug or it's just not implemented yet?"
    sent: "2016-09-01T07:55:53.069Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c7decb6bf4c26505c18610"
    text: {it doesn't work ^/`save/as %test.redbin [test: "hello world"] 'redbin`}
    sent: "2016-09-01T07:54:51.164Z"
    editedAt: "2016-09-01T07:55:03.404Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c7d32e29ee4a670582dde6"
    text: {`do` in Red has fixed arity for now, unlike Rebol2/3.}
    sent: "2016-09-01T07:05:18.818Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c7c0aaccfcf7147cad9842"
    text: {I think that there is some difference in the way the Red's ```do``` function treats its input. I think that it has been discussed in this channel but I cannot remember the details. }
    sent: "2016-09-01T05:46:18.614Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57c7c02accfcf7147cad9777"
    text: {@jeffmaner Try this:^/```text^/do compose [(random/only [lowercase uppercase]) word]^/```}
    sent: "2016-09-01T05:44:10.208Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57c7b1e2dbb70a4b09aadbb8"
    text: {@dockimbel Both work with no memory problems. Thanks.}
    sent: "2016-09-01T04:43:14.138Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57c7b0c9861faa7f07aab129"
    text: {@WiseGenius `make char! <integer>` or `#"^^@" + <integer>` work.}
    sent: "2016-09-01T04:38:33.836Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c7afd0dbb70a4b09aadbb6"
    text: {I'm trying to think of a way to implement `to-char 1234` in Red without using `load` because it's using too much memory. Maybe I'll have to use Red/System or wait until `to char!` is implemented.}
    sent: "2016-09-01T04:34:24.057Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57c7aea629ee4a67058288f4"
    text: {@greggirwin I remember enabling multiple keys for `switch` in the compiler recently, so I either forgot to update the interpreted version or introduced a bug there.}
    sent: "2016-09-01T04:29:26.042Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c7ae65861faa7f07aaac1c"
    text: {@WiseGenius `to integer!` calls `load` internally as `to` is not fully implemented yet.}
    sent: "2016-09-01T04:28:21.587Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c7a8d285a31403548c5ce7"
    text: {Random observation: `to integer! "1234"` appears to leak almost twice as much memory as `load "1234"`.}
    sent: "2016-09-01T04:04:34.007Z"
    editedAt: "2016-09-01T04:04:57.349Z"
    v: 3
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57c76ed66efec7117c9aa182"
    text: "Agreed."
    sent: "2016-08-31T23:57:10.825Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c76eb1dbb70a4b09aada19"
    text: "Would be strange to not have it in Red"
    sent: "2016-08-31T23:56:33.366Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c76e7ddbb70a4b09aada17"
    text: {Sample in Red/system^/```lisp^/^-^-if i < len [^/^-^-^-switch type [^/^-^-^-^-OP_AND [fill p + i p + len null]^/^-^-^-^-OP_OR^/^-^-^-^-OP_XOR [copy-memory p + i p2 + i len - i]^/^-^-^-]^/^-^-]^/```}
    sent: "2016-08-31T23:55:41.983Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c76dd2ff95228007a0964e"
    text: "I'll ticket it. Thanks."
    sent: "2016-08-31T23:52:50.293Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c76d946ec242015cdfbbfa"
    text: { Well, IIRC red/system's switch allows several values. So I would say it's a miss.}
    sent: "2016-08-31T23:51:48.988Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c76ccf928ae0e7346a7a03"
    text: {Do you think it's a design change from Rebol, meaning we need a doc string change, or a bug?}
    sent: "2016-08-31T23:48:31.439Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c75508dc3c80b559a766d4"
    text: {Yeah, switch doesn't work with several values per action block. Also, confirmed by reading the source code.}
    sent: "2016-08-31T22:07:04.782Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c74961ccfcf7147cac7835"
    text: {`switch` bug? It doesn't work to have more than one value before the block to be evaluated.^/```^/^-switch/default type?/word 'a [^/^-^-word! block! ^-[print "word|block"]^/^-^-function!^-^-[print 'function]^/^-][print 'else]^/```}
    sent: "2016-08-31T21:17:21.615Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c7490ad52261ec34446a9a"
    text: {I don't think Nenad or I said our thoughts were exactly the same as your `return` proposal. It's worth a REP, but I don' t know how hard it would be or all the ramifications.}
    sent: "2016-08-31T21:15:54.425Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c72523ccfcf7147cac00d1"
    text: ":))"
    sent: "2016-08-31T18:42:43.009Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c72514ff952280079fa8c3"
    text: {What do you think about this behavior?:^/```^/fish: [ ^/^-(fish-length: 0)^/^-#">"^/^-#"-" (fish-length: fish-length + 1)^/^-["0>" (fish-name: "J") | "|>" (fish-name: "Q")]^/^-return (^/^-^-object reduce [^/        name: fish-name^/        length: fish-length^/^-^-]^/^-)^/]^/ocean: [^/^-set fishes some fish^/]^/parse ">----0>>----|>" ocean^/fishes ;=> [object [name: "J" length: 4] object [name: "Q" length: 4]]^/```}
    sent: "2016-08-31T18:42:28.805Z"
    editedAt: "2016-08-31T18:47:24.115Z"
    v: 5
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c713b9ccfcf7147cabc42f"
    text: {I wrote the issue about the return keyword because it's very useful for the sub implementation.}
    sent: "2016-08-31T17:28:25.055Z"
    editedAt: "2016-08-31T17:32:07.821Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c711d36bf4c26505bf3abe"
    text: {Common:^/```^/digit: charset "0123456789"^/number: [some digit]^/```^/Sub is the replace version that takes red parse rule as pattern argument:^/It has 2 behavior:^/the first is replace everything that was matched by the pattern with reduced molded value.^/```^/sub "[100]" ["[" set num integer(it's matcher) "]"] ["{" num + 1  "!" "}"] ;=> "{101!}"^/```^/the second is sub/part replace only certain parts of the matched pattern with changed parts(do block mold get new values words)^/```^/sub/part "[100]"  ["[" set num integer "]"] [num: num + 1] ;=> "[101]"^/```^/A matcher is a rule that returns the representation of the pattern.^/Here's an example of the matcher used above.^/```^/integer: [^/^-copy int1 number^/^-return (^/^-^-to integer! int1^/^-)^/]^/```}
    sent: "2016-08-31T17:20:19.358Z"
    editedAt: "2016-08-31T17:21:19.578Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c70e9029ee4a6705809f9f"
    text: {:point_up: [30 августа 2016 г., 21:29](https://gitter.im/red/red?at=57c5b45589fabaea6bd6fe14)^/Neither your nor Nenad collect/keep equivalent of the first example do exactly what return does.}
    sent: "2016-08-31T17:06:24.881Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c6ff76ccfcf7147cab799a"
    text: {I should note that the above is unchanged R2 code, tested under Red. I have not confirmed that `pick` is faster than path syntax in Red.}
    sent: "2016-08-31T16:01:58.328Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c6fc22d52261ec344357d1"
    text: {I most often word in Redbol at a high level, not being concerned about performance. But there are times you need to care, and I did implement a binary search some time back when I needed it. ^/```^/iterative-binary-search: function [^/^-"Returns the index where a value is (success), or the index of the insertion point as a negative offset (not found)"^/^-series [series!]    "Pre-sorted series"^/^-value               "Value to find"^/][^/^-if empty? series [return none]^/^/^-low: 1^/^-high: length? series^/^-^/^-while [low <= high] [^/^-^-; Normally I would just use ROUND, but this is one place we do^/^-^-; care about performance, because this func could get called a^/^-^-; lot depending on the application.^/^-^-;mid: round/down low + (high - low / 2)^/^-^-mid: to integer! low + (high - low / 2)^/^-^-; Pick is faster than path syntax, and just as clear here.^/^-^-cmp-val: pick series mid^/^-^-either cmp-val = value [return mid] [^/^-^-^-either cmp-val < value [low: mid + 1] [high: mid - 1]^/^-^-]^/^-]^/^-negate low^/]^/e.g. [^/^-iterative-binary-search [1 2 3 4 5 6] 4^/^-iterative-binary-search [1 2 3 4 5 6] 7^/^-iterative-binary-search [1 2 3 4 5 6] 0^/]^/```}
    sent: "2016-08-31T15:47:46.397Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c6f95ad42df13066101b05"
    text: {I intended to post that to help rather than here. My apologies.}
    sent: "2016-08-31T15:35:54.330Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
)#(
    id: "57c6f8f4c251522d6696ace9"
    text: { This line of code runs in Rebol, but Red complains that the function (either `lowercase` or `uppercase`) is missing its string argument. Is there a new way to accomplish this in Red?^/^/```^/do random/only [ lowercase uppercase ] word^/```}
    sent: "2016-08-31T15:34:12.025Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57c6f7e06b8eec8f6888bdca"
    text: {`Place` is a nice word. I keep wanting to use `inset` for things like this, but it's too close to `insert`.}
    sent: "2016-08-31T15:29:36.374Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c6bc30c251522d6695d412"
    text: "Shame on me:)))"
    sent: "2016-08-31T11:14:56.048Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c6b82cc3f678595d4d9ea2"
    text: {"AND" in Red parse, is called "ahead" }
    sent: "2016-08-31T10:57:48.325Z"
    editedAt: "2016-08-31T10:58:48.845Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c6b7fd6cea5d25179a8a7f"
    text: {@dockimbel Also, I miss rebol3's "and" parse keyword(even though,, I think "when" is better name).}
    sent: "2016-08-31T10:57:01.252Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c6b6ad8f4ad01672cfd33f"
    text: {@ifgem Or you can use an upper limit if it's safe in your use-case, like: `5 100 #"a"`.}
    sent: "2016-08-31T10:51:25.608Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c6b19aee799d3329f5cc55"
    text: {`5 #"a" any #"a"`:))}
    sent: "2016-08-31T10:29:46.277Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c6b1162dcc4f312948e5ac"
    text: {Sorry, how to write "at least 5" in parse?}
    sent: "2016-08-31T10:27:34.053Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c6a10b2dcc4f312948b2e2"
    text: "`place/mark [! + ! + !] [10 20 30] '!`"
    sent: "2016-08-31T09:19:07.709Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c618372dcc4f3129476700"
    text: {:point_up: [August 30, 2016 9:47 PM](https://gitter.im/red/red?at=57c5b8898635a5ba6c81ac0f) @greggirwin https://gist.github.com/geekyI/844a15e506ce9c6b12a83e78df750295}
    sent: "2016-08-30T23:35:19.304Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c5bf6c8635a5ba6c81c37c"
    text: ""
    sent: "2016-08-30T17:16:28.519Z"
    editedAt: "2016-08-30T17:16:37.616Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c5bbce86a454643840252d"
    text: "I can't relate, my first time is too old ;-)"
    sent: "2016-08-30T17:01:02.095Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c5bb6e2dcc4f31294624ef"
    text: {When I started with Rebol, some of the first things I did were to write funcs I used a lot in VB to help me learn the language and transition.}
    sent: "2016-08-30T16:59:26.188Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c5ba82a8d62fbe6c33b263"
    text: "Ok"
    sent: "2016-08-30T16:55:30.550Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c5ba6d8635a5ba6c81b1f1"
    text: {I'm not proposing it as a standard mezz, but I think it's a good example.  It should go in the *Red for Factor programmers* doc. ;^^)}
    sent: "2016-08-30T16:55:09.064Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c5b94ba8d62fbe6c33b254"
    text: {Well, I don't think we really need a FRY function since it can be inlined with one line of standard code ;-)}
    sent: "2016-08-30T16:50:19.841Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c5b8eb65053b006ce0f7e7"
    text: {I guess I'm saying it needs to be designed now. :^^)}
    sent: "2016-08-30T16:48:43.538Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c5b8d389fabaea6bd71317"
    text: {And should it be generalized, to allow a different placeholder? I've used '? as a formal/placeholder in other funcs similar to this.}
    sent: "2016-08-30T16:48:19.421Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c5b8898635a5ba6c81ac0f"
    text: {`Fry` needs a better name, shouldn't have to copy input, but needs to define what happens if it runs out of values before it runs out of `_` placeholders. Also, the target series should be the first arg to match Red conventions.}
    sent: "2016-08-30T16:47:05.848Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c5b7e186a45464384024f5"
    text: "Thanks Gregg"
    sent: "2016-08-30T16:44:17.760Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c5b652ee799d3329f2ff71"
    text: {Ah, I see Doc commented on the `return` wish as well.}
    sent: "2016-08-30T16:37:38.451Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c5b5e09bac56676372a766"
    text: {Steeve's example added to https://github.com/red/red/wiki/Guru-Meditations.}
    sent: "2016-08-30T16:35:44.503Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c5b45589fabaea6bd6fe14"
    text: {:point_up: [August 30, 2016 3:09 AM](https://gitter.im/red/red?at=57c54d529bac566763713b99)^/```^/digit: charset "0123456789"^/number: [some digit]^/^/point: [^/    copy left number^/    #"x"^/    copy right number^/    keep (reduce ["point" left right])^/]^/expr: [^/    collect [^/        point ^/        ";"^/        point^/        keep ("expr")^/    ]^/]^/^/parse "100x100;200x200" expr^/```^/This puts "expr" at the end. If you put it at the top of the collect body it will always be collected, whether the rest of the rule fails or not. }
    sent: "2016-08-30T16:29:09.655Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c5ade086a4546438402413"
    text: "In my opinion ;-)"
    sent: "2016-08-30T16:01:36.225Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c5ac94a8d62fbe6c33b128"
    text: {It would be better to alter the code of **REPLACE** so that even the compiled form handles this specific case correctly }
    sent: "2016-08-30T15:56:04.807Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c5ac8cee799d3329f2dd3c"
    text: {The Red wiki is public, anyone can edit it, it's a good place for keeping valuable info.}
    sent: "2016-08-30T15:55:56.115Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c5a9df9bac566763727b97"
    text: {^^^^ This should be somewhere that won't scroll off in time...}
    sent: "2016-08-30T15:44:31.367Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57c55457f9d724c34acdc508"
    text: {** FRY using replace. Funny attempt. **^/Replace can take the result of a function as subsitution value.^/So in theory we could write.^/```lisp^/fry: func [in out] [replace/all copy out '_ does [take in]]^/```^/Problem:^/```lisp^/red>> fry [a b c][_ + _ - _ ]^/= [func [][take in] + func [][take in] - func [][take in]]^/```^/^/The function is not evaluated at each iteration as hoped (like Rebol).^/The reason is: Red uses a compiled version of the **replace** function.^/Compiled functions don't evaluate functions passed as arguments inside their body code.^/But interpreted functions do so.^/Reconstructing **replace** from its source will activate interpreted mode.^/`replace: func spec-of :replace body-of :replace`^/Now, we got the expected behavior:^/```lisp^/red>> fry [a b c][_ + _ - _]^/== [a + b - c]^/```}
    sent: "2016-08-30T09:39:35.342Z"
    editedAt: "2016-08-30T09:40:35.524Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57c54d529bac566763713b99"
    text: {@greggirwin could you write collect/keep equivalent of the first return example?}
    sent: "2016-08-30T09:09:38.843Z"
    editedAt: "2016-08-30T09:09:49.031Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c5490fca24c06c63869417"
    text: "Fry sometimes will be very useful:)."
    sent: "2016-08-30T08:51:27.858Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c5451f9bac56676371226f"
    text: {@geekyI ^/```^/red>> hello: [collect [keep "hello"]]^/== [collect [keep "hello"]]^/red>> parse "helloworld" [set h hello "world"]^/== ["hello"]^/red>> h^/== #"h" ^/```}
    sent: "2016-08-30T08:34:39.947Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c51dc59bac56676370c2bc"
    text: {`Parse` may be especially tricky, when we look at enhancements, because it can be used for *anything*. }
    sent: "2016-08-30T05:46:45.585Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c51d174023dec56c28ad55"
    text: {But we can easily play with ideas, which is one of Red's great strengths. We can try things, and decide what to pursue, either as REPs or just mezzanines and libs.}
    sent: "2016-08-30T05:43:51.578Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c51cd9ee799d3329f11efb"
    text: {Maybe. Design is hard because we want to keep the base small, but provide all we need to build on. There's always the lure to add just a bit more, to make certain things easy. Figuring out what is general, and worth all the costs, isn't easy. In this case, the `return` example looks like a really nice wish. Seems easy. So now I need to think about what it looks like if I step back. How does it fit in larger things, with nested rules, partials, and backtracking. `Collect` seems tricky there too, in my limited experiments nesting around with it in rules.}
    sent: "2016-08-30T05:42:49.042Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4e8bd65053b006cde85a2"
    text: {Maybe a combination of `fry` and `collect` might help @ifgem ?}
    sent: "2016-08-30T02:00:29.947Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4e867ee799d3329f0acfc"
    text: "In Red, everything is so easy.."
    sent: "2016-08-30T01:59:03.607Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4e71789fabaea6bd49eb4"
    text: {```^/fry: function [input output][^/    input: copy input^/^-_: [change '_ (take input)]^/^-output: copy output^/^-parse output [some [_ | skip]]^/^-output^/]^/fry [ a b c ] b: [ _ + _ * _ ]^/```}
    sent: "2016-08-30T01:53:27.723Z"
    editedAt: "2016-08-30T01:55:25.096Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4e3e14023dec56c282823"
    text: "Got it. Thanks!"
    sent: "2016-08-30T01:39:45.053Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4e3c98635a5ba6c7f3f36"
    text: {A Red implementation might work like^/```^/red>> fry [ a b c ] [ _ + _ * _ ]^/== [a + b * c]^/```}
    sent: "2016-08-30T01:39:21.505Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4e32d9bac566763703f09"
    text: {But true, I admit I didn't get fried quotations at first myself, but `collect` I grokked almost right away..  basically, it does the reverse of what collect does, fillin in the `_`}
    sent: "2016-08-30T01:36:45.079Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4e278ca24c06c6385a737"
    text: {Maybe the analogy is a bit weak (and working in reverse), but I can't help but compare the 2 langs because they are so similar. If you reverse the order in Red and don't treat op! in a special way I think you'd get something similar to Factor}
    sent: "2016-08-30T01:33:44.083Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4e0f49bac56676370356d"
    text: {`Collect`, the function, is really simple, and the basic use of `collect` in parse is as well (e.g. using it at the beginning of your main rule). Fried quotations, seeing them for the first time, look...complex.}
    sent: "2016-08-30T01:27:16.586Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4e0018635a5ba6c7f351f"
    text: {@greggirwin `collect` sort of reminds me of [Fried quotations](http://docs.factorcode.org/content/article-fry.examples.html) in factor, a functional forth with HOFs}
    sent: "2016-08-30T01:23:13.640Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4dd29ca24c06c638590f6"
    text: {I haven't use `collect` in `parse` much yet. Have to play more, as all is not clear to me either.}
    sent: "2016-08-30T01:11:05.519Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4dbb32dcc4f312943863d"
    text: {`Collect` doesn't always have to be at the beginning. And if you make it a refinement, then you need to decide if it should always take an `into` target, which is optional today.}
    sent: "2016-08-30T01:04:51.956Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4d7cf65053b006cde5b68"
    text: {>(*) If collect keyword is used in any rule in its simplest form, a block will be returned by parse no matter if the root rule succeeded or not.^/^/this is another reason for why I think it would be better as a refinement}
    sent: "2016-08-30T00:48:15.610Z"
    editedAt: "2016-08-30T00:48:31.919Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4d72765053b006cde5a40"
    text: {the pattern being `collect` always at the beginning}
    sent: "2016-08-30T00:45:27.966Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4d7058635a5ba6c7f217a"
    text: {@greggirwin  yeah I read it, but it only mentions briefly there..so `collect` is 2 different things with the same idea. I feel like I am following a pattern `parse "text" [collect ... keep something ... ]` ,  either I'm thinking too narrowly or `/collect` can be a simple refinement to `parse`?}
    sent: "2016-08-30T00:44:53.327Z"
    editedAt: "2016-08-30T00:45:56.666Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4d6722dcc4f3129437aae"
    text: {http://www.red-lang.org/2013/11/041-introducing-parse.html mentions `collect` in that context.}
    sent: "2016-08-30T00:42:26.920Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4d5de65053b006cde57c8"
    text: {Basically, they bind `keep` as a special collector func in their body, so where you call `keep` that value is added to the result of `collect`.}
    sent: "2016-08-30T00:39:58.242Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57c4d5bd89fabaea6bd4735c"
    text: {@greggirwin I think so, without understanding the source of parse, it's hard to say what's wrong}
    sent: "2016-08-30T00:39:25.368Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4d5adee799d3329f07c98"
    text: {@geekyI , `collect` the func, or the `parse` keyword? They're roughly similar.}
    sent: "2016-08-30T00:39:09.395Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4d58a89fabaea6bd4730d"
    text: {On `parse/trace` Steeve reported an error, which I get here (Invalid type specifier), which I don't know the status of. The default `on-parse-event` func just uses the input marker in 'fetch.}
    sent: "2016-08-30T00:38:34.000Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4d53e8635a5ba6c7f18eb"
    text: {collect is interesting.. is there some documentation on it?}
    sent: "2016-08-30T00:37:18.761Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4d2f64023dec56c27fbd6"
    text: {@geekyl, worth a ticket? I just wonder if there's something deeper I'm missing, why it shouldn't work, assuming it was a design choice.}
    sent: "2016-08-30T00:27:34.871Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4d2a1ee799d3329f0766e"
    text: {:point_up: [August 29, 2016 4:36 PM](https://gitter.im/red/red?at=57c4b8e889fabaea6bd43080) Commented.}
    sent: "2016-08-30T00:26:09.329Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4cca32dcc4f3129436679"
    text: {:point_up: [August 29, 2016 8:55 PM](https://gitter.im/red/red?at=57c45aecee799d3329ef0a0b)  @greggirwin looks like it (errorneously?) tries to parse `value` as a (sub) parse rule when `thru value` fails to match?}
    sent: "2016-08-30T00:00:35.137Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4c8b72dcc4f3129435c68"
    text: {@ifgem have you got a gist of your `sub` implementation?}
    sent: "2016-08-29T23:43:51.995Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c4bad7ee799d3329f03e34"
    text: {By the way, how to get current string! match in parse/trace callback? For block! it's `first input` because `Input's series at next position to match`.}
    sent: "2016-08-29T22:44:39.133Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c4b8e889fabaea6bd43080"
    text: "@greggirwin what do you think about #2185?"
    sent: "2016-08-29T22:36:24.649Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c46d9d89fabaea6bd337d7"
    text: {@ifgem RubyQuiz looks interesting! I think it could work as a simple series of blogposts? There are lots of resources lying around. But I think the community is too small/busy now..? Either way, I can help find questions}
    sent: "2016-08-29T17:15:09.379Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c45d54ee799d3329ef1302"
    text: "@greggirwin thank you:)."
    sent: "2016-08-29T16:05:40.156Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c45d169bac5667636eb3e4"
    text: {You could also `reduce/compose` things in your cases block.}
    sent: "2016-08-29T16:04:38.810Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c45cf189fabaea6bd301dd"
    text: {You can. `type?` returns a datatype. `Switch` doesn't reduce the block of cases, so the first value in it is a word.^/```^/red>> switch (type?/word 10) [integer! [print "!!!"]]^/!!!^/```}
    sent: "2016-08-29T16:04:01.520Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c45c889bac5667636eb23a"
    text: {@greggirwin am I missing something terribly obvious?:))))))))^/why can't I write:^/```^/switch (type? 10) [integer! [print "!!!"]]^/```}
    sent: "2016-08-29T16:02:16.576Z"
    editedAt: "2016-08-29T16:02:29.386Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c45c162dcc4f3129420d2f"
    text: {@greggirwin ```value: 'a``` I guess we can't do it in Red parse.}
    sent: "2016-08-29T16:00:22.285Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c45aecee799d3329ef0a0b"
    text: {Am I missing something terribly obvious?^/```^/red>> input: [a b c a b c a b c]^/== [a b c a b c a b c]^/red>> value: 'a^/== a^/red>> parse input [any [thru value] to end]^/*** Script Error: PARSE - invalid rule or usage of rule: a^/*** Where: parse^/red>> parse input [any [thru 'a] to end]^/== true^/```^/With `parse-trace` I can see it getting a `not-match` after it gets a `match` on the first 'a in `input`.  Using the literal `'a` that doesn't happen. The word `value` isn't special either. Happens with any word. Works in R2 as well.}
    sent: "2016-08-29T15:55:24.020Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c456b1ee799d3329eefd12"
    text: {Except space in base-64 should be ignored.  It's correct that it's malformed in the first case, but I would say the second case is also malformed, just not caught by the lexer.}
    sent: "2016-08-29T15:37:21.044Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c4474f9bac5667636e6933"
    text: {Trailing space is binary literals.  Note different response.  I guess that the first response is correct, because I need 4 base-64 digits to get 24 (3 x 8) bits.^/```^/red>> 64#{aaa}^/*** Syntax Error: invalid binary! at "64#{aaa}"^/*** Where: do^/red>> 64#{aaa }   ;space^/== #{}^/```}
    sent: "2016-08-29T14:31:43.136Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57c446dd9bac5667636e680d"
    text: ""
    sent: "2016-08-29T14:29:49.126Z"
    editedAt: "2016-08-29T14:30:06.743Z"
    v: 2
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57c3f1302a7bd0e9205b2ef2"
    text: "I love RubyQuiz"
    sent: "2016-08-29T08:24:16.127Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c3f11d42e3827921823d6d"
    text: "I think we need something like RubyQuiz either."
    sent: "2016-08-29T08:23:57.191Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c3ad95e353af447b397d49"
    text: {Yes, we need contributors to add Red scripts to Rosetta, that would be helpful both for learning and spreading Red.}
    sent: "2016-08-29T03:35:49.441Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c39de52a7bd0e9205a700c"
    text: {"''}
    sent: "2016-08-29T02:28:53.849Z"
    v: 1
    author: "57c1f4f440f3a6eec061a758"
) #(
    id: "57c36d348147d91e790a5001"
    text: {@geekyI notes there is no Rosetta code page for Red}
    status: true
    sent: "2016-08-28T23:01:08.238Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c2ff455b11de77215af4ee"
    text: "My first contribution to Red:))."
    sent: "2016-08-28T15:12:05.844Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2f5a05b11de77215adf80"
    text: {:^^) Dialect design is hard. Good to experiment. I have some `format/printf` stuff in the works (for a long time) but haven't come up with a combination of elements I'm happy with yet.}
    sent: "2016-08-28T14:30:56.140Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c2f54542e38279218006f8"
    text: {At least I don't have to repeat myself over and over again}
    sent: "2016-08-28T14:29:25.967Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2f5242a7bd0e92058f8a6"
    text: "Yes it's pretty useful."
    sent: "2016-08-28T14:28:52.915Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2f47de353af447b37ec8a"
    text: {Hmmm, Rebol's `parse` did that in a limited way, but I didn't think Red was going to. Or are you saying you built them in to your `sub`func?}
    sent: "2016-08-28T14:26:05.362Z"
    editedAt: "2016-08-28T14:28:39.853Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c2f2e4e353af447b37e940"
    text: "integer, email... matchers are builtin:)."
    sent: "2016-08-28T14:19:16.906Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2f1d5e353af447b37e71c"
    text: {@greggirwin the idea:^/```^/monkey: matcher ["monkey"] [make object! [hp: 100 name: "John"]]^/sub "I want to eat monkey" [set obj monkey] [either hp > 100 [obj/name " but it's impossible"] [obj/name " and I will"]]^/```}
    sent: "2016-08-28T14:14:45.005Z"
    editedAt: "2016-08-28T14:15:31.126Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2ef9842e38279217ffbaa"
    text: {:point_up: [August 28, 2016 12:52 AM](https://gitter.im/red/red?at=57c28a375b11de77215a17da) @ifgem, nice to you experimenting with examples. Is your `{ }` notation to demarcate targets in strings, since parse doesn't support lexing by type there? If so, that won't work unless you can always control your input.}
    sent: "2016-08-28T14:05:12.107Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c2c7158877dae620a1cb1b"
    text: {That could be possible, but the use-case for that seems pretty rare, no? In that above demo, I wanted a pure VID version (for the sake of the demo), otherwise I would have populated it using an external loop.}
    sent: "2016-08-28T11:12:21.435Z"
    editedAt: "2016-08-28T11:14:03.206Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2c56c8877dae620a1c816"
    text: {what do you think about adding 'number' to VID^/```^/style ball: base 30x30 transparent draw [fill-pen blue circle 15x15 14]^/    ball ball ball ball ball ball ball ball ball ball ball ball ball ball ball ball return^/    ball ball ball ball ball ball ball ball ball ball ball ball ball ball ball ball return^/```^/ can be rewritten:^/```^/2x16 ball^/; or^/16 ball return^/16 ball return^/```}
    sent: "2016-08-28T11:05:16.029Z"
    editedAt: "2016-08-28T11:05:30.298Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2c1f02a7bd0e920588ae4"
    text: {@ifgem Before `===end-group===`, it is not required, as there's an indentation gap already, providing a visual separation.}
    sent: "2016-08-28T10:50:24.809Z"
    editedAt: "2016-08-28T10:50:32.192Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2bd24d872312a1e845def"
    text: "@dockimbel extra blank lines aren't correct?"
    sent: "2016-08-28T10:29:56.476Z"
    editedAt: "2016-08-28T10:30:11.422Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2bb325b11de77215a701e"
    text: {@ifgem Yes, minor formatting issues, extra blank lines and missing indentations.}
    sent: "2016-08-28T10:21:38.156Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2b892d872312a1e845619"
    text: {Yes it's my fault:)) but https://github.com/red/red/blob/master/tests/source/runtime/unicode-test.red.^/Lines:^/16-58.^/60, 128, 150, 125.}
    sent: "2016-08-28T10:10:26.399Z"
    editedAt: "2016-08-28T10:11:52.365Z"
    v: 4
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2b817e353af447b377327"
    text: {Red sources are using TABs of size 4, as indicated in the header. If your code editor is not properly set for Red, you'll get unaligned code.}
    sent: "2016-08-28T10:08:23.087Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2b7cd2a7bd0e920587755"
    text: "@ifgem It's formatted properly here^/"
    sent: "2016-08-28T10:07:09.684Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2b7c78877dae620a1adbd"
    text: {[![blob](https://files.gitter.im/red/red/4uzU/thumb/blob.png)](https://files.gitter.im/red/red/4uzU/blob)}
    sent: "2016-08-28T10:07:03.319Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2b73c2a7bd0e9205876ab"
    text: {It's not beautiful at all and it can be easily improved, I think.}
    sent: "2016-08-28T10:04:44.125Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2b6d12a7bd0e9205875d7"
    text: {```^/^-^-str  [series!]^/^-^-cp^- [integer!]^/^-^-unit [integer!]^/^-^-p^- [byte-ptr!]^/^-^-tail [byte-ptr!]^/^-^-cur^- [byte-ptr!]^/^-^-s0^- [byte-ptr!]^/```^/}
    sent: "2016-08-28T10:02:57.893Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2b506f6fe00361e079000"
    text: {https://github.com/red/red/blob/master/tests/source/runtime/unicode-test.red not ugly but uncommon:)}
    sent: "2016-08-28T09:55:18.206Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2b4c3d872312a1e844ecc"
    text: {@dockimbel not everything but some parts of codebase can be formatted nicely(for example tests, some function definitions) by gofmt like tools.}
    sent: "2016-08-28T09:54:11.794Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2b49e3cdeb6467b7897bd"
    text: {@ifgem Can you show me an example of what you consider "ugly" in the Red source code. I know a few places where the formatting could be improved, though I'm curious if that matches your findings. ;-)}
    sent: "2016-08-28T09:53:34.368Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2b4018877dae620a1a64a"
    text: {@ifgem Red and Rebol are data formats (unlike Go and most other languages), you cannot statically decide what is code and what is data, so you cannot write a tool like gofmt that will work reliably. Being free-form is an important feature of the language, because of dialects and instrinsic meta-programming abilities. We can define common coding style rules, though, we cannot enforce them.}
    sent: "2016-08-28T09:50:57.530Z"
    editedAt: "2016-08-28T09:52:00.698Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2b377f6fe00361e078bca"
    text: {By the way, I wrote simple tool for my purpose, that checks if header is correct or not(formatted, includes only set-word! value pairs). }
    sent: "2016-08-28T09:48:39.984Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2b2a85b11de77215a6108"
    text: {I think we should write something like gofmt because there're a lot of places in Red source where code's formatted ugly(?).}
    sent: "2016-08-28T09:45:12.221Z"
    editedAt: "2016-08-28T09:48:00.939Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
)#(
    id: "57c2b2392a7bd0e920586cf2"
    text: {As you prefer. I tend to put the `|` in front, so it's easier to see where alternative rules begin.}
    sent: "2016-08-28T09:43:21.932Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2b1e7d872312a1e844818"
    text: {f.e^/```^/parse example [^/^-  "hello"^/^-| "100"^/^-| "200"^/^-| "300"^/]^/```^/; or^/```^/parse example [^/^-"hello" |^/^-"100"   |^/    "300"^/]^/```}
    sent: "2016-08-28T09:41:59.217Z"
    editedAt: "2016-08-28T09:43:06.190Z"
    v: 6
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2b13a42e38279217f72ef"
    text: "common, readable"
    sent: "2016-08-28T09:39:06.624Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2b0e9e353af447b376598"
    text: {@ifgem What do you mean by "properly"? Red/Rebol, are free-form (because they are data format), you can format Red sources as you wish. Some guiding rules for a common ground are provided [there](http://doc.red-lang.org/style-guide.html). For dialects, you can apply the same rules, though, they shouldn't be taken too strictly.}
    sent: "2016-08-28T09:37:45.668Z"
    editedAt: "2016-08-28T09:41:53.818Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2b05cf6fe00361e078553"
    text: {By the way, do we have the guide that can tell me how to format parse rule properly?}
    sent: "2016-08-28T09:35:24.875Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2ad4cd872312a1e844039"
    text: "I'll be happy to help you as much as I can:)"
    sent: "2016-08-28T09:22:20.522Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2ad0e5b11de77215a5728"
    text: {@ifgem You can submit pull requests to fix simple typos or bugs like that, I'll be happy to accept them.}
    sent: "2016-08-28T09:21:18.563Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c2acbc2a7bd0e920586248"
    text: {@dockimbel https://github.com/red/red/blob/master/environment/console/gui-console.red wrong Version in header.}
    sent: "2016-08-28T09:19:56.408Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2aa0b5b11de77215a5119"
    text: {@ifgem Thanks for the bug reports, I'm looking into them.}
    sent: "2016-08-28T09:08:27.995Z"
    editedAt: "2016-08-28T09:08:41.306Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57c28a375b11de77215a17da"
    text: {```^/sub "102030" "20" "!!" => "102030"^/sub "102030"  "20" ["$" _1] => "10$2030"^/sub "abcabc" charset "abc" ["\" _1] => "\a\b\c\a\b\c"^/; rule^/; 1: ability to set type in rule.^/sub "1{1}3" ["{" copy i integer!  "}"] [(here i is word that value is integer so) i: i + 1] => "123"^/; /part: change only set words^/sub/part "1{1}3" ["{" copy i integer! "}"] [i: i + 1] => "1{2}3"^/sub/part ...^/```^/}
    sent: "2016-08-28T06:52:39.958Z"
    editedAt: "2016-08-28T06:53:24.642Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c23ef32a7bd0e920579915"
    text: {My mezz dumping ground is https://gist.github.com/greggirwin/d0412f0c3d8e1ce4dfe26afc643742f1}
    sent: "2016-08-28T01:31:31.739Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c21e7b5b11de772159565b"
    text: {Sorry for the spam, better move this to red/code ?}
    sent: "2016-08-27T23:12:59.845Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c21dea8877dae620a09cb0"
    text: {@greggirwin https://gist.github.com/greggirwin/53ce7d1228422076e142fa5a061e7649 I was just about to write my own `arity-of`!}
    sent: "2016-08-27T23:10:34.476Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c21da53cdeb6467b778bbf"
    text: {:point_up: [August 28, 2016 2:51 AM](https://gitter.im/red/red?at=57c20b47e353af447b36266b) let me know when you have the gist. It's a bit hard to search for Red related code right now (Or I'm ignorant about the ways)}
    sent: "2016-08-27T23:09:25.519Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c21987d872312a1e831db9"
    text: {@greggirwin ^/```^/substitute "10+20 30*40" [set first number "+" set second number] [inc first  inc second] ;=> "11+21 30*20"^/substitute "password=wow password=man" ["password=" set p word] [p: "[***]"] => "password=[***] password=[***]"^/```}
    sent: "2016-08-27T22:51:51.250Z"
    editedAt: "2016-08-27T22:55:08.797Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c2114a8877dae620a08086"
    text: "`Substitute` seems like a good starting name."
    sent: "2016-08-27T22:16:42.731Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c21123e353af447b36347b"
    text: {Except that "sub" could also mean *subtract*}
    sent: "2016-08-27T22:16:03.799Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c211042a7bd0e920573de5"
    text: "@ifgem substitute ?"
    sent: "2016-08-27T22:15:32.500Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c210b45b11de772159336d"
    text: "sub is a good name, I guess:))"
    sent: "2016-08-27T22:14:12.166Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c20fc58877dae620a07c60"
    text: {It's a great thing to mock up. A refinement might allow it to be added to `replace`, or a new func could be added.}
    sent: "2016-08-27T22:10:13.668Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c20f1d5b11de7721592fd7"
    text: {Things to consider:^/- Compatibility with Rebol. `Replace` is used a lot.^/- How to say a pattern isn't a value to match^/- Dealing with string and block series types}
    sent: "2016-08-27T22:07:25.494Z"
    editedAt: "2016-08-27T22:08:47.794Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c20ef1f6fe00361e065ba9"
    text: {What do you think? May be there's a better way to archive it?}
    sent: "2016-08-27T22:06:41.509Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c20e1d42e38279217e486e"
    text: {And use the matched pattern in the replacement. Got it.}
    sent: "2016-08-27T22:03:09.681Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c20dcf3cdeb6467b776a11"
    text: {@greggirwin ^/because I can't replace more than one value at once(pattern?)^/```^/special: charset "abc"^/;I'd like to^/replace "abcabc" special ["\" special] => "\a\b\c\a\b\c"^/replace  "street 10" number [++ to integer! number] => "street 11"^/```}
    sent: "2016-08-27T22:01:51.357Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c20cd642e38279217e4526"
    text: {A lot of things are different than I'm used to.. I need to try out `collect`and `keep`. Might find them more useful when I'm more familiar}
    sent: "2016-08-27T21:57:42.391Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c20c595b11de77215929ff"
    text: "What don't you like about it?"
    sent: "2016-08-27T21:55:37.356Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c20c39e353af447b3628c2"
    text: {I imagine Nenad has plans for a better `replace`, since he renamed the param to `pattern`. `Replace` is easy if you think about replacing values, rather than patterns. }
    sent: "2016-08-27T21:55:05.331Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c20baa42e38279217e4283"
    text: {Redbol has a more approachable spin on them. e.g., `remove-each`, `collect`. You don't have to be hard-core functional. But I agree that they should be there. And there are a lot of ways we could do it, which will make it tough. }
    sent: "2016-08-27T21:52:42.535Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c20b47e353af447b36266b"
    text: {For general mezzanines, I have them grouped by category, for lack of a better term: general, math, series, HOF, funcs, control, etc. And am just building my big gist of them for playing right now. Have to see how modules will work in Red. In past R2 projects I tend to build up a company specific mezz file (very general), then system specific mezz files which lots of things in the system can use.}
    sent: "2016-08-27T21:51:03.633Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c20a9f5b11de77215924d9"
    text: {I thought you couldn't do functional tricks at first when I saw rebol}
    sent: "2016-08-27T21:48:15.257Z"
    editedAt: "2016-08-27T21:48:27.509Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c20a853cdeb6467b7761a9"
    text: {It doesn't really mind me the core language doesn't have those right now, when I now see how easy it is to add them}
    sent: "2016-08-27T21:47:49.145Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c20a593cdeb6467b776167"
    text: {I'll have to look at `gsub`. I do have an old R2 func that's like `succ` which I like a lot.}
    sent: "2016-08-27T21:47:05.365Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c20a333cdeb6467b77612d"
    text: {@greggirwin I like those snippets of HOFS, any suggestions of how you organize your code and work with them?}
    sent: "2016-08-27T21:46:27.775Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c20a2d42e38279217e3e60"
    text: "What do you think?"
    sent: "2016-08-27T21:46:21.377Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c20a275b11de7721592420"
    text: {I hate current version of replace: it's not beautiful and useful at all. I'd  like to have something like Ruby's gsub! (especially it's elegant work with block).}
    sent: "2016-08-27T21:46:15.135Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c20a0d5b11de77215923f6"
    text: {It's interesting to me how many languages have them, so these are more of a "how to" for people, rather than a REP.}
    sent: "2016-08-27T21:45:49.699Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c209bf8877dae620a06cfa"
    text: "Ah, I see."
    sent: "2016-08-27T21:44:31.239Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57c209a92a7bd0e920572d33"
    text: {We have `remove-each`, and `take-each` would be easy. I have a number of HOFs, with various ideas and approaches. Still waiting for Nenad to post his thoughts on how he wants to do them in Red.}
    sent: "2016-08-27T21:44:09.182Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c209453cdeb6467b775f5e"
    text: {@endo, as geekyl points out, they don't take all, only until a value fails the test.}
    sent: "2016-08-27T21:42:29.597Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c2093e5b11de7721592220"
    text: {But that's not a good excuse. Consider, `remove-while` vs `remove-all`, can they be so easily swapped?}
    sent: "2016-08-27T21:42:22.480Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c2087a42e38279217e3b24"
    text: {@endo64 It's the way written in functional languages like haskell}
    sent: "2016-08-27T21:39:06.419Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c20809d872312a1e82f32f"
    text: {@greggirwin About your *-while functions, wouldn't be better name *-all? find-all, remove-all, take-all? They are short for take-all-that-satify-the-condition.}
    sent: "2016-08-27T21:37:13.208Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57c1d8272a7bd0e92056b1e6"
    text: {Sure. Nenad may have suggestions as well. He wants to keep tests as lean as possible right now, but these are all separate type/crashing cases.}
    sent: "2016-08-27T18:12:55.287Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c1d68e5b11de7721589fcc"
    text: {@greggirwin should test for #2173 look like this?:^/```^/^---test-- "#2173"^/^-^---assert not parse [] [return]^/^-^---assert not parse [] ["test"]^/^-^---assert not parse [] [red]^/^-^---assert not parse [] [append]^/^-^---assert not parse [] [help]^/^-^---assert not parse [] ['symbol]^/^-^---assert not parse [] [10.0]^/^-^---assert not parse [] [10%]^/^-^---assert not parse [] [h:]^/```}
    sent: "2016-08-27T18:06:06.082Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c1d5f2e353af447b359412"
    text: {At a glance, it looks like `forall` is a special case. All other natives use a lit-word as a word to set (e.g. `repeat`).}
    sent: "2016-08-27T18:03:30.152Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c1d59e3cdeb6467b76d06d"
    text: {Thank you for answers, I'll write test for all open issues that I've written before:)) tomorrow}
    sent: "2016-08-27T18:02:06.399Z"
    editedAt: "2016-08-27T18:02:28.720Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c1d5532a7bd0e92056abc4"
    text: {It couldn't hurt to mention the issue in the test case.}
    sent: "2016-08-27T18:00:51.578Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c1d52ae353af447b3591f1"
    text: {https://github.com/red/red/issues/2182 might be good in leading to other possible bugs. With a lit-word! arg, the standard type checking isn't enough. That sees the word is an arg, which is it, but doesn't check that is safely casts to a series.}
    sent: "2016-08-27T18:00:10.366Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c1d50b5b11de7721589bd4"
    text: "Should I mention issue in test name?"
    sent: "2016-08-27T17:59:39.594Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c1d4a52a7bd0e92056aa66"
    text: {I think so. If we find a bug, and write a test for it, that catches regressions.}
    sent: "2016-08-27T17:57:57.980Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57c1d4713cdeb6467b76cdba"
    text: {@greggirwin so after writing issue I should write something like this?^/```^/^---test-- "blk-ext55"^/^-^---assert parse ["hello"] ["hello" set test opt "world"]^/^-^---assert test = none^/^/^---test-- "blk-ext56"^/^-^---assert parse ["hello"] ["hello" set test any "world"]^/^-^---assert test = none^/```}
    sent: "2016-08-27T17:57:05.303Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c1d3a342e38279217db48d"
    text: "@greggirwin about your last comment:^/it's odd:))"
    sent: "2016-08-27T17:53:39.607Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c1d2028877dae6209fe30c"
    text: {And each one of these cases needs to make it into the test suite.}
    sent: "2016-08-27T17:46:42.139Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c1d0f43cdeb6467b76c677"
    text: {Being new to a lang helps with that, because you try things old-timers won't. For example, I've never used a paren+lit-word  in path access that I recall.}
    sent: "2016-08-27T17:42:12.469Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c1d01f3cdeb6467b76c4fb"
    text: {You have the magic touch. Keep reporting them, :^^)}
    sent: "2016-08-27T17:38:39.804Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c1cfcd42e38279217dac1f"
    text: {@greggirwin started writing an app in Red - found 4 bugs:))).}
    sent: "2016-08-27T17:37:17.029Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c1cea8f6fe00361e05b9c0"
    text: {We probably don't want that to work. With some current chat on security, the escape char is something that needs clear docs, and care, so it can't be exploited.}
    sent: "2016-08-27T17:32:24.782Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c1b555d872312a1e8217e5"
    text: {Not a bug, but a little difference between Red and Rebol2,3 that should be mentioned.^/`^^: 10` works fine in Rebol, but doesn't work in Red.}
    sent: "2016-08-27T15:44:21.925Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c17a11e353af447b34b579"
    text: {On commit red/red@657f571110268068c70680b713bca3a1afe46898, @dockimbel might have made a mistake}
    sent: "2016-08-27T11:31:29.663Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c179cce353af447b34b062"
    text: "Dunno:)"
    sent: "2016-08-27T11:30:20.059Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c179a2f6fe00361e04f36e"
    text: "Is that on purpose?"
    sent: "2016-08-27T11:29:38.454Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c179972a7bd0e92055c70f"
    text: "`fRed` :laughing: "
    sent: "2016-08-27T11:29:27.171Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c179462a7bd0e92055c67d"
    text: "Want to write some tests for Parse:))."
    sent: "2016-08-27T11:28:06.004Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c178ef42e38279217cdb84"
    text: {Incorrect Red header:).^/https://github.com/red/red/blob/master/tests/source/units/parse-test.red^/}
    sent: "2016-08-27T11:26:39.629Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c1671a42e38279217cbaf1"
    text: {Looking into Trello (and Github), it seems OS-X backend is making some nice progress. It almost seems, that it will come before Android and maybe even Libred release?}
    sent: "2016-08-27T10:10:34.824Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57c075d2f6fe00361e025f0e"
    text: {Using Red as a language construction kit is great fun, and extends all the way down to tiny dialects and special cases in Red itself.}
    sent: "2016-08-26T17:01:06.343Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c075953cdeb6467b7365ca"
    text: {I also run the risk of going too far at times. When I see multiple functions that are almost identical, including interfaces, but have different doc strings and bodies, I think about turning to function generators (with some pending examples on that as well). }
    sent: "2016-08-26T17:00:05.018Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c0755de353af447b323724"
    text: {There are other ways this could be done, and we could even make a generalized wrapper for other funcs that can use `/part` effectively. The ultimate question isn't how concise we can make them, but how useful we can make them in clearly expressing intent, and also what patterns we find to help keep Red consistent.}
    sent: "2016-08-26T16:59:09.878Z"
    editedAt: "2016-08-26T17:00:19.053Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c0751be353af447b32368a"
    text: {Here are the current versions.^/^/```^/find-while: function [^/^-"Find leading items that match test; return last found index; zero if no matches."^/^-series^-[series!] "(modified)"^/^-test^-[any-function!] "Test (predicate) to perform on each value; must take one arg"^/][^/^-n: 0^/^-repeat i length? series [^/^-^-either test pick series i [n: n + 1][break]^/^-]^/^-n^/]^/^/remove-while: function [^/^-"Removes items from series head that match test, until one fails; returns series"^/^-series^-[series!] "(modified)"^/^-test^-[any-function!] "Test (predicate) to perform on each value; must take one arg"^/][^/^-remove/part series find-while series :test^/]^/^/take-while: function [^/^-"Takes and returns items from series head that match test, until one fails"^/^-series^-[series!] "(modified)"^/^-test^-[any-function!] "Test (predicate) to perform on each value; must take one arg"^/][^/^-take/part series find-while series :test^/]^/^/e.g. [^/^-b: [1 2 3 4 5 6]^/^-find-while b func [v][v <= 3]^/^-?? b^/^-b: [1 2 3 4 5 6]^/^-remove-while b func [v][v <= 3]^/^-?? b^/^-b: [1 2 3 4 5 6]^/^-take-while b func [v][v <= 3]^/^-?? b^/]^/```}
    sent: "2016-08-26T16:58:03.033Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c074be3cdeb6467b736300"
    text: {While I rail against premature optimization, I didn't like that we were dealing with one item at a time in the modifiers when that was so easy to avoid. So I went back to the imperative approach, but realized the bodies matched, except for the final call (`take` or `remove`), so I broke that out into `find-while`, which could be used in many ways, because of how series indexing works.}
    sent: "2016-08-26T16:56:30.347Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c074578877dae6209ca421"
    text: {My first approach was to count items, then call `take/remove` on the series, with `/part` and the count. Imperative, easy, and struck me that it really should be a more functional approach. Functional (non-recursive) versions ended up with bodies like this:^/`remove-each`^/```^/while [all [not empty? series  test pick series 1]][remove series]^/```^/`take-each`^/```^/collect [^/    while [all [not empty? series  test pick series 1]][keep take series]^/]^/```}
    sent: "2016-08-26T16:54:47.373Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c0741ad872312a1e7efea2"
    text: {Naming: `take-while` is fine, but we don't have `drop`, so I call that `remove-while`.}
    sent: "2016-08-26T16:53:46.054Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c073ff42e38279217a6521"
    text: {A number of languages have take-while/drop-while functions. It surprised me how prevalent they are, since I've only ever needed that functionality a small number of times. Not even enough to write mezzanines for it. But I'm a single case, not a clinical study. Needing a short break, I decided to build them in Red.^/}
    sent: "2016-08-26T16:53:19.853Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bf1f337b5e70a24621a303"
    text: "My!, another miss from my part. Thanks Gregg"
    sent: "2016-08-25T16:39:15.394Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57bf1f29f066bd731b4a35dc"
    text: {I'll have to check that out @rgchris. I did an LCS/diff func many years ago. One of the few things that wasn't fast enough in Rebol for me.}
    sent: "2016-08-25T16:39:05.430Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bf1ed5f066bd731b4a348e"
    text: {I think this is a more recent change, and maybe not doc'd anywhere yet.}
    sent: "2016-08-25T16:37:41.100Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bf1ea7cc94ce8b566323e4"
    text: {It won't leak from the func, but it will leak from the loop.^/```^/red>> fn: function [] [foreach val [1 2 3][] val]^/== func [/local val][foreach val [1 2 3] [] val]^/red>> fn^/== 3^/red>> val^/*** Script Error: val has no value^/*** Where: catch^/```}
    sent: "2016-08-25T16:36:55.127Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bf1e33cb5854e5458241eb"
    text: {NO, only set-words are "captured"}
    sent: "2016-08-25T16:34:59.341Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57bf1dedc976227a1c4feeb1"
    text: {If you use `function` rather than `func`, Red should capture the `foreach` word in funcs, even without Steeve's trick.}
    sent: "2016-08-25T16:33:49.428Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bf13a55bdd197c1cbe5f92"
    text: {Or use [this tweaked version](http://reb4.me/x/simplediff.r).}
    sent: "2016-08-25T15:49:57.415Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57bf0f81cc94ce8b5662df12"
    text: {```lisp^/assert: func [cond /local res][either res: do cond [res][make error! "Make Error! won't get this far yet"]]^/```^/(should be enough to get it working)}
    sent: "2016-08-25T15:32:17.716Z"
    editedAt: "2016-08-25T15:32:55.366Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57bf0ef01237f2f2446144de"
    text: {Updated [SimpleDiff](http://reb4.me/r/simplediff) to work in Red (works also in Rebol 2 and 3). It needs a custom ASSERT function, and the dates in the header prevent it being DOne directly, but otherwise works.}
    sent: "2016-08-25T15:29:52.293Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57bf0e7acc94ce8b5662dac5"
    text: "Chokes in Rebol 2."
    sent: "2016-08-25T15:27:54.962Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57bf0c397b5e70a24621a1e8"
    text: {I use the syntax `foreach [var:] [...]` to have `var` automaticly set as local inside a `function`definition.}
    sent: "2016-08-25T15:18:17.108Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57bf0b63757a871757b43ec2"
    text: "true"
    sent: "2016-08-25T15:14:43.449Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57bf0aa4f066bd731b49e132"
    text: {Should perhaps mention the loops by name on [this page](https://github.com/red/red/wiki/Differences-between-Red-and-Rebol) so that they're searchable.}
    sent: "2016-08-25T15:11:32.486Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57bf09c11237f2f244612e72"
    text: "Cool, good to know."
    sent: "2016-08-25T15:07:45.175Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57bf0996f066bd731b49dc2d"
    text: {Not sure if indefinitely, there may be some way to have the word local and not slown down Red.}
    sent: "2016-08-25T15:07:02.311Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57bf0964c976227a1c4f9418"
    text: "So currently and indefinitely?"
    sent: "2016-08-25T15:06:12.573Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57bf093fce157d1b57a468dc"
    text: {Doc said that keeping it local would slow down Red considerably}
    sent: "2016-08-25T15:05:35.061Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57bf08f35bdd197c1cbe2efb"
    text: "yes, that’s intentional currently"
    sent: "2016-08-25T15:04:19.012Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57bf08a0757a871757b43238"
    text: {Is it intentional that the WORD argument of FOREACH is set outwith the loop?^/^/```lisp^/red>> foreach value [foo bar][]^/red>> value^/== bar^/```}
    sent: "2016-08-25T15:02:56.635Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57be38bc757a871757b176e7"
    text: {@greggirwin Thanks. That's good to know. I'll pursue that.}
    sent: "2016-08-25T00:15:56.906Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57be17e75bdd197c1cbb125a"
    text: {My build from the latest source works with that.^/```^/red>> (to float! 3797883801) * 9 * 13 * 10000^/== 4443524047170000.0^/```}
    sent: "2016-08-24T21:55:51.960Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bde17f757a871757b02106"
    text: {I tried truncating back to `3797883801` and casting to `float!`:^/```^/red>> (to float! 3797883801) * 9 * 13 * 10000^/*** Syntax Error: missing #")" at "to float!"^/*** Where: do^/```}
    sent: "2016-08-24T18:03:43.886Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57bde0dace157d1b57a05a82"
    text: {I think this relates to red/red#2009.^/^/```^/red>> 3797883801856 * 9 * 13 * 10000^/*** Syntax Error: invalid value at "3797883801"^/*** Where: do^/```}
    sent: "2016-08-24T18:00:58.601Z"
    editedAt: "2016-08-24T18:05:20.321Z"
    v: 2
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57bdd0a6c976227a1c4b207b"
    text: {Happy to help. ;^^) Sometimes you just have to tell someone.}
    sent: "2016-08-24T16:51:50.338Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bdc596757a871757af9e6c"
    text: "Thank you, guys :)"
    sent: "2016-08-24T16:04:38.182Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57bdc5885bdd197c1cb9a06a"
    text: "I got it:))))) paren! is a word so..."
    sent: "2016-08-24T16:04:24.720Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57bdc50861f3fa59598944de"
    text: {This is the first time I tried heavy magic in Red. Don't know why fn becomes paren!.^/```^/when: func [e] [compose [_p: (e) :_p]]^/expr: [fun | skip]^/^/take-move: func [pattern /local result] [^/^-result: copy []^/^-parse end [set result pattern end:]^/^-return result^/]^/^/fun: [^/^-begin: set fn word! end: (^/^-^-fn: get in system/words :fn^/^-^-if function? :fn [^/^-^-^-probe :fn ; => func [e][compose [_p: (e) :_p]]^/^-^-^-args: copy []^/^-^-^-parse spec-of :fn [^/^-^-^-^-word! (append args take-move expr)^/^-^-^-]^/^-^-^-probe args ;=> [paren!] ^/^-^-^-probe :fn ;=> paren!^/^-^-^-change/part begin (fn args) next end^/^-^-]^/^-) :end^/]^/test: [parse [when paren!] expr]^/```}
    sent: "2016-08-24T16:02:16.884Z"
    editedAt: "2016-08-24T16:02:42.459Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
)#(
    id: "57bc949b87f779f069200c40"
    text: "@greggirwin - thanks re make error!"
    sent: "2016-08-23T18:23:23.139Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57bc8ff1bb6fad403cfc2ff2"
    text: {@SteeveGit, interesting. Something must have changed because that used to work AFAIK. I don't remember seeing the spec inline either though.}
    sent: "2016-08-23T18:03:29.695Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bc8f50bb6fad403cfc2c85"
    text: {:point_up: [August 23, 2016 6:14 AM](https://gitter.im/red/red?at=57bc3e176981f5f2690f5f86) @cybermav_twitter, could you be more specific? Red doesn't have a crypt port, yet, like Rebol, but you can write whatever funcs you want. }
    sent: "2016-08-23T18:00:48.430Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bc8eac187885ef4f6fbf7b"
    text: "I just looked at what `cause-error` does."
    sent: "2016-08-23T17:58:04.271Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bc8e915ffbca3e3c077024"
    text: {:point_up: [August 23, 2016 2:38 AM](https://gitter.im/red/red?at=57bc0b8c6981f5f2690e8c30) @mikeparr ^/```^/red>> make error! [type: 'script id: 'no-value arg1: 'x]^/*** Script Error: x has no value^/*** Where: ???^/```}
    sent: "2016-08-23T17:57:37.529Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bc8a8ebb6fad403cfc13b7"
    text: {On percent! behavior: https://github.com/red/red/issues/2164}
    sent: "2016-08-23T17:40:30.293Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bc4abd5ebf2a3a60aee0b7"
    text: "Seems the interpreter does not like it."
    sent: "2016-08-23T13:08:13.426Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57bc4a6398125cfb657c06dc"
    text: {**Trying  to use parse/trace with a  custom  callback function.** ^/`parse-trace` is Ok, wich is a compiled version of `parse/trace serie rule :on-parse-event`.     ^/But trying to mimic parse-trace in interpreted mode will emit a strange Error.^/```lisp^/*** Script Error: invalid type specifier: [event [word!] match? [logic!] rule [block!] input [series!] stack [block!] return: [logic!]]^/*** Where: parse^/```^/Then, looking at the definition of the routine **parse**, I got:^/```lisp^/parse: make native! [[^/^-^-input [series!]^/^-^-rules [block!]^/^-^-/case^/^-^-;/strict^/^-^-/part^/^-^-^-length [number! series!]^/^-^-/trace^/^-^-^-callback [function! [^/^-^-^-^-event^-[word!]^/^-^-^-^-match?^-[logic!]^/^-^-^-^-rule^-[block!]^/^-^-^-^-input^-[series!]^/^-^-^-^-stack^-[block!]^/^-^-^-^-return: [logic!]^/^-^-^-]]^/^-^-return: [logic! block!]^/^-]^/^-#get-definition NAT_PARSE^/]^/```^/See? The callback definition? Rather strange right? Never saw sub specs definition inside specs  before that}
    sent: "2016-08-23T13:06:43.196Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57bc3e176981f5f2690f5f86"
    text: {How to implement  encrypt and decrypt routine in red?}
    sent: "2016-08-23T12:14:15.803Z"
    v: 1
    author: "57bc3ce540f3a6eec060e48e"
) #(
    id: "57bc27c5187885ef4f6dfe3c"
    text: {@maximvl That was not meant to be read as Red code, but mathematical expression.^/[Percent is just n / 100](https://en.wikipedia.org/wiki/Percentage)}
    sent: "2016-08-23T10:39:01.652Z"
    editedAt: "2016-08-23T10:39:11.226Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc181fed79c5ee4f2c1db0"
    text: "@geekyI yep"
    sent: "2016-08-23T09:32:15.515Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc155f87f779f0691dd821"
    text: {I haven't found a function to convert from ```percentage!``` to  ```float!```. But I created one based on operands positions:^/```^/percent-to-float: func [value [percent!]][0 + value]^/```}
    sent: "2016-08-23T09:20:31.706Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57bc13236981f5f2690eaa9f"
    text: {@maximvl  are you familiar with the precedence rules (or lack thereof) in Red?}
    sent: "2016-08-23T09:10:59.503Z"
    editedAt: "2016-08-23T09:12:35.686Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57bc12fdcd00bdff6e70f083"
    text: {```^/red>> 3 / 100.0 + 10^/== 10.03^/red>> 1003 / 100.0^/== 10.03^/red>> 1003% = 10.03^/== true^/```}
    sent: "2016-08-23T09:10:21.945Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57bc12a9b64a3a016f5c03e5"
    text: ""
    sent: "2016-08-23T09:08:57.696Z"
    editedAt: "2016-08-23T09:09:18.409Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57bc11ba5ffbca3e3c055335"
    text: "@DideC ^^?"
    sent: "2016-08-23T09:04:58.471Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc11ae5ffbca3e3c055306"
    text: {how did you get `1003 / 100` from `3 / 100 + 10` ?}
    sent: "2016-08-23T09:04:46.984Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc11976981f5f2690ea40a"
    text: "I didn't get it"
    sent: "2016-08-23T09:04:23.373Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc1194187885ef4f6da679"
    text: {> no, because  `3% + 10` means `3 / 100 + 10 = 10.03` or `1003 / 100` or `1003%`}
    sent: "2016-08-23T09:04:20.153Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc106fbb6fad403cf9f7d3"
    text: {My personal opinion is `%` in the meaning of e.g. `10% = 0.01` is not so useful (can simply write `0.01`, takes just 1 character more). I believe it should be eliminated}
    sent: "2016-08-23T08:59:27.314Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57bc0b8c6981f5f2690e8c30"
    text: {Q about `make error!` with an error argument.  For example, the `script no-value` error has 1 argument.  I have:^/   ```  make error! [script no-value ['some-name]]```^/and I get:^/   ``` *** Script Error: none has no value```^/Any suggestions please?^/^/}
    sent: "2016-08-23T08:38:36.277Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57bc0980bb6fad403cf9dd31"
    text: {I understand your expectation. Maybe it could be changed (@dockimbel ?) but I'm not sure we can have a concensus on the correct behaviour.}
    sent: "2016-08-23T08:29:52.019Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc089887f779f0691da56b"
    text: {all right, I see what you mean. I was actually expecting to have same result type (either float! or percentage!). It's a bit confusing to have two different types as result.}
    sent: "2016-08-23T08:26:00.388Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57bc08015ffbca3e3c052c2c"
    text: {If you use a calculator to compute VAT, you type: `amount * rate / 100` but when you speak, you say `rate%` and if you write in a sentence what the rate is, you write `rate%`. It is in Red what it is in general : just a visual representation of `rate / 100` !}
    sent: "2016-08-23T08:23:29.875Z"
    editedAt: "2016-08-23T08:23:42.843Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc072087f779f0691d9ef4"
    text: "what does Excel think of that ;-)"
    sent: "2016-08-23T08:19:44.177Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc0690187885ef4f6d7988"
    text: "so, 10.03 == 1003% ?"
    sent: "2016-08-23T08:17:20.906Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57bc063f5ffbca3e3c0525c8"
    text: {not what red says:^/```^/`red>> (3% + 10) <> (10 + 3%)^/== false^/```}
    sent: "2016-08-23T08:15:59.794Z"
    editedAt: "2016-08-23T08:16:08.732Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc060fed79c5ee4f2bd91a"
    text: "1 + 3 = 3 + 1 but 3% + 10 <> 10 + 3%"
    sent: "2016-08-23T08:15:11.895Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57bc05e087f779f0691d99bb"
    text: "mathematically it is, isn't it?"
    sent: "2016-08-23T08:14:24.974Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc05adcd00bdff6e70bc2c"
    text: "well, math operations are usually commutative."
    sent: "2016-08-23T08:13:33.188Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57bc0597ed79c5ee4f2bd701"
    text: "why?"
    sent: "2016-08-23T08:13:11.925Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc057db64a3a016f5bd1cd"
    text: "that explains the behavior, but it's not correct."
    sent: "2016-08-23T08:12:45.745Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57bc0508187885ef4f6d7457"
    text: {Red just cast to the first operand type when it stay logical.}
    sent: "2016-08-23T08:10:48.006Z"
    editedAt: "2016-08-23T08:11:42.114Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc04f5bb6fad403cf9cb42"
    text: {no, because  `3% + 10` means `3 / 100 + 10 = 10.03` or `1003 / 100` or `1003%`}
    sent: "2016-08-23T08:10:29.882Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc04aa5ffbca3e3c052066"
    text: {well, this is something people from Red team can answer :)}
    sent: "2016-08-23T08:09:14.379Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc047bb64a3a016f5bcd3e"
    text: {I would expect to be commutative regardless of operands type. What would be the rationale of not being commutative ?}
    sent: "2016-08-23T08:08:27.369Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57bc0471cd00bdff6e70b709"
    text: "`3% + 10` should be `10.03` then"
    sent: "2016-08-23T08:08:17.266Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc046387f779f0691d93f3"
    text: {@DideC then why keep percent type if the percent is on the left?}
    sent: "2016-08-23T08:08:03.133Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc045787f779f0691d93c2"
    text: "3% = 3 / 100 = 0.03 (no Red code here, just math)"
    sent: "2016-08-23T08:07:51.513Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc04306981f5f2690e6f0c"
    text: {Sorry, I mean that % sign is just use to represent fraction of 100.}
    sent: "2016-08-23T08:07:12.727Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc04136981f5f2690e6eb0"
    text: "@DideC when the percent is on the right side )"
    sent: "2016-08-23T08:06:43.300Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc03ebcd00bdff6e70b557"
    text: "3% = 0.03"
    sent: "2016-08-23T08:06:03.157Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bc03bc87f779f0691d91c1"
    text: {though `3%  * 50 == 150%` makes sense, `3% + 10` i would expect to be `13%`, not `1003%`}
    sent: "2016-08-23T08:05:16.549Z"
    editedAt: "2016-08-23T08:05:54.278Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc0370b64a3a016f5bc877"
    text: "I guess so"
    sent: "2016-08-23T08:04:00.588Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc036ccd00bdff6e70b391"
    text: {```^/red>> 3% * 1^/== 3%^/red>> 1 * 3%^/== 0.03^/```}
    sent: "2016-08-23T08:03:56.635Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bc013e6981f5f2690e64b7"
    text: {math operations with percentage! are not commutative:^/```^/red>> 10 + 3%^/== 10.03^/red>> 3% + 10^/== 1003%^/red>> 3% * 50^/== 150%^/red>> 50 * 3%^/== 1.5^/```^/Is this intended ?}
    sent: "2016-08-23T07:54:38.332Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57bb5d3e6981f5f2690c2d25"
    text: {Skimming Pony info, it has some things in common with other modern langs, and are common with Rebol even if not directly taken from it. But because it's super strict (no loadable code), it's quite different as well. Everything is async, so doing anything sync is a bit of work. The idea of a cooperative scheduler, using one thread per CPU core, is kind of a standard model now. Nice that actors only have a 256 byte overhead, so are very lightweight. Of course, the more you can lock things down, the more the compiler can optimize.}
    sent: "2016-08-22T20:14:54.863Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bb5c466981f5f2690c294a"
    text: {MIPS is probably a big task. Remember, Red has a custom code generator for every platform/architecture.}
    sent: "2016-08-22T20:10:46.109Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bb3a8acd00bdff6e6df6a9"
    text: {Is MIPS support planned? Would that be a big task?}
    sent: "2016-08-22T17:46:50.280Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57bb2cceb64a3a016f58c09a"
    text: {@greggirwin they claim to have superior implementation of actors compared to Erlang and Akka, which is very interesting}
    sent: "2016-08-22T16:48:14.608Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57bb26556981f5f2690b2348"
    text: {Thanks for posting that Maxim. I hadn't heard of Pony. Plenty of reading to do there.}
    sent: "2016-08-22T16:20:37.395Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bb230d6981f5f2690b14d5"
    text: {fyi: https://www.linkedin.com/pulse/end-causality-constantine-goulimis?trk=hp-feed-article-title-publish}
    sent: "2016-08-22T16:06:37.512Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bb23006981f5f2690b146c"
    text: "@dockimbel you may have heard about pony language"
    sent: "2016-08-22T16:06:24.310Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bb0ac887f779f06919e11a"
    text: {@dockimbel This ^^ gave me a reason to look at `cause-error`. I think it does not need the locals that it has...}
    sent: "2016-08-22T14:23:04.811Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57bab468b64a3a016f56df19"
    text: {```cause-error``` calls ```make error!```. (Try ```source call-error``` in a Red console.)^/^/I'm not certain whether ```cause-error``` will be visible in the global context once modules are introduced. }
    sent: "2016-08-22T08:14:32.694Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57baa4855ffbca3e3c00254b"
    text: {Usage of `cause-error` or `make error!`  -  is there a preference?  I'm guessing that `make` is the modern way.}
    sent: "2016-08-22T07:06:45.797Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57b9f4215ffbca3e3cfe3d58"
    text: {@SteeveGit, thinking about `clone`, I hadn't considered blocks of sub-objects. The `/types` option is nice, for more control, but we probably need to look at how to provide control while also making it easy for the common case. For example, maybe a dialect is the way to go, so you can specify words or types to clone or ignore, whether to deep clone them, etc.^/^/Nenad may have thoughts, and @moliad may as well. I know he's pushed objects hard under R2.}
    sent: "2016-08-21T18:34:09.182Z"
    editedAt: "2016-08-21T18:41:19.885Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57b964abbb6fad403cf158bd"
    text: {[HTML Example Element (<xmp>)](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/xmp) }
    sent: "2016-08-21T08:22:03.048Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b9397587f779f069149484"
    text: {Interesting Ashley. Also interesting that `xmp` still works in modern browsers. Old tricks die hard.}
    sent: "2016-08-21T05:17:41.352Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57b8ffbbb64a3a016f527685"
    text: {An interesting option for MD is something like http://strapdownjs.com which lets you embed MD directly into an HTML page. It's quite nice to be able to go "view source" in the browser and actually see a human readable MD document! :)}
    sent: "2016-08-21T01:11:23.931Z"
    v: 1
    author: "5580a11215522ed4b3e203d9"
) #(
    id: "57b82ff7b64a3a016f502476"
    text: {@dockimbel Do you use Prism for syntax highlighting in Gitter? If so, could you point me to the Red syntax highlighter definition?}
    sent: "2016-08-20T10:24:55.687Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "57b785e25ffbca3e3cf7f069"
    text: {@dockimbel here is a recent talk on asm.js https://www.infoq.com/presentations/webassembly?utm_source=infoq&utm_medium=videos_homepage&utm_campaign=videos_row1^/^/I know you are probably too busy to think about asm.js but I know that you mentioned it as a potential target. }
    sent: "2016-08-19T22:19:14.661Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57b717db6981f5f269ff3f41"
    text: "Fixed in next update."
    sent: "2016-08-19T14:29:47.874Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "57b717a7b64a3a016f4cae6f"
    text: "@meijeru Sorry for late reply. Agreed!"
    sent: "2016-08-19T14:28:55.737Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "57b711a05ffbca3e3cf61917"
    text: {@geekyI of course, org-mode is very full featured (probably overfeatured), compared to asciidoc or markdown it's *huge*. I love it for documenting.}
    sent: "2016-08-19T14:03:12.570Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57b6c6c387f779f0690d0cac"
    text: { Please note that my Red/System grammar is out of date, badly in need of an update.}
    sent: "2016-08-19T08:43:47.255Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57b6c5e4ed79c5ee4f1bb384"
    text: {@maximvl The [official docs](http://www.red-lang.org/p/documentation.html) as they stand. }
    sent: "2016-08-19T08:40:04.338Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57b6c3f8ed79c5ee4f1bad6c"
    text: "does it mean there are official docs already?"
    sent: "2016-08-19T08:31:52.408Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b6c3f1bb6fad403ce9b999"
    text: {@greggirwin >or wait and convert official docs to AsciiDoc}
    sent: "2016-08-19T08:31:45.018Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b61351cd00bdff6e5e7fdf"
    text: {@greggirwin  thank you for the confirmation, yes it's really great there is not much difference,  thanks to rebol2, I was able to quickly get to production er.. testing level code from scratch within a month}
    sent: "2016-08-18T19:58:09.532Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b612e2b64a3a016f4947cf"
    text: {Just some of my (raw) thoughts, sorry for the noise.. these, along with a way for programming in the large (package sharing, collaboration) are my biggest concerns}
    sent: "2016-08-18T19:56:18.234Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b612be5ffbca3e3cf2d1b8"
    text: {The fundamentals are the same, which has huge value. No reason for people not to look at R2 for that. VID and View will be different enough that we should warn people from expecting compatibility there, except for *very* simple cases.}
    sent: "2016-08-18T19:55:42.469Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57b61257187885ef4f5b3f41"
    text: {I know I'm still new to the community, and learning about github and red. However, I don't feel there is that much of a difference between the different versions (R3 and Red is less documented, true). In the beginning, I shared the sentiment with most newcomers that I'd have to "unlearn" rebol2, but I now I feel as using rebol2 view is a worthwhile experience. I can better understand the rationale for some of the decisions in red (and perhaps r3?) Perhaps it is important for other newcomers to know this too? But, on the other hand, there is a *lot* of content (literature, code, libraries) for rebol2, and there is the tendency to get overwhelmed? Partly caused by the different approaches taken by different groups (this in particular caused by the flexibility offered by rebol and lack(?) of a central package management system)}
    sent: "2016-08-18T19:53:59.738Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b6121787f779f0690ace19"
    text: {The old doc is a very useful starting point. Changes may be subtle, which requires care to ensure we don't lead people astray. `into` may have different behavior as well. }
    sent: "2016-08-18T19:52:55.145Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57b60ffd6981f5f269fbbfa6"
    text: {@meijeru @greggirwin  is there a lot of differences? From what I know, the feature additions in Red are:^/* parsing as datatypes^/* `collect` and `keep`}
    sent: "2016-08-18T19:43:57.298Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b60bd86981f5f269fbab84"
    text: {@xificurC  what about it? You are suggesting we convert docs to that format? I didn't know people wrote docs in org mode..}
    sent: "2016-08-18T19:26:16.578Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b60581ed79c5ee4f194db8"
    text: "@greggirwin org mode :)"
    sent: "2016-08-18T18:59:13.756Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57b5dacd6a2fa2ff3d971214"
    text: {There will be some differences. I've got a partial port of Doc's parse blog entry, to MD, done. The big issue is  figuring out whether we want to go with MD for now, or wait and convert official docs to AsciiDoc, which we all need to ramp up on.}
    sent: "2016-08-18T15:57:01.218Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57b5bfac8d93113d5f07a94f"
    text: ""
    sent: "2016-08-18T14:01:16.639Z"
    editedAt: "2016-08-18T14:08:04.603Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57b5b9f94f819cfa3dab310f"
    text: {The wikibooks reference is for R2/R3 -- would it be worthwhile/possible to adapt it for Red?}
    sent: "2016-08-18T13:36:57.385Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57b5a6515a4ad6105685f2d0"
    text: {ty @greggirwin for the direct answer and @geekyI @PeterWAWood for ancillary answers}
    sent: "2016-08-18T12:13:05.785Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57b5687d6a2fa2ff3d957dcc"
    text: {:point_up: [August 18, 2016 7:53 AM](https://gitter.im/red/red?at=57b523105a4ad61056847924) @JacobGood1 [wikibooks](https://en.wikibooks.org/wiki/REBOL_Programming/Language_Features/Parse/Parse_expressions) has the best documentation for parse that finally led me to actually understand it}
    sent: "2016-08-18T07:49:17.866Z"
    editedAt: "2016-08-18T07:49:34.981Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57b560377ce08cec69e40522"
    text: {@nc-x values of unsigned int 32bit are between 0..4294967295. You can work with a smaller range of unsigned values: 0..2147483647 by setting to 0 the signed bit. One way to do it is making a bitwise 'and' with mask 2147483647. Create a function which takes as parameter an integer! and returns a smaller range unsigned value. Use that function where you need it.}
    sent: "2016-08-18T07:13:59.548Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57b55381be8025f1694c4f9d"
    text: {Red/System treats int-ptr as unsigned 32-bit integer.}
    sent: "2016-08-18T06:19:45.655Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57b5537efd283f515c4fb737"
    text: {The MAXINT  (if used) constant wouldl need to be redefined as a (2 complement) negative value. What else... }
    sent: "2016-08-18T06:19:42.833Z"
    editedAt: "2016-08-18T06:22:16.335Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57b552e449bbb0444748c8f2"
    text: {What I meant, is that you can adapt and algorithm based on unsigned integers to signed ones.}
    sent: "2016-08-18T06:17:08.817Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57b5522749bbb0444748c8e9"
    text: {Except for some machine instructions and math operations, there is no physical difference between signed and unsigned integers (same footprint in memory). I don't see why you couln't port your algorithm.}
    sent: "2016-08-18T06:13:59.408Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57b550936a2fa2ff3d9544e3"
    text: "or will they be implemented sometime soon?"
    sent: "2016-08-18T06:07:15.425Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57b54ddd8d93113d5f0644ee"
    text: {I had some free time on hand today, so was planning to try to implement xxHash algorithm in R/S. There is no documentation on xxHash algorithm, only source code. I had a brief look at its source, and found that xxHash32 uses 32-bit unsigned integers^/and xxHash64 implementation requires 64-bit unsigned integers.^/R/S has neither 32-bit unsigned integers nor 64-bit signed/unsigned integers.^/I am new enough to programming so don't know any possible workarounds.^/Are there any workarounds? or Do we have to wait for R/S 2.0? }
    sent: "2016-08-18T05:55:41.640Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57b549b5be8025f1694c29d4"
    text: "For block parsing, you can also use `any-type!`"
    sent: "2016-08-18T05:37:57.655Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57b52b227ce08cec69e37655"
    text: {```skip``` assuming that you want to advance the input.^/```^/red>> parse "a" [skip]^/== true^/red>> parse [my-word] [skip]^/== true^/```}
    sent: "2016-08-18T03:27:30.655Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57b523105a4ad61056847924"
    text: {is there a word in parse that matches anything?^/^/parse [1] [anything] == true}
    sent: "2016-08-18T02:53:04.156Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57b42e6c7ce08cec69e0c8f4"
    text: "tgg"
    sent: "2016-08-17T09:29:16.429Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57b42ced5a4ad6105681cbfa"
    text: "PR's welcome of course :)"
    sent: "2016-08-17T09:22:53.977Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57b42c3c1a7d020756862ff0"
    text: {getting the repl to work wouldn't be too much work I guess, but I've never done one and don't have the time or need to study the internals}
    sent: "2016-08-17T09:19:56.648Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57b42c051a7d020756862f6b"
    text: {@maximvl no, it's basically just syntax highlighting, indentation}
    sent: "2016-08-17T09:19:01.894Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57b425ec6a2fa2ff3d92114b"
    text: "@xificurC nice! does it have repl in emacs?"
    sent: "2016-08-17T08:53:00.315Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b3ee61d65128415f9cc30d"
    text: "@nc-x, agreed."
    sent: "2016-08-17T04:56:01.220Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57b3ec758d93113d5f02a1be"
    text: {@rgchris Please open a ticket. All __crashes__ are bugs whether the code should run or not (because the compiler/interpreter must not crash ever).}
    sent: "2016-08-17T04:47:49.525Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57b3949d8d93113d5f01f548"
    text: {@/all the emacs mode for red is as good as it will be for now (unless some PRs  come in).  @Skrylar did most of the work, I just added a few things I missed. Check it out [here](https://github.com/xificurC/red.el). You can e.g. `M-x load-file` the `red.el` file and open any `.red` file after that. As a test I tried opening @greggirwin 's gist with it and it seemed to color it just fine. Peek away}
    sent: "2016-08-16T22:33:01.684Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
)#(
    id: "57b383cd8d93113d5f01ceed"
    text: {Well, you're taking `keep` that is local to `collect` and calling it outside that context, where `collected` was created locally. I don't think it should work at all.}
    sent: "2016-08-16T21:21:17.813Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57b36f748d93113d5f019950"
    text: {The response I get is:^/^/```lisp^/*** Runtime Error 1: access violation^/*** at: B76CB036h^/```^/^/(that \*\*\* AT line can vary)}
    sent: "2016-08-16T19:54:28.488Z"
    editedAt: "2016-08-16T19:54:43.753Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57b36ee38d93113d5f0196e0"
    text: {Is this a bug in Red? Should it work at all?^/^/```lisp^/acc: take stuff: collect [keep :keep]^/acc 1^/```}
    sent: "2016-08-16T19:52:03.357Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57b22e6bbe8025f16944b2a7"
    text: {@geekyI   @meijeru   -  Thanks re make, create-dir}
    sent: "2016-08-15T21:04:43.049Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57b22baf4f819cfa3da24d8c"
    text: {`?` and `source` are one of the most useful functions in red. I don't even have to refer to anything else most of the time}
    sent: "2016-08-15T20:53:03.073Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b22b3dbe8025f16944a88e"
    text: {@mikeparr to add to that:^/```^/red>> type? :create-dir^/== routine!^/red>> type? :make-dir^/== function!^/red>> ? :create-dir^/routine [path [file!]][^/    simple-io/make-dir file/to-OS-path path^/] is a routine^/red>> ? :make-dir^/func [^/...^/        create-dir path ^/...^/```}
    sent: "2016-08-15T20:51:09.132Z"
    editedAt: "2016-08-15T20:51:19.215Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57b21c106a2fa2ff3d8d5c1d"
    text: ""
    sent: "2016-08-15T19:46:24.812Z"
    editedAt: "2016-08-15T19:46:41.510Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57b21bf2d65128415f987c78"
    text: {Look at the sources: `make-dir` is a function (source available) and it calls `create-dir` which is a routine containing low-level (Red/System) code. Thus `make-dir` is the one to use, unless you know exactly what `create-dir`does.}
    sent: "2016-08-15T19:45:54.253Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57b20c4b8d93113d5ffe12ba"
    text: {Red has `make-dir` and also `create-dir`.  `Make` has more capabilities. Is there a preferred usage for these words, or is `create-dir` redundant?^/ }
    sent: "2016-08-15T18:39:07.880Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57b206c54f819cfa3da1e68e"
    text: "enough from me for now ;-)"
    sent: "2016-08-15T18:15:33.941Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57b206b57ce08cec69dbb83e"
    text: {It can get confusing pretty fast ...e .g. using  a variables, which are result of other computations. You will have to convert all the time, to be sure. I would prefer difference via using different ops, instead of what we have now ...}
    sent: "2016-08-15T18:15:17.531Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57b20656d65128415f98335a"
    text: {So far, I don't buy advantages, over the inconsistency of results we can get, depending upon one of the type of the arguments ....}
    sent: "2016-08-15T18:13:42.659Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57b205fe5a4ad610567cc361"
    text: "Forth's like Red, Scheme's like Rebol :-)"
    sent: "2016-08-15T18:12:14.671Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57b204e71a7d020756813514"
    text: {Well, there seems to be no pattern there. Checked with some via the repl.it. Ruby, C#, JAVA return 1 as a result to 5 / 3. PHP. Python3, JS, Rebol .... and even LUA return 1.66666}
    sent: "2016-08-15T18:07:35.374Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57b2046fd65128415f982998"
    text: {@pekr Pharo (Smalltalk) and Racket (iirc), give as result (5/3) ;)}
    sent: "2016-08-15T18:05:35.249Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57b1fdd25a4ad610567ca617"
    text: {We are talking higher level language here, not a computer nerds one. Noone should be pushed to know anything about types, to use Red effectively imo. I know, that we want Red to be used on the low level and I am the one who pushes for as much of Red 2 Red/System compatibility (e.g. print/prin), so it is tricky, but ....}
    sent: "2016-08-15T17:37:22.078Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57b1fd7b1a7d020756811999"
    text: {The discussion was hel here already, but my take is rather radical - 5 / 3 returning 1 is simply absolutly unacceptable to me, no matter what reasoning is given.}
    sent: "2016-08-15T17:35:55.880Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57b1d607ba833d475b5e1628"
    text: {@dockimbel no problem, I understand that things are not in their final form yet, just in the ticket the answer was like "It was decided to be so" without mentioning that this is subject to change}
    sent: "2016-08-15T14:47:35.980Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b1d055ba833d475b5e03cd"
    text: {@maximvl The decision we took is to have `/` give the most accurate result while `//` would keep the same datatype. Keep in mind that not all design decisions have been made, and not all decisions have been implemented. We should log somewhere all that, though I'm not sure what would be the most practical form for us.}
    sent: "2016-08-15T14:23:17.625Z"
    editedAt: "2016-08-15T14:26:46.116Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57b1a885bc5c9ca66896ebf1"
    text: {yeah, I guess this is what you want in ~70% of cases, and in other 30% you can have a different op for a integer division}
    sent: "2016-08-15T11:33:25.262Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b19eefbc5c9ca66896d7ed"
    text: {From my cursory look at various langs I use, the approach almost universally used is to convert to floats (same as @maximvl ). Some 'more modern' ones use rationals by default instead}
    sent: "2016-08-15T10:52:31.180Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b19e8123f0cacc34e7490a"
    text: {Please not that the proposal to add mathematical and time functions has not been submitted, is not yet in the correct format to be submitted and does not yet contain the correct information to be submitted.}
    sent: "2016-08-15T10:50:41.534Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57b19e0eea1702624b3014b3"
    text: {From rust https://mail.mozilla.org/pipermail/rust-dev/2013-April/003738.html , advocates not using `/` at all for integers}
    sent: "2016-08-15T10:48:46.621Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b19dfb3b7636555be783fc"
    text: "```text^/[text](URL of Wiki page)^/```"
    sent: "2016-08-15T10:48:27.995Z"
    editedAt: "2016-08-15T10:49:01.271Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57b19dd4ea1702624b301457"
    text: "@geekyI wonders how best to link to wiki content"
    status: true
    sent: "2016-08-15T10:47:48.886Z"
    editedAt: "2016-08-15T10:48:10.716Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57b19dc406285b604b3936cd"
    text: {https://github.com/red/red/wiki/REP-XXXX---Add-mathematical-and-time-functions @maximvl }
    sent: "2016-08-15T10:47:32.050Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b19c73bc5c9ca66896d264"
    text: {It is quite possible that an integer division function will be added to Red though it is hard to find good names. @dockimbel isn't keen on using ```÷``` for an integer division as it is hard to find on some keyboards. Though I can manage :-)}
    sent: "2016-08-15T10:41:55.964Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57b19bbeba833d475b5d84fe"
    text: { @maximvl It is intended that  ```divide```  and ```/```  will return a ```float!``` value when the result of dividing one ```integer!``` by another is not ```integer!```. ^/^/I'm not sure when this will be implemented but I suspect that it will be after the ```to``` function has been fully implemented. }
    sent: "2016-08-15T10:38:54.446Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57b19869f418d7a1682d3c3d"
    text: {@maximvl is there a survey on the reasons for and against? I was expecting more and couldn't immediately find on search}
    sent: "2016-08-15T10:24:41.946Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57b18c130fd99f70413bdddb"
    text: {@ifgem how is `x / float y` more user friendly than `x / y` ?}
    sent: "2016-08-15T09:32:03.910Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b18b3f364ad7fc5ad45a6c"
    text: "@maximvl user-friendly?"
    sent: "2016-08-15T09:28:31.471Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57b18a0aa00c6adb45e787e2"
    text: {@rebolek I wonder what are the reasons behind this decision }
    sent: "2016-08-15T09:23:22.009Z"
    editedAt: "2016-08-15T09:23:31.675Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b18950364ad7fc5ad45677"
    text: "@maximvl I like CL approach as well:))."
    sent: "2016-08-15T09:20:16.876Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57b1870b625cb3d84547bf91"
    text: {python3 has `/` for true division, `//` for integer division and `%` for remainder, which is also ok if there is no fraction type in the language}
    sent: "2016-08-15T09:10:35.391Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b186ac364ad7fc5ad451ee"
    text: "I see"
    sent: "2016-08-15T09:09:00.841Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57b18690364ad7fc5ad451c9"
    text: {so you have both, the integer part and the remainder, and you can make a float out of it if you want}
    sent: "2016-08-15T09:08:32.826Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b1865aaee33d7241ee5e57"
    text: {@rebolek I, personally, would prefer the Common Lisp approach, where division creates a fraction if result is not integer}
    sent: "2016-08-15T09:07:38.544Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b185f1ae0554d04c993745"
    text: "pretty much yeah"
    sent: "2016-08-15T09:05:53.670Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b185ed0fd99f70413bcf91"
    text: ">Returns the first value divided by the second."
    sent: "2016-08-15T09:05:49.241Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b185d546a301fa5a4fd216"
    text: {moreover, I'm sure that `normal` division used much more than the integer one}
    sent: "2016-08-15T09:05:25.785Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b185bd418e6fc44cff9b25"
    text: "@maximvl so you prefer how Rebol does it?"
    sent: "2016-08-15T09:05:01.711Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57b18598364ad7fc5ad4504b"
    text: {if I want an integer result, I can `trunk`, `floor`, `ceil` or whatever I want with the result}
    sent: "2016-08-15T09:04:24.440Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b1856eaee33d7241ee5c95"
    text: {just to remind you, this was a huge problem in Python2 and one of the first things to change in Python3}
    sent: "2016-08-15T09:03:42.169Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b18544625cb3d84547bc40"
    text: {having `x` and `y` in your code, what will `x / y` do?}
    sent: "2016-08-15T09:03:00.388Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b18526a00c6adb45e77ddd"
    text: "@rebolek ye, this is the problem"
    sent: "2016-08-15T09:02:30.215Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b18507364ad7fc5ad44f47"
    text: {If both args are integer, then the result is integer also.^/```^/red>> 5.0 / 2^/== 2.5^/red>> 5 / 2.0^/== 2.5^/```}
    sent: "2016-08-15T09:01:59.465Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57b184da364ad7fc5ad44eee"
    text: {@rebolek I disagree:^/```^/red>> 5 / 2^/== 2^/```}
    sent: "2016-08-15T09:01:14.922Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b181d846a301fa5a4fc938"
    text: {@maximvl it is not integer division: ^/```^/red>> 5.0 / 2.0^/== 2.5^/```}
    sent: "2016-08-15T08:48:24.938Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57b1818f625cb3d84547b423"
    text: {@PeterWAWood however I agree with the original thing - why do we have `/` as integer division, instead of normal one?}
    sent: "2016-08-15T08:47:11.632Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b17eab364ad7fc5ad43ff1"
    text: {The issue was not genuine and included a number of insults. Issues cannot be deleted from Github so the text was removed and the issue was closed.}
    sent: "2016-08-15T08:34:51.182Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "57b17d0a625cb3d84547a996"
    text: {hey guys, what is this? https://github.com/red/red/issues/2174}
    sent: "2016-08-15T08:27:54.923Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57b178b10fd99f70413bb57a"
    text: "#2173 action!, word with value as well."
    sent: "2016-08-15T08:09:21.655Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57af596eaee33d7241eade37"
    text: {Red is one of the rare 'modern' languages, considering that desktop GUI is still viable platform}
    sent: "2016-08-13T17:31:26.411Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57af56a3418e6fc44cfc1d33"
    text: "Rethinking everything"
    sent: "2016-08-13T17:19:31.764Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57af5698625cb3d845441e2d"
    text: {I like communities which aren't afraid to try new things, and even change their ways of thinking fundamentally, which is part of the reason I'm attracted to Red}
    sent: "2016-08-13T17:19:20.434Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57af5656aee33d7241ead631"
    text: {I hope it does, the community feels very friendly and really open to new ideas}
    sent: "2016-08-13T17:18:14.372Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57af563446a301fa5a4c4995"
    text: {I also like Nim over Go and Swift. Rust.. feels like it's in a separate domain like C and R/S (embedded and systems programming, altho Nim comes close). Julia looks pretty interesting  and popular these days, I wonder if it will get to the top 10}
    sent: "2016-08-13T17:17:40.578Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57af54f5a00c6adb45e3ca09"
    text: {First we have to get to Red 1.0 though. I have my plate full of things to try and help with that.}
    sent: "2016-08-13T17:12:21.844Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af54ba46a301fa5a4c46e0"
    text: {I do think Nenad has been wise to make R/S comfortable to those who know C. Very important in this bootstrap phase. I'm already anxious to see what R/S 2.0 looks like. I don't have any inside information, but I imagine it will be designed as a more modern systems level language.}
    sent: "2016-08-13T17:11:22.699Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af5362364ad7fc5ad0a0b6"
    text: {Right. Go just brijngs some security and simplicity on top of regular C...not bad, but not enough as well}
    sent: "2016-08-13T17:05:38.684Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57af530aae0554d04c95a02e"
    text: "I am, admittedly, biased. :^^)"
    sent: "2016-08-13T17:04:10.234Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af52f3625cb3d8454416f7"
    text: {Old school here too. Go hasn't grabbed me as being a leap forward in any way. }
    sent: "2016-08-13T17:03:47.163Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af525bae0554d04c959eda"
    text: {I could tolerate some of Golang's gotchas, but it  is, imho, not very suitable for desktop apps and I'm 'old-school' still want to avoid  having everything running in browser :-( }
    sent: "2016-08-13T17:01:15.744Z"
    editedAt: "2016-08-13T17:01:33.513Z"
    v: 2
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57af5234625cb3d8454414cb"
    text: {Many languages have great strength in one area, but are more difficult in others. I think there's room for all, if we can make them more like applications, specialized and easier to use. This is another area where I think Red will be helpful, because it's a language construction toolkit.}
    sent: "2016-08-13T17:00:36.624Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af51c4a00c6adb45e3c3e9"
    text: {+1. Shen is another one I became aware of recently.}
    sent: "2016-08-13T16:58:44.929Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af517b0fd99f70413847d4"
    text: {Sure...but Red seems to be doing qutie well...as far as Spry, its designer/main-dev is former Smalltalker and he did inspired me to take look at Pharo after playing with Digitalk's Smalltalk looong ago...Pharo/Smalltalk is cool, but it looks it's still kind of slow, strange deploying/version-control, so I'm now looking at Red, although Smalltalk's language simplicity is cool...}
    sent: "2016-08-13T16:57:31.518Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57af5127a00c6adb45e3c2b1"
    text: {How *do* you do the little purple comments Gour? I can't find a "comment in the third person" button. ;^^)}
    sent: "2016-08-13T16:56:07.602Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af50c4364ad7fc5ad099ec"
    text: {Language adoption is hard, and requires luck. JS is winning right now, while Rust seems to have faded from its peak, Go is still working hard to gain traction, and Swift is being pushed hard. If Mozilla, Google, and Apple can't make change happen quickly (or the many MS languages), we can't expect smaller efforts to "make it so" on demand.}
    sent: "2016-08-13T16:54:28.413Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af5083364ad7fc5ad0995b"
    text: {@gour was interested for Nim, but it seems that development slowed down a bit...}
    status: true
    sent: "2016-08-13T16:53:23.740Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57af500f364ad7fc5ad09819"
    text: {I only recently learned about Spry (http://sprylang.org/) and want to look into that more, since it lists Rebol as an influence. It's built in Nim (http://nim-lang.org/) which I found some time back. }
    sent: "2016-08-13T16:51:27.495Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af4f6ca00c6adb45e3bf15"
    text: {There are so many lanaguages out there now that I can't keep up. Chris Granger is doing interesting stuff with Eve. It's interesting, though I'm not trying to learn it right now, to see a language that is very different, not understanding it right away. When one of the team commented that you won't really need functions like you do in other languages, I have a hard time seeing it. And I need to remember that's how many people see Red when they find it.}
    sent: "2016-08-13T16:48:44.548Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57af472a364ad7fc5ad08605"
    text: "lol, reading all of that was funny"
    sent: "2016-08-13T16:13:30.583Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57af39e8418e6fc44cfbe432"
    text: {All this is just observation, I'm not that experienced, and I don't know what will happen.. would things change in the next 20 years, or would machine learning take over?}
    sent: "2016-08-13T15:16:56.322Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57af39a2ae0554d04c956da4"
    text: {@pekr I think it takes time for these things, for things to mature, for communities to build. At least 5+ years to even start gaining traction. Back then, the pace of change was faster I think, as communities were small and niche, adoption rate was high. Now, since computers (and even programming!) is so mainstream, there is a lot of overhead and bureaucracy}
    sent: "2016-08-13T15:15:46.427Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57af363d46a301fa5a4c0859"
    text: {@Arie-vw In Red-by-example, in the explanation of the minus operator, you say `The infix operator - ` where all other operators are introduced with `The infix word ... ` . For consistency, they should all be `word` I think.}
    sent: "2016-08-13T15:01:17.229Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57aef657625cb3d84543689e"
    text: {Well, really scary. I do remember, when Carl left Viscorp (Amiga), did not accept Gateway's proposition to join their Amiga team and went for his own project - LAVA, soon renamed to REBOL. Back at those times we claimed - we are not like Perl etc., those languages are here for 20 years ... Unbelievable, that Rebol is that old now. Even Red gets into some 4-5 years territory (if we don't count its Rebol heritage)}
    sent: "2016-08-13T10:28:39.802Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57aef22f625cb3d84543623b"
    text: "@pekr  20 years? Unbelievable:)))."
    sent: "2016-08-13T10:10:55.103Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57aeda0c6cd7d05c37c25b9f"
    text: {"while I was travelling" - It's a coup.}
    sent: "2016-08-13T08:27:56.359Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57aed99e418e6fc44cfb4387"
    text: {Interesting discussions happening here while I was travelling. :-) Our Red rooms are moderated, trolls and troublemakers have no place here, so @Vexercizer has been properly shown the exit door. About his `collect` question, the basic form is `collect body` which as no consistency issues whatsover. `/into` is a refinement for providing an optional aggregation series, instead of having a block created by `collect`, so the refinement's argument follows the mandatory ones, that is  how it works for all functions in Rebol languages, so it's fully consistent. The examples he showed have no need for a `/into` refinement, the basic `collect` was enough. I think he was trying to understand `collect` by focusing on the meaning of the function and refinement names, rather than the semantics.}
    sent: "2016-08-13T08:26:06.291Z"
    editedAt: "2016-08-13T08:30:44.005Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57aeac6c364ad7fc5acf9290"
    text: {I don't have a better name for it, since it's just a working idea. I often give things intentionally questionable names when experimenting.}
    sent: "2016-08-13T05:13:16.367Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57aeac32ae0554d04c9490c0"
    text: {And since typesets came up in the chat about a `clone` func, here is a little mezz to help with creating them. `Collect-values` can be found in my gist of mezzanines if you want to use this.^/```^/; You can't append to a typeset!^/; You can't make a typeset! *from* a typeset!^/; You have to make them from datatypes, and union typesets together.^/typeset+: function [^/^-"Returns a typeset that is the union of all datatype! and typeset! values in spec"^/^-spec [block!]^/][^/^-result: make typeset! collect-values spec datatype!^/^-foreach set! collect-values spec typeset! [result: union result set!]^/]^/```}
    sent: "2016-08-13T05:12:18.889Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57aeab6f364ad7fc5acf9190"
    text: {On the subject of information for those new to Red and Rebol, Chris Ross-Gill has some intro material at http://rebol.info/rebolsteps.html}
    sent: "2016-08-13T05:09:03.593Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae8e1d0fd99f7041371567"
    text: {^/> On behalf of the Red team, I am requesting that people show more restraint when posting in this and other Red Gitter rooms. There is no place for personal attacks, name calling and snide remarks here. ^/^/@PeterWAWood Then why do not you set the example for others? Your comment seems to be little more ad hominem by innuendo. ^/^/What are your credentials that you can prove to others that you know what is a snide remark or name calling for that matter?^/^/It's people like you who need to shut up in this world. Had you wrote nothing, you would have gotten no reply.^/^/Do you see how cause to effect works?^/^/Good luck.^/^/}
    sent: "2016-08-13T03:03:57.301Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae8d8f418e6fc44cfad85b"
    text: ""
    sent: "2016-08-13T03:01:35.177Z"
    editedAt: "2016-08-13T03:01:39.419Z"
    v: 2
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae825fae0554d04c94582b"
    text: {On behalf of the Red team, I am requesting that people show more restraint when posting in this and other Red Gitter rooms. There is no place for personal attacks, name calling and snide remarks here. ^/^/}
    sent: "2016-08-13T02:13:51.389Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ae7619364ad7fc5acf4393"
    text: "I"
    sent: "2016-08-13T01:21:29.057Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ae4a6846a301fa5a4a9783"
    text: {@greggirwin ^/> :point_up: [August 12, 2016 3:13 PM](https://gitter.im/red/red?at=57ae3beeaee33d7241e903b2) contains some inflammatory language @Vexercizer. Petr sometimes intervenes when he feels my blood pressure rise from 6'000 miles away. :^^)^/^/If you believe talking about others in the abstract and labeling them nerds is inflammatory, you are a special precious snowflake.^/^/Nerddom is a badge of honor in the 21st century for many.^/^/Good luck!^/^/}
    sent: "2016-08-12T22:15:04.635Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae4926ae0554d04c93f63b"
    text: {https://github.com/red/red/wiki/REP-FOR-loop-function}
    sent: "2016-08-12T22:09:42.907Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae48f6aee33d7241e92a5e"
    text: "@greggirwin Thank you. Where is that?"
    sent: "2016-08-12T22:08:54.830Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae482646a301fa5a4a921c"
    text: {@Vexercizer , my `for` REP is in the Red repo wiki.}
    sent: "2016-08-12T22:05:26.357Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae4817ae0554d04c93f423"
    text: {Well, he had serious questions about collect/into ... I am not the one to answer those ...}
    sent: "2016-08-12T22:05:11.415Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae47ffaee33d7241e92858"
    text: {@petr^/^/> ... I am a heavy metal honcho...^/^/Most metal guys are males trying to project masculinity to hide their true effeminate selves.^/^/I'm more into Lefty Dizz, Pat Hare, Charley Booker, Frank Lee Sims, Goree Carter, Joe Hill Lewis, Bobo Jenkins, Jimmy Nolen.}
    sent: "2016-08-12T22:04:47.247Z"
    editedAt: "2016-08-12T22:07:27.446Z"
    v: 2
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae47f4a00c6adb45e21779"
    text: {I still can feel, that we can get along. I am just like you - I never give up :-)}
    sent: "2016-08-12T22:04:36.772Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae47f14073ee634d25b48f"
    text: "He's 25, at most."
    sent: "2016-08-12T22:04:33.198Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae47d4364ad7fc5acef01a"
    text: {@Vexercizer man, where are you from? What do you like? I am a heavy metal honcho, I like being around Amiga/Rebol/Red communities for 20 years.}
    sent: "2016-08-12T22:04:04.373Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae47d09aba41a43d3e54e9"
    text: "Sure. I made my bet. Probable around 25"
    sent: "2016-08-12T22:04:00.466Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae47cc625cb3d8454259f3"
    text: {@greggirwin ^/> Also @Vexercizer, I have a `for` REP out there, since you mentioned that earlier.^/^/Would like to tell me about it and share the code since those dummies do not talk RED?}
    sent: "2016-08-12T22:03:56.993Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae47720fd99f704136a4f3"
    text: {@SteeveGit ^/> Petr ... it's  a half of beer in France. Serve yourself. ^/^/French? That explains everything — argumentative, effeminate and always surrendering.^/}
    sent: "2016-08-12T22:02:26.335Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae4772418e6fc44cfa675e"
    text: "Almost."
    sent: "2016-08-12T22:02:26.265Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae47676cd7d05c37c2585f"
    text: "It may be a First though :-)"
    sent: "2016-08-12T22:02:15.484Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
)#(
    id: "57ae470f364ad7fc5aceee66"
    text: "Why should Nenad or anyone block you?"
    sent: "2016-08-12T22:00:47.593Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae46e90fd99f704136a369"
    text: {@SteeveGit ^/^/> I wait for tomorrow and the shit storm when Nenad will log in. ;-)^/^/You seem like a coward who fears a group, its leader or leaders. ^/^/No matter.  Nenad will continue working for me for free. I will leverage his thousands upon thousands of hours to earn from his efforts without ever paying him.^/^/He is free to ban me or block me, but I will get all the answers I need from various sources should I need any.^/^/You and the rest of your dummies will continue with your circle jerk here.^/^/Better luck next time!^/}
    sent: "2016-08-12T22:00:09.518Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae46e4ae0554d04c93f0b7"
    text: {Well, swift and damn - two words I had to look-up, as my lack of the english knowledge is simply working against me ....}
    sent: "2016-08-12T22:00:04.011Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae461f418e6fc44cfa64f1"
    text: {> You started off by just asking? What about this? "Real word people do not speak words such as iterating or predicate. Few care about comp sci and philosophy department buzzwords. Most of us focus on results and not meaningless jargon nerd fests." ... next to mention of Carl and Nenad?^/^/Do the names *Carl* or *Nenad* appear anywhere in that context, dummy? If anything, one with decent reading comprehension would have concluded that I took a shot at @greggirwin because he wrote those words.^/^/Damn, you are swift in a daft like way. ^/^/Good luck!}
    sent: "2016-08-12T21:56:47.622Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae4557aee33d7241e9220d"
    text: {> @Vexercizer I tend to inclide, that you are a real idiot^/^/Someone here is an idiot, @pekr but that one is not me.^/^/1. Inclide is not a word.^/2. Could anyone be an artificial idiot?  One can be an idiot or not. ^/^/Clearly, you do not talk RED here.^/^/}
    sent: "2016-08-12T21:53:27.837Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae451146a301fa5a4a8c2c"
    text: {I respect what Nenad says, even if I don't fear expressing my own pov. It was me who started to drag it into the personal level. But - I can't stand the personal attacks to the Red/Rebol authors or the members of the community, for no apparent reasons (to me)}
    sent: "2016-08-12T21:52:17.032Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae44b9ae0554d04c93ec72"
    text: "Who has redact power on gitter? ;^^)"
    sent: "2016-08-12T21:50:49.649Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae44a2625cb3d845425326"
    text: "Well, I don't. I am going to be exterminated :-)"
    sent: "2016-08-12T21:50:26.287Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae448f0fd99f7041369f29"
    text: {I think we will have to wait fot Nenad, to answer the collect/into}
    sent: "2016-08-12T21:50:07.626Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae448a9aba41a43d3e54cc"
    text: {I wait for tomorrow and the shit storm when Nenad will log in. ;-)}
    sent: "2016-08-12T21:50:02.522Z"
    editedAt: "2016-08-12T21:50:17.490Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae444e625cb3d84542523b"
    text: "If so, please let's keep it to Red from now on"
    sent: "2016-08-12T21:49:02.029Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae4443625cb3d845425232"
    text: "Are you really the one to talk Red here?"
    sent: "2016-08-12T21:48:51.229Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae4430a00c6adb45e2102d"
    text: "What's that? Score to woman?"
    sent: "2016-08-12T21:48:32.146Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae441aa00c6adb45e20ff8"
    text: {@Vexercizer I tend to inclide, that you are a real idiot}
    sent: "2016-08-12T21:48:10.251Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae4416364ad7fc5acee918"
    text: {All of you seem to be off topic. Who is here to talk RED?^/}
    sent: "2016-08-12T21:48:06.679Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae43f946a301fa5a4a8a34"
    text: {@SteeveGit ^/> It's fun to read insults when it's not your first language. They have half their power ;-)^/^/So you have taken to bragging? Let me know when you can speak French, German, Dutch and Spanish.^/^/Also, let me know if you ever scored with a woman.}
    sent: "2016-08-12T21:47:37.346Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae43f4625cb3d84542517b"
    text: {You started off by just asking? What about this? "Real word people do not speak words such as iterating or predicate. Few care about comp sci and philosophy department buzzwords. Most of us focus on results and not meaningless jargon nerd fests." ... next to mention of Carl and Nenad?}
    sent: "2016-08-12T21:47:32.858Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae43906cd7d05c37c25837"
    text: {It's fun to read insults when it's not your first language. They have half their power ;-)}
    sent: "2016-08-12T21:45:52.791Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae432cae0554d04c93e915"
    text: {@greggirwin  I do not need to backtrack. You know I started off by asking for the rationale of `COLLECT` and as you replied and @rgchris replied, I asked questions to gain understanding. ^/^/It is that simple. Those other two dummies seem like a-holes with Asperger's.^/}
    sent: "2016-08-12T21:44:12.223Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae4328418e6fc44cfa5efb"
    text: {@Vexercizer - I can take all the blame, really. I am a former Amiga Review columnist, know the history of Rebol, ppl related, but I have rather shallow internal lang knowledge. But - please, don't call Steeve a dummy. He might be a cool guru next to your doors :-)}
    sent: "2016-08-12T21:44:08.415Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae42f39aba41a43d3e54c5"
    text: "We are the ~~champion~~ dummy"
    sent: "2016-08-12T21:43:15.580Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae42dc364ad7fc5acee681"
    text: {:point_up: [August 12, 2016 3:13 PM](https://gitter.im/red/red?at=57ae3beeaee33d7241e903b2) contains some inflammatory language @Vexercizer. Petr sometimes intervenes when he feels my blood pressure rise from 6'000 miles away. :^^)}
    sent: "2016-08-12T21:42:52.154Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae42daa00c6adb45e20d54"
    text: ":-)"
    sent: "2016-08-12T21:42:50.255Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae42cdae0554d04c93e849"
    text: {@SteeveGit ^/^/> Petr don't feed the Troll, I offer you a  "demi" , sounds like a  "dummy", but actually it's  a half of beer. Serve yourself. ^/^/There is no trolling here. You are another dummy. Thanks for revealing yourself.}
    sent: "2016-08-12T21:42:37.123Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae42b6625cb3d845424f53"
    text: ":-)"
    sent: "2016-08-12T21:42:14.744Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae429d77ca0aba32e770e2"
    text: {Petr don't feed the Troll, I offer you a  "demi" , sounds like a  "dummy", but actually it's  a half of beer in France. Serve yourself. }
    sent: "2016-08-12T21:41:49.143Z"
    editedAt: "2016-08-12T21:42:21.473Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae4286418e6fc44cfa5db0"
    text: {@pekr You gives a flip what you remember? Seriously, why so narcissistic? }
    sent: "2016-08-12T21:41:26.245Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae427a418e6fc44cfa5d5d"
    text: {I don't want to hurt Red here, so maybe guys can be of some help to you.}
    sent: "2016-08-12T21:41:14.203Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae4275ae0554d04c93e79c"
    text: {Petr is cool. He has been around a long time and has nothing to prove.}
    sent: "2016-08-12T21:41:09.699Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae425daee33d7241e91b85"
    text: {Enjoy talking to guys here. We've got some Lispers and/or other lang ppl here, having various arguments, but I rarely remember any such remarks ...}
    sent: "2016-08-12T21:40:45.338Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae4225aee33d7241e91b06"
    text: {>> parse "dipshit" ["dip" skip "hit"]^/== true}
    sent: "2016-08-12T21:39:49.174Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae420c364ad7fc5acee4da"
    text: {@pekr And the reason why you attacked me is a lame effort to gain status among the group. ^/^/You must be the weakest one here among them.^/}
    sent: "2016-08-12T21:39:24.090Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae41b8ae0554d04c93e638"
    text: {@pekr ^/^/> @Vexercizer - I tend to be a direct person, so - your remarks are plain arrogant, sorry. If you want to attack ppl here, please go elsewhere.^/^/You are the only dipshit who has attacked anyone. @greggirwin, @rgchris and I were having a discourse over a function in RED as graciously, they were trying their best to explain something to me.^/}
    sent: "2016-08-12T21:38:00.901Z"
    editedAt: "2016-08-12T21:40:50.844Z"
    v: 2
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae419346a301fa5a4a84b2"
    text: {You are talking to the guy, who used DB II in its early days, later on Clipper, Foxpro, CA-Visual objects, meet its creators, talked at devcons. If you call me a toady, it just shows how you really behave. What's wrong with you? There's  a bunch of cool guys here (well, maybe except of me), so please - calm down ...}
    sent: "2016-08-12T21:37:23.649Z"
    editedAt: "2016-08-12T21:37:43.964Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae410b46a301fa5a4a836b"
    text: "Nevermind @Vexercizer. "
    sent: "2016-08-12T21:35:07.370Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae40b4aee33d7241e90daa"
    text: {@pekr ^/^/> Lotus 1-2-3 and dBase II succeeded? Maybe you should add FoxPro or other successful technology to the equation. You attack Rebol/Red, its creators, yet you admit you don't understand its internals? :-)^/^/You are a dummy. You are a toady who is sucking up to the group by trying to attack an outsider.^/^/Mitch Kapor and George Tate became rich from those products. Their file layouts are still in use worldwide by millions of computer installations.^/^/I did not attack the creators of REBOL and RED, dummy.^/^/Good luck dummy.}
    sent: "2016-08-12T21:33:40.924Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae4084418e6fc44cfa58fc"
    text: {My friend thought of a new movie with hell boy - you know he has a strong arm ... and who was the first one on the moon? The arm-strong ... it really all connects :-)}
    sent: "2016-08-12T21:32:52.184Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae405946a301fa5a4a81fa"
    text: {@Vexercizer, to see if we can reach some agreement on this, do you understand the concept of non-local flow control? }
    sent: "2016-08-12T21:32:09.239Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae400a418e6fc44cfa57c6"
    text: {And I appreciate your directness Petr. I can waste a lot of words sometimes.}
    sent: "2016-08-12T21:30:50.405Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae4002625cb3d8454248e8"
    text: {@greggirwin ^/^/> Consider that collect passed muster, as a word for this behavior, and became part of Rebol. No small feat. ^/^/REBOL 3 was horrible. Product couldn't be delivered. I can rely upon 2.7.8 ^/^/> When you say that collect is the same as catch/throw, it's just not true. Their behavior and purpose are completely different.^/^/I did not say anything. I wrote something.^/^/Specifically, I wrote:^/^/*"COLLECT and KEEP is merely CATCH and THROW that modifies the same block and that /into lets you write a new block," I would have gotten it instantly.*^/^/And by those words, clearly, I meant *is merely like.* There is no better analogue to explain how `COLLECT` and `KEEP` works in RED/REBOl than `CATCH` and `THROW`.^/^/Clearly, each function has it is own underlying code. Conceptually, the functions are alike. ^/^/}
    sent: "2016-08-12T21:30:42.240Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae3fc8418e6fc44cfa5740"
    text: ":-)"
    sent: "2016-08-12T21:29:44.995Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae3f99364ad7fc5acedf15"
    text: {I'm like the Incredible Hulk, from the old TV series here in the US, where he would say "Don't make me angry, you wouldn't like me when I'm angry." ;^^)}
    sent: "2016-08-12T21:28:57.061Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae3f4e364ad7fc5acede6a"
    text: {I don't know what would I do, if Gregg was not here? The wise force :-)}
    sent: "2016-08-12T21:27:42.814Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae3f21364ad7fc5acede0b"
    text: {When you say that `collect` is the same as `catch/throw`, it's just not true. Their behavior and purpose are completely different. }
    sent: "2016-08-12T21:26:57.637Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae3e94625cb3d845424549"
    text: {@Vexercizer, I'm sorry if I offended you. Right now, there is a lot of deeper technical discussion about Red, and we don't know what level anyone is at when we first meet. When I'm here, I'm in technical mode and try to use language that will help us discuss things efficiently and accurately. We're all about dialects. :^^)^/^/If someone says they're new to programming, we try to point them to resources that will help. ^/^/Am I biased about words I choose? You bet. So ignore my vote. Consider that `collect` passed muster, as a word for this behavior, and became part of Rebol. No small feat. We battle the merits of words more than any other language I know. You may note that my original *design* for `collect` did *not* make the grade. I think it was Gabriele Santilli who devised the `keep` approach, and it won.}
    sent: "2016-08-12T21:24:36.249Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae3e6c625cb3d8454244e0"
    text: {I've probably never read such amount of disrespect in one longish post here ...}
    sent: "2016-08-12T21:23:56.752Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae3e5c6cd7d05c37c25813"
    text: {@Vexercizer Hmmm... CATCH and THROW are already used for something  else, standardized in many other languages besides Rebol.^/Also, Rebol didn't fail to **COLLECT** users because of its usage of weird names. First time I hear something so blatantly false.}
    sent: "2016-08-12T21:23:40.441Z"
    editedAt: "2016-08-12T21:25:58.728Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae3e1446a301fa5a4a7c38"
    text: {@Vexercizer - I tend to be a direct person, so - your remarks are plain arrogant, sorry. If you want to attack ppl here, please go elsewhere.}
    sent: "2016-08-12T21:22:28.789Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae3d60418e6fc44cfa50eb"
    text: {Lotus 1-2-3 and dBase II succeeded? Maybe you should add FoxPro or other successful technology to the equation. You attack Rebol/Red, its creators, yet you admit you don't understand its internals? :-)}
    sent: "2016-08-12T21:19:28.592Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ae3c1d364ad7fc5aced768"
    text: {Also @Vexercizer, I have a `for` REP out there, since you mentioned that earlier.}
    sent: "2016-08-12T21:14:05.315Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57ae3beeaee33d7241e903b2"
    text: {@greggirwin You believe those are fine words because you created it. Those are not fine words if those words fail to lead to intuitive understanding. And that is what happens exactly. There is nothing intuitive about `COLLECT` with `KEEP` ^/^/As far as `COLLECT` goes from a user perspective, the function works exactly the same as `CATCH` and `THROW`, except it gathers results into a block.  Sure, it lets one modify the acted upon block as well. However, it matters not what the internals are. ^/^/REBOL failed because Carl pandered to computer science nerds instead of businessmen. LOTUS 1-2-3, Excel and dBASE II all succeeded because the makers devised these tools for commercial men and women.^/^/Had someone only said to me, "`COLLECT` and `KEEP` is merely `CATCH` and `THROW` that modifies the same block and that `/into` lets you write a new block," I would have gotten it instantly. ^/^/Instead, a bunch of dummies all over the Internet who have tried to pass themselves off as erudite by spewing jargon needlessly have only revealed their own intellectual failings.^/^/It matters not if RED actually allocates a new C user-defined object and puts data into a slot to track things.  I do not know REBOL/RED internals. I do not need to know how Carl and now Nenad have written the interpreter to use interpreter and the high-level language to make that interpreter work as a virtual computer layer over my actual computer. ^/^/And so the problem that plagued REBOL people persists in RED people. ^/^/The goal should be to develop and explain a language so those of modest, but usable intellects (IQ 115 to 120) can grasp the language and do real world business programming in days.^/^/Real word people do not speak words such as *iterating* or *predicate*. Few care about comp sci and philosophy department buzzwords. Most of us focus on results and not meaningless jargon nerd fests.^/^/@rgchris is right. An `\all` refinement added to catch would have been so much clearer providing such could have been done internally.^/^/Anyway, thanks for your help, Gregg. ^/}
    sent: "2016-08-12T21:13:18.428Z"
    editedAt: "2016-08-12T21:15:12.272Z"
    v: 3
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae35f80fd99f7041367b26"
    text: {`Collect/keep` are fine words for this, IMO. `Catch/throw` have an entirely different purpose (non-local flow control). `Filter` has a specific meaning in functional circles, and I would avoid aliasing a well known func to it. I have various `filter` funcs, but all of them work on the same basic premise of iterating over a series and applying a predicate func to produce a filtered result.^/^/The doc string for `collect` states its behavior clearly. }
    sent: "2016-08-12T20:47:52.858Z"
    editedAt: "2016-08-12T20:51:52.096Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae2e6caee33d7241e8e2f9"
    text: "@rgchris Yes! Gotta catch 'em all!™^/"
    sent: "2016-08-12T20:15:40.420Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae2e4d0fd99f70413669ca"
    text: "@Vexercizer Ah, like **catch/all** : )  Maybe..."
    sent: "2016-08-12T20:15:09.222Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae2e07aee33d7241e8e261"
    text: {```lisp^/parse [blue] remove collect [^/    foreach colour [red green blue][^/        keep '|^/        keep to lit-word! colour^/    ]^/] ^/```^/*(don't know how to currently do `to lit-word!` in Red, perhaps `load join "'" colour`)*}
    sent: "2016-08-12T20:13:59.340Z"
    editedAt: "2016-08-12T20:19:19.526Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae2dfe0fd99f704136692a"
    text: {@rgchris Yes, I see, but why was not `CATCH` and `THROW` modified to do what `COLLECT` does rather than add  `COLLECT` to the language?^/}
    sent: "2016-08-12T20:13:50.938Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae2d790fd99f7041366831"
    text: {Doesn't really work the same way:^/```lisp^/catch [foreach thing source [throw thing]]^/```}
    sent: "2016-08-12T20:11:37.775Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae2d20a00c6adb45e1d5f5"
    text: {@greggirwin @rgchris ^/^/All right, so ...^/^/```^/red>> a^/== [red green blue black]^/red>> catch [if equal? A/1 'red [throw a/1]]^/== red^/```^/^/and ^/^/```^/red>> collect [if equal? A/1 'red [keep a/1]]^/== [red]^/red>> ^/```^/^/So why `COLLECT` at all?  Couldn't `CATCH ` have gotten an `/into` refinement?^/^/}
    sent: "2016-08-12T20:10:08.750Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae2c34625cb3d845421835"
    text: {@rgchris Nice. English of Old English is so much nicer than ugly Latinate English (e.g., gather (OE) vs collect (OF) by way of Latin).^/}
    sent: "2016-08-12T20:06:12.948Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae2b5caee33d7241e8dbe3"
    text: {I'd a similar pre-collect function called **gather**.}
    sent: "2016-08-12T20:02:36.225Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae299c364ad7fc5ace9f42"
    text: {> I use **Collect** in some cases to build a block of code to evaluate.^/^/So really, `COLLECT` it is more like `CATCH` and `THROW` with the  `/into` refinement identifying a new series. It is not really like MAP-EACH at all. ^/^/`HOARD`, `AMASS`, `GRAB` would have been alternative words. ^/^/```^/red>> j: 55.55.55^/== 55.55.55^/red>> hoard/into  [if not-equal? H/1 j [keep j]] h^/== [11.11.11 22.22.22 33.33.33 44.44.44 55.55.55]^/```^/As an alternative, `KEEP` should have been the function name and `GRAB` or `THIS` should have been the word identifying what should be kept.^/}
    sent: "2016-08-12T19:55:08.411Z"
    editedAt: "2016-08-12T19:58:18.873Z"
    v: 3
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae25d9364ad7fc5ace96cd"
    text: {**Filter** may be appropriate if that's all you'd use it for (be a good synonym for **Remove-Each**). I use **Collect** in some cases to build a block of code to evaluate. `do collect [keep 'print either now/time > 12:00 [keep "Good Afternoon"][keep "'Morning"]]` (yeah, there's other ways to do that, but has more subtle applications).}
    sent: "2016-08-12T19:39:05.314Z"
    editedAt: "2016-08-12T19:43:07.665Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae256b364ad7fc5ace9488"
    text: {@greggirwin @rgchris Thanks much for your replies. I will play with `COLLECT` now in different ways than I had understood it. ^/^/Maybe it is the word COLLECT that has thrown me off. From your fine explanations and examples I see it as this:^/^/Using the contents of an existing block,  either conditionally enrich, compound, inject into it or into another block, or extract from it into another block.^/^/`FILTER` would have been a better word for me. In fact, likely I will alias it in my code to `FILTER`.^/^/Thanks.^/^/^/}
    sent: "2016-08-12T19:37:15.839Z"
    editedAt: "2016-08-12T19:39:01.672Z"
    v: 2
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae243a418e6fc44cfa10e7"
    text: {Sorry if that doesn't make sense, you can see the difference if you *compare* this in [Try Rebol](try.rebol.nl):^/```lisp^/out: copy []^/collect/into [keep "one" keep "two"] out^/collect/into [keep "three"] out^/collect/into [keep "four" keep "five"] out^/probe out^/```}
    sent: "2016-08-12T19:32:10.172Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae239a364ad7fc5ace9026"
    text: {Except—unlike **append**, Rebol doesn't start at the tail. The new values are added at the beginning. Red uses **append** from the outset which is likely to offer fewer surprises.}
    sent: "2016-08-12T19:29:30.768Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae2340aee33d7241e8c739"
    text: {Actually, the Rebol version does use **insert**, it's just that it sets the output block to the position after the insert for next round. Effectively an **append**.}
    sent: "2016-08-12T19:28:00.557Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae22cd0fd99f7041364ce5"
    text: {@rgchris And that is the kind of cognitive overload I see to avoid. I do not think of weights as everything is an ounce and a pound is merely 16 ounces. I think of a pound as a pound.^/^/So, I think of append as add to the end. I think of insert as add to the front. ^/^/}
    sent: "2016-08-12T19:26:05.405Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae22a146a301fa5a4a34de"
    text: {**collect** is a mezzanine though, so you can do **source collect** to see what's actually going on.}
    sent: "2016-08-12T19:25:21.940Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae223eaee33d7241e8c3fd"
    text: {**append** is kind of a shorthand for **insert tail** (although it's somewhat optimised these days).}
    sent: "2016-08-12T19:23:42.236Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae21ce364ad7fc5ace8b63"
    text: {@rgchris http://stackoverflow.com/questions/21812601/rebol-collect-keep-the-order-of-the-source-data-in-a-loop^/^/Answer (3) beginning with :^/^/>All functions in Rebol which use the /into option use insert semantics. We added that option to allow incremental building without needing to make as many intermediate series, and to allow you to pick the type of target series, preallocate, and all sorts of other power user tricks. The /into option uses insert semantics because insert doesn't lose as much information as append.^/^/Running your foregoing example @rgchris, collect/into seems to `append` and not `insert`, If it were  an `insert` as stated by Brian Hawley, then would not your example result in this:^/^/```^/["yellow" "brown" "red" "green"]^/```^/ }
    sent: "2016-08-12T19:21:50.926Z"
    editedAt: "2016-08-12T19:23:16.050Z"
    v: 2
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae20f8364ad7fc5ace8985"
    text: "Same question as Chris. "
    sent: "2016-08-12T19:18:16.257Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae2046364ad7fc5ace87a8"
    text: "What is the example?"
    sent: "2016-08-12T19:15:18.929Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae1fb4418e6fc44cfa05e0"
    text: {@greggirwin Oh I see, so the example of `COLLECT` I found on stackoverflow is useless. The way to use `COLLECT` is to embed a conditional loop inside it, that is, to get the most from it?^/^/}
    sent: "2016-08-12T19:12:52.772Z"
    editedAt: "2016-08-12T19:13:17.203Z"
    v: 2
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae1faaa00c6adb45e1b252"
    text: {@Vexercizer ^/^/```lisp^/source1: ["red" "green" "blue"]^/source2: ["yellow" "purple" "brown"]^/out: copy []^/collect/into [foreach item source1 [if find item "r" [keep item]]] out^/collect/into [foreach item source2 [if find item "w" [keep item]]] out^/probe out^/```}
    sent: "2016-08-12T19:12:42.321Z"
    editedAt: "2016-08-12T19:16:09.464Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae1f38625cb3d84541f6a1"
    text: {```^/data: [a b c]^/collect/into [keep 'x] data^/```}
    sent: "2016-08-12T19:10:48.697Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae1eda46a301fa5a4a2a5a"
    text: {@rgchris  Thanks. I would need to put real data in your example to see what is happening. ^/}
    sent: "2016-08-12T19:09:14.870Z"
    v: 1
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae1ed1364ad7fc5ace83d6"
    text: {So, yes, `/into` is simply an optimization, using a series you already have as an accumulator, to avoid allocating a new one.}
    sent: "2016-08-12T19:09:05.093Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae1d99ae0554d04c938bbc"
    text: {> So one should see COLLECT/into as a MAP-EACH this but without the data and the body?^/^/No. `collect` is much more flexible in that you can call `keep | keep/only` anywhere in the body. Where `map-each` collects the result of the body block's evaluation. i.e., `map-each` is easily implemented with collect like this:^/^/```^/map-each: function [^/^-"Evaluates body for each value in a series, returning all results."^/^-'word [word! block!] "Word, or words, to set on each iteration"^/^-data [series!] ; map!^/^-body [block!]^/][^/^-collect [foreach :word data [keep/only do body]]^/]^/^/```^/^/But you can do anything in your `collect` body, without any iteration at all. I think of `collect` as a way to gather things into a result without having to track the series I'm appending into. e.g., in your example code you have a `final` series you append into, but I don't see it defined. As you change code, it's easy to put things in the wrong place, or to have to repeat the series name in every `append` call. `collect` helps with that. ^/^/I should add that I very rarely use `/into`, and my original design used a set-word! rather than the implicit `keep` function. I still have my old one, which I now call `collect-each`.^/}
    sent: "2016-08-12T19:03:53.100Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae1d88ae0554d04c938b91"
    text: {@Vexercizer Presumably `collected` would be a block you already have that might have other values from a previous collection or aggregation. Where it'd spare some repetition is here:^/^/```rebol^/collection: collect [foreach thing source1 [keep thing]]^/collect/into [foreach thing source2 [keep thing]] collection^/```^/^/If you were to `append collection collect [foreach thing source2 [keep thing]]`, you'd be creating a whole other block before doing your append.}
    sent: "2016-08-12T19:03:36.572Z"
    editedAt: "2016-08-12T19:06:15.987Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "57ae1d080fd99f7041363b58"
    text: {@greggirwin To clarify the foregoing, I do not see `COLLECT` as a `MAP-EACH` at all.  Is `COLLECT` mapping a function over a series? Is not `COLLECT` parsing a dialect as it traverses a series looking for a `COLLECT` dialect word `KEEP` and saving what follows?^/^/`COLLECT` seems that it should work like `WRITE`, `INSERT`, `APPEND`, `REPEND`, `ALTER`.^/^/If I have this: ^/^/```^/red>> a: [red green blue black]^/== [red green blue black]^/red>> collect [ keep first a]^/== [red]^/red>> collect/into [ keep first a] temp^/*** Script Error: temp has no value^/*** Where: collect^/```^/^/I still seem forced to do this:^/^/```^/red>> temp: copy []^/== []^/red>> collect/into [ keep first a] temp^/== [red]^/red>> temp^/== [red]^/```^/^/or^/^/```^/red>> temp: Copy []^/== []^/red>> collect/into [ keep first a keep third a]  temp^/== [red blue]^/```^/^/Maybe I do not get it at all. ^/}
    sent: "2016-08-12T19:01:28.099Z"
    editedAt: "2016-08-12T19:02:02.364Z"
    v: 3
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae1bdba00c6adb45e1a9ee"
    text: ""
    sent: "2016-08-12T18:56:27.824Z"
    editedAt: "2016-08-12T19:05:31.588Z"
    v: 3
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae14a3625cb3d84541da5f"
    text: {@greggirwin All right.  So one should see COLLECT/into as a MAP-EACH this but without the data and the body?^/^/MAP-EACH 'word data body /into output^/^/```^/temp:  copy []^/map-each/into x [[1 2 3] [4 5 6] [7 8 9]] [apply :reduce maximum^/-of x] temp^/```^/^/I see MAP-EACH as thus: for each thing of a things block, do an undeclared function, i.e., a block of code, to the thing. It seems powerful but I have yet to come across of a way to use it.^/^/What is the real advantage of using COLLECT?  When I use COLLECT, in my mind, I must think "it is a reverse foreach where undeclared function goes first and a word goes after.^/^/Here are two snips of alternative versions of code that do the same thing for me. ^/^/```^/foreach [o1 o2] sub^/^-^-^-;; omitted code ...^/^-^-^-^-temp: collect/into [^/^-^-^-^-^-keep o1^/^-^-^-^-^-keep either isnt? o2 none [^/^-^-^-^-^-^-^-reduce [ round/to o2 / dval .0001 ]^/^-^-^-^-^-^-][^/^-^-^-^-^-^-0^/^-^-^-^-^-]^/^-^-^-^-] temp^/^-^-^-;; omitted code ...^/]^-;;-foreach^-^-^-^/```^/^/and^/^/```^/forall b [^/^-^-^-temp: copy []^-^/^-^-^-;; omitted code ...^/^-^-^-either^-isnt? temp/2 none [ ^/^-^-^-^-^-dval: temp/2 / 100^/^-^-^-^-^-append final round/to b/1/2 / dval .0001^/^-^-^-^-][^/^-^- ^-^-^-0^/^-^-^-^-] ;;- either ^/^-^-^-^-;; omitted code ...^/]^-;;-forall^/```^/^/I know that you wrote a COLLECT script and shared it to REBOL.org. I assume that is how it made its way into the REBOL exec. In your commentary you called this a dance:^/^/```^/temp: copy []^/foreach j block [append temp j]^/```^/MAP-EACH seems to fit with the pattern of FOREACH and REMOVE-EACH:^/^/FOREACH word data body, REMOVE-EACH word data body^/^/In succession, it seems easy to recall these by groups:^/^/forever body^/until block^/^/forall word body^/forskip word skip-num body^/^/while cond-block body-block^/^/The odd one out for me, besides COLLECT/INTO is:  for word start end bump body. Likely, that is why rarely, if ever I use it. ^/^/COLLECT body does not seem like FOREVER body or UNTIL body. And COLLECT/INTO does not seem like  MAP-EACH/into.^/}
    sent: "2016-08-12T18:25:39.886Z"
    editedAt: "2016-08-12T18:26:43.809Z"
    v: 3
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae0855364ad7fc5ace4595"
    text: ""
    sent: "2016-08-12T17:33:09.765Z"
    editedAt: "2016-08-12T17:33:15.269Z"
    v: 2
    author: "571bdf82659847a7aff43357"
) #(
    id: "57ae075dae0554d04c9351f2"
    text: {Nenad has thoughts on an HOF design model for Red, and there has been some discussion about that. e.g., should it use a standard accumulator model? ^/^/It's really nice that people pay attention to these details and raise questions like this. }
    sent: "2016-08-12T17:29:01.324Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae067446a301fa5a49e6d6"
    text: {`Collect` is like a `map` function, in that it returns a new series by default. Being able to collect into an existing series is an optimization. Since the target series is a parameter of the `/into` refinement, it can't come first. i.e., it's an optional argument.}
    sent: "2016-08-12T17:25:08.346Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae00d5364ad7fc5ace32ca"
    text: {Can someone explain the design rationale  behind COLLECT as: COLLECT/into body collected?^/^/Other functions adhere to a consistent principle: WORD series value. Examples:  write destination data, append series value, insert series value, alter series value, repend series value. ^/^/The current design of COLLECT adds to the cognitive load of learning RED. Should not it be this: COLLECT/into collected body? ^/^/Design consistency is elegant. COLLECT as it stands is inelegant. ^/^/^/}
    sent: "2016-08-12T17:01:09.640Z"
    editedAt: "2016-08-12T17:05:25.970Z"
    v: 6
    author: "571bdf82659847a7aff43357"
) #(
    id: "57adfe8c364ad7fc5ace2ceb"
    text: ""
    sent: "2016-08-12T16:51:24.391Z"
    editedAt: "2016-08-12T16:51:51.213Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57adfe73364ad7fc5ace2c5a"
    text: "Didn't know about it:))."
    sent: "2016-08-12T16:50:59.299Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57adfe21aee33d7241e864f3"
    text: "^/OTOH, `type?  () => unset!`"
    sent: "2016-08-12T16:49:37.609Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57adfde546a301fa5a49d25e"
    text: "Yes, `quote () => ()` with type `paren!`"
    sent: "2016-08-12T16:48:37.474Z"
    editedAt: "2016-08-12T16:48:47.298Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57adfa7346a301fa5a49c958"
    text: {Oh, you are actually trying to quote `()` ? I think it's not possible}
    sent: "2016-08-12T16:33:55.291Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57adfa640fd99f704135db87"
    text: "I guess it's fine:)."
    sent: "2016-08-12T16:33:40.318Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57adf9feaee33d7241e8576b"
    text: {```^/red>> quote2: :quote1^/== func ['val][val]^/red>> quote1 (quote2)^/*** Script Error: quote2 is missing its 'val argument^/*** Where: quote2^/```^/looks fine to me, unless that's not how it's supposed to work?}
    sent: "2016-08-12T16:31:58.193Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57adf8b7625cb3d845418fff"
    text: {context: #2171.^/Don't know if it's ok.^/`quote1 quote1 => quote1`^/`quote1 (quote1) => missing an argument`}
    sent: "2016-08-12T16:26:31.294Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57adcb45f7f11a7936b8d7a9"
    text: {@WiseGenius yea, I noticed that make copied other mutable structures but excluded objects.  I would like to hear Doc's opinion on the matter.}
    sent: "2016-08-12T13:12:37.497Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57adb876ae838f6f569a3478"
    text: {Well, I really don't know, why do I remember stuff I don't even properly undestand :-)}
    sent: "2016-08-12T11:52:22.642Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57adb496ff82b9fc7e782028"
    text: "@pekr Thanks. You have a fantastic memory."
    sent: "2016-08-12T11:35:50.952Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ad9d09f7f11a7936b86a54"
    text: {Not sure it is related (pressed for time here), but Carl devoted some 3 blog articles to that topic. Here's his "conclusion" one: http://www.rebol.net/r3blogs/0241.html}
    sent: "2016-08-12T09:55:21.322Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57ad912946610f1739549ef6"
    text: {@WiseGenius Your wish is requesting a significant change in behaviour. I'm sure that much thought was given by Carl before deciding upon the behaviour of ```copy/deep``` and that Nenad has not just followed that design but has also given much thought to the matter.^/^/I am not saying that your proposal is without merit but that the arguments both for and against need to be fully considered. I feel that a [Red Enhancement Proposal](https://github.com/red/red/wiki/Red-Enhancement-Proposal-Process) would be more appropriate for your proposal in this case.}
    sent: "2016-08-12T09:04:41.846Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ad8f0946610f1739549a7f"
    text: ""
    sent: "2016-08-12T08:55:37.492Z"
    editedAt: "2016-08-12T09:00:36.904Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
)#(
    id: "57ad826107d5cea43a270fcb"
    text: {@PeterWAWood [My latest comment](https://github.com/red/red/issues/2167#issuecomment-239384787) clarifies things a lot better.}
    sent: "2016-08-12T08:01:37.954Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ad6ee9613cc180367c6353"
    text: "@WiseGenius Thanks for that clarification"
    sent: "2016-08-12T06:38:33.715Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ad6b7af157d5c0119f67b1"
    text: {@greggirwin `x: tail copy 3`  *should* fail. But it should fail because of `tail`, and not because of `copy` in the same way that `x: tail 3` would fail.}
    sent: "2016-08-12T06:23:54.205Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ad5dd4bc688a1339116ff4"
    text: {`Tail` only works on series values. If `copy` transparently returns any type passed to it `tail` will fail on any non-series type. Or, if *it* doesn't fail, what should the result be? e.g. `x: tail copy 3`}
    sent: "2016-08-12T05:25:40.347Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ad54a207d5cea43a270e16"
    text: {@greggirwin Probably because I've never used `tail`, I'm having trouble seeing why chaining it with my version of `copy` in [my latest wish](https://github.com/red/red/issues/2169#issuecomment-239264875) would not work. Would you mind please giving me an example?}
    sent: "2016-08-12T04:46:26.247Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ad5440f157d5c0119f66dd"
    text: "@meijeru Thanks."
    sent: "2016-08-12T04:44:48.409Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ad51502332080b69525b1b"
    text: {> ```make``` does not perform a copy so ```a/a``` and ```b/a``` are bound to the same value.^/^/@PeterWAWood @JacobGood1 Although `make` doesn't copy inner `map!`s and `object!`s, it does copy inner `string!`s and `block!`s:^/^/Given the following code using `make`:^/```^/o1: make object! [a: "1" c: #(d 1) e: [f 1] g: make object! [h: 1]]^/o2: make o1 []^/o2/a/1: #"2"^/o2/c/d: 2^/o2/e/f: 2^/o2/g/h: 2^/```^/^/Current result:^/```^/red>> ?? o1^/o1: make object! [^/    a: "1"^/    c: #(^/        d: 2^/    )^/    e: [f 1]^/    g: make object! [^/        h: 2^/    ]^/]^/```^/^/This is the same behaviour as the current `copy/deep`. See the result of `o1` in [my wish](https://github.com/red/red/issues/2167).}
    sent: "2016-08-12T04:32:16.031Z"
    editedAt: "2016-08-12T04:32:39.602Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57acd16616b0696856adc142"
    text: {@WiseGenius I commented on your wish re copying #2169.}
    sent: "2016-08-11T19:26:30.103Z"
    editedAt: "2016-08-11T19:26:57.033Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57aca29feb431e4121874d58"
    text: {@meijeru In Rebol 3, `/types` accepts both `datatype!` and `typeset!`. I expect Red will too. I might have used `typeset!` in my example but I wanted to rather draw attention to the error message just in case it was related to #1154. Doesn't look like it, though.}
    sent: "2016-08-11T16:06:55.774Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ac9ecdf7f11a7936b61861"
    text: {@dockimbel The name of the `/types` refinement suggests that more than one type can be specified, hence the corresponding argument could be a typeset rather than a single datatype, wouldn't you agree?? @WiseGenius probably thought the same when he supplied a block of types, but that is of course much less efficient than a typeset.}
    sent: "2016-08-11T15:50:37.953Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57ac9d7977dd6adc25838987"
    text: {@dockimbel It was `map!`^/```^/red>> m: copy/deep/types #()                map!^/== #()^/```^/Yes, I did notice `map!` was the odd one out among the few I tried:^/```^/red>> s: copy/deep/types ""                string!^/*** Internal Error: reserved for future use (or not yet implemented)^/*** Where: copy^/red>> o: copy/deep/types make object! []    object!^/*** Internal Error: reserved for future use (or not yet implemented)^/*** Where: copy^/red>> b: copy/deep/types []                block!^/*** Internal Error: reserved for future use (or not yet implemented)^/*** Where: copy^/```}
    sent: "2016-08-11T15:44:57.598Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ac99e9ff82b9fc7e75a2ed"
    text: {@WiseGenius `copy/types`: might be caused by the fact that `/types` is not implemented. What is the type of `y`? For series argument a "not implemented" error should occur, but for other types, that fallback might be missing.}
    sent: "2016-08-11T15:29:45.526Z"
    editedAt: "2016-08-11T15:32:36.454Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ac94d95afb7b641109d1ff"
    text: {@qtxie I can use the latest Red again now, thanks!}
    sent: "2016-08-11T15:08:09.989Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ac820dae838f6f56974d03"
    text: {okey, I just tried and this worked:^/```^/>> d: 10-Aug-2016^/== 10-Aug-2016^/>> d/month: d/month + 5 d^/== 10-Jan-2017^/```}
    sent: "2016-08-11T13:47:57.816Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ac816b46610f173952136c"
    text: {for example: there are dates, and one can do days arithmetic with them. but what if one wants to add/subtract months? years?}
    sent: "2016-08-11T13:45:15.244Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ac8138f7f11a7936b5ba2d"
    text: {there are a lot of builtin datatypes in Rebol, but how practical this appoach is?}
    sent: "2016-08-11T13:44:24.700Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ac71870f88cdfe20adcbd6"
    text: {I think this error is about the wrong refinement:^/```^/red>> x: copy/types y [map! object! block!]^/*** Script Error: copy does not allow block! for its /part argument^/*** Where: copy^/```}
    sent: "2016-08-11T12:37:27.319Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ac6e95ae838f6f56970ee7"
    text: {@qtxie ^^--- You need to conditionally import the DirectX lib, excluding WinXP.}
    sent: "2016-08-11T12:24:53.976Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ac6dc70f88cdfe20adcb64"
    text: {[![D2D1.PNG](https://files.gitter.im/red/red/xGnY/thumb/D2D1.png)](https://files.gitter.im/red/red/xGnY/D2D1.PNG)}
    sent: "2016-08-11T12:21:27.479Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ac6db90f88cdfe20adcb60"
    text: {@dockimbel Trying to open the latest build of Red gives me the following message:}
    sent: "2016-08-11T12:21:13.546Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57ac6cc946610f173951d1c5"
    text: "ok"
    sent: "2016-08-11T12:17:13.815Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57ac6806ff82b9fc7e750574"
    text: {I do use IDA since the beginning of the work on Red, it's a great tool, but the selling process is the oddest one I've ever seen (you need to use a PGP key to send your order by encrypted email to the author....). Given also the very high price, I stick to the trial version, which is enough for my needs.}
    sent: "2016-08-11T11:56:54.407Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ac4c5eae838f6f5696b945"
    text: {...if this guy is rich! IDA pro + all the 5 decompilers in named licence for windows platform ~= 8000 USD.}
    sent: "2016-08-11T09:58:54.485Z"
    editedAt: "2016-08-11T10:05:20.766Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ac466e16b0696856ac2807"
    text: {In his presentation, it use [IDA](https://www.hex-rays.com/products/ida/) to reverse engenering program. It's not my tea cup, but this kind of tools might be awesome for one that build a compiler ;-)}
    sent: "2016-08-11T09:33:34.278Z"
    editedAt: "2016-08-11T09:33:52.095Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57abbba3613cc180367863c9"
    text: {@geekyI, that data visualization video is amazing. Thanks for posting it.}
    sent: "2016-08-10T23:41:23.161Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57abb5ceff82b9fc7e73861e"
    text: "👍👍"
    sent: "2016-08-10T23:16:30.179Z"
    v: 1
    author: "556e664e15522ed4b3e15324"
) #(
    id: "57abb5aaae838f6f56957e2a"
    text: "Cool Greg!!! "
    sent: "2016-08-10T23:15:54.446Z"
    v: 1
    author: "556e664e15522ed4b3e15324"
) #(
    id: "57ab8e6016b0696856aa95e1"
    text: {@JacobGood1, maybe what @lepinekong_twitter is thinking is "Red for JS programmers" or "Red for C# programmers". Things to help them get started, based on a language they know. }
    sent: "2016-08-10T20:28:16.280Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ab8d50bc688a13390d39a1"
    text: {:point_up: [August 10, 2016 11:22 AM](https://gitter.im/red/red?at=57ab62f116b0696856aa1b54)^/```^/use: func [^/^-"Defines words local to a block evaluation."^/^-vars [block!] "Words local to the block"^/^-body [block!] "Block to evaluate"^/][^/^-; Renaud Gombert's simple approach^/^-do has vars body^/]^/```}
    sent: "2016-08-10T20:23:44.617Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ab8cfb16b0696856aa911c"
    text: {:point_up: [August 10, 2016 10:46 AM](https://gitter.im/red/red?at=57ab5a62ae838f6f56948a63)^/>  would you not say that there are nuanced differences from javascript?^/^/Absolutely. I was trying to answer the question in general.}
    sent: "2016-08-10T20:22:19.162Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ab8b08613cc1803677f16b"
    text: {@lepinekong_twitter the only other language that would be decently comparable would be lisp, which, would probably be counter productive for code example comparison}
    sent: "2016-08-10T20:14:00.091Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ab86fe46610f17394fd765"
    text: {@dockimbel I think that for people foreign to red like me (and not an expert at coding) it would be great to have comparison of red examples side by side with how other languages would do like this guy did for javascript http://genius.com/Mat-brown-javascripts-purer-object-orientation-annotated}
    sent: "2016-08-10T19:56:46.384Z"
    v: 1
    author: "57a1e5ed40f3a6eec05dbd3e"
) #(
    id: "57ab7b65ff82b9fc7e72f92d"
    text: {More links on [reddit](https://www.reddit.com/r/ReverseEngineering/comments/1izity/cantordust_a_binary_visualization_tool)}
    sent: "2016-08-10T19:07:17.246Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ab7aebbc688a13390d088a"
    text: {In summary; it uses the same techniques as [conti](https://www.blackhat.com/presentations/bh-usa-08/Conti_Dean/BH_US_08_Conti_Dean_Visual_Forensic_Analysis.pdf) - digraphs; and [cortesi](http://binvis.io) - hilbert curve for cluster analysis and using techniques like entropy. He then further extends it to higher dimensions}
    sent: "2016-08-10T19:05:15.684Z"
    editedAt: "2016-08-10T19:05:32.300Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57ab79cdbc688a13390d05ca"
    text: {I was looking at different techniques of binary visualization (and making sense of it in general); I usually use http://binvis.io by https://corte.si^/Came across this: https://www.youtube.com/watch?v=4bM3Gut1hIk^/Seems to be an amalgamation of different techniques.. hoping to have something similar in RED in the future}
    sent: "2016-08-10T19:00:29.354Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ab6cde77c9373812033f51"
    text: {Well, pretty half the "Thanks" I get: It's just pointing out already existing functions. Easy won Karma ;-)}
    sent: "2016-08-10T18:05:18.602Z"
    editedAt: "2016-08-10T18:06:34.278Z"
    v: 4
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ab6c1946610f17394f8f84"
    text: "I did not know there was an exclude, ty"
    sent: "2016-08-10T18:02:01.383Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ab6b6c5288c40a1dcc0f17"
    text: {**exclude** already does that. So, there is no need for /exclude refinement.^/>> bind exclude [x y z] [y z] [x: 1 y: 2 z: 3]^/^/It does what you expect.}
    sent: "2016-08-10T17:59:08.497Z"
    editedAt: "2016-08-10T18:00:01.567Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ab6a67ff82b9fc7e72cb13"
    text: {also meant to write bind/exclude `[x y z] [y z] object [x: 1 y: 2 z: 3]`^/but I am sure yall knew that =)}
    sent: "2016-08-10T17:54:47.581Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ab6a2216b0696856aa2ee0"
    text: {guess I could have looked that up myself... thanks}
    sent: "2016-08-10T17:53:38.272Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ab69ec72b0dc244e03b08c"
    text: "Bind can take a word! as argument."
    sent: "2016-08-10T17:52:44.730Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ab66d3ff82b9fc7e72c0fc"
    text: {Is there a way(a clean way, I thought of a dirty way) to bind words in a block selectively?  For example:^/^/`bind [x y z] object [x: 1 y: 2 z: 3]`^/^/in this example x y and z would be bound to 1 2 3 respectively.^/^/I would like to only bind x and exclude the other words.^/^/`bind/exclude [x y z] [y z] [x: 1 y: 2 z: 3]`}
    sent: "2016-08-10T17:39:31.538Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ab62f116b0696856aa1b54"
    text: {Is there a synonymous function in Red to USE from Rebol?}
    sent: "2016-08-10T17:22:57.289Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ab5a62ae838f6f56948a63"
    text: {@greggirwin would you not say that there are nuanced differences from javascript?  Such as the fact that altering a prototype in js will filter through all objects generated from that prototype.  Also red objects can be used for binding contexts... one of those easy yet hard concepts to learn.}
    sent: "2016-08-10T16:46:26.685Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ab58edd7087a017fa961a3"
    text: {`.red` | `.reds` are standard suffixes for Red|Red/System  files?}
    sent: "2016-08-10T16:40:13.845Z"
    editedAt: "2016-08-10T16:40:53.096Z"
    v: 3
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57ab550d16b0696856a9f075"
    text: "thanks"
    sent: "2016-08-10T16:23:41.480Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57ab54bcae838f6f5694787c"
    text: "Yes. The original design model came from Self."
    sent: "2016-08-10T16:22:20.656Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ab5294613cc18036774f6e"
    text: {im' reading docs about Rebol's Objects...it looks to me like prototype-based OOP ala Javascript (as much as i know about JS), is it (including Encapsulation etc.) same in Red?}
    sent: "2016-08-10T16:13:08.606Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57ab05d0bc688a13390bb2d3"
    text: "@planetsizecpu  Good! :+1: "
    sent: "2016-08-10T10:45:36.612Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ab029af7f11a7936b1f99b"
    text: {[![blob](https://files.gitter.im/red/red/ySKN/thumb/blob.png)](https://files.gitter.im/red/red/ySKN/blob)}
    sent: "2016-08-10T10:31:54.733Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
)#(
    id: "57ab0216bc688a13390baa63"
    text: {@dockimbel  It seems to work fine, area is reacting to changes, I will continue work of learning! thx^/}
    sent: "2016-08-10T10:29:42.154Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aa9725ae838f6f5692a286"
    text: {Thanks @dockimbel.  I actually just happened upon that a few minutes ago.}
    sent: "2016-08-10T02:53:25.844Z"
    v: 1
    author: "556c8f7d15522ed4b3e13fea"
) #(
    id: "57aa960a613cc18036757f89"
    text: {@DarrellBrogdon The splitting feature of Parse in Rebol has been moved to `split` function in Red.}
    sent: "2016-08-10T02:48:42.635Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57aa4ec4ccadff3c433f7967"
    text: {Alternative:^/red>> load replace/all {"foo" "bar" "baz"} {"} ""^/== [foo bar baz]}
    sent: "2016-08-09T21:44:36.707Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57aa4a9c613cc1803674e4ab"
    text: "@SteeveGit Thanks!"
    sent: "2016-08-09T21:26:52.111Z"
    v: 1
    author: "556c8f7d15522ed4b3e13fea"
) #(
    id: "57aa4921245121f324bc4db5"
    text: {red>> load form load {"foo" "bar" "baz"}^/== [foo bar baz]}
    sent: "2016-08-09T21:20:33.144Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57aa4730245121f324bc4dac"
    text: ""
    sent: "2016-08-09T21:12:16.854Z"
    editedAt: "2016-08-09T21:18:33.253Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57aa4602d7087a017fa6cc46"
    text: "Rebol's to-block doesn't work either."
    sent: "2016-08-09T21:07:14.959Z"
    v: 1
    author: "556c8f7d15522ed4b3e13fea"
) #(
    id: "57aa45f6613cc1803674d81c"
    text: {I tried ```parse {"foo" "bar" "baz"} none``` and ```parse {"foo" "bar" "baz"} []``` but that didn't work.}
    sent: "2016-08-09T21:07:02.445Z"
    v: 1
    author: "556c8f7d15522ed4b3e13fea"
) #(
    id: "57aa45bfae838f6f5691faa2"
    text: {Is it possible yet to convert a string into a block in Red?}
    sent: "2016-08-09T21:06:07.910Z"
    v: 1
    author: "556c8f7d15522ed4b3e13fea"
) #(
    id: "57a9e3d0bc688a133908f93b"
    text: {Writing micro-kernels for all the small boards around is beyond our current resources, it's up to the community to do that.}
    sent: "2016-08-09T14:08:16.951Z"
    editedAt: "2016-08-09T14:08:25.141Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a9e36816b0696856a65377"
    text: {@maximvl Well, it's there for someone to pick it up and write a loader for Red/System code, we could add some more features to Red/System to cover it fully. If you want to run Red in such scenario, you still have some extra work to do for writing the few functions we import from C lib (the math ones are significant work). Red code and even toolchain can easily run already on Intel Edison IoT board.}
    sent: "2016-08-09T14:06:32.468Z"
    editedAt: "2016-08-09T14:07:07.681Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a9d7cbf7f11a7936af1b16"
    text: {since Red's runtime is so small and we have Red/System I though there are some plans for this type of programming too}
    sent: "2016-08-09T13:16:59.037Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a9d793f7f11a7936af1a94"
    text: {@dockimbel ok, but I'm talking about embedded environment without OS }
    sent: "2016-08-09T13:16:03.437Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a9d666f7f11a7936af1752"
    text: {@maximvl Red could be a companion high-level scripting language for low-level ones, like C or C++. Being able to embed Red into a foreign language could be especially useful to extend existing apps with new features at a low cost (like GUI support).}
    sent: "2016-08-09T13:11:02.188Z"
    editedAt: "2016-08-09T13:11:23.369Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a9d256bc688a133908c600"
    text: {@dockimbel hi, do you see any application of Red in embedded programming?}
    sent: "2016-08-09T12:53:42.177Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a8b928613cc18036710052"
    text: {`Specialize` is very cool, and a nice example. I would be sure to note that it's just *one* way to do it in Red, and maybe show some others as well. I know blog entries take time and need to be kept short, so you could just describe other, more traditional approaches.}
    sent: "2016-08-08T16:54:00.126Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a8a0deff82b9fc7e6bdbb2"
    text: {@maximvl As they cannot fit into a 32-bit integer, the lexer promotes them to wider type (currently float!), that's intended.}
    sent: "2016-08-08T15:10:22.927Z"
    editedAt: "2016-08-08T15:10:37.464Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a89f38613cc1803670acc1"
    text: "Should this rise an error? `func[a/b][]`"
    sent: "2016-08-08T15:03:20.238Z"
    editedAt: "2016-08-08T15:03:32.060Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a89d0ad7087a017fa29829"
    text: "@dockimbel was it made on purpose?"
    sent: "2016-08-08T14:54:02.286Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a89cd8d7087a017fa297a8"
    text: {@dockimbel looks like number literals starting from `-2147483648` silently converted to floats:^/```^/red>> type? -2147483648^/== integer!^/red>> type? -2147483649^/== float!^/red>> print -2147483649^/-2147483649.0^/```}
    sent: "2016-08-08T14:53:12.822Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a8912df7f11a7936ac124c"
    text: {@maximvl Sure, the result of that specific operation (`-2147483648 / -1`) cannot fit on signed 32-bit, the CPU will then trigger an integer overflow exception. Once we have support for 64-bit integers or big numbers, we could just promote the operation to a wider type.}
    sent: "2016-08-08T14:03:25.404Z"
    editedAt: "2016-08-08T14:04:38.822Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a880e048422f8b49790832"
    text: {@dockimbel any idea why is this happening? https://github.com/red/red/issues/2157}
    sent: "2016-08-08T12:53:52.369Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a844cd48422f8b49787283"
    text: {@meijeru `to-hex` was only added because we needed it, I am not very fond of it and we will have much better ways to handle integer values in different bases in the future.}
    sent: "2016-08-08T08:37:33.893Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a84479857442dc0f5cb42f"
    text: {@x8x @dockimbel What about producing a hex representation which is a string, by `form/hex`, thus `form/hex 32 => "20"`. Having an issue! as output from to-hex is just a heritage from Rebol, it is not necessarily the most logical choice.}
    sent: "2016-08-08T08:36:09.315Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a843f8978997001e9f98d7"
    text: {Adding an `hex!` datatype is an option, though, it's not the only one.}
    sent: "2016-08-08T08:34:00.464Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a84381483751d50f32d8df"
    text: "`to-hex` works the same as in Rebol."
    sent: "2016-08-08T08:32:01.566Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a84364483751d50f32d8a6"
    text: {@x8x `20h`is just syntactic sugar for integer! values expressed in base 16, it's not a datatype:^/```lisp^/red>> [20h]^/== [32]^/```}
    sent: "2016-08-08T08:31:32.706Z"
    editedAt: "2016-08-08T08:34:31.854Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a842ae857442dc0f5caf68"
    text: {```^/  2020202020h^/*** Syntax Error: invalid integer! at "2020202020"^/```^/Error message missing the `h`}
    sent: "2016-08-08T08:28:29.992Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a83fe6fb162b752ca76f5e"
    text: {Why is `to-hex 32` returning `#00000020`, an `issue!` instead of `20h`?^/I would expect:^/```^/   append #{} to-hex 32^/;   #{3030303030303230}^/```^/to return `#{20}` instead.^/ What about `20h` having its own type `hex!` and keep showing as `20h` instead of being an `integer!` and getting evaluated to `32`?^/}
    sent: "2016-08-08T08:16:38.440Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a83aedd097eb6b2cce8984"
    text: {@geekyI Currying should be trivial to implement yes, though no one tried it so far, as we have other ways to achieve similar goals, as shown above.}
    sent: "2016-08-08T07:55:25.878Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a82b54857442dc0f5c7ddf"
    text: {I can see now how you can easily do functional programming in red.. I think..}
    sent: "2016-08-08T06:48:52.046Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a82b202f03cf8749d02b41"
    text: "Sweet! Currying is that trivial to implement?"
    sent: "2016-08-08T06:48:00.690Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a817242f03cf8749d0081c"
    text: {You can use `source` on the specialized functions to see that the source code is rewritten. Many improvements are possible, like specializing on refinements and optional arguments, or folding constant expressions resulting from fixing arguments. What do you think about that? Is that a good enough showcase for Red abilities?}
    sent: "2016-08-08T05:22:44.067Z"
    editedAt: "2016-08-08T05:23:18.167Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a81639483751d50f327c96"
    text: {```lisp^/red>> entab: specialize :replace [pattern: space value: tab]^/== func [series [series!] /all /local many? len pos][many?: any [system/words/a...^/red>> entab "   hello^^/    world"^/== "^^-  hello^^/    world"^/red>> entab/all "   hello^^/    world"^/== "^^-^^-^^-hello^^/^^-^^-^^-^^-world"^/```}
    sent: "2016-08-08T05:18:49.297Z"
    editedAt: "2016-08-08T05:26:23.694Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a815fa857442dc0f5c563c"
    text: {```lisp^/red>> pad8: specialize :pad [n: 8]^/== func ["Pad a string on right side with spaces"...^/red>> pad8 "hello"^/== "hello   "^/```}
    sent: "2016-08-08T05:17:46.356Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a815b8857442dc0f5c55c9"
    text: {Here are some usage examples:^/```lisp^/red>> foo: func [x y][x + y]^/== func [x y][x + y]^/red>> bar: specialize :foo [x: 5]^/== func [y][5 + y]^/red>> bar 10^/== 15^/```}
    sent: "2016-08-08T05:16:40.798Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a81588483751d50f327aeb"
    text: {I was searching for a way to show how metaprogramming in Red is different and how far you can go  with it. So I implemented a short `specialize` function, able to specialize an existing function on one or several of his arguments. Here is the implementation:^/```lisp^/specialize: function [fun [function!] defs [block!]][^/^-spec: copy/deep spec-of :fun^/^-body: copy/deep body-of :fun^/^-^/^-foreach [arg value] defs [^/^-^-arg: to word! form arg^/^-^-pos: find spec arg^/^-^-remove/part pos pick [2 1] block? pos/2^/^-^-parse body rule: [some [change only arg value | into rule | skip]]^/^-]^/^-func spec body^/]^/```}
    sent: "2016-08-08T05:15:52.106Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a814cefb162b752ca71ec0"
    text: {@lepinekong_twitter That is on our roadmap, we'll try to get it done for the 0.6.2 release.}
    sent: "2016-08-08T05:12:46.609Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a8132c2f03cf8749d002bf"
    text: {@maximvl As said by others, you would need to replace the control flow functions by a custom implementation in order to achieve that. Maybe in the future we can consider using continuations for implementing control flow functions in Red, though Rebol 1.0 gave up on them because of very bad performances.}
    sent: "2016-08-08T05:05:48.070Z"
    editedAt: "2016-08-08T05:06:03.307Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a81277fb162b752ca71983"
    text: {@JacobGood1 Didn't know about that one. Twice as fast as Murmur3, that's a nice achievement. If someone wants to make a Red/System implementation of it, we could use it in Red's runtime library.}
    sent: "2016-08-08T05:02:47.492Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a810ed978997001e9f3859"
    text: {@JacobGood1 also, http://cyan4973.github.io/zstd/ by the same author finally seems like a good replacement for zlib}
    sent: "2016-08-08T04:56:13.682Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a7d3e048422f8b4977a677"
    text: {@JenniferLee520 IIRC, It's not finished yet. Let me have a look...}
    sent: "2016-08-08T00:35:44.183Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57a7bf47e8441a917903d600"
    text: {@maximvl , I don't see a smart way to do this. It will be a lot of work.^/You can either rewrite an interpreter (slow as hell) or write a compiler. In both cases you have to rewrite  all the control flow instructions of Red: if, either, all, loop, foreach, repeat, etc... to support stop/resume execution. }
    sent: "2016-08-07T23:07:51.449Z"
    editedAt: "2016-08-07T23:08:04.051Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a7be9c857442dc0f5bbc97"
    text: {@dockimbel did you ever see this hashing algorithm? http://cyan4973.github.io/xxHash/^/^/I read a while back that you settled on murmur... just curious}
    sent: "2016-08-07T23:05:00.662Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a7bde02f03cf8749cf6db1"
    text: {I would transform things like foreach into some sort of fsm object and then refer back to that on each "iteration"}
    sent: "2016-08-07T23:01:52.398Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a7b78ffb162b752ca67f14"
    text: {I can save context of block and reuse it, but words like `foreach` will rebind and start from beginning}
    sent: "2016-08-07T22:34:55.060Z"
    editedAt: "2016-08-07T22:34:59.281Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a7b75c48422f8b497775c1"
    text: {and then `print next i => 1`, `print next i => 2` etc}
    sent: "2016-08-07T22:34:04.595Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a7b743d097eb6b2ccda143"
    text: {to make something like `i: iterate [foreach x [1 2 3] [yield [x + 1]]]`}
    sent: "2016-08-07T22:33:39.749Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a7b6b1857442dc0f5bafc9"
    text: {@SteeveGit I tried to implement `yield` in Red/Rebol, though it turned out this is not a simple thing, like LC }
    sent: "2016-08-07T22:31:13.912Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57a7acfa483751d50f31c705"
    text: {@lepinekong_twitter `call` will be integrated in Red in 0.6.2, meanwhile it is available as a library, so you have to compile it into your script. Search for `call.red` in this room for how to do that.}
    sent: "2016-08-07T21:49:46.843Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a7985dfb162b752ca642f3"
    text: {*** Script Error: call has no value^/*** Where: read-url}
    sent: "2016-08-07T20:21:49.642Z"
    v: 1
    author: "57a1e5ed40f3a6eec05dbd3e"
) #(
    id: "57a7985b483751d50f319936"
    text: {@x8x: thanks for your suggestion for read-url but I got this error}
    sent: "2016-08-07T20:21:47.374Z"
    v: 1
    author: "57a1e5ed40f3a6eec05dbd3e"
) #(
    id: "57a797c9d097eb6b2ccd63d3"
    text: {@dockimbel about 'read only supports UTF-8 content in text mode for now, we should add a few common encoding formats like ISO-8859-1 ' I don't understand why would google use ISO-8859-1 which is deprecated in favor of UTF-8 ?}
    sent: "2016-08-07T20:19:21.532Z"
    v: 1
    author: "57a1e5ed40f3a6eec05dbd3e"
) #(
    id: "57a7909fbe8eba3b162871b7"
    text: {each word in a block has its own context (so, potentially different from the other words)}
    sent: "2016-08-07T19:48:47.696Z"
    editedAt: "2016-08-07T19:49:15.934Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a788b8978997001e9e41ff"
    text: {though it works strange:^/`>> found? bind? 'does_not_exist_for_sure => true`}
    sent: "2016-08-07T19:15:04.200Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a7889f6bf4dff61d3b647f"
    text: {there is a function called `bind?` which `Returns the context in which a word is bound.`}
    sent: "2016-08-07T19:14:39.486Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a786cad097eb6b2ccd3ca0"
    text: {I am probably wrong though, hardly programmed in Red...}
    sent: "2016-08-07T19:06:50.386Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a7867fd097eb6b2ccd3c00"
    text: {ye, and looks like `do` evaluates block in current context if block is not binded to any}
    sent: "2016-08-07T19:05:35.712Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a78653978997001e9e3cfb"
    text: "first [x: 1] == x:"
    sent: "2016-08-07T19:04:51.663Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a7862748422f8b49770e4c"
    text: {Im no Red expert but I think blocks are just data so there would be no context}
    sent: "2016-08-07T19:04:07.914Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a78615857442dc0f5b47f9"
    text: "until I eval it in some context"
    sent: "2016-08-07T19:03:49.063Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a7860b483751d50f317038"
    text: "oh wait, block has no context, doesn't it?"
    sent: "2016-08-07T19:03:39.985Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a78530d097eb6b2ccd3909"
    text: "`bind` doesn't bind to a block"
    sent: "2016-08-07T19:00:00.027Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a78522fb162b752ca618df"
    text: {if I have a block in Rebol, how can  I get word value from it's context?}
    sent: "2016-08-07T18:59:46.807Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a78513857442dc0f5b45d5"
    text: "guys"
    sent: "2016-08-07T18:59:31.015Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a78265857442dc0f5b3f4d"
    text: {@geekyI, not to imitate them directly, though I do think implementing features from other languages as examples can be useful in explaining Red. I mean taking the idea of an accumulator and making it a pattern.}
    sent: "2016-08-07T18:48:05.389Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a76a8e6bf4dff61d3b29e1"
    text: {@greggirwin ^/>transducers in Clojure^/^/just read about it.. was underwhelming somehow.. feels just like isomorphisms to me}
    sent: "2016-08-07T17:06:22.626Z"
    editedAt: "2016-08-07T17:06:30.897Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a76966978997001e9e02e6"
    text: {@dockimbel Humm yeap sorry, I mean from `MacOSX` to `macOS` that would be future proof. ;-)}
    sent: "2016-08-07T17:01:26.709Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a768462f03cf8749cebfbd"
    text: {@x8x `system/platform` should return `MacOSX` on Mac, unless there's a bug.}
    sent: "2016-08-07T16:56:38.955Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a76094978997001e9df3b6"
    text: {I have to agree with @greggirwin that having `/into` everywhere wouldn't look very nice. In rebol I never had memory problems, probably meaning that the GC was doing a good job. I started using `/into` with Red to lower memory consumption. Althought I like having control and the cleaness of it, I wonder if in most cases the GC should take care of memory use. So mixed feeling here.. I guess I wouldn't use it if not forced to, but would use it extensively if writing an app for some IOT device with limited memory.}
    sent: "2016-08-07T16:23:48.389Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a75ec0d097eb6b2cccf145"
    text: {I'm not, in any way, saying we shouldn't write efficient code, and Red has wider goals than Rebol, but I have never needed this feature myself.^/^/I guess my proposal is to think about what the goals of `/into` are and see if there's an elegant solution that helps make the intent clear when it's used, is easy to work with, and localizes those decisions if possible. That is, if you're writing code that needs this, you may need it everywhere, which means having `/into` everywhere in your code. Of course, you can reverse the argument and say that will make calls that don't use it stand out. ^/^/Some time back I looked at the idea of transducers in Clojure, and I think that came partly from this kind of need. }
    sent: "2016-08-07T16:16:00.164Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a75e96483751d50f312409"
    text: {Should `system/platform` for `macOS` be changed from `Darwin` to `macOS` ? We will have `iOS` in a near future ;-) so better change it sooner than later.}
    sent: "2016-08-07T16:15:18.220Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a75c98857442dc0f5af4dc"
    text: {@dockimbel  :point_up: [August 7, 2016 2:37 AM](https://gitter.im/red/red?at=57a6f3506bf4dff61d3a58ee) I understand the reason for `/into`, but don't have a concrete suggestion yet. It's one of those "gut feeling" things.^/^/Having an accumulator func, and saying that's the optimized approach, is one idea, but I'm not thrilled with that. It does make it clear that you're writing code with that need in mind, but also might be less Reddish and not mix as cleanly with other code from a style standpoint.^/^/So I imagine what code might look like that uses `/into`, just making stuff up. e.g.^/```^/collect/into [^/    foreach rec recs [^/        compose/into [extract/into blk wd buff] buff^/    ] buff^/]^/```^/And asking whether I like that, or how else would I do it. I also wonder if, as a design pattern (because if Red does it as standard, everyone else should too), it works well, or if people will look  at doc strings and think they *should* use it, even if they don't need it. i.e., it becomes a widely advertised "feature".}
    sent: "2016-08-07T16:06:48.759Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a75c44857442dc0f5af457"
    text: {My gitter client.. is a web-based one I think (it's a google chrome app), what are you using?}
    sent: "2016-08-07T16:05:24.548Z"
    editedAt: "2016-08-07T16:05:48.372Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a75c06978997001e9debba"
    text: {@dockimbel open in github leads me to a 404:  https://github.com/red/red/code}
    sent: "2016-08-07T16:04:22.215Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a757de978997001e9de429"
    text: {@geekyI Indeed, it wrongly points to red/red, instead of red/code repo... let me see if I can fix that. Can't change it, the title bar leads to the wrong repo, but from the right menu, the "Open in Github" option leads to the right one...}
    sent: "2016-08-07T15:46:38.316Z"
    editedAt: "2016-08-07T15:49:52.477Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a757d9fb162b752ca5c1dd"
    text: {> btw, what about pattern matching in Red? ^/^/We can do this in a lot of ways, as others said. I have one example (`set...`) in my mezz gist. The hard part is the design.}
    sent: "2016-08-07T15:46:33.611Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a7573d483751d50f31160e"
    text: {while we are on the topic, maybe red/help would benefit from stackoverflow integrations?}
    sent: "2016-08-07T15:43:57.720Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a75687483751d50f311498"
    text: {also repo info on the right reflects this.. on the other hand, red/docs is perfect}
    sent: "2016-08-07T15:40:55.564Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a7561b6bf4dff61d3b0331"
    text: "when I click the room title @dockimbel "
    sent: "2016-08-07T15:39:07.629Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a755fc2f03cf8749ce9c8d"
    text: {[![blob](https://files.gitter.im/red/red/b3N2/thumb/blob.png)](https://files.gitter.im/red/red/b3N2/blob)}
    sent: "2016-08-07T15:38:36.613Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a755a1d097eb6b2ccce0ed"
    text: "@geekyI When you click on what?"
    sent: "2016-08-07T15:37:05.003Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a755782f03cf8749ce9b75"
    text: {@dockimbel but when I click, it goes to red/red on github, should be red/code instead}
    sent: "2016-08-07T15:36:24.363Z"
    editedAt: "2016-08-07T15:36:50.920Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a75564483751d50f3112d5"
    text: {ditto red/red/system (altho we don't have a repo for this, so I'm not sure about this one)}
    sent: "2016-08-07T15:36:04.268Z"
    editedAt: "2016-08-07T15:37:29.811Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a7555948422f8b4976aff2"
    text: {@geekyI Gitter is primary a chat system for github's repositories. That room is for `red/code` repo.}
    sent: "2016-08-07T15:35:53.610Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a75515857442dc0f5ae704"
    text: "red/red/code seems to be named bad?"
    sent: "2016-08-07T15:34:45.737Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a7550448422f8b4976aef0"
    text: "@geekyI Agreed. Let me have a look at them..."
    sent: "2016-08-07T15:34:28.357Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a754e12f03cf8749ce9a66"
    text: {@gour I hope too, we used to have a great ML for Rebol, 17 years ago. ;-)}
    sent: "2016-08-07T15:33:53.852Z"
    editedAt: "2016-08-07T15:34:41.459Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a754d26bf4dff61d3b009d"
    text: {@x8x  @dockimbel  seems like a good idea to add a header to the rooms missing one?}
    sent: "2016-08-07T15:33:38.524Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a754adfb162b752ca5bc52"
    text: {@JenniferLee520 I'm not sure, you should ask him directly. }
    sent: "2016-08-07T15:33:01.765Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a751d548422f8b4976a8f7"
    text: {I was one of the reasons they made more Red rooms, I was spamming the snot out of this channel not too long ago}
    sent: "2016-08-07T15:20:53.574Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a74f9d2f03cf8749ce91a9"
    text: {@geekyI true, but for that i prefer mailing list or, even better nntp (gmane)}
    sent: "2016-08-07T15:11:25.444Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a74f1a978997001e9dd557"
    text: {@gour was thinking the same too (most other communities have one or 2, but it does enable one thing.. long-lived discussions: harder to create threads in gitter conversations. There are pros and cons  for each approach}
    sent: "2016-08-07T15:09:14.679Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a74e9b6bf4dff61d3af4d8"
    text: {otoh, i also hope that with increased popularity of Red, mailing list will be used more}
    sent: "2016-08-07T15:07:07.112Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a74e666bf4dff61d3af474"
    text: {I've noticed that drawing lines with ARROWs has been done by @Qtxie in one of this forks. I would like to know when it will be merged into master branch. Thanks.}
    sent: "2016-08-07T15:06:14.742Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "57a74de3fb162b752ca5b08c"
    text: {@dockimbel i should wrote 'to follow', iow. to be sure where does each discussion fit the best :-D}
    sent: "2016-08-07T15:04:03.781Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a74bb0d097eb6b2ccccf01"
    text: {@gour That's not an option. We started with one channel and it quickly became impossible to use, as too many unrelated discussions were multiplexed there. I don't understand why you find it difficult to follow when you have a left bar which shows you how many new messages you have in each room you subscribed to...}
    sent: "2016-08-07T14:54:40.068Z"
    editedAt: "2016-08-07T14:55:21.439Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a74b79fb162b752ca5abc3"
    text: {Oh.. maybe it does, this channel does have "Red Programming Language" on the right of its name.}
    sent: "2016-08-07T14:53:45.010Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a74b3f857442dc0f5ad4d4"
    text: {It's "strange" gittter doesn't provide the ability to set a header for a room.. that would help a lot!}
    sent: "2016-08-07T14:52:47.726Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
)#(
    id: "57a747bd483751d50f30f94b"
    text: {btw, i'd be happy seeing **less** Red-related rooms...considering it easier to follow}
    sent: "2016-08-07T14:37:49.574Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a74778857442dc0f5acd23"
    text: {@gour Whereas everything is a function /expression in functional programming languages, everything is data in rebol}
    sent: "2016-08-07T14:36:40.706Z"
    editedAt: "2016-08-07T14:36:56.234Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a7476c48422f8b497694be"
    text: {@geekyI I have a lot of experience with functional programming languages, I found that they have their own pitfalls.  Here is a neat blog discussing a lot of the issues that I discovered after years of immutable programming: http://prog21.dadgum.com/36.html}
    sent: "2016-08-07T14:36:28.974Z"
    editedAt: "2016-08-07T14:37:12.330Z"
    v: 3
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a74760d097eb6b2cccc5a3"
    text: {@geekyI  i did play with Haskell/OCaml in the past...now i'm thinking just Red}
    sent: "2016-08-07T14:36:16.003Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a7472548422f8b497693d8"
    text: {@gour I'd recommend what I wrote in the other help channel here.. but if you are referring specifically for functional programming, I'm still learning about the approaches taken by rebol}
    sent: "2016-08-07T14:35:17.783Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a7469d857442dc0f5acb2f"
    text: {@geekyI what is your recommended 'literature' to learn Red?}
    sent: "2016-08-07T14:33:01.000Z"
    editedAt: "2016-08-07T14:33:21.079Z"
    v: 2
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a746436bf4dff61d3ae4d9"
    text: {@gour I'd also missed pattern matching before in red.. but learnt to 'workaround' it}
    sent: "2016-08-07T14:31:31.683Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a7460b978997001e9dc2cc"
    text: "@JacobGood1 ok ;)"
    sent: "2016-08-07T14:30:35.765Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a745fcfb162b752ca5a015"
    text: {@JacobGood1 yes, [Function-level programming](https://en.wikipedia.org/wiki/Function-level_programming)}
    sent: "2016-08-07T14:30:20.161Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a745e6857442dc0f5aca0d"
    text: {I do not have good reasons for not liking it though, most of them are just subjective preferences.}
    sent: "2016-08-07T14:29:58.932Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a745d8fb162b752ca59fe1"
    text: ":question: "
    sent: "2016-08-07T14:29:44.061Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a745ae6bf4dff61d3ae3ee"
    text: "@gour yes, no."
    sent: "2016-08-07T14:29:02.182Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a745a06bf4dff61d3ae3c7"
    text: "Oh like Haskell"
    sent: "2016-08-07T14:28:48.509Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a7459e857442dc0f5ac96f"
    text: {@JacobGood1 are you familiar with Racket? do you like it?}
    sent: "2016-08-07T14:28:46.416Z"
    editedAt: "2016-08-07T14:30:19.689Z"
    v: 2
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a745956bf4dff61d3ae3b1"
    text: "Point-free style"
    sent: "2016-08-07T14:28:37.503Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a7457b48422f8b49768fdf"
    text: {@geekyI what do you mean by variable free?  You mean immutable?}
    sent: "2016-08-07T14:28:11.225Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a745556bf4dff61d3ae352"
    text: {Red is a programmable programming language like Lisp.  It does not really matter what Red is missing, you can add it through dialects.}
    sent: "2016-08-07T14:27:33.381Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a74506fb162b752ca59e8f"
    text: {Does writing variable free code need  only a change of syntax..}
    sent: "2016-08-07T14:26:14.956Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a744b848422f8b49768d6e"
    text: {@JacobGood1 what am I missing here, it's not.. 'clicking' for me.. I'm not too familiar with red's higher order functions..}
    sent: "2016-08-07T14:24:56.526Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a74434483751d50f30f15a"
    text: {well, "easy" depends on the syntax you decide to use}
    sent: "2016-08-07T14:22:44.501Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a7440a857442dc0f5ac63d"
    text: "yes it is easily possible"
    sent: "2016-08-07T14:22:02.473Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a743fc48422f8b49768c48"
    text: {@JacobGood1 ok, good to know, but have to learn more Re(bol)d}
    sent: "2016-08-07T14:21:48.760Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a743f0fb162b752ca59cd0"
    text: {@JacobGood1 I don't know enough about red to know if it is .. possible?}
    sent: "2016-08-07T14:21:36.872Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a743a848422f8b49768b80"
    text: {@geekyI There is no currying, you can create a dialect for it if you want}
    sent: "2016-08-07T14:20:24.961Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a7432c483751d50f30ef5f"
    text: {I can achieve the same thing except.. there isn't support for partial functions or currying in red?}
    sent: "2016-08-07T14:18:20.831Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a742a76bf4dff61d3add8e"
    text: {Btw, I'd thought `map-each` is equivalent to `map` in e.g. haskell?}
    sent: "2016-08-07T14:16:07.584Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a7427d978997001e9dbbb5"
    text: {> `map` and `filter` once we add them to the core language.^/^/Yes! More functional constructs I like! Personally, I'm perfectly fine without list comprehensions as long as those are there }
    sent: "2016-08-07T14:15:25.691Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a74264978997001e9dbb7b"
    text: {@gour pattern matching is not that useful in a language like Red.  I have mulled over these ideas myself before, I concluded that pattern matching is more useful in languages that are immutable, inflexible and rigid.  The way blocks are are manipulated in Red code makes them trivial to deal with.}
    sent: "2016-08-07T14:15:00.282Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a70c9f48422f8b49762cd3"
    text: {@meijeru Only if you compile a custom version of the console. You can still use `tests/console-call.red` wrapper if you prefer.}
    sent: "2016-08-07T10:25:35.460Z"
    editedAt: "2016-08-07T10:26:26.061Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a70c5e483751d50f3092f2"
    text: {Right, so `call` cannot now be used together with the graphic console?}
    sent: "2016-08-07T10:24:30.487Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a707606bf4dff61d3a797a"
    text: {@meijeru Right, but working on nested structures would be useful. We could even add type-checking using optional type specifiers.^/^/That README is obsolete, `call` will be integrated in the Red runtime as an optional module for 0.6.2 release.}
    sent: "2016-08-07T10:03:12.929Z"
    editedAt: "2016-08-07T10:03:42.149Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a7039c48422f8b49761c6f"
    text: {@dockimbel I was prompted by a recent issue to look up the call files. In `system/library/call` there is a file `call.red` but the `README` says there should be a `console-call.red` also. Where is that actually?}
    sent: "2016-08-07T09:47:08.378Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a7014448422f8b497618db"
    text: {The most basic destructuring assignment already exists: `set <block of words> <block of values>`right?}
    sent: "2016-08-07T09:37:08.164Z"
    editedAt: "2016-08-07T09:37:55.640Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a6f71c2f03cf8749cdfb71"
    text: {@gour Pattern matching can be achieved trivially in Rebol languages using `case`, `parse` or just the core language. We could add a specific function for destructuring assignement support. Such function could be written in Red trivially already.}
    sent: "2016-08-07T08:53:48.344Z"
    editedAt: "2016-08-07T08:54:04.791Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a6f3506bf4dff61d3a58ee"
    text: {@greggirwin What is your proposition for improving `/into`? I plan to spread it as broadly as possible, as it provides a useful way control the destination series of a series modifying/creating function, which also gives the ability to tightly control memory usage when needed (like for soft realtime systems where a GC, even incremental one, can be a problem).}
    sent: "2016-08-07T08:37:36.197Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a6f28c6bf4dff61d3a57dd"
    text: {btw, what about pattern matching in Red? i liked them and they are quite powerful in e.g. Haskell & OCaml}
    sent: "2016-08-07T08:34:20.811Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a6f23f483751d50f3064b0"
    text: {Some thoughts about list comprehensions in Red:^/* They can be trivially implemented (couple of lines) using a combination of `map` and `filter` once we add them to the core language.^/* Having an option to produce a generator instead of a final list would be very helpful to deal with large lists. It is possible to implement generators in Red already, though, it will be more efficient once we integrate concurrency support.}
    sent: "2016-08-07T08:33:03.973Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a638ece8441a917903ce77"
    text: { yes, but in the case you parameterized the input rule (like with x-set), it may ouput different results.}
    sent: "2016-08-06T19:22:20.665Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a638492f03cf8749ccbef3"
    text: {@SteeveGit but you can also reuse the value itself )}
    sent: "2016-08-06T19:19:37.754Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a63827e8441a917903ce6b"
    text: {@maximvl Not really. Except you can reuse it, skipping the compilation stage.}
    sent: "2016-08-06T19:19:03.679Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a63774978997001e9c038a"
    text: {Still miss the ability to play with Red on Android.}
    sent: "2016-08-06T19:16:04.668Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a63744d097eb6b2ccafe09"
    text: {@SteeveGit btw, is there any reason for your version to return a function, instead of just result?}
    sent: "2016-08-06T19:15:16.503Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a637266bf4dff61d391c77"
    text: "Just found gitteroid. Open source, beautiful."
    sent: "2016-08-06T19:14:46.496Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a634ee483751d50f2f2680"
    text: "I hate mobile version of gitter."
    sent: "2016-08-06T19:05:18.781Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a630a0978997001e9bf78c"
    text: "U"
    sent: "2016-08-06T18:46:56.085Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a62b07fb162b752ca3c403"
    text: {Is `stats` updated in real time? If not, can I force update it or do I have to wait x seconds?}
    sent: "2016-08-06T18:23:03.842Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a624bc483751d50f2f02d6"
    text: {@lepinekong_twitter While @dockimbel conversion solution is a wonderful oneliner, it wont get you a proper result. Here is a Linux/macOS solution using `call`:^/```^/read-url: func[url /local e o][^/^-o: ^{^}^/^-call/output reduce [^{curl -IL^} url] clear o^/^-parse o [any [thru [^{Content-Type: ^} thru ^{charset=^} copy e to lf]]]^/^-call/shell/output reduce[^{curl -L^} url ^{| iconv -f^} e ^{-t UTF-8^}] clear o^/^-o^/]^/  read-url https://www.google.com/^/;   ^{<!doctype html><html itemscope="" itemtype="http://schema.org/Web...^/```}
    sent: "2016-08-06T17:56:12.516Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a621d3d097eb6b2ccacfa7"
    text: {I never used `/into` before, but as we have no GC at the moment, using `/into` saves some memory.}
    sent: "2016-08-06T17:43:47.155Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a61e90483751d50f2ef4f7"
    text: {@x8x a better split will be coming, though I often wonder about the value of having `/into` everywhere. Yes, it becomes a standard accumulator pattern, but I've often felt it was tacked on, to aid performance, rather than being designed in, in a nicer way.}
    sent: "2016-08-06T17:29:52.795Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a61e126bf4dff61d38ea79"
    text: {https://wikimedia.org/api/rest_v1/media/math/render/svg/8cc639ecfd1200a7fa8c18ed8624443b6f550ace}
    sent: "2016-08-06T17:27:46.143Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57a61e06ac014d6a097cad5c"
    text: {me neither. I didn't look at list-comprehension docs. I just used your script as source. }
    sent: "2016-08-06T17:27:34.469Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a61dcc978997001e9bd146"
    text: {all LC implementations I've seen so far had multiple sources and filter, that's pretty much it}
    sent: "2016-08-06T17:26:36.390Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a61da02f03cf8749cc836a"
    text: "I don't know what to add here.."
    sent: "2016-08-06T17:25:52.815Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a61d99857442dc0f58d014"
    text: "but"
    sent: "2016-08-06T17:25:45.519Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a61d93ac014d6a097cad5a"
    text: "It's not in my to-do list actually"
    sent: "2016-08-06T17:25:39.686Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a61d53be8eba3b16286b1f"
    text: {@maximvl Before tweeting about it  ;-) and If you feel it, feel free to enhance my version to include other rules as Doc stated. ;-)}
    sent: "2016-08-06T17:24:35.089Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a61ad36bf4dff61d38e40b"
    text: {@dockimbel feel free to tweet @SteeveGit 's version )}
    sent: "2016-08-06T17:13:55.646Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a61abb48422f8b49748bf4"
    text: {@SteeveGit the way you juggle with pointing `in` to the right block is awesome )}
    sent: "2016-08-06T17:13:31.406Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a61a5b978997001e9bca9e"
    text: {@SteeveGit ok, I got it, your approach is very Rebolish, I tried to come up with something like that, but finally made a lispy one, with code generation}
    sent: "2016-08-06T17:11:55.338Z"
    editedAt: "2016-08-06T17:12:07.221Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a617a8fb162b752ca39bfe"
    text: {should split have a `/into` refinement?^/```^/split: func [^/^-^-{Break a string series into pieces using the provided delimiters}^/^-^-series [any-string!]^/^-^-dlm [string! char! bitset!]^/^-^-/into^-"Insert into a buffer instead"^/^-^-^-blk [block!]^/^-^-/local s num rule^/^-][^/^-^-num: either string? dlm [length? dlm] [1]^/^-^-rule: [copy s [to dlm | to end] keep (s) num skip]^/^-^-parse series either into [[collect into blk any rule]][[collect any rule]]^/^-]^/```}
    sent: "2016-08-06T17:00:24.275Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a6080148422f8b497463e1"
    text: {@meijeru The content served by google.com is not the same for everyone, and it changes often.}
    sent: "2016-08-06T15:53:37.356Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a60793978997001e9b9a60"
    text: {@SteeveGit :clap: :sparkles: Though, list comprehensions have many possible rules, so a full support will need much more work. But yes, it should be possible to build a dialect for it entirely processed by Parse only.}
    sent: "2016-08-06T15:51:47.342Z"
    editedAt: "2016-08-06T15:57:18.345Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a6077efb162b752ca377eb"
    text: {@lepinekong_twitter `read` only supports UTF-8 content in text mode for now, we should add a few common encoding formats like ISO-8859-1 soon. You can still access the resource in binary mode if needed and then convert it manually:^/```lisp^/red>> page: read/binary http://google.com^/== #^{^/3C21646F63747970652068746D6C3E3C68746D6C206974656D73636F70653D22^/22206974656D747970653D2268747...^/red>> page: collect/into [forall page [keep make char! page/1]] make string! length? page^/== ^{<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="zh-TW"><head><meta ...^/```}
    sent: "2016-08-06T15:51:26.522Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a6066b857442dc0f58a0b3"
    text: {@SteeveGit oh wow, give me some time to parse that =)}
    sent: "2016-08-06T15:46:51.073Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5f9cb48422f8b49744952"
    text: {@lepinekong_twitter FYI, the 30-Jul-2016 build on W10 has no error when reading google main page.}
    sent: "2016-08-06T14:52:59.966Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a5eab648422f8b49742de9"
    text: { collect [ parse [3 a Z 5 b] [ any [set x integer! (keep x) | skip]] ]}
    sent: "2016-08-06T13:48:38.234Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "57a5eab148422f8b49742de1"
    text: {@maximvl this works in Rebol and should also work in Red}
    sent: "2016-08-06T13:48:33.448Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "57a5e76ce8441a917903cc65"
    text: {Note that **ls** builds  a function (Acts like a compiler).^/```lisp^/?? r^/r: func [/local out][out: make block! 10 foreach x x-set [foreach y [10 100 1000] [if (x <> 2) [reduce/into [x + y] tail out]]] out]^/```}
    sent: "2016-08-06T13:34:36.555Z"
    editedAt: "2016-08-06T13:42:55.254Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a5e6e0be8eba3b162869ac"
    text: "> == [11 101 1001 13 103 1003]"
    sent: "2016-08-06T13:32:16.032Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a5e677ac014d6a097cabd2"
    text: {@maximvl Playing with your  lc function, I got this light version:^/```lisp^/lc: function [rule][^/^-parse rule [^/^-^-some [^/^-^-^-s: word! 'in skip ^/^-^-^-^-(in: last reduce/into ['foreach s/1 s/3 make block! 4] in)^/^-^-^-| 'if skip ^/^-^-^-^-(in: last reduce/into ['if to-paren s/2 make block! 4] in)^/^-^-^-| skip '| ^/^-^-^-^-(res: s/1 fun: in: make block! 4)^/^-^-^-| (reduce/into ['reduce/into res 'tail 'out] in) break^/^-^-]^/^-]^/^-has [out] compose [out: make block! 10 (fun) out] ^/]^/```^/Then run: ^/```lisp^/x-set: [1 2 3]^/r: lc [[x + y ] | x in x-set y in [10 100 1000] if [ x <> 2]]^/r^/```}
    sent: "2016-08-06T13:30:31.547Z"
    editedAt: "2016-08-06T13:31:56.334Z"
    v: 5
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a5d25ffb162b752ca315f4"
    text: {red>> read http://google.com^/*** Access Error: invalid UTF-8 encoding: #{E9636F75}^/*** Where: read}
    sent: "2016-08-06T12:04:47.811Z"
    v: 1
    author: "57a1e5ed40f3a6eec05dbd3e"
) #(
    id: "57a5d25dd097eb6b2cca3107"
    text: "Tried this and it fails "
    sent: "2016-08-06T12:04:45.348Z"
    v: 1
    author: "57a1e5ed40f3a6eec05dbd3e"
) #(
    id: "57a5c9596bf4dff61d38528a"
    text: {You could also replace the double `either` by a `case`:^/```lisp^/e: case [^/^-block? i/2 [i/2]^/^-paren? i/2 [do i/2]^/^-'else ^- [get i/2]^/]^/```}
    sent: "2016-08-06T11:26:17.939Z"
    editedAt: "2016-08-06T11:26:31.701Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5c622d097eb6b2cca1cf9"
    text: {@maximvl Very nice, congrats! It's a nice application of metaprogramming in Rebol. In Red and Rebol3, you could replace `[block! | paren! | word!]` with a typeset definition. As soon as you have a Red version, I'll be happy to tweet it. ;-)}
    sent: "2016-08-06T11:12:34.896Z"
    editedAt: "2016-08-06T11:16:52.169Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5bdfb857442dc0f582099"
    text: {@Rebol2Red  `"1"` is not a number, the function checks for a value, of course it makes little sense running `number? 1`, but what makes sense is `number? x`}
    sent: "2016-08-06T10:37:47.940Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b66c483751d50f2e39fb"
    text: {I would never believe if somebody tell me there is a language which can do this}
    sent: "2016-08-06T10:05:32.358Z"
    editedAt: "2016-08-06T10:08:48.672Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b63a6bf4dff61d383443"
    text: "LC in ~30 lines of code"
    sent: "2016-08-06T10:04:42.278Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b5f9fb162b752ca2e660"
    text: {https://gist.github.com/maximvl/400a2bc40fa9a536c4d068e48c9b7fa7}
    sent: "2016-08-06T10:03:37.081Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b5f8fb162b752ca2e65b"
    text: {anyway, here's my try to implement list comprehensions dialect :)}
    sent: "2016-08-06T10:03:36.117Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b4ec6bf4dff61d3831da"
    text: {:point_up: [August 6, 2016 5:53 PM](https://gitter.im/red/red?at=57a5b38448422f8b4973cbff) It's only in Red.}
    sent: "2016-08-06T09:59:08.071Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5b480978997001e9b0cf1"
    text: "the second one with `foreach` worked though"
    sent: "2016-08-06T09:57:20.889Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b4716bf4dff61d38310c"
    text: {in rebol) `>> parse [3 a Z 5 b] [collect any [keep integer! | skip]] => false`^/}
    sent: "2016-08-06T09:57:05.285Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b45f2f03cf8749cbc65a"
    text: "It didn't work in Red?"
    sent: "2016-08-06T09:56:47.580Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5b42c857442dc0f580fce"
    text: "but `parse` example didn't work for me"
    sent: "2016-08-06T09:55:56.743Z"
    editedAt: "2016-08-06T09:56:10.693Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b42648422f8b4973ccf6"
    text: {But it's much less efficient than the Parse approach. Moreover if you need to do it deeply in nested structures, then the `collect` function approach requires much more efforts.}
    sent: "2016-08-06T09:55:50.707Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5b3e6fb162b752ca2e329"
    text: {Though in Rebol, you can achieve the same using the `collect/keep` functions (available in Red too):^/```lisp^/collect [foreach v [3 a Z 5 b][if integer? v [keep v]]]^/== [3 5]^/```}
    sent: "2016-08-06T09:54:46.785Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5b3ad48422f8b4973cc46"
    text: {okey, I'm still using rebol to understand things since it has docs and examples in the internet)}
    sent: "2016-08-06T09:53:49.696Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b38448422f8b4973cbff"
    text: "Exclusively on Red.;-)"
    sent: "2016-08-06T09:53:08.917Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5b378d097eb6b2cc9ff17"
    text: "@dockimbel is it available in rebol?"
    sent: "2016-08-06T09:52:56.960Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b31d2f03cf8749cbc47a"
    text: {@maximvl Use `collect/keep` commands combo for that:^/```lisp^/red>> parse [3 a Z 5 b] [collect any [keep integer! | skip]]^/== [3 5]^/```}
    sent: "2016-08-06T09:51:25.658Z"
    editedAt: "2016-08-06T09:56:21.458Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5b0e9978997001e9b0776"
    text: {if I want to parse 10 values from a block, should I have 10 local variables in function?}
    sent: "2016-08-06T09:42:01.936Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b0bc483751d50f2e309a"
    text: {@dockimbel ok, that will work, but maybe I'm using this because I'm not aware of `normal` way of doing this}
    sent: "2016-08-06T09:41:16.358Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b05d857442dc0f580974"
    text: {Though, you can easily achieve the same by properly binding your rule block:^/```lisp^/red>> o: make object! [x: 5]^/== make object! [^/    x: 5^/]^/red>> parse [15] bind [set x integer!] o^/== true^/red>> o^/== make object! [^/    x: 15^/]^/```}
    sent: "2016-08-06T09:39:41.454Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5b056483751d50f2e3000"
    text: {like, all examples in tutorials just print values, but something useful should collect and process them}
    sent: "2016-08-06T09:39:34.323Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5b002978997001e9b05e5"
    text: {@dockimbel hm, what is the preferred way to collect data from parse then? }
    sent: "2016-08-06T09:38:10.162Z"
    editedAt: "2016-08-06T09:38:14.627Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5afe06bf4dff61d382913"
    text: {@maximvl Not yet, but that would be a nice enhancement. You can open a wish ticket for it.}
    sent: "2016-08-06T09:37:36.180Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5af9948422f8b4973c596"
    text: {hey guys, can I set object field inside parse in Rebol?^/```^/>> o: make object! [x: 5]          ^/>> parse [15] [set o/x integer!]   ^/** Script Error: Invalid argument: o/x^/```}
    sent: "2016-08-06T09:36:25.123Z"
    editedAt: "2016-08-06T09:36:38.792Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a5990f483751d50f2e0cb2"
    text: {So, what do you think about adding op! overwriting? It can help me to add range! to Red as a simple object!}
    sent: "2016-08-06T08:00:15.476Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a5787148422f8b49737349"
    text: "Got it! Thank you @dockimbel "
    sent: "2016-08-06T05:41:05.298Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "57a5734d978997001e9aad37"
    text: {@ralfwenske `face!` is not a datatype (though it might become one in the future), it is just an object, so you need to remove `face!` from the type declaration in the function. I've pushed a fix yesterday for stricter checking of type declarations, so now, it can contain only a valid datatype (in word! or datatype! form).}
    sent: "2016-08-06T05:19:09.936Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "57a5642e978997001e9a96bd"
    text: "'f1 win'    gives this result - (typo)"
    sent: "2016-08-06T04:14:38.082Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "57a56332857442dc0f5794f3"
    text: {```^/Red [needs 'View]^/^/f1: func [w [face! object!]][print ["f1: type? w" type? w]]^/f2: func [w ][print ["f2 type? w" type? w]]^/^/win: layout [size 300x300 title "Regression?"]^/print ["type? win" type? win]^/^/f2 win^/f1^/^/view win^/```^/^/returns^/`^/type? win object^/f2 type? w object^/*** Script Error: invalid type specifier: make object! [type: 'face offset: none size: none text: none image: none color: none menu: none data: none enable?: true visible?: true selected: none flags: none options: none parent: none pane: none state: none rate: none edge: none para: none font: none actors: none extra: none draw: none ]^/*** Where: f1^/red>> about^/Red 0.6.1 - 6-Aug-2016/12:48:52+10:00^/red>> ^/` ^/^/ ^/^/}
    sent: "2016-08-06T04:10:26.659Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "57a562b5857442dc0f579422"
    text: "Is this behavior right? Wrong type annotation? "
    sent: "2016-08-06T04:08:21.366Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "57a558fb978997001e9a8397"
    text: {@raimundasa Changing background color of `button` widget is not yet supported. You can create a custom button, using the `base` face type, where you have more control (but need to implement all behaviors yourself).}
    sent: "2016-08-06T03:26:51.208Z"
    editedAt: "2016-08-06T03:27:46.734Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a4f7c0d097eb6b2cc8c7fd"
    text: {Not a bug @raimundasa. The issue is that native widgets may not support all facets yet (or ever). Colors work on other styles.^/```^/Red [title: "test buttons" needs: 'view] view [ base red "Red" base green "Green" base blue "Blue" ]^/```}
    sent: "2016-08-05T20:32:00.015Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4f75748422f8b49728df9"
    text: {@meijeru, you can still specify a step value, even if we have a range notation. You just have a `range` function with a `/skip` refinement or as another arg in the block as you say. My old `range` func supports a number of values, including blocks.}
    sent: "2016-08-05T20:30:15.920Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4f23e978997001e99c623"
    text: {The buttons does not change color. This is a bug?```Red [title: "test buttons" needs: 'view]^/view [^/^-button red "Red"^/^-button green "Green"^/^-button blue "Blue"^/]```}
    sent: "2016-08-05T20:08:30.494Z"
    v: 1
    author: "56e2f83685d51f252ab85587"
) #(
    id: "57a4f202d097eb6b2cc8b3c7"
    text: "@DideC I see. Thanks"
    sent: "2016-08-05T20:07:30.092Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a4ef51483751d50f2cd99c"
    text: {But `to` conversions are not implemented (just a few of them). So actually the better way to convert to a string! is to use `form`.}
    sent: "2016-08-05T19:56:01.021Z"
    editedAt: "2016-08-05T19:56:11.615Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57a4eee1978997001e99bdf7"
    text: {If `to` was fully implemented you would write `to string! 'word`and it would give you `== "word"`(try it in a Rebol console).}
    sent: "2016-08-05T19:54:09.755Z"
    editedAt: "2016-08-05T19:54:54.550Z"
    v: 4
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57a4ec7c6bf4dff61d36d2b0"
    text: "I want to convert a `word!` to a `string!`"
    sent: "2016-08-05T19:43:56.378Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a4ec222f03cf8749ca6760"
    text: {```^/red>> to 'me "string"^/^/*** Runtime Error 1: access violation^/*** at: 0805FB70h^/```}
    sent: "2016-08-05T19:42:26.415Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a4ec0bd097eb6b2cc8a415"
    text: {I can't guess how is `to` used, in the meantime I got}
    sent: "2016-08-05T19:42:03.428Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a4e89c6bf4dff61d36c9c0"
    text: {@dockimbel The advantage of a block for a range is that you can add an (optional) step value...}
    sent: "2016-08-05T19:27:24.761Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a4b04e6bf4dff61d3636e0"
    text: {@greggirwin oh, I see, at least I will not spend hours trying to do it =)}
    sent: "2016-08-05T15:27:10.077Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a4afe3483751d50f2c32a0"
    text: {You can't right now, or maybe ever. One of the tradeoffs of a dialect (eDSL) versus string parsing an external (xDSL), is that your data must be valid, loadable Red.}
    sent: "2016-08-05T15:25:23.691Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4af8448422f8b4971cdec"
    text: "can I?"
    sent: "2016-08-05T15:23:48.082Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a4af81d097eb6b2cc8004b"
    text: {@greggirwin @endo64 but how do I use '<- in a dialect then?}
    sent: "2016-08-05T15:23:45.423Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a4ae95fb162b752ca0ed88"
    text: "Semseddin, faster than me again. ;^^)"
    sent: "2016-08-05T15:19:49.590Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4ae73483751d50f2c2ebc"
    text: "Don't confuse evaluation with loading."
    sent: "2016-08-05T15:19:15.608Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4ae72fb162b752ca0ed3a"
    text: {It is `load`ed by the interpreter, it is not like a string:^/```^/>> [%]^/** Syntax Error: Invalid file -- %^/```}
    sent: "2016-08-05T15:19:14.545Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a4ae11978997001e9916af"
    text: {@endo64 but, this is a block, it is not evaluated, how can anything inside be a problem?}
    sent: "2016-08-05T15:17:37.221Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a4adf72f03cf8749c9c445"
    text: "@endo64 ye, this is Rebol"
    sent: "2016-08-05T15:17:11.288Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a4ad87483751d50f2c2c5d"
    text: {The error comes from the first part `[a <- b]` as `<-` is invalid.}
    sent: "2016-08-05T15:15:19.297Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a4ab506bf4dff61d3628fe"
    text: {```^/red>> to-lit-word "a" => 'a^/*** Script Error: to-lit-word has no value^/```}
    sent: "2016-08-05T15:05:52.492Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a4ab28483751d50f2c250a"
    text: {Are you on Rebol? On Red `to-lit-word` has no value.}
    sent: "2016-08-05T15:05:12.256Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a4a3632f03cf8749c9a47e"
    text: {`>> parse [a] ['a] => true`^/`>> to-lit-word "a" => 'a`^/`>> parse [a] [(to-lit-word "a")]  => false`^/but why?}
    sent: "2016-08-05T14:32:03.844Z"
    editedAt: "2016-08-05T14:32:12.296Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a4a030483751d50f2c03af"
    text: {what am I missing here? `>> parse [a <- b] ['a (to-lit-word "<-") 'b] => ** Syntax Error: Invalid tag -- <-`^/}
    sent: "2016-08-05T14:18:24.147Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a480df2f03cf8749c94142"
    text: "@SteeveGit great, thanks!"
    sent: "2016-08-05T12:04:47.076Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a480c748422f8b49714628"
    text: {@meijeru You can even re-use `pair!` for that. ;-)}
    sent: "2016-08-05T12:04:23.670Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a47e362f03cf8749c93b70"
    text: {Functions which conceptually take a *range*  as argument could quite easliy be implemented by specifying the range in a block `[lower upper]`. That way no new literals are necessary .}
    sent: "2016-08-05T11:53:26.727Z"
    editedAt: "2016-08-05T11:55:40.685Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a47cace8441a917903c1b7"
    text: {Parsing a string or a block of litterals needs different rules:^/> parse "15" [some digit] => true^/parse [15] [integer!] => true}
    sent: "2016-08-05T11:46:52.108Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a47a7e857442dc0f5577be"
    text: {hey guys, how do I parse numbers in a block? `>> digit: charset [#"0" - #"9"] ; >> parse [15] [any digit] => false`}
    sent: "2016-08-05T11:37:34.118Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a475fd2f03cf8749c92934"
    text: {Nice Red pitch to Lispers: https://www.reddit.com/r/programming/comments/4vhm76/red_by_example_a_website_providing_example_code/d5z3uv6}
    sent: "2016-08-05T11:18:21.032Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a4658c978997001e985df2"
    text: {Just thoughts @WiseGenius. Doc mentioned `ratio!`, for which 1:2 would be good, but that's `time!`. If we had datatype alias names, it could be both, but then you also have the issue of extra path name accessors. Something we could work around to some extent at the mezz level. ^/^/The `1..2` range notation has come up, and I used it in my `bounds` and `range` dialects, but it's a hack on `tuple!` which is fun, but limited. We will also want IPv6 addresses at some point. And `1::2` almost looks like it has little corners of a box between the values.^/^/I try to think of the different ways we can use what we have now, their limitations (e.g. byte ranges and 12 segments on tuples), and what the most useful things might be in our ever-tightening lexical space (or do we consider Unicode for some things?)^/^/Ren is always on my mind as well of course.}
    sent: "2016-08-05T10:08:12.822Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a45d9c1c2bf6621bbe3d07"
    text: "don't push this into the language"
    sent: "2016-08-05T09:34:20.691Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a45d96c915a0e426be9ce6"
    text: {@ifgem this is something very easy to implement as a dialect}
    sent: "2016-08-05T09:34:14.927Z"
    editedAt: "2016-08-05T09:34:39.491Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a453d59e85d3e82688f179"
    text: {@ifgem Remember that Red is an homoiconic language (unlike Ruby), so literal syntax always denotes a datatype (because everything is just data in Red).}
    sent: "2016-08-05T08:52:37.919Z"
    editedAt: "2016-08-05T08:52:57.521Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a4536b836d2d0211660856"
    text: {@ifgem If you really want a feature to be part of Red, you need to make a case about it and explain with evidences how it would make Red better. We happen to have also a REP [process](https://github.com/red/red/wiki/Red-Enhancement-Proposal-Process), though, we haven't used it yet.}
    sent: "2016-08-05T08:50:51.839Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a450eb0bd017c16e3decd9"
    text: {1..10 - from 1 to 10 including 1,10 and 1...10 excluding 1, 10}
    sent: "2016-08-05T08:40:11.043Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a450a947659bfb1090a35f"
    text: "I'd like to have Ruby-like range syntax I.e"
    sent: "2016-08-05T08:39:05.866Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a42eb7c915a0e426be3869"
    text: "range?"
    sent: "2016-08-05T06:14:15.015Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a42c23c2cebb04124689b0"
    text: {@greggirwin In what way? I'm curious: What plans do you have for `1::2`?}
    sent: "2016-08-05T06:03:15.026Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a41ee9836d2d0211659ebc"
    text: {On other lex notes, I was going to ask if `1::2` would be a problem.}
    sent: "2016-08-05T05:06:49.502Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a408761c2bf6621bbd8a09"
    text: {@WiseGenius Not decided yet, it's open to propositions.}
    sent: "2016-08-05T03:31:02.387Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a4014bc2cebb0412468844"
    text: {@dockimbel :+1: Yay for `ratio!`!!!! How will it relate to `bignum!`, or is that yet to be decided?}
    sent: "2016-08-05T03:00:27.409Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a3e6f1e2ff9ec76e57d44f"
    text: "oh, that makes a lot of sense!"
    sent: "2016-08-05T01:08:01.496Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3e6981c2bf6621bbd4948"
    text: {@maximvl `copy/part` is a path, `copy` is a word, functions are all anonymous. ;-P}
    sent: "2016-08-05T01:06:32.495Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a3e6671c2bf6621bbd48cc"
    text: {@maximvl Very interesting. You should output parens instead of blocks, so the resulting code could be easily evaluated with `do`.}
    sent: "2016-08-05T01:05:43.911Z"
    editedAt: "2016-08-05T01:06:06.056Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a3e64d47659bfb108fd91d"
    text: {this is something I can add later, time to sleep now )}
    sent: "2016-08-05T01:05:17.433Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57a3e6350bd017c16e3d1d5e"
    text: {for some reason things like `copy/part` are paths, not functions in Rebol}
    sent: "2016-08-05T01:04:53.566Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3e59947659bfb108fd7d2"
    text: {just a few hours, but I made it :3 https://gist.github.com/maximvl/6bcf182a105ee9443118248255f0fab5}
    sent: "2016-08-05T01:02:17.514Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3e5549e85d3e826881a8d"
    text: "ok, thanks for answers)"
    sent: "2016-08-05T01:01:08.111Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3e51b0bd017c16e3d1b8b"
    text: "@maximvl In Rebol, it was introduced in Rebol3."
    sent: "2016-08-05T01:00:11.948Z"
    editedAt: "2016-08-05T01:00:19.671Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a3e4f0e2ff9ec76e57d056"
    text: {A rational datatype (`ratio!`) is on our todo-list. I think that parsing `2/3` as a date! is not a feature anyone will miss. ;-) OTOH, a ratio! will be useful both for maths and dialects.}
    sent: "2016-08-05T00:59:28.604Z"
    editedAt: "2016-08-05T01:02:07.056Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a3e4e3c915a0e426bdb77f"
    text: "@dockimbel I was looking for `continue` in Rebol"
    sent: "2016-08-05T00:59:15.822Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3e49f00663f5b1b4c380d"
    text: {@maximvl @greggirwin `continue` is available, but poorly tested, so watch out for bugs.}
    sent: "2016-08-05T00:58:07.671Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a3d39b00663f5b1b4c19f7"
    text: "And `any` is shortcut `or`."
    sent: "2016-08-04T23:45:31.241Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3d3869e85d3e82687fa8d"
    text: "ah, cool)"
    sent: "2016-08-04T23:45:10.460Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3d377836d2d021165114f"
    text: {```^/red>> all [false integer? print 5]^/== none^/```}
    sent: "2016-08-04T23:44:55.475Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3d35ee2ff9ec76e57b20a"
    text: "Use `all`."
    sent: "2016-08-04T23:44:30.151Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3d2e647659bfb108fb817"
    text: "* this is in Rebol"
    sent: "2016-08-04T23:42:30.442Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3d2621c2bf6621bbd22ed"
    text: {`false and (integer? print 5) => 5`  - no short circuit evaluation?^/}
    sent: "2016-08-04T23:40:18.760Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3d1c10bd017c16e3cf5f8"
    text: {ye, position in original series, that's good enough =)}
    sent: "2016-08-04T23:37:37.806Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3d19c1c2bf6621bbd21b7"
    text: "I don't believe `continue` is in place yet."
    sent: "2016-08-04T23:37:00.519Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3d181836d2d0211650e31"
    text: {`find` in rebol returns the position in the series where the value was found.}
    sent: "2016-08-04T23:36:33.010Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3d11b00663f5b1b4c1587"
    text: {btw, is there `continue` for loops in Rebol/Red? I can see `break` only}
    sent: "2016-08-04T23:34:51.246Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3d06247659bfb108fb391"
    text: {because in Rebol it returns values: `>> find [a b c] 'b => [b c]`^/}
    sent: "2016-08-04T23:31:46.333Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3d0471c2bf6621bbd1dfe"
    text: "oh, do you mean find in Red?"
    sent: "2016-08-04T23:31:19.988Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3d01f47659bfb108fb299"
    text: {But `find` returns the position. It was a design choice.}
    sent: "2016-08-04T23:30:39.372Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3cff79e85d3e82687f449"
    text: {ye, I think the word is just confusing, I would think that position means index}
    sent: "2016-08-04T23:29:59.943Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cfc200663f5b1b4c12e0"
    text: "To match how `find` works, yes."
    sent: "2016-08-04T23:29:06.123Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3cfc10bd017c16e3cf23c"
    text: "or, does position mean value here?)"
    sent: "2016-08-04T23:29:05.783Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cfa89e85d3e82687f3c1"
    text: "mm do you really return positions?"
    sent: "2016-08-04T23:28:40.377Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cf88e2ff9ec76e57aab8"
    text: "Fixed doc string for the first one."
    sent: "2016-08-04T23:28:08.863Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3cf6f836d2d0211650a37"
    text: {```^/find-all: function [^/^-"Returns all positions in a series that match a test."^/^-series [series!]^/^-test   [any-function!] "Test (predicate) to perform on each value; must take one arg"^/][^/^-collect [^/^-^-forall series [if test series/1 [keep/only series]]^/^-]^/]^/find-all [1 2 3 4 5 6] :odd?^/find-all [1 2 3 4 5 6] :even?^/find-all [1 2 q 3 #x 4 /c 5 6] :any-word?^/```}
    sent: "2016-08-04T23:27:43.826Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3cf6ac915a0e426bd8fde"
    text: {@greggirwin collect, keep, something new, thanks :)}
    sent: "2016-08-04T23:27:38.734Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cf1a00663f5b1b4c1150"
    text: {Hang on. Just hacked that and the doc string doesn't match my hack.}
    sent: "2016-08-04T23:26:18.772Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3cede836d2d021165094e"
    text: {Here's a quick one for you @maximvl ^/```^/find-all: function [^/^-"Returns all values in a series that match a test."^/^-series [series!]^/^-test   [any-function!] "Test (predicate) to perform on each value; must take one arg"^/][^/^-collect [forall series [if test series/1 [keep/only series/1]]]^/]^/red>> find-all [1 2 3 4 5 6] :odd?^/== [1 3 5]^/red>> find-all [1 2 3 4 5 6] :even?^/== [2 4 6]^/red>> find-all [1 2 q 3 #x 4 /c 5 6] :any-word?^/== [q #x /c]^/```}
    sent: "2016-08-04T23:25:18.598Z"
    editedAt: "2016-08-04T23:27:56.595Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3cdcb00663f5b1b4c0eb2"
    text: "I'm excited about that feature too :smile: "
    sent: "2016-08-04T23:20:43.978Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57a3cda7e2ff9ec76e57a623"
    text: "it's good to know that such things have a design"
    sent: "2016-08-04T23:20:07.334Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cd5300663f5b1b4c0dc2"
    text: "@dander thanks)"
    sent: "2016-08-04T23:18:43.841Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cd44c915a0e426bd8b9c"
    text: "ah, I should had guessed it"
    sent: "2016-08-04T23:18:28.557Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cd230bd017c16e3cec7e"
    text: {@maximvl  HOF = high order functions (in response to your question about passing in a predicate)}
    sent: "2016-08-04T23:17:55.322Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57a3cd019e85d3e82687ee2a"
    text: "@maximvl fun in various ways:))"
    sent: "2016-08-04T23:17:21.856Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3ccd31c2bf6621bbd17a2"
    text: {btw, today a lot of new languages claim that they are here `to make programming fun again`, but I found that fun only in Rebol/Red}
    sent: "2016-08-04T23:16:35.728Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cc6447659bfb108faa83"
    text: "That'd be ... hot:)"
    sent: "2016-08-04T23:14:44.449Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3cc4ce2ff9ec76e57a3a3"
    text: ":D"
    sent: "2016-08-04T23:14:20.460Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cc42c915a0e426bd89d5"
    text: "Hot Official Fraction?:)))"
    sent: "2016-08-04T23:14:10.589Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3cc2247659bfb108faa1c"
    text: "@greggirwin what's HOF?"
    sent: "2016-08-04T23:13:38.139Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cc12c915a0e426bd8984"
    text: {:point_up: [August 4, 2016 4:45 PM](https://gitter.im/red/red?at=57a3c56ce2ff9ec76e57957e) You have to write it yourself @maximvl. I have various flavors, but Doc says he has a general plan for HOF design coming as well.}
    sent: "2016-08-04T23:13:22.657Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3cbdf47659bfb108fa998"
    text: "@ifgem ^^)"
    sent: "2016-08-04T23:12:31.618Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cbdc9e85d3e82687ebdf"
    text: {or, with variables it looks much better: `gross: $500 tax: 5% net: gross - tax`}
    sent: "2016-08-04T23:12:28.939Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cbc0e2ff9ec76e57a295"
    text: "@maximvl  it makes sense.I like it:)"
    sent: "2016-08-04T23:12:00.641Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3cb7100663f5b1b4c0a6c"
    text: {but again, I don't see an easy way to parse the logic here}
    sent: "2016-08-04T23:10:41.815Z"
    editedAt: "2016-08-04T23:10:56.498Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cb610bd017c16e3ce909"
    text: "like calculate income without taxes: `$500 - 5%`"
    sent: "2016-08-04T23:10:25.495Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cb4c836d2d02116501ac"
    text: "well, not exactly $0, but other numbers would do"
    sent: "2016-08-04T23:10:04.174Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cb00e2ff9ec76e57a14a"
    text: {@maximvl last thought... if makes sense: ```255 - 50%```, with the same logic, would this make sense? ```$0 + 100%```}
    sent: "2016-08-04T23:08:48.950Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3cad2e2ff9ec76e57a0f2"
    text: "@ifgem cool )"
    sent: "2016-08-04T23:08:02.453Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3cabfe2ff9ec76e57a0c9"
    text: {yep, shouldn't be hard to add: https://en.wikipedia.org/wiki/Rational_data_type}
    sent: "2016-08-04T23:07:43.606Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57a3ca780bd017c16e3ce6fa"
    text: "I'm waiting for utype!:)))"
    sent: "2016-08-04T23:06:32.380Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3c9f70bd017c16e3ce61f"
    text: {I have nothing against ```fraction!```, just do it! :)}
    sent: "2016-08-04T23:04:23.417Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3c9c29e85d3e82687e773"
    text: {@Oldes fraction! would be useful as well: 1/3 of the screen not 33.3333333%}
    sent: "2016-08-04T23:03:30.145Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3c95e6085a402651603b2"
    text: "Agreed"
    sent: "2016-08-04T23:01:50.152Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3c94700663f5b1b4c0637"
    text: {When thinking a little bit more about ```percent!``` datatype, it makes pretty big sense in DSLs, like in VID. Must go sleep.}
    sent: "2016-08-04T23:01:27.795Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3c85c00663f5b1b4c0482"
    text: {@maximvl :)))^/```^/of: make op! func [howm [percent!] what [integer!]] [^/^-to integer! what * howm^/]^/50% of 100 => 50^/```}
    sent: "2016-08-04T22:57:32.150Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3c831e2ff9ec76e579b36"
    text: {@SteeveGit true, funny thing is this was done before IEEE standard, so it's more or less unique in lisps}
    sent: "2016-08-04T22:56:49.350Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c7ec0bd017c16e3ce1e6"
    text: {until you want it, of course: `CL-USER> (float (/ 2 3)) => 0.6666667`^/}
    sent: "2016-08-04T22:55:40.987Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c7e82c10fb940877cb55"
    text: {I think we could do that. It's not rocket science and algorithms are well known}
    sent: "2016-08-04T22:55:36.548Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3c7ba6085a402651603ac"
    text: "ok"
    sent: "2016-08-04T22:54:50.221Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3c7aee2ff9ec76e579a5b"
    text: "nothing gets rounded or ceiled"
    sent: "2016-08-04T22:54:38.499Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c7ad8c8b3c3c1e060c03"
    text: {even with results of math operations with fractions ?}
    sent: "2016-08-04T22:54:37.240Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3c7a11c2bf6621bbd0e6d"
    text: {and then you can also do all the match you ever wanted: `CL-USER> (* 2 (/ 2 3)) => 4/3`^/}
    sent: "2016-08-04T22:54:25.701Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c76c1c2bf6621bbd0e03"
    text: "not 0.6666666667"
    sent: "2016-08-04T22:53:32.027Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c7641c2bf6621bbd0de9"
    text: "@SteeveGit its like `CL-USER> (/ 2 3) => 2/3`^/"
    sent: "2016-08-04T22:53:24.185Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c74147659bfb108fa0ca"
    text: {@Oldes I would say 50% of 255, but yeah, it's not clear how to make this happen}
    sent: "2016-08-04T22:52:49.755Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c73fc2cebb0412468721"
    text: "Its doing symbolic maths ?"
    sent: "2016-08-04T22:52:47.275Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3c712e2ff9ec76e579936"
    text: {btw, lisps do have exact arithmetic, and it's also pretty convenient in many cases}
    sent: "2016-08-04T22:52:02.403Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c6f19e85d3e82687e1a5"
    text: {it does not when you don't specify what ```50%``` you want to subtract.}
    sent: "2016-08-04T22:51:29.191Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3c6ea836d2d021164f91d"
    text: "without literal:("
    sent: "2016-08-04T22:51:22.497Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3c6d0e2ff9ec76e5798d0"
    text: "1/3 is treated as date! in rebol"
    sent: "2016-08-04T22:50:56.166Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c6bf0bd017c16e3cdf97"
    text: "@SteeveGit of course:))"
    sent: "2016-08-04T22:50:39.416Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3c6aec2cebb041246871d"
    text: {Good Idea, we should add a fraction! type like 1/3}
    sent: "2016-08-04T22:50:22.893Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3c6a31c2bf6621bbd0b69"
    text: "it totally does"
    sent: "2016-08-04T22:50:11.803Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c68a47659bfb108f9ee2"
    text: {I don't want to translate my thoughts into something for a computer}
    sent: "2016-08-04T22:49:46.392Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c67e836d2d021164f854"
    text: "anyway... ```255 - 50%``` does not make sense."
    sent: "2016-08-04T22:49:34.630Z"
    editedAt: "2016-08-04T22:49:40.663Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3c674c915a0e426bd7dc6"
    text: {because, if I think with percents, I'd like to use percents}
    sent: "2016-08-04T22:49:24.637Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c64e836d2d021164f806"
    text: {to me this question is the same as why have percent datatype if one can use fractinos}
    sent: "2016-08-04T22:48:46.359Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c61b47659bfb108f9e28"
    text: "@maximvl odd question, I guess"
    sent: "2016-08-04T22:47:55.105Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3c5fdc915a0e426bd7cfe"
    text: "why do you want a language to be convinient"
    sent: "2016-08-04T22:47:25.255Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c5fa6085a402651603a2"
    text: "Wow wow, I think it's time to go to my bed ;-)"
    sent: "2016-08-04T22:47:22.446Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3c5e09e85d3e82687dfce"
    text: "you can even program in brainfuck"
    sent: "2016-08-04T22:46:56.069Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c5df1c2bf6621bbd0a13"
    text: "everything"
    sent: "2016-08-04T22:46:55.391Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c5d247659bfb108f9daa"
    text: "but it makes no sense"
    sent: "2016-08-04T22:46:42.706Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c5c8c915a0e426bd7cc1"
    text: "use strings instead of everything"
    sent: "2016-08-04T22:46:32.727Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c5bf00663f5b1b4bff5b"
    text: "you can also always use strings instead of dates"
    sent: "2016-08-04T22:46:23.275Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c5970bd017c16e3cddb4"
    text: {I know, but somehow don't know, why to have ```percent!``` datatype as I can always use just ```0.5``` instead of ```50%```}
    sent: "2016-08-04T22:45:43.709Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3c573836d2d021164f633"
    text: "but how do I search by predicate?"
    sent: "2016-08-04T22:45:07.269Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c56ce2ff9ec76e57957e"
    text: "guys, in rebol, `find` takes an element to searh"
    sent: "2016-08-04T22:45:00.249Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a3c5238c8b3c3c1e060bf6"
    text: {but `red * 50% = 128.0.0` is the correct math operation, I think.}
    sent: "2016-08-04T22:43:47.550Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3c4890bd017c16e3cdbc6"
    text: {I can imagine (for special types) having:^/```^/red - 50% ==  128.0.0^/red - 0.5 == 255.0.0^/```}
    sent: "2016-08-04T22:41:13.757Z"
    editedAt: "2016-08-04T22:43:57.401Z"
    v: 4
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3c42a47659bfb108f9ac5"
    text: { I'm still not sure if ```percent!``` datatype should be just an _alias_ for ```decimal!``` as it is now.}
    sent: "2016-08-04T22:39:38.959Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3c29247659bfb108f975a"
    text: "Yes, you're right."
    sent: "2016-08-04T22:32:50.097Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3c22b0bd017c16e3cd64a"
    text: {Once you have a bunch of calcs, and the order of the args determines the result type, that should not produce different results in the case of float and percent. The current behavior, while not immediately intuitive for some args, may be best. }
    sent: "2016-08-04T22:31:07.848Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3c12ee2ff9ec76e578c8a"
    text: {Making one thing easier often makes another harder. }
    sent: "2016-08-04T22:26:54.908Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3c10047659bfb108f9467"
    text: {And while we might want more magic, sometimes the best answer is to doc the behavior and "fix it with language."}
    sent: "2016-08-04T22:26:08.449Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3c0c9836d2d021164eb60"
    text: {Well, it does now because I added logic to do so, but if the design says that 1% + 1 = 101%, I need to take that out and you would always need to specify a step value for percents.}
    sent: "2016-08-04T22:25:13.829Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3c0850bd017c16e3cd2b1"
    text: {What prompted my ticket was working on an `incr` func, where the default increment value is 1. If you pass in a percent, 1% does not produce 2%. }
    sent: "2016-08-04T22:24:05.278Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3c0438c8b3c3c1e060bca"
    text: {Well, it seems that tuples are always maxed:^/> 200.0.0 + 300 = 255.255.255^/^/Fine, fine, fine.}
    sent: "2016-08-04T22:22:59.918Z"
    editedAt: "2016-08-04T22:23:11.901Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3bfd41c2bf6621bbcfd42"
    text: {definitely^/```\^/red>> red - 2%^/== 254.0.0^/red>> red - 20%^/== 254.0.0^/red>> red - 200%^/== 253.0.0^/red>> red - 2000%^/== 235.0.0^/red>> red - 20000%^/== 55.0.0^/```^/}
    sent: "2016-08-04T22:21:08.351Z"
    editedAt: "2016-08-04T22:21:41.140Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
)#(
    id: "57a3bf7de2ff9ec76e5788dc"
    text: {the second is bug.. and is inconsistent with Rebol 3}
    sent: "2016-08-04T22:19:41.115Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3bf7ac2cebb0412468702"
    text: {Oldes, intersting point of view. So it's maxed. I see use cases where it will be useful.}
    sent: "2016-08-04T22:19:38.891Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3bf5c836d2d021164e7a3"
    text: {The tricky thing is that percents, in lexical form, look like "whole" numbers. The fact that they are floats internally leaks out. It can work either way, but what is the most useful and least surprising behavior?}
    sent: "2016-08-04T22:19:08.532Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a3bf1e836d2d021164e6f3"
    text: {and instead of overflow error it leaves the maximum}
    sent: "2016-08-04T22:18:06.476Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3bef7836d2d021164e683"
    text: {```^/>> 255 / 10%^/== 2550.0^/^/>> 255 / 0.1^/== 2550.0^/```}
    sent: "2016-08-04T22:17:27.430Z"
    editedAt: "2016-08-04T22:17:38.033Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3bed6836d2d021164e5e9"
    text: {I'm not sure if it is a bug... it is because it deals with percents like with decimal values.. where:}
    sent: "2016-08-04T22:16:54.066Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3bed42c10fb940877cb30"
    text: "same as red + 0.1"
    sent: "2016-08-04T22:16:52.904Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3beb600663f5b1b4bee81"
    text: {@SteeveGit  `red + 10% => 255.0.0 (ok)`^/Why do you think it's ok?}
    sent: "2016-08-04T22:16:22.092Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3be7a2c10fb940877cb2e"
    text: {ifgem^/```lisp^/red + 10% => 255.0.0 (ok)^/red - 10% => 254.0.0 (perhaps a bug, something with not rounding the result with the nearest integer)^/red * 10% => 25.0.0  (ok)^/red / 10% =>  255.0.0 (bug)^/```}
    sent: "2016-08-04T22:15:22.392Z"
    editedAt: "2016-08-04T22:15:56.602Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3be099e85d3e82687cee4"
    text: "@Oldes what do you think about the last snippet?"
    sent: "2016-08-04T22:13:29.083Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3bdad6085a40265160364"
    text: "Agreed, Oldes"
    sent: "2016-08-04T22:11:57.578Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3bd2e47659bfb108f8bf8"
    text: {_resulting type should be of the type of the first argument by default_ is what I would expect. But with integer and decimal it makes sense to have always decimal.. probably. Hard decisions for language designers:)}
    sent: "2016-08-04T22:09:50.707Z"
    editedAt: "2016-08-04T22:11:24.530Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3bd250bd017c16e3ccac7"
    text: {Bug.^/```^/red + 10% => 255.0.0^/red - 10% => 254.0.0^/red * 10% => 25.0.0^/red / 10% =>  255.0.0^/```^/The first and the last one.}
    sent: "2016-08-04T22:09:40.983Z"
    editedAt: "2016-08-04T22:11:12.695Z"
    v: 5
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3bcdd8c8b3c3c1e060ba3"
    text: "I still have dreams :-)"
    sent: "2016-08-04T22:08:29.977Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3bcba00663f5b1b4be921"
    text: {@SteeveGit do you remember that Red is still not even in beta state?}
    sent: "2016-08-04T22:07:54.033Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a3bc802c10fb940877cb0f"
    text: {I don't have preferences. I just want it consistent enough to not have to change my code every month. }
    sent: "2016-08-04T22:06:55.999Z"
    editedAt: "2016-08-04T22:07:40.472Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3bc5ac915a0e426bd67b5"
    text: {@SteeveGit ^/the latest build:^/```^/1 + 1.0 => 2.0^/1.0 + 1 => 2.0^/```}
    sent: "2016-08-04T22:06:18.358Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3bbf16085a40265160353"
    text: "He will probably give you an answer tomorrow."
    sent: "2016-08-04T22:04:33.513Z"
    editedAt: "2016-08-04T22:05:05.647Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3bbc42c10fb940877cb0d"
    text: {You perhaps found something interesting, the resulting type should be  of the type of the first argument by default as far as I remember. But Nenad seems to want to change the way of promoting resulting types in math operations. I don't know the current situation of his position in that regard.}
    sent: "2016-08-04T22:03:48.176Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3bb71c915a0e426bd655c"
    text: "In Ruby it makes sense, in Red it doesn't."
    sent: "2016-08-04T22:02:25.647Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b9ff47659bfb108f84e5"
    text: {@SteeveGit ^/the latest build:^/```^/1 + 10% => 110%^/10% + 1 => 110.0^/``` ^/reminds me Ruby, where '+' is just a method of certain class:)).^/27 jule:^/```^/1 + 10% => 1.01^/10% + 1 => 1.01^/```^/Rebol3:^/```^/1 + 10% => 1.1^/10 %+ 1 => 1.1^/```}
    sent: "2016-08-04T21:56:15.555Z"
    editedAt: "2016-08-04T22:00:38.655Z"
    v: 5
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b83a0bd017c16e3cbe85"
    text: "definitely:)"
    sent: "2016-08-04T21:48:42.950Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b7e06085a4026516032c"
    text: "it makes sense 50% is 0.5 in decimal"
    sent: "2016-08-04T21:47:12.071Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3b7ad00663f5b1b4bdd53"
    text: "I understand that 1's 100%, but ..."
    sent: "2016-08-04T21:46:21.311Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b7778c8b3c3c1e060b7f"
    text: "What is that you don't like ?"
    sent: "2016-08-04T21:45:27.057Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3b704c915a0e426bd5946"
    text: "But it seems to be reasonable. "
    sent: "2016-08-04T21:43:32.244Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b667c915a0e426bd578e"
    text: {They fixed #2139, but I still don't like its behavior.}
    sent: "2016-08-04T21:40:55.677Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b6281c2bf6621bbce5b5"
    text: {the first one building date's 27 jule.^/the second one's today.}
    sent: "2016-08-04T21:39:52.665Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b5ee0bd017c16e3cb7d8"
    text: "@SteeveGit^/https://i.imgsafe.org/3b5e6af646.gif"
    sent: "2016-08-04T21:38:54.831Z"
    editedAt: "2016-08-04T21:46:38.299Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b4956085a40265160311"
    text: {If it's a real one perhaps, wait for Nenad and his magical wand, he will erase some of your findings before you can incant a protective spell.}
    sent: "2016-08-04T21:33:09.208Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3b3669e85d3e82687b31d"
    text: {@SteeveGit soon, I'll find my 10th bug:)).Should I celebrate it?:)))}
    sent: "2016-08-04T21:28:06.853Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b28f2c10fb940877cabd"
    text: "keep that fever to find new bugs tomorrow ;-)"
    sent: "2016-08-04T21:24:31.812Z"
    editedAt: "2016-08-04T21:25:13.027Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3b23900663f5b1b4bcf57"
    text: "I have got to sleep, but I don't want to:))"
    sent: "2016-08-04T21:23:05.872Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3b07cc2cebb0412468681"
    text: {Regarding #2155. I see it like an interesting (unespected) feature, not really a "miss" since it doesn't interfere with porting Rebol or R3.}
    sent: "2016-08-04T21:15:40.868Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3af622c10fb940877cab0"
    text: "You also  can contribute to the documentation."
    sent: "2016-08-04T21:10:58.166Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3af23e2ff9ec76e575e30"
    text: {@SteeveGit  AFAK, most of the people in this room including me use rebol/core guide as the main reference and this difference might shock them. Also, it might interfere with porting rebol2, rebol3 scripts to Red, even though I haven't seen much scripts using this "feature".^/Again, it should be at least documented [here](https://github.com/red/red/wiki/Differences-between-Red-and-Rebol).}
    sent: "2016-08-04T21:09:55.634Z"
    editedAt: "2016-08-04T21:10:50.794Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3acbd00663f5b1b4bc138"
    text: {And Having 3 different ways to handle this  is seems to be quite ugly. At least, it has to be documented.}
    sent: "2016-08-04T20:59:41.380Z"
    editedAt: "2016-08-04T21:01:24.282Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3ac7647659bfb108f6175"
    text: "But I like Rebol3 approach:)."
    sent: "2016-08-04T20:58:30.963Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3ac0dc2cebb0412468640"
    text: {You know, Nenad never said he would duplicate excactly Rebol or R3. Some time his version adds interesting improvements.^/Btw, When people are in the chat, I think it would be better to test proof your findings first with us before opening tickets. }
    sent: "2016-08-04T20:56:45.273Z"
    editedAt: "2016-08-04T20:59:02.020Z"
    v: 5
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3abc1c915a0e426bd3bda"
    text: "It's not true"
    sent: "2016-08-04T20:55:29.580Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3abbb1c2bf6621bbccae2"
    text: "They all work differently:))"
    sent: "2016-08-04T20:55:23.113Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3ab9c00663f5b1b4bbe2d"
    text: "And then test it in Rebol2, Rebol3"
    sent: "2016-08-04T20:54:52.478Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3ab8c836d2d021164b799"
    text: "test: func [h [10]] [h]"
    sent: "2016-08-04T20:54:36.622Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3ab316085a4026516029a"
    text: {Not an error, since it allows post redefinition of custom types^/```lisp^/red>> test: func [h [integer!!]] [h]^/== func [h [integer!!]][h]^/red>> test 10^/*** Script Error: integer!! has no value^/*** Where: test^/red>> integer!!: integer!^/== integer!^/red>> test 10^/== 10^/```}
    sent: "2016-08-04T20:53:05.644Z"
    editedAt: "2016-08-04T20:53:15.495Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3aa569e85d3e826879c2d"
    text: "O my english:)) (an error:(()"
    sent: "2016-08-04T20:49:26.579Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a9e56085a40265160289"
    text: ""
    sent: "2016-08-04T20:47:33.245Z"
    editedAt: "2016-08-04T20:47:51.450Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3a8e78c8b3c3c1e060ab9"
    text: "REBOL/View 2.7.8.3.1 1-Jan-2011"
    sent: "2016-08-04T20:43:19.799Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3a8b69e85d3e8268797e7"
    text: "@SteeveGit what version of Rebol do you use?"
    sent: "2016-08-04T20:42:30.180Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a80d00663f5b1b4bb39d"
    text: "Because of my ... keyboard:)))"
    sent: "2016-08-04T20:39:41.143Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a7e76085a40265160265"
    text: ":smile: "
    sent: "2016-08-04T20:39:03.168Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
)#(
    id: "57a3a7d8836d2d021164ad6c"
    text: {Found another "miss".}
    sent: "2016-08-04T20:38:48.359Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a7bc836d2d021164ad2d"
    text: "Saved one bug:)))))))))"
    sent: "2016-08-04T20:38:20.373Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a776c2cebb0412468609"
    text: "I would say a miss, but yeah! ;-)"
    sent: "2016-08-04T20:37:10.046Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3a6dcc915a0e426bd2d3c"
    text: {@SteeveGit difference between op! and functon! behavior #2154 seems to be a bug.}
    sent: "2016-08-04T20:34:36.128Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a6a3c915a0e426bd2c39"
    text: "Love magic:))"
    sent: "2016-08-04T20:33:39.491Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a68d0bd017c16e3c8ebc"
    text: "and compose"
    sent: "2016-08-04T20:33:17.300Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a682836d2d021164a971"
    text: "Yes:))"
    sent: "2016-08-04T20:33:06.050Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a6756085a4026516024a"
    text: "You did for **parse** right? ;-)"
    sent: "2016-08-04T20:32:53.690Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3a65c836d2d021164a8ef"
    text: "Didn't know it."
    sent: "2016-08-04T20:32:28.788Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a62d2c10fb940877ca15"
    text: "neither #2153 "
    sent: "2016-08-04T20:31:41.707Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3a5c8c2cebb04124685d7"
    text: {@ifgem Some behaviors are taken from R3. #2154 is not a bug in that regard.}
    sent: "2016-08-04T20:30:00.389Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3a3419e85d3e8268788a9"
    text: {Was playing with function definition - opened 3 tickets :sparkles:}
    sent: "2016-08-04T20:19:13.347Z"
    editedAt: "2016-08-04T20:19:29.539Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a2ab47659bfb108f453a"
    text: "I understand it, but ... "
    sent: "2016-08-04T20:16:43.573Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3a0a747659bfb108f3f8f"
    text: {anything behind the ; is a comment, so you really miss an ending ]}
    sent: "2016-08-04T20:08:07.033Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a39ee61c2bf6621bbca550"
    text: "Don't know if it's a  bug."
    sent: "2016-08-04T20:00:38.308Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a39ed2e2ff9ec76e572d87"
    text: {I don't like this Red/Rebol behavior:).^/```^/[;] => Syntax Error: Missing ]^/```}
    sent: "2016-08-04T20:00:18.809Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a3833dc915a0e426bcc419"
    text: {@SteeveGit was expecting a manga, got anime instead :smile: }
    sent: "2016-08-04T18:02:37.825Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a37612c2cebb041246832c"
    text: {Sorry @greggirwin , I can't betray the team Blue. (if it's Pokemon Go related)}
    sent: "2016-08-04T17:06:26.289Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3748600663f5b1b4b1e93"
    text: "Go Team Red!"
    sent: "2016-08-04T16:59:50.815Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a37351e2ff9ec76e56aef2"
    text: {Do we have Red REPL for Android? I want to continue playing with it while being on the road.}
    sent: "2016-08-04T16:54:41.738Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a36f032c10fb940877c6de"
    text: {Well this one is good if you like mecha and sci-fi plots. [VF streaming](http://www.mangacity.co/watch.php?stream=R2LaOjavb5F19tzxs8seb401WMmoChxk9alOjlakhFcg0CDiBWnCSeuERGTkPhuP) }
    sent: "2016-08-04T16:36:19.136Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a36e6a0bd017c16e3bed78"
    text: {@SteeveGit Mostly in the mainstream ones. Graphics from SnG look nice.}
    sent: "2016-08-04T16:33:46.541Z"
    editedAt: "2016-08-04T16:34:15.235Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a36dc38c8b3c3c1e060739"
    text: "Are you in Manga? It was Suisei no Gargantia"
    sent: "2016-08-04T16:30:59.202Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a36d5bc915a0e426bc8860"
    text: {@SteeveGit I wish I was an AI, building Red would be so much easier and faster. ;-) Which one did you watch by the way?}
    sent: "2016-08-04T16:29:15.481Z"
    editedAt: "2016-08-04T16:30:14.793Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a36d228c8b3c3c1e060736"
    text: {It's funny, probably because I just watched some sci-fi manga, But I read your formal answer with an IA-like voice echoing in my head. }
    sent: "2016-08-04T16:28:18.098Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a36bee8c8b3c3c1e060725"
    text: "good"
    sent: "2016-08-04T16:23:10.937Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a36bb7c915a0e426bc839c"
    text: {@SteeveGit Not measured, but from the code changes, it affects only those specific cases (no performance impact for ordered calls), and the overhead is very minor. The compiler deals with it more easily and produces optimal code regardless of the refinements order.}
    sent: "2016-08-04T16:22:15.102Z"
    editedAt: "2016-08-04T16:23:21.185Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a36a51c2cebb0412468287"
    text: " Any aftermath? Like a little slow-down?"
    sent: "2016-08-04T16:16:17.653Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a3672f00663f5b1b4afbbb"
    text: {FYI, the out-of-order refinements with arguments issue within interpreted code has been fixed and merged to master.}
    sent: "2016-08-04T16:02:55.838Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a30da59e85d3e82685eaf9"
    text: "@ifgem :+1:  :sparkles: "
    sent: "2016-08-04T09:40:53.532Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a30d7a1c2bf6621bbb127a"
    text: "@dockimbel it's working:)))."
    sent: "2016-08-04T09:40:10.045Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a30c85836d2d0211630898"
    text: {@ifgem Can you give it a try with this [new build](http://static.red-lang.org/dl/auto/mac/red-04aug16-e19f63a)? We don't have a pre-10.8 macOS here, so we can't test if the patch works or not.}
    sent: "2016-08-04T09:36:05.304Z"
    editedAt: "2016-08-04T09:37:08.441Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a3074647659bfb108d9e64"
    text: "@ifgem Yes. We are working on a fix for that..."
    sent: "2016-08-04T09:13:42.455Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a3060cc915a0e426bb7849"
    text: {I'm not familiar with mac os: Is it what you want?^/The file /System/Library/Frameworks/CFNetwork.framework/CFNetwork does not exist.}
    sent: "2016-08-04T09:08:28.254Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a305ede2ff9ec76e558837"
    text: {It seems the lib is located in another framework in pre-10.8.}
    sent: "2016-08-04T09:07:57.786Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a3053d9e85d3e82685d6d7"
    text: "ok."
    sent: "2016-08-04T09:05:01.849Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a30515e2ff9ec76e55866f"
    text: {@ifgem That's odd. Can you check if that library exists on 10.7.5?}
    sent: "2016-08-04T09:04:21.263Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a2f4fbe2ff9ec76e555f11"
    text: {@dockimbel cool...us usualy, Red does "best of both worlds" ;)}
    sent: "2016-08-04T07:55:39.534Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a2f4ebe2ff9ec76e555eef"
    text: {Red console isn't working on my friend's computer:)).^/`Compiling compression library...^/Compiling Red console...^/dyld: Library not loaded: /System/Library/Frameworks/CFNetwork.framework/CFNetwork^/  Referenced from: /Users/LispBerry/.red/console-2016-8-4-31595^/  Reason: image not found^/logout^/`^/(Mac os 10.7.5)}
    sent: "2016-08-04T07:55:23.269Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a2f37ac915a0e426bb4cc1"
    text: {@gour It's for dynamically constructed code, which could be run through the interpreter or the JIT compiler. AOT compilation will still be available.}
    sent: "2016-08-04T07:49:14.461Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a2eef8836d2d021162bfc5"
    text: "not yet"
    sent: "2016-08-04T07:30:00.780Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a2ee111c2bf6621bbac913"
    text: {@gour that's the goal I believe.. have you looked at red/system?}
    sent: "2016-08-04T07:26:09.827Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a2e80f47659bfb108d5320"
    text: {@dockimbel JIT in Red-2.0 is just for the interpreter part, while there will be still native static compilation available?}
    sent: "2016-08-04T07:00:31.618Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a2e45d00663f5b1b49ae0d"
    text: {@ifgem Parse is the right option for such job. ;-)^/}
    sent: "2016-08-04T06:44:45.775Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a2e420e2ff9ec76e553b66"
    text: {@maximvl I should come to EU in fall this year, maybe we could organize a conf in Paris, if there are enough people interested.}
    sent: "2016-08-04T06:43:44.064Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a2e3690bd017c16e3a8643"
    text: {@ifgem We can add support in `help` for a `tutorial:` field once a tutorial dialect really becomes available. In your above example, it's just regular Red code, a tutorial dialect would be a framework with a specific structure. Though, having such dialect could be very helpful for beginners. If someone starts designing it, please make it not dependent on console as output, as we could also have it wrapped in a GUI (in addition to the console).}
    sent: "2016-08-04T06:40:41.769Z"
    editedAt: "2016-08-04T06:41:12.663Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a2e1fa0bd017c16e3a8350"
    text: {@WiseGenius @greggirwin `do` is, by design, invoking the interpreter, so its block argument is just data for the compiler, therefore, the compiler cannot see that `f` is set to a function, at run-time. This behavior is unlikely to change until Red 2.0, where the JIT compiler could blur the lines between compiled/interpreted code.}
    sent: "2016-08-04T06:34:34.652Z"
    editedAt: "2016-08-04T06:36:39.915Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a25e0a1c2bf6621bb9aa39"
    text: "Love Red:)"
    sent: "2016-08-03T21:11:38.869Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a25e061c2bf6621bb9aa24"
    text: {Hack:))^/```^/object load {"something" hello: func [] [] cool: 20}^/```}
    sent: "2016-08-03T21:11:34.341Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a25c289e85d3e826847dde"
    text: "Parse, of course!!!:)))"
    sent: "2016-08-03T21:03:36.337Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
)#(
    id: "57a25be4e2ff9ec76e542b7a"
    text: {Is there a better way to get Red definitions from the string!, file?^/```^/while [not tail? script] [^/^-element: load/next script 'script^/^-if set-word? element [^/^-^-value: load/next script 'script^/^-^-either value = 'func [^/^-^-^-probe load/next script 'script^/^-^-^-script: next script^/^-^-][^/^-^-^-probe value^/^-^-]^/^-]^/]^/```^/It's not beautiful:))}
    sent: "2016-08-03T21:02:28.957Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a25626e2ff9ec76e541b00"
    text: {@pekr I pasted a function in `red/code` that gets you the missing `help to-`}
    sent: "2016-08-03T20:37:58.913Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a255e39e85d3e826846b63"
    text: "@greggirwin ok:))."
    sent: "2016-08-03T20:36:51.394Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a247961c2bf6621bb96bdb"
    text: "the EU one would be nice :)"
    sent: "2016-08-03T19:35:50.887Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a2478500663f5b1b486506"
    text: {@greggirwin ah, I don't think I can come to US for informal gathering though}
    sent: "2016-08-03T19:35:33.209Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a245ef9e85d3e826844225"
    text: {We'll also have some kind of module help I'm sure, when that feature is added.}
    sent: "2016-08-03T19:28:47.381Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a24598836d2d0211615a95"
    text: {@ifgem , no need to make it a string. Make it a block in the header for easier processing. I suggest prototyping your idea as a separate function, outside of `help` to see how it works. }
    sent: "2016-08-03T19:27:20.953Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a244db00663f5b1b485dfc"
    text: {@maximvl , Nenad is going to try to come to the US I believe, and try to have an informal gathering. Nothing else planned.}
    sent: "2016-08-03T19:24:11.835Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a231710bd017c16e390a82"
    text: "*achieved:)"
    sent: "2016-08-03T18:01:21.982Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a230e4c915a0e426b9a4f7"
    text: "last ones I can find were at ~2013"
    sent: "2016-08-03T17:59:00.276Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a230cf00663f5b1b482437"
    text: "guys, are there any conferences about Rebol ?"
    sent: "2016-08-03T17:58:39.003Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a23034c915a0e426b9a31e"
    text: "@dockimbel what do you think?"
    sent: "2016-08-03T17:56:04.905Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a22e1de2ff9ec76e53a762"
    text: {@dockimbel Sorry for the delay.^/I'd like to have a more beginners-friendly, convenient scripting support in Red.^/I think, that it can be archived by adding property(?) to header(tutorial) and defining tutorial(or teach-me) function in Red.^/file.red^/```^/Red [^/    ; simple dialect for quick tutorial writing:)): tasks, tests, highlighting important parts.^/    tutorial: {^/    > magic-number is magic^/    mybelovedfunc 10 10  => 20^/    }^/]^/magic-number: 9^/mybelovedfunc: func ["adds one number to another" a  b] []^/```^/Repl^/```^/> help %file.red^/  magic-number => 9.^/  mybelovedfunc [a b] => adds one number to another.^/> tutorial(teachme) %file.red (or block!)^/  ...^/```}
    sent: "2016-08-03T17:47:09.848Z"
    editedAt: "2016-08-03T17:55:31.825Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a22a32836d2d0211610dfd"
    text: {@greggirwin i did C(++) long ago . time of Zortech C++ and now looking for some higher-level language with some type-safety in order to avoid fiddlings with pointers and to have some fun ;) Red looks good}
    sent: "2016-08-03T17:30:26.880Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a2269a8c8b3c3c1e05f71a"
    text: {Although I only discovered it today, this difference looks familiar. It's very possible I've pointed it out before and forgotten about it. I briefly looked through some old chats and issues, but couldn't find anything.}
    sent: "2016-08-03T17:15:06.505Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a226988c8b3c3c1e05f717"
    text: {@greggirwin Haha! I hope so! I'm not so much questioning IF my code will break, but WHEN. I'm thinking the difference may be a known issue which won't be fixable until after a certain X feature, milestone, etc. If that's the case, I'd like to know. I'd rather use certain Y features, but they won't be implemented for a long time. So if it looks likely that X won't happen until after Y, then there's no point sitting on my hands when I can exploit while waiting for Y.}
    sent: "2016-08-03T17:15:04.797Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a21ab6e2ff9ec76e536fff"
    text: {The fact that you just pointed it out probably means it will be fixed soon...and break your code. ;^^)}
    sent: "2016-08-03T16:24:22.290Z"
    editedAt: "2016-08-03T16:24:33.140Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a21a940bd017c16e38c995"
    text: {@WiseGenius, I would never rely on difference between interpreted and compiled unless they are doc'd as "by design".}
    sent: "2016-08-03T16:23:48.485Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a21a3bc915a0e426b95ad6"
    text: {@gour, we need a few more styles, like a table/grid, but people wrote full apps and systems in R2, so it's more than possible. It should actually be a lot better than using C++, because C++ is a system level language that wasn't designed for use at the application level, certainly not GUIs. ;^^)}
    sent: "2016-08-03T16:22:19.122Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a219a22c10fb940877b61b"
    text: {Some code:^/```^/f: none^/do [f: does [print "I don't get printed when compiled." false]]^/either f [print f][print "Neither do I."]^/```^/Result when interpreted:^/```^/I don't get printed when compiled.^/Neither do I.^/```^/Result when compiled and run:^/```^/?function?^/```^/@dockimbel I'm currently exploiting the above difference between interpreted and compiled behaviour in a project, and I'm wondering how long I have until the compiled behaviour changes and my code breaks? Is the difference a bug? Should I open a ticket? How long would you estimate I can rely on it staying this way?}
    sent: "2016-08-03T16:19:46.815Z"
    editedAt: "2016-08-03T16:21:07.195Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a218bb00663f5b1b47dc84"
    text: {@ifgem, to do more help-like things, we need a plan for what the data will look like. i.e. standards for what is in a header, or other data in a file, that can be extracted and processed. It will be exciting to see what ideas people come up with for this. }
    sent: "2016-08-03T16:15:55.188Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a20cdd1c2bf6621bb8c07f"
    text: {@qtxie I tested it on Windows 8 and it doesn't work properly as well.}
    sent: "2016-08-03T15:25:17.871Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1f60000663f5b1b47705a"
    text: "@qtxie Windows 10:))"
    sent: "2016-08-03T13:47:44.898Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1e3d66085a4026515e98d"
    text: {@ifgem The console works fine in my Window 7. Looks like it's caused by the Chinese font is not fixed width. What's OS version are you using?}
    sent: "2016-08-03T12:30:14.693Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57a1dd891c2bf6621bb83cef"
    text: {@pekr i'm aware of the gui-status, just wondering in general about supposed Red's suitability for the task...}
    sent: "2016-08-03T12:03:21.971Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1dbaf0bd017c16e38137a"
    text: {@gour - yes, Red's GUI should be OK to use for the desktop apps. It uses native widgets, it just needs to wrap more of them, which is planned for some future versions ...}
    sent: "2016-08-03T11:55:27.153Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a1da969e85d3e826830d87"
    text: {@ifgem When you take the Red pill, there is no turning back. ;-)}
    sent: "2016-08-03T11:50:46.343Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1d9230bd017c16e380cff"
    text: {@dockimbel can't wait for 0.7. I like your plan [:))))](https://youtu.be/ErcV8vlKexE?t=4m)}
    sent: "2016-08-03T11:44:35.867Z"
    editedAt: "2016-08-03T11:46:17.535Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1cdecc915a0e426b883b1"
    text: {@ifgem Just FYI, I found that in rebol you have `protect-system` to stop redefinition of built-ins}
    sent: "2016-08-03T10:56:44.671Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a1c882e2ff9ec76e528d7c"
    text: {in any case, learning Red's GUI seems much more fun and/or productive than diving into e.g. (Py)Qt...}
    sent: "2016-08-03T10:33:38.900Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1c8641c2bf6621bb80a17"
    text: {i am ignorant about Rebol, but wonder whether you conside that writing full-fledged (iow. not just some scriptie) desktop application - e.g. something which would be usually written in C++/Python using (Py)Qt is approriate target for Red? (I'm aware that Red aims at full-stack language, but not sure whether Rebol was used for similar things or more for quick scripting only?)}
    sent: "2016-08-03T10:33:08.611Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1c7bbe2ff9ec76e528bb7"
    text: {I vaguely remember reading a blogpost? about it somewhere}
    sent: "2016-08-03T10:30:19.762Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a1c78800663f5b1b46fb80"
    text: {Also, with source_location, it might be a bit hard with metaprogramming, e.g. `do [b: func [a] [a + 1] b 3]`}
    sent: "2016-08-03T10:29:28.438Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a1c6f247659bfb108ab444"
    text: {@ifgem what is your use case? Doesn't it already show you the relevant documentation? What e.g. do you want shown with `help %match.red`?}
    sent: "2016-08-03T10:26:58.231Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a1c6bd00663f5b1b46f9a2"
    text: {@gour Good! I've seen that fix before, but totally forgot about it. ;-)}
    sent: "2016-08-03T10:26:05.497Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1c58500663f5b1b46f6e9"
    text: "@dockimbel ^^^^^^"
    sent: "2016-08-03T10:20:53.795Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1c57fc915a0e426b87015"
    text: {@SteeveGit  thanks, confirmed with both (worm & clock) demos ;)}
    sent: "2016-08-03T10:20:47.304Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1c2442c10fb940877afd9"
    text: {@gour I also use Wine. Removing **transparent** solves the issue.^/> base 200x200 ~~transparent~~ rate 1 now draw [}
    sent: "2016-08-03T10:07:00.737Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a1bf121c2bf6621bb7f3a2"
    text: {What do you think about writing help function that can also take a file as an argument ```help %match.red``` and returns either help information from the header or none?}
    sent: "2016-08-03T09:53:22.675Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1bd2f9e85d3e82682c6e8"
    text: {hello, have problems with Eve-like demos under wine - here is e.g. the [link](http://pasteboard.co/pCWGx2FB.png) for clock demo. anyone having success with wine?}
    sent: "2016-08-03T09:45:19.942Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1bc0600663f5b1b46e255"
    text: "We don't have such feature. "
    sent: "2016-08-03T09:40:22.416Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1bb99e2ff9ec76e526ec8"
    text: {It returns the Ruby source filename and line number containing this method.}
    sent: "2016-08-03T09:38:33.047Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1bb750bd017c16e37c5ab"
    text: "@ifgem I don't know that Ruby function."
    sent: "2016-08-03T09:37:57.911Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1bb13e2ff9ec76e526dcf"
    text: {Does Red have a function similar to Ruby's source_location?}
    sent: "2016-08-03T09:36:19.862Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1b744836d2d02115fdbcc"
    text: {@ifgem It's a known issue with double-width characters. I let @qtxie answer that.}
    sent: "2016-08-03T09:20:04.559Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1b59d836d2d02115fd86a"
    text: {Another funny bug:)).^/https://s32.postimg.org/qwh6ph3x1/funnybug.gif^/https://s31.postimg.org/48t2ccwor/funnybug1.gif}
    sent: "2016-08-03T09:13:01.167Z"
    editedAt: "2016-08-03T09:18:28.526Z"
    v: 5
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1a9359e85d3e826829852"
    text: "@mikeparr hooray."
    sent: "2016-08-03T08:20:05.911Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1a91fe2ff9ec76e5246d1"
    text: "Rebol.com is back, just in case you did not know."
    sent: "2016-08-03T08:19:43.881Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "57a1a906e2ff9ec76e5246af"
    text: { @ifgem > Will Red get rich text widget soon?^/^/No ETA for now, we haven't investigated it much so far. There are several options on the table:^/1. Use native widgets, quickest way, but we'll need to lower down the features for cross-platform compability.^/2. Use a webview (big work)^/3. Make a custom rich text component using our Draw dialect.^/}
    sent: "2016-08-03T08:19:18.565Z"
    editedAt: "2016-08-03T08:19:27.758Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a19f01836d2d02115fa7b6"
    text: {I would say that "fun" is a feature of Red though :smile: }
    sent: "2016-08-03T07:36:33.341Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "57a19ed5e2ff9ec76e523162"
    text: {@ifgem I was mostly joking, but it sounds like it is "by design". It probably won't be like that forever though because there will be some protection on core words like that, as doc said.}
    sent: "2016-08-03T07:35:48.998Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57a19ea4c915a0e426b81bb2"
    text: {I would not make fun of Red, especially in a situation, when many features are still not implemented ...}
    sent: "2016-08-03T07:35:00.202Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a19e5e00663f5b1b46a222"
    text: "if they say, it is a feature, it just is :-)"
    sent: "2016-08-03T07:33:50.860Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a19e440bd017c16e37860a"
    text: {no, you just simply seem to miss, how the language works deep-down ... well, me too, but I was educated by gurus ... not that I would understand much of it :-)}
    sent: "2016-08-03T07:33:24.086Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a19d600bd017c16e378403"
    text: "@dander  feature developed for fun?:)))"
    sent: "2016-08-03T07:29:36.875Z"
    editedAt: "2016-08-03T07:29:46.643Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a19ced1c2bf6621bb7a533"
    text: {I think it's a feature, rather than a bug :smile: }
    sent: "2016-08-03T07:27:41.964Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57a18a4a836d2d02115f7f69"
    text: "@geekyI Not yet."
    sent: "2016-08-03T06:08:10.866Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a189370bd017c16e375931"
    text: {Especially, I adore new percent! behavior.^/```^/20.010% + 20.2010% => 222020:)))^/```}
    sent: "2016-08-03T06:03:35.871Z"
    editedAt: "2016-08-03T06:07:53.897Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a189081c2bf6621bb77c18"
    text: {Is there a way to prevent redefinition of built-in words?}
    sent: "2016-08-03T06:02:48.140Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a188cf47659bfb108a2efe"
    text: {It seems to behave oddly sometimes. Is it a bug or I just shouldn't do it:)?}
    sent: "2016-08-03T06:01:51.054Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1887b9e85d3e8268250be"
    text: {We don't have words protection nor modules yet, which would prevent from corrupting the environment (unless you explicitly allow it). ;-)}
    sent: "2016-08-03T06:00:27.526Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a187e39e85d3e826824fbc"
    text: "it's obvious. but 20% + 20.0% => 220 isn't."
    sent: "2016-08-03T05:57:55.369Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a187a1836d2d02115f7a7a"
    text: {```^/red>> +: :-^/== make op! [[^/    "Returns the difference between two values" ^/    value1 [number! char! pair! tuple! vector! time!] ^/    value2 [number! char! pair! tupl...^/red>> 5 + 5^/== 0^/```}
    sent: "2016-08-03T05:56:49.404Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a18792836d2d02115f7a67"
    text: {@pekr sometimes, it works:))).In pretty odd way, though}
    sent: "2016-08-03T05:56:34.691Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1874de2ff9ec76e51fbf3"
    text: {I'm crying:))^/```^/percent!: integer!^/20% + 20.0% => 220 ^/```}
    sent: "2016-08-03T05:55:25.725Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1871700663f5b1b466fe9"
    text: ":))"
    sent: "2016-08-03T05:54:31.116Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1870ee2ff9ec76e51fb86"
    text: {So you redefine dtype and wonder, that further on, it does not work? :-)}
    sent: "2016-08-03T05:54:22.576Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a184d200663f5b1b466afb"
    text: { LOLx3^/```^/integer!: block!^/10 => 10%^/```^/```^/string!: block!^/"hello" => #"o"^/```^/```^/char!: block!^/#"mo" ;=> Script Error: skip does not allow integer! for its offset argument^/;---------------^/usually returns Syntax Error: invalid char! at {#"mo"}^/```^/```^/block!: string!^/[] ;=> Script Error: transcode does not allow string! for its <anon> argument.^/; same for block: integer^/```^/```^/string!: red^/"hello" ;=> Script Error: cannot MAKE 255.0.0 from: 5.^/"hell" ;=> Script Error: cannot MAKE 255.0.0 from: 4.^/```}
    sent: "2016-08-03T05:44:50.600Z"
    editedAt: "2016-08-03T05:53:07.022Z"
    v: 8
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1822c1c2bf6621bb76ffe"
    text: {Pretty odd, I guess.^/```^/string!: 10^/"wow" ;=> Script Error: append does not allow integer! for its series argument.^/;-------------------------^/integer!: "wow"^/10 ;=> Script Error: make-number does not allow string! for its type argument.^/```^/LOL^/```^/string!: "hell"^/test: func [hello [string!]] [print hello]^/test "helm" ;=> Script Error: test does not allow string! for its hello argument.^/```^/LOL:))))^/```^/integer!: string!^/append 10 10 ;=> Script Error: append does not allow percent! for its series argument; percent! you say:))^/-------------^/;normally returns Script Error: append does not allow integer! for its series argument.^/```}
    sent: "2016-08-03T05:33:32.651Z"
    editedAt: "2016-08-03T05:42:26.384Z"
    v: 6
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a1740f1c2bf6621bb7567c"
    text: {@greggirwin `make` is lacking many constructors, as they are overlapping with `to` action, so they should come once `to` is ready.}
    sent: "2016-08-03T04:33:19.385Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a173db0bd017c16e37313d"
    text: {@ifgem Indeed, that difference is annoying, please open a ticket about it. In the meantime, you can use `select` for the lookup:^/```lisp^/red>> test: make hash! [a: 10 a 20]^/== make hash! [a: 10 a 20]^/red>> select test first [a:]^/== 10^/```}
    sent: "2016-08-03T04:32:27.956Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a161ed47659bfb1089ed53"
    text: {Should you be able to make a `typeset!` *from* a `typeset!`? You can't currently, so I did a quick wrapper for myself. Just didn't know if that was something others would want. }
    sent: "2016-08-03T03:15:57.677Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a118b4e2ff9ec76e512da0"
    text: {Is it ok?^/```^/test: [a: 10]^/test/a ;=> 10^/```^/```^/test: make hash! [a: 10]^/test/a ;=> none^/```^/cool:)^/```^/test: make hash! [a: 10 a 20]^/test/a ;=> 20^/--------------^/test: [a: 10 a 20]^/test/a ;=> 10^/```}
    sent: "2016-08-02T22:03:32.252Z"
    editedAt: "2016-08-02T22:06:53.799Z"
    v: 4
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a109ec0bd017c16e366587"
    text: "Thanks! I'll try to move further"
    sent: "2016-08-02T21:00:28.115Z"
    v: 1
    author: "53063d9b5e986b0712ef9391"
) #(
    id: "57a1025a9e85d3e826814617"
    text: {You'll need a stack of some kind to move back to less indented levels, and rules to go with it.}
    sent: "2016-08-02T20:28:10.723Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a101fa47659bfb1089225d"
    text: {@KirillTemnov, this is ugly, but might get you started.^/```^/input: {foo^/  bar^/    buzz}^/^/output: copy []^/target: output^/level: 2^/^/emit: func [v][append/only target v]^/^/dent: [level space (level: level + 2  target: last emit copy [])]^/text: [copy =text to [newline | end] (emit =text) skip]^/main-rule: [any [dent | text]]^/parse input main-rule^/```}
    sent: "2016-08-02T20:26:34.041Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a0f95800663f5b1b454fc3"
    text: {@gour yes, I'm using Sublime Text 3 on Windows and MacOSX too... actually the main reason is the cross-compatibility. Before I was using Notepad++. Unfortunately I still don't have time to play with Red, so I just silently watch sometimes.}
    sent: "2016-08-02T19:49:44.663Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "57a0f3eb1c2bf6621bb64bd0"
    text: "ok"
    sent: "2016-08-02T19:26:35.853Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a0f3e600663f5b1b4541a1"
    text: "a multiple of two spaces"
    sent: "2016-08-02T19:26:30.620Z"
    v: 1
    author: "53063d9b5e986b0712ef9391"
) #(
    id: "57a0f3bae2ff9ec76e50ca57"
    text: "4 space?"
    sent: "2016-08-02T19:25:46.571Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a0f37b836d2d02115e5618"
    text: {Hi folks!^/^/I've try to implement basic functionality for template engine similar to slim (http://slim-lang.com/).^/The first thing I'm gonna implement is block nesting. And here are the troubles:^/Instead of using curly braces template engine must use indents, and I'm stuck again with `parse`(^/The input is^/^/```^/test: {foo^/  bar^/    buzz}^/```^/^/The output **must be**^/^/```^/[foo [bar [buzz]]]^/```^/^/Can someone help me?}
    sent: "2016-08-02T19:24:43.922Z"
    v: 1
    author: "53063d9b5e986b0712ef9391"
) #(
    id: "57a0d82d2c10fb940877a77f"
    text: "@dockimbel Thanks again."
    sent: "2016-08-02T17:28:13.434Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0d6639e85d3e82680c5c7"
    text: {@WiseGenius I thought about that when we included it, but didn't do it mainly for marketing reason: nobody knows BSL, everybody knows BSD. ;-) Also, if someone distributes a derivative of Red's toolchain, I like the fact that they have to include the license files, so the origin of the code gets preserved.}
    sent: "2016-08-02T17:20:35.679Z"
    editedAt: "2016-08-02T17:22:09.845Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a0d5978c8b3c3c1e05e7cf"
    text: {@dockimbel Thanks. What would be the disadvantage if all of it was under BSL?}
    sent: "2016-08-02T17:17:11.616Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0d585836d2d02115e0584"
    text: "Will Red get rich text widget soon?"
    sent: "2016-08-02T17:16:53.814Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a0d481c915a0e426b66a7f"
    text: {@WiseGenius Because BSD-3 was too constraining for runtime library in binary form (we don't want to burden Red users with legal constraints because they use Red's runtime library), so we picked up BSL, which suits well binary code distribution. So, the toolchain code is BSD-3 and the runtime library (included in all compiled Red programs) is BSL. Basically, if you just use Red toolchain (in binary or source form) to write code in Red, you don't have to do anything and you're free to do whatever you want with the source or compiled code you wrote. If you distribute a derivative version of the Red toolchain, you have to include the licenses files unchanged. That's all. ;-)}
    sent: "2016-08-02T17:12:33.342Z"
    editedAt: "2016-08-02T17:19:12.672Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a0d44b1c2bf6621bb5f2b1"
    text: "F"
    sent: "2016-08-02T17:11:39.357Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57a0caa12c10fb940877a681"
    text: {@dockimbel In the Red source, why are some files licensed under BSL, and some under BSD-3?}
    sent: "2016-08-02T16:30:25.830Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0c84be2ff9ec76e504fa0"
    text: {I can see a tab completion as a separate thing ...}
    sent: "2016-08-02T16:20:27.211Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0c76e6085a4026515dd57"
    text: {I just thought I'd note that 3) is different from Red's current TAB-completion in at least 2 ways:^/1. TAB-completion on `to` gives `to to-hex to-local-file to-paren to-red-file to-image`.^/^-* This same list cannot be obtained with `help`, since `to` has a value, and so `help to` would print the definition of `to` as it does now.^/^-* In this situation, only TAB-completion is useful for @pekr's purpose.^/2. TAB-completion does nothing with `each` because no word begins that way.^/^-* With 3), `help each` would list `foreach` and `remove-each`.^/^-* In this situation, only 3) is useful for @pekr's purpose.}
    sent: "2016-08-02T16:16:46.012Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0c6a9836d2d02115ddb35"
    text: {Thanks. Good to know someone thinks in similar terms. Looking forward to its future addition ....}
    sent: "2016-08-02T16:13:29.463Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0c60ac915a0e426b64593"
    text: {@pekr FYI there is a ticket about that already https://github.com/red/red/issues/1165}
    sent: "2016-08-02T16:10:50.093Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a0ba7f9e85d3e8268077b9"
    text: {Please beware, that as a Notepad user, I am not much fluent with tab completion stuff :-)}
    sent: "2016-08-02T15:21:35.549Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0ba681c2bf6621bb5ab8e"
    text: {And as we are talking tab completion .... just one idea .... but not sure any environment works like that ... imagine you start typing `chan`, it provides you with the two results recently: `change change-dir`. Would anyone found it useful, if (after some mysterious key-press), it would fill in the lowest denominator, so `change`?}
    sent: "2016-08-02T15:21:12.136Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0ba3447659bfb10886014"
    text: "@pekr You are welcome to implement it. ;-)"
    sent: "2016-08-02T15:20:20.339Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a0b9f20bd017c16e357996"
    text: {Of course I know that ... I just wanted the option 3) for help, that's all ... I can bet I am not the only one, who would find it useful ...}
    sent: "2016-08-02T15:19:14.024Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b99300663f5b1b449cda"
    text: { @pekr In case you missed it, you have TAB-completion in Red console which does almost the same as 3) already.}
    sent: "2016-08-02T15:17:39.340Z"
    editedAt: "2016-08-02T15:18:07.431Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a0b96d836d2d02115db72d"
    text: "To your above statement - I agree ..."
    sent: "2016-08-02T15:17:01.786Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b95a00663f5b1b449c37"
    text: {Is the 3) mode difficult to get implemented? I would like to state, that it is not a big priority for me, but I get caught by missing it from time to time ...}
    sent: "2016-08-02T15:16:42.384Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b9456085a4026515dbb0"
    text: {So in case it isn't clear, in the above proposal, `help char` would return what it would in Rebol 2, and `help "char"` would return what it would in Rebol 3 (and currently what it already does in Red).}
    sent: "2016-08-02T15:16:21.140Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
)#(
    id: "57a0b8532c10fb940877a4ec"
    text: "Yes, `help char` is a much better example."
    sent: "2016-08-02T15:12:19.869Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0b834c915a0e426b61cbd"
    text: "We imo need all three modes ..."
    sent: "2016-08-02T15:11:48.021Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b81847659bfb10885988"
    text: {I don't want to see all functions, accepting char! as a datatype, or do I?}
    sent: "2016-08-02T15:11:20.529Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b80247659bfb1088595d"
    text: {so run: help "char"}
    sent: "2016-08-02T15:10:58.836Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b7cb8c8b3c3c1e05e4d7"
    text: {@pekr Really!^/Go to R3 and run `help to-`.^/You'll see there aren't that many more results than Rebol 2 to clutter up what you were after. Maybe you have a better example than `to-`? I'm sure there probably is.}
    sent: "2016-08-02T15:10:03.982Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0b6d80bd017c16e35707d"
    text: "I need a grep for Red's full text search then :-)"
    sent: "2016-08-02T15:06:00.284Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b6cc00663f5b1b44959f"
    text: {And now please mimick it with Red (well, we don't have those funcs yet, so just imagine that).}
    sent: "2016-08-02T15:05:48.636Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b6c8e2ff9ec76e501e9a"
    text: {Partial search (if word is not define) is usefull. Think also tab completion in console (pretty the same thing).^/I'm used to the 3) and like it. I would like to see it in Red too.}
    sent: "2016-08-02T15:05:44.511Z"
    editedAt: "2016-08-02T15:05:58.863Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57a0b6ba47659bfb108854dc"
    text: "Go to R2 and run: help to-"
    sent: "2016-08-02T15:05:30.691Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b6a2e2ff9ec76e501e2d"
    text: "really? :-)"
    sent: "2016-08-02T15:05:06.091Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b6612c10fb940877a4b2"
    text: {@pekr Haha! I use the results of 1) all the time, and have never had a use for the results of 3). Each to his own. ;)}
    sent: "2016-08-02T15:04:01.287Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0b58200663f5b1b449212"
    text: {Yes. I do especially miss the 3), whereas I find 1) as the least useful}
    sent: "2016-08-02T15:00:18.650Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0b4742c10fb940877a464"
    text: {@pekr I think you've misunderstood me, and I think that's my fault. Never mind that for now, then. Let me start over. What do you think of this proposal?^/^/Red should have 3 help search modes:^/1. When `help`'s argument is a `string!`, do a full-text search within all definitions, and return a list of matches.^/^-* This is already what Red and Rebol 3 would do in that situation.^/2. When `help`'s argument is a `word!` with a value, return only the definition of that word.^/^-* This is already what Red, Rebol 3 and Rebol 2 would all do in that situation.^/3. When `help`'s argument is a `word!` with no value, search only within the names of the entries and return a list of partial matches.^/^-* This is already what Rebol 2 would do in that situation.^/^/Actually, each of those isn't quite what they currently do, in that they don't “return” the results. Rather, they only print them. But I've always thought that should change. They should print and return them.}
    sent: "2016-08-02T14:55:48.644Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0b26700663f5b1b448939"
    text: "@dockimbel thanks ;) "
    sent: "2016-08-02T14:47:03.993Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57a0b0881c2bf6621bb58d3d"
    text: {@Zamlox The same `block` is bound again by `obj2/f1`, so you get a rightful error when running `obj1/f1`. You need to deep copy the block, so each of the copies will be bound to the right function's context:^/```lisp^/block: [if x = 'V [append buffer [1 2]] ]^/obj-1: make object! compose/deep [ f1: func [buffer [block!] x [word!]] copy/deep block]^/obj-2: make object! compose/deep [ f1: func [buffer [block!] x [word!]] copy/deep block]^/obj-1/f1 copy [] 'V^/```}
    sent: "2016-08-02T14:39:04.036Z"
    editedAt: "2016-08-02T14:42:32.164Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a0a89b836d2d02115d8910"
    text: {What can be wrong with following code:^/```^/block: [if x = 'V [append buffer [1 2]] ]^/obj-1: make object! compose/deep [ f1: func [buffer [block!] x [word!]][ (block) ]]^/obj-2: make object! compose/deep [ f1: func [buffer [block!] x [word!]][ (block) ]]^/obj-1/f1 copy [] 'V^/*** Script Error: buffer is not in the specified context^/*** Where: if^/```^/```buffer``` is not known in ```obj-1/f1``` after creating ```obj-2```}
    sent: "2016-08-02T14:05:15.182Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57a0a5bb0bd017c16e353d1d"
    text: {Red's fulltext returns lots of results for `help "char"`for e.g., as it seems to do a real full text search, whereas R2 does not search types, etc.}
    sent: "2016-08-02T13:52:59.200Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0a57c0bd017c16e353c82"
    text: {IMO not with a full text search, but only with the inside the name search ...}
    sent: "2016-08-02T13:51:56.705Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0a53ee2ff9ec76e4fea98"
    text: {@pekr Ah, so R2 retries with a full text search if an exact match fails}
    sent: "2016-08-02T13:50:54.064Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a0a4ede2ff9ec76e4fe9de"
    text: {So maybe if the Red non-quotes search would be extended to cover the "find anywhere in the function name",  it would be sufficient for me ... and full text search using quotes could stay ...}
    sent: "2016-08-02T13:49:33.171Z"
    editedAt: "2016-08-02T13:49:56.715Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0a4c39e85d3e8268039d4"
    text: {As for R2, it seems to me, that the partial search is being done in just the terms of the function name? E.g. try: help char (in R2), vs help "char" (in Red)}
    sent: "2016-08-02T13:48:51.896Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0a45ae2ff9ec76e4fe828"
    text: {I have seen myself caught by the search, as well as few other users. Maybe, after some time, I will get used to it. But the quotes requirement I can see a bit inconvenient :-)}
    sent: "2016-08-02T13:47:06.758Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0a4269e85d3e826803851"
    text: {And you get all to-* variants as an output ... and that's what I want ...}
    sent: "2016-08-02T13:46:14.528Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0a40f00663f5b1b4460c2"
    text: {@WiseGenius  - I am not describing situation of word having no value, but mostly a partial search. In R2, just tyhe: help to-}
    sent: "2016-08-02T13:45:51.481Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a0a1738c8b3c3c1e05e2bd"
    text: {@dockimbel, If this is what @pekr is referring to (rather than NEVER needing quotes), then I don't see how what he's asking takes away any of the modes. In Rebol, if the word `type` in the above example has no value, and there are still search results, the user can see that the word musn't have had a value, and they don't have to search it again with quotes as they would have to in Red. This makes using Rebol slightly more efficient. Am I wrong?}
    sent: "2016-08-02T13:34:43.592Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0a1622c10fb940877a294"
    text: {@pekr, When you say “Please remove the need for quotes”, do you mean “Make Red behave like Rebol when the word has no value” as in the difference above? If so, note that the quotes are still needed, even in Rebol, just not all of the time.}
    sent: "2016-08-02T13:34:26.960Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0a1042c10fb940877a283"
    text: {I'm still just a n00b, but here's my understanding:^/^/Some similarities:^/1. Both Rebol and Red's `help` have a “full-text” search mode and a “definition” search mode.^/2. Both Rebol and Red's `help` use “full-text” mode when the argument is `string!`.^/^/A difference:^/* Red's `help` uses “definition” mode when the argument is a `word!`.^/* Rebol's `help` uses “definition” mode only when the argument is a `word!` with a set value. If word has no value, Rebol's `help` reverts back into “full-text” mode.^/^/An example of the above difference can be seen by typing `help type` in both Red and Rebol.}
    sent: "2016-08-02T13:32:52.271Z"
    editedAt: "2016-08-02T13:33:14.505Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a0907900663f5b1b4426de"
    text: {Actually, because rebol definitions lack an `!` I feel a bit stupid now.. (Correction: no rebol doesn't seem to do a full text search.. e.g. with `? "series"` it doesn't show e.g. `append` for rebol)}
    sent: "2016-08-02T12:22:17.885Z"
    editedAt: "2016-08-02T12:27:23.874Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "57a09056e2ff9ec76e4faed4"
    text: {Actually, I've been using both.. with and without quotes, but mostly in rebol as it didn't have missing functions. The difference seems to be due to the typed nature of red}
    sent: "2016-08-02T12:21:42.868Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a08f211c2bf6621bb52e1a"
    text: {@pekr We'll certainly not do that. Both modes are useful, type `help add` and `help "add"` to see the difference (both in Red and Rebol).}
    sent: "2016-08-02T12:16:33.158Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a08ef600663f5b1b4423eb"
    text: "I see.."
    sent: "2016-08-02T12:15:50.941Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a08e63c915a0e426b5a82c"
    text: {@geekyI The quotes are for switching to a full-text search mode. Passing a word will search for a definition of that word.}
    sent: "2016-08-02T12:13:23.508Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a08e57e2ff9ec76e4fab16"
    text: {It is a constant gotcha for new and even old users ... and not compatible with R2. If there is no other technical reason for it have it that way, I pretty pretty please ask for the modification :-)}
    sent: "2016-08-02T12:13:11.341Z"
    editedAt: "2016-08-02T12:13:30.265Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a08e1fe2ff9ec76e4faa80"
    text: "Please remove the need for quotes :-("
    sent: "2016-08-02T12:12:15.219Z"
    editedAt: "2016-08-02T12:12:23.946Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a08e1400663f5b1b4421f8"
    text: {@dockimbel awesome! I didn't know that! Rebol doesn't have it.. and you need quotes? This should be more prominent}
    sent: "2016-08-02T12:12:04.093Z"
    editedAt: "2016-08-02T12:12:21.785Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a08d76c915a0e426b5a5e1"
    text: {@geekyI Searching by type will return a lot of results, as polymorphism is very high in core Red functions. You can use `help` with a Red type argument passed a a string for that:^/```lisp^/red>> help "time!"^/     %    =>  Returns what is left over when one value is divided by another^/     *    =>  Returns the product of two values^/     +    =>  Returns the sum of the two values^/...^/```}
    sent: "2016-08-02T12:09:26.989Z"
    editedAt: "2016-08-02T12:10:02.658Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a08d6e9e85d3e8267ffb8c"
    text: {@geekyl I was referring to the notion that in many languages an assignment to a variable, e.g. `a := 1` requires (or implies) that `a` has type integer. In Red, `a: 1` means that the *word* `a` is bound to the value 1, until it gets bound to some other value.}
    sent: "2016-08-02T12:09:18.001Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a08c6c1c2bf6621bb526f7"
    text: { @xificurC @meijeru  It all boils down this actually: I have a type, and I want to know what functions there are to act on it, and I'm not sure how to go on about searching for it}
    sent: "2016-08-02T12:05:00.421Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a08b5e9e85d3e8267ff6b9"
    text: {@meijeru searching for 'binding' gives me the api/ffi results, which isn't what you meant I guess? But there is this question I've seen on SO: [about definitional scoping](http://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red/21964858#21964858), have to admit, I'd a hard time wrapping my head about the concept, especially when it gets to meta programming}
    sent: "2016-08-02T12:00:30.541Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a088560bd017c16e34eb0d"
    text: {@meijeru do you refer to typed variables as in haskell? i.e. `a -> [a]` where 'a' is a typed variable, and e.g.  'Integer' would be a type without the qualification of being variable}
    sent: "2016-08-02T11:47:34.332Z"
    editedAt: "2016-08-02T11:49:01.516Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a085ff836d2d02115d2e65"
    text: {@geekyl If you miss types in Red, you are probably thinking of typed "variables", since type checking of function arguments IS provided, and every value does have a type which is lexically determined. I did put "variables" in quotes, because Red does NOT have variables in the sense you may be accustomed to. It is important to grasp the notion of "binding" in Red, to which you can find copious references in earlier parts of this chat.}
    sent: "2016-08-02T11:37:35.341Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a085621c2bf6621bb51761"
    text: {@geekyI I toyed around with factor. The IDE is nice and the language kind of forces you to write simple and reusable code. But it also has a steep learning curve and the stack is the programmer's burden to keep in head and remember}
    sent: "2016-08-02T11:34:58.409Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a0851b9e85d3e8267fe88f"
    text: {@geekyI I get lost in all the operators and type abstractions in haskell. Sure if you keep at it for a year or two you *get it*, but it's certainly not simple.}
    sent: "2016-08-02T11:33:47.815Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a0846200663f5b1b440b85"
    text: {Those are the 2 things I miss in red.. types(a way to get the functions given types, like in https://www.haskell.org/hoogle/), and a good IDE(well.. better introspection capabilities actually) to write it in..}
    sent: "2016-08-02T11:30:42.516Z"
    editedAt: "2016-08-02T11:34:10.212Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57a0843b0bd017c16e34e12d"
    text: {And factor is too different to be practical. But it is also nice conceptually. Has one of the best built in IDEs I've seen. In the help system, every word is linked (think html links, but for each word in red) Most pleasant experience reading source code for me.}
    sent: "2016-08-02T11:30:03.877Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a0834b47659bfb1087cbf6"
    text: {I do find well written haskell code easier to read (types are helpful!) as long it doesn't do too much magic or abstractions}
    sent: "2016-08-02T11:26:03.844Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a07ffd9e85d3e8267fdb41"
    text: {imo haskell is hard to write and hard to read, but very powerful and interesting. factor looks simple but it feels like a deception}
    sent: "2016-08-02T11:11:57.860Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a073961c2bf6621bb4ee3d"
    text: {Red/rebol is definitely one of the most pragmatic.. for quick prototypes nothing beats it. So.. rebol, frink and j are in the list of languages that I use on a daily basis.. whenever I need to do a calculation or a small hack}
    sent: "2016-08-02T10:19:02.394Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a072489e85d3e8267fbbe9"
    text: {And I've used J. Hated it at first for the syntax, but it is beautiful and terse when you are familiar. Harder to read though}
    sent: "2016-08-02T10:13:28.262Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a07179836d2d02115d02fa"
    text: {It seems to take familiar things and make use of that to do advanced stuff}
    sent: "2016-08-02T10:10:01.810Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "57a071521c2bf6621bb4e905"
    text: {Rebol/red is one of the strangest languages I've encountered.. in that it's almost really familiar to mainstream, yet when you look closer, so much conceptual difference}
    sent: "2016-08-02T10:09:22.396Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a06fdd1c2bf6621bb4e5fa"
    text: {Yes, all of them syntactically speaking are in my opinion better in that order, to be precise}
    sent: "2016-08-02T10:03:09.145Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a06fa49e85d3e8267fb45e"
    text: "The syntax was much simpler and more concise"
    sent: "2016-08-02T10:02:12.334Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a06f85e2ff9ec76e4f6348"
    text: {@geekyI "Best" at what?}
    sent: "2016-08-02T10:01:41.262Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a06f839e85d3e8267fb411"
    text: "Then I found factor, and now.."
    sent: "2016-08-02T10:01:39.985Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a06f6b00663f5b1b43db33"
    text: "That was until I found haskell"
    sent: "2016-08-02T10:01:15.512Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a06f5700663f5b1b43db0a"
    text: {I'd thought python was the best language out there, after having used basic and c like langugaes}
    sent: "2016-08-02T10:00:55.972Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a06ddf1c2bf6621bb4e0fa"
    text: {My take is, that Basic like languages are easier to read for most ppl. Well, maybe because Basic was my first language? There is definitely some barrier to get into Rebol like languages. But - once there, it is mentally difficult to go back :-)}
    sent: "2016-08-02T09:54:39.457Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a06d7ae2ff9ec76e4f5e83"
    text: {I'm writing python at work right now. People say it's easy to read, like pseudocode. My take is - the less syntax the better. I keep guessing what to write until the on-the-fly syntax checker is happy}
    sent: "2016-08-02T09:52:58.548Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a06a7f47659bfb1087956e"
    text: {@maximvl can't get used to idea that things like `??` are just words/functions, not "special syntax"}
    status: true
    sent: "2016-08-02T09:40:15.030Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a06a609e85d3e8267fa430"
    text: "ok, there is a help for that, no worries)"
    sent: "2016-08-02T09:39:44.111Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a06a4e00663f5b1b43d040"
    text: "what is `??` ?"
    sent: "2016-08-02T09:39:26.581Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a059e7c915a0e426b530c7"
    text: "@dockimbel thanks :)"
    sent: "2016-08-02T08:29:27.419Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a059bb0bd017c16e3480a5"
    text: {@xificurC Here is a code snippet to get you started:^/```lisp^/foreach w words-of system/words [if find any-function! type? get/any :w [?? w]]^/```}
    sent: "2016-08-02T08:28:43.940Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a0596a47659bfb10877164"
    text: {@dockimbel will take a look at `help`'s implementation once I get to it, thanks}
    sent: "2016-08-02T08:27:22.931Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a0592e00663f5b1b43abb6"
    text: {@xificurC There are some scripts around, `help` implementation partially does that already. Also extracting info from Red source code is also an option for making such lists.}
    sent: "2016-08-02T08:26:22.516Z"
    editedAt: "2016-08-02T08:26:32.261Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a058e20bd017c16e347ecb"
    text: {@xificurC No order of priorities can satisfy everyone. We try to order the features for optimizing growth and ensuring viability, which includes being able to convince non-programmers that Red is worth existing, and investing in.}
    sent: "2016-08-02T08:25:06.190Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a058490bd017c16e347d9f"
    text: "@dockimbel :point_up: "
    sent: "2016-08-02T08:22:33.900Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a058380bd017c16e347d58"
    text: {I'm not sure if there's a way to query red for a list of defined words? Would be of great benefit if a list of functions, actions, operators etc. could be retrieved programmatically from red. Then one can just run a script to update the font locks}
    sent: "2016-08-02T08:22:16.539Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a057f70bd017c16e347c66"
    text: {@dockimbel Hi Nenad. Ok, will take a while as I don't have much spare time, but will let you know if I get it into a presentable state. Skrylar made most of the work already but I understand he didn't like the order of red's priorities.}
    sent: "2016-08-02T08:21:11.989Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a057a047659bfb10876d80"
    text: {@xificurC Let me know when you have a significant milestone for emacs red-mode, I'll be happy to tweet it.}
    sent: "2016-08-02T08:19:44.883Z"
    editedAt: "2016-08-02T08:20:32.062Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a04f26836d2d02115cb71b"
    text: {@xificurC i also like prefer FOSS, but still like to support nice piece of software (e.g. VueScan) which provides great functionality}
    sent: "2016-08-02T07:43:34.981Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a0420a00663f5b1b437dd0"
    text: {@gour yeah, the entry to spacemacs can be more complex, although the abstractions they have simplify emacs in the long run. I haven't tried ST, since it's not FOSS}
    sent: "2016-08-02T06:47:38.563Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a04194e2ff9ec76e4efc5a"
    text: {@xificurC i tried to use spacemacs, but it brings another layer (of complexity) and for some things - e.g. Gnus/org-mode, it was kind of strange mix...anyway, not being full-time coder, i believe ST3 is optimal editor for me}
    sent: "2016-08-02T06:45:40.767Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a040f69e85d3e8267f4b58"
    text: {re editors: I'm (slowly) continuing Skrylar's work on emacs red-mode he named red.el. Any tips welcome :) As for @gour - I use spacemacs for everything nowadays. It brings the vi(m) editing experience and the absolute extensibility of emacs together. And you almost never need to use `ctrl` or `alt` thanks to their new approach to binding keys.}
    sent: "2016-08-02T06:43:02.819Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57a03db3c915a0e426b4fa12"
    text: {The reason is, R2 was full toolkit, supported. R3 rewrite simply took too much time, and it missed on some crucial features, hence devs were reluctant to make a switch. Although some of those features are available now, there's mostly noone left to push the original R3 C codebase further, even if sources are available ...}
    sent: "2016-08-02T06:29:07.001Z"
    editedAt: "2016-08-02T06:29:34.004Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a03928836d2d02115c8dd5"
    text: {@pekr ahh, that explains it...I read that R3 was/is not as popular as R2, but was not aware there is not much live in it any longer...otoh,  Red is in full swing, so not much to worry about}
    sent: "2016-08-02T06:09:44.692Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a034769e85d3e8267f34e9"
    text: {Ÿou are referring to Rebol 3, not Red. R3 is mostly a dead project. I mean, R3, as it was open-sourced.}
    sent: "2016-08-02T05:49:42.530Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a029cf9e85d3e8267f241b"
    text: "@geekyI last commits more than 2yrs ago?"
    sent: "2016-08-02T05:04:15.467Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a0290c00663f5b1b4355a4"
    text: {i'm also just (slowly) starting with Red...found some binaries [here](http://www.rebolsource.net/)}
    sent: "2016-08-02T05:01:00.462Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a028b047659bfb10871d00"
    text: {one of the interesting thing about Red is "built-in" multi-platform GUI and ability to ship simple executable which is supposed to overperform Python code :-)}
    sent: "2016-08-02T04:59:28.797Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a028a10bd017c16e3425c3"
    text: {Yeah, I am using rebol2 till red matures.. red almost works now tho. I heard of red (and rebol) this year..}
    sent: "2016-08-02T04:59:13.071Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a0286300663f5b1b435430"
    text: "rebol.com is (still) down?"
    sent: "2016-08-02T04:58:11.541Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a028360bd017c16e3424b3"
    text: "I was.. am? a newbie too"
    sent: "2016-08-02T04:57:26.305Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a0282447659bfb10871bb8"
    text: {i have i386 support on my machine due to some prop. apps, but wonder about Rebol3's GUI? that probably won't work }
    sent: "2016-08-02T04:57:08.243Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a0282247659bfb10871bb5"
    text: {I think you wouldn't have to unlearn anything really, it's worth it}
    sent: "2016-08-02T04:57:06.703Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a027fd0bd017c16e34247c"
    text: {Red is based on rebol2, so pretty close, it's the official opensource}
    sent: "2016-08-02T04:56:29.994Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a027eac915a0e426b4d813"
    text: {i see  Red as a future and would like to avoid 'unlearning' :-D}
    sent: "2016-08-02T04:56:10.814Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a027d59e85d3e8267f2098"
    text: {I was able to get this to work on NixOS 64bit https://www.rebolsource.net/downloads/experimental/r3-linux-x64-gbf237fc-static}
    sent: "2016-08-02T04:55:49.170Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a027d300663f5b1b43534b"
    text: "how close is to Red?"
    sent: "2016-08-02T04:55:47.887Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a027bdc915a0e426b4d7cf"
    text: "@geekyI i'm on x86_64 Debian (Sid)"
    sent: "2016-08-02T04:55:25.088Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a027b647659bfb10871b1a"
    text: {FYI, there is rebol3 version if you really need 64bit on linux}
    sent: "2016-08-02T04:55:18.050Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a0272ce2ff9ec76e4ecfaa"
    text: "@gour what are you using?"
    sent: "2016-08-02T04:53:00.767Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a025451c2bf6621bb45765"
    text: {@dockimbel thank you for sharing...let's hope there will be more Red hackers in the future using Linux as native platform to ensure it's "first-class citizen" :-)}
    sent: "2016-08-02T04:44:53.919Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a01bcc836d2d02115c5dee"
    text: {@gour We code on Windows 7, I use Textpad mostly, and Sublime2. Qtxie is using Everedit. Though, Notepad would be fine too. ;-) I could code Red on any OS, though, for native GUI work, you really need a native OS instance, a VM is sometimes not accurate enough (visual glitches, timing issues, etc...). Another reason is because of great tools like IDA Pro, which work best on Windows. We don't code on laptops, as they are not fast enough, we use small desktops with 4Ghz+ i7 and 16GB of RAM to be able to run several VMs at the same time. We also have a couple of RaspberryPi for testing/debugging ARM code (QEMU is not good enough for that).}
    sent: "2016-08-02T04:04:28.905Z"
    editedAt: "2016-08-02T04:11:26.899Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a019851c2bf6621bb440b7"
    text: {@WiseGenius A new ticket for that is welcome, with a mention of #2104 in it.}
    sent: "2016-08-02T03:54:45.894Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a00d8cc2cebb041246590b"
    text: {```^/red>> ^{"^{data^}"^}^/^{    ^/```^/@dockimbel Should I open a new ticket, comment on #2104, or neither?}
    sent: "2016-08-02T03:03:40.024Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "579f9ece0bd017c16e3309f2"
    text: {@dockimbel appreciate the help as always Doc, thanks =)}
    sent: "2016-08-01T19:11:10.726Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "579f96c90bd017c16e32f1a9"
    text: "not sure what the 64 bit schedule is overall"
    sent: "2016-08-01T18:36:57.608Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579f963800663f5b1b4234b6"
    text: {today i was looking at Trello board, but didn't notice what is the schedule for 64bit Linux support?}
    sent: "2016-08-01T18:34:32.508Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
)#(
    id: "579f947bc915a0e426b3a001"
    text: {@pekr same here...i assume Mac OS X is more popular platform for devs these days...but there is some truth in your joke - Red code can beprobably  written even with Notepad}
    sent: "2016-08-01T18:27:07.178Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f93f49e85d3e8267de1f2"
    text: "it was a joke, I don't know :-)"
    sent: "2016-08-01T18:24:52.511Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579f9350c915a0e426b39c36"
    text: "@pekr they develop on Windows?"
    sent: "2016-08-01T18:22:08.638Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f933800663f5b1b422aca"
    text: "notepad? :-)"
    sent: "2016-08-01T18:21:44.385Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579f93060bd017c16e32e6f0"
    text: {btw, anyone knows what is used by main Red hackers like @dockimbel, @qtxie etc.?}
    sent: "2016-08-01T18:20:54.608Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f92b26085a4026515cf6b"
    text: "yeah, just saw - pretty snappy despite that"
    sent: "2016-08-01T18:19:30.844Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579f927647659bfb1085ec9d"
    text: {[wikipedia page](https://en.wikipedia.org/wiki/Visual_Studio_Code) says: "Visual Studio Code is based on Electron, a framework which is used to deploy Node.js applications for the desktop running on Blink layout engine." }
    sent: "2016-08-01T18:18:30.851Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f92190bd017c16e32e3cb"
    text: {that was one of the reasons why i have decided for ST}
    sent: "2016-08-01T18:16:57.977Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f92106085a4026515cf5c"
    text: "not sure if it uses Electron"
    sent: "2016-08-01T18:16:48.083Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579f92018c8b3c3c1e05d8e1"
    text: "it's more responsive, IMO, compared to Atom"
    sent: "2016-08-01T18:16:33.863Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579f91eac915a0e426b39785"
    text: {afaict, it's similar to Atom using Electron as well?}
    sent: "2016-08-01T18:16:10.460Z"
    editedAt: "2016-08-01T18:16:32.697Z"
    v: 2
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f9177c2cebb04124654ce"
    text: {You should take a look - it's OS, available for all platforms and is pretty nice.}
    sent: "2016-08-01T18:14:15.420Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579f90f600663f5b1b4223a9"
    text: {@asampal no, didn't even try VSC itself...still a bit suspicious about Microsoft and their free offerings ;)}
    sent: "2016-08-01T18:12:06.268Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f906b8c8b3c3c1e05d896"
    text: {I'm not saying that there aren't other reasons one might prefer other editors over Emacs. @gour have you tried the Red package for Visual Studio Code?}
    sent: "2016-08-01T18:09:47.175Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579f8fefc2cebb04124654ad"
    text: {@ifgem under Windows I use TouchCursor for that and more (this is the utility that I use the most since it works across all apps). Karabiner could be used with OS X. In any case crappy default key combinations shouldn't be a reason to drop Emacs.}
    sent: "2016-08-01T18:07:43.209Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579f8d41c915a0e426b38b5b"
    text: "I rebound  space to ctrl with xcape. Happy:)"
    sent: "2016-08-01T17:56:17.113Z"
    editedAt: "2016-08-01T17:57:25.739Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579f8821c915a0e426b37c1e"
    text: {@asampal i did swap ctrl-caps, but it was simply too much chording for me, now i run vim for light usage and ST3 for other purposes...also switched from orgmode and other emacs-related pkgs to other alternatives...i can imagine that emacs mode would be better since Emacs really has advantage of using the whole Elisp, but i hope that with the increased popularity of Red, ST3 package will get more love }
    sent: "2016-08-01T17:34:25.321Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f86a18c8b3c3c1e05d7fc"
    text: {@gour did you try modifying the key bindings? Also, re-mapping the caps lock key to control can help with this kind of problem.}
    sent: "2016-08-01T17:28:01.482Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579f7ca1836d2d02115b00f3"
    text: {@ifgem two times i experienced wrist pain with Emacs, so will not try any longer}
    sent: "2016-08-01T16:45:21.152Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f74e9c915a0e426b34996"
    text: "@gour  I use it. Emacs mode is way better."
    sent: "2016-08-01T16:12:25.327Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579f74a20bd017c16e32946b"
    text: "@maximvl  sublime text."
    sent: "2016-08-01T16:11:14.135Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579f7453836d2d02115aebdd"
    text: "@gour what's ST?"
    sent: "2016-08-01T16:09:55.802Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "579f66090bd017c16e326c51"
    text: {@WiseGenius Indeed, though we are working on improving long numbers loading support right now. Shorter case:^/```lisp^/red>> [864000000000000]^/*** Syntax Error: missing #"]" at "[864000000"^/*** Where: do^/```}
    sent: "2016-08-01T15:08:57.425Z"
    editedAt: "2016-08-01T15:15:40.127Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579f6111c2cebb0412465093"
    text: {Looks like the wrong error message:^/```^/red>> f: function [x][result: 86400000000]^/*** Syntax Error: missing #"]" at "[x][result"^/*** Where: do^/```}
    sent: "2016-08-01T14:47:45.361Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "579f547fcdc68c4904b43323"
    text: {@Oldes hello, do you actively use Red package for ST? i recently purchased ST3  license and, of course, interested to use Red in the future...}
    sent: "2016-08-01T13:54:07.177Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f3fae79f7597137581412"
    text: {@JacobGood1 ^/1. The crash you've encountered should be fixed now.^/2. Have a look at `class-of` function, it should ease what you try to achieve. In a nutshell, each object in Red holds a class ID value, which loosely links it to all its siblings, cloned from the same prototype object. No association with original prototype object is stored, so if you want it from the ID, you need to store the associations yourself.}
    sent: "2016-08-01T12:25:18.925Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579f2ec99684847b374264a4"
    text: "I'm "
    sent: "2016-08-01T11:13:13.334Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "579ec4bf07d2d2396e312399"
    text: {<he he> My sufficient trick was to not create objects, where the current `make` bug seems to lie.}
    sent: "2016-08-01T03:40:47.730Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579ec464e56d2538041e77ab"
    text: {@greggirwin  I guess you found the sufficient combination to confuse it into working, I will see if it works with more stuff... thanks =)}
    sent: "2016-08-01T03:39:16.613Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "579ec3e6e56d2538041e771f"
    text: {Would something like this work for you?^/```^/taxonomy-of-prototypes: make map! []^/prototype-ids: make map! []^/^/proto: function ['name [word!] spec [block!] /with prototypes-to-be-mixed [block!]][^/^-id-num: [0]^/^/^-if taxonomy-of-prototypes/:name [^/^-^-extend taxonomy-of-prototypes compose [(name) none]^/^-] ^/^/^-either with [^/^-^-setup: compose/only [parents: (prototypes-to-be-mixed) children: []]^/^-][^/^-^-setup: [parents: [] children: []]^/^-]^/^/^-taxonomy-of-prototypes/:name: make map! setup^/^/^-object append copy spec compose [id: (id-num)] ^/]^/^/proto hi []^/```}
    sent: "2016-08-01T03:37:10.704Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579ec3649639024416ac2615"
    text: {I mean, you're *only* trying to implement multiple dispatch on prototypes. :^^)}
    sent: "2016-08-01T03:35:00.305Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579ec332cdc68c4904b31c4c"
    text: {If I am I did not realize I was doing so<so many references to nerdy crap could be inserted here>}
    sent: "2016-08-01T03:34:10.742Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "579ec26e9639024416ac24cf"
    text: {Well, it's not like you're trying any dark magic or anything. ;^^)}
    sent: "2016-08-01T03:30:54.532Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579ec2569639024416ac24b8"
    text: {Maybe an internal reliance on `spec-of` with make on an object?}
    sent: "2016-08-01T03:30:30.507Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579ec243e56d2538041e7499"
    text: "You're cool:))"
    sent: "2016-08-01T03:30:11.830Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ec21607d2d2396e311fb0"
    text: {I have not played with Red for months now... come back for just about 30 mins and I hit a bug.  I was reading on here where people said they kept the repl up for days without having any issues;  I guess I have a "gift", lol.}
    sent: "2016-08-01T03:29:26.697Z"
    editedAt: "2016-08-01T03:29:54.265Z"
    v: 3
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "579ec1bfe56d2538041e740d"
    text: ":))"
    sent: "2016-08-01T03:27:59.747Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ec1bee56d2538041e740a"
    text: "I just opened a ticket"
    sent: "2016-08-01T03:27:58.732Z"
    editedAt: "2016-08-01T03:31:08.861Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ec1b5e56d2538041e73f9"
    text: "Looks like a bug."
    sent: "2016-08-01T03:27:49.937Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "579ec0b79639024416ac21fb"
    text: {I rearranged the above code through many combinations to try and get it to stop crashing, so I figured I would just post it to get some feedback}
    sent: "2016-08-01T03:23:35.881Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "579ebff8e56d2538041e7184"
    text: ":))"
    sent: "2016-08-01T03:20:24.525Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ebff07fd9f73e16efde1d"
    text: "I doubt it"
    sent: "2016-08-01T03:20:16.187Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "579ebfeb7fd9f73e16efde15"
    text: {Or does it just stand for 'temp object".}
    sent: "2016-08-01T03:20:11.224Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579ebfcf7fd9f73e16efddfd"
    text: "Are you intentionally redefining `to`?"
    sent: "2016-08-01T03:19:43.236Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579ebfa2f1da4f376e1df287"
    text: "can't format it properly:))"
    sent: "2016-08-01T03:18:58.025Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ebf6cf1da4f376e1df24a"
    text: {````^/ts: [10]^/t-o:  object []^/make t-o ts^/```^/ works fine^/```^/ts: [id: 10]^/t-o: object []^/make t-o ts^/```^/crashes Red runtime}
    sent: "2016-08-01T03:18:04.969Z"
    editedAt: "2016-08-01T03:20:20.767Z"
    v: 4
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ebef407d2d2396e311bb7"
    text: "I've just met a red dragon:)))."
    sent: "2016-08-01T03:16:04.023Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ebee87fd9f73e16efdcac"
    text: "Wow."
    sent: "2016-08-01T03:15:52.773Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ebdd1e56d2538041e6e96"
    text: {```make temp-object temp-spec``` line crashes red.}
    sent: "2016-08-01T03:11:13.545Z"
    editedAt: "2016-08-01T03:11:44.152Z"
    v: 3
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ebc24f1da4f376e1dedbd"
    text: {@ifgem ok, thanks, maybe well get some feedback as to why that is...}
    sent: "2016-08-01T03:04:04.827Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
)#(
    id: "579ebb2be56d2538041e6b42"
    text: "Yes, it does."
    sent: "2016-08-01T02:59:55.703Z"
    editedAt: "2016-08-01T03:00:15.710Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579ebaa707d2d2396e3115d8"
    text: {Does this crash the repl for anyone else?^/```^/taxonomy-of-prototypes: make map! []^/prototype-ids: make map! []^/^/proto: function ['name [word!] spec [block!] /with prototypes-to-be-mixed [block!]] [^/^-id-num: [0]^/^-^/^-if taxonomy-of-prototypes/:name [^/^-^-extend taxonomy-of-prototypes compose [(name) none]^/^-] ^/^/^-either with [^/^-^-setup: compose/only [parents: (prototypes-to-be-mixed) children: []]^/^-] [^/^-^-setup: [parents: [] children: []]^/^-]^/^/^-taxonomy-of-prototypes/:name: make map! setup^/^-^/^-temp-spec: compose [id: (id-num)] ^/^-temp-object: object spec^/^-make temp-object temp-spec  ^/^-;to lit-word! mold name^/^-;make reactor! temp^/^-;set name make reactor! spec^/]^/^/proto hi [] ```}
    sent: "2016-08-01T02:57:43.292Z"
    editedAt: "2016-08-01T02:58:06.994Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "579eb0f8e56d2538041e5ccd"
    text: {I refer to the Programmers Guide (English Edition) as well. It's a keeper.}
    sent: "2016-08-01T02:16:24.747Z"
    v: 1
    author: "571121f8187bb6f0eadfa35d"
) #(
    id: "579eb0dbcdc68c4904b302ed"
    text: {The credit is due to Olivier, I merely translated to English.}
    sent: "2016-08-01T02:15:55.125Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "579ea1539684847b37416942"
    text: {@PeterWAWood  Ah ok - sorry my mistake  -  May i say your  rebol programmers guide is superb, I use it all the time .... }
    sent: "2016-08-01T01:09:39.351Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "579e9d1707d2d2396e30eb8e"
    text: {I think that they were looking for the Rebol Core User Guide. Olivier and I have made the [The Rebol Programmers Guide](http://www.lulu.com/shop/olivier-auverlot-and-peter-william-alfred-wood/rebol-a-programmers-guide/ebook/product-17515075.html) a free download from Lulu.com. Olivier has also made the original - [Guide de Programmeur](http://www.lulu.com/shop/olivier-auverlot/rebol-guide-du-programmeur/ebook/product-17510224.html) free for download. }
    sent: "2016-08-01T00:51:35.151Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "579e8739e56d2538041e2205"
    text: {Hey, I saw someone was looking for the Rebol programmers guide. ^/I have it here if you need it:  http://www.mycode4fun.co.uk/About-Red-Programming}
    sent: "2016-07-31T23:18:17.383Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "579e3fcccdc68c4904b242c8"
    text: ""
    sent: "2016-07-31T18:13:32.123Z"
    editedAt: "2016-07-31T18:13:44.087Z"
    v: 2
    author: "571bdf82659847a7aff43357"
) #(
    id: "579e2c0e79f75971375620c6"
    text: {:point_up: [July 29, 2016 11:56 AM](https://gitter.im/red/red?at=579b28404536c1f33fd64a07) I am happy to see that the Travis build now also uses rebol.exe on red-lang.org, BUT the repository main page still says Travis errored. What is happening?}
    sent: "2016-07-31T16:49:18.917Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "579dd8659639024416aa9e45"
    text: {@Freezerburn  @greggirwin  meant this site: www.red-by-example.org}
    sent: "2016-07-31T10:52:21.133Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "579dc66b79f7597137557bfc"
    text: "@nc-x It's part of the CLI console code."
    sent: "2016-07-31T09:35:39.751Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579dbb9207d2d2396e2f6963"
    text: {okay... But why the difference between Gui and Cli console? that function is not available in gui console.}
    sent: "2016-07-31T08:49:22.898Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "579dae929639024416aa63c9"
    text: "(B) We know about that."
    sent: "2016-07-31T07:53:54.970Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579dae7879f75971375559b8"
    text: {@nc-x (A) Interpreter can call compiled routines, it just can create new ones (requires compilation). The console gives you access to the global context of Red, where you can find all globally defined words. Only a subset of them are useful for users, the rest (like this function) are temporarily exposed there until we can move them in some other contexts.^/}
    sent: "2016-07-31T07:53:28.719Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579d7e8d7fd9f73e16ede4bf"
    text: {[![Untitled.png](https://files.gitter.im/red/red/thumb/Untitled.png)](https://files.gitter.im/red/red/Untitled.png)}
    sent: "2016-07-31T04:29:01.853Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "579d7e0bcdc68c4904b116ac"
    text: {(B) ^/In __GUI__ Console, in `About`, there is some problems with the text. I don't think this is expected ->}
    sent: "2016-07-31T04:26:51.845Z"
    editedAt: "2016-07-31T04:29:38.315Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "579d7cd2cdc68c4904b11513"
    text: {@dockimbel  @qtxie ^/(A)^/In __CLI__ console, using help shows a ` _read-input` but using it crashes the console - ^/```^/_read-input "This is going to crash"^/```^/Now type anything into the console -^/```^/*** Runtime Error 1: access violation^/*** at: 77B418B6h^/```^/I think the reason is that`_read-input` is a routine and the console cannot execute R/S code, so that is why it is crashing. But if that is the case then it should not be available in the console.}
    sent: "2016-07-31T04:21:38.781Z"
    editedAt: "2016-07-31T04:25:37.602Z"
    v: 3
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "579ca5bc7fd9f73e16ec75a4"
    text: {It's imo a separate project, and Windows Phone is mostly non-existant (market share wise), we will see, what future brings ...}
    sent: "2016-07-30T13:03:56.869Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579ca5609684847b373e1933"
    text: {I claimed that too, but that would require .NET bridge, no? I know that @iceflow19 was working on some bits ... otoh, for more embedded area, you will still see even WinXP nowadays ...}
    sent: "2016-07-30T13:02:24.139Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579c4a8662166b2d08191ecd"
    text: {In particular, if you want to develop for HoloLens, that would be on top of the UWP and, IMO, this is going to be a really hot area.}
    sent: "2016-07-30T06:34:46.885Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579c49d6c50695a266f11f18"
    text: {@pekr , likely. The thing is that if you think about the timeframe for the release of Red, I would say that targeting the UWP would be more forward-looking (when talking about Windows support) than win32. }
    sent: "2016-07-30T06:31:50.766Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579c2f3b9639024416a80013"
    text: {UWP - wouldn't it require having a complete different backend? }
    sent: "2016-07-30T04:38:19.044Z"
    editedAt: "2016-07-30T04:38:35.197Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579bd73c62166b2d08191c6d"
    text: {I'm not sure I recall what was mentioned wrt being able to build UWP apps (for Windows) using Red - does anyone remember?}
    sent: "2016-07-29T22:22:52.815Z"
    editedAt: "2016-07-29T22:31:00.728Z"
    v: 2
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "579bce1007d2d2396e2c4d8e"
    text: "Your welcome."
    sent: "2016-07-29T21:43:44.763Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "579bce0079f75971375244e6"
    text: "@Rebol2Red Done, thank you very much!"
    sent: "2016-07-29T21:43:28.592Z"
    v: 1
    author: "579ab77440f3a6eec05cfc89"
) #(
    id: "579bcdab7fd9f73e16eb20c8"
    text: {@freezerburner I sent it to you, but you must rename the .txt to .zip and then extract it}
    sent: "2016-07-29T21:42:03.270Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "579bcca4e56d25380419bd7f"
    text: "THanks!"
    sent: "2016-07-29T21:37:40.733Z"
    v: 1
    author: "579ab77440f3a6eec05cfc89"
) #(
    id: "579bcca3f1da4f376e191f40"
    text: "And will do"
    sent: "2016-07-29T21:37:39.437Z"
    v: 1
    author: "579ab77440f3a6eec05cfc89"
) #(
    id: "579bcca179f75971375241ec"
    text: "Alright, sent"
    sent: "2016-07-29T21:37:37.614Z"
    v: 1
    author: "579ab77440f3a6eec05cfc89"
) #(
    id: "579bcc16f1da4f376e191e22"
    text: {You can sent an email to my email address at       rensvanschie     [    at    ]  gmail dot     com ^/Then i sent it to you as a .txt which you must rename to .exe and extract to your disk <-- This is wrong, see the next mail i sent to you  and the next post}
    sent: "2016-07-29T21:35:18.860Z"
    editedAt: "2016-07-29T21:43:32.929Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "579bcb9ee56d25380419bb88"
    text: {How can I give you my email address? Wouldn't mind both}
    sent: "2016-07-29T21:33:18.451Z"
    v: 1
    author: "579ab77440f3a6eec05cfc89"
) #(
    id: "579bcb747fd9f73e16eb1cbd"
    text: {core or view or both ? i will send it to you if you give me your emai address. Do not write it out over here!}
    sent: "2016-07-29T21:32:36.873Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "579bcb1107d2d2396e2c4853"
    text: {Thanks for the link! Though right now I'm mostly looking for the actual R2 binary}
    sent: "2016-07-29T21:30:57.951Z"
    v: 1
    author: "579ab77440f3a6eec05cfc89"
) #(
    id: "579bcac079f7597137523e0e"
    text: {There are also some old wikimedia pages in various states of completion. And Arie and Mike's Red work that continues to move forward.}
    sent: "2016-07-29T21:29:36.339Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579bca8307d2d2396e2c4737"
    text: {http://www.codeconscious.com/rebol/articles/rebol-concepts.html}
    sent: "2016-07-29T21:28:35.659Z"
    editedAt: "2016-07-29T21:29:37.243Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "579bca37cdc68c4904ae57b9"
    text: {I don't read French, so those wouldn't have helped much anyway :)}
    sent: "2016-07-29T21:27:19.562Z"
    v: 1
    author: "579ab77440f3a6eec05cfc89"
) #(
    id: "579bca17f1da4f376e191a56"
    text: {Oh no sorry, forget it. Only this page, french docs are also host on rebol.com.}
    sent: "2016-07-29T21:26:47.855Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "579bc9bdcdc68c4904ae56d6"
    text: {@Freezerburn If you can read french, there is a [french translation of R2 Core manual](http://www.rebol-france.org/documentation) available. }
    sent: "2016-07-29T21:25:17.077Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "579bc9819684847b373cb5d3"
    text: {Sorry about the timing. You can still use the pre-built versions.}
    sent: "2016-07-29T21:24:17.744Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579bc8d4cdc68c4904ae54f9"
    text: {`Bleh. Of course as soon as I start trying to work with Red, the binary that builds it becomes unavailable}
    sent: "2016-07-29T21:21:24.993Z"
    v: 1
    author: "579ab77440f3a6eec05cfc89"
) #(
    id: "579bc8639639024416a74e49"
    text: {We don't. I imagine Team Red is working on logistics for internal builds, to remove the dependency on rebol.com. }
    sent: "2016-07-29T21:19:31.699Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579bc80207d2d2396e2c413a"
    text: {Do we have any idea when rebol.com is going to actually be up again? Or if there's an R2 binary anywhere else?}
    sent: "2016-07-29T21:17:54.841Z"
    v: 1
    author: "579ab77440f3a6eec05cfc89"
) #(
    id: "579bc65207d2d2396e2c3dcd"
    text: {I'll dig in more at some point. I can generate my layout spec dynamically (noting that you need to copy your reactor block as you do. When I do that, the reactive targets don't update when I first view the layout, but if I copy the generated layout spec and just paste that into the console, they do.}
    sent: "2016-07-29T21:10:42.645Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579bc148f1da4f376e19073b"
    text: {@dockimbel, should reactors work in a style?^/```^/view [^/    below^/    s: slider^/    text react [face/data: form s/data]^/    style sld-mon: text react [face/data: form s/data]^/    sld-mon^/    sld-mon^/]^/```}
    sent: "2016-07-29T20:49:12.795Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579bc1449639024416a73eb9"
    text: {@pekr not like Carl is working on R3. I mean he should be happy if anyone keeps working on anything based on his work (I know I would be). Not a big deal though, if Nenad is fine with it}
    sent: "2016-07-29T20:49:08.707Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579bb994cdc68c4904ae32f6"
    text: "That explains it. Thanks."
    sent: "2016-07-29T20:16:20.100Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "579bb90279f7597137521350"
    text: {It's consistent.  You need to `load` strings to evaluate them. Until then, they are just a series of `char!` values.}
    sent: "2016-07-29T20:13:54.572Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579b7f949639024416a69155"
    text: {Is'nt it inconsistent that number? only works inside blocks and for instance integer? outside of a block or is it because of the evaluating of numbers in Red? I am just curious.}
    sent: "2016-07-29T16:08:52.026Z"
    editedAt: "2016-07-29T16:13:59.409Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "579b7a699639024416a684f0"
    text: {@Rebol2Red See this example: ^/```lisp^/list: [2 "a" 3.6 hello world 5 b/c/d]^/remove-each item list [not number? item]^/list^/== [2 3.6 5]^/```}
    sent: "2016-07-29T15:46:49.559Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579b77c3e56d25380418e3d6"
    text: {Should i put this into issue's of Red? I could not find it over there. What do you think?^/```^/print number? "1" ^/== false^/^/print help number?^/^/USAGE:^/    number? value^/^/DESCRIPTION:^/     Returns true if the value is any type of number. ^/     number? is of type: function!^/^/ARGUMENTS:^/     value  [any-type!]^/^/REFINEMENTS:^/```^/Remarks: ^/Help says any-type!^/What is the sense of checking a number which is already a number?^/Btw: I use this from rebol2: ^/```^/numeric?: func [x][not error? try [to integer! x]]^/```}
    sent: "2016-07-29T15:35:31.544Z"
    editedAt: "2016-07-29T15:41:58.521Z"
    v: 7
    author: "5773c6b7c2f0db084a208d58"
)#(
    id: "579b724be56d25380418d4f3"
    text: "Interesting info and good luck in US :-)"
    sent: "2016-07-29T15:12:11.834Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579b7207e56d25380418d40f"
    text: {@xificurC I plan to meet him in the next months, so we'll talk about that too.}
    sent: "2016-07-29T15:11:03.798Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579b71d6f1da4f376e1835d9"
    text: {But true - he might be more relaxed about it after all those years  }
    sent: "2016-07-29T15:10:14.155Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579b71be07d2d2396e2b611a"
    text: {@xificurC Carl could see Red as being a competing effort :-) He never liked "clones" and Doc does not continue with his work (R3) in that sense ...}
    sent: "2016-07-29T15:09:50.781Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579b718a07d2d2396e2b6097"
    text: {@dockimbel it's not a big issue I guess, just smells}
    sent: "2016-07-29T15:08:58.121Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579b7162e56d25380418d227"
    text: {@xificurC We haven't talked about that since then, maybe he would be more willing to help us now.}
    sent: "2016-07-29T15:08:18.276Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579b71377fd9f73e16ea33e9"
    text: {@dockimbel well sure but the guy could be excited people like you are trying to build on top of his work}
    sent: "2016-07-29T15:07:35.779Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579b7104f1da4f376e183390"
    text: {keeping the code closed source, not allowing to share the docs, way to embrace the community}
    sent: "2016-07-29T15:06:44.337Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579b70ff07d2d2396e2b5ef0"
    text: {It's not a problem though, as we'll have our own Red docs at some point.}
    sent: "2016-07-29T15:06:39.918Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579b70ad9639024416a66ab6"
    text: "wow... just wow"
    sent: "2016-07-29T15:05:17.859Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579b707907d2d2396e2b5d84"
    text: {@greggirwin We were several to ask him about that in Montreal for the Recode conf in 2013, he clearly said that Rebol docs cannot be shared nor reused.}
    sent: "2016-07-29T15:04:25.214Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579b6e8007d2d2396e2b56e8"
    text: {I believe Red *could* host it, but doing so runs the risk of upsetting Carl. If a face-to-face meeting can take place, maybe that could be ironed out. }
    sent: "2016-07-29T14:56:00.067Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579b62d09684847b373b9fd5"
    text: {Or can you host a copy which explicitly says "copyright RT"?}
    sent: "2016-07-29T14:06:08.977Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "579b6293cdc68c4904ad49b4"
    text: {I had previously copied the entire Rebol doc (50-odd .html files) on my own laptop; when you say "copyrighted" does that mean you cannot host a copy on red-lang.org?}
    sent: "2016-07-29T14:05:07.471Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "579b59f68df5747562612673"
    text: "the best one is to have our own docs )"
    sent: "2016-07-29T13:28:22.806Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "579b486c8df574756260fcef"
    text: {@meijeru What alternative do you propose? Carl has firmly expressed that Rebol documentation is copyrighted RT and he doesn't want to share it, so I guess this excludes hosting a mirror. The best I could do in short term is switch to the web archive mirror link or just wait for Carl to fix his server.}
    sent: "2016-07-29T12:13:32.403Z"
    editedAt: "2016-07-29T12:13:56.877Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579b2da595550f1a4ef5ce0e"
    text: "Yes, but that is now a fragile resource..."
    sent: "2016-07-29T10:19:17.036Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "579b2a2e4536c1f33fd64d73"
    text: {@meijeru We rely on rebol.com for the documentation, that's where we're sending all newcomers for learning Red basic concepts.}
    sent: "2016-07-29T10:04:30.056Z"
    editedAt: "2016-07-29T10:04:42.521Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579b28404536c1f33fd64a07"
    text: {Conclusion: we're better off without reliance on rebol.com! Since updates of R2 are not likely to be forthcoming, let us use a local copy of rebol.exe.}
    sent: "2016-07-29T09:56:16.397Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "579b223695550f1a4ef5b767"
    text: {Last time rebol.com went down, it was only about the restart of the virtual server. Pity Carl is not more active. Bo has notified him few days ago already ...}
    sent: "2016-07-29T09:30:30.380Z"
    editedAt: "2016-07-29T09:30:43.242Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579b21fd4536c1f33fd63de7"
    text: { Noticed that too (with Travis) and thought it might have something in common with the licensing. If not, it should be easily fixed?}
    sent: "2016-07-29T09:29:33.208Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579b21f3a8a477b51582fa76"
    text: "@meijeru Because it was done by different people."
    sent: "2016-07-29T09:29:23.899Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579b21c54536c1f33fd63d93"
    text: {@dockimbel I noticed the Travis builds error out, whereas the Appveyor ones are OK. In Travis, rebol.exe is downloaded from rebol.com, whereas in Appveyor, rebol.exe is stored on red-lang.org. Why this difference??}
    sent: "2016-07-29T09:28:37.178Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "579b0a6f4536c1f33fd60908"
    text: "@dockimbel  @greggirwin   thanks."
    sent: "2016-07-29T07:49:03.449Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "579af6f13eb00fbd1521b40c"
    text: {@mikeparr That feature was never implemented, so I removed it from the article.}
    sent: "2016-07-29T06:25:53.504Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579a5f4798ae5463620ffebe"
    text: "`to integer!` does work on char values today."
    sent: "2016-07-28T19:38:47.780Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579a5f0e95550f1a4ef42134"
    text: {@mikeparr  I can't say if it's a design change or a regression. Right now, bitsets only allow integers in their paths. The default, for *all* other types is the error you see.  It possible that casting ints just hasn't been implemented yet. In the meantime, if needed, you can convert the char to an int and us that.}
    sent: "2016-07-28T19:37:50.938Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579a5cfc3eb00fbd1520795f"
    text: {@Rebol2Red, there are a couple things at work here. One is the default size of the face, which depends on the style and perhaps OS limitations or defaults.  Another is the default spacing in VID. See if these examples help.^/```^/view [^/    text "first line" red yellow return         ; def size is 80x24^/    text "first line" 80x16 red yellow return^/    text "second line"^/]^/view [^/    space 4x2^/    text "first line" return^/    text "first line" 80x16 return^/    text "second line"^/]^/```^/You can also use `pad` to adjust where things fall, relatively, when VID creates the layout.}
    sent: "2016-07-28T19:29:00.754Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579a54fe4536c1f33fd498ab"
    text: {Q re: char variable in bitset path.  The following was pasted from red-lang.org:^/```^/    bs: charset [#"a" - #"z"]   ^/    c: #"z"^/    bs/:c     ; will return true^/*** Script Error: char! type is not allowed here^/```^/On a recent 0.6.1 Win.  Any ideas?^/^/}
    sent: "2016-07-28T18:54:54.584Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "579a52843eb00fbd15205f5e"
    text: {The distance between the first line and the second line is too big. Is this intended? I thought Red would set the distances dependent on the chosen font size. Or must i use something else instead of return? (I can ofcourse use at but then i have to calculate the distances)^/```^/view [^/^-text "first line" return^/^-text "second line"^/]^/```}
    sent: "2016-07-28T18:44:20.564Z"
    editedAt: "2016-07-28T18:49:34.615Z"
    v: 9
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "579996523383eb622149b3ac"
    text: {I tried the context trick. Didn't work here. Will do on the ticket.}
    sent: "2016-07-28T05:21:22.388Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5799955aad8f331f4e4e9f39"
    text: {@greggirwin Please open a ticket for `insert/dup` issue. For the `parse-event` function and dependencies, they should be wrapped in a context (was not possible when Parse was added, should be doable now).}
    sent: "2016-07-28T05:17:14.609Z"
    editedAt: "2016-07-28T05:20:08.482Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579994dc8fb4820a466a83e1"
    text: {@yoffset I've added a space at the end of the first line in case it fixes something, though I still don't know what problem you had. Giving a description instead of "doesn't work" would be helpful.}
    sent: "2016-07-28T05:15:08.364Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57992a8337c95e2446bb78f1"
    text: "ok, thank you for your answers:))"
    sent: "2016-07-27T21:41:23.178Z"
    editedAt: "2016-07-27T21:41:37.079Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57992a3d7c9324e20e03eb18"
    text: {I have written a number of helper generators myself, so it's a valid plan.}
    sent: "2016-07-27T21:40:13.846Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579929ee3383eb622148f0cc"
    text: {Really hard to say with so little to go on. :^^\ i.e. without knowing how the rest of your design is intended to work. Simple suggestions I can do. :^^)}
    sent: "2016-07-27T21:38:54.975Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5799292bd155b0294e0f89df"
    text: {I'm writing syntax highlighter(kind of) and I think that writing something like ```[red delimiter | black variable]``` would be better(?) than something else.}
    sent: "2016-07-27T21:35:39.620Z"
    editedAt: "2016-07-27T21:36:38.672Z"
    v: 4
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5799287a00c8ebdd0e297173"
    text: "What is the goal?"
    sent: "2016-07-27T21:32:42.616Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579928193383eb622148e74f"
    text: {@greggirwin perhaps, there's a much better way to do it?:))}
    sent: "2016-07-27T21:31:05.034Z"
    editedAt: "2016-07-27T21:31:30.835Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579927e1ad8f331f4e4dcf1b"
    text: {And also I need to add some new keywords to parse dialect Now, I just wrote a little function that generate  ^/```red^/colorize [red word | blue delimiter]  ;=> [copy m word (high "red" m) | copy m word (high "blue" m)] ^/; just a prototype:).^/; may be I should write this function^/parse-keyword colors  [:high :to-string name match] ;that would generate generator for me:))^/```}
    sent: "2016-07-27T21:30:09.723Z"
    editedAt: "2016-07-27T21:38:02.206Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5799273137c95e2446bb6b2f"
    text: {Seems to be by design at the moment. Trying to localize it crashes the console. Something to note about being a callback I imagine.}
    sent: "2016-07-27T21:27:13.642Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579925c2d155b0294e0f7ff6"
    text: "Worth a ticket?"
    sent: "2016-07-27T21:21:06.551Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579925a700c8ebdd0e296899"
    text: {`on-parse-event` leaks `p-indent`.^/```^/red>> parse-trace [a b c] [some word!]^/ match: [some word!] ^/input: [a b c] ^/ -->^/...^/ <--^/return: true^/== true^/red>> p-indent^/== ""^/```}
    sent: "2016-07-27T21:20:39.865Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5799248d3383eb622148db88"
    text: {I haven't done this, but just played a bit, and `first input` may be all you need, when you get a `match` event.  That may be too naive though. Perhaps @dockimbel will have a spare moment to confirm. I imagine they're hammering hard on 0.7.0 though.}
    sent: "2016-07-27T21:15:57.808Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579915b1ad8f331f4e4d9227"
    text: {Sorry for silly question. How can I get last matched value (parse/trace) in callback function?}
    sent: "2016-07-27T20:12:33.192Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57990e3b93148c6b21e37f51"
    text: {Just checks for zero width now, to prevent infinite looping.}
    sent: "2016-07-27T19:40:43.701Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57990dc3ad8f331f4e4d7bf1"
    text: {Nope. Hang on. The size check was for the other version.}
    sent: "2016-07-27T19:38:43.349Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57990d5ead8f331f4e4d7a80"
    text: "Fixed."
    sent: "2016-07-27T19:37:02.020Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57990d2ad155b0294e0f3242"
    text: {Thanks @xificurC ! Quickly cutting things in as I find moments, and mixed 'size from the forward-only version (which is old).}
    sent: "2016-07-27T19:36:10.960Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5799082493148c6b21e3702b"
    text: {@greggirwin [here](https://gist.github.com/greggirwin/d0412f0c3d8e1ce4dfe26afc643742f1#file-greggs-mezz-red-L574) you refer to `size` but I don't see it defined. And [here](https://gist.github.com/greggirwin/d0412f0c3d8e1ce4dfe26afc643742f1#file-greggs-mezz-red-L587) you seem to have used `'` instead of `;`}
    sent: "2016-07-27T19:14:44.327Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
)#(
    id: "5798ff3c00c8ebdd0e28f5f0"
    text: {`Insert` bug?^/```^/red>> blk: copy []^/== []^/red>> insert/dup blk 0 3^/== []^/red>> blk^/== [0 0 0]^/red>> insert/dup blk 1 2^/== [0 0 0]^/red>> blk^/== [1 0 0 0 0]^/```^/The value only appears once, at the head, while (count - 1) items from the head of the series are duplicated.}
    sent: "2016-07-27T18:36:44.091Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5798e4f493148c6b21e3059b"
    text: {:point_up: [July 27, 2016 1:38 AM](https://gitter.im/red/red?at=5798650a8fb4820a46678412) If you need to do a lot of `reduce`s, `compose` may be a better choice.}
    sent: "2016-07-27T16:44:36.366Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5798e479ad8f331f4e4cea73"
    text: {:point_up: [July 27, 2016 7:35 AM](https://gitter.im/red/red?at=5798b88500c8ebdd0e281292) I have `forskip` in my (work in progress) mezz dump gist. https://gist.github.com/greggirwin/d0412f0c3d8e1ce4dfe26afc643742f1}
    sent: "2016-07-27T16:42:33.409Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5798cc183383eb622147c79f"
    text: {Now there is a space.  Thank your helper and continue considering me mistaken. }
    sent: "2016-07-27T14:58:32.829Z"
    v: 1
    author: "57369493c43b8c601972d80b"
) #(
    id: "5798c68393148c6b21e2a7d1"
    text: {@yoffset *As it is, there are problems working with it in the console.* Could you be more specific? I can copy/paste the code in the Red console as is, and launch the demo with no issue.}
    sent: "2016-07-27T14:34:43.093Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5798c5cb8fb4820a46687c7e"
    text: {@xificurC The Rebol console uses `esc` key for that purpose, Red should do the same.}
    sent: "2016-07-27T14:31:39.214Z"
    editedAt: "2016-07-27T14:31:50.058Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5798be7a7c9324e20e0289ff"
    text: {`C-c` in red console currently kills it. The expected behavior (on linux at least) is `C-c` to interrupt and `C-d` to kill it. This is how python, irb, or even bash behave. Do you think this could be implemented @dockimbel ? Right now if I enter an endless loop I cannot interrupt}
    sent: "2016-07-27T14:00:26.588Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5798b88500c8ebdd0e281292"
    text: "why no `forskip`? :("
    sent: "2016-07-27T13:35:01.342Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5798b6bd8fb4820a46684e9c"
    text: {@dockimbel  Please excuse me, but there is an error in the displayed code of  the July 7 spreadsheet post.  A single space is required at charset "0"repeat (first to second line).  As it is, there are problems working with it in the console.}
    sent: "2016-07-27T13:27:25.270Z"
    v: 1
    author: "57369493c43b8c601972d80b"
) #(
    id: "5798ad087c9324e20e0258c3"
    text: {@xificurC ^/red>>  split "one,two,,four" ","^/== ["one" "two" "" "four"]^/and the source of split}
    sent: "2016-07-27T12:46:00.770Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "5798a24237c95e2446b9cfec"
    text: "@dockimbel thanks that did the trick"
    sent: "2016-07-27T12:00:02.427Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5798a0cbd155b0294e0def6e"
    text: {Any `printf` format expert around who wants to score a PR for https://github.com/red/red/issues/2135 ?}
    sent: "2016-07-27T11:53:47.022Z"
    editedAt: "2016-07-27T11:53:58.007Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57989d353383eb622147445d"
    text: {@xificurC A quick take at it (could maybe be done in a shorter way):^/```lisp^/parse "one,two,,four" [collect [any ["," keep (none) | keep to ["," | end] skip]]]^/```}
    sent: "2016-07-27T11:38:29.469Z"
    editedAt: "2016-07-27T11:42:01.215Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57989d0f00c8ebdd0e27cc18"
    text: {or literally anything instead of skipping the empty entry}
    sent: "2016-07-27T11:37:51.417Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57989c663383eb622147423b"
    text: {```red^/red>> parse "one,two,,four" [collect [any [keep to ["," | end] skip]]]^/== ["one" "two" "four"]^/```^/can this be changed so that the result is `["one" "two" none "four"]`?}
    sent: "2016-07-27T11:35:02.665Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57989901d155b0294e0ddbda"
    text: {@PeterWAWood I figured from the examples one can do that, I was just wondering if there is a built in way to do it. Thanks}
    sent: "2016-07-27T11:20:33.227Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579897f4f7efdf1a36c99d6c"
    text: {"security reasons" = Too much work. I don't want to do it ;-)}
    sent: "2016-07-27T11:16:04.418Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "579897e193148c6b21e22cec"
    text: {@xificurC You cannot add a word to an object directly in Red yet. (You can in Rebol3 but I'm not sure of @dockimbel's plans).^/You can achieve a similar effect with:^/```^/red>> o: make object! [a: 1]^/== make object! [^/    a: 1^/]^/red>> o/a: 2^/== 2^/red>> o: make o [b: 3]^/== make object! [^/    a: 2^/    b: 3^/]^/```}
    sent: "2016-07-27T11:15:45.855Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "579897613383eb622147377e"
    text: {I@xificurC I remember a few Rebol2 versions once having the ability to add new members to an object. It was abandoned for security reasons.}
    sent: "2016-07-27T11:13:37.686Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "579896b88fb4820a4667fa15"
    text: {@xificurC  on my site red-by-example.org there are a lot of docs already. But still very incomplete. Maybe it could help you at some stage :-)}
    sent: "2016-07-27T11:10:48.335Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5798964c00c8ebdd0e27b932"
    text: {red>> to word! "baz"^/== baz}
    sent: "2016-07-27T11:09:00.931Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "57989646d155b0294e0dd551"
    text: "@Arie-vw thanks I didn't know of `to`"
    sent: "2016-07-27T11:08:54.039Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579896137c9324e20e02211c"
    text: {@xificurC  red>> to set-word! "foo"^/== foo:}
    sent: "2016-07-27T11:08:03.385Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "579895f510fdb42f0a19e17b"
    text: {> load "foo"}
    sent: "2016-07-27T11:07:33.593Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5798950a3383eb6221473252"
    text: {on a similar note how does one convert a string to a word or set-word? `make word! "foo"` doesn't work and `to-word` isn't defined}
    sent: "2016-07-27T11:03:38.617Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579891e637c95e2446b9a7b1"
    text: {can one add an object variable dynamically? Something along the line `foo: make object! [] add foo "bar" "baz"` and then be able to access it as `foo/bar`?}
    sent: "2016-07-27T10:50:14.394Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57988a4f9d3d8134765e593e"
    text: {@xificurC I too prefer s-expressions, and yet appreciate the Rebol/Red syntax as a complementary idea to be explored.}
    sent: "2016-07-27T10:17:51.728Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5798708fad8f331f4e4bb842"
    text: {@dockimbel I think that's a reasonable tradeoff. Whatever syntactic shortcuts another languages could get can't compare with the shortcuts you get from homoiconicity}
    sent: "2016-07-27T08:27:59.942Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5798708c8fb4820a46679f55"
    text: {@xificurC You're welcome, thanks for all the good questions about a very fundamental topic. }
    sent: "2016-07-27T08:27:56.624Z"
    editedAt: "2016-07-27T08:28:03.529Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5798703700c8ebdd0e275ec6"
    text: {@xificurC I also can't think about coding in anything other than homoiconic languages now, though, it comes at a price also: we have less freedom in the syntactic choices, as each syntactic form needs to denote a first-class datatype (modulo some LOAD-stage limited syntax transformation, as you would do with some`read` macros in Lisp).}
    sent: "2016-07-27T08:26:31.379Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579870318fb4820a46679e5d"
    text: {@dockimbel thank you for the explanation, it's much clearer now :) I will let you work now}
    sent: "2016-07-27T08:26:25.610Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986fd37c9324e20e01c4e4"
    text: {@dockimbel I like s-expressions a lot so I'm on the other side, but I understand the choice of course}
    sent: "2016-07-27T08:24:51.656Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986f8a00c8ebdd0e275d50"
    text: {@dockimbel yes homoiconicity does bring in the metaprogramming capabilities. It's the single feature I cherish the most since many languages trade it for random syntax and complicated AST etc}
    sent: "2016-07-27T08:23:38.670Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986f8100c8ebdd0e275d39"
    text: {@xificurC Dropping parens was a necessity in Rebol in order to make the syntax more "human-friendly" and broaden the scope of possible dialects, without having them all looking like s-expressions.}
    sent: "2016-07-27T08:23:29.624Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57986f2a3383eb622146dc42"
    text: {@xificurC Rebol languages are really like *languages construction kits*, that great freedom and flexibility is there to help you design a broad range of dialects (embedded DSLs).}
    sent: "2016-07-27T08:22:02.415Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57986f093383eb622146dbb7"
    text: "@dockimbel yeah tell me, I miss my parens :("
    sent: "2016-07-27T08:21:29.957Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986eee37c95e2446b9544c"
    text: {@dockimbel looking at it from a broader perspective I guess the dynamism (if that's a word) does open many opportunities. You probably have more in common with picolisp (if you know the language)}
    sent: "2016-07-27T08:21:02.466Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986ed800c8ebdd0e275bda"
    text: {@xificurC No problem, comparing with what we know already is how we learn. And we are close cousins of Lisp languages, so that's a good place to start in order to grasp Rebol languages deeper.}
    sent: "2016-07-27T08:20:40.719Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57986e907c9324e20e01c19f"
    text: {@xificurC Right, you have more "freedom", especially with the dynamic *binding* of words (using `bind` you can change the binding of any word individually, anywhere).}
    sent: "2016-07-27T08:19:28.057Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57986e7737c95e2446b95303"
    text: {sorry for comparing to lisp so much, but that's where I'm coming from :)}
    sent: "2016-07-27T08:19:03.080Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986e3d37c95e2446b95276"
    text: {so the nature of red is more dynamic than of lisps. Closer to picolisp probably}
    sent: "2016-07-27T08:18:05.193Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986e37d155b0294e0d75ec"
    text: "@xificurC Right."
    sent: "2016-07-27T08:17:59.006Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57986e008fb4820a46679937"
    text: "unwrapping it with a lisper's eye `do` is `eval`"
    sent: "2016-07-27T08:17:04.009Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986d8437c95e2446b95021"
    text: {@xificurC Precisely, yes. It's the simplest way you can create functions from the basic Rebol/Red semantics. As said in my Reddit post: *Such property is often leveraged in functions to implement local caches for free, though you could figure out many other applications (like code hot-swapping, live debugging a running program, etc...).*}
    sent: "2016-07-27T08:15:00.355Z"
    editedAt: "2016-07-27T08:17:48.861Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57986d7a00c8ebdd0e2757a7"
    text: {ok so the function doesn't have a *definition* per se, it is just data that we can mutate.}
    sent: "2016-07-27T08:14:50.278Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986c7037c95e2446b94da5"
    text: {Let's start with a very simple case:^/```lisp^/b: [""]^/append b/1 "a"^/b^/== ["a"]^/```^/Now a let's embed the mutating action in `b` itself:^/```lisp^/b: ["" append b/1 "a"]^/do b^/b^/== ["a" append b/1 "a"]^/```^/Now let's just make a word refer to `b/1` string before doing any change:^/```lisp^/b: ["" append b/1 "a"]^/s: b/1^/s^/== ""^/do b^/b^/== ["a" append b/1 "a"]^/s^/== "a"^/```^/Let's now move the word setting inside `b`:^/```lisp^/b: [s: "" append b/1 "a"]^/do b^/b^/== [s: "a" append b/1 "a"]^/s^/== "a"^/```^/All the behaviors you are seeing in those examples are coming from the basic evaluation rules of Rebol/Red. When you create a function, the body block is just *a block*, behaving exactly the same way as the block in the example above. The only difference is that some words will be bound to the function context, instead of the surrounding context. So, if we use the above block as a function body, you'll get the exact same behavior:^/```lisp^/foo: func [/local s][[s: "" append s "a"]^/foo^/== "a"^/^/body-of :foo^/== [s: "a" append s "a"]^/:foo^/== func [/local s][s: "a" append s "a"]^/```}
    sent: "2016-07-27T08:10:24.419Z"
    editedAt: "2016-07-27T08:14:18.462Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57986a508fb4820a4667904e"
    text: {@xificurC `Even in lisps if you write (let ((foo ""))) inside a function definition it will behave as foo: copy "" in Red. ` Red and Rebol series are mutable by default. You manually `copy` them when immutable behavior is desired. Let me try to explain the Rebol/Red behavior using a step by step approach:}
    sent: "2016-07-27T08:01:20.916Z"
    editedAt: "2016-07-27T08:02:01.730Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57986a3d00c8ebdd0e27505e"
    text: "@dockimbel ok thanks"
    sent: "2016-07-27T08:01:01.736Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579869f4ad8f331f4e4ba7c6"
    text: {@xificurC Can't think of anything simpler, a longer alternative: `repend/only reduce [key] [d]`}
    sent: "2016-07-27T07:59:48.454Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579865c793148c6b21e1b625"
    text: {is there a more idiomatic way to write something like `reduce [key reduce [d]]`?}
    sent: "2016-07-27T07:41:59.137Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
)#(
    id: "5798650a8fb4820a46678412"
    text: "thanks @dockimbel and @PeterWAWood "
    sent: "2016-07-27T07:38:50.597Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5798648f7c9324e20e01aa5f"
    text: {@xificurC The Map! Datatype Wiki Page has been moved [here](http://doc.red-lang.org/Map!.html)}
    sent: "2016-07-27T07:36:47.925Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5798642e8fb4820a466782c4"
    text: {@xificurC Rebol does not have such action, it's part of of new features introduced in Red. The only mention of `put` in our limited docs so far is in the [map!](http://doc.red-lang.org/Map!.html) description. It should work the same on blocks (and derivatives), modulo bugs. ;-)}
    sent: "2016-07-27T07:35:10.804Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57986424ad8f331f4e4b9af8"
    text: {@xificurC The introduction in [this blog entry](http://www.red-lang.org/search/label/map) may be enough to get you started. ^/^/The Wiki page that it links to seems to have disappeared.}
    sent: "2016-07-27T07:35:00.441Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5798639b37c95e2446b938a6"
    text: {@PeterWAWood is that documented somewhere for red?}
    sent: "2016-07-27T07:32:43.985Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5798638bad8f331f4e4b99d5"
    text: {@dockimbel thanks I couldn't find that one in the Series chapter of the rebol guide}
    sent: "2016-07-27T07:32:27.213Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57986301d155b0294e0d5d7f"
    text: {@xificurC `put` is the *write* counterpart of `select` in Red. Most of the time, I use blocks for key-value stores, I only switch to hash! or map! if the number of values is more than a few dozens and that I want maximum lookup speed.}
    sent: "2016-07-27T07:30:09.515Z"
    editedAt: "2016-07-27T07:32:25.617Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579862d700c8ebdd0e273f74"
    text: {You are probably looking for ```map!``` which Rebol 2 doesn't have.}
    sent: "2016-07-27T07:29:27.144Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57985e4837c95e2446b92c3e"
    text: {what does one use as a key-value store? `hash!` seems to work like a set. Using `block!` with `select` works fine but there's no `update`equivalent, i.e. I have to get to the correct position with `find` and then `change second` that, which is ugly mostly because `find` doesn't hop, it looks at the whole block}
    sent: "2016-07-27T07:10:00.286Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57985da17c9324e20e019b61"
    text: "4M is small? My *country* has 5M"
    sent: "2016-07-27T07:07:13.783Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57985c1593148c6b21e1a154"
    text: {@x8x Ah, we got interviewed by a few newspaper when we arrived in Xiamen last December, they were curious about why we came here, from Beijing to a small city (only 4M inhabitants). ;-)}
    sent: "2016-07-27T07:00:37.691Z"
    editedAt: "2016-07-27T07:01:32.476Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5798550600c8ebdd0e27211a"
    text: {How did I miss this interview with Nenad ?? :-) http://pastebin.com/raw/JJUBGBWm}
    sent: "2016-07-27T06:30:30.947Z"
    editedAt: "2016-07-27T06:31:12.204Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57985059ad8f331f4e4b6f8a"
    text: {@dockimbel thanks for the follow-ups,  I wasn't around yesterday anymore. I did homoiconic languages before (as in CL, Clojure, Racket, Scheme, Picolisp), so I'm fine with the notion of "code is data". Reading your reddit post I think the biggest difference is variables vs. bindings. Even in lisps if you write `(let ((foo "")))` inside a function definition it will behave as `foo: copy ""` in Red. So I guess in lisps I would read it "set this local variable to an empty string", whereas I don't know how would I say it in Red. One is used to having a function definition static whereas here if you look into the body you suddenly see that the definition itself changed. It's like the function can mutate itself, which I haven't seen in any other language. Now that I know it though I'll try to remember it.^/^/Just out of curiosity though, is this behavior a direct result of the language's design? Does the design *bind* you to keep it this way? Or could both concepts be used but Carl decided this one has more benefits? If so what are those benefits?}
    sent: "2016-07-27T06:10:33.609Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57984a088fb4820a46674ce7"
    text: "out"
    sent: "2016-07-27T05:43:36.775Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "579838788fb4820a46672f78"
    text: {Believe me when I say I feel your pain. So many times I've thought I had a great idea, or an elegant piece of code, only to show it to the community and have all its flaws and things I didn't consider pointed out. It's humbling, terrible, and wonderful.}
    sent: "2016-07-27T04:28:40.318Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57983770ad8f331f4e4b4719"
    text: {It never ceases to amaze me how easy most things are in Redbol, but when I go to write general routines, to be considered for standard inclusion, there are *so* many details to consider. Hundreds of tiny decisions that can each lead to beauty or terror.}
    sent: "2016-07-27T04:24:16.662Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579836ec7c9324e20e015774"
    text: {It's great, now, because when we get `date!` and work on formatters and parsers, you can be their champion! }
    sent: "2016-07-27T04:22:04.810Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579836c13383eb6221467247"
    text: {NP. Things are easy in the scope of me and my clients (just give me ASCII :^^), but when you consider Red as a data exchange language, the lexical forms take on more importance.}
    sent: "2016-07-27T04:21:21.258Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5798366600c8ebdd0e26ec3a"
    text: {Ok. Well if I can't give it context it doesn't.   I agree with you there.  I'm not trying to be difficult...just trying to forestall difficulty for newbies most of all..}
    sent: "2016-07-27T04:19:50.965Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "57983661d155b0294e0d0aa2"
    text: {As you point out, there are some lessons we can learn from Rebol in that regard.}
    sent: "2016-07-27T04:19:45.141Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5798363300c8ebdd0e26ebc1"
    text: {Making things easy for you and I might make other things completely impossible. :^^\}
    sent: "2016-07-27T04:18:59.080Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579835eb00c8ebdd0e26eb13"
    text: {A parser that is make locale-aware, and a formatter on the flip side, give you all the control you should need. Unfortunately, Red can't assume in the case of ambiguous data, so has to work hard to disallow it, which makes some design decisions really hard.}
    sent: "2016-07-27T04:17:47.183Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579835a58fb4820a46672ac7"
    text: {The problem is still, how does Red know whether 6/7/2016 is date-usa! or date-china! ? }
    sent: "2016-07-27T04:16:37.505Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579835488fb4820a46672a41"
    text: {@greggirwin how about date-euro! and date-usa! and maybe date-china! (or whatever)?  I picked up this gauntlet because I found out about the "weird" date interpretation the hard way and then encountered another newbie running into the same problem and wasting their time in turn.  I'd rather have NO date assumption (I think one of your suggestions) than what exists because at least then I - and plenty of others - wouldn't be misled.  I could live with no date assumption by red...I'd know I just need to create my own types and parsing from the get-go.  So I'm good with that as well.   I work with ISO 8601 when I have a choice.}
    sent: "2016-07-27T04:15:04.990Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5798346ed155b0294e0d0795"
    text: {And there will surely be some standard date parsing to assist.}
    sent: "2016-07-27T04:11:26.455Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579834048fb4820a46672884"
    text: {The ISO model makes a whole lot of things easier. }
    sent: "2016-07-27T04:09:40.294Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579833ce93148c6b21e158e7"
    text: {@tanstaaf1, going by your signature, you understand that nothing comes for free. The tradeoff would be that you have to have the locale info at *every* instance of a `date!` value. So I think the approach of making Red strict in what is standard, and pre-processing ambiguous stuff, is the way to go.}
    sent: "2016-07-27T04:08:46.104Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57983398d155b0294e0d067c"
    text: "Anyway, I've expressed and will shut up now! :->"
    sent: "2016-07-27T04:07:52.008Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5798333a7c9324e20e0151ab"
    text: {@jthsmith ISO 8601 is the only format which makes dates trivial to manipulate and compare and calculate, so I second you there.  I'm expecting to do a lot of text processing, though, and so that's what's being discussed.   DD/MM/YYYY and MM/DD/YYYY have nothing to recommend one over the other without locale knowledge, but they are common in text processing.  I wish I had a better answer but I'd personally prefer there be NO date assumption if red can't adapt to locality. It would be sort of like having only euros or yen be understandable as a currency ... just and endless headache as I am not going to be able to get 330 million people in this country to start using euro format for dates any more than I could get them to start speaking Japanese.}
    sent: "2016-07-27T04:06:18.970Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5798332700c8ebdd0e26e6a1"
    text: {I posted some HOFs recently: :point_up: [July 20, 2016 11:22 AM](https://gitter.im/red/red?at=578fb36a841e619d161f92ca)}
    sent: "2016-07-27T04:05:59.116Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579832fd00c8ebdd0e26e67a"
    text: {1. Remove `list!` from the spec block. Red doesn't have it.^/2. Make the inner part of your `map` body: `repeat i length? data [append result f data/:i]`}
    sent: "2016-07-27T04:05:17.034Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579830f8d155b0294e0d02ba"
    text: {it works in Rebol, in Red how can I pass a function inside another function ?}
    sent: "2016-07-27T03:56:40.409Z"
    v: 1
    author: "556e664e15522ed4b3e15324"
) #(
    id: "579830b3d155b0294e0d0257"
    text: {I'm trying to use high order functions such as:^/```^/Red [^/^-Title: "Function Argument"^/^-Author: oofoe^/^-Date: 2009-12-19^/^-URL: http://rosettacode.org/wiki/Function_as_an_Argument^/]^/^/map: func [^/^-"Apply function to contents of list, return new list."^/^-f [function!] "Function to apply to list."^/^-data [block! list!] "List to transform."^/^-/local result i^/][^/^-result: copy []  repeat i data [append result f i]  result]^/^/square: func [^/^-"Calculate x^^2."^/^-x [number!]^/][x * x]^/^/cube: func [^/^-"Calculate x^^3."^/^-x [number!]^/][x * x * x]^/^/; Testing:^/^/x: [1 2 3 4 5]^/print ["Data:   "  mold x]^/print ["Squared:"  mold map :square x]^/print ["Cubed:  "  mold map :cube x]^/print ["Unnamed:"  mold map func [i][i * 2 + 1] x]^/```^/}
    sent: "2016-07-27T03:55:31.308Z"
    editedAt: "2016-07-27T03:58:27.469Z"
    v: 2
    author: "556e664e15522ed4b3e15324"
) #(
    id: "579830417c9324e20e014c7b"
    text: "Hi Folks,"
    sent: "2016-07-27T03:53:37.604Z"
    v: 1
    author: "556e664e15522ed4b3e15324"
) #(
    id: "57978e408fb4820a4665c7a6"
    text: {Once you grasp that, many other "odd" features or behaviors in Rebol and Red will suddenly make sense. ;-) People previously exposed to Lisp will find that trivial, but it takes more time if you never used an homoiconic language before. It's a bit like crossing the mirror in The Matrix, after ingesting the *red* pill. ;-)}
    sent: "2016-07-26T16:22:24.656Z"
    editedAt: "2016-07-26T16:24:04.151Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57978deb8fb4820a4665c6d4"
    text: {Here is a simple illustration without using a function:^/```lisp^/red>> code: [b: []]^/== [b: []]^/red>> do code^/== []^/red>> b^/== []^/red>> insert code/2 3^/== []^/red>> code^/== [b: [3]]^/red>> b^/== [3]^/```}
    sent: "2016-07-26T16:20:59.982Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57978c2b00c8ebdd0e2585b8"
    text: {@xificurC *I would expect `ret` to be always initialized with `[]` [here](https://ptpb.pw/eTAg), so obviously I'm missing some Red concept that is not present in other languages* Indeed, the concept you are missing (like Pekr) is called *homoiconicity* (core concept in Lisp languages), which translates in layman terms to: "code is data, data is code". So, everything you are looking at in a Rebol or Red source is *only* data, not code. Therefore, there are not such thing as "initializating", `ret: []` just makes the word `ret` refer to the value following it (empty block in this case). If you modify that block, next time you evaluate that expression, `ret` will be set to the same block, with whatever it currently holds. So, a dynamic construction is required in such case (achieved by `make block! 0` for example), rather than using a literal block value, unless you want to use it for caching values across calls (similar effect as a *static* allocation in other languages). Longer explanation in this [/r/redlang post](https://www.reddit.com/r/redlang/comments/4ecs9n/insane_behavior_in_rebol_lets_put_an_end_to_this/d2lt4fi) (using string instead of a block, but both are series, so behave the same).}
    sent: "2016-07-26T16:13:31.599Z"
    editedAt: "2016-07-26T16:19:01.961Z"
    v: 9
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57978a8793148c6b21dfefdf"
    text: {@xificurC Blocks are *series* (strings, paths,... are also series) which is a combination of array and an implicit index. So, you are correct that it's the *position* index which is recorded and not a slot pointer.}
    sent: "2016-07-26T16:06:31.515Z"
    editedAt: "2016-07-26T16:07:03.043Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5797898400c8ebdd0e257e5a"
    text: {@xificurC @greggirwin Sorry, forgot what "lookup" meant in that context, right, it's O(1) for indexed access.}
    sent: "2016-07-26T16:02:12.814Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5797810d37c95e2446b758c6"
    text: {which, after of later modification of `a`, was not true anymore .... and is a little bit difficult to grasp ...}
    sent: "2016-07-26T15:26:05.599Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579780e937c95e2446b75884"
    text: {yes, you might be right. Imagine the following case - you want to store a looked-up position:^/```^/red>> b: find a 3 ^/== [3]^/red>> insert a 0^/== [0 1 2 3]^/red>> b^/== [2 3]^/```}
    sent: "2016-07-26T15:25:29.044Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977f853383eb622144e2c6"
    text: {from what I learned today it seems `block!` is an array and these `word!`s refer to a *position* in that array}
    sent: "2016-07-26T15:19:33.615Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57977f1fd155b0294e0b869f"
    text: {after an insert I would still expect those pointers to be there. Which means the way I think about it is wrong}
    sent: "2016-07-26T15:17:51.246Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57977eefd155b0294e0b8613"
    text: {if you think about it as "second in a" then no. I imagine the block as a linked list where `b` points at `2`:^/```^/[ 1 | -- ] -> [ 2 | -- ] -> [ 3 | NIL ]^/  a             b^/```}
    sent: "2016-07-26T15:17:03.503Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57977e2e3383eb622144dec6"
    text: {So in fact, it did not "move" ...}
    sent: "2016-07-26T15:13:50.420Z"
    editedAt: "2016-07-26T15:14:06.607Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977e1600c8ebdd0e255d3c"
    text: {```^/red>> index? b^/== 2^/```}
    sent: "2016-07-26T15:13:26.210Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977e01d155b0294e0b8341"
    text: "b simply referred to some position"
    sent: "2016-07-26T15:13:05.322Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977df437c95e2446b75046"
    text: {I would not too. Well, that's one of the gotchas I like to explain to ppl and have to remind myself about. After some time, it feels natural, but ...}
    sent: "2016-07-26T15:12:52.246Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977d8c37c95e2446b74f41"
    text: {I wouldn't expect `b` to "move" after that `insert` :worried: }
    sent: "2016-07-26T15:11:08.563Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57977d058fb4820a466594a3"
    text: "Think about that as about pointers ..."
    sent: "2016-07-26T15:08:53.351Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "57977cd68fb4820a46659422"
    text: {in that sense:^/```^/red>> a: [1 2 3]^/== [1 2 3]^/red>> b: next a^/== [2 3]^/red>> insert a 0^/== [1 2 3]^/red>> b^/== [1 2 3]^/red>> head b^/== [0 1 2 3]^/```^/}
    sent: "2016-07-26T15:08:06.359Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977c7e3383eb622144da35"
    text: {dunno - saving the memory? In Red, we don't call `ret`being a variable, but a word, referring to the value, or a slot, where value is stored ...}
    sent: "2016-07-26T15:06:38.941Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977bd47c9324e20effb1b8"
    text: "is there a use case why this is the way it is?"
    sent: "2016-07-26T15:03:48.095Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57977b7800c8ebdd0e2555ae"
    text: {so either use `make!` or write above example as `ret: copy []`}
    sent: "2016-07-26T15:02:16.610Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977b5a00c8ebdd0e255562"
    text: {Or  the explanation could be - you are creating a reference `ret` to the empty block `[]`, so once you call function again, it refers still to the same block ...}
    sent: "2016-07-26T15:01:46.417Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977b233383eb622144d6af"
    text: {@pekr care to explain the gory details? I read `ret: []` as "set the variable ret to an empty block"}
    sent: "2016-07-26T15:00:51.137Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57977b1993148c6b21dfc311"
    text: {That's one of the gotchas - aka concepts ... of Rebol like language. Not sure it was called and indefinite extent (most probably I am wrong here), but functions remember values between the calls.}
    sent: "2016-07-26T15:00:41.704Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977aef00c8ebdd0e255466"
    text: "seems tricky at first glance though"
    sent: "2016-07-26T14:59:59.082Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57977aec37c95e2446b7466b"
    text: "please use `copy []`.... "
    sent: "2016-07-26T14:59:56.727Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57977aded155b0294e0b796d"
    text: {changing `ret: []` to `ret: make block! 0` seems to do the trick}
    sent: "2016-07-26T14:59:42.538Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57977a1a8fb4820a46658c2a"
    text: {I would expect `ret` to be always initialized with `[]` [here](https://ptpb.pw/eTAg), so obviously I'm missing some Red concept that is not present in other languages}
    sent: "2016-07-26T14:56:26.678Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5797742737c95e2446b732e0"
    text: "Index lookups for blocks are O(1)."
    sent: "2016-07-26T14:31:03.137Z"
    editedAt: "2016-07-26T14:31:44.810Z"
    v: 3
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579771368fb4820a466572e5"
    text: {@dockimbel re more efficient data structures: sounds nice. I'm already imagining functional data structures :)}
    sent: "2016-07-26T14:18:30.669Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579771187c9324e20eff93c1"
    text: {@dockimbel to find a value sure, but lookups for arrays usually refer to index lookups. E.g. for singly linked lists you need to traverse each cell, therefore to find the 100th element you need to make 100 hops. For an array it's just 1. So I guess `block/100` is `O(1)` but finding a value is `O(n)`}
    sent: "2016-07-26T14:18:00.657Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57976cdd7c9324e20eff870a"
    text: {@xificurC No `list!` in Red for the same reasons as in Rebol2. Though, if we really need it, it's not a problem to add it. ;-) Most of times, you can easily construct a (single or double) linked-list of blocks which would give you the same benefits. For blocks, you need to iterate from head to tail to find a value, hence O(n). Anyway, once we have the basic types done, we can work on some more efficient data structures.}
    sent: "2016-07-26T13:59:57.543Z"
    editedAt: "2016-07-26T14:04:02.963Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57976c693383eb622144add3"
    text: {@dockimbel oh no `list!` in red? Ok. If blocks are dynamic arrays why is lookup `O(n)`?}
    sent: "2016-07-26T13:58:01.231Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57976c2693148c6b21df991d"
    text: {@xificurC For the insertion/deletion, you need to pay the cost of sliding all the right values to left/right direction. It is still fast enough in most use-cases, so list! was abandoned, as nobody was using it (anyway it can be easily simulated by nesting block references). For insertion/removal at end, you usually get some free slots, so you can amortize it. For head insertion/removal, Rebol3 does insert free slots to get similar benefits IIRC, Red does not do it yet.}
    sent: "2016-07-26T13:56:54.947Z"
    editedAt: "2016-07-26T13:58:29.385Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57976c2500c8ebdd0e252c86"
    text: "looking forward for bootstrapped 2.0 then :)"
    sent: "2016-07-26T13:56:53.993Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57976bf88fb4820a46656410"
    text: {you are welcome. Rebol history is indeed quite interesting, but we are looking into the future, which is - Red :-)}
    sent: "2016-07-26T13:56:08.055Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57976bad7c9324e20eff838d"
    text: "@dockimbel I see, thank you for the explanation"
    sent: "2016-07-26T13:54:53.654Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57976bab93148c6b21df9812"
    text: {There were some investor obligations, or something like that. Noone really knows, apart from Carl. It is imo a lost battle. E.g. one year ago Carl promissed new release, fixing important GC bug. It was still not realeased yet. The sooner Red bootstraps, the better ... but so far, Red can work with R2.}
    sent: "2016-07-26T13:54:51.745Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57976b577c9324e20eff8248"
    text: {why not open source it, I mean what difference does it make for him today?}
    sent: "2016-07-26T13:53:27.208Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57976b4bad8f331f4e49799b"
    text: {@xificurC Blocks are just dynamic arrays, so it's O(n). `native!` means "function coded in the underlying language", so C for Rebol, Red/System for Red. `action!` is a variant of `native!` that is defined as a *method* of a datatype class. So all datatypes are internally built using a OO model, actions being their "methods".}
    sent: "2016-07-26T13:53:15.001Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57976b3fd155b0294e0b4c6e"
    text: "..."
    sent: "2016-07-26T13:53:03.956Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57976b3c3383eb622144aa4f"
    text: "yes"
    sent: "2016-07-26T13:53:00.337Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57976b34d155b0294e0b4c4c"
    text: "so R2 is free but closed source"
    sent: "2016-07-26T13:52:52.472Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57976b2a00c8ebdd0e25296c"
    text: "No, Carl open sourced R3 only."
    sent: "2016-07-26T13:52:42.067Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57976b0a8fb4820a4665613b"
    text: "I thought Carl open sourced R2"
    sent: "2016-07-26T13:52:10.410Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57976aca7c9324e20eff80e4"
    text: {actually not that much from the looping constructs as from the fact that a block seems to store a few pointers - head, tail and current position. Especially the current position makes it feel `O(1)`. Or is the insertion/deletion `O(1)` when already "being" there but `O(n)` when not?}
    sent: "2016-07-26T13:51:06.982Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57976a5693148c6b21df93e4"
    text: {@xificurC As the implementation is closed-source, it's hard to know, but my guess is that it uses a hashtable + a block in order to provide all the series actions support, so the cost is risen by the need to update the block as well as the hashtable. Though, it is also possible that the implementation uses a smarter way to achieve it, a quick benchmark on a big hash vs block insertion should reveal the internal nature of it.}
    sent: "2016-07-26T13:49:10.410Z"
    editedAt: "2016-07-26T13:54:06.557Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57976a297c9324e20eff7f75"
    text: {oh wait, `block!`s have `O(n)` for insert and remove? Using `forall`, `forskip` etc. one gets the feel that it is `O(1)` like for `list!`s}
    sent: "2016-07-26T13:48:25.171Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5797699637c95e2446b713be"
    text: {@dockimbel hm, I thought hashes have insert/remove amortized O(log n), but I might just remember incorrectly. Thanks. One more thing I cannot find anywhere is a definition of `action!` and `native!`}
    sent: "2016-07-26T13:45:58.707Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579768b5ad8f331f4e497310"
    text: {@ifgem If you know a bit about system programming, you could easily implement it yourself. ;-)}
    sent: "2016-07-26T13:42:13.459Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579768a9d155b0294e0b44ac"
    text: "@PeterWAWood pretty sad :)."
    sent: "2016-07-26T13:42:01.389Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5797680937c95e2446b70f03"
    text: {@ifgem I don't think there is such a function with the current temporary IO support. I would expect it to be part of the Red Alpha 0.7.0 release.}
    sent: "2016-07-26T13:39:21.507Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "579767f900c8ebdd0e2520d9"
    text: {@xificurC ^/1. As you would expect: Block insert/remove/lookup: O(n), List insert/remove: O(1), lookup: O(n), Hash insert/remove: O(n), lookup: O(1).^/2. Certainly not, we'll use a BCD format. The `money!` implementation in Rebol2 is unusable.}
    sent: "2016-07-26T13:39:05.300Z"
    editedAt: "2016-07-26T13:40:58.384Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5797674cd155b0294e0b413d"
    text: {IIRC, R3 used new implementation for the `money!` type. It was based upon the BCD (binary coded decimal), or something simillar, to get some precision ...}
    sent: "2016-07-26T13:36:12.137Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579766d600c8ebdd0e251e0d"
    text: {looking through the rebol guide's datatypes I have 2 questions:^/1. what is the time complexity of insertion, deletion and lookup for blocks, lists and hashes? This is pretty important information that I cannot find^/2. is `money!` going to be represented with floating point numbers in Red as well? Because it is generally thought of as a [bad idea](http://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency)}
    sent: "2016-07-26T13:34:14.691Z"
    editedAt: "2016-07-26T13:34:29.971Z"
    v: 2
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5797666693148c6b21df89f7"
    text: {Is there a function that allows me to get each pressed key(in console) in Red?}
    sent: "2016-07-26T13:32:22.244Z"
    editedAt: "2016-07-26T13:32:54.684Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "579761cdad8f331f4e496258"
    text: {rebol.com still down. Does anyone have a copy of the rebol core guide? It's tiring to search for it through the web archive}
    sent: "2016-07-26T13:12:45.013Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5797317ad155b0294e0ac666"
    text: {@pekr thanks, probaby yes. same for `'%` `''` `')` etc.}
    sent: "2016-07-26T09:46:34.494Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57972c697c9324e20efeeea4"
    text: "@RnBrgn  @RiVeND Thanks!"
    sent: "2016-07-26T09:24:57.464Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "57972b207c9324e20efeec14"
    text: {Maybe because `/` is used as a path separator too, so not allowed in words?}
    sent: "2016-07-26T09:19:28.764Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579728578fb4820a4664c096"
    text: {When I type `'*` `'+` `'-` `'/` on console the first three works but the last one gives `Syntax Error: invalid value at "'/"` error, same for all R2/R3/Red, what is the reason?}
    sent: "2016-07-26T09:07:35.494Z"
    editedAt: "2016-07-26T09:15:29.280Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5797064800c8ebdd0e2441fe"
    text: {I think there's a plenty of options to make it just what you want it to be ....}
    sent: "2016-07-26T06:42:16.622Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5797060dad8f331f4e48967e"
    text: {```^/>> now^/== 26-Jul-2016/8:38:27+2:00^/>> to-idate now^/== "Tue, 26 Jul 2016 08:38:34 +0200"^/>> source to-idate^/to-idate: func [^/    "Returns a standard Internet date string."^/    date [date!]^/    /local str^/][^/    str: form date/zone^/    remove find str ":"^/    if (first str) <> #"-" [insert str #"+"]^/    if (length? str) <= 4 [insert next str #"0"]^/    reform [^/        pick ["Mon," "Tue," "Wed," "Thu," "Fri," "Sat," "Sun,"] date/weekday^/        date/day^/        pick ["Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"] date/month^/        date/year^/        to-itime any [date/time 0:00]^/        str^/    ]^/]^/```}
    sent: "2016-07-26T06:41:17.451Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579705f593148c6b21deb250"
    text: {R2, for example, has a function called `to-idate`:}
    sent: "2016-07-26T06:40:53.555Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579705e2d155b0294e0a65db"
    text: {```^/>> help now^/USAGE:^/    NOW /year /month /day /time /zone /date /weekday /yearday /precise^/^/DESCRIPTION:^/     Returns the current local date and time.^/     NOW is a native value.^/^/REFINEMENTS:^/     /year -- Returns the year only.^/     /month -- Returns the month only.^/     /day -- Returns the day of the month only.^/     /time -- Returns the time only.^/     /zone -- Returns the time zone offset from GMT only.^/     /date -- Returns date only.^/     /weekday -- Returns day of the week as integer (Monday is day 1).^/     /yearday -- Returns day of the year (Julian)^/     /precise -- Use nanosecond precision^/```}
    sent: "2016-07-26T06:40:34.428Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579705cbd155b0294e0a65bf"
    text: {As for dates - it's like it is. Looking into the `now`function, you have plenty of options to decompose it to its elements and build any helper functions you like:}
    sent: "2016-07-26T06:40:11.881Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5797058d93148c6b21deb1a1"
    text: {@jthsmith well, the situation repeats and is so natural with language developments. Each of us, coming to the new language, will try to assure, that it supports our feature, being dragged from other environments. So we've got some lisp users here, who try to suggest some Lisp features, but in the end, who knows, if those folks would use Red at all? I think it's a question for the language designer (Dockimbel) and his close team, to think things thru and keep the language consistent ...}
    sent: "2016-07-26T06:39:09.848Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "5796fb003383eb622143b173"
    text: {If Red doesn't input and output ISO 8601 dates out of the box, just forget about the whole thing. Seriously. Can't believe we're still arguing about this in 2016. That's 2016-07-25 to be exact.}
    sent: "2016-07-26T05:54:08.603Z"
    v: 1
    author: "576105b9c2f0db084a1df4f6"
) #(
    id: "5796e1567c9324e20efe59ad"
    text: "+1 @pekr "
    sent: "2016-07-26T04:04:38.414Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "57964be03383eb6221426328"
    text: "If there is a fallback, what's to worry about?"
    sent: "2016-07-25T17:26:56.687Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579643333383eb6221424e26"
    text: {I will be uping the requirements for Red on x86, to have a SSE3 unit, which was introduced with the P4. A fallback is available for older CPUs, though.}
    sent: "2016-07-25T16:49:55.246Z"
    editedAt: "2016-07-25T16:50:29.098Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57964292ad8f331f4e4711c8"
    text: {**Quick survey: is there anyone here using Red on a pre-Pentium 4 machine?**}
    sent: "2016-07-25T16:47:14.265Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57963ae57c9324e20efd006d"
    text: {+1 on unambiguous lexical forms. I like `'` as the numeric group separator in Rebol, but I'm not sure how well it fulfilled the goal of letting people use both `,` and `.` as the decimal separator. }
    sent: "2016-07-25T16:14:29.554Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579614b7ad8f331f4e468dd8"
    text: {that even simplifies it to `quoted: [any [{""} | not {"} skip]]`}
    sent: "2016-07-25T13:31:35.760Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579613bf7c9324e20efc9064"
    text: {but I just found out that to escape a double quote in CSV one should you 2 double quotes, so I'm changing the definition :)}
    sent: "2016-07-25T13:27:27.613Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579613a600c8ebdd0e223430"
    text: {@dockimbel I see, thanks :) the `into` part doesn't make much sense there anymore anyway}
    sent: "2016-07-25T13:27:02.460Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5796136d37c95e2446b4291a"
    text: {@xificurC Hi, nope, it collects selectively only what you want to `keep`. ;-)}
    sent: "2016-07-25T13:26:05.748Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5796133f3383eb622141ce8f"
    text: {@dockimbel Hi :) I thought `collect into` collects everything the rule matches}
    sent: "2016-07-25T13:25:19.599Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579612fb37c95e2446b42807"
    text: {@xificurC What is `collect` in `quoted` for? (it has no nested `keep`)}
    sent: "2016-07-25T13:24:11.243Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57960ec83383eb622141c3f0"
    text: "I'm spamming to get code review. Will stop now"
    sent: "2016-07-25T13:06:16.352Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57960e9f93148c6b21dc9a55"
    text: {``` red^/quoted: [collect into quot [to [not {\} skip {"}] skip]] ;"^/^/split-line: [collect [any [{"} keep quoted {"} | keep to ["," | end] skip]]]^/^/; test-line: {hi there,"this is quoted","this has \"escaped\" quotes",etc}^/; parse test-line split-line^/; == ["hi there" "this is quoted" {this has \"escaped\" quotes} "etc"]^/```}
    sent: "2016-07-25T13:05:35.663Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57960df800c8ebdd0e2225d2"
    text: {I wonder why is it `{"this is quoted"}` and not just `{this is quoted}`}
    sent: "2016-07-25T13:02:48.516Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57960d1dd155b0294e08549e"
    text: {parse dialect is pretty nice :) Here is my attempt at a crude csv parser^/^/``` red^/quoted: [{"} collect into quot [to [not {\} skip {"}] skip] {"}] ;"^/^/split-line: [collect [any [keep [quoted | to ["," | end]] skip]]]^/^/; test-line: {hi there,"this is quoted","this has \"escaped\" quotes",etc}^/; parse test-line split-line^/; == ["hi there" {"this is quoted"} {"this has \"escaped\" quotes"} "et...^/```}
    sent: "2016-07-25T12:59:09.440Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5795f37bb92e27447fb89633"
    text: {not sure, but might be .... or broken web server, or something :-)}
    sent: "2016-07-25T11:09:47.914Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5795f35cb92e27447fb8905c"
    text: {ah, so the ones I could open were just cache hits? Funny}
    sent: "2016-07-25T11:09:16.308Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5795f329959ee82b3e5924bf"
    text: "rebol.com seems to be down ..."
    sent: "2016-07-25T11:08:25.179Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5795f1d467c448730e019491"
    text: {parts of the [rebol core guide](http://www.rebol.com/docs/core23/rebolcore-8.html) don't open for me, while [others](http://www.rebol.com/docs/core23/rebolcore-9.html) do}
    sent: "2016-07-25T11:02:44.391Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5795f1231d2852c8439003da"
    text: "Yes :-)"
    sent: "2016-07-25T10:59:47.131Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795f118b92e27447fb8765a"
    text: "@PeterWAWood I see. Then we agree :)"
    sent: "2016-07-25T10:59:36.078Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5795f0ed9d9e974a7f83776c"
    text: {@xificurC  I was trying to demonstrate in the current implementation that there is a single representation for both code and data. The earlier request was to introduce localisation into this single representation. Doing so would introduce ambiguity into the representation which as you point out is a non-starter.^/}
    sent: "2016-07-25T10:58:53.015Z"
    editedAt: "2016-07-25T11:01:00.773Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795eee61b9de56c0ee77432"
    text: {So if `mold`is the standard way to "store" code for later reloading then I would like it to be not changed. If one wants to tinker with the printing there should be a separate function for that}
    sent: "2016-07-25T10:50:14.823Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5795eeb5b92e27447fb857fd"
    text: {@PeterWAWood to achieve what? I'm not sure I got your example, sorry. First you are `load`ing code, which is `data -> code`, where I said to prefer 1 unambiguous representation. Then you are `mold`ing it so that it can later be read back, which is the `code -> data` path, which again I think should be unambiguous. Localization should be a representation concern, but not a code representation one. I.e. one can have options to print a date value in localized format but in order to store it for later reloading one should use the tools (functions) that are designed for that.}
    sent: "2016-07-25T10:49:25.235Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5795ed079d9e974a7f834b7f"
    text: {Typically people use literal values to achieve that:^/```text^/>> code: load [today: 21-Nov-2015 tomorrow: today + 1]^/== [today: 21-Nov-2015 tomorrow: today + 1]                                             ^/>> do code                                            ^/== 22-Nov-2015^/>> mold code^/== "[today: 21-Nov-2015 tomorrow: today + 1]"^/>> do mold code^/== [today: 21-Nov-2015 tomorrow: today + 1]^/>> do load mold code^/== 22-Nov-2015^/```}
    sent: "2016-07-25T10:42:15.584Z"
    editedAt: "2016-07-25T10:43:17.266Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795ea19bc636a263ef28594"
    text: {so if I want to **write code** I have to use the one, unambiguous format. If I am **reading input** from a textbox or w/e I can parse it w/e way I like.}
    sent: "2016-07-25T10:29:45.704Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5795e9e3b92e27447fb828e4"
    text: {homoiconicity has nothing to do with *choices* of representation. There is a function that shows (prints or w/e) your code in a format that can be parsed back by the language. That function is the one one should use to go `code -> data`. As for `data -> code`, I prefer to have one format, unambiguous.}
    sent: "2016-07-25T10:28:51.977Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5795e816b92e27447fb81712"
    text: {> @xificurC "Internally the number is represented differently, so where is the problem? When actually reading from an external source? ".^/^/Traditionally, Rebol (and following on Red) has used its literal value formats as the way to communicate both code and data and typically the literal values formats  are  used to achieve "code is data, data is code". Doing so has the advantage of being more readable. I guess that these uses could be superseded by use of the Redbin formats but I feel that it would be a significant change of approach. }
    sent: "2016-07-25T10:21:10.394Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795e80667c448730e012157"
    text: ""
    sent: "2016-07-25T10:20:54.542Z"
    editedAt: "2016-07-25T10:21:27.849Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795e59e9d9e974a7f8309fe"
    text: {we would have to rethink mold, and provide it with the locale setting}
    sent: "2016-07-25T10:10:38.857Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5795e57fbc636a263ef252c5"
    text: {So you prefer your script to fail, because it can't decide, what was the source of original molded representation?}
    sent: "2016-07-25T10:10:07.267Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5795e505959ee82b3e58833d"
    text: {Internally the number is represented differently, so where is the problem? When actually reading from an external source? That's a common (and unsolvable) problem everywhere. Either you provide the locale information or you make a guess. Red has a toplevel block where one could define it perhaps?^/^/My 2 cents though: we are programmers, not the ones who are going to read the final report that needs localization. If `.` is for decimal separation than that's what it is. Who is questioning the choice of `""` and `{}` syntax for strings? Or do we want to allow people how to write blocks, to perhaps use `{}` for blocks to get that Java feel? (and then solve the clash with the string syntax).}
    sent: "2016-07-25T10:08:05.412Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5795e0519d9e974a7f82eb69"
    text: {I was a little lazy with one of my examples. What I should have written was:^/^/If Red allowed a user to configure the thousand separator as "," and the decimal point as "." (e.g. 100,000.00) and vice versa (100.000,00), what number is 123,456?}
    sent: "2016-07-25T09:48:01.018Z"
    editedAt: "2016-07-25T09:54:56.671Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795dfee67c448730e00d3db"
    text: {@pekr I think it's one of those things where it I best  to decide how to do it as early as possible as working out how to do it later will be much more difficult. The implementation can, and probably should, be deferred.}
    sent: "2016-07-25T09:46:22.369Z"
    editedAt: "2016-07-25T09:52:42.563Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795db3032bd01d843c02362"
    text: {I would keep the topic for later, there seem to be more important things for 1.0 :-)}
    sent: "2016-07-25T09:26:08.243Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5795dae61b9de56c0ee6a85f"
    text: "Q"
    sent: "2016-07-25T09:24:54.709Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5795da851b9de56c0ee6a728"
    text: "@ifgem s"
    sent: "2016-07-25T09:23:17.451Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5795cde2b92e27447fb6eedc"
    text: {I think introducing locale support in Red will consume a lot of @dockimbel's brain cycles :-)}
    sent: "2016-07-25T08:29:22.652Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795cd5fbc636a263ef16349"
    text: {@pekr @tanstaaf1  I think it would be good to have some locale support. To support things like Turkish uppercase i, "," as a decimal separator and, even dates. However, I believe providing location support is going to be very difficult in Red as values are so fundamental to the language. Clearly, it is difficult, if not impossible, to "localise" the Rebol values. If the literal (or molded) values are localised and then become ambiguous, how would you know under which "locale" they had been molded. For example, if Rebol allowed "," to be used as a decimal separator in addition to ".",  does 123,456 mean 123456.00 or 123.456? You cannot tell without knowing under which "locale" the numeric literal was created. }
    sent: "2016-07-25T08:27:11.449Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795ccf49d9e974a7f823328"
    text: {@endo64 It's a know bug: https://github.com/red/red/issues/1154, caused by bad handling of unordered refinements in interpreter.}
    sent: "2016-07-25T08:25:24.866Z"
    editedAt: "2016-07-25T08:27:45.527Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5795ca8cb92e27447fb6d224"
    text: {There is a difference between R2/R3/Compiled-Red and Red Console on the following code:^/```^/f: func [x /a y /b z] [x * any [y z]]^/f/b/a 5 2 5^/== 10 (on Red)^/== 25 (on R2/R3 AND Compiled-Red)^/```}
    sent: "2016-07-25T08:15:08.839Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5795c48bb92e27447fb696d4"
    text: {Sorry for uneducated question - what will float-to-integer conversion in terms of R/S allow? Is that only about a needed feature itself, or might it mean speed-up of some code, etc.?}
    sent: "2016-07-25T07:49:31.593Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5795a32db92e27447fb55bfc"
    text: {Hmm, now thinking about it more - I do remember, in VID, some guys tried to provide a field type wiget, which contained some formatting ` __.__.____`, and allowed only num values to be entered, etc. I wonder if it is going to be possible with native widgets?}
    sent: "2016-07-25T05:27:09.723Z"
    editedAt: "2016-07-25T05:27:34.206Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5795a2ea959ee82b3e55dbe8"
    text: {As Peter have said - Red is a programming language. I asked for some locale support too, but found out, it is not all that easy. Why do you talk about dates only? What about the floats? In CZ locale, we don't have 10.5, we have 10,5 .... I am not sure that has an easy solution. Also for dates, we have 25-Jul-2016 form. Should we allow 25-cer-2016 form? All that looks easy on a surface. I think that localisation support is a responsibility of particular app author ...}
    sent: "2016-07-25T05:26:02.755Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57957eb99d9e974a7f7f68f4"
    text: {I don't believe what you want can be achieved with a config, header, or refinement. It's that simple.}
    sent: "2016-07-25T02:51:37.318Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57957dc6bc636a263eee9b87"
    text: {How about the suggestion, then, to not allow ambiguous date formats?^/^/Big questions are hard, that's why I try to start with small ones, and work our way up. If you can't answer my simple question above, how can we move forward? Alternatively, provide a concrete solution. Write the parse rules that do what you want and show that it all works.^/^/I'm not trying to be difficult, but I don't think I'm helping here. Rebol has flaws, I agree, but it is *enormously* well thought out. ^/^/In general, and it is a generalization, if someone proposes a good idea, that seems feasible to implement, and is in line with Red's designer's goals, it will be considered. If an idea gets pushback, it means more thought is required or a better argument made. I am not Red's designer. I'm just a community member like you. My hope is, by asking questions and pointing out gaps in an argument, that good suggestions will get stronger and Red will be the better for it.}
    sent: "2016-07-25T02:47:34.612Z"
    editedAt: "2016-07-25T02:48:28.809Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579569f867c448730efcbcfa"
    text: {If you tell me the meaning of 7/6/2016 I can adapt so we can communicate.  Why isn't it reasonable to tell rebol the meaning and have *it* adapt?   This could be done with a config, a header line, or maybe a refinement?   It's an ambiguous case, obviously, so there is no perfect answer - I'm just suggesting there are *better* answers than what rebol is doing.   Part of a better answer is that when the interpreter chokes on an input it should give some more useful suggestion than what R2 currently gives it could, for example, improve the status quo considerably by merely saying "Input does not fit dd/mm/yy format." when presented with 12/25/16.   Country of origin of the communication would also help suggest an interpretation (that is part of context in human communication).   Also, why can't both "Dec 25 2016" and "25 Dec 2016" be understood instead of just one?   I don't claim to have all the perfect answer here, @greggirwin.   I'm mostly saying that the current answer isn't too hot and AT LEAST the error messages red might offer should strive to be better than those given by R2.  I'm bringing this up now in the hope that it might help lead to something a little better.  R2 brags about how "flexible" it is in handling dates...but it is, in fact, not so flexible ... not so well thought out... at all.   How else could this be handled?  I pointed out the ambiguity so it would at least be considered.  If the US and China were insignificant countries in the programming arena we might just disregard them.   My guess is the US + China are rather more influential in the tech arena than the rest of the world combined. In any case, the ambiguity *is* going to cause a lot of grief which might be diminished by at least acknowledging the problem and attempting something different.}
    sent: "2016-07-25T01:23:04.912Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "579563121d2852c8438aeba8"
    text: {I'm trying to help, but you're not answering the direct questions I'm asking so we can't come to a conclusion. Your solutions aren't (yet) solutions. ^/^/>Rebol is obviously not as smart as a human or it would figure it out. ^/^/What I'm saying is that it can't. Not when they're ambiguous. Neither you or I could figure it out either. ^/^/> You config for US format. I post 7/6/2016 to you in a message, meaning 7-Jun-2016, because that's *my* config. What happens?^/^/How do you solve that? ^/^/}
    sent: "2016-07-25T00:53:38.711Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57955ce767c448730efc4998"
    text: {Greg, I didn't bring up this issue in order to start a pissing match.  Rebol is obviously not as smart as a human or it would figure it out.  But humans adapt and compromise.  I've suggested several ways I think the dilemma could be handled better.   IMO, choice is better than no choice and, certainly, more helpful error messages aren't asking for much?}
    sent: "2016-07-25T00:27:19.939Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
)#(
    id: "57954947959ee82b3e5321c4"
    text: {Note that I'm not saying it can't do what you want. I'm saying that if you want it, you have to answer the hard questions and show how. I don't happen to have those answers, so I can't help. }
    sent: "2016-07-24T23:03:35.114Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5795481e9d9e974a7f7da1b0"
    text: {So you config for US format. I post 7/6/2016 to you in a message, meaning 7-Jun-2016, because that's *my* config. What happens?}
    sent: "2016-07-24T22:58:38.895Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5795479d1b9de56c0ee14b00"
    text: {I'm not calling you an ass, but you are the one assuming here. You're assuming that Rebol (since Red doesn't have it yet) was intended for use only in the US and China.}
    sent: "2016-07-24T22:56:29.653Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57954765b92e27447fb283e0"
    text: {How does configuration solve the problem with data you didn't write?}
    sent: "2016-07-24T22:55:33.852Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57954753b92e27447fb28196"
    text: {Or disallow if a middle way can't be found in this case.  But don't ASS U ME, nor insist, US and Chinese citizens change their way to the rebol standard if we want to win.}
    sent: "2016-07-24T22:55:15.099Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "579547419d9e974a7f7d9b04"
    text: {> How about Red just disallows all-numeric dates as a lexical form?}
    sent: "2016-07-24T22:54:57.888Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579546db32bd01d843bb2284"
    text: {As I said, ASS U ME.   Better to allow (A) configuration and (B) much clearer error messages.}
    sent: "2016-07-24T22:53:15.031Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5795469c1b9de56c0ee14618"
    text: {How about Red just disallows all-numeric dates as a lexical form?}
    sent: "2016-07-24T22:52:12.556Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579546869d9e974a7f7d9542"
    text: {No, you're asking Red to assume that your assumption is correct. :^^)}
    sent: "2016-07-24T22:51:50.649Z"
    editedAt: "2016-07-24T22:53:09.099Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5795466c1b9de56c0ee1435a"
    text: {That's my whole point.  In general rebol's assumptions are correct -- urls, decimals, etc.   But date is tricky and in the US rebol is, unequivocally, WRONG.}
    sent: "2016-07-24T22:51:24.205Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "579546259d9e974a7f7d944e"
    text: "So, how do you solve that?"
    sent: "2016-07-24T22:50:13.268Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579546161b9de56c0ee1408c"
    text: {To *you* being the key. It's not that to Peter. It's ambiguous. }
    sent: "2016-07-24T22:49:58.082Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579545f3bc636a263eece748"
    text: "July 7 2016 obviously...to me. ;-)"
    sent: "2016-07-24T22:49:23.058Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "579545cbb92e27447fb27788"
    text: {Not trying to be a pain... I won't personally make this mistake again with rebol/red.   But while we are working on taking over the world we might as well show we are friendly regardless of county or personal preferences of date standard.   "You can be right - or you can be happy" is one of my favorite sayings.}
    sent: "2016-07-24T22:48:43.203Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "579545271b9de56c0ee13a71"
    text: "Q. What date is 7/6/2016? "
    sent: "2016-07-24T22:45:59.704Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579544e4959ee82b3e53106f"
    text: {I mean the error message could at least explain that it was expecting dd/mm/yyyy.  What R2 does currently on such an input is throw an error...but halting with an "nonsensical"  error when a US user puts in 1/23 or 12/25/16 (xmas) is not a way to "win friends and influence people" in the US.  And, as I said, apparently not in China either.   So...what is wrong with a configuable date standard and an error message which makes crystal clear what was expected?}
    sent: "2016-07-24T22:44:52.839Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "579544421b9de56c0ee138fe"
    text: {It's been a long time, but I do recall wanting mm/dd/yy support when I started with Rebol, and ended up writing my own. Now I use d-mmm-yyyy format every time I write a date, even by hand. }
    sent: "2016-07-24T22:42:10.303Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579543dbb92e27447fb271a4"
    text: {And whilst the Red console is an application, it is not really an end user application}
    sent: "2016-07-24T22:40:27.872Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "579543cd1b9de56c0ee13847"
    text: "How do you disambiguate valid values?"
    sent: "2016-07-24T22:40:13.357Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579543ac1d2852c84389d532"
    text: {As I said Red is a programming language not an application, the console is an application. You are requesting one of two things:^/^/(1) That Red has user configurable literal values ^/^/or ^/^/(2)The Red Console has configurable literal values for some datatypes^/^/I'm not sure which you are asking for.}
    sent: "2016-07-24T22:39:40.088Z"
    editedAt: "2016-07-24T22:41:07.591Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5795437f9d9e974a7f7d86a3"
    text: {I'm not sure what you mean by "try again".}
    sent: "2016-07-24T22:38:55.148Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5795435fb92e27447fb26e42"
    text: {While I agree that having it work correctly for me, and making my life easier, is most important ;^^), I recognize that we have things like Unicode support and international standards for a reason too.}
    sent: "2016-07-24T22:38:23.478Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579543379d9e974a7f7d81fc"
    text: {My alternate solution would be the FIRST time red is tempted to throw an error when someone puts in 1/23/16 it, at least, give a helpful error message and try again instead of what rebol currently does.}
    sent: "2016-07-24T22:37:43.202Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5795432a32bd01d843baf5b6"
    text: {Config options are always possible, but that assumes you're always going to get data in the same format. }
    sent: "2016-07-24T22:37:30.171Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579542e4b92e27447fb268f3"
    text: {@PeterWAWood Storage is one thing; input is another.   Red is assuming an input standard -- and it is "wrong" in the US and China.  Reminds me of the definition of Assume: makes an ASS of U and ME.  Red *shouldn't* assume in such a case.}
    sent: "2016-07-24T22:36:20.330Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5795419e1d2852c84389d1e2"
    text: {Short answer: I suggest a config file.  I doubt this is going to be the only case where that would be useful.   Choice of radians vs degrees for default might be another.   Hex vs decimal, another.     And then there are going to be things such as default directories, etc, right?  Anyway, I suggest the default is NOT acceptable -- not if getting US and, from what I read, Chinese on board is desirable. }
    sent: "2016-07-24T22:30:54.390Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5795415a67c448730efb8bde"
    text: {@tanstaaf1 Whilst Red is user friendly, it is first and foremost a programming language not an application. Even Microsoft uses the same Year Month Day order for its programming languages. (https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx) The ISO standard is to stores dates in Year Month Day order. As Gregg pointed out it is not difficult to write application code that handles Year Day Month input and output.}
    sent: "2016-07-24T22:29:46.637Z"
    editedAt: "2016-07-24T22:30:51.409Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57953e0d9d9e974a7f7d4dfa"
    text: {@greggirwin Indeed, that is the issue.  But my question is who assumed the HUMAN would know - because in the US "international"  date format isn.  Excel knows VERY well what I mean when I type in 4/1 or 4/1/16.   My first response when I encountered this was WTF?  Then disbelief.   Then }
    sent: "2016-07-24T22:15:41.650Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "57952428bc636a263eebe535"
    text: {@tanstaaf1, how would you make it configurable, and how would it error check valid data? It's easy enough to write parsers and formatters (I have both which I'll port at some point), but how would Red's lexer know?}
    sent: "2016-07-24T20:25:12.762Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5794e476959ee82b3e4fa5fa"
    text: {Maybe it's also about allowing runtime loading of dynamic libraries in R/S and in 0.6.3 in Red too ... or both ... better wait for gurus to properly answer that :-)}
    sent: "2016-07-24T15:53:26.234Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5794e43c67c448730ef836cc"
    text: {So it's just sort of a catchall for additional features which don't fit neatly into one of the major themes of development?   Then are there likely several "libreds" in the process of rolling out red? Thx @pekr }
    sent: "2016-07-24T15:52:28.209Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5794e3df67c448730ef8365b"
    text: {It will allow Red to be loadable as a library, which might be needed for Android, or something like that ...}
    sent: "2016-07-24T15:50:55.017Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5794e3959d9e974a7f79a011"
    text: {Libred is a branch, which should bring features expected in 0.6.2, nothing more. It is typical, that devs start some new branches, to develop various concepts ...}
    sent: "2016-07-24T15:49:41.020Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5794e1221d2852c84386851a"
    text: {It's such a small thing, in a way, but it has big repercussions if you don't get it OR bad data is being input by a user!}
    sent: "2016-07-24T15:39:14.647Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5794e0d032bd01d843b7b28e"
    text: {@dockimbel As you know, and I found out the hard way(4/1/2016 really was "April Fools Day), the date function - yet to be implemented - is looking only for "international" format...which isn't used in the two largest economies: the US nor China.  Any chance this can be configured in red?  If not, can the error reporting at least make explicit.  I wasn}
    sent: "2016-07-24T15:37:52.169Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5794e0199d9e974a7f798387"
    text: {Dumb question: What, exactly, is "libred"?   I don't see a definition on trello.  I thought it might be mezzanine functions, but that doesn't make sense either.  Anyway, it's kind of bothering me to be eagerly awaiting something when I don't know what I am awaiting! ;-/}
    sent: "2016-07-24T15:34:49.971Z"
    v: 1
    author: "55a5b3605e0d51bd787b682e"
) #(
    id: "5794b4c232bd01d843b63e26"
    text: "Yes:))."
    sent: "2016-07-24T12:29:54.517Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5794b44bbc636a263ee7f9a5"
    text: {@ifgem Dragons' territory. ;-) `make op!` is missing checks to only allow 2-arity functions.}
    sent: "2016-07-24T12:27:55.362Z"
    editedAt: "2016-07-24T12:29:05.056Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5794a771bc636a263ee77e6b"
    text: {It's weird:))^/```red^/<<: make op! does []^/<< ; missing arguments.^/10 << 20 ;  Script Error: << does not allow integer! for its <anon> argument^/```}
    sent: "2016-07-24T11:33:05.858Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "5794a0e0b92e27447facbfd5"
    text: {Yes. You're right. It works properly with actions without refinements:)^/```red^/<>: make op! :swap^/[1] <> [3]^/```}
    sent: "2016-07-24T11:05:04.349Z"
    v: 1
    author: "55e2fe990fc9f982beaf10c8"
) #(
    id: "57949fa59d9e974a7f7729d3"
    text: {@LispBerry If you wrap the source function into a 2-arity function with no refinements, it works fine:^/```lisp^/red>> app: func [a [series!] b][append a b]^/== func [a [series!] b][append a b]^/red>> <<: make op! :app^/== make op! [[a [series!] b]]^/red>> [h] << [ha]^/== [h ha]^/```}
    sent: "2016-07-24T10:59:49.964Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57949f62b92e27447facb891"
    text: "ok"
    sent: "2016-07-24T10:58:42.918Z"
    v: 1
    author: "55e2fe990fc9f982beaf10c8"
) #(
    id: "57949f4cb92e27447facb642"
    text: {@LispBerry An error message is missing at creation. Function with refinements are not supported. Please open a ticket on github about that crash.}
    sent: "2016-07-24T10:58:20.491Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57949efe9d9e974a7f772461"
    text: ""
    sent: "2016-07-24T10:57:02.823Z"
    editedAt: "2016-07-24T10:57:09.357Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57949c4e1d2852c84384158a"
    text: {```red^/<<: make op! :append^/[h] << [ha]^/```^/breaks Red interpreter without raising any error:).}
    sent: "2016-07-24T10:45:34.318Z"
    editedAt: "2016-07-24T10:46:59.984Z"
    v: 2
    author: "55e2fe990fc9f982beaf10c8"
) #(
    id: "57948deab92e27447fac2270"
    text: "thanks ...."
    sent: "2016-07-24T09:44:10.782Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57948c7ad885c4d548dee397"
    text: {It's a struct! define in COM.reds.^/```^/this!: alias struct! [vtbl [integer!]]^/```}
    sent: "2016-07-24T09:38:02.047Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57948b67b92e27447fac0631"
    text: {what is `this!` type in terms of the R/S code? just an alias to some other type?}
    sent: "2016-07-24T09:33:27.678Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579489a867c448730ef54e6e"
    text: {latest PRs fail on Travis. The most probable reason - rebol.com is down?}
    sent: "2016-07-24T09:26:00.625Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5793df1c1d2852c8437ee9c7"
    text: {@greggirwin thanks. @dockimbel planning on TCO as well? Neat}
    sent: "2016-07-23T21:18:20.839Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
)#(
    id: "5793a3301b9de56c0ed49fae"
    text: {Oh, I did notice a typo at the bottom of Series section 4.1 - it has "heaqd" instead of "head".}
    sent: "2016-07-23T17:02:40.963Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "5793a2e332bd01d843add4e2"
    text: {@Arie-vw - Red By Example is becoming a very useful reference. Thanks}
    sent: "2016-07-23T17:01:23.009Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "5793988732bd01d843ad5658"
    text: {@Arie-vw  The new series section is great.  Clear and reads well.  Thanks}
    sent: "2016-07-23T16:17:11.915Z"
    editedAt: "2016-07-23T16:19:00.636Z"
    v: 3
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5793645367c448730eebfd76"
    text: {red-by-example is steadily growing. Today a separate page about series has been added. Any positive feedback appreciated!}
    sent: "2016-07-23T12:34:27.320Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "5793176db92e27447fa01e4c"
    text: {"If you lie to the compiler, it will get its revenge"}
    sent: "2016-07-23T07:06:21.897Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5793176367c448730ee99a52"
    text: {Very true and  could see the frustration on the average coders' face:}
    sent: "2016-07-23T07:06:11.729Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5792e55eb92e27447f9eaae5"
    text: "@dockimbel Okay - thanks so much!"
    sent: "2016-07-23T03:32:46.313Z"
    v: 1
    author: "553a644115522ed4b3df792f"
) #(
    id: "5792e5421d2852c843764cdc"
    text: {@rhencke Good! Feel free to ask questions here or in red/help rooms. Have fun. ;-)}
    sent: "2016-07-23T03:32:18.536Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5792e50c959ee82b3e3ff29b"
    text: {Unfortunately, the Rebol/SDK doesn't seem to be available anymore. We'll see if RebolTech is willing to make it a freeware.}
    sent: "2016-07-23T03:31:24.080Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5792e4f532bd01d843a7b307"
    text: "@dockimbel That worked perfectly!  Thank you. :)"
    sent: "2016-07-23T03:31:01.841Z"
    v: 1
    author: "553a644115522ed4b3df792f"
) #(
    id: "5792e2661b9de56c0ecde982"
    text: {(I was trying to find the REBOL/SDK for sale but it looks like it may no longer be available - your way is much easier)}
    sent: "2016-07-23T03:20:06.207Z"
    v: 1
    author: "553a644115522ed4b3df792f"
) #(
    id: "5792e230b92e27447f9e84f3"
    text: {@dockimbel Ah - okay, thank you!  Red looks really interesting and it looks like a nice and lightweight/small way to have a nice language on embedded systems.  I will give that a try. :)}
    sent: "2016-07-23T03:19:12.183Z"
    v: 1
    author: "553a644115522ed4b3df792f"
) #(
    id: "5792e1b49d9e974a7f68e591"
    text: {@rhencke Hi Robert, no binary version of the toolchain for ARM targets, but you can run it from sources using the Rebol [build](http://www.rebol.com/downloads/v278/rebol-view-278-4-8.tar.gz) for Linux/ARM. You can also just cross-compile your Red code from any other OS. You can have a look to "Running Red from the sources" section from [this page](https://github.com/red/red).}
    sent: "2016-07-23T03:17:08.543Z"
    editedAt: "2016-07-23T03:18:37.981Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5792d725959ee82b3e3f8d9c"
    text: {Hey folks - I noted there's pre-compiled Red available on Mac/Windows/Linux(x86)... is there any way to the Red compiler running on Linux for ARM?}
    sent: "2016-07-23T02:32:05.875Z"
    v: 1
    author: "553a644115522ed4b3df792f"
) #(
    id: "57924ce7959ee82b3e39d7e7"
    text: {@xificurC you could also pull the lines out of the R2 versions I posted for Max, to replace `default` and `incr` if you want.}
    sent: "2016-07-22T16:42:15.927Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579247e767c448730ee1d661"
    text: {And when you see lots of imperative things in the mezzanines (e.g. `sum`), it's because they largely came from Rebol and weren't all redesigned. We also don't have HOFs yet, so consider them easy-to-understand if nothing else. :^^) I'm sure Nenad will include TCO if humanly possible (and maybe even if it isn't), so a lot of recursion concerns from Rebol go away. }
    sent: "2016-07-22T16:20:55.372Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579246e4bc636a263ed25a71"
    text: {https://gist.github.com/greggirwin/d0412f0c3d8e1ce4dfe26afc643742f1}
    sent: "2016-07-22T16:16:36.761Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579246ae67c448730ee1c657"
    text: {:point_up: [July 22, 2016 3:14 AM](https://gitter.im/red/red?at=5791e40a2efeede810c0bc4d) @xificurC , yes. Just examples here. I have a gist up with both of those mezzanines in it.}
    sent: "2016-07-22T16:15:42.600Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57920870af47689c4a65ddf1"
    text: {@dockimbel for HOF - I understand. Happy to hear you're planning to include it soon :)}
    sent: "2016-07-22T11:50:08.583Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5792083a98d0f0a54a6d1b7a"
    text: {@dockimbel thanks, that doesn't sound too bad. I usually double these estimates, so I'll expect it for mid 2018, which is still pretty reasonable :)}
    sent: "2016-07-22T11:49:14.219Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5792080c7d3b50ce77bb3f9e"
    text: {I'm awaiting GUI for linux to start playing with it, not much of a windows fan}
    sent: "2016-07-22T11:48:28.416Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5791f45d98d0f0a54a6c7012"
    text: {Many crashes in previous releases were due to missing internal features (like some typechecking) and `assert` calls in Red/System code instead of high-level Red errors.}
    sent: "2016-07-22T10:24:29.021Z"
    editedAt: "2016-07-22T10:31:36.010Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5791f3d27d3b50ce77ba85d9"
    text: "I especially love the gui-console sessions ..."
    sent: "2016-07-22T10:22:10.580Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5791f3a852b0d8e510433f53"
    text: {For many, 0.7 is going to be a 1.0 ;-) Red has really imo got one "disadvantage" - it really feels so solid (hardly remember any hard crashes), that users are demanding for more features to use it productively. Kudoz to the recent state of the implementation!}
    sent: "2016-07-22T10:21:28.714Z"
    editedAt: "2016-07-22T10:21:43.764Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5791f34980f7753649514773"
    text: {@xificurC It very much depends on how much of the planned features we want to put into 1.0. I would say, if we exclude concurreny, that a 1.0 is doable for Q2 2017 (very rough estimate).}
    sent: "2016-07-22T10:19:53.937Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5791f2dfaf47689c4a64ea34"
    text: {Our planning is already very packed. I have some little design & research work before we start implementing it, as I would like a good support for them in the compiler. Implementation part should be trivial (as shown by @greggirwin), though the compiler support might require some more efforts. In other words, it should arrive soon, in one of the 0.6.x version. ;-)}
    sent: "2016-07-22T10:18:07.944Z"
    editedAt: "2016-07-22T10:22:08.994Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5791f2af4131ddc87782e9d9"
    text: "(as in 1 year or 5)"
    sent: "2016-07-22T10:17:19.128Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5791f29b80f775364951408d"
    text: {@dockimbel another favorite question of mine - do you have an *extremely rough* estimate for 1.0? You've done a great deal of work by now so I guessed you might be able to take a guess :)}
    sent: "2016-07-22T10:16:59.651Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5791f26098d0f0a54a6c5a56"
    text: {@dockimbel so you're gonna implement them (soon tm)?}
    sent: "2016-07-22T10:16:00.180Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5791f25380f7753649513ab8"
    text: "@xificurC Certainly not, I missed them in Rebol."
    sent: "2016-07-22T10:15:47.862Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5791f2437d3b50ce77ba7371"
    text: {still, having the HOFs in the base language wouldn't really hurt anyone, would it?}
    sent: "2016-07-22T10:15:31.491Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5791f2292efeede810c147df"
    text: "@dockimbel unfortunately, yes :)"
    sent: "2016-07-22T10:15:05.986Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5791f2177d3b50ce77ba70be"
    text: {@xificurC That's the vast majority of developers out there. ;-)}
    sent: "2016-07-22T10:14:47.823Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5791e5a09d1dc62e491b15f1"
    text: {@nickantonaccio hey Nick, is it your website http://www.mycode4fun.co.uk ?}
    sent: "2016-07-22T09:21:36.488Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5791e40a2efeede810c0bc4d"
    text: {@greggirwin your `fold` example uses several things I don't seem to have defined, at the very least `default` and `incr`}
    sent: "2016-07-22T09:14:50.841Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5791e02880f775364950720f"
    text: {@dockimbel sure, for those coming from OO background}
    sent: "2016-07-22T08:58:16.668Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5791de9c7d3b50ce77b99d55"
    text: {@xificurC Agreed about the higher expresivenesss of HOF, though, they also require more efforts to understand for beginners, or people not used to the functional mindset.}
    sent: "2016-07-22T08:51:40.604Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5791dcc298d0f0a54a6b66e4"
    text: {@dockimbel I see. I saw some discussions here from a day or two ago about blocks vs. functions and the (no-)need of HOFs in red, although I fail to see what would be a more concise way to write such things. apply, fold/reduce, map, filter, extract, these are all very expressive HOFs}
    sent: "2016-07-22T08:43:46.820Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5791da5498d0f0a54a6b4c37"
    text: {@xificurC HOF were never standardized in Rebol, so not part of the runtime library. Though, defining `apply` would be a one-liner.}
    sent: "2016-07-22T08:33:24.169Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5791d75252b0d8e510420966"
    text: {is this really the way to write a `sum` function? `sum: func [a [block!] /local x] [x: 0  forall a [x: x + a/1]  x]` (taken from rosetta code's REBOL solution). It's rather wordy compared to a lispy `(apply + lst)`}
    sent: "2016-07-22T08:20:34.316Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "579199584131ddc8777f052b"
    text: {I will say, pending Doc's rationale, that if it means I am more encumbered in order to make the runtime's life easier, I will gladly buy it a beer if it steps up and does the extra work. :^^)}
    sent: "2016-07-22T03:56:08.182Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579198532efeede810bd7d95"
    text: {I'm not sure what makes your example tricky. But as I said, we can make arguments either way.^/```^/files: read %.^/repeat i ct: length? files [[copy-file ...]  print [to percent! i / ct 'done]]^/```^/I don't think it make life easier just for beginners, but YMMV.}
    sent: "2016-07-22T03:51:47.500Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57918a3f98d0f0a54a684875"
    text: { Experienced beginners will adapt.   Absolute beginners don't know anything different, so they will learn that way.}
    sent: "2016-07-22T02:51:43.366Z"
    v: 1
    author: "57369493c43b8c601972d80b"
) #(
    id: "579189d698d0f0a54a6847e0"
    text: {Even for beginners, things can be tricky. For example, '''font-size 15 / 2'''}
    sent: "2016-07-22T02:49:58.004Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5791895b80f77536494cfdfe"
    text: {makes life easier for beginners but will cause headaches for somebody trying to use Red at the low level end of the spectrum. It will also make it more cumbersome for the runtime when interfacing with OS functions (eg View).}
    sent: "2016-07-22T02:47:55.094Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57918836af47689c4a609eb2"
    text: {I feel that automatic conversion of integers to float }
    sent: "2016-07-22T02:43:02.105Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5791714252b0d8e5103de4bc"
    text: {Last question first: Yes.   Rewording my question: "Why wouldn't you?"^/^/First question, though it isn't bigger IMO ;^^): Promote to what allows the most accurate and useful result in the majority of use cases. I'll override or do something else if that's not what I want.^/^/Counter-arguments can be made in either direction. ^/^/I have a guess about the rationale, but I'll wait to see what Nenad says.}
    sent: "2016-07-22T01:05:06.564Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5791637898d0f0a54a66a3e7"
    text: {Perhaps auto-promote is the wrong phrase. Is the question more should Red have full support for integer arithmetic or should it freely mix integers with binary floating point numbers? (Perhaps the question "should operations on integer values that have non-integer results return binary or decimal floating point numbers?"}
    sent: "2016-07-22T00:06:16.303Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5791627e4131ddc8777ce7dd"
    text: {@greggirwin "WRT math, what is the benefit of not auto-promoting (besides performance)?" The bigger question is what  do you auto-promote too? Big Integer?}
    sent: "2016-07-22T00:02:06.680Z"
    editedAt: "2016-07-22T00:02:48.193Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "579155384131ddc8777c51a0"
    text: {@maximvl  ask him - he's a nice guy - he's always willing to chat - and loves Red .}
    sent: "2016-07-21T23:05:28.080Z"
    v: 1
    author: "56dd7386e610378809c56852"
)#(
    id: "579150b22efeede810ba0d79"
    text: {Hi  @maximvl  its not my website, wish it was  -  and I also looked at it and its pure Red except for sound which is Rebol .... }
    sent: "2016-07-21T22:46:10.871Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "57911ddeac85f2507aef5567"
    text: {@SteeveGit thanks, I knew the expression just couldn't get the parens right :disappointed: }
    sent: "2016-07-21T19:09:18.715Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57911d782d04e05851ab78d8"
    text: {@greggirwin I guess there's a case for both sides. Someone expects "if I give 2 integers I should get an integer" and someone else "the result of a computation will be as precise as possible". The usual way I see it in languages is - strongly typed languages won't promote, dynamic languages promote.}
    sent: "2016-07-21T19:07:36.400Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5790e7a103fd1627744576b9"
    text: {@xificurC without float! conversion^/`func [a b][a/3  * b/2 > (b/3 * a/2)] `}
    sent: "2016-07-21T15:17:53.434Z"
    editedAt: "2016-07-21T15:18:36.605Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5790e13a841e619d162cd8c6"
    text: {WRT math, what is the benefit of *not* auto-promoting (besides performance)? And is that benefit worth the subtle bugs it will lead to (IMO)? If there's a good rationale, and explanation, that will need to be out there, as with operator precedence. That's confusing to new people, but it has a solid rationale behind it by reducing cognitive load. Non-promoting math, I think, will add that, because you have to keep careful track of types, or cast to ensure consistent behavior. }
    sent: "2016-07-21T14:50:34.647Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5790e08c0720fd587abb67c3"
    text: {this is the shortest definition I have for the codegolf `f: func [x][r: sort/compare x func [a b][.0 + a/3 + a/2 * b/2 > b/3] r/1/1]` but it doesn't honor the "no float" rule}
    sent: "2016-07-21T14:47:40.338Z"
    editedAt: "2016-07-21T14:47:57.243Z"
    v: 2
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5790dc7216487c5e5172f11b"
    text: {the function one I get, it receives the 2 arguments and you have to return which is less than/greater than the other. I wouldn't know how to write the above comparator function @SteeveGit sent with a block}
    sent: "2016-07-21T14:30:10.325Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5790dc24ac85f2507aeb7113"
    text: {@qtxie thanks, the example there seems rather cryptic though `sort/skip/compare a 3 [2 reverse 3]`}
    sent: "2016-07-21T14:28:52.976Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5790bba869e7f1b17e4e2caa"
    text: {@xificurC Here is the documents: http://www.rebol.com/docs/changes-2-5.html#section-72}
    sent: "2016-07-21T12:10:16.213Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5790bb672d04e05851a61a5f"
    text: {@dockimbel Hi. I see. Still I can't imagine how would a `block!` work, coming from different languages  :) How would you define a `block!` that behaves like the defined `function!` above? It takes 2 arguments and returns something, how can a `block!` take anything (or how would one refer to them)?}
    sent: "2016-07-21T12:09:11.576Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5790bb0416487c5e51710678"
    text: {@xificurC `sort/compare` with `block!` is not implemented yet.}
    sent: "2016-07-21T12:07:32.542Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5790b79e16487c5e5170dbcd"
    text: {@SteeveGit thanks for the snippet :) I wasn't sure what does `sort/compare` expect as comparator. It says it can take a `block!` as well, care to give an example?}
    sent: "2016-07-21T11:53:02.068Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5790b04e16487c5e51707376"
    text: {For the auto-promotion of number types, I would like to support it by default, but have a way to disable it when not needed. Not sure yet if/how we could achieve that.}
    sent: "2016-07-21T11:21:50.898Z"
    editedAt: "2016-07-21T11:23:21.589Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5790af790720fd587ab8df5b"
    text: {@maximvl Complete doesn't mean bug-free. ;-) I need to check with @qtxie on that one, if there's anything to change there, we should do it in 0.6.2.}
    sent: "2016-07-21T11:18:17.785Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5790ac700720fd587ab8c883"
    text: "this one https://github.com/red/red/issues/847"
    sent: "2016-07-21T11:05:20.065Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5790ac239f35137e67f5a4ec"
    text: {@dockimbel float support is complete? I remember where was a porblem with #NaNs in decimal part}
    sent: "2016-07-21T11:04:03.045Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5790abe216487c5e51703920"
    text: {@pekr python2:^/> 10 / 20 => 0^/> 10 / 20.0 => 0.5^/python3:^/> 10 / 20 => 0.5}
    sent: "2016-07-21T11:02:58.655Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57909f463d74e5a0167fc083"
    text: {Looking at repl.it , Python is like R2, Ruby like Red ...}
    sent: "2016-07-21T10:09:10.479Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57909e85dda0cff017392578"
    text: "Both approaches have their practical benefits."
    sent: "2016-07-21T10:05:57.236Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57909c933d74e5a0167fa67b"
    text: {Carl always proposed practical usage aspects, before the language purity ...}
    sent: "2016-07-21T09:57:39.187Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57909c80f05182092e3e4696"
    text: {I don’t know what is better. Both approaches have their advantages. If I have to choose, I think that Red’s behaviour is bit better than Rebol’s, even if it is not that intuitive.}
    sent: "2016-07-21T09:57:20.604Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57909c7f3d74e5a0167fa3a4"
    text: {You know - there are certain patterns. With Rebol langs, it was mostly a series and few other gotchas. I remember, that RT in the past even tried to collect gotchas, to see, how to address it. Of course you can do so via docs, education, forums. But if the thing is repeated again and again (we will see, how we are going to do here), then we should consider if that is correct aproach ...}
    sent: "2016-07-21T09:57:19.458Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57909c7d4feb3a76689418a0"
    text: {When people learn Red, there is lot of thing they have to change in their way of thinking to code properly. Seriously, this math thing is a joke. It takes seconds to grasp it.  }
    sent: "2016-07-21T09:57:17.537Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57909bf1ac85f2507ae82970"
    text: {No, I don't have to ... I will try to vote for a change ...}
    sent: "2016-07-21T09:54:57.826Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57909bdc0720fd587ab83470"
    text: {You must come from academic scene, if you don't recognise, where is the confusion for end users, no? }
    sent: "2016-07-21T09:54:36.142Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57909bcb4feb3a7668941898"
    text: {So, yes it's different from other languages or even from Rebol. So what ? you have to adapt.}
    sent: "2016-07-21T09:54:19.597Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57909b81dda0cff017392552"
    text: {I don't see where the confusion is. The type of the result is controlled by the type of the first term in a math expression.}
    sent: "2016-07-21T09:53:05.108Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57909ade841e619d16298a5b"
    text: {@maximvl - what do you mean? How does Python treat that?}
    sent: "2016-07-21T09:50:22.311Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57909a84ac85f2507ae81b86"
    text: {> Red float support is still lacking. Once it will be there, you will get your result as you expected it ...^/^/AFAIK, Red float support is complete.}
    sent: "2016-07-21T09:48:52.368Z"
    editedAt: "2016-07-21T09:49:10.216Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57909a3116487c5e516f90ea"
    text: "please, don't do it as in Python"
    sent: "2016-07-21T09:47:29.124Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "579099a52d04e05851a4b4fb"
    text: {Yes ... simply put, sometimes, even if the intention is good ... it might confuse ppl, even if you put it into docs ... you know ppl and reading the docs relation :-)}
    sent: "2016-07-21T09:45:09.365Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57909960f05182092e3e464b"
    text: "I agree it’s not the most intuitive thing.^/"
    sent: "2016-07-21T09:44:00.588Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57909951ac85f2507ae80dd7"
    text: {While true, if it is going to stay that way, it is going to be another user gotcha ... }
    sent: "2016-07-21T09:43:45.096Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5790990e4feb3a766894183b"
    text: {In integer math, it IS zero. With 10 as remainder.}
    sent: "2016-07-21T09:42:38.927Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "579098cf0720fd587ab81763"
    text: {I am not sure that's intuitive and expected ... 10 / 20 simply is not zero. I did not ask it to round automatically ... so I just hope this is just temporary result ...}
    sent: "2016-07-21T09:41:35.968Z"
    editedAt: "2016-07-21T09:42:27.332Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5790983d69e7f1b17e4e29af"
    text: {@xificurC Red’s division returns same type as the numbers you used:^/```^/red>> 10 / 20^/== 0^/red>> 10.0 / 20.0^/== 0.5^/```}
    sent: "2016-07-21T09:39:09.362Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57909780dda0cff0173924df"
    text: {@xificurC ^/```lisp^/data: [["fencing" 15 85]["billiards" 60 102]["basketball" 15 119]]^/first sort/compare data func [a b][0.0 + a/3 / a/2 * b/2 > b/3]^/```^/> == ["basketball" 15 119]^/ }
    sent: "2016-07-21T09:36:00.693Z"
    editedAt: "2016-07-21T09:40:16.562Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5790967516487c5e516f680c"
    text: {... are the same operations. The second example is more "lispy", pure functional (prefix), Rebol tried to go more for readability, so there's also allowed infix form of `1 + 2`(I might not be correct in properly naming the concepts, sorry for that)}
    sent: "2016-07-21T09:31:33.570Z"
    editedAt: "2016-07-21T09:32:02.511Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5790961575045f876719733b"
    text: {In Rebol (btw - it does not work in Red, maybe a bug? @dockimbel ):^/```^/>> 1 + 2^/== 3^/>> + 1 2^/== 3^/```}
    sent: "2016-07-21T09:29:57.162Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579095b19f35137e67f4b9b2"
    text: {as for `second b / third b` not working as expected - it is related to the operators precedence in Red (Rebol), so it takes `b`, which is a block, and tries to divide it by `third b`, which is correct}
    sent: "2016-07-21T09:28:17.946Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57909541ac85f2507ae7edf0"
    text: {Red float support is still lacking. Once it will be there, you will get your result as you expected it ...}
    sent: "2016-07-21T09:26:25.689Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5790927d3d74e5a0167f1bb2"
    text: {I'm trying to work out [this code golf](http://codegolf.stackexchange.com/questions/86056/how-to-weight-loss-easily) (without worrying about the "no-floats" rule for now)}
    sent: "2016-07-21T09:14:37.912Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "5790915875045f8767194295"
    text: {with `b: ["a" 10 20]`, to calculate `10 / 20 = 0.5`, I got to `(second b) / (third b)` (without the parens it was yelling at me :( ) but that gives 0. What I got to work is `(second b) / (make float! third b)`. Is that the simplest way? }
    sent: "2016-07-21T09:09:44.104Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57908deaac85f2507ae79706"
    text: {so, are they written in Red or Rebol? are the sources open for studying?}
    sent: "2016-07-21T08:55:05.998Z"
    editedAt: "2016-07-21T08:55:24.430Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57908cdf16487c5e516efb18"
    text: {@justjenny it says they are written in Red, though I can see rebol binary in invaders game archive}
    sent: "2016-07-21T08:50:39.810Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57908cb875045f8767190337"
    text: {@justjenny hey, you have some nice apps on your website}
    sent: "2016-07-21T08:50:00.600Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "579082999f35137e67f3ed67"
    text: {OK, whole esperconsultancy.nl is down. Dropped Kaj an email ...}
    sent: "2016-07-21T08:06:49.416Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57907f7c3d74e5a0167e1ea5"
    text: "maybe"
    sent: "2016-07-21T07:53:32.238Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
) #(
    id: "57907cc63d74e5a0167dfeab"
    text: {Maybe it's temporarily down? I will try to reach Kaj via altme ...}
    sent: "2016-07-21T07:41:58.943Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57907a0c841e619d16281584"
    text: {the published work section in http://www.red-lang.org/p/contributions.html with contributions from Kaj De Vos (that is almost everything) points to a non-working site :(}
    sent: "2016-07-21T07:30:20.045Z"
    v: 1
    author: "55fbd5b60fc9f982beb110b9"
)#(
    id: "57906830ac85f2507ae5ff66"
    text: "The contribution label will help Doc. Good idea."
    sent: "2016-07-21T06:14:08.595Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5790658b841e619d16272451"
    text: {Well, with my skill level in coding, I can at least fix some typos and cosmetic stuff :-)}
    sent: "2016-07-21T06:02:51.144Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5790651d9f35137e67f2bd00"
    text: {FYI, I have started using the "status.contribution" label on Red's [issue tracker](https://github.com/red/red/issues) to mark tickets where the code could be easily contributed by the community. Take it as a chance to score some PR and learn more about Red, while helping building it. ;-)}
    sent: "2016-07-21T06:01:01.129Z"
    editedAt: "2016-07-21T06:01:11.787Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579018b22d04e058519fca54"
    text: {sorry, above post should have been in the red/gui-branch}
    sent: "2016-07-21T00:34:58.569Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "579007c675045f8767140d5c"
    text: {@pekr  music is easy to play in Red - I been using this and it works without problems - not perfect, but until we get the real thing then its ok by me - if it dont work then make it work !  http://www.mycode4fun.co.uk/red-sound-engine }
    sent: "2016-07-20T23:22:46.015Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "578ff2aa841e619d1622d176"
    text: ""
    sent: "2016-07-20T21:52:42.158Z"
    editedAt: "2016-07-20T22:00:27.071Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "578fba3216487c5e516679b4"
    text: {A quick note on the inner part of `map`, since it may not be clear how it works to those new to Red. ^/It may look like variadic (variable arity, or a func that takes a variable number of args) magic, but it's not. You can use any func that takes *up to* the number of args `map` passes it when it does^/```^/keep/only fn series/:i :i :series^/```^/The only magic here is that when `fn` is called, it will consume as many arguments as it needs (this is how Red's free-ranging evaluation works) and return its result for `keep` to consume. Any args `fn` doesn't consume are evaluated but then just ignored and not used. If your func (`fn`) takes *more* args than expected, the end of the `repeat` body block is hit and you will get an error that your func didn't get enough args.}
    sent: "2016-07-20T17:51:46.870Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb59e75045f876710388d"
    text: {```^/collect: :reb-collect^/^/accumulate: func [^/    "Combines the results of a function applied to each value in a series."^/    series [series! map!]^/    fn     [any-function!] "Must take RESULT and INPUT args, and return RESULT"^/    /with "Use a different starting value than the first in the series"^/        value "Starting value; used as accumulator"^/][^/    if 1 = length? series [return series/1]^/    value: any [value first series]^/    if not with [series skip series 1]^/    ;assert 2 = length? words-of :fn^/    foreach item series [value: fn :value :item]^/]^/blk: [1 2 3 4 5 6 7 8 9 10]^/mean-red: func [res val][^/^-res/sum: res/sum + val^/^-res/count: res/count + 1^/^-res^/]^/accumulate/with blk :mean-red [sum 0 count 0]^/^/filter: func [^/    "Returns two blocks: items that pass the test, and those that don't."^/    series [series!]^/    test [any-function!] "Test (predicate) to perform on each value; must take one arg"^/    /only "Return a single block of values that pass the test"^/    /local result^/][^/    ;TBD: Is it worth optimizing to avoid collecting values we won't need to return?^/    result: reduce [copy [] copy []]^/    foreach value series [^/        append/only pick result make logic! test :value :value^/    ]^/    either only [result/1][result]^/]^/filter [1 2 3 4 5 6 7] :even?^/filter [1 2 3 4 5 6 7] :odd?^/filter/only [1 2 3 4 5 6 7] :odd?^/filter [/only /dup 3] :refinement?^/^/map: func [^/    "Evaluates a function for all values in a series and returns the results."^/    series [series!]^/    fn [any-function!] "Function to perform on each value; called with value, index, series, [? and size ?] args"^/    ;/skip "Treat the series as fixed size records"^/    ;    size [integer!]^/][^/    collect [^/        repeat i length? series [   ; use FORSKIP if we want to support /SKIP.^/            keep/only fn series/:i :i :series ;:size^/        ]^/    ]^/]^/res: map [1 2 3 a b c #d #e #f] :form^/res: map [1 2 3 a b c #d #e #f] func [v i] [reduce [i v]]^/res: map [1 2 3 a b c #d #e #f] func [v i s] [reduce [i v s]]^/res: map "Hello World!" func [v i s] [pick s i]^/```}
    sent: "2016-07-20T17:32:14.410Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb58f75045f876710386a"
    text: "Too late. :^^)"
    sent: "2016-07-20T17:31:59.815Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb48175045f8767102488"
    text: "(no need to convert to R2)"
    sent: "2016-07-20T17:27:29.357Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578fb4799f35137e67ebc755"
    text: {its ok, I'll look at them... map is the one I'm most interested in looking at.}
    sent: "2016-07-20T17:27:21.839Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578fb3e2841e619d161f996d"
    text: {`function` spec is different in R2 [spec vars body], but I could test and port real quick if you want to play.}
    sent: "2016-07-20T17:24:50.356Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb38675045f87671016da"
    text: "do these work in R2?"
    sent: "2016-07-20T17:23:18.543Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578fb37c9f35137e67ebb72e"
    text: "Just quick examples."
    sent: "2016-07-20T17:23:08.866Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb36a841e619d161f92ca"
    text: {```^/fold: accumulate: function [^/^-"Combines the results of a function applied to each value in a series."^/^-series [series! map!]^/^-fn     [any-function!] "Must take RESULT and INPUT args, and return RESULT"^/^-/with "Use a different starting value than the first in the series"^/^-^-value "Starting value; used as accumulator"^/][^/^-if 1 = length? series [return series/1]^/^-default value first series^/^-if not with [incr series]^/^-;assert 2 = length? words-of :fn^/^-foreach item series [value: fn :value :item]^/]^/filter: function [^/^-"Returns two blocks: items that pass the test, and those that don't."^/^-series [series!]^/^-test [any-function!] "Test (predicate) to perform on each value; must take one arg"^/^-;/only "Return a single block of values that pass the test"^/][^/^-;TBD: Is it worth optimizing to avoid collecting values we won't need to return?^/^-result: reduce [copy [] copy []]^/^-foreach value series [^/^-^-append/only pick result make logic! test :value :value^/^-]^/^-either only [result/1][result]^/]^/map: func [^/^-"Evaluates a function for all values in a series and returns the results."^/^-series [series!]^/^-fn [any-function!] "Function to perform on each value; called with value, index, series, [? and size ?] args"^/^-;/skip "Treat the series as fixed size records"^/^-;^-size [integer!]^/][^/^-collect [^/^-^-repeat i length? series [   ; use FORSKIP if we want to support /SKIP.^/^-^-^-keep/only fn series/:i :i :series ;:size^/^-^-]^/^-]^/]^/```}
    sent: "2016-07-20T17:22:50.466Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb34b75045f876710160a"
    text: {I understand the idea of baiting lispers, but maybe a better idea is to have an HOF tutorial page, which shows them how to build the funcs and why they don't really need to anymore... with comparative Redbolish equivalents.}
    sent: "2016-07-20T17:22:19.696Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578fb2b4841e619d161f89f0"
    text: {we don't use statements and compilation, we actually bind on the fly.  which is the equivalent.   The only argument I can see for real HOF may be speed after a compilation phase, but if we can detect that a block is static, it can be compiled and converted to an anonymous function, so that doesn't even hold with a jit compiler in place.}
    sent: "2016-07-20T17:19:48.073Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578fb27d841e619d161f849e"
    text: {That's my Reddish version. The real HOF versions take funcs. Not that you and I would every use them. ;^^)}
    sent: "2016-07-20T17:18:53.538Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb23416487c5e51660ac4"
    text: {yep, but the detail here is that you are using DO, not a function.  its like with OOP.   using Rebol and trying to apply OOP paradigms to it is pointless & painful.  when I look at a lot of examples on why they have HOF its that they can't have it like we do.}
    sent: "2016-07-20T17:17:40.492Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578fb16d16487c5e5165fbd6"
    text: {We can add some nice features, more Reddish, but basic versions are all just a few lines long.}
    sent: "2016-07-20T17:14:21.267Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb0fc75045f87670ff3de"
    text: {I posted a `map-each` before. The body is basically^/```^/ collect [foreach :word data [keep/only do body]]^/```^/So it's not like we're bloating Red too much with some of these things. ;^^)}
    sent: "2016-07-20T17:12:28.561Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb0730720fd587aadd19b"
    text: {I also think this kind of thing could make for great blog articles. "Here's how..."}
    sent: "2016-07-20T17:10:11.411Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578fb0200720fd587aadca9a"
    text: {I'm anxious to hear Doc's thoughts on this. Mine are just a few mezzanines, with the design being the trickier part. So nothing new in the language itself. With just `map, filter, accumulate` we can let the functionally minded people work how they want without affecting much else.^/I'll also argue, at times, to provide examples, even if not standard built-ins, because people will do these things, whether we want them to or not, and giving them a good starting point may at least keep things on a more consistent track.}
    sent: "2016-07-20T17:08:48.002Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578faf1d75045f87670fdea2"
    text: {Max, I mostly agree. But if you've ever used `collect+foreach` you've effectively used `map`, right? And if you've used `remove-each` you've done the inverse of `filter`. I'm totally with you that blocks are nicer than lambdas in most cases.  That said, functional is widely accepted now, even if only a few people are really good at it. From a marketing standpoint, having those things there will be good, and show that Red can do everything they can do.^/It's also like my argument for `for`. Once they're in, they see that `loop` and `repeat` are nicer when you just need int-based loops going forward. }
    sent: "2016-07-20T17:04:29.967Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578f8e940720fd587aabbba1"
    text: {this being said, allowing function! arguments and returning them is useful, and that's all we need for HOF.   I don't see what needs to be added to the language?}
    sent: "2016-07-20T14:45:40.225Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578f8a1916487c5e516390b2"
    text: {the fact that we can build/exec blocks so transparently in Rebol makes HOF redundant.  most times, we build the func inline anyways... so its not a big improvement (just look at the R2 sort documentation example http://www.rebol.com/docs/words/wsort.html )}
    sent: "2016-07-20T14:26:33.371Z"
    editedAt: "2016-07-20T14:26:57.304Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578f895b2d04e05851988343"
    text: {in R2 `sort` allows functions and it would be simpler if we could use a do block instead.   I don't know how the current block comparator is supposed to work, but it's not documented AFAIK.}
    sent: "2016-07-20T14:23:23.175Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578f88030720fd587aab5706"
    text: {don't see the need for much HOF in Red/Rebol.  frankly, I can't see when I'd have used them.}
    sent: "2016-07-20T14:17:39.915Z"
    editedAt: "2016-07-20T14:18:03.209Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578f4e5075045f87670a7c6a"
    text: {Not sure. I moved away from the display of Gitter on the cell phone using a browser. Clicking in the edit text area causes a post, so you can't fix typos for e.g. There is a room for Gitter feedback, so you can report it. I downloaded Android native Gitter app, works better ...}
    sent: "2016-07-20T10:11:28.218Z"
    editedAt: "2016-07-20T10:11:45.270Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578f4b5416487c5e5160b0ed"
    text: {When showing this page (https://gitter.im/red/red) on a tablet the left sidebar can't be hidden and is covering a part of the text. Is this a known issue?}
    sent: "2016-07-20T09:58:44.150Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578f377b2d04e0585194df03"
    text: {ah, I really like the comment to the latest blog, which appraises Red, and part of it, could be a marketing sub-claim for Red: "from the metal to the meta" :-)}
    sent: "2016-07-20T08:34:03.473Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578efa0b9f35137e67e2c456"
    text: {Right now it seems your time is all spent keeping me behind the curve. I was ready to submit a ticket on something until I figured out `tag!` support was in place and working, which I had forgotten about.}
    sent: "2016-07-20T04:11:55.396Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578ef993ac85f2507ad5ab00"
    text: "Great! Thanks."
    sent: "2016-07-20T04:09:55.995Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578ef85875045f876707017f"
    text: {@greggirwin I already have a rought idea about how HOF could be best supported, I will write a wiki entry about the plans as soon as I find time for that.}
    sent: "2016-07-20T04:04:40.037Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ef7dd3d74e5a0166c51dc"
    text: {@moliad @Dobeash @greggirwin Same here, returning the series is the most helpful behavior for `remove-each` as well as for all other series iterators.}
    sent: "2016-07-20T04:02:37.476Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ec6a42d04e058519030f4"
    text: {And for those thinking about HOFs, we have the standard `*-each` approach in Rebol, with a body block, which is slightly different than the purely functional approach. Very convenient IMO, but we can do the functional approach too. There may be times where is a better fit. If we have both as standard, but with different names (e.g. `map` vs `collect-each`), will it be better or worse?^/Once they get 0.7.0 out, maybe Nenad will have time to take a (short) breath and give us his thoughts on that.}
    sent: "2016-07-20T00:32:36.584Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578ec3b8841e619d1613a381"
    text: {And in looking at `keep-each` I realized my old `remove-each` mezz matched R2's behavior, and now that we have a native like R3 my tests don't work. We'll see what Doc says.}
    sent: "2016-07-20T00:20:08.351Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578ec340841e619d16139d9c"
    text: {@pekr, I'll add `keep-each` to my gist, but I have some notes that it needs to be part of the bigger HOF design, WRT naming and behavior. The standard name for that behavior is `filter`,  but when I've used that name in the past, I always have to stop and think "is it filtering things *in* or *out*?" Playing with some ideas there, which I'll post at some point.}
    sent: "2016-07-20T00:18:08.441Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578eacb20720fd587aa1f039"
    text: {@moliad agree with you totally on remove-each. I use code like `foreach file remove-each file read %. [%.xlsx <> suffix? file] [...]` all over the place and it's more Rebol-like than dealing with a returned count (which I've never had a need for).}
    sent: "2016-07-19T22:41:54.291Z"
    v: 1
    author: "5580a11215522ed4b3e203d9"
) #(
    id: "578ea6cf841e619d161245ac"
    text: {@dockimbel  I forgot to mention above that I'm referring to the clock demo.}
    sent: "2016-07-19T22:16:47.996Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "578ea69c0720fd587aa1a550"
    text: {@dockimbel, it could be just my monitor/font set up but the area is just a tad too narrow and I have to use the slider to see the last source characters.  source: area #13181E 420x300 fixes it on my side. (410 to 420 for the x value.) That gif really serves as a great tutorial, btw. Keep up the incredible work.}
    sent: "2016-07-19T22:15:56.839Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "578e9b3375045f87670352f7"
    text: {@SteeveGit , of course you can measure the length as well. Much more efficient. ^/@moliad +1^/@pekr  I have `keep-each` already. Just need time to do more cleaning and add to my gist dump.}
    sent: "2016-07-19T21:27:15.260Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e811916487c5e51581933"
    text: {Hoping to grow the team in the coming weeks, that will help tremendously.}
    sent: "2016-07-19T19:35:53.400Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578e80c5841e619d16105e71"
    text: {I should be much more involved than I am right now.  am still doing a lot of consolidation work on current products to allow me to move to Red.  Can't move on until its robust enough to live on its own for months without being worked on.  It also doesn't help that we have many contracts which force me to upgrade the system continually right now.  I did a few little things with it, have looked into the datatype system too.}
    sent: "2016-07-19T19:34:29.693Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578e7e8a841e619d16103e12"
    text: "@moliad  - so what's your progress with Red?"
    sent: "2016-07-19T19:24:58.707Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e7e6f75045f876701e492"
    text: {I suggested keep-each, and IIRC it was suggested just to negate a condition :-) Maybe some wrapper could be build around remove-each then? :-)}
    sent: "2016-07-19T19:24:31.132Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e7e39ac85f2507ad0aa31"
    text: {note that for readability, a keep-each with the same semantics, would often be preferred.}
    sent: "2016-07-19T19:23:37.777Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578e7de2841e619d16103473"
    text: {I often use remove-each inline with very simple conditions, like datatype filtering or value range ...  `append results remove-each item copy data [not integer? item]`  it also reads very well.  the number of removed items is something I've never had to do in Rebol.}
    sent: "2016-07-19T19:22:10.963Z"
    editedAt: "2016-07-19T19:22:44.147Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578e7d2416487c5e5157eb1a"
    text: {:point_up: [July 19, 2016 11:19 AM](https://gitter.im/red/red?at=578e4507841e619d160c8f20)Gregg I hate this change from R3.  returning the series at its head is much more useful as we rarely deal in lengths and indices when compared to passing a long series references in Rebol.}
    sent: "2016-07-19T19:19:00.086Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578e7cf275045f876701d251"
    text: {@rgchris Also nice to see you. Your form-date is still being relied on in just about everything I "do". Much respect and thanks.   @dockimbel I was reading your reference to the gif editor and wondering what you would need one for. Then I saw the clock demo and wow! BTW, the last time I had to edit gifs was back in the Amiga days. :-) Hard manual work If I recall correctly. That little hex value example is pretty cool as well; especially the alpha value. Thanks for the progress.}
    sent: "2016-07-19T19:18:10.838Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
)#(
    id: "578e6f8f33b25984576ad6a0"
    text: {@greggirwin copy the serie before to count ? what for ? measure the length before and after is good enough, or did I miss something ?.}
    sent: "2016-07-19T18:21:03.045Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578e66302d04e058518b8999"
    text: {Of course it is. You just have to copy the series first if you know you want the count. }
    sent: "2016-07-19T17:41:04.686Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e64bc9f35137e67dbc39d"
    text: {Should be enough :-) Well, we could be like the BeOS and introduce a query system to query blocks, something like SQL :-)}
    sent: "2016-07-19T17:34:52.502Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e54ac0720fd587a9d61be"
    text: {@greggirwin Isn't it in most cases, as easy as just taking the difference in length of the series before and after the removal enough to get the count?}
    sent: "2016-07-19T16:26:20.365Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578e4507841e619d160c8f20"
    text: {I know R3 changed `remove-each` to return the removal count, but I wonder if that's the most useful behavior. You can no longer chain the result. That may be OK for enforcing shorter expressions (though you can always predefine the body), and I know there is currently no other way to get the removal count.^/One option would be a `/count` refinement, though that might be confusing. It may look like you *only* want to count matching items, rather than removing them and returning the count. Another option is a `count-each` function.^/```^/count-each: function [^/^-"Evaluates body for each value(s) in a series, returning a count of true results."^/^-'word [word!] "Word, or words, to set on each iteration"^/^-data [block!] ^/^-body [block!]^/][^/^-n: 0^/^-foreach :word data [if do body [n: n + 1]]^/^-n^/]^/;count-each a [1 2 3] [odd? a]^/```^/A separate func means processing the series twice if you want both results. I don't think returning both the series and count, even though the result could be destructured, is a good idea, because it still complicates chaining.}
    sent: "2016-07-19T15:19:35.335Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e3b7b9f35137e67d9448e"
    text: ""
    sent: "2016-07-19T14:38:51.617Z"
    editedAt: "2016-07-19T14:42:22.830Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e31f69f35137e67d8a06f"
    text: {@WiseGenius  Only a small part of construction syntax is currently implemented. Some design decisions are required for a large part of the datatype before implementing the full support for that.}
    sent: "2016-07-19T13:58:14.849Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578e28bc4786ff0a48ae727e"
    text: {The original patch to Google Code was back in Feb 2015 so fingers crossed this gets looked at quicker :)  https://code.google.com/archive/p/google-code-prettify/issues/367}
    sent: "2016-07-19T13:18:52.017Z"
    v: 1
    author: "5596737415522ed4b3e34e54"
) #(
    id: "578e27f3aaac398b0df6a0f3"
    text: {re: Google Code Prettify - Now this has moved from Google code to Github I've created a PR for the Rebol/Red grammar -  https://github.com/google/code-prettify/pull/445}
    sent: "2016-07-19T13:15:31.545Z"
    v: 1
    author: "5596737415522ed4b3e34e54"
) #(
    id: "578e257b0720fd587a9a9717"
    text: {Nice demo.  He said, in a voice that doesn't come across on a text screen.  NICE DEMO!  Go Doc Go!  And it works in Wine, so yayys three times.}
    sent: "2016-07-19T13:04:59.104Z"
    v: 1
    author: "57008602187bb6f0eadd97eb"
) #(
    id: "578e207d9721a7ad71096f1c"
    text: {These work:^/```^/^-#[action!]^/^-#[bitset!]^/^-#[block!]^/^-#[char!]^/^-#[function!]^/^-#[get-path!]^/^-#[get-word!]^/^-#[integer!]^/^-#[issue!]^/^-#[lit-path!]^/^-#[lit-word!]^/^-#[logic!]^/^-#[native!]^/^-#[none!]^/^-#[op!]^/^-#[paren!]^/^-#[path!]^/^-#[refinement!]^/^-#[routine!]^/^-#[set-path!]^/^-#[set-word!]^/^-#[string!]^/^-#[word!]^/```^/^/These all give `*** Syntax Error: invalid issue!`:^/```^/^-#[binary!]^/^-#[datatype!]^/^-#[email!]^/^-#[error!]^/^-#[event!]^/^-#[file!]^/^-#[float!]^/^-#[hash!]^/^-#[image!]^/^-#[map!]^/^-#[object!]^/^-#[pair!]^/^-#[percent!]^/^-#[point!]^/^-#[tag!]^/^-#[time!]^/^-#[tuple!]^/^-#[typeset!]^/^-#[unset!]^/^-#[url!]^/^-#[vector!]^/```^/^/@dockimbel Was this already known?}
    sent: "2016-07-19T12:43:41.063Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "578e1b489721a7ad71096bac"
    text: {:point_up: [July 19, 2016 3:33 AM](https://gitter.im/red/red?at=578d91890720fd587a9428c9) Great news!  Just shout if you get any issues.}
    sent: "2016-07-19T12:21:28.668Z"
    v: 1
    author: "5596737415522ed4b3e34e54"
) #(
    id: "578d91890720fd587a9428c9"
    text: {@draegtun Thank you, seems to work now. Will try to integrate it with our blog template.}
    sent: "2016-07-19T02:33:45.036Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578d2d99aaac398b0df654ec"
    text: {@dockimbel  re: Google Code Prettify -  I've updated http://draegtun.github.io/PrettifyRebol/ to use new CDNs and the examples now all work correctly.  Can you see any differences in what you've done?}
    sent: "2016-07-18T19:27:21.567Z"
    v: 1
    author: "5596737415522ed4b3e34e54"
) #(
    id: "578d125b16487c5e514537c8"
    text: "Me too. "
    sent: "2016-07-18T17:31:07.659Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d12352d04e058517ad6b0"
    text: {@greggirwin Had a lot of nice features for sure : )  That project certainly shaped a lot of my conceptions of how a more complex GUI system could be organised.}
    sent: "2016-07-18T17:30:29.799Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578d03bcac85f2507abcfa17"
    text: "I can't keep up!"
    sent: "2016-07-18T16:28:44.813Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578cfda70720fd587a8cc540"
    text: {Effect pipeline is scheduled for some of next versions IIRC}
    sent: "2016-07-18T16:02:47.574Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578cfcfa841e619d16fc9322"
    text: {Or build them on `base`. Yeah, we could probably do some stuff. Not sure if an `extend` effect is in the queue for faces. I always liked that, and the way you used tiny images with it.}
    sent: "2016-07-18T15:59:54.098Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578cfc869f35137e67c9e1ba"
    text: {Hmmm, I guess the styles may not port well with native widgets in use. Have to wait until someone writes an in-Red portable GUI. :^^)}
    sent: "2016-07-18T15:57:58.132Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578cfc29ac85f2507abc7029"
    text: {Hey Chris! Nice to see you.  I still have all the ASAP stuff we did years ago, as one of the more complex GUIs I worked on in R2. Maybe we can port some of your styles. They were gorgeous. Anyway, I like that Red is starting out simple, like R2. Small scripts are as important as large, and the way it works now is a good fit there, IMO. For PitL, we all know more needs to be done. I hope we'll get more people experimenting and posting ideas of how it might all work.}
    sent: "2016-07-18T15:56:25.019Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578ce81d3d74e5a016516a4a"
    text: {@pekr we mortals call things as we see them—I am genuinely impressed with directions Red takes in some areas. I see the (similarly impressive) example above and I note a pattern that I struggled with in Rebol 2. I'm sure the Red v1 answers will be more elegant than I can envisage, but you'll forgive me for asking when my antennae twitch a little.}
    sent: "2016-07-18T14:30:53.230Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578ce6c5d11cd2881248d4aa"
    text: {That stupid question remark was towards some of mine, not Chris' :-)}
    sent: "2016-07-18T14:25:09.590Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578ce6b03c5129720e54bde7"
    text: {Well, the progress is terrific. We should not feel offended by any claims, I think everyone can see to vital progress Red is making ;-) And it will always be like that - ppl will compare - here with R2, there with R3, elsewhere to Lisp, and ask even stupid questions ....}
    sent: "2016-07-18T14:24:48.044Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578ce613e4375c921208f49f"
    text: {Or perhaps you shouldn't read my observations as being antagonistic. I'm only expressing a concern as someone that would like to use Red.}
    sent: "2016-07-18T14:22:11.787Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578ce5ad3cb52e8b24e4122b"
    text: "Maybe you should reformulate your statement then."
    sent: "2016-07-18T14:20:29.404Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ce5933c5129720e54b373"
    text: "No, perhaps I've been misunderstood here."
    sent: "2016-07-18T14:20:03.002Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578ce561196179690e040ba5"
    text: {You mean "offering your final statements on Red"?}
    sent: "2016-07-18T14:19:13.662Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ce5453c5129720e54ad09"
    text: {@dockimbel I hope not! Just offering my observation is all...}
    sent: "2016-07-18T14:18:45.534Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578ce5083c5129720e54a54f"
    text: {@rgchris So, Red features are ending at 0.6.1? That's the final version according to you?}
    sent: "2016-07-18T14:17:44.553Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ce4cf8423d084245c6086"
    text: {Found `thing` being global in Rebol's VID to be short-sighted.}
    sent: "2016-07-18T14:16:47.192Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578ce4cd196179690e040251"
    text: {@rgchris You know that you could trivially write a `wrap` function that you could use as: `foo: wrap [view [thing: field]] to achieve that, or even replace `view` function if you really can't live with the default behavior?}
    sent: "2016-07-18T14:16:45.715Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ce45b3cb52e8b24e3ff23"
    text: "@pekr I guess that is what I meant : )"
    sent: "2016-07-18T14:14:51.562Z"
    editedAt: "2016-07-18T14:14:59.490Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578ce42c9f79ee4f2bdc196e"
    text: {@dockimbel Again not being prescriptive, but some equivalent of: `foo: view [thing: field]` being accessed by `foo/thing/value` or `foo/get 'thing`.}
    sent: "2016-07-18T14:14:04.274Z"
    editedAt: "2016-07-18T14:16:05.925Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578ce407196179690e03fcb9"
    text: {@rgchris Red changed to "widget local", sorry if I confuse it, but we reverted it back ... maybe you meant to bind it to top Window?}
    sent: "2016-07-18T14:13:27.072Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578ce3c13c5129720e549416"
    text: {@rgchris What is the "base GUI object"?}
    sent: "2016-07-18T14:12:17.793Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ce36ae4375c921208c679"
    text: {@dockimbel An observation about values in general in the GUI dialect (albeit mainly experience through Rebol's VID, not Red's) is that it'd be handy if they were somehow bound by default to the base GUI object and not global. Not a specific prescription, but I always found the 'global' default to be unmanageable in larger projects and binding to be a hassle with the general/dialect mix.}
    sent: "2016-07-18T14:10:50.614Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578ce31e196179690e03f20a"
    text: {Because `attempt` is already a "safe" version of do.}
    sent: "2016-07-18T14:09:34.616Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ce2fd8423d084245c4c73"
    text: {Btw - just a nitpicking, but `attempt/safer`... why not just `attempt/safe`?}
    sent: "2016-07-18T14:09:01.033Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578ce2b73c5129720e5487f1"
    text: {It's exactly the same concept as set-words in Parse, so it should feel intuitive for experienced Rebol/Red programmers.}
    sent: "2016-07-18T14:07:51.136Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ce27c914c51592b400c67"
    text: {OK, thanks .... it was not obvious looking into source, other than that, pretty clear ...}
    sent: "2016-07-18T14:06:52.123Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578ce2458423d084245c444d"
    text: {@pekr It's [documented](http://doc.red-lang.org/v/v0.6.0/gui/Draw.html#source-position) since 0.6.0...}
    sent: "2016-07-18T14:05:57.522Z"
    editedAt: "2016-07-18T14:06:43.549Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ce1a43c5129720e5475b3"
    text: {@rgchris Yes, though, it should be trivial to bind all that to an object context.}
    sent: "2016-07-18T14:03:16.757Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ce11e3c5129720e54715e"
    text: {Was just confused by hour/2, etc. - not self explanatory .... seems that draw variable refers to a draw block, hence in the case of hour, it is 30.}
    sent: "2016-07-18T14:01:02.366Z"
    editedAt: "2016-07-18T14:01:18.371Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578ce0979f79ee4f2bdbf6db"
    text: "Cool demo. it just works :)"
    sent: "2016-07-18T13:58:47.335Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "578cdae3914c51592b3f99a0"
    text: "Most probabyl yes, tried it here ..."
    sent: "2016-07-18T13:34:27.290Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578cd9e93cb52e8b24e36774"
    text: "Are the `hour`, `min`, `sec` words global?"
    sent: "2016-07-18T13:30:17.043Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "578cd555196179690e0339c8"
    text: "heh, cool :-)"
    sent: "2016-07-18T13:10:45.361Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578cd4b6914c51592b3f44e4"
    text: {https://twitter.com/red_lang/status/755025857572331521}
    sent: "2016-07-18T13:08:06.789Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578cd05a9f79ee4f2bdaff99"
    text: {IIRC, Doc plans to introduce some "debugging hooks" in one of the next versions ....}
    sent: "2016-07-18T12:49:30.868Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "578ccf8f3c5129720e538e39"
    text: {@tanstaaf1 @greggirwin @pekr - Thanks for your view on this matter. It is somewhat frustrating when you talk to fellow devs about the power and uniqueness of Redbol. I mean, being able to write a compiler in Rebol - a language which was developed almost 20 years ago - speaks volumes about its unique abilities. I was wondering, after having read Ladislavs' and @dockimbel advanced articles abour the inner workings of Redbol, whether it is possible to use breakpoints and probe etc. to build a tool with which anybody can delve into the deeper stuff. For instance, keeping a log of chances to each word, even if it issues an error. This will help me a lot. I can use the entries as a basis to tap Docs' and others'  minds.^/ Wouldn't want to miss an opportunity like this. Just a thought, This can serve as a future reference of where people struggle and workarounds.  Even posting the current nuggets posted on gitter  there, and maybe discussing it futher.^/^/All this on a public accessible site - like an tuned down IDE of sorts.}
    sent: "2016-07-18T12:46:07.799Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "578ccf18914c51592b3f0bb6"
    text: {Ah, ok ... I never changed gif of others, i just don't know ...}
    sent: "2016-07-18T12:44:08.856Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578cce23d11cd28812477937"
    text: {@DarioX1973_twitter "Proper job" = flawless. Thanks for the link, but it's not what I'm looking for, I said "editing" not "building".}
    sent: "2016-07-18T12:40:03.048Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578ccd98d11cd288124772a6"
    text: {However, i would use Gimp as here: ^/https://www.youtube.com/watch?v=mqprw6JMuFw^/}
    sent: "2016-07-18T12:37:44.971Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578cca3d914c51592b3ed864"
    text: {What do you mean with "proper job" ?}
    sent: "2016-07-18T12:23:25.390Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578cc85cd11cd2881247428f"
    text: {Does anyone know about a good free tool on Windows for editing GIF anims? I just try 3-4 ones, and none is able to do a proper job...}
    sent: "2016-07-18T12:15:24.351Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578c8ffa9f79ee4f2bd85044"
    text: ""
    sent: "2016-07-18T08:14:50.104Z"
    editedAt: "2016-07-18T08:15:01.483Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "578c8ff8e4375c921204f6a8"
    text: {A small problem on GUI Console's About window:^/^/[![blob](https://files.gitter.im/red/red/dVb4/thumb/blob.png)](https://files.gitter.im/red/red/dVb4/blob)}
    sent: "2016-07-18T08:14:48.229Z"
    editedAt: "2016-07-18T08:15:10.962Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "578c8c503cb52e8b24dff93b"
    text: {As for the hex color support - you need to download latest releases. It is a post 0.6.1 ....}
    sent: "2016-07-18T07:59:12.752Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578c883a3c5129720e506fad"
    text: {I would refer to the hex values in VID. 1) how can i link to a previous message in gitter (to have the little hand with on finger up)? 2) in wich release or Red there is hex colors support? i have 0.6.1 ...}
    sent: "2016-07-18T07:41:46.464Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578c4cccd11cd28812427a5c"
    text: {I would like to use a code colorizer for the blog posts on red-lang.org. This Rebol [script](https://github.com/rgchris/PrettifyRebol/) should work, but it's broken. Could anyone with some spare time have a look at it and try to fix it? I changed the outdated Google Prettifier CSS urls, but it doesn't seem to be enough.}
    sent: "2016-07-18T03:28:12.624Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578b9953e4375c9212fbddb4"
    text: {there were various security issues with the use of alias in R2, it would require a more restrictive use case.}
    sent: "2016-07-17T14:42:27.583Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578b8f56e4375c9212fb839d"
    text: {@greggirwin Ditto. I would like to make a Chinese Localization of it, if alias is supported after v 1.0. }
    sent: "2016-07-17T13:59:50.767Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "578b82873c5129720e466b52"
    text: {@JenniferLee520, I know I thought alias was a cool idea, and expected to use it for localization, but never did. }
    sent: "2016-07-17T13:05:11.230Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b6ba3196179690ef523f7"
    text: "ok, thanks ..."
    sent: "2016-07-17T11:27:31.473Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578b6b983cb52e8b24d48ecc"
    text: "@pekr Fixed."
    sent: "2016-07-17T11:27:20.442Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578b69733c5129720e458ede"
    text: {@dockimbel A regression with latest hex-color additions? Just wanted to continue with my news-scroller and it errors out. Narrowed it down to:^/```^/red>> view [base 100x100 green draw [text 0x0 "test"]]^/*** Script Error: PARSE - matching by datatype not supported for any-string! input^/*** Where: parse^/```}
    sent: "2016-07-17T11:18:11.499Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578b68428423d084244d1201"
    text: {Alias was moved from R3, because it caused problems in implementation (according to Carl), and also because not many people were using it.}
    sent: "2016-07-17T11:13:06.125Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "578b4187914c51592b2fb872"
    text: "IIRC, alias was removed from R3 for some reason?"
    sent: "2016-07-17T08:27:51.687Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578b290fd11cd2881237c0ed"
    text: {Type interrogation won't know about it though. Can't see an easy way around that.}
    sent: "2016-07-17T06:43:27.704Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b2892e4375c9212f829db"
    text: {It depends on whether internals make this safe. Amazingly, it works for func specs too. Nenad, you amaze me. ^/If it's just a core set of things to alias, it could be `alias-type: func [old [word!] new [word!]][...]`}
    sent: "2016-07-17T06:41:22.706Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b27c2d11cd2881237b43c"
    text: {if that ends up being flawless, it would make dialect rules even more (semantically) readable}
    sent: "2016-07-17T06:37:54.221Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "578b26ae3c5129720e4370da"
    text: {R2 has an `alias` function, but it's not guaranteed to make it into Red. Even without it, we can probably go a long way.  Have to think of all the places to address, and there will still likely be gaps.^/```^/hashtag!: :issue!^/hashtag?: :issue?^/^/hashtag? #test^/to hashtag! "test"^/^/blk: [#test]^/parse blk [hashtag!]^/```}
    sent: "2016-07-17T06:33:18.293Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b2501914c51592b2ec761"
    text: {cool. perhaps @dockimbel  could advise on type aliases}
    sent: "2016-07-17T06:26:09.057Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "578b24db8423d084244addcb"
    text: {I don't know about aliases, or how they might work, but you can create your own types today. }
    sent: "2016-07-17T06:25:31.242Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b249b3c5129720e4360f2"
    text: {Will Red allow user-created types? And user-created aliases to types?}
    sent: "2016-07-17T06:24:27.239Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "578b241b8423d084244ad884"
    text: {I had the same thought recently, as Doc had also mentioned liking the current value of `hashtag!` for `issue!`, but I don't know if it's feasible and haven't thought about potential downsides. }
    sent: "2016-07-17T06:22:19.216Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b23ca9f79ee4f2bcb30af"
    text: {What about several names aliased to the same type?}
    sent: "2016-07-17T06:20:58.620Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "578b23773c5129720e435880"
    text: "Not great for the username case though. "
    sent: "2016-07-17T06:19:35.427Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b23349f79ee4f2bcb2886"
    text: {The last one that I can come up with from ```symbol, token``` is ```mark```.}
    sent: "2016-07-17T06:18:28.281Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "578b22d19f79ee4f2bcb280d"
    text: {`At!` is a very direct mapping to the lexical form and sigil. Big plus there. If people come up with good, concrete examples, maybe that will help lead us (i.e. Nenad) to a choice. Where is each name strongest, where is it weakest or most ambiguous, and where/how will it be used the most?}
    sent: "2016-07-17T06:16:49.960Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b22073c5129720e4353fb"
    text: {Rebol has a symbol! type, and all values are tokens when lexing. I think you're right that generality is what makes this tough.}
    sent: "2016-07-17T06:13:27.594Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b21c4196179690ef2cc2d"
    text: {```^/blk: [send "Hello!" to @dahu via @gitter about @source.code#add @1234:0030]^/^/parse blk ['send string! 'to at! 'via at! 'about at! opt at!]^/parse blk ['send string! 'to ref! 'via ref! 'about ref! opt ref!]^/^/find blk at!^/find blk ref!^/^/if not at? first next find blk 'to [...]^/if not ref? first next find blk 'to [...]^/^/if not at? blk/to [...]^/if not ref? blk/to [...]^/```}
    sent: "2016-07-17T06:12:20.679Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b218d3cb52e8b24d24337"
    text: {```at``` sounds as though it is an address or location. For any European, ```ref``` is a person with a whistle.}
    sent: "2016-07-17T06:11:25.514Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "578b21448423d084244ac4de"
    text: {I think it is going to be very difficult to come up with a truly semantic name when its use is potentially so widespread.}
    sent: "2016-07-17T06:10:12.921Z"
    editedAt: "2016-07-17T06:12:05.895Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "578b2101d11cd28812377e8c"
    text: "Or perhaps it's a ```token```?"
    sent: "2016-07-17T06:09:05.351Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "578b203b9f79ee4f2bcb0f0a"
    text: "In essence, isn't it a ```symbol```?"
    sent: "2016-07-17T06:05:47.411Z"
    editedAt: "2016-07-17T06:06:02.911Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "578b1f28914c51592b2eada7"
    text: {It's a tough call. "At" is certainly more common in everyday speech.}
    sent: "2016-07-17T06:01:12.942Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b1ed9196179690ef2b637"
    text: {If you want, I can also provide an example that makes `at` look better than `ref`. :^^)}
    sent: "2016-07-17T05:59:53.115Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578b1c98e4375c9212f7d7c8"
    text: {First we check to see if it's an at value. If it's an at, which we check with at?, not to be confused with asking if a series index set with at is at that position, we're good. If it's not an at?, we make an at out of it. Again, not like make at with a series index.^/^/First we check to see if it's a ref value. If it's a ref, which we check with ref?, we're good. If it's not a ref, we make a ref out of it.}
    sent: "2016-07-17T05:50:16.086Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578aff5c9f79ee4f2bca1688"
    text: "And the phone test?"
    sent: "2016-07-17T03:45:32.720Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "578afe443c5129720e426f04"
    text: {I agree with Gregg that ref! seems like the strongest candidate. To me, the benefit over at! is that it conveys more meaning. It _is_ a reference to something, where 'at' is a relationship of one thing to something else.}
    sent: "2016-07-17T03:40:52.076Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578af74b196179690ef1a97f"
    text: {Give an example sentence "saying" your @thing }
    sent: "2016-07-17T03:11:07.494Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "578af550914c51592b2d8a20"
    text: {Yes, there are good things about it. One thing I don't like is how it feels saying it. The old "phone code" test. So, it's good, but is it better than `ref!`?}
    sent: "2016-07-17T03:02:40.868Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578ac2d5e4375c9212f55bc0"
    text: {I think At! matches all your proposed use-cases. It's at/to a username. It's at a place in source code; a source code annotation. It's at/on a date for a version string. It's at a location, address, offset. The up-side is that for English speakers, @ is pronounced "at".</myvote>}
    sent: "2016-07-16T23:27:17.592Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "578a898de4375c9212f3270b"
    text: {`Label!` is fine for the non-username cases, I agree. The username case is the primary driver right now, though I think the others are important. I'll add it to the RFC.}
    sent: "2016-07-16T19:22:53.920Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a88f33cb52e8b24cde2b8"
    text: {I do remember, from early days of programming, label referring to some section}
    sent: "2016-07-16T19:20:19.754Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a88ce3cb52e8b24cde276"
    text: {Well, just from the Purpose section - why something as label is not a good fit?}
    sent: "2016-07-16T19:19:42.968Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a884a9f79ee4f2bc5e633"
    text: {Oh my, the weak gitter mobile interface. I read it briefly, should read it again.}
    sent: "2016-07-16T19:17:30.970Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a87fa3c5129720e3ea402"
    text: "Did you read the RFC?"
    sent: "2016-07-16T19:16:10.074Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "578a87e2196179690eee0530"
    text: {@greggirwin The thimg is, I did not fully got the intention.}
    sent: "2016-07-16T19:15:46.149Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a80f38423d08424457a03"
    text: {Web devs are going to love hex format support Doc. Probably a very good feature to aid adoption. Also a nice use of dialecting.}
    sent: "2016-07-16T18:46:11.138Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a80ac3cb52e8b24cd90cf"
    text: {@Arie-vw `tag!` is taken by <tag> values. `handle!` is specific to the username use case. @pekr , I don't think `label!`, `badge!`, or `quote!` are good for the username case (I need a markdown datatype keyboard macro). `Cite!` is nice, but the abbreviated form of `citation` makes it a verb. }
    sent: "2016-07-16T18:45:00.760Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a5be9196179690eec418f"
    text: "RGB or RGBA, same as in HTML."
    sent: "2016-07-16T16:08:09.535Z"
    editedAt: "2016-07-16T16:09:23.955Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578a5bde542776fa2f7bfa80"
    text: "Same order as svg format ?"
    sent: "2016-07-16T16:07:58.280Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578a5b71e4375c9212f17302"
    text: {[![blob](https://files.gitter.im/red/red/v8Ka/thumb/blob.png)](https://files.gitter.im/red/red/v8Ka/blob)}
    sent: "2016-07-16T16:06:09.490Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578a5b3ce4375c9212f172a7"
    text: {Hex values are now also supported in VID for colors spec, check this out:^/```lisp^/view [v: base #00f base #FF0000 at 60x30 base #00ff0080]^/```}
    sent: "2016-07-16T16:05:16.856Z"
    editedAt: "2016-07-16T16:05:26.883Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578a56978423d0842443b13c"
    text: "or handle!"
    sent: "2016-07-16T15:45:27.691Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "578a546f8423d0842443840f"
    text: "maybe tag!  instead of ref!"
    sent: "2016-07-16T15:36:15.572Z"
    v: 1
    author: "557c4aa015522ed4b3e1dcff"
) #(
    id: "578a31dc914c51592b2669ee"
    text: {@greggirwin The [is](http://doc.red-lang.org/reactivity.html) function is working like that already.}
    sent: "2016-07-16T13:08:44.837Z"
    editedAt: "2016-07-16T13:08:51.754Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5789f0e0e4375c9212ed8e47"
    text: {my favourites so far: `label!`, `badge!`, `cite!`, .... and I add `quote!`}
    sent: "2016-07-16T08:31:28.588Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5789da3d9f79ee4f2bbf8a04"
    text: {(old) Alternate names for `ref!` are now in https://github.com/Ren-data/Ren/wiki/Value-Ref-RFC. I still think `ref!` is the most general purpose. `Reference!` is long. `At!` is still my second choice.}
    sent: "2016-07-16T06:54:53.485Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5789d9b0d11cd288122c3cca"
    text: {Thanks for the reminder on the set-word! syntax idea for `default` Doc. Doesn't grab me at a glance. Are you planning any other ops that would work like that? }
    sent: "2016-07-16T06:52:31.998Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5789719e914c51592b1ffc62"
    text: {though "cite" is a verb, and "citation" is a bit long maybe...}
    sent: "2016-07-15T23:28:30.453Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5789713d9f79ee4f2bbc2c52"
    text: "one other option for `ref!` name could be `cite!`"
    sent: "2016-07-15T23:26:53.016Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578948253cb52e8b24c238d3"
    text: {BTW, in `make` there is a `red-tag!` which should probably be `red-email!`...}
    sent: "2016-07-15T20:31:33.805Z"
    editedAt: "2016-07-15T20:31:49.512Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "578947a9e4375c9212e8380f"
    text: "In R2, these accessors are `user` and `host`."
    sent: "2016-07-15T20:29:29.054Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57894063d11cd288122705dd"
    text: {To change the subject completely: welcome to `email!`. @dockimbel Before I raise issues: I suppose that `random` is inadvertently marked as inherited, because it is not appropriate just like for `file!` and `url!`. Also, `eval-path` is inherited simply from string, whereas I would love to have named accessors for the parts before and after the `@`. I seem to remember that R2 and/or R3 have that. }
    sent: "2016-07-15T19:58:27.394Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "578938013cb52e8b24c16bee"
    text: "tie!"
    sent: "2016-07-15T19:22:41.244Z"
    v: 1
    author: "57369493c43b8c601972d80b"
) #(
    id: "5789239506b72746092f91ec"
    text: {Ok, though I'm not expecting much. France, is not officially supported yet.}
    sent: "2016-07-15T17:55:33.239Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57892357196179690ee102a0"
    text: {don't know how quick the turn around is (or if they're even connected in real-time), but my friend at work saw some of his own ingress interest points being used as spawn points for pokemon go.  :-)}
    sent: "2016-07-15T17:54:31.084Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "5789230706b72746092f918d"
    text: "Thanks, will try it"
    sent: "2016-07-15T17:53:11.867Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578922f7d11cd28812258995"
    text: "yep, that's it"
    sent: "2016-07-15T17:52:55.677Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578922eced14f8024945cc4f"
    text: "Ingress?"
    sent: "2016-07-15T17:52:44.173Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578922b63c5129720e310ce9"
    text: {you need to play another game to create data which is used by the pokemon game.  can't remember the game's name but its the other game of the same dev team}
    sent: "2016-07-15T17:51:50.570Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "57892266542776fa2f7ba1c6"
    text: {I have, But in my tiny village, there's nothing much to do.}
    sent: "2016-07-15T17:50:30.086Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57892225db706bc073029c85"
    text: {Be honest guys; Who tried the **Pokemon Go** game ?}
    sent: "2016-07-15T17:49:25.795Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578921de9f79ee4f2bb8b283"
    text: "and Red IS the color of the poket ball  ;-)"
    sent: "2016-07-15T17:48:14.114Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578921bc196179690ee0e8cb"
    text: {that would make hilarious live presentations in conferences  :-)}
    sent: "2016-07-15T17:47:40.932Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "5789217b196179690ee0e82e"
    text: {that would be a great easter egg, to add `pokemon!` as an alternate in a `typeset!`}
    sent: "2016-07-15T17:46:35.931Z"
    editedAt: "2016-07-15T17:46:52.678Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "57892168ed14f8024945cc2f"
    text: "I also like **badge!**"
    sent: "2016-07-15T17:46:16.254Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5789213f9f79ee4f2bb8a44a"
    text: ":-)"
    sent: "2016-07-15T17:45:35.438Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57892131542776fa2f7ba1b0"
    text: {And the prefix looks like a **pocket ball**. Well fit.}
    sent: "2016-07-15T17:45:21.645Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5789212a8423d0842438804c"
    text: "`badge!` is actually quite nice :-)"
    sent: "2016-07-15T17:45:14.857Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578921113cb52e8b24c06118"
    text: "`mark!`, `badge!`"
    sent: "2016-07-15T17:44:49.739Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5789209c914c51592b1c7f9b"
    text: "maybe a bit adult rated, but still  ;-)"
    sent: "2016-07-15T17:42:52.727Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "57892083914c51592b1c7f54"
    text: "sounds like a viable pokemon name to me heh"
    sent: "2016-07-15T17:42:27.417Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578920733c5129720e30f41b"
    text: ";-)"
    sent: "2016-07-15T17:42:11.914Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "5789206d914c51592b1c7cc8"
    text: {I like it:^/```^/make pokemon! "pekr"^/== @pekr ^/```}
    sent: "2016-07-15T17:42:05.164Z"
    editedAt: "2016-07-15T17:43:10.935Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578920358423d08424386e30"
    text: ""
    sent: "2016-07-15T17:41:09.319Z"
    editedAt: "2016-07-15T17:41:21.939Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "57891ff506b72746092f910e"
    text: { To follow the current trend, I propose **pokemon!**}
    sent: "2016-07-15T17:40:05.791Z"
    editedAt: "2016-07-15T17:41:36.530Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57891fa6e4375c9212e62a79"
    text: {I can only speculate myself about possible usage, but I like `label!`most - short enough, self explanatory ....}
    sent: "2016-07-15T17:38:46.208Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57891f298423d08424386394"
    text: {not sure what exactly is `ref!` supposed to be, but from Doc's comment "a name, a label, a location, an annotation, etc.", what about some of them? `name!`, `label!`, `spec!` (as in specification/specify), `description!`}
    sent: "2016-07-15T17:36:41.275Z"
    editedAt: "2016-07-15T17:36:51.214Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57891dd3914c51592b1c5a31"
    text: {IMHO, its a style and habit thing.  I could replace `default` with `append` in the discussions above and then some of my arguments against `default` would also apply to `append`, but I'm used to it doing its magic "in-place" (and like @greggirwin , mentally see an invisible "into") so its very subjective. ;-)}
    sent: "2016-07-15T17:30:59.117Z"
    editedAt: "2016-07-15T17:31:23.019Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "57891b7f3cb52e8b24c00e1c"
    text: {@moliad I'm still not fully convinced that `default` is really an improvement, as it needs more thinking to decode than the usual `any [...]` construct. But maybe it is just a matter of getting used to it.}
    sent: "2016-07-15T17:21:03.359Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57891afd8423d08424382034"
    text: {@dockimbel Yea well, I meant that the basic ones should maybe be like `thru`, `to`, etc.. as part of the parse dsl only. Thanks for the example btw!}
    sent: "2016-07-15T17:18:53.858Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57891ae0e4375c9212e5e7d3"
    text: {@greggirwin `email!` is coming, so we need to settle for a final name for `ref!`. Do we have a short-list already?}
    sent: "2016-07-15T17:18:24.966Z"
    editedAt: "2016-07-15T17:22:00.923Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578919b38423d08424380b7d"
    text: {@x8x Why global variables when you have object contexts?^/```lisp^/my-charsets: context [digit: charset "0123456789" alpha: charset [#"a" - #"z"]]^/^/rule: [some digit 3 alpha]^/bind rule my-charsets^/^/parse "2016jul" rule^/== true^/```}
    sent: "2016-07-15T17:13:23.602Z"
    editedAt: "2016-07-15T17:13:46.708Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578918028423d0842437f516"
    text: {Even better if you could make them available inside parse rules without making them global variables or maybe not, as red fellows like to redefine everything.. ;-)}
    sent: "2016-07-15T17:06:10.922Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578917523c5129720e304ea6"
    text: {@x8x Yes, but 1) we need an efficient way to make them available in Parse, 2) your `alpha` is locale-dependent.}
    sent: "2016-07-15T17:03:14.772Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "57891702914c51592b1c139a"
    text: {@dockimbel I like that version of `default`.   forgot we could build our  own infix operations in Red.}
    sent: "2016-07-15T17:01:54.561Z"
    editedAt: "2016-07-15T17:02:08.997Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578916ac8423d0842437deda"
    text: {@dockimbel Good to know, thanks!^/Wouldn't it be useful to have by default some basic charsets like:^/```^/digit: charset "0123456789"^/```^/and `alpha` at least, pretty sure I'm not alone having to define them for parse rules?}
    sent: "2016-07-15T17:00:28.968Z"
    editedAt: "2016-07-15T17:02:20.405Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5789160ae4375c9212e5aa15"
    text: {@greggirwin As I mentioned once before, one possible way for `default` is to use it in this form: ^/```lisp^/red>> default: make op! func [w [set-word!] value][unless get to word! w [set w value]]^/== make op! [[w [set-word!] value]]^/red>> w: default 1^/== 1^/```^/That code does not yet work as we don't have `to` working on set-words yet.}
    sent: "2016-07-15T16:57:46.475Z"
    editedAt: "2016-07-15T17:01:16.164Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5789159b3cb52e8b24bfb8cd"
    text: {@x8x Parse is always interpreted, no compiler yet.}
    sent: "2016-07-15T16:55:55.713Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578914dc9f79ee4f2bb7f97e"
    text: {people will tell you that building an object for a specific purpose *IS* "Making tools fit your needs is.", but they don't realize (actually don't even conceptualize) how wrong they are.  hehe}
    sent: "2016-07-15T16:52:44.953Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578914a8d11cd2881224e463"
    text: {its soooo hard to wean people from archaic (to me at least) OO philosophies... its insane.}
    sent: "2016-07-15T16:51:52.104Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578914919f79ee4f2bb7f5d7"
    text: {I sometimes chuckle when other langs talk about their powerful "pattern matching" capabilities. :^^)}
    sent: "2016-07-15T16:51:29.208Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57891452d11cd2881224e026"
    text: {Yup. Preaching to the choir. I think that's a missing power feature. Teams can adopt a style that works for them and really leverage it. Methodologies, any of them, are *not* universally applicable. Making tools fit *your* needs is.}
    sent: "2016-07-15T16:50:26.795Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5789140b3cb52e8b24bf94f6"
    text: {(just finished a url! building dialect not 15 minutes ago ;-) )}
    sent: "2016-07-15T16:49:15.170Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578913d53cb52e8b24bf945d"
    text: "yeah, I also use `parse` A LOT nowadays"
    sent: "2016-07-15T16:48:21.743Z"
    editedAt: "2016-07-15T16:48:35.753Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "5789138f9f79ee4f2bb7e44f"
    text: {ah, isn't it fun to use a language which allows style to be such a big factor in coding, just like human language  :-)}
    sent: "2016-07-15T16:47:11.732Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578913768423d0842437b3c8"
    text: {Me too. Kind of like using `parse` for everything. :^^)}
    sent: "2016-07-15T16:46:46.759Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5789133a8423d0842437b2ef"
    text: {I guess I use `ANY / ALL` so much that I've just standardized to their use in many places, which make a lot of my code consistent between patterns.}
    sent: "2016-07-15T16:45:46.279Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578912ae196179690ee01a21"
    text: {Got it. I don't do that much. For things like merging config settings, CLI args, and such, I tend to build a block or object and merge into that for the rest of the app to use.}
    sent: "2016-07-15T16:43:26.477Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57891240d11cd2881224bd48"
    text: {as in `value: any [fallback-value ""]` or `value: any [value fallback-value ""]` which happens often}
    sent: "2016-07-15T16:41:36.527Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "578911e7196179690ee0130f"
    text: {I don't get what you mean by them not being the same though.}
    sent: "2016-07-15T16:40:07.650Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578911ca9f79ee4f2bb7c1ee"
    text: {I go back and forth on whether the arg should be a lit-word. I do the same with `incr/decr`.  Funny how our brains each do different things. It never read as declarative to me. My brain puts a little "to" between the word and value. Agreed on things like func builders, but the way around that is default values in func specs, which is not likely.}
    sent: "2016-07-15T16:39:38.168Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578910ad9f79ee4f2bb7b1eb"
    text: {(and the default value isn't always the same word as the one being set ;-)}
    sent: "2016-07-15T16:34:53.790Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "5789107d8423d08424379a51"
    text: {problem I have with `'default` is that its declarative in style, and it doesn't convey a lot of meaning.  ^/^/when I read the code and I hit the `default` using style, my brain always stops and has to realize that the word is being used as a variable and will change value.^/^/Its also a pain to use in local-words-by-default function builders which require a `set-word!` to bind locally...}
    sent: "2016-07-15T16:34:05.492Z"
    editedAt: "2016-07-15T16:35:57.799Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "57890fae914c51592b1ba61c"
    text: {`at!` is definitely more literal when talking about the lexical form.}
    sent: "2016-07-15T16:30:38.780Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57890f593c5129720e2fcf5e"
    text: {I considered a lot of names, `at!` being the second choice right now. Per my draft notes, the various uses give `ref!` the edge IMO.}
    sent: "2016-07-15T16:29:13.334Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57890f1ed11cd28812248a38"
    text: {Max, I used `any` for many years. `default` is shorter though, and would be even moreso if it can work like `set`.^/```^/>> value: any [value ""]^/== 0^/>> default 'value ""^/```^/If you're not using the value more than once, `any` is shorter.}
    sent: "2016-07-15T16:28:14.498Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57890d663c5129720e2fb0c5"
    text: {Are there known limitations in compiled parse vs interpreted?}
    sent: "2016-07-15T16:20:54.215Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578908cad11cd28812242800"
    text: {@greggirwin   ref!  +1    not sure about the name though. I usually call @something an  "attribution" which I prefer cause the "at" and "attribution" go hand in hand.   "reference" is a bit more abstract, which may be good too.}
    sent: "2016-07-15T16:01:14.878Z"
    v: 1
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "57890620914c51592b1b1cb6"
    text: {I still prefer   ` any [value ""]`    shorter , works directly on refinement values and obvious when read.}
    sent: "2016-07-15T15:49:52.913Z"
    editedAt: "2016-07-15T15:50:16.623Z"
    v: 2
    author: "5656121316b6c7089cbc2a4e"
) #(
    id: "5789061a8423d08424370070"
    text: {`ifs` is worse than `opt`. You are right that `default` is different.}
    sent: "2016-07-15T15:49:46.233Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5788fcf9196179690ededb1f"
    text: {`default`, I think, implies the reverse of how `opt` works. That is, the default would apply if the condition were *not* true.}
    sent: "2016-07-15T15:10:49.425Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788fc4c3cb52e8b24be2351"
    text: {And while defaulting one value is handy, I've tinkered on one that would work more like `set`, so you could default multiple values.}
    sent: "2016-07-15T15:07:56.780Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788fbb43cb52e8b24be1f27"
    text: {I'd have to see who started the thread on it, but the original name was the old `ifs` that is used in some langs. I hope `opt` is at least better than that. ;^^)}
    sent: "2016-07-15T15:05:24.403Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788fb53e4375c9212e42aff"
    text: {I actually hope to get a `default` in Red, because it's cleaner, to me, than the alternatives. The purpose is totally different though, as is the behavior.}
    sent: "2016-07-15T15:03:47.050Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788fb0d3cb52e8b24be190e"
    text: {`default` could be an option but there is a function with same name in R2 (which I never use)}
    sent: "2016-07-15T15:02:37.076Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5788fac5196179690edec061"
    text: "Happy to get a better one. :^^)"
    sent: "2016-07-15T15:01:25.128Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788faa1d11cd28812236c4b"
    text: {`opt` very interesting function with horrible name :) }
    sent: "2016-07-15T15:00:49.586Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5788fa48914c51592b1a75b7"
    text: {Doc would have to say, but I think the simpler we can keep datatypes, the easier it will be to implement and debug them. If an action can be inherited, that helps a lot, but if every type has to `form` itself, and there are a lot of refinements, that may lead to more code in different places, that is harder to reason about, see, and patch.}
    sent: "2016-07-15T14:59:20.037Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788f99c9f79ee4f2bb67abb"
    text: {From Help room>>^/@endo, agreed. The recent chat on forming none on altme led to this `opt` func, which I had always done other ways: https://gist.github.com/greggirwin/579e802222aba609ec2e70bf4fe56a9e^/^/`rejoin/with` has been suggested a number of times through the years. `Form` *might* be tricky, because it's an action.}
    sent: "2016-07-15T14:56:28.908Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788f968196179690edeadfa"
    text: {With -4 it did not seem to be so extreme, as original Ladislav's proposal :-) Surely it is not a high priority right now, if we can proceed otherwise ...}
    sent: "2016-07-15T14:55:36.089Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5788f6849f79ee4f2bb650c7"
    text: {@pekr that CC ticket was interesting. I don't know what the other reference is, but fundamental lexical changes are tough. I don't think they come for free. }
    sent: "2016-07-15T14:43:16.929Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788ddf4196179690edd46a7"
    text: {I mean promoting the auto builds over stable builds on the download page.}
    sent: "2016-07-15T12:58:28.139Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5788ddbfd11cd2881221ec68"
    text: {I think in that case they should download the automated builds, may be we can put a note on the red-lang.org/download page if you face those kind of issues please try downloading the auto-build.}
    sent: "2016-07-15T12:57:35.893Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5788dcc4d11cd2881221e167"
    text: {Noticed this yesterday.^/The new 'call binding' in red.master(14th july), does'nt work with 'red-061.exe' (last stable build) ....^/If I use red-061.exe(last stable build) and the new red.master(14th July) I get an error when trying to compile to  ^/windows. ^/So if I compile like this:  >>red-061 -c -t windows myScript.red ^/There will be a ***compilation error: word fonts not defined***^/Not a biggy, but i'm guessing most will be downloading the 'red-061.exe (last stable build)' ^/and if they try to use the new 14thjuly call binding using: '#include %system/library/call/call.red' ^/they will get the compile error.}
    sent: "2016-07-15T12:53:24.743Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "5788d81b196179690edd02e0"
    text: {@endo64 Right, I changed it when I saw that the previous behavior was not helpful. For `none` decay, yes, I want it too, though, not sure yet which API would handle that the best.}
    sent: "2016-07-15T12:33:31.943Z"
    editedAt: "2016-07-15T12:34:27.281Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5788d5823c5129720e2cbe87"
    text: {> @endo64 It is because `form` and `mold` accept `any-type!` as argument (so `unset!` too). Same as in Rebol3.^/^/Now `unset!` `FORM`s into empty string, which is more useful I think.^/I sometimes need same for `none!` values to become empty string, mostly for huge db or excel export/import scripts. Changing them to "" takes time if the data is huge. Any thought about it?}
    sent: "2016-07-15T12:22:26.232Z"
    editedAt: "2016-07-15T12:26:04.681Z"
    v: 4
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5788a830d11cd288121fb079"
    text: {To explain - actually it was Ladislav's CC ticket, suggesting some changes to "Rebol syntax nad space significance" - http://curecode.org/rebol3/ticket.rsp?id=2094&cursor=4 , when if implemented, could free up the space to introduce another literal syntax. But - maybe that is unrelated ...}
    sent: "2016-07-15T09:09:04.347Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5788613e8423d084242f42bc"
    text: {Syntactic form of Rebol like languages could be improved/freed, if we would accept HF's -4 proposal ... but that's for another discussion ...}
    sent: "2016-07-15T04:06:22.151Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57885aa9e4375c9212dcfd69"
    text: {@SteeveGit I'm adding email! datatype, as it is very useful for dialecting and for presenting Red to people. Email! can be modified to allow @<email> form, but you can't input it directly. This is a pity as such form would be useful for dialects, so if we want to allow it but withouth breaking email syntax too much. Therefore we need a new datatype, as such syntactic form can be used to represent many things: a name, a label, a location, an annotation, etc... It would act as email!, no special semantics, just evaluates to itself, so very quick to implement.}
    sent: "2016-07-15T03:38:17.515Z"
    editedAt: "2016-07-15T03:40:27.953Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578859cd3cb52e8b24b6c033"
    text: {@endo64 It is because `form` and `mold` accept `any-type!` as argument (so `unset!` too). Same as in Rebol3.}
    sent: "2016-07-15T03:34:37.081Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5788183f4db4a6900bfc7054"
    text: "I don't know if it's still in Doc's mind."
    sent: "2016-07-14T22:54:55.492Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578818254db4a6900bfc7051"
    text: {IIRC, there was a user compositing datatype! planned, allowing to derive basic datatype! to have different syntax (sigil). It would be a perfect use case for ref!}
    sent: "2016-07-14T22:54:29.543Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57881791d11cd2881219f02d"
    text: {i.e., he gets the lexer right and inherits from`issue!`.}
    sent: "2016-07-14T22:52:01.875Z"
    editedAt: "2016-07-14T22:52:21.922Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788176e196179690ed5651f"
    text: {I can only guess that Doc thinks it will be quick and easy to do, since his head is in that space and will be working on the lexer where @ stuff is handled. I want other missing types, too, but some of those will be a lot of work, while this may be almost free. }
    sent: "2016-07-14T22:51:26.367Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5788171f141a2f8a6b99eca2"
    text: {Well, my concern is that it's far from being a priority compared to  important missing datatype. ;-)}
    sent: "2016-07-14T22:50:07.676Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5788171d3c5129720e253ae7"
    text: {If Gitter had better @ support, I could have referenced the earlier message with it. ;^^)}
    sent: "2016-07-14T22:50:05.847Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578816c58423d084242c8ed5"
    text: { :point_up: [July 14, 2016 11:02 AM](https://gitter.im/red/red?at=5787c5a99f79ee4f2ba85d44)}
    sent: "2016-07-14T22:48:37.194Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578816a33c5129720e253397"
    text: {The big question being whether they should be a string or word type.}
    sent: "2016-07-14T22:48:03.270Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788168888a3ed5b58bb3a53"
    text: "Do we need such a thing at this stage ?"
    sent: "2016-07-14T22:47:36.304Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57881667d11cd2881219eaac"
    text: "Correct."
    sent: "2016-07-14T22:47:03.364Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578816548aff7d5472004f1e"
    text: "Ok, so that just an issue! version 2.  "
    sent: "2016-07-14T22:46:44.149Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578816328423d084242c8a70"
    text: {`start with an at sign (@) and continue until the first delimiting character (such as a space) is reached.`}
    sent: "2016-07-14T22:46:10.514Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57881603196179690ed55233"
    text: {What implies behavior? It's just a datatype. `Provide functionality similar to the Issue type, but with a distinct sigil that conveys a different meaning.`}
    sent: "2016-07-14T22:45:23.792Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578815e14db4a6900bfc6e01"
    text: "Are they evaluated in a different way ?"
    sent: "2016-07-14T22:44:49.540Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5788159988a3ed5b58bb3826"
    text: {I just see some strange delimited strings. But you seem to imply that there is an induced behavior behind this new datatype. That's what I don't understand.^/Say, they are weird shaped string! or issue!, then what do we do with that ?}
    sent: "2016-07-14T22:43:37.672Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5788147dd11cd2881219e0aa"
    text: {Absolutely nothing. Just like there's nothing you can do with Red data that you can't do with JSON. But if you have `[post to @SteeveGit @gitter about bug #1941 @compiler.red#emit]` it might seem more useful.^/^/That said, you can say it's not useful and shouldn't be in Red. NP.}
    sent: "2016-07-14T22:38:53.099Z"
    editedAt: "2016-07-14T22:39:09.246Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578813ea3cb52e8b24b44ac5"
    text: "Other use cases are in the Purpose section."
    sent: "2016-07-14T22:36:26.814Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578813dc141a2f8a6b99ea2c"
    text: {What can I do with this, I can't do with `name: "SteeveGit"`}
    sent: "2016-07-14T22:36:12.692Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578813bc196179690ed53c3f"
    text: {i.e. a reference that is much broader than a value in the "executing" code.}
    sent: "2016-07-14T22:35:40.545Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788138b196179690ed53b9e"
    text: "@SteeveGit is your first use case. :^^)"
    sent: "2016-07-14T22:34:51.548Z"
    editedAt: "2016-07-14T22:35:52.194Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788137b3cb52e8b24b4428a"
    text: {`Word values fill that need as well, but are more symbolic of references to values rather than people, places, or things.`}
    sent: "2016-07-14T22:34:35.323Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57881377141a2f8a6b99ea22"
    text: "Just give me a use case."
    sent: "2016-07-14T22:34:31.136Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5788134788a3ed5b58bb381d"
    text: {> An identifier that, while it can be used in any way, conveys the meaning that it refers to something else. ^/^/So, a word!}
    sent: "2016-07-14T22:33:43.853Z"
    editedAt: "2016-07-14T22:33:53.979Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5788133ce4375c9212da4fe0"
    text: "Not sure how else to explain it. "
    sent: "2016-07-14T22:33:32.735Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578812fd141a2f8a6b99ea18"
    text: "Yep, I don't get. "
    sent: "2016-07-14T22:32:29.771Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578812e73c5129720e250a24"
    text: "Did you read the wiki page?"
    sent: "2016-07-14T22:32:07.957Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788124d8aff7d5472004ec0"
    text: "what are the applications, it's not clear to me ?"
    sent: "2016-07-14T22:29:33.569Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578811a3141a2f8a6b99e98e"
    text: "Is that a word allowing a different syntax ?"
    sent: "2016-07-14T22:26:43.592Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5788116e4db4a6900bfc6dda"
    text: {Just... can you explain what are the benefits, compared to existing datatypes, I don't get it.}
    sent: "2016-07-14T22:25:50.251Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578810c4d11cd2881219b77c"
    text: {I also included problematic examples with `#` and `:` in them, though they may stir up some trouble. ;^^)^/All comments welcome.}
    sent: "2016-07-14T22:23:00.495Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57881001196179690ed51794"
    text: {I dumped some quick `ref!` thoughts in https://github.com/Ren-data/Ren/wiki/Value-Ref-RFC.^/^/You'll notice a slight mix of Ren thinking there (`Ref` v `ref!`) but don't let that concern you. In Ren it would just be an implied string (as it is today). This was just a handy place to put notes and I didn't want to make it totally Red specific.}
    sent: "2016-07-14T22:19:45.209Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578805c48423d084242bdb01"
    text: {@x8x I think this behaviour will change in the future, I recently ask a similar question and Doc said it will change.^/^/> ```^/x: foreach x [] []^/```^/x will be `none!` on R2 and R3 but `unset!` on Red, is it a bug or on purpose? `Script Error: x: needs a value`^/^/> @endo64 It's not normalized yet, there's a ticket about that.^/}
    sent: "2016-07-14T21:36:04.416Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "578804c3d11cd288121920c6"
    text: {Is this deliberately?^/```^/R2>> form do []^/** Script Error: form is missing its value argument^/^/red>> form do []^/== "unset"^/```}
    sent: "2016-07-14T21:31:47.432Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5787e1609f79ee4f2baa0487"
    text: {We chatted briefly here as well, I think, but Gitter search isn't finding anything. }
    sent: "2016-07-14T19:00:48.662Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5787deb79f79ee4f2ba9de0a"
    text: {@dockimbel let me go through old notes and chat on altme for `ref!`.  One of the issues in Rebol, no pun intended, with issue! becoming a word, was the effect on symbol table space. I think that's what led to the hybrid model. A similar question exists for `ref!`. If we assume they'll be used as handles for users, only the largest systems probably need to worry if they are symbols. And maybe that's not an issue at all in Red. If we use them for things like cross-reference locations and more general markers, there could be a lot. Then you have to weigh the benefits of each (storage, lookup speed, etc.) and we may just need to note limitations for people to be aware of.}
    sent: "2016-07-14T18:49:27.163Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5787d62b9f79ee4f2ba96932"
    text: {```^/all [^/    foreach i [][]^/    1^/]^/```^/Will return `1` in red and `none` in rebol.^/Reason is `foreach b [][]` in red doesn't return a value but have a silent `true` while rebol returns `none` and breaks the `all` statement.^/I think Red got it right and it's a bug in Rebol.}
    sent: "2016-07-14T18:12:59.081Z"
    editedAt: "2016-07-14T18:13:32.804Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5787cbb9e4375c9212d66fcb"
    text: "What's ref! going to be about, please?"
    sent: "2016-07-14T17:28:25.692Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5787c5a99f79ee4f2ba85d44"
    text: {@greggirwin I'll add support for email! in next days, I would be glad to add ref! (or whatever we'll call it) if we can define it properly. Do you have any draft spec for it? Should it be word-like or string-like? ;-)}
    sent: "2016-07-14T17:02:33.385Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5787bdd03c5129720e20a90b"
    text: "Thanks for the suggestion!"
    sent: "2016-07-14T16:29:04.958Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5787bdac914c51592b0c30eb"
    text: {A general remark: when you like a Github repo, please star it, as it shows your support to the owner, and helps the repo getting more known and trusted by others. It also helps Red indirectly, by supporting Red-powered projects.}
    sent: "2016-07-14T16:28:28.197Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5787bc548423d0842427afc9"
    text: {@Zamlox Re: XML parser, nice work! Your approach (modifying the XML content to make it LOADable) is interesting, as it leads to very short code. It would make a good material to teach Parse and some Red concepts to newcomers.}
    sent: "2016-07-14T16:22:44.454Z"
    editedAt: "2016-07-14T16:25:24.496Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5787b210d11cd28812146bec"
    text: {Yes. Windows's window system is not designed to support animation.}
    sent: "2016-07-14T15:38:56.685Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5787b1223cb52e8b24af1b2a"
    text: {I do remember discussion with Carl, about animations. I found some blog article, from a former Amiga developer, who concluded, that Windows is indeed a crap, and apart from whatever timers he tried, did not get ideal results :-) The discussion turned down to Windows not supporting v-sync. Double/tripple buffering might help, but will not prevent tearing effect. Btw - mozilla is trying to address that with the project Silk - https://hacks.mozilla.org/2015/01/project-silk/}
    sent: "2016-07-14T15:34:58.351Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5787b08fe4375c9212d4d662"
    text: {@pekr When I remove transparency, set `auto-sync?: no` and use `show win` in the forever loop, then it works better. Though still not perfect. }
    sent: "2016-07-14T15:32:31.157Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5787aeaa3c5129720e1fc4e9"
    text: {:point_up: [July 14, 2016 6:40 AM](https://gitter.im/red/red?at=57878844196179690ecd4f5a) @Zamlox Excellent!}
    sent: "2016-07-14T15:24:26.399Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5787a6c3196179690ecf2b49"
    text: {Thanks :-) Hopefully it's not going to be complicated and implementation of double/triple buffering is not going to be needed :-)}
    sent: "2016-07-14T14:50:43.965Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5787a687196179690ecf2774"
    text: {@pekr I see the problem, yes, it should not flicker. I'll fix it.}
    sent: "2016-07-14T14:49:43.156Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5787a0828423d0842425e9fa"
    text: {@PeterWAWood I'll find time for that this weekend, we need to finish that for 0.6.2 anyway.}
    sent: "2016-07-14T14:24:02.763Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57879cd5d11cd2881213369b"
    text: {The holdup with TO has been the lack of a datatype matrix to help @dockimbel to make the necessary design decisions. I started one in the docs folder in Red/red. Once @dockimbel is happy with the format, I'll complete the first draft. The trouble is that @dockimbel is so busy coding that he hasn't had time to review the format yet.}
    sent: "2016-07-14T14:08:21.836Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "578797033c5129720e1e7457"
    text: {Maybe the script could be turned into a small demo (might be useful to some ppl), showing a borderless window animations. It just should not flicker, if possible. I know, that without the DirectX, the animation is not going to be the smoothest, so just wonder, if it can be improved at all ...}
    sent: "2016-07-14T13:43:31.933Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578795efe4375c9212d342ad"
    text: {News scroller source is here - quite short - http://2zone.cz/pekr/news-scroller-red.red}
    sent: "2016-07-14T13:38:55.358Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578795c38423d08424255279"
    text: {@qtxie I know it might not be your priority, so just a pointer. Sometimes ppl are reporting, that GUI flickers. I ported my old R2/R3 news scroller short script to Red. The code might NOT be optimal usage of the GUI engine, so sorry, if I messed things. The script is short and basically uses a long base face, placed at the right border of the screen, so scroll to the left by changing its x coordinate. When I set the base face transparent, I can see rather smooth experience (well, with few slow downs/speed ups, but the text is readable). But then I removed the bg color transparency and got the following experience: http://2zone.cz/pekr/red-news-scroller-flicker.mp4 (Win10 here)}
    sent: "2016-07-14T13:38:11.733Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57878995196179690ecd6692"
    text: "My parser works, but my builder crashes.) "
    sent: "2016-07-14T12:46:13.931Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "5787889a196179690ecd52dc"
    text: "@Zamlox nice! :-)"
    sent: "2016-07-14T12:42:02.030Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
)#(
    id: "57878844196179690ecd4f5a"
    text: {@xqlab for xml parser in Red have a look at: https://github.com/Zamlox/red-tools/tree/master/xml}
    sent: "2016-07-14T12:40:36.701Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5787871f9f79ee4f2ba490f6"
    text: {```^/ to-string: func[b return: [string!]][append copy "" b]^/```}
    sent: "2016-07-14T12:35:43.834Z"
    editedAt: "2016-07-14T12:37:52.199Z"
    v: 4
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5787865c196179690ecd3b65"
    text: ""
    sent: "2016-07-14T12:32:28.912Z"
    editedAt: "2016-07-14T12:37:07.914Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57878639d11cd2881211e405"
    text: {```^/to-block: func[b return: [block!]][append copy [] b]^/```}
    sent: "2016-07-14T12:31:53.700Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5787862b3cb52e8b24ac7b14"
    text: "@xqlab "
    sent: "2016-07-14T12:31:39.262Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578785f9141a2f8a6b99afb2"
    text: {You have to do some code translations. It's  really not new between Rebol and Red. Did you have a bad day? ;-)}
    sent: "2016-07-14T12:30:49.510Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578785f89f79ee4f2ba483b0"
    text: {Well, hopefully 0.6.2 is some 1-2 months away ... IIRC, Oldes did some TO implementations long time ago, but it was not accepted back then. Maybe it could be used as an interim solution? But - I don't know detials, you would have to ask Oldes .... https://trello.com/c/lZpYCBtT/99-to-action-support}
    sent: "2016-07-14T12:30:48.564Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578785423c5129720e1d5563"
    text: {I have a xml library in Rebol2 and I can not transfer it to Red.}
    sent: "2016-07-14T12:27:46.558Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "578784b74db4a6900bfc2c95"
    text: {@xqlab what is the relationship between your 2 complaints ?}
    sent: "2016-07-14T12:25:27.870Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57878400d11cd2881211d346"
    text: "So I will wait"
    sent: "2016-07-14T12:22:24.357Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "578783d0d11cd2881211d2ad"
    text: {neither load or form are sufficient  as ^/red>> form <1>^/produces^/== "<1>"^/instead of "1"}
    sent: "2016-07-14T12:21:36.921Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "578780d83c5129720e1d2114"
    text: {@xqlab In the meantime, use respectively `load` and `form` to achieve such conversions.}
    sent: "2016-07-14T12:08:56.647Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57877d39d11cd28812117ad3"
    text: {https://trello.com/c/wJRJhxBz/150-0-6-2-libred -it's there for 0.6.2}
    sent: "2016-07-14T11:53:29.967Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57877cd3d11cd28812117703"
    text: {yes. but generally TO conversions are not done yet, though those are scheduled for one of the next releases ...}
    sent: "2016-07-14T11:51:47.431Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57877c90d11cd288121173ab"
    text: {will we get  as in Rebol2 ?^/^/>> to block! "1"^/== [1]^/>> to string! [1]^/== "1"^/^/Red^/red>> to block! "1"^/*** Script Error: TO cannot convert block! from: 1^/*** Where: to^/red>> to string! [1]^/*** Script Error: to does not allow block! for its type argument^/*** Where: to^/^/}
    sent: "2016-07-14T11:50:40.215Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "57874c4a4217a98876002aaa"
    text: ";-)"
    sent: "2016-07-14T08:24:42.781Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57874c2dfd5e40f7717e6fa9"
    text: {@dockimbel ^/> parse files [collect any [ keep into [thru %.red ~~end~~] | skip ]]}
    sent: "2016-07-14T08:24:13.153Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578749ba3c5129720e1a7935"
    text: "@dockimbel of course it's fun :) Cool example ;)"
    sent: "2016-07-14T08:13:46.243Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5787494f8423d0842421688e"
    text: "Parse is fun. ;-)"
    sent: "2016-07-14T08:11:59.031Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57874918914c51592b06319b"
    text: {@Zamlox Good one. Here's an alternative Parse approach relying on `into` to sub-parse the files:^/```lisp^/parse files [collect any [ keep into [thru %.red end] | skip ]]^/```}
    sent: "2016-07-14T08:11:04.112Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5787481d3cb52e8b24a97471"
    text: {@Peristyle you can try also to use ```parse``` like:^/```^/red>> parse read %./ [collect any [ set value skip if ( find value %.red ) keep (value) | skip ]]^/== [%svg.red %xml.red]^/```}
    sent: "2016-07-14T08:06:53.599Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5787477b8423d0842421552f"
    text: {```lisp^/remove-each file files [%.red <> suffix? file]^/```}
    sent: "2016-07-14T08:04:11.185Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57874732914c51592b0624f0"
    text: {@Peristyle @rebolek Use the `suffix?` function for that purpose. We'll have `filter` at some point, though you can use `remove-each` in the meantime:}
    sent: "2016-07-14T08:02:58.273Z"
    editedAt: "2016-07-14T08:03:31.968Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578745928423d08424214336"
    text: "That works too"
    sent: "2016-07-14T07:56:02.354Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "5787457f3c5129720e1a3f36"
    text: {Anyways, after debugging pretty much everything. ^/```^/filter [elem %.red] read what-dir^/``` ^/Will list every file containing .red in the active directory, if one has already implemented filter and elem}
    sent: "2016-07-14T07:55:43.445Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "578745778bd95af005655dde"
    text: {@Peristyle ^/> How would one filter through a list of files for those of a specific extension? ^/^/```^/red>> files: read %./^/== [%all-tests.txt %append-test.red %binding-test.red %bitset-test.red %bugs-test.red %case-folding-test.red %c...^/red>> foreach file files [if equal? %txt last split file #"." [print file]]^/all-tests.txt^/== none^/red>> ^/```}
    sent: "2016-07-14T07:55:35.300Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "578744cfd11cd288120eb67d"
    text: {God, 'var and :var in function decs are the devil.}
    sent: "2016-07-14T07:52:47.363Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "578738a89f79ee4f2ba10e48"
    text: {How would one filter through a list of files for those of a specific extension? }
    sent: "2016-07-14T07:00:56.895Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "5787341ad11cd288120df835"
    text: {That's an important case to consider Iosif. I love using the same names when I can, though sometimes I'll hide them because we have to use names that are limited by other systems.}
    sent: "2016-07-14T06:41:30.043Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57873343e4375c9212ce7575"
    text: "I'm "
    sent: "2016-07-14T06:37:55.759Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "578731aa8423d08424204964"
    text: {@greggirwin In my case I wanted to create objects with same name as some tags within SVG and it looks like few of them has same name as some Red actions or natives. As workaround I named those objects differently but I added some extra code to map tag name with object name.}
    sent: "2016-07-14T06:31:06.736Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5787206ae4375c9212cda5b5"
    text: {@Zamlox, when I found Rebol, I did quite a bit of what I thought was clever re-use of standard names. It ended up not being as helpful as I thought. Sometimes I still *really* want a certain word but, if the compiler is going to complain, it will just lead to creative naming conventions I imagine.}
    sent: "2016-07-14T05:17:30.086Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57871cd9e4375c9212cd7ab4"
    text: "@dockimbel all right. Thanks."
    sent: "2016-07-14T05:02:17.032Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57871c0cd11cd288120cff26"
    text: {@Zamlox The compiler doesn't allow you to redefine native and action names. We might allow it in the future, though, if not too costly for the current compiler, otherwise, it will be for Red 2.0.}
    sent: "2016-07-14T04:58:52.384Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578719833c5129720e187407"
    text: {when I compile this:^/```^/elem: object [^/    set: func [][]^/]^/```^/I got:^/```^/*** Compilation Error: attempt to redefine a keyword: set^/```^/although context of ```set``` is ```elem```. Running with interpreter works ok.}
    sent: "2016-07-14T04:48:03.776Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5786839ee4375c9212c6d08e"
    text: {Well, my "trick" was to hide (initial placement) the scroll text at the x-size of the windows + 1. If you have a multimonitor screen, in fact, when you make a print screen, you will realise, it is just one bitmap. So chances are, that it gets visible on the secondary monitor ....}
    sent: "2016-07-13T18:08:30.385Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57866c7c196179690ebf4eff"
    text: "Take out the `wait` too."
    sent: "2016-07-13T16:29:48.735Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57866c19914c51592bfb8ad1"
    text: {If you make the text not transparent, it goes much faster, but then hangs at times here.}
    sent: "2016-07-13T16:28:09.251Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57866ba68423d0842416c2ae"
    text: "Happens once the text hits the left border."
    sent: "2016-07-13T16:26:14.926Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57866b743cb52e8b249e9886"
    text: {It's interesting, as I have multiple monitors, the text appears *at times* on the monitor to the right, like a pre-viz for what's to scroll on. }
    sent: "2016-07-13T16:25:24.253Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57866b28e4375c9212c55e2d"
    text: {Thanks a lot! Will play with that. Maybe in the meantime, during the coffee break, @qtxie adds some double buffering or something like that, so that we can have an Amiga experience :-)}
    sent: "2016-07-13T16:24:08.800Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57866aea914c51592bfb72e5"
    text: {Yes, the R3 version speeds across the screen, but jitters here.}
    sent: "2016-07-13T16:23:06.101Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57866aa18423d0842416a906"
    text: "ah, actually not ..."
    sent: "2016-07-13T16:21:53.216Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57866a96e4375c9212c559fa"
    text: {in your above example, you also deleted a `win`for the layout}
    sent: "2016-07-13T16:21:42.197Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57866a7f196179690ebf26c0"
    text: {thanks for your help, though so far it does not scroll here and complaints about the backdrop}
    sent: "2016-07-13T16:21:19.510Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57866a6e8423d0842416a81a"
    text: "AH, I get it now. :^^\"
    sent: "2016-07-13T16:21:02.906Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57866a63196179690ebf2441"
    text: "have to go to the football match :-)"
    sent: "2016-07-13T16:20:51.807Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57866a5a9f79ee4f2b96ef7f"
    text: {do you run the r3 console with the r3 version? news-scroller-r3.r?}
    sent: "2016-07-13T16:20:42.923Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57866a33d11cd2881203c34c"
    text: "Just shows me an R3 console. "
    sent: "2016-07-13T16:20:03.710Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5786699d9f79ee4f2b96e44e"
    text: {ok, to compare with R3 - http://2zone.cz/pekr/view13.exe}
    sent: "2016-07-13T16:17:33.778Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "578669953c5129720e0fd2b5"
    text: {If you leave `auto-sync` on, you can remove `show win`.}
    sent: "2016-07-13T16:17:25.719Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578669393c5129720e0fcec3"
    text: {```^/Red [^/   Title: "Simple news scroller"^/]^/^/;system/view/auto-sync?: no^/^/screen-size: system/view/screens/1/size^/news-bottom-offset: 0x100^/news-height: 0x100^/^/message: "Simple news scroller. Who makes me faster and smoother? ..."^/^/;--- style for draw dialect^/bold64: make font! [style: 'bold size: 64 color: white]^/^/;--- just to calculate text size ....^/txt: make face! compose [size: 3000X200 text: (message)]^/txt/font: make font! [style: 'bold size: 64 color: white]^/text-size: size-text txt^/^/^/win: view/options/flags/no-wait compose/deep [^/^-backdrop green^/^/^-;--- we place the text behind the right border of the screen ....^/^-at (as-pair screen-size/x 10)^/^/^-news: base 3000x200 0.255.0.255 draw [font bold64 text 0x0 (message)]^/^/][^/^-size: as-pair screen-size/x news-height/y^/^-offset: as-pair 0 (screen-size/y - news-bottom-offset/y - news-height/y)^/][no-border]^/^/forever [^/^-wait 0.001^/^-news/offset: news/offset - 1x0^/^-if (news/offset/x + (first text-size)) < 0 [news/offset/x: screen-size/x]^/^-do-events/no-wait^/^-show win^/]^/```}
    sent: "2016-07-13T16:15:53.317Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578667e23cb52e8b249e5d55"
    text: {Hmm, runs with some old view13 here, sorry for that}
    sent: "2016-07-13T16:10:10.432Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578667669f79ee4f2b96b7ab"
    text: "The first one works under R2. I'll look at that."
    sent: "2016-07-13T16:08:06.301Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578667383cb52e8b249e500d"
    text: {```^/** Script error: expected command! not font^/** Where: size-text do either either either -apply-^/** Near: size-text txt win: make gob! compose [^/    size: (to-pair to...^/```}
    sent: "2016-07-13T16:07:20.371Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5786670d914c51592bfb2ce4"
    text: "Doesn't run under R3 for me here Petr."
    sent: "2016-07-13T16:06:37.015Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578666923cb52e8b249e438e"
    text: {Never mind. Will continue, once at home. Its a news scroller,  like in tv :-)}
    sent: "2016-07-13T16:04:34.742Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57866680914c51592bfb21e4"
    text: {:point_up: [July 13, 2016 1:36 AM](https://gitter.im/red/red?at=5785ef86064f8287072cc36e) Also, @pekr , if it wasn't clear, my `for` func supports *all* those interface models in one. }
    sent: "2016-07-13T16:04:16.895Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578665de9f79ee4f2b969713"
    text: {I'll take a look when I get a chance Petr. We don't have a regular `scroller/scrollbar` style yet, but maybe your code doesn't use that.}
    sent: "2016-07-13T16:01:34.774Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578662ecd11cd28812031e47"
    text: {R2 version: http://2zone.cz/pekr/news-scroller-r2.r , R3 version (much faster): http://2zone.cz/pekr/news-scroller-r3.r .... to get the idea of how it is supposed to work :-)}
    sent: "2016-07-13T15:49:00.058Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578662a23cb52e8b249dffef"
    text: {I calculate the screen, offset, display borderless news ribbon and place the text behind the right screen border. Then it is supposed to appear from right, scroll to left ...}
    sent: "2016-07-13T15:47:46.141Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5786627a3cb52e8b249dfc3a"
    text: {Here's the code - http://2zone.cz/pekr/news-scroller-red.red}
    sent: "2016-07-13T15:47:06.584Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578662743c5129720e0f602a"
    text: {@greggirwin as you are a View/VID guru now :-) I need to move quickly. I ported (in a much hurrying and primitive mode) my old R2/R3 test of a news scroller. The intent is to run them in parralel and compare. It basically displays, but does not animate}
    sent: "2016-07-13T15:47:00.097Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578661f2914c51592bfadab4"
    text: {I think Rebol split docs too. The View system will be too low level for some people who just want to start with simple things.}
    sent: "2016-07-13T15:44:50.889Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57866184d11cd28812030c21"
    text: {For now, I'm either composing or setting a word to the values, which is sometimes clearer, though not inline. `view/options` should work as in R2, but different opts available. For other window options, you can layout first, then set actors and such. ^/```^/ACTOR: func [body [block!]][func [face [object!] evt [event!]] body]^/^/canvas: none^-^-^-^-^-^-^-^-^-; Needed for compiler right now^/^/win: layout/tight [^/^-size win-size^/^-origin 0x0^/^-canvas: base ...^/]^/win/actors: context [^/^-on-resize:   ACTOR [...]^/^-on-resizing: ACTOR [...]^/^-on-resizing: ACTOR [...]^/]^/```}
    sent: "2016-07-13T15:43:00.532Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5786603d196179690ebe8894"
    text: {As for docs, my take is, when trying to look at some examples, that it is a bit confusing. I would move the whole View/Face types into the VID. I do remember old View R2 docs, and it contained mostly a pure View coding, objects, window hierarchy. On the other hand, I was looking for styles, and was not able to find them in VID docs ... felt strange ...}
    sent: "2016-07-13T15:37:33.992Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57865fa2d11cd2881202f4c1"
    text: {Hmm, do we allow direct setting of object values? Something like `with`or `options`?}
    sent: "2016-07-13T15:34:58.033Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57865aebd11cd288120287aa"
    text: {Trying to port my R2/R3 news scroller, I need the following VID code to work `at (as-pair screen-size/x 10)`. I can compose a layout block, just wonder why R2/R3 don't need that?}
    sent: "2016-07-13T15:14:51.009Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57865a693c5129720e0ebce7"
    text: "View nor Layout don't evaluate parens?"
    sent: "2016-07-13T15:12:41.535Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5786529f3cb52e8b249cddea"
    text: "Evil it is. ;-)"
    sent: "2016-07-13T14:39:27.739Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578652468423d0842414bfc3"
    text: {@dockimbel ok, I see. Evil ```function``` :) Thanks.}
    sent: "2016-07-13T14:37:58.531Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "578650ff914c51592bf9a932"
    text: {I find it more and more annoying, and hard to figure out when an unexpected behavior occurs because of it. `func` is at least predictable and scoping-related issues are easier to spot, because the specification is explicit in the code.}
    sent: "2016-07-13T14:32:31.729Z"
    editedAt: "2016-07-13T14:34:03.091Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5786509ed11cd2881201b19e"
    text: {@Zamlox You got caught by the make-setwords-local-by-default behavior of `function` (I did too today). You need to declare `buffer` as an extern (`function [... /extern buffer]`), otherwise it will be captured as local (because you use it in set-word form inside the function's body).}
    sent: "2016-07-13T14:30:54.407Z"
    editedAt: "2016-07-13T14:35:52.806Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578641e3c9b49c1d6f25241c"
    text: {It works also if I replace ```buffer: head-buffer``` with ```set 'buffer head-buffer```}
    sent: "2016-07-13T13:28:03.411Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57863cd01ca34a944e0ea420"
    text: {Is this a bug ?^/```^/a: object [^/    head-buffer: buffer: make block! 4096^/    rule: [^/        skip ( process 'ATTR 1 2)^/    ]^/    process: function [ type [ word! ] value-1 value-2 ][^/        switch type [^/            END [^/                buffer: head-buffer^/                clear buffer^/            ]^/            ATTR [^/                prin "buffer: " probe buffer^/                append buffer reduce [ value-1 value-2 ]^/            ]^/        ]^/    ]^/    test: function [ dummy ] [^/        parse dummy rule^/    ] ^/]^/a/test "abcdef"^/```^/```^/buffer: none^/*** Script Error: append does not allow none! for its series argument^/*** Where: append^/red>> ^/```^/```buffer``` shouldn't be ```none```^/If I comment out ```buffer: head-buffer``` in END section, then it's ok.}
    sent: "2016-07-13T13:06:24.569Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57863b1a3eaf66535e95d930"
    text: {He even thought about rename issue! to key-word!, according to this [article](http://www.rebol.net/r3blogs/0338.html) .}
    sent: "2016-07-13T12:59:06.060Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "57863a9f064f828707302925"
    text: {Carl talked about issue here: [Rethinking the issue datatype](http://www.rebol.net/r3blogs/0108.html )}
    sent: "2016-07-13T12:57:03.892Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "578638a37aeb080527c909ff"
    text: {Making issue a string will make it not a constant anymore. There are some pros and cons.}
    sent: "2016-07-13T12:48:35.609Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "5786389ab79455146fb1fd21"
    text: {Issue! inherits from symbol!, like word!, but cannot be bound.}
    sent: "2016-07-13T12:48:26.387Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578637c159cfbd4c5e982982"
    text: {In the current design of Red, Issue has symbol but doesn't have context. Which makes issue less like a word, more like a "constant string". A constant string can only be used to compare, and cannot be modified.}
    sent: "2016-07-13T12:44:49.724Z"
    v: 1
    author: "56b12611e610378809bf8fd4"
) #(
    id: "5786363759cfbd4c5e981aa6"
    text: {`issue!` in Red is a `any-word!` as in Rebol3. Though, we are thinking about bringing back issue-as-string somehow.}
    sent: "2016-07-13T12:38:15.183Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57863486bdafd19107848037"
    text: {My fault. It seems that issue! does not belong to any-string! as in Rebol2.}
    sent: "2016-07-13T12:31:02.156Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "5786206bc9b49c1d6f2314df"
    text: {You mean matching typesets? It already supports it:^/```lisp^/red>> parse ["a" %a <a>][some any-string!]^/== true^/```}
    sent: "2016-07-13T11:05:15.762Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57861ed159cfbd4c5e96fee3"
    text: {Will parse get the feature to match datatypes like any-string! ?}
    sent: "2016-07-13T10:58:25.665Z"
    editedAt: "2016-07-13T10:59:03.320Z"
    v: 2
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "578612417aeb080527c6ff9a"
    text: "@dockimbel nice trick ;)"
    sent: "2016-07-13T10:04:49.753Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5786111db79455146fb03aa8"
    text: {```lisp^/red>> a: [1 [2 3]]^/== [1 [2 3]]^/red>> a/2: insert/only a/2 a^/== [2 3]^/red>> a^/== [1 [2 3]]^/red>> b: first next a^/== [2 3]^/red>> b/-1^/== [1 [2 3]]^/```^/}
    sent: "2016-07-13T09:59:57.446Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578610e8064f8287072e2eac"
    text: {@dockimbel all right. I was thinking at the same solution but I thought maybe there is a function and I don't know about. Thanks.}
    sent: "2016-07-13T09:59:04.524Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "578610967aeb080527c6f0aa"
    text: {@Zamlox There's no backreference stored by default (as a series can be referenced by many values), but you can save it somewhere. I sometimes use hidden headers in blocks for such purpose.}
    sent: "2016-07-13T09:57:42.808Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57860fe31ca34a944e0c62cf"
    text: {given following sequence:^/```^/red>> a: [1 [2 3]]^/== [1 [2 3]]^/red>> b: first next a^/== [2 3]^/```^/is there a function which applied on ```b``` will give as result ```a``` ?}
    sent: "2016-07-13T09:54:43.051Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57860eec3eaf66535e938da3"
    text: "ok I'll keep it with @qtxie .. :-)"
    sent: "2016-07-13T09:50:36.805Z"
    editedAt: "2016-07-13T09:51:09.291Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57860ec53eaf66535e938d0f"
    text: {actually `call/console/wait` will still stream results, the difference is that u get a status code after it finish.}
    sent: "2016-07-13T09:49:57.424Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57860d8659cfbd4c5e963c41"
    text: {@x8x I'm not the one working on CALL, you should send your questions to @qtxie.}
    sent: "2016-07-13T09:44:38.868Z"
    editedAt: "2016-07-13T09:48:32.075Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57860cddbdafd191078284f7"
    text: {me too.. but maybe better leave users choose than enforce `/wait` for `/console`. Enforcing it would prevent misunderstandements thought.}
    sent: "2016-07-13T09:41:49.372Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57860c76c9b49c1d6f220a54"
    text: "@x8x No."
    sent: "2016-07-13T09:40:06.180Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57860c3bbdafd19107828027"
    text: {@dockimbel can u think of a use case of calling `call` with `/console` without `/wait` ?}
    sent: "2016-07-13T09:39:07.611Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57860c27bdafd19107828007"
    text: {If you want to keep it compatible with R2, you can just add the iterator words manually to `/local`.}
    sent: "2016-07-13T09:38:47.477Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57860bda3eaf66535e936f42"
    text: {Thank you doc! I did.  It is not compatible with R2 now but no problem.^/I didn't know that `function` captures iterator words. Good to know! Thanks.}
    sent: "2016-07-13T09:37:30.249Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57860a4d7aeb080527c6a26d"
    text: "@x8x Right, I just checked on my Linux image. ;-)"
    sent: "2016-07-13T09:30:53.177Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57860a3d3eaf66535e935b5a"
    text: {@endo64 Nice. You should rather use `function` is you want your iterator words to be captured, as there's no local context so far for them in Red.}
    sent: "2016-07-13T09:30:37.863Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578609bfbdafd191078265c9"
    text: {That complicated part is for "pick the shorter one for the loop over and return the other one".}
    sent: "2016-07-13T09:28:31.459Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
)#(
    id: "57851abf1ca34a944e010b61"
    text: {@dockimbel sorry if I am completly stupid, but should the following code work? (works in R3, uses to/thru multiple):^/```^/red>> parse "this is the test" [copy text to ["." | end] (print text)]^/== false^/```^/}
    sent: "2016-07-12T16:28:47.661Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57851298b79455146fa445c0"
    text: {Parsing using tags is now properly supported:^/```lisp^/red>> parse read http://www.red-lang.org [thru <title> copy txt to </title>]^/== false^/red>> txt^/== "Red Programming Language"^/```}
    sent: "2016-07-12T15:54:00.905Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578509cb59cfbd4c5e89cdc0"
    text: {Missing %tags must have been the issue. Builds now. Thanks all!}
    sent: "2016-07-12T15:16:27.992Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5784fc33064f82870720a21d"
    text: {yes already done it - thanks, sorry for the false alarm .}
    sent: "2016-07-12T14:18:27.166Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5784fbfe1ca34a944eff398a"
    text: {You should be able to whitelist the files that are wrongly detected in AVG, so it won't annoy you with it anymore.}
    sent: "2016-07-12T14:17:34.089Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5784fbbf3eaf66535e86406b"
    text: {@dockimbel  Yes i realise that now - I use AVG professional version - It  does look like an avg problem. }
    sent: "2016-07-12T14:16:31.148Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5784f45c3eaf66535e85c5e8"
    text: {@justjenny Most anti-virus have poor heuristics for detecting unknown threats, which results sometimes false positives with current Red's toolchain. Our build backends run on Unix, not Windows, so, it's extremely unlikely for them to get a Windows virus that would be transmitted to the generated executables. BTW, which AV are you using?}
    sent: "2016-07-12T13:45:00.736Z"
    editedAt: "2016-07-12T13:45:37.055Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5784ee35c9b49c1d6f142860"
    text: {Tha happens sometimes. It is advised to report to the AV company and ask for a whitelisting, as it is a false positive reaction ...}
    sent: "2016-07-12T13:18:45.636Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5784e9737aeb080527b852d9"
    text: {Hi,  was looking at the reactive spreadsheet on the Red homepage, I downloaded the  prebuilt console(version 247 kb) - my anti-virus is warning me it has 'IDP.ARES.Generic' and quarantines it. Not sure  you know about it?}
    sent: "2016-07-12T12:58:27.346Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5784bfbf064f8287071d82a5"
    text: {I just mentioned Eve here like two days ago, and now we have people from it here, nice :)}
    sent: "2016-07-12T10:00:31.307Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5784baef3eaf66535e82f132"
    text: {Cool stuff guys, I just checked on Lightable and Chris Granger'S Eve HyperLoop talk. Seems so similar to the principles Rebol and Red authors seem to follow!}
    sent: "2016-07-12T09:39:59.230Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5784b0ec59cfbd4c5e850be5"
    text: "how do you do that?"
    sent: "2016-07-12T08:57:16.037Z"
    v: 1
    author: "5784aa88c2f0db084a229500"
) #(
    id: "5784b0d959cfbd4c5e850bcb"
    text: "Let's switch to private chat."
    sent: "2016-07-12T08:56:57.766Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5784b0ab7aeb080527b59dab"
    text: {I follow Chris Granger's work since Lightable. ;-)}
    sent: "2016-07-12T08:56:11.853Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5784b04e7aeb080527b59d07"
    text: {@CodingFiend_twitter Hello, nice to meet you. I know and follow the work on Eve. I just checked Beads, sounds exciting, the pitch on [Angel.co](https://angel.co/beads-1) could be pretty much our pitch too. ;-) I would be glad to know more about it. I am all for such informal association as I see some common area of research in our respective projects. I plan to come to SF this summer if possible (though we have a heavy coding schedule, so not sure yet when precisely).}
    sent: "2016-07-12T08:54:38.982Z"
    editedAt: "2016-07-12T08:55:45.137Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5784b049c9b49c1d6f1122a9"
    text: {The Eve team led by Chris Granger, is a VC funded project,  which started out with the purpose of making a new general purpose next gen language, but lately has been working exclusively on graphical tools where you program using a natural language front end for database queries, with lots of dataflow aspects to their project. They do have an interior language, which doesn't seem like it has a published grammar yet. My Beads project is a deductive language, and the reason i bumped into Red is that your latest addition of automatic recalculation does intersect with the deductive model. I consider this latest addition to be one of the greatest things you have added to the Red language. Anyway you are a busy guy, and i just wanted to touch base and connect so that the three team leaders each know each other exists.}
    sent: "2016-07-12T08:54:33.388Z"
    v: 1
    author: "5784aa88c2f0db084a229500"
) #(
    id: "5784af45b79455146f9f09c4"
    text: {i see the google browser got too clever for its own good when viewing this page and translated it from french... which has hilarous results.}
    sent: "2016-07-12T08:50:13.852Z"
    v: 1
    author: "5784aa88c2f0db084a229500"
) #(
    id: "5784aeb87aeb080527b58221"
    text: "I can't see anything like that here ..."
    sent: "2016-07-12T08:47:52.399Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5784ae97c9b49c1d6f1111da"
    text: {why did the chat room insert the words "expired" in the front of my word Beads or Eve?}
    sent: "2016-07-12T08:47:19.775Z"
    v: 1
    author: "5784aa88c2f0db084a229500"
) #(
    id: "5784ae12c9b49c1d6f1101e9"
    text: "Welcome :-)"
    sent: "2016-07-12T08:45:06.451Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5784abcc064f8287071cc7e5"
    text: {Dear Nenad, I wanted to introduce myself, i am working on a new language called Beads, and  i know another team in San Francisco that is working on a language called Eve. As designing a new general purpose language is a daunting task, i thought that we should form an informal association, and get to know each other. If you study the history of art and music, all the pioneers knew each other to some extent. 99.9% of people will use existing tools, only a few determined and possibly reckless people dare to build their own. I am located in Oakland, CA, and evidently you are in Xiamen, so it might be a while before we have lunch. If you do happen to come here to California for some reason, please let me know.^/}
    sent: "2016-07-12T08:35:24.648Z"
    v: 1
    author: "5784aa88c2f0db084a229500"
) #(
    id: "5784973859cfbd4c5e84049a"
    text: "I mean - why `help`reports both cases?"
    sent: "2016-07-12T07:07:36.150Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5784971f1ca34a944efa0f8a"
    text: {just curious, probably correct, but do we need to expose, that Red is case insensitive?^/^/```^/red>> type? a: <afadfa afda af as >^/== tag!^/red>> help tag!^/     a               :  <afadfa afda af as >^/     A               :  <afadfa afda af as >^/```}
    sent: "2016-07-12T07:07:11.321Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5784954b064f8287071b9388"
    text: "@x8x Good catch! You can make a PR to add it."
    sent: "2016-07-12T06:59:23.967Z"
    editedAt: "2016-07-12T06:59:36.219Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57848b44c9b49c1d6f0f19ce"
    text: {@greggirwin `red/build/includes.r` is missing `%tags.red`}
    sent: "2016-07-12T06:16:36.595Z"
    editedAt: "2016-07-12T06:16:54.083Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57848b147aeb080527b3b076"
    text: "`blah` is to save path space. :^^)"
    sent: "2016-07-12T06:15:48.980Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57848afabdafd191076fb62d"
    text: {Build still failing here (assuming Master). Late here. Will investigate tomorrow.^/```^/*** Loading Error: file access error: %datatypes/tag.reds^/*** in file: %/<blah>/GitHub/red/build/bin/datatypes/time.reds^/*** at line: 100^/```}
    sent: "2016-07-12T06:15:22.020Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5784829559cfbd4c5e831327"
    text: {Will CALL be integrated into the default gui-console, without the need to include it?}
    sent: "2016-07-12T05:39:33.295Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57847a96b79455146f9ce276"
    text: {@greggirwin Does your console building still fail?}
    sent: "2016-07-12T05:05:26.900Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57846e3d1ca34a944ef86c30"
    text: ""
    sent: "2016-07-12T04:12:45.754Z"
    editedAt: "2016-07-12T04:13:30.442Z"
    v: 3
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57843a07b79455146f9a77e7"
    text: "Console builds fine here with tag!."
    sent: "2016-07-12T00:29:59.129Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5783d8e459cfbd4c5e7b7305"
    text: {Must be *really* fresh. Fails building consoles here, so likely very much in the works.}
    sent: "2016-07-11T17:35:32.866Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5783d7a4064f828707133087"
    text: {Welcome to `tag!` datatype. In `tag.reds` I find some remnants of `url.reds` -  surely an oversight.}
    sent: "2016-07-11T17:30:12.276Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57836fc1b79455146f9019d9"
    text: "Thanks."
    sent: "2016-07-11T10:06:57.230Z"
    editedAt: "2016-07-11T10:07:00.080Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57836a5eb79455146f8fd32c"
    text: "done"
    sent: "2016-07-11T09:43:58.499Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "578360d4c9b49c1d6f00dcfa"
    text: "@xqlab Good catch, please open a ticket for it."
    sent: "2016-07-11T09:03:16.829Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578360723eaf66535e721c98"
    text: {^-x: 'a^/^-parse [a ] [ to x ]^/gives an infinite loop}
    sent: "2016-07-11T09:01:38.225Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "57836044b79455146f8f5ddb"
    text: " ^-```x: 'a^/^-parse [a ] [ to x ]^/    ^-``` "
    sent: "2016-07-11T09:00:52.395Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "57835f90c9b49c1d6f00d3f1"
    text: {If you think you can handle that, we can provide an empty date! implementation for you to fill, starting with parsing rules.}
    sent: "2016-07-11T08:57:52.982Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57835f55064f8287070caf3b"
    text: {@Peristyle Correct, and also we need to convert the `Scan_Date()` function to lexer Parse rules.}
    sent: "2016-07-11T08:56:53.884Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57834ed11ca34a944ee9acfa"
    text: "t-date.c?"
    sent: "2016-07-11T07:46:25.861Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "57834b23b79455146f8e5055"
    text: {@Peristyle If you are fluent in Red/System and low-level programming, you could port the Rebol3 C code for the date! type to Red.}
    sent: "2016-07-11T07:30:43.850Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578349b0b79455146f8e3800"
    text: {I'd be willing to help with date!, but I have no idea how to}
    sent: "2016-07-11T07:24:32.108Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "578347fdc9b49c1d6fffd8c0"
    text: {Note to self: do not put spaces in front of refinements. Thanks for the help Nenad}
    sent: "2016-07-11T07:17:17.532Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "5783458f1ca34a944ee9400d"
    text: {@Peristyle We have `time!` support but no `date!` yet, so `now/time` works, but not `now` yet.}
    sent: "2016-07-11T07:06:55.268Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5783415f7aeb080527a423a1"
    text: {It needed parens on the i % 5 =0 and it took me a bit to figure that out. On a side note,  what is up with now: ? returns info on it, but using it yields an internal error. Is it not fully finished yet?}
    sent: "2016-07-11T06:49:03.864Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "57833f18bdafd191075ed88e"
    text: {@Peristyle Glad you have fun with it. ;-) Why the "Uhh?"?}
    sent: "2016-07-11T06:39:20.283Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57833e96bdafd191075ed429"
    text: "@WiseGenius Worth a ticket."
    sent: "2016-07-11T06:37:10.166Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57833c157aeb080527a3f56a"
    text: {I wonder if it will work this time, anyways, so far red has been pretty fun^/```^/result: 0 ; Uhh?^/repeat i 999 [if (i % 3 = 0) or (i % 5 = 0) [result: result + i] ]^/print ["Result A:" result]^/^/; :^^)^/print ["Result B:" sum filter [fn [x] [(x % 3 = 0) or (x % 5 = 0)]] till 999]^/print ["Result C:" sum filter [or= mod= [3 5]] till 999]^/print ["Result D:" sum union span 3 6 . 999 span 5 10 . 999]^/```}
    sent: "2016-07-11T06:26:29.223Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "57833b701ca34a944ee8b59c"
    text: {repeat and some math was sufficient. I've been working on a little prelude to make Project Euler easier and to learn how red evaluates/scopes stuff ^/'''^/span: fn [ i s 'j n /local xs v][^/  xs: lift i repeat v (n - i) / (s - i) [append xs (s - i) * v + i ] ]^/'''}
    sent: "2016-07-11T06:23:44.800Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
)#(
    id: "57833a261ca34a944ee8aaa8"
    text: "@dockimbel ^/'''"
    sent: "2016-07-11T06:18:14.852Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "5783393d279ab12b38b27b29"
    text: "Also, `({{}})`"
    sent: "2016-07-11T06:14:21.163Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "578338e0f9cb022a33f05e05"
    text: {@dockimbel The brackets don't match properly in the second case.}
    sent: "2016-07-11T06:12:48.822Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5783386ef9cb022a33f05e00"
    text: {```^/red>> [{}]^/== [""]^/red>> [{{}}]^/[    ^/```}
    sent: "2016-07-11T06:10:54.277Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57832d78064f8287070a7804"
    text: {@Peristyle `for` is not a great match for Rebol languages, as we have several specialized alternatives (like `loop`and `repeat`) which are simpler and faster. Though, if we can come up with a better `for` than the one in Rebol2, I'm not against including it.}
    sent: "2016-07-11T05:24:08.137Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57832ccdb79455146f8cf32c"
    text: {@yoffset It's a leftover from a previous version of `list-dir`. You can submit a PR for fixing that if you wish.}
    sent: "2016-07-11T05:21:17.825Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57831a6db79455146f8c459f"
    text: {small typo - list-dir description says "...given folder or current one." , but it is only given folder.}
    sent: "2016-07-11T04:02:53.185Z"
    v: 1
    author: "57369493c43b8c601972d80b"
) #(
    id: "5782fd831ca34a944ee65ebc"
    text: "Happy to do testing, thanks for the info"
    sent: "2016-07-11T01:59:31.572Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "5782fd3759cfbd4c5e707d74"
    text: {It was problematic under Rebol, for a number of reasons. I proposed a new one, but it's a pretty dramatic change: https://github.com/red/red/wiki/REP-FOR-loop-function^/^/I can send you the source if you want, so it can get some more testing.}
    sent: "2016-07-11T01:58:15.907Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5782f69a2886c03031644ad2"
    text: {@Peristyle It's been accused of not carrying its weight.}
    sent: "2016-07-11T01:30:02.304Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "5782f2f41ca34a944ee6166a"
    text: "What's happened to for?"
    sent: "2016-07-11T01:14:28.201Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "5782bb9a7aeb0805279e9a33"
    text: {Thanks. I was going to clone them, but my std auth is failing. }
    sent: "2016-07-10T21:18:18.883Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5782b9fe7aeb0805279e8802"
    text: {[this](http://stackoverflow.com/questions/2082723/how-do-you-manage-your-gists-on-github?rq=1) suggests GistBox as a way to manage gists}
    sent: "2016-07-10T21:11:26.322Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "5782b97d7aeb0805279e865a"
    text: "That's what I use. Only 10 gists per page."
    sent: "2016-07-10T21:09:17.498Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5782b8efb79455146f88bd6a"
    text: {@greggirwin , have you used the view you get with `https://gist.github.com/{username}` ? Is that still too verbose?}
    sent: "2016-07-10T21:06:55.853Z"
    editedAt: "2016-07-10T21:08:24.229Z"
    v: 3
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "5782a545bdafd1910758c3ba"
    text: {Does anyone know if gist.github.com can be made to use a condensed view, without the code bits? I just want to see a list of my gists.}
    sent: "2016-07-10T19:43:01.847Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5782862259cfbd4c5e6baaf1"
    text: {@endo64 It's a bug introduced by today's commits, will fix it tomorrow.}
    sent: "2016-07-10T17:30:10.124Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57828382f9cb022a33f01c86"
    text: "yes"
    sent: "2016-07-10T17:18:58.464Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57827f271ca34a944ee142f4"
    text: {So one would just use a block when needing a normal list?}
    sent: "2016-07-10T17:00:23.341Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "578279037aeb0805279bf808"
    text: {`any-list?` tests membership in the typeset `any-list!` which is defined as `make typeset! [block! paren! hash!]`. There is no type `list!`.}
    sent: "2016-07-10T16:34:11.376Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57826f7e59cfbd4c5e6ab8c2"
    text: "Why is there any-list? but not list?"
    sent: "2016-07-10T15:53:34.729Z"
    v: 1
    author: "5781fa47c2f0db084a224985"
) #(
    id: "57826d20064f828707028278"
    text: {Works fine here @endo. Is that in a fresh console? 0.6.1?}
    sent: "2016-07-10T15:43:28.333Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578266341ca34a944ee03e2c"
    text: {When click on `About` menu item on GUI console it gives `Script Error: old is missing its word argument`.}
    sent: "2016-07-10T15:13:56.204Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5782655b1ca34a944ee0381c"
    text: "Thanks people"
    sent: "2016-07-10T15:10:19.736Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "5782651f064f8287070237dc"
    text: "ok"
    sent: "2016-07-10T15:09:19.409Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "578264f4ed6e99892402e102"
    text: "That, I don't know"
    sent: "2016-07-10T15:08:36.940Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578264d1bdafd1910755ce91"
    text: "Is it being used anywhere in production?"
    sent: "2016-07-10T15:08:01.300Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "578264c2279ab12b38b227c6"
    text: "Though, some people already construct demos"
    sent: "2016-07-10T15:07:46.940Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578264a6f9cb022a33f01276"
    text: {Well, it's a multi purpose language as Rebol. But the community is mainly  trying to help correct and improve internals }
    sent: "2016-07-10T15:07:18.087Z"
    editedAt: "2016-07-10T15:08:07.070Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5782643259cfbd4c5e6a3c10"
    text: "so what do you use Red for?"
    sent: "2016-07-10T15:05:22.860Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "5782642b7aeb0805279b0665"
    text: "Ok fair enough"
    sent: "2016-07-10T15:05:15.809Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "5782640ff9cb022a33f01270"
    text: {Ok, that means it's not planned before the 1.0 release. But it works fine with wine, I'm using it under Ubuntu}
    sent: "2016-07-10T15:04:47.543Z"
    editedAt: "2016-07-10T15:05:04.104Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578263ab1ca34a944ee02715"
    text: "Can't see Linux GUI anywhere in that list"
    sent: "2016-07-10T15:03:07.989Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "578263767aeb0805279af9b3"
    text: "ok"
    sent: "2016-07-10T15:02:14.540Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "57826356279ab12b38b2279f"
    text: {See https://trello.com/b/FlQ6pzdB/red-tasks-overview for planned milestones}
    sent: "2016-07-10T15:01:42.986Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5782632eed6e99892402e0c8"
    text: "We should, but I can’t tell you any ETA."
    sent: "2016-07-10T15:01:02.824Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5782630cbdafd1910755bb0d"
    text: "Will we get native GUI in Linux anytime soon?"
    sent: "2016-07-10T15:00:28.016Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "578262f62886c03031641da6"
    text: "The backend for linux GUI is not here yet"
    sent: "2016-07-10T15:00:06.318Z"
    editedAt: "2016-07-10T15:00:29.137Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578262df279ab12b38b2279a"
    text: {@logicalguy Linux GUI is not yet supported, only Windows and partially OSX.}
    sent: "2016-07-10T14:59:43.669Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "578262df279ab12b38b22798"
    text: "For gui only"
    sent: "2016-07-10T14:59:43.007Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578262cd59cfbd4c5e6a2ada"
    text: "is it a prerequisite?"
    sent: "2016-07-10T14:59:25.473Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "578262c0279ab12b38b22795"
    text: "you must have wine installed"
    sent: "2016-07-10T14:59:12.496Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578262b1064f828707021ab3"
    text: {the code is ^/Red [needs: 'view]^/view [button "Hello, world!"]}
    sent: "2016-07-10T14:58:57.605Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "5782629a7aeb0805279af55f"
    text: {Compiling to native code...^/*** Compilation Error: invalid definition for function exec/gui/GdipCreateFromHWND: [^/    graphics [GpGraphics!] ^/    return: [integer!]^/] ^/}
    sent: "2016-07-10T14:58:34.339Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "578262923eaf66535e67e527"
    text: "No I'm on linux"
    sent: "2016-07-10T14:58:26.598Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "5782626df9cb022a33f0122d"
    text: " @logicalguy are you on Windows?"
    sent: "2016-07-10T14:57:49.884Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5782621659cfbd4c5e6a2252"
    text: {Hi, I'm brand new to red and working through the examples. I'm getting an error while trying to compile a GUI example.}
    sent: "2016-07-10T14:56:22.955Z"
    v: 1
    author: "55a0f4785e0d51bd787b05dc"
) #(
    id: "578240917aeb080527996ef1"
    text: {Could be a very fun demo, creating a non-native GUI, just a couple styles, and how that could be done.}
    sent: "2016-07-10T12:33:21.782Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57824059bdafd19107540ad5"
    text: "Agreed."
    sent: "2016-07-10T12:32:25.264Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5781d356bdafd19107502421"
    text: {@greggirwin The biggest issue with Cycle.js is not the framework per se, but that they picked up something very simple as example, and turned it into a monster code. For more complex cases, processing globally events as streams is an interesting approach where FRP can provide a pretty clean solution. I plan to add event streams support at some point, and have similar reactive HOF support, though, Red should be able to achieve it in a much lighter way. I'm pretty sure you could already implement such framework for GUI events in pure Red by just adding a global event handler and creating a reactive stream out of captured events there.}
    sent: "2016-07-10T04:47:18.729Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)