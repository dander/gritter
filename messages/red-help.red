#(
    id: "59c57722177fb9fe7ef179a3"
    text: "Great! You're welcome."
    sent: "2017-09-22T20:48:34.167Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c57711b59d55b823295154"
    text: "this code works, thanks"
    sent: "2017-09-22T20:48:17.749Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c576ed210ac2692060c260"
    text: {@abdllhygt , I'm not sure what you mean. Are you saying that code works as you expect, or that you want something different?}
    sent: "2017-09-22T20:47:41.673Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c5769d210ac2692060c15b"
    text: {```text^/>> compose/only [(1 + 1) (quote (nay don't touch me))]^/== [2 (nay don't touch me)]^/```}
    sent: "2017-09-22T20:46:21.499Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c57689c101bc4e3afa28f8"
    text: {@9214, well you need to give Red some kind of clue. Ladislav wrote a func many years ago, that was a dialected composer, for this kind of need.}
    sent: "2017-09-22T20:46:01.166Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c57684b59d55b823294ee4"
    text: "thank you  @9214  @greggirwin "
    sent: "2017-09-22T20:45:56.075Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c5764832fc8b7e402e5af6"
    text: {this is that, i want code. true.^/```^/remove at ["a" "b" "c" "d"] 4^/```}
    sent: "2017-09-22T20:44:56.554Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c5763e210ac2692060c036"
    text: {and that is just plain ugly^/```text^/>> compose [(1 + 1) ([(nay don't touch me)])]^/== [2 (nay don't touch me)]^/```}
    sent: "2017-09-22T20:44:46.181Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c57616bc46472974661349"
    text: {I believe `quote` did the trick some time ago, but now it's not}
    sent: "2017-09-22T20:44:06.115Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c5760bbac826f054ebbb98"
    text: {```text^/>> compose [(1 + 1) (nay don't touch me)]^/*** Script Error: nay has no value^/*** Where: compose^/*** Stack:  ^/```}
    sent: "2017-09-22T20:43:55.600Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c575dfc101bc4e3afa26eb"
    text: {how can I protect some of the parens from `compose`?}
    sent: "2017-09-22T20:43:11.502Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c5756ac101bc4e3afa2577"
    text: "Use `help at` for more details."
    sent: "2017-09-22T20:41:14.959Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c57541210ac2692060bc2e"
    text: "`2` is the arg for `at` in the above example."
    sent: "2017-09-22T20:40:33.224Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c57526bac826f054ebb7b6"
    text: {Index. Use `remove/part` if you want to remove more than one item at a time.}
    sent: "2017-09-22T20:40:06.870Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c57511210ac2692060bb49"
    text: "@abdllhygt correct"
    sent: "2017-09-22T20:39:45.035Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c57506b59d55b82329494e"
    text: "there, 2 is value or index-number?"
    sent: "2017-09-22T20:39:34.813Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c574bccfeed2eb653db845"
    text: {@abdllhygt ^/```text^/>> remove [1 2 3]^/== [2 3]^/>> head remove at [1 2 3] 2^/== [1 3]^/```}
    sent: "2017-09-22T20:38:20.301Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c5741932fc8b7e402e4e88"
    text: "how to delete item of array?"
    sent: "2017-09-22T20:35:37.798Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c57407177fb9fe7ef16d72"
    text: "hey"
    sent: "2017-09-22T20:35:19.935Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c3aca9bc464729745db853"
    text: {@maximvl :+1:^/```text^/parse input? [^/    some [not quote 0 number!]^/    3 quote 0^/    thru end^/]^/```}
    sent: "2017-09-21T12:12:25.063Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c3abfd7b7d98d30d1f75b3"
    text: "@9214 ^^ this one is correct"
    sent: "2017-09-21T12:09:33.455Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c3abf6c101bc4e3af1ec6c"
    text: "`[not quote 0 number! 3 quote 0]`"
    sent: "2017-09-21T12:09:26.280Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c3abcd614889d47523efb7"
    text: {make sure you `skip` because `not` doesn't advance the input}
    sent: "2017-09-21T12:08:45.546Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c3abb2614889d47523ef74"
    text: "Oh right,`not`! Thanks @maximvl "
    sent: "2017-09-21T12:08:18.773Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c3ab92614889d47523eed3"
    text: "ah, then `[not quote 0 skip 3 quote 0]`"
    sent: "2017-09-21T12:07:46.255Z"
    editedAt: "2017-09-21T12:07:58.552Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c3ab79c101bc4e3af1eae9"
    text: "@maximvl `block!`, not `string!`"
    sent: "2017-09-21T12:07:21.245Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c3ab6fbc464729745db2d6"
    text: {I would make a charset with [#"1" - #"9"]}
    sent: "2017-09-21T12:07:11.711Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c3ab3fbc464729745db218"
    text: {when parsing block of integers, how could I say `[<whatever numbers not equal to zero> <3 zeroes>]` ?}
    sent: "2017-09-21T12:06:23.817Z"
    editedAt: "2017-09-21T12:12:59.300Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c2cbd27b7d98d30d1bd908"
    text: "Yes sir. Pretty much exactly what I was needing."
    sent: "2017-09-20T20:13:06.665Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c2cb917b7d98d30d1bd79b"
    text: {@gltewalt, then one of the above funcs should at least get you started, yes?}
    sent: "2017-09-20T20:12:01.432Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c2cb51bc464729745a139a"
    text: {I'm foggy at the moment, @maximvl, but @endo had something similar with CGI not long ago. `lf` is `#"^^/"` for us (#"^^J" works as well).}
    sent: "2017-09-20T20:10:57.471Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c2cb51c101bc4e3aee642e"
    text: {Isn't newline `#"^^/"` in redbol ?}
    sent: "2017-09-20T20:10:57.433Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c2cae6cfeed2eb65320c6b"
    text: "do we use some library which can affect this?"
    sent: "2017-09-20T20:09:10.018Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c2cad6bac826f054dffc1f"
    text: {do we have some special combination for a newline or something?}
    sent: "2017-09-20T20:08:54.019Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c2caa0177fb9fe7ee56239"
    text: {@greggirwin I was looking to match `all instances`. For example, sometimes folks get wild with punctuation:  `hello!!!`}
    sent: "2017-09-20T20:08:00.608Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c2ca1bb59d55b8231d7025"
    text: {they write using `self.stdin.write(_to_bytes(str + "\n"))`}
    sent: "2017-09-20T20:05:47.191Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c2c9f61081499f1f557511"
    text: {```^/user> abcABC123^/abcABC123^/```}
    sent: "2017-09-20T20:05:10.153Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c2c9e61081499f1f55748e"
    text: "while output should be "
    sent: "2017-09-20T20:04:54.031Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c2c9d2177fb9fe7ee55e25"
    text: {they write data to stdin and then they write `\n` however I don't get it inside Red:^/```^/Exception: KeyboardInterrupt()^/Output before exception:^/user> abcABC123^/Makefile:337: recipe for target 'test^^red^^step0' failed^/make: *** [test^^red^^step0] Interrupt^/```}
    sent: "2017-09-20T20:04:34.736Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c2c9ac177fb9fe7ee55dad"
    text: "I have an issue with MAL and their testing code"
    sent: "2017-09-20T20:03:56.233Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59c2c860c101bc4e3aee54cd"
    text: "Those are experimental of course."
    sent: "2017-09-20T19:58:24.446Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c2c83ecfeed2eb6531fe83"
    text: {```^/find-all: function [^/^-series [series!]^/^-value^/][^/^-collect [^/^-^-case [^/^-^-^-function? :value [^/^-^-^-^-forall series [if value series/1 [keep/only series]]^/^-^-^-]^/^-^-^-any [word? value block? value] [^/^-^-^-^-; Words are evaluated as sub-rules in Red's Parse dialect, only ^/^-^-^-^-; lit-words are matched (against words and lit-words). Sub-blocks^/^-^-^-^-; have similar issues. So if we get a word or a block, we'll find^/^-^-^-^-; it the old-fashioned way.^/^-^-^-^-forall series [if series/1 = value [keep/only series]]^/^-^-^-]^/^-^-^-'else [^/^-^-^-^-keep parse series [^/^-^-^-^-^-collect [any [thru value pos: (keep back pos)]]^/^-^-^-^-]^/^-^-^-]^/^-^-]^/^-]^/]^/e.g. [^/^-find-all "abcadaedgcax" #"a"^/^-find-all [a b c a b c a b c] 'a^/^-find-all [a b c [a] b c a b c] [a]^/^-find-all [a b c [a] b c a b c] func [v][v = 'a]^/^-; TBD paren! map!^/]^/```}
    sent: "2017-09-20T19:57:50.215Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c2c7b6b59d55b8231d649f"
    text: {```^/find-all: function [^/^-"Returns all positions in a series that match a test."^/^-series [series!]^/^-test   [any-function!] "Test (predicate) to perform on each value; must take one arg"^/][^/^-collect [^/^-^-forall series [if test series/1 [keep/only series]]^/^-]^/]^/find-all [1 2 3 4 5 6] :odd?^/find-all [1 2 3 4 5 6] :even?^/find-all [1 2 q 3 #x 4 /c 5 6] :any-word?^/```}
    sent: "2017-09-20T19:55:34.317Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c2c747b59d55b8231d62c2"
    text: {:point_up: [September 19, 2017 6:00 PM](https://gitter.im/red/help?at=59c1afab1081499f1f507eec) @gltewalt, do you want to find, e.g., all instances of `a` in a series, or search for multiple, different values? Or both? There's not a standard feature for that, but not hard to roll your own.}
    sent: "2017-09-20T19:53:43.451Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c2c6fd7b7d98d30d1bbf0a"
    text: {@ralfwenske, glad you got it working. Please keep some notes for when it comes up again. @Oldes , thanks for the new binding! I haven't ported any of my old 0MQ stuff. }
    sent: "2017-09-20T19:52:29.804Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c2394ec101bc4e3aeb52c2"
    text: {@ralfwenske let us know if you improve the binding (for example do Red version). I just made the Red/System binding as Kaj version was too old and dependent on his other code. And now is lost completely.}
    sent: "2017-09-20T09:47:58.163Z"
    editedAt: "2017-09-20T09:48:25.359Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59c2307ecfeed2eb652ed05e"
    text: "@ralfwenske :+1:  "
    sent: "2017-09-20T09:10:22.802Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59c20ba8b59d55b823197f35"
    text: {@rcqls @Oldes @PeterWAWood  Thank you guys: Success! It’s working on Mint (Linux).  In ZeroMQ.reds it is referred to as `libzmq.so.5` and it was installed into `/usr/lib/i386-linux-gnu/` . ^/For Mac I will wait patiently for Red 64-bit :smile:  however I can play now with 0MQ and Red on separate machines (Win10 and Linux).}
    sent: "2017-09-20T06:33:12.483Z"
    editedAt: "2017-09-20T06:34:07.874Z"
    v: 2
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59c1ff03bc4647297455f273"
    text: {@ralfwenske On elementaryOS (other ubuntu based linux distrib), `sudo apt-get install libzmq5:i386` installed libzmq properly. ^/BTW, are you sure to have installed ^/```^/ dpkg --add-architecture i386^/ apt-get update^/ apt-get install libc6:i386 libcurl3:i386^/```^/as mentionned in the download page of red?^/You seem to manage to install the libzmq package in 64bit. Just append `:i386` to have the i386 version. }
    sent: "2017-09-20T05:39:15.257Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "59c1f838b59d55b823193518"
    text: {http://zeromq.org/intro:get-the-software has links to lib binary distros}
    sent: "2017-09-20T05:10:16.286Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
)#(
    id: "59c1ed4d177fb9fe7ee101b8"
    text: "@gltewalt `parse`?"
    sent: "2017-09-20T04:23:41.454Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c1bbf5614889d4751b4ecc"
    text: {@rcqls Thanks for the hint. Tried on Linux: `unable to locate package`. Would you have an idea for a source (to add to /etc/apt /sources.list) or maybe where I can start searching for it?^/Or alternatively is there a *simple* way to configure and make a 32-bit lib myself (from the POSIX zeromq-4.2.2)?}
    sent: "2017-09-20T00:53:09.393Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59c1b7d7b59d55b823185211"
    text: "That could work, I use `next` sometimes "
    sent: "2017-09-20T00:35:35.174Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59c1afab1081499f1f507eec"
    text: {How can I use `find` to find multiple values?  `while`?}
    sent: "2017-09-20T00:00:43.970Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c0f5afc101bc4e3ae580ee"
    text: {@ralfwenske Have you tried something like `sudo apt-get install libzmq1:i386` ? On the macOS side, I am not surprised since almost nothing is 32bit compatible now and I am then really disappointed.}
    sent: "2017-09-19T10:47:11.880Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "59c0f1a6614889d475174f94"
    text: {But we will need 64bit support, that is true. Apple is forcing `64bit only` quite hard.}
    sent: "2017-09-19T10:29:58.544Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59c0f14d614889d475174d86"
    text: {Sorry.. I don't know than... I'm on Windows most of my time. Maybe someone from group "_on mac is everything so easier_" will help.}
    sent: "2017-09-19T10:28:29.334Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59c0f085b59d55b8231447c4"
    text: {@Oldes unfortunately no luck (I removed prior zmq):^/`Warning: zeromq: this formula has no --universal option so it will be ignored!`^/and thus same results as before.  I guess I may have to join the zeromq mailing list...}
    sent: "2017-09-19T10:25:09.546Z"
    editedAt: "2017-09-19T10:25:56.774Z"
    v: 2
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59c0e588bac826f054d6b725"
    text: {oops - I hadn't seen your 2nd answer. Will try - thanks again}
    sent: "2017-09-19T09:38:16.735Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59c0e4c97b7d98d30d12770f"
    text: {@Oldes As mentioned I was able to find the Windows libzmq.dll and it all worked fine.  My problem is that I have not been able to source a working libzmq for Mint and OSX. Feeling a little frustrated like (Carl in 2011)[http://www.rebol.com/article/0509.html] :+1:^/Thanks for trying it for me.}
    sent: "2017-09-19T09:35:05.974Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59c0e3567b7d98d30d126e4a"
    text: {@ralfwenske not tested, but you may try this: `brew install zmq --universal`}
    sent: "2017-09-19T09:28:54.653Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59c0ddd8210ac269204bf463"
    text: {Work on full-io should start soon btw. - https://trello.com/c/Iz0cl1e8/61-070-full-i-o-support (if it's not already being done in some private branch)}
    sent: "2017-09-19T09:05:28.605Z"
    editedAt: "2017-09-19T09:06:34.096Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59c0dd5cbac826f054d69114"
    text: {@ralfwenske I tried it just on Windows as is [visible in code](https://github.com/red/code/blob/master/Library/ZeroMQ/ZeroMQ.reds#L184-L185) Feel free to improve it and modify it, if you find something... anyway... it is part of the community repository.. so it's not just my code.}
    sent: "2017-09-19T09:03:24.713Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59c0b076cfeed2eb6527cd13"
    text: "You're welcome"
    sent: "2017-09-19T05:51:50.192Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c0b0617b7d98d30d117b89"
    text: "Thanks"
    sent: "2017-09-19T05:51:29.480Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c0afcf210ac269204b24a9"
    text: {It was burned into my brain to deal with relative positions, or offsets. Red is different. :worried:  A little embarrassing}
    sent: "2017-09-19T05:49:03.493Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c0af75177fb9fe7edb00fc"
    text: "Don't forget that series in Red have positions"
    sent: "2017-09-19T05:47:33.644Z"
    editedAt: "2017-09-19T05:47:42.133Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c0af5e7b7d98d30d11788c"
    text: "Ahhhhh, the head part"
    sent: "2017-09-19T05:47:10.000Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c0af10614889d4751618fd"
    text: {@gltewalt ^/```^/>> move-punctuation  "as.df"^/== "df."^/>> head move-punctuation  "as.df"^/== "asdf."^/```}
    sent: "2017-09-19T05:45:52.126Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c0aeb5c101bc4e3ae43162"
    text: "why do you think it's necessary?"
    sent: "2017-09-19T05:44:21.850Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c0ae9ac101bc4e3ae430f2"
    text: {I'm not understanding why resetting to a word is necessary}
    sent: "2017-09-19T05:43:54.533Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c0a43d7b7d98d30d114e64"
    text: {`pigify` converts to PigLatin^/```^/>> move-punctuation pigify "cat!"^/== "cay!"^/>> s: ""^/== ""^/>> move-punctuation s: pigify "cat!"^/== "cay!"^/>> s^/== "atcay!"^/```}
    sent: "2017-09-19T04:59:41.561Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c0a292cfeed2eb65279f20"
    text: "Without setting, I don't get the results I need"
    sent: "2017-09-19T04:52:34.727Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c0a23bbc464729744f84db"
    text: {```^/>> set [a b c d e] [".bear" "b.ear" "be.ar" "bea.r" "bear."]^/== [".bear" "b.ear" "be.ar" "bea.r" "bear."]^/>> move-punctuation a^/== "bear."^/>> a^/== "bear."^/>> move-punctuation b^/== "ear."^/>> b^/== "bear."^/>> move-punctuation c^/== "ar."^/>> c^/== "bear."^/>> move-punctuation d^/== "r."^/>> d^/== "bear."^/>> move-punctuation e^/== "."^/>> e^/== "bear."^/```}
    sent: "2017-09-19T04:51:07.733Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59c067b37b7d98d30d107dd9"
    text: {I suspected that it might have to do with that… The error seems to hint that I might have 64-bit versions. Can I download 32-bit versions - from where?^/Or do I have to go through these configure make mysteries :worried: ? }
    sent: "2017-09-19T00:41:23.050Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59c0664ebac826f054d4beea"
    text: {@ralfwenske Are you using 32-bit versions of ZeroMQ on macOS and Mint?}
    sent: "2017-09-19T00:35:26.663Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59c065d7b59d55b823121cd6"
    text: {I am playing with zeromq and use @Oldes ' ZeroMQ.reds implementation.^/I have setup Dropbox and a Mint, a Mac and a Win10 system. A single source allows me to test .red/.reds code immediately on those three platforms.^/^/I got to run the ZeroMQ-Hello-server / -client successfully on Win10.^/On Mint (Linux) and Mac I struggle to get the libzmq library to work:^/^/Mint:^/`./ZeroMQ-Hello-server: error while loading shared libraries: libzmq.so.5.0.0: wrong ELF class: ELFCLASS64`^/^/Mac:^/```^/macmini:native ralfwenske$ ./ZeroMQ-Hello-server ^/dyld: Library not loaded: @loader_path/libzmq.5.dylib^/  Referenced from: /Users/ralfwenske/Dropbox/os/mac/native/./ZeroMQ-Hello-server^/  Reason: no suitable image found.  Did find:^/^-/Users/ralfwenske/Dropbox/os/mac/native/libzmq.5.dylib: mach-o, but wrong architecture^/Abort trap: 6^/```^/Looking at [zeromq.org](http://zeromq.org/area:download) doesn’t make it clearer for me ^/(and reminds me to be **grateful for Carl, Nenad and all contributors efforts towards making the vision of *one executable does it all* more of a reality**).^/^/Has someone tested zeromq on Mac or Linux?}
    sent: "2017-09-19T00:33:27.101Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59bfe969210ac2692047a69e"
    text: {@alqnop ^/```text^/>> call/console "ping 8.8.8.8"^/PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.^/64 bytes from 8.8.8.8: icmp_seq=1 ttl=53 time=36.8 ms^/64 bytes from 8.8.8.8: icmp_seq=2 ttl=53 time=36.5 ms^/64 bytes from 8.8.8.8: icmp_seq=3 ttl=53 time=36.5 ms^/```}
    sent: "2017-09-18T15:42:33.953Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bfc5e67b7d98d30d0d08b0"
    text: {@alqnop `? call` helps? It's helpful if you can provide code of what you have done so far. Check also the rebol docs}
    sent: "2017-09-18T13:11:02.239Z"
    editedAt: "2017-09-18T13:11:45.165Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59bfc0427b7d98d30d0ce593"
    text: {, is missing about 5 rungs 1/3 the way up the ladder}
    sent: "2017-09-18T12:46:58.703Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59bfc02f7b7d98d30d0ce558"
    text: {Quick help this morning - I'm looking to "call" (is that what it's called?) a bash script and then also call an X11 application (exists in dmenu launcher for example)... not sure how to go about learning more, I feel as if the red documentation and by extension the learning curve.}
    sent: "2017-09-18T12:46:39.775Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59bf5d37b59d55b8230c7e37"
    text: {@toomasv ^/> @dockimbel Thanks! You mean the closure function itself is not correct in the second case? But the rewriting in the form ^/[...] seems nevertheless to be equivalent. ^/^/Correct. Yes, I mean the closure function itself would not work well, but you're right the rewriting is equivalent in the second case too.}
    sent: "2017-09-18T05:44:23.258Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bf4e621081499f1f44d0a3"
    text: {Thank you @dockimbel that clears it up.  ^/Thanks also to @dander and @inanan97 }
    sent: "2017-09-18T04:41:06.128Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bf4b39b59d55b8230c35a4"
    text: {@gltewalt `c/idx` is a syntactic sugar for `select c 'idx`, selecting a `word!` value on a string! series is not possible. What you want is `c/:idx` which translates to `pick c idx`.}
    sent: "2017-09-18T04:27:37.712Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bf4b38c101bc4e3add28b5"
    text: "@inanan97 @gltewalt or `c/:idx`"
    sent: "2017-09-18T04:27:36.845Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59bf4a5e177fb9fe7ed3f74c"
    text: "Ahh, I see"
    sent: "2017-09-18T04:23:58.201Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bf4a3e614889d4750f02f9"
    text: "With `/`, the word `idx` is not evaluated. "
    sent: "2017-09-18T04:23:26.360Z"
    v: 1
    author: "599660a9d73408ce4f71e56f"
) #(
    id: "59bf49ffb59d55b8230c2fc5"
    text: {You probably want to use `pick`?^/ ```^/>> c: "def"^/== "def"^/>> c/3^/== #"f"^/>> idx: 3^/== 3^/>> pick c idx^/== #"f"```}
    sent: "2017-09-18T04:22:23.516Z"
    editedAt: "2017-09-18T04:23:00.693Z"
    v: 2
    author: "599660a9d73408ce4f71e56f"
) #(
    id: "59bf45031081499f1f44ae5c"
    text: "I don't understand why this blows up"
    sent: "2017-09-18T04:01:07.299Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bf44e9177fb9fe7ed3e463"
    text: { ```^/>> idx^/== 3^/>> c/idx^/*** Script Error: word! type is not allowed here^/*** Where: catch^/*** Stack:^/^/>> c/3^/== #"e"^/```}
    sent: "2017-09-18T04:00:41.719Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bf3e7e614889d4750ed394"
    text: {@dockimbel Thanks! You mean the closure function itself is not correct in the second case? But the rewriting in the form ^/```text^/context [var1: ... var2: ... set 'some-func <spec> <body>]^/```^/seems nevertheless to be equivalent. And it would work same as first closure unless `some-func` is declaring local vars in its `spec` which are also set in its context. }
    sent: "2017-09-18T03:33:18.326Z"
    editedAt: "2017-09-18T03:38:35.172Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59bf3a3eb59d55b8230bf05e"
    text: {@toomasv For the first question, that's correct, those are equivalent. For the second one, it does not look correct, because `func` is overriding the binding made by `bind`, and will rebind the body block to the function's context.}
    sent: "2017-09-18T03:15:10.515Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59be99fdc101bc4e3ada09a2"
    text: {Do I understand correctly that main difference between^/```text^/closure1: func [vars spec body][bind body-of spec: func spec body context vars :spec]^/some-func: closure1 [...][...][...]^/```^/and ^/```text^/context [^/    ;var declarations^/    set 'some-func ...^/    bind body-of :some-func self^/]^/```^/is only syntactical? And same for the version 2:^/```text^/closure2: func [vars spec body][func spec bind body context vars]^/some-func: closure2 [...][...][...]^/context [^/    ;var declarations^/    set 'some-func ...^/]^/```^/}
    sent: "2017-09-17T15:51:25.251Z"
    editedAt: "2017-09-17T15:53:27.859Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59be440f1081499f1f404d4a"
    text: "@maximvl could you fill the ticket? :point_up: "
    sent: "2017-09-17T09:44:47.258Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59be43bab59d55b82307ba10"
    text: "regression?"
    sent: "2017-09-17T09:43:22.123Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59be439cc101bc4e3ad892e1"
    text: {now we're in the same boat!^/```text^/>> h: make hash! []^/== make hash! []^/>> put h 'a 1^/== 1^/>> select h 'a^/== none^/>> about^/Red for Linux version 0.6.3 built 17-Sep-2017/14:41:34+05:00^/```}
    sent: "2017-09-17T09:42:52.784Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59be430a1081499f1f40496b"
    text: {```^/>> about^/Red for Windows version 0.6.3 built 17-Sep-2017/11:38:27+02:00^/>> h: make hash! []^/== make hash! []^/>> put h 'a 1^/== 1^/>> select h 'a^/== none^/>> h^/== make hash! [a 1]^/```}
    sent: "2017-09-17T09:40:26.857Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59be427bcfeed2eb651c5761"
    text: {```text^/>> about^/Red for Linux version 0.6.3 built 15-Sep-2017/13:32:54+05:00^/```}
    sent: "2017-09-17T09:38:03.310Z"
    editedAt: "2017-09-17T09:39:47.840Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59be422a7b7d98d30d05f1cc"
    text: "try with latest release?"
    sent: "2017-09-17T09:36:42.634Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59be420fb59d55b82307b32d"
    text: {```^/>> h: make hash! []^/== make hash! []^/>> put h 'a 3^/== 3^/>> put h 'b 5^/== 5^/>> h^/== make hash! [a 3 b 5]^/>> select h 'a^/== none^/>> select h 'b^/== none^/>> h^/== make hash! [a 3 b 5]^/```}
    sent: "2017-09-17T09:36:15.928Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "59be41b6614889d4750a7cf3"
    text: "good but not helpful"
    sent: "2017-09-17T09:34:46.742Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59be412ec101bc4e3ad889d8"
    text: {shrug :confused: ^/```text^/>> abc/cond-words^/== make hash! [even? 1 odd? 1 head? 1 tail? 1 equal? 1 not-equal? 1...^/>> find abc/cond-words 'even?^/== make hash! [even? 1 odd? 1 head? 1 tail? 1 equal? 1 not-equal? 1...^/>> first abc/cond-words^/== even?^/>> 'even? = first abc/cond-words^/== true^/>> find abc/cond-words 'even?^/== make hash! [even? 1 odd? 1 head? 1 tail? 1 equal? 1 not-equal? 1...^/>> select abc/cond-words 'even?^/== 1^/```}
    sent: "2017-09-17T09:32:30.859Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59be40e2210ac269203fcb08"
    text: "yes, but it doesn't matter"
    sent: "2017-09-17T09:31:14.497Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59be40c4bc4647297443eee8"
    text: "is `abc` a context?"
    sent: "2017-09-17T09:30:44.362Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59be40abbac826f054ca23c4"
    text: {good that it works in your example, but it should work in any case}
    sent: "2017-09-17T09:30:19.761Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59be405cb59d55b82307ac84"
    text: {@maximvl ^/```text^/>> h: make hash! [even? 1]^/== make hash! [even? 1]^/>> h/even?^/== 1^/>> select h 'even?^/== 1^/>> find h 'even?^/== make hash! [even? 1]^/```}
    sent: "2017-09-17T09:29:00.373Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59be3d9ebc4647297443e15a"
    text: {hey guys, do hashes work at all?^/```^/>> abc/cond-words^/== make hash! [even? 1 odd? 1 head? 1 tail? 1 equal? 1 not-equal? 1 strict-equal? 1 lesser? 1 greater? 1 lesser-or-equal? 1 greater-or-equal? 1 same? 1 complement? 1 negative? 1 p...^/>> find abc/cond-words 'even?^/== none^/>> first abc/cond-words^/== even?^/>> 'even? = first abc/cond-words^/== true^/>> find abc/cond-words 'even?^/== none^/>> select abc/cond-words 'even?^/== none^/```}
    sent: "2017-09-17T09:17:18.343Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59be2b33bac826f054c9cfc2"
    text: {@gltewalt the same:^/```^/>env STEP=step0_repl MAL_IMPL=js ../runtest-old.py   ../tests/step0_repl.mal -- ../red/run^/Did not get 'user> ' or 'mal-user> ' prompt^/    Got      : '** Script Error: Invalid compressed data - problem: -3\r\n** Near: script: decapsulate \r\nif none? script\r\n'^/```}
    sent: "2017-09-17T07:58:43.698Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bdd5c6b59d55b823061d85"
    text: "Any difference with runtest-old.py ?"
    sent: "2017-09-17T01:54:14.537Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bdd4d2177fb9fe7ecdb79a"
    text: "Oh, nm. Their test runners are .py"
    sent: "2017-09-17T01:50:10.370Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bdd1ec614889d47508da68"
    text: {You're making a python version, or using python as a reference?}
    sent: "2017-09-17T01:37:48.557Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bdd035177fb9fe7ecda74e"
    text: "Get that looks like fun"
    sent: "2017-09-17T01:30:29.367Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bda200bac826f054c7cdc8"
    text: ":see_no_evil: "
    sent: "2017-09-16T22:13:20.875Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bda0b9c101bc4e3ad61d5c"
    text: {unfortunately I don't have enough knowledge in this, here's how they setup stuff to run the process: https://github.com/maximvl/mal/blob/master/runtest.py#L78}
    sent: "2017-09-16T22:07:53.298Z"
    editedAt: "2017-09-16T22:10:36.373Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd9f431081499f1f3dc281"
    text: "they are doing some low-level ioctl there, jeez"
    sent: "2017-09-16T22:01:39.353Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd9eb2210ac269203d5806"
    text: {will check the python code which does it, maybe somebody can tell what could possible cause this?}
    sent: "2017-09-16T21:59:14.114Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd9e90b59d55b82305527f"
    text: {I have an issue running tests for MAL:^/```^/env STEP=step0_repl MAL_IMPL=js ../runtest.py --deferrable --optional   ../tests/step0_repl.mal -- ../red/run^/^/Exception: IOError(5, 'Input/output error')^/Output before exception:^/** Script Error: Invalid compressed data - problem: -3^/** Near: script: decapsulate ^/if none? script^/```}
    sent: "2017-09-16T21:58:40.540Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd9391210ac269203d26ca"
    text: {`Switch` branches based on value matching. Always has. @maximvl, in your first example:^/```^/switch 5 [number! [1]]^/```^/`number!` in the block is a word, as Bolek pointed out. But you can check types as well:^/```^/>> switch number! reduce [number! [1]]^/== 1^/```^/A number of us built `do-by-type` funcs for R2, using `switch type?/word ...`.}
    sent: "2017-09-16T21:11:45.378Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59bd72eb614889d475073f8f"
    text: {others do control flow and usually shouldn't be stopped}
    sent: "2017-09-16T18:52:27.762Z"
    editedAt: "2017-09-16T18:52:37.082Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd72d0614889d475073ea5"
    text: "I'd like to catch only errors and throws"
    sent: "2017-09-16T18:52:00.216Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd72bc614889d475073e4d"
    text: "because `try/all` catches too many"
    sent: "2017-09-16T18:51:40.241Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd72ad1081499f1f3cf1f1"
    text: {would be nice to be able to specify types of things to catch with `try`}
    sent: "2017-09-16T18:51:25.661Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd6ed6bac826f054c6de79"
    text: ":)"
    sent: "2017-09-16T18:35:02.536Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59bd6ebacfeed2eb65191f9b"
    text: "ok, I need to think about it :D"
    sent: "2017-09-16T18:34:34.906Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd6ea57b7d98d30d02a836"
    text: "?"
    sent: "2017-09-16T18:34:13.806Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59bd6e7cc101bc4e3ad54425"
    text: {hm, but then if `mal-map` fails whole branch will not}
    sent: "2017-09-16T18:33:32.998Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd6e1eb59d55b823047eb4"
    text: "```^/opt mal-map (take/last error-stack)^/```"
    sent: "2017-09-16T18:31:58.422Z"
    editedAt: "2017-09-16T18:32:43.346Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59bd6df1210ac269203c7867"
    text: "but it should happen only after `mal-map` attempt"
    sent: "2017-09-16T18:31:13.018Z"
    editedAt: "2017-09-16T18:31:32.637Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd6dd3177fb9fe7ecbf347"
    text: {```^/| (take/last error-stack)^/```^/?}
    sent: "2017-09-16T18:30:43.489Z"
    editedAt: "2017-09-16T18:31:04.688Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59bd6d9c177fb9fe7ecbf245"
    text: {eg do `take/last` regardless of whether `mal-map` rule matches or not }
    sent: "2017-09-16T18:29:48.642Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd6d67177fb9fe7ecbf17b"
    text: {is there any way to write this parse rule in a better way?^/```^/            | ahead "^{" [mal-map (take/last error-stack) | (take/last error-stack)]^/```}
    sent: "2017-09-16T18:28:55.695Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd6d54c101bc4e3ad53fad"
    text: {yeah, but I was matching just the value so `switch` is good enough}
    sent: "2017-09-16T18:28:36.682Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd6d01c101bc4e3ad53e64"
    text: {@maximvl You can also use `case`:^/```^/>> case [number? 5 [print "5 is number!"]]^/5 is number!^/```}
    sent: "2017-09-16T18:27:13.128Z"
    editedAt: "2017-09-16T18:27:36.316Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59bd67d97b7d98d30d028b48"
    text: {You can either write `type-switch`or use `switch type?/word 5 [integer! float! [1]]`}
    sent: "2017-09-16T18:05:13.171Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59bd67aacfeed2eb6518fe34"
    text: {looks like we need something like `type-switch` because `number!` can't be matched this way}
    sent: "2017-09-16T18:04:26.994Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd6642bc46472974407216"
    text: "That's possible :)"
    sent: "2017-09-16T17:58:26.606Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59bd6619177fb9fe7ecbd087"
    text: "hm, maybe I just wanted it to :D"
    sent: "2017-09-16T17:57:45.918Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd65d8cfeed2eb6518f606"
    text: {I don't think so.^/```^/>> switch type?/word 5 [integer! [1]]^/== 1^/```}
    sent: "2017-09-16T17:56:40.689Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59bd65917b7d98d30d0280c1"
    text: {```^/>> switch 5 [number! [1]]^/== none^/```}
    sent: "2017-09-16T17:55:29.938Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd65837b7d98d30d02808b"
    text: {wasn't `switch` available to accept datatypes as match-conditions?}
    sent: "2017-09-16T17:55:15.574Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd65601081499f1f3cb558"
    text: "@rebolek that's even better, thanks"
    sent: "2017-09-16T17:54:40.861Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd62407b7d98d30d0270fa"
    text: {```^/>> m: #(a b)^/== #(^/    a: b^/)^/>> foreach [k v] body-of m [print [k v]]^/a b^/```}
    sent: "2017-09-16T17:41:20.207Z"
    editedAt: "2017-09-16T17:42:03.306Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59bd56217b7d98d30d023152"
    text: "`to-block` helps, nvm :)"
    sent: "2017-09-16T16:49:37.354Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bd55f71081499f1f3c6bab"
    text: {do we have a way to iterate over map key/value pairs? eg `foreach [k v] m []`}
    sent: "2017-09-16T16:48:55.739Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcf123614889d47504fcba"
    text: "got it"
    sent: "2017-09-16T09:38:43.115Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcf10ebac826f054c4a713"
    text: {@maximvl ^/> why doesn't `set` use the value of a whole match?^/^/That's the purpose of `set` keyword in Parse. It will just extract a single value, while `copy` will extract one or more, but in a series of same type as the input.}
    sent: "2017-09-16T09:38:22.121Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bcf099bac826f054c4a5ee"
    text: "@dockimbel :+1:"
    sent: "2017-09-16T09:36:25.687Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bcf08bbac826f054c4a5a1"
    text: {@9214 Search for "Parse improvements" in http://www.red-lang.org/2016/06/061-reactive-programming.html}
    sent: "2017-09-16T09:36:11.564Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bcf063bac826f054c4a4f7"
    text: {I like it more than having a second variable and doing manual stuff}
    sent: "2017-09-16T09:35:31.755Z"
    editedAt: "2017-09-16T09:35:42.462Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcf0627b7d98d30d0068a4"
    text: "@dockimbel can you show me a little example?"
    sent: "2017-09-16T09:35:30.752Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "59bcf0401081499f1f3ab394"
    text: "@9214 thanks, copy does the thing"
    sent: "2017-09-16T09:34:56.342Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcf03c7b7d98d30d00677b"
    text: "@dockimbel cool!"
    sent: "2017-09-16T09:34:52.323Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bcf039177fb9fe7ec9c33e"
    text: "hell yeah :D"
    sent: "2017-09-16T09:34:49.525Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcf0361081499f1f3ab37a"
    text: {```^/>> mal/parser/run "{1 2}"^/== #(^/    1 2^/)^/```}
    sent: "2017-09-16T09:34:46.816Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcf01d7b7d98d30d006735"
    text: {@9214 There's already `change` keyword for that. It was added in later releases.}
    sent: "2017-09-16T09:34:21.769Z"
    editedAt: "2017-09-16T09:34:48.686Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bcf0111081499f1f3ab31b"
    text: {and that parsing will continue *after* replacement}
    sent: "2017-09-16T09:34:09.792Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bcefdb1081499f1f3ab26c"
    text: "as in `replace <rule> (<replacement>)`"
    sent: "2017-09-16T09:33:15.085Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bcefafc101bc4e3ad30c9f"
    text: {@dockimbel I frequently see the pattern `s: <rule> e: (change/part s <replacement> e)`, can it be simplified to special keyword, say `replace`?}
    sent: "2017-09-16T09:32:31.856Z"
    editedAt: "2017-09-16T09:33:30.159Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bcef1dc101bc4e3ad30912"
    text: {learn [this](http://www.red-lang.org/2013/11/041-introducing-parse.html) by heart ;)}
    sent: "2017-09-16T09:30:05.452Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bceeecbc464729743e5cbd"
    text: {`set` saves only the first value of the matched input}
    sent: "2017-09-16T09:29:16.654Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bceebe1081499f1f3aaca5"
    text: {```text^/>> parse "121" [copy x some ["0" | "1" | "2"]]^/== true^/>> x^/== "121"^/```}
    sent: "2017-09-16T09:28:30.962Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bcee92cfeed2eb6516e460"
    text: "`copy` does"
    sent: "2017-09-16T09:27:46.223Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bcee91bc464729743e5b36"
    text: "and is there any way to do it?"
    sent: "2017-09-16T09:27:45.095Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcee71bc464729743e5aae"
    text: "why doesn't `set` use the value of a whole match?"
    sent: "2017-09-16T09:27:13.282Z"
    editedAt: "2017-09-16T09:27:19.900Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcee62177fb9fe7ec9ba94"
    text: {@dockimbel here's what I also don't understand:^/```^/>> parse "121" [set x some ["0" | "1" | "2"]]^/== true^/>> x^/== #"1"^/```}
    sent: "2017-09-16T09:26:57.988Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcee2c177fb9fe7ec9b98c"
    text: "let me check it"
    sent: "2017-09-16T09:26:04.061Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcedb7c101bc4e3ad30432"
    text: {@maximvl Have you tried my proposed solution above?}
    sent: "2017-09-16T09:24:07.529Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bcedb71081499f1f3aa78f"
    text: "thanks for explanation! :)"
    sent: "2017-09-16T09:24:07.080Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bced83614889d47504ed19"
    text: {anyway it's an issue in my code relying on the fact that `2)` or `2^}` will be converted correctly}
    sent: "2017-09-16T09:23:15.746Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bced72614889d47504ed00"
    text: {`^{123^}` is a string!, `123^{^}` is an integer!, followed by a string!. So, `123^}` is obviously a syntax error.}
    sent: "2017-09-16T09:22:58.517Z"
    editedAt: "2017-09-16T09:23:49.555Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bced661081499f1f3aa6a3"
    text: "hm"
    sent: "2017-09-16T09:22:46.836Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bced3ab59d55b823023712"
    text: ":)"
    sent: "2017-09-16T09:22:02.198Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bced391081499f1f3aa5b6"
    text: {how is number supposed to be followed by `{` but not `}` ?}
    sent: "2017-09-16T09:22:01.614Z"
    editedAt: "2017-09-16T09:22:18.239Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bced201081499f1f3aa573"
    text: "now I'm completely lost"
    sent: "2017-09-16T09:21:36.610Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcecf9bac826f054c495b3"
    text: {@maximvl ^/> @dockimbel any reason for not including `^}` in this list?^/^/Answered above: https://gitter.im/red/help?at=59bcec67cfeed2eb6516dbbe}
    sent: "2017-09-16T09:20:57.546Z"
    editedAt: "2017-09-16T09:21:00.809Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bcecd07b7d98d30d005893"
    text: {Currently, some `to` conversions are calling the lexer underneath, so they are bound by lexer's rules.}
    sent: "2017-09-16T09:20:16.034Z"
    editedAt: "2017-09-16T09:21:47.830Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bcecaab59d55b82302355b"
    text: {@dockimbel any reason for not including `^}` in this list?}
    sent: "2017-09-16T09:19:38.921Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcec91b59d55b823023519"
    text: "ah"
    sent: "2017-09-16T09:19:13.003Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcec8ec101bc4e3ad2feab"
    text: {:point_up: https://gitter.im/red/help?at=59bceb21210ac269203a3587}
    sent: "2017-09-16T09:19:10.479Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bcec76b59d55b823023474"
    text: {@maximvl ^/```text^/>> to integer! "2)"^/== 2^/>> to integer! "2]"^/== 2^/>> to integer! "2^}"^/*** Syntax Error: invalid integer! at "2^}"^/*** Where: do^/*** Stack: ^/```}
    sent: "2017-09-16T09:18:46.354Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bcec67cfeed2eb6516dbbe"
    text: {@maximvl See my related post above, extracting the relevant rule from %lexer.red. An integer value is not supposed to be followed by a `^}`, as it means it would be in string!.}
    sent: "2017-09-16T09:18:31.619Z"
    editedAt: "2017-09-16T09:19:14.458Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bcec4ec101bc4e3ad2fd6c"
    text: "I think there is a bug here"
    sent: "2017-09-16T09:18:06.146Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcec4acfeed2eb6516dba7"
    text: {but this doesn't explain why different types of brackets work differently}
    sent: "2017-09-16T09:18:02.678Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcec2c210ac269203a3954"
    text: {So, my above proposition should work (just make sure `e` is not leaking to global context).}
    sent: "2017-09-16T09:17:32.554Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bcec04c101bc4e3ad2fbae"
    text: {the mal-nuber is super simple: ^/```^/      mal-number: compose [ some (charset [#"0" - #"9"]) ]^/```}
    sent: "2017-09-16T09:16:52.929Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcebdcb59d55b8230231ef"
    text: {Your  issue comes from `(to-integer tmp)`. You didn't post your `mal-number` rule, but maybe just a small adjustment would do:^/```lisp^/ | tmp: mal-number e: keep (to-integer copy/part tmp e)^/```}
    sent: "2017-09-16T09:16:12.802Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bceb6acfeed2eb6516d8a3"
    text: "while the first one matches `2}`"
    sent: "2017-09-16T09:14:18.276Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bceb63cfeed2eb6516d88c"
    text: {somehow second one correctly matches `2` as a number and continues}
    sent: "2017-09-16T09:14:11.234Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bceb45177fb9fe7ec9ab65"
    text: {and this is for the round paren:^/```^/                                     input: "2)"                                           ^/                                           -->^/                                             match: [some make bitset! #{000000000000FFC0}] ^/                                             input: "2)"                                             ^/                                             -->^/                                               ==> matched^/                                             <--^/                                           <--^/                                           match: ["nil" keep ('nil) | "true" keep ('true) | "false" ^/                                           input: ")"                                           ^/                                           -->^/                                           <--^/                                           match: [keep ('nil) | "true" keep ('true) | "false" keep  ^/                                           input: ")"                                           ^/                                         <--^/```}
    sent: "2017-09-16T09:13:41.012Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bceb21210ac269203a3587"
    text: {@maximvl In %lexer.red:^/`cs/13: charset ^{^^^{"[]();:xX^}^-^-^-^-;-- integer-end`}
    sent: "2017-09-16T09:13:05.752Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bceb207b7d98d30d0052c6"
    text: {this is the trace for curly brace:^/```^/                     -->^/                       match: [some make bitset! #^{000000000000FFC0^}] ^/                       input: "2^}"                       ^/                       -->^/                         ==> matched^/                       <--^/                     <--^/                     match: ["nil" keep ('nil) | "true" keep ('true) | "false" ^/                     input: "^}"                     ^/                     -->^/*** Syntax Error: invalid integer! at "2^}"^/*** Where: do^/*** Stack: parse-trace to-integer ^/```}
    sent: "2017-09-16T09:13:04.664Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bceb107b7d98d30d00527d"
    text: "@maximvl Bug fixes for `parse-trace` are welcome."
    sent: "2017-09-16T09:12:48.447Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bceb03177fb9fe7ec9a9d6"
    text: "@dockimbel doesn't look like it"
    sent: "2017-09-16T09:12:35.153Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bceaf01081499f1f3a9b76"
    text: {there is a bug in `parser-trace` that it doesn't reset indentation between the calls }
    sent: "2017-09-16T09:12:16.068Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bcead1bac826f054c48d74"
    text: {@maximvl It's not Parse-related:^/```lisp^/>> to-integer "2]"^/== 2^/>> to-integer "2^}"^/*** Syntax Error: invalid integer! at "2^}"^/*** Where: do^/*** Stack: to-integer  ^/```}
    sent: "2017-09-16T09:11:45.981Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bcea0a614889d47504e049"
    text: "`¯\_(ツ)_/¯`"
    sent: "2017-09-16T09:08:26.325Z"
    editedAt: "2017-09-16T09:08:31.498Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bce9d6177fb9fe7ec9a4cd"
    text: {I have no idea why one would need to escape curly braces here}
    sent: "2017-09-16T09:07:34.246Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bce9bd1081499f1f3a9676"
    text: "and try to run it with `parse-trace`"
    sent: "2017-09-16T09:07:09.577Z"
    editedAt: "2017-09-16T09:07:21.911Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bce9941081499f1f3a9511"
    text: {hm, perhaps try to escape curly brackets inside a string, `"^^{"` `"^^}"`}
    sent: "2017-09-16T09:06:28.079Z"
    editedAt: "2017-09-16T09:06:33.797Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bce95ccfeed2eb6516d14f"
    text: {anyway it doesn't work even if I remove `to-map`, that's not the issue}
    sent: "2017-09-16T09:05:32.137Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "59bce948210ac269203a2c84"
    text: "to return a `map` instead of a block"
    sent: "2017-09-16T09:05:12.990Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bce8fb7b7d98d30d0049fc"
    text: "but why you need `to-map` in `mal-map`?"
    sent: "2017-09-16T09:03:55.237Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bce8e1cfeed2eb6516cf24"
    text: {somehow the same rule for `mal-number` works fine for `]` and `)` but eats brace for `^}`}
    sent: "2017-09-16T09:03:29.300Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bce8c2210ac269203a28de"
    text: {no, "2^}" print happens is `mal-scalar`}
    sent: "2017-09-16T09:02:58.235Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bce7b1cfeed2eb6516ca96"
    text: {my guess is that you're converting `"2^}` to `map!` key (or value), it starts with `2`, Red thinks that it's an `integer!`, tries to convert it and, well}
    sent: "2017-09-16T08:58:25.023Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bce766cfeed2eb6516c99a"
    text: {> it's exactly the same as others^/^/b-but^/```text^/keep (to-map tmp-series)^/```}
    sent: "2017-09-16T08:57:10.132Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bce721bac826f054c48020"
    text: "could somebody take a look?"
    sent: "2017-09-16T08:56:01.559Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bce702b59d55b823021c75"
    text: {somehow curly brace rule doesn't work while it's exactly the same as others:^/```^/>> mal/parser/run "(1 2)"^/"1 2)"^/"2)"^/"found list"^/== [1 2]^/>> mal/parser/run "[1 2]"^/"1 2]"^/"2]"^/"found vector"^/== [1 2]^/>> mal/parser/run "^{1 2^}"^/"1 2^}"^/"2^}"^/*** Syntax Error: invalid integer! at "2^}"^/*** Where: do^/*** Stack: to-integer ^/```}
    sent: "2017-09-16T08:55:30.907Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bce6de1081499f1f3a89e8"
    text: {I have a problem with `parse` rules here:^/```^/      mal-scalar: [^/         any whitespace [^/            p: (probe p)^/            "nil" keep ('nil)^/            | "true" keep ('true)^/            | "false" keep ('false)^/            | tmp: mal-number keep (to-integer tmp)^/            | tmp: mal-string keep (tmp)^/            | tmp: mal-keyword keep (to-get-word tmp)^/            | tmp: mal-symbol keep (to-word tmp)^/         ]^/      ]^/^/      mal-map: [^/         (tmp-series: copy [])^/         collect into tmp-series^/         [ "{" any [not "}" mal-scalar] "}" ]^/         keep (to-map tmp-series)^/      ]^/      mal-list: [^/         (tmp-series: copy [])^/         collect into tmp-series^/         [ "(" any [not ")" mal-scalar] ")" ]^/         keep (tmp-series)^/      ]^/      mal-vector: [^/         (tmp-series: copy [])^/         collect into tmp-series^/         [ "[" any [not "]" mal-scalar] "]" ]^/         keep (tmp-series)^/      ]^/      mal-syntax: [^/         (error: false)^/         any whitespace^/         collect [^/            ahead "(" mal-list (probe "found list")^/            | ahead "{" mal-map (probe "found map")^/            | ahead "[" mal-vector (probe "found vector")^/            | mal-scalar^/            | (error: true) keep some [not whitespace skip] fail^/         ]^/      ]^/```}
    sent: "2017-09-16T08:54:54.382Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59bc64807b7d98d30dfe483c"
    text: {another dumb version:^/```text^/>> map [1 2 3 4][a b c d][reduce [map [a b c d][x][x + 1] map [a b c d][x][x * 2]]]^/== [[2 3 4 5] [2 4 6 8]]^/```}
    sent: "2017-09-15T23:38:40.925Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc6400177fb9fe7ec79a10"
    text: "hmmm"
    sent: "2017-09-15T23:36:32.378Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bc63d4bc464729743c3c5c"
    text: {@gltewalt dumb version:^/```text^/>> set [a b] reduce [map [1 2 3 4][x][x + 1] map [1 2 3 4][x][x * 2]]^/== [[2 3 4 5] [2 4 6 8]]^/>> a^/== [2 3 4 5]^/>> b^/== [2 4 6 8]^/```}
    sent: "2017-09-15T23:35:48.901Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc6266210ac269203825e2"
    text: {I was wondering how to set the return values to words.^/like `set [a b] map [1 2 3 4][x y][reduce [x + 1 y * 2]]` and have `a` be `[2 3 4 5]` and `b` be `[2 4 6 8]`}
    sent: "2017-09-15T23:29:42.452Z"
    editedAt: "2017-09-15T23:30:13.714Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bc625d210ac26920382571"
    text: {```text^/>> map [1 2 3 4][x y][compose/deep [[(x)(y)]]]^/== [[1 2] [3 4]]^/```^/```text^/>> map [1 2 3 4][x y][reduce [reduce [x y]]]^/== [[1 2] [3 4]]^/```}
    sent: "2017-09-15T23:29:33.031Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc6146cfeed2eb6514ca5e"
    text: {@gltewalt ?^/```text^/>> collect [foreach [x y][1 2 3 4][keep/only reduce [x y]]]^/== [[1 2] [3 4]]^/```}
    sent: "2017-09-15T23:24:54.181Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc611abac826f054c27af5"
    text: "err, the return values of x and y"
    sent: "2017-09-15T23:24:10.696Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bc60bfbac826f054c27953"
    text: {pull out the x and y, similar to `set [x y] [[1 2][3 4]]`}
    sent: "2017-09-15T23:22:39.434Z"
    editedAt: "2017-09-15T23:22:57.402Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bc5e41614889d47502cbc1"
    text: "@gltewalt you're speaking Klingon :alien:"
    sent: "2017-09-15T23:12:01.412Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc5df4210ac269203813fe"
    text: "Now.. destructuring-bind it"
    sent: "2017-09-15T23:10:44.081Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bc5aa67b7d98d30dfe1eb5"
    text: ":tada: "
    sent: "2017-09-15T22:56:38.026Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc59a67b7d98d30dfe1ac1"
    text: "**shrug**"
    sent: "2017-09-15T22:52:22.195Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bc59997b7d98d30dfe1a9e"
    text: {@9214  it 'works' again^/```^/>> map [1 2 3 4][x y][reduce [x + 1 y * 2]]^/== [2 4 4 8]^/>> about^/Red for Windows version 0.6.3 built 14-Sep-2017/13:15:36-06:00^/```^/:clap: }
    sent: "2017-09-15T22:52:09.799Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bc292c177fb9fe7ec66ae1"
    text: "Thanks  @9214  and @dockimbel  "
    sent: "2017-09-15T19:25:32.557Z"
    v: 1
    author: "599b74b6d73408ce4f725ff4"
) #(
    id: "59bc094ebc464729743a6fd4"
    text: ":flushed: "
    sent: "2017-09-15T17:09:34.250Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc0904cfeed2eb6512f306"
    text: {Here is a version with better filtering:^/```lisp^/system/view/capturing?: yes^/view [^/    f: field on-detect [^/        all [^/        ^-event/type = 'key-down^/        ^-string? f/text^/            4 <= length? f/text^/            attempt [8 <> to integer! event/key]^/            return 'stop^/        ]^/    ]^/]^/```}
    sent: "2017-09-15T17:08:20.870Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bc08eabac826f054c0a8d7"
    text: {@9214 Nice! Your code is on my todo-list for testing on spare time (not much lately unfortunately). ;-)}
    sent: "2017-09-15T17:07:54.189Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bc07d8614889d475010d3a"
    text: {thanks btw :) :point_right: [example](https://github.com/9214/daruma/blob/master/src/gui.red#L32)}
    sent: "2017-09-15T17:03:20.304Z"
    editedAt: "2017-09-15T17:03:50.709Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc049abac826f054c0941f"
    text: {also `enter` (`13`) should be allowed, just in case}
    sent: "2017-09-15T16:49:30.962Z"
    editedAt: "2017-09-15T16:53:56.470Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc0312bac826f054c08a39"
    text: {@dockimbel I have a question though - without `""` it starts to detect every event (mouse hover in particular) and spits various errors in console. Why is that?}
    sent: "2017-09-15T16:42:58.598Z"
    editedAt: "2017-09-15T16:43:05.035Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bc01d0177fb9fe7ec59376"
    text: {Hmm, interesting that we didn't name the "backspace" key... We need to add that.}
    sent: "2017-09-15T16:37:36.038Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bc00ff177fb9fe7ec58e7a"
    text: {@dockimbel @Sunnypt  :sparkles: ^/```text^/system/view/capturing?: yes^/view [^/    f: field "" on-detect [^/        all [^/            4 <= length? f/text^/            attempt [8 <> to integer! event/key]^/            return 'stop^/        ]^/    ]^/]^/```}
    sent: "2017-09-15T16:34:07.957Z"
    editedAt: "2017-09-15T16:34:14.652Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbffb71081499f1f36900c"
    text: {@9214 You can make the handler smarter by letting some key pass. Though, maybe that could be solved more generally using a global handler, which would keep a blocking list for all the fields/areas. I already have some similar feature I want to add in 0.6.4, so I should broaden it to cover simple input length limitations too.}
    sent: "2017-09-15T16:28:39.496Z"
    editedAt: "2017-09-15T16:31:33.206Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bbfed0bc464729743a316c"
    text: {I guess I'll make a wish, as it's a common request (to restrict field's text size)}
    sent: "2017-09-15T16:24:48.203Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbfe9fb59d55b823fe04c1"
    text: {@dockimbel though again, you can't type anything (even backspace) after 4th character :D}
    sent: "2017-09-15T16:23:59.065Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbfe53210ac26920361915"
    text: {`detect` events are not emitted by default (for performance reasons), so the `capturing?` flag needs to be set to allow them.}
    sent: "2017-09-15T16:22:43.439Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bbfe411081499f1f36884c"
    text: "@dockimbel thanks!"
    sent: "2017-09-15T16:22:25.468Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbfe2cb59d55b823fe02ad"
    text: {@9214 Indeed. We'll see if that can be improved. For now the best way is to use `detect` event and block the event from propagating there:^/```lisp^/system/view/capturing?: yes^/view [f: field "" on-detect [if 4 <= length? f/text [return 'stop]]]^/```}
    sent: "2017-09-15T16:22:04.935Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bbfb431081499f1f367429"
    text: {@rebolek ^/```text^/view [^/    f: field on-key-down [^/        all [^/            attempt [4 < length? f/text]^/            remove back tail f/text^/        ]^/    ]^/]^/```^/don't ask about 4, idk why it works like that}
    sent: "2017-09-15T16:09:39.514Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbf6f0177fb9fe7ec55173"
    text: "Ok :)"
    sent: "2017-09-15T15:51:12.634Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59bbf624177fb9fe7ec54c00"
    text: {@rebolek I know, but it might be confusing for starters as @Sunnypt }
    sent: "2017-09-15T15:47:48.657Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbf5f67b7d98d30dfc0271"
    text: {@9214 also,^/```^/all [^/    l: length? f/text^/    l > 6^/    remove back tail f/text^/]^/```^/:package: }
    sent: "2017-09-15T15:47:02.735Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59bbf5797b7d98d30dfbff01"
    text: ":)"
    sent: "2017-09-15T15:44:57.283Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59bbf56a210ac2692035e303"
    text: "@rebolek :eyes: sssh!"
    sent: "2017-09-15T15:44:42.347Z"
    editedAt: "2017-09-15T15:44:58.882Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbf4bcb59d55b823fdcc73"
    text: {and it was ugly and looked kinda like that:^/```text^/view [^/    f: field on-key-down [^/        l: length? f/text^/        if all [l l > 6][^/            remove back tail f/text^/        ]^/    ]^/]^/```^/every character after 5th starts to appear at the beginning of field}
    sent: "2017-09-15T15:41:48.941Z"
    editedAt: "2017-09-15T15:44:36.972Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbf005c101bc4e3ace9d2c"
    text: {furthermore, if you stop to accept keys - there's no way to delete text with backspace}
    sent: "2017-09-15T15:21:41.653Z"
    editedAt: "2017-09-15T15:21:49.761Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbee37210ac2692035b84c"
    text: {@dockimbel I tried to do something similar back in July and wasn't able to block keys before they get printed in field}
    sent: "2017-09-15T15:13:59.089Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbcc00614889d475ffa224"
    text: {@Sunnypt You could try using `size-text` to calculate the width of current text and compare it to the field's width. You could put such code in a `on-key-down` handler for that field, and when the limit is reached return `'stop` to block further keys from been accepted. I'll let someone else provide an example code for that.}
    sent: "2017-09-15T12:48:00.893Z"
    editedAt: "2017-09-15T12:49:01.705Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bbcafc177fb9fe7ec43d78"
    text: {Is it possible to limit the number of characters that can be entered into a field ?^/If I used  field 50  - how could i make it only accept enough characters to fill the actual visible part,^/and not continue to accept characters past the width of the field.^/Thanks.}
    sent: "2017-09-15T12:43:40.332Z"
    v: 1
    author: "599b74b6d73408ce4f725ff4"
) #(
    id: "59bbc8d9614889d475ff8e21"
    text: "@dockimbel Thanks again!"
    sent: "2017-09-15T12:34:33.696Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59bbc862bac826f054bf24d3"
    text: {@Phryxe Here is another version breaking down each step more explicitly:^/```lisp^/size: 9x9^/matrix: make block! size/y^/loop size/y [^/^-row: make block! size/x^/^-loop size/x [append row random 9]^/^-append/only matrix row^/]^/new-line/all matrix on^/```}
    sent: "2017-09-15T12:32:34.702Z"
    editedAt: "2017-09-15T12:37:45.484Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "59bbc5587b7d98d30dfae474"
    text: "@dockimbel Will do  :hatched_chick:"
    sent: "2017-09-15T12:19:36.049Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59bbc501210ac2692034c532"
    text: {@Phryxe You can play with the `collect/keep` combo separately to learn it if it's new to you.}
    sent: "2017-09-15T12:18:09.423Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bbc4bd210ac2692034c35e"
    text: "@dockimbel Thanks. I have to study this."
    sent: "2017-09-15T12:17:01.273Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59bbc410c101bc4e3acda2f7"
    text: {Then you can access the values in the matrix using: `matrix/:y/:x`.}
    sent: "2017-09-15T12:14:08.485Z"
    editedAt: "2017-09-15T12:14:19.715Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bbc3d0614889d475ff6ff3"
    text: {@Phryxe  To get you started:^/```lisp^/random/seed now/time/precise^/^/size: 9x9^/matrix: collect [loop size/y [keep/only collect [loop size/x [keep random 9]]]]^/new-line/all matrix yes^/^/?? matrix^/```}
    sent: "2017-09-15T12:13:04.275Z"
    editedAt: "2017-09-15T12:17:10.065Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bbc2597b7d98d30dfad113"
    text: "@dockimbel A matrix (2D), think sudoku."
    sent: "2017-09-15T12:06:48.997Z"
    editedAt: "2017-09-15T12:08:20.455Z"
    v: 2
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59bbc22f177fb9fe7ec40ca8"
    text: {@Phryxe Are you trying to build a one-dimensional or two-dimensional array?}
    sent: "2017-09-15T12:06:07.873Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bbc1c0b59d55b823fc9fec"
    text: {@9214 How do I fit that in the code?^/ @dockimbel Well, I wanted a reference to each column, but I now realize I can probably do that with the index of `x`.}
    sent: "2017-09-15T12:04:16.885Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59bbbe767b7d98d30dfaba18"
    text: "@Phryxe What do you need all the `xN` words for?"
    sent: "2017-09-15T11:50:14.680Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59bbbb2dbc4647297438947e"
    text: "`x/x1: i`?"
    sent: "2017-09-15T11:36:13.343Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bbb74bcfeed2eb65111635"
    text: {```^/Red []^/x1: x2: x3: x4: x5: x6: x7: x8: x9: []^/x: [x1 x2 x3 x4 x5 x6 x7 x8 x9]^/random/seed now/time/precise^/foreach i x [^/^-i: copy reduce i^/^-loop 9 [append i random 9]^/^-print i^/]^/```^/More newbie questions. How do I get `i` into `x1`, `x2` etc?}
    sent: "2017-09-15T11:19:39.916Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59bbae70b59d55b823fc3397"
    text: "cheers @toomasv !"
    sent: "2017-09-15T10:41:52.043Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bb9680bac826f054be0c4d"
    text: {@9214 :point_up: [September 14, 2017 8:15 PM](https://gitter.im/red/help?at=59bab945bac826f054b9fae4)^/```^/cause-error 'user 'message ["Error message"]^/```}
    sent: "2017-09-15T08:59:44.097Z"
    editedAt: "2017-09-15T09:00:32.748Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59bb91931081499f1f340fc8"
    text: {and not even in wine^/```text^/>> map [1 2 3 4][x y][reduce [x + 1 y * 2]]^/== [2 4 4 8]^/>> about^/Red for Windows version 0.6.3 built 15-Sep-2017/13:36:49+05:00^/```^/@gltewalt what's this all about? :shipit: }
    sent: "2017-09-15T08:38:43.263Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bb90fe614889d475fe63fc"
    text: {I can't reproduce it though^/```text^/>> map [1 2 3 4][x y][reduce [x + 1 y * 2]]^/== [2 4 4 8]^/>> about^/Red for Linux version 0.6.3 built 15-Sep-2017/13:32:54+05:00^/```}
    sent: "2017-09-15T08:36:14.312Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bb8fe0b59d55b823fb8ebe"
    text: {@gltewalt looks like a regression in Red for me^/```text^/>> map [1 2 3 4][x y][reduce [x + 1 y * 2]]^/== [2 4 4 8]^/>> about^/Red for Linux version 0.6.3 built 2-Sep-2017/20:48:21+05:00^/```}
    sent: "2017-09-15T08:31:28.930Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bb525cc101bc4e3acb8234"
    text: {http://www.thewindowsclub.com/manage-quarantined-exclusions-windows-defender-security-center}
    sent: "2017-09-15T04:09:00.808Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bb5205177fb9fe7ec1dedd"
    text: {is it in here?^/C:\ProgramData\Microsoft\Windows Defender\LocalCopy^/}
    sent: "2017-09-15T04:07:33.038Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bb51987b7d98d30df8a8c1"
    text: {Must be an antivirus, I will attempt tomorrow at another PC's at work.}
    sent: "2017-09-15T04:05:44.261Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59bb50fec101bc4e3acb7da7"
    text: "@gltewalt No luck. "
    sent: "2017-09-15T04:03:10.202Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59bb4ec57b7d98d30df89e8a"
    text: "Dang it... on mobile. Have to switch to laptop"
    sent: "2017-09-15T03:53:41.727Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bb4ea91081499f1f32e66e"
    text: "C:Usersluis"
    sent: "2017-09-15T03:53:13.993Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bb4e87614889d475fd3843"
    text: "Place it in `C:Users<your name>`and try"
    sent: "2017-09-15T03:52:39.738Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bb4d6b210ac26920327a8f"
    text: "Red-062, red-063,  last build  nothing run."
    sent: "2017-09-15T03:47:55.391Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59bb4d421081499f1f32e10e"
    text: "Have to go Luis. Will check back tomorrow."
    sent: "2017-09-15T03:47:14.402Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59bb4d22c101bc4e3acb6deb"
    text: "My thought as well. Worth a try."
    sent: "2017-09-15T03:46:42.294Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59bb4c3d177fb9fe7ec1c90c"
    text: {Have you tried the automated build ?^/https://imgur.com/a/8vAU9}
    sent: "2017-09-15T03:42:53.873Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bb4c221081499f1f32dbe0"
    text: {Locked down, permissions, so it can't create output files?}
    sent: "2017-09-15T03:42:26.987Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59bb4bed177fb9fe7ec1c7fd"
    text: "@greggirwin  No,  only return to command prompt"
    sent: "2017-09-15T03:41:33.130Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59bb4b71210ac26920327447"
    text: {When it has failed to build for me in the past, it was because the application name was listed in a table in my antivirus program - stopped it from installing. }
    sent: "2017-09-15T03:39:29.212Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bb4b46177fb9fe7ec1c601"
    text: {@luis-rj, what if you run from a command window? Do you get any output that will help troubleshoot?}
    sent: "2017-09-15T03:38:46.401Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59bb4a85614889d475fd2adc"
    text: "Yes, at least at home, in my  Windows 10 netbook."
    sent: "2017-09-15T03:35:33.675Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59bb45b5b59d55b823fa4d6c"
    text: {Is Windows defender the only security software on them ?}
    sent: "2017-09-15T03:15:01.884Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bb410f177fb9fe7ec1a194"
    text: {I download fresh red installer , first execution show compiling, but  close and not red console.  Next runs only show command prompt  and closes immediately }
    sent: "2017-09-15T02:55:11.347Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59bb3edfc101bc4e3acb3b02"
    text: {Very strange two different computers, windows defender off.}
    sent: "2017-09-15T02:45:51.591Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59bb3dfbbac826f054bc77e7"
    text: {I can't run reds.exe  consoles  anymore (win 7  and 10)... perhaps I need an clean reinstall ?}
    sent: "2017-09-15T02:42:03.924Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59bae24dbc4647297434c080"
    text: {There are a number of `map`-ish funcs floating around.^/^/There are pros and cons to using plain bodies versus func values, so I think the HOF design in Red will include both. For example @9214's code that does `do reduce compose [func spec body (:spec)]` is quite a bit of overhead, which passing a func avoids.}
    sent: "2017-09-14T20:10:53.811Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59bad688b59d55b823f85225"
    text: {@9214 This is what I get your `map` with a fresh Red from today:^/```^/>> map [1 2 3 4][x y][reduce [x + 1 y * 2]]^/== [2 2 none 2 4 4 none 2]^/```}
    sent: "2017-09-14T19:20:40.203Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59bad57cbc464729743476bd"
    text: {@Phryxe ^/```^/>> reduce [now/time/precise wait 00:00.1 now/time/precise]^/== [12:14:58.251 none 12:14:58.352]^/```}
    sent: "2017-09-14T19:16:12.775Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59bad1aa1081499f1f30b5b1"
    text: {Because `word! = type? item` is `word! = (type? item)`, but `type? item = word!` is `type? (item = word!)`. Also, I suggest you to just use `word? item`.}
    sent: "2017-09-14T18:59:54.005Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59bad133177fb9fe7ebf9ce3"
    text: {Why does changing the order of the logic `type? Item = word!`  give me different results?^/`blk: [green two red 5 dog]`^/`foreach item blk [either type? item = word! [print "word"][print "not word"]]`^/^/`foreach item blk [either word! = type? item [print "word"][print "not word"]]`}
    sent: "2017-09-14T18:57:55.982Z"
    editedAt: "2017-09-14T18:58:30.529Z"
    v: 3
    author: "56fac97685d51f252abb72b4"
) #(
    id: "59bac997210ac269203026c1"
    text: {@dander I was generating random numbers and wanted to let the seed (`now/time/precise`) change a bit between runs.}
    sent: "2017-09-14T18:25:27.472Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59bab945bac826f054b9fae4"
    text: {can anyone remind me how to throw custom errors with `cause-error`?}
    sent: "2017-09-14T17:15:49.371Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bab5f9177fb9fe7ebf00c5"
    text: "what is it you are trying to do?"
    sent: "2017-09-14T17:01:45.821Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59bab5bcc101bc4e3ac8b32a"
    text: {@Phryxe I think it works, but the console hangs while waiting, as we don't have concurrency support yet}
    sent: "2017-09-14T17:00:44.844Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59ba8be57b7d98d30df4d4e0"
    text: {I see `wait` in the help, but is it included yet? I tried it and it hangs the console.}
    sent: "2017-09-14T14:02:13.789Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59b9b386614889d475f52e01"
    text: {It's possible to pass function, but usually just a code block is passed, because it's easier.}
    sent: "2017-09-13T22:39:02.015Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b9b364319100804e308f34"
    text: "I'll poke at your thingy later on real machine"
    sent: "2017-09-13T22:38:28.522Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b9b34c177fb9fe7eb9ad26"
    text: {Don't have to write it every time, but it's anon outside a definition}
    sent: "2017-09-13T22:38:04.441Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b9afd8cfeed2eb65071355"
    text: "`func [x y][x + 1 y *2]`"
    sent: "2017-09-13T22:23:20.636Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "59b9afab210ac269202a7bf0"
    text: "gotta go, it's bedtime :sleeping: "
    sent: "2017-09-13T22:22:35.559Z"
    editedAt: "2017-09-13T22:22:45.329Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9af41bc464729742e62b4"
    text: {But why to write `func` every time then you can embed it inside a definition?}
    sent: "2017-09-13T22:20:49.084Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9af04bc464729742e613a"
    text: "A literal `func [x][x * 9]`"
    sent: "2017-09-13T22:19:48.148Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b9aeaa177fb9fe7eb997bf"
    text: "not sure what you mean :confused: "
    sent: "2017-09-13T22:18:18.583Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9ae9a210ac269202a76b4"
    text: "?"
    sent: "2017-09-13T22:18:02.049Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b9ae4acfeed2eb65070b81"
    text: "use func by itself"
    sent: "2017-09-13T22:16:42.728Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b9ae011081499f1f2af252"
    text: {or maybe it works as intended and I forgot what exactly I want it to be :D}
    sent: "2017-09-13T22:15:29.110Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9addb614889d475f51184"
    text: {```text^/>> map [1 2 3 4][x y][reduce [x + 1 y * 2]]^/== [2 4 4 8]^/```}
    sent: "2017-09-13T22:14:51.201Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9ad51177fb9fe7eb991c6"
    text: {@gltewalt sort of^/```text^/>> map [1 2 3 4][x][x * 2]^/== [2 4 6 8]^/```^/though providing `spec` with more than one word doesn't work as expected, seems that I screwed up somewhere and forgot to check it}
    sent: "2017-09-13T22:12:33.823Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9ac5a1081499f1f2aeb30"
    text: {Away from actual computer. Can you use lambdas with your `map` @9214 ?}
    sent: "2017-09-13T22:08:26.488Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b9aae6c101bc4e3ac34efc"
    text: {to clarify:^/```text^/>> parse [a 1 b 2 c 3][(w: tail [-->]) collect into w some [keep word! | skip]]^/== true^/>> head w^/== [--> a b c]^/```^/```text^/>> parse [a 1 b 2 c 3][collect set w some [keep integer! | skip]]^/== true^/>> w^/== [1 2 3]^/```}
    sent: "2017-09-13T22:02:14.912Z"
    editedAt: "2017-09-13T22:03:46.507Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9aa27614889d475f50146"
    text: {@maximvl ^/```text^/>> parse [a 1 b 2 c 3][(w: []) collect into w [some [keep word! | skip]]]^/== true^/>> w^/== [a b c]^/```}
    sent: "2017-09-13T21:59:03.126Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9a78f319100804e304ec7"
    text: {Don't know if it needs to be homogenous datatype or not, though}
    sent: "2017-09-13T21:47:59.718Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b9a766210ac269202a55f0"
    text: {@gltewalt ^/```text^/map: func [^/    "apply function to elements of the series"^/    series [series!]^/    spec   [block!]^/    body   [block!]^/][^/    collect [^/        foreach :spec series [^/            keep do reduce compose [func spec body (:spec)]^/        ]^/    ]^/]^/```}
    sent: "2017-09-13T21:47:18.762Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9a70f1081499f1f2ad002"
    text: {Simple first poke at a mappy thing:^/```^/mapeach: func [fn blk][^/    collect [foreach i blk [keep fn i]]^/]^/```}
    sent: "2017-09-13T21:45:51.838Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b9a5b5c101bc4e3ac33427"
    text: "@maximvl `collect set` or `collect into`?"
    sent: "2017-09-13T21:40:05.023Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b9a544cfeed2eb6506d6d3"
    text: "my naive approach doesn't work"
    sent: "2017-09-13T21:38:12.481Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b9a53dcfeed2eb6506d6cb"
    text: {```^/>> parse [a b c 1] [set x collect any [keep word! | skip keep (5)]]^/== [a b c 5]^/>> x^/== a^/```}
    sent: "2017-09-13T21:38:05.481Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b9a4e01081499f1f2ac308"
    text: {is there any way to continue using `collect`ed data inside the `parse`?}
    sent: "2017-09-13T21:36:32.430Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b9a456210ac269202a4762"
    text: {@gltewalt I guess we can, but maybe it will be `mapeach` probably to avoid confusion. }
    sent: "2017-09-13T21:34:14.716Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b9a391319100804e303878"
    text: {We can't have map function do to map datatype confusion, can we?}
    sent: "2017-09-13T21:30:57.615Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b999f9bac826f054b4188b"
    text: "@rebolek thanks"
    sent: "2017-09-13T20:50:01.871Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b99327319100804e2fdbb4"
    text: {@maximvl without refinements it's easy:^/```^/>> apply: func [fn args][do reduce head insert args :fn]^/== func [fn args][do reduce head insert args :fn]^/>> apply :add [1 2]^/== 3^/```}
    sent: "2017-09-13T20:20:55.255Z"
    editedAt: "2017-09-13T20:21:08.074Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b9929f210ac2692029e269"
    text: "like `apply :+ [1 2] => 3`"
    sent: "2017-09-13T20:18:39.558Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b9928fc101bc4e3ac2c4af"
    text: "how would you implement `apply` func?"
    sent: "2017-09-13T20:18:23.165Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b915eb1081499f1f27815e"
    text: {```^/rejoin ["64#{" enbase read/binary %image.png "}"]^/```}
    sent: "2017-09-13T11:26:35.747Z"
    editedAt: "2017-09-13T11:28:13.665Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b91521319100804e2cdd67"
    text: {Thanks  @rgchris  - how do I create the  base64  string  from a  png file ?}
    sent: "2017-09-13T11:23:13.064Z"
    v: 1
    author: "599b74b6d73408ce4f725ff4"
) #(
    id: "59b8ea59c101bc4e3abeda11"
    text: "@Phryxe :cool: "
    sent: "2017-09-13T08:20:41.889Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b8e9c7177fb9fe7eb4f77d"
    text: "@rebolek `print mold` is good  :+1:  :relieved:"
    sent: "2017-09-13T08:18:15.859Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59b8e95abac826f054afeefa"
    text: "or `print mold` for example"
    sent: "2017-09-13T08:16:26.131Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b8e902177fb9fe7eb4f392"
    text: {@Phryxe as you wrote, `print` reduces, so just use something else:^/```^/>> z: [] append z 'o^/== [o]^/>> probe words-of reduce z/1^/[a b]^/== [a b]^/```}
    sent: "2017-09-13T08:14:58.475Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b8e88c614889d475f088a3"
    text: {@rebolek^/```^/>> z: [] append z 'o^/== [o]^/>> print words-of reduce z/1^/1 2^/``` ^/How do I print the words-of if the object is in a block?}
    sent: "2017-09-13T08:13:00.174Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59b8e4e9177fb9fe7eb4dfaa"
    text: "I used print (which reduces) ... My bad."
    sent: "2017-09-13T07:57:29.579Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59b8e4bb210ac26920260503"
    text: {@Phryxe ^/```^/>> o: context [a: 1 b: 2]^/== make object! [^/    a: 1^/    b: 2^/]^/>> words-of o^/== [a b]^/>> values-of o^/== [1 2]^/>> reduce words-of o^/== [1 2]^/```}
    sent: "2017-09-13T07:56:43.643Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b8e449c101bc4e3abeb80f"
    text: {I'm fiddling with `words-of`and `values-of` of an object, but both seems to return the values!?}
    sent: "2017-09-13T07:54:49.911Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59b893e3614889d475ef03d5"
    text: {https://gist.github.com/rgchris/dad74175c350e64d448c71135bf31f5c}
    sent: "2017-09-13T02:11:47.412Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b893cbb59d55b823ec2cca"
    text: "@Sunnypt Yes, Base64:"
    sent: "2017-09-13T02:11:23.511Z"
    editedAt: "2017-09-13T02:11:37.806Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59b87104bac826f054adcf9c"
    text: {hi,^/I remember from the rebol days that it was possible to embed a graphic into a script (a jpg or a png)^/is it possible with Red and how,  was it base64 ?  - examples would be good if possible. ^/Sorry a bit of a newcomer.}
    sent: "2017-09-12T23:43:00.334Z"
    v: 1
    author: "599b74b6d73408ce4f725ff4"
) #(
    id: "59b7fab3cfeed2eb65fddb48"
    text: {Understood on usage frequency versus functionality. Sorry I wasn't clear about that in my message.}
    sent: "2017-09-12T15:18:11.442Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b7cf4acfeed2eb65fcb91b"
    text: "but it's still more essential"
    sent: "2017-09-12T12:12:58.003Z"
    editedAt: "2017-09-12T12:13:24.431Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b7cf41c101bc4e3ab8f2f5"
    text: {like in example from the talk, you probably won't find `+1` being used more than regular addition}
    sent: "2017-09-12T12:12:49.741Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b7cf1e614889d475ea9afe"
    text: {it's about the ones which can be used to implement all the others}
    sent: "2017-09-12T12:12:14.579Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b7cf0c1081499f1f20c784"
    text: {it's not about most often used functions / operations}
    sent: "2017-09-12T12:11:56.079Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b7cef8177fb9fe7eaf2050"
    text: "and one more thing"
    sent: "2017-09-12T12:11:36.398Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b7cdebbc4647297423d37e"
    text: {but those original 7 are still helpful to understand the language and reason about things}
    sent: "2017-09-12T12:07:07.295Z"
    editedAt: "2017-09-12T12:16:02.284Z"
    v: 5
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b7cd821081499f1f20bec5"
    text: {pure Lisp has 7 primitives, but if you take a look at real-world implementation like SBCL AFAIK it has around 40 core primitives for performance reasons as well}
    sent: "2017-09-12T12:05:22.770Z"
    editedAt: "2017-09-12T12:06:08.356Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b7cd5ccfeed2eb65fcae6b"
    text: {I'm not saying that we should find some "holy stuff" and implement a new version or something :D}
    sent: "2017-09-12T12:04:44.653Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b7cd40cfeed2eb65fcad64"
    text: {@Oldes @greggirwin my idea here is that it's easier to learn and understand the language if you start with essential parts and know which features are implemented on top, this helps your reasoning and so on}
    sent: "2017-09-12T12:04:16.755Z"
    editedAt: "2017-09-12T12:08:31.485Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b7a666c101bc4e3ab80c7e"
    text: {For paths, they are just sugar in most cases, except for function call with refinements. Though, such case can be emulated using `apply` (not yet available in Red), so paths could be left out of a minimal core.}
    sent: "2017-09-12T09:18:30.726Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b7a15bc101bc4e3ab7f0c8"
    text: "and definitely no `op!`s :-)"
    sent: "2017-09-12T08:56:59.005Z"
    editedAt: "2017-09-12T08:57:07.510Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
)#(
    id: "59b79bcd319100804e250141"
    text: "Parse dialect is sugar, indeed."
    sent: "2017-09-12T08:33:17.017Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b79bb9210ac269201f51a6"
    text: {@maximvl ^/> I'm trying to make a list of things which are essential to Rebol/Red: block/series, words, context^/^/Series (`block!` and `string!`), words, contexts, numbers, actions (just a subset, not all of them) should be all you need for a working Redbol core.}
    sent: "2017-09-12T08:32:57.976Z"
    editedAt: "2017-09-12T08:33:56.363Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59b78b951081499f1f1f54c0"
    text: {@OneArb I would say it is WIP... I'm not following it closely but I think the new Red console (with color text) is using it. Last time (months ago) I checked it, there were some issues with caret position, but maybe because I have HiDPI resolution. @qtxie will know exactly ;-) But he may be down in Android code now.}
    sent: "2017-09-12T07:24:05.820Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b6f0e6bc464729741f89ea"
    text: {@Oldes  Thanks, `text-box` may be the exact answer to my use-case.^/^/I am pondering the benefits of one style per word vs. embedding styles within `text:` string. ^/^/Is the face suitable for editing, or is the cursor intended for drawing only as I see no selection option.Work in progress?}
    sent: "2017-09-11T20:24:06.948Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59b6d7da177fb9fe7eaa4579"
    text: {On core language, I don't believe R/S is the core of Red, because R/S is a dialect *of* Red. If we look at the primary languages that influenced its design (Lisp, Forth, Logo, + Self for objects), we could identify their common cores, then add Rebol's key innovations. Red has shown that you *can* implement Redbol langs in themselves. It would be fun to distill the core, to see how small it could be, but then we end up back, likely, with the performance issues of R1.^/^/@maximvl, while it's tempting to say that improperly designed languages make certain extensions hackish, I don't think that's a completely fair statement. A language can be well and properly designed, but never have the intent to support certain features. ^/^/Some years ago I wrote a little scanner that counted func usage in R2. There are 20-25 funcs that account for the vast bulk of calls.}
    sent: "2017-09-11T18:37:14.158Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b6d0dd319100804e212ca8"
    text: {Thanks, @rebolek  and @Oldes  for jumping in to explain. Sorry I wasn't clear @OneArb .}
    sent: "2017-09-11T18:07:25.707Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b6c15dbac826f054a4ab8b"
    text: {@maximvl btw.. today I found [mention](http://opensecuritytraining.info/IntroX86_files/IntroductionToIntelx86-Part1.pdf), that [only 14 instructions account for 90% of code](http://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Bilar.pdf). Is it core enough? }
    sent: "2017-09-11T17:01:17.523Z"
    editedAt: "2017-09-11T17:05:35.610Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b6bf96bac826f054a49e3a"
    text: {@OneArb you can use the examples in current Red console, so no need to experiment with Qtxie's code.}
    sent: "2017-09-11T16:53:42.061Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b6bdae614889d475e53880"
    text: {Hard to say which branch is the most recent in this field :)}
    sent: "2017-09-11T16:45:34.791Z"
    editedAt: "2017-09-11T16:45:44.753Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b6bd60bc464729741e5eca"
    text: "https://github.com/qtxie/red/wiki/Text-box!-Usage"
    sent: "2017-09-11T16:44:16.782Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b6bd44bc464729741e5e72"
    text: {@Oldes Great, I'm in https://github.com/qtxie/red what would I'd be looking for?}
    sent: "2017-09-11T16:43:48.802Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59b6bb75210ac269201b0585"
    text: {@maximvl what is the point of looking for some holy primitives? I want to extend the core R/S language to support basic types :/}
    sent: "2017-09-11T16:36:05.411Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b6bb41177fb9fe7ea99710"
    text: {@OneArb the `text-box` is build in separate repository by Qtxie. }
    sent: "2017-09-11T16:35:13.438Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b6b19b210ac269201ac6f8"
    text: {@OneArb `!` denotes datatype by convention. You have have `whatever!: 42` and it would work.}
    sent: "2017-09-11T15:54:03.935Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b6a561614889d475e4a494"
    text: {@greggirwin I am a bit confused about your `text-box!` mention.  Doesn't '!' denote a data type?^/^/Did you mean to refer to `group-box`?  I can handle the selector line by myself until `edge` comes out.}
    sent: "2017-09-11T15:01:53.036Z"
    editedAt: "2017-09-11T15:02:26.557Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59b6a0c6cfeed2eb65f6a92f"
    text: "https://github.com/red/red/releases/tag/v0.1.0"
    sent: "2017-09-11T14:42:14.009Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b6a0c1162adb6d2e8eb74f"
    text: {@maximvl you can look at early R/S versions on github I think}
    sent: "2017-09-11T14:42:09.109Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b69ff0c101bc4e3ab2d387"
    text: {no, no chicken and egg, parse is clearly an extension of the language}
    sent: "2017-09-11T14:38:40.753Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b69fd3210ac269201a5218"
    text: "chicken and egg"
    sent: "2017-09-11T14:38:11.339Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b69fcfc101bc4e3ab2d264"
    text: "oh, I see"
    sent: "2017-09-11T14:38:07.918Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b69fc7210ac269201a5190"
    text: "this is not parse, this is regular Red"
    sent: "2017-09-11T14:37:59.517Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b69fba162adb6d2e8eaf15"
    text: "and what about `(...)` after parse rules?"
    sent: "2017-09-11T14:37:46.973Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b69faabc464729741d990b"
    text: "but not execute"
    sent: "2017-09-11T14:37:30.596Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b69fa5614889d475e47d73"
    text: "you can parse a language using parse"
    sent: "2017-09-11T14:37:25.847Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b69f99bac826f054a3cf61"
    text: "no, you can't"
    sent: "2017-09-11T14:37:13.392Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b69f67bac826f054a3ce6b"
    text: {alternatively you can write a language using parse}
    sent: "2017-09-11T14:36:23.154Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b69f5fcfeed2eb65f69f02"
    text: "not otherwise, so it's a sugar"
    sent: "2017-09-11T14:36:15.654Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b69f54b59d55b823e1a636"
    text: "you can write parse using just the language"
    sent: "2017-09-11T14:36:04.812Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b69f50614889d475e47b74"
    text: {I would say that Redbol program is a **series** of **words** in a different **contexts**}
    sent: "2017-09-11T14:36:00.939Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b69f20bac826f054a3cca2"
    text: "someone pointed to `parse` :^^)"
    sent: "2017-09-11T14:35:12.275Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b69f15b59d55b823e1a4c6"
    text: {@maximvl I asked something similar back in March I believe, i.e. "what's the analog for 7 holy Lisp primitives in Redbol?"}
    sent: "2017-09-11T14:35:01.671Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b6983dcfeed2eb65f66efc"
    text: "I think paths are essential"
    sent: "2017-09-11T14:05:49.866Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b68201c101bc4e3ab21749"
    text: "E.g. path syntax"
    sent: "2017-09-11T12:30:57.726Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59b681f9162adb6d2e8df104"
    text: {I'm not familiar with how Rebol evolved, but the earlier versions may have less syntactic sugar and was more *verby* I think? Can anyone confirm?}
    sent: "2017-09-11T12:30:49.164Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59b68151b59d55b823e0e1c6"
    text: {I think I understand a little bit, e.g:^/```rebol^/>> set a 3^/== 3^/>> a: 3^/== 3^/```}
    sent: "2017-09-11T12:28:01.605Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59b68125c101bc4e3ab2105b"
    text: "I would say parse is sugar too"
    sent: "2017-09-11T12:27:17.171Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b68113177fb9fe7ea820da"
    text: "for example reactivity is sugar in this sense"
    sent: "2017-09-11T12:26:59.393Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b6810a319100804e1f2f64"
    text: {@geekyi I'm trying to make a list of things which are essential to Rebol/Red: block/series, words, context}
    sent: "2017-09-11T12:26:50.151Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b68008bac826f054a2fc56"
    text: {@maximvl I think you're looking for early Rebol 1 & 2 :p }
    sent: "2017-09-11T12:22:32.277Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59b68002cfeed2eb65f5d54e"
    text: "@meijeru Thanks - MacOS did it."
    sent: "2017-09-11T12:22:26.690Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59b67faa614889d475e3b222"
    text: {@geekyi needs something to summarize / get transcript of youtube videos}
    status: true
    sent: "2017-09-11T12:20:58.315Z"
    editedAt: "2017-09-11T12:21:10.761Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59b67f4f210ac269201985af"
    text: {> @Oldes yeah, should have pointed to the timestamp, 23:00^/^/https://www.youtube.com/watch?v=3N__tvmZrzc&t=23m}
    sent: "2017-09-11T12:19:27.726Z"
    editedAt: "2017-09-11T12:20:13.236Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59b67d0a162adb6d2e8dd4ef"
    text: {this is enough to build any complex kind of lisp you want}
    sent: "2017-09-11T12:09:46.497Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b67cf7177fb9fe7ea80ab1"
    text: {for example the core language for lisp is quite simple - lists and 7 basic operators}
    sent: "2017-09-11T12:09:27.493Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b67cb7bc464729741cb6ab"
    text: {the main takeaway from this talk is that if core of the language is not designed properly - new features end up added in a "hacky" way, with Python's closures and iterators as an example}
    sent: "2017-09-11T12:08:23.407Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b67c5dc101bc4e3ab1f41c"
    text: "eg static typing and other things"
    sent: "2017-09-11T12:06:53.708Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b67c51b59d55b823e0c4a1"
    text: {but R/S is quite complex and it's rules are not applicable for Red}
    sent: "2017-09-11T12:06:41.756Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b67c36b59d55b823e0c45d"
    text: {Again.. my answer would be Red/System as Red/System is the core for Red.}
    sent: "2017-09-11T12:06:14.939Z"
    editedAt: "2017-09-11T12:06:36.764Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b67bfc319100804e1f1324"
    text: {as I understand the definition of the core language is some subset of the language which is easy to understand and all the other parts can be reduced in this subset}
    sent: "2017-09-11T12:05:16.735Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b67b8fbc464729741cadb1"
    text: {he talks about desugaring and how you can have just `+1`, `-1` and `loop` in core language to implement "sugar" like addition, multiplication, division etc}
    sent: "2017-09-11T12:03:27.734Z"
    editedAt: "2017-09-11T12:03:58.640Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
)#(
    id: "59b67b7cbac826f054a2dda6"
    text: {@Oldes yeah, should have pointed to the timestamp, 23:00}
    sent: "2017-09-11T12:03:08.570Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b6795a210ac26920195f12"
    text: {Than I don't understand what you are searching for... the talk would be for me too academic.}
    sent: "2017-09-11T11:54:02.005Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b678fa177fb9fe7ea7f353"
    text: {@Oldes nope, Red/System and Red are completely different languages in this sense}
    sent: "2017-09-11T11:52:26.040Z"
    editedAt: "2017-09-11T11:52:43.620Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b678bc319100804e1f0138"
    text: {@maximvl I was not watching the talk, but isn't `Red/System` the core language?}
    sent: "2017-09-11T11:51:24.391Z"
    editedAt: "2017-09-11T11:51:31.846Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b66434cfeed2eb65f5340b"
    text: "Red is small, core language ;)"
    sent: "2017-09-11T10:23:48.531Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b65e2e614889d475e2f9d0"
    text: {and my question is - is there a "small, core language" in Red?}
    sent: "2017-09-11T09:58:06.632Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b65e1a319100804e1e68f7"
    text: {hey guys I'd like to share this talk: https://www.youtube.com/watch?v=3N__tvmZrzc}
    sent: "2017-09-11T09:57:46.475Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b64bccbac826f054a1cef6"
    text: {@meijeru @ralfwenske it will be that.... there was big rename from `MacOSX` to `macOS` some time ago and the doc was not updated.}
    sent: "2017-09-11T08:39:40.764Z"
    editedAt: "2017-09-11T08:40:33.999Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59b64b23162adb6d2e8cbad2"
    text: {@OneArb, the `text-box!` style is intended for that. You could also do it with Draw commands. `Area` isn't what you want either. You could use `panel`, but there is no standard scrolling panel yet. @rebolek has probably done the most work in this area.}
    sent: "2017-09-11T08:36:51.633Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b64429b59d55b823df897f"
    text: "Just wondering..."
    sent: "2017-09-11T08:07:05.602Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59b6441a614889d475e272b8"
    text: "JU"
    sent: "2017-09-11T08:06:50.950Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59b643f4162adb6d2e8c9734"
    text: "Shouldn't the X be left out in MacOSX?"
    sent: "2017-09-11T08:06:12.309Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59b6244f319100804e1d3b0d"
    text: {The following example from doc.red-lang.org fails on macOS.^/It works fine on Linux and Win10.^/```^/>> print read %Dropbox/red-tests/macro.red^/Red []^/print "Testing Macros"^/print #switch config/OS [^/    Windows ["Windows"]^/    Linux ["Unix"]^/    MacOSX ["MacOS"]^/]^/>> do %Dropbox/red-tests/macro.red^/*** Script Error: syntax-error does not allow none! for its s argument^/*** Where: syntax-error^/*** Stack: do-file expand-directives expand ^/```^/Is this known?}
    sent: "2017-09-11T05:51:11.783Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59b6188a319100804e1d03fb"
    text: "The idea is tempting though... :smirk:"
    sent: "2017-09-11T05:00:58.233Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b6060bb59d55b823de6da8"
    text: {@rebolek My naughty bots wouldn't behave in real Gitter. :worried: }
    sent: "2017-09-11T03:42:03.345Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b5a5adcfeed2eb65f1ce79"
    text: {I'd like scrolling text using different color, font size and background.^/^/What would be the best way to achieve this?^/^/Do I need to emulate this using several faces in `area`?}
    sent: "2017-09-10T20:50:53.760Z"
    editedAt: "2017-09-10T20:52:54.867Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59b599cdbac826f0549ea95c"
    text: {@toomasv why not using [Gitter](https://github.com/rebolek/gritter/blob/master/gitter-api.red) instead of "*Gitter*"? ;)}
    sent: "2017-09-10T20:00:13.248Z"
    editedAt: "2017-09-10T20:00:33.188Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b59886210ac26920154449"
    text: {@greggirwin Thanks, interesting info!^/ @rebolek Changed these to backticks.}
    sent: "2017-09-10T19:54:46.961Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b59058210ac26920151c41"
    text: "Single quotes are bit confusing though ;)"
    sent: "2017-09-10T19:19:52.098Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59b58459177fb9fe7ea3522e"
    text: {Your coded chat remarks are also quite entertaining. :^^)}
    sent: "2017-09-10T18:28:41.844Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b58435b59d55b823dc3968"
    text: {Others have built some chatbots, too, and I think there's a nice opportunity to have a "local guru" in a more advanced help system, when we build more tools and IDEs. The Idyll link from @geekyi was good to see, too. }
    sent: "2017-09-10T18:28:05.611Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b583a3bc46472974181746"
    text: {Very cool @toomasv! There's a lot going on in there. I'll try to create a better observer example. And I did find some other old bits I hacked up after seeing someone talk about ReactiveX at a local dev group meetup.}
    sent: "2017-09-10T18:25:39.485Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b54f44210ac26920141685"
    text: {^/@greggirwin Tweaking a bit your example I tried to make two bots to talk ([chatbot](https://gist.github.com/toomasv/01a16f7dfd49a7aea9cbac014ba94e6a)). Here is  the output of one session:^/```^/>> do %messages.red^/>> insert gitter/messages ["Newbe" "Start"]^/Newbe: Hello! How many arguments does 'do-actor' have?^/ Guru: 'do-actor' has 3 arguments!^/Newbe: And what are these arguments?^/ Guru: These are 'face', 'event' and 'type'.^/Newbe: Cool! But how many refinements does 'to-percent' have?^/ Guru: 'to-percent' has 0 refinements!^/Newbe: But how many arguments does 'dir' have?^/ Guru: 'dir' has 1 argument!^/Newbe: And what is this argument?^/ Guru: It is 'dir'.^/Newbe: Isn't that cute! But how many refinements does 'to-bitset' have?^/ Guru: 'to-bitset' has 0 refinements!^/Newbe: But how many arguments does 'to-date' have?^/ Guru: 'to-date' has 1 argument!^/Newbe: And what is this argument?^/ Guru: It is 'value'.^/Newbe: Cool! But how many refinements does 'find' have?^/ Guru: 'find' has 11 refinements!^/Newbe: And what are these refinements?^/ Guru: One newbe can ask more than 10 gurus can answer.^/       I have to do some work now. Have a nice day!^/       BTW These are 'part', 'only', 'case', 'same', 'any', 'with', 'skip', 'last', 'reverse', 'tail' and 'match'. :)^/Newbe: You are my hero! Happy coding! Waiting for next release!^/```}
    sent: "2017-09-10T14:42:12.365Z"
    editedAt: "2017-09-10T14:49:00.067Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b521204e50cfde2722e536"
    text: {@ralfwenske You don't need lit-words in `switch`:^/```^/        switch/default ep [^/            m-load [print "Load"]^/            m-save [print "Save"]^/            m-saveas [print "SaveAs"]^/        ][^/ ```}
    sent: "2017-09-10T11:25:20.030Z"
    editedAt: "2017-09-10T11:25:30.158Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b4cb6ec101bc4e3aaadd61"
    text: {Could someone help please:^/```^/Red [needs: 'view]^/v: layout [text "Some Text"]^/v/menu: ["File" ["Load" m-load "Save" m-save "Save As" m-saveas] ]^/v/actors: make object! [^/    on-menu: func [face [object!] event [event!] /local ep][^/        ep: event/picked^/        switch/default ep [^/            'm-load [print "Load"]^/            'm-save [print "Save"]^/            'm-saveas [print "SaveAs"]^/        ][^/            print ["something is wrong here: " ep " = 'm-load --> " ep = 'm-load type? ep]^/        ]^/    ]^/]^/view v^/```^/on clicking some menu entries I get:^/```^/something is wrong here:  m-save  = 'm-load -->  false word^/something is wrong here:  m-load  = 'm-load -->  true word^/```^/I expected the switch to react...^/}
    sent: "2017-09-10T05:19:42.772Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "59b3a99466c1c7c4772f8470"
    text: "@greggirwin Thanks a lot! :yum:"
    sent: "2017-09-09T08:43:00.405Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b30525c101bc4e3aa4cc5c"
    text: {Was going to add the `/with` support, to control what you watch, but this already gnawed at me enough that I had to get it out here so my brain would let it go for a bit.}
    sent: "2017-09-08T21:01:25.954Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b304a3bac826f05495a3d8"
    text: {Poor mixing of names there, as the standard name in the pattern is Subject for the source, but then I called the observers 'sub-* thinking of pub/sub naming. Argh.}
    sent: "2017-09-08T20:59:15.766Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b3040566c1c7c4772d4172"
    text: {This is a bit much for a message here, but will clean it up and make a gist later:^/```^/Red [^/^-purpose: "Observer pattern example"^/]^/^/; See: http://www.red-lang.org/2016/03/060-red-gui-system.html blog entry^/; Lots of name choices to consider.^/^/subject-proto: object [^/^-_conns: copy []^-; observer connections^/^-^/^-on-deep-change*: func [owner word target action new index part][^/^-^-; The _conns check here is something we could support, so you could^/^-^-; observe the changes to the observer list.^/^-^-if word <> '_conns [^/^-^-^-foreach conn _conns [^/^-^-^-^-attempt [conn/on-change owner word target action new index part]^/^-^-^-]^/^-^-]^/^-]^/^/^-observer?: func [obj [object!]][^/^-^-not none? find words-of obj 'on-change^/^-]^/^-attach: func [obj [object!]][ ;  /with words [word! block!]^/^-^-either observer? obj [^/^-^-^-if not find _conns obj [append _conns obj]^-; single-entry registrar^/^-^-][^/^-^-^-print mold obj^/^-^-^-return make error! "The given object doesn't look like an observer."^/^-^-]^/^-^-obj^/^-]^/^-detach: func [obj [object!]][ ;  /with words [word! block!]^/^-^-take find _conns obj^/^-]^/^/]^/^/observer-proto: object [^/^-on-change: func [owner word target action new index part][^/^-^-print ['on-change owner word target action new index part]^/^-]^/^-watch: func [obj [object!] "Subject"][obj/attach self]^/^-unwatch: func [obj [object!] "Subject"][obj/detach self]^/]^/^/;-------------------------------------------------------------------------------^/^/pub: make subject-proto [blk: copy [] str: copy ""]^/obs!: make observer-proto [^/^-id: none^/^-on-change: func [owner word target action new index part][^/^-^-print ['Observer id 'on-change '| 'word_ word 'act_ action 'val_ mold new 'idx_ index 'part_ part] ; owner target ^/^-]^/]^/sub-a: make obs! [id: "A"]^/sub-b: make obs! [id: "B"]^/sub-a/watch pub^/sub-b/watch pub^/^/append pub/blk 1^/append pub/str #"A"^/append pub/blk [2 3 4]^/take at pub/blk 3^/sub-a/unwatch pub^/append pub/str "BCD"^/```}
    sent: "2017-09-08T20:56:37.040Z"
    editedAt: "2017-09-08T21:04:31.025Z"
    v: 3
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2e632bac826f054952441"
    text: "OK"
    sent: "2017-09-08T18:49:22.207Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b2e609bac826f0549523b3"
    text: {Not in my pocket. I have to work on something else for a bit, but will try to come up with an example shortly.}
    sent: "2017-09-08T18:48:41.914Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2e5e6bac826f05495215d"
    text: "Any hints/examples?"
    sent: "2017-09-08T18:48:06.446Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b2e5ab66c1c7c4772cb6ac"
    text: {Based on the original notes, I wouldn't be surprised if it was extended in the future. In the meantime, it would be a DIY observer pattern, which could be built around the single owner.}
    sent: "2017-09-08T18:47:07.499Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2e4e9b16f2646421dc87a"
    text: "@greggirwin OK, thanks!"
    sent: "2017-09-08T18:43:53.451Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b2e3f9ee5c9a4c5f497504"
    text: "Currently, there can be only one owner."
    sent: "2017-09-08T18:39:53.637Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2d891b59d55b823d30d4d"
    text: {Can same series be owned (or rather shared) by different objects ? E.g.:^/```^/messages: copy [] ^/obj: object [^/   me:  msgs: none ^/   on-deep-change*: function [^/      owner word target action new index part^/   ][^/      probe owner^/   ]^/]^/o1: make obj [^/   me: "o1" ^/   msgs: messages ^/]^/o2: make obj [^/   me: "o2" ^/   msgs: messages ^/]^/```^/If we now change `messages`, only `o1` reacts:^/```^/>> insert messages ["Hi!"]^/[make object! [^/    me: "o1"^/    msgs: ["Hi!"]^/]]^/```^/I observed same behavior with `make deep-reactor!`. Is it possible for both `o1` and `o2` to react on the change of same series? }
    sent: "2017-09-08T17:51:13.277Z"
    editedAt: "2017-09-08T18:00:19.673Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b1034266c1c7c47724229f"
    text: {@maximvl yes, but _some_ of the old games I love (most of my game library anyway) are for Win only}
    sent: "2017-09-07T08:28:50.876Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b10302c101bc4e3a9ba930"
    text: {offtopic: steam works on Linux and has decent amount of games :D}
    sent: "2017-09-07T08:27:46.077Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b02476c101bc4e3a9813c9"
    text: {@honix already switched! :neckbeard: I keep Win since I do some photography from time to time and badly need PS for post-processing... and Steam, yeah, I'm pathetic :game_die:}
    sent: "2017-09-06T16:38:14.120Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b0231a210ac26920001676"
    text: "@toomasv. :^^)"
    sent: "2017-09-06T16:32:26.477Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b01850bac826f054885ddc"
    text: {@9214 Red with Wine works pretty good. But some issues occur, especially with draw dialect.. @9214 do you planning switch to Linux? :neckbeard: }
    sent: "2017-09-06T15:46:24.159Z"
    editedAt: "2017-09-06T15:47:01.600Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59afcbd6bc464729740085d8"
    text: {I'll try to work with Win version of VSCode under Wine, currently it's the easiest workaround.}
    sent: "2017-09-06T10:20:06.041Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59afcba98f4427b462da351b"
    text: {I have dualboot Win7, but I challenged myself to avoid its usage 'til next year :D}
    sent: "2017-09-06T10:19:21.836Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59afcb52bac826f05486bcd8"
    text: "@9214 I mostly use Windows VM on Linux"
    sent: "2017-09-06T10:17:54.716Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59afcb35b16f2646420f7795"
    text: {Sigh. I meant that GTK3 backend is WIP and isn't included in the master branch, hence I should work either with Wine or somehow emulate Windows backend for now, and that's what I've asked in a first place.}
    sent: "2017-09-06T10:17:25.505Z"
    editedAt: "2017-09-06T10:20:30.571Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59afc334bac826f054869645"
    text: {@9214 What do you mean? Working with View requires a backend and on linux it is supposed to be gtk3 (could be another one later). }
    sent: "2017-09-06T09:43:16.952Z"
    editedAt: "2017-09-06T09:44:06.525Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "59afbb048f4427b462d9da28"
    text: {@greggirwin Thanks, it seems I can unerstand Chinese all of a sudden. :relieved:}
    sent: "2017-09-06T09:08:20.359Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59afb5298f4427b462d9beea"
    text: {@honix no, I meant working with View on linux without GTK backend}
    sent: "2017-09-06T08:43:21.811Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59af9a59bc46472974ff81d3"
    text: {I *think* this is what I meant:^/```^/gen-user: super-fun [^/    ; Spec for the func we're making. Parens are dialected control attributes.^/    ; e.g. 'protect ensures the object passed in can't be modified in any way.^/    ;      'vet     compares an object (duck-typing) against a known interface.^/    ;      ' keep   closes over the arg^/    [^/        info [object!] (protect  vet as user-info-proto)^/        seed [string!] (keep) "Hashed with last seed"^/    ]^/    ; /keep  closes over local values^/    /keep  [keys count]^/    ; /reuse "resets" values without reallocating if possible^/    /reuse [buffer [string!] n [integer!]]^/    ; /init  ...yeah, maybe we don't need this^/    /init  [seeded?: no]^/    return: [object!] (vet as user-proto)^/][...]^/```}
    sent: "2017-09-06T06:48:57.413Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59af985d210ac26920fd4047"
    text: {Sometimes my stream-of-consciousness only makes sense to me. :^^)}
    sent: "2017-09-06T06:40:29.563Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "59af6ccbbc46472974fed008"
    text: {@dander True, the problem arises with closure2 only if we try to bind with `vars` some words which are declared  `/local` in`spec`.^/@greggirwin Why are you speaking Chinese? :flushed:}
    sent: "2017-09-06T03:34:35.766Z"
    editedAt: "2017-09-06T03:38:25.685Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59af1ec8ee5c9a4c5f386c9a"
    text: {The recent chat about Haskell and Common Lisp features, typing, and such, ties in here. We want to design the `closure` interface so it aligns well with the `function` interface. The `/local` example is a good one there. PoLS and all that. But it also sparked a thought here about how we can take this in new directions, which plays into Red being full stack. That is, use Red for most things, but Red/System when you need its capabilities. Going in the other direction, we can create a func spec dialect that supports stronger typing constraints, but also gives us context control. ^/```^/gen-user: super-fun [^/^-[^/^-^-info [object!] (protect  vet as user-info-proto)^/^-^-seed [string!] (keep) "Hashed with last seed"^/^-]^/^-/keep  [keys count]^/^-/reuse [buffer [string!] n [integer!]]^/^-/init  [seeded?: no]^/^-return: [object!] (vet as user-proto)^/][...]^/```}
    sent: "2017-09-05T22:01:44.611Z"
    editedAt: "2017-09-05T22:03:16.139Z"
    v: 3
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59af1ad6ee5c9a4c5f385a34"
    text: {`Closure`, as we look at the design and implementation alternatives, shows why I love Red so much. We get to peek inside, without too much complexity, and see how things work. Sometimes I do have to burn a few brain cells to understand advanced trickery, but at least it's manageable. I learn so much, and think in new ways, even after many years with Redbol languages.}
    sent: "2017-09-05T21:44:54.041Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59af10acc101bc4e3a931a30"
    text: {If you wanna try use [this branch](https://github.com/rcqls/red/tree/GTK)}
    sent: "2017-09-05T21:01:32.176Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59af0fc8ba0f0f6e381e3bc0"
    text: {@9214 if you mean low level gui development:^/```text^/*edit some *.reds files*^/> vim^/*build fresh Red console*^/> rebol --do "do/args %red.r \"-r %environment/console/console.red\""^/*run test gui with this console*^/> ./console tests/draw.red^/```}
    sent: "2017-09-05T20:57:44.804Z"
    editedAt: "2017-09-05T21:00:04.723Z"
    v: 4
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59af0bf1ee5c9a4c5f381330"
    text: {@toomasv Thanks! The note about `/local` is very useful, and a neat peek into how `func` operates. In this case I think it's also worth pointing out that the `/local` is not needed since the local words are bound to a new `context` and don't leak... maybe that is just pointing out the obvious.}
    sent: "2017-09-05T20:41:21.205Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59aefd0b614889d475c41564"
    text: {I suppose that's where some of the little Red IDE experiments could come in handy. If VS Code works reliably there, then yes.}
    sent: "2017-09-05T19:37:47.769Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59aefce7162adb6d2e6ed66e"
    text: "ah, perhaps I can just stick with VSCode"
    sent: "2017-09-05T19:37:11.820Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59aefcc19acddb2407071766"
    text: {And what's the workflow? Write script and `do` it from Wine repl?}
    sent: "2017-09-05T19:36:33.897Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59aefca6210ac26920fabf23"
    text: {Though I'm not a regular "Linux folk".}
    sent: "2017-09-05T19:36:06.527Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59aefc83614889d475c41348"
    text: "Wine is the norm I believe."
    sent: "2017-09-05T19:35:31.517Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59aef6d3614889d475c3f825"
    text: {How do you, linux folks, work with GUI stuff? Should I launch repl with Wine or something else?}
    sent: "2017-09-05T19:11:15.368Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59aee988162adb6d2e6e7361"
    text: {Thanks @Phryxe , %inflate.reds issue also noted in red/red room. }
    sent: "2017-09-05T18:14:32.418Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59aede33c101bc4e3a922851"
    text: {```^/D:\Program\Red>red-05sep17-0f19dc1.exe^/Compiling Red GUI console...^/*** Loading Error: file access error: %inflate.reds^/*** in file: %/D/Program/Red/call.reds^/*** at line: 125^/```}
    sent: "2017-09-05T17:26:11.916Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59aec0bd210ac26920f9915e"
    text: "@greggirwin Nice help!"
    sent: "2017-09-05T15:20:29.834Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59aeb750c101bc4e3a91542b"
    text: "Nice analysis on closures, @toomasv."
    sent: "2017-09-05T14:40:16.097Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59aeb7348f4427b462d54ab4"
    text: "Those are the standard char values right now."
    sent: "2017-09-05T14:39:48.969Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59aeb724210ac26920f959e2"
    text: {:point_up: [September 5, 2017 6:28 AM](https://gitter.im/red/help?at=59ae987e162adb6d2e6cacb9) @maximvl:^/```^/>> ? char!^/    null             #"^^@"^/    newline          #"^^/"^/    slash            #"/"^/    tab              #"^^-"^/    lf               #"^^/"^/    dbl-quote        #"^^""^/    space            #" "^/    CR               #"^^M"^/    dot              #"."^/    escape           #"^^["^/    sp               #" "^/    comma            #","^/```}
    sent: "2017-09-05T14:39:32.739Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59aeaa42162adb6d2e6d1060"
    text: {Latest version `red-05sep17-0f19dc1.exe` doesn't create an executable in ProgramData. In that directory is created crush dll and 10 red/reds files. I use Win 10.}
    sent: "2017-09-05T13:44:34.804Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59ae9cd1c101bc4e3a90b94d"
    text: {@maximvl  I meant there :point_up: [September 5, 2017 3:28 PM](https://gitter.im/red/help?at=59ae987e162adb6d2e6cacb9) }
    sent: "2017-09-05T12:47:13.933Z"
    editedAt: "2017-09-05T12:47:23.724Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae9c37ba0f0f6e381bc0a5"
    text: "well, they are not used in my example above"
    sent: "2017-09-05T12:44:39.507Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae9beb8f4427b462d4a8e0"
    text: "@maximvl I mean, it is just for convenience."
    sent: "2017-09-05T12:43:23.938Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae9babbc46472974fac8a5"
    text: "@rebolek much simpler! thanks :)"
    sent: "2017-09-05T12:42:19.906Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59ae9b8ebac826f054810aa9"
    text: {Yep, `op!`s are "hungry" on left side. You could use parens though.}
    sent: "2017-09-05T12:41:50.438Z"
    editedAt: "2017-09-05T12:45:46.780Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae9b8166c1c7c47718efdb"
    text: {@toomasv thanks! ```i = word!``` was evaluated first!}
    sent: "2017-09-05T12:41:37.171Z"
    editedAt: "2017-09-05T12:41:48.514Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59ae9b54210ac26920f8bc23"
    text: "oh"
    sent: "2017-09-05T12:40:52.971Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59ae9b4c9acddb240705049a"
    text: "`if word? i` is simpler"
    sent: "2017-09-05T12:40:44.340Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59ae9b37614889d475c1fe62"
    text: {@honix ^/```^/foreach i spec-of :reduce [ if word! = type? i [print type? i] ]^/```}
    sent: "2017-09-05T12:40:23.458Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae9adcba0f0f6e381bbac4"
    text: {everything is "just a suger" for a Turing machine}
    sent: "2017-09-05T12:38:52.861Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae9acbee5c9a4c5f35c01a"
    text: {@toomasv I'm not sure what does it mean "just a sugar"}
    sent: "2017-09-05T12:38:35.272Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae9a63b16f26464209a707"
    text: {can somebody tell, i want words! only but:^/```^/>> foreach i spec-of :reduce [ if type? i = word! [print type? i] ]^/string^/word^/block^/refinement^/string^/word^/block^/string^/```}
    sent: "2017-09-05T12:36:51.198Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59ae9a3b162adb6d2e6cb53a"
    text: {@maximvl `newline`, `space` etc are just a sugar:^/```^/>> reduce [newline space tab lf]^/== [#"^^/" #" " #"^^-" #"^^/"]^/```}
    sent: "2017-09-05T12:36:11.870Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae99e2ee5c9a4c5f35bbe8"
    text: "https://en.wikipedia.org/wiki/Caret_notation"
    sent: "2017-09-05T12:34:42.663Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59ae99b4ba0f0f6e381bb49b"
    text: {@maximvl according character codes^/```^/>> to-binary #"^^K"^/== #{0B}^/```}
    sent: "2017-09-05T12:33:56.605Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59ae993dc101bc4e3a90a6c0"
    text: {@maximvl ^/```^/>> to-char 11^/== #"^^K"^/```}
    sent: "2017-09-05T12:31:57.073Z"
    editedAt: "2017-09-05T12:32:13.413Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae991266c1c7c47718e494"
    text: {and following your logic, how should I type vertical tab?^/```^/>> to-integer #"^^|"^/*** Syntax Error: invalid char! at {#"^^^^|"}^/*** Where: do^/*** Stack: load ^/```}
    sent: "2017-09-05T12:31:14.909Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae98c8b16f264642099c0f"
    text: "hint: not everybody remembers ASCII by heart"
    sent: "2017-09-05T12:30:00.915Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae98b88f4427b462d49773"
    text: "way more readable as for me"
    sent: "2017-09-05T12:29:44.708Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae98afba0f0f6e381baf95"
    text: {why don't we add others so it would look like `ws: charset reduce [space newline carriage-return horizontal-tab]`}
    sent: "2017-09-05T12:29:35.504Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae987e162adb6d2e6cacb9"
    text: {@toomasv I see, though we do have `newline` and `space` words}
    sent: "2017-09-05T12:28:46.644Z"
    editedAt: "2017-09-05T12:28:49.100Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae983abc46472974fab463"
    text: {```^/>> to-char 9^/== #"^^-"^/>> to-char 10^/== #"^^/"^/>> to-char 13^/== #"^^M"^/```}
    sent: "2017-09-05T12:27:38.834Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae97f3ee5c9a4c5f35b3ff"
    text: {@maximvl https://en.wikipedia.org/wiki/Control_character^/```^/>> to-integer #"^^M"^/== 13^/>> to-integer #"^^/"^/== 10^/>> to-integer #"^^-"^/== 9^/```}
    sent: "2017-09-05T12:26:27.917Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae964fc101bc4e3a9097d1"
    text: {how do you know what is `^^/`, what is `^^M`, why not `^^P` or `^^X` ?}
    sent: "2017-09-05T12:19:27.740Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae9635ba0f0f6e381ba443"
    text: {I have a question about this line of code: https://github.com/red/red/blob/master/environment/console/engine.red#L38^/`ws:^-^- charset " ^^/^^M^^-"`}
    sent: "2017-09-05T12:19:01.026Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ae935a66c1c7c47718c611"
    text: ":two_men_holding_hands: :)"
    sent: "2017-09-05T12:06:50.980Z"
    editedAt: "2017-09-05T12:07:41.713Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae934cbac826f05480e345"
    text: {just thought "you can use `reduce` instead of..." and bam, here it is}
    sent: "2017-09-05T12:06:36.034Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae9233b16f264642097d8d"
    text: {`restart` for the above `gen1`:^/```^/restart: func [f][bind body-of :f context reduce [to-set-word last spec-of :f 0]]^/>> restart :gen1^/== [x: x + 1]^/>> gen1^/== 1^/>> gen1^/== 2^/```}
    sent: "2017-09-05T12:01:55.952Z"
    editedAt: "2017-09-05T12:06:10.036Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae7fb9614889d475c167f4"
    text: ":dizzy::sparkles::zzz:"
    sent: "2017-09-05T10:43:05.977Z"
    editedAt: "2017-09-05T10:44:08.290Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae7f6966c1c7c4771868db"
    text: {nay it's ok I'll just lie down on a floor for a while `_(:3」∠)_`}
    sent: "2017-09-05T10:41:45.550Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae7f379acddb240704725e"
    text: "It is already from @JacobGood1's version :wink:"
    sent: "2017-09-05T10:40:55.719Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
)#(
    id: "59ae7eed162adb6d2e6c2c17"
    text: {so this is not a bug but my inattention? :shipit: }
    sent: "2017-09-05T10:39:41.048Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae7e1d9acddb2407046a97"
    text: "It should."
    sent: "2017-09-05T10:36:13.377Z"
    editedAt: "2017-09-05T10:36:24.534Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae7cb5ba0f0f6e381b173c"
    text: "though, `/local` indeed can rebind `x` to `none`"
    sent: "2017-09-05T10:30:13.448Z"
    editedAt: "2017-09-05T10:30:18.620Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae7c40b16f264642090d97"
    text: {I checked it with build from 10-Aug-2017. And it does make sense.}
    sent: "2017-09-05T10:28:16.301Z"
    editedAt: "2017-09-05T10:29:21.291Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae7c06bac826f05480676f"
    text: "meanwhile someone can test it on old builds"
    sent: "2017-09-05T10:27:18.803Z"
    editedAt: "2017-09-05T10:27:41.959Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae7be5162adb6d2e6c1e9c"
    text: "@toomasv I'll check it once I get home"
    sent: "2017-09-05T10:26:45.842Z"
    editedAt: "2017-09-05T10:27:57.175Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae7bbeb16f264642090b9f"
    text: "@9214 But now with the above it doesn't?"
    sent: "2017-09-05T10:26:06.519Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae76dbb16f26464208f6be"
    text: "that's weird, I'm sure it worked fine for me"
    sent: "2017-09-05T10:05:15.923Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae7306ee5c9a4c5f34f2c7"
    text: {I think it is because creating `func` after binding the `body` (as in `closure2`) rebinds `x` to `none`, but binding the `body` after creation of `func` (`closure1`) leaves `x` with desired binding.}
    sent: "2017-09-05T09:48:54.390Z"
    editedAt: "2017-09-05T09:57:26.677Z"
    v: 6
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae6762614889d475c0f46a"
    text: {@dander These are not identical:^/```^/closure1: func [vars spec body][bind body-of spec: func spec body context vars :spec]^/closure2: func [vars spec body][func spec bind body context vars]^/gen1: closure1 [x: 0][/local x][x: x + 1]^/gen2: closure2 [x: 0][/local x][x: x + 1]^/>> gen1^/== 1^/>> gen1^/== 2^/>> gen2^/*** Script Error: + does not allow none! for its value1 argument^/```}
    sent: "2017-09-05T08:59:14.475Z"
    editedAt: "2017-09-05T09:04:22.754Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59ae4b52bac826f0547f7976"
    text: {interesting thought. I pretty much just tinker in the GUI console, so I don't even think about compilation most of the time}
    sent: "2017-09-05T06:59:30.044Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59ae4b11bc46472974f9386f"
    text: {perhaps @dockimbel's version is more suitable for compiler}
    sent: "2017-09-05T06:58:25.560Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae4affbc46472974f9381e"
    text: {Interesting! I remember seeing part of that conversation, but I wasn't clear on whether that was settled or not. It certainly looks very elegant}
    sent: "2017-09-05T06:58:07.683Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59ae4a70614889d475c061bd"
    text: "you don't really need `compose`"
    sent: "2017-09-05T06:55:44.493Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae4a63b16f264642081d8c"
    text: {though I edited @JacobGood1's version some time ago^/```text^/closure: func [vars spec body][func spec bind body context vars]^/```}
    sent: "2017-09-05T06:55:31.208Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae4a07bac826f0547f745e"
    text: "@dander yes, you got everything right I believe"
    sent: "2017-09-05T06:53:59.444Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ae4948210ac26920f72974"
    text: {I've been studying these two closure functions. I added the formatting and parens to Nenad's version to make it easier for me to understand (hopefully I didn't alter the behavior).^/^/```red^/; @JacobGood1's closure func^/closure: func [^/^-vars [block!] ^/^-spec [block!] ^/^-body [block!]^/][^/^-; Can't use `function` here, because it will collect set-words^/^-; in the body, which may be closure vars.^/^-func spec compose [(bind body context vars)]^/]^/^/; @dockimbel's closure func^/closure2: func [vars spec body][^/^-bind (body-of spec: func spec body) (context vars)^/^-:spec^/]^/```^/^/ It seems like the main difference is that in Jacob's, the binding occurs before the function is generated, where Nenad's does the binding afterward. Are they equivalent? I can't think of why they wouldn't be... Also, am I correct in understanding that the purpose of setting `spec` to the function is just because `spec` is already captured by the `func` (being an argument), so reusing it avoids leaking some other temp word in the global context (or needing to create a temp word)?}
    sent: "2017-09-05T06:50:47.997Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59ad6e24162adb6d2e67bb33"
    text: {managing hiding state is a messy thing itself, perhaps you should think about some other ways?}
    sent: "2017-09-04T15:15:48.395Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad6cbfbac826f0547bf6d7"
    text: {instead of "raw access" with `in` usage}
    sent: "2017-09-04T15:09:51.633Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad6c6b614889d475bcdfdf"
    text: {@maximvl I guess if you generate boilerplate of refinements and somehow remove `self` reference from function's body -- there will be no other way but to use well-defined interface of `/set-foo` `/get-foo` and et cetera}
    sent: "2017-09-04T15:08:27.681Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59ad0eb466c1c7c4771214b0"
    text: "it's powerful, but should not be used directly"
    sent: "2017-09-04T08:28:36.815Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ad0e9cb16f26464202d5f4"
    text: {to me it on the same level as raw memory access in C}
    sent: "2017-09-04T08:28:12.001Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ad0e18ee5c9a4c5f2ef936"
    text: {I mean you can mess up function's context once, but when some other things do it few more times most likely things will break}
    sent: "2017-09-04T08:26:00.768Z"
    editedAt: "2017-09-04T08:26:50.897Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59ad0dfe210ac26920f1e328"
    text: {@9214 the reason I don't like this approach - I don't think it's scalable}
    sent: "2017-09-04T08:25:34.116Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59abfd34162adb6d2e6206f0"
    text: "ah, turns out you don't really need `compose`"
    sent: "2017-09-03T13:01:40.639Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59abf7edb16f264642fee819"
    text: {@maximvl moved out from `red/bugs`^/```text^/>> context [alive?: yes count: 0 set 'dude func [/state] compose [either state [return (self)][count: count + 1]]]^/== make object! [^/    alive?: true^/    count: 0^/]^/>> kill: func [s-func][set in s-func/state 'alive? no :s-func]^/== func [s-func][set in s-func/state 'alive? no :s-func]^/>> dude^/== 1^/>> dude^/== 2^/>> dude^/== 3^/>> kill :dude^/== func [/state][either state [return (self)] [count: count + 1]]^/>> dude/state^/== make object! [^/    alive?: false^/    count: 3^/]^/```}
    sent: "2017-09-03T12:39:09.313Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a90cf88f4427b462bf1436"
    text: "OK, thanks  @rebolek "
    sent: "2017-09-01T07:32:08.846Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a90a07b16f264642f401ac"
    text: {@Phryxe `save` does `mold` for you and lot of other things (see source for details). `write`is good for writing raw text, `save` for Red's data and code.}
    sent: "2017-09-01T07:19:35.972Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a9097fc101bc4e3a7b2459"
    text: {@dander Is there a benefit of using `save` instead of `write`?}
    sent: "2017-09-01T07:17:19.710Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a90467bc46472974e48090"
    text: {For matching errors, yes. I'm not sure how to determine length of faulty expression.}
    sent: "2017-09-01T06:55:35.776Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a9040366c1c7c4770316c0"
    text: {@rebolek OK, then I still have to use parens:^/```^/>> reduce+ [(2 + non-existing)]^/== [none]^/```}
    sent: "2017-09-01T06:53:55.566Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a90339b16f264642f3e5fd"
    text: {@toomasv See the difference:^/```^/>> reduce+ [2 + non-existing]^/== [none none none]^/>> reduce+ [non-existing + 2]^/== [none none 2]^/```}
    sent: "2017-09-01T06:50:33.518Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a902ee210ac26920e301fe"
    text: "Fixed."
    sent: "2017-09-01T06:49:18.697Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a902acc101bc4e3a7b09c3"
    text: {@toomasv the first case shows the problem with error handling. When an error is encountered, `do/next` does not advance the position in block, so I have to do it manually. I don't know where, so I just skip one value and `do/next` again until error is gone.^/The second case is bug, let me fix it.}
    sent: "2017-09-01T06:48:12.838Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a901d6bac826f0546b1001"
    text: {@rebolek ^/```^/>> reduce+ [none 2 + non-existing]^/== [none none none none]^/>> reduce+ [non-existing]^/*** Script Error: tail? does not allow none! for its series argument^/```^/In the first case, shouldn't there be just two `none`s?^/And in the second, `none`?}
    sent: "2017-09-01T06:44:38.883Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a8ff5d162adb6d2e56da12"
    text: "I see, thanks."
    sent: "2017-09-01T06:34:05.492Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a8ff55b16f264642f3d563"
    text: "So it actually would not reduce it to `2`."
    sent: "2017-09-01T06:33:57.402Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a8ff2b210ac26920e2f3cf"
    text: "Yep, unless it is (1 + 1)"
    sent: "2017-09-01T06:33:15.936Z"
    editedAt: "2017-09-01T06:33:57.399Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a8ff20bc46472974e46adc"
    text: {But you would check for three values in case of `1 + 1`. right?}
    sent: "2017-09-01T06:33:04.782Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a8fef9162adb6d2e56d798"
    text: {Checking with `attempt` whether item has type or value and skipping if it has.}
    sent: "2017-09-01T06:32:25.598Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a8fe88c101bc4e3a7af9e6"
    text: {@toomasv How would your code interpret something like `1 + 1`?}
    sent: "2017-09-01T06:30:32.123Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a8fe50bac826f0546b035b"
    text: {@rebolek Thanks! I did this with checking each value in the block with `forall` and replacing unbound words / errors with `none`. Yours' is nicer :)}
    sent: "2017-09-01T06:29:36.961Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a8fddac101bc4e3a7af686"
    text: {@toomasv https://gist.github.com/rebolek/dd336a859c8b1277d2a316484a17c017}
    sent: "2017-09-01T06:27:38.993Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a8fd5f614889d475abc0bf"
    text: {@toomasv ^/```^/>> reduce+ [1 + 1 bflm now]^/== [2 none 1-Sep-2017/7:25:03+01:00]^/```}
    sent: "2017-09-01T06:25:35.835Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a8d78fee5c9a4c5f1f47fe"
    text: {@rebolek Interesting. Will you show code? And what about unset/unbound words? E.g.:^/```^/>> reduce+ [bound-word non-bound-word]^/*** Script Error: non-bound-word has no value^/```^/In special cases I would like this to reduce to `none`.}
    sent: "2017-09-01T03:44:15.939Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a8cae3bac826f0546a5276"
    text: {Not liking unset breaking your chaining abilities?}
    sent: "2017-09-01T02:50:11.177Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59a882dfbac826f054693728"
    text: {This is simple:^/```^/>> reduce+ [1 + 1 print "asdf" now]^/asdf^/== [2 none 31-Aug-2017/22:42:02+01:00]^/```^/But this is bit problematic:^/```^/>> reduce+ [1 + 1 1 / 0 now]^/== [2 none none 0 31-Aug-2017/22:42:10+01:00]^/```}
    sent: "2017-08-31T21:42:54.971Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a87d70bac826f054691619"
    text: {@toomasv writing `reduce*` that reduces `unset!` to `none!` is trivial, adding support for errors is much harder.}
    sent: "2017-08-31T21:19:44.922Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a86e988f4427b462bcad68"
    text: "Thanks, @greggirwin !"
    sent: "2017-08-31T20:16:24.628Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a86025ba0f0f6e38032c69"
    text: "```sort the world```"
    sent: "2017-08-31T19:14:45.549Z"
    editedAt: "2017-08-31T19:15:46.138Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
)#(
    id: "59a8562bb16f264642f121c7"
    text: {I thought I had a sort order list somewhere, but can't find it right now:^/```^/>> vals: [#"a" "a" %a 'a a a: :a /a <a> #a none 1 1.0 1% 1x1 () [] "" a:// 1:1:1 1/1/1]^/== [#"a" "a" %a 'a a a: :a /a <a> #a none 1 1.0 1% 1x1 () [] "" a:// 1:01:01 1-Jan-2001]^/>> sort copy vals^/== [[] () "" "a" %a a:// 1 #"a" 1.0 a: 'a :a /a a none #a 1x1 1% 1:01:01 <a> 1-Jan-2001]^/```}
    sent: "2017-08-31T18:32:11.560Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a8514dee5c9a4c5f1d1cb5"
    text: {I would like a `reduce*`, that would reduce `unsets` and `errors` to `none`. :unamused:}
    sent: "2017-08-31T18:11:25.169Z"
    editedAt: "2017-08-31T18:11:59.132Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a850c7bac826f054684651"
    text: "^/we should have `mu!` datatype"
    sent: "2017-08-31T18:09:11.543Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a850b8162adb6d2e54248d"
    text: "Good for me! :sweat_smile:"
    sent: "2017-08-31T18:08:56.667Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a850868f4427b462bc1984"
    text: "im my opinion none is less than everything :)"
    sent: "2017-08-31T18:08:06.977Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59a8505a614889d475a8f078"
    text: {Thanx, @9214 @honix . Solved it temporarily by defining a default order and declining from comparing values with ´none´. Thus `none` values are moved to the beginning, instead of end as in `sort`.   }
    sent: "2017-08-31T18:07:22.089Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a85023162adb6d2e54227b"
    text: {@toomasv hmm.. [as R/S code says](https://github.com/red/red/blob/393e7b1dcc67bd738c1b41201a9e112855d74d5b/runtime/datatypes/none.reds#L98) there no greater or less comparasion, but COMP_SORT}
    sent: "2017-08-31T18:06:27.026Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59a84de9210ac26920e027b0"
    text: ":question:"
    sent: "2017-08-31T17:56:57.833Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a84d85ba0f0f6e3802d364"
    text: {but then you somehow need to comare two values with identical types}
    sent: "2017-08-31T17:55:17.615Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a84cd78f4427b462bc075c"
    text: {maybe create a custom hierarchy and find two values in it - if one is higher than the other, then it's greater or vise versa}
    sent: "2017-08-31T17:52:23.791Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a84c7d162adb6d2e540cf3"
    text: {^/The problem is, I need to sort things (including `none`) by custom function. How can I do this?}
    sent: "2017-08-31T17:50:53.488Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a84bd0c101bc4e3a782121"
    text: "ah, I see now"
    sent: "2017-08-31T17:48:00.214Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a84bb7162adb6d2e54083b"
    text: {Ok, but why is `sort` putting it last, and what about strings?^/```^/>> sort [none "a" "c" "b"]^/== ["a" "b" "c" none]^/```}
    sent: "2017-08-31T17:47:35.702Z"
    editedAt: "2017-08-31T17:49:11.413Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a84b7c210ac26920e01c52"
    text: {I don't think that they can be compared at all, only if:^/```text^/>> make integer! to logic! none^/== 0^/```}
    sent: "2017-08-31T17:46:36.264Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a84ae8c101bc4e3a781d35"
    text: "Which one is apples? :no_mouth:"
    sent: "2017-08-31T17:44:08.991Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a84aabb16f264642f0e97d"
    text: "isn't that apples and oranges?"
    sent: "2017-08-31T17:43:07.661Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a84a73ba0f0f6e3802c44e"
    text: {How does `sort` compare `none` with other values?^/```^/>> sort [2 1 3 6 5 none]^/== [1 2 3 5 6 none]^/>> sort/compare [2 1 3 6 5 none] func [a b][a < b]^/*** Script Error: cannot compare none with 6^/*** Where: <^/*** Stack:^/``` }
    sent: "2017-08-31T17:42:11.621Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a84a01210ac26920e014be"
    text: "@Phryxe there's also `save`"
    sent: "2017-08-31T17:40:17.518Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59a847cac101bc4e3a780cec"
    text: "@9214 Thanks! I forgot about reduce :/"
    sent: "2017-08-31T17:30:50.655Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a84743b16f264642f0d7e7"
    text: {```text^/>> write %test.red [object [a: 1] object [b: 2]]^/>> reduce load %test.red^/== [make object! [^/    a: 1^/] make object! [^/    b: 2^/]]^/```}
    sent: "2017-08-31T17:28:35.791Z"
    editedAt: "2017-08-31T17:28:41.510Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a84714614889d475a8be1b"
    text: {```^/>> write %777.txt [object [a: 1] object [b: 2]]^/>> bb: load %777.txt^/== [object [a: 1] object [b: 2]]^/>> type? bb^/== block!^/>> type? bb/1^/== word!^/```}
    sent: "2017-08-31T17:27:48.481Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a84651ee5c9a4c5f1ce620"
    text: {```text^/>> write %test.red [object [a: 1] object [b: 2]]^/>> load %test.red^/== [object [a: 1] object [b: 2]]^/```}
    sent: "2017-08-31T17:24:33.656Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a84541c101bc4e3a77ff98"
    text: {If I have a block with objects and write that to a file, can I without too much fuss get those objects back from the file?}
    sent: "2017-08-31T17:20:01.458Z"
    editedAt: "2017-08-31T17:20:23.499Z"
    v: 2
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a73a40ee5c9a4c5f1842db"
    text: {Yeah @9214 business coding is so much easier in Red than in other langs. The next release should increase confidence here.}
    sent: "2017-08-30T22:20:48.172Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59a739b5bc46472974dcbf70"
    text: {But it might be risky to use Red for one's Android game app, sure.}
    sent: "2017-08-30T22:18:29.490Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59a739b38f4427b462b7506e"
    text: {ah, I can only dream to work somewhere with Red in use :D}
    sent: "2017-08-30T22:18:27.797Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7398ac101bc4e3a7368a0"
    text: {Right now, at my place, Red is being used as a fetcher since REBOL no longer can pull data from many web sites owing to certificate issues. That is production and not dangerous.^/^/Red also is being used for numbers crunching of retrieved date paired datasets. It seems fairly solid. }
    sent: "2017-08-30T22:17:46.062Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59a73951ee5c9a4c5f183fb9"
    text: {maybe `write/info` could help, but I don't know the specs}
    sent: "2017-08-30T22:16:49.742Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a73857ee5c9a4c5f183bd3"
    text: {Maybe. Of course, it wasn't though. All the same, one hopes that any designer of any product would like to learn of such things.}
    sent: "2017-08-30T22:12:39.391Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59a737e0ba0f0f6e38fe0a14"
    text: {isn't that dangerous to use `0.x.x` version of a language in production? :boom: }
    sent: "2017-08-30T22:10:40.437Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7378476a757f808fe6d6a"
    text: {Well, interestingly, @9214's function works but not without side effects with the Win 10 FS and the OneDrive cloud.^/^/When one has a Onedrive share link pointing to a file, a rename under REBOL does not affect that share link (good!) but using  9124's function, renaming in effect creates a new file and deletes the old one. That wrecks any linkage and thus can not be used as a stop gap solution.^/^/The fix of course, is simply to fire up REBOL and do the needed mass renaming using REBOL's `rename`. ^/^/Thanks for the help though. ^/^/Real world use of products is far different than what gets imagined by the creators of those products. }
    sent: "2017-08-30T22:09:08.253Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59a73690bc46472974dcb1c1"
    text: {I guess when module system will be implemented with package manager (@qtxie already have sleek prototype) our community will provide all mezzanines with other cool stuff}
    sent: "2017-08-30T22:05:04.263Z"
    editedAt: "2017-08-30T22:05:32.148Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7363066c1c7c477fb47bd"
    text: "`attempt` is already there"
    sent: "2017-08-30T22:03:28.225Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a736139acddb2407e7409b"
    text: {Is there a spot where the ETA for words like 'attempt', 'forskip' etc.  can be found?}
    sent: "2017-08-30T22:02:59.954Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a735beba0f0f6e38fe0144"
    text: "<ha ha> "
    sent: "2017-08-30T22:01:34.859Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a735aaee5c9a4c5f182f94"
    text: {@greggirwin let's just wait for @rebolek as usual :^^)}
    sent: "2017-08-30T22:01:14.744Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7358fc101bc4e3a7356a2"
    text: {And use `/binary` for the above func, just to be safe.}
    sent: "2017-08-30T22:00:47.587Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a7358dee5c9a4c5f182f0d"
    text: "too sleepy to be useful though :zzz:"
    sent: "2017-08-30T22:00:45.257Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a73579ee5c9a4c5f182ed4"
    text: "and `split-path`"
    sent: "2017-08-30T22:00:25.016Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7356c9acddb2407e73cf5"
    text: "Could also use `call`."
    sent: "2017-08-30T22:00:12.625Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a7309866c1c7c477fb2d38"
    text: {@9214 If I had the time! Bosses yelling for other stuff!}
    sent: "2017-08-30T21:39:36.238Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59a7307a614889d475a3eb41"
    text: "or just port R2 version"
    sent: "2017-08-30T21:39:06.118Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a73073614889d475a3eb30"
    text: "@9214 Clever! Thanks! "
    sent: "2017-08-30T21:38:59.082Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59a73029ba0f0f6e38fde4a5"
    text: {@GuitarRover_twitter ^/```text^/>> rename: func [old new][write new read old delete old]^/== func [old new][write new read old delete old]^/>> write %foo "test"^/>> rename %foo %bar^/== true      ^/>> read %bar^/== "test"^/>> read %foo^/*** Access Error: cannot open: %foo^/*** Where: read^/*** Stack: ^/```}
    sent: "2017-08-30T21:37:45.588Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a72cd48f4427b462b717ac"
    text: {REBOL had `rename`. Is there a quick and dirty way to do it in Red?}
    sent: "2017-08-30T21:23:32.562Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59a7086abc46472974dbcdbf"
    text: "@greggirwin :)"
    sent: "2017-08-30T18:48:10.962Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a708578f4427b462b66a95"
    text: "So...you're just beat."
    sent: "2017-08-30T18:47:51.692Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a7084866c1c7c477fa673d"
    text: {not today, I've been chopping wood for five days and I'm really exhausted :D}
    sent: "2017-08-30T18:47:36.997Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a7082fb16f264642eb3b1e"
    text: "He's got the beats! (really, he's a DJ)"
    sent: "2017-08-30T18:47:11.662Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a70815c101bc4e3a727a01"
    text: "@9214 here it comes!"
    status: true
    sent: "2017-08-30T18:46:45.340Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "59a7080a66c1c7c477fa662f"
    text: "@9214 :D"
    sent: "2017-08-30T18:46:34.018Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a70808c101bc4e3a7279b0"
    text: "Only Bolek. :^^)"
    sent: "2017-08-30T18:46:32.022Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a707f7162adb6d2e4e8cfc"
    text: {:^^) @alqnop, we have an old Reboler whose handle is eFishAnt.}
    sent: "2017-08-30T18:46:15.835Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a707f3210ac26920da7fc7"
    text: "Y'all beat people in here?"
    sent: "2017-08-30T18:46:11.346Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a707e766c1c7c477fa65aa"
    text: {yeah and then @rebolek pops up and beats everyone :^^)}
    sent: "2017-08-30T18:45:59.283Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a707db76a757f808fd846d"
    text: {Good news, this domain is available^/selfsu^/.fish^/$31.99}
    sent: "2017-08-30T18:45:47.548Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a707bec101bc4e3a7278bd"
    text: {We all do that. I bang away in silence, then finally ask, and someone will post an answer immediately. :^^\ We learn in many ways.}
    sent: "2017-08-30T18:45:18.135Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a7079466c1c7c477fa6346"
    text: "Understood."
    sent: "2017-08-30T18:44:36.394Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a70772ba0f0f6e38fd1be9"
    text: {Gregg for all my complaining and wallowing I'm trying to be selfsufish}
    sent: "2017-08-30T18:44:02.951Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a7074eba0f0f6e38fd1b34"
    text: {there're `*-text` functions which you've inserted, `view` can't figure out what this means and squeaks :mouse: }
    sent: "2017-08-30T18:43:26.376Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7074d66c1c7c477fa6277"
    text: "Now view compose works"
    sent: "2017-08-30T18:43:25.103Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a7072066c1c7c477fa61cd"
    text: {Ctrl_Shift+M, or triple backticks, let you post code easily, which we can then hack on.}
    sent: "2017-08-30T18:42:40.588Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a7070d9acddb2407e66290"
    text: {yes, because I think that `compose`d block is not a valid VID description of a UI}
    sent: "2017-08-30T18:42:21.646Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a706f1b16f264642eb3614"
    text: "Spoke too soon, working on it"
    sent: "2017-08-30T18:41:53.836Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a706bbba0f0f6e38fd1925"
    text: "and it's a syntax error"
    sent: "2017-08-30T18:40:59.588Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a706b7210ac26920da7b0e"
    text: "to view compose []"
    sent: "2017-08-30T18:40:55.598Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a706b4162adb6d2e4e871d"
    text: "I changed my view layout []"
    sent: "2017-08-30T18:40:52.709Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a70695ba0f0f6e38fd18a5"
    text: {you can just tell us what you want to achieve, the main idea, and we can work this out together with @greggirwin and others}
    sent: "2017-08-30T18:40:21.434Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a70659b16f264642eb3375"
    text: ":alien: :v:"
    sent: "2017-08-30T18:39:21.656Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a70642ee5c9a4c5f174a55"
    text: "Two minds. :^^)"
    sent: "2017-08-30T18:38:58.550Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a706419acddb2407e65da0"
    text: "Ah this makes a lot of sense"
    sent: "2017-08-30T18:38:57.975Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a7062f76a757f808fd7dc3"
    text: {when I said `view compose [...]` I meant that you should try to use `compose` in a similar way in your code, i.e. inserting it between your `view` and whatever `[...]` follows.}
    sent: "2017-08-30T18:38:39.118Z"
    editedAt: "2017-08-30T18:38:45.807Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7062db16f264642eb32df"
    text: {If you post a *small* code example, we can mod those to help. e.g. "I have this: `...`, but want to ..."}
    sent: "2017-08-30T18:38:37.392Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a705f366c1c7c477fa5cad"
    text: {We're posting things you can just try in the console. Or the mod of your code I posted. }
    sent: "2017-08-30T18:37:39.698Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a705f2162adb6d2e4e8402"
    text: "Right"
    sent: "2017-08-30T18:37:38.902Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a705e976a757f808fd7c19"
    text: {ah, no, you shouldn't copypaste these snippets with `view`, because they're standalone examples on their own}
    sent: "2017-08-30T18:37:29.154Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a70596bc46472974dbc0f5"
    text: {2. the view commands you are giving me, I'm not sure where to put them becuase they're replacing text and print commands that are already inside a view block}
    sent: "2017-08-30T18:36:06.164Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a7057e162adb6d2e4e828c"
    text: {1. I am not currently working with multiple windows}
    sent: "2017-08-30T18:35:42.531Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a7056f162adb6d2e4e8247"
    text: {@9214 I think my confusion is coming from the following}
    sent: "2017-08-30T18:35:27.313Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a7044766c1c7c477fa5443"
    text: {You can use a `panel` style inside a window...or what @9214 just said. }
    sent: "2017-08-30T18:30:31.538Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a7043276a757f808fd727b"
    text: {@alqnop you can, sort of^/```text^/view [size 200x200 text "first" do [view/no-wait [size 100x100 text "second"]]]^/```}
    sent: "2017-08-30T18:30:10.723Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7037866c1c7c477fa50df"
    text: "But you cannot nest a view in a view?"
    sent: "2017-08-30T18:27:04.470Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a7017cba0f0f6e38fd0061"
    text: {:point_up: [30 августа 2017 г., 22:57](https://gitter.im/red/help?at=59a6fca266c1c7c477fa2ded)^/1. `form` is a function that gets value and returns it's string representation^/1.  Block is just a block. Its a foundation of the language in the sense that it's both basic __data__ structure and __code__ that can be evaluated. Nothing scary will happen if you'll nest them, because, again, it's just a block :)}
    sent: "2017-08-30T18:18:36.691Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a700e476a757f808fd62bf"
    text: "You'll be a 17th level Mage in no time."
    sent: "2017-08-30T18:16:04.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a700c6ba0f0f6e38fcfde1"
    text: {In this case, the first `view` call, at the end, starts the event loop. Then, any other windows you show can, but don't have to, use `/no-wait`.}
    sent: "2017-08-30T18:15:34.838Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a700c4210ac26920da5fe2"
    text: "thanks again"
    sent: "2017-08-30T18:15:32.257Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a700b59acddb2407e64541"
    text: {I think it's an existential thing more than a red thing}
    sent: "2017-08-30T18:15:17.748Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a7009eee5c9a4c5f173222"
    text: {I messed around with multiple windows, and will do something like that eventually}
    sent: "2017-08-30T18:14:54.564Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a70082162adb6d2e4e6827"
    text: "Thanks all"
    sent: "2017-08-30T18:14:26.648Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a70081ee5c9a4c5f1731b0"
    text: {```^/^/make-character: does [^/    random/seed now/time^/    str: [random 6]^/    dex: [random 6]^/    con: [random 6]^/    per: [random 6]^/^/    view/no-wait [^/        size 450x500^/        return^/        h5 "Name: " 100x30^/        name-field: field "" [print ["name-field holds " face/text] ]^/        return^/        h5 "Epithet: " 100x20^/        epithet-field: field "" [print ["epithet-field holds " face/text] ]^/        return^/        h5 "Occupation: " 100x20^/        occupation-field: field "" [print ["occupation-field holds " face/text] ]^/        return^/        return^/        across text "Strength: " 100x20^/        str-text: text [str] [print ["str-text holds " str] ]^/        progress "str / 100"^/        return^/        across text "Dexterity: " 100x20^/        dex-text: text [dex] [print ["dex-text holds " dex] ]^/        progress "dex / 100"^/        return^/        across text "Constitution: " 100x20^/        con-text: text [con] [print ["con-text holds " con] ]^/        progress "con / 100"^/        return^/        return^/        across text "Personality: " 100x20^/        per-text: text [print ["per-text holds " per] ]^/        progress "per / 100"^/        return^/        return return^/        button "Create"^/        button "Abandon"^/    ]^/]^/^/view [^/    button "Make character" [make-character]^/]^/```}
    sent: "2017-08-30T18:14:24.983Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a7007d8f4427b462b6463f"
    text: {Is this what you're after? Showing a window, then showing more windows from that?}
    sent: "2017-08-30T18:14:21.519Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a6ffb666c1c7c477fa3cba"
    text: {@alqnop, it's great that you're excited to build GUIs right off. Don't be discouraged. But it may also help to start with some small non-GUI examples and get a foundation in setting words and manipulating blocks a bit. }
    sent: "2017-08-30T18:11:02.676Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a6ff6a9acddb2407e64198"
    text: {In addition to @honix's example, you can use `view/no-wait` on all windows, then call `do-events`.^/```^/a: layout [text "window 1"]^/b: layout [text "window 2"]^/view/no-wait a^/view/no-wait b^/do-events^/```^/And don't forget `help` and `source` in the console, even if you don't understand everything you see yet.}
    sent: "2017-08-30T18:09:46.424Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a6fee6614889d475a303b9"
    text: {@alqnop  don't give up that easiely, we all begin with something ;)}
    sent: "2017-08-30T18:07:34.266Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6fe59ee5c9a4c5f172726"
    text: "Thanks for the help all"
    sent: "2017-08-30T18:05:13.629Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fe50ba0f0f6e38fcf3bd"
    text: "This is just junk anyway"
    sent: "2017-08-30T18:05:04.407Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fe42c101bc4e3a724c73"
    text: "I'm not a coder"
    sent: "2017-08-30T18:04:50.736Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fe40b16f264642eb0ed4"
    text: "backticks!"
    sent: "2017-08-30T18:04:48.328Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6fe40ee5c9a4c5f1726b4"
    text: "I think I need to revert to perl/curses"
    sent: "2017-08-30T18:04:48.224Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fe32614889d475a30071"
    text: "Apologies, tried encasing that in ' '"
    sent: "2017-08-30T18:04:34.697Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
)#(
    id: "59a6fe138f4427b462b63ba7"
    text: {'Red [Title: "baseline"]^/^-random/seed now/time^/str: [random 6]^/dex: [random 6]^/con: [random 6]^/per: [random 6]^/view layout [^/^-size 450x500^/return^/^-h5 "Name: " 100x30^/^-name-field: field ""  [print ["name-field holds " face/text] ]^/return^/^-h5 "Epithet: " 100x20^/^-epithet-field: field ""  [print ["epithet-field holds " face/text] ]^/return^/^-h5 "Occupation: " 100x20^/^-occupation-field: field ""  [print ["occupation-field holds " face/text] ]^/return^/return^/^-across text "Strength: " 100x20^/^-str-text: text [str]  [print ["str-text holds " str] ]^/^-progress "str / 100"^/return^/^-across text "Dexterity: " 100x20^/^-dex-text: text [dex]  [print ["dex-text holds " dex] ]^/^-progress "dex / 100"^/return^/^-across text "Constitution: " 100x20^/^-con-text: text [con]  [print ["con-text holds " con] ]^/^-progress "con / 100"^/return^/return^/^-across text "Personality: " 100x20 ^/^-per-text: text [print ["per-text holds " per] ]^/^-progress "per / 100"^/^-^/return^/return return^/^-button "Create"^/^-button "Abandon"^/^-^-]^/'}
    sent: "2017-08-30T18:04:03.988Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fdb666c1c7c477fa3316"
    text: "Basically, here"
    sent: "2017-08-30T18:02:30.648Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fda4614889d475a2fe05"
    text: "This is a new view statement"
    sent: "2017-08-30T18:02:12.103Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fda0bc46472974db995b"
    text: {what do you mean by "multiple `view`s"?}
    sent: "2017-08-30T18:02:08.712Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6fd9eee5c9a4c5f172342"
    text: {For example, my question follows what you posted:   view compose [text (form random 99)]}
    sent: "2017-08-30T18:02:06.490Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fd4276a757f808fd519a"
    text: {@alqnop press `Ctrl + Shift + M` and meditate on Markup, it easier to help then question is formatted nicely ;)}
    sent: "2017-08-30T18:00:34.767Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6fd42ba0f0f6e38fceee5"
    text: {if I'm misunderstanding its utilization, how are multiple views used?}
    sent: "2017-08-30T18:00:34.410Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fd3576a757f808fd5165"
    text: {I'm having a few questions about layout and how view is nested}
    sent: "2017-08-30T18:00:21.125Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fd289acddb2407e63742"
    text: "Interesting thanks"
    sent: "2017-08-30T18:00:08.476Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fd11bc46472974db974b"
    text: {I hope this is simplier to get^/```text^/>> var: random 6^/== 1^/>> form var^/== "1"^/>> txt: form var^/== "1"^/>> view [text txt]^/```}
    sent: "2017-08-30T17:59:45.095Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6fd028f4427b462b634f2"
    text: {2. I need to learn how to nest/separate (aka use/not use) blocks.  I have a Red [Title: "b"] and a view layout [size 450x500 button "create" button "abandon"]}
    sent: "2017-08-30T17:59:30.978Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fcb8ee5c9a4c5f171eac"
    text: {1.  I need to learn form.  This gives me my random 6 and then I make it a variable for future use from there?}
    sent: "2017-08-30T17:58:16.418Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fca266c1c7c477fa2ded"
    text: "Two questions..."
    sent: "2017-08-30T17:57:54.507Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fb2b9acddb2407e62cbc"
    text: "```^/view compose [text (form random 99)]^/```"
    sent: "2017-08-30T17:51:39.445Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6fababa0f0f6e38fce259"
    text: "I want to display this random number"
    sent: "2017-08-30T17:49:46.285Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fab4c101bc4e3a7239f8"
    text: "I have a variable that's value is random"
    sent: "2017-08-30T17:49:40.435Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6faaa66c1c7c477fa236b"
    text: {I'm having the same issue I had yesterday despite today's knowledge}
    sent: "2017-08-30T17:49:30.467Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6faa0ee5c9a4c5f171436"
    text: "Last q"
    sent: "2017-08-30T17:49:20.064Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fa9eb16f264642eafe78"
    text: "wat? :smile: "
    sent: "2017-08-30T17:49:18.107Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6fa82c101bc4e3a7239a9"
    text: "per-text: text ?"
    sent: "2017-08-30T17:48:50.926Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fa6fba0f0f6e38fce099"
    text: "per: 6"
    sent: "2017-08-30T17:48:31.537Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6fa6a9acddb2407e62636"
    text: "per-text holds per"
    sent: "2017-08-30T17:48:26.791Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e706162adb6d2e4deda7"
    text: {@alqnop :point_right: https://doc.red-lang.org/en/gui.html}
    sent: "2017-08-30T16:25:42.707Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6e6f1b16f264642ea9e70"
    text: "thanks all"
    sent: "2017-08-30T16:25:21.404Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e6f066c1c7c477f9bcbe"
    text: {Sounds like I need to learn what faces a tree may have, as well as how a VID block is used}
    sent: "2017-08-30T16:25:20.032Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e5dd9acddb2407e5c131"
    text: {in fact it expects either tree of faces or VID block and smart enough to distinguish one from another :smile: }
    sent: "2017-08-30T16:20:45.685Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6e52d614889d475a2800f"
    text: {it errored because `view` is a function that expects a valid VID block}
    sent: "2017-08-30T16:17:49.997Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6e4fd76a757f808fcd60a"
    text: "Apologies all, thanks for the help"
    sent: "2017-08-30T16:17:01.586Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e4f99acddb2407e5bdc6"
    text: {I will wait to receive my error and rephrase my question}
    sent: "2017-08-30T16:16:57.806Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e4f18f4427b462b5ba7a"
    text: "I do understand all of this"
    sent: "2017-08-30T16:16:49.067Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e4d776a757f808fcd4ca"
    text: {if you're making one-window app one `view` is enough, @honix showed a trick with multiple windows}
    sent: "2017-08-30T16:16:23.726Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6e42eee5c9a4c5f16a0c9"
    text: {One thing I was confused about earlier, was the number of view blocks I should have in this script}
    sent: "2017-08-30T16:13:34.065Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e3d99acddb2407e5b806"
    text: "that view is supposed to be on a new line"
    sent: "2017-08-30T16:12:09.556Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e3d1bc46472974db1ffb"
    text: "Wait, I thought you were saying something else"
    sent: "2017-08-30T16:12:01.239Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e3ba76a757f808fcce88"
    text: ":cry: "
    sent: "2017-08-30T16:11:38.860Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e3aeba0f0f6e38fc725f"
    text: "Because it's my first Red script"
    sent: "2017-08-30T16:11:26.454Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e398614889d475a27904"
    text: "why you're placing `view` inside a block?"
    sent: "2017-08-30T16:11:04.826Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6e2d366c1c7c477f9a5dd"
    text: {*** Script Error: VID - invalid syntax at: [rejoin ["Strength:" space str] view]}
    sent: "2017-08-30T16:07:47.121Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e2c4162adb6d2e4dd69b"
    text: "Welp, it was working"
    sent: "2017-08-30T16:07:32.880Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e1bdb16f264642ea822a"
    text: "@alqnop i hope so! :)"
    sent: "2017-08-30T16:03:09.868Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59a6e176b16f264642ea8130"
    text: "@honix ENLIGHTENING"
    sent: "2017-08-30T16:01:58.051Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6e149162adb6d2e4dd050"
    text: {@alqnop here is short code snippet. 'view just pops windows on screen. /no-wait refinement allows us create several windows at once. Last 'view call will be without this refinement.^/```^/a: layout [text "window 1"]^/b: layout [text "window 2"]^/view/no-wait a^/view b^/```}
    sent: "2017-08-30T16:01:13.841Z"
    editedAt: "2017-08-30T16:01:58.440Z"
    v: 3
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "59a6df81162adb6d2e4dc540"
    text: {This actually fits my use case perfectly, thanks @9214 }
    sent: "2017-08-30T15:53:37.518Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6de44c101bc4e3a71a64b"
    text: {also^/```text^/>> ammo: 9'000^/== 9000^/>> t: rejoin ["Ammo holds:" space ammo]^/== "Ammo holds: 9000"^/>> view [text t]^/```^/but this won't work if text should update itself an display different `ammo` values if it changes}
    sent: "2017-08-30T15:48:20.605Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6dd77b16f264642ea6bc3"
    text: {for heavy GUI stuff you'd better ask in [`red/gui-branch`](https://gitter.im/red/red/gui-branch) room, as I never actually tried to create an app with multiple windows (I believe @honix did)}
    sent: "2017-08-30T15:44:55.946Z"
    editedAt: "2017-08-30T15:45:35.885Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6dc0aba0f0f6e38fc4dca"
    text: "Okay thanks, reading up on compose too"
    sent: "2017-08-30T15:38:50.855Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6dbf8b16f264642ea6338"
    text: "One for each new window?"
    sent: "2017-08-30T15:38:32.044Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6dbf3b16f264642ea6329"
    text: {How many "view" sections should I have?}
    sent: "2017-08-30T15:38:27.982Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6dbf3ba0f0f6e38fc4d1d"
    text: "use `compose` on a block (`[...]` thing)"
    sent: "2017-08-30T15:38:27.260Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6dbde614889d475a25011"
    text: "I use view compose commands inside of that?"
    sent: "2017-08-30T15:38:06.510Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
)#(
    id: "59a6dbd8bc46472974daf6fc"
    text: {One more follow-up, if I may: I have    "view layout [ ]" already defined}
    sent: "2017-08-30T15:38:00.643Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6dbc0ba0f0f6e38fc4be1"
    text: {Yeah, it could be simpler, maybe there's another way which I don't know about}
    sent: "2017-08-30T15:37:36.842Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6dba376a757f808fca37c"
    text: {I think that is simpler than I expected it to be which threw me off}
    sent: "2017-08-30T15:37:07.595Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6db9b210ac26920d9a8de"
    text: {`compose` evaluates parens inside block and `rejoin` makes a string for you}
    sent: "2017-08-30T15:36:59.236Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6db7a210ac26920d9a868"
    text: {@alqnop it's the same as in example above:^/```text^/>> ammo: 9'000^/== 9000^/>> view compose [text (rejoin ["Ammo holds:" space ammo])]^/```}
    sent: "2017-08-30T15:36:26.084Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6db1d210ac26920d9a669"
    text: "and after it is the number"
    sent: "2017-08-30T15:34:53.447Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6db18162adb6d2e4daea7"
    text: {I'm looking now to have a GUI line that shows text that says "Ammunition: "}
    sent: "2017-08-30T15:34:48.138Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6db059acddb2407e588e0"
    text: "which contains a number"
    sent: "2017-08-30T15:34:29.037Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6db02b16f264642ea5e0a"
    text: {I think my confusion comes from the fact that I have the variable amm}
    sent: "2017-08-30T15:34:26.372Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6daf49acddb2407e588b2"
    text: "I'm making a GUI app, yes"
    sent: "2017-08-30T15:34:12.548Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6daeb614889d475a24a2a"
    text: {it's not about `view` but `compose`, for some reason I thought that you're making GUI app :smile: }
    sent: "2017-08-30T15:34:03.142Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6dacd9acddb2407e587c9"
    text: "Reading about the view command"
    sent: "2017-08-30T15:33:33.758Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6d9e8c101bc4e3a718dc2"
    text: {@alqnop kinda like that?^/```text^/>> var: "some text"^/== "some text"^/>> view compose [text (rejoin ["var holds" space var])]^/```}
    sent: "2017-08-30T15:29:44.579Z"
    editedAt: "2017-08-30T15:32:05.644Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6d988210ac26920d99cf0"
    text: {My issue is that the "text amm" I want it to display the variable amm}
    sent: "2017-08-30T15:28:08.689Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6d96a66c1c7c477f976af"
    text: "progress [amm / 100]"
    sent: "2017-08-30T15:27:38.169Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6d961162adb6d2e4da369"
    text: {amm-text: text amm [print ["amm-text holds " amm]]}
    sent: "2017-08-30T15:27:29.417Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6d94b8f4427b462b5830a"
    text: {across text "ammunition " 75x20}
    sent: "2017-08-30T15:27:07.243Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a6d91eba0f0f6e38fc3ca6"
    text: {I'm trying to nail down what I was in here yesterday trying to learn how to do}
    sent: "2017-08-30T15:26:22.140Z"
    v: 1
    author: "5682ed2316b6c7089cc0884e"
) #(
    id: "59a55dabee5c9a4c5f0f9002"
    text: {@greggirwin Fixed - nothing to do with the script - Internal command issue - Thanks!}
    sent: "2017-08-29T12:27:23.369Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a51a32578b44a046fc824d"
    text: {@9214 thanks to @geekyi suddenly realised that he can try to fix bugs himself and start to submit pull request like a men! :baby: :point_right: :boy: :point_right: :man:}
    status: true
    sent: "2017-08-29T07:39:30.923Z"
    editedAt: "2017-08-29T07:40:34.007Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a4b8ab578b44a046fb1044"
    text: {If anyone is curious, I was debugging https://github.com/red/red/issues/3002, and this is from https://github.com/red/red/blob/master/environment/lexer.red#L616-L620^/}
    sent: "2017-08-29T00:43:23.101Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59a4a3a9c101bc4e3a67d2ec"
    text: "And (3) matches for some reason :confused: "
    sent: "2017-08-28T23:13:45.695Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59a4a391162adb6d2e43de0f"
    text: "I don't know what's happening at (2) either"
    sent: "2017-08-28T23:13:21.812Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59a4a37bc101bc4e3a67d216"
    text: {Not sure how `break` and `skip` works here. Does `break` return to the beginning of the rule after (1)? Does it match (there is no `==> [not] matched`)^/}
    sent: "2017-08-28T23:12:59.589Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59a4a24866c1c7c477efb7f8"
    text: {Evaluates to:^/```red^/                   -->^/                     match: [#"^^"" thru #"^^"" | #"'" thru #"'" | e: #">" break | ^/                     input: "]"                     ^/                     ==> not matched^/                     match: [#"'" thru #"'" | e: #">" break | skip] ^/                     input: "]"                     ^/                     ==> not matched^/                     match: [e: #">" break | skip]         ; (1)^/                     input: "]"                     ^/                     match: [thru #"^^"" | #"'" thru #"'" | e: #">" break | skip          ; (2)^/                     input: "]"                     ^/                     ==> not matched^/                     match: [#"'" thru #"'" | e: #">" break | skip]          ; (3)^/                     input: "]"                     ^/                     ==> matched^/return: true^/== true^/```}
    sent: "2017-08-28T23:07:52.127Z"
    editedAt: "2017-08-28T23:10:10.635Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59a4a23476a757f808f2c3c1"
    text: {```red^/b: [#"^^"" thru #"^^"" ^/    | #"'" thru #"'" ^/    | e: #">" break ^/    | skip^/]^/parse-trace "]" b^/```^/}
    sent: "2017-08-28T23:07:32.380Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59a47beb578b44a046fa1263"
    text: {I launch from UltraEdit, so maybe a quoting or working directory issue. If other scripts work, it would be good to find the difference.}
    sent: "2017-08-28T20:24:11.181Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a47284c101bc4e3a66ebb3"
    text: {Works from the windows command prompt, may be Notepad++ related - Thanks}
    sent: "2017-08-28T19:44:04.439Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a4721266c1c7c477eebf6c"
    text: "I run red-063.exe from Notepad++"
    sent: "2017-08-28T19:42:10.472Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a4718d162adb6d2e42fe6a"
    text: {Can someone else reproduce? I don't have Win10 here. Or, @OneArb , maybe a permissions issue if DL'd from github?}
    sent: "2017-08-28T19:39:57.117Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a46fedbc46472974d03d6f"
    text: {@greggirwin works pasted in the console, yet to try compiled}
    sent: "2017-08-28T19:33:01.338Z"
    editedAt: "2017-08-28T19:33:30.313Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a46ed0614889d475977fc4"
    text: "@greggirwin  Windows 10"
    sent: "2017-08-28T19:28:16.701Z"
    editedAt: "2017-08-28T19:28:32.426Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a46ad3c101bc4e3a66c604"
    text: {@OneArb, works here, compiled, interpreted, or pasted into console. Win7 here. What OS and how are you running it. There were some old *nix bugs that gave that message IIRC.}
    sent: "2017-08-28T19:11:15.676Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a463d876a757f808f19ac3"
    text: {But at the end you will have `make object! [answer: 42  question: 12]`.}
    sent: "2017-08-28T18:41:28.330Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a463a1210ac26920ce9ca1"
    text: {Note that with `obj: make obj [question: 12]` you are not extending an existing object, but creating a new one and rebinding the word `obj` to newly created object.}
    sent: "2017-08-28T18:40:33.464Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a4635cee5c9a4c5f0b71f8"
    text: {@OneArb You could do `obj: make obj [question: 12]`, later we will have `extend obj [question: 12]` but it is not yet implemented. }
    sent: "2017-08-28T18:39:24.515Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a4626f66c1c7c477ee6c06"
    text: {@greggirwin I get a "cannot access argument file:" message}
    sent: "2017-08-28T18:35:27.285Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a45cdeee5c9a4c5f0b4f15"
    text: {@9214, yes, though the standard VID/View test scripts use it, so I followed Team Red's lead for now.}
    sent: "2017-08-28T18:11:42.395Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a45c24578b44a046f9653e"
    text: "@kpeters58 You are welcome!"
    sent: "2017-08-28T18:08:36.944Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a45bf08f4427b462aa4717"
    text: {btw, `View` in header can be written without a quote}
    sent: "2017-08-28T18:07:44.145Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a45b24614889d475971db9"
    text: {@9214 and @OneArb: https://gist.github.com/greggirwin/91dc1c3971998e0babeedba9f7e60bc5 is my experimental object inspector, hacked from an old R2 version.}
    sent: "2017-08-28T18:04:20.439Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a45a96614889d475971a83"
    text: "@toomasv Thanks!"
    sent: "2017-08-28T18:01:58.986Z"
    editedAt: "2017-08-28T18:07:41.054Z"
    v: 2
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a4598e76a757f808f169b5"
    text: "@9214 my, my, thanks. My Red is rusty ;)"
    sent: "2017-08-28T17:57:34.898Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a457b6ba0f0f6e38f0ed4b"
    text: "@toomasv cheers!"
    sent: "2017-08-28T17:49:42.668Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a457a48f4427b462aa3000"
    text: {@kpeters58^/```^/>> foreach [k v] body-of #(a: 1 b: 2)[print [k v]]^/a 1^/b 2^/```}
    sent: "2017-08-28T17:49:24.123Z"
    editedAt: "2017-08-28T17:49:52.691Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a4579a9acddb2407da4352"
    text: {@OneArb you've rebinded `obj` to a new `object!`, the original one is lost forever, hence no `answer` field}
    sent: "2017-08-28T17:49:14.592Z"
    editedAt: "2017-08-28T17:51:16.496Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a45755bc46472974cfc548"
    text: "How does one iterate over the K/V pairs in a map?"
    sent: "2017-08-28T17:48:05.949Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a456d9ba0f0f6e38f0e927"
    text: {This goes a bit over my head:^/```^/^/        obj: object [answer: 42]^/        == make object! [^/        answer: 42^/        ]^/        words-of obj^/        == [answer]^/        obj: object [question: 12]^/        == make object! [^/        question: 12^/        ]^/        words-of obj^/        == [question]^/``` ^/Where is answer?}
    sent: "2017-08-28T17:46:01.688Z"
    editedAt: "2017-08-28T17:46:57.158Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a4568e162adb6d2e4277b4"
    text: {@9214  :point_up: [August 28, 2017 5:59 PM](https://gitter.im/red/help?at=59a42fec614889d4759641fb) :tada:^/```^/reverse: func [^/^-series /skip rec /part len /local i^/][^/^-rec: any [rec 1]^/^-either 0 = ((length? series) % rec) [^/^-^-len: any [len length? series]^/^-^-i: 1^/^-^-loop (len / rec - 1) [^/^-^-^-i: i + rec^/^-^-^-series: at head series i^/^-^-^-insert head series take/part series rec^/^-^-] ^/^-^-head series^/^-][cause-error 'user 'message ["Wrong length of series or skip!"]]^/]^/>> reverse/skip/part [1 2 3 4 5 6] 2 4^/== [3 4 1 2 5 6]^/>> reverse/skip [1 2 3 4 5 6] 2^/== [5 6 3 4 1 2]^/>> reverse [1 2 3 4 5 6]^/== [6 5 4 3 2 1]^/>> reverse/skip [1 2 3 4 5 6] 3^/== [4 5 6 1 2 3]^/```}
    sent: "2017-08-28T17:44:46.484Z"
    editedAt: "2017-08-28T17:45:23.666Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a4542a76a757f808f15015"
    text: {I bet @greggirwin has something in his toolbox that looks like Smalltalk-ish graphical object inspector ;)}
    sent: "2017-08-28T17:34:34.230Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "59a453f59acddb2407da31c8"
    text: {`object!` is just like any other value, you can `print`, `mold`, `form`, `probe` it or whatever. It also supports reflection:^/```^/>> obj: object [answer: 42]^/== make object! [^/    answer: 42^/]^/>> words-of obj^/== [answer]^/>> values-of obj^/== [42]^/```}
    sent: "2017-08-28T17:33:41.606Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a45355162adb6d2e426a0f"
    text: {Thanks, That's one of my main hurdle in Rebol/Red. I seem to miss some way to look behind the hood with some sort of object inspector.}
    sent: "2017-08-28T17:31:01.086Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a4528e578b44a046f93457"
    text: "@9214 I can try to `compose` styles, right."
    sent: "2017-08-28T17:27:42.525Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a4527a76a757f808f14716"
    text: {@OneArb ^/```^/>> l: layout [base "inspect me"]^/== make object! [^/    type: 'window^/    offset: none^/    size: 100x100^/ ...^/>> dump-face first l/pane^/ Type: base Style: base Offset: 10x10 Size: 80x80 Text: "inspect me"^/== make object! [^/    type: 'base^/    offset: 10x10^/    size: 80x80^/    ...^/```^/though navigating `pane` by indexes is tricky, maybe there's a better way}
    sent: "2017-08-28T17:27:22.160Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a4512eee5c9a4c5f0b16b8"
    text: {face tree hierarchy will differ from app to app, but the toplevel face is always (at least for now) `screen` with `window` children}
    sent: "2017-08-28T17:21:50.689Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a4506aee5c9a4c5f0b137c"
    text: {By generic I mean the actual face hierarchy for each face type, assuming docs may lag some.^/^/How do I get something like `probe Text-list!`?^/}
    sent: "2017-08-28T17:18:34.295Z"
    editedAt: "2017-08-28T17:23:03.254Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a450678f4427b462aa0dfb"
    text: {also, `probe face!` will show you the basic template object for every `face`}
    sent: "2017-08-28T17:18:31.169Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a45040ee5c9a4c5f0b1329"
    text: {also consult the [docs](https://doc.red-lang.org/en/view.html#_face_object)}
    sent: "2017-08-28T17:17:52.438Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a45018162adb6d2e425c46"
    text: "@OneArb `probe layout [...]` or maybe `dump-face`"
    sent: "2017-08-28T17:17:12.286Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a44fefba0f0f6e38f0c925"
    text: {Is there a way to view the generic face internal structure so I can see all the facelets available?^/^/what are `template` and `default-actor` to a face?}
    sent: "2017-08-28T17:16:31.404Z"
    editedAt: "2017-08-28T17:16:51.189Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a44fe1c101bc4e3a663bff"
    text: "@9214 great"
    sent: "2017-08-28T17:16:17.717Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a44fb79acddb2407da1b45"
    text: {@OneArb ?^/```text^/styles: [^/    style yup: base "OK"^/    style yes: yup red^/]^/^/view compose [^/    (styles)^/    yup yes^/]^/```}
    sent: "2017-08-28T17:15:35.116Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a44e8876a757f808f134d4"
    text: {My original intent^/^-compose styles to keep the interface consistent^/^/so create^/^-[ok-button button "Cancel"]^/^-[style ok-button: button "OK"]^/^/then a font size color set^/^/then combine into a style}
    sent: "2017-08-28T17:10:32.468Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a44daaee5c9a4c5f0b081a"
    text: {@OneArb `para!` is related only to text positioning}
    sent: "2017-08-28T17:06:50.123Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a44bd6bc46472974cf923a"
    text: {@greggirwin I am reading about `template`.^/^/It references `para`^/^/"One para object can be referenced by one or more faces, allowing to^/control para properties of a group of faces from a single place."^/^/Can I use para to the same effect as style?}
    sent: "2017-08-28T16:59:02.400Z"
    editedAt: "2017-08-28T17:03:39.905Z"
    v: 3
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a446549acddb2407d9ef1f"
    text: {Or use `layout/styles`:^/```^/ss: [^/^-ok-button: [^/^-^-default-actor: on-click^/^-^-template: [type: 'button size: 60x23 text: "OK"]^/^-]^/]^/view layout/styles [ok-button button "Cancel"] ss^/```}
    sent: "2017-08-28T16:35:32.152Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a4452266c1c7c477eddda0"
    text: {@OneArb, another approach, though `stylize` is better, would be to include the styles into the layout block. e.g.:^/```^/>> ss: [style ok-button: button "OK"]^/== [style ok-button: button "OK"]^/>> view head insert [ok-button button "Cancel"] ss^/```}
    sent: "2017-08-28T16:30:26.893Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a44495ba0f0f6e38f08eaa"
    text: "I think I'll make a wish :^^)"
    sent: "2017-08-28T16:28:05.410Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a4447e162adb6d2e421e49"
    text: {@9214, `reverse` doesn't have a `/skip` refinement, so...no.}
    sent: "2017-08-28T16:27:42.907Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a4409e8f4427b462a9c1bc"
    text: {@OneArb I don't think so, it needs rewrite to be included in recent version.}
    sent: "2017-08-28T16:11:10.309Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a430ec210ac26920cdb2d6"
    text: {@rebolek  stylize status? You coded and it will be integrated in a major milestone version?}
    sent: "2017-08-28T15:04:12.696Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a42fec614889d4759641fb"
    text: {can I force `reverse` to see my block as fixed sized record? Like that:^/```^/>> reverse/record [1 2 3 4] 2^/>> [3 4 1 2]^/```}
    sent: "2017-08-28T14:59:56.487Z"
    editedAt: "2017-08-28T15:00:09.206Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a42e209acddb2407d97949"
    text: {@OneArb see https://github.com/red/red/pull/2300/files for details}
    sent: "2017-08-28T14:52:16.474Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a42dc776a757f808f096b8"
    text: {@rebolek sounds like a great idea, so stylize can be a function adding to `system/view/VID/styles`}
    sent: "2017-08-28T14:50:47.947Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a42d298f4427b462a95e2d"
    text: {@OneArb see `system/view/VID/styles` where styles are defined, try to add your style there.}
    sent: "2017-08-28T14:48:09.601Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a42c398f4427b462a95b1f"
    text: {@rebolek The opportunity I seek: ^/use the style across several windows within the same application.}
    sent: "2017-08-28T14:44:09.860Z"
    editedAt: "2017-08-28T14:46:21.910Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a42b11c101bc4e3a657c2a"
    text: {@OneArb I wrote `stylize` once to do it, it needed to be compiled into Red, but I think it should be possible to have `stylize` even in interpreted Red.}
    sent: "2017-08-28T14:39:13.877Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a42a9c578b44a046f8714a"
    text: {@OneArb what are the problems with declaring a style outside the view?}
    sent: "2017-08-28T14:37:16.826Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a42a30bc46472974cee5b8"
    text: "Any workaround to declare a style outside a view?"
    sent: "2017-08-28T14:35:28.222Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "59a3c04776a757f808ee7dc9"
    text: {@Oldes how can you translate so easily between Red/System and Red? What's your secret? :p }
    sent: "2017-08-28T07:03:35.696Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59a39c43ba0f0f6e38ed7ecd"
    text: {@greggirwin Thank you, agreed!^/@kpeters58 To return false from validation it is probably easiest to use parse for checking. But you could also use 'foreach [key data] db [check key check data]' (Sorry for formatting, can't find backticks on phone)}
    sent: "2017-08-28T04:29:55.013Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a33540ee5c9a4c5f067760"
    text: {@kpeters58, you could also `parse db [some [integer! block!]]`, using a `key` rule if you need more than integer values checked by type.}
    sent: "2017-08-27T21:10:24.087Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a334d5bc46472974caf5cc"
    text: {Thanks @toomasv. So many details to consider, not always with clear performance implications.}
    sent: "2017-08-27T21:08:37.630Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a32c8e66c1c7c477e93e4e"
    text: "@kpeters58 use `map!` that is key/data by default"
    sent: "2017-08-27T20:33:18.239Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a32c0b66c1c7c477e93bc4"
    text: {^/Given a database structure of^/^/```^/db: [ integer [data block] ... integer [data block] ]^/^/```^/how can I validate a database block to ensure that it is entirely made up of key/data block combinations?^/^/In a robust fashion, so that throwing blocks like [] or ["Joe"] or [[data] key] at it returns false without the script aborting.}
    sent: "2017-08-27T20:31:07.554Z"
    editedAt: "2017-08-27T20:31:37.353Z"
    v: 2
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a320c99acddb2407d52b5a"
    text: {@greggirwin Yes, `ahed` is certainly needed in general case. I put `| none` in there because my initial version didn't catch empty blocks:^/```^/flatten: func [tree [block!] /level lvl /local rule l][^/    (l: -1)^/    rule: [(l: l + 1) some [^/       ahead block! if (any [not level l < lvl]) into rule (l: l - 1) ^/    |  keep skip^/;^-|  none^/    ]] ^/    parse tree [collect rule]^/]^/flatten b^/== [1 [] 2 [] 3 [] 4 [] 5 [] 6 [] 7 [] 8 [] 9 [] 10 [] 11 [] 12 [] 13 [] 14 [] 15 [] 16 [] 17 [] 18 [] 19 [] 20 [] 21 [] 22 [] 23 [] 24 [] 25 [] ...^/```^/But with `| none` at place:^/```^/>> flatten b^/== [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ...^/```^/But now I see that the quick-version would work without it also^/```^/flatten2: func [tree [block!] /level lvl /local rule l][^/    rule: [some [^/       into rule ^/    |  keep skip^/    ]] ^/    parse tree [collect rule]^/]^/>> flatten2 b^/== [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ...^/```^/But it's performance would be slower a bit:^/Without `| none`^/```^/>> time-it/count [flatten2 copy b] 1000^/== 0:00:01.576^/```^/And with `| none`^/```^/>> time-it/count [flatten2 copy b] 1000^/== 0:00:01.496^/```^/}
    sent: "2017-08-27T19:43:04.986Z"
    editedAt: "2017-08-27T19:47:02.026Z"
    v: 5
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a3188a9acddb2407d50be6"
    text: {@toomasv, what is the `| none` for in your `deep1` version? We also need to add back the `ahead` check for block values, otherwise strings in the block are a problem, and parens just vanish.}
    sent: "2017-08-27T19:07:54.530Z"
    editedAt: "2017-08-27T19:10:44.256Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a31610578b44a046f3fbfc"
    text: {A more normal case might be a large key-value block, where the values are, themselves, blocks. Flattening something like that with 10K keys takes ~1s here with my slower approach, but is virtually instant with @toomasv's version.}
    sent: "2017-08-27T18:57:20.492Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a315378f4427b462a4e3e5"
    text: {Or at least know where we're weak and strong, what limits are, as we are compared directly against other langs for certain operations.}
    sent: "2017-08-27T18:53:43.581Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a31506ba0f0f6e38eb9a30"
    text: {Of course, but we can press straight Red to do more if mezzanines are as efficient as possible. }
    sent: "2017-08-27T18:52:54.989Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a314c6ba0f0f6e38eb9950"
    text: {Isn't Red/System with routines there exactly for such a cases where you need efficiency?}
    sent: "2017-08-27T18:51:50.592Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a3138e210ac26920c9336f"
    text: {I can't remember a time where I needed to flatten big blocks in an inner loop, but a really large block will cause a similar (or worse) performance issue. Bolek's example block is a nice, pathological case, especially at 100K elements.}
    sent: "2017-08-27T18:46:38.171Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a3123376a757f808ec01f4"
    text: "A thing to contemplate :pray:"
    sent: "2017-08-27T18:40:51.879Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a31166bc46472974ca6510"
    text: {No good refinement name for the opposite behavior coming to me right now, and the difference in behavior (stack limit) tells me we need to make them separate funcs.}
    sent: "2017-08-27T18:37:26.055Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a310f8210ac26920c92704"
    text: {Yup. I get similar results here. Hard to ignore the speed gain.}
    sent: "2017-08-27T18:35:36.167Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a310ab210ac26920c925e4"
    text: {```^/>> time-it/count [flatten copy b] 1000^/== 0:00:01.497^/>> time-it/count [flatten/in-place copy b] 1000^/== 0:00:06.583^/>> ^/```}
    sent: "2017-08-27T18:34:19.042Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a31079c101bc4e3a610104"
    text: "Fixed. :^^)"
    sent: "2017-08-27T18:33:29.697Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a3106066c1c7c477e8cdbd"
    text: "Sorry, yeah, just thinking out loud. "
    sent: "2017-08-27T18:33:04.571Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a3104d66c1c7c477e8cd74"
    text: {But that's more confusing, and not very idiomatic. }
    sent: "2017-08-27T18:32:45.379Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a3104b578b44a046f3e67e"
    text: {```^/*** Script Error: tree has no value^/*** Where: parse^/*** Stack: time-it flatten  ^/```}
    sent: "2017-08-27T18:32:43.005Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
)#(
    id: "59a310019acddb2407d4eda3"
    text: {```^/flatten: function [^/^-"Returns a block, with all sub-blocks replaced by their contents"^/^-block [any-block!]^/^-/in-place "Modify block argument in place"^/][^/^-either in-place [^/^-^-while [p: find block block!][change/part p p/1 1]^/^-^-block^/^-][^/^-    rule: [any [into rule | keep skip | none]] ^/^-    parse block [collect rule]^/^-]^/]^/```}
    sent: "2017-08-27T18:31:29.777Z"
    editedAt: "2017-08-27T18:33:23.729Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30f67162adb6d2e3d20f2"
    text: {Anyway, `collect` is faster, but yes, certainly changing in-place is also needed. }
    sent: "2017-08-27T18:28:55.231Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a30f56c101bc4e3a60fb84"
    text: "`Lest` uses this a lot in R3."
    sent: "2017-08-27T18:28:38.477Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a30f13614889d475919253"
    text: {And yes, I want to modify everything in place. Parsed block, rules and result.}
    sent: "2017-08-27T18:27:31.360Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a30ea68f4427b462a4cbc9"
    text: {`collect` is great for collecting. For more advanced control, you can use Red code.}
    sent: "2017-08-27T18:25:42.134Z"
    editedAt: "2017-08-27T18:25:56.317Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a30e3cee5c9a4c5f05d342"
    text: {That's deep indeed. The main design question may be whether we want to control the ability to modify a block in place. With `collect` we don't have a choice.}
    sent: "2017-08-27T18:23:56.064Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30df366c1c7c477e8c1e8"
    text: {I wonder if it would be possible to auto-expand the stack limit. OTOH what use-case needs parsing block with more than 832 levels... :rocket: }
    sent: "2017-08-27T18:22:43.494Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a30d6d8f4427b462a4c755"
    text: "I changed his 1000 to 800 to go below limit"
    sent: "2017-08-27T18:20:29.238Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a30d6666c1c7c477e8bfc0"
    text: ":^^) And at that size, yours is 4x faster. Woohoo!"
    sent: "2017-08-27T18:20:22.503Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30d4e578b44a046f3d85f"
    text: {Using 800 for `b` generation is fine, probably why Bolek did that.}
    sent: "2017-08-27T18:19:58.806Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30d4b614889d475918bed"
    text: {Here the stack limit is same as for rebolek :point_up: [August 26, 2017 11:48 PM](https://gitter.im/red/help?at=59a1dea28f4427b462a0b3aa), ie. 832.}
    sent: "2017-08-27T18:19:55.008Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a30cfd162adb6d2e3d1660"
    text: {Mine takes ~12s here, for that `b`, but `deep1` hits the `parse` stack limit. Wonder why it doesn't for you.}
    sent: "2017-08-27T18:18:37.669Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30be4614889d475918645"
    text: {Ah, just found that myself, thanks. Missed it on the first read here.}
    sent: "2017-08-27T18:13:56.836Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30bcfee5c9a4c5f05cb6a"
    text: {The block I used:^/```^/>> b: [] p: b repeat i 800 [repend/only p [i []] p: last p]^/== [800 []]^/>> b^/== [[1 [] [2 [] [3 [] [4 [] [5 [] [6 [] [7 [] [8 [] [9 [] [10 [] [11 [] [12 [] [13 [] [14 [] [15 [] [16 [] [17 [] [18 [] [19 [] [20 [] [21 [] [22...^/```^/(Corrected to 800 cycles)}
    sent: "2017-08-27T18:13:35.727Z"
    editedAt: "2017-08-27T18:23:03.999Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a30bbe210ac26920c91216"
    text: {"even mighty shall fall" `_(:3」∠)_`}
    sent: "2017-08-27T18:13:18.998Z"
    editedAt: "2017-08-27T18:13:34.680Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a30b77bc46472974ca5019"
    text: {:) :point_up: [August 27, 2017 6:39 PM](https://gitter.im/red/help?at=59a2e799c101bc4e3a6068f7)}
    sent: "2017-08-27T18:12:07.316Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a30b55614889d475918443"
    text: "Duh. :^^\"
    sent: "2017-08-27T18:11:33.194Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30b48c101bc4e3a60ee88"
    text: "Ah, right!"
    sent: "2017-08-27T18:11:20.717Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30b3fc101bc4e3a60ee2d"
    text: {That's why I used `copy`. Otherwise 999 test would go on flat block}
    sent: "2017-08-27T18:11:11.034Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a30b3d66c1c7c477e8b787"
    text: {```^/>> time-it/count [flatten-tv-deep1 [[1 2 3 [4 5 6 [7 8 9 [10 11 12 [13 14 15 [16 17 18 [19 20]]]]]]]]] 100000^/== 0:00:01.702^/>> time-it/count [flatten copy [[1 2 3 [4 5 6 [7 8 9 [10 11 12 [13 14 15 [16 17 18 [19 20]]]]]]]]] 100000^/== 0:00:00.93^/```}
    sent: "2017-08-27T18:11:09.267Z"
    editedAt: "2017-08-27T18:11:57.920Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30b02c101bc4e3a60ece7"
    text: {What does the block look like? `Copy` is likely the difference. Mine is meant to modify in place. }
    sent: "2017-08-27T18:10:10.358Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30ac2162adb6d2e3d0de6"
    text: {On my W10 your last code is slower:^/```^/>> time-it/count [flatten copy b] 1000^/== 0:00:06.63^/```}
    sent: "2017-08-27T18:09:06.366Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a30a5276a757f808ebe66d"
    text: {I just tried your deep1 version in a high count timer test and my Red console vanished.}
    sent: "2017-08-27T18:07:14.992Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a30a31162adb6d2e3d0c21"
    text: {@toomasv, would you test this one?^/```^/flatten: function [^/^-"Returns a block, with all sub-blocks replaced by their contents."^/^-block [any-block!] "(modified)"^/][^/^-while [p: find block block!][change/part p p/1 1]^/^-block^/]^/```}
    sent: "2017-08-27T18:06:41.357Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a309de614889d475917dec"
    text: {:point_up: [August 26, 2017 11:50 PM](https://gitter.im/red/help?at=59a25dc2c101bc4e3a5e87dc) Good catch @toomasv ! And thanks @PeterWAWood  and @endo64. Working on an update now. Wide performance variances in the posted models.}
    sent: "2017-08-27T18:05:18.156Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a3092466c1c7c477e8ae26"
    text: {@rebolek  @greggirwin  @PeterWAWood  @endo64 Thank you all for sharing your ideas for `flatten`. I made some tests using rebolek's `b: [] p: b repeat i 800 [repend/only p [i []] p: last p]` for nested block. According to my experiments the fastest code to deep-flatten blocs is following:^/```^/flatten-deep1: func [tree [block!] /local rule][^/    rule: [any [into rule | keep skip | none]] ^/    parse tree [collect rule]^/]^/>> time-it/count [flatten-deep1 copy b] 1000^/== 0:00:01.438^/```^/Very close to this is version with `collect into`.^/```^/flatten-deep2: func [tree [block!] /local rule out][^/    out: copy []^/    rule: [some [into rule | keep skip | none]] ^/    parse tree [collect into out rule]^/    out^/]^/>> time-it/count [flatten-deep2 copy b] 1000^/== 0:00:01.526^/```^/Further come methods using append or insert in their body:^/```^/flatten-deep3: func [data /local i ret value][^/    ret: copy []^/    rule: [some [into rule | set value skip (append ret value)]] ^/    parse data rule^/    ret^/]^/>> time-it/count [flatten-deep3 copy b] 1000^/== 0:00:02.184^/^/flatten-deep4: func [b [block!] /local value rule][^/^-local: make block! length? b^/^-rule: [^/^-^-into [some rule]^/^-^-| set value skip (append local value)^/^-]^/^-parse b [some rule]^/^-local^/]^/== 0:00:02.201^/>> time-it/count [flatten-deep4 copy b] 1000^/^/flatten-deep5: func [^/    "Returns a block, with all sub-blocks replaced by their contents."^/    block [any-block!] "(modified)"^/][^/    forall block [^/        if block? block/1 [^/            change/part block block/1 1 ^/            block: skip block -1^/        ]^/    ]^/    block^/]^/>> time-it/count [flatten-deep5 copy b] 1000^/== 0:00:02.473^/```^/Adding conditions may be necessary but makes things even slower:^/```^/flatten-deep6: func [^/    "Returns the block, with all sub-blocks replaced by their contents."^/    block [any-block!] "(modified)"^/    /local idx-before idx-after ^/][^/    forall block [^/        if block? first block [^/            until [^/                idx-before: index? block^/                change/part block first block 1^/                idx-after: index? block^/                not block? first skip block idx-before - idx-after^/            ]^/        ]^/    ]^/    block^/]^/>> time-it/count [flatten-deep6 copy b] 1000^/== 0:00:04.224^/```^/^/^/^-}
    sent: "2017-08-27T18:02:12.408Z"
    editedAt: "2017-08-27T18:06:04.235Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a2ea14162adb6d2e3c94c9"
    text: "`_(:3」∠)_`  dang"
    sent: "2017-08-27T15:49:40.120Z"
    editedAt: "2017-08-27T15:49:51.750Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a2e98a8f4427b462a43eb0"
    text: {@9214 BTW ^/```^/>> time-it/count [to block! form b] 1000^/== 0:00:14.147^/```^/takes about 5 times more than any other :japanese_goblin:}
    sent: "2017-08-27T15:47:22.037Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a2e821614889d47590faee"
    text: ":see_no_evil:"
    sent: "2017-08-27T15:41:21.066Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a2e7c1210ac26920c88f6f"
    text: ":scream_cat: :speak_no_evil:"
    sent: "2017-08-27T15:39:45.262Z"
    editedAt: "2017-08-27T15:40:07.464Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a2e799c101bc4e3a6068f7"
    text: {No, non-parse-including scripts changed the initial block and 999 consecuent repeats were carried out on flat blocks :scream: }
    sent: "2017-08-27T15:39:05.854Z"
    editedAt: "2017-08-27T15:41:45.299Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a2e6958f4427b462a43242"
    text: "something to do with block space allocation?"
    sent: "2017-08-27T15:34:45.694Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a2e64f76a757f808eb5d06"
    text: {:eyes: let it be our sacred secret (though I can't recall what flaw it was)}
    sent: "2017-08-27T15:33:35.739Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a2e059614889d47590dfc3"
    text: {Sorry @9214 , I deleted my previous "research" post because of a grave flaw in it :flushed:}
    sent: "2017-08-27T15:08:09.058Z"
    editedAt: "2017-08-27T15:11:32.032Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a2df85578b44a046f323a3"
    text: ":ok_hand:"
    sent: "2017-08-27T15:04:37.111Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a2df5d8f4427b462a418ec"
    text: {@toomasv oh, right!^/```^/>> parse/case [A][quote A]^/== true^/```}
    sent: "2017-08-27T15:03:57.393Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a2df2f578b44a046f32239"
    text: {@9214 ^/```^/>> parse ['a]['a]^/== true^/>> parse/case ['a]['a]^/== true^/```^/}
    sent: "2017-08-27T15:03:11.322Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a2db7366c1c7c477e8017a"
    text: {why?^/```^/>> parse [a]['a]^/== true^/>> parse/case [a]['a]^/== false^/```}
    sent: "2017-08-27T14:47:15.191Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a2bdce578b44a046f29f7a"
    text: {OK, this is new to me. I have to look at it a bit more. Thanks again.}
    sent: "2017-08-27T12:40:46.098Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a2bd4076a757f808eac1d4"
    text: {@Phryxe I've just copied `find`'s functionality, that returns position in block, you can change it to return just value (object).}
    sent: "2017-08-27T12:38:24.619Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a2bd2c614889d47590588a"
    text: {because `find-object` returns series at index where your object was found}
    sent: "2017-08-27T12:38:04.205Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a2bd039acddb2407d3a550"
    text: "Why does it return several objects?"
    sent: "2017-08-27T12:37:23.995Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a2bc2f9acddb2407d3a2cc"
    text: {@Phryxe I thought so, you are looking for some object's field value, just adapt the above function to something like^/```^/>> find-object: func [block word value][forall block [if equal? select block/1 word value [return block]]]^/== func [block word value][forall block [if equal? select block/1 word value [return block]]]^/>> find-object block 'index 335^/== [make object! [^/    index: 335^/] make object! [^/    index: 336^/] make object! [^/    index: 337^/] make object! [^/    index: 338^/] make object! [^/    index: ...^/```}
    sent: "2017-08-27T12:33:51.784Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a2bb42578b44a046f295ba"
    text: {@rebolek Thanks, I have to contemplate on this. I am looking for an object with a certain id and want add or change info in other fields on same object.}
    sent: "2017-08-27T12:29:54.618Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a2bab066c1c7c477e77c3e"
    text: "IDs are superfluous here"
    sent: "2017-08-27T12:27:28.208Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a2ba648f4427b462a3891e"
    text: {@Phryxe I'm not sure what you mean by easy way to reference the sought object. The sought object itself is the reference.}
    sent: "2017-08-27T12:26:12.117Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a2b9f8ee5c9a4c5f048b14"
    text: {@Phryxe ^/```^/>> block: collect [repeat i 1000 [keep make object! compose [index: (i)]]]^/== [make object! [^/    index: 1^/] make object! [^/    index: 2^/] make object! [^/    index: 3^/] make object! [^/    index: 4^/] make object! [^/    index: 5^/] make...^/>> find-object: func [block object][forall block [if equal? object block/1 [return block]]]^/== func [block object][forall block [if equal? object block/1 [return block]]]^/>> find-object block make object! [index: 335]^/== [make object! [^/    index: 335^/] make object! [^/    index: 336^/] make object! [^/    index: 337^/] make object! [^/    index: 338^/] make object! [^/    index: ...^/```}
    sent: "2017-08-27T12:24:24.488Z"
    editedAt: "2017-08-27T12:24:47.508Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a2b9b78f4427b462a386b7"
    text: {Ok, thanks, so no easy way to reference the sought object. Well, there is the index ...}
    sent: "2017-08-27T12:23:19.961Z"
    editedAt: "2017-08-27T12:23:58.206Z"
    v: 3
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a2b94366c1c7c477e7766a"
    text: {@Phryxe just iterate over the block and compare your object with object from block}
    sent: "2017-08-27T12:21:23.125Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a2b91cba0f0f6e38ea3762"
    text: {you mean bunch of anonymous object inside a block?}
    sent: "2017-08-27T12:20:44.556Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "59a2b8ed210ac26920c7e02d"
    text: {Sorry to bug you about objects. Is there an example on how to find one of several objects (where it isn't bound to a word) in a block?}
    sent: "2017-08-27T12:19:57.609Z"
    editedAt: "2017-08-27T12:20:17.076Z"
    v: 2
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a276fa76a757f808e9ca83"
    text: {Hmm.. I think this is not mine, I copied from somewhere. I never used `local` word to keep values.}
    sent: "2017-08-27T07:38:34.223Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a27656ee5c9a4c5f039ddb"
    text: {```^/>> flatten [1 [2 [3 [4]]]]^/== [1 2 [3 [4]]]^/>> flatten/deep [1 [2 [3 [4]]]]^/== [1 2 3 4]^/```}
    sent: "2017-08-27T07:35:50.410Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a27646614889d4758f62ee"
    text: {I think we all wrote our flatten function at some time :) Here is mine:^/```^/flatten: func [b [block!] /deep /local r value rule][^/    either deep [^/        local: make block! length? b^/        rule: [^/            into [some rule]^/            | set value skip (append local value)^/        ]^/        parse b [some rule]^/        local^/    ] [^/        r: make block! length? b^/        head any [foreach v b [insert tail r v] r]^/    ]^/]^/```}
    sent: "2017-08-27T07:35:34.689Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a276248f4427b462a29391"
    text: {There is probably a smarter way to know how far to backtrack to check if the first changed element is a block. }
    sent: "2017-08-27T07:35:00.598Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a2753aba0f0f6e38e947df"
    text: {```text^/>> flatten [1 [2 [3 [4]]]]^/== [1 2 3 4]^/>> flatten [[[[1]]] [2 [3 [4]]]]^/== [1 2 3 4]^/>> flatten [[[[[1]] 5] 6] [2 [3 [[4]]]]]^/== [1 5 6 2 3 4]^/```}
    sent: "2017-08-27T07:31:06.198Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a27501ee5c9a4c5f0398e9"
    text: {This seems to work:^/```text^/flatten: func [^/    "Returns the block, with all sub-blocks replaced by their contents."^/    block [any-block!] "(modified)"^/    /local idx-before idx-after ^/][^/    forall block [^/        if block? first block [^/            until [^/                idx-before: index? block^/                change/part block first block 1^/                idx-after: index? block^/                not block? first skip block idx-before - idx-after^/            ]^/        ]^/    ]^/    block^/]^/```}
    sent: "2017-08-27T07:30:09.894Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a272f8c101bc4e3a5ecbeb"
    text: {but it still needs some work:^/```text^/>> flatten [[[[1] 5]] [2 [3]] [[4]]]^/== [[1] 5 2 3 4]^/```}
    sent: "2017-08-27T07:21:28.345Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a2723876a757f808e9bbbd"
    text: {```text^/>> flatten [[[[1]]] [2 [3]] [[4]]]^/== [1 2 3 4]^/```}
    sent: "2017-08-27T07:18:16.591Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a27214614889d4758f5503"
    text: {@toomasv @greggirwin I think that `flatten` needs a small change to handle deeply nested blocks:^/```text^/flatten: func [^/    "Returns the block, with all sub-blocks replaced by their contents."^/    block [any-block!] "(modified)"^/][^/    forall block [^/        if block? first block [^/            until [^/                not block? first back change/part block first block 1^/            ]^/        ]^/    ]^/    block^/]^/```}
    sent: "2017-08-27T07:17:40.592Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a25dc2c101bc4e3a5e87dc"
    text: {@greggirwin BTW, your `flatten` skips initial deeper nestings: ^/```^/>> flatten [[[2 2] 1] 0]^/== [[2 2] 1 0]^/```^/Because `change` continues after changed index, and if first element of last flattened block is block it doesn't look at it, I think.^/Yep:^/```^/>> flatten [0 [[2 2] 1]]^/== [0 [2 2] 1]^/```^/:stuck_out_tongue_winking_eye:^/}
    sent: "2017-08-27T05:50:58.152Z"
    editedAt: "2017-08-27T05:59:36.069Z"
    v: 6
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a25350614889d4758efd21"
    text: "@rebolek  @greggirwin Thanks a lot!"
    sent: "2017-08-27T05:06:24.724Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a219db76a757f808e8bc26"
    text: {@toomasv, I have an old non-parse flattener:^/```^/flatten: func [^/^-"Returns a block, with all sub-blocks replaced by their contents."^/^-block [any-block!] "(modified)"^/][^/^-forall block [^/^-^-if block? block/1 [change/part block block/1 1]^/^-]^/^-block^/]^/e.g. [^/^-flatten [1 [2 [3 [4] 5] 6] 7]^/^-flatten [1 [2 [3 [4] 5] 6] 7 [8]]^/^-flatten at [1 [2 [3 [4] 5] 6] 7] 2^/]^/```^/Never needed the level limit, but it's a nice touch.}
    sent: "2017-08-27T01:01:15.737Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a1dfee66c1c7c477e4aee2"
    text: {It is true that even with `/flat` refinement, `mold` does not flatten.}
    sent: "2017-08-26T20:54:06.229Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a1df69c101bc4e3a5cec19"
    text: {@meijeru Also^/```^/>> form [1 [2 [3]]]^/== "1 2 3"^/>> mold [1 [2 [3]]]^/== "[1 [2 [3]]]"^/```^/So `mold` is not helpful in this case.}
    sent: "2017-08-26T20:51:53.650Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1df15162adb6d2e390a4c"
    text: {OK what I meant was it conserves structural information. }
    sent: "2017-08-26T20:50:29.498Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a1dedf210ac26920c510ee"
    text: {@meijeru it does, it loses binding and position in block}
    sent: "2017-08-26T20:49:35.832Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1deb29acddb2407d0c61e"
    text: "`form` loses information, but `mold` does not"
    sent: "2017-08-26T20:48:50.117Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a1dea28f4427b462a0b3aa"
    text: {```^/>> b: [] p: b repeat i 1000 [repend/only p [i []] p: last p]^/== [1000 []]^/>> flatten: func [data][ret: copy [] i: 0 rule: [(i: i + 1) some [ahead block! into rule | set value skip (append ret value)]] parse data rule]^/== func [data][ret: copy [] i: 0 rule: [(i: i + 1) some [ahead block! into rule | set value skip (append ret value)]] parse data rule]^/>> flatten b^/*** Script Error: PARSE - stack limit reached^/*** Where: parse^/*** Stack: flatten  ^/^/>> last ret^/== 832^/```}
    sent: "2017-08-26T20:48:34.209Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1dd8cbc46472974c6356f"
    text: "832 levels"
    sent: "2017-08-26T20:43:56.569Z"
    editedAt: "2017-08-26T20:47:56.172Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1dd40bc46472974c63427"
    text: "@toomasv so it is limited by parse stack limit"
    sent: "2017-08-26T20:42:40.082Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1dca7210ac26920c50898"
    text: "@rebolek OK, thanks!  @9214 :beer:"
    sent: "2017-08-26T20:40:07.155Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a1dc29ba0f0f6e38e76192"
    text: {@9214 gurus beated up johnny-come-lately :feelsgood: }
    status: true
    sent: "2017-08-26T20:38:01.531Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a1dc218f4427b462a0a9ed"
    text: "@toomasv IMO it is good enough."
    sent: "2017-08-26T20:37:53.989Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1dbf2c101bc4e3a5ce09a"
    text: "@9214 `form` loses tons of information"
    sent: "2017-08-26T20:37:06.569Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1dbefc101bc4e3a5ce08f"
    text: "@9214 But flat only up to certain level!"
    sent: "2017-08-26T20:37:03.968Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a1dbc0614889d4758d7a45"
    text: {@toomasv sort of^/```^/>> to block! form [1 [2 3]]^/== [1 2 3]^/```}
    sent: "2017-08-26T20:36:16.633Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a1db7b66c1c7c477e49d44"
    text: {Might there be a better way or is it good enough for even large (and deep) blocs?}
    sent: "2017-08-26T20:35:07.220Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a1daff162adb6d2e38fb86"
    text: "yes"
    sent: "2017-08-26T20:33:03.891Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1daebc101bc4e3a5cdd8b"
    text: {@rebolek You mean `ahead block! into rule | keep skip`?}
    sent: "2017-08-26T20:32:43.536Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a1da6eba0f0f6e38e75b46"
    text: "yeah :D"
    sent: "2017-08-26T20:30:38.629Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1da5d614889d4758d75e8"
    text: "@rebolek even mighty shall fall :)"
    sent: "2017-08-26T20:30:21.352Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a1da3976a757f808e7d202"
    text: {@toomasv I have very similar `flatten`, but without `/level` refinement.}
    sent: "2017-08-26T20:29:45.269Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a1d92a76a757f808e7ce95"
    text: {Does anyone have a good function to flatten nested blocks up to certain level? Here is one I came up with:^/```^/flatten: func [tree [block!] /level lvl /local rule l][^/^-(l: -1)^/^-rule: [(l: l + 1) some [^/^-   ahead block! if (any [not level l < lvl]) into rule (l: l - 1) ^/^-|  keep skip^/^-]] ^/^-parse tree [collect rule]^/]^/>> flatten/level [0 [1 1] 0 [[2 2 [3 3]]]] 1^/== [0 1 1 0 [2 2 [3 3]]]^/>> flatten/level [0 [1 1] 0 [[2 2 [3 3]]]] 2^/== [0 1 1 0 2 2 [3 3]]^/>> flatten [0 [1 1] 0 [[2 2 [3 3]]]]^/== [0 1 1 0 2 2 3 3]^/``` }
    sent: "2017-08-26T20:25:14.610Z"
    editedAt: "2017-08-26T20:27:27.293Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a1ce1d162adb6d2e38c864"
    text: "OK, I have to think about that :smile: "
    sent: "2017-08-26T19:38:05.835Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a1cd8a76a757f808e79e74"
    text: {@Phryxe ^/```text^/>> b: []^/== []^/>> a: object [id: "i1"]^/== make object! [^/    id: "i1"^/]^/>> append b a^/== [make object! [^/    id: "i1"^/]]^/>> b/1/id^/== "i1"^/>> b/a/id^/*** Script Error: path b/a/id is not valid for none! type^/*** Where: catch^/*** Stack:  ^/^/>> append b compose [a: (a)]^/== [make object! [^/    id: "i1"^/] a: make object! [^/    id: "i1"^/]]^/>> b/a/id^/== "i1"^/```}
    sent: "2017-08-26T19:35:38.269Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a1cd5d210ac26920c4c99e"
    text: "@9214 OK, thanks. Didn't know that."
    sent: "2017-08-26T19:34:53.253Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a1cd17ba0f0f6e38e72406"
    text: {i.e. you can't access it with `b/a` path, since it isn't bounded to `a` word inside `b` block}
    sent: "2017-08-26T19:33:43.603Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a1ccef578b44a046ef688a"
    text: "@Phryxe `object!` inside `block!` is anonymous"
    sent: "2017-08-26T19:33:03.789Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a1cc90ee5c9a4c5f016477"
    text: {```^/>> b: []^/== []^/>> a: make object! [id: "i1"]^/== make object! [^/    id: "i1"^/]^/>> append b a^/== [make object! [^/    id: "i1"^/]]^/>> print b/1/id^/i1^/>> print b/a/id^/*** Script Error: path b/a/id is not valid for none! type^/*** Where: print^/*** Stack:  ^/```}
    sent: "2017-08-26T19:31:28.204Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a1c8d3614889d4758d2f05"
    text: {@rebolek and @PeterWAWood, thank you both! I tried path, but I made a mistake when adding the objects to the block.}
    sent: "2017-08-26T19:15:31.057Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a137789acddb2407ce6252"
    text: "@PeterWAWood speed is not everything :)"
    sent: "2017-08-26T08:55:20.591Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a135c3ba0f0f6e38e4e475"
    text: {I'm too slow to beat @Rebolek^/```text^/>> b: compose [(make object! [a: 1 b: 2]) (make object!  [a: 3 b: 4])]^/== [make object! [^/    a: 1^/    b: 2^/] make object! [^/    a: 3^/    b:...^/>> get in first b 'a^/== 1^/>> get in second b 'b^/== 4^/>> b/1/a^/== 1^/>> b/2/b^/== 4^/```}
    sent: "2017-08-26T08:48:03.345Z"
    editedAt: "2017-08-26T08:48:19.203Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a13579ba0f0f6e38e4e320"
    text: {@Phryxe ^/```^/^/>> block: []^/== []^/>> repeat i 1000 [append block make object! compose [index: (i)]]^/== [make object! [^/    index: 1^/] make object! [^/    index: 2^/] make object! [^/    index: 3^/] make object! [^/    index: 4^/] make object! [^/    index: 5^/] make ...^/>> o: block/345^/== make object! [^/    index: 345^/]^/>> o: block/345/index^/== 345^/```}
    sent: "2017-08-26T08:46:49.421Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a13345c101bc4e3a5a62d7"
    text: {Is there an example on how to access objects (and its values) in a block?}
    sent: "2017-08-26T08:37:25.338Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "59a0eb2f614889d4758a0ac4"
    text: "@greggirwin :relaxed:"
    sent: "2017-08-26T03:29:51.708Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a0e105ee5c9a4c5ffe0f03"
    text: "Nice - thank you!"
    sent: "2017-08-26T02:46:29.859Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a0d0c0614889d47589bbc1"
    text: {```text^/>> block: [ 1 [joe was here] 2 [mary is there] 3 [jim will be gone]]^/== [1 [joe was here] 2 [mary is there] 3 [jim will be gone]]^/>> head remove/part find block 2 2 ^/== [1 [joe was here] 3 [jim will be gone]]^/```}
    sent: "2017-08-26T01:37:04.123Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a0acb7614889d475893ac2"
    text: {```^/ block: [ 1 [joe was here] 2 [mary is there] 3 [jim will be gone]]^/ ```}
    sent: "2017-08-25T23:03:19.348Z"
    editedAt: "2017-08-25T23:03:42.713Z"
    v: 2
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59a0acb5ba0f0f6e38e323b0"
    text: {What is a good idiom for deleting a key & its related series from block?}
    sent: "2017-08-25T23:03:17.942Z"
    editedAt: "2017-08-25T23:04:24.257Z"
    v: 3
    author: "581b8296d73408ce4f336c72"
)#(
    id: "59a08e83ee5c9a4c5ffce231"
    text: "@toomasv, nice!"
    sent: "2017-08-25T20:54:27.465Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a05dff76a757f808e2250c"
    text: "Ups ! wrong paste....."
    sent: "2017-08-25T17:27:27.271Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59a05d419acddb2407cb3edb"
    text: {[parse-binary.red](https://files.gitter.im/red/help/5AU6/parse-binary.red)}
    sent: "2017-08-25T17:24:17.483Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "59a04507c101bc4e3a56e0d5"
    text: ":sweat_smile: Improved above code a bit."
    sent: "2017-08-25T15:40:55.642Z"
    editedAt: "2017-08-25T15:47:05.340Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a044ab614889d4758760df"
    text: "with @toomasv in shop I have no job to do :smile:"
    sent: "2017-08-25T15:39:23.983Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a04479ee5c9a4c5ffb8d3c"
    text: {```^/merge: func [blk spc][^/^-parse spc [any [set times integer! set num integer! 'after 'each set skp integer!]]^/^-blk: skip blk 1^/^-while [yes][^/^-^-blk: insert/dup blk num times^/^-^-if any [tail? blk skp > length? blk] [break]^/^-^-blk: skip blk skp^/^-]^/^-head blk^/]^/>> merge [1 1 1][2 0 after each 2]^/== [1 0 0 1 1 0 0]^/```}
    sent: "2017-08-25T15:38:33.702Z"
    editedAt: "2017-08-25T15:46:46.129Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a03d28bc46472974bff4c6"
    text: "worth a PhD if you'd ask me"
    sent: "2017-08-25T15:07:20.846Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a03d0fba0f0f6e38e125f3"
    text: "dialect-to-dialect compiler"
    sent: "2017-08-25T15:06:55.794Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a03cdba7b406262dc7974e"
    text: ":O"
    sent: "2017-08-25T15:06:03.947Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a03c87578b44a046e95fe7"
    text: {you can write something which compiles to `parse` :D}
    sent: "2017-08-25T15:04:39.294Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a03c7b210ac26920bee0ed"
    text: {```^/>> d: [1 1 1 1 1 1 1]^/== [1 1 1 1 1 1 1]^/>> parse d [ any [skip 2 [ p: (insert p 0) skip ] skip ] ]^/== false^/>> d^/== [1 0 0 1 1 0 0 1 1 0 0 1 1 0]^/```}
    sent: "2017-08-25T15:04:26.984Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a03a66bc46472974bfe483"
    text: {you can actually use `parse` to parse and insert stuff at the same time}
    sent: "2017-08-25T14:55:34.055Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a03a469acddb2407ca98a8"
    text: "where `skip` is a special keyword to skip value"
    sent: "2017-08-25T14:55:02.026Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a03a10614889d475872d02"
    text: {@9214 you can workaround to something similar to `parse`: `[2 0 2 skip]`}
    sent: "2017-08-25T14:54:08.993Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a03931ba0f0f6e38e11222"
    text: "not sure if it's possible"
    sent: "2017-08-25T14:50:25.172Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a0386ac101bc4e3a56a0e2"
    text: {btw, will lexer rules be smoothed out for words that starts with numbers?^/```^/>> 3-rd^/*** Syntax Error: invalid integer! at "3-rd"^/*** Where: do^/*** Stack: load ^/```}
    sent: "2017-08-25T14:47:06.100Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a037c5614889d4758723a2"
    text: "as a high-level wrapper for `collect/keep`"
    sent: "2017-08-25T14:44:21.968Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a03714bc46472974bfd46f"
    text: {would be interesting to create `merge` dialect with detailed spec, kinda `merge [1 1 1][2 0 after each 3-rd] --> [1 0 0 1 1 0 0]`}
    sent: "2017-08-25T14:41:24.452Z"
    editedAt: "2017-08-25T14:41:34.395Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a0368e76a757f808e15939"
    text: ":innocent:"
    sent: "2017-08-25T14:39:10.056Z"
    editedAt: "2017-08-25T14:42:08.922Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a0366d9acddb2407ca84c8"
    text: "@toomasv :+1: very nice"
    sent: "2017-08-25T14:38:37.092Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a035e1bc46472974bfcae3"
    text: {Or better:^/```^/combine: func [blocks][^/^-out: clear []^/^-num: 0^/^-forall blocks [num: max num length? first blocks]^/^-repeat i num [foreach b blocks [append out pick b i]]^/^-trim out^/]^/```^/}
    sent: "2017-08-25T14:36:17.583Z"
    editedAt: "2017-08-25T14:36:29.906Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a03346162adb6d2e3292ac"
    text: {```^/combine: func [blocks][^/^-out: clear []^/^-num: length? first blocks^/^-repeat i num [foreach b blocks [append out pick b i]]^/]^/trim combine [[1 1 1][0 0]]^/== [1 0 1 0 1]^/```^/```^/trim combine [[1 1 1][0 0][2 2 2]]^/== [1 0 2 1 0 2 1 2]^/```}
    sent: "2017-08-25T14:25:10.216Z"
    editedAt: "2017-08-25T14:27:51.623Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a02664ee5c9a4c5ffaef6e"
    text: {@9214 ^/```^/x: [0 0 0]^/y: [1 1]^/s: 1^/loop length? y [^/^-x: skip x s^/^-insert/part x y 1^/     s: 2 ]^/x: head x^/```^/}
    sent: "2017-08-25T13:30:12.491Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "599fe175614889d47585942a"
    text: {Yep. `split` without argument with default action as `parse "..." none` would be nice. With refinement `/with dlm` }
    sent: "2017-08-25T08:36:05.305Z"
    editedAt: "2017-08-25T08:42:28.559Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "599fd770bc46472974be0b8a"
    text: {Only thing I miss is getting the commas for free (despite the quirkiness): `>> parse "Foo, Bar" none == ["Foo" "Bar"]`}
    sent: "2017-08-25T07:53:20.838Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "599fd02f66c1c7c477dc5c91"
    text: "Indeed—old habits and all that..."
    sent: "2017-08-25T07:22:23.663Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "599fcb3cee5c9a4c5ff93323"
    text: {@rgchris Very nice! :+1:  Some of the examples in simplediff.red are obsolete however: `parse "..." none.` Should probably be `split "..." #" "`}
    sent: "2017-08-25T07:01:16.841Z"
    editedAt: "2017-08-25T07:02:11.754Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "599fb31f210ac26920bc61db"
    text: {OK  @greggirwin. I can do without that for now, I think. I'll keep it simple. I just wanted to know if I missed something obvious.}
    sent: "2017-08-25T05:18:23.776Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "599fb208162adb6d2e30578c"
    text: {Appropos nothing: a wee wrapper for my [SimpleDiff](https://github.com/rgchris/Scripts/blob/master/red/simplediff.red) function that calculates the similarity between two strings:^/^/```lisp^/do %simplediff.red^/similarity-of: func [^/^-before [string!]^/^-after [string!]^/][^/^-round 200% * (^/^-^-length? rejoin collect [^/^-^-^-foreach [disposition part] diff before after [^/^-^-^-^-if disposition = '= [keep part]^/^-^-^-]^/^-^-]^/^-) / (^/^-^-add length? before length? after^/^-)^/]^/^/probe similarity-of "Pencilvaneya" "Pennsylvania"^/```}
    sent: "2017-08-25T05:13:44.570Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "599f45eaba0f0f6e38dd206f"
    text: {Yup. Final design TBD. I haven't used `forskip` a *lot*, but it's been useful a number of times.}
    sent: "2017-08-24T21:32:26.294Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599f446eba0f0f6e38dd1a29"
    text: {Hm, no FORSKIP, but there is a FORALL. In Rebol 2, FORALL just wraps FORSKIP and in [other] it's a specialization thereof...}
    sent: "2017-08-24T21:26:06.782Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "599f437ea7b406262dc3850e"
    text: {In this case, if you want to keep a reference to the prototype, you could use a `make-with-proto` helper func.}
    sent: "2017-08-24T21:22:06.691Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599f4328162adb6d2e2ebbd7"
    text: {@Phryxe, there is no standard prototype chain at this time. People have built systems to do it in R2, so it's certainly possible.}
    sent: "2017-08-24T21:20:40.211Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599f0ceac101bc4e3a51a383"
    text: {@9214 Thanks, I'll keep an eye open for `class-of`.}
    sent: "2017-08-24T17:29:14.609Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "599f0c34162adb6d2e2dbf0c"
    text: {@Phryxe ^/```text^/>> parent: object []^/== make object! []^/>> clone1: copy parent^/== make object! []^/>> clone2: copy parent ^/== make object! []^/>> equal? class-of :parent class-of :clone1^/== true^/>> equal? class-of :parent class-of :clone2^/== true^/```^/though `class-of` is TBD and I'm not sure if it should be used like that}
    sent: "2017-08-24T17:26:12.068Z"
    editedAt: "2017-08-24T17:27:26.409Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599f09af210ac26920b9b4b0"
    text: {If I make a prototype object and clone that, will the clones have some link back to the prototype so I can track the clones from the prototype? Otherwise I guess I have to put my clones in a block to keep track of them.}
    sent: "2017-08-24T17:15:27.583Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "599f0268ee5c9a4c5ff5fb56"
    text: {```^/>> commize: func [x][rejoin next collect [foreach v x [keep reduce [comma v]]]]^/== func [x][rejoin next collect [foreach v x [keep reduce [comma v]]]]^/>> commize ["a a" "b" "c"]^/== "a a,b,c"^/```}
    sent: "2017-08-24T16:44:24.099Z"
    editedAt: "2017-08-24T16:48:07.949Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599f01f2614889d47581f1da"
    text: {@greggirwin yes, and that reminds me on the "inverted" `extract` function about which I asked recently^/```^/>> x: [0 1 0 1 0]^/== [0 1 0 1 0]^/>> extract x 2^/== [0 0 0]^/>> extract/index x 2 2^/== [1 1]^/>> ; now I want x back from [0 0 0] and [1 1]... how?^/```^/Basically what we want to do is to insert some element after all elements of block (except for the last one)^/}
    sent: "2017-08-24T16:42:26.278Z"
    editedAt: "2017-08-24T16:48:20.898Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599f0131614889d47581ec9b"
    text: {Note that the `replace` model may be what you want, or not, if you're strings have spaces in them.^/```^/>> replace/all form ["a a" "b" "c"] space comma^/== "a,a,b,c"^/```}
    sent: "2017-08-24T16:39:13.519Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599f00d576a757f808dc262f"
    text: ":^^)"
    sent: "2017-08-24T16:37:41.232Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599f00af614889d47581e9a1"
    text: "when a :boy: becomes a :neckbeard:"
    sent: "2017-08-24T16:37:03.882Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599f004e210ac26920b988f5"
    text: "Meaning your solution is much nicer than mine. "
    sent: "2017-08-24T16:35:26.619Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599eff23c101bc4e3a515b6c"
    text: {I shouldn't try to be helpful first thing in the morning. :^^)}
    sent: "2017-08-24T16:30:27.175Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599efef8210ac26920b982ac"
    text: "That works too! :^^)"
    sent: "2017-08-24T16:29:44.456Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599ef6f49acddb2407c52458"
    text: "thanks"
    sent: "2017-08-24T15:55:32.716Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599ef53cbc46472974ba5b56"
    text: {@powerconnector ^/```^/>> replace/all form ["a" "b" "c"] space comma^/== "a,b,c"^/```}
    sent: "2017-08-24T15:48:12.196Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599eecd9a7b406262dc1dcc9"
    text: {I have a more elaborate `delimit` func for R2, but it uses `forskip` which we don't have in Red yet. In the meantime:^/```^/make-dlm-str: func [blk ch [char!] /local str][^/    str: copy ""^/    foreach val blk [append str val append str ch]^/    take/last str^/    str^/]^/make-dlm-str ["a" "b" "c"] #","^/```}
    sent: "2017-08-24T15:12:25.631Z"
    editedAt: "2017-08-24T15:12:51.596Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599ee86776a757f808dbafe9"
    text: {is there a way to  `rejoin` a  Series of Strings  with commas  in between the strings? so something on the lines of:^/```^/>> foo ["a" "b" "c"]^/== "a,b,c"^/```}
    sent: "2017-08-24T14:53:27.622Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599ea79fc101bc4e3a4fa3d7"
    text: "@pkphilip have you seen the red/gui-branch?"
    sent: "2017-08-24T10:17:03.455Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "599ea72a9acddb2407c39d44"
    text: {`view has no value` makes me think there is a `Needs: 'View` missing in the header.^/}
    sent: "2017-08-24T10:15:06.561Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
)#(
    id: "599e99dbbc46472974b8a0b8"
    text: {@pkphilip yup, just stick with Wine if that's ok for you. Though I'm not sure why it doesn't work for you at all, since GTK backend has at least [this](https://trello.com/c/aoO1zUGr/156-gtk3-gui-backend) parts.}
    sent: "2017-08-24T09:18:19.506Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599e9950210ac26920b78e06"
    text: {Some of guys use Red GUI via Wine, that might be worth a try too ....}
    sent: "2017-08-24T09:16:00.172Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599e9878c101bc4e3a4f577d"
    text: "Ah ok! thanks a lot. "
    sent: "2017-08-24T09:12:24.235Z"
    v: 1
    author: "599e9771d73408ce4f72c1ab"
) #(
    id: "599e986b76a757f808da1ba7"
    text: {@pkphilip GTK backend is not finished, though recently @rcqls done a great job on that}
    sent: "2017-08-24T09:12:11.023Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599e97fe66c1c7c477d707eb"
    text: {Really sorry to butt in guys, but does anyone know how to make red gui work on linux mint. I am getting a cryptic -error message for the simplest gui hello world code that I am trying to run on Linux Mint 18.2 - *** Script Error: view has no value *** Where: ???^/}
    sent: "2017-08-24T09:10:22.566Z"
    v: 1
    author: "599e9771d73408ce4f72c1ab"
) #(
    id: "599dc5b8210ac26920b437ab"
    text: {In `interleave4`, note that `func` doesn't capture local words `[r diff share a1 b1]`. Use `function` to capture them automatically, or `/local` with `func`.}
    sent: "2017-08-23T18:13:12.522Z"
    editedAt: "2017-08-23T18:13:27.446Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599dc401162adb6d2e28207b"
    text: {Other than 'not being interpreted' I suppose. :smile: }
    sent: "2017-08-23T18:05:53.880Z"
    v: 1
    author: "5999b530d73408ce4f723366"
) #(
    id: "599dc292ba0f0f6e38d67723"
    text: {Btw [devs says](https://youtu.be/-KqNO_sDqm4?t=32m29s) there is no compiler optimizations under the hood right now.}
    sent: "2017-08-23T17:59:46.705Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "599dc2202723db8d5ed5bf07"
    text: {There is no need to reallocate memory, which is the main optimisation. }
    sent: "2017-08-23T17:57:52.447Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "599dc0c39acddb2407bfdaa9"
    text: {compiling makes interleave3 and the original pre-allocate the fastest, so the pre-allocation/right-sizing must have allowed some optimization to happen under the hoood}
    sent: "2017-08-23T17:52:03.156Z"
    v: 1
    author: "5999b530d73408ce4f723366"
) #(
    id: "599dbf24ee5c9a4c5ff06e30"
    text: {@honix Thanks! ^/Conclusion: allocation isn't the overhead, the inner if's are, they double the speeed^/```^/interleave3: func[b1 b2][ ; slow^/    out: make b1 (add length? b1 length? b2)^/    repeat i max length? b1 length? b2 [if b1/:i [append out b1/:i] if b2/:i [append out b2/:i]]^/    out^/]^/interleave4: func[a b][ ; faster, nearly as fast as pre-allocation for vector! slightly faster for block! for some reason^/    either (al: length? a) > (bl: length? b) [^/        r: a diff: al - bl share: bl^/    ][^/        r: b diff: bl - al share: al^/    ]^/    collect [^/        repeat i share [ keep a/:i keep b/:i ]^/        repeat j diff  [ keep r/(i + j)]^/    ]^/]^/```^/This is the interpreter, I haven't compiled it yet}
    sent: "2017-08-23T17:45:08.757Z"
    v: 1
    author: "5999b530d73408ce4f723366"
) #(
    id: "599db58aba0f0f6e38d63b51"
    text: "Nice @honix. "
    sent: "2017-08-23T17:04:10.250Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599db35e162adb6d2e27d312"
    text: {```^/>> extract [0 1 0 1 0] 2^/== [0 0 0]^/>> extract/index [0 1 0 1 0] 2 2^/== [1 1]^/```^/but not the other way around}
    sent: "2017-08-23T16:54:54.770Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599db2ee210ac26920b3e212"
    text: {I love `extract` then it comes to table-like structures, but I'm not sure if it's applicable in this case}
    sent: "2017-08-23T16:53:02.950Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599db295c101bc4e3a4b9dab"
    text: {You can probably leverage `extract` for an interleaving function}
    sent: "2017-08-23T16:51:33.739Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599db134210ac26920b3da14"
    text: {@419928194516 i made little [time testing tool](https://gist.github.com/honix/261bfad3b1524a97440277e743186921). you can compare speed of code^/```^/>> fastest [sin PI] [10 + 20]^/== [10 + 20]^/```}
    sent: "2017-08-23T16:45:40.159Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "599da0d9614889d4757bddd5"
    text: {What's the perf hit if you don't bother to pre-allocate? ^/```red^/interleave: func[a b][^/    out: make block! add (al: length? a) (bl: length? b) ; <-- like here, vs. collect^/    either al > bl [^/        r: a diff: al - bl share: bl^/    ][^/        r: b diff: bl - al share: al^/    ]^/    repeat i share [ repend out [a/:i b/:i] ]^/    repeat j diff  [ append out r/(i + j)]^/    out^/]^/zip: func[a b][^/    out: make block! (2 * m: min length? a length? b)^/    repeat i m [ repend out [a/:i b/:i] ]^/    out^/]^/```^/^/}
    sent: "2017-08-23T15:35:53.031Z"
    v: 1
    author: "5999b530d73408ce4f723366"
) #(
    id: "599d4582162adb6d2e25d582"
    text: ""
    sent: "2017-08-23T09:06:10.342Z"
    editedAt: "2017-08-23T09:08:51.878Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599d40b176a757f808d433be"
    text: "I don't think so."
    sent: "2017-08-23T08:45:37.888Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599d4085bc46472974b2b877"
    text: {just wondered if there's build-in function to do these kind of things}
    sent: "2017-08-23T08:44:53.711Z"
    editedAt: "2017-08-23T08:45:03.020Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599d40722723db8d5ed33ee0"
    text: {It doesn't make sure that first block is longer though, they should probably be swapped when necessary}
    sent: "2017-08-23T08:44:34.844Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599d4070578b44a046dc213d"
    text: "well, I used `collect` too, doesn't look elegant"
    sent: "2017-08-23T08:44:32.838Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599d404ac101bc4e3a496b9a"
    text: {for example^/```^/== 840^/>> b1: [0 0 0]^/== [0 0 0]^/>> b2: [1 1]^/== [1 1]^/>> collect [repeat i max length? b1 length? b2 [if b1/:i [keep b1/:i] if b2/:i [keep b2/:i]]]^/== [0 1 0 1 0]^/```}
    sent: "2017-08-23T08:43:54.735Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599d3f12614889d4757a0635"
    text: {what's the most idiomatic (and clever!) way to make, say, `[0 1 0 1 0]` from `[0 0 0]` and `[1 1]` blocks?}
    sent: "2017-08-23T08:38:42.963Z"
    editedAt: "2017-08-23T08:41:22.745Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599cd32a162adb6d2e240c2e"
    text: {https://github.com/red/red/blob/master/environment/lexer.red#L664-L668^/```red^/url-rule: [^/^-^-^-#":" not [not-url-char | ws-no-count | end]^/^-^-^-any [#"@" | #":" | ahead [not-file-char | ws-no-count] break | skip] e:^/^-^-^-(type: url! store stack do make-file)^/]^/```^/https://github.com/red/red/blob/master/environment/lexer.red#L476^/```red^/cs/23: charset {[](){}";}^-^-^-^-^-;-- not-url-char^/```^/https://github.com/red/red/blob/master/environment/lexer.red#L413^/```red^/cs:        [- - - - - - - - - - - - - - - - - - - - - - - - - - - -] ;-- memoized bitsets^/```}
    sent: "2017-08-23T00:58:18.619Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599ccf32a7b406262db8963d"
    text: {@powerconnector `make` is the function that actually creates objects everywhere, and like Gregg said, it's normal Red code.^/Only difference is, it creates a `context` different from the *system context* to store all the words that are defined in that *block* .^/`object` and `context` are synonymous}
    sent: "2017-08-23T00:41:22.342Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599cccaa76a757f808d278f1"
    text: {Copied for ref: https://en.wikipedia.org/wiki/URL#Syntax}
    sent: "2017-08-23T00:30:34.810Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599cb0e3a7b406262db82620"
    text: {ohh, I see^/```^/cs:^-^-[- - - - - - - - - - - - - - - - - - - - - - - - - - - -] ;-- memoized bitsets^/```}
    sent: "2017-08-22T22:32:03.372Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599caf55bc46472974b0855f"
    text: {```^/cs/8:  charset {[](){}"@:;}^-^-^-^-^-;-- not-file-char^/cs/23: charset {[](){}";}^-^-^-^-^-;-- not-url-char^/;-- couldn't the above be?...^/cs/8: union s/23 charset "@:"  ^-^-^-^-;-- not-url-char + not-file-char^/```}
    sent: "2017-08-22T22:25:25.084Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599cac0fee5c9a4c5febcca6"
    text: {Make a rule for:^/```^/scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]^/```}
    sent: "2017-08-22T22:11:27.373Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599c9ccb578b44a046d99e74"
    text: "Go @9214!"
    sent: "2017-08-22T21:06:19.872Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c9264a7b406262db79d4a"
    text: {@greggirwin just bold and italics, not whole Markdown :) OTOH, when you get this right, rest of Markdown is easy :)}
    sent: "2017-08-22T20:21:56.140Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599c8d979acddb2407babda8"
    text: {dang, it actually works! :muscle: I just generated rules from the spec and forgot to fix it :sweat_smile: }
    sent: "2017-08-22T20:01:27.400Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c8c1dbc46472974afe61d"
    text: "@greggirwin ok that makes sense, thanks!  "
    sent: "2017-08-22T19:55:09.637Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599c8c0c614889d475775835"
    text: {I'm desperately trying to find an array of 4 uint8/16/32 values in a file:^/```text^/zero: [0 3 #{00}]^/byte: [1 [#{12} | #{22} | #{0B} | #{1E}]]^/uint: [zero byte]^/code: [4 uint]^/rule: [some [copy result code | skip]]^/```^/doesn't seems to work, any tips?}
    sent: "2017-08-22T19:54:52.809Z"
    editedAt: "2017-08-22T19:55:49.883Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c8a1f210ac26920aef728"
    text: {No. There's nothing special about evaluation in an object spec. i.e. you could just `do` it.}
    sent: "2017-08-22T19:46:39.885Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c89dc76a757f808d16094"
    text: {is `object` a dialect? as in ^/```^/example: make object! [^/    var1: 10^/    var2: 20^/]^/```}
    sent: "2017-08-22T19:45:32.418Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599c8823210ac26920aeee89"
    text: {`Do` is not a dialect, correct. It's the other one: Function specs.}
    sent: "2017-08-22T19:38:11.941Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c87ff9acddb2407baa40c"
    text: {I guess either `do` or functions specs, but I think Carl didn't considered `do` to be a dialect.}
    sent: "2017-08-22T19:37:35.668Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c87e39acddb2407baa3ca"
    text: {It's the most used dialect in Red, but so invisible that we don't even think about it.}
    sent: "2017-08-22T19:37:07.852Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c87bcee5c9a4c5feb29b0"
    text: ":confused:"
    sent: "2017-08-22T19:36:28.330Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c875c162adb6d2e22dc54"
    text: "`Charset` is a little one."
    sent: "2017-08-22T19:34:52.599Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c87502723db8d5ed06c50"
    text: {wikibook definition "dialect is any loadable string" is conceptually pleasant, but way too abstract}
    sent: "2017-08-22T19:34:40.986Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c873e9acddb2407baa1b0"
    text: {There's a big one, that people never think about. At the first Rebol devcon, I asked the same question. Only Carl knew which one I was talking about. Of course, Red/System is a major one in Red.^/^/Can you guess the big one?}
    sent: "2017-08-22T19:34:22.884Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c86ee76a757f808d15397"
    text: {while we speaking about `parse` - what parts of the Red (and Rebol) are considered dialects (apart from obvious `math`, `view`, `draw` and `parse` itself)?}
    sent: "2017-08-22T19:33:02.946Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c86a9ee5c9a4c5feb257d"
    text: {`Parse` can be a devious master/mistress. When I see guru parse designs, I sometimes have to tease them apart bit by bit to understand them.}
    sent: "2017-08-22T19:31:53.403Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c8641578b44a046d931ff"
    text: {You probably already know that `to` and `thru` are powerful, but may be too greedy because of how they work. If you start with `[a | b | c | skip]` as a basic plan, moving more specific rules up the chain, that's not a bad way to start. }
    sent: "2017-08-22T19:30:09.349Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c861b76a757f808d14ffa"
    text: {@greggirwin yeah, kinda, although I forgot to insert `some [ ... | skip]` in a top rule :smile: }
    sent: "2017-08-22T19:29:31.566Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c85d2ee5c9a4c5feb2146"
    text: {You mean, something like^/```^/>> b: #{00112233445566778899}^/== #{00112233445566778899}^/>> parse b [some [#{44} (print 'found!) | skip]]^/found!^/== true^/```}
    sent: "2017-08-22T19:28:18.976Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c8553ee5c9a4c5feb1f5a"
    text: {well, I'm currently trying to find a byte pattern inside a small-sized file, it's already challenging :sweat_smile: }
    sent: "2017-08-22T19:26:11.203Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "599c84cdba0f0f6e38d0fa8f"
    text: {Sectioned, INI-type files is also good, and useful.}
    sent: "2017-08-22T19:23:57.866Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c84bbee5c9a4c5feb1cdd"
    text: {A parser for Red function specs would also be good, unless you want more general parsing issues. }
    sent: "2017-08-22T19:23:39.785Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c8471578b44a046d92a05"
    text: "Handling nested structures is a good challenge."
    sent: "2017-08-22T19:22:25.262Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c8443ba0f0f6e38d0f7e3"
    text: {Oh, just those patterns you mean, not all of markdown. Still...}
    sent: "2017-08-22T19:21:39.070Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c8428ee5c9a4c5feb1a2b"
    text: "That's just cruel @rebolek. :^^)"
    sent: "2017-08-22T19:21:12.787Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c7b4c162adb6d2e22a60d"
    text: {I actually thought about some turing tarpit interpreter, but that's a good one too! And maybe a tiny data scraper. Thanks @rebolek.}
    sent: "2017-08-22T18:43:24.832Z"
    editedAt: "2017-08-22T18:43:34.099Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c7b0eba0f0f6e38d0cb81"
    text: "Write a robust parser for Markdown's `*` and `**`"
    sent: "2017-08-22T18:42:22.735Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599c7a81c101bc4e3a463edf"
    text: "for starters! :)"
    sent: "2017-08-22T18:40:01.827Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c7a7bee5c9a4c5feae904"
    text: {rather dumb question, but can anyone point me to good parsing-related problems and programming challenges?}
    sent: "2017-08-22T18:39:55.211Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599c62be162adb6d2e22312b"
    text: {- http://www.mail-archive.com/rebol-list@rebol.com/msg20198.html ^/- https://www.mail-archive.com/rebol-list@rebol.com/msg20237.html^/^/Won't apply the exactly same to Red of course. ^/^/Should we have a `randomize` in Red? Should be pretty easy to port, though we'll want some good tests.^/```^/    randomize: func [^/        "Reseed the random number generator."^/        /with seed "date, time, and integer values are used directly; others are converted."^/    ][^/        random/seed either find [date! time! integer!] type?/word seed [seed] [^/            to-integer checksum/secure form any [seed now/precise]^/        ]^/    ]^/```}
    sent: "2017-08-22T16:58:38.340Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599c4fdcee5c9a4c5fea1e2d"
    text: {in macOS, `random/seed now` just fails when `random/seed now/time` works fine.}
    sent: "2017-08-22T15:38:04.478Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "599c376fba0f0f6e38cf80a1"
    text: {Before the first call to`/seed` the result is different from 5. This makes me think that seeding takes the "wrong" part of the `date!` value. This is confirmed by seeding with `now/time`.}
    sent: "2017-08-22T13:53:51.414Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599c30f19acddb2407b8fa70"
    text: {is this intentional?^/```^/>> random/seed now^/>> random 10^/== 5^/>> random/seed now^/>> random 10^/== 5^/>> random/seed now^/>> random 10^/== 5^/```^/in rebol this yields different numbers each time^/}
    sent: "2017-08-22T13:26:09.215Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599bf839c101bc4e3a43c12e"
    text: {https://en.wikibooks.org/wiki/Rebol_programming it's fine :smile: }
    sent: "2017-08-22T09:24:09.013Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599bf826bc46472974ad03b0"
    text: "damn slash at the end"
    sent: "2017-08-22T09:23:50.123Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599bf81b210ac26920ac411f"
    text: "oh wait"
    sent: "2017-08-22T09:23:39.537Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599bf7f2578b44a046d66874"
    text: {guys, [Rebol wikibook](https://en.wikibooks.org/wiki/REBOL_Programming/) seems to dissappeared :O}
    sent: "2017-08-22T09:22:58.334Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599bf79b9acddb2407b7f089"
    text: {@maximvl yeah, I just remembered that in Rebol you should specify lower bound, upper bound and only then number itself, kinda like that: (only without `quote`)^/```text^/>> parse [1][1 1 quote 1]^/== true^/```}
    sent: "2017-08-22T09:21:31.432Z"
    editedAt: "2017-08-22T09:22:01.492Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599bf74976a757f808ce97e4"
    text: {```^/>> parse [1 1] [2 quote 1]^/== true^/```}
    sent: "2017-08-22T09:20:09.405Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599bf731210ac26920ac3c0a"
    text: {numbers are reserved to specify number of matches on a rule}
    sent: "2017-08-22T09:19:45.810Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599bf72dc101bc4e3a43bda3"
    text: "@maximvl :+1:"
    sent: "2017-08-22T09:19:41.906Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599bf71ca7b406262db4b04d"
    text: ">parse [1] [quote 1]"
    sent: "2017-08-22T09:19:24.736Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599bf6f82723db8d5ecdb993"
    text: {can someone remind me how to properly `parse` `integer!`s?^/```text^/>> parse [1][1]^/*** Script Error: PARSE - invalid rule or usage of rule: 1^/*** Where: parse^/*** Stack: ^/```^/```text^/>> parse [1][1 1 1]^/*** Script Error: PARSE - invalid rule or usage of rule: 1^/*** Where: parse^/*** Stack:  ^/```}
    sent: "2017-08-22T09:18:48.778Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599bd106614889d47573d604"
    text: "No problem :)"
    sent: "2017-08-22T06:36:54.954Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599bd0ec210ac26920ab9871"
    text: {@rebolek Yep, I misread. Working late at night sometimes does that to you.}
    sent: "2017-08-22T06:36:28.657Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "599bd07e2723db8d5ecd09c1"
    text: {@iceflow19 I believe Nenad was talking about dialects, not the language itself.}
    sent: "2017-08-22T06:34:38.450Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599bd015614889d47573d1c2"
    text: {I will also admit in advance I'm not well read in the area of the lambda calculus.}
    sent: "2017-08-22T06:32:53.828Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "599bcf56c101bc4e3a430b4c"
    text: {@dockimbel  In reference to your turing complete comment, what specifically makes Redbol not turing complete? I'm mostly dealing with TCness at a much lower hardware level but I'm curious about the reasoning in regards to it at higher abstractions like Redbol?}
    sent: "2017-08-22T06:29:42.206Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "599b759ba7b406262db2ca98"
    text: {```^/>> type? 1:1^/== time!^/>> type? a:a^/== url!^/```}
    sent: "2017-08-22T00:06:51.514Z"
    editedAt: "2017-08-22T00:07:18.757Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599b758f210ac26920aa51b9"
    text: {Seems like the matching/scanning/parsing needs sprucing up}
    sent: "2017-08-22T00:06:39.219Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599b752dc101bc4e3a41d094"
    text: {```^/>> url? _:_^/== true^/>> url? 1:1^/== false^/```}
    sent: "2017-08-22T00:05:01.444Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599b74d49acddb2407b6038d"
    text: {```^/>> url? cat:meow^/== true^/```}
    sent: "2017-08-22T00:03:32.877Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599b3409bc46472974aa0166"
    text: {Red makes it easy to do things without lambdas, but we know people expect the standard HOF model too, so there will likely be a combination of things done like `foreach/remove-each` and functional HOFs.}
    sent: "2017-08-21T19:27:05.852Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599b339d210ac26920a9425a"
    text: {One of the reasons we don't have all the HOFs in place yet is because there are so many ways to do things, and the design options to consider. Nenad has a plan for this, but I imagine there will be more discussion before things are made official. ^/```^/keep-each: func [^/^-"Keeps only values from a series where body block returns TRUE."^/^-'word [get-word! word! block!] "Word or block of words to set each time (will be local)"^/^-data  [series!]^/^-body  [block!] "Block to evaluate; return TRUE to collect"^/][^/^-remove-each :word data compose [not do (body)]^/^-data^/]^/e.g. [^/^-filter: :keep-each^/^-filter x [1 2 3] [x = 2]^/^-filter x [1 2 3] [odd? x]^/^-filter res [1 2 3] [odd? res]^/^-filter [x y] [a 1 b 2 c 3] [all [odd? y  'c = x]]^/^-filter x [(1 2) (2 3) (3 4)] [x = first [(2 3)]]^/]^/```}
    sent: "2017-08-21T19:25:17.193Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599ae825614889d4757028b1"
    text: {@powerconnector it targets console applications in Windows.}
    sent: "2017-08-21T14:03:17.198Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599add5ac101bc4e3a3f201c"
    text: {I hope this is not a stupid question but: There is a MSDOS compiler target. Does this actually target old school DOS?}
    sent: "2017-08-21T13:17:14.410Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599ac531ee5c9a4c5fe33fc2"
    text: {@pekr non-binding variant:^/```^/>> filter-each: function ['word data body][^/    insert copy body reduce [to set-word! word none] ^/    collect [^/        until [^/            change next body first data ^/            if do body [keep first data] ^/            data: next data ^/            tail? data^/        ]^/    ]^/]                   ^/```^/is actually slower:^/```^/>> dt [loop 1000000 [filter [1 2 3 4 5][value > 3]]]^/== 0:00:11.30457^/>> dt [loop 1000000 [filter-each value [1 2 3 4 5][value > 3]]]^/== 0:00:14.77291^/```}
    sent: "2017-08-21T11:34:09.440Z"
    editedAt: "2017-08-21T11:35:19.637Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599ac12376a757f808c984b9"
    text: {Thanks for your answers! I didn't know about collect and keep. These are pretty cool.}
    sent: "2017-08-21T11:16:51.230Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599ac060162adb6d2e1aef03"
    text: {You could implement `remove-each`that way too :-) Wonder, how expensive it is using binding ...}
    sent: "2017-08-21T11:13:36.400Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599abfcaee5c9a4c5fe329e7"
    text: "Hardly :)"
    sent: "2017-08-21T11:11:06.977Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599abf91162adb6d2e1aea90"
    text: "@rebolek beats everyone :)"
    sent: "2017-08-21T11:10:09.312Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599abf7ca7b406262daf934f"
    text: {Or^/```^/>> filter: func [data body][collect [foreach value data [if do bind body 'value [keep value]]]]^/>> filter [1 2 3 4 5][value > 3]                                                               ^/== [4 5]^/```}
    sent: "2017-08-21T11:09:48.494Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599abe9eba0f0f6e38c90a64"
    text: {for list comprehensions: use `collect`/`keep` combo, as for filtering, here's a draft:^/```^/filter: func [series will-do?][^/    collect [^/        foreach thing series [^/            if will-do? thing [keep thing]  ^/        ]^/    ]^/]^/```}
    sent: "2017-08-21T11:06:06.302Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599abdc09acddb2407b2ccf8"
    text: {actually^/```text^/map: func [^/    "apply function to elements of the series"^/    series [series!]^/    spec   [block!]^/    body   [block!]^/][^/    collect [^/        foreach :spec series [^/            keep do reduce compose [func spec body (:spec)]^/        ]^/    ]^/]^/```^/```text^/>> map [1 2 3][x][x + 1]^/== [2 3 4]^/>> map [1 2 3 4 5 6 7 8 9][x y z][x + y * z]^/== [9 54 135]^/```}
    sent: "2017-08-21T11:02:24.535Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ab51676a757f808c94bc9"
    text: {@powerconnector functional stuff like high order functions is in Red's roadmap}
    sent: "2017-08-21T10:25:26.196Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "599ab4a7162adb6d2e1ab3aa"
    text: {@powerconnector There is no 'map function in Red, but @9214 done one [here](https://gitter.im/red/red?at=59941673bc464729748b32dc)}
    sent: "2017-08-21T10:23:35.986Z"
    editedAt: "2017-08-21T10:29:13.772Z"
    v: 3
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "599ab0139acddb2407b29247"
    text: "or map and filter functions? "
    sent: "2017-08-21T10:04:03.077Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599aafd32723db8d5ec84ef8"
    text: "Does red have list comprehensions"
    sent: "2017-08-21T10:02:59.583Z"
    v: 1
    author: "599916f8d73408ce4f72274b"
) #(
    id: "599a9a81ba0f0f6e38c8608a"
    text: {But  refinements are equated to (set-)words so `/a` and `a` are the same key, as far as I understand.}
    sent: "2017-08-21T08:32:01.736Z"
    editedAt: "2017-08-21T08:32:14.754Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599a99c1614889d4756eaa5d"
    text: {@rgchris According to [this doc](https://doc.red-lang.org/en/map.html) it is possible.}
    sent: "2017-08-21T08:28:49.196Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
)#(
    id: "599a7736162adb6d2e19a1ee"
    text: {@rgchris, that's a good Nenad question, but they're in some deep code right now, so keep it in mind. The same question will apply to issues.}
    sent: "2017-08-21T06:01:26.509Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599a23d99acddb2407b072ca"
    text: {Will it be possible to use refinements as map keys, or is that not likely?}
    sent: "2017-08-21T00:05:45.756Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "599889dfa7b406262da7446e"
    text: {```^/>> blank: [(ws: charset " ^^-^^/") any ws]^/== [(ws: charset " ^^-^^/") any ws]^/>> func-rule: ["func" blank #"(" thru #")"]^/== ["func" blank #"(" thru #")"]^/>> parse "func(blabla)" func-rule^/== true^/>> parse "func       (bleble)" func-rule^/== true^/```}
    sent: "2017-08-19T18:56:31.334Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599889aca7b406262da743e0"
    text: {If rule doesn't match, either backtrack or advance the input, but if rule matches, advance the input and evaluate `paren!` if needed?}
    sent: "2017-08-19T18:55:40.849Z"
    editedAt: "2017-08-19T18:56:46.018Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5998896dee5c9a4c5fdab98c"
    text: {(Care if it matches but advance even if it doesn't?)}
    sent: "2017-08-19T18:54:37.726Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5998894f80d90ca02417d36c"
    text: "For what Scenario? String comparison ?"
    sent: "2017-08-19T18:54:07.982Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599888e9c101bc4e3a362e45"
    text: {@9214 It's alias for `advance the input anyway, but care if it matches` :)^/```^/>> x?: no parse "xxxaadds" [any ["x" (x?: yes)] to end] x?^/== true^/```^/}
    sent: "2017-08-19T18:52:25.108Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599887aec101bc4e3a36297b"
    text: {@rebolek so this is kind of an alias for `don't care but advance the input anyway` ? :)}
    sent: "2017-08-19T18:47:10.649Z"
    editedAt: "2017-08-19T18:47:26.041Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59988776210ac269209ea060"
    text: {@maximvl *Everything* passes `any` condition:^/```^/>> parse "bflmpsvz" [any "xxxxxxxxxxx" to end]^/== true^/```}
    sent: "2017-08-19T18:46:14.147Z"
    editedAt: "2017-08-19T18:46:37.090Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59988532ee5c9a4c5fdaaa98"
    text: {@maximvl ^/```text^/== [p: some [['&& | '||] word!] (probe p) | word! p: (probe p) opt rule]^/>> parse [a && b || c && d && e] rule^/[&& b || c && d && e]^/[&& b || c && d && e]^/== true^/```}
    sent: "2017-08-19T18:36:34.243Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5998844a614889d47566b771"
    text: "what am I missing here?"
    sent: "2017-08-19T18:32:42.404Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599884369acddb2407aa5fd6"
    text: {but then  `a` would be consumed by `word!` and `probe p` should print `[&& b || c && d && e]`}
    sent: "2017-08-19T18:32:22.251Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59988406210ac269209e9372"
    text: {the `a && b` shouldn't pass `any` condition (`'&& | '||`) and parsing should go to the second part}
    sent: "2017-08-19T18:31:34.751Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599883ceee5c9a4c5fdaa48b"
    text: {I don't understand why this rule doesn't work:^/```^/>> rule: [p: any [['&& | '||] word!] (probe p) | word! p: (probe p) opt rule]^/== [p: any [['&& | '||] word!] (probe p) | word! p: (probe p) opt rule]^/>> parse [a && b || c && d && e] rule^/[a && b || c && d && e]^/== false^/```}
    sent: "2017-08-19T18:30:38.308Z"
    editedAt: "2017-08-19T18:33:13.824Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59986f89210ac269209e47d7"
    text: {How can I access fields in a Red header (e.g. Title or Date)? `system/script/header` returns `none`.}
    sent: "2017-08-19T17:04:09.215Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ecc376a757f808ba5836"
    text: {Unfortunately, it seems target cannot itself be a `deep-reactor!` refering to its own fields:^/```^/client: make deep-reactor! [ids: [2 3] recs: is [r: clear [] forall ids [append/only r find/skip men/recs ids/1 2] r]]^/*** Script Error: set-quiet does not allow set-word! for its word argument^/*** Where: set-quiet^/*** Stack:^/``` }
    sent: "2017-08-18T13:33:55.636Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5996eb67a7b406262da0d32e"
    text: {@dockimbel Did you mean something like this:^/```^/>> men: make deep-reactor! [recs: copy [1 "Rudolf" 2 "Heinrich" 3 "Joshua"]]^/== make object! [^/    recs: [1 "Rudolf" 2 "Heinrich" 3 "Joshua"]^/]^/>> client: object [ids: [2 3] recs: is [r: clear [] forall ids [append/only r find/skip men/recs ids/1 2] r]]^/== make object! [^/    ids: [2 3]^/    recs: [[2 "Heinrich" 3 "Joshua"] [3 "Joshua"]]^/]^/>> remove/part men/recs 2^/== [2 "Heinrich" 3 "Joshua"]^/>> men/recs^/== [2 "Heinrich" 3 "Joshua"]^/>> client/recs^/== [[2 "Heinrich" 3 "Joshua"] [3 "Joshua"]]^/>> remove/part men/recs 2^/== [3 "Joshua"]^/>> client/recs^/== [none [3 "Joshua"]]^/>> insert men/recs [2 "Adolpho"]^/== [3 "Joshua"]^/>> client/recs^/== [[2 "Adolpho" 3 "Joshua"] [3 "Joshua"]]^/```}
    sent: "2017-08-18T13:28:07.582Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5996d4d99acddb2407a36b7e"
    text: {@dockimbel I have thought of using reactors for tables having `hash!` field for records, but not for such tracking. Thanks for the hint. I'll try it.}
    sent: "2017-08-18T11:51:53.191Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5996d06e578b44a046c168f3"
    text: {@toomasv Have you considered using reactive objects to wrap series for which you want to track positions accurately?}
    sent: "2017-08-18T11:33:02.263Z"
    editedAt: "2017-08-18T11:33:10.533Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996c2cebc4647297497e560"
    text: {@dockimbel That would be great! I am developing a toy db query DSL, and it seems db applications would greately benefit from such `list!`}
    sent: "2017-08-18T10:34:54.285Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5996c229c101bc4e3a2ee908"
    text: {@toomasv No way I can think of with the current series types. Though, there is a `list!` type in Rebol2, that I would like to bring to Red (implemented as a linked list), which has fixed references (Rebol2):^/```lisp^/>> l: make list! [a b c]^/== make list! [a b c]^/>> ref: at l 3^/== make list! [c]^/>> remove l^/== make list! [b c]^/>> ref^/== make list! [c]^/```}
    sent: "2017-08-18T10:32:09.824Z"
    editedAt: "2017-08-18T10:32:39.734Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996c158c101bc4e3a2ee5d1"
    text: {Hello all! Is there a way to get a "stable" reference to a position in relation of certain element in a block? ^/Currently the reference is "moving" (returning referenced block at given index regardless of changes in original block):^/```^/a: [1 2 3]^/== [1 2 3]^/>> b: next a^/== [2 3]^/>> b^/== [2 3]^/>> take a^/== 1^/>> b^/== [3]^/```^/So, is there a way to get `b` in this example still return `[2 3]` after `take a` as a reference, i.e. without copying?}
    sent: "2017-08-18T10:28:40.809Z"
    editedAt: "2017-08-18T10:29:41.827Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5996b4a2ee5c9a4c5fd319bb"
    text: "in this sense DSL is not covered at all"
    sent: "2017-08-18T09:34:26.411Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b48276a757f808b93605"
    text: {I believe university teaches you the ideas so you can find and use them in other languages as well}
    sent: "2017-08-18T09:33:54.488Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b4592723db8d5eb85bbd"
    text: "Ah thanks to all for sharing, interesting."
    sent: "2017-08-18T09:33:13.934Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996b432bc4647297497a253"
    text: {it's more like I saw statements like "lisp is a brilliant language" on the internet and started looking into it}
    sent: "2017-08-18T09:32:34.879Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b43080d90ca024102d40"
    text: {@honix I like 42, but [-1/12](https://plus.maths.org/content/infinity-or-just-112) seems to be a better ultimate answer. ;-)}
    sent: "2017-08-18T09:32:32.860Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996b3b89acddb2407a2be03"
    text: "@dockimbel i study lisp at my own"
    sent: "2017-08-18T09:30:32.174Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5996b3a8ee5c9a4c5fd3154b"
    text: {@dockimbel I only barely touched Racket (acutally `#sicp` _dialect_ ;)) during self-study. As for university - it was plain old C and Python in my case.}
    sent: "2017-08-18T09:30:16.211Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996b3a5614889d4755f445e"
    text: {everybody I know studied Lisp as FP language, and nobody really studied it's syntax, macros, extensibility and DSL features}
    sent: "2017-08-18T09:30:13.644Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b34680d90ca024102830"
    text: {@dockimbel I don't think Lisp classes are mandatory, my university had functional programming course which was taught in Lisp but then changed to Haskell }
    sent: "2017-08-18T09:28:38.946Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b32980d90ca0241027ca"
    text: "but answer is 42"
    sent: "2017-08-18T09:28:09.037Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5996b313210ac2692097289b"
    text: "I know :D"
    sent: "2017-08-18T09:27:47.147Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b30b9acddb2407a2ba3d"
    text: {@maximvl You'll get stuck in the recursion after "multiverse". ;-)}
    sent: "2017-08-18T09:27:39.123Z"
    editedAt: "2017-08-18T09:27:52.454Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996b2f4ee5c9a4c5fd31113"
    text: "@9214 universe"
    sent: "2017-08-18T09:27:16.566Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b2d9ee5c9a4c5fd31066"
    text: { @maximvl  you won't get off so easy - life is a dialect for ..?}
    sent: "2017-08-18T09:26:49.569Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996b2c5578b44a046c0dfa7"
    text: {(Sorry for the bit offtopic question) BTW, I find it interesting that most of russians Reducers are also Lispers. Are Lisp classes mandatory during russian CS college cursus?}
    sent: "2017-08-18T09:26:29.314Z"
    editedAt: "2017-08-18T09:26:58.185Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996b2a876a757f808b92dad"
    text: {@9214 maybe the process of thinking is a dialect for life :D}
    sent: "2017-08-18T09:26:00.456Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b21b2723db8d5eb8511d"
    text: "the theory of The First Lisp comes to scene ;)"
    sent: "2017-08-18T09:23:39.081Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996b201210ac26920972289"
    text: {maybe I stopped caring about syntax long time ago and don't see it's importance}
    sent: "2017-08-18T09:23:13.228Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b1d72723db8d5eb84f96"
    text: ":D"
    sent: "2017-08-18T09:22:31.215Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b1cc614889d4755f3940"
    text: {okay^/* DSL is a dialect for general-purpose PL^/* general-purpose PL is a dialect for computational model (i.e. lambdacalc, turing machine, register machine or whatever)^/* computational model is a dialect for process of thinking^/* process of thinking is a dialect for ...?}
    sent: "2017-08-18T09:22:20.273Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996b1cbc101bc4e3a2ea04f"
    text: {@maximvl If you remove that syntactic dependency between Redbol language and their dialects, then I agree that we could just call them all "languages" and get done with it.}
    sent: "2017-08-18T09:22:19.955Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996b1a4ee5c9a4c5fd30b09"
    text: "it's almost like there is no syntax"
    sent: "2017-08-18T09:21:40.303Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b17c162adb6d2e0ac70f"
    text: {@dockimbel I understand the syntax sharing idea, though adopting the most minimalist syntax as in Red or Lisp kind of blurs the line}
    sent: "2017-08-18T09:21:00.320Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b14680d90ca024101dc5"
    text: {@maximvl All Redbol dialects are not turing-complete, actually, very few are.}
    sent: "2017-08-18T09:20:06.978Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996b12bbc46472974979351"
    text: {@maximvl I think of Red or Rebol as the "mother" language, and dialects/DSLs as "offsprings".}
    sent: "2017-08-18T09:19:39.418Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996b10d210ac26920971e3f"
    text: {well, all turing-complete languages are general purpose}
    sent: "2017-08-18T09:19:09.807Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996b0f0614889d4755f3468"
    text: {think of a **programming language** "dialect" as a "variation on the theme", there "theme" is some general-purpose extensible PL used on a daily basis by  some people.}
    sent: "2017-08-18T09:18:40.107Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996b0d3ee5c9a4c5fd307b1"
    text: {@9214 From where do you get such pictures so fast? :-)}
    sent: "2017-08-18T09:18:11.743Z"
    editedAt: "2017-08-18T09:18:16.278Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5996b077bc46472974978eeb"
    text: {@maximvl A dialect is a language, but with a particular relationship with another language. We tend to think that such relationship is relevant enough to use the term "dialect" to refer to such languages.}
    sent: "2017-08-18T09:16:39.435Z"
    editedAt: "2017-08-18T09:17:24.825Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996b04676a757f808b91fd1"
    text: {@maximvl We use "dialect" in Redbol world to mean "embedded DSL". So a dialect shares the same syntax as Red language.}
    sent: "2017-08-18T09:15:50.993Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996b040578b44a046c0d441"
    text: {[please continue](https://inception.davepedu.com/)^/![](http://pedestriantv-prod.s3.amazonaws.com/images%2Farticle%2F2013%2F11%2F28%2Fleo-squint-pic.jpg)}
    sent: "2017-08-18T09:15:44.437Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996b0262723db8d5eb84753"
    text: "I see it as it's own language"
    sent: "2017-08-18T09:15:18.376Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996affcee5c9a4c5fd3035e"
    text: {@honix I don't think there is a relation, you can implement `view` in Java or Python, so is it a Red dialect? or which language dialect is it?}
    sent: "2017-08-18T09:14:36.471Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996afe5a7b406262d9fa6ec"
    text: "Dialect is modified language for some purpose"
    sent: "2017-08-18T09:14:13.665Z"
    editedAt: "2017-08-18T09:17:05.936Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5996afc280d90ca02410169a"
    text: {yeah, for some reason I don't see why we need both, dialect is the language and vice versa}
    sent: "2017-08-18T09:13:38.713Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996afbc76a757f808b91d48"
    text: "@maximvl and you accepted dialects from dialect?"
    sent: "2017-08-18T09:13:32.852Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5996af83bc46472974978aec"
    text: {@maximvl You can decide that the word "language" is meaningless and replace is with just "dialect". Though, you will have trouble communicating properly with others who a using a commonly accepted definition. Also, removing "language" word will then make "dialect" concept irrevelant.}
    sent: "2017-08-18T09:12:35.297Z"
    editedAt: "2017-08-18T09:13:44.916Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996af2e2723db8d5eb8434d"
    text: {and turing machine / lambda calculus is a dialect for...?}
    sent: "2017-08-18T09:11:10.494Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996af1780d90ca02410148a"
    text: {@dockimbel then I can consider every language as a dialect of Turing machine / Lambda calculus}
    sent: "2017-08-18T09:10:47.370Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996aee22723db8d5eb8418e"
    text: {I also like to think in terms of dialects, but IMO it leads to confusion (as in the case with `do`), perhaps we should just establish the terminology and explain what is a _Red dialect_?}
    sent: "2017-08-18T09:09:54.437Z"
    editedAt: "2017-08-18T09:10:10.052Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996aeb72723db8d5eb840ca"
    text: {in this sense I consider Math language as a dialect and chemistry formulas as a dialect and road signs, so on}
    sent: "2017-08-18T09:09:11.012Z"
    editedAt: "2017-08-18T09:09:45.280Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996aeb680d90ca024101337"
    text: {@maximvl You should stick to the definition of the word "dialect" (from Google):^/1. a particular form of a language which is peculiar to a specific region or social group.^/2. (COMPUTING) a particular version of a programming language.^/^/So you cannot define a dialect without a language from which it derives. Hence, the nonsensical concept of a "do dialect".}
    sent: "2017-08-18T09:09:10.562Z"
    editedAt: "2017-08-18T09:10:39.622Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996ae8b162adb6d2e0aba4a"
    text: "2deep4me"
    sent: "2017-08-18T09:08:27.930Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ae81578b44a046c0ca9f"
    text: "of the way you thinking :D"
    sent: "2017-08-18T09:08:17.238Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996ae79a7b406262d9fa1d2"
    text: "[wiki](https://en.wikipedia.org/wiki/Dialect)"
    sent: "2017-08-18T09:08:09.436Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ae7080d90ca0241011d4"
    text: "but dialect for which language?"
    sent: "2017-08-18T09:08:00.832Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ae60614889d4755f261e"
    text: {but it helps me to think of any language as a dialect}
    sent: "2017-08-18T09:07:44.691Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996ae4eee5c9a4c5fd2fb9d"
    text: "of course it depends on how you define dialects"
    sent: "2017-08-18T09:07:26.602Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996ae4b578b44a046c0c9d0"
    text: "@dockimbel :)"
    sent: "2017-08-18T09:07:23.801Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5996ae37c101bc4e3a2e8f1d"
    text: "C and Java dialects too? 0_0"
    sent: "2017-08-18T09:07:03.894Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5996ae3076a757f808b916a5"
    text: {@maximvl You missed the text-to-speech small wrapper in Red proposed by Jocko a few days ago in red/red. ;-)}
    sent: "2017-08-18T09:06:56.264Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996ae109acddb2407a2a258"
    text: {In my understanding, `dialect` is either `DSL` (i.e. string based) or `eDSL` (i.e. realised in language constructs). If `do` is a dialect and it's not string based, then it's probably embedded in Red, which doesn't make any sense to me, since `do` **is** Red interpreter :D}
    sent: "2017-08-18T09:06:24.974Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996adddbc4647297497839f"
    text: "it's domain is programming, general programming"
    sent: "2017-08-18T09:05:33.766Z"
    editedAt: "2017-08-18T09:05:39.624Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996add4a7b406262d9f9f27"
    text: {ok, you can't use Red to communicate to people, so it's not general-purpose}
    sent: "2017-08-18T09:05:24.813Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996add39acddb2407a2a157"
    text: "it's turtles all the way down! :turtle: "
    sent: "2017-08-18T09:05:23.346Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996adbda7b406262d9f9ea5"
    text: {"General-purpose" implies *all* domains, not a specific one. Dialect aim at providing specialized languages for specific domains.}
    sent: "2017-08-18T09:05:01.839Z"
    editedAt: "2017-08-18T09:05:50.643Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996ada1210ac26920970e1b"
    text: "well, general-purpose is the domain"
    sent: "2017-08-18T09:04:33.741Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996ad92a7b406262d9f9e18"
    text: {DSL implies "domain-specific", while Red aims to be general-purpose.}
    sent: "2017-08-18T09:04:18.539Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996ad5bee5c9a4c5fd2f771"
    text: "not ditch, dsL is still a language :)"
    sent: "2017-08-18T09:03:23.020Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996ad32a7b406262d9f9c7b"
    text: {@maximvl Why do you want to ditch the concept of "language"?}
    sent: "2017-08-18T09:02:42.906Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996ad259acddb2407a29e84"
    text: {for example if you are inside some other dialect you can escape using `do`}
    sent: "2017-08-18T09:02:29.955Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996ad13210ac26920970b96"
    text: "dialect for what, for itself or Rebol2?"
    sent: "2017-08-18T09:02:11.413Z"
    editedAt: "2017-08-18T09:02:31.371Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5996ad019acddb2407a29e18"
    text: {@dockimbel doesn't it help to think of Red as a dialect?}
    sent: "2017-08-18T09:01:53.135Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996aa41162adb6d2e0aa6d9"
    text: {@maximvl There is no such thing as a "do dialect", that's a misnomer introduced by some Rebol users. It is not used nor supported by Carl (Rebol's author), nor by myself. What some call "do dialect" is just the Red or Rebol language.}
    sent: "2017-08-18T08:50:09.516Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5996a9eda7b406262d9f8e40"
    text: "ok, I see it, no worries :)"
    sent: "2017-08-18T08:48:45.215Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a9d0ee5c9a4c5fd2e5f5"
    text: "is it explained in R/S documentation?"
    sent: "2017-08-18T08:48:16.419Z"
    editedAt: "2017-08-18T08:48:22.635Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a9b8ee5c9a4c5fd2e5bf"
    text: "do we have documentation for this?"
    sent: "2017-08-18T08:47:52.363Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a9b1578b44a046c0b504"
    text: {also I see code working with stack, arguments, registers}
    sent: "2017-08-18T08:47:45.116Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a94bbc464729749770a9"
    text: "@Oldes yes, I see, thanks :)"
    sent: "2017-08-18T08:46:03.503Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a777162adb6d2e0a99aa"
    text: {That is it... see the `eval` function in the file. No `parse` in Red/System}
    sent: "2017-08-18T08:38:15.356Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5996a5e3ee5c9a4c5fd2d29e"
    text: "I hope we parse red using `parse` :D"
    sent: "2017-08-18T08:31:31.751Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a5d2162adb6d2e0a9157"
    text: "I'm looking for the parse rules as well"
    sent: "2017-08-18T08:31:14.653Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a5c7ee5c9a4c5fd2d24d"
    text: {there is something called `interpreter`, not sure if it is what I'm looking for:^/https://github.com/red/red/blob/master/runtime/interpreter.reds#L87}
    sent: "2017-08-18T08:31:03.957Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a50a162adb6d2e0a8ec6"
    text: "could somebody point me to it?"
    sent: "2017-08-18T08:27:54.389Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a50280d90ca0240fe5aa"
    text: {afaik there should be implementation of `do` dialect somewhere in the code}
    sent: "2017-08-18T08:27:46.937Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5996a5012723db8d5eb811da"
    text: "Hi @maximvl "
    sent: "2017-08-18T08:27:45.327Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5996a4ec578b44a046c09f8d"
    text: "hi guys"
    sent: "2017-08-18T08:27:24.073Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5994b0b5ee5c9a4c5fc9f9ef"
    text: {Not any better but you could do with `parse` :^/```^/parse db-data [some [into [set name string! set value any-type! (set in data load name value)]]]^/```}
    sent: "2017-08-16T20:53:09.365Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
)#(
    id: "5994a8c52723db8d5eaf20eb"
    text: "you're welcome!"
    sent: "2017-08-16T20:19:17.251Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5994a7b1bc464729748e543c"
    text: "Thanks - so much better than what I had!"
    sent: "2017-08-16T20:14:41.467Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5994a3ac578b44a046b77152"
    text: {@kpeters58 for example:^/```^/ foreach row db-data [^/    all [^/        key: load row/1 ^/        key: in data key ^/        set key row/2^/    ]^/]^/```}
    sent: "2017-08-16T19:57:32.369Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5994a2679acddb2407994527"
    text: {```^/data: make object! [^/^-name:^/^-address:^/^-city:^/^-postal:^/^-province:^/^-country: ^/^-dob: none^/]^/^/db-data: [^/^-["Name"        "John Smith"]^/^-["Address"     "123 Main Street"]^/^-["City"        "Vancouver"]^/^-["Postal"      "V1P3S4"]^/^-["Province"    "BC"]^/^-["Country"     "Canada"]^/^-["DoB"         1960-07-22]^/^-["IsCustomer"  1]^/]^/^/```}
    sent: "2017-08-16T19:52:07.454Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5994a2652723db8d5eaf02b2"
    text: {What is the most efficient way to assign  the values from the key/value pairs in db-data to the data object variables? (It is guaranteed that the variables have the same name as the keys - apart from their case)}
    sent: "2017-08-16T19:52:05.245Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5994068c80d90ca0240386eb"
    text: "that's what I'm thinking too, thanks anyway!"
    sent: "2017-08-16T08:47:08.606Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59940661162adb6d2efe56b8"
    text: "As far as I know there is only the source code."
    sent: "2017-08-16T08:46:25.123Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5994062bee5c9a4c5fc677cb"
    text: {or context pointers in `any-word!` values, how `block!` looks like under the hood}
    sent: "2017-08-16T08:45:31.520Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59940541bc464729748adc91"
    text: {@PeterWAWood yes, but I'm speaking about low level details (underlying buffers in series, cells, etc)}
    sent: "2017-08-16T08:41:37.306Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59940504162adb6d2efe4fd4"
    text: {@9214 Have you read [Rebol User Guide - Expressions](http://www.rebol.com/docs/core23/rebolcore-4.html)?}
    sent: "2017-08-16T08:40:36.035Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5994020a2723db8d5eabb07f"
    text: {@virtualAlan wow, it is big collection. i like it!}
    sent: "2017-08-16T08:27:54.662Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5993f19580d90ca024031dc6"
    text: {Can someone explain to me the underlying execution model of Redbol in layman terms?}
    sent: "2017-08-16T07:17:41.829Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5993998aee5c9a4c5fc4a2d7"
    text: {Some new stuff here:  http://www.mycode4fun.co.uk/red-apps   A bit of fun.}
    sent: "2017-08-16T01:02:02.974Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "59937d03c101bc4e3a1fd965"
    text: {Honestly I would prefer the old Rebol behaviour as it is more advanced. You can easily do the last char test without need the function if you have sources from other system as @greggirwin mentioned.}
    sent: "2017-08-15T23:00:19.267Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59937b3180d90ca024014254"
    text: {I noticed this `dir?` difference too some time ago and thought that reason is that proper io id not implemented yet.}
    sent: "2017-08-15T22:52:33.534Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "599370da80d90ca024011841"
    text: {Thanks for your help @greggirwin. Red is fantastic. I'll take whatever product that comes forward. ^/^/It would appear a transition might be painstakingly long as every word will need to be checked for expected functionality within code already written.^/^/Thanks again for your help. It's so appreciated. }
    sent: "2017-08-15T22:08:26.792Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59936b4b614889d475501ad7"
    text: {These are important conversations to have, because they come up a lot. I often want a function to do as much as possible for me, but others may then point out that doing so may lose information, and breaking things up more is better. In this case, we could also add a refinement to `dir?` to give you the option to check one way or the other.}
    sent: "2017-08-15T21:44:43.134Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59936aba9acddb2407937c70"
    text: {"What is needed", you mean in your case, right now, correct? My point is that Red's choice is not broken or diminished, just different. Not saying you're wrong for wanting it the same, just that we need to make the case if that's what we want. Either way, we'd like to know if a name refers to an actual directory, or if a name looks like a directory, yes? If so, what are the best names for those two bits of functionality?}
    sent: "2017-08-15T21:42:18.707Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5993692876a757f808aa07f7"
    text: {Well, none of those cases that you have described are what is needed. But thanks for pointing out those.^/^/The app that was written under REBOL depended on the `dir?` functionality as written. Many lines of code later, in troubleshooting after trying to port from REBOL to Red, it became clear the Red version of `dir?` had diminished functionality. Looking at the source, that version seemed to be a hack merely to get it coded. If it isn't so be it. ^/^/All the same, the functionality is less in Red than in REBOL. Your document of differences is great. Thanks again.^/^/^/^/^/^/}
    sent: "2017-08-15T21:35:36.803Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "5993614a2723db8d5ea90c29"
    text: {Why does it seem like a hack? If you have to hit the file or url, that's more overhead, yes? And if you want to compare a list of files that may have come from other systems, you don't have all the FS info available, correct? Or if you ask whether %abc is a dir, and it says it is, so you append/join a filename to it, no normalizing separator is added. ^/It *could* still be a hack though. ;^^)}
    sent: "2017-08-15T21:02:02.622Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599360afa7b406262d90501e"
    text: "@greggirwin That link is helpful. Thanks!"
    sent: "2017-08-15T20:59:27.557Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "5993607b76a757f808a9e43f"
    text: {> @GuitarRover_twitter probably a hack to get a usable `dir`, it's called *simpleio* after all😀 ^/^/HA!}
    sent: "2017-08-15T20:58:35.068Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59936056ee5c9a4c5fc3ba53"
    text: {Added to https://github.com/red/red/wiki/Differences-between-Red-and-Rebol#dir-function.^/^/If the change was made in the initial release of R3, it was made by Carl. If he did it there, it was not likely a hack. There are pros and cons each way, yes? To argue for a change, we need to make a case for it. There *are* some things in Red that were surely done for expedience, but more things have been left out (e.g. HOFs), because we don't want to just hack things in.}
    sent: "2017-08-15T20:57:58.423Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5993603776a757f808a9e306"
    text: {@GuitarRover_twitter probably a hack to get a usable `dir`, it's called *simpleio* after all😀 }
    sent: "2017-08-15T20:57:27.536Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59935eec2723db8d5ea9010c"
    text: {Oh OK. R3? Is that relevant? I am not sure. ^/^/I'm trying to go from REBOL to Red. So whatever the R3 people did doesn't seem to matter much here or at least to me. I only care about finding the differences between Red and REBOL so that I can work around the differences. ^/^/Also, I am not sure if someone merely coded up a kludgey `dir?` for the sake of expediency without thinking it through. ^/^/In my transition, I've discovered differences in the functioning of some words, say `load ` for example, but that seems rational, you know a "design decision" as you say. But in the case of `dir?` or words like it, it comes across as thoughtless and hacky.^/^/No matter. I've come up with a re-write that solves the problem based on the words that are available in Red 0.6.3. ^/^/Nonetheless, thanks for your help!}
    sent: "2017-08-15T20:51:56.126Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59935dd49acddb2407933fa3"
    text: {There are certainly arguments *for* the new design, even though it's a change.}
    sent: "2017-08-15T20:47:16.514Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59935d99a7b406262d903fae"
    text: {Remember that Red is alpha. Some design decisions are set, yes, but not all. Also, 100% R2 compatibility is not the goal. R3 made the same change. Sometimes we learn that what *seemed* like the best choice, didn't turn out that way in practice.}
    sent: "2017-08-15T20:46:17.034Z"
    editedAt: "2017-08-15T20:46:31.841Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599353a6a7b406262d900c6a"
    text: {Under REBOL 2.7.8:^/^/```^/dir?: func [^/    "Returns TRUE if a file or URL is a directory."^/    [catch]^/    target [file! url!]^/    /local info^/][^/    info: throw-on-error [info? target]^/    either none? info [false] [info/type = 'directory]^/]^/```^/And yes, the source above relies upon the definition of `info?`^/^/Under Red 0.6.3:^/^/```^/dir?: func [file [file! url!]][#"/" = last file]^/```^/^/Under REBOL, if this is an actual directory, in spite of lacking an ending slash, REBOL knows it as a directory:^/^/```^/>> a: what-dir^/== %/c/program%20files%20%28x86%29/rebol/view/^/>> dir? a^/== true^/^/>> snip a^/== %/c/program%20files%20%28x86%29/rebol/view^/>> dir? a^/== true^/```^/^/But in Red, Red does not know this:^/^/```^/>> a: what-dir^/== %/C/Users/XX/XXX/Red/^/>> dir? a^/== true^/^/>> snip a^/== %/C/Users/XX/XXX/Red^/>> dir? a^/== false^/```^/^/I understand the difference in the code that defines dir? in REBOL and the code that defines dir? in Red and why the results are different. But why has the code in Red been accepted as valid, robust, etc? ^/^/While it is not a bug, it is one of those surprises that causes havoc.^/}
    sent: "2017-08-15T20:03:50.838Z"
    editedAt: "2017-08-15T20:10:44.453Z"
    v: 6
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "599117cb614889d475460af7"
    text: {> And somehow managing visibility on a 'class' (alias struct) level (as in, compiler-enforced access restrictions)?^/^/There are no classes in Red. Red has prototypical objects where an object can be cloned from an existing object. There is no prototype chain like in languages such as JavaScript.^/^/You can create objects with "private" words  based on this method for creating functions with private words - :point_up: [July 23, 2017 9:02 AM](https://gitter.im/red/red?at=5973f5a81c8697534a4eae80)}
    sent: "2017-08-14T03:23:55.330Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599114db1c8697534ab5c545"
    text: {> How does one define memory-mapped constants in Red? That is, non-rebindable `word!`s in a specific scope.^/^/It is not possible in the current alpha releases. I think that something like [Rebol protect](http://www.rebol.com/docs/words/wprotect.html) will be implemented in the future.}
    sent: "2017-08-14T03:11:23.246Z"
    editedAt: "2017-08-14T03:12:15.970Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59908c0180d90ca024f5652d"
    text: {> If I remember correctly, there is a way to modify the data before they are loaded. However, I can't remember how just at the moment.^/^/@PeterWAWood: system/lexer/pre-load^/- https://github.com/red/red/wiki/Guru-Meditations#modifying-data-before-loading-it-lisp-reader-macros^/Also in the "Changes in 0.6.2" section on red-lang.org.}
    sent: "2017-08-13T17:27:29.870Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59907901614889d475441c73"
    text: {How does one define memory-mapped constants in Red? That is, non-rebindable `word!`s in a specific scope.^/And somehow managing visibility on a 'class' (alias struct) level (as in, compiler-enforced access restrictions)?}
    sent: "2017-08-13T16:06:25.611Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "599074c8210ac269207c419d"
    text: {Aha^/I was thinking of the `#macro` system coming to R/S; something I'd mentioned before and got mixed up. Thanks!}
    sent: "2017-08-13T15:48:24.067Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59905ced76a757f8089dba5d"
    text: {Red data is loaded before it is either compiled or evaluated in the console. The bootstrap compiler is written in Rebol. So the compiler lexer which loads the data is written in Rebol.^/^/The console is written is in Red & Red/System. Its lexer is written in Red. ^/^/The system/lexer/pre-load plug-in is only available in the lexer written in Red.^/}
    sent: "2017-08-13T14:06:37.366Z"
    editedAt: "2017-08-13T14:06:59.221Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59905b6fee5c9a4c5fb7a466"
    text: "@greggirwin It's cool. There is a workaround."
    sent: "2017-08-13T14:00:15.941Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "599057caee5c9a4c5fb7982e"
    text: {Wait, now I think I misunderstood what you meant by "work with the compiler".}
    sent: "2017-08-13T13:44:42.273Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59904a40614889d475437b4e"
    text: {@PeterWAWood | That's cool. I was just worried it was a design decision.}
    sent: "2017-08-13T12:46:56.926Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59903b9fa7b406262d839b4d"
    text: {I am pretty sure that it will not work with the compiler until the compiler is self-hosted.}
    sent: "2017-08-13T11:44:31.940Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59903b4aee5c9a4c5fb740f4"
    text: {@Enamex The "Changes in 0.6.2" section of the [macros blog](http://www.red-lang.org/2017/03/062-libred-and-macros.html) explains how to plug in a function that will be applied to the input prior to it being loaded. }
    sent: "2017-08-13T11:43:06.173Z"
    editedAt: "2017-08-13T11:43:21.764Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599037f280d90ca024f43ba0"
    text: {@PeterWAWood | Following this, the match rule I'm looking for is probably `any-type!`.^/Don't see why not just `any!` but that's cool}
    sent: "2017-08-13T11:28:50.546Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "599037a5162adb6d2eef34c7"
    text: "Oh^/Ooh"
    sent: "2017-08-13T11:27:33.624Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59903717614889d475433f42"
    text: {I'm not sure I understand the practical difference between applying a macro to source data or loaded data.}
    sent: "2017-08-13T11:25:11.597Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599036a62723db8d5e9cc933"
    text: {If I remember correctly, there is a way to modify the data before they are loaded. However, I can't remember how just at the moment.}
    sent: "2017-08-13T11:23:18.832Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59903650bc464729747b660d"
    text: {@Enamex The [pre-processor reference](https://doc.red-lang.org/en/preprocessor.html) introduction explains "The preprocessor is invoked after the LOADing phase, so it processes Red values, and not the source code in text form."}
    sent: "2017-08-13T11:21:52.075Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59902f8b614889d475432a9a"
    text: {datatype! doesn't seem like the right thing :/^/In macros we're primarily (actually only) matching on the shape of things; so we're matching literals not just their values}
    sent: "2017-08-13T10:52:59.352Z"
    editedAt: "2017-08-13T10:53:09.568Z"
    v: 2
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59902e5b80d90ca024f41def"
    text: {@Enamex You cannot match against literal values as the input has already been loaded. You can match any datatype!^/^/If you are writing the macro for just use with the compiler, you can match any Rebol datatype!. If you are writing the macro to just use with the compiler, you can match any Red datatype!. If you want to use the macro with both, you can match any datatype! that is in both Red and Rebol.}
    sent: "2017-08-13T10:47:55.325Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59902c131c8697534ab2d66b"
    text: {:point_up: [August 12, 2017 9:34 PM](https://gitter.im/red/help?at=598f585276a757f8089ade55) | Sadly it doesn't.^/I want to match against any literal, word or block. (I think that's all 'items' I need to take care of? Maybe also parens)}
    sent: "2017-08-13T10:38:11.722Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598ffffa80d90ca024f39518"
    text: "@rebolek Thanks!!"
    sent: "2017-08-13T07:30:02.558Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598ffc03614889d475428b1b"
    text: {Instead of the `f: first [(:f)]`you can use `quote`: `f: quote (:f)`}
    sent: "2017-08-13T07:13:07.644Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598ffaf976a757f8089c9581"
    text: {@PeterWAWood thank you! That was a terrific explanation. I'm sure I've seen `in` before, but it never clicked for me how that could be used.}
    sent: "2017-08-13T07:08:41.968Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "598ff6544bcd78af563b0b4d"
    text: {Here is a way to achieve the same result with compose:^/```text^/>> a: 5^/== 5^/>> f: func[a][print a]^/== func [a][print a]^/>> c: make object! compose/deep [^/[    a: (a)^/[    f: first [(:f)]^/[    f a^/[    ]^/5^/== make object! [^/    a: 5^/    f: func [a][print a]^/]^/```}
    sent: "2017-08-13T06:48:52.566Z"
    editedAt: "2017-08-13T06:49:23.172Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598ff42b2723db8d5e9c0126"
    text: {You need to supply the context of the `a` to which you wish to bind the `a` in the object  context. For example:^/```text^/>> a: 5^/== 5^/>> f: func[a][print a]^/== func [a][print a]^/>> o: make object! [^/[    a: system/words/a^/[    f: get in system/words 'f^/[    f a^/[    ]^/5^/== make object! [^/    a: 5^/    f: func [a][print a]^/]^/```}
    sent: "2017-08-13T06:39:39.307Z"
    editedAt: "2017-08-13T06:40:07.871Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598ff37ca7b406262d82bbf5"
    text: {The word `a` is first added to the context to which `o` is bound. By the time `a: a` is evaluated `a` exists in the context but is `unset`.}
    sent: "2017-08-13T06:36:44.041Z"
    editedAt: "2017-08-13T06:41:27.108Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598ff2d12723db8d5e9bfdac"
    text: {I don't think it is a bug. Here is why you get the error:^/```text^/>> a: 5^/== 5^/>> o: make object! [^/[    probe context? 'a^/[    a: 1^/[    probe context? 'a^/[    ]^/make object! [^/    a: unset^/]^/make object! [^/    a: 1^/]^/== make object! [^/    a: 1^/]^/```}
    sent: "2017-08-13T06:33:53.937Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598fe3e7162adb6d2eee3936"
    text: {^/I've been wondering about this `context`/`object` block evaluation behavior. Is there a practical or technical reason for why I can't initialize a word in a context with the same name? Could this be a bug?^/^/```^/>> a: 5^/== 5^/>> c: context [a: a]^/*** Script Error: a has no value^/*** Where: a^/*** Stack: context  ^/```^/^/Instead I can do this, which isn't too big a deal^/^/```^/>> c: context compose [a: (a)]^/== make object! [^/    a: 5^/]^/```^/^/But it seems a lot more difficult to get a function into a context (without defining it there) because the function always gets evaluated.^/^/```^/>> f: does ["hello"]^/== func []["hello"]^/>> f^/== "hello"^/>> c: context compose [f: (:f)]^/== make object! [^/    f: "hello"^/] ^/```}
    sent: "2017-08-13T05:30:15.487Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "598fdda2a7b406262d827d33"
    text: {Red does carry that philosophy forward, but remember that it's *alpha*. The clipboard funcs are relatively new, and could certainly be enhanced. If they plan to change to ports in 0.7.0, or shortly after, the team may not want to spend time on enhancing them at this point.}
    sent: "2017-08-13T05:03:30.993Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598fc7f5614889d47542030c"
    text: {Does anyone know why both enbase and write-clipboard can not take urls as arguments? ^/^/In REBOL 2.7.8, both did.^/^/So in REBOL, one could do this:^/^/```^/hotlink: funct [^/{Return a onedrive hot link from a share link} ^/^-u [url!]^/][^/^/    link: rejoin [^/        https://api.onedrive.com/v1.0/shares/u "!" ^/        enbase u "/root/content"^/    ]^/^-write clipboard:// link^/^-return link^/]^/```^/^/However, one can not do that in Red.  Isn't not pushing data around in strings but rather in actual datatypes a key design feature of REBOL? Is Red not carrying on with that philosophy?}
    sent: "2017-08-13T03:31:01.579Z"
    editedAt: "2017-08-13T03:32:18.256Z"
    v: 2
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598f585276a757f8089ade55"
    text: {If you look at http://www.red-lang.org/2016/12/entering-world-of-macros.html, the `loop` macro shows how.}
    sent: "2017-08-12T19:34:42.942Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598f3916162adb6d2eec6593"
    text: {How do I match any one 'item' in a macro?^/That is, a `[word! | integer! | block! | ...]`}
    sent: "2017-08-12T17:21:26.936Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598f30c9bc464729747877f0"
    text: "@greggirwin TY on that clipboard stuff. "
    sent: "2017-08-12T16:46:01.151Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598f30a62723db8d5e99e5bf"
    text: {@greggirwin |^/```lisp^/'print 'do reduce [fn]^/```^/Also works. It seems like something to do with contexts where a path is automatically invoked or passed as a path. Like, `type? obj/baz` says it's a path but it's special somehow as it normally auto invokes.^/Constructing it in the macro is losing that special something.}
    sent: "2017-08-12T16:45:26.822Z"
    editedAt: "2017-08-12T16:46:08.860Z"
    v: 5
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598e702c4bcd78af56369551"
    text: "Clipboard will probably become a port in 0.7.0"
    sent: "2017-08-12T03:04:12.141Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e7018162adb6d2eea0329"
    text: "`help` is your friend as well."
    sent: "2017-08-12T03:03:52.175Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e6ffac101bc4e3a0d9098"
    text: "Yes: `write-clipboard`"
    sent: "2017-08-12T03:03:22.022Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e527d4bcd78af5636486c"
    text: {Is this possible in Red? write clipboard:// "test"}
    sent: "2017-08-12T00:57:33.541Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e2630614889d4753d4e53"
    text: {That will come into play as well, of course. :^^) I was going for RCA at `now`.}
    sent: "2017-08-11T21:48:32.721Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e25e676a757f8089748cc"
    text: {@greggirwin I thought https://github.com/red/red/blob/master/runtime/datatypes/date.reds#L356 was the source I needed to look at :p }
    sent: "2017-08-11T21:47:18.780Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598e24e9162adb6d2ee92edc"
    text: {- https://github.com/red/red/blob/master/runtime/platform/POSIX.reds#L504}
    sent: "2017-08-11T21:43:05.781Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e247580d90ca024ee3001"
    text: "Win32 as the example platform there."
    sent: "2017-08-11T21:41:09.551Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e2469c101bc4e3a0cd18e"
    text: {It looks like `now` just sets the time to zero and exits if `/date` is used, but also has a platform component. ^/- https://github.com/red/red/blob/master/runtime/natives.reds#L2441^/- https://github.com/red/red/blob/master/runtime/platform/win32.reds#L463}
    sent: "2017-08-11T21:40:57.284Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e235bbc46472974755b47"
    text: {@geekyi ^/^/```^/>> h: now/date^/== 11-Aug-2017^/>> reduce [i: h + 10 i/timezone]^/== [20-Aug-2017 none]^/```^/}
    sent: "2017-08-11T21:36:27.781Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e22e52723db8d5e96d89d"
    text: "OK"
    sent: "2017-08-11T21:34:29.120Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e22dabc464729747559ed"
    text: {To file a ticket, go to https://github.com/red/red/issues and look at some examples. When the time comes, just click New Issue and ask for clarification if needed.}
    sent: "2017-08-11T21:34:18.207Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e22bc614889d4753d430d"
    text: {@GuitarRover_twitter One more^/```red^/h: now/date^/reduce [i: h + 10 i/timezone]^/```}
    sent: "2017-08-11T21:33:48.047Z"
    editedAt: "2017-08-11T21:35:29.839Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "598e22a6210ac269207572b1"
    text: "Yes, thanks."
    sent: "2017-08-11T21:33:26.649Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e2299c101bc4e3a0ccb48"
    text: {So you should be good with that @GuitarRover_twitter, it seems.}
    sent: "2017-08-11T21:33:13.134Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e228976a757f808973c63"
    text: {I don't know if that ticket is related @geekyi. I just don't konw if it's an internal date math issue that needs to be addressed, or just the zone setting for `now/date`.}
    sent: "2017-08-11T21:32:57.169Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e226e614889d4753d4267"
    text: {```^/>> y: now/date/utc^/== 11-Aug-2017^/>> y/timezone^/== none^/>> y + 10^/== 21-Aug-2017^/```}
    sent: "2017-08-11T21:32:30.123Z"
    editedAt: "2017-08-11T21:32:57.699Z"
    v: 2
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e223ac101bc4e3a0cca33"
    text: {Make sure it works as expected for you @GuitarRover_twitter. Will probably roll over. e.g., if you're in -4:00, what does `now/date/utc` return right now for you?}
    sent: "2017-08-11T21:31:38.541Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e2233614889d4753d40e3"
    text: "Thank you!"
    sent: "2017-08-11T21:31:31.504Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e221f2723db8d5e96d565"
    text: {@GuitarRover_twitter also, https://github.com/red/red/issues/2948 is probably the issue @greggirwin is talking about}
    sent: "2017-08-11T21:31:11.369Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598e21ec80d90ca024ee283e"
    text: "@geekyi whispers about red/bugs testing room"
    status: true
    sent: "2017-08-11T21:30:20.543Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598e21c876a757f80897396f"
    text: {Hey. I'm merely an end user trying to transition from REBOL to Red. I don't know anything about tickets and bug filings. Where are the instructions to do that?^/^/@greggirwin That will work for me. That is even easier than setting the timezone to 0. And when it gets fixed in a future build, the code will work still.}
    sent: "2017-08-11T21:29:44.940Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e21431c8697534aacda53"
    text: {Worth a ticket, so it can be clarified if nothing else.^/```^/>> e: now/date/utc^/== 11-Aug-2017^/>> e + 10^/== 21-Aug-2017^/```}
    sent: "2017-08-11T21:27:31.583Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e210cc101bc4e3a0cc3eb"
    text: {@GuitarRover_twitter good to file as bug, tho we need to have the steps for it to be reproducible }
    sent: "2017-08-11T21:26:36.878Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598e20664bcd78af5635b764"
    text: "OK, so it's a bug then?"
    sent: "2017-08-11T21:23:50.986Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e1f6880d90ca024ee20c8"
    text: {This is a change from Rebol, so may not be intentional.}
    sent: "2017-08-11T21:19:36.440Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e1f192723db8d5e96cb5a"
    text: "Oh yes, I just remembered!"
    sent: "2017-08-11T21:18:17.378Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598e1efb614889d4753d375a"
    text: {I noticed that not long ago myself. I figured it was a zone issue, but I didn't take time to dig in and think about all the implications. }
    sent: "2017-08-11T21:17:47.136Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598e1eeac101bc4e3a0cbd58"
    text: {Okay.. weird.. maybe if a set the timezone to yours..}
    sent: "2017-08-11T21:17:30.133Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598e1e43c101bc4e3a0cbb09"
    text: {When using "the lastest":^/^/```^/>> system/build/config/build-basename^/== %gui-console-2017-8-9-31253^/>> reduce [e: now/date e/timezone]^/== [11-Aug-2017 none]^/>> e/timezone: 0^/== 0^/>> e + 10^/== 21-Aug-2017/0:00:00^/```^/^/and^/^/```^/>> h: now/time^/== 17:14:07^/>> h: now/date^/== 11-Aug-2017^/>> h/timezone^/== none^/>> h + 10^/== 20-Aug-2017^/```^/^/}
    sent: "2017-08-11T21:14:43.258Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e1daa1c8697534aaccf84"
    text: {@GuitarRover_twitter also, I notice you're using  a different build than mine, from 3rd August? I just downloaded, mine's numbered 9th August}
    sent: "2017-08-11T21:12:09.881Z"
    editedAt: "2017-08-11T21:13:34.546Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "598e1d62ee5c9a4c5fb0ef4f"
    text: {@geekyi Good question. I don't know. I didn't code Red. ;-) ^/^/```^/>> g: now/date^/== 11-Aug-2017^/>> g/timezone^/== -4:00:00^/```^/^/Should timezone be present after setting a word to now/date?}
    sent: "2017-08-11T21:10:58.234Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e1ce776a757f8089725bb"
    text: {@GuitarRover_twitter Interesting, why does yours get the `timezone` set? @meijeru too?}
    sent: "2017-08-11T21:08:55.729Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598e1c8bee5c9a4c5fb0ec12"
    text: {OK ...^/^/```^/>> system/build/config/build-basename^/== %gui-console-2017-8-3-49893^/>> reduce [e: now/date e/timezone]^/== [11-Aug-2017 -4:00:00]^/>> e/timezone: 0^/== 0^/>> e + 10^/== 21-Aug-2017/0:00:00^/```^/}
    sent: "2017-08-11T21:07:23.179Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e1c4380d90ca024ee15a8"
    text: {@GuitarRover_twitter ^/```red^/== %gui-console-2017-8-9-31253^/== [11-Aug-2017 none]^/== 0^/== 21-Aug-2017/0:00:00^/```}
    sent: "2017-08-11T21:06:11.865Z"
    editedAt: "2017-08-11T21:07:27.256Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "598e1c1a614889d4753d2e14"
    text: {```red^/system/build/config/build-basename^/reduce [e: now/date e/timezone]^/e/timezone: 0^/e + 10^/```}
    sent: "2017-08-11T21:05:30.921Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598e1c12c101bc4e3a0cb3f0"
    text: "Right. That is all I can see as well."
    sent: "2017-08-11T21:05:22.513Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e1b362723db8d5e96bd98"
    text: {The only other  difference is Windows Home vs Pro...  }
    sent: "2017-08-11T21:01:41.999Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "598e13cf2723db8d5e96a67b"
    text: {OK, I tried the latest available automated build, master branch. Same result:^/^/```^/>> now/date + 10^/== 20-Aug-2017^/>> d: now^/== 11-Aug-2017/16:28:50-04:00^/>> d + 10^/== 21-Aug-2017/16:28:50-04:00^/>> e: now/date^/== 11-Aug-2017^/>> e + 10^/== 20-Aug-2017^/>> about^/Red for Windows version 0.6.3 built 11-Aug-2017/16:25:22-04:00^/^/```^/}
    sent: "2017-08-11T20:30:07.713Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
)#(
    id: "598e121276a757f8089700ce"
    text: {Something to do with timezone? It is the only difference between your and my situation... }
    sent: "2017-08-11T20:22:42.041Z"
    editedAt: "2017-08-11T20:23:55.536Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "598e121080d90ca024edf09a"
    text: "Latest? All platforms, last stable. "
    sent: "2017-08-11T20:22:40.325Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e11e8614889d4753d0863"
    text: {Other than that, why do you suppose mine would have the anomaly and not yours?}
    sent: "2017-08-11T20:22:00.360Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e11e2614889d4753d0850"
    text: {But are you running the latest? Date arithmetic was reworked a lot.}
    sent: "2017-08-11T20:21:54.378Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "598e11bdc101bc4e3a0c8dc9"
    text: {Me: edition: Windows 10 Pro version: 1703 os build: 15063.540}
    sent: "2017-08-11T20:21:17.720Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "598e10bb210ac269207532e0"
    text: {@meijeru Upon what windows do you run?^/^/Me: edition: Windows 10 Home version: 1703 os build: 15063.540}
    sent: "2017-08-11T20:16:59.840Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e10392723db8d5e969897"
    text: {The problem / error / bug persists:^/^/```^/>> d: now^/== 11-Aug-2017/16:14:16-04:00^/>> d + 10^/== 21-Aug-2017/16:14:16-04:00^/>> e: now/date^/== 11-Aug-2017^/>> e + 10^/== 20-Aug-2017^/>> now/date + 10^/== 20-Aug-2017^/>> about^/Red for Windows version 0.6.3 built 11-Aug-2017/16:08:13-04:00^/^/^/```}
    sent: "2017-08-11T20:14:49.755Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e0dfc80d90ca024ede2ee"
    text: {Thanks. The build I had from the download site is 19-July-2017/10:48:25-4:00}
    sent: "2017-08-11T20:05:16.328Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598e0d8080d90ca024ede141"
    text: {Not here:^/```^/>> about^/Red for Windows version 0.6.3 built 9-Aug-2017/9:43:46+02:00^/>> d: now^/== 11-Aug-2017/22:01:24+02:00^/>> d + 10^/== 21-Aug-2017/22:01:24+02:00^/>> e: now/date^/== 11-Aug-2017^/>> e + 10^/== 21-Aug-2017^/```^/}
    sent: "2017-08-11T20:03:12.738Z"
    editedAt: "2017-08-11T20:03:41.100Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "598e077dc101bc4e3a0c6906"
    text: {Would someone be so kind as to explain this anomaly?^/```^/>> d: now^/== 11-Aug-2017/15:35:08-04:00^/>> d + 10^/== 21-Aug-2017/15:35:08-04:00^/^/>> e: now/date^/== 11-Aug-2017^/>> e + 10^/== 20-Aug-2017^/```^/^/Why isn't e also 21?^/}
    sent: "2017-08-11T19:37:33.895Z"
    editedAt: "2017-08-11T19:38:03.506Z"
    v: 3
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "598df408bc4647297474a1c5"
    text: "Compile the above. Works in the interpreter fine."
    sent: "2017-08-11T18:14:32.365Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598df3f2614889d4753c9bdd"
    text: {```^/Red []^/^/obj: object [^/^-baz: does [42]^/]^/obj-o2: :obj^/print same? obj obj-o2^/print do [obj-o2/baz]^/print obj-o2/baz^/```^/Unless someone else jumps in and sees what we're missing, it's worth a ticket.}
    sent: "2017-08-11T18:14:10.195Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598df31376a757f808968ab8"
    text: {And if you use `obj` instead, in the path, it's fine. }
    sent: "2017-08-11T18:10:27.420Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598df2d6a7b406262d7cc7d3"
    text: {So it's evaluating the path you've reduced into the body. If you compile the output separately, the behavior is the same as well.}
    sent: "2017-08-11T18:09:26.841Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598df16ca7b406262d7cc1bf"
    text: {If you change the `print` line to `'do reduce ['print fn]`, it works. }
    sent: "2017-08-11T18:03:24.106Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598df0244bcd78af563502de"
    text: {Thanks for the example. Same behavior here, so it's not a build issue. I know the team is slammed right now, but maybe @dockimbel will see the issue. It's not clear to me, since `-s` works, as you say.}
    sent: "2017-08-11T17:57:56.153Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598defc71c8697534aac248a"
    text: {I think people use `lisp` as the lang for highlighting here, though I just use the ticks.}
    sent: "2017-08-11T17:56:23.003Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598dedf0c101bc4e3a0c0816"
    text: {Compiler with `-s` gives:^/```^/[^/    obj: object [^/        baz: does [42]^/    ] obj-o2: obj^/    print obj-o2/baz^/]^/```^/Which seems syntactically correct and should do what I mean.^/Debugging from within the macro didn't reveal any differences I'd anticipated that might have been the issue}
    sent: "2017-08-11T17:48:32.203Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598debef614889d4753c7f36"
    text: {I dunno why the syntax highlighting isn't working properly^/I'm using ```red as usual.}
    sent: "2017-08-11T17:39:59.816Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598deb8ba7b406262d7cad6e"
    text: {@greggirwin :^/^/```red^/#macro ['foo word!] func [[manual] s e][^/    obj: s/2^/    obj2: load append form obj "-o2"^/    obj2-s: to-set-word obj2^/    fn: to-path reduce [obj2 'baz]^/^/    new-body: reduce [^/        obj2-s obj^/        'print fn^/    ]^/^/    change/part s new-body e^/]^/^/obj: object [^/    baz: does [42]^/]^/^/foo obj^/```}
    sent: "2017-08-11T17:38:19.198Z"
    editedAt: "2017-08-11T17:39:19.399Z"
    v: 4
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598de916ee5c9a4c5fb02473"
    text: {@toomasv of course :) I've shortened the example, but it should be understandable :)}
    sent: "2017-08-11T17:27:50.222Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598ddef9bc46472974744e14"
    text: {@Enamex, some shortcut funcs have been discussed over time. They are not always clear (in name) to newcomers, but are quite useful. ^/^/On your other question, if you can post a code example, it will be easier for others to reproduce.}
    sent: "2017-08-11T16:44:41.852Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598dd472ee5c9a4c5fafd14c"
    text: {@rebolek It's actually `append arg1 reduce arg2` :)^/```^/>> b: 1 c: 2^/>> append reduce [b][c]^/== [1 c]^/>> repend [b][c]^/== [b 2]^/```}
    sent: "2017-08-11T15:59:46.664Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "598dc9d376a757f80895d5c7"
    text: {@Enamex `repend` is `append reduce`. It was added because `append reduce` is very common.}
    sent: "2017-08-11T15:14:27.113Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598dbef1a7b406262d7be277"
    text: "^/@Enamex And, of course, see `?? repend`."
    sent: "2017-08-11T14:28:01.364Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "598dbb9c1c8697534aab3fe3"
    text: {@Enamex `repend` is appending while reducing:^/```^/>> c: 2 append [1] [c]^/== [1 c]^/>> repend [1] [c]^/== [1 2]^/```^/Also consider this:^/```^/>> b: 1 c: 2^/>> repend [b][c]^/== [b 2]^/>> append [b] reduce [c]^/== [b 2]^/>> reduce append [b][c]^/== [1 2]^/```^/}
    sent: "2017-08-11T14:13:48.281Z"
    editedAt: "2017-08-11T14:19:50.184Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "598daf99210ac2692073933f"
    text: {Re: `append`/`insert`. I stumbled upon `repend` and it was just confusing (first thought it was like a reverse of `append` or something?)}
    sent: "2017-08-11T13:22:33.206Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598daf63210ac269207392b7"
    text: {:point_up: [August 10, 2017 10:54 PM](https://gitter.im/red/help?at=598cc80280d90ca024e91fdc) | Anyone can figure this out (or has questions that might help them do)?}
    sent: "2017-08-11T13:21:39.476Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598d42bbee5c9a4c5fad8af0"
    text: "right, it's `head insert tail`"
    sent: "2017-08-11T05:38:03.178Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598d42852723db8d5e9372df"
    text: {and `append` returns the head of the series while `insert` returns the position just after the insert.}
    sent: "2017-08-11T05:37:09.153Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "598d3a52a7b406262d79e74e"
    text: {@Enamex `insert` is the default action, `append` is just  `insert tail` in disguise.}
    sent: "2017-08-11T05:02:10.694Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598cd4cba7b406262d78a6ac"
    text: "Thanks @greggirwin "
    sent: "2017-08-10T21:48:59.750Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598cd050a7b406262d789271"
    text: {@Enamex, use `insert` to put values into a series at a given position. By default that will be the head, but you can use `find`, `at`, or `skip` to insert at different positions.}
    sent: "2017-08-10T21:29:52.198Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598cc80280d90ca024e91fdc"
    text: {I'm getting `?function?` at expansion site of a macro wherein a path to a function is constructed. The function takes no arguments but is not called (`-s` output shows code that when copied and compiled manually works as intended)}
    sent: "2017-08-10T20:54:26.208Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598cbd5b76a757f808920778"
    text: "Question: How to append to head of a series?"
    sent: "2017-08-10T20:08:59.683Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598cbd4ec101bc4e3a07a568"
    text: {That doesn't help as much when one is writing in Red/System itself :T}
    sent: "2017-08-10T20:08:46.563Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598c97e9bc464729746f6b23"
    text: {@Enamex think about this as red language is a macro for red/system}
    sent: "2017-08-10T17:29:13.789Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "598c9382a7b406262d77939c"
    text: {@dockimbel I'm aware of the differences between the 2.^/My gripe is why that difference needs to exist. Or rather, why can't R and R/S support both macro systems.^/For R/S in particular I think full Red macros could be a big help to automate patterns at compile time that still get passed to the compiler as bona-fide source code and don't have to suffer run-time penalties.^/See the language [D](https://dlang.org/) for a good example of such compile time meta-programming stuff.}
    sent: "2017-08-10T17:10:26.875Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598c936376a757f80891538e"
    text: {Added a note to https://github.com/red/red/wiki/Primer. }
    sent: "2017-08-10T17:09:55.077Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598c91a2a7b406262d778ae7"
    text: "Good to note. Thanks."
    sent: "2017-08-10T17:02:26.721Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598c91471c8697534aa6ee28"
    text: {@greggirwin `#define` is used on purpose yes. I don't think that using `#macro` name in R/S would help (actually, it would rather bring confusion), as R/S macros have little in common with Red ones. The R/S ones are optionally parametrized templates, while Red ones are functions.}
    sent: "2017-08-10T17:00:55.262Z"
    editedAt: "2017-08-10T17:01:20.609Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598c90a32723db8d5e90f8cb"
    text: {@dockimbel, and `#define` is the name used to feel more like C? That is, could macros in R/S also use `#macro` as the name? (aside from the effort to change them all, of course)}
    sent: "2017-08-10T16:58:11.701Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598c81febc464729746f0b9c"
    text: {@Enamex Red and R/S are using two different preprocessors which have little in common, as Red and R/S are living in very different abstraction layers. Both preprocessors are fully documented. "Macros" in Red are Lisp-like, while in R/S, they are C-like.}
    sent: "2017-08-10T15:55:41.998Z"
    editedAt: "2017-08-10T15:59:04.579Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "598c81891c8697534aa6a653"
    text: {For the directive/issue! thing, I was trying to make a macro that automatically wrapped `#include`s in a `context`}
    sent: "2017-08-10T15:53:45.076Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598c815f329651f46e09c69e"
    text: {@geekyi Well, the `#macro` vs `#define` is a general issue.^/I'd **much** prefer either or both to be usable in Red _and_ Red/System.}
    sent: "2017-08-10T15:53:03.409Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598c5ce4329651f46e091376"
    text: {@Enamex what are you trying to do, have some sample code?}
    sent: "2017-08-10T13:17:24.877Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598c48d880d90ca024e6f370"
    text: {We can't use `#define` in Red or `#macro` in Red/System.^/And so far as I've been able to tell from what I tried, we can't have a macro of either type expand to something with a directive (`issue!`) in it that gets evaluated only at the expansion site.^/Are these limitations of the current implementation or by design?}
    sent: "2017-08-10T11:51:52.519Z"
    editedAt: "2017-08-10T11:52:04.083Z"
    v: 2
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "598b5c2d329651f46e057143"
    text: "Good catch. Too late to edit now though. "
    sent: "2017-08-09T19:02:05.346Z"
    editedAt: "2017-08-09T19:02:19.087Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598b5c064bcd78af562b083c"
    text: {I think that's a remnant of old test code, showing what happens if the values aren't in the context. }
    sent: "2017-08-09T19:01:26.460Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598b56f4c101bc4e3a0226cd"
    text: "@greggirwin why `oo:` twice?"
    sent: "2017-08-09T18:39:48.218Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "598b2eb94bcd78af562a3f95"
    text: {Same as the above `do-in`, but just a simple name change and it looks like a built-in feature of other languages.}
    sent: "2017-08-09T15:48:09.787Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598b2e83210ac269206a2650"
    text: {Yeah, there are things that may never compile ahead of time in Red, but could JIT. A nice example of what you can do with this is a `with` function. @rebolek has a multi-binding example, but this will give you the idea:^/```^/with: func [^/^-object [object!]^/^-body   [block!]^/][^/^-do bind/copy body object^/]^/e.g. [^/^-o:  object [a: 1 b: 2]^/^-oo: object [c: 3 d: 4]^/^-oo: object [a: 3 b: 4]^/^-with o [a + b]^/^-with oo [a + b]^/]^/```}
    sent: "2017-08-09T15:47:15.463Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598aa9cea7b406262d6fb638"
    text: {@greggirwin cool stuff! seems compiler's nightmare}
    sent: "2017-08-09T06:21:02.584Z"
    v: 1
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5989fa3d614889d4752d2ba3"
    text: {```^/>> blk: [print var]^/== [print var]^/>> o1: object [var: 1]^/== make object! [^/    var: 1^/]^/>> o2: object [var: 2]^/== make object! [^/    var: 2^/]^/>> do-in: func [ctx blk][do bind blk ctx]^/== func [ctx blk][do bind blk ctx]^/>> do-in o1 blk^/1^/>> do-in o2 blk^/2^/```}
    sent: "2017-08-08T17:51:56.982Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5989fa09a7b406262d6d3cb1"
    text: {@honix, yes. Binding is how Red "scopes" things. Each word carries its binding with it. With one more arg you can generalize your func.}
    sent: "2017-08-08T17:51:05.925Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5989f903614889d4752d2505"
    text: "@kpeters58, the flexibility of Red! :^^)"
    sent: "2017-08-08T17:46:43.848Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5989ed1e76a757f80886c0fe"
    text: {got it. thanks [this page](http://www.rebol.com/docs/words/wbind.html)^/```^/>> blk: [print var]^/== [print var]^/>> fn: func [var] [do bind blk 'var]^/== func [var][do bind blk 'var]^/>> fn 42^/42^/```}
    sent: "2017-08-08T16:55:58.653Z"
    editedAt: "2017-08-08T16:56:15.847Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5989e9a01c8697534a9c408f"
    text: {or even^/```^/>> blk: [print var]^/== [print var]^/>> fn: func [var] [do blk]^/== func [var][do blk]^/>> fn 12^/*** Script Error: var has no value^/*** Where: print^/*** Stack: fn ^/```}
    sent: "2017-08-08T16:41:04.316Z"
    editedAt: "2017-08-08T16:41:19.501Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5989e8f876a757f80886aebd"
    text: {how it can be done? i mean to create block of code with vars and execute it later with some local vars.^/```^/>> blk: [print (var)]^/== [print (var)]^/>> fn: func [var] [do compose blk]^/== func [var][do compose blk]^/>> fn 12^/*** Script Error: var has no value^/*** Where: compose^/*** Stack: fn  ^/```}
    sent: "2017-08-08T16:38:16.828Z"
    editedAt: "2017-08-08T16:38:42.988Z"
    v: 2
    author: "56f015f885d51f252ab9ffb6"
) #(
    id: "5989e7b476a757f80886aa3b"
    text: {@kpeters58 Please let me have a little more fun with two more options !! : ^/```^/adata: [[204.255.204 "Information"] [255.255.153 "Warning"] [255.204.204 "Error"]]^/kind: 1^/bgcolor:  first adata/:kind^/msgtype:  second adata/:kind^/```^/and^/```^/adata: [[204.255.204 "Information"] [255.255.153 "Warning"] [255.204.204 "Error"]]^/kind: 1^/set [bgcolor msgtype]  adata/:kind^/```}
    sent: "2017-08-08T16:32:52.380Z"
    v: 1
    author: "56eeeea485d51f252ab9d69f"
) #(
    id: "5988fddd329651f46efc542f"
    text: {@Enamex  :point_left: [August 8, 2017 4:38 AM](https://gitter.im/red/red?at=5988f9e6bc46472974614d71) , thanks  @PeterWAWood !^/>  The Red/System compiler uses `#define` for macros. }
    sent: "2017-08-07T23:55:08.995Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988fd2aee5c9a4c5f9d1324"
    text: {> @geekyi I expected them to work in both places :T^/^/It seems you also like to get answers to questions in two places.^/^/I have answered in the other channel that you asked the question.}
    sent: "2017-08-07T23:52:10.264Z"
    editedAt: "2017-08-07T23:52:28.026Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5988fae9a7b406262d697208"
    text: "@geekyi  Thanks once more!"
    sent: "2017-08-07T23:42:33.814Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5988fa53ee5c9a4c5f9d0d77"
    text: {@geekyi I expected them to work in both places :T^/It just made sense. For Red/System they'd help avoid quite a bit of boiler-plate with zero runtime cost (that's inherent to the abstraction). For Red proper they'd help bring DSLs to compile time, for the ones that can afford a bit of a loss to dynamicity.}
    sent: "2017-08-07T23:40:03.033Z"
    editedAt: "2017-08-07T23:41:22.460Z"
    v: 2
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5988f6001c8697534a98cff0"
    text: {@Enamex  :point_up: [August 7, 2017 11:46 PM](https://gitter.im/red/help?at=5988b58e1c8697534a97d3d9) you're right, works in compiled Red, but not Red/System.. I was expecting the other way round..}
    sent: "2017-08-07T23:21:36.371Z"
    editedAt: "2017-08-07T23:23:05.853Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5988f57c614889d4752953ec"
    text: {```red^/bfont: make font! [size: 15 style: [bold]]^/view [^/    button "Clear" 70x50 [ f/text: copy ""] font bfont^/]^/```}
    sent: "2017-08-07T23:19:24.793Z"
    editedAt: "2017-08-07T23:19:41.309Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5988f46345fc6707460359d1"
    text: {@kpeters58 `compose` isn't necessary in this case, need to pull out the code, and `font` word was missing}
    sent: "2017-08-07T23:14:43.634Z"
    editedAt: "2017-08-07T23:20:59.198Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "5988eea71c8697534a98b947"
    text: {```^/   bfont: make font! [size: 15 style: [bold]]^/   button "Clear" 70x50 [ f/text: copy ""] bfont ^/```        }
    sent: "2017-08-07T22:50:15.023Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5988eea52723db8d5e8320d1"
    text: {Can someone tell me what I should be doing, since my code yields an invalid syntax error at [make font!...:}
    sent: "2017-08-07T22:50:13.457Z"
    editedAt: "2017-08-07T22:50:55.637Z"
    v: 2
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5988e6c4a7b406262d6933b6"
    text: {Though we may not cover all details and subtleties in the primer. It will be good to have them, so they can be extracted to other docs.}
    sent: "2017-08-07T22:16:36.903Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988e69e4bcd78af5621843c"
    text: "It's a wiki. Correct at will."
    sent: "2017-08-07T22:15:58.143Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988d7ff2723db8d5e82d0c4"
    text: {@greggirwin The Primer would need to be corrected for this subtlety.}
    sent: "2017-08-07T21:13:35.799Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5988d7b5a7b406262d68fe3e"
    text: {> @Enamex `to` creates a new value, copying the underlying buffers if any. `as` just coerces a series type to another compatible type in the same type class, underlying buffers are shared. `to` is defined for almost all types, while `as` is only defined for `any-string!` and `any-block!` type classes.^/^/Can I point out that `any-block!` includes `hash!`, and `as` is not defined on `hash!` (do a `? as` in the console and you will see).}
    sent: "2017-08-07T21:12:21.021Z"
    editedAt: "2017-08-07T21:12:33.175Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5988d2aa2723db8d5e82c07b"
    text: "@geekyi  Thanks for the additional options"
    sent: "2017-08-07T20:50:50.986Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5988c8bb1c8697534a9826f9"
    text: "Yes! `extract` works!"
    sent: "2017-08-07T20:08:27.297Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988c7ddc101bc4e3af86668"
    text: {Would be better if you have control of your data structures}
    sent: "2017-08-07T20:04:45.967Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988c7c4bc464729746094ba"
    text: "Anything I can place instead of `?func?`"
    sent: "2017-08-07T20:04:20.260Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988c7a2bc46472974609435"
    text: {```red^/adata: [Information 204.255.204 Warning 255.255.153 Error 255.204.204]^/kind: 1^/msgtype: pick extract adata 2 kind ; not sure about this^/bgcolor: select adata msgtype^/```}
    sent: "2017-08-07T20:03:46.423Z"
    editedAt: "2017-08-07T20:07:35.356Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "5988c6dfee5c9a4c5f9c5a9a"
    text: "Even better, if keys aren't needed."
    sent: "2017-08-07T20:00:31.526Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988c637a7b406262d68ba10"
    text: {@kpeters58 why noy just remove the numbering altogether:^/```red^/adata: [[204.255.204 "Information"] [255.255.153 "Warning"] [255.204.204 "Error"]]^/kind: 1^/bgcolor:  adata/:kind/1^/msgtype:  adata/:kind/2^/```}
    sent: "2017-08-07T19:57:43.699Z"
    editedAt: "2017-08-07T19:58:03.495Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5988c4e1329651f46efb89cd"
    text: "Thanks, Gregg - much appreciated"
    sent: "2017-08-07T19:52:01.949Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5988c4c22723db8d5e827ec2"
    text: {```^/adata:    #(0 [204.255.204 "Information"] 1 [255.255.153 "Warning"] 2 [255.204.204 "Error"])^/kind: 1^/bgcolor:  first select adata kind^/msgtype:  second select adata kind^/^/bgcolor:  adata/:kind/1^/msgtype:  adata/:kind/2^/```}
    sent: "2017-08-07T19:51:30.439Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988c4b84bcd78af5620f473"
    text: {@kpeters58, you can't really simplify it, because you're using integers as keys, which makes path syntax ambiguous, and will default to `pick` behavior, not `select`. You could wrap it in a helper func, or use a `map!`. Map will be the cleanest there, but if you need it to be a block, a wrapper isn't bad.}
    sent: "2017-08-07T19:51:20.051Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988c31d210ac2692060efb1"
    text: {@geekyi, will port and add a link to the implementation once discussion says it's being considered. }
    sent: "2017-08-07T19:44:29.132Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988ba0e614889d475286efe"
    text: "With kind being 0, 1 or 2"
    sent: "2017-08-07T19:05:50.211Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5988b9ecc101bc4e3af82d09"
    text: {```^/        adata:    [0 [204.255.204 "Information"] 1 [255.255.153 "Warning"] 2 [255.204.204 "Error"]]^/        bgcolor:  first select adata kind^/        msgtype:  second select adata kind ^/```}
    sent: "2017-08-07T19:05:16.117Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5988b9ea210ac2692060c5ca"
    text: "Can this be simplified?"
    sent: "2017-08-07T19:05:14.895Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5988b58e1c8697534a97d3d9"
    text: {:point_up: [August 7, 2017 8:19 PM](https://gitter.im/red/help?at=5988af2676a757f808821d7a) @geekyi, It's funny :D So far I haven't been able to get macros to work in a `.reds` file (it gives me `*** Compilation Error: unknown directive macro`) but they work fine in Red proper :P}
    sent: "2017-08-07T18:46:38.699Z"
    editedAt: "2017-08-07T18:47:32.216Z"
    v: 2
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5988b51e1c8697534a97d28b"
    text: {Also a link for this would be nice :) https://github.com/red/red/wiki/REP-0101---For-loop-function#assistance :^/>  I have an implementation and manual test suite to get the ball rolling.}
    sent: "2017-08-07T18:44:46.868Z"
    editedAt: "2017-08-07T18:44:58.965Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5988b4c11c8697534a97d128"
    text: {@greggirwin some have a separate repo to track Enhancement proposals. Then you can use github issues for discussion, and github projects to track status}
    sent: "2017-08-07T18:43:13.961Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988b161bc46472974603438"
    text: "Comments can be added at the end."
    sent: "2017-08-07T18:28:49.161Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988b0ff210ac26920609d6e"
    text: {What magic does it do? Not sure how best to track comments on REPs at this point.}
    sent: "2017-08-07T18:27:11.349Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988b0d2bc4647297460324b"
    text: {My *opiniion* still is that it does too much *magic*,  a `range!` object or similar may be more useful in my opinion..}
    sent: "2017-08-07T18:26:26.707Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988b0be2723db8d5e82273c"
    text: {Yes. Needs work to run under Red, and want to make sure it's what we want. }
    sent: "2017-08-07T18:26:06.409Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988b043210ac26920609a5d"
    text: {But doesn't hurt having an implementation I think.. @greggirwin I think I'd be able to critique your proposal more if I had code to run :p }
    sent: "2017-08-07T18:24:03.003Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988b000c101bc4e3af80333"
    text: {@Enamex to be precise, the design is for a better interface (like api) than for implementation}
    sent: "2017-08-07T18:22:56.237Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988afe7a7b406262d685248"
    text: {Not long ago, I read a bit on REXX as well, which has some interesting loop combo abilities.}
    sent: "2017-08-07T18:22:31.283Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988afcd210ac269206097f3"
    text: {Thanks @geekyi. ^/^/Using a macro for this is fine, too, though how much you gain from doing it at compile time isn't known. A bit, certainly, mostly helpful with nested loops perhaps.}
    sent: "2017-08-07T18:22:05.631Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988af75bc46472974602b4d"
    text: {@greggirwin https://github.com/red/red/wiki/REP-0101---For-loop-function/_history}
    sent: "2017-08-07T18:20:37.854Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988af2676a757f808821d7a"
    text: {Also, I think @PeterWAWood is right in this case, *macros* are specifically for Red/System, while `for`is supposed to be used as a red runtime function}
    sent: "2017-08-07T18:19:18.210Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "5988af16a7b406262d684f65"
    text: "@Enamex, where is your wiki example?"
    sent: "2017-08-07T18:19:02.559Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988aea7ee5c9a4c5f9bee29"
    text: "Feel free to answer :)"
    sent: "2017-08-07T18:17:11.380Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988ae4d2723db8d5e821d61"
    text: {@Enamex good question, I'd thought I'd post on stackoverflow too: https://stackoverflow.com/q/45553267/5798459}
    sent: "2017-08-07T18:15:41.895Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5988a8222723db8d5e8204f3"
    text: {@PeterWAWood The example I'd added to the wiki page seems to cover most (except for `cfor` functionality?) of the variants put forward in this proposal.^/It was meant more as an example implementation.^/www.red-lang.org/2016/12/entering-world-of-macros.html^/@rgchris }
    sent: "2017-08-07T17:49:22.201Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5988a8202723db8d5e8204ef"
    text: "Great!"
    sent: "2017-08-07T17:49:20.714Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5988a6afbc46472974600511"
    text: {`To/as` note added to https://github.com/red/red/wiki/Primer.}
    sent: "2017-08-07T17:43:11.682Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5988a103329651f46efaf3de"
    text: {@Enamex `to` creates a new value, copying the underlying buffers if any. `as` just coerces a series type to another compatible type in the same type class, underlying buffers are shared. `to` is defined for almost all types, while `as` is only defined for `any-string!` and `any-block!` type classes.}
    sent: "2017-08-07T17:18:59.720Z"
    editedAt: "2017-08-07T17:20:42.673Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59886be8614889d4752703f3"
    text: "What're the differences between `as` and `to`"
    sent: "2017-08-07T13:32:24.255Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59880251c101bc4e3af53524"
    text: "@dockimbel Thanks."
    sent: "2017-08-07T06:01:53.506Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5987f28945fc670746ff42c0"
    text: {@PeterWAWood You can just use `rc` to invoke the Red toolchain from a Rebol console, and pass it a string representing the command-line.}
    sent: "2017-08-07T04:54:33.682Z"
    editedAt: "2017-08-07T04:55:00.320Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5987cd9ca7b406262d64f80f"
    text: {@rgchris No at the moment. There is a proposal for a [`for` dialect](https://github.com/red/red/wiki/REP-0101---For-loop-function).}
    sent: "2017-08-07T02:17:00.804Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5987c61945fc670746fec6dd"
    text: "Does Red have a function akin to `FOR`?"
    sent: "2017-08-07T01:44:57.816Z"
    editedAt: "2017-08-07T01:45:54.754Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5987b49745fc670746fe9e2b"
    text: {You will probably need to add ` --config [export-ABI: 'stdcall]` to the arguments if you are running on Windows.}
    sent: "2017-08-07T00:30:15.181Z"
    editedAt: "2017-08-07T00:31:50.388Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5987b41776a757f8087e7bc6"
    text: {There may be some issues with the compiler finding the libRed source if you haven't used `build libRed` after a git merge. (I don't know the code well enough to be certain).}
    sent: "2017-08-07T00:28:07.346Z"
    editedAt: "2017-08-07T00:28:47.228Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5987b3b176a757f8087e7a97"
    text: {@Enamex As far as I know, you can't currently set the output path using the Red binary. You might be able to do so by patching the call to the compiler directly if you have Rebol installed.^/^/From a Rebol console:^/```text^/>> do %red.r                                                                    none               ^/== none^/>> redc/main/with "-o my-libRed -r libred/libRed.red"^/"-o my-libRed -r libred/libRed.red"^/^/-=== Red Compiler 0.6.3 ===- ^/^/Compiling red/libred/libRed.red ...^/...compilation time : 1665 ms^/^/Target: Darwin ^/^/Compiling to native code...^/...compilation time : 42735 ms^/...linking time     : 507 ms^/...output file size : 1318912 bytes^/...output file      : red/my-libRed.dylib ^/```}
    sent: "2017-08-07T00:26:25.289Z"
    editedAt: "2017-08-07T00:34:42.150Z"
    v: 4
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5987a84b210ac269205cd6b3"
    text: {Right now following a first compile with `red` libRed is put in my project workspace.^/Is there a way to tell red to put it in a subdirectory and reference all the `.r` and `.dll` files from there? It's cluttering up my project's top directory}
    sent: "2017-08-06T23:37:47.922Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5986589545fc670746fad1f9"
    text: "@kpeters58 alternative: `view/no-wait`"
    sent: "2017-08-05T23:45:25.604Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59865639ee5c9a4c5f945a57"
    text: {Thanks - that makes sense. I was trying to mimic old Rebol2 code used in conjunction with Dobeash's RebGui which apparently worked quite differently.}
    sent: "2017-08-05T23:35:21.748Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5986550b1c8697534a903446"
    text: {@kpeters58 does that help? You can auto-generate with `compose` repetitious `VID` code like the `field`s}
    sent: "2017-08-05T23:30:19.950Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5986543d329651f46ef3ac1e"
    text: {```red^/Red [^/    Title: "Test title"^/    Needs: View^/]^/^/context-2: context [ ; File: %form.2red^/^/    form-2: layout [^/        below^/        text "Field 1"   fld-1:  field 200^/        text "Field 2"   fld-2:  field 200^/        text "Field 3"   fld-3:  field 200^/    ]^/^/    init-form: [^/        ; can dynamically load from db here^/        fld-1/text: "Straw"^/        fld-2/text: "Wood"^/        fld-3/text: "Bricks"^/        view form-2^/    ]^/^/]^/^/context-1: context [ ; File: %form1.red^/    form-1: layout [^/        button "Call form-2" [do context-2/init-form]^/    ]^/    view form-1^/]^/```}
    sent: "2017-08-05T23:26:52.954Z"
    editedAt: "2017-08-05T23:27:43.208Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5986526145fc670746fac032"
    text: {Actually, I find no reason the commented code inside `init-form` to not work, except putting `view form-2` at the end}
    sent: "2017-08-05T23:18:57.216Z"
    editedAt: "2017-08-05T23:20:54.471Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "598651b6210ac2692059249d"
    text: {Might have to do `context-2/fld-1/text: "Straw"`}
    sent: "2017-08-05T23:16:06.110Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5986514676a757f8087a90a7"
    text: {@kpeters58 Simply try `fld-1/text: "Straw"` , you could set it on a button press event like in `form-1` if you want to load dynamically}
    sent: "2017-08-05T23:14:14.977Z"
    editedAt: "2017-08-05T23:14:51.809Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5986513f329651f46ef3a660"
    text: {thanks for that one - had been wondering why only part of the code was highlighted....}
    sent: "2017-08-05T23:14:07.678Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59864fccbc4647297458857a"
    text: {@kpeters58 triple backticks are helpful to properly print code, type `ctrl+shift+m` for more info}
    sent: "2017-08-05T23:07:56.618Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598630a9f5b3458e30b3942f"
    text: {^/Red [ needs: 'view^/      File: %form1.red^/    ]^/^/do %form2.red^/^/context-1: context [^/^/    form-1: layout [^/        button "Call form-2" [do context-2/init-form]^/    ]^/    view form-1^/]^/^/^/Red [ needs: 'view^/      File: %form.2red^/    ]^/^/context-2: context [^/^/    form-2: layout [^/        below^/        text "Field 1"   fld-1:  field 200^/        text "Field 2"   fld-2:  field 200^/        text "Field 3"   fld-3:  field 200^/    ]^/    ^/    init-form: [^/        view form-2^/        { will read values from db in real life, so it cannot be hardcoded }^/        ^/;        fld-1/text: "Straw"^/;        fld-2/text: "Wood"^/;        fld-3/text: "Bricks"^/    ]^/]^/^/}
    sent: "2017-08-05T20:55:05.481Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "598630a8bc464729745834fd"
    text: {Given the two files below, what am I missing to be able to set the fields via init-form?}
    sent: "2017-08-05T20:55:04.228Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5986146145fc670746fa16b4"
    text: {I read the GUI page several times... How'd I miss that.}
    sent: "2017-08-05T18:54:25.625Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59860ff5a7b406262d602505"
    text: {@Enamex ^/* [Yes](http://www.red-lang.org/2014/12/050-objects-support.html) (Detecting changes in objects)^/* and [yes](http://www.red-lang.org/2016/03/060-red-gui-system.html) (Object ownership system)}
    sent: "2017-08-05T18:35:33.369Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59860e9876a757f80879ce91"
    text: {Do you have access to a secret stash of examples somewhere? :P}
    sent: "2017-08-05T18:29:44.132Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59860d854bcd78af5618415c"
    text: {AFAIK it's a part of Red's WIP object ownership system}
    sent: "2017-08-05T18:25:09.330Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59860cdcc101bc4e3aefcd69"
    text: "@9214 `on-change*` O.O"
    sent: "2017-08-05T18:22:20.381Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "59860afb2723db8d5e79df69"
    text: "though it definetly should be a ~~DSL~~ dialect"
    sent: "2017-08-05T18:14:19.183Z"
    editedAt: "2017-08-05T18:14:40.011Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59860a8d45fc670746f9f7c9"
    text: {crude static typing prototype^/```text^/ctx: context [^/    on-change*: func [var old new][^/        if not-equal? type? old type? new [^/            print "nay"^/            self/var: old^/        ]^/    ]^/    var: 42^/]^/^/probe ctx/var^/ctx/var: "abracadabra"^/probe ctx/var^/ctx/var: 10^/probe ctx/var^/```}
    sent: "2017-08-05T18:12:29.170Z"
    editedAt: "2017-08-05T18:12:39.106Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5986086ff5b3458e30b310fa"
    text: {A bit more vocabulary, which may help. Words, used as variables, don't "accept" values, they *refer* to them. And a word can refer to any type of value at any time. In that sense, Red is dynamically typed. There is never a time when a word is locked to a specific type.^/^/Red/System is different, and is statically typed, like C.}
    sent: "2017-08-05T18:03:27.846Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598604e6614889d4751fd5a9"
    text: {Am I right that you want to "lock" some "variable" to the first type it setted on? I.e. if `var: 42` then `var` can be setted only to `integer!` values?}
    sent: "2017-08-05T17:48:22.580Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "598604a076a757f80879b1e3"
    text: {```^/>> answer: 42^/== 42^/>> type? answer^/== integer!^/>> type? 'answer^/== word!^/```^/You can't change neither type of the `answer` nor the type of `42`, but you may rebound `answer` word to a different value with a different type.}
    sent: "2017-08-05T17:47:12.031Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "598603644bcd78af5618241f"
    text: {By strongly you're referring to the absence of implicit conversions.^/But if 'variables' can always accept any type (as in, on different lines, invoking `type? var` could give different results) then it's not statically typed (and its dynamic typing is missing something I don't know the name of; would otherwise have to give an error if a variable is assigned a value of a type different from its current values (and so essentially is locked to the first type it gets--of the init)).}
    sent: "2017-08-05T17:41:56.414Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5985ffbe45fc670746f9d496"
    text: {Values are strongly typed. Words may refer to any type of value.}
    sent: "2017-08-05T17:26:22.828Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985ffb02723db8d5e79be44"
    text: {Always a tough call in terminology. "variables" is a shortcut for "values words may refer to". :^^\}
    sent: "2017-08-05T17:26:08.954Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985ff8376a757f808799e94"
    text: {you know, good vocabulary leads to strong mental model ;)}
    sent: "2017-08-05T17:25:23.964Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985ff6a45fc670746f9d3c2"
    text: {maybe we should say `words` instead of `variables` to avoid confusion?}
    sent: "2017-08-05T17:24:58.723Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985ff3745fc670746f9d30f"
    text: "Values are strongly typed. Variables are not."
    sent: "2017-08-05T17:24:07.641Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985ff11614889d4751fc215"
    text: {@greggirwin Sorry, had to leave for a bit. Rather, something like:... Actually, does Red even have the notion of statically checking types? From playing around it feels mostly dynamically checked}
    sent: "2017-08-05T17:23:29.476Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5985fec4614889d4751fc175"
    text: {It will return a word if given a word arg, but we wrap it, so we always know we're going to get a block in this case.}
    sent: "2017-08-05T17:22:12.135Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985fe4b4bcd78af561812c6"
    text: {`bind` returns block with words binded to anonymous context one way or another}
    sent: "2017-08-05T17:20:11.763Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985fe16614889d4751fbf25"
    text: {Ah, nevermind, you're right. Just remove the outer block there. Duh.}
    sent: "2017-08-05T17:19:18.149Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985fdf4210ac269205836b4"
    text: {No. It's needed. Otherwise the body block isn't eval'd when creating the closed func.}
    sent: "2017-08-05T17:18:44.781Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985fd2f45fc670746f9cc38"
    text: {Indeed. May be a relic from an earlier limitation in Red. Good catch.}
    sent: "2017-08-05T17:15:27.581Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985fd17f5b3458e30b2e8e5"
    text: "sounds like poetry :wine_glass: "
    sent: "2017-08-05T17:15:03.395Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "5985fce7614889d4751fba4f"
    text: {```^/closure: func [vars spec body][func spec bind body context vars]^/```}
    sent: "2017-08-05T17:14:15.381Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985fcc745fc670746f9ca02"
    text: "@greggirwin I think `compose` can be omitted"
    sent: "2017-08-05T17:13:43.553Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5985fc15f5b3458e30b2e346"
    text: {I think @JacobGood1 did the original `closure` that's modeled on. Credit to him.}
    sent: "2017-08-05T17:10:45.265Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985fbc7210ac26920582e65"
    text: "Can you give an example of what you're after?"
    sent: "2017-08-05T17:09:27.785Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985fb3e4bcd78af56180a34"
    text: {@greggirwin OK, that's not what I was asking about but it's awesome O.O}
    sent: "2017-08-05T17:07:10.427Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5985f33b1c8697534a8f0e32"
    text: {```^/>> closed-fn 1^/== 2^/>> closed-fn 1^/== 3^/>> closed-fn 1^/== 4^/```}
    sent: "2017-08-05T16:32:59.920Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f3254bcd78af5617edf1"
    text: {```^/closure: func [^/    vars [block!] "Values to close over, in spec block format"^/    spec [block!] "Function spec for closure func"^/    body [block!] "Body of closure func; vars will be available"^/][^/    func spec compose [(bind body context vars)]^/]^/closed-fn: closure [var: 1] [n] [var: var + n]^/```}
    sent: "2017-08-05T16:32:37.765Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f28fa7b406262d5fc43b"
    text: {You can also create pseudo-closures, or do things in trickier ways.}
    sent: "2017-08-05T16:30:07.866Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f2601c8697534a8f0b18"
    text: {```^/ctx: context [^/^-var: 1^/^-set 'exported-func func [][print var]^/]^/```}
    sent: "2017-08-05T16:29:20.303Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f2284bcd78af5617e9be"
    text: {@Enamex, can you give an example of what you want to do? You can create a context, with a function inside it, and use a word in that context.}
    sent: "2017-08-05T16:28:24.067Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985dba1bc46472974571c45"
    text: {Can one specify a static type of a 'local variable' outside a function?}
    sent: "2017-08-05T14:52:17.200Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5985b9e32723db8d5e78d10f"
    text: {I was using `curl` but now Red supports everything I needed from it.}
    sent: "2017-08-05T12:28:19.433Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5985a8dd2723db8d5e78a2a0"
    text: {@pekr Yes you can run the `curl` executable on the command line.}
    sent: "2017-08-05T11:15:41.317Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598594fda7b406262d5e94a5"
    text: {I think that LibCurl can be used also from a command line, so one can use Red's `call`facility eventually, but not 100% sure ....}
    sent: "2017-08-05T09:50:53.003Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5985915fc101bc4e3aee4de7"
    text: "I woud guess that the library is LibCurl."
    sent: "2017-08-05T09:35:27.832Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59858d3df5b3458e30b188d2"
    text: {@PeterWAWood I have read that someone in the past has used some kind of external library to  do this kind of networking work. I supposed to receive answers about using that library to achive full communication capabilities but I need the libraryname and examples}
    sent: "2017-08-05T09:17:49.449Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "59858114210ac2692056a295"
    text: {@GiuseppeChillemi ^/Red is still in the alpha phase of its development. The current release is Version 0.6.3. The first fully complete Red will be Version 1.0.. Features are continually being added to Red as it progresses to Version 1.0..^/^/There is a [Trello Roadmap](https://trello.com/b/FlQ6pzdB/red-tasks-overview) which indicates at which stage various features will be delivered. (It is probably best to read [The Red Project Approach](https://github.com/red/red/wiki/Red-Project-Approach) to understand the context of the Trello Roadmap).^/^/Red 0.6.3 includes temporary I/O features including support of HTTP and HTTPS  (GET, POST, PUSH, HEAD and DELETE).^/^/The `port!` datatype which will enable full I/O support is planned for Version 0.7.0. The Trello card for 0.7.0 under Milestones lists the protocol support planned to be provided in Version 0.7.0.^/^/The Trello card for I/O under Road to 1.0 lists the protocol support that is planned to be added before Version 1.0 is released.^/^/FTP is not currently included in either list. It is possible that someone from the community wiil contribute a FTP implementation once the `port!' datatype is available.^/}
    sent: "2017-08-05T08:25:56.607Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5985759bbc4647297455eaf1"
    text: {I need the HTTP , FTP, EMAIL and HTTPS protocols. Are they in red or should I use something else?}
    sent: "2017-08-05T07:36:59.291Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "59848b7045fc670746f54ba0"
    text: {Quick-test is [documented] but the documents need to be updated ... as does quick-test itself ... though not `quick-test.red` or `quick-test.reds`.}
    sent: "2017-08-04T14:57:52.449Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59848ae8329651f46eee16b4"
    text: {@Enamex Quick-test is a very basic test framework that we initially wrote for testing Red/System (before Red). It is used to run the regression tests. If you run the tests, quick-test will create and populate:^/```text^/quick-test/quick-test.log^/quick-test/runnable/^/system/tests/source/units/auto-tests/^/tests/source/units/auto-tests/^/```}
    sent: "2017-08-04T14:55:36.044Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598487fc1c8697534a8a9bbb"
    text: {@PeterWAWood Are system and tests directories made by quick-test somehow? (Actually, what is quick-test... :P)}
    sent: "2017-08-04T14:43:08.175Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5984800bc101bc4e3aeae193"
    text: {@Enamex `lib*` to ignore files spawned by libRedRT compilation}
    sent: "2017-08-04T14:09:15.471Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59847e24329651f46eedd169"
    text: {We discussed adding a sample to the website (or wiki) but it hasn't been done yet. This is an extract of the most common files to ignore from mine:^/```text^/.gitignore^/quick-test/quick-test.log^/quick-test/runnable/^/system/tests/source/units/auto-tests/^/tests/source/units/auto-tests/^/crush.dll^/```}
    sent: "2017-08-04T14:01:08.872Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "598477d6a7b406262d5af7b6"
    text: "Is there a suggested .gitignore for Red projects?"
    sent: "2017-08-04T13:34:14.397Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "5983c41697cedeb0482761a8"
    text: {For those who need epoch with subsecond precision conversion:^/```^/to-date: func [dt][either float? dt [1-Jan-1970 + to time! dt][to date! dt]]^/to-float: func [dt][either date? dt [to float! difference dt 1-Jan-1970][to float! dt]]^/```^/Test:^/```^/  date: now/precise^/;   4-Aug-2017/2:16:10.183843+02:00^/  epoch-with-subseconds: to-float date^/;   1501805770.183843^/  to-date epoch-with-subseconds^/;   4-Aug-2017/0:16:10.183843^/```}
    sent: "2017-08-04T00:47:18.609Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5982221876a757f8086c370b"
    text: {Almost. `Red/System` as well, plus optional BOM. From %lexer.r:^/```^/^-header: [^/^-^-pos: thru "Red" (rs?: no) opt ["/System" (rs?: yes stack/push 'Red/System)]^/^-^-any-ws block-rule (stack/push value)^/^-^-| (throw-error/with "Invalid Red program") end skip^/^-]^/^/^-program: [^/^-^-pos: opt UTF-8-BOM^/^-^-header^/^-^-any-value^/^-^-opt wrong-end^/^-]^/```}
    sent: "2017-08-02T19:03:52.137Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598215a376a757f8086c02ec"
    text: {```text^/red []^/^/Red blah [...]^/^/Red [File: %bad-script.red]^/^/42^/```^/```text^/*** Error: not a Red program!^/```}
    sent: "2017-08-02T18:10:43.868Z"
    editedAt: "2017-08-02T18:16:58.545Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5982152776a757f8086c011f"
    text: {though, am I right that only `Red` keyword followed by `[` with optional blanks in between counts as a start of the header?}
    sent: "2017-08-02T18:08:39.571Z"
    editedAt: "2017-08-02T18:08:52.076Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "598210dd614889d47511f941"
    text: "Yeah, `load` FTW!!! :clap: "
    sent: "2017-08-02T17:50:21.442Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "598210a3614889d47511f83b"
    text: {@rebolek ;)^/```text^/This is a preface! Roses are red, the pill is RED too!^/^/    rEd^/    [_]^/   [___]^/  [_____]^/^/Red [^/    "]]]"^/    ^{]]]^}^/    ^{"^{"^}^}^/    ^{^^^{^}^/]^/^/source-of: func [^/    "get source of the script without preface and header"^/    script [file!]^/    /header "get only header instead"^/    /local^/        blanks [bitset!]^/        head   [block!]^/        source [string!]^/        i      [integer!]^/][  ^/    ; skip preface and Red keyword^/    parse/case read script [^/        (blanks: charset reduce [cr lf space tab] head: copy [] i: 0)^/        thru ["Red" any blanks ahead "["]^/        s: to end^/    ]^/    ; now parse the source directly^/    parse load s [set head block! source: to end]^/^/    return either header [head][source]^/]^/^/probe source-of system/options/script^/probe source-of/header system/options/script^/```}
    sent: "2017-08-02T17:49:23.092Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59820cbd210ac269204a55cf"
    text: {Ignore stuff between `"` and `{}`, but that's easier said than done :)}
    sent: "2017-08-02T17:32:45.201Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59820c992723db8d5e6ba358"
    text: {@9214 you are parsing string, there is no `series!`}
    sent: "2017-08-02T17:32:09.677Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59820c602723db8d5e6ba2b8"
    text: "`skip` if `series!` ?"
    sent: "2017-08-02T17:31:12.714Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59820c49a7b406262d522c7e"
    text: "@rebolek any tips?"
    sent: "2017-08-02T17:30:49.278Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59820c29329651f46ee4e686"
    text: "@rebolek :scream: "
    sent: "2017-08-02T17:30:17.662Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59820c101c8697534a814f3a"
    text: {@9214 Nice, but what about `Red[Title: "]]]"]`? ;)}
    sent: "2017-08-02T17:29:52.098Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5981fcfb4bcd78af5609f890"
    text: "Nice @9214. "
    sent: "2017-08-02T16:25:31.339Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5981bdbfbc464729744844d8"
    text: "thanks"
    sent: "2017-08-02T11:55:43.923Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5981bdbcc101bc4e3ae05668"
    text: {@rebolek yeah, I overlook that some rules don't advance the input and one needs to do it explicetely}
    sent: "2017-08-02T11:55:40.963Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5981b69fa7b406262d50af12"
    text: {For example ^/```^/>> parse "abcd" [collect some [not #"a" keep skip | skip]]^/== [#"b" #"c" #"d"]^/```}
    sent: "2017-08-02T11:25:19.220Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5981b4f876a757f8086a515a"
    text: "this result seems super counter intuitive"
    sent: "2017-08-02T11:18:16.056Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5981b4e51c8697534a7fc61f"
    text: {```^/>>parse "abcd" [collect [keep any not #"a"]]^/== [#"a"]^/```}
    sent: "2017-08-02T11:17:57.782Z"
    editedAt: "2017-08-02T11:18:07.727Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5981b4e34bcd78af5608b7b4"
    text: {how exactly does the `collect keep` work with `not` in `parse`?}
    sent: "2017-08-02T11:17:55.786Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5981af411c8697534a7fadfc"
    text: "though `i` is leaking :sweat_smile:"
    sent: "2017-08-02T10:53:53.175Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5981abe02723db8d5e69f429"
    text: {:point_up: [31 июля 2017 г., 11:48](https://gitter.im/red/help?at=597ed2b245fc670746df4fab)^/^/*with voice of Palpatine* ^/Yes... yes! Let the parse-rules flow through you! :godmode: ^/```text^/This is a preface! Roses are red, the pill is RED too!^/^/    rEd^/    [_]^/   [___]^/  [_____]^/^/Red [[[][[]][[[]]][[[[]]]]]]^/^/source-of: func [^/    "get source of the script without preface and header"^/    script [file!]^/    /local^/        blanks [bitset!] ^/        source [string!]^/][^/    parse/case read script [^/        (blanks: charset reduce [cr lf space tab] i: 0)^/        thru ["Red" any blanks ahead "["]^/        some [^/            "[" (i: i + 1) ^/        |   "]" (i: i - 1) ^/        |   if  (i = 0) source: break^/        |   skip^/        ]^/        to end^/    ]^/^/    return load source^/]^/^/probe source-of system/options/script^/```}
    sent: "2017-08-02T10:39:28.350Z"
    editedAt: "2017-08-02T10:47:24.904Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597f4e79bc464729743ef072"
    text: {On the loading question, once `load/all` is in place, will that do what you want?}
    sent: "2017-07-31T15:36:25.879Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597f3e412723db8d5e60bf33"
    text: {@Enamex `view` is in the modules folder of red sources. It's the only one, the code for that is probably a stub}
    sent: "2017-07-31T14:27:13.734Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597f3be7210ac269203f91c6"
    text: {@Enamex Modules are not supported yet, they will come in 0.8.0, see https://trello.com/b/FlQ6pzdB/red-tasks-overview}
    sent: "2017-07-31T14:17:11.941Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f29754bcd78af56feea8a"
    text: {:point_up: [July 31, 2017 6:17 AM](https://gitter.im/red/help?at=597eaf6876a757f8085ecb05)^/How are libraries managed then?^/For example I tried `Needs: ['View 'MadeUpModule]` and got an error that "module not found: MadeUpModule" so there's at least a way to get Red to search for inclusions through `Needs: ['x]`?}
    sent: "2017-07-31T12:58:29.873Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "597f1fcb45fc670746e06a42"
    text: {I'm also curious if there are other checks like file endings. ^/eg. `load %image.png`file with metadata containing `created with Red [embedded version]` (that's too unlikely to happen, right?)}
    sent: "2017-07-31T12:17:15.864Z"
    editedAt: "2017-07-31T12:18:12.267Z"
    v: 2
    author: "569c37abe610378809bccdff"
)#(
    id: "597f1f3076a757f80860537e"
    text: {:clap: awesome!  But there is the unsolved problem that you can only include Red code *after*, not in the *middle*}
    sent: "2017-07-31T12:14:40.916Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597f15e6614889d475064a68"
    text: {```^/>> script: {Red Green </html> not actual Red code Red [ blah []] "actual Red code"}                  ^/== {Red Green </html> not actual Red code Red [ blah []] "actual Red code"}^/>> parse script [(ws: charset reduce [#" " cr lf tab]) some ["Red" start: any ws #"[" p: to end | skip]]^/== true^/>> code: next next load skip start -3                                                                ^/== ["actual Red code"]^/```}
    sent: "2017-07-31T11:35:02.906Z"
    editedAt: "2017-07-31T11:35:36.747Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f14b0c101bc4e3ad64ab0"
    text: {@geekyi `parse` is actually better that `find`, but `collect` is not needed. This would be enough IMO:}
    sent: "2017-07-31T11:29:52.956Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f147d45fc670746e03caa"
    text: {Too contrived? I was thinking something between`find/all "Red"` and `parse`}
    sent: "2017-07-31T11:29:01.108Z"
    editedAt: "2017-07-31T11:29:48.657Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "597f141f4bcd78af56fe95e1"
    text: {@rebolek yes, I was going to say that but what about ^/```red^/Red Green </html> not actual Red code Red [ blah []] "actual Red code"^/```}
    sent: "2017-07-31T11:27:27.351Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597f135ff5b3458e30994ee3"
    text: {@geekyi That's easy^/```^/>> parse "Red               [" [(ws: charset reduce [#" " cr lf tab]) "Red" any ws #"["]^/== true^/```}
    sent: "2017-07-31T11:24:15.667Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f132045fc670746e03863"
    text: "@geekyi yes, thanks!"
    sent: "2017-07-31T11:23:12.617Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597f1293a7b406262d469363"
    text: {> I mean, it could be `Red[]` or `Red []` or even `Red                       []`^/^/```red^/Red                       []^/```}
    sent: "2017-07-31T11:20:51.503Z"
    editedAt: "2017-07-31T11:21:06.844Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "597f12061c8697534a759af5"
    text: {Because it can be:^/```^/Red [^/    Authors: ["John" "Paul" "George" "Ringo"]^/]^/```}
    sent: "2017-07-31T11:18:30.390Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f11e4a7b406262d469141"
    text: "oh, right!"
    sent: "2017-07-31T11:17:56.426Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597f11cd45fc670746e03344"
    text: {that's one thing, but `thru "]"` is the main problem.}
    sent: "2017-07-31T11:17:33.391Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f11b4329651f46ed98c5e"
    text: "dang, gitter eated up all spaces :D"
    sent: "2017-07-31T11:17:08.562Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597f11aba7b406262d468fdf"
    text: {I mean, it could be `Red[]` or `Red []` or even `Red                       []`}
    sent: "2017-07-31T11:16:59.243Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597f116d76a757f808601f0e"
    text: {And Red header is of course "everything else".}
    sent: "2017-07-31T11:15:57.851Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f1158614889d4750637ff"
    text: {It is fine for some data, but very dangerous for everything else.}
    sent: "2017-07-31T11:15:36.568Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f11452723db8d5e5ffa81"
    text: "This exactly the problem with `to` and `thru`."
    sent: "2017-07-31T11:15:17.707Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f10ee210ac269203ee885"
    text: {though `"Red ["` is error-prone^/```^/load first parse read %file.red [collect [thru "Red [" thru "]" keep to end]]^/```}
    sent: "2017-07-31T11:13:50.367Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597f10054bcd78af56fe8774"
    text: {Also, this version does not make new string and is shorter:^/```^/>> next next load find read/binary %test.red "Red["^/== [print 1 + 1]^/```}
    sent: "2017-07-31T11:09:57.050Z"
    editedAt: "2017-07-31T11:11:29.822Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f0f8a76a757f8086017e6"
    text: {Yeah, I agree. I don't think the code in question is Unicode either.. not sure}
    sent: "2017-07-31T11:07:54.106Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597f0f54329651f46ed983e6"
    text: {Anyway, I think it should just skip to `Red[...`, ignoring encoding.}
    sent: "2017-07-31T11:07:00.322Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f0f2d329651f46ed982ff"
    text: "Rebol2 doesn’t understand UTF8"
    sent: "2017-07-31T11:06:21.195Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f0f1176a757f808601674"
    text: "Rebol2"
    sent: "2017-07-31T11:05:53.389Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597f0f0ba7b406262d46876b"
    text: "Rebol 2 or 3?"
    sent: "2017-07-31T11:05:47.536Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f0efef5b3458e30993e1a"
    text: {Initially thought it would be simple, but @9214 error happens in Red, and Rebol chokes on the different encoding}
    sent: "2017-07-31T11:05:34.653Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597f0eec2723db8d5e5ff24d"
    text: "IMO both. "
    sent: "2017-07-31T11:05:16.986Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597f0e6b4bcd78af56fe7fc4"
    text: {Should `load`:^/1. ignore everything before `Red[]`, ^/2. including invalid utf-8 ?^/When `load`ing a `%file`?^/^/It makes embedding Red after a foreign code trivial. Such as in [polyglot competitions](https://codegolf.stackexchange.com/questions/102370/add-a-language-to-a-polyglot)^/[latest answer for reference](https://codegolf.stackexchange.com/questions/102370/add-a-language-to-a-polyglot/136766#136766)}
    sent: "2017-07-31T11:03:07.414Z"
    editedAt: "2017-07-31T11:12:14.982Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "597ed56fa7b406262d45ab52"
    text: "You're welcome."
    sent: "2017-07-31T06:59:59.816Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597ed560614889d47505536b"
    text: "@rebolek thanks!"
    sent: "2017-07-31T06:59:44.866Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597ed5082723db8d5e5f107b"
    text: {Anyway, here is a solution:^/```^/>> next next load first parse read %test.red [collect [to "Red[" keep to end]]^/== [print 1 + 1]^/```}
    sent: "2017-07-31T06:58:16.084Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597ed4e1210ac269203e0783"
    text: {```^/>> print read %test.red^/blabla,^/Red[]^/print 1 + 1^/>> load %test.red^/*** Syntax Error: invalid value at ",Red[]print 1 + 1"^/```}
    sent: "2017-07-31T06:57:37.814Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597ed4dd2723db8d5e5f1016"
    text: {@9214 I don't think so, this is fine in Rebol, but not in Red:^/}
    sent: "2017-07-31T06:57:33.803Z"
    editedAt: "2017-07-31T06:57:46.336Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597ed463a7b406262d45a842"
    text: "@rebolek it does"
    sent: "2017-07-31T06:55:31.529Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597ed412614889d475054dd5"
    text: {IMO it should look like `load %script.red`, that's how it works in Rebol, but I think that Red does not support preface text yet.}
    sent: "2017-07-31T06:54:10.575Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597ed36bf5b3458e30986032"
    text: {my gut tells me that it should look like this: `parse <loaded-script> [thru <red-header-rule> src: to end] src`, but then I can't figure out how to write `<red-header-rule>` :confused: it should be `Red` keyword, then optional spacers, then `block!`.}
    sent: "2017-07-31T06:51:23.765Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597ed2b245fc670746df4fab"
    text: {what's the easiest way to `load` script without Red header and without preface (i.e. without any data before Red header)?}
    sent: "2017-07-31T06:48:18.251Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597ec6be4bcd78af56fd887f"
    text: {@greggirwin No problem, thanks for the general solution! ^/@rebolek Yes, it keeps trying to find the needle in remaining series, which is endlessly returned. }
    sent: "2017-07-31T05:57:18.677Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "597ec5ab329651f46ed885c3"
    text: {@toomasv, sorry I didn't target the use case you posted. Working too quickly for the general answer in the first part of your message.}
    sent: "2017-07-31T05:52:43.888Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597ec27abc464729743cd1d4"
    text: {@toomasv That's because the `any` version never returns `none`.}
    sent: "2017-07-31T05:39:06.405Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597eba37329651f46ed8680b"
    text: {^^ "... it stalls `while`".}
    sent: "2017-07-31T05:03:51.489Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "597eb3ba329651f46ed857a8"
    text: {Thanks @greggirwin ! But the problem with your solution in the specific use case mentioned above is that it stalls `with`. As I am trying to mimick `/all` refinement with `find` I need to stop `while` when search fails.  @rebolek 's solution works well:^/```^/>> s: [a b d f a c]^/== [a b d f a c]^/>> s1: clear [] while [all [t: find/skip s 'a 2 s: t]][attempt [append s1 copy/part s 2 s: skip s 2]]^/>> head s^/== [a b d f a c]^/>> s1^/== [a b a c]^/```^/With your solution it would be:^/```^/>> s1: clear [] while [s: any [find/skip s 'a 2 s]][attempt [append s1 copy/part s 2 s: skip s 2]]^/```^/but it stalls.}
    sent: "2017-07-31T04:36:10.448Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "597eaf6876a757f8085ecb05"
    text: {@Enamex There is nothing like that written yet and it probably can't be written until after the design of modules has been completed (and probably until after they are implemented).^/^/Currently, there is the `do` function which will load and evaluate a Red file (when it is supplied with a `file!` value) and the [pre-processor `#include` directive](https://doc.red-lang.org/en/preprocessor.html#__include).}
    sent: "2017-07-31T04:17:44.751Z"
    editedAt: "2017-07-31T04:19:55.979Z"
    v: 6
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597e94964bcd78af56fd0b25"
    text: {Is there something written on project management in Red/Rebol? Like abstraction patterns: managing separate source files and including them and all that. Remember there was mention of a `module!` type that needed to be implemented first?}
    sent: "2017-07-31T02:23:18.135Z"
    v: 1
    author: "584c38a1d73408ce4f3c1cc9"
) #(
    id: "597e4d88c101bc4e3ad3e974"
    text: ":)"
    sent: "2017-07-30T21:20:08.859Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e4d2af5b3458e3096ed0c"
    text: {I was going to say "my cell wall" but I am allowed to leave sometimes. :^^)}
    sent: "2017-07-30T21:18:34.361Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e4d05614889d47503d65b"
    text: ":D"
    sent: "2017-07-30T21:17:57.248Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e4cd5a7b406262d4442f0"
    text: {The tally marks on my wall say you're still ahead of me Bolek. ;^^)}
    sent: "2017-07-30T21:17:09.405Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e4c8145fc670746ddf2a2"
    text: {The curse of Red. Most days we feel brilliant, but then we miss something someone else sees and feel unworthy.}
    sent: "2017-07-30T21:15:45.621Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e4c5bc101bc4e3ad3e5da"
    text: {i.e., default to self reassignment in the case of failure.}
    sent: "2017-07-30T21:15:07.919Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e4c58210ac269203c942a"
    text: "Ah, of course. Now I feel stupid."
    sent: "2017-07-30T21:15:04.666Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e4c3f76a757f8085dc609"
    text: {```^/>> s: [a b c]^/== [a b c]^/>> s: find s 'c^/== [c]^/>> head s^/== [a b c]^/>> s: any [find s 'd s]^/== [c]^/>> head s^/== [a b c]^/```}
    sent: "2017-07-30T21:14:39.296Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "597e4c37bc464729743b9dab"
    text: {You can work around it without too much effort, using `any`.}
    sent: "2017-07-30T21:14:31.853Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597e483e210ac269203c868c"
    text: "@toomasv You're welcome."
    sent: "2017-07-30T20:57:34.470Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e477d76a757f8085db77a"
    text: "@rebolek Thanks!"
    sent: "2017-07-30T20:54:21.727Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "597e4735c101bc4e3ad3d6a4"
    text: {I don't think you can do it without some temporary value:^/```^/>> s^/== [1 2 3]^/>> all [t: find s 3 s: t]^/== [3]^/>> s^/== [3]^/>> all [t: find s 4 s: t]^/== none^/>> s^/== [3]^/```}
    sent: "2017-07-30T20:53:09.735Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597e45c3329651f46ed73622"
    text: {Is it possible to use `find` without destroying the series if needle is not found but the series is reassigned? Eg:^/```^/>> s: [a b c]^/== [a b c]^/>> s: find s 'c^/== [c]^/>> head s^/== [a b c]^/>> s: find s 'd^/== none^/>> head s^/*** Script Error: head does not allow none! for its series argument^/*** Where: head^/*** Stack:  ^/```^/Use case where it would be needed:^/```^/>> s: [a b f d a c]^/== [a b f d a c]^/>> s1: clear [] ^/>> while [s: find/skip s 'a 2][attempt [append s1 copy/part s 2 s: skip s 2]]^/>> s^/== none^/>> s1^/== [a b a c]^/>> head s^/*** Script Error: head does not allow none! for its series argument^/*** Where: head^/*** Stack:  ^/```^/When `s` is a long block used over and over again to search/extract different values, then failed search is scary.}
    sent: "2017-07-30T20:46:59.544Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "597dfaf2c101bc4e3ad2efa4"
    text: {Thanks @BlackATTR_twitter! (and @planetsizecpu  :^^)}
    sent: "2017-07-30T15:27:46.936Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597df8bc4bcd78af56fb3af2"
    text: "@BlackATTR_twitter thank you!"
    sent: "2017-07-30T15:18:20.932Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597df810614889d47502c3bf"
    text: {@greggirwin https://github.com/red/red/wiki/Red---Rebol-Dialects:--Selected-Articles-and-Links}
    sent: "2017-07-30T15:15:28.479Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597dbd8c210ac269203ad2a3"
    text: {@greggirwin as I said a weeks ago, your like a surprises box,  I love awk & grep in bsh scripting, so good job :+1: }
    sent: "2017-07-30T11:05:48.276Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "597cf35845fc670746da3058"
    text: {Near the bottom of http://www.rebol.org/ml-display-thread.r?m=rmlKCCJ are some RAWK examples. }
    sent: "2017-07-29T20:43:04.525Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cedc6614889d4750008d0"
    text: {Yeah! That sounds great. I want to make a simplified version of the file-list stuff, and need to port some other old tools as well:^/^/- https://gist.github.com/greggirwin/6397bdfe8e9e7dd9f3d543bc4b0e570c^/- https://gist.github.com/greggirwin/2dfe6bc45f596592c890b52d1d7f9475^/^/Some of the earliest tools I wrote in Rebol.}
    sent: "2017-07-29T20:19:18.352Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597ceceaf5b3458e309320ea"
    text: {File-globbing and, extending globbing more broadly to tags, strings and other values has been a lot of fun. It's writing a dialect to generate parse rules which support other dialects.}
    sent: "2017-07-29T20:15:38.373Z"
    editedAt: "2017-07-29T20:16:01.856Z"
    v: 3
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597cecb045fc670746da1b4d"
    text: {That's very kind. It's always great to hear that I've provided value and helped others.}
    sent: "2017-07-29T20:14:40.596Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cebefc101bc4e3ad00972"
    text: {@greggirwin Both you and @rgchris are legends. Almost everything I use rebol for derives in some way from scripts that you, Chris and a handful of others have done. It's probably not easy to see that, but the stuff you guys have contributed over the years has benefitted many people. }
    sent: "2017-07-29T20:11:27.210Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597cebb245fc670746da1832"
    text: {I did some tinkering on Pratt parsing as well, some years back. }
    sent: "2017-07-29T20:10:26.255Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597ceb5ef5b3458e30931b6f"
    text: {Nice link Chris! @BlackATTR_twitter, glad if something helped.}
    sent: "2017-07-29T20:09:02.203Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597ceaaa76a757f80859e296"
    text: {@rgchris  Thanks! You have a bunch of great scripts which would fit this list. And (among many scripts) I should  add Gregg's File globbing module, http://www.rebol.org/view-script.r?script=file-list.r  which I found enormously relevant for figuring out a few things that I needed.}
    sent: "2017-07-29T20:06:02.758Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597ce46aa7b406262d405325"
    text: {@BlackATTR_twitter Brett has a good collection of links [here](https://forum.rebol.info/t/building-evaluative-dialects/157) with regard to creating DSLs with evaluative qualities.}
    sent: "2017-07-29T19:39:22.145Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597cb658bc46472974371857"
    text: "That sounds great @BlackATTR_twitter. Thanks!"
    sent: "2017-07-29T16:22:48.212Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cb41f2723db8d5e594917"
    text: {@greggirwin Yes, that's a good idea. I will try to get that posted in short order. There are about 50 or so links of varying quality and depth, though some are quite old.}
    sent: "2017-07-29T16:13:19.951Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597cb3e1329651f46ed2d71c"
    text: {This index will be also be quasi-searchable using typeahead.js (Twitter's opensource typeahead widget), and indeed I'm building a dialect which controls the publishing of the site and generating the JSON needed to populate the widget.}
    sent: "2017-07-29T16:12:17.991Z"
    editedAt: "2017-07-29T16:17:02.588Z"
    v: 2
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597cb37d45fc670746d974b0"
    text: {As part of this article, which will go on a new website, I will be providing an index of pages, resources etc. for building Red/Rebol DSLs.}
    sent: "2017-07-29T16:10:37.521Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597cb34bbc46472974370c28"
    text: {I'm still working on an article for a DSL I've been writing. Getting an article written is somewhat challenging due to the need for any reader to: 1. Know at least some of the basics of Red and key differences between it and other languages. 2. Have a pretty solid gist of the way Parse works-- which is probably unlike anything most programmers have used before and which really isn't similar to Red/Rebol in any way, and 3. THEN we can cover what a dialect is (vs DSL or minilanguage) and frame-out how a solution with broad applicability can be approached. }
    sent: "2017-07-29T16:09:47.625Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597cb2bcf5b3458e309272a0"
    text: {Nice @BlackATTR_twitter. Do you know if we have a wiki page with DSL links? If not, would you create one?}
    sent: "2017-07-29T16:07:24.860Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cb1f0614889d475ff526e"
    text: {Some links/resources for Rebol DSLs-- a question which was asked in the main Red room.^/http://www.rebol.org/ml-display-thread.r?m=rmlGRXJ^/http://www.kealist.com/^/http://rebol.desajn.net/rswf/^/http://rebol2.blogspot.com/2012/02/basic-intepreter.html^/https://gist.github.com/tormaroe/1497179^/http://re-bol.com/starting_computer_programming_with_rebol.html#section-3^/http://lambda-the-ultimate.org/node/1240^/http://rebol2.blogspot.com/2012/01/tui-dialect-dialect-to-print-ascii.html^/http://www.codeconscious.com/rebol/dialects.html^/http://web.archive.org/web/20120510120959/http://www.rebolforces.com/zine/rzine-1-02.html#sect7.^/https://softwareengineering.stackexchange.com/questions/297886/rebol-refinements-vs-dialects-vs-objects}
    sent: "2017-07-29T16:04:00.991Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "597ca8822723db8d5e592957"
    text: "@greggirwin Thanks!"
    sent: "2017-07-29T15:23:46.563Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597ca6b2614889d475ff2e3a"
    text: {Started https://github.com/red/red/wiki/Macro-Notes}
    sent: "2017-07-29T15:16:02.184Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597c1c681c8697534a6d05ec"
    text: {@rgchris When you read your source code, everything that can be considered as code only at run-time is out-of-reach for the compiler and stored as data.}
    sent: "2017-07-29T05:26:00.929Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c177e210ac26920365835"
    text: {I do need to learn more about optimising code for compilation though. Pretty sure most of what I write takes advantage of dynamic features.}
    sent: "2017-07-29T05:05:02.916Z"
    editedAt: "2017-07-29T05:05:18.250Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597c16a445fc670746d7bdac"
    text: {I'm tempted to make macros first-class citizens, but that is potential highly-disruptive for other language semantics (and could hinder the current compilation process), so that would really need a preliminary deep study.}
    sent: "2017-07-29T05:01:24.110Z"
    editedAt: "2017-07-29T05:02:30.423Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c14ce45fc670746d7b7f4"
    text: {In fairness, there is an *alias* example on the [introduction page](http://www.red-lang.org/2016/12/entering-world-of-macros.html) : )  That's the only feature I'm using for now, but only temporarily.}
    sent: "2017-07-29T04:53:34.180Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597c1433a7b406262d3e023d"
    text: {For purely preprocessing source code, macros bring nothing that we don't already have.  Maybe the only gain there, could be a bit more familiar approach to people used to macro systems in other languages, though that would only apply to named macros, pattern-matching ones are just pure Parse rules. So, I suggest using macros in Red as an optimization tool (which is what they are good for), rather than the default go-to tool for source preprocessing (better use the core language facilities for that for now).}
    sent: "2017-07-29T04:50:59.371Z"
    editedAt: "2017-07-29T04:58:04.165Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c12bc329651f46ed10c2f"
    text: {The only reason macros are there is to move costly computations from run-time to compile-time. What I mean by "costly" is computations that take enough time to be perceived by a human (anything less is not worth moving to macros), or that consumes huge memory chunks, or that require external resources which are not possible or expensive to use at run-time.}
    sent: "2017-07-29T04:44:44.136Z"
    editedAt: "2017-07-29T04:47:56.636Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c12564bcd78af56f5eb16"
    text: {Yeah, it's probably an abuse using them to pre-process Rebol scripts. Though it is working for that, except when it isn't.}
    sent: "2017-07-29T04:43:02.560Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597c11a41c8697534a6cec0e"
    text: {As a reminder, macros purpose is only to provide a compile-time optimization. There is nothing that macros can do that you can't do as well with regular code, with same expressive power. Macros support in interpreted code is just for compatibility reasons with the compiler.}
    sent: "2017-07-29T04:40:04.345Z"
    editedAt: "2017-07-29T04:40:43.643Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c111df5b3458e3090a864"
    text: {@rgchris `do` invokes the interpreter, so whatever you put after it, is not compiled. The compiler "equivalent" of `do` is the `#include` directive. The `#include` directive is converted to `do` when the script is run from the interpreter, so that the symmetry is preserved.}
    sent: "2017-07-29T04:37:49.819Z"
    editedAt: "2017-07-29T04:39:35.191Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c10ef329651f46ed106c6"
    text: {I notice I can also **do read %two.red** though that likely means the contents of **%two.red** are not compiled, right?}
    sent: "2017-07-29T04:37:03.404Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597c1086614889d475fd8a49"
    text: "Gotcha. (also, rtfm!)"
    sent: "2017-07-29T04:35:18.410Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597c1037329651f46ed104ef"
    text: {Macros will most probably move at a later stage (becoming context-aware), once we get some assurance that it is safe to do so. }
    sent: "2017-07-29T04:33:59.204Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c0ff7f5b3458e3090a648"
    text: {@rgchris The current macros support happens at preprocessing stage (at final part of `load`). Macros are accumulated and applied globally.  You can constraint that using `#local` and `#reset` [directives](https://doc.red-lang.org/en/preprocessor.html).}
    sent: "2017-07-29T04:32:55.235Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597c0e16a7b406262d3df3fd"
    text: "To answer my own first question—seemingly so."
    sent: "2017-07-29T04:24:54.385Z"
    editedAt: "2017-07-29T04:24:58.837Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597c0cc3c101bc4e3acd90e3"
    text: {If I do:^/^/```lisp^/do %one.red^/do %two.red^/```^/^/Where **%one.red** contains macros, do those macros apply to **%two.red**? If so, is this by design and is there a way to suppress this?}
    sent: "2017-07-29T04:19:15.996Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597b7f39a7b406262d3c4a89"
    text: "@RnBrgn You're welcome."
    sent: "2017-07-28T18:15:21.175Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b7c5d2723db8d5e55d54c"
    text: {I have a better understanding.  I didn't understand how the function arguments [a b] were getting  their values. Sort  passes them to the function.  Good to see how many comparisons are made with the print option you suggested . knowing the details of  quicksort is for another day but it's good to be aware that it's based on specific algorithms for efficiency for now.  Thank you for your time. }
    sent: "2017-07-28T18:03:09.746Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "597b78174bcd78af56f42250"
    text: {```lisp^/>> sort/compare names function [a b] [print [a b] a < b]^/frank joe^/lou joe^/don lou^/don joe^/don frank^/== ["don" "frank" "joe" "lou"]^/```}
    sent: "2017-07-28T17:44:55.994Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b76cef5b3458e308ed605"
    text: {@RnBrgn No, it doesn't need to. It will just select another couple for comparison. By default, it uses the [quicksort](https://en.wikipedia.org/wiki/Quicksort#Algorithm) algorithm. You can print the couple values if you want to see how many comparisons are done:}
    sent: "2017-07-28T17:39:26.641Z"
    editedAt: "2017-07-28T17:44:47.331Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b76902723db8d5e55be71"
    text: {OK,  so when a false result is returned the positions swap and the sort algorithm has to restart from the beginning each time until each couple returns true? }
    sent: "2017-07-28T17:38:24.768Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "597b65dd76a757f808554a43"
    text: {@RnBrgn The sorting algorithm will process all the values in the block, but two by two. For each selected couple, it calls your function and passes them as arguments. Depending on the returned value from your function, they will be swapped (`false` returned) or kept at same position (`true` returned).}
    sent: "2017-07-28T16:27:09.512Z"
    editedAt: "2017-07-28T16:27:34.091Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b635f45fc670746d58c30"
    text: {You can also create a stable sort, by returning `[-1 0 1]` for `[< = >]` comparisons.^/```^/>> blk: [[b b] [b a] [a b] [a a]]^/== [[b b] [b a] [a b] [a a]]^/>> sort/compare copy blk func [a b] [case [a/1 < b/1 [-1] a/1 > b/1 [1] 'else [0]]]^/== [[a b] [a a] [b b] [b a]]^/```}
    sent: "2017-07-28T16:16:31.173Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597b5289f5b3458e308e42be"
    text: {@RnBrgn that's exactly how it works. Function must return `true` to sort values. See this example:^/```^/>> names: ["frank" "louise" "jo" "donnnie"]^/== ["frank" "louise" "jo" "donnnie"]^/>>  sort/compare names function [a b] [(length? a) < (length? b)]^/== ["jo" "frank" "louise" "donnnie"]^/```^/This sorts strings by their length.}
    sent: "2017-07-28T15:04:41.192Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "597b4ddb45fc670746d52f90"
    text: {Beginner question here...  ^/Can you  please give me a high level explanation on how the sort/compare with function works. The function only has two arguments and it's sorting the block .^/```^/names: ["joe" frank" "lou" "don"]^/sort/compare names function [a b] [a < b]^/```}
    sent: "2017-07-28T14:44:43.809Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "597b138b329651f46ecd8f70"
    text: "https://github.com/Prosumma/vim-rebol"
    sent: "2017-07-28T10:35:55.081Z"
    v: 1
    author: "597b09d4d73408ce4f6f23e1"
) #(
    id: "597b13834bcd78af56f28aa7"
    text: "I found a vim plugin for Rebol3. "
    sent: "2017-07-28T10:35:47.400Z"
    v: 1
    author: "597b09d4d73408ce4f6f23e1"
) #(
    id: "597b12e41c8697534a69761a"
    text: "thanks"
    sent: "2017-07-28T10:33:08.421Z"
    v: 1
    author: "597b09d4d73408ce4f6f23e1"
) #(
    id: "597b12e1f5b3458e308d2ed4"
    text: "@9214 ok... :smile: "
    sent: "2017-07-28T10:33:05.066Z"
    v: 1
    author: "597b09d4d73408ce4f6f23e1"
) #(
    id: "597b12b189aea4761ddff4ee"
    text: {@OhCoder AFAIK no, there's couple Emacs packages for Rebol and Red though}
    sent: "2017-07-28T10:32:17.387Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597b120cf5b3458e308d2bf2"
    text: {Hi all, is there a vim highlight plugin for red? Thanks!}
    sent: "2017-07-28T10:29:32.388Z"
    v: 1
    author: "597b09d4d73408ce4f6f23e1"
) #(
    id: "5979b2fc329651f46ec8aa27"
    text: {How to get `parse` keywords (with %xml.red and %html-tools.red):^/```^/>> page: xml/decode read http://www.red-lang.org/2013/11/041-introducing-parse.html^/>> tables: select-by-tag page 'table^/>> foreach table tables [print mold get-table table/table/tbody]^/[^/    ["ahead&nbsp;rule&nbsp;" {: look-ahead rule, match the rule, but do not advance input.}] ^/    ["end" {: return success if current input position is at end.}] ^/    ["none" ": always return success (catch-all rule)."] ^/    ["not rule" ": invert the result of the sub-rule."] ^/    ["opt rule" ": look-ahead ^^/rule, optionally match the rule."] ^/    (...)^/```}
    sent: "2017-07-27T09:31:40.837Z"
    editedAt: "2017-07-27T09:31:58.487Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597759e52723db8d5e463d70"
    text: "@dockimbel roger that!"
    sent: "2017-07-25T14:47:01.936Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597759cbc101bc4e3abc5531"
    text: {@9214 Looks like a bug, worth a ticket (just be sure to provide a complete source code that exhibits the error).}
    sent: "2017-07-25T14:46:35.066Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597647f82723db8d5e41f617"
    text: {@dockimbel what do you think?^/```^/#macro my-macro: func [] [do %my-func.red]^/probe [my-macro]^/```^/`%my-func.red` is^/```^/func [][42]^/```^/All of this results in^/```^/*** Script Error: PARSE - get-word refers to a different series! :s^/*** Where: parse^/*** Stack: expand-directives expand^/```}
    sent: "2017-07-24T19:18:16.204Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597642da45fc670746c1cc1f"
    text: "I would say it's a bug"
    sent: "2017-07-24T18:56:26.473Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59764295f5b3458e307ad4d3"
    text: "well, seems good enough for me"
    sent: "2017-07-24T18:55:17.033Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59764285f5b3458e307ad4b4"
    text: {```text^/>> do %my-function.red^/== func [][42]^/```}
    sent: "2017-07-24T18:55:01.247Z"
    editedAt: "2017-07-24T18:55:14.632Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5976423d45fc670746c1c82b"
    text: "can you `do %my-function.red` in console?"
    sent: "2017-07-24T18:53:49.615Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59764229714ea96f781add89"
    text: {well, yes, you have a definition of your macro here}
    sent: "2017-07-24T18:53:29.265Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5976420145fc670746c1c759"
    text: {@maximvl yeah, but for `my-macro` to be defined `do` must run first}
    sent: "2017-07-24T18:52:49.206Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597641def5b3458e307ad16c"
    text: {```^/*** Preprocessor Error: Syntax error^/*** Where: #macro my-macro: do %my-function.red^/    func^/^/*** Throw Error: no catch for throw: halt-request^/*** Where: throw^/*** Stack: expand-directives expand^/```}
    sent: "2017-07-24T18:52:14.525Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59764176bc464729741f74e5"
    text: "@9214 what's the error?"
    sent: "2017-07-24T18:50:30.088Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5976416b714ea96f781ada7e"
    text: {macro code is executed at compile time and the result of that is what replaces the macro calls}
    sent: "2017-07-24T18:50:19.117Z"
    editedAt: "2017-07-24T18:51:10.954Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5976363b614889d475e72d2e"
    text: {@maximvl nuh-uh, results in syntax error, and I think that `do` will run at runtime anyway, so you can't make `my-macro` at compile time like that}
    sent: "2017-07-24T18:02:35.296Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59762d18c101bc4e3ab792fe"
    text: "`#macro my-macro: do %my-function.red` ?"
    sent: "2017-07-24T17:23:36.035Z"
    editedAt: "2017-07-24T17:26:23.655Z"
    v: 5
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5975af57c101bc4e3ab532c0"
    text: {[3 ~~star~~ sharp](http://wiki.c2.com/?ThreeStarProgrammer) programmer :P}
    sent: "2017-07-24T08:27:03.796Z"
    editedAt: "2017-07-24T08:33:10.833Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5975af13329651f46eb8c5fa"
    text: {@dockimbel roughly `#macro my-macro: #include %my-function.red` there `%my-function.red` contains something like `func [][1 + 1]`}
    sent: "2017-07-24T08:25:55.992Z"
    editedAt: "2017-07-24T08:32:48.588Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5975655a1c8697534a53434d"
    text: {@9214^/ > can I make a macro from function defined in other file?^/^/What do you mean by "from function"?}
    sent: "2017-07-24T03:11:22.467Z"
    editedAt: "2017-07-24T03:11:37.520Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597564a9f5b3458e30770d27"
    text: {@rgchris It is resolved as an `op!` value, matched against the input, and failing so you get a `false` as result. I remember a ticket for something similar, asking for a more stricter checking. If you can't find that ticket you can open a new one. Currently this is allowed in Red and Rebol2:^/```lisp^/>> parse reduce [:append :mold :or :xor :and][append to end]^/== true^/```^/We could restrict it like in R3, though that would require extra code and create an inconsistency, but the benefit would be more errors caught in Parse from beginners or eventual typos from experienced users.}
    sent: "2017-07-24T03:08:25.150Z"
    editedAt: "2017-07-24T03:10:01.811Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5974f7441c8697534a51eca4"
    text: {(was expecting an error as I'm refactoring some Rebol 3 code)}
    sent: "2017-07-23T19:21:40.116Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5974f6ebf5b3458e3075aa41"
    text: {Is AND a keyword in Parse? I know that AHEAD is equivalent to Rebol 3's AND, however I don't  get an error (or effect) when I use AND in a rule:^/^/```lisp^/>> parse "foo" [and "f" to end]^/== false^/```}
    sent: "2017-07-23T19:20:11.104Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5974bfae2723db8d5e3bef18"
    text: {for now I can't include macro defined in other file (https://github.com/red/red/issues/2871), but can I make a macro from *function* defined in other file?}
    sent: "2017-07-23T15:24:30.896Z"
    editedAt: "2017-07-23T15:24:53.679Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59749b9e45fc670746bb790c"
    text: {@dockimbel yeah, that's exactly what I thought, thanks!}
    sent: "2017-07-23T12:50:38.597Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59749b83614889d475e0e724"
    text: {@9214 You are modifying the block referred by `range` in `unfold`, so you need to clone it, either when passing to `unfold`, or better inside `unfold`.}
    sent: "2017-07-23T12:50:11.327Z"
    editedAt: "2017-07-23T12:50:24.451Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597493a2614889d475e0cc62"
    text: {another thing I want to clarify, see:^/```text^/#do [^/    unfold: func [^/        range [block!]^/        /local^/            spec  [block!]^/            index [integer!]^/            bump  [integer!]^/    ][  ^/        to string! collect [^/            while [not tail? range][^/                spec: head remove at take/part range 3 2^/                forall spec [poke spec 1 to integer! to char! form first spec]^/                set [index bump] spec^/                ^/                until [keep to char! index (index: index + 1) > bump]^/            ]^/        ]^/    ]^/]^/^/#macro letters: func [][unfold [a - c]]^/^/probe letters ; == "abc"^/probe letters ; ?? ""^/```^/Is is because inside `letters` body `block!` is used as argument? (it works with `unfold copy [a - c]`)}
    sent: "2017-07-23T12:16:34.360Z"
    editedAt: "2017-07-23T12:17:17.340Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597492af329651f46eb4f614"
    text: "@maximvl Thanks. :+1: "
    sent: "2017-07-23T12:12:31.213Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5974929df5b3458e3074379d"
    text: {@dockimbel here you go :) https://github.com/red/red/issues/2920}
    sent: "2017-07-23T12:12:13.069Z"
    editedAt: "2017-07-23T12:12:22.768Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59749193bc4647297418e763"
    text: {@9214 It does, but it is only used when the function is constructed to exclude some words from the gathered list of set-words, so it does not appear in the constructed function anymore.}
    sent: "2017-07-23T12:07:47.865Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59749128c101bc4e3ab1621c"
    text: "Yep, it makes no sense with `func`"
    sent: "2017-07-23T12:06:00.839Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597491174bcd78af56d9a6b9"
    text: {ah, it doesn't work with `func`, only with `function`}
    sent: "2017-07-23T12:05:43.023Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597491162723db8d5e3b4bc6"
    text: {@9214 of course it exists, let me show you an example.}
    sent: "2017-07-23T12:05:42.563Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597490bf2723db8d5e3b4aa8"
    text: {I'm also curious about `/extern` refinement which @greggirwin showed here :point_up: [12 июля 2017 г., 21:37](https://gitter.im/red/red/welcome?at=59665039c101bc4e3a7a9139), does it really exists? (it neither worked for me nor makes any sense)^/}
    sent: "2017-07-23T12:04:15.750Z"
    editedAt: "2017-07-23T12:07:52.340Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59748f9a89aea4761dc71363"
    text: {@9214 Sorry, changed my answer after checking the code. ;-)}
    sent: "2017-07-23T11:59:22.194Z"
    editedAt: "2017-07-23T12:00:25.262Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59748f4a2723db8d5e3b457f"
    text: {@dockimbel okay, so it's basically just `do` this included file twice and won't cause any overhead at run-time?}
    sent: "2017-07-23T11:58:02.889Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59748ee61c8697534a506b72"
    text: {@9214 Red's `#include` does support that feature, though I'm not sure how reliable it is. It is currently primitive and needs a reimplementation, to move it out from the compiler to the preprocessor, where we could add that. Red/System's one does include once only.}
    sent: "2017-07-23T11:56:22.321Z"
    editedAt: "2017-07-23T11:58:18.138Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59748e67f5b3458e30742a0a"
    text: {IIRC files are included only once, but don't quote me on that, I usually work just with interpreter.}
    sent: "2017-07-23T11:54:15.825Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59748e03f5b3458e307427a7"
    text: {Suppose I have `%lib.red`, `%file1.red`, `file2.red` and `%main.red`.  Both `%file1.red` and `%file2.red` `#include` `%lib.red` with some pre-defined constants and functions. `%main.red` in turn `#include`s  `%file1.red`and `file2.red`. ^/^/Question: will same content from `%lib.red` be included twice and should I deal with this duplication at compile time with `#if` or `#either`? I think this called "inclusion guards" or something :)}
    sent: "2017-07-23T11:52:35.758Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59748268614889d475e08f87"
    text: {@maximvl Looks like a bug/regression, the `rules` block should be rebound to the cloned object. Please open a ticket, so I can fix it asap.}
    sent: "2017-07-23T11:03:04.542Z"
    editedAt: "2017-07-23T11:03:29.860Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5974344a2723db8d5e3a25cf"
    text: "@PeterWAWood no, I ran `parser/run` directly."
    sent: "2017-07-23T05:29:46.691Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973e691bc4647297416fab1"
    text: {It is similar to the `copy` and `copy/deep` differences.}
    sent: "2017-07-22T23:58:09.197Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973e5fb3230e14f3a859d5f"
    text: {I believe it was planned but would need @dockimbel to confirm it.}
    sent: "2017-07-22T23:55:39.564Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973e52f1c8697534a4e8120"
    text: {interesting, was it planned like this or just happened?}
    sent: "2017-07-22T23:52:15.454Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973e5174bcd78af56d7b3b8"
    text: {and the `run` was rebinded, this is why I get empty block}
    sent: "2017-07-22T23:51:51.577Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "5973e47f76a757f80838ca2c"
    text: {I think the explanation is that the contents of the rules block is not rebound when making the new object.}
    sent: "2017-07-22T23:49:19.541Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973e1323230e14f3a8590dc"
    text: "we just copy the key/value pairs, aren't we?"
    sent: "2017-07-22T23:35:14.876Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973e110f5b3458e307237fb"
    text: {when I create a new object - the internal words don't get rebinded?}
    sent: "2017-07-22T23:34:40.610Z"
    editedAt: "2017-07-22T23:34:54.903Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973e0efc101bc4e3aaf7bb9"
    text: "@PeterWAWood  what is the explanation of this?"
    sent: "2017-07-22T23:34:07.051Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973df5e89aea4761dc5168c"
    text: {>I find that `parse/run [1 2 3]` gives `[number number number]`^/`p/run [1 2 3]` gives `[]`^/^/wait, wat}
    sent: "2017-07-22T23:27:26.101Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973def4f5b3458e307231b0"
    text: ":-)"
    sent: "2017-07-22T23:25:40.742Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973dede3230e14f3a858a62"
    text: {@PeterWAWood I just copied code from the file, was easier to copy everything including `Red []` :)}
    sent: "2017-07-22T23:25:18.453Z"
    editedAt: "2017-07-22T23:25:30.561Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973de9d1c8697534a4e6cba"
    text: {@maximvl You will get the behaviour you are looking for if you define `state` inside the parse rule instead of the `parser` context:^/```text^/parser: context [^/    rules: [^/^-^-(state: copy [])^/        any [^/            number! (append state 'number) |^/            word!   (append state 'word)   |^/            time!   (append state 'time)^/        ]^/    ]^/    run: func [input] [^/        parse input rules^/        state^/    ]^/]^/```}
    sent: "2017-07-22T23:24:13.440Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973dc9245fc670746b94fde"
    text: {I find that `parse/run [1 2 3]` gives `[number number number]`^/`p/run [1 2 3]` gives `[]`}
    sent: "2017-07-22T23:15:30.711Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973dc2f3230e14f3a8584a0"
    text: {@rebolek When you tested did you include:^/```text^/p: make parser []^/probe p/run [1 2 3]^/```}
    sent: "2017-07-22T23:13:51.282Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973d8bbbc4647297416d492"
    text: {@maximvl Why did you enter `Red []` in the console?}
    sent: "2017-07-22T22:59:07.399Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973c8421c8697534a4e2ab8"
    text: "this is what I have"
    sent: "2017-07-22T21:48:50.299Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973c83cbc4647297416a473"
    text: {```^/--== Red 0.6.3 ==-- ^/Type HELP for starting information. ^/^/>> Red []^/== []^/>> ^/>> parser: context [^/[        state: []^/[        rules: [^/[            any [^/[                number! (append state 'number) |^/[                word!   (append state 'word)   |^/[                time!   (append state 'time)^/[            ]^/[        ]^/[        run: func [input] [^/[            self/state: copy []^/[            parse input rules^/[            self/state^/[        ]^/[    ]^/== make object! [^/    state: []^/    rules: [^/        any [^/            number! (append s...^/>> ^/>> p: make parser []^/== make object! [^/    state: []^/    rules: [^/        any [^/            number! (append s...^/>> probe p/run [1 2 3]^/[]^/== []^/>> probe system/build^/make object! [^/    date: 20-Jul-2017/3:12:09+02:00^/    config: make object! [^/        config-name: 'Windows^/        OS: 'Windows^/        OS-version: 0^/        ABI: none^/        link?: true^/        debug?: false^/        build-prefix: %/C/ProgramData/Red/^/        build-basename: %gui-console-2017-7-17-55847^/        build-suffix: none^/        format: 'PE^/        type: 'exe^/        target: 'IA-32^/        cpu-version: 6.0^/        verbosity: 0^/        sub-system: 'GUI^/        runtime?: true^/        use-natives?: false^/        debug-safe?: true^/        dev-mode?: false^/        need-main?: false^/        PIC?: false^/        base-address: none^/        dynamic-linker: none^/        syscall: 'Linux^/        export-ABI: none^/        stack-align-16?: false^/        literal-pool?: false^/        unicode?: true^/        red-pass?: true^/        red-only?: false^/        red-store-bodies?: true^/        red-strict-check?: true^/        red-tracing?: true^/        red-help?: true^/        legacy: [no-touch]^/        gui-console?: true^/        libRed?: false^/        libRedRT?: false^/        libRedRT-update?: false^/        GUI-engine: 'native^/        modules: [View]^/        show: none^/        command-line: none^/    ]^/]^/== make object! [^/    date: 20-Jul-2017/3:12:09+02:00^/    config: make object! [^/        config-name: 'Windows^/        OS: 'Windows^/        OS-version: 0^/        ABI: none^/        link?: ^/>> ^/```}
    sent: "2017-07-22T21:48:44.062Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973c833329651f46eb2a330"
    text: {@rebolek okey, then we need more professional help here}
    sent: "2017-07-22T21:48:35.744Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bedd3230e14f3a852683"
    text: {@maximvl I tried under Wine and in VBox and everywhere it runs fine.}
    sent: "2017-07-22T21:08:45.437Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973bcdf3230e14f3a852084"
    text: {let's see, could you try the windows one with wine after? :)}
    sent: "2017-07-22T21:00:15.863Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bcc7f5b3458e3071c2ab"
    text: "I will try the official build."
    sent: "2017-07-22T20:59:51.350Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973bcb42723db8d5e38cec4"
    text: "No, still works fine."
    sent: "2017-07-22T20:59:32.041Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973bcae89aea4761dc4aa5d"
    text: "something is definitely going on here "
    sent: "2017-07-22T20:59:26.007Z"
    editedAt: "2017-07-22T20:59:36.519Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bc7a45fc670746b8e83b"
    text: {I build binaries myself, but it's built from same sources with same compiler :)}
    sent: "2017-07-22T20:58:34.736Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973bc3f45fc670746b8e726"
    text: "well, I use the official 6.3 windows binary"
    sent: "2017-07-22T20:57:35.982Z"
    editedAt: "2017-07-22T20:57:42.059Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bc2c4bcd78af56d736de"
    text: "I will rebuild newest console and try it again."
    sent: "2017-07-22T20:57:16.631Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973bc211c8697534a4e0009"
    text: "Yes, sources from that day."
    sent: "2017-07-22T20:57:05.103Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973bc103230e14f3a851d3e"
    text: "@rebolek is it the 6.3 build?"
    sent: "2017-07-22T20:56:48.750Z"
    editedAt: "2017-07-22T20:56:52.777Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bbfd76a757f8083849d0"
    text: "hmm"
    sent: "2017-07-22T20:56:29.783Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bbf62723db8d5e38cc04"
    text: {```^/>> system/build^/== make object! [^/    date: 19-Jul-2017/17:41:32+02:00^/    config: make object! [^/        config-name: 'Linux^/        OS: 'Linux^/        OS-version: 0^/        ABI: none^/>> ^/```}
    sent: "2017-07-22T20:56:22.194Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973bbcb89aea4761dc4a7d5"
    text: {@rebolek  ?^/```^/>> system/build/date^/== 20-Jul-2017/3:12:09+02:00^/```}
    sent: "2017-07-22T20:55:39.879Z"
    editedAt: "2017-07-22T20:55:50.671Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bba44bcd78af56d734b3"
    text: "As I said, it works for me."
    sent: "2017-07-22T20:55:00.582Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973bb98bc4647297416780b"
    text: "wat"
    sent: "2017-07-22T20:54:48.377Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bb882723db8d5e38ca67"
    text: {@maximvl ^/```^/>> parser: context [^/[        state: none^/[        rules: [^/[            any [^/[                number! (append state 'number) |^/[                word!   (append state 'word)   |^/[                time!   (append state 'time)^/[            ]^/[        ]^/[        run: func [input] [^/[            state: copy []^/[            parse input rules^/[            state^/[        ]^/[    ]^/== make object! [^/    state: none^/    rules: [^/        any [^/            number! (append state 'number) | ^/            word! (append state 'word) | ^/         ...^/>> parser/run [1 2 3]^/== [number number number]^/```}
    sent: "2017-07-22T20:54:32.734Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973bb7d614889d475de486e"
    text: {the `state: copy []` does set the object's state, doesn't it?}
    sent: "2017-07-22T20:54:21.487Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bb5f4bcd78af56d733ff"
    text: {I would understand the object creation moment, but not this one..}
    sent: "2017-07-22T20:53:51.433Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bb51614889d475de47e8"
    text: {how can `state` be `none` when calling to `run` function here?}
    sent: "2017-07-22T20:53:37.410Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bb2f45fc670746b8e48d"
    text: {the result I got just now in interpreter is super strange:^/```^/>> parser: context [^/[        state: none^/[        rules: [^/[            any [^/[                number! (append state 'number) |^/[                word!   (append state 'word)   |^/[                time!   (append state 'time)^/[            ]^/[        ]^/[        run: func [input] [^/[            state: copy []^/[            parse input rules^/[            state^/[        ]^/[    ]^/== make object! [^/    state: none^/    rules: [^/        any [^/            number! (append...^/>> p: make parser []^/== make object! [^/    state: none^/    rules: [^/        any [^/            number! (append...^/>> p/run [1 2 3]^/*** Script Error: append does not allow none! for its series argument^/*** Where: append^/*** Stack:  ^/```}
    sent: "2017-07-22T20:53:03.411Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973bb1b45fc670746b8e45b"
    text: "@rebolek in what sense?"
    sent: "2017-07-22T20:52:43.349Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973b8fc329651f46eb2715a"
    text: "@maximvl works for me in interpreter."
    sent: "2017-07-22T20:43:40.898Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973a64289aea4761dc46197"
    text: {I don't get it -  if the `state` inside rules is not the `state` in context - why the fix helps and if the fix helps how come the state doesn't change }
    sent: "2017-07-22T19:23:46.277Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973a5e6614889d475de015f"
    text: {@pekr even if I initialize `state` to `[]` so it doesn't fail after I `run` it the state is empty}
    sent: "2017-07-22T19:22:14.345Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973976a45fc670746b866da"
    text: {If you want to prevent evaluation, you might try to use `construct`instead of `context`, but not sure it will solve your case}
    sent: "2017-07-22T18:20:26.687Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "597391533230e14f3a848fca"
    text: "anything I can do about it?"
    sent: "2017-07-22T17:54:27.231Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973914ec101bc4e3aae8128"
    text: {looks like `rules` value is composed when the object is created}
    sent: "2017-07-22T17:54:22.594Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973912089aea4761dc41b20"
    text: {```^/>> do %state.red^/*** Script Error: append does not allow none! for its series argument^/*** Where: append^/*** Stack: do-file probe  ^/```}
    sent: "2017-07-22T17:53:36.697Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973910fc101bc4e3aae80ce"
    text: {I have a problem here:^/```^/Red []^/^/parser: context [^/^-state: none^/^-rules: [^/^-^-any [^/^-^-^-number! (append state 'number) |^/^-^-^-word!   (append state 'word)   |^/^-^-^-time!   (append state 'time)^/^-^-]^/^-]^/^-run: func [input] [^/^-^-state: copy []^/^-^-parse input rules^/^-^-state^/^-]^/]^/```}
    sent: "2017-07-22T17:53:19.757Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731fee2723db8d5e36c036"
    text: {Also, you can write `ahead [not #"<"]` as `ahead not #"<"`}
    sent: "2017-07-22T09:50:38.723Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59731cdc329651f46eb06296"
    text: "so I had to add same condition to `any`"
    sent: "2017-07-22T09:37:32.382Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731cd23230e14f3a83014a"
    text: {I got it, I had a condition inside `text`, but in `tag` `any` would still go into it}
    sent: "2017-07-22T09:37:22.199Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731cc1329651f46eb06247"
    text: {yay, this one works:^/```^/tag: [t: open-tag (print ["in-tag" t]) any [ahead [not "<"] text | tag] close-tag]^/```}
    sent: "2017-07-22T09:37:05.226Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731bee76a757f808362e6f"
    text: "let me try that `ahead break`"
    sent: "2017-07-22T09:33:34.562Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731b7645fc670746b6c2a6"
    text: "Especially `content`, `open-tag` and `close-tag`"
    sent: "2017-07-22T09:31:34.041Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59731b4c2723db8d5e36af2a"
    text: "maybe I should do a `break` or something on `<`"
    sent: "2017-07-22T09:30:52.152Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "59731b4b45fc670746b6c241"
    text: {See https://github.com/rebolek/red-tools/blob/xml/xml-lite.red }
    sent: "2017-07-22T09:30:51.181Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59731af92723db8d5e36ae37"
    text: {```^/tag: [t: open-tag (print ["in-tag" t]) [close-tag | some [text | tag] close-tag]]^/```}
    sent: "2017-07-22T09:29:29.718Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731af13230e14f3a82fb87"
    text: {I replaced `any` with `some` and it still hangs :(}
    sent: "2017-07-22T09:29:21.396Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731ae22723db8d5e36adf6"
    text: ":)"
    sent: "2017-07-22T09:29:06.421Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59731a99bc464729741457bd"
    text: {@rebolek yes, you are right :) though that doesn't fix the looping issue}
    sent: "2017-07-22T09:27:53.635Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731a7a76a757f808362a87"
    text: {@maximvl why is `text` `any [not #">" skip]`? Did you mean `any [not #"<" skip]`?}
    sent: "2017-07-22T09:27:22.147Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597319e4614889d475dc329a"
    text: "ok, no worries"
    sent: "2017-07-22T09:24:52.426Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597319ba329651f46eb05a94"
    text: {I would use `tag-content: complement charset [#">"]` rather than `not`.^/(Sorry I need to go now.)^/}
    sent: "2017-07-22T09:24:10.929Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973185b1c8697534a4bcefc"
    text: "there should be a way to workaround this issue"
    sent: "2017-07-22T09:18:19.568Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597317dfc101bc4e3aacee16"
    text: {if I change any of them for `some` then empty tags will not be parsed}
    sent: "2017-07-22T09:16:15.175Z"
    editedAt: "2017-07-22T09:16:22.573Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597317abbc46472974144d49"
    text: {@PeterWAWood so I'm trying to parse html tags here, and tag can have no text or other tags, like `<tag></tag>` the whole rule I use is:^/```^/tag: [t: open-tag (print ["in-tag" t]) any [text | tag] close-tag]^/open-tag: ["<" some alphanum-with-specials ">"]^/close-tag: ["</" some alphanum-with-specials ">"]^/text: [any [not ">" skip]]^/```}
    sent: "2017-07-22T09:15:23.371Z"
    editedAt: "2017-07-22T09:15:31.898Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731703329651f46eb05090"
    text: {I find that `any` in a sub-rule where the main rule includes `any`will always send parse into an infinite loop. (The cure is usually that one of them should be `some`). }
    sent: "2017-07-22T09:12:35.050Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5973161b89aea4761dc27375"
    text: {what I want to do here is to stop parsing once I got ">", but not to backtrack the whole thing}
    sent: "2017-07-22T09:08:43.574Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597315f7c101bc4e3aace7c8"
    text: {if I parse using `r1` it goes into infinitive loop}
    sent: "2017-07-22T09:08:07.414Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597315dff5b3458e306f8962"
    text: {let's say I have these rules:^/```^/r1: [any text]^/text: [any [not ">" skip]]^/```}
    sent: "2017-07-22T09:07:43.876Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59731591bc4647297414470a"
    text: {@PeterWAWood  so if the rule fails, the whole parse part is backtracked?}
    sent: "2017-07-22T09:06:25.162Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59730ed11c8697534a4bb184"
    text: "seems legit, thanks"
    sent: "2017-07-22T08:37:37.132Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59730d2e329651f46eb02e33"
    text: {```text^/>> parse ["1"] [not number! to end]^/== true^/```^/}
    sent: "2017-07-22T08:30:38.055Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59730c0576a757f80835fb26"
    text: {@maximvl I think that `not` does not advance the input:^/```text^/>> parse ["1" 1] [not number! string! number!]^/== true^/```}
    sent: "2017-07-22T08:25:41.497Z"
    editedAt: "2017-07-22T08:26:13.076Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59730a04c101bc4e3aacc266"
    text: {@dockimbel could you give an example how to use `not` in `parse`?^/```^/>> parse [x] [not 'y]^/== false^/>> parse [x] [not ['y]]^/== false^/>> parse [3] [number!]^/== true^/>> parse [3] [not number!]^/== false^/>> parse [x] [not number!]^/== false^/>> parse [x] [not [number!]]^/== false^/```}
    sent: "2017-07-22T08:17:08.622Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973087276a757f80835ee89"
    text: {timers implementations are just objects with some meta information and code which are scheduled by the library}
    sent: "2017-07-22T08:10:26.452Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597307d9c101bc4e3aacbc70"
    text: {never heard of it, afaik threading and timers are platform-specific and not a part of standard}
    sent: "2017-07-22T08:07:53.169Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597307b0614889d475dbf32b"
    text: {@maximvl Out of curiosity, does CL have some form of (first-class) timers?}
    sent: "2017-07-22T08:07:12.818Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5973077cf5b3458e306f5aea"
    text: {@maximvl is looking for the donation link on the website}
    status: true
    sent: "2017-07-22T08:06:20.281Z"
    editedAt: "2017-07-22T08:07:09.538Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597307514bcd78af56d4de52"
    text: "oh I can't wait for it"
    sent: "2017-07-22T08:05:37.180Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597307333230e14f3a82ba61"
    text: {@maximvl It is, but until we get full I/O + the real event loop with first-class timers, that's probably the best we can do for now. Right now, timers are bound to face objects.}
    sent: "2017-07-22T08:05:07.065Z"
    editedAt: "2017-07-22T08:05:56.694Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597306a42723db8d5e366e7e"
    text: {@9214 It's the Redbol [ternary operator](https://en.wikipedia.org/wiki/%3F:) version (we should have a better one in the future).}
    sent: "2017-07-22T08:02:44.180Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5973065dc101bc4e3aacb822"
    text: {changing `on-time` rate for every one-shot event is error-prone approach}
    sent: "2017-07-22T08:01:33.124Z"
    editedAt: "2017-07-22T08:02:12.836Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597306263230e14f3a82b6cb"
    text: {@dockimbel I mean there is an event loop and somehow events got placed there}
    sent: "2017-07-22T08:00:38.960Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597305e91c8697534a4b9244"
    text: {btw interesting use of `pick` with `on/off`, never knew it's possible}
    sent: "2017-07-22T07:59:37.055Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597305c7329651f46eb01790"
    text: {@maximvl We could probably just write a wrapper function to handle this kind of one-shot time event. Though, this might be also handled by a new framework that I plan to add to View (but that's a surprise, so won't tell more about it, don't ask ;-))}
    sent: "2017-07-22T07:59:03.279Z"
    editedAt: "2017-07-22T08:00:41.495Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5973059b614889d475dbee16"
    text: {do you think it worth to have one-shot events without hassle with on-time?}
    sent: "2017-07-22T07:58:19.602Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59730589614889d475dbede4"
    text: ":O :clap: "
    sent: "2017-07-22T07:58:01.182Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5973057e1c8697534a4b9153"
    text: "Yes, that's it :)"
    sent: "2017-07-22T07:57:50.542Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973055845fc670746b67a84"
    text: {An quick example: ^/```text^/blink: function [f [object!] mode [logic!]][^/^-f/color: get pick [red white] mode^/^-f/rate: either mode [0:0:0.3][none]^/]^/^/view [f: field on-enter [blink f on] on-time [blink f off]]^/```}
    sent: "2017-07-22T07:57:12.338Z"
    editedAt: "2017-07-22T07:57:17.342Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597305382723db8d5e366a72"
    text: {set rate for a face and change color with `on-time`}
    sent: "2017-07-22T07:56:40.081Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5973051abc46472974141148"
    text: "there is time event"
    sent: "2017-07-22T07:56:10.743Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597304d92723db8d5e366933"
    text: {there should be a way to fire an event which will be delayed for 0.3 secs and whet it happens it will change the color back to white}
    sent: "2017-07-22T07:55:05.753Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973049c76a757f80835e2a3"
    text: "play around with actors?"
    sent: "2017-07-22T07:54:04.022Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59730487614889d475dbeaf7"
    text: {so to make it blinking you need to make color change asynchronous}
    sent: "2017-07-22T07:53:43.840Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973046ec101bc4e3aacb311"
    text: {and this is what is being drawn on the next update}
    sent: "2017-07-22T07:53:18.772Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597304644bcd78af56d4d721"
    text: {while your handler is executed events are waiting, then you call wait and set color to white again}
    sent: "2017-07-22T07:53:08.287Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59730449614889d475dbe9ec"
    text: {@9214 your code sets color to red first, but in order to draw in on a screen event needs to be processed}
    sent: "2017-07-22T07:52:41.969Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5973035445fc670746b674a7"
    text: {plus it seems that whole app freezes for specified amount of seconds}
    sent: "2017-07-22T07:48:36.000Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597302fb329651f46eb0102f"
    text: {I can't get this thing to blink, any ideas?^/```^/view [f: field on-enter [f/color: red wait 0.3 f/color: white]]^/```}
    sent: "2017-07-22T07:47:06.992Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597301824bcd78af56d4cfa8"
    text: "`text` works"
    sent: "2017-07-22T07:40:50.325Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5972f29876a757f80835a90d"
    text: {@9214 ;-) Well I guess `Lisp` is too generic, so they probably have specific, per-Lisp dialect IDs. I guess any random string would do too.}
    sent: "2017-07-22T06:37:12.414Z"
    editedAt: "2017-07-22T06:38:22.837Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972f2573230e14f3a82786b"
    text: "will do, thanks"
    sent: "2017-07-22T06:36:07.897Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5972f24789aea4761dc1ff43"
    text: {@maximvl See: https://doc.red-lang.org/en/view.html#_event_flow}
    sent: "2017-07-22T06:35:51.904Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972f23a614889d475dbb76d"
    text: {> unrecognized language^/^/careful here, I hear them screaming :D}
    sent: "2017-07-22T06:35:38.497Z"
    editedAt: "2017-07-22T06:35:44.377Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "5972f223bc4647297413d2fe"
    text: "@dockimbel what is the event capturing?"
    sent: "2017-07-22T06:35:15.112Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5972f206614889d475dbb6e1"
    text: {@9214 It's an unrecognized language for the syntax colorer, so it's a way to disable it. ;-)}
    sent: "2017-07-22T06:34:46.750Z"
    editedAt: "2017-07-22T06:34:53.147Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972f1cb329651f46eafda6e"
    text: "why you're using `lisp` in code fences? ;)"
    sent: "2017-07-22T06:33:47.186Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972f1a889aea4761dc1fdc5"
    text: {```lisp^/view [base draw [pen black text 10x10 "Hello!" pen white text 9x9 "Hello!" ]]^/```}
    sent: "2017-07-22T06:33:12.629Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972f13445fc670746b63f18"
    text: "@9214 Sure, pretty trivial to do using Draw."
    sent: "2017-07-22T06:31:16.981Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972f11b76a757f80835a528"
    text: "oh, so I can simulate it manually?"
    sent: "2017-07-22T06:30:51.496Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972f0d6c101bc4e3aac7634"
    text: {@9214 Not supported yet, it's meant to provide a shadow effect, by rendering the text twice with a different color (usually a dark one) with a small offset. It's useful when putting a text on a background which color can change.}
    sent: "2017-07-22T06:29:42.819Z"
    editedAt: "2017-07-22T06:30:55.154Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972f086bc4647297413cd7a"
    text: {@dockimbel any hint on `shadow` field in `font` object? ([see Red/Vew docs](https://doc.red-lang.org/en/view.html#_font_object)).}
    sent: "2017-07-22T06:28:22.783Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972ea4fbc4647297413bc66"
    text: {FYI, I have plans to add keys filtering support to VID in 0.6.4.}
    sent: "2017-07-22T06:01:51.449Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972e9b1f5b3458e306efc2e"
    text: {Tha-daaa!^/```^/view [^/    f: field 100x20 hint "type something" on-key [^/        print to integer! event/key^/    ]^/]^/```}
    sent: "2017-07-22T05:59:13.571Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972e91876a757f808358bb1"
    text: {Yeah, with my pitch black desktop background it was hard to notice :)}
    sent: "2017-07-22T05:56:40.533Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972e8d576a757f808358ab2"
    text: {> Graphical window with no-title flag looks identical to the one with no-border flag. Is it Windows-specific or bug?^/^/One still has a border, while the other doesn't.}
    sent: "2017-07-22T05:55:33.871Z"
    editedAt: "2017-07-22T05:55:48.204Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972e8ac76a757f8083589cf"
    text: "Trying to catch up with the discussion above..."
    sent: "2017-07-22T05:54:52.124Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972e86cc101bc4e3aac5e2f"
    text: {From Red/View docs:^/> Event capturing is not enabled by default for performance reasons. Set system/view/capturing?: yes to enable it.}
    sent: "2017-07-22T05:53:48.279Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972e8672723db8d5e360f18"
    text: {Doc saves the day! Now the stupid question - how do I acess `event` object?}
    sent: "2017-07-22T05:53:43.514Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972e808614889d475db9b6c"
    text: {@9214 @rgchris ^/```lisp^/>> system/view/capturing?: yes^/== true^/>> view [f: field hint "type something" on-detect [print "!"]]^/!^/!^/!^/```}
    sent: "2017-07-22T05:52:08.814Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5972e743329651f46eafbbf8"
    text: {I can't remember how to eat keys just now. Just returning `'stop`, even on key down doesn't do it. I'm out tomorrow, but will try to remember to look into this if nobody beats me to it.}
    sent: "2017-07-22T05:48:51.164Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5972e5b4c101bc4e3aac573d"
    text: {@greggirwin this kinda works^/```^/view [^/    f: field 100x20 hint "type something" on-key-up [^/        if 5 = length? f/text [remove back tail f/text]^/    ]^/]^/```^/but after fifth character carriage jumps back to the beginning of the string, plus there's slight delay in deletion}
    sent: "2017-07-22T05:42:12.020Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972e52e76a757f808357d5c"
    text: {Probably won't be too long before we get an example of masked inputs, since people will want to see how to do that properly as well.}
    sent: "2017-07-22T05:39:58.089Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5972e4bd45fc670746b61989"
    text: {You could use on-key-up (other than for repeats), so changes you make won't recurse.}
    sent: "2017-07-22T05:38:05.924Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5972e49a3230e14f3a82539f"
    text: {Unfortunately I haven't dug enough into Red/View to translate what I know as yet. Hopefully soon...}
    sent: "2017-07-22T05:37:30.402Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5972e2653230e14f3a824db1"
    text: "@rgchris thanks!"
    sent: "2017-07-22T05:28:05.967Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972e22f329651f46eafae25"
    text: {Meh, probably [not applicable](http://rebolforum.com/index.cgi?f=printtopic&topicnumber=551&archiveflag=archive) :(}
    sent: "2017-07-22T05:27:11.297Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5972e19289aea4761dc1cdfa"
    text: {You might also be able to capture keyboard events with a global event function. I seem to recall answering a similar question with regard to Rebol 2... <am looking>}
    sent: "2017-07-22T05:24:34.340Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5972e11d329651f46eafaaf9"
    text: "Likely not then."
    sent: "2017-07-22T05:22:37.932Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5972e10845fc670746b60e04"
    text: {@rgchris not sure^/```^/view [f: field hint "type something" on-detect [print "!"]]^/```^/Then typing doesn't print anything in REPL}
    sent: "2017-07-22T05:22:16.664Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972e07c4bcd78af56d46b82"
    text: {@9214 Per [Event Flow](https://doc.red-lang.org/en/view.html#_event_flow)—are you able to capture it with an ON-DETECT handler? (not quite certain if this'd work)}
    sent: "2017-07-22T05:19:56.246Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5972caf745fc670746b5cce3"
    text: {Basically I want to interceipt and control pressed key before it gets to `field/data`.}
    sent: "2017-07-22T03:48:07.883Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972c8e03230e14f3a8204da"
    text: {How can I limit VID `field` maximum text length and allow user to input only specific characters, say only digits? I've already played around with `on-key` (didn't work as expected) and `on-change` (got stack overflow) handlers to no avail.}
    sent: "2017-07-22T03:39:12.152Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972b6c71c8697534a4aa245"
    text: {```^/win: layout [backdrop yellow text "test"]^/win/flags: [no-title]^/^/view win^/```^/^/[![изображение.png](https://files.gitter.im/red/help/qW3h/thumb/___________.png)](https://files.gitter.im/red/help/qW3h/___________.png)^/^/Though now I can see a little difference!}
    sent: "2017-07-22T02:21:59.318Z"
    editedAt: "2017-07-22T02:22:22.029Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972b66889aea4761dc14f2c"
    text: {[![изображение.png](https://files.gitter.im/red/help/gGUv/thumb/___________.png)](https://files.gitter.im/red/help/gGUv/___________.png)}
    sent: "2017-07-22T02:20:24.199Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5972b60d2723db8d5e35807d"
    text: {Graphical window with `no-title` flag looks identical to the one with `no-border` flag. Is it Windows-specific or bug?^/```^/win: layout [backdrop yellow text "test"]^/win/flags: [no-border]^/^/view win^/```^/}
    sent: "2017-07-22T02:18:53.529Z"
    editedAt: "2017-07-22T02:20:27.095Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597275bc76a757f808342b09"
    text: {R3Alpha behaves this way:^/^/```lisp^/>> parse "aaa" [while ["a" | end (probe 'end) fail]]^/end^/== true^/```}
    sent: "2017-07-21T21:44:28.185Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597274f5329651f46eae7104"
    text: {Can put together a reduced version of my case, save to say it relies on this certain behaviour (arguably per definition) of WHILE.}
    sent: "2017-07-21T21:41:09.565Z"
    editedAt: "2017-07-21T21:41:51.587Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "597273574bcd78af56d32c50"
    text: {So a sub-rule that consumes end and runs the handlers should do?}
    sent: "2017-07-21T21:34:15.736Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "59726f86bc46472974125023"
    text: {An FSM that has a few END handlers that need to be processed. Regardless, just because the input is at the end doesn't guarantee success:^/^/```lisp^/parse "" [end fail]^/```}
    sent: "2017-07-21T21:17:58.407Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59726e951c8697534a49c1c6"
    text: {In your example you reach the 'end', while fails and parse return true. What is the scenario where the loop behavior is desirable?}
    sent: "2017-07-21T21:13:57.268Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "59726bf445fc670746b4b064"
    text: {I assume as it's zero or more, then `parse "" [while [skip]]` will still return true, and I understand the desire to avoid a nasty loop `parse "" [while []]`, however I've hit a case where this behaviour is desirable and am having some issues working around it. WHILE should always be *'use with utmost caution'* in any situation anyhow : )}
    sent: "2017-07-21T21:02:44.844Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59726a31329651f46eae4907"
    text: {Parse question: the definition of WHILE is [as follows](http://www.red-lang.org/2013/11/041-introducing-parse.html): *"repeat rule zero or more times until failure regardless of input advancing."* However, this doesn't hold if the input sequence is at the tail:^/^/```lisp^/parse "aaa" [while ["a" | (probe "Foo")]]^/```^/^/Even at the tail, the rule should never fail yet is not processed. Is this intentional?}
    sent: "2017-07-21T20:55:13.422Z"
    editedAt: "2017-07-21T20:55:30.719Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5971ec781c8697534a477997"
    text: "Thx"
    sent: "2017-07-21T11:58:48.950Z"
    v: 1
    author: "5971e8f8d73408ce4f6e2bcf"
) #(
    id: "5971ec76c101bc4e3aa8a3f5"
    text: "I see, I'll try on Windows."
    sent: "2017-07-21T11:58:46.528Z"
    v: 1
    author: "5971e8f8d73408ce4f6e2bcf"
) #(
    id: "5971ec494bcd78af56d0b8f1"
    text: {I usually just run Windows version under Wine - it works fine}
    sent: "2017-07-21T11:58:01.331Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971ec36f5b3458e306b404c"
    text: {@zhangj311 unfortunately GTK backend is not ready yet}
    sent: "2017-07-21T11:57:42.490Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971ec252723db8d5e324e5a"
    text: "@maximvl  Yes"
    sent: "2017-07-21T11:57:25.764Z"
    v: 1
    author: "5971e8f8d73408ce4f6e2bcf"
) #(
    id: "5971ebfe45fc670746b2669b"
    text: {@zhangj311 it seems like you are running a version without `view`, are you running it on Linux?}
    sent: "2017-07-21T11:56:46.331Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971e935bc464729740ff1f0"
    text: {I am a newer in Red,now I get the error with "Error: view has no value",How can I deal with this?}
    sent: "2017-07-21T11:44:53.161Z"
    v: 1
    author: "5971e8f8d73408ce4f6e2bcf"
) #(
    id: "5971c59a2723db8d5e31983f"
    text: {I believe the  `--no-runtime` option is intended to compile programs for "minimal" environments such as Arduino.}
    sent: "2017-07-21T09:12:58.081Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971c54a2723db8d5e31973b"
    text: {The Red/System runtime is required for the program to communicate with the operating system. If you don't include it, your program must communicate directly with the OS.}
    sent: "2017-07-21T09:11:38.486Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971c4ec4bcd78af56d00f27"
    text: {It should be compilable but the executable will not run on Linux.}
    sent: "2017-07-21T09:10:04.671Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971c4cf329651f46eab623e"
    text: {It does not include the Red/System runtime when compiling the source.}
    sent: "2017-07-21T09:09:35.080Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "5971c4c5bc464729740f543f"
    text: "why shouldn't it be compilable?"
    sent: "2017-07-21T09:09:25.895Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971c4a1614889d475d6fe39"
    text: "what does the `-no-runtime` do?"
    sent: "2017-07-21T09:08:49.766Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971c49bbf7e6af22cfd445b"
    text: "I didn't get this"
    sent: "2017-07-21T09:08:43.162Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971c49889aea4761dbd6f5c"
    text: {@PeterWAWood ^/>So the 'bug' is that the compiler tried to compile the program}
    sent: "2017-07-21T09:08:40.677Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971c3aac101bc4e3aa7ebec"
    text: {It would be similar on Linux and macOS if it did compile.}
    sent: "2017-07-21T09:04:42.624Z"
    editedAt: "2017-07-21T09:04:57.389Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971c34f3230e14f3a7def50"
    text: {Of course, it won't run on Windows:^/```text^/PS E:\> Red/red/test^/Program 'test.exe' failed to execute: %1 is not a valid Win32 application^/At line:1 char:13^/+ Red/red/test <<<< .^/At line:1 char:1^/+  <<<< Red/red/test^/    + CategoryInfo          : ResourceUnavailable: (:) [], ApplicationFailedException^/    + FullyQualifiedErrorId : NativeCommandFailed^/```}
    sent: "2017-07-21T09:03:11.042Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971c3164bcd78af56d004d2"
    text: "It doesn't compile on macOS either."
    sent: "2017-07-21T09:02:14.294Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971c2fcc101bc4e3aa7e896"
    text: "so it's the Linux compilation which is broken"
    sent: "2017-07-21T09:01:48.820Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971c2d4bc464729740f4ad5"
    text: "I checked and it compiles with `-t msdos`"
    sent: "2017-07-21T09:01:08.020Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971c14b614889d475d6ed42"
    text: "I was confused by the `.red` file extension. "
    sent: "2017-07-21T08:54:35.950Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971c05bc101bc4e3aa7d8bf"
    text: {```^/>cat hello.red ^/Red/System []^/^/a: 1^/if a < 2 [ a: 2 ]^/```}
    sent: "2017-07-21T08:50:35.436Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971c04dc101bc4e3aa7d884"
    text: "my program is Red/System"
    sent: "2017-07-21T08:50:21.511Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971c0364bcd78af56cff747"
    text: {As far as I know the `--no-runtime` only applies to Red/System programs and is not consistent with building a Linux target. So the 'bug' is that the compiler tried to compile the program.}
    sent: "2017-07-21T08:49:58.156Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971bf77bc464729740f3b0c"
    text: "thanks :)"
    sent: "2017-07-21T08:46:47.978Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971bf69329651f46eab473f"
    text: "@maximvl Yes, I think so."
    sent: "2017-07-21T08:46:33.252Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971bf53bf7e6af22cfd2e34"
    text: "@PeterWAWood should I report a bug?"
    sent: "2017-07-21T08:46:11.617Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971bf45f5b3458e306a74f4"
    text: "In a word - No."
    sent: "2017-07-21T08:45:57.806Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5971beb03230e14f3a7dd8d6"
    text: {hey guys, is this expected?^/```^/ ~/red  red -c --no-runtime hello.red ^/^/-=== Red Compiler 0.6.3 ===- ^/^/Compiling /home/mvelesyuk/red/hello.red ...^/^/Target: Linux ^/^/Compiling to native code...^/*** Red/System Compiler Internal Error: Script Error : Cannot use path on none! value ^/*** Where: emit-epilog ^/*** Near:  [if any [^/fspec/5 = 'callback ^/all [^/attribs: compiler/get-attributes fspec/4 ^/any [find attribs 'cdecl find attribs 'stdcall]^/]^/] [^/offset: locals-size + locals-offset ^/emit #{8DA5} ^/emit to-bin32 negate offset + 12 ^/emit #{5F} ^/emit #{5E} ^/emit #{5B}^/] ^/emit^/] ^/```}
    sent: "2017-07-21T08:43:28.236Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59719ceff5b3458e3069ed02"
    text: {Interesting read about Elixir: thought provoking...^/^/http://tech.noredink.com/post/142689001488/the-most-object-oriented-language}
    sent: "2017-07-21T06:19:27.572Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "596f8f970de4d2545e431859"
    text: {I think the magic of rebol/red languages is relative expression capability, IMO we must preserve this in all dialects of red.}
    sent: "2017-07-19T16:57:59.003Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "596f8f020de4d2545e431642"
    text: {also I'm, wondering how easy will be to put table's data into text-list data :smile: ^/^/}
    sent: "2017-07-19T16:55:30.744Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "596f8e1b3230e14f3a74f7c3"
    text: {@dockimbel moi aussi ^/@iArnold yeah, I have mysql tables awaiting 0.7 to talk them LOL^/}
    sent: "2017-07-19T16:51:39.694Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "596f69cabc46472974058dc6"
    text: {> @iArnold In fact I intencionally wrote "rojo" because "red" means "network" in spanish, that induces to error to many computer's people :)^/^/Well then you are completely right to translate, red definitely has nothing to do with networking :-P^/(until 0.7.0 release LOL)}
    sent: "2017-07-19T14:16:42.901Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "596f5d9bc101bc4e3a9dbe14"
    text: "@planetsizecpu Me gusta Rojo. :+1: "
    sent: "2017-07-19T13:24:43.191Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596f59f0bf7e6af22cf30067"
    text: {@iArnold In fact I intencionally wrote "rojo" because "red" means "network" in spanish, that induces to error to many computer's people :)}
    sent: "2017-07-19T13:09:04.774Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "596f4fe8bf7e6af22cf2d54b"
    text: {overall I agree that writing articles about language under construction can make more harm than good, as Maxim pointed out}
    sent: "2017-07-19T12:26:16.170Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "596f4ed3f5b3458e30604d22"
    text: {@maximvl  maybe make an emphasis on DSLs (`parse`, `VID`, `Draw`, etc) and embeddability? Say, "How I created fancy GUI for my Erlang app with Red under 2 minutes"}
    sent: "2017-07-19T12:21:39.043Z"
    editedAt: "2017-07-19T12:22:35.955Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "596f4e992723db8d5e272d05"
    text: {@PeterWAWood good point, I don't know much about compiler internals}
    sent: "2017-07-19T12:20:41.038Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596f4e69bf7e6af22cf2cd22"
    text: {@planetsizecpu^/^/> Today I did a review on a blog where I wrote about red languaje a few weeks ago,^/^/Interesting, probably the name should not be translated like this, for its original meaning also refers toward `reduce` also not only the color red, but an explanation that this means `rojo` is better imho.^/}
    sent: "2017-07-19T12:19:53.701Z"
    editedAt: "2017-07-19T12:20:37.409Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "596f4e572723db8d5e272b95"
    text: {we can do something like http://learnyousomeerlang.com/content  which started as a language overview and ended as a whole book and reference}
    sent: "2017-07-19T12:19:35.441Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596f4e29329651f46ea13c62"
    text: {just a blog post with language overview doesn't worth it while the language is under heavy development, I think}
    sent: "2017-07-19T12:18:49.320Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596f4d650de4d2545e41bda7"
    text: "@maximvl LOL just noticed :+1: "
    sent: "2017-07-19T12:15:33.188Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "596f4d45329651f46ea138da"
    text: "@9214 well, I posted that interview :D"
    sent: "2017-07-19T12:15:01.496Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596f4d0589aea4761db30f8f"
    text: {@maximvl One point about your presentation, Red can be compiled and, if I understand correctly, some parts are compiled directly to machine code but, at the moment, much is compiled to runtime calls.}
    sent: "2017-07-19T12:13:57.449Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "596f48e6bf7e6af22cf2b315"
    text: {@maximvl you can write a small review article about Redbol in the same vein as your presentation at Lisp conference.^/^/FYI, interview with Nenad [was posted on HH](https://habrahabr.ru/post/265685/) back in 2015, there's some interest indeed sparkled among viewers ;)^/^/By the way, would be nice to have `red/Russia` room :bear:, there's at least three of us here.}
    sent: "2017-07-19T11:56:22.545Z"
    editedAt: "2017-07-19T11:56:50.469Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "596f3394f5b3458e305fdd46"
    text: {@dockimbel  I'm looking forward to write some like "Red Language 1.0 Released, now it is time to change programmers mind-set to new era" :smile: ^/}
    sent: "2017-07-19T10:25:24.846Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "596f2fda2723db8d5e26a395"
    text: {I was going to write a post for Russia audience, but I know that lack of documentation, networking, GC will be the things people will use to argue against the language}
    sent: "2017-07-19T10:09:30.207Z"
    editedAt: "2017-07-19T10:09:41.588Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596f2f0b76a757f80825f5b9"
    text: {@planetsizecpu Thank you, we need more blog articles about Red, in order to help it grow. :+1: }
    sent: "2017-07-19T10:06:03.988Z"
    editedAt: "2017-07-19T10:08:14.747Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596f2e5f2723db8d5e269cd4"
    text: {Today I did a review on a blog where I wrote about red languaje a few weeks ago, surprinsing to me it was +500 views, I hope some of them followed the link and discover the red world, anyway is good to know people has interest in new paradigm languages. Sorry for those don't know my homeland language.^/}
    sent: "2017-07-19T10:03:11.248Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "596f2e533230e14f3a731a0d"
    text: {[![image.png](https://files.gitter.im/red/help/B1jS/thumb/image.png)](https://files.gitter.im/red/help/B1jS/image.png)}
    sent: "2017-07-19T10:02:59.734Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "596ec1d8bc4647297402d02e"
    text: {@cyclecraze_twitter The `red` binary needs to be wrapped in a shell script if you want to invoke it that way. Alternatively, you can directly use the Red console binary (it's cached in your `$HOME/.red/` folder, you can copy it out and rename it to `red-console` for example). The console binary should work fine with your command. The 0.6.4 release should solve that issue definitely.}
    sent: "2017-07-19T02:20:08.498Z"
    editedAt: "2017-07-19T02:21:05.124Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596e7cf8f5b3458e305d3968"
    text: {@rebolek Humm don't worry. If not Red, I prefer  an Rebol solution.}
    sent: "2017-07-18T21:26:16.944Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "596e545ebf7e6af22ceee816"
    text: "I am on phone now, I will pos examples later."
    sent: "2017-07-18T18:33:02.541Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596e53ea329651f46e9d5af5"
    text: "Do you have any suggestions?^/"
    sent: "2017-07-18T18:31:06.159Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "596e519dbf7e6af22ceedab0"
    text: {@luis-rj not directly in Red, but there are tools that can do it.}
    sent: "2017-07-18T18:21:17.043Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596e51362723db8d5e2334bc"
    text: {How can I Convert HTML to Text in Red ? ^/Is there something like load/markup ?}
    sent: "2017-07-18T18:19:34.867Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "596e4e50f5b3458e305c64c5"
    text: "@cyclecraze_twitter this in not supported yet."
    sent: "2017-07-18T18:07:12.609Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596e42be3230e14f3a6f7234"
    text: {Need help with this executing this file: ^/^/```#!/usr/bin/env red^/Red [^/]^/print "great job"``` ^/^/and get the following error: ^/```** Script Error: Invalid compressed data - problem: -3^/** Near: script: decapsulate^/if none? script```. ^/^/An equivalent rebol script will work just fine. Thanks. (sorry cannot seem to figure out how to format this post correctly)}
    sent: "2017-07-18T17:17:50.535Z"
    editedAt: "2017-07-18T17:19:00.617Z"
    v: 2
    author: "593bea3ad73408ce4f6644ab"
) #(
    id: "596d50614bcd78af56bd7d2b"
    text: {@greggirwin Me too! For a while there I was thinking I would have to backtrack to R2.}
    sent: "2017-07-18T00:03:45.079Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596c4a922723db8d5e1a41ca"
    text: "Glad you have things working!"
    sent: "2017-07-17T05:26:42.018Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "596c2acc76a757f80819434b"
    text: {And, I almost forgot, @rgchris , Mr. Maps himself.}
    sent: "2017-07-17T03:11:08.329Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596c2a96c101bc4e3a903d8a"
    text: {@greggirwin  @dockimbel  @rebolek Thank you for all the help this past couple of weeks. My Red app is working like a charm.}
    sent: "2017-07-17T03:10:14.381Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596c25750de4d2545e3481b5"
    text: "@Oldes Genius !"
    sent: "2017-07-17T02:48:21.066Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "596be63589aea4761da52ce9"
    text: {@luis-rj in this PR you can find basic example how to start recording from Red/System - https://github.com/red/code/pull/56}
    sent: "2017-07-16T22:18:29.279Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "596bbebd329651f46e92b597"
    text: "I can give it a try when I will have some time"
    sent: "2017-07-16T19:30:05.643Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "596ba7e41c8697534a2d876a"
    text: {@Oldes Thanks  again! .^/Do you think add audio recording to bass library ?}
    sent: "2017-07-16T17:52:36.788Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "596b6a4ebc46472974f54988"
    text: {@luis-rj  hi.. if you want to compile the `bass-test.red` file and have it working as expected, you must first revert this commit - https://github.com/red/red/commit/6f89becc879a1d3e8775196273b95fb704298adf @dockimbel don't want to risk it before incoming 0.6.3 release. }
    sent: "2017-07-16T13:29:50.357Z"
    editedAt: "2017-07-16T13:31:55.324Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "596ae18cbf7e6af22ce13e12"
    text: "@virtualAlan Keep up the good work. :+1: "
    sent: "2017-07-16T03:46:20.205Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596ae0e01c8697534a2ade5b"
    text: {@rpherman Red GUI is reported to work fine on wine (you can also pull the very limited GTK prototype from the `gtk` branch).}
    sent: "2017-07-16T03:43:28.418Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596ac2a9329651f46e8f6f50"
    text: {@maximvl Thanks for your help! Red compiled. I guess view is not valid on linux. Is there a gui for linux or is it still command line?}
    sent: "2017-07-16T01:34:33.408Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "596a9ee889aea4761da0f4ea"
    text: {Just updated my 'Red Programming' pages, Included a new Red Alarm Clock Example (example34). I used a call to 'rundll32 user32.dll,MessageBeep' to produce the alarm sounds. http://www.mycode4fun.co.uk/About-Red-Programming ^/Also new stuff here:  http://www.mycode4fun.co.uk/example-scripts^/}
    sent: "2017-07-15T23:02:00.269Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "596a30fe76a757f80812c634"
    text: {`    dpkg --add-architecture i386^/    apt-get update^/    apt-get install libc6:i386 libcurl3:i386`}
    sent: "2017-07-15T15:13:02.360Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "596a30f989aea4761d9f78e1"
    text: {Except how do I know what to change in this for libcurl4, and is libc6 the latest too? The error was for libcurl4. Thanks again!}
    sent: "2017-07-15T15:12:57.532Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "596a2ffa1c8697534a28a7ce"
    text: "it explains what  should be done"
    sent: "2017-07-15T15:08:42.185Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596a2fe8c101bc4e3a89d3fc"
    text: {@rpherman check in the bottom here: http://www.red-lang.org/p/download.html}
    sent: "2017-07-15T15:08:24.742Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596a2fdbbf7e6af22cdf0aa3"
    text: {Installing 64 bit versions of OSes has become the default these days.  Though 32 bit libs can be installed, this is ok for a developer but not for the regular unknowing user of the programs.}
    sent: "2017-07-15T15:08:11.889Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "596a2fbebf7e6af22cdf0a19"
    text: "this is what i do to use Red on linux as well ;)"
    sent: "2017-07-15T15:07:42.088Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596a2fab2723db8d5e1356f4"
    text: {you just need to install libcurl x32, you can have both at the same time}
    sent: "2017-07-15T15:07:23.787Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596a2f90c101bc4e3a89d2c0"
    text: {Does that mean I can't use Red on my 64-bit Linux install, or how can I have both libcurl (32 bit and 64 bit) loaded simultaneously?}
    sent: "2017-07-15T15:06:56.029Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "596a2f663230e14f3a5ff394"
    text: "Thanks @maximvl !"
    sent: "2017-07-15T15:06:14.554Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "596a2f5976a757f80812c170"
    text: "Red doesn't support x64 libs yet"
    sent: "2017-07-15T15:06:01.850Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596a2f570de4d2545e2dff6c"
    text: "Thanks!"
    sent: "2017-07-15T15:05:59.104Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "596a2f43329651f46e8d829f"
    text: {Here's the full error on trying to compile Red on LInux: `/.red/console-2017-4-12-1647: error while loading shared libraries: libcurl.so.4: cannot open shared object file: No such file or directory^/`}
    sent: "2017-07-15T15:05:39.286Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "596a2f001c8697534a28a4ab"
    text: "@rpherman you need an x32 one"
    sent: "2017-07-15T15:04:32.940Z"
    editedAt: "2017-07-15T15:04:39.238Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596a2eeb3230e14f3a5ff17c"
    text: {I have libcurl.so.4 here: `/usr/lib/x86_64-linux-gnu/libcurl.so.4`}
    sent: "2017-07-15T15:04:11.643Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "596a2eb6c101bc4e3a89cf88"
    text: {` error while loading shared libraries: libcurl.so.4: `^/}
    sent: "2017-07-15T15:03:18.380Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "596a2e66329651f46e8d7e8a"
    text: {I have Red running on my Windows box, but when I try to install Red on LInux I get this error:}
    sent: "2017-07-15T15:01:58.533Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "5969b75fbf7e6af22cdd81db"
    text: "@rgchris :clap:"
    sent: "2017-07-15T06:34:07.269Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5969468af5b3458e3049bce4"
    text: {@9214, yes, you're on track, using Chris's hints as well. There are binary parse dialects out there, but I can't find mine right now, and it was just the beginnings of an experiment, so not useful for real work yet.  And you can absolutely use issues for that purpose. }
    sent: "2017-07-14T22:32:42.834Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596941b72723db8d5e107193"
    text: {Also, don't forget you can accumulate values without binding:^/^/```lisp^/make map! parse binary-value [^/    collect [^/        keep ('value1) keep 5 skip^/        keep ('value2) keep 2 skip^/        to end^/    ]^/]^/```}
    sent: "2017-07-14T22:12:07.913Z"
    editedAt: "2017-07-14T22:12:51.169Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59693e750de4d2545e2af7a4"
    text: ""
    sent: "2017-07-14T21:58:13.461Z"
    editedAt: "2017-07-14T21:58:29.902Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59693dd44bcd78af56aeecf7"
    text: {```lisp^/thing: make object! [value1: value2: none]^/parse binary-value bind [copy value1 5 skip copy value2 2 skip] thing^/probe thing^/```}
    sent: "2017-07-14T21:55:32.643Z"
    editedAt: "2017-07-14T21:58:40.040Z"
    v: 5
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59693d6ec101bc4e3a86d101"
    text: {@9214^/* Sounds reasonable though you copy chunks by using `skip`, not `binary!`. You can create an object before you parse, then bind the parse rule to that object^/* why not raise ERROR! values?}
    sent: "2017-07-14T21:53:50.818Z"
    editedAt: "2017-07-14T21:55:02.915Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "596906cd329651f46e899e16"
    text: {Two questions:^/* I want to deserialize little chunk of bytes and get `object!` with specified fields. My gut tells me that I should harness `parse` power. Can anyone point me into right direction and suggest some elegant way to do this task? (I've comed up with something like `copy value1 5 binary! copy value2 2 binary! ...`, haven't checked yet).^/* Is it sane to return `issue!` values from function as error-codes? :P}
    sent: "2017-07-14T18:00:45.066Z"
    editedAt: "2017-07-14T18:01:37.722Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59690154bf7e6af22cdb20b5"
    text: {@Oldes  Thanks! .^/Do you think add audio recording  ? }
    sent: "2017-07-14T17:37:24.964Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "5968fe9b3230e14f3a5bf3cc"
    text: {@luis-rj  Same here... the `bass-test.reds` works.. probably some regression.. I will check that later.}
    sent: "2017-07-14T17:25:47.461Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5968fc4e329651f46e89703b"
    text: {I get this error running  bass-test.exe  from  bass-test.red  compiled with red-31-may17 and up:^/```^/music: 80000005^/--> play^/^/*** Runtime Error 1: access violation^/*** at: 004202DA^/``` ^/My last good bass-test.exe  was from red-08may17^/}
    sent: "2017-07-14T17:15:58.322Z"
    v: 1
    author: "5736089ac43b8c601972c6c3"
) #(
    id: "5968a4470de4d2545e285cd3"
    text: {@geekyi I suspect two possible causes:^/* A bug in CALL in Rebol.^/* A race-condition in the testing framework related to I/O operation on locked file.}
    sent: "2017-07-14T11:00:23.003Z"
    editedAt: "2017-07-14T11:00:45.512Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5968a3e2bf7e6af22cd97299"
    text: {It just bothers me that tests fail intermittently. I want to get to the bottom of it}
    sent: "2017-07-14T10:58:42.638Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5968a3c476a757f8080d1573"
    text: {Anyway, I'll move my conversation about the tests to red/bugs}
    sent: "2017-07-14T10:58:12.940Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5968a394c101bc4e3a843aa9"
    text: "Pretty much what was concluded above"
    sent: "2017-07-14T10:57:24.649Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5968a37b4bcd78af56ac4fb7"
    text: {It shows `throw-error "Windows target requires View module (`Needs: View` in the header)"` compiler.r#4609, when I ran `hello.exe`}
    sent: "2017-07-14T10:56:59.502Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5968a1f31c8697534a22ec69"
    text: {@Oldes ^/> @dockimbel I can run view-test.exe when compiled using: `-d -r` but not with `-t Windows -r`^/^/I changed all occurances of `quit` in the sources to halt. Then I was able to see the problem :smile: }
    sent: "2017-07-14T10:50:27.330Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5968a09af5b3458e3046d210"
    text: {And if nothing else, than there should be some error. But it is just my opinion. Not everybody will dig up, why simple compiled app is not working.}
    sent: "2017-07-14T10:44:42.457Z"
    editedAt: "2017-07-14T10:45:18.085Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5968a003bc46472974eb97fb"
    text: {I'm pretty sure there is a way how to detect if gui-console is presented or not.}
    sent: "2017-07-14T10:42:11.348Z"
    editedAt: "2017-07-14T10:42:31.721Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59689fdb4bcd78af56ac4245"
    text: {Then you would not have any printing in the GUI console too.}
    sent: "2017-07-14T10:41:31.595Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59689fb44bcd78af56ac4162"
    text: {@dockimbel it would be better if it would just silently ignore the `print` instead of silently quitting ;-)}
    sent: "2017-07-14T10:40:52.121Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59689f803230e14f3a5a2dd0"
    text: {Previously, I ran the tests under Windows 10 on a small machine with not much memory or disk space. I have recently installed a Windows10 VM on my machine with 4GB memory. I have just run the tests in the VM for the first time.^/^/They completed successfully.}
    sent: "2017-07-14T10:40:00.603Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59689f712723db8d5e0d8c4a"
    text: {@Oldes ^/> And I think it is related to usage `print` in stand alone app without console.^/^/Yes, -t Windows redirects the standard output to the GUI console, which is not (yet) part of the runtime. So the app then silently fails to run.}
    sent: "2017-07-14T10:39:45.769Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59689e6489aea4761d999fad"
    text: {@geekyi There is already a bug report. Sometimes the tests run under Windows 10 and sometimes they hang. I have been unable to identify the cause so far.}
    sent: "2017-07-14T10:35:16.980Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "59689de3bf7e6af22cd95d23"
    text: {log shows last test ran without a hitch (and all others don't show a problem either:^/```quicktest^/~~~started test~~~ pointer-compile^/~~~finished test~~~ pointer-compile^/No of tests   2^/No of asserts 2^/Passed        2^/Failed        0^/```}
    sent: "2017-07-14T10:33:07.966Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59689d780de4d2545e28416e"
    text: "@PeterWAWood should I file a bug?"
    sent: "2017-07-14T10:31:20.680Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59689d5fc101bc4e3a8424c2"
    text: {```ps^/ ..\..\rebol\rebview.exe -s .\red.r -d .\tests\view-test.red^/```^/`REBOL/View 2.7.6.3.1 14-Mar-2008`^/}
    sent: "2017-07-14T10:30:55.316Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59689d3b329651f46e87ba5d"
    text: {And I think it is related to usage `print` in stand alone app without console.}
    sent: "2017-07-14T10:30:19.720Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59689d1889aea4761d999bfe"
    text: "@PeterWAWood yes, in PowerShell"
    sent: "2017-07-14T10:29:44.945Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59689cc9bf7e6af22cd9587e"
    text: {@geekyi Are you running the tests under Windows 10?}
    sent: "2017-07-14T10:28:25.330Z"
    editedAt: "2017-07-14T10:28:30.976Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59689c9bf5b3458e3046c3fa"
    text: {@dockimbel I can run view-test.exe when compiled using: `-d -r` but not with `-t Windows -r`}
    sent: "2017-07-14T10:27:39.846Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59689c92f5b3458e3046c3d3"
    text: {Happens sometimes, related to CALL issues in Rebol.}
    sent: "2017-07-14T10:27:30.667Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59689c82329651f46e87b827"
    text: {```rebol^/ok - pointer-compile..................................2 / 2^/running  namespace-test.r^/```}
    sent: "2017-07-14T10:27:14.005Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59689c6d329651f46e87b813"
    text: "Running tests now, I may be stuck:"
    sent: "2017-07-14T10:26:53.858Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59689c1dbc46472974eb8741"
    text: {Red tests are always compiled and run as standalone binaries (in `%quick-test\runnable`), the interpreted tests are also compiled, but wrapped in a  `do [...]` to force interpretation.}
    sent: "2017-07-14T10:25:33.872Z"
    editedAt: "2017-07-14T10:26:23.825Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59689bb5bf7e6af22cd952df"
    text: {I'm wondering how the tests run without generating a libredRT or any other .exe, I suppose they run interpreted in rebol? :confused: }
    sent: "2017-07-14T10:23:49.635Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59689b281c8697534a22d070"
    text: {@geekyi `red.r` acts as a wrapper, it can pass the command-line to the Red console binary. Such passing is only active when the wrapper is encapped and runs as an executable (it's just for end-user convenience).}
    sent: "2017-07-14T10:21:28.369Z"
    editedAt: "2017-07-14T10:22:54.740Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59689ad21c8697534a22cf01"
    text: "It would then run in rebol :thought_balloon: "
    sent: "2017-07-14T10:20:02.539Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59689abcbf7e6af22cd94fa6"
    text: {@Oldes no, that is the red console compiled. Was wondering if I could run without compilation.. but I guess that doesn't make sense}
    sent: "2017-07-14T10:19:40.591Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59689a3176a757f8080ced99"
    text: {@geekyi you mean this?^/```^/--== Red 0.6.2 ==-- ^/Type HELP for starting information. ^/^/>> do %tests/view-test.red^/Windows 7 build 7601^/-- on-change event -- ^/    face : button ^/    word : font ^/    old  : none ^/    new  : object^/```}
    sent: "2017-07-14T10:17:21.693Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "596899e62723db8d5e0d747e"
    text: {I'm asking because tests seem to work that way from the outside (no libRedRT!)}
    sent: "2017-07-14T10:16:06.086Z"
    editedAt: "2017-07-14T10:21:17.400Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "596899d8bc46472974eb7e1c"
    text: "No, unless you hack red.r code."
    sent: "2017-07-14T10:15:52.372Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59689997329651f46e87aa4e"
    text: {@dockimbel Is it possible for a red file to run interpreted from sources?}
    sent: "2017-07-14T10:14:47.837Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "596898ef89aea4761d998bb9"
    text: "Works here on Windows 10 build 14393."
    sent: "2017-07-14T10:11:59.564Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596897cbf5b3458e3046b141"
    text: {I suppose `Windows 10 build 15063` problem then.. (except @Oldes seems to have the same problem on win7)}
    sent: "2017-07-14T10:07:07.794Z"
    editedAt: "2017-07-14T10:09:18.030Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "596897b6bc46472974eb762a"
    text: "@geekyi You're right, misread your command-line."
    sent: "2017-07-14T10:06:46.202Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5968978d329651f46e87a27b"
    text: "It works fine here (Win7)."
    sent: "2017-07-14T10:06:05.821Z"
    editedAt: "2017-07-14T10:06:10.489Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59689785329651f46e87a26b"
    text: {It compiles and runs, I don't know how you would run from interpreter using sources? (I don't know enough to differentiate?)}
    sent: "2017-07-14T10:05:57.271Z"
    editedAt: "2017-07-14T10:06:25.482Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5968975ebc46472974eb7460"
    text: {@geekyi Are you trying to run the compiled version or are you trying to run it with the interpreter? Your last command-line is confusing.}
    sent: "2017-07-14T10:05:18.711Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5968975ebf7e6af22cd94489"
    text: {It definitely worked for me before, (well works from red.exe, but I rarely run otherwise, i.e. don't run from red sources)}
    sent: "2017-07-14T10:05:18.336Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "596896eb1c8697534a22c02c"
    text: {Trying on Win7, the compiled view-test.exe from tests folder does nothing... it works when executing .red from console.}
    sent: "2017-07-14T10:03:23.525Z"
    editedAt: "2017-07-14T10:03:41.177Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "596896e81c8697534a22c01e"
    text: "`REBOL/View 2.7.6.3.1 14-Mar-2008`"
    sent: "2017-07-14T10:03:20.204Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "596896943230e14f3a5a0993"
    text: {@dockimbel ok, there is no error now when I do that, but nothing happens}
    sent: "2017-07-14T10:01:56.468Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5968963bc101bc4e3a8407e8"
    text: {You need to run the executable from the %tests\ folder.}
    sent: "2017-07-14T10:00:27.416Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59689600bf7e6af22cd93e67"
    text: {```ps^/ ..\..\rebol\rebview.exe -s .\red.r -d .\tests\view-test.red^/```}
    sent: "2017-07-14T09:59:28.635Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "596895d53230e14f3a5a0517"
    text: "@dockimbel nope, doesn't work; same error"
    sent: "2017-07-14T09:58:45.446Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59688293bc46472974eb1fc5"
    text: {Ah yes, having android there confused me.. I'll test later}
    sent: "2017-07-14T08:36:35.773Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "596855d04bcd78af56ab19e7"
    text: {@geekyi Move the executable to %tests\ folder and the file will be found.}
    sent: "2017-07-14T05:25:36.028Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596806f0bc46472974e972c8"
    text: {@Oldes I get an interesting error^/```ps^/PS red> .\view-test.exe^/Windows 10 build 15063^/-- on-change event --^/        face : face^/        word : font^/        old  : none^/        new  : object^/-- font on-change event --^/        word : parent^/        old  : none^/        new  : block^/*** Access Error: cannot open: %../bridges/android/samples/eval/res/drawable-xxhdpi/ic_launcher.png^/*** Where: decode^/*** Stack: load^/```^/}
    sent: "2017-07-13T23:49:04.256Z"
    editedAt: "2017-07-13T23:49:12.250Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59680408c101bc4e3a821ab5"
    text: {Thanks  @dockimbel  and  @greggirwin  - nice - got it.}
    sent: "2017-07-13T23:36:40.845Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "5967d0a20de4d2545e254a01"
    text: {View-test script on win10... sorry.. just on mobile now}
    sent: "2017-07-13T19:57:22.716Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5967d06ebf7e6af22cd64b22"
    text: { @dockimbel brw.. as I already mentioned.. I'm not  able to run }
    sent: "2017-07-13T19:56:30.003Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5967b78e4bcd78af56a8af37"
    text: {https://gist.github.com/greggirwin/c67d640f09e9ccd0dac0859ec7374ca3}
    sent: "2017-07-13T18:10:22.187Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5967b2652723db8d5e0a1131"
    text: {Also: https://doc.red-lang.org/en/view.html#_drop_down}
    sent: "2017-07-13T17:48:21.816Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59674dc276a757f808077ce0"
    text: {@sergeantWilson See: https://github.com/red/red/blob/master/tests/view-test.red}
    sent: "2017-07-13T10:38:58.769Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596745f44bcd78af56a66847"
    text: {Are there any examples around for using    drop-down   ?    -   thanks.}
    sent: "2017-07-13T10:05:40.014Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "5966ab30329651f46e7fbb64"
    text: {There was a bug in the libRedRT-include.red file which I reported. A double entry of "get-values: "red/object/get-values" [obj [red-object!] return: [cell!]]". Otherwise my problems were caused by having a mixture of old and new Red files.}
    sent: "2017-07-12T23:05:20.682Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59669fafc101bc4e3a7c2128"
    text: "...so close and now down to  fixing some globals."
    sent: "2017-07-12T22:16:15.170Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59669d92f5b3458e303e7e39"
    text: "...recompiling libredrt.dll"
    sent: "2017-07-12T22:07:14.527Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59669cf276a757f80804c2a8"
    text: {Now at: O:\>red -o rcaselect.exe -c rcaselect.v4.red^/^/-=== Red Compiler 0.6.2 ===-^/^/Compiling O:\rcaselect.v4.red ...^/*** Driver Internal Error: Access Error : Cannot open /O/./libRedRT.dll as library^/*** Where: needs-libRedRT?^/*** Near:  [lib: load/library lib^/get-date: make^/]^/}
    sent: "2017-07-12T22:04:34.311Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59669cea0de4d2545e1feeda"
    text: "..compiled libred - that was progress"
    sent: "2017-07-12T22:04:26.298Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59669cd0bf7e6af22cd10d9a"
    text: "..downloaded the latest files from github"
    sent: "2017-07-12T22:04:00.858Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59669534bf7e6af22cd0ecd8"
    text: {^/O:\>red build libred^/^/-=== Red Compiler 0.6.2 ===-^/^/Compiling O:\libRed\libRed.red ...^/...compilation time : 2853 ms^/^/Target: MSDOS^/^/Compiling to native code...^/*** Compilation Error: undefined symbol: FACE_OBJ_ENABLED?^/*** in file: %/O/modules/view/backends/windows/gui.reds^/*** in function: exec/gui/OS-make-view^/*** at line: 1167^/*** near: [FACE_OBJ_ENABLED?^/    data: as red-block! values + FACE_OBJ_DATA^/    menu:^/]^/}
    sent: "2017-07-12T21:31:32.823Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5966953289aea4761d91317c"
    text: "...Nope"
    sent: "2017-07-12T21:31:30.238Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
)#(
    id: "5966937776a757f808049e3d"
    text: "...Looks like it may work."
    sent: "2017-07-12T21:24:07.924Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596692d676a757f808049a0c"
    text: "I'm going to try to download the latest version."
    sent: "2017-07-12T21:21:26.519Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596690d2329651f46e7f54e7"
    text: {^/r:\red>red -o testcompile.exe -c testcompile.red^/^/-=== Red Compiler 0.6.2 ===-^/^/Compiling r:\red\testcompile.red ...^/Compiling libRedRT...^/*** Driver Internal Error: Script Error : to-local-file expected path argument o^/f type: file string^/*** Where: throw-error^/*** Near:  [to-local-file script-name]^/}
    sent: "2017-07-12T21:12:50.730Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596690d0bf7e6af22cd0d66a"
    text: {I save the best for last... I'm trying to compile my app but get this error. This particular script just opens a window but I'm getting same error on my real script. Any thoughts?}
    sent: "2017-07-12T21:12:48.014Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59667e762723db8d5e04e6a1"
    text: "@Rebol2Red I'm pretty sure those are actual"
    sent: "2017-07-12T19:54:30.704Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59666810bf7e6af22cd006fb"
    text: {Understood. Couldn't resist trying it out after the other bits and pieces I'd been working on : )}
    sent: "2017-07-12T18:18:56.192Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "596654702723db8d5e04189c"
    text: {@rgchris Thanks. Red/VID is still a work in progress, it's improved and extended in each new release.}
    sent: "2017-07-12T16:55:12.250Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59664f83bc46472974e1cd83"
    text: {Just liked the somewhat jumbled approximation of my old layout : )}
    sent: "2017-07-12T16:34:11.362Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59664f553230e14f3a5090db"
    text: {I notice that some of the positional keywords no longer take integer argument. I hadn't really delved into why the flow wasn't working.}
    sent: "2017-07-12T16:33:25.046Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59664edf4bcd78af56a277d7"
    text: {@dockimbel Per tweet, here's my work in progress: [arran.red](https://gist.github.com/rgchris/e5fe1de3d819e7483b391503e89ab684), am just hacking away at it from the original: [arran.r](http://ross-gill.com/arran.r). Am using it to learn the differences between the two VIDs and likely my approach between me and my 2001 self.}
    sent: "2017-07-12T16:31:27.408Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59662e2f2723db8d5e03462e"
    text: "@iArnold Thanks, I'll check that out."
    sent: "2017-07-12T14:11:59.306Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5965fb2dbc46472974e00635"
    text: {To emphasize what i mean by simple which one should not confuse with trivial:^/https://www.youtube.com/watch?v=IpGxLWOIZy4^/https://www.youtube.com/watch?v=BR9h47Jtqyw}
    sent: "2017-07-12T10:34:21.352Z"
    editedAt: "2017-07-12T10:37:43.695Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965f55a89aea4761d8e0b9b"
    text: {@geekyi Some comment on the link i did give above: ^/^/"wow ..it's such an overwhelming feeling for a guy like me ..who had no chance in hell of ever getting into MIT or any other ivy's to be able to listen and learn from this lectures online and that too free."﻿^/^/"Me too, as a poor kid from Poland I once dreamed of an indoor toilet and now I'm following MIT lectures. "^/^/I totally agree with this!^/ps: The lectures can also be found on youtube}
    sent: "2017-07-12T10:09:30.261Z"
    editedAt: "2017-07-12T10:13:24.948Z"
    v: 8
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965f45b329651f46e7c3fef"
    text: {The first is more the template and your second example is more a simple example. That is about what this suggestion was about yes, exact content can be argued.}
    sent: "2017-07-12T10:05:15.395Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5965f35fbf7e6af22ccda498"
    text: {This might not be so hard to do in some cases.. using `type?` to get a `datatype!`, then choosing the simplest non-empty example of that datatype from a pre-defined list}
    sent: "2017-07-12T10:01:03.158Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965f2b0f5b3458e303b0fb6"
    text: {I think you can auto-generate all that, with an `example` function that does it recursively}
    sent: "2017-07-12T09:58:08.125Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965f2170de4d2545e1c8002"
    text: {@iArnold ^/Alternative ways I'd do it:^/```^/>>example case^/case [^/logic! [do-blk]^/...^/logic! [do-blk]^/]^/```^/```^/case [^/true [print "hi"]^/]^/```}
    sent: "2017-07-12T09:55:35.932Z"
    editedAt: "2017-07-12T09:56:39.053Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "5965edd90de4d2545e1c6f87"
    text: {@geekyi Very interesting, but i'm not really into symbolic stuff which i have to admit that i cannot follow this. I wish there was more simple explanation of what is going on instead of hard to follow formulas. At some point it will be needed but not at the moment to get the idea.^/I like simple ideas and simple programs which are easy to follow. I don't mind overhead or loss of speed for this. Btw computers are fast enough these days :)^/If you are into ai i think this is the most interesting on the net:^/https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-034-artificial-intelligence-fall-2010/lecture-videos/^/Good to follow even for me and at some times very funny. I cannot follow all the algebra but i do get the ideas.}
    sent: "2017-07-12T09:37:29.082Z"
    editedAt: "2017-07-12T09:45:35.214Z"
    v: 8
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965ed991c8697534a171f88"
    text: "Will read your links soon."
    sent: "2017-07-12T09:36:25.706Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5965ed82f5b3458e303af73c"
    text: {@Rebol2Red, I wasn't clear on your need either, or what NOT and AND were in that context, hoping someone else would get it. @geekyi to the rescue!}
    sent: "2017-07-12T09:36:02.398Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5965ec3d89aea4761d8de1f7"
    text: {@Rebol2Red speaking of logic, do you know of https://en.wikipedia.org/wiki/Linear_logic#The_resource_interpretation? Interesting read}
    sent: "2017-07-12T09:30:37.055Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965ebc6bc46472974dfbaf2"
    text: {Yes, you are pointing me to the right direction. I'm gonna try to make a function of this not xor gate and substitute the macro for this.}
    sent: "2017-07-12T09:28:38.822Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965eacbbc46472974dfb7b1"
    text: "Substituting NOT -> false, AND -> true"
    sent: "2017-07-12T09:24:27.206Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965ea9d4bcd78af56a082c2"
    text: {@Rebol2Red looks a bit like a `not xor` gate, but probably an illusion of my simplification^/```^/0 0 1^/1 0 0^/0 1 0^/1 1 1^/```}
    sent: "2017-07-12T09:23:41.328Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965e98776a757f80801295b"
    text: {+1 for EXAMPLE. Matlab has it built-in into their help function, with the addition of 'see also' section. Very helpful so you don't need to leave the console for help}
    sent: "2017-07-12T09:19:03.656Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5965e8f0c101bc4e3a787e27"
    text: {:point_up: [12 juli 2017 11:03](https://gitter.im/red/help?at=5965e5faf5b3458e303ad433) Yeah, you wanted an example of the TEMPLATE function too ;-)^/I Ithink this would help starters a lot and is also helpful for those ever tricky constructs for TRY CATCH, WHILE (with the block and not the condition) you do not use often and as you also use other languages tend to forget about how Red does it precisely.}
    sent: "2017-07-12T09:16:32.916Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5965e89ebf7e6af22ccd705d"
    text: "@Rebol2Red that's more helpful"
    sent: "2017-07-12T09:15:10.057Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965e7dd1c8697534a170045"
    text: {Yes it is bit like a 4 way logic ^/true and NOT -> false^/false and NOT -> true^/true and AND -> true^/false and AND -> false^/http://sources.vsta.org/comp.sources.unix/volume3/infer^/It's about a inferenc mechanism by the deceased George Hageman. Very interesting if you are into ai.^/^/"I had read somewhere that only a language traditionally suited for^/AI was able to handle things like "inference".  Thanks, Mr. Hageman, for dissolving that myth."^/}
    sent: "2017-07-12T09:11:57.676Z"
    editedAt: "2017-07-12T09:20:43.787Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965e79c1c8697534a16fee4"
    text: {Might help if you can link to original source. Could be a good idea to post as stackoberflow question and link here.. }
    sent: "2017-07-12T09:10:52.626Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965e7563230e14f3a4e7283"
    text: {@Rebol2Red it's not really clear what you're trying to accomplish. Looks like some implementation of a different type of logic? }
    sent: "2017-07-12T09:09:42.574Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965e71a76a757f808011df8"
    text: {Maybe it is better to make a function out of it? ^/Note: I do not know how to do this.}
    sent: "2017-07-12T09:08:42.718Z"
    editedAt: "2017-07-12T09:09:43.245Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965e6c6329651f46e7c00bb"
    text: "@Rebol2Red could be the recent bug"
    sent: "2017-07-12T09:07:18.193Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965e619c101bc4e3a7874a4"
    text: {Not working (closes immediately):^/```^/NOT: 2^/e: context [type: 0    str: [val: 0]]^/#macro TRUTHVAL func [E] [^/    either E/type and NOT [^/        either E/str/val = true [^/            false^/         ][^/            true^/         ]^/    ][^/        e/str/val^/    ]^/]^/^/e/type: NOT^/e/str/val: true^/print TRUTHVAL NOT^/^/e/type: AND^/e/str/val: true^/print TRUTHVAL AND^/```^/I am confused now and think i do things wrong at calling the macro.}
    sent: "2017-07-12T09:04:25.795Z"
    editedAt: "2017-07-12T09:07:19.088Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965e5faf5b3458e303ad433"
    text: {@iArnold can you elaborate? I was expecting more ;)}
    sent: "2017-07-12T09:03:54.533Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5965e279329651f46e7bee25"
    text: {Perhaps it is a good idea to get an EXAMPLE or TEMPLATE function that shows code examples for certain functions.^/```^/>>example case^/case [^/<condition1> [<actions1>]^/...^/<conditionN> [<actionsN>]^/]^/>>^/```^/}
    sent: "2017-07-12T08:48:57.791Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5965e1680de4d2545e1c33f5"
    text: "The value of NOT is 2 and the value of AND is 0"
    sent: "2017-07-12T08:44:24.885Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965e112bf7e6af22ccd4d99"
    text: {It isn't clear what the is the value of `NOT`,  it will have been defined before the TRUTHVAL macro.}
    sent: "2017-07-12T08:42:58.907Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5965e0d21c8697534a16e27b"
    text: {It could possibly be C if E is a multi-level structure. It would translate to something like this:^/```text^/#macro TRUTHVAL func [E] [^/    either E/type and NOT [^/        either E/str/val = true [^/            false^/         ][^/            true^/         ]^/    ][^/        e/str/val^/    ]^/]^/```}
    sent: "2017-07-12T08:41:54.884Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5965ddc5bc46472974df7d57"
    text: {Ah, my bad, i thought it was plain c.^/The extension of the file is .c and not .cc or .cpp.^/Well, I'll wait and see. Thanks.}
    sent: "2017-07-12T08:28:53.717Z"
    editedAt: "2017-07-12T08:35:40.753Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965dd661c8697534a16d263"
    text: {The code you posted appears to be c++ not c. It may be that no C++ programmers have seen your message yet. }
    sent: "2017-07-12T08:27:18.257Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5965dba41c8697534a16c9d6"
    text: {If my question about some c code is not relevant to Red (which i can imagine) please say so. This will not offend me. But i do think it may attract people with a c background.}
    sent: "2017-07-12T08:19:48.927Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5965c6d276a757f808009253"
    text: {to-image should work, if not share your code with @qtxie to figure it out, doc mentioned that  gui-console was broken recently.}
    sent: "2017-07-12T06:50:58.562Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5965c2d9329651f46e7b628f"
    text: {Getting close. I was wondering if Red can save a face as an image? I tried to-image but it seems to crash the console.}
    sent: "2017-07-12T06:34:01.456Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5965a960c101bc4e3a77798b"
    text: ": ) That and phone GPS!"
    sent: "2017-07-12T04:45:20.003Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5965a94989aea4761d8cc782"
    text: "@rgchris That's why you're never lost."
    sent: "2017-07-12T04:44:57.492Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5965a7ad3230e14f3a4d6a26"
    text: {I'm a [cartonerd](https://xkcd.com/1169/). Love maps, atlases (especially [historical](https://www.barnesandnoble.com/w/historical-atlas-of-the-american-revolution-ian-barnes/1101533362) [atlases](https://www.barnesandnoble.com/w/books/1005515277?ean=9780195219210) and the like)!}
    sent: "2017-07-12T04:38:05.612Z"
    editedAt: "2017-07-12T04:39:33.016Z"
    v: 2
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5965a5d53230e14f3a4d6458"
    text: {I see. You know males don't usually looks at maps so I have a good excuse. You continue to be a life-saver. Thanks.}
    sent: "2017-07-12T04:30:13.598Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5965a5750de4d2545e1b3649"
    text: {They replaced the hash! type in Rebol 3, though Rebol 3 did not set a literal notation for maps (save for construction syntax). JSON really codified them as a must-have feature.}
    sent: "2017-07-12T04:28:37.874Z"
    editedAt: "2017-07-12T04:29:39.079Z"
    v: 3
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5965a1bef5b3458e3039ba60"
    text: {@rgchris Wow. That works! Thank you. I have to see how it behaves with the rest of the code but I just saved and read my object. How in the world did you know about this map! business?}
    sent: "2017-07-12T04:12:46.788Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59659d6ac101bc4e3a7752c5"
    text: {@TimeSlip Here's a quickie version:^/```lisp^/Red [^/^-Title: "Mapify"^/^-Date: 11-Jul-2017^/^-Author: "Christopher Ross-Gill"^/]^/^/mapify: func [thing [object! block!] /local key value][^/^-case [^/^-^-object? thing [^/^-^-^-make map! collect [^/^-^-^-^-foreach [key value] body-of thing [^/^-^-^-^-^-keep key^/^-^-^-^-^-keep/only either find [block! object!] type?/word :value [^/^-^-^-^-^-^-mapify :value^/^-^-^-^-^-][^/^-^-^-^-^-^-:value^/^-^-^-^-^-]^/^-^-^-^-]^/^-^-^-]^/^-^-]^/^-^-block? thing [^/^-^-^-collect [^/^-^-^-^-foreach value thing [^/^-^-^-^-^-keep/only either find [block! object!] type?/word :value [^/^-^-^-^-^-^-mapify :value^/^-^-^-^-^-][^/^-^-^-^-^-^-:value^/^-^-^-^-^-]^/^-^-^-^-]^/^-^-^-]^/^-^-]^/^-]^/]^/```}
    sent: "2017-07-12T03:54:18.132Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
)#(
    id: "59659ae4329651f46e7ad2ab"
    text: "Ah, Yes. thank you."
    sent: "2017-07-12T03:43:32.703Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59659aa8329651f46e7ad1f9"
    text: "Really depends on the nature of your objects."
    sent: "2017-07-12T03:42:32.867Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59659a7abf7e6af22ccc2971"
    text: {You'd just need to recursively loop through your hierarchy and switch out objects for maps (or if at all possible, just use maps).}
    sent: "2017-07-12T03:41:46.230Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59659a482723db8d5e00bd1e"
    text: {So it is possible to say:^/```lisp^/>> thing: make object! [foo: "Bar"]^/== make object! [^/    foo: "Bar"^/]^/>> make map! body-of thing^/== #(^/    foo: "Bar"^/)^/```}
    sent: "2017-07-12T03:40:56.894Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59659a160de4d2545e1b0d41"
    text: {I'm trying to create a work-around for now. But thank you so much for the suggestion.}
    sent: "2017-07-12T03:40:06.534Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596599dc1c8697534a15c2c7"
    text: {Don't think you can use them as prototypes and they have no context.}
    sent: "2017-07-12T03:39:08.540Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "596599c5c101bc4e3a7744ea"
    text: "@rgchris, I see, it remains a map!"
    sent: "2017-07-12T03:38:45.209Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596599a12723db8d5e00bb5b"
    text: {```lisp^/>> thing: #(foo: "Bar")^/== #(^/    foo: "Bar"^/)^/>> thing/foo^/== "Bar"^/```}
    sent: "2017-07-12T03:38:09.504Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "596599684bcd78af569f2f49"
    text: {(don't worry, haven't been here since you left : )}
    sent: "2017-07-12T03:37:12.698Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "59659959bc46472974de7c1d"
    text: {No—Red has literal notation for Maps and in some ways they cover the same ground.}
    sent: "2017-07-12T03:36:57.734Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5965992a3230e14f3a4d3ad1"
    text: {@rgchris Sorry I stepped out. I've never used map! before. Is there some special loading procedure?}
    sent: "2017-07-12T03:36:10.532Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59654320329651f46e798f18"
    text: {@TimeSlip Are your objects such that you could convert to map! before saving?}
    sent: "2017-07-11T21:29:04.391Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "596538801c8697534a145c5f"
    text: {I'll take a look at the rebol save/all. Thanks. It was bugging me.}
    sent: "2017-07-11T20:43:44.259Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59653845c101bc4e3a75da82"
    text: {I see. `save/all` and `mold/all` (serialized format) are not implemented yet, so you probably would have to implement your own saver.}
    sent: "2017-07-11T20:42:45.070Z"
    editedAt: "2017-07-11T20:43:08.583Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5965383dbc46472974dd1363"
    text: {If I can remember correctly, rebol used to save objects in a something like a serial method. I don't know, it's been a while since I've dealt with this.}
    sent: "2017-07-11T20:42:37.485Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596537b2329651f46e795b43"
    text: {@rebolek No, my object holds other objects and so when I  "do" it , it doesn't  go deep if you know what I mean.}
    sent: "2017-07-11T20:40:18.932Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596533ff4bcd78af569dadf6"
    text: {I want to convert this c code to Red^/```^/#define TRUTHVAL(E) ((E->type & NOT) ? (E->str->val == TRUE) ? FALSE : TRUE : (E->str->val))^/```^/Used elsewhere as:^/```^/if (TRUTHVAL (Rule[i]->con) == TRUE)^/ continue;^/```^/Maybe somebody can explain what's going on in the #define?^/Preferally in the form of either ... [][] or if ... []^/^/My try: ^/```^/AND-: 0^-^/NOT-: 2^/e: context [type: 0^-str: [val: 0]]^/^/truthval: func [^/^-e^/][^/^-either ((e/type and NOT-) = NOT-) [^/^-^-either (e/str/val = true) [^/^-^-^-return false^/^-^-][^/^-^-^-return true^/^-^-]^/^-][^/^-^-return true^/^-]^-^/]^/^/; using AND- ^/e/type: and-^-^-^/e/str/val: true^/if ((truthval e) = true) [^/^-print "yes1"^/]^/; using NOT-^/e/type: NOT-^-^-^/e/str/val: true^/if ((truthval e) = true) [^/^-print "yes2"^/]^/```^/I doubt if this code is right or is it?}
    sent: "2017-07-11T20:24:31.395Z"
    editedAt: "2017-07-11T20:29:46.989Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "596533c0bc46472974dcfcd2"
    text: {@TimeSlip `save`/`load` does not work for you?^/```^/>> save %object.red make object! [a: 1 b: 2]^/>> o: do load %object.red^/== make object! [^/    a: 1^/    b: 2^/]^/```}
    sent: "2017-07-11T20:23:28.345Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596531e52723db8d5eff30fd"
    text: {Hey, I forgot how to save objects so that I can load them again. What's the trick.  (I have blocks that contain other objects as well). Thanks in advance.}
    sent: "2017-07-11T20:15:33.715Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59652b3b1c8697534a141b1d"
    text: {@greggirwin  Thank to @qtxie , it is his work, I've just added few things.}
    sent: "2017-07-11T19:47:07.826Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59652ae5bf7e6af22cca84af"
    text: {Ohhhh, man. Now I want to play with it. Great looking doc Bolek. I remember the examples now. Just ran them all again. Thanks for including those.}
    sent: "2017-07-11T19:45:41.088Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59652a40bc46472974dcd065"
    text: {Thanks @rebolek, I was looking in the wrong place for that doc.}
    sent: "2017-07-11T19:42:56.511Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596528aef5b3458e3037e8ea"
    text: {@rebolek Thanks, I'll check that out. You guys are amazing. }
    sent: "2017-07-11T19:36:14.218Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596527e089aea4761d8aea0a"
    text: {Also, latest Gritter uses `text-box` instead of custom Draw rich-text.}
    sent: "2017-07-11T19:32:48.646Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "596527b40de4d2545e195450"
    text: {@TimeSlip @greggirwin we aready have info on `text-box`available here: https://github.com/qtxie/red/wiki/Text-box!-Usage}
    sent: "2017-07-11T19:32:04.438Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59650bb52723db8d5efe7455"
    text: {Thanks Greg. My experimenting was leading to that conclusion. I'm a lazy GUI guy as you know. I took a look at reBolek's code. Nice. }
    sent: "2017-07-11T17:32:37.315Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59650a2a1c8697534a136858"
    text: {`Area` won't do that. It's just a native multiline text style. What you want is `text-box`, or Bolek's rich text approach, used in his Gritter client. It shouldn't be long before we get more info on `text-box`. }
    sent: "2017-07-11T17:26:02.428Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5964f13a0de4d2545e18339b"
    text: {I'd like to present some information in an 'area face with mark-up such as bold. It's not a do or die thing, I can live with out it but is that something that can be done? Would I have to create a bunch of text faces? I'm about to try that out...}
    sent: "2017-07-11T15:39:38.519Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5964eabf89aea4761d89b66c"
    text: {@virtualAlan Thanks Alan. Very cool. Just the tool to test out pieces of Vid code for me.}
    sent: "2017-07-11T15:11:59.292Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "596483a44bcd78af569a56c1"
    text: {Only an overkill in semicolons, but that is a matter of taste.}
    sent: "2017-07-11T07:52:04.417Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59640cc22723db8d5efa3fee"
    text: "Just read the header comments. Sounds good Alan. "
    sent: "2017-07-10T23:24:50.562Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5964006e3230e14f3a468bb6"
    text: {An experiment based on Nenads Livecode script,  I did this just for fun.  Was just messing about with it ....^/Anyway, just try it, as i said, just a bit of fun .....^/http://www.mycode4fun.co.uk/example-scripts}
    sent: "2017-07-10T22:32:14.532Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "5963c62a76a757f808f81e10"
    text: {As I pointed out in the note at the bottom there, I'm trying to bind a block to a single word VALUE without binding to SERIES or CRITERIA.}
    sent: "2017-07-10T18:23:38.557Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963c5bf89aea4761d84e685"
    text: "https://stackoverflow.com/a/45018650/292969"
    sent: "2017-07-10T18:21:51.037Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963c5a8329651f46e730a79"
    text: {However, there is another case that I have that is a little more subtle. I can isolate it to the case in this question:}
    sent: "2017-07-10T18:21:28.608Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963c56ec101bc4e3a6f9cb6"
    text: {Currently this works, but is less than ideal (indeed I've only tested it in interpreted mode):^/^/```lisp^/#macro use: func [words [block!] code [block!] /local word object][^/^-reduce ['do bind code make object! collect [foreach word words [keep to set-word! word] keep none]]^/]^/```}
    sent: "2017-07-10T18:20:30.521Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "5963c51dbc46472974d6b674"
    text: {Pursuant to the right approach to macro-izing USE in my [AltXML](https://github.com/rgchris/Scripts/blob/master/experimental/altxml.red) script, for the most part I use it to isolate support functions as an alternative to CONTEXT with SET (which I've always been uneasy with). That'd be the main case use to handle.}
    sent: "2017-07-10T18:19:09.211Z"
    v: 1
    author: "5572679415522ed4b3e1802b"
) #(
    id: "595d54873230e14f3a2c24e2"
    text: {Yes, you can parse strings just like it does when it tokenizes.}
    sent: "2017-07-05T21:05:11.882Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d52733230e14f3a2c1b48"
    text: {I see, and what if I want to pre-parse source code itself? Is that what lexer does?}
    sent: "2017-07-05T20:56:19.925Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d5204c101bc4e3a567f93"
    text: {To Red `[aaa]` contains  a single word. You would have to store that, form it, and parse that.}
    sent: "2017-07-05T20:54:28.366Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d4fce3230e14f3a2c0eb8"
    text: {Can I `parse` `word!` by its symbols? Kinda like that:^/```^/parse [aaa] [some 'a]^/```}
    sent: "2017-07-05T20:45:02.570Z"
    editedAt: "2017-07-05T20:47:57.770Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595bc783329651f46e522ebe"
    text: {`Foreach`/iterators don't bind the word, as you note. When we get a good answer from Team Red on this, we'll add it to the wiki.}
    sent: "2017-07-04T16:51:15.490Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595b9317ad9c781843cca6b4"
    text: {You can redefine almost any function, so the danger is like you experienced `round` was overwritten. ^/```^/original-round: :round ^/```}
    sent: "2017-07-04T13:07:35.733Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595b8b08bf7e6af22ca19ad8"
    text: {This is an interesting example of current iterators' behavior - they are not context constructors. Sometimes it's a nice thing (though I can't remember any good use-case for it right now ;)), but sometimes it can be confusing.^/^/Here, when I said `round` I meaned `cipher round`, in terms of cryptography.^/```^/p-box: [^/    [prin "w"]^/    [prin "a"]^/    [prin "t"]^/]^/^/foreach round p-box [do round]^/```^/It prints `wat` as expected, but after that original `round` function is lost forever:^/```^/probe round 3.5^/```^/Results in `[prin "t"]`, but actually we wanted `4.0`. Moreover, if you'll try to compile this script:^/```^/*** Compilation Error: missing argument^/*** in file: <snip>^/*** near: [round]^/```^/So you need to manually construct context for this iteration:^/```^/p-box: [^/    [prin "w"]^/    [prin "a"]^/    [prin "t"]^/]^/^/do reduce has [round] [foreach round p-box [do round]]^/^/probe round 3.5^/```^/Gives us `wat 4.0`^/}
    sent: "2017-07-04T12:33:12.602Z"
    editedAt: "2017-07-04T12:37:47.197Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595b8411329651f46e5082e8"
    text: {Meanwhile:^/```^/iterate-back: func [^/    'index [word!]^/     bump  [integer!]^/     body  [block!] ^/][  ^/    set :index bump^/    while [(get :index) > 0] [^/        do body^/        set :index (get :index) - 1^/    ]^/]   ^/```}
    sent: "2017-07-04T12:03:29.328Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595b6ceaf5b3458e300eafec"
    text: {Can anyone help me to compile this thing?^/```^/Red []^/^/iterate: func [^/    'index [word!]^/     bump  [integer!]^/     body  [block!]^/     /back^/     /local ^/        range^/][  ^/    range: collect [repeat :index bump [keep get :index]]^/    if back [reverse range]^/^/    foreach :index range [do body] ; <-- problem lies here^/]^/^/iterate/back i 5 [prin i]^/```^/Interpreted:^/```^/54321^/```^/Compiled:^/```^/*** Red Compiler Internal Error: Script Error : add-symbol expected name argument of type: word^/*** Where: comp-foreach^/*** Near:  [add-symbol word: pc/1^/add-global word^/]^/```^/I'm not sure that it's a bug (rather my misunderstanding of current compiled/interpreted behavior)}
    sent: "2017-07-04T10:24:42.117Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595a4b8076a757f808cf82e5"
    text: "Thanks. ;-)"
    sent: "2017-07-03T13:49:52.653Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595a4b47f5b3458e3009ad84"
    text: {@dockimbel https://github.com/red/red/issues/2847 here you go ;)}
    sent: "2017-07-03T13:48:55.586Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595a4ae6703e565c336c3f6d"
    text: {Yeah, macro expansion in the same file works fine, it seems only included ones misbehave.}
    sent: "2017-07-03T13:47:18.606Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595a4a55ad9c781843c6a3b1"
    text: {@dockimbel This one works as expected^/```^/Red []^/^/#macro [@answer] func [s e] [42]^/^/answer: @answer^/```^/```^/Red []^/^/#include %macros.red^/^/probe answer^/```^/}
    sent: "2017-07-03T13:44:53.262Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "595a49ea329651f46e4ad5c8"
    text: {Hmm, strange that named macros work there and not pattern-matching ones...looks like a bug.}
    sent: "2017-07-03T13:43:06.272Z"
    editedAt: "2017-07-03T13:43:22.743Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595a485ebf7e6af22c9bd4e6"
    text: {@dockimbel Meanwhile here's a workaround for named macro (an ugly one!):^/```^/Red []^/^/#macro say-answer: func [] [42]^/^/answer: say-answer^/```^/^/```^/Red []^/^/#include %macros.red^/^/probe answer^/```}
    sent: "2017-07-03T13:36:30.278Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595a4826f5b3458e30099d24"
    text: {@9214 Yes, it think it should be possible to support that. Please open a wish ticket for it.}
    sent: "2017-07-03T13:35:34.924Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595a4721bf7e6af22c9bce20"
    text: {Is it possible to include macro defined in other file?^/^/Suppose I have file `%macros.red`:^/```^/Red []^/^/#macro [@answer] func [s e] [42]^/```^/And `%main.red` file:^/```^/Red []^/^/#include %macros.red^/^/probe @answer^/```^/^/Evaluating `%main.red` gives me `@answer`, but I want `42`!^/^/In my understanding `#include` expands all macro directives and deletes them (and all macro calls) before actual inclusion. Is there any way to suppress this?^/I think @JacobGood1 asked something like that before, but... Gitter search is too clunky to navigate :confused:}
    sent: "2017-07-03T13:31:13.739Z"
    editedAt: "2017-07-03T13:33:13.942Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5957dcddf5b3458e3000f7b7"
    text: "@BlackATTR_twitter, I do that all the time."
    sent: "2017-07-01T17:33:17.237Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5957b827f5b3458e30007a38"
    text: {Yep, thanks. I was able to easily work around it, I was just curious. I'm aware of the development status, so please don't take it as a complaint. :) I'm trying to make Red my primary Redbol environment so this is just one of a few things I noticed along the way.}
    sent: "2017-07-01T14:56:39.921Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5957ad1c703e565c3362a992"
    text: {@BlackATTR_twitter did you see the conversation in [red/red channel](https://gitter.im/red/red?at=59519ac8c101bc4e3a242dd2)? also bugs #2831 / #2832}
    sent: "2017-07-01T14:09:32.647Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5957aa43bf7e6af22c9251d3"
    text: {@BlackATTR_twitter Join: the concatenation functions in Rebol2 could be improved, so that's a task on our todo-list, just not done yet. In the meantime, you can implement you own `join` function, it's trivial (or just copy/paste the Rebol2 one if you prefer).}
    sent: "2017-07-01T13:57:23.244Z"
    editedAt: "2017-07-01T13:57:58.482Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59579dc3ad9c781843bcdf35"
    text: {Just out of curiosity--- is there a story as to why there is no JOIN function in Red? Is there an equivalent besides REJOIN (or APPEND)?}
    sent: "2017-07-01T13:04:03.583Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59579c92ad9c781843bcdb72"
    text: {@greggirwin  Thanks again for the assistance. I was thinking I had a context/binding issue,  but fortunately it turned out to be something a lot simpler-- and simplifying the example here showed that my problem lay elsewhere. The dialect is working nicely now for files, URLs, and strings. I'll post more questions here if I get stuck, which is inevitable. :)}
    sent: "2017-07-01T12:58:58.397Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "595668fe6ae41d5d339fcd16"
    text: ":^^) I do have a lot of virtual shelves."
    sent: "2017-06-30T15:06:38.186Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5956127a4bcd78af565eff2d"
    text: {@greggirwin You are like a public library, if someone has that function, you are :clap: }
    sent: "2017-06-30T08:57:30.302Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "5955bfcec101bc4e3a366afb"
    text: "For sure."
    sent: "2017-06-30T03:04:46.382Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5955bfb75a1ab55f643cda49"
    text: "OK. I'll mark that done then. ;^^)"
    sent: "2017-06-30T03:04:23.828Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5955bfa4c101bc4e3a366abe"
    text: "You've paid me back several times my friend."
    sent: "2017-06-30T03:04:04.863Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5955bf8f329651f46e39a547"
    text: "Oh you"
    sent: "2017-06-30T03:03:43.494Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5955bf5f5a1ab55f643cd86d"
    text: "I still owe you for that cool poster James. :^^)"
    sent: "2017-06-30T03:02:55.829Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5955bf1cc101bc4e3a36692e"
    text: "Glad to help!"
    sent: "2017-06-30T03:01:48.139Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5955aa21c101bc4e3a3624fc"
    text: "Looking good so far! thanks Gregg"
    sent: "2017-06-30T01:32:17.216Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5955a6be6ae41d5d339c6fe7"
    text: "Thanks Gregg. You're the best."
    sent: "2017-06-30T01:17:50.885Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5955a654329651f46e394e6e"
    text: {```^/filter: function [^/^-"Returns two blocks: items that pass the test, and those that don't."^/^-series [series!]^/^-test [any-function!] "Test (predicate) to perform on each value; must take one arg"^/^-/only "Return a single block of values that pass the test"^/][^/^-result: reduce [copy [] copy []]^/^-foreach value series [^/^-^-append/only pick result make logic! test :value :value^/^-]^/^-either only [result/1][result]^/]^/^/to-path: func [spec][^/^-; LOAD FORM is used to clean up specs that have refinements ^/^-; in them. Refinement values get their sigil doubled, which^/^-; FORM removes, so they are sanitized. More overhead, but we^/^-; could make that optional if this func lives on.^/^-load form append clear '_/_ spec^/]^/^/refine: function [^/^-"Returns a path, by adding refinement(s) to a word or path."^/^-path [any-word! path!]^/^-refs [word! block!] "Refinements to add"^/^-return: [path!]^/][^/^-if block? refs [^/^-    ; Separate copy step because `remove-each` doesn't return^/^-    ; a value at this time.^/^-    refs: copy refs^/^-    remove-each val refs [not any-word? val]^/    ]^-^/^-to-path compose [(path) (refs)]^/]^/p: refine 'append 'only^/p: refine 'append [only]^/refine 'append [only]^/do reduce [refine 'append [only] [] [a]]^/refine 'find [part only case same any with skip last reverse tail match]^/^/;!! Where this won't work is if you have a function that takes refinements^/; ^-as args themselves. In that case, you need to use `refine` directly.^/do-refined: func [fn [word!] args [block!]][^/^-; Filter to split args into refinements and arg values^/^-set [refs args] filter args :refinement?^/^-; Make refined path^/^-fn: refine fn refs^/^-do compose [(fn) (args)]^/]^/do-refined 'append [[] /only [a]]^/do-refined 'append [[] /only [a] /dup 3]^/do-refined 'append [[] /dup /only [a] 3]^/do-refined 'append [[] /dup [a] 3 /only]^/do-refined 'append [[] [a] /dup 3 /only]^/do-refined 'append [[] /dup 3 /only [a]]^-; error, args out of order^/```}
    sent: "2017-06-30T01:16:04.042Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5955a63a76a757f808bdc998"
    text: {@TimeSlip, path evaluation isn't the same for functions as for blocks and objects. No easy trick there. You have to build a refined call dynamically or put a wrapper around it.}
    sent: "2017-06-30T01:15:38.577Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5955a4976ae41d5d339c6475"
    text: {@BlackATTR_twitter, in that case, this should work. Does it?^/```^/file-list: [%a.x %b.htm %c.y %d.html %e.z %f.index %index.html]^/rules: [^/    parse file [thru %.htm opt %l]^/    parse file [thru %index to end]^/]^/foreach file file-list [^/    print either all rules [file]["nope."]^/]^/```}
    sent: "2017-06-30T01:08:39.028Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5955973a3230e14f3a0bf1d9"
    text: {@BlackATTR_twitter When you evaluate ```block``` rules Red will return the last value it evaluated, i.e. the result of `parse file [thru %index to end]`. I think you need to wrap the two calls to parse in `all [ ... ]`}
    sent: "2017-06-30T00:11:38.710Z"
    editedAt: "2017-06-30T00:11:54.045Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595596f44bcd78af565d1b87"
    text: {(This is just a syntax to collect files. You can read into & across files as well.)}
    sent: "2017-06-30T00:10:28.213Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59559657ad9c781843b4cfe4"
    text: {If it helps, the dialect I'm working on looks a bit like this.^/```^/>> SELECT %*.js* FROM %/C/web/assets/*/data/^/5 files found.^/%/C/web/assets/img/data/images.json^/%/C/web/assets/styles/data/styles.js^/%/C/web/assets/js/data/jquery-1.10.2.min.js^/%/C/web/assets/js/data/odyssey.js^/%/C/web/assets/data/regions.json^/```}
    sent: "2017-06-30T00:07:51.438Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "595593aac101bc4e3a35db37"
    text: {Sort of like how we can use "get" with an object.}
    sent: "2017-06-29T23:56:26.069Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59559380329651f46e390f27"
    text: {Just wondering if there is a way to "refer" to a function's refinement. So that instead of doing foo/test, where foo is a function and test is a refinement, I could set a word to /test and do foo. }
    sent: "2017-06-29T23:55:44.987Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5955933c76a757f808bd8564"
    text: {That block of parse statements could be quite a bit longer.}
    sent: "2017-06-29T23:54:36.611Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "5955925b329651f46e390bdc"
    text: {I'm trying to match the files in file-list which pass both (i.e., all) parse rules.}
    sent: "2017-06-29T23:50:51.918Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59558ad0bf7e6af22c89eea6"
    text: {@BlackATTR_twitter, if you're trying to match either %.html or %index files, your problem is the `all`. If you're only trying to match %index.html, your code is fine. And you shouldn't need `bind` at all in this case.^/```^/file-list: [%a.x %b.htm %c.y %d.html %e.z %f.index %index.html]^/rules: [^/    parse file [thru %.htm opt %l]^/    parse file [thru %index to end]^/]^/foreach file file-list [^/    print either any rules [file]["nope."]^/]^/```}
    sent: "2017-06-29T23:18:40.178Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595582938dae4250316a6b23"
    text: {For now trust that this example has been simplified a lot.  This is for a dialect where the user input will be a different syntax -- not redbol.}
    sent: "2017-06-29T22:43:31.713Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59558037c101bc4e3a357940"
    text: {So... baby steps for now. This isn't being built for speed yet, I'm just trying to get it to work. (1. Make it work. 2. Make it correct. 3. Make it fast.)}
    sent: "2017-06-29T22:33:27.595Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59557f72329651f46e38ab01"
    text: {This is just a simple example. :) Combining the parse rules is something I can do as a programmer, but it's a lot harder to write a program that combines the parse rules correctly. }
    sent: "2017-06-29T22:30:10.113Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59557efc76a757f808bd2487"
    text: {But basically, as I hinted, my program is translating wild-cards and globbing rule notation into parse statements which can then be used as filters.}
    sent: "2017-06-29T22:28:12.550Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59557ebf76a757f808bd234c"
    text: {Those are good suggestions geekyi. I dumbed-down this example to get to the bind question.}
    sent: "2017-06-29T22:27:11.826Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59557a9876a757f808bd148a"
    text: {And with that, I don't think you need to `bind` if you use `parse` directly inside the for loop? }
    sent: "2017-06-29T22:09:28.002Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59557a22329651f46e389737"
    text: {Sorry my mistake, I think you wanted an *and* rule instead of an *or* rule}
    sent: "2017-06-29T22:07:30.447Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59557910703e565c3359dffe"
    text: {@BlackATTR_twitter weird that you do `parse` twice instead of combining the rules into a composite rule with `|`. Also, why not`suffix?`? }
    sent: "2017-06-29T22:02:56.704Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "595572a63230e14f3a0b4c0c"
    text: {I should mention that file-list contains plenty of files which pass the rules outside of foreach.}
    sent: "2017-06-29T21:35:34.486Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59557163703e565c3359c0fb"
    text: {My bindology foo is pretty weak (but I guess I'll get better at it since it seems to be all over the place when working with dialects), but I thought that my approach in the foreach body was generally right. }
    sent: "2017-06-29T21:30:11.011Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "595570e54bcd78af565c7a04"
    text: {And of course, I'm getting:^/```^/nope.nope.nope.nope.nope.nope.nope.^/```}
    sent: "2017-06-29T21:28:05.127Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "595570996ae41d5d339b846f"
    text: {so, like: ^/```^/file-list: read %/C/some-folder/^/rules: [parse file [some [thru %.htm skip]] parse file [some [thru %index to end]]] ; wild-cards for %*.html and %*index*^/foreach file file-list [bind rules 'file either all rules [print file][prin "nope."]]^/``` ^/}
    sent: "2017-06-29T21:26:49.751Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59556fb9329651f46e38704f"
    text: {I'm doing something where I'm constructing parse rules in advance and applying them later. Basically translating wild-cards/globbing rules into parse rules. }
    sent: "2017-06-29T21:23:05.400Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59556f7c11755ab056379bbe"
    text: {Got a quick question, hopefully an easy one for you bindology masters. }
    sent: "2017-06-29T21:22:04.431Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "59556c4911755ab056378cd2"
    text: {@greggirwin I liked the old rebol sites made by users  to see what and how people are doing their stuff.}
    sent: "2017-06-29T21:08:25.305Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "595564f78dae42503169f019"
    text: {Yes, that would be a good start :smile: Returning localized version with `help` instead of patching is probably better, I agree.}
    sent: "2017-06-29T20:37:11.296Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5955642b703e565c33598049"
    text: {`Help` would also need its own localization, as you say. }
    sent: "2017-06-29T20:33:47.448Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595563c7c101bc4e3a350385"
    text: {Very cool Bolek. But do we know if `spec-of` will always return a modifiable spec for the func? I only wonder because I think that may have changed at some point. It's useful for things like this, but could also cause issues I think. I'm all for having the localized text in a structure, though. `Help` could probably support it pretty easily, by wrapping the `spec-of` calls to take an optional locale, effectively using your `localize` idea on a single func at a time, on demand.}
    sent: "2017-06-29T20:32:07.477Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59556039c101bc4e3a34f2c5"
    text: {Translating this `map!` and passing it to above `localize` function would localize all functions.}
    sent: "2017-06-29T20:16:57.384Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "5955600b4bcd78af565c2ba9"
    text: {(I use block, so other help text for values and refinements can be added with additional code)}
    sent: "2017-06-29T20:16:11.684Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59555fc876a757f808bca13f"
    text: {Getting original help string is also very easy:^/```^/>> en: #()^/== #()^/>> foreach word words-of system/words [all [value? :word function? get word string? string: first spec-of get word extend en reduce [word reduce [string]]]]^/^/== none^/>> probe en^/#(^/    collect: [^/        {Collect in a new block all the values passed to KEEP function from the body block}^/    ]^/    math: [^/        {Evaluates a block using math precedence rules, returning the last result}^/    ]^/    last: ["Returns the last value in a series"]^/    source: [^/        "Print the source of a function"^/    ]^/(...)^/```}
    sent: "2017-06-29T20:15:04.100Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59555e6f4bcd78af565c23c2"
    text: "I like that!"
    sent: "2017-06-29T20:09:19.664Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59555661329651f46e380127"
    text: "Yes that looks like a good start @rebolek !"
    sent: "2017-06-29T19:34:57.859Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5955558cbf7e6af22c8905ad"
    text: {Of course it would require localization of `help` function.}
    sent: "2017-06-29T19:31:24.774Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "595555645a1ab55f643b29b1"
    text: {Here's some idea:^/```^/>> cz: #(find: ["Vrací sérii v místě,kde je nalezena hodnota, nebo NONE"])^/== #(^/    find: [{Vrací sérii v místě,kde je nalezena hodnota, nebo NONE}]^/)^/>> localize: function [locals fc][spec: spec-of :system/words/:fc if string? first spec [spec/1: locals/:fc/1]]^/== func [locals fc /local spec][spec: spec-of :system/words/:fc if string? first spec [spec/1: locals/:fc/1]]^/>> localize cz 'find^/== {Vrací sérii v místě,kde je nalezena hodnota, nebo NONE}^/>> ? find^/USAGE:^/     FIND series value^/^/DESCRIPTION: ^/     Vrací sérii v místě,kde je nalezena hodnota, nebo NONE. ^/     FIND is an action! value.^/(...)^/```}
    sent: "2017-06-29T19:30:44.772Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "595551bb11755ab056370cf1"
    text: "Perhaps?"
    sent: "2017-06-29T19:15:07.577Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595551ab11755ab056370c9d"
    text: "Can't it be extended for more stuff?"
    sent: "2017-06-29T19:14:51.992Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "595551743230e14f3a0ab6a5"
    text: "Isn't that for things like currency, date format?"
    sent: "2017-06-29T19:13:56.293Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595550dd76a757f808bc5818"
    text: "There is `system/locale`"
    sent: "2017-06-29T19:11:25.407Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59554e0711755ab05636fb59"
    text: {Today I had a nice thought, when trying to teach children to start to program a little in Red, the HELP is all in English. How about supporting localized HELP texts? What are your thoughts? And how would it be possible to support such a feature preferably in a smart way.}
    sent: "2017-06-29T18:59:19.151Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59553c3cc101bc4e3a34485d"
    text: {@9214 ^/```^/>> parse "abcd" [(ch: charset "abcd") 4 ch]^/== true^/```}
    sent: "2017-06-29T17:43:24.306Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "595533c25a1ab55f643a853f"
    text: {Most of my answers look like Q&A columns :smile: ^/```^/>> parse "abcd" reduce [4 charset "abcdefghijklmn"]^/== true^/```}
    sent: "2017-06-29T17:07:14.779Z"
    editedAt: "2017-06-29T17:09:14.427Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5955315e6ae41d5d339a51d0"
    text: {Is it possible to generate `charset` "on-the-fly" inside `parse` rule?^/```^/_: charset "abcd"^/parse data [5 _]^/```^/^/```^/parse data [5 (charset "abcd" or something like that)]^/```^/}
    sent: "2017-06-29T16:57:02.174Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59552c0cbf7e6af22c883595"
    text: {@Rebol2Red, the cookbook examples are all really old at this point, and may have been written in the context of their times. Also, that one looks like a clever hack Carl put in to try and help people use Rebol at the time. Red won't support all Rebol features, though it is *highly* compatible as a language.^/All that said, what is your end goal? What are you trying to accomplish?}
    sent: "2017-06-29T16:34:20.717Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5954e6a34bcd78af5659bf12"
    text: {@Rebol2Red three backticks around code really helps readability! Thanks. Also single backticks around keywords}
    sent: "2017-06-29T11:38:11.500Z"
    editedAt: "2017-06-29T11:38:59.930Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5954b944c101bc4e3a31c87c"
    text: {I  did see a remark to put this on hacker news. I have no intentions to abuse this. So it is about security? I really like to know, so i can stop trying and wasting time with this. I am all in for security!}
    sent: "2017-06-29T08:24:36.625Z"
    editedAt: "2017-06-29T08:32:59.935Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5954b0433230e14f3a07a600"
    text: {I think you are right ^/It is not a cgi question but a question howto run scripts inside html or text.^/^/With a local file do %\c\TESTFOLDER\index.html and the html script tag sample i got this error:^/*** Syntax Error: invalid value at {">^^-^^-[Red []^^-^^-prin "You just ran the hi}^/^/With do read %\c\TESTFOLDER\index.html i got this:^/*** Syntax Error: missing #")" at {: "http://www.");^^-document.write("<sc"+}^/*** Where: do^/*** Stack: ^/^/Why does it work with rebol and not with Red?^/Rebol can read and execute code anywhere in html and text files}
    sent: "2017-06-29T07:46:11.681Z"
    editedAt: "2017-06-29T07:55:32.042Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5954acd86ae41d5d3397bd3b"
    text: {I took the sample from http://www.rebol.net/cookbook/recipes/0062.html - 4. Hiding Scripts Inside Web Pages^/In order to do this you have to put red.exe into a cgi directory of the host and execute it. And do http://[host]/hidden-script.html^/I think the placing and executing will work but the bottleneck is the do part^/do http://[host]/hidden-script.html ^/I do not know howto let Red read thru a webpage without causing errors ^/Before trying to do some cgi i have tried to read thru a local html to execute Red code. I got errors.}
    sent: "2017-06-29T07:31:36.134Z"
    editedAt: "2017-06-29T07:37:34.811Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "595346afad9c781843aa28b1"
    text: "from nginx."
    sent: "2017-06-28T06:03:27.273Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59534694c101bc4e3a2b6b32"
    text: {@geekyi You are correct that nginx does not support cgi. I think you can still write modules that can be integrated with nginx. OpenResty is a set of modules for using LuaJit directly for }
    sent: "2017-06-28T06:03:00.519Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5953467d76a757f808b30f87"
    text: {@geekyi Fast-CGI relies on external processes connected to the HTTPd server process using TCP.}
    sent: "2017-06-28T06:02:37.771Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59533f4b11755ab0562dca5b"
    text: {However, nothing beats Cheyenne to setup on windows. So much so that I've used it to teach other people how to host static content where others failed, and it also can run rebol as a bonus. One click, works out of the box; no setup time}
    sent: "2017-06-28T05:31:55.208Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59533e77bf7e6af22c7f635c"
    text: {Nginx has a pretty basic, braces based configuration. Much cleaner than the xml based config Apache has. Usually, with things like wamp, it's pretty easy to setup your own server for anything. }
    sent: "2017-06-28T05:28:23.476Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59533d4c11755ab0562dc423"
    text: "Correct me if I'm wrong "
    sent: "2017-06-28T05:23:24.223Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59533d344bcd78af5652af04"
    text: {Nginx only supports fast-cgi. Which I think that means is it only supports `fork`able processes only}
    sent: "2017-06-28T05:23:00.470Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "595328cf8dae4250315fe5a9"
    text: {@endo64 Writing an Apache module for Red should be pretty straightforward. I don't know the Nginx API, but it shouldn't be harder.}
    sent: "2017-06-28T03:55:59.252Z"
    editedAt: "2017-06-28T03:56:10.918Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5952e9854bcd78af56517a9b"
    text: {And yet the example HTML script tag is something else}
    sent: "2017-06-27T23:25:57.058Z"
    v: 1
    author: "593bea3ad73408ce4f6644ab"
) #(
    id: "5952da148dae4250315ec262"
    text: {Right, it's possible to run Red as CGI, see here: http://qyz.cz/cgi-bin/index.cgi}
    sent: "2017-06-27T22:20:04.926Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5952bf856ae41d5d338f7d06"
    text: {@cyclecraze_twitter Currently there is no web server that executes Red script. ^/There is one that executes Rebol script natively (http://cheyenne-server.org/), the author of Cheyenne Web Server is also DocKimble, Red's author.^/I think when Red ready Doc will re-write Cheyenne from scratch for Red (with Red).^/As I know there is no module for Apache or Nginx but you can run scripts via CGI interface (https://github.com/red/red/wiki/Using-Red-as-CGI)}
    sent: "2017-06-27T20:26:45.868Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5952a771ad9c781843a798f5"
    text: {@Rebol2Red I've been looking at the sources and `path-thru` seems suspicious to me. I think that `*-thru` functions are not finished.}
    sent: "2017-06-27T18:44:01.666Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59528391ceb5bef82eb7dc05"
    text: {@Rebol2Red what web server executes the script above? Can nginx be used via cgi or module?}
    sent: "2017-06-27T16:10:57.678Z"
    v: 1
    author: "593bea3ad73408ce4f6644ab"
) #(
    id: "595269c7703e565c334c1ceb"
    text: {I just see do-thru - Evaluates a remote Red script through local disk cache.^/Maybe it is working already but i do not know how to implements this.^/I have this on my index.html page but do-thru does not work with this^/```^/...^/<script language="Red">^/[Red []^/prin "You just ran the hidden RED script! on "^/print now/time]^/</script>^/...^/```}
    sent: "2017-06-27T14:20:55.479Z"
    editedAt: "2017-06-27T14:21:19.945Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "59524742ceb5bef82eb6a23a"
    text: {Btw The reason i did not refreshed the page is because downloading is not the only thing you can do on that page. And... Maybe i should have speaked for myself :)}
    sent: "2017-06-27T11:53:38.924Z"
    editedAt: "2017-06-27T12:00:53.947Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "59524483703e565c334b5c63"
    text: {Yeeees, It works and you were right i didn't refresh the page. ^/Maybe it's worth to mention on the download page to always refresh the page before downloading? We all know this must be done but many times we forget to do it.^/Thank you!}
    sent: "2017-06-27T11:41:55.179Z"
    editedAt: "2017-06-27T11:49:24.169Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "595242678dae4250315bab82"
    text: "I tested it here and got 404 too."
    sent: "2017-06-27T11:32:55.234Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5952424481cd9a5d7e9a0a2b"
    text: {@dockimbel Maybe he had the download page open long before and clicked the download links after a rebuild.}
    sent: "2017-06-27T11:32:20.622Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5952403476a757f808ae59cf"
    text: {@x8x That should not be an issue in general, as the whole build process lasts a 20-30 seconds max. In the above case, after 5 minutes, it was still not there.}
    sent: "2017-06-27T11:23:32.105Z"
    editedAt: "2017-06-27T11:24:08.733Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59523f6e0cef4fed2eb6b4a0"
    text: {@dockimbel Maybe the issue that when building it first delete last builds, so while building it will return 404 as the links to past builds are still there, I'll fix that tonight.}
    sent: "2017-06-27T11:20:14.859Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59523eee8dae4250315b9aac"
    text: "@x8x Works for me now."
    sent: "2017-06-27T11:18:06.354Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59523e680cef4fed2eb6b490"
    text: "@Rebol2Red Can you try again"
    sent: "2017-06-27T11:15:52.899Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59523c8ebf7e6af22c7ab711"
    text: {@x8x ^^--- Seems something is wrong with the build script.}
    sent: "2017-06-27T11:07:58.974Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59523b4c6ae41d5d338cc9aa"
    text: {@qtxie^/Automated master branch 404 file not found^/Sources zip archive 404 file not found^/With last stable, it doesn't work^/I just looked if i could find the windows build version. I can only see: Windows 10 pro N}
    sent: "2017-06-27T11:02:36.444Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "59521a6a11755ab05628b3a6"
    text: {@geekyi tests with latest build.. it works, and wonders if red/red@bbca304 fixed it}
    status: true
    sent: "2017-06-27T08:42:18.303Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "595217b96ae41d5d338c153f"
    text: "@geekyi now can, on cmd.exe; was using pwrshell"
    status: true
    sent: "2017-06-27T08:30:49.569Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5952175dad9c781843a4a8db"
    text: {@geekyi on win 10 v1703 can't reproduce with build `14jun17-8e742ef` and wonders what was causing it}
    status: true
    sent: "2017-06-27T08:29:17.666Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "595211b1703e565c334a67eb"
    text: {@Rebol2Red I pushed a fix for it, please let me know if it still doesn't work.}
    sent: "2017-06-27T08:05:05.165Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "595204b6bf7e6af22c79a2cb"
    text: {I tried the latest red.exe today, seems works fine now.}
    sent: "2017-06-27T07:09:42.283Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "59519bc53230e14f3afa6d29"
    text: "Nice digging @RnBrgn."
    sent: "2017-06-26T23:41:57.586Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595196aead9c781843a2b3ef"
    text: {@Rebol2Red  I duplicated your error on my Win 10 machine. If the file name is 12 characters long, not including the .red extension ,it fails. If the filename is any other length it seems to work fine.}
    sent: "2017-06-26T23:20:14.787Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
)#(
    id: "59513d183230e14f3af8bffa"
    text: "That's a strange one alright."
    sent: "2017-06-26T16:58:00.279Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5950bb7c57a6e9f72efd04ef"
    text: {Phew, i thought i was going crazy. What on earth can be the reason?^/I have to say that In the past i had some more files with the same behavior. Files with - in it. I just renamed them and then they worked fine.}
    sent: "2017-06-26T07:45:00.556Z"
    editedAt: "2017-06-26T07:51:02.754Z"
    v: 7
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5950bb578dae425031549daf"
    text: "Ok, I can reproduce the issue now."
    sent: "2017-06-26T07:44:23.089Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5950ba3b76a757f808a74e48"
    text: {@dockimbel Just red-exe.exe animalexpert.red^/The content was still:^/```^/Red []^/print "test"^/```^/And i have renamed red-exe.exe to r.exe and did r.exe animalexpert.red^/This does not work either.}
    sent: "2017-06-26T07:39:39.966Z"
    editedAt: "2017-06-26T07:44:06.479Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5950b9bfbf7e6af22c73bbb9"
    text: {@Rebol2Red ^/> But even if i run it on a command prompt it wo'nt work.^/^/What is the command-line you're using?}
    sent: "2017-06-26T07:37:35.449Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5950b947ceb5bef82eaf84e8"
    text: {@greggirwin @iArnold @dockimbel ^/I run it on windows 10, Editor Geany with build command: red.bat %f^/^/The content of the red.bat file is:^/```^/"%~dp0red-exe.exe" %*^/```^/But even if i run it on a command prompt it wo'nt work.^/I made a little test file animalexpert.red with only the following content^/```^/Red []^/print "test" ^/```^/This doesn't work either.^/I have loaded this file into notepad and choose save as - coding utf-8^/This also does not work^/I downloaded a new red version. To no avail.^/^/I am out of options. The only way is to rename the file.}
    sent: "2017-06-26T07:35:35.920Z"
    editedAt: "2017-06-26T07:40:56.268Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5950b1574bcd78af5646eb8a"
    text: {@Rebol2Red  See if it is of the right type, so not ASCII or Windows 125x but UTF-8. }
    sent: "2017-06-26T07:01:43.991Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5950975dad9c7818439dccdd"
    text: "@dockimbel good to know, thanks Doc!"
    sent: "2017-06-26T05:10:53.886Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595077a6ad9c7818439d6643"
    text: {@9214 Such Parse wiki page contains lots of interesting information, but is not authoritative, so it cannot be a reference source for Parse (you should rather rely on Rebol's [official documentation](http://www.rebol.com/docs/core23/rebolcore-15.html) and my Parse blog article). For example, the description of `none` in that wiki is the opposite of the official description:^/* wiki:  "NONE is treated as a nonterminal that successfully matches any input"^/* official doc: "none: match nothing"^/^/Moreover, the description in the wiki continues with *and generally doesn't move the input position forward, with an exception mentioned at the Character set section.* That is wrong, `none` *never* advances the input position. The mentioned exception does not exist, it's a wrong interpretation of what looks like a buggy case in Rebol2's Parse implementation.}
    sent: "2017-06-26T02:55:34.522Z"
    editedAt: "2017-06-26T02:56:01.259Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59506570ad9c7818439d2965"
    text: {@Rebol2Red ^/> If i try to run it i get * Error: cannot access argument file^/^/How do you run it? What is the command-line you're using?}
    sent: "2017-06-26T01:37:52.242Z"
    editedAt: "2017-06-26T01:38:13.843Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59504c5e703e565c33428078"
    text: {I've never seen that. Nothing odd in the filename. What OS and how are you launching it?}
    sent: "2017-06-25T23:50:54.063Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595035de6ae41d5d3383d84d"
    text: {Very strange! ^/I have made a regular file with some source code in it named animalexpert.red ^/If i try to run it i get ^/^/*** Error: cannot access argument file^/--== Red 0.6.2 ==-- ^/Type HELP for starting information.^/^/If i rename this file to animalexp.red it works fine ^/Has anybody had this kind of problems with some other filenames or can someone verify this? Are some filenames not allowed?}
    sent: "2017-06-25T22:14:54.038Z"
    editedAt: "2017-06-25T22:20:36.492Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "594ff06811755ab0561f61da"
    text: "Thanks @9214! this issue is explained there."
    sent: "2017-06-25T17:18:32.818Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "594fea9411755ab0561f4992"
    text: {@eranws [Wikibooks parse tutorial](https://en.wikibooks.org/wiki/REBOL_Programming/Language_Features/Parse/Parse_expressions)}
    sent: "2017-06-25T16:53:40.406Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594fe338c101bc4e3a1c897c"
    text: {@eranws Yes, advancing is a consequence of matching part of the input elements (the input advances then by the matched part length). In both `none` and `not` rules, they don't match the input elements. }
    sent: "2017-06-25T16:22:16.712Z"
    editedAt: "2017-06-25T16:25:17.968Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594fe28d8dae425031515102"
    text: "thanks in advance :joy: "
    sent: "2017-06-25T16:19:25.513Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "594fe1fd57a6e9f72ef9a7c2"
    text: {Is there any rationale behind why it doesn't advance the input?}
    sent: "2017-06-25T16:17:01.754Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "594fe1856ae41d5d3382856f"
    text: " I was learning from the blog article indeed."
    sent: "2017-06-25T16:15:01.911Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "594fe16911755ab0561f27c9"
    text: "That's very helpful, thanks"
    sent: "2017-06-25T16:14:33.475Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "594f8dfabf7e6af22c6f3878"
    text: {@eranws Consider this:^/```^/>> parse [b] [not 'a (print "[not 'a] succeeded") | none (print "[not 'a] failed")]^/[not 'a] succeeded^/== false^/>> parse [a] [not 'a (print "[not 'a] succeeded") | none (print "[not 'a] failed")]^/[not 'a] failed^/== false^/```}
    sent: "2017-06-25T10:18:34.656Z"
    editedAt: "2017-06-25T10:24:42.675Z"
    v: 6
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "594f89eb8dae425031500106"
    text: {@eranws There is a difference between the success of a rule and the success of the whole parsing. In the latter case,  the whole input needs to be consumed for `parse` to return `true`.^/}
    sent: "2017-06-25T10:01:15.722Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "594f898c4bcd78af56428724"
    text: {However, this test indicates that it is expected that the input is not advanced:^/```text^/--assert parse ^-^-[a]^-^-^-[not 'b 'a]^/```}
    sent: "2017-06-25T09:59:40.942Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "594f88f0ad9c78184399c4e6"
    text: {The [blog introducing parse](http://www.red-lang.org/2013/11/041-introducing-parse.html) does not indicate that ```not``` and ```none``` do not advance the input. ^/}
    sent: "2017-06-25T09:57:04.519Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "594f881fc101bc4e3a1b1840"
    text: {@eranws ```parse``` is not advancing the input with ```not rule``` and ```none```:^/```text^/>> parse ["a"] [not "b"]^/== false^/>> parse ["a"] [not "b" skip]^/== true^/>> parse ["a"] [none]^/== false^/>> parse ["a"] [none to end]^/== true^/```}
    sent: "2017-06-25T09:53:35.420Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "594f754d11755ab0561d8181"
    text: "what am I missing?"
    sent: "2017-06-25T08:33:17.581Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "594f752aad9c781843998192"
    text: {^/(2) none^-: always return success (catch-all rule).^/```^/>> parse ["a"][none]^/== false^/```^/}
    sent: "2017-06-25T08:32:42.324Z"
    editedAt: "2017-06-25T08:32:58.648Z"
    v: 4
    author: "5534d15915522ed4b3df402a"
) #(
    id: "594f74c23230e14f3af139dd"
    text: {I have started to learn `parse` and there are few things that I don't understand:^/1. not rule : invert the result of the sub-rule.^/^/```^/>> parse ["a"] [not "b"]^/== false^/```^/}
    sent: "2017-06-25T08:30:57.992Z"
    editedAt: "2017-06-25T08:31:35.528Z"
    v: 5
    author: "5534d15915522ed4b3df402a"
) #(
    id: "594f14573230e14f3af00922"
    text: {Until we get FFI at the Red level, you would have to do it in Red/System. Maybe best to be a little patient and ask again in a few weeks.}
    sent: "2017-06-25T01:39:35.566Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594ef9666ae41d5d337f67a5"
    text: {Yes I did think about API calls but have no idea how to do that in Red.  Are there any examples? They would need to be pretty basic for me to understand. Thanks for the answers.}
    sent: "2017-06-24T23:44:38.201Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "594ed37157a6e9f72ef609b3"
    text: {Intentionally re-introducing a bug seems like a bad idea, yeah.}
    sent: "2017-06-24T21:02:41.447Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594eb53c76a757f808a02b21"
    text: {Or you revert the fix and work from source ;-)^/I do not recommend that by the way.}
    sent: "2017-06-24T18:53:48.997Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "594e5be6ceb5bef82ea6ed25"
    text: {Only `base` faces can be made transparent right now. I'm sure a solution will come. Someone built one for R2, using just the Win APIs. It's likely not a high priority though.}
    sent: "2017-06-24T12:32:38.447Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594e014abf7e6af22c69b07c"
    text: {You want to make a fancy splash screen?! There once was because of a bug the possibility to display a transparent image out of the window pane and moving the window away. The bug was fixed and a new way to do this was promised. I like to know a solution as well.}
    sent: "2017-06-24T06:06:02.905Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "594d9c4e6ae41d5d337a846c"
    text: {Is there a way to make the 'first (main) window' transparent (translucent) in a red app ? }
    sent: "2017-06-23T22:55:10.745Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "594c8abbc101bc4e3a0fdf20"
    text: "@9214 Thanks i will look into that "
    sent: "2017-06-23T03:27:55.143Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "594c8a3311755ab056124ec3"
    text: {or perform some macro-expansion mumbo-jumbo which will convert recursive calls into iteration loops for you}
    sent: "2017-06-23T03:25:39.870Z"
    editedAt: "2017-06-23T03:27:14.397Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594c8a0cceb5bef82e9f9ab5"
    text: "@Rebol2Red I guess so"
    sent: "2017-06-23T03:25:00.497Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594c89f276a757f8089758b8"
    text: {@9214 The only way to do this for now is to convert recursive to iterative?}
    sent: "2017-06-23T03:24:34.027Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "594c897f6ae41d5d3375bb7e"
    text: {@Rebol2Red tail-call optimization isn't supported yet, so yeah, you're blowing up the stack}
    sent: "2017-06-23T03:22:39.570Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594c867f6ae41d5d3375b271"
    text: {```^/recursive: func [^/^-n^/][^/^-print n^/    either n = 1 [^/        return 1^/    ][^/        return recursive(n - 1)^/^-]^/]^/recursive 200^-^/```^/I got a stack overflow when n = 69^/Is the code wrong or is the program just running out of stack space?^/In Freebasic the stack space is 1Mb^/Is it possible to (re)size the stack space in Red?}
    sent: "2017-06-23T03:09:51.501Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "594a21b188348abd0ab24b25"
    text: "Thanks Doc."
    sent: "2017-06-21T07:35:13.975Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "594a0c26e59e74be0a9e4255"
    text: {@TimeSlip Please see the temporary solution for that until we add non-UTF-8 encodings support: https://stackoverflow.com/questions/43379932/access-error-invalid-utf-8-encoding-ffd8ffe0/43383454#43383454}
    sent: "2017-06-21T06:03:18.861Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5949ff5da44c60fa4c48a18d"
    text: {@michaeldesu, Actually I was worried that I would be in a place where I couldn't rely on that technique. But that's a thought.}
    sent: "2017-06-21T05:08:45.058Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949ff1988348abd0ab1b593"
    text: {If you don't care about occasional wrong character in the output (reading google page gives me ie `¹tìstí` instead of `štěstí`), that conversion function is good enough.}
    sent: "2017-06-21T05:07:37.744Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fef588348abd0ab1b563"
    text: {it's a nice solution - in my case, I just use a text editor to open & resave the file as UTF8 with no signature (for the occasional cases)}
    sent: "2017-06-21T05:07:01.420Z"
    editedAt: "2017-06-21T05:07:24.546Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5949fe87a44c60fa4c489eb2"
    text: {Thanks for the help  @rebolek , I was about to abandon Red for R2 because I couldn't be searching the input file for that character each time I  read a file.}
    sent: "2017-06-21T05:05:11.384Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949fe7a746f1fd66325236b"
    text: "Thanks. I am glad you like it."
    sent: "2017-06-21T05:04:58.025Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fe2417a3066670881ecc"
    text: {Better than me. I'm on the 40 year plan. And I do like your music. I'll have to find that CD again. }
    sent: "2017-06-21T05:03:32.069Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949fd96c98bc6d5638c7ace"
    text: {We have a strict schedule: new CD every ten years ;)}
    sent: "2017-06-21T05:01:10.016Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fd7f5bf0bef94cc8ffbc"
    text: {I hope you like it, we should have another out this year.}
    sent: "2017-06-21T05:00:47.577Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "5949fd645bf0bef94cc8ff77"
    text: "You do? Cool!!!"
    sent: "2017-06-21T05:00:20.055Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fd5b746f1fd66325205a"
    text: "Yes, I have that CD!"
    sent: "2017-06-21T05:00:11.171Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949fd496462d8493c341a58"
    text: "It's actually not us on the cover."
    sent: "2017-06-21T04:59:53.021Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fd399714d1da6162ac0b"
    text: {Oh, you mean this http://www.xproductionmusic.cz/upload/1403522912.jpg}
    sent: "2017-06-21T04:59:37.380Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fd229714d1da6162abe5"
    text: {Some years ago your band put out a CD. On the cover was a guy with a helmet.}
    sent: "2017-06-21T04:59:14.826Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949fce25bf0bef94cc8fdde"
    text: {With a helmet? :smile: I am not sure, may be I wore it somewhere someday ⛑}
    sent: "2017-06-21T04:58:10.747Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fcaec98bc6d5638c764b"
    text: "Guy with a helmet?"
    sent: "2017-06-21T04:57:18.079Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949fca19714d1da6162aa00"
    text: "Yes, I still do."
    sent: "2017-06-21T04:57:05.750Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fc8acf9c13503ca98674"
    text: {I know I keep confusing you with Bo, but did you have a band at one time?}
    sent: "2017-06-21T04:56:42.272Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949fbd217a306667088146e"
    text: {It is. It's also available in `parse` where it *really* helps.}
    sent: "2017-06-21T04:53:38.466Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fb8c17a30666708813b6"
    text: "I've never used collect, that's pretty cool."
    sent: "2017-06-21T04:52:28.804Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949fb7688348abd0ab1a7cc"
    text: {As non-English I have to fight with codepages long enough to gain some experience in this area}
    sent: "2017-06-21T04:52:06.528Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fb1bcf9c13503ca981a2"
    text: "Trial and error ;)"
    sent: "2017-06-21T04:50:35.184Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949fafc746f1fd6632516bb"
    text: {@rebolek Works like a charm. How in the world do you know this stuff? :-)}
    sent: "2017-06-21T04:50:04.346Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949fab75bf0bef94cc8f487"
    text: "@rebolek Thank you. I will try that."
    sent: "2017-06-21T04:48:55.193Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949fa7102c480e672668a87"
    text: {You can use this code to do the conversion (but the result depends on things like codepages, so the result may be wrong without proper conversion):^/```^/>> data: read/binary http://www.google.com^/== #^{^/3C21646F63747970652068746D6C3E3C68746D6C206974656D73636F70653D22^/22206974656D747970653D22687474703A2F2F7363686...^/>> to string! data^/*** Access Error: invalid UTF-8 encoding: #^{ED206C65^}^/*** Where: to^/*** Stack:^/>> text: rejoin collect [foreach char data [keep to char! char]]^/== ^{<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="cs"><head><meta content="text/html;...^/```}
    sent: "2017-06-21T04:47:45.841Z"
    editedAt: "2017-06-21T04:49:08.319Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949f999746f1fd6632511a2"
    text: {Something like:^/```^/>> rejoin collect [foreach char #{ED6F2C2C} [keep to char! char]]^/== "ío,,"^/```}
    sent: "2017-06-21T04:44:09.878Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949f967c98bc6d5638c6b5b"
    text: {It's first four bytes of your data where the conversion to UTF-8 fails}
    sent: "2017-06-21T04:43:19.802Z"
    editedAt: "2017-06-21T04:48:29.220Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949f951bf1bfe6770d2dbe8"
    text: "Yep. What does the #{ED6F2C2C} mean?"
    sent: "2017-06-21T04:42:57.914Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949f94702c480e67266864c"
    text: "non-UTF8 text"
    sent: "2017-06-21T04:42:47.932Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5949f92b02c480e6726685f1"
    text: {*** Access Error: invalid UTF-8 encoding: #{ED6F2C2C}^/*** Where: read}
    sent: "2017-06-21T04:42:19.774Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5949f9286462d8493c340d87"
    text: "Ah, I'm stuck... "
    sent: "2017-06-21T04:42:16.240Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "594991646462d8493c3274a6"
    text: {@geekyi Yeah, good luck (to me) reproducing that one}
    sent: "2017-06-20T21:19:32.224Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594960a06462d8493c31740f"
    text: "@rebolek Thank you. "
    sent: "2017-06-20T17:51:28.909Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "59495f8c6462d8493c316c50"
    text: "mind = blown"
    sent: "2017-06-20T17:46:52.846Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59495f6d6462d8493c316bfa"
    text: "Hi James, no, there's no improved text-list yet."
    sent: "2017-06-20T17:46:21.336Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59495ea2746f1fd663226109"
    text: {Hello all, it's been a while but now I have some time to do more Red. I was wondering if anyone has created a more sophisticated (that is, with columns) Text-list gadget.}
    sent: "2017-06-20T17:42:58.089Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "594958ea88348abd0aaed9d9"
    text: {@gltewalt ^/> word is gobally assigned to num-lock^/^/mind = blown}
    sent: "2017-06-20T17:18:34.733Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5948c8d7a44c60fa4c42bdd8"
    text: "Cool, I'm glad to help."
    sent: "2017-06-20T07:03:51.613Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948c872e59e74be0a983ba2"
    text: "Yes. That's it. Thanks"
    sent: "2017-06-20T07:02:10.142Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5948c70402c480e67260c533"
    text: {@Rebol2Red as I understand it, `v` is basically a `block!`:^/```^/obj: object [^/  a: 123^/  v: ["hello" "test" "3" "4"]^/]^/```}
    sent: "2017-06-20T06:56:04.107Z"
    editedAt: "2017-06-20T06:56:12.519Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948c67ebf1bfe6770cd0d20"
    text: {I want to translate an old program of mine programmed in Freebasic to Red^/^/In Freebasic you can make objects like this: ^/```^/type btype^/^-c as string^/end type^/type objtype^/^-a as integer^/^-c as btype^/end type^-^/dim x as objtype^/x.a = 123^/x.c = "hello"^-^/print x.a     ' 123^-^-^-' is ; in Red^/print x.c     ' "hello"^/```^/Translated to Red:^-^/```^/b: object [^/^-c: none^/]^/obj: object [ ; object or context^/^-a: none^/^-c: b^/]^/obj/a: 123^/obj/c: "hello"^/print obj/a^/print obj/c^/```^/But howto translate this from Freebasic to Red:^/```^/type btype^/^-c as string^/end type^/type objtype^/^-a as integer^/^-v(4) as btype ' I can't translate this^/end type^-^/dim x as objtype    ' This makes the object^/x.a = 123^/x.v(1).c = "hello"^/x.v(2).c = "test"^/x.v(3).c = "3"^/x.v(4).c = "4"^-^/print x.a ^-^-' "hello"^/print x.v(1).c ^-' "hello"^/print x.v(2).c ^-' "test"   ^/print x.v(3).c ^-' "3"^/print x.v(4).c ^-' "4"^/```}
    sent: "2017-06-20T06:53:50.650Z"
    editedAt: "2017-06-20T06:57:21.350Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5948c48502c480e67260ba87"
    text: {@gltewalt Here is some food for thought on that topic (using Rebol2):^/```lisp^/>> a: [print i]^/== [print i]^/>> b: [print i * 2]^/== [print i * 2]^/>> foreach i [1 2 3] a^/1^/2^/3^/>> foreach i [1 2 3] b^/2^/4^/6^/>> foreach i [1 2 3] get pick [a b] random true^/1^/2^/3^/>> foreach i [1 2 3] get pick [a b] random true^/2^/4^/6^/>> i: 10^/== 10^/>> do a^/10         ;-- [print i] is still bound to global context, because a copy was created by FOREACH^/```}
    sent: "2017-06-20T06:45:25.366Z"
    editedAt: "2017-06-20T06:50:09.126Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5948c2dd02c480e67260b16b"
    text: {> Rebinding and copying doesn't necessarily have to happen^/^/That's a requirement for the body block, as the body block needs to be bound to the local hidden context, so it means the words in body block are modified. So, the body block needs to be copied before each call (in order to avoid side-effects) and re-bound to that local context. Even if you would allow the side-effects, you would still need to do the re-binding process on each call, as you have no guarantee that the body block is still the same or not.}
    sent: "2017-06-20T06:38:21.382Z"
    editedAt: "2017-06-20T06:47:26.428Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5948c1cd746f1fd6631f1785"
    text: {@gltewalt Notice that if you use iterators in functions built using `function` constructor, the iteration words will be locally bound.}
    sent: "2017-06-20T06:33:49.724Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5948a2b6a44c60fa4c42270b"
    text: {With current implementation yes, but as @dockimbel wrote, this is likely going to change.}
    sent: "2017-06-20T04:21:10.046Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948a23b5bf0bef94cc269ce"
    text: "You already lose original x"
    sent: "2017-06-20T04:19:07.849Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5948a2366462d8493c2dc078"
    text: {The rebinding and copying refers to the words in the block supplied to be evaluated on each iteration. }
    sent: "2017-06-20T04:19:02.243Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5948a1f802c480e6726034a8"
    text: {If you just unset the word, you will lose the original `x`.}
    sent: "2017-06-20T04:18:00.574Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948a1e5a44c60fa4c4223dd"
    text: {That's not a solution, see this Rebol code:^/```^/>> x: 1^/== 1^/>> foreach x [1 2 3][print x]^/1^/2^/3^/>> x^/== 1^/```}
    sent: "2017-06-20T04:17:41.575Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948a18502c480e672603348"
    text: {Rebinding and copying doesn't necessarily have to happen - the placeholder word could be unset when the loop exits?^/`unset 'word`}
    sent: "2017-06-20T04:16:05.818Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59489cd302c480e67260234a"
    text: {@gltewalt ^/> Is that going to change?^/^/Likely, yes.}
    sent: "2017-06-20T03:56:03.660Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5948983fc98bc6d56385deef"
    text: {@gltewalt The rationale for not having local contexts for loop is explained [here](https://github.com/red/red/wiki/Differences-between-Red-and-Rebol#local-contexts-for-loops).}
    sent: "2017-06-20T03:36:31.675Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "594895b917a30666708167ac"
    text: "Is that going to change?"
    sent: "2017-06-20T03:25:45.572Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594883e2c98bc6d563858bd1"
    text: "word is not local in Red, it would be in Rebol."
    sent: "2017-06-20T02:09:38.953Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5948549102c480e6725f0a06"
    text: "I was assuming that it was local to the `foreach`"
    sent: "2017-06-19T22:47:45.044Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594853ec88348abd0aaa13a4"
    text: "Should word hold on to the value?"
    sent: "2017-06-19T22:45:00.139Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5948510da44c60fa4c40edc7"
    text: {```^/>> foreach word [ton of unbound words] [print type? get/any word]^/unset^/unset^/unset^/unset^/>> word^/== words^/>>^/```}
    sent: "2017-06-19T22:32:45.405Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594850b817a3066670805cef"
    text: {weirdness:^/```^/>> foreach word [ton of unbound words] [print type? get word]^/*** Script Error: ton has no value^/*** Where: get^/*** Stack:^/>> word^/== ton^/>>^/```}
    sent: "2017-06-19T22:31:20.591Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594847ac5bf0bef94cc10106"
    text: {Feel free to add notes to https://github.com/red/red/wiki/Primer.}
    sent: "2017-06-19T21:52:44.973Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "59483899746f1fd6631ce2bc"
    text: {That's possible. But understanding it will help people to understand the principles Red is based on. }
    sent: "2017-06-19T20:48:25.166Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948382302c480e6725e7d20"
    text: {I doubt they are thinking that way when using a predicate like value?}
    sent: "2017-06-19T20:46:27.315Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594836f6142826e972d01e82"
    text: {Newcomers need to understand that words are evaluated before they are passed to a function. Then the behaviour males sense.}
    sent: "2017-06-19T20:41:26.872Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948350fa44c60fa4c4061d1"
    text: "Might be worth a discussion with newcomers"
    sent: "2017-06-19T20:33:19.093Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594833a1142826e972d00d2c"
    text: {I kind of did. ^/Newcomer comes along and tries `value? unbound-word` and gets an error instead of `false`. Scratches head. }
    sent: "2017-06-19T20:27:13.036Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5948326102c480e6725e5fff"
    text: {>  Seems like value? should return true or false no matter what is thrown at it. Type? could return unset! for non-existent words.^/^/It's often helpful, when suggesting design changes, to offer concrete examples of what and why something could/should change. For example, where does the current behavior cause an actual issue someone has encountered? What does a proposed change allow that isn't possible now? The REPL works this way by design. To add to Bolek's example:^/```^/>>  foreach word [ton of unbound words][print value? word]^/false^/false^/false^/false^/>>  foreach word [ton of unbound words][print type? get word]^/*** Script Error: ton has no value^/*** Where: get^/*** Stack: ^/>>  foreach word [ton of unbound words][print type? get/any word]^/unset^/unset^/unset^/unset^/```^/}
    sent: "2017-06-19T20:21:53.840Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5948177de59e74be0a954935"
    text: ":smile: "
    sent: "2017-06-19T18:27:09.992Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59481774746f1fd6631c2c67"
    text: {Ok, the answer then is "yes, it should" :)}
    sent: "2017-06-19T18:26:59.988Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59481757e59e74be0a954784"
    text: {No, I just got the latest build after being away for awhile - was trying some basic things and just had the thought.... "why does this behave this way? should it?"}
    sent: "2017-06-19T18:26:31.768Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5948171d6462d8493c2b4bea"
    text: {They may not be looking for errors, but they get them, when appropriate.}
    sent: "2017-06-19T18:25:33.886Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594816fda44c60fa4c3fc284"
    text: {Because people aren't looking for errors when they use `type?` or `value?`}
    sent: "2017-06-19T18:25:01.870Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594816f6a44c60fa4c3fc26c"
    text: {Do you have some sample code where you are testing non-existent words?}
    sent: "2017-06-19T18:24:54.598Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594816c3bf1bfe6770ca04fe"
    text: "But why?"
    sent: "2017-06-19T18:24:03.987Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59481428c98bc6d563838b08"
    text: "Do that ^^ in the source for the native `value?`"
    sent: "2017-06-19T18:12:56.848Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5948139f17a30666707f1ebf"
    text: {Not sure, I understand. You *can* catch the error, if you want to:^/```^/>> attempt [value? sdfdfsfg]^/== none^/```}
    sent: "2017-06-19T18:10:39.346Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594813255bf0bef94cbfec61"
    text: {Yes, but should we? Would it be better to catch the general "no value" error that is thrown as the args are evaluated?}
    sent: "2017-06-19T18:08:37.737Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594812b888348abd0aa8c10e"
    text: {As you see, `type?` returns `unset!` if you pass unset value to it. You have to understand that the error happens *before* unset value is passed to `type?`.}
    sent: "2017-06-19T18:06:48.434Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59481264a44c60fa4c3fa4d2"
    text: "Ah, ok"
    sent: "2017-06-19T18:05:24.623Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59481257c98bc6d563838161"
    text: {You can check for `unset!` with `get/any`:^/```^/>> type? get/any 'bflmpsvz^/== unset!^/```}
    sent: "2017-06-19T18:05:11.431Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948124ea44c60fa4c3fa46d"
    text: {In these different cases, wouldn't it be better to intercept the "no value" error?  Seems like `value?` should return true or false no matter what is thrown at it.^/`type?` could return `unset!` for non-existent words}
    sent: "2017-06-19T18:05:02.826Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594811bf5bf0bef94cbfe1c6"
    text: {Anyway, due to nature of Red, non-existent words have value with type `unset!`, but they are still non-existent and lead to error.}
    sent: "2017-06-19T18:02:39.530Z"
    editedAt: "2017-06-19T18:03:47.080Z"
    v: 3
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948118b746f1fd6631c07e2"
    text: "I wonder how, it may be useful :smile: "
    sent: "2017-06-19T18:01:47.891Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59481172e59e74be0a952118"
    text: {I relaunched the repl and it was definitely something I did}
    sent: "2017-06-19T18:01:22.524Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594811526462d8493c2b28aa"
    text: "lol, nope"
    sent: "2017-06-19T18:00:50.702Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5948114c746f1fd6631c065c"
    text: "That's certainly not the default behavior ;)"
    sent: "2017-06-19T18:00:44.057Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594811325bf0bef94cbfde76"
    text: "somehow it got bound to nu-lock in my shell"
    sent: "2017-06-19T18:00:18.628Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5948111488348abd0aa8b747"
    text: "num-lock?"
    sent: "2017-06-19T17:59:48.276Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59481105e59e74be0a951d44"
    text: "weird"
    sent: "2017-06-19T17:59:33.274Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594810ec17a30666707f10b9"
    text: "word is gobally assigned to num-lock"
    sent: "2017-06-19T17:59:08.165Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594810ac5bf0bef94cbfdbd5"
    text: {```^/>> foreach word [ton of unbound words][print type? word]^/word^/word^/word^/word^/```}
    sent: "2017-06-19T17:58:04.109Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594810a6746f1fd6631c0373"
    text: "So, `unset!`, for `type?`"
    sent: "2017-06-19T17:57:58.536Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59481076bf1bfe6770c9df3f"
    text: {`abc` is a `word!`, but you are not testing `abc`, you are testing `abc`'s value.}
    sent: "2017-06-19T17:57:10.043Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5948105902c480e6725d9554"
    text: {`abc` isn't a word?  I thought it was just an unbound word}
    sent: "2017-06-19T17:56:41.597Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5948103fbf1bfe6770c9ddfb"
    text: {`unset!` makes sense, but `unset!` is a special type that usually ends with `error!`.}
    sent: "2017-06-19T17:56:15.500Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59481026c98bc6d56383764c"
    text: "Actually... wouldnt `unset!` be appropriate?"
    sent: "2017-06-19T17:55:50.216Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59481023142826e972cf470f"
    text: {`word!` makes no sense here, because value of `abc` is not a `word!`.}
    sent: "2017-06-19T17:55:47.648Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59481009c98bc6d56383757a"
    text: "or unset!"
    sent: "2017-06-19T17:55:21.009Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5948100102c480e6725d9332"
    text: "word!"
    sent: "2017-06-19T17:55:13.375Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480ff2e59e74be0a95187a"
    text: {But the error makes sense here. You are testing word that has no value. What do you want it to return?}
    sent: "2017-06-19T17:54:58.508Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480f92bf1bfe6770c9da5b"
    text: {```^/>> abc: 1^/== 1^/>> type? abc^/== integer!^/>> unset 'abc^/>> type? abc^/*** Script Error: abc has no value^/*** Where: type?^/*** Stack:^/```^/^/So if you had no foreknowledge that `abc` had been bound, it does prevent type checking. }
    sent: "2017-06-19T17:53:22.585Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480f6ae59e74be0a95163b"
    text: {You usually test type of value that was already set, but if you want to test any value, you can use method shown above (or some other).}
    sent: "2017-06-19T17:52:42.813Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480f2302c480e6725d8d0e"
    text: {```^/>> all [value? 'abc type? abc]^/== none^/>> abc: 123^/== 123^/>> all [value? 'abc type? abc]^/== integer!^/```}
    sent: "2017-06-19T17:51:31.273Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480ef4c98bc6d563836da9"
    text: {It does not, you just need to know that words are evaluated.}
    sent: "2017-06-19T17:50:44.657Z"
    editedAt: "2017-06-19T17:50:55.257Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480ed55bf0bef94cbfd1d8"
    text: {Well, the same "no value" error prevents type checking.^/`type? abc`^/}
    sent: "2017-06-19T17:50:13.039Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480ecabf1bfe6770c9d656"
    text: {Remember that words are evaluated. If word has no value, you get error.}
    sent: "2017-06-19T17:50:02.500Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480ea7746f1fd6631bf742"
    text: "Everything has a type in Red."
    sent: "2017-06-19T17:49:27.016Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480e91a44c60fa4c3f8f81"
    text: "Do non-quoted words not have a type? "
    sent: "2017-06-19T17:49:05.794Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480d615bf0bef94cbfc989"
    text: {`func1 func2 func3 value` is equal to `func1 (func2 (func3 (value)))`}
    sent: "2017-06-19T17:44:01.184Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480d25cf9c13503ca05303"
    text: {Ok, better example is `value? bflmpsvz` is same as `value? (bflmpsvz)`.}
    sent: "2017-06-19T17:43:01.943Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480d1017a30666707efdf2"
    text: "So... should there be a `catch` ?"
    sent: "2017-06-19T17:42:40.061Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "59480ce66462d8493c2b0dc2"
    text: {It evaluates from left to right, but arguments to functions are evaluated of course before the function}
    sent: "2017-06-19T17:41:58.545Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480cdc5bf0bef94cbfc6db"
    text: "My opinion"
    sent: "2017-06-19T17:41:48.628Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480cd802c480e6725d82ed"
    text: {Right, but it shouldn't be. There should be a `catch`}
    sent: "2017-06-19T17:41:44.852Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480cc2c98bc6d563836202"
    text: {`value? bflmpsvz` is same as `bflmpsvz` basically.}
    sent: "2017-06-19T17:41:22.363Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480cb402c480e6725d820d"
    text: "It evaluates inside out then"
    sent: "2017-06-19T17:41:08.150Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480c9e02c480e6725d80a7"
    text: {If it evaluates from left to  right, should it ever make it to the error? Shouldn't it just return `false` and then quit?}
    sent: "2017-06-19T17:40:46.922Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480c91a44c60fa4c3f8340"
    text: {That will throw an error, because `bflmpsvz` gets evaluated and the result of the evaluation is passed to `value?`}
    sent: "2017-06-19T17:40:33.127Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480c586462d8493c2b0bae"
    text: "`value? bflmpsv`"
    sent: "2017-06-19T17:39:36.577Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480c42bf1bfe6770c9c744"
    text: "Non lit-word"
    sent: "2017-06-19T17:39:14.327Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480c29a44c60fa4c3f80c9"
    text: {```^/>> value? 'bflmpsvz^/== false^/```}
    sent: "2017-06-19T17:38:49.598Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480c1c88348abd0aa89f8e"
    text: "No block"
    sent: "2017-06-19T17:38:36.975Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480c06e59e74be0a950314"
    text: "Not if you type `value? non-bound-word`"
    sent: "2017-06-19T17:38:14.903Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59480bd8e59e74be0a950229"
    text: {@gltewalt It does, doesn't it?^/```^/>> value? first [bflmpsvz]^/== false^/```}
    sent: "2017-06-19T17:37:28.172Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59480b96c98bc6d563835d37"
    text: {Shouldn't `value?` return `false` for non-bound words?}
    sent: "2017-06-19T17:36:22.190Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594626f8f6a78eab485cde78"
    text: {@dockimbel [#2818](https://github.com/red/red/issues/2818)}
    sent: "2017-06-18T07:08:40.627Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59461d4ed83c50560c1c211a"
    text: {@toomasv That's a bug, please open a ticket for it.}
    sent: "2017-06-18T06:27:26.043Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59461c83e531dbc905f486b1"
    text: {Is it intended behavior, that adding `print` or `probe` command into `parse` spec influences the parsing process? E.g:^/```^/>> parse "abc" [to [s: "bc"] 2 skip]^/== true^/>> parse "abc" [to [s: (print s) "bc"] 2 skip]^/abc^/bc^/c^/^/== false^/```}
    sent: "2017-06-18T06:24:03.321Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "594322b1142826e972bcb816"
    text: {```red^/>> enbase/base to-binary make bitset! [0] 2^/== "10000000"^/>> enbase/base to-binary make bitset! [0 - 7] 2^/== "11111111"^/>> enbase/base to-binary make bitset! [0 2 4 6] 2^/== "10101010"^/>> enbase/base to-binary make bitset! [8 16] 2^/== "000000001000000010000000"^/>> enbase/base to-binary make bitset! [8 8 8] 2 ; repetitions doesn't matter^/== "0000000010000000"^/```}
    sent: "2017-06-16T00:13:37.043Z"
    editedAt: "2017-06-16T00:14:23.537Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "594322a6f6a78eab4851fcbc"
    text: {@9214 similar thing happened to me recently where I finally understood `bitset!`}
    sent: "2017-06-16T00:13:26.116Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594259c202c480e672479ad9"
    text: ":+1: "
    sent: "2017-06-15T09:56:18.835Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594257cce531dbc905e615f4"
    text: {```^/>> enbase/base #{0e} 2^/== "00001110"^/```}
    sent: "2017-06-15T09:47:56.064Z"
    editedAt: "2017-06-15T09:48:05.630Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5942578e31f589c64fac3793"
    text: {nwm, `enbase`! I thought it works only with `strings!`}
    sent: "2017-06-15T09:46:54.792Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594256e96549436c7d4cfaae"
    text: {Rather stupid question, but how can I convert `binary!` hexadecimal value to a bit sequence? E.g. `14` => `#{0000000E}` => `#{00001110}`}
    sent: "2017-06-15T09:44:09.775Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59409a13142826e972b20882"
    text: {@michaeldesu The only issue that needs fixing is the `stats` reported value, which is inconsistent with the allocated memory chunks. No additional tests needed for now, thanks.   }
    sent: "2017-06-14T02:06:11.663Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59408137f31c8ced0c3298c0"
    text: {@dockimbel just wondering whether any progress on that memory issue - i.e. was a fix needed or done, or should I do any more testing or diagnosis? thanks}
    sent: "2017-06-14T00:20:07.938Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f5d99f6a78eab484231bb"
    text: {@michaeldesu That's normal, memory is allocated from the OS in big chunks by Red.}
    sent: "2017-06-13T03:35:53.521Z"
    editedAt: "2017-06-13T03:36:03.374Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593f5d516549436c7d40e90b"
    text: {(just rereading what you wrote above, and understand the review is still in progress) to be clear, I can't see why the extra loop (leads to extra 6685 bytes of read) makes the memory jump so high (from 3317760 to 5419008) though maybe this is just the system growing memory as per design}
    sent: "2017-06-13T03:34:41.643Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f5850f6a78eab48422153"
    text: {@dockimbel here's the result^/```^/>> stats^/== 3317760^/>> probe stats/info^/[[[9998 2 10000] [7042 2958 10000]] [[4 1048572 1048576] [1592444 504708 2097152]] []]^/== [[[9998 2 10000] [7042 2958 10000]] [[4 1048572 1048576] [1592444 504708 2097152]] []]^/>> loop 231 [s: read %c.txt]^/== ^{aaaaaaaa^^/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa^/>> stats^/== 3317760^/>> probe stats/info^/[[[9998 2 10000] [7784 2216 10000]] [[4 1048572 1048576] [36 2097116 2097152] [2096856 296 2097152]] []]^/== [[[9998 2 10000] [7784 2216 10000]] [[4 1048572 1048576] [36 2097116 2097152] [2096856 296 2097152...^/```^/sorry for the delay}
    sent: "2017-06-13T03:13:20.903Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f580131f589c64f9f8da3"
    text: "ok"
    sent: "2017-06-13T03:12:01.782Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f4cb3ca6d4ae80c0a2069"
    text: {@michaeldesu Could you please re-run the `loop  231` test with both `stats` and `probe stats/info` before and after the loop?}
    sent: "2017-06-13T02:23:47.479Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593f4c916549436c7d40b449"
    text: {Ah, another odd thing is that the `3317760` before and after the `loop 231` does not match with the `stats/info` report, `stats` should return about 5MB memory usage after the loop, according to the reserved blocks from `stats/info`.}
    sent: "2017-06-13T02:23:13.089Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593f4be002c480e6723ad7e9"
    text: {The second loop is actually using a little bit less memory than the first one (about 7KB less, not sure why <-- @qtxie). Other than that, the memory usage seems normal to me.}
    sent: "2017-06-13T02:20:16.967Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593f4a0102c480e6723ad208"
    text: "you're welcome"
    sent: "2017-06-13T02:12:17.563Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f49f2d83c50560c017fad"
    text: "Thanks, let me have a look at it."
    sent: "2017-06-13T02:12:02.895Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593f49a702c480e6723ad069"
    text: {2nd one^/```^/>> probe stats/info^/[[[9998 2 10000] [7036 2964 10000]] [[4 1048572 1048576] [1592856 504296 2097152]] []]^/== [[[9998 2 10000] [7036 2964 10000]] [[4 1048572 1048576] [1592856 504296 2097152]] []]^/>> loop 232 [s: read %c.txt]^/== ^{aaaaaaaa^^/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa^/>> probe stats/info^/[[[9998 2 10000] [7775 2225 10000]] [[4 1048572 1048576] [2984 2094168 2097152] [2087820 9332 2097152]] []]^/== [[[9998 2 10000] [7775 2225 10000]] [[4 1048572 1048576] [2984 2094168 2097152] [2087820 9332 2097...^/```^/is it ok? Both cases run from fresh restart of REPL.}
    sent: "2017-06-13T02:10:47.221Z"
    editedAt: "2017-06-13T02:11:29.382Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f496fc59bd9c4640dfc30"
    text: {here's the first attempt^/```^/>> probe stats/info^/[[[9998 2 10000] [7036 2964 10000]] [[4 1048572 1048576] [1592856 504296 2097152]] []]^/== [[[9998 2 10000] [7036 2964 10000]] [[4 1048572 1048576] [...^/>> loop 231 [s: read %c.txt]^/== ^{aaaaaaaa^^/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa^/>> probe stats/info^/[[[9998 2 10000] [8063 1937 10000]] [[4 1048572 1048576] [1848 2095304 2097152] [2080960 16192 2097152]] []]^/== [[[9998 2 10000] [8063 1937 10000]] [[4 1048572 1048576] [1848 2095304 2097152] [2080960 16192 209...^/```^/standby for 2nd one...}
    sent: "2017-06-13T02:09:51.325Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f490cc59bd9c4640dfac9"
    text: "ok"
    sent: "2017-06-13T02:08:12.642Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f48ffd83c50560c017ce1"
    text: {Could you please do a `probe stats/info` before and after the loop, so I can have a more detail look at the memory usage?}
    sent: "2017-06-13T02:07:59.070Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593f48f2142826e972ac788d"
    text: {@dockimbel no, the file is identical in both cases. the only change is the number of loops (1 extra in attempt 2)}
    sent: "2017-06-13T02:07:46.391Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f48c26462d8493c07f10d"
    text: {@michaeldesu What is the difference between "attempt 1" and "attempt 2"? One extra character in `%c.txt` file?}
    sent: "2017-06-13T02:06:58.330Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593f3c7d142826e972ac4fc3"
    text: {@dockimbel ok a small update about the 'extra tab' issue. I spend some time researching.. see what you think of the following (in progress investigation)^/```^/; attempt 1^/>> stats^/== 3317760^/>> loop 231 [s: read %c.txt]^/== ^{aaaaaaaa^^/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa^/>> stats^/== 3317760^/; attempt 2^/>> stats^/== 3317760^/>> loop 232 [s: read %c.txt]^/== ^{aaaaaaaa^^/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa^/>> stats^/== 5419008^/```^/the file is 6685 bytes. The above data was obtained from starting the REPL from scratch  for each attempt. I can look into this some more, if you think it's worth it - ie.. not something known or expected from this version (0.6.2 on Windows). So I suspect yesterday I may have triggered this with the extra char.}
    sent: "2017-06-13T01:14:37.879Z"
    editedAt: "2017-06-13T01:18:14.801Z"
    v: 6
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f2740cf9c13503c7d3991"
    text: {@geekyi it's word names  created by yourself. If create your own word name with a hyphen, then go somewhere else in the code, and the type the first few chars of that word, and it wont appear in the drop down. I believe this is an issue (at least I've experienced it several times in the IDE), so I've just reported https://github.com/red/VScode-extension/issues/8}
    sent: "2017-06-12T23:44:00.031Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f2260ca6d4ae80c099736"
    text: {```^/>> system/build/date^/== "8-Jun-2017/6:11:50+5:00"^/```}
    sent: "2017-06-12T23:23:12.037Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593f21baca6d4ae80c0995bd"
    text: {@michaeldesu the `to-` words complete, so I don't know what other hyphen words there are that don't complete. Also words like `change-dir`}
    sent: "2017-06-12T23:20:26.309Z"
    editedAt: "2017-06-12T23:22:03.199Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593f18e66549436c7d401349"
    text: {@geekyi intellisense is a term coined by Microsoft to describe the IDE feature of suggesting or predicting suitable language terms or class/variable/words in a drop-down choice upon the user pressing the first first chars. This makes it easier to progress learning or speed up typing or development, as usually good choices are offered while you type.}
    sent: "2017-06-12T22:42:46.354Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593f0371cf9c13503c7cbdd3"
    text: {Also, git-lens extension in vs-code is really nice. Able to view git-blame, commits, diff, etc, without opening github!}
    sent: "2017-06-12T21:11:13.294Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593f0283ca6d4ae80c0910fb"
    text: {Speaking of editors.... looks like Cloud9 is all regex based word hilighting. ^/@toomasv Have you thought about playing with cloud9? }
    sent: "2017-06-12T21:07:15.596Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593f0260d83c50560c0088cd"
    text: {Well, it works..? I'm sorry, I'm still not exactly sure what you mean by *intellisense* I'm a bit new to this :worried: }
    sent: "2017-06-12T21:06:40.512Z"
    editedAt: "2017-06-12T21:06:58.221Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593f01836462d8493c06f067"
    text: {@michaeldesu ^/>ability to pick up word names with a hyphen in the intellisense part - it seems to not do that at the moment^/^/Can you give an example? I couldn't find one :( (Ah, `to-string`, silly me)}
    sent: "2017-06-12T21:02:59.151Z"
    editedAt: "2017-06-12T21:03:55.508Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "593eb12602c480e67238404d"
    text: "@michaeldesu Thanks for trying."
    sent: "2017-06-12T15:20:06.647Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "593e79cfd83c50560cfdea98"
    text: {@geekyi I use the VScode editor + red plugin too, and it's fantastic - kudos to the plug-in maker! Though off topic, I think the only thing I could ask for is the ability to pick up word names with a hyphen in the intellisense part - it seems to not do that at the moment}
    sent: "2017-06-12T11:23:59.611Z"
    editedAt: "2017-06-12T11:24:56.886Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e7979142826e972a8d0e6"
    text: {@michaeldesu btw, I use VScode editor and plugin for red, with shortcuts to run (`Ctrl+k Ctrl+m`, then gui console) . It's nice once setup. Could probably use the code on other systems}
    sent: "2017-06-12T11:22:33.142Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593e72b46462d8493c043d01"
    text: {@geekyi thanks - I tried for about 30 mins this afternoon to reproduce (using a text file since I can't submit the xml as a test) but could not. I will try again soon with a masked version of the file. I might have also gotten confused by not restarting the REPL. I am trying to make this a fair test by starting the REPL from scratch with each file change. I think I didn't do that last time, so it might have been the garbage collection issue after all. Frankly there's not a lot of motivation to spend too much time on it, since the GC issue is the overriding one (for me personally) but I will see if can reproduce this.}
    sent: "2017-06-12T10:53:40.155Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e5bff6549436c7d3c9216"
    text: {@michaeldesu no difference for me with `tab` as last character. Maybe caused by xml files? (I'm not able to reproduce with my `<xml>`, but maybe that's too simplistic)}
    sent: "2017-06-12T09:16:47.146Z"
    editedAt: "2017-06-12T09:24:52.396Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593e26c56462d8493c02f6ae"
    text: "ok I'll see what I can do"
    sent: "2017-06-12T05:29:41.301Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e266202c480e67235b796"
    text: {Just to be clear: reading a file in memory takes memory, and we don't have a GC yet to reclaim it. The part which justifies a ticket is *abnormal* memory usage.}
    sent: "2017-06-12T05:28:02.044Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e25db02c480e67235b5e4"
    text: {" if I put a tab as the last char, the stats usage balloons out" => that's the odd thing to reproduce.}
    sent: "2017-06-12T05:25:47.988Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e25a7e531dbc905d40967"
    text: {@michaeldesu ^/> with some experimenting, it seems to work with a relatively small file, e.g. 6.45k file, but oddly if I put a tab as the last char, the stats usage balloons out. For the same file, if I remove that trailing tab in the file, the stats figure is the same as the start}
    sent: "2017-06-12T05:24:55.062Z"
    editedAt: "2017-06-12T05:25:00.892Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e255c31f589c64f9a54e5"
    text: {@michaeldesu This doesn't seem to show the leak you were talking about...}
    sent: "2017-06-12T05:23:40.634Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e22f3142826e972a75c7a"
    text: {@dockimbel ticket written https://github.com/red/red/issues/2797 hopefully it's enough?}
    sent: "2017-06-12T05:13:23.940Z"
    editedAt: "2017-06-12T05:13:37.302Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e1ea631f589c64f9a3e37"
    text: {@michaeldesu Thanks. The leak you observe seems related to a I/O bug, as you can trigger it by changing a single character in the file.}
    sent: "2017-06-12T04:55:02.942Z"
    editedAt: "2017-06-12T04:55:12.317Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e1e37d83c50560cfc649e"
    text: {@dockimbel thanks - that's good to read about how the loop should be - that's how I had it - I was just wondering whether I had needed to do something else. OK I'll write a ticket}
    sent: "2017-06-12T04:53:11.070Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e1c8ecf9c13503c788e6f"
    text: {> with some experimenting, it seems to work with a relatively small file, e.g. 6.45k file, but oddly if I put a tab as the last char, the stats usage balloons out. For the same file, if I remove that trailing tab in the file, the stats figure is the same as the start^/^/This looks like a bug. Could you please open a ticket for that, with a short, but complete code for reproducing it? (Please provide a minimal file that triggers the leak you observe).}
    sent: "2017-06-12T04:46:06.954Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e1bfc6549436c7d3b8727"
    text: {> since word usually means a 32-bit int^/^/That's not a word internally, more a symbol. A word is the combination of a symbol and a context reference.}
    sent: "2017-06-12T04:43:40.214Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e1bb2f6a78eab483cce46"
    text: {@michaeldesu That's not it, `s: <any value>` is useless code if the next expression sets `s` to another value. You loop should be just: `loop 100 [s: read %c.txt]`. There is no "variable initialization" in Redbol languages, because there is no "variables".}
    sent: "2017-06-12T04:42:26.854Z"
    editedAt: "2017-06-12T04:50:53.323Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e1b34142826e972a74445"
    text: {@dockimbel sorry, the `copy []` was a stupid typo, it should have been `copy ""` I guess. I agree about variable.. it's an old habit. Personally word doesn't really work for me since word usually means a 32-bit int, but I guess this is the baggage of the past to let go  :smile:  - the main point is basically already discussed, which is some more development is needed to make Red more robust for long operations like looping (reading files in for processing).}
    sent: "2017-06-12T04:40:20.078Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e1ae902c480e672358f11"
    text: {`value?` returns true if the argument type is not `unset!` or in case of a word, if it has a context and refers to a value.}
    sent: "2017-06-12T04:39:05.022Z"
    editedAt: "2017-06-12T04:41:32.598Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e1a0f142826e972a74121"
    text: {`unset?` checks if the argument value is of `unset!` type. How that argument value is created is irrevelant (same as for any other function call and arguments, evaluation rules are applied to arguments before the function call).}
    sent: "2017-06-12T04:35:27.667Z"
    editedAt: "2017-06-12T04:35:52.971Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e19cacf9c13503c7885c5"
    text: {@michaeldesu In `loop 100 [s: copy [] s: read %c.txt]`, the `s: copy []` is useless code. You are creating a new block, copied from a literal one, and making `s`word refer to it. Then on next expression, you are making `s` word refer to a string series created from reading a file.... You should drop the "variables" concept when using Red (Red has no variables, just words which can refer to values), as it will get into your way.}
    sent: "2017-06-12T04:34:18.295Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593e1691142826e972a7368b"
    text: {anyway, seems like the logical conclusion is to wait for the improvements you mentioned - thanks again for your time}
    sent: "2017-06-12T04:20:33.183Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e164831f589c64f9a225d"
    text: {@PeterWAWood with some experimenting, it seems to work with a relatively small file, e.g. 6.45k file, but oddly if I put a tab as the last char, the stats usage balloons out. For the same file, if I remove that trailing tab in the file, the stats figure is the same as the start}
    sent: "2017-06-12T04:19:20.178Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e14c902c480e672357d19"
    text: {@michaeldesu It could be that ```read``` is consuming memory. (The current IO features are temporary and will be replaced in release 0.7.0).}
    sent: "2017-06-12T04:12:57.828Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593e0fe6142826e972a723f8"
    text: {@PeterWAWood thanks alot. I see that worked, but oddly this doesn't seem to work when I read in my preexisting XML file (investigating)}
    sent: "2017-06-12T03:52:06.066Z"
    editedAt: "2017-06-12T03:52:25.265Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e0ed27503e2b70633a7e3"
    text: {@michaeldesu You can however drastically reduce the memory consumption in your example by using ```clear```:^/^/```text^/>> write %c.txt "michael"^/>> s: copy ""^/== ""^/>> stats^/== 3317760^/>> loop 100 [clear s s: read %c.txt]^/== "michael"^/>> stats^/== 3317760^/```}
    sent: "2017-06-12T03:47:30.204Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593e0e7ccf9c13503c786391"
    text: "thanks @greggirwin @PeterWAWood"
    sent: "2017-06-12T03:46:04.728Z"
    editedAt: "2017-06-12T03:52:21.330Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e0e3acf9c13503c786315"
    text: {@michaeldesu The actual garbage collector is planned for release 0.8.5. A temporary one will probably be available around release 0.7.0}
    sent: "2017-06-12T03:44:58.136Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593e0e166549436c7d3b5dd5"
    text: {@michaeldesu, yes, Red is not suited for long running processes that continually allocate memory yet.}
    sent: "2017-06-12T03:44:22.386Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593e0ded142826e972a71e69"
    text: {> Difference is that a user would be looking to see if that had a value with value? ^/^/My question wasn't clear. I was talking about the semantics of the language in a larger sense. Look at it this way, `value?` answers the question "If I evaluate `x`, will I get a value?". If you ask that of literal values, like integers, strings, etc. it will always be true, because they evaluate to themselves. Words are the exception, and paths are the tricky bit as I noted, where you could argue from either side and we just have to choose.}
    sent: "2017-06-12T03:43:41.857Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593e0d5dcf9c13503c786031"
    text: {@PeterWAWood  thanks. fair enough - look forward to when this gets addressed, as the memory leak seems to cause my program to crash out (for long unattended operations). I have to limit the operation for now.}
    sent: "2017-06-12T03:41:17.670Z"
    editedAt: "2017-06-12T03:44:08.179Z"
    v: 6
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e0cef6549436c7d3b5962"
    text: {```^/>> unset? first reduce [()]^/== true^/```^/That said, `unset?` and `value?` aren't intended to be consistent. That is, they don't have the same purpose. `Unset?` checks the exact type of value, just like `integer?` or `string?`.}
    sent: "2017-06-12T03:39:27.748Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593e0cef7503e2b70633a1b0"
    text: {@michaeldesu You need to bear in mind that there  is no garbage collector yet in Red. Once there is one, your program shouldn't run out of memory. (This is typical consequence of trying out Alpha software.) }
    sent: "2017-06-12T03:39:27.371Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593e0ce9142826e972a71afd"
    text: {I've just tried using `s: clear ""` & `s: none` in an attempt to ditch the content, but I still see the memory usage increase}
    sent: "2017-06-12T03:39:21.017Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593e0ba8e531dbc905d3b1b8"
    text: {I'm trying to track down a memory leak in my program. I've used copy [] everywhere for blocks. I am reading a file into a variable every loop, so I was wondering about retained storage each interation. I tested the following:^/```^/>> stats^/== 3317760^/>> loop 100 [s: copy [] s: read %c.txt]^/== ^{<some stuff> ^/>> stats^/== 13824000^/```^/it suggests to me content is being retained, as from my calculation the increase in memory in stats is reflective of the file size (times 100).  Is this expected? What should I do to avoid the situation?}
    sent: "2017-06-12T03:34:00.691Z"
    editedAt: "2017-06-12T03:36:42.345Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "593dec376462d8493c023fd3"
    text: {And initially, I was thinking unset? checked for unbound word}
    sent: "2017-06-12T01:19:51.921Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593debd77503e2b7063338eb"
    text: "Yeah. Return result. "
    sent: "2017-06-12T01:18:15.201Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593debd4ca6d4ae80c0441b3"
    text: {It is the same in Rebol2, so I would guess the purpose of  ```unset?```  is to check the result of function evaluations. Perhaps @dockimbel could confirm this?}
    sent: "2017-06-12T01:18:12.278Z"
    editedAt: "2017-06-12T01:18:27.270Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593deb787503e2b706333823"
    text: {```unset?``` only seems to return ```true``` when the result from a function evaluation is an ```unset! value```.^/```text^/>> unset? prin ""^/== true^/```}
    sent: "2017-06-12T01:16:40.731Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593deb56d83c50560cfbca3e"
    text: "(er, evaluating to word)"
    sent: "2017-06-12T01:16:06.917Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593deb2002c480e672350316"
    text: "Dang it I forgot about 'word transforming to word"
    sent: "2017-06-12T01:15:12.335Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593deaf2f31c8ced0c277421"
    text: {I do see your point though, it doesn't seem so logical:^/```text^/>> b: 2^/== 2^/>> unset? b^/== false^/>> value? b^/== true^/>> unset 'b^/>> unset? b^/*** Script Error: b has no value^/*** Where: unset?^/*** Stack: unset? ^/```^/}
    sent: "2017-06-12T01:14:26.202Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593de9ec02c480e67234ff34"
    text: {```text^/>> 'a^/== a^/```}
    sent: "2017-06-12T01:10:04.877Z"
    editedAt: "2017-06-12T01:10:51.750Z"
    v: 4
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593de9d4f6a78eab483c3031"
    text: "```'a``` evaluates to ```a```."
    sent: "2017-06-12T01:09:40.873Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593de99bf6a78eab483c2f4c"
    text: "'a is the value of 'a"
    sent: "2017-06-12T01:08:43.233Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593de90ef31c8ced0c276f1e"
    text: {If unset? 'a should be false then value? 'a should be true since it evaluates to itself. ^/Am I nuts?}
    sent: "2017-06-12T01:06:22.963Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593de7806462d8493c0231c8"
    text: {I don't have a problem with unset stuff really - it's just not a benign return value}
    sent: "2017-06-12T00:59:44.321Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593de718142826e972a6a74d"
    text: {seems to actually be: `is-the-return-value-of-the-expression-unset?`^/^/```^/>> type? unset!^/== datatype!^/>> unset? unset!^/== false^/>> unset? unset 'a^/== true^/```}
    sent: "2017-06-12T00:58:00.189Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593de5baca6d4ae80c042eec"
    text: "`unset? 'a` should be true. There's no value set."
    sent: "2017-06-12T00:52:10.250Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593ddd9ff31c8ced0c274dcf"
    text: "@gltewalt Why do you feel they are inconsistent?"
    sent: "2017-06-12T00:17:35.932Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593dd8faf31c8ced0c273c0e"
    text: {Well more or less. unset? and value? don't seem consistent }
    sent: "2017-06-11T23:57:46.835Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593dd8406549436c7d3ab4da"
    text: {@geekyi just remembered Greg's problems with *unset* stuff}
    status: true
    sent: "2017-06-11T23:54:40.787Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "593dd7a931f589c64f9958b0"
    text: {In other words @gltewalt wants to know a reliable way to test if something has a value (correct me if I'm wrong)}
    sent: "2017-06-11T23:52:09.781Z"
    editedAt: "2017-06-11T23:53:30.246Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593dd772f31c8ced0c273604"
    text: {```^/>> unset? a^/*** Script Error: a has no value^/>> value? 'a^/== false^/>> unset? 'a^/== false^/```}
    sent: "2017-06-11T23:51:14.370Z"
    editedAt: "2017-06-11T23:52:35.725Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593dd761142826e972a67514"
    text: "I see, I think I get it now"
    sent: "2017-06-11T23:50:57.196Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593dc52a6462d8493c01c19c"
    text: "It just feels weird to me. And it's `get`s fault"
    sent: "2017-06-11T22:33:14.897Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593dc49f7503e2b70632c47c"
    text: {Right now there is too much code depending on `value?` to disallow certain things, I guess}
    sent: "2017-06-11T22:30:55.771Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593dc45e31f589c64f991d43"
    text: {Since it always returns `true` with one or more '/   I can see it causing confusion}
    sent: "2017-06-11T22:29:50.361Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593dc38602c480e6723484f4"
    text: {Difference is that a user would be looking to see if `that` had a value with `value?  'this/or/that` Your form says (to me) "Does this block have a value?"}
    sent: "2017-06-11T22:26:14.427Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db872f31c8ced0c26cf4c"
    text: "> but what happens if you disallow it?"
    sent: "2017-06-11T21:38:58.367Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db85cf31c8ced0c26cf1f"
    text: {More accurately, in this case:^/```^/>> value? [this or that]^/== true^/```^/Same thing, different lexical form.}
    sent: "2017-06-11T21:38:36.248Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db847142826e972a615cd"
    text: "I dunno. Is it really needed for scalars?  "
    sent: "2017-06-11T21:38:15.571Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db7d5e531dbc905d2a131"
    text: {Neither does `value? 1`, but what happens if you disallow it?}
    sent: "2017-06-11T21:36:21.697Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db79de531dbc905d2a092"
    text: {This doesn't seem helpful:  `value? 'this/or/that`}
    sent: "2017-06-11T21:35:25.331Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db7556462d8493c01971f"
    text: "Alternately, just return true for any lit-word"
    sent: "2017-06-11T21:34:13.289Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db737f31c8ced0c26cc41"
    text: "And I meant, 'should it error if fed a lit-word'?"
    sent: "2017-06-11T21:33:43.567Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db6edf31c8ced0c26cb9d"
    text: "I guess I expected it to do it for path values"
    sent: "2017-06-11T21:32:29.856Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db697ca6d4ae80c038c78"
    text: {But that's tricky, because it won't tell you where it failed in the path, if not set. In that case, is it really more helpful?}
    sent: "2017-06-11T21:31:03.991Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db6506462d8493c019416"
    text: {Then open question, then, is should it also do that for `path!` values.}
    sent: "2017-06-11T21:29:52.690Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db623142826e972a60e6a"
    text: {It's really simple.^/- The arg is evaluated^/- If the evaluated arg is a word, `value?` `get`s it.}
    sent: "2017-06-11T21:29:07.593Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db5d56549436c7d3a46e9"
    text: {It does, if you pass a word! that doesn't refer to anything.^/```^/*** Script Error: a has no value^/*** Where: value?^/*** Stack: ^/```}
    sent: "2017-06-11T21:27:49.102Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db5cef31c8ced0c26c6aa"
    text: {I'll play some more when I get back to a computer. (Eventually)}
    sent: "2017-06-11T21:27:42.026Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db5a231f589c64f98e628"
    text: "Should it error then?"
    sent: "2017-06-11T21:26:58.131Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db58d02c480e67234570a"
    text: "Except that `value?` isn't using a lit-word! arg."
    sent: "2017-06-11T21:26:37.910Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593db58331f589c64f98e586"
    text: "*its"
    sent: "2017-06-11T21:26:27.009Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db51ce531dbc905d2967e"
    text: "(grrr mobile !)"
    sent: "2017-06-11T21:24:44.552Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593db502142826e972a60a4a"
    text: {If it's value of type lit-word! then all quoted symbols should return true. ^/The value is the lit word itself}
    sent: "2017-06-11T21:24:18.839Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593dafb6ca6d4ae80c037519"
    text: "> What if you `set` from the network"
    sent: "2017-06-11T21:01:42.187Z"
    editedAt: "2017-06-11T21:01:51.055Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593daf86ca6d4ae80c037455"
    text: {> In case of *url!*, I don't know..^/^/Counter to any argument in Red: *What if it is a **url!** ? *}
    sent: "2017-06-11T21:00:54.723Z"
    editedAt: "2017-06-11T21:01:18.825Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "593daf4e31f589c64f98d391"
    text: {Anyway, @gltewalt should have a say on this, it's his question :D}
    sent: "2017-06-11T20:59:58.797Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593daf2e31f589c64f98d342"
    text: "In case of *url!*, I don't know.."
    sent: "2017-06-11T20:59:26.541Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593daf20e531dbc905d28253"
    text: {Never mind... I think that @dockimbel has reason why it is how it is.}
    sent: "2017-06-11T20:59:12.542Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593daebb142826e972a5f3e1"
    text: {`a/b` is `path!`, `/b` is `refinement!`... what should be result of: `value? first [http://google.com]`}
    sent: "2017-06-11T20:57:31.231Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593dae726462d8493c017b7c"
    text: {I don't know enough in depth to intuit what `a/b` in *syntax* might mean *symantically* (path! , refinement! , object! , nested block! , other(?))}
    sent: "2017-06-11T20:56:18.350Z"
    editedAt: "2017-06-11T20:58:03.638Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593dae0d6549436c7d3a2bd6"
    text: {But `a/b` could mean different things, so my second thought is what I would intuit depends on `type?` of path! ?}
    sent: "2017-06-11T20:54:37.389Z"
    editedAt: "2017-06-11T20:57:02.992Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593dadbc02c480e672343a31"
    text: {@Oldes `value? first [insert/tail]`: `true` and `false` in the second case intuitively is my first answer}
    sent: "2017-06-11T20:53:16.917Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593dac1af6a78eab483b6f5e"
    text: {@geekyi On the other side, what you would expect in cases like: `value? first [insert/tail]` and `value? first [insert/whatever]`}
    sent: "2017-06-11T20:46:18.026Z"
    editedAt: "2017-06-11T20:48:05.531Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593da99ae531dbc905d27098"
    text: {I think it is by design... lit-word! is a value of type lit-word! :) The question is, if it is useful.^/If there is:^/```^/>> value? first ['a] ^/== true^/>> value? first [a] ^/== false^/>> ^/```^/Than there should be:^/```^/>> value? first ['a/b] ^/== true^/>> value? first [a/b] ^/== false ;<==== now it is: true^/```}
    sent: "2017-06-11T20:35:38.050Z"
    editedAt: "2017-06-11T20:39:47.547Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593da6ae02c480e6723422dd"
    text: {@gltewalt "FIX: VALUE? now supports any type (except unset!)."}
    sent: "2017-06-11T20:23:09.996Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593da68c7503e2b7063256c2"
    text: {https://github.com/red/red/commit/3e7cce119212ef0b2859b14f4238e0000d862452}
    sent: "2017-06-11T20:22:36.994Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593da58131f589c64f98afb6"
    text: {It also throws an error on `'/` : `** Syntax Error: Invalid word-lit -- '`}
    sent: "2017-06-11T20:18:09.526Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593da552142826e972a5d401"
    text: {```^/lit-path true y/is-it^/lit-word false +*^/lit-word true +^/```}
    sent: "2017-06-11T20:17:22.759Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593da54f02c480e672341dda"
    text: {So just not implemented then? With Rebol2, there's a difference:}
    sent: "2017-06-11T20:17:19.686Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593da4dbcf9c13503c771849"
    text: "@Oldes Was just reading that :D"
    sent: "2017-06-11T20:15:23.037Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593da494142826e972a5d1a4"
    text: {@geekyi because it checks value only for `TYPE_WORD` https://github.com/red/red/blob/master/runtime/natives.reds#L1824-L1839}
    sent: "2017-06-11T20:14:12.499Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593da2a0d83c50560cfad80e"
    text: "`get` on those doesn't return anything?"
    sent: "2017-06-11T20:05:52.168Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593da2697503e2b706324714"
    text: {```^/lit-path true y/is-it^/lit-word true /^/lit-word true +*^/lit-word true +^/```}
    sent: "2017-06-11T20:04:57.871Z"
    editedAt: "2017-06-11T20:08:18.996Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "593da25e31f589c64f98a3fc"
    text: {```^/tests: ['y/is-it '/ '+* '+] forall tests [print reduce [type? first tests value? first tests first tests]]^/```}
    sent: "2017-06-11T20:04:46.404Z"
    editedAt: "2017-06-11T20:08:05.985Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "593da24c02c480e672341249"
    text: "Yeah feels weird to me too.."
    sent: "2017-06-11T20:04:28.834Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593d9e797503e2b7063238f9"
    text: "or the problem is with `path!`"
    sent: "2017-06-11T19:48:09.349Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593d9e45f6a78eab483b3e59"
    text: "seems buggy, semantically, for path notation"
    sent: "2017-06-11T19:47:17.008Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593d96097503e2b706321844"
    text: {If you pass a `lit-word!` to `value?` it is evaluated with `get`, any other type is just examined directly against `unset!`.}
    sent: "2017-06-11T19:12:09.384Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "593d935e7503e2b706320cc7"
    text: {or even a path returns true, due to '/ being present}
    sent: "2017-06-11T19:00:46.690Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593d9345d83c50560cfa9e2e"
    text: {Any lit-word that happens to be an op symbol returns true when using `value?`}
    sent: "2017-06-11T19:00:21.499Z"
    editedAt: "2017-06-11T19:03:51.012Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593d931eca6d4ae80c031275"
    text: "What is the weird issue you speak of?"
    sent: "2017-06-11T18:59:42.421Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593d9302142826e972a59297"
    text: {@gltewalt, reproduced your error. Please submit a ticket.}
    sent: "2017-06-11T18:59:14.680Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593d92496462d8493c0113f5"
    text: {There seems to be a weird issue with `value?` and `op!`^/^/```^/>> x: 1^/== 1^/>> value? x^/== true^/>> value? 'x^/== true^/>> value? y^/*** Script Error: y has no value^/*** Where: value?^/*** Stack: ^/>> value? 'y^/== false^/>> value? 'y/is-it^/== true^/>> value? '/^/== true^/>> value? '+^/== true^/```^/}
    sent: "2017-06-11T18:56:09.625Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593d91c4142826e972a58f64"
    text: "Ask away @BlackATTR_twitter!"
    sent: "2017-06-11T18:53:56.249Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593d915c142826e972a58e77"
    text: "GUI Console compiles ok"
    sent: "2017-06-11T18:52:12.343Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593d914ef31c8ced0c263e69"
    text: "red-11jun17-025efbd.exe"
    sent: "2017-06-11T18:51:58.812Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593d904ad83c50560cfa91ec"
    text: {Uh oh..^/^/```^/C:\Users\Old Man>red --cli^/Compiling compression library...^/Compiling Red console...^/*** Compilation Error: undefined symbol: exec/terminal/emit-string^/*** in file: %/C/ProgramData/Red/red-console.red^/*** in function: exec/ctx434~terminate^/*** at line: 338^/*** near: [^/    terminal/emit-string "^^[[?2004l"^/]^/```}
    sent: "2017-06-11T18:47:38.162Z"
    editedAt: "2017-06-11T18:47:47.402Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593d88b37503e2b70631e5a6"
    text: {ahhh, there it is! Thanks a lot. This is for a dialect that I'm using for an article on Red (draft title: Exploring Language Design with Red). If nobody minds, I will probably asking for some additional help here and  maybe even some proof-reading. Thanks xqlab}
    sent: "2017-06-11T18:15:15.597Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "593d8385d83c50560cfa64e6"
    text: "replace ```load dir ``` with ```read dir```"
    sent: "2017-06-11T17:53:09.445Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "593d7d8af6a78eab483aca96"
    text: {If it's better for me to put this out on stackexchange, let me know.}
    sent: "2017-06-11T17:27:38.471Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "593d7c6231f589c64f9818b1"
    text: {```^/file-dir: %/C/Users/name/code/^/file-list: make block! 1000^/filter: [any [thru ".htm" opt [1 skip]]] ; dynamically built from wildcard expr *.htm?^/scan-dir: func [dir list rule /local files] [^/    files: sort load dir^/    foreach file files [^/    ^-either find file "/" [^/    ^-^-scan-dir dir/:file list rule^/    ^-][^/    ^-^-if parse file rule [append list dir/:file]^/    ^-]^/    ]^/]^/scan-dir file-dir file-list filter^/```}
    sent: "2017-06-11T17:22:42.012Z"
    editedAt: "2017-06-11T17:30:11.835Z"
    v: 6
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "593d7babcf9c13503c768328"
    text: {Hi. I'm trying to pass a block as an argument to a function, and the Red interpreter tells me: *** Script Error: transcode does not allow block! for its <anon> argument . My code works just fine in Rebol 2.x and 3}
    sent: "2017-06-11T17:19:39.152Z"
    v: 1
    author: "57faf4bad73408ce4f2d0844"
) #(
    id: "593a25e1f2dd2dba06831ac6"
    text: "@greggirwin Cool, thanks!"
    sent: "2017-06-09T04:36:49.325Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593a1ecaf31c8ced0c1a0cb7"
    text: "@rebolek  @greggirwin :+1: "
    sent: "2017-06-09T04:06:34.576Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5939e96cf31c8ced0c19701b"
    text: {Really nice Bolek! Easily extended to actions: https://gist.github.com/greggirwin/ab10ae521654d7f74dd4c784de6b32a2}
    sent: "2017-06-09T00:18:52.478Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5939000be531dbc905c10866"
    text: {I've uploaded function to print source for `native!`s to https://gist.github.com/rebolek/dc1bb8c17f0c97e4dbf918126fcab6f1 . It's much bigger than original version, because there are some useful string manipulation functions, like `entab`, `detab`, `indent` or `match-bracket`.}
    sent: "2017-06-08T07:43:07.052Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59384210167d046a7d7a268a"
    text: "Correct."
    sent: "2017-06-07T18:12:32.590Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59383fc8f31c8ced0c129603"
    text: {:point_up: [June 7, 2017 5:25 PM](https://gitter.im/red/help?at=5937f0a731f589c64f830af5)^/> Construction syntax [..] you would use it only when you need to serialize/deserialize types with no literal forms, and when the reconstruction can be complex (e.g. nested objects).^/^/In other words, if there is no literal form, you have to `make` it.^/So `#[construction! syntax]` could be thought of as an alternative to `make`}
    sent: "2017-06-07T18:02:48.557Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59383d67f2dd2dba067b8d98"
    text: {I realize being in a *loadable format* is actually what I want, so I'm fine with the above compromises}
    sent: "2017-06-07T17:52:39.976Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59383d14cf9c13503c62eaf2"
    text: {```^//all         => TBD: Return value in loadable format.^/```}
    sent: "2017-06-07T17:51:16.799Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59383d04f31c8ced0c128980"
    text: "Currently `mold/all` in Red:"
    sent: "2017-06-07T17:51:00.091Z"
    editedAt: "2017-06-07T17:51:32.228Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59383ce4167d046a7d7a095d"
    text: {Thanks all.  @Oldes I didn't know of `mold/all`, it looks useful!}
    sent: "2017-06-07T17:50:28.775Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59382bee7503e2b7061e0225"
    text: {Remember, too, that it's all a balancing act. We've talked about `map!` in Rebol for a long time. Finally, we have a literal form! And...wait, it's *only* a literal form. We have to be careful what we wish for, and then think about how/where/when to use each option. }
    sent: "2017-06-07T16:38:06.853Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59380948167d046a7d790178"
    text: {```^/>> blk/1: next blk/1^/== "oo"^/>> mold/all blk^/== {[#[string! "foo" 2] #[function! [][print "hello"]]]}^/>> blk^/== ["oo" func [][print "hello"]]^/```}
    sent: "2017-06-07T14:10:16.619Z"
    editedAt: "2017-06-07T14:11:35.774Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5938091602c480e6721f400b"
    text: {The reason probably is that if the serialization would be used for every value, you would get ugly output as mentioned by Nenad.}
    sent: "2017-06-07T14:09:26.522Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593808e002c480e6721f3f14"
    text: {But even in Rebol you get this:^/```^/>> blk^/== ["foo" func [][print "hello"]]^/```}
    sent: "2017-06-07T14:08:32.152Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "593808a1f31c8ced0c115d73"
    text: {```^/>> length? blk: ["foo" #[function! [][print "hello"]]]^/== 2^/>> blk/2^/hello^/>> type? pick blk 2^/== function!^/```}
    sent: "2017-06-07T14:07:29.332Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59380871142826e97290f151"
    text: {Don't know what you are asking:) Play with Rebol console.}
    sent: "2017-06-07T14:06:41.453Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5938079031f589c64f837e69"
    text: {That's interesting, anything else that happens like this? (length changes on `reduce`)}
    sent: "2017-06-07T14:02:56.446Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59380757ca6d4ae80cee1cd6"
    text: {@geekyi In Rebol is possible to do this:^/```^/>> f: func[][print "hello"]^/>> mold/all :f^/== {#[function! [][print "hello"]]}^/```}
    sent: "2017-06-07T14:01:59.393Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5938070a6462d8493cec3f2d"
    text: {@Oldes  :point_up: [June 7, 2017 5:24 PM](https://gitter.im/red/help?at=5937f08c167d046a7d788389) also happens for `func [][]`}
    sent: "2017-06-07T14:00:42.183Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937ff98ca6d4ae80cedf51f"
    text: {Am I right that the main reason is, that it is not a priority now?}
    sent: "2017-06-07T13:28:56.357Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5937feec7503e2b7061d1137"
    text: {@dockimbel why not to support `#[object! [a: 1]]` versus `make object! [a: 1]`? I consider the first one nicer.}
    sent: "2017-06-07T13:26:04.833Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5937f259e531dbc905bcada6"
    text: {Even if we could define unique literal syntaxes for each of those composite datatypes, the resulting source code would look far less readable than the current one. So, that *gotcha* is actually a good trade-off between purity and readability.}
    sent: "2017-06-07T12:32:25.154Z"
    editedAt: "2017-06-07T12:32:38.496Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937f126ca6d4ae80ceda478"
    text: {It's an interesting *gotcha*. Interesting because I didn't notice (or I did, but was too confused at the time to understand)}
    sent: "2017-06-07T12:27:18.067Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937f0a731f589c64f830af5"
    text: {Construction syntax would not help in such case, as the console is not using it to display the serialized types. Construction syntax is verbose and pretty ugly, so you would use it only when you need to serialize/deserialize types with no literal forms, and when the reconstruction can be complex (e.g. nested objects).}
    sent: "2017-06-07T12:25:11.101Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937f08c167d046a7d788389"
    text: {```red^/>> atest: [btest: func [] []]^/== [btest: func [] []]^/>> length? atest^/== 4^/>> length? ctest: reduce atest^/== 1^/>> ctest^/== [func [][]]^/```}
    sent: "2017-06-07T12:24:44.934Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937f076f31c8ced0c10e3c7"
    text: {I completely agree about the usefulness of construction syntax!!}
    sent: "2017-06-07T12:24:22.607Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5937f074e531dbc905bca3b2"
    text: "Another case:"
    sent: "2017-06-07T12:24:20.292Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937f009ca6d4ae80ced9e7a"
    text: {I see. Construction syntax would be useful in that case I think!}
    sent: "2017-06-07T12:22:33.991Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937efec6462d8493cebcaf5"
    text: {@dockimbel I undertand, my problem is you cannot visually distinguish them both `btest <> dtest`}
    sent: "2017-06-07T12:22:04.724Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937ef7aca6d4ae80ced9bb4"
    text: {The thing is that not all datatypes have a literal form, so then they rely on construction at run-time. So, for such datatypes, the contruction form = the serialized form. A fully homoiconic version can be obtained using the so-called *construction syntax*, which is not yet fully implemented in Red.}
    sent: "2017-06-07T12:20:10.819Z"
    editedAt: "2017-06-07T12:22:06.559Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937ee7131f589c64f82fe41"
    text: {Exceptions to homoiconicity (hidden symantics not seen in the syntax)  in redbol: **contexts** and this (what can I call this?)}
    sent: "2017-06-07T12:15:45.749Z"
    editedAt: "2017-06-07T12:18:00.196Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5937ee23142826e972906ed8"
    text: {Redbol has the nice property that *syntax = symantics* most of the time}
    sent: "2017-06-07T12:14:27.324Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937edecf2dd2dba0679f92e"
    text: {Now I understand why it works that  way, but it makes me uneasy that you can have  *syntactically identical* blocks that are *symantically different*}
    sent: "2017-06-07T12:13:32.156Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937edb1f31c8ced0c10d772"
    text: "@geekyi Why do you think it's weird?"
    sent: "2017-06-07T12:12:33.524Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5937ed837503e2b7061cbaeb"
    text: "This just seemed like weird behavior to me"
    sent: "2017-06-07T12:11:47.343Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937ed646462d8493cebbfeb"
    text: {```^/>> btest: ['BMP make object! [thing: none]]^/== ['BMP make object! [thing: none]]^/>> length? btest^/== 4^/>> length? dtest: reduce btest^/== 2^/>> dtest^/== [BMP make object! [^/    thing: none^/]]^/```}
    sent: "2017-06-07T12:11:16.974Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "59361871e531dbc905b4a43d"
    text: "Thanks Alan!"
    sent: "2017-06-06T02:50:25.996Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5935f6d56549436c7d1cd58c"
    text: {Just added some more here; http://www.mycode4fun.co.uk/red-beginners-reference-guide   and also here:   http://www.mycode4fun.co.uk/About-Red-Programming    -  just trying to help !}
    sent: "2017-06-06T00:27:01.248Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "593424e2e531dbc905ad0335"
    text: {@dockimbel Thanks!  Looks good in a simple test program.}
    sent: "2017-06-04T15:18:58.156Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "593420f3e531dbc905acf3ac"
    text: "@Clemens-H Fixed pushed."
    sent: "2017-06-04T15:02:11.753Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59341f70e531dbc905aceccf"
    text: "@dockimbel Thanks."
    sent: "2017-06-04T14:55:44.508Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59341f376549436c7d15b932"
    text: {@Clemens-H Thanks, got it, will fix the parsing rules.}
    sent: "2017-06-04T14:54:47.196Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59341d8a02c480e6720f4645"
    text: {@dockimbel It's strange. Most words are capitalized correctly, but (the) three (starting with "a") are not: "ANalyze", "aPplication", "aNd".}
    sent: "2017-06-04T14:47:38.128Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "59341c39e531dbc905acdf3c"
    text: {The console does not include the Red toolchain. The console and Red's runtime are written in Red + Red/System. The toolchain is written in Rebol.}
    sent: "2017-06-04T14:42:01.745Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59341bd2ca6d4ae80cde024e"
    text: {@Clemens-H ^/> I also noticed that the second letter in one of the buttons in my program is upper case now, strange.^/^/The latest commit include a post-processing stage in VID, which can modify your GUI by applying some rules. The capitalization rule should only affect the first letter. Could you tell me what text that button's face/text property refers to?}
    sent: "2017-06-04T14:40:18.787Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593405c7f2dd2dba066a50ff"
    text: {@Clemens-H fyi https://gitter.im/?at=59285a8af3001cd342602823 the exec files are in .red folder}
    sent: "2017-06-04T13:06:15.894Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593404a36462d8493cdbd7ee"
    text: ":+1: :clap: "
    sent: "2017-06-04T13:01:23.270Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59340488e531dbc905ac8d2e"
    text: "Thanks, got it!"
    sent: "2017-06-04T13:00:56.653Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5934045c6549436c7d155bb3"
    text: ""
    sent: "2017-06-04T13:00:12.323Z"
    editedAt: "2017-06-04T13:00:26.704Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "5934044bcf9c13503c513a42"
    text: {Directly in rebol console:^/```^/>> do/args %red.r "%tests/hello.red"^/```}
    sent: "2017-06-04T12:59:55.287Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593403b56462d8493cdbd557"
    text: {Same as the normal `red` commands, but you have to proxy it thru rebol}
    sent: "2017-06-04T12:57:25.776Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5934035402c480e6720eef76"
    text: "Follow the other instructions in readme"
    sent: "2017-06-04T12:55:48.810Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59340343f31c8ced0c00d0cb"
    text: {@Clemens-H I'm not sure, possibly not. In that case, run `%red.r` found in source file using red}
    sent: "2017-06-04T12:55:31.644Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5934021ef2dd2dba066a439a"
    text: {Nice, I did compile the `console`.  Does it include the compiler?^/^/```^/$ ~/src/red/console -c foo.red^/*** Error: cannot access argument file^/--== Red 0.6.2 ==-- ^/Type HELP for starting information. ^/```}
    sent: "2017-06-04T12:50:38.319Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5933fe2231f589c64f72d1fb"
    text: {Check the [README](https://github.com/red/red#running-red-from-the-sources-for-contributors) @Clemens-H }
    sent: "2017-06-04T12:33:38.613Z"
    editedAt: "2017-06-04T12:34:29.289Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "5933fdbd142826e972807229"
    text: {You just need a rebol2 binary and compile `environment/console/console.red`}
    sent: "2017-06-04T12:31:57.640Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5933fd70f31c8ced0c00bc2d"
    text: "You could also try compiling yourself ;)"
    sent: "2017-06-04T12:30:40.158Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5933fd5b142826e9728070af"
    text: {It should be somewhere, all OSes compile source code on the fly on first run I think}
    sent: "2017-06-04T12:30:19.954Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5933fd3a142826e972807050"
    text: {In windows the builds are stored in programdata, not sure how it works in macOS}
    sent: "2017-06-04T12:29:46.101Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5933fd14f31c8ced0c00bb30"
    text: {I also noticed that the second letter in one of the buttons in my program is upper case now, strange.}
    sent: "2017-06-04T12:29:08.050Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5933fce3ca6d4ae80cdd921b"
    text: "Are the older builds available somewhere?"
    sent: "2017-06-04T12:28:19.874Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5933fcdb6549436c7d153eca"
    text: {Thanks, @geekyi . The workaround works.  I worked before, but the latest builds seem to be broken.}
    sent: "2017-06-04T12:28:11.913Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5933fcae02c480e6720ed686"
    text: {Small example:^/```^/main: layout [button "Quit 2" [unview/all]]^/^/view main^/```}
    sent: "2017-06-04T12:27:26.818Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5933fb6ae531dbc905ac6e9e"
    text: {Also, a recent crash was fixed (still not working tho?) :point_left: [June 3, 2017 3:28 PM](https://gitter.im/red/red/gui-branch?at=59328f33142826e9727bd2af), check if you have newest build}
    sent: "2017-06-04T12:22:02.449Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5933faeff2dd2dba066a2b94"
    text: {Need more details of what you were doing tho (code works best)}
    sent: "2017-06-04T12:19:59.145Z"
    editedAt: "2017-06-04T12:23:27.630Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5933fa7c31f589c64f72c506"
    text: {@Clemens-H try `-r` option when compiling. Workaround for whenever you get a `libRedRT` failure}
    sent: "2017-06-04T12:18:04.195Z"
    editedAt: "2017-06-04T12:19:21.721Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "5933f7c87503e2b7060cc4bb"
    text: {Hi! I am using the latest build for macOS (to have access to View) and I get this error now:^/```^/Compiling to native code...^/*** libRedRT Error: definition not found for red/OS-image/ctx-to-cgimage^/```^/Should I report it somewhere?}
    sent: "2017-06-04T12:06:32.122Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "5932277031f589c64f6cd5b9"
    text: "Ohh ok, thanks for the clarification!"
    sent: "2017-06-03T03:05:20.002Z"
    v: 1
    author: "563fa17916b6c7089cb9f59e"
) #(
    id: "593226ac167d046a7d632274"
    text: {@Travis-OBrien Welcome to Red! If you want to serialize your maps and be able to  `load` them back, you need to stick to datatypes which have a literal form (objects don't have one), until we get the construction syntax implemented (the `/all`refinement for `mold` and `save`).}
    sent: "2017-06-03T03:02:04.485Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59321dbaf31c8ced0cfab2e6"
    text: {@Travis-OBrien ^/```lisp^/>> node: context [location: [x: 1 y: 2]]^/== make object! [^/    location: [x: 1 y: 2]^/]^/>> node1: make node [name: "node1"]^/== make object! [^/    location: [x: 1 y: 2]^/    name: "node1"^/]^/>> to-block node1^/== [location: [x: 1 y: 2] name: "node1"]^/```}
    sent: "2017-06-03T02:23:54.908Z"
    editedAt: "2017-06-03T02:24:43.247Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59321d0f167d046a7d63045a"
    text: "Ok, I'll try it out. Thanks! :)"
    sent: "2017-06-03T02:21:03.127Z"
    v: 1
    author: "563fa17916b6c7089cb9f59e"
) #(
    id: "59321cdd167d046a7d630359"
    text: {@Travis-OBrien I see, you have `put` *object!*s instead of *block!*s like I've done. Maybe converting the objects to blocks before you put into a map would be useful?}
    sent: "2017-06-03T02:20:13.266Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59321bc1142826e9727a7d64"
    text: {I used `nodes: make map! []`, then added names and values using `put` }
    sent: "2017-06-03T02:15:29.142Z"
    v: 1
    author: "563fa17916b6c7089cb9f59e"
) #(
    id: "59321b18f2dd2dba066420fb"
    text: "^^ assuming the above"
    sent: "2017-06-03T02:12:40.062Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59321b08f31c8ced0cfaab00"
    text: {```red^/nodes: [node1: [location: [x: 1 y: 2 z: 3] connections: ["node2"] name: "node1"]]^/nodes-map: to-map nodes^/```}
    sent: "2017-06-03T02:12:23.987Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593219fecf9c13503c4afe56"
    text: "@Travis-OBrien what's your original map?"
    sent: "2017-06-03T02:07:58.660Z"
    editedAt: "2017-06-03T02:08:08.504Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "593219b731f589c64f6cac43"
    text: {@geekyi has successfully updated. It took about 20 - 30 mins}
    status: true
    sent: "2017-06-03T02:06:47.971Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59320e866549436c7d0f24f0"
    text: {woa, not sure what happened to the formatting... sorry about that!}
    sent: "2017-06-03T01:19:02.590Z"
    v: 1
    author: "563fa17916b6c7089cb9f59e"
) #(
    id: "59320e577503e2b70606b2b9"
    text: {Hey, can anyone help me with this?^/I've saved a map to a file, but when I load that file I get this in return:^/^/`nodes: #(^/    "node1" make object! [^/        location: make object! [^/            x: 1845.305786132813^/            y: 2421.185546875^/            z: 131.25244140625^/        ]^/        connections: ["node2"]^/        name: "node1"^/])`^/^/If I try to access "node1", it returns `make` instead of the object.^/Sorry for the noob question, I'm very new to red! ;)}
    sent: "2017-06-03T01:18:15.636Z"
    v: 1
    author: "563fa17916b6c7089cb9f59e"
) #(
    id: "59320d3a6549436c7d0f2112"
    text: {@geekyi is going to update windows 10. Here's hoping all goes well}
    status: true
    sent: "2017-06-03T01:13:30.393Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59306899f31c8ced0cf3efee"
    text: "(running on no fuel at that point)"
    sent: "2017-06-01T19:18:49.167Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "593068647503e2b706003a22"
    text: {Too little sleep last night. Must resist the keyboard when I'm only partially with it :worried: }
    sent: "2017-06-01T19:17:56.473Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592fb598f3001cd3427bfa93"
    text: {It's interesting to think about, in a larger sense. `Unset!` has meaning as a value, albeit a special non-value. Zero is also a special non-value, if you are the first people discussing its...value. We can use `unset!` to reset things, which can be very useful. Taking a step back, we may find that doing symbolic work can leverage it. As Nenad noted, it exists for a reason, but we may not see all its uses and importance in our own work.}
    sent: "2017-06-01T06:35:04.004Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592fb318cb83ba6a411c577d"
    text: {@gltewalt ^/> Of what value is setting a word to unset?^/^/It has no value per se, it's an escape mechanism for the cases where you need to deal explicitly with `unset!` values. As `unset!` is a first-class datatype, such cases can happen.}
    sent: "2017-06-01T06:24:24.876Z"
    editedAt: "2017-06-01T06:24:29.924Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592fab390ba4d59763fe8975"
    text: ":sparkles: "
    sent: "2017-06-01T05:50:49.243Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592fa83ccb83ba6a411c3047"
    text: {Because of checking to see if a word is unset before clobbering it}
    sent: "2017-06-01T05:38:04.201Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "592fa7de5e34568d5eaf9a69"
    text: {I don't think so, what does this have to do with `protect`?}
    sent: "2017-06-01T05:36:30.422Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592fa7953aeff8a61f654f99"
    text: "Is that how `protect` works?"
    sent: "2017-06-01T05:35:17.610Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592fa73c38b37b9828456abd"
    text: {```^/>> unset? get/any 'x^/== true^/>> unset? get/any 'kjiohoinkj^/== true^/```}
    sent: "2017-06-01T05:33:48.560Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592fa6f900efc2bb3ec544ef"
    text: "Of what value is setting a word to unset?"
    sent: "2017-06-01T05:32:41.395Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592fa6e90a783b6c0af59f4a"
    text: {```^/>> set/any 'x print 1^/1^/>> get/any 'x^/```}
    sent: "2017-06-01T05:32:25.772Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592fa6d65e34568d5eaf975a"
    text: "ohh... yeah"
    sent: "2017-06-01T05:32:06.655Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592fa6bcfa63ba2f769decdb"
    text: {It sets it to `unset!` value. Without `/any`, you get an error.}
    sent: "2017-06-01T05:31:40.640Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592fa69f631b8e4e61325c5b"
    text: "It doesn't set the word"
    sent: "2017-06-01T05:31:11.301Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592fa67e00efc2bb3ec54369"
    text: {Of course, that's why your first example actually works:^/```^/>> set/any 'x print 1^/1^/>> set 'x print 1^/1^/*** Script Error: x needs a value^/*** Where: set^/```}
    sent: "2017-06-01T05:30:38.506Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592fa6345e34568d5eaf95b5"
    text: {`/any         => Allow UNSET as a value rather than causing an error.`}
    sent: "2017-06-01T05:29:24.197Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592fa5ed0ba4d59763fe78c5"
    text: {```^/>> set 'my-word [print "You are setting your word to block!"]^/== [print "You are setting your word to block!"]^/```}
    sent: "2017-06-01T05:28:13.932Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592fa59a2b926f8a67b1ef49"
    text: {```^/>> set/any 'my-word print "This doesn't work"^/This doesn't work^/>> my-word^/*** Script Error: my-word has no value^/*** Where: catch^/>> set/any 'my-word [print "This works"]^/== [print "This works"]^/>> my-word^/== [print "This works"]^/>>^/```}
    sent: "2017-06-01T05:26:50.897Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f0a9338b37b9828431754"
    text: ":+1: "
    sent: "2017-05-31T18:25:23.040Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f09170a783b6c0af338b5"
    text: "So you don't get extra output in the console. "
    sent: "2017-05-31T18:19:03.078Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592f08d938b37b9828430f12"
    text: {Why do `prin` and `print` return `unset!` ?^/I probably knew this at one point, but I've been away for a bit and can't recall.}
    sent: "2017-05-31T18:18:01.465Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f0756fa63ba2f769b929c"
    text: {@gltewalt, no. It may be nice, and there may be requirements in the future for certain optimizations though.}
    sent: "2017-05-31T18:11:34.037Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592f07235e34568d5ead1bc8"
    text: "Should `RETURNS:` be mandatory for a help entry?"
    sent: "2017-05-31T18:10:43.144Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f07210a783b6c0af33099"
    text: {My first thought as well, so then we should doc that un-spec'd `return:` is not the same typeset as un-spec'd args.}
    sent: "2017-05-31T18:10:41.088Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592f06dc0ba4d59763fc1a41"
    text: {@greggirwin For the returned type, `[any-type!]` is probably a better default (so we can keep it compatible with current behavior in Redbol).}
    sent: "2017-05-31T18:09:32.703Z"
    editedAt: "2017-05-31T18:09:41.660Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592f06875e34568d5ead19d2"
    text: {`related` category in Rebol help is done manually. While I think it's very useful, I don't think it should be part of function's specs. There are other useful things like examples, that should be part of some extended help, but not part of specs.}
    sent: "2017-05-31T18:08:07.324Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592f0648631b8e4e612ff87e"
    text: {If you don't define a type for an arg, it's treated as `default!` which exlcudes `unset!`. It's possible that return vals could do that as well, but @dockimbel will have to say.}
    sent: "2017-05-31T18:07:04.556Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592f06400a783b6c0af32c7c"
    text: "I thought it might just be inconsistency."
    sent: "2017-05-31T18:06:56.793Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f05e2631b8e4e612ff713"
    text: {We then either have to add special doc strings for related funcs. In the past, we've done that kind of thing with external data and apps.^/^/An undefined return type should be interpreted as `[any-type!]`. It's not enforced today.}
    sent: "2017-05-31T18:05:22.556Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592f05dcf3001cd3427955c2"
    text: "Certainly not."
    sent: "2017-05-31T18:05:16.647Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592f059efcbbe1891c634f87"
    text: {Also, if `RETURNS:` is missing, is it assumed that the return type is unset! ?}
    sent: "2017-05-31T18:04:14.646Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f04f3631b8e4e612ff193"
    text: {Like the Special String Functions section if `help mold` was entered}
    sent: "2017-05-31T18:01:23.696Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f048d0a783b6c0af322d6"
    text: "Yes. "
    sent: "2017-05-31T17:59:41.516Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f045300efc2bb3ec2d75c"
    text: {I assume @gltewalt is talking about the [Rebol function dictionary](http://www.rebol.com/docs/dictionary.html) (but maybe not). I have to add that I found those 'related' sections immensely helpful for discovery}
    sent: "2017-05-31T17:58:43.700Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "592f02362b926f8a67af7ff7"
    text: {Can we get a "Related: " category in help ?}
    sent: "2017-05-31T17:49:42.856Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592ef71bcb83ba6a41196ce0"
    text: "@9214, that took me a minute. :^^)"
    sent: "2017-05-31T17:02:19.904Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592ec70fcb83ba6a41186a05"
    text: {I am reading the Rebol documentation, which helps a lot.  ;-)}
    sent: "2017-05-31T13:37:19.698Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592eb4d900efc2bb3ec12c54"
    text: {You notice the syntax closely resembles the semantics unlike most other programming languages}
    sent: "2017-05-31T12:19:37.374Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592eb4acfa63ba2f7699e3d2"
    text: {@Clemens-H Red is more *dialecty* than lisp. Sometimes it's not immediately apparent the code you are writing is a dsl (*dialect* here is the better term, as it's a slight variation of the red syntax most of the time). That's why it's better to think of everything as *data* like everyone is saying}
    sent: "2017-05-31T12:18:52.757Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592ea4b9631b8e4e612dead8"
    text: "@dander Eva Lu Ator is proud of you! :girl: "
    sent: "2017-05-31T11:10:49.472Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "592e76e1cb83ba6a4116d926"
    text: {@Clemens-H Alternatively, you can also set the color using `font-color blue`.}
    sent: "2017-05-31T07:55:13.024Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592e685a631b8e4e612cd493"
    text: {@qtxie Oops, my bad.  :-(  It _does_ work!  Sorry for the noise.}
    sent: "2017-05-31T06:53:14.475Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592e3f3f5e34568d5ea962f1"
    text: {@greggirwin haha, great! thanks :smile: I'm glad I didn't make any glaring errors}
    sent: "2017-05-31T03:57:51.891Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "592dfe030a783b6c0aeea940"
    text: "@dander has earned an Evaluation badge! "
    sent: "2017-05-30T23:19:31.544Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592dfdf05e34568d5ea885ea"
    text: "@qtxie, @Clemens-H  is on Mac."
    sent: "2017-05-30T23:19:12.184Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592decef2b926f8a67aad6f4"
    text: "@Clemens-H It works here on my Win 7 box."
    sent: "2017-05-30T22:06:39.763Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "592de232fcbbe1891c5e6e26"
    text: {How can I change the color of a text in View?  For an area, this should work: `area font [size: 12 color: blue] 300x300`. But `view [text "asdf" font [color: blue]]` doesn't work.}
    sent: "2017-05-30T21:20:50.228Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592de0ec0a783b6c0aee36ea"
    text: {I still need to understand the evaluation rules better.}
    sent: "2017-05-30T21:15:24.703Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592de0a52b926f8a67aa9e0c"
    text: {rather, it's a `paren!` that contains some other stuff}
    sent: "2017-05-30T21:14:13.638Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "592de0840a783b6c0aee3511"
    text: "yep, it's all just data :)"
    sent: "2017-05-30T21:13:40.603Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "592de00cfa63ba2f76969f6f"
    text: {Interesting, so all expressions in parentheses are there own type `paren!`.^/```>> type? quote (((1 + 2)))^/== paren!^/```}
    sent: "2017-05-30T21:11:40.251Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592ddf73fa63ba2f76969c3e"
    text: {```^/>> a: 3^/== 3^/>> (a)^/== 3^/>> [a (a)]^/== [a (a)]^/>> compose [a (a)]^/== [a 3]^/```}
    sent: "2017-05-30T21:09:07.573Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "592ddf142b926f8a67aa970c"
    text: {`paren!` is another type of series, like `block!`, but its contents get evaluated when you evaluate it. It's often used when you want to partially evaluate a block using the `compose` function}
    sent: "2017-05-30T21:07:32.327Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "592dde64631b8e4e612aff45"
    text: {Thanks, that helps my understanding of blocks.  I could have guessed `quote`.  ;-)  What is the meaning of `(a)`?}
    sent: "2017-05-30T21:04:36.715Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592dddcb38b37b98283df985"
    text: {I'm not a Lisp expert, so hopefully I understand the question correctly. I think it depends on what you are trying to do. For blocks, the default behavior is not to evaluate, so in that case you don't need to do anything. For a word, there is the `lit-word!` type, which evaluates to the corresponding `word!`. And for other things, there is a `quote` function which returns a single argument bypassing evaluation of it^/```^/>> [a]^/== [a]^/>> 'a^/== a^/>> quote 'a^/== 'a^/>> quote (a)^/== (a)^/```}
    sent: "2017-05-30T21:02:03.164Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "592dd9f6fa63ba2f769683df"
    text: "What is Red's equivalent of `quote` in Lisp?"
    sent: "2017-05-30T20:45:42.775Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
)#(
    id: "592dc535fcbbe1891c5ddcb2"
    text: "@geekyi is using mobile, ignore me"
    status: true
    sent: "2017-05-30T19:17:09.400Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592dc51838b37b98283d86bf"
    text: "/delete"
    sent: "2017-05-30T19:16:40.741Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592dc504cb83ba6a411438ee"
    text: "@planetsizecpu if you're "
    sent: "2017-05-30T19:16:20.547Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592da6c50a783b6c0aed1829"
    text: {I wonder with expressions like  either  a = (b = (c = d))  [ ....  ^/it is no so extrange when you have seen words like  reduce [...  that are my thougts}
    sent: "2017-05-30T17:07:17.623Z"
    editedAt: "2017-05-30T17:08:42.135Z"
    v: 2
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "592d9e350a783b6c0aecee2c"
    text: "Yes, we'll have both options."
    sent: "2017-05-30T16:30:45.269Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592d9644c4d73f445afb01e4"
    text: {The thing with HOF is, that passing a block of code in `foreach`-like fashion is often simpler and faster.}
    sent: "2017-05-30T15:56:52.993Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592d93a10a783b6c0aecb52e"
    text: {@planetsizecpu, HOFs aren't on the roadmap, but we'll probably see something before too long. As Bolek says, they aren't hard to write. The main thing is designing the standard interfaces and consistency, so they take us a long way, and also act as models for others.}
    sent: "2017-05-30T15:45:37.214Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592d46fdcb83ba6a4111bfb4"
    text: {@dockimbel thx!, also want to say that some of us could not wait for 1.0, dont waste time here and push! :clap: ^/}
    sent: "2017-05-30T10:18:37.322Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "592d46055e34568d5ea500e4"
    text: "@planetsizecpu That's the right mindset. :+1: ;-)"
    sent: "2017-05-30T10:14:29.158Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592d4132c4d73f445af96231"
    text: {@rebolek  haha, that's no my goal, and at all, no my skills. I drag too much years of old fashioned character-mode langs, from '88 to be exact,  so my mind need  readjustments (and time) to meet red-lang skills :smile:  But I am really hopeful with red, and wish to learn and do everything with him.}
    sent: "2017-05-30T09:53:54.152Z"
    editedAt: "2017-05-30T09:59:52.557Z"
    v: 2
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "592d1e0f0a783b6c0aea7b35"
    text: {@planetsizecpu HOFs are easy to write, no need to wait.}
    sent: "2017-05-30T07:23:59.396Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592d1d5438b37b98283a55c4"
    text: {@greggirwin  all-are? works well!, thx. ^/In fact what I wanted is to test if there is a different way to do not binary comparison, I was not aware that HOF is missing, so we must wait^/}
    sent: "2017-05-30T07:20:52.803Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "592cd5550a783b6c0ae97ef6"
    text: {Now, to *use* the resizing...^/```^/win: layout [lst: text-list data list]^/win/actors: object [^/^-on-resizing: function [face [object!] event [event!]][^/^-^-lst/size: face/size - (lst/offset * 2)^/^-]^/]^/events: read https://api.github.com/repos/red/red/events^/list: parse events [collect [any [thru "message" 3 skip keep to ["\n" | {"}]]]]^/view/flags win [resize]^/```}
    sent: "2017-05-30T02:13:41.500Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592cd3ec0ba4d59763f2b17d"
    text: "Another badge skill for @geekyi! Nice."
    sent: "2017-05-30T02:07:40.466Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592c94b000efc2bb3eb862a6"
    text: {Btw, maximizable commits window @meijeru. But the `pane` doesn't resize tho}
    sent: "2017-05-29T21:37:52.321Z"
    editedAt: "2017-05-29T21:38:36.127Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "592c9476fcbbe1891c58e5fb"
    text: {I think I'm getting a hang of dynamically modifying code :D}
    sent: "2017-05-29T21:36:54.239Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592c94565e34568d5ea288cc"
    text: {```red^/code: load https://github.com/red/code/raw/master/Showcase/last-commits.red^/bcode: change/only find copy code 'view 'view/flags^/append next bcode quote 'resize^/do head bcode^/```}
    sent: "2017-05-29T21:36:22.788Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592c92b3eec422e415feb435"
    text: {Was stuck until I realized I could use `/only` refinement of `change`}
    sent: "2017-05-29T21:29:23.849Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592c9272cb83ba6a410f3e1f"
    text: {```red^/>> test: [view]^/== [view]^/>> change/only test 'view/flags test^/== [view/flags]^/```}
    sent: "2017-05-29T21:28:18.810Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592c9231c4d73f445af6f399"
    text: {I'm always hitting a snag with `path!`s when it comes to metaprogramming with red: [Change word to path](https://stackoverflow.com/q/44250466/5798459)}
    sent: "2017-05-29T21:27:13.778Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592c591afa63ba2f76901e04"
    text: {```^/; ALL? is too close to ALL^/all-are?: func [    ; every? all-are? ;; each? is-each? each-is? are-all? all-of?^/^-"Returns true if all items in the series match a test"^/^-series^-[series!]^/^-test^-"Test to perform against each value; must take one arg if a function"^/][^/^-either any-function? :test [^/^-^-foreach value series [if not test :value [return false]]^/^-^-true^/^-][^/^-^-if word? test [test: to lit-word! form test]^/^-^-either integer? test [^/^-^-^-parse series compose [some quote (test)]^/^-^-][^/^-^-^-parse series [some test]^/^-^-]^/^-]^/]^/e.g. [^/^-all-are? [1 2 3] integer!^/^-all-are? [1 2 3] :integer?^/^-all-are? [x x x] word!^/^-all-are? [x x x] 'x^/^-all-are? [x x y] 'x^/^/^-; Your case^/^-a1: 1 a2: 2 a3: 3^/^-blk: reduce [a1 a2 a3]^/^-all-are? next blk blk/1^/^-a1: 1 a2: 1 a3: 1^/^-blk: reduce [a1 a2 a3]^/^-all-are? next blk blk/1^/]^/```}
    sent: "2017-05-29T17:23:38.204Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592c58daf3001cd3426dd155"
    text: {@planetsizecpu, if you have a lot of values to compare, you could do `1 = length? unique reduce [...]`, or...}
    sent: "2017-05-29T17:22:34.679Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592c231afa63ba2f768f1f7c"
    text: {@justjenny  @greggirwin possibly driver issue, I'm getting different results with same version: https://gitter.im/red/bugs?at=592c223500efc2bb3eb66fa4}
    sent: "2017-05-29T13:33:14.866Z"
    editedAt: "2017-05-29T13:33:35.072Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "592c12fbfcbbe1891c56c3ba"
    text: {@planetsizecpu `all` return `none` on failure, which actually doesn't matter much, `none` in conditions is treated same as `false`.}
    sent: "2017-05-29T12:24:27.323Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592c0de000efc2bb3eb612b7"
    text: {@dockimbel  thx!, I thought  a1 = ( a2 = a3) should work, as (a2 = a3) is evaluated first and should return true in case of equal, and then a1 =  true/false should be evaluated.  So it is my mistake}
    sent: "2017-05-29T12:02:40.364Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "592c0ceecb83ba6a410cf92b"
    text: {The result of a comparison is always a `logic!` value, so you can't chain them that way. You'll be able to chain such operation once we add HOF support, or you can write a custom HOF now if you prefer. ;-)}
    sent: "2017-05-29T11:58:38.477Z"
    editedAt: "2017-05-29T11:58:52.548Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592c0cac2b926f8a67a2e4cd"
    text: {@planetsizecpu This is what's happening in your first attempt:^/```lisp^/>> a1: 1^/== 1^/>> a2: 2^/== 2^/>> a3: 3^/== 3^/>> a1 = a2^/== false^/>> false = a3^/== false^/```}
    sent: "2017-05-29T11:57:32.403Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592c0bfec4d73f445af4b881"
    text: {@rebolek thx, it works! and curiously return none if not the same values. Should return false?^/@dockimbel , I meant Red.^/By right form I meant elegant form such as parens.}
    sent: "2017-05-29T11:54:38.495Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "592c0b2dc4d73f445af4b468"
    text: {@planetsizecpu ^/>  I have read the BNF grammar pdf but don't see clear if it is a way^/^/That's for Red/System, not Red. So, is your question about Red or Red/System?}
    sent: "2017-05-29T11:51:09.886Z"
    editedAt: "2017-05-29T11:51:37.627Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592c0ad65e34568d5ea01a30"
    text: {@planetsizecpu try something like `all [equal? a1 a2 equal? a1 a3]`}
    sent: "2017-05-29T11:49:42.437Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592c09ed0ba4d59763efa9cf"
    text: {@all today I have the worm spinning my head :smile:  I'm wishing to compare if three values such a1 a2 a3 are equal. ^/So I wondered red has  more than binary operators and tested a1 = a2 = a3 wich return false even if the same value, so I tested a1 = (a2 = a3) and return even false.^/So the question: what is the right form to test three or more values. I have read the BNF grammar pdf but don't see clear if it is a way}
    sent: "2017-05-29T11:45:49.401Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "592b78ca5e34568d5e9de8e5"
    text: "Video driver or resolution issue?"
    sent: "2017-05-29T01:26:34.327Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592b56390a783b6c0ae3c9b5"
    text: {Ok, Just an update.  I tried the same tests using Rebol and Python, the borders came out the same.  So I'm guessing this is an MS windows 10 version 1607 problem and not ours. apologies, I should check before I react. }
    sent: "2017-05-28T22:59:05.986Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "592b45b02b926f8a67a01de7"
    text: {Just an observation. I'm using Windows 10 version 1607.  I noticed a problem with the 1 pixel borders around a view window. Using a 'resize flag everything is ok, but anything else and the window is missing its border either at the bottom or elsewhere. Anyone else noticed this? not a big problem, but it does spoil the look of the view window. It's more noticable if the window is over a white background. ```^/Red [ ]^/view/flags [size 200x100 h5 "Hello"]'resize^/view[size 200x100 h5 "Hello"]^/view/flags[size 200x100 h5 "Hello"]'popup^/```  }
    sent: "2017-05-28T21:48:32.680Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "592b1d21631b8e4e611ff946"
    text: "Kaj used Syllable where possible."
    sent: "2017-05-28T18:55:29.991Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "592af865fa63ba2f768af5d3"
    text: {Possibly. There might be an old 0MQ version you could use. Pretty sure Kaj was on *nix, and I did all my 0MQ work on Windows.}
    sent: "2017-05-28T16:18:45.109Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592ad2b62b926f8a679e82d9"
    text: {Another thought: Even if I could compile the ZMQ binding, it wouldn't help me on macOS, because the ZMQ library is 64-bit and I couldn't link it, right?}
    sent: "2017-05-28T13:37:58.765Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592ad226eec422e415f829ba"
    text: {@greggirwin Thanks, I am still stuck in the first few chapters of the Rebol documentation...  But my first few hours of Red programming were lots of fun! ;-)}
    sent: "2017-05-28T13:35:34.349Z"
    editedAt: "2017-05-28T13:38:14.522Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592ac7e80a783b6c0ae1dd0d"
    text: {`Compose` is another good word to become familiar with.}
    sent: "2017-05-28T12:51:52.574Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592ac7c0c4d73f445af04c41"
    text: {@Clemens-H, as you are now learning, while code is data and data is code, as in Lisp, there is a slight twist. In Red we say "Everything is data until it's evaluated." Learning about, and controlling evaluation is important in Red. It's tempting, at times, to want Red to work in more familiar ways, and it can *look* like it does. A lot of people use it effectively without ever knowing the truth. ^/^/Get a little time with it under your belt, make some things work, and then you can take The Red Pill and see how deep the rabbit hole goes. }
    sent: "2017-05-28T12:51:12.109Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592ab561cb83ba6a4108386e"
    text: "Thanks, I didn't know about `get`."
    sent: "2017-05-28T11:32:49.813Z"
    v: 1
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592aac7f0a783b6c0ae1787f"
    text: {@Clemens-H You can either to `reduce` whole block, or `get` each value individually. For example:^/```^/>> foreach f [f1 f2] [print get f]^/foo^/bar^/```^/What is better depends on your use case.}
    sent: "2017-05-28T10:54:55.232Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592aaac80a783b6c0ae173f7"
    text: {A block is just a series, and foreach is intended to loop over a series. So  `foreach f [f1 f2] [print f]` just loops over `[f1 f2]` and prints `f1` and `f2`.  ^/To get the "intended" result you need to evaluate `f1` and `f2` which you have done in the second example.^/```^/>> reduce [f1 f2]^/== [%foo %bar]^/```^/So it `foreach f reduce [f1 f2] [print f]` now give the right result. I think this is the correct way.}
    sent: "2017-05-28T10:47:36.561Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "592aa865631b8e4e611e5198"
    text: {Hi! I have a noob question.  This doesn't do what it is intended to do: iterating over all files.^/^/```^/>> f1: %foo^/== %foo^/>> f2: %bar^/== %bar^/>> foreach f [f1 f2] [print f]^/f1^/f2^/```^/^/With `reduce` it works.  Is this the correct/idiomatic way to do this?  (It's like `(list f1 f2)` vs. `'(f1 f2)` in Lisp, I guess.)^/^/```^/>> foreach f reduce [f1 f2] [print f]^/foo^/bar^/```}
    sent: "2017-05-28T10:37:25.438Z"
    editedAt: "2017-05-28T10:38:35.247Z"
    v: 2
    author: "59285ad2d73408ce4f628692"
) #(
    id: "592a053aeec422e415f5b68b"
    text: {thanks  @greggirwin  and yeah  @geekyi   got it, thanks for the help.}
    sent: "2017-05-27T23:01:14.220Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "5929db03631b8e4e611bf877"
    text: {@sergeantWilson, just a suggestion for using Gitter, `ctrl+shift+m`shows markdown help. Use three backticks to post large amounts of code}
    sent: "2017-05-27T20:01:07.536Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59284eae0ba4d59763e37432"
    text: {Build a `call` command using it. I'm on windows, so using `del` here:^/```^/== %xxxyyyzzz.tmp^/>> form reduce ["del" to-local-file file]^/== "del xxxyyyzzz.tmp"^/>> exists? file^/== true^/>> call form reduce ["del" to-local-file file]^/== 12148^/>> exists? file^/== false^/```}
    sent: "2017-05-26T15:50:06.797Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59284cd7fa63ba2f76821dd9"
    text: {If I choose a file using the file dialog box, the path and filename will be held in the variable 'file'^/How can I delete the file using the 'file' variable and not the actual file name directly. ^/If I use call, I can use the actual filename directly  call "delete sample.txt"  , but how would I pass the file variable to the shell ?  or is there another way ?^/Thanks. }
    sent: "2017-05-26T15:42:15.641Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "59284c600ba4d59763e36aa4"
    text: {could some one help regarding deleting files from a red script.```^/Red [ ]^/if file: request-file [contents: read file] ^/print "prints file path and contents of text file"^/print "--------------------------------------------"^/print ""^/print file^/print ""^/print contents^/```}
    sent: "2017-05-26T15:40:16.026Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "59284060c4d73f445ae7f7ea"
    text: "@dockimbel  Thank you for the information."
    sent: "2017-05-26T14:49:04.597Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "59283efa00efc2bb3ea91c77"
    text: {@AlexanderBaggett `face/state/1`. It's documented [there](https://doc.red-lang.org/en/view.html#_show_function) under "State facet" section. Easiest way for you is to pass that value to a routine, then from the routine, you can call the OS API.}
    sent: "2017-05-26T14:43:05.974Z"
    editedAt: "2017-05-26T14:44:05.468Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59282a170ba4d59763e2c7d3"
    text: {If you have a face! object, how can you get it's handle in Red/system in windows? }
    sent: "2017-05-26T13:13:59.951Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5927e9c92b926f8a67947331"
    text: "Facepalm"
    sent: "2017-05-26T08:39:37.289Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5927e67e00efc2bb3ea79f90"
    text: {@Rebol2Red You did not compile in release mode as instructed above.}
    sent: "2017-05-26T08:25:34.019Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5927e5755e34568d5e91c4c4"
    text: {Compiling ask still fails. ^/^/I did the following:^/^/Downloaded the source at:^/http://static.red-lang.org/dl/auto/red-25may17-2a03d36.zip^/Extract it (in folder downloads) and take out at downloads all the dirs and put them inside the folder where my source is. (In the future i will place it at a steady place) ^/I then added #include %environment/console/input.red to my source^/^/When compiling i got this error:^/*** Compilation Error: undefined symbol: red/unicode/decode-utf8-char^/*** in file: %/C/TEBACKUPPEN/REN/PROGRAMMEREN/RED/PROGRAMMA/RVS/ADVENTURE/OBJECTVERSIE/environment/console/win32.reds^/*** in function: exec/terminal/stdin-read^/*** at line: 190^/*** near: [unicode/decode-utf8-char as c-string! utf-char :len c]^/The source is at: %/C/TEBACKUPPEN/REN/PROGRAMMEREN/RED/PROGRAMMA/RVS/ADVENTURE/OBJECTVERSIE/^/^/Did i do things wrong?}
    sent: "2017-05-26T08:21:09.889Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5927df1f9f4f4ab05b0150b4"
    text: {A compiler reads and tries to make sense of your code in advance, an interpreter figures it out while evaluating it.}
    sent: "2017-05-26T07:54:07.584Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5927dedeeec422e415ee2077"
    text: {@Rebol2Red In `probe south`, you are passing the `south` word which was not defined before, or at least, the compiler does not see where it is defined, so it will signal an error. The compiler does a static checking of your source code, while the interpreter processes the code on-the-fly. The compiler can detect some simple errors that way and generate better code. So, you can either make the compiler happy by declaring a `south` word before (like `south: none`), or disable such checks by the compiler by adding the following entry inside your `Red [...]`header: `Config: [red-strict-check?: no]`.}
    sent: "2017-05-26T07:53:02.760Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5927dd1e631b8e4e6114c091"
    text: {@Oldes @dander @greggirwin @dockimbel Thank you all! ^/I have one more question. Maybe stupid or obvious.^/```^/direction: "south"^/set to-word direction 4^/probe south^/== 4^/```^/Why doesn't his compiles?^/** script error: undefined word south^/This seems logical, but then why does it work in interpreted mode?^/Is it possible - somehow - to know if something will compile or not?}
    sent: "2017-05-26T07:45:34.863Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5927aab02b926f8a67938b03"
    text: {@Rebol2Red ^/^/> Why doesn't the first example works?^/^/It works fine in latest version.}
    sent: "2017-05-26T04:10:24.050Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5927aa87c4d73f445ae58cd0"
    text: {@Rebol2Red ^/> Howto compile ask?^/^/Add `#include %environment/console/input.red` and compile in release mode (`-r` option).}
    sent: "2017-05-26T04:09:43.191Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592775e6f3001cd3425c978e"
    text: {The detail you're missing is that, in a path, a word is a literal word. So it would be like `probe type? 'kitchen` in the console. Using a `get-word!` or `paren!` evaluates the word.}
    sent: "2017-05-26T00:25:10.954Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59277595c4d73f445ae4dcc3"
    text: {@Rebol2Red, it often helps to look at your data structures. If you probe `rooms`, what do you see? To access a value via path syntax, using a word, e.g., `'kitchen`, that word needs to be in the block/object. Do you see `'kitchen` in `rooms`? Now think of another way to do it, using `select`. What would you use as the key/value to select on?}
    sent: "2017-05-26T00:23:49.981Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592768c0fa63ba2f767e9053"
    text: {`rooms/kitchen` works because the word `kitchen` is in `rooms`. It's looking that part up based on name. If you use `:kitchen`, or `(kitchen)` then you are looking it up by index (using the value of `kitchen`). The word `south` is not in `exits`, so it doesn't find it}
    sent: "2017-05-25T23:29:04.758Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "592756d0631b8e4e61130492"
    text: {@Oldes Can you explain why rooms/1/exits/4 works but rooms/kitchen/exits/south doesn't work, after all kitchen = 1 and south = 4^/```^/probe kitchen^/== 1^/probe type? kitchen^/== integer!^/probe south^/== 4^/probe type? south^/== integer!^/```}
    sent: "2017-05-25T22:12:32.219Z"
    editedAt: "2017-05-25T22:17:27.039Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "592756275e34568d5e8fdb1a"
    text: "There is so many ways how to do what you want:)"
    sent: "2017-05-25T22:09:43.078Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "592755b30a783b6c0ad62b98"
    text: {On the other side `rooms/:kitchen` is same like `rooms/(kitchen)` or `rooms/1`, because `:kitchen` is of type `get-word!`}
    sent: "2017-05-25T22:07:47.969Z"
    editedAt: "2017-05-25T22:08:48.687Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59275586631b8e4e6112ff3d"
    text: {In your version `rooms` is just an array of objects, so you cannot expect that something like: `rooms/kitchen` will work as it selects by name, but in your case `kitchen` is just index.}
    sent: "2017-05-25T22:07:02.680Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "592754fc00efc2bb3ea5a83c"
    text: {@Rebol2Red same way.. but it is not much memory efficient.. you can also use something like:^/```^/>> rooms/:kitchen/exits/:south: salon^/== 4^/```}
    sent: "2017-05-25T22:04:44.819Z"
    editedAt: "2017-05-25T22:05:00.918Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "592752cc5e34568d5e8fcfc7"
    text: {@Oldes Alright, the names are unique. But where/how do i use south?}
    sent: "2017-05-25T21:55:24.829Z"
    editedAt: "2017-05-25T21:56:13.460Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "59274f739f4f4ab05bff6d09"
    text: {```^/>> r: [k [1 2 3]]^/== [k [1 2 3]]^/>> r/k^/== [1 2 3]^/```}
    sent: "2017-05-25T21:41:07.067Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59274f2300efc2bb3ea5916f"
    text: {Is the name unique? If so, use map or block with names.. like: `rooms: [kitchen [make object! [exits: [...]]]]`}
    sent: "2017-05-25T21:39:47.226Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59274d31fcbbe1891c460fcc"
    text: {Start of an object oriented adventure system^/```^/directions: [northeast east southeast south southwest west northwest north]^/repeat i (length? directions) [set directions/(i) i]^/;probe south^/^/room: context [^/^-name: ^/^-exits: [0 0 0 0 0 0 0 0]^/]^/^/rooms: copy []^/loop 4 [append rooms make object! room] ; 4 rooms^/^/rooms/1/name: "kitchen"^/rooms/2/name: "dinerroom"^/rooms/3/name: "studyroom"^/rooms/4/name: "salon"^/repeat i 4 [^/^-set to-word rooms/(i)/name i^/]^/^/rooms/(kitchen)/exits/(south): salon^/probe rooms/(kitchen)/exits/(south)^/```^/^/I like to use:^/^/rooms/kitchen/exits/south: salon^/*** Script Error: path rooms/kitchen/exits/south: ^/^-is not valid for none! type^/*** Where: set-path^/^/Is this possible?}
    sent: "2017-05-25T21:31:29.656Z"
    editedAt: "2017-05-25T21:36:56.200Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "59274c7a5e34568d5e8fb7e5"
    text: {Not sure. I too have ran into a few issues where interpret worked but compiling didn't. }
    sent: "2017-05-25T21:28:26.715Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59274c16fcbbe1891c460c38"
    text: {Why doesn't the first example works?^/```^/view [^/^-style s: text 100x35 font-size 20^/^-s "line 1" return^/^-s "line 2"^/]^/```^/```^/view [^/^-style s: text font-size 20^/^-s 100x35 "line 1" return^/^-s 100x35 "line 2"^/]^/```}
    sent: "2017-05-25T21:26:46.019Z"
    editedAt: "2017-05-25T21:27:41.484Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "59274bb09f4f4ab05bff5f6d"
    text: {Howto compile ask?^/While compiling i get this error:^/*** Compilation Error: undefined symbol: red/unicode/decode-utf8-char}
    sent: "2017-05-25T21:25:04.698Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "592748ba5e34568d5e8fa8bb"
    text: {After moving around while pressing down and holding keys for about 10 seconds i get this error:^/*** Internal Error: stack overflow ^/But not while standing still.^/What could be the reason?^/```^/move-it: func [^/][^/^-frame1: (mod frame1 2) + 1^-^/^-im/image: imgs/(frame) ^/]^/^/img: ^-load http://games.freebasic.net/BASICGaming/Issue2/HowToLesson1/SPRITES24bit.bmp^/imgs: ^-copy []^/frame: ^-frame1: 1^/^/repeat i (img/size/x * img/size/y) [^/^-if img/(i) = 255.0.255 [img/(i): 240.240.240]^/]^/repeat x 12 [^/^-xy: as-pair (x - 1) * 48 + 1 0^/^-append imgs copy/part at img xy 48x40^/]^/^/view/options compose [^/^-base 800x600 transparent^/^-at 380x240^/^-im: image 100x100^/^-at 10x10^/^-text font-size 20 {Press left, up, down or right key and hold them down}^/^-do [im/image: imgs/1]^/][^/^-actors: object [^/^-^-on-key: func [^/^-^-^-key event^/^-^-] [^/^-^-^-if event/key = 'down [^/^-^-^-^-im/offset/y: im/offset/y + 4^/^-^-^-^-frame: 0 + frame1^-move-it^/^-^-^-]^/^-^-^-if event/key = 'up [^/^-^-^-^-im/offset/y: im/offset/y - 4^/^-^-^-^-frame: 2 + frame1^-move-it^/^-^-^-]^/^-^-^-if event/key = 'left [^/^-^-^-^-im/offset/x: im/offset/x - 4^/^-^-^-^-frame: 4 + frame1^-move-it^/^-^-^-]^/^-^-^-if event/key = 'right [^/^-^-^-^-im/offset/x: im/offset + 4^/^-^-^-^-frame: 6 + frame1^-move-it^/^-^-^-]^/^-^-]  ^/^-]  ^/]^/```}
    sent: "2017-05-25T21:12:26.760Z"
    editedAt: "2017-05-25T21:16:12.923Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "592701ff631b8e4e61117748"
    text: {@greggirwin thanks. Showing R/S source is definitely not the same as showing Red code, but I think it can be useful. Having a tool for exploring R/S code would be nice. And also, one day, when we get JIT compilation and `native!`s could be rewritten on the fly, people would demand it ;)}
    sent: "2017-05-25T16:10:39.130Z"
    editedAt: "2017-05-25T16:10:52.526Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926fb70c4d73f445ae2dea8"
    text: {I really liked @rebolek's example. It won't be used or useful in the same way that mezz source is, where you can see exactly what it is, and even copy and hack it. My first feeling was that it's a nice, very small, example of how Red can view the world as data. And useful in a different way. It could provide a prompt to browse to the github source (easier exploration), or someone could write a tool that lets users config where there local copy of the source is and open it in an editor.}
    sent: "2017-05-25T15:42:40.689Z"
    editedAt: "2017-05-25T15:43:23.521Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5926c042c4d73f445ae1cc2b"
    text: {You're probably right, but having some tools for inspecting R/S code might be useful even if not part of `source`. I will think about that more.}
    sent: "2017-05-25T11:30:10.077Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926bf07fa63ba2f767baaa5"
    text: {Given that many natives rely on other R/S functions and internal Red runtime API, I doubt extracting just the source from %natives.reds will be of any help to anyone.}
    sent: "2017-05-25T11:24:55.824Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5926be1400efc2bb3ea3048f"
    text: {Actions are different beast, but getting source for natives is pretty trivial and some people are interested in it. I am not pushing for it, the source is easy to find, but it may be useful.}
    sent: "2017-05-25T11:20:52.417Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926bd93fcbbe1891c437b93"
    text: {The connection for the actions is even more complicated: it passes via a table of action vs. type of first operand, and the implementation is therrefore split over all the (applicable) types!}
    sent: "2017-05-25T11:18:43.092Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5926bd132b926f8a678fbc74"
    text: {Mind you, there are *two*  sources: `%environment/natives.red`contains the specs in Red, and `%runtime/natives.reds` contains the Red/System code, with totally different specs. The connection between the two is deeply buried in the compiler and the interpreter.}
    sent: "2017-05-25T11:16:35.563Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5926b60400efc2bb3ea2e2aa"
    text: "It won't, I know."
    sent: "2017-05-25T10:46:28.688Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926b5f15e34568d5e8d0837"
    text: {Also count in, that R/S code often uses macros and defines and so the code would not look that nice as in the source file.}
    sent: "2017-05-25T10:46:09.815Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5926b5e7eec422e415e9a4c9"
    text: {Or you can parse the page and display  just the source for asked native.}
    sent: "2017-05-25T10:45:59.558Z"
    editedAt: "2017-05-25T10:46:09.394Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926b5b1f3001cd342594b8d"
    text: {Than you can just display url https://github.com/red/red/blob/master/runtime/natives.reds}
    sent: "2017-05-25T10:45:05.666Z"
    editedAt: "2017-05-25T10:45:14.275Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5926b591f3001cd342594b30"
    text: {Well, some people are asking for it (not in `help`, but in `source`, sorry).}
    sent: "2017-05-25T10:44:33.606Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926b542cb83ba6a41f9b578"
    text: "It does not make sense anyway."
    sent: "2017-05-25T10:43:14.113Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5926b51d631b8e4e61101203"
    text: "@Oldes with proper warning?"
    sent: "2017-05-25T10:42:37.193Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926b4a700efc2bb3ea2dd4a"
    text: {@rebolek showing Red/System source does not make sense. It would just confuse, as people would expect that they can modify it.}
    sent: "2017-05-25T10:40:39.684Z"
    editedAt: "2017-05-25T10:41:18.710Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5926b47df3001cd3425946e3"
    text: {@greggirwin what do you think about showing Red/System source for natives in help?}
    sent: "2017-05-25T10:39:57.163Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926b436cb83ba6a41f9b24d"
    text: {@greggirwin  I don't like adding `/all` or `/deep` or anything like that. Better to let it how it is.. .or add internal setting the same way like you can customize dividers.}
    sent: "2017-05-25T10:38:46.224Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59268b2e631b8e4e610f64fa"
    text: {but if /deep is selected I will let padded output and | symbol}
    sent: "2017-05-25T07:43:42.465Z"
    editedAt: "2017-05-25T07:45:01.632Z"
    v: 3
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "592687e500efc2bb3ea21d77"
    text: "+1 on @greggirwin I'm on let people decide"
    sent: "2017-05-25T07:29:41.789Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "59265d33eec422e415e847d1"
    text: "I am all for removing `|`, it just confuses me."
    sent: "2017-05-25T04:27:31.188Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926022f631b8e4e610d7d70"
    text: {Also, now that we have padded output, what do people think of removing `|` between columns?}
    sent: "2017-05-24T21:59:11.201Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592601ddf3001cd342569ccf"
    text: {`_on-change*` and `_on-deep-change*` are specially checked symbols in objects right now, so it's not a convention.}
    sent: "2017-05-24T21:57:49.377Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5926005ffa63ba2f7678cffa"
    text: {We could add `/all` or `/deep` options. IIRC, @Oldes had an option in his `help` code to suppress `none` values. For something like `parent`, how can it know that's a special value that should be shown, and (@rebolek) how does it know what is a special "internal" value? Is it just based on the naming convention? And does that convention hold everywhere?}
    sent: "2017-05-24T21:51:27.898Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592448c1f3001cd3424e6bdd"
    text: {```red^/>> ? atest^/     type            | word!        | window^/     size            | pair!        | 80x52^/     pane            | block!       | length: 1  [make object! [type...^/     parent          | none!        | none^/```}
    sent: "2017-05-23T14:35:45.031Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "592448b792217cca58a624da"
    text: "Ideal *VIEW* quickstart:"
    sent: "2017-05-23T14:35:35.113Z"
    editedAt: "2017-05-23T14:41:46.207Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "592447fd2b926f8a6784b7fb"
    text: {So hiding `none!`, `logic!` and `function!` would have been really helpful. But then, what about discover-ability? `parent` is just as useful}
    sent: "2017-05-23T14:32:29.622Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592447575e34568d5e827bf9"
    text: {Maybe `type`, `size` and `pane` is just enough to get started with VID}
    sent: "2017-05-23T14:29:43.829Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592446f792217cca58a61d7f"
    text: {```red^/>> ? atest^/     type            | word!        | window^/     size            | pair!        | 80x52^/     ; enable?         | logic!       | true ^/     ; visible?        | logic!       | true^/     pane            | block!       | length: 1  [make object! [type...^/     ; on-change*      | function!    | [word old new /local srs same-...^/     ; on-deep-change* | function!    | [owner word target action new ...^/```}
    sent: "2017-05-23T14:28:07.473Z"
    editedAt: "2017-05-23T14:28:56.496Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5924469600efc2bb3e97ecb1"
    text: {In this particular case, what I'd have wanted ideally would have been:}
    sent: "2017-05-23T14:26:30.851Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59244657f3001cd3424e5e5d"
    text: {It's mostly a lot of `none!` values printed. Just 2 functions}
    sent: "2017-05-23T14:25:27.525Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5924460f0a783b6c0ac8c02f"
    text: {An example of what I was overwhelmed by:^/```red^/atest: layout [button "hi" [? atest]]^/? atest^/```}
    sent: "2017-05-23T14:24:15.258Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592445819f4f4ab05bf20601"
    text: {I don't think it would be much of a problem since it shows the *type*.^/When I was new, I was overwhelmed by the amount of stuff that got printed on `help` on objects. It didn't matter what it printed. So, only would be helpful for newcomers if that is reduced.^/Not printing nested objects helps I think}
    sent: "2017-05-23T14:21:53.208Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "592307eb5e34568d5e7d39b0"
    text: "May be we could add a refinement like `help/all`"
    sent: "2017-05-22T15:46:51.560Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59230554eec422e415d9d128"
    text: {I like the idea that it is showing it. It can help people to dive deeper.}
    sent: "2017-05-22T15:35:48.965Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "592304982b926f8a677f01aa"
    text: {For newcomers, probably not, for experienced redders, probably yes. ;-) I would be fine if they were hidden by `help`. I let @greggirwin judge when he'll be back.}
    sent: "2017-05-22T15:32:40.420Z"
    editedAt: "2017-05-22T15:33:31.996Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5922fce592217cca58a05b1e"
    text: {`Help` is showing internal `object`'s methods... is it ok?^/```^/>> help system/options/float^/     pretty?    | logic!       | false^/     full?      | logic!       | false^/     on-change* | function!    | [word old new]^/^/>> probe system/options/float^/make object! [^/    pretty?: false^/    full?: false^/]^/```}
    sent: "2017-05-22T14:59:49.609Z"
    editedAt: "2017-05-22T15:00:31.119Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59223e1400efc2bb3e8f0f79"
    text: {@Rebol2Red It doesn't work anymore on Windows due to a regression introduced a few days ago.}
    sent: "2017-05-22T01:25:40.758Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "59221b6deec422e415d600c2"
    text: {Has anyone problems with displaying a text-box? ^/When using it i get a black base. Maybe it has something to do with [Direct2d] flag or maybe because i am using Windows 10?^/I am using this code:^/```^/ft: make font! [name: "Menlo" size: 12]^/txt-box: make text-box! [^/    text: "Hello aBc"^/    font: ft^/    size: 100x300^/    styles: [^/        1 5 255.0.0 bold italic^/        7 3 0.255.0 underline^/        10 3 backdrop 200.200.255 font-size 28 strike^/    ]^/]^/view [^/    b: base 300x300 do [b/flags: [Direct2D] b/draw: compose [text 60x100 (txt-box)]]^/    button "Info" [^/        txt-box/target: b^/        txt-box/layout^/        probe txt-box/offset? 3^/        probe txt-box/offset? 11^/        probe txt-box/index? 10x3^/        probe txt-box/line-height 5^/        probe txt-box/line-height 11^/        probe reduce [txt-box/height txt-box/width txt-box/line-count]^/    ]^/]^/```}
    sent: "2017-05-21T22:57:49.329Z"
    editedAt: "2017-05-21T23:00:02.145Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5921dd3b00efc2bb3e8db46e"
    text: "@x8x Thanks"
    sent: "2017-05-21T18:32:27.507Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5921d77a5dc6925a7a44a44e"
    text: {@Rebol2Red ^/```^/  word^/*** Script Error: word has no value^/*** Where: catch^/  unset? :word^/;   true^/  value? 'word^/;   false^/```}
    sent: "2017-05-21T18:07:54.863Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5921d652c4d73f445acc768c"
    text: {Howto test if a word is defined/exists?^/I can do it this way but i think there is a one word test for it somewhere.^/```^/defined-or-not: func [^/^-'word^/][^/^-either not error? try [o][true][false]^/]^/print defined-or-not o^/o: 2^/print defined-or-not o^/```^/While looking for a one word test with the command what i get lots of this output:^/Returns true if the value is a...^/Is there a way to see the whole description?}
    sent: "2017-05-21T18:02:58.545Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "59210ec45e34568d5e75e7f7"
    text: {@Travis-OBrien If your block is constructed already, just use `SET_RETURN(var)`, where `var` is a `red-block!` variable pointing to your block value.}
    sent: "2017-05-21T03:51:32.429Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59208e8400efc2bb3e894f2e"
    text: {I'm trying to return a `block!` from a `routine!`, how do I do that?}
    sent: "2017-05-20T18:44:20.454Z"
    v: 1
    author: "563fa17916b6c7089cb9f59e"
) #(
    id: "591f2bdd92217cca5892788b"
    text: {Never mind. Found solution:^/```^/>> parse "cab" [(cs_1: charset [#"a" #"b"] _1: [some cs_1]) thru [_1] end]^/== true^/```}
    sent: "2017-05-19T17:31:09.350Z"
    editedAt: "2017-05-19T17:32:17.295Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591f25980a783b6c0ab5a0cc"
    text: {Can you please explain, why does the expression in parens influence the evaluation of parse block as in the following:^/```^/>> parse "cab" [thru [(_1: [(cs_1: charset [#"a" #"b"]) some cs_1]) _1] end]^/== false^/>> parse "cab" [thru [some cs_1] end]^/== true^/>> parse "cab" [thru [_1] end]^/== false^/>> parse "cab" [thru [(_1: [some cs_1]) _1] end]^/== false^/>> parse "cab" [thru [_1] end]^/== true^/```}
    sent: "2017-05-19T17:04:24.072Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591ead7c83cb5db073485240"
    text: "@dockimbel OK, I will."
    sent: "2017-05-19T08:31:56.708Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591ead6883cb5db073485195"
    text: {@toomasv You should look mostly at PUSH/POP_BLOCK and PUSH/POP_RULE states.}
    sent: "2017-05-19T08:31:36.454Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ead2600efc2bb3e821bfc"
    text: {`point!` currently has no accessor defined, the only actions are `make`, `form` and `mold`. Though, you should be able to `load` the molded output, and extract the stored values that way, until the type gets completed.}
    sent: "2017-05-19T08:30:30.741Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591eace02b926f8a676ea9d1"
    text: { Thank you! I am right now reading the Parse code and trying to get the puzzle connected :)}
    sent: "2017-05-19T08:29:20.765Z"
    editedAt: "2017-05-19T08:30:39.988Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591eac825e34568d5e6d1194"
    text: {@toomasv You should have a look at Parse's source code for that. Basically, those are records of nested parsing rules, each record is 3 values. The second value (`point!`) is used to record 3 offsets, though those can depend on the rule type. The third value is either a block value is it's a block rule or an internal ID for other types of rules. I can't say much more without explaining in details Parse's internals, though, you should find all the related info pretty easily from Parse sources. Feel free to ask any question about it.}
    sent: "2017-05-19T08:27:46.153Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591eab6183cb5db073484700"
    text: {Yes, I looked in blog article, and made some tracing experiments. In blog article stack syntax is not explained. E.g. what is involved here:^/```^/stack: [none make point! [-1 0 2] [any [some #"a"] #"b"] make point! [0 -1 2] make point! [0 0 2] -1 none make point! [0 1 1] [[some #"a"] #"b"]]^/```}
    sent: "2017-05-19T08:22:57.596Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591eaafbf3001cd342388523"
    text: {@toomasv Have you looked into the Parse blog article for that already?}
    sent: "2017-05-19T08:21:15.965Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591eaaaf0a783b6c0ab37914"
    text: {OK, thanks!  @dockimbel Can you briefly explain parse/trace `stack` elements' syntax, please?}
    sent: "2017-05-19T08:19:59.581Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591eaa2500efc2bb3e820bec"
    text: {@toomasv `any` and `opt` always succeed, so having a wrapping loop depending on them is a sure way to loop infinitely. ;-)}
    sent: "2017-05-19T08:17:41.445Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591e94132b926f8a676e49fa"
    text: {Beware the *parse killer*: `parse "ab" [any [any #"a"] #"b"]`^/Same for `[some [any #"a"] #"b"]`^/Also with version `[some [opt #"a"] #"b"]`}
    sent: "2017-05-19T06:43:31.624Z"
    editedAt: "2017-05-19T06:48:12.471Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591bf5eb33e9ee771cb5a2ae"
    text: "So @greggirwin has left us for a week? :worried: "
    sent: "2017-05-17T07:04:11.646Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591b2a7592217cca58817937"
    text: {Very nice Toomas! Just glanced, and will review when I am back online.}
    sent: "2017-05-16T16:36:05.697Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591b14a433e9ee771cb1f8bd"
    text: {@dockimbel Thanks! It is a great way to learn string manipulation, parse and reactivity.}
    sent: "2017-05-16T15:03:00.931Z"
    editedAt: "2017-05-16T15:05:19.140Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591b10e7f3001cd342293ca6"
    text: {@toomasv Very interesting use of reactor and `is`! Looking forward to your final version and usage examples. }
    sent: "2017-05-16T14:47:03.459Z"
    editedAt: "2017-05-16T14:47:33.430Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b0173631b8e4e61dfcc3e"
    text: {:point_up: [May 13, 2017 10:03 PM](https://gitter.im/red/help?at=5917586c9f4f4ab05bbf2029) Just reporting progress with [regex](https://gist.github.com/toomasv/58040ccbbfb70150dee90ba0e27b16b8): got nested groups, made re-ctx reactive, added several charclasses and special characters, multiline and singleline refinements, word boundaries.}
    sent: "2017-05-16T13:41:07.582Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591af2f692217cca58804fb8"
    text: {it would be a great show case how Red can adopt techniques from other languages.}
    sent: "2017-05-16T12:39:18.771Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591af2d00a783b6c0aa34f16"
    text: {I actually waiting for somebody knowledgeable to implement typed dialect witch could find the types automatically and prove the code  }
    sent: "2017-05-16T12:38:40.959Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591af13bf3001cd3422888d6"
    text: {I think mine has to do with more functional approach, like lambdas in clojure or dot-free notation in Haskell, while Greg's more Rebol-like with blocks themselves}
    sent: "2017-05-16T12:31:55.694Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591af10c2b926f8a675eb2f7"
    text: "@geekyi interesting, thanks"
    sent: "2017-05-16T12:31:08.510Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591af0522b926f8a675eaed4"
    text: {ended up changing original body block, but yes, was looking for `set!`}
    sent: "2017-05-16T12:28:02.654Z"
    editedAt: "2017-05-16T12:28:09.863Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591af03f631b8e4e61df676f"
    text: {@dockimbel it may be actually, I wanted to store unique identifiers in `qf` example above}
    sent: "2017-05-16T12:27:43.995Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591aa502d1a7716a0acec5d0"
    text: {@maximvl What value do you store there for each key?  What I want to understand is if you're using `map!` as a replacement for a missing `set!` type.}
    sent: "2017-05-16T07:06:42.245Z"
    editedAt: "2017-05-16T07:07:27.724Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591aa3e400efc2bb3e7092a4"
    text: {@dockimbel ^/>Is it because you are taking advantage of the unicity of map keys?^/^/exactly}
    sent: "2017-05-16T07:01:56.152Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591aa2d692217cca587ecce7"
    text: {Can we emulate threads in red using `call`? Is it not recommended? }
    sent: "2017-05-16T06:57:26.150Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591a9dcaf3001cd34226f888"
    text: {@maximvl ^/> at least for now it seems like a pattern for me - collect things into map, create an object (context) from it and then bind block to this context^/^/Why not collect things into a block, which is the default container instead of a map? Is it because you are taking advantage of the unicity of map keys?}
    sent: "2017-05-16T06:35:54.656Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591a9d44631b8e4e61dddbec"
    text: {@maximvl ^/> how do I get keys or values from `hash`?^/^/Well, `hash!` is just a `block!` with fast lookups, so it's free-form, there is no enforced structure, in `hash!` every value is a key. It's up to the user how you want to use and structure a `hash!` series.}
    sent: "2017-05-16T06:33:40.409Z"
    editedAt: "2017-05-16T06:33:53.116Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591a4dd39f4f4ab05bca3754"
    text: "<hehe> I had forgotten about that."
    sent: "2017-05-16T00:54:43.068Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591a46490a783b6c0aa07c8f"
    text: {`place` is somewhat like an inverted `collect/keep`}
    sent: "2017-05-16T00:22:33.711Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591a456633e9ee771cae61b6"
    text: "Yours maybe more versatile tho"
    sent: "2017-05-16T00:18:46.573Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "591a452a9f4f4ab05bca1b17"
    text: {@maximvl related: https://gist.github.com/geekyi/844a15e506ce9c6b12a83e78df750295}
    sent: "2017-05-16T00:17:46.755Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591a22f3c4d73f445aadda59"
    text: "Thanks! :^^)"
    sent: "2017-05-15T21:51:47.344Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591a22e183cb5db07334c791"
    text: "@greggirwin ^^"
    sent: "2017-05-15T21:51:29.235Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a22da2b926f8a675b72fa"
    text: {https://gist.github.com/maximvl/d952c313a8f08cf011a9af965f7f3ec0}
    sent: "2017-05-15T21:51:22.255Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a223333e9ee771cadde25"
    text: {now one can use both `_` for next argument and `_N` for argument #N}
    sent: "2017-05-15T21:48:35.363Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a221cc4d73f445aadd679"
    text: {```^/>> f: qf [ reduce [ _ _ ] ]^/== func [_1 _2][reduce [_1 _2]]^/>> f 1 2^/== [1 2]^/>> f: qf [ reduce [ _3 _2 _1 ] ]^/== func [_1 _2 _3][reduce [_3 _2 _1]]^/>> f 1 2 3^/== [3 2 1]^/```^/^/}
    sent: "2017-05-15T21:48:12.152Z"
    editedAt: "2017-05-15T21:49:27.710Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1eea00efc2bb3e6ea28b"
    text: "But Dave's workaround is easy too."
    sent: "2017-05-15T21:34:34.371Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591a1e9192217cca587ce698"
    text: "Submit a wish ticket, if there isn't one already."
    sent: "2017-05-15T21:33:05.893Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591a1e8233e9ee771cadd072"
    text: {at least for now it seems like a pattern for me - collect things into map, create an object (context) from it and then bind block to this context}
    sent: "2017-05-15T21:32:50.368Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1e3400efc2bb3e6ea02c"
    text: "if there are non-word keys"
    sent: "2017-05-15T21:31:32.775Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1e2b9f4f4ab05bc985de"
    text: {for sure, but we can throw `invalid argument` as it happens with pairs and so on}
    sent: "2017-05-15T21:31:23.636Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1e0a8a05641b11867a2a"
    text: {Creating objects from maps depends on the map using words for all keys.}
    sent: "2017-05-15T21:30:50.715Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591a1de38a05641b1186791b"
    text: {yep, I want to add one thing so it would be on level with Clojure's `#(+ %1 %2)`}
    sent: "2017-05-15T21:30:11.183Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1d938a05641b118677f0"
    text: "You're going to post the magical `qf`, right? ;^^)"
    sent: "2017-05-15T21:28:51.988Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591a1d22f3001cd34225338e"
    text: {:point_up: [May 15, 2017 2:45 PM](https://gitter.im/red/help?at=591a1376f3001cd342250833)^/```^/>> a: [a a a]^/== [a a a]^/>> a/1: bind a/1 context [a: 1]^/== a^/>> reduce a^/== [1 [a a a] [a a a]]^/```}
    sent: "2017-05-15T21:26:58.843Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591a1ccc0a783b6c0a9fd912"
    text: {ah, `extract`, I would newer find it by myself :) thanks}
    sent: "2017-05-15T21:25:32.398Z"
    editedAt: "2017-05-15T21:25:40.467Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1ca5f3001cd34225310f"
    text: {:point_up: [May 15, 2017 2:11 PM](https://gitter.im/red/help?at=591a0b8900efc2bb3e6e4e33) ^/```^/== make hash! [a 1 b 2 c 3]^/>> extract h 2^/== make hash! [a b c]^/```}
    sent: "2017-05-15T21:24:53.131Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591a1c270a783b6c0a9fd62f"
    text: {:point_up: [May 15, 2017 2:01 PM](https://gitter.im/red/help?at=591a08fd2b926f8a675af744) `find/match` Maxim.}
    sent: "2017-05-15T21:22:47.199Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591a1b53d1a7716a0accbd00"
    text: ":D"
    sent: "2017-05-15T21:19:15.314Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1b512b926f8a675b4a35"
    text: {a quick "lambdas" shortcut:^/```^/f: qf [_ + _]^/probe f 1 2 ; => 3^/```}
    sent: "2017-05-15T21:19:13.614Z"
    editedAt: "2017-05-15T21:19:32.658Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a18679f4f4ab05bc96ddd"
    text: "@dander looks good, thanks :)"
    sent: "2017-05-15T21:06:47.257Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1851631b8e4e61dbfb7a"
    text: {@maximvl  how about^/```^/>> object to-block #(a: 5)^/== make object! [^/    a: 5^/]^/```}
    sent: "2017-05-15T21:06:25.887Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "591a161f92217cca587cbe27"
    text: "would be nice if any of these work ^^"
    sent: "2017-05-15T20:57:03.219Z"
    editedAt: "2017-05-15T20:57:19.817Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a16119f4f4ab05bc96388"
    text: {```^/>> object #(a: 5)^/*** Script Error: object does not allow map! for its spec argument^/*** Where: object^/>> make object! #(a: 5)^/*** Syntax Error: invalid construction spec: #(a: 5)^/*** Where: make^/>> to-object #(a: 5)^/*** Script Error: to-object has no value^/*** Where: catch^/```}
    sent: "2017-05-15T20:56:49.748Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a14859f4f4ab05bc9597f"
    text: "got confused because blocks are changed in-place"
    sent: "2017-05-15T20:50:13.243Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a147c9f4f4ab05bc95948"
    text: "right, it returns the binded word"
    sent: "2017-05-15T20:50:04.008Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a14130a783b6c0a9fb25c"
    text: {it is possible to create separate blocks, then combine words from them into one, but looks like very basic feature to me}
    sent: "2017-05-15T20:48:19.293Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a13ab2b926f8a675b2843"
    text: "I want: `[1 [a a a] [a a a]]`"
    sent: "2017-05-15T20:46:35.061Z"
    editedAt: "2017-05-15T20:46:57.529Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1393631b8e4e61dbe8dc"
    text: {```^/>> a: [a a a]^/== [a a a]^/>> bind a/1 context [a: 1]^/== a^/>> reduce a^/== [[a a a] [a a a] [a a a]]^/```^/}
    sent: "2017-05-15T20:46:11.425Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a1376f3001cd342250833"
    text: {is there any way to bind only one word in a block to context?}
    sent: "2017-05-15T20:45:42.276Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a0ba02b926f8a675b0332"
    text: "not `keys-of` nor `words-of` seem to work"
    sent: "2017-05-15T20:12:16.674Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a0b8900efc2bb3e6e4e33"
    text: "how do I get keys or values from `hash`?"
    sent: "2017-05-15T20:11:53.410Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a09070a783b6c0a9f7a12"
    text: "like `starts-with` or `prefix?`"
    sent: "2017-05-15T20:01:11.275Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591a08fd2b926f8a675af744"
    text: {do we have a function which checks if one string starts with another one?}
    sent: "2017-05-15T20:01:01.831Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5919efdbd1a7716a0acbe162"
    text: {Paste `(100,200)` into the console and you should see why you got the result you did.}
    sent: "2017-05-15T18:13:47.688Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919efb833e9ee771cacf1ba"
    text: "this is going to be interesting"
    sent: "2017-05-15T18:13:12.950Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919efad2b926f8a675a793f"
    text: "okay"
    sent: "2017-05-15T18:13:01.593Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919efacd1a7716a0acbe02c"
    text: "Ah"
    sent: "2017-05-15T18:13:00.028Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919efa7f3001cd3422458bc"
    text: "`to pair! [4 5]`"
    sent: "2017-05-15T18:12:55.250Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919ef9df3001cd3422458a2"
    text: {```^/>> make pair! (100,200)^/== 100x100^/```^/}
    sent: "2017-05-15T18:12:45.255Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919ef870a783b6c0a9ef6c8"
    text: {Is there a way to make a pair with more than one value?}
    sent: "2017-05-15T18:12:23.800Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919ee98d1a7716a0acbdad8"
    text: "thank you"
    sent: "2017-05-15T18:08:24.120Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919ee92d1a7716a0acbdaa4"
    text: "okay"
    sent: "2017-05-15T18:08:18.959Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919ed448a05641b11858ce5"
    text: {while new assignment will assign a new one, so if you have other parts of code using old reference they will not affect `face`}
    sent: "2017-05-15T18:02:44.197Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5919ed4233e9ee771cace370"
    text: {It will be very tricky Petr, but Alexander is going to learn a *lot* by trying these things.}
    sent: "2017-05-15T18:02:42.803Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919ed1c92217cca587bf915"
    text: {keep in mind references, so `clear` will keep reference to the same block, will just remove everything from it}
    sent: "2017-05-15T18:02:04.784Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5919ecf283cb5db07333c63a"
    text: "Thank you guys!"
    sent: "2017-05-15T18:01:22.687Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919ece600efc2bb3e6db016"
    text: "@AlexanderBaggett `clear face/pane` should work"
    sent: "2017-05-15T18:01:10.749Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5919ece69f4f4ab05bc899f8"
    text: {wouldn't such aproach to the rich-text mean you can't have caret there and easily hilite text between those areas?}
    sent: "2017-05-15T18:01:10.111Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5919ece400efc2bb3e6db00c"
    text: "You can also use `clear` to empty a series."
    sent: "2017-05-15T18:01:08.252Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5919eca883cb5db07333c4d2"
    text: "Opposite of `append` might be `take/last`"
    sent: "2017-05-15T18:00:08.965Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919eb070a783b6c0a9eda11"
    text: {What I am thinking is just giving these labels a dummy container and then emptying it and re-adding them each time.}
    sent: "2017-05-15T17:53:11.381Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919eabb33e9ee771cacd650"
    text: {Okay thank you. I guess it doesn't quite work the way I was thinking.  Is there an easy way to empty the pane: value of a face?  Something like `face/pane: []`  would that work?}
    sent: "2017-05-15T17:51:55.145Z"
    editedAt: "2017-05-15T17:54:25.406Z"
    v: 3
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919ea4d83cb5db07333b835"
    text: "`remove`"
    sent: "2017-05-15T17:50:05.344Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919ea3c8a05641b11857a52"
    text: "What is the opposite of `append`?"
    sent: "2017-05-15T17:49:48.620Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919ea0a9f4f4ab05bc88c0a"
    text: {Not the easiest thing to do, I guess, because you are basically making your own text renderer and then you don't need the underlying area.}
    sent: "2017-05-15T17:48:58.759Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919e9d42b926f8a675a58cf"
    text: "Ok, that can be done."
    sent: "2017-05-15T17:48:04.011Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919e99083cb5db07333b565"
    text: {I was thinking about using overlapping text with the area}
    sent: "2017-05-15T17:46:56.046Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919e97f0a783b6c0a9ed372"
    text: "Well"
    sent: "2017-05-15T17:46:39.550Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919e97ed1a7716a0acbc028"
    text: "hmm"
    sent: "2017-05-15T17:46:38.047Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919e9778a05641b118576c4"
    text: "There are different ways to do it."
    sent: "2017-05-15T17:46:31.980Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919e93000efc2bb3e6d9e9a"
    text: "Great, I want to see it :)"
    sent: "2017-05-15T17:45:20.741Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919e8fd33e9ee771cacce84"
    text: {Well, I may have just found a way to do some syntax highlighting after all.}
    sent: "2017-05-15T17:44:29.822Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919e8c133e9ee771caccc73"
    text: {Also, `view [base 100x100 255.0.0 at 50x50 base 100x100 0.0.255.127]`}
    sent: "2017-05-15T17:43:28.969Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919e89f0a783b6c0a9ecd2b"
    text: "That is the ticket :smile: "
    sent: "2017-05-15T17:42:55.470Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919e8782b926f8a675a503f"
    text: {`view [base 100x100 red at 50x50 base 100x100 blue]`}
    sent: "2017-05-15T17:42:16.717Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919e85383cb5db07333ad87"
    text: "Of course."
    sent: "2017-05-15T17:41:39.828Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919e83e631b8e4e61db12bd"
    text: "Is it possible to make faces that overlap?"
    sent: "2017-05-15T17:41:18.333Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919e7732b926f8a675a49b8"
    text: {@AlexanderBaggett No problem, we all demand something I guess :)}
    sent: "2017-05-15T17:37:55.156Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919e74e631b8e4e61db0a26"
    text: {I can't say that I am great at Red, but I would like to contribute and help make sure this language is successful. }
    sent: "2017-05-15T17:37:18.019Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919e6bad1a7716a0acbaefd"
    text: "Everyone, I apologize for my demanding tone. "
    sent: "2017-05-15T17:34:50.893Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919dd739f4f4ab05bc84610"
    text: {It is true that there is no file called `%area.reds`...}
    sent: "2017-05-15T16:55:15.224Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5919dd6b83cb5db0733373db"
    text: {R2 implemented its own GUI system, which Red could do someday as well.}
    sent: "2017-05-15T16:55:07.898Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919dd499f4f4ab05bc8456f"
    text: {Red uses native widgets, so it will vary by OS. e.g., %classes.reds is where some handlers are set up, and you can see how different they are for Windows and OSX.}
    sent: "2017-05-15T16:54:33.463Z"
    editedAt: "2017-05-15T16:55:38.655Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5919dd098a05641b118536c5"
    text: "What more could you want?"
    sent: "2017-05-15T16:53:29.598Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5919dcdb92217cca587b9d40"
    text: {The implementation code is stored *per OS* in `modules/view/backends`.}
    sent: "2017-05-15T16:52:43.540Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5919d2688a05641b11850006"
    text: {What I am looking for is the code where `area` and the other face types are implemented.}
    sent: "2017-05-15T16:08:08.070Z"
    editedAt: "2017-05-15T16:09:06.045Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919d251c4d73f445aac34c6"
    text: {https://github.com/red/red/blob/master/modules/view/backends/platform.red}
    sent: "2017-05-15T16:07:45.829Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919d248d1a7716a0acb3f1f"
    text: "This has a reference to it, but no definition."
    sent: "2017-05-15T16:07:36.187Z"
    editedAt: "2017-05-15T16:08:48.416Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919d1978a05641b1184fbe8"
    text: {Maybe you are looking for this? https://github.com/red/red/tree/master/modules/view/backends/windows}
    sent: "2017-05-15T16:04:39.989Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919d0c500efc2bb3e6d20cb"
    text: {https://github.com/red/red/blob/master/modules/view/view.red}
    sent: "2017-05-15T16:01:09.873Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919d0c4d1a7716a0acb3715"
    text: "Here?"
    sent: "2017-05-15T16:01:08.341Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919d07ed1a7716a0acb357e"
    text: "Okay, where are the face types defined in github?"
    sent: "2017-05-15T15:59:58.508Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919d070631b8e4e61da945b"
    text: "hmmm"
    sent: "2017-05-15T15:59:44.814Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cdcd0a783b6c0a9e44a9"
    text: {There are no functions for caret manipulation, but you could implement it yourself.}
    sent: "2017-05-15T15:48:29.704Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919ccc98a05641b1184e358"
    text: {@AlexanderBaggett that's because it is work in progress, but there is separate documentation for it - https://github.com/qtxie/red/wiki/Text-box!-Usage}
    sent: "2017-05-15T15:44:09.436Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919cc9d9f4f4ab05bc7ee0b"
    text: {@rebolek , I didn't see `text-box` in the documentation  https://doc.red-lang.org/en/view.html}
    sent: "2017-05-15T15:43:25.700Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cbe5631b8e4e61da7953"
    text: {Well, you should take a look at `text-box!`, it is the easiest way to do things like this.}
    sent: "2017-05-15T15:40:21.690Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919cbb992217cca587b3841"
    text: {otherwise I don't have a way of adding in this feature.}
    sent: "2017-05-15T15:39:37.121Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cb9700efc2bb3e6d083a"
    text: {It would be nice if I could easily get the currently selected text in a face.}
    sent: "2017-05-15T15:39:03.923Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cb942b926f8a6759b040"
    text: "I see..."
    sent: "2017-05-15T15:39:00.339Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919cb8a8a05641b1184da0f"
    text: "Trying to comment out selected text."
    sent: "2017-05-15T15:38:50.403Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cb7f631b8e4e61da7763"
    text: "Working on an IDE for red in Red."
    sent: "2017-05-15T15:38:39.604Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cb6cc4d73f445aac0f82"
    text: "@AlexanderBaggett what are you trying to do?"
    sent: "2017-05-15T15:38:20.967Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919cb0dc4d73f445aac0c07"
    text: "except that it isn't editable"
    sent: "2017-05-15T15:36:45.684Z"
    editedAt: "2017-05-15T15:37:17.240Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cb0783cb5db073330b4e"
    text: "hmm"
    sent: "2017-05-15T15:36:39.503Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cad9d1a7716a0acb1834"
    text: "https://doc.red-lang.org/en/view.html#_text_list"
    sent: "2017-05-15T15:35:53.401Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cad0f3001cd342238f14"
    text: "it looks like text-list has something I can use"
    sent: "2017-05-15T15:35:44.493Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919cac633e9ee771cac2308"
    text: "hmmm"
    sent: "2017-05-15T15:35:34.748Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919ca16631b8e4e61da6f4e"
    text: "That doesn't mean it won't be implemented."
    sent: "2017-05-15T15:32:38.301Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "5919c9db00efc2bb3e6cfd32"
    text: {You can do it with `text-box!` that provides required support functions, or implement in yourself with Draw. But for standard faces, it is missing yet.}
    sent: "2017-05-15T15:31:39.403Z"
    editedAt: "2017-05-15T15:31:49.062Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919c9bfc4d73f445aac02f0"
    text: {http://www.rebol.com/docs/view-face-content.html#section-8}
    sent: "2017-05-15T15:31:11.128Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919c9532b926f8a6759a5a8"
    text: "There was a way to do it in rebol."
    sent: "2017-05-15T15:29:23.680Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5919c84a9f4f4ab05bc7d6cf"
    text: {@AlexanderBaggett AFAIK you can't yet in standard face.}
    sent: "2017-05-15T15:24:58.778Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5919c8200a783b6c0a9e26ff"
    text: {How can you get the currently highlighted text of a face?}
    sent: "2017-05-15T15:24:16.937Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5917de3983cb5db0732be6c5"
    text: {@greggirwin  @meijeru Thanks for references! I'll study these examples.}
    sent: "2017-05-14T04:34:01.262Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5917d1df631b8e4e61d3205e"
    text: {@AlexanderBaggett Not from within, though you can wrap your VID code inside an object and define local words.}
    sent: "2017-05-14T03:41:19.242Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5917c58c9f4f4ab05bc07abb"
    text: {Is there a way to do locally scoped variables in Vid?}
    sent: "2017-05-14T02:48:44.466Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5917c37092217cca5873af7c"
    text: "http://www.rebol.com/docs/draw.html#section-15"
    sent: "2017-05-14T02:39:44.910Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5917c3692b926f8a67521888"
    text: "I found some old rebol documentation about it"
    sent: "2017-05-14T02:39:37.016Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5917bf8192217cca5873a314"
    text: {does anyone have an example of how to draw text using the `draw` property of a `face!` object?}
    sent: "2017-05-14T02:22:57.944Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591789110a783b6c0a95e87e"
    text: {I did a regexp to parse one too. See [here](https://gist.github.com/meijeru/badcc5184f312aedf51a010b4718a148)}
    sent: "2017-05-13T22:30:41.434Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591776a48a05641b117c874d"
    text: {@toomasv, I thought I had a Red port of http://www.rebol.org/view-script.r?script=use-rule.r, but can't find it right now. Maybe that link will help though.}
    sent: "2017-05-13T21:12:04.505Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5917653400efc2bb3e644779"
    text: {@9214 Thanks. Poor man does poor regex.^/ @geekyi What is *reference standard*?^/ @greggirwin for some reason I can't make recursive calls to my main workhorse `build`. To work around this problem I use a copy of this function ``build2`, which allowed to implement groups, but only on one level. I think I have somewhere missed some elementary thing, but I just cannot see it.^/One error messge, I keep getting, is this:^/```^/>> regex/withspec "xabcdcdaby" "x(ab(cd)+(a|b)+)y"^/*** Script Error: PARSE - get-word refers to a different series! :t^/*** Where: parse^/```^/I see the source of the problem, it is here:^/```^/^-group: ^-[^/^-^-#"(" s:  keep (^/^-^-^-t: find/tail s c: matching-paren s ^/^-^-^-copy build copy c^/^-^-) :t skip                                        ;   :t causes this problem, and I see why, but I don't see how to correct this^/^-]^/```^/When recursively calling `build`, string `s`gets changed, and `t`is out of sync. }
    sent: "2017-05-13T19:57:40.437Z"
    editedAt: "2017-05-13T20:04:42.612Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59175ff0c4d73f445aa33f2f"
    text: {Very cool Toomas! What specific problem are you having with nesting?}
    sent: "2017-05-13T19:35:12.724Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59175f769d90dc7a1c76b4fb"
    text: "@toomasv what is your reference standard? "
    sent: "2017-05-13T19:33:10.727Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59175c99631b8e4e61d1ad02"
    text: {@toomasv wow, I'm really impressed with all the stuff you're doing (first type-tree, then nice `ls` and now ~~poor man's parse~~ regexes!}
    sent: "2017-05-13T19:20:57.885Z"
    editedAt: "2017-05-13T19:22:00.737Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5917586c9f4f4ab05bbf2029"
    text: {For learning I wrote a basic [regex to parse translator](https://gist.github.com/toomasv/58040ccbbfb70150dee90ba0e27b16b8). It has a basic functionality: start and end binding, dot, wildcards, some characterclasses, one level groups with alternatives. It translates regex to parse spec and checks the subject using parse with this spec. It has three refinements--`/case`, `/withspec` (shows generated spec with result of parsing) and `/speconly` (prints generated spec only). No backreferences and changing. Wildcards are possesive as in `parse`. I was stuck in nesting groups. Could use some help if anyone is interested. Some examples:^/```^/>> regex "abracadabra" "^^^^ab(.a)+bra$"^/== true^/>> regex/withspec "Red is beautiful" "^^^^Red.{4}be"^/[#"R" #"e" #"d" 4 anychar #"b" #"e" to end]^/== true^/```}
    sent: "2017-05-13T19:03:08.057Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59174667631b8e4e61d15f6b"
    text: {:point_up: [May 12, 2017 11:21 AM](https://gitter.im/red/help?at=591570930a783b6c0a8d9dd4)  @xqlab I finally found the solution to mimic correctly lazy parse repeaters:^/```^/alpha: charset [#"a" - #"z" #"A" - #"Z"]^/ending: "m" ; or ["m" end]^/>> parse "abcm" ["abc" copy _1 to ending if (parse _1 [any alpha]) ending]^/== true^/>> parse "abcxyzm" ["abc" copy _1 to ending if (parse _1 [any alpha]) ending]^/== true^/>> parse "abc123m" ["abc" copy _1 to ending if (parse _1 [any alpha]) ending]^/== false^/```^/}
    sent: "2017-05-13T17:46:15.055Z"
    editedAt: "2017-05-13T17:48:29.473Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5916688a92217cca586f09bf"
    text: {I don't mean to discourage you in any way. A useful tool doesn't have to be a full-blown IDE. Identify the things that provide the most value to you, that make *you* more efficient, and start there. For instance, http://www.rebol.org/view-script.r?script=enlist.r is something I did long ago, which doesn't do much, but helped me learn and provided some value.}
    sent: "2017-05-13T01:59:38.965Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591645782b926f8a674cf9fd"
    text: {@AlexanderBaggett, while it can be good to start from a clean slate sometimes, without looking at other designs that may taint your thoughts, in this case, researching other IDEs may be a good thing, if you want to see what's involved in building a tool of this scope. As an exercise to learn Red, I think you will either need to keep it very simple or be prepared to do a *lot* of work and research. }
    sent: "2017-05-12T23:30:00.250Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591643b8d1a7716a0abe584f"
    text: {I setup issues for it so people can know what my goals are.}
    sent: "2017-05-12T23:22:32.687Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591643a0c4d73f445a9f74af"
    text: "https://github.com/AlexanderBaggett/RedIDE"
    sent: "2017-05-12T23:22:08.888Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5916439700efc2bb3e605b46"
    text: {Anyway, the project is up in GitHub. You can check it out.}
    sent: "2017-05-12T23:21:59.680Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163f7f00efc2bb3e604ec0"
    text: "Easier than syntax highlighting, certainly."
    sent: "2017-05-12T23:04:31.438Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163f4ec4d73f445a9f65f0"
    text: "That would actually be fairly easy I think."
    sent: "2017-05-12T23:03:42.053Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163f3192217cca586e8b41"
    text: "Would also need an un comment button"
    sent: "2017-05-12T23:03:13.237Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163f1cd1a7716a0abe4916"
    text: {Also thinking about being able to comment out code by selecting it and click a button}
    sent: "2017-05-12T23:02:52.411Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163e6c00efc2bb3e604bb4"
    text: ";)"
    sent: "2017-05-12T22:59:56.460Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163e5a9d90dc7a1c72cce5"
    text: "It was until I longed for features  LOL"
    sent: "2017-05-12T22:59:38.157Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163df5d1a7716a0abe455d"
    text: "IDE is not simple :)"
    sent: "2017-05-12T22:57:57.514Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163de62b926f8a674cded7"
    text: "I just am writing a simple IDE"
    sent: "2017-05-12T22:57:42.674Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163dd98a05641b11786100"
    text: ":("
    sent: "2017-05-12T22:57:29.259Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163da500efc2bb3e604981"
    text: {Well, it is actually very interesting area. Of course, you need to write a lexer first that will check types.}
    sent: "2017-05-12T22:56:37.108Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163d6392217cca586e8472"
    text: {You also need to check if you won't affect following lines by opening a string for example (you are safe with previous lines though).}
    sent: "2017-05-12T22:55:31.038Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163d38d1a7716a0abe4322"
    text: {Yes, you need to add some caching mechanism. That'đ the price you have to pay for faster update.}
    sent: "2017-05-12T22:54:48.542Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163d269d90dc7a1c72c9b7"
    text: "or try to do an on-change on  a per-line basis."
    sent: "2017-05-12T22:54:30.552Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163d16c4d73f445a9f5f4b"
    text: {I guess then I would have to keep track of which lines have been colored already.}
    sent: "2017-05-12T22:54:14.159Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163cf5c4d73f445a9f5ebf"
    text: {so you are saying split the text of the face into lines based on newline?}
    sent: "2017-05-12T22:53:41.971Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163cde9d90dc7a1c72c881"
    text: "Rest can be cached."
    sent: "2017-05-12T22:53:18.672Z"
    editedAt: "2017-05-12T22:53:30.443Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163cd42b926f8a674cdb2a"
    text: "What you want to update is just current line"
    sent: "2017-05-12T22:53:08.555Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163ccd631b8e4e61cdd56e"
    text: "hmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm :sparkles: "
    sent: "2017-05-12T22:53:01.847Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163cc98a05641b11785d96"
    text: "Also, you do not have to go thru whole source."
    sent: "2017-05-12T22:52:57.026Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163cbd9f4f4ab05bbb675f"
    text: "hmmmmm"
    sent: "2017-05-12T22:52:45.703Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163cb40a783b6c0a916915"
    text: "Believe me, people do not type THAT fast :)"
    sent: "2017-05-12T22:52:36.886Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163cae0a783b6c0a9168fa"
    text: {when it is a large code base, on-change is more useful.}
    sent: "2017-05-12T22:52:30.295Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163c988a05641b11785d48"
    text: "on the other hand"
    sent: "2017-05-12T22:52:08.258Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163c9433e9ee771c9f603a"
    text: "hmm"
    sent: "2017-05-12T22:52:04.975Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163c938a05641b11785d41"
    text: "well"
    sent: "2017-05-12T22:52:03.527Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163c8f92217cca586e828c"
    text: {But some people type very fast, I don't want to be going through everything they wrote every time they type a new letter.  Maybe Red is fast enough, but I don't think its a good practice.}
    sent: "2017-05-12T22:51:59.948Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "59163c5ac4d73f445a9f5c5c"
    text: "Yes, or on-key"
    sent: "2017-05-12T22:51:06.285Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163c3cd1a7716a0abe3f9a"
    text: "I could use on-change"
    sent: "2017-05-12T22:50:36.646Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163c310a783b6c0a91674c"
    text: "I see, but you don't need timer for that."
    sent: "2017-05-12T22:50:25.925Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163c119f4f4ab05bbb6541"
    text: {So like when you use Visual studio code or something if you type in a `function!` or` native!` or a `datatype!` it recognizes the word and gives it a color.}
    sent: "2017-05-12T22:49:53.067Z"
    editedAt: "2017-05-12T22:50:19.566Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163bb333e9ee771c9f5c8a"
    text: "for what?"
    sent: "2017-05-12T22:48:19.647Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163ba99d90dc7a1c72c463"
    text: "I don't I just need the timer"
    sent: "2017-05-12T22:48:09.873Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163ba19f4f4ab05bbb6452"
    text: "OK, but why you need animation for that?"
    sent: "2017-05-12T22:48:01.943Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163b7592217cca586e7d81"
    text: {But I am using it for a syntax highlighting engine for an IDE}
    sent: "2017-05-12T22:47:17.474Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163b64631b8e4e61cdd22c"
    text: "Yeah"
    sent: "2017-05-12T22:47:00.237Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163b5200efc2bb3e604127"
    text: {As you can see, it is pretty easy to animate something in VID.}
    sent: "2017-05-12T22:46:42.279Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163b3f9d90dc7a1c72c244"
    text: "You're welcome."
    sent: "2017-05-12T22:46:23.275Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163b1ed1a7716a0abe3c05"
    text: "Thank you for showing me that."
    sent: "2017-05-12T22:45:50.869Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163ab68a05641b11785630"
    text: "yes, `30` and `0:0:0.0333` are equivalent"
    sent: "2017-05-12T22:44:06.063Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163ab2c4d73f445a9f5665"
    text: "I get it  :)"
    sent: "2017-05-12T22:44:02.743Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163aa900efc2bb3e603f07"
    text: {A large `time!` value means slower but if you pass in a large `interger!` it makes it faster}
    sent: "2017-05-12T22:43:53.809Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163a82c4d73f445a9f5608"
    text: "Oh cool they are inverts of each other"
    sent: "2017-05-12T22:43:14.699Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163a750a783b6c0a9160f7"
    text: "yes"
    sent: "2017-05-12T22:43:01.307Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163a7092217cca586e799e"
    text: "so  0:0:2 is once every 2 seconds?"
    sent: "2017-05-12T22:42:56.945Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59163a620a783b6c0a9160df"
    text: {It is actually pretty easy, `rate 30` is 30 times per second and `rate 0:0:30` is one tick every 30 seconds}
    sent: "2017-05-12T22:42:42.804Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163a2d92217cca586e7881"
    text: "`0:0:0.5` is half a second per frame"
    sent: "2017-05-12T22:41:49.575Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59163a168a05641b1178538b"
    text: "No :) `0:0:1` is 1 time per second"
    sent: "2017-05-12T22:41:25.999Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591639ee631b8e4e61cdcd01"
    text: "`0:0:0.5` is 1 time per second?"
    sent: "2017-05-12T22:40:46.030Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591639e533e9ee771c9f55f2"
    text: {You should see VID documentation: https://doc.red-lang.org/en/vid.html#_rate}
    sent: "2017-05-12T22:40:37.795Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591639af631b8e4e61cdcc29"
    text: {`? rate` cannot help you, because `rate` is VID keyword and there is no dialect auto-documentation (yet?).}
    sent: "2017-05-12T22:39:43.908Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5916396833e9ee771c9f53f4"
    text: {`view [base 200x200 rate 0:0:0.5 on-time [face/color: random 255.255.255]]`}
    sent: "2017-05-12T22:38:32.637Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591638ea83cb5db073265ce8"
    text: {Its weird for me because I did `? rate` and got nothing}
    sent: "2017-05-12T22:36:26.019Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591638d233e9ee771c9f5240"
    text: "can you give an example?"
    sent: "2017-05-12T22:36:02.069Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5916389d92217cca586e7366"
    text: "Yes, you can use `time!` as rate"
    sent: "2017-05-12T22:35:09.803Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5916387183cb5db073265b4c"
    text: {can you specify a rate less than 1 time per second?}
    sent: "2017-05-12T22:34:25.811Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5916382700efc2bb3e603536"
    text: "okay"
    sent: "2017-05-12T22:33:11.253Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591638230a783b6c0a9159e5"
    text: "just change the rate, if you want to"
    sent: "2017-05-12T22:33:07.940Z"
    editedAt: "2017-05-12T22:33:19.042Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591638190a783b6c0a9159c0"
    text: {yes, because flashing random color 30 times per second is not very eye-friendly :)}
    sent: "2017-05-12T22:32:57.624Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591637eb2b926f8a674cc994"
    text: "that's not too frequently"
    sent: "2017-05-12T22:32:11.457Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591637eac4d73f445a9f4cdb"
    text: "just try it :)"
    sent: "2017-05-12T22:32:10.431Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591637dd2b926f8a674cc975"
    text: "oh"
    sent: "2017-05-12T22:31:57.095Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591637d7d1a7716a0abe2fbf"
    text: "5 is 5 times per second"
    sent: "2017-05-12T22:31:51.904Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591637d49d90dc7a1c72b52b"
    text: "my bad"
    sent: "2017-05-12T22:31:48.298Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591637d2631b8e4e61cdc482"
    text: ":("
    sent: "2017-05-12T22:31:46.922Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591637c783cb5db073265958"
    text: {@AlexanderBaggett this example is with `base`, not `window`.}
    sent: "2017-05-12T22:31:35.313Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591637b00a783b6c0a915864"
    text: "and does 5 here represent 5 milliseconds?"
    sent: "2017-05-12T22:31:12.517Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591637902b926f8a674cc83c"
    text: {Can use use `on-time` with other face types than `window` such as `area`?}
    sent: "2017-05-12T22:30:40.666Z"
    editedAt: "2017-05-12T22:31:27.903Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5916370533e9ee771c9f4c69"
    text: {`view [base 200x200 rate 5 on-time [face/color: random 255.255.255]]`}
    sent: "2017-05-12T22:28:21.318Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591636bac4d73f445a9f496d"
    text: {How would one setup an actor that handles `on-time` events?}
    sent: "2017-05-12T22:27:06.692Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915e56e2b926f8a674b4bd2"
    text: "Thank you Gregg, those are great examples."
    sent: "2017-05-12T16:40:14.996Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915dc122b926f8a674b1d46"
    text: {In the gist example, start around https://gist.github.com/greggirwin/38883ca5109175a60896d2f406ee49f6#file-bmr-calc-red-L260 to see the reactive stuff.}
    sent: "2017-05-12T16:00:18.969Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5915dbb600efc2bb3e5e8232"
    text: {What are you trying to accomplish in something reacting to itself?^/^/- http://www.red-lang.org/2016/06/061-reactive-programming.html^/- http://www.red-lang.org/2016/07/eve-style-clock-demo-in-red-livecoded.html^/- https://gist.github.com/greggirwin/38883ca5109175a60896d2f406ee49f6}
    sent: "2017-05-12T15:58:46.595Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5915cc8a8a05641b11765179"
    text: "Also, are there any good `react` examples?"
    sent: "2017-05-12T14:54:02.204Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915cc25631b8e4e61cbbe67"
    text: "Can something `react` to itself?"
    sent: "2017-05-12T14:52:21.182Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915a8c233e9ee771c9ca58c"
    text: "Nice @xqlab."
    sent: "2017-05-12T12:21:22.146Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5915711c9d90dc7a1c6f0f04"
    text: "@xqlab Thank you! It is good for my purpose. :)"
    sent: "2017-05-12T08:23:56.102Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
)#(
    id: "591570930a783b6c0a8d9dd4"
    text: { ```^/parse "abdefc" [#"a" #"b" ahead [any alpha2 end] thru #"c"]^/```}
    sent: "2017-05-12T08:21:39.769Z"
    editedAt: "2017-05-12T08:23:25.074Z"
    v: 2
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "59156feb8a05641b1174acf2"
    text: {The post you just deleted would almost work. Still `to` should be used, otherwise `thru` would eat up digits too:^/```^/>> parse "abdddddd2c" [#"a" #"b" ahead any alpha2 thru #"c"]^/== true^/>> parse "abdddddd2c" [#"a" #"b" ahead any alpha2 to #"c"]^/== false^/```^/Sorry, `to` doesn't work neither.}
    sent: "2017-05-12T08:18:51.298Z"
    editedAt: "2017-05-12T08:21:26.072Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59156e2f83cb5db07322b0b8"
    text: {@xqlab Thanks, but this would be too specific. Eg this would not catch the following:^/```^/>> alpha2: charset "abcdefg"^/== make bitset! #{0000000000000000000000007F}^/>> parse "abdc" [#"a" #"b" ahead any alpha2 #"c"]^/== false^/```^/It needs to jump over `ahead`, but length of jump is not known in advance. `to` or `thru` would do the trick, but they would not fail on non-`alpha2`}
    sent: "2017-05-12T08:11:27.930Z"
    editedAt: "2017-05-12T08:16:13.981Z"
    v: 5
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59156cdd92217cca586ab3b4"
    text: {@toomasv you can use ^/>> parse "abc" [#"a" #"b" ahead any alpha2 #"c"]^/== true^/>> }
    sent: "2017-05-12T08:05:49.610Z"
    editedAt: "2017-05-12T08:07:06.581Z"
    v: 3
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "5915518ac4d73f445a9b1f38"
    text: "Not yet. Been busy."
    sent: "2017-05-12T06:09:14.258Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591535f592217cca5869e119"
    text: {@greggirwin did you ever dig up blocks in red/sys?}
    sent: "2017-05-12T04:11:33.554Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5914a09883cb5db0731fa03e"
    text: "OK. Thank you!"
    sent: "2017-05-11T17:34:16.423Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5914a081c4d73f445a988554"
    text: {There's no non-greedy flag. Parse rules have to be ordered based on longest match first. }
    sent: "2017-05-11T17:33:53.917Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5914a014c4d73f445a988300"
    text: {@greggirwin Thanks! Can I somehow avoid `any` and `opt` to be "hungry"?}
    sent: "2017-05-11T17:32:04.992Z"
    editedAt: "2017-05-11T17:33:12.320Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59149fd4c4d73f445a9881af"
    text: {You can see it by marking and checking the position.^/```^/>> parse "abc" [#"a" #"b" opt alpha2 mark: #"c"]^/== false^/>> mark^/== ""^/```}
    sent: "2017-05-11T17:31:00.933Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59149fb533e9ee771c988a24"
    text: "Hmmm, maybe I was right. :^^)"
    sent: "2017-05-11T17:30:29.348Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59149f7f83cb5db0731f9aca"
    text: {Oops, sorry, I wasn't looking at your hard-coded input cases. Give me a sec to sip some coffee and make a better comment.}
    sent: "2017-05-11T17:29:35.892Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59149f4a92217cca5867b3ee"
    text: {`alpha2` consumes the `c`, so you're past it and the `#"c"` rule fails.}
    sent: "2017-05-11T17:28:42.632Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59149e10c4d73f445a9879f7"
    text: {What am I missing here? Why do I get `false` on `opt` and `any`:^/```^/>> alpha2: charset "abcdef"^/== make bitset! #{0000000000000000000000007E}^/>> parse "abc" [#"a" #"b" opt alpha2 #"c"]^/== false^/>> parse "abc" [#"a" #"b" any alpha2 #"c"]^/== false^/>> parse "abc" [#"a" #"b" any alpha2]^/== true^/```}
    sent: "2017-05-11T17:23:28.510Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "591474f98a05641b1170ccf1"
    text: {@geekyi I did things the wrong way like not using none at the context. Your code works fine, thank you.}
    sent: "2017-05-11T14:28:09.189Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "591473ea00efc2bb3e5860a7"
    text: "@greggirwin look forward to it =)"
    sent: "2017-05-11T14:23:38.361Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59146f8c92217cca5866b970"
    text: {```red^/>> person: context [firstname: lastname: age: eyecolor: none]^/== make object! [^/    firstname: none^/    lastname: none^/...^/>> Joe: make person [firstname: "John" age: 50]^/== make object! [^/    firstname: "John"^/    lastname: non...^/>> Joe/eyecolor: 'blue^/== blue^/>> ? joe^/    firstname       string!      | John^/    lastname        none!        | none^/    age             integer!     | 50^/    eyecolor        word!        | blue^/```}
    sent: "2017-05-11T14:05:00.198Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59146e23c4d73f445a9777ba"
    text: {@Rebol2Red pardon me, but I don't understand what's not working for you?}
    sent: "2017-05-11T13:58:59.698Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59142ac1c4d73f445a963a16"
    text: "Aha, have to look closely at map, thanks"
    sent: "2017-05-11T09:11:29.282Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "591429e833e9ee771c964218"
    text: {```^/>> person: #()^/== #()^/>> person/name: "John Doe"^/== "John Doe"^/>> person/age: 50^/== 50^/>> person^/== #(^/    name: "John Doe"^/    age: 50^/)^/```}
    sent: "2017-05-11T09:07:52.431Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591429c12b926f8a67439bb6"
    text: {Use `map!` instead of `object!`, if you want to extend it. Objects are static in Red.}
    sent: "2017-05-11T09:07:13.056Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5914295c0a783b6c0a881505"
    text: {What is the equivalent of javas keyword new?^/^/Javascript (object literal): ^/```^/var person = {^/^-firstName:"John",^/^-lastName:"Doe",^/^-age:50,^/^-eyeColor:"blue"^/};^/```^/Red:^/```^/person: [firstname: "John" lastname: "Doe" age: 50 eyecolor: "Blue"]^/print [person/firstname person/lastname person/age person/eyecolor]^/```^/Javascript (new object with 4 properties):^/```^/var person = new Object();^/ person.firstName = "John";^/ person.lastName = "Doe";^/ person.age = 50;^/ person.eyeColor = "blue"; ^/```^/Red:^/```^/obj: context [firstname: "" lastname: "" age: 0 eyecolor: ""]^/person: make obj [] ; create a new object^/person/firstname: "John"^/person/lastname: "Doe"^/person/age: 50^/person/eyecolor: "Blue"^/print [person/firstname person/lastname person/age person/eyecolor]^/```^/Can this be done without filling the context or filling the context at runtime^/^/In other words: What is the equivalent of javas keyword new?}
    sent: "2017-05-11T09:05:32.061Z"
    editedAt: "2017-05-11T09:07:41.935Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5913b9b7c89bb14b5aeec2bc"
    text: {In the latter case, you could do it like this:^/```^/>> blk: ["one" "two" "three" "four"]^/== ["one" "two" "three" "four"]^/>> collect [foreach [a b] blk [keep reduce [to word! a :b]]]^/== [one "two" three "four"]^/```}
    sent: "2017-05-11T01:09:11.791Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5913b96fc4d73f445a949354"
    text: {It also depends on if you want to change them in place, or create a new block. }
    sent: "2017-05-11T01:07:59.298Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5913b920631b8e4e61c30873"
    text: {@RnBrgn, you're starting with all strings, so I'm not sure if you want to *keep* items as strings or convert certain items to words, or other casting.}
    sent: "2017-05-11T01:06:40.769Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5913b8e62b926f8a6741f1f4"
    text: {@JacobGood1, Nenad posted a great, simple R/S block example once, but I can't find it right now, and I have to rush off. I'll try to find it at some point.}
    sent: "2017-05-11T01:05:42.737Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59139d1c9d90dc7a1c679e0a"
    text: {Is there a way to skip elements in a series when using `form` so that only every other element gets converted to a string? Something like...^/``` form skip [ "one" "two" "three" "four"]  2^/```^/^/one  "two"  three  "four"^/^/}
    sent: "2017-05-10T23:07:08.900Z"
    editedAt: "2017-05-10T23:15:26.883Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5913692c631b8e4e61c1c8b1"
    text: {The calling and result conventions are unfortunately not yet documented. I know @dockimbel  gives a hint now and then, but I haven't  kept track of these.}
    sent: "2017-05-10T19:25:32.350Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591368b40a783b6c0a852291"
    text: "Yep, that is why I am here"
    sent: "2017-05-10T19:23:32.151Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "591368a4ac693c532addd948"
    text: {Re your question: if you want to write routines, you HAVE to be a low-level programmer....}
    sent: "2017-05-10T19:23:16.694Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591368712b926f8a6740b28e"
    text: {And shouldn't you first create a red-value! for a/1? The casting `as`does not create a red-value! struct! by itself.}
    sent: "2017-05-10T19:22:25.359Z"
    editedAt: "2017-05-10T19:26:05.034Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5913684a9d90dc7a1c66b6c6"
    text: "I am not a low level programmer... example?"
    sent: "2017-05-10T19:21:46.900Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59136800c89bb14b5aed882d"
    text: "Shouldn't you put the result on the stack???"
    sent: "2017-05-10T19:20:32.843Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59135e1ec89bb14b5aed5d8b"
    text: {^/^/This gives me an access violation, I am trying to append an `integer!` to a `block!` from reds^/```^/#system [^/    a: [4 2 4 555 5 5] ^/]^/^/test: routine [x [block!] return: [block!]] [^/    block/rs-append x as red-value! a/1^/    x^/]^/```}
    sent: "2017-05-10T18:38:22.806Z"
    editedAt: "2017-05-10T18:39:26.150Z"
    v: 3
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59134d43c89bb14b5aed0f75"
    text: {In the red blog it says:^/" Compiled routines can be run from interpreter too."^/So I compile the file into an exe, how do I know load it into the interpreter?}
    sent: "2017-05-10T17:26:27.411Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "591342a50a783b6c0a846057"
    text: {@maximvl, the [VS Code plugin](https://marketplace.visualstudio.com/items?itemName=red-auto.red) is a bit more than syntax highlighting. It also has the same auto-complete as in the red console, and populates tooltips using help. It also has command shortcuts for invoking red on the current file in various ways. Great talk, by the way. I really enjoyed it.}
    sent: "2017-05-10T16:41:09.217Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59133d875c89dc536195b5ab"
    text: {Fortunately, we have some great dialected functions to experiment with. Part of the problem comes back to the "what is code and what is data?" question. Looking for a block following `parse` or `view` is only good for basic cases. Without some kind of annotation, tools will need to scan blocks, trying various rulesets against them, to heuristically determine what they *might* be. Overlapping dialects will still need hints to disambiguate.}
    sent: "2017-05-10T16:19:19.871Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59133465c4d73f445a925c10"
    text: "and package management"
    sent: "2017-05-10T15:40:21.050Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59133429ac693c532adcda91"
    text: {about DSLs - IMO we should think about it more deeply when modules will come}
    sent: "2017-05-10T15:39:21.232Z"
    editedAt: "2017-05-10T15:39:49.714Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59133252d1a7716a0ab1316d"
    text: {I will be back in few hours to answer your other questions.}
    sent: "2017-05-10T15:31:30.715Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5913323e5c89dc53619576b9"
    text: {@AlexanderBaggett here is my compiler GUI (not tested recently) https://gist.github.com/rebolek/ec0c519a0942fac3e37b07584542ecd1}
    sent: "2017-05-10T15:31:10.971Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591332118a05641b116b961a"
    text: "amen"
    sent: "2017-05-10T15:30:25.953Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5913320b9d90dc7a1c65b1db"
    text: "this is an open question how to handle DSLs"
    sent: "2017-05-10T15:30:19.302Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59133206d1a7716a0ab13000"
    text: "I am real wizard now "
    sent: "2017-05-10T15:30:14.182Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591331f9c89bb14b5aec80ab"
    text: "in Draw? oh boy"
    sent: "2017-05-10T15:30:01.175Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591331e783cb5db073196324"
    text: {Or you can do syntax-highlighting in Draw, it is not the easiest thing to do, but it is possible.}
    sent: "2017-05-10T15:29:43.772Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591331e0d1a7716a0ab12ee8"
    text: {Well, I suppose that sort of thing is what I mean by adding more features to the IDE as more features are available in Red.}
    sent: "2017-05-10T15:29:36.341Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591331ba5c89dc53619573e6"
    text: {@AlexanderBaggett `text-box!` supports more font styles, but it is still under development.}
    sent: "2017-05-10T15:28:58.968Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5913317e83cb5db0731960f9"
    text: {I am curious if syntax highlighting is possible.  it looks like `face!` can have only one `font!` property which has only 1 color. }
    sent: "2017-05-10T15:27:58.941Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591331010a783b6c0a83ffac"
    text: {Well, the next feature I want to add is cross compilation}
    sent: "2017-05-10T15:25:53.935Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "591330da2b926f8a673f9d5a"
    text: {You will add `on-time` handler to some face with `rate` i.e. 1 (1 times per second) and run some code there. But that can wait until you have other things ready :)}
    sent: "2017-05-10T15:25:14.555Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5913309c2b926f8a673f9c4d"
    text: "How would we do that?"
    sent: "2017-05-10T15:24:12.036Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59133090c89bb14b5aec7a5d"
    text: "Erm"
    sent: "2017-05-10T15:24:00.703Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5913307083cb5db073195b9b"
    text: {You can run the compilation and in the event loop check if the file was created.   That way you can have async compilation with some notification mechanism.}
    sent: "2017-05-10T15:23:28.995Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132f06c4d73f445a923ded"
    text: {I imagine we'll get some nice new features with full I/O and concurrency, like the ability to stream through `input/output`. For now, it's old-school.}
    sent: "2017-05-10T15:17:26.053Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59132f0133e9ee771c925b7d"
    text: {@AlexanderBaggett So, you do not need `/wait` or `/output`, but then you would need some other mechanism to catch the end of compilation.}
    sent: "2017-05-10T15:17:21.684Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132eabc4d73f445a923b03"
    text: "I see. "
    sent: "2017-05-10T15:15:55.881Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132e6dc4d73f445a923875"
    text: "`/output` implies `/wait`."
    sent: "2017-05-10T15:14:53.337Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59132e560a783b6c0a83f267"
    text: {Hm, I am wrong here, it is blocked without `/wait` also.}
    sent: "2017-05-10T15:14:30.049Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132ded8a05641b116b8229"
    text: "Yes :) That's what `/wait` does."
    sent: "2017-05-10T15:12:45.810Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132dc4c89bb14b5aec6a85"
    text: "That is how you know it is working"
    sent: "2017-05-10T15:12:04.544Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59132dba33e9ee771c9254a0"
    text: {oh the single-threaded goodness. The whole editor freezes while you compile :)}
    sent: "2017-05-10T15:11:54.129Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59132d8f2b926f8a673f8dd7"
    text: "Do not be afraid, it really helps."
    sent: "2017-05-10T15:11:11.558Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132c998a05641b116b7af7"
    text: {This is true. I have been avoiding writing functions thus far, but I suppose its time to get my hands dirty}
    sent: "2017-05-10T15:07:05.387Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59132c705c89dc536195576a"
    text: {@AlexanderBaggett you use it in more than one place, you should write a function for it.}
    sent: "2017-05-10T15:06:24.971Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132c3f5c89dc5361955692"
    text: {Or you can use `rejoin ["red.exe -r " t/data/(t/selected)]`}
    sent: "2017-05-10T15:05:35.745Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59132c090a783b6c0a83e62a"
    text: "Of course, you do. *(fixed)*"
    sent: "2017-05-10T15:04:41.760Z"
    editedAt: "2017-05-10T15:05:41.441Z"
    v: 3
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132bfc2b926f8a673f85db"
    text: "don't I still need `append copy`?"
    sent: "2017-05-10T15:04:28.589Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59132b04631b8e4e61c08c83"
    text: {Change your compile line to something like: `call/wait/shell/output append copy "red.exe -r " t/data/(t/selected) out: copy ""``/output` is useful to catch the result of the operation, `/wait` and `/shell` are useful to make it work. Do not ask me why, it works for me that way and I don't know why ;)}
    sent: "2017-05-10T15:00:20.868Z"
    editedAt: "2017-05-10T15:05:15.032Z"
    v: 3
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132a039d90dc7a1c658536"
    text: "okay"
    sent: "2017-05-10T14:56:03.324Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59132a0283cb5db073193984"
    text: "oh"
    sent: "2017-05-10T14:56:02.138Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591329f70a783b6c0a83d9c1"
    text: {Use `append copy "red.exe -r " ...`or write special function for it.}
    sent: "2017-05-10T14:55:51.417Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591329d133e9ee771c92408a"
    text: {Also, `append "red.exe -r " t/data/(t/selected)` -> this will result first in `red.exe -r file.red`, then `red.exe -r file.redfile.red` etc...}
    sent: "2017-05-10T14:55:13.326Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132971c4d73f445a921cc9"
    text: {maybe the default tab name should be something different}
    sent: "2017-05-10T14:53:37.210Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591329630a783b6c0a83d58c"
    text: {The name of the tab is the name of the file we are compiling}
    sent: "2017-05-10T14:53:23.459Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5913294b0a783b6c0a83d54d"
    text: "Yes I want to return the name of the tab"
    sent: "2017-05-10T14:52:59.729Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591329485c89dc53619543f4"
    text: "Ah, I see."
    sent: "2017-05-10T14:52:56.416Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5913293cc89bb14b5aec5275"
    text: {you would have to rename the tab to something.red first}
    sent: "2017-05-10T14:52:44.404Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5913293c0a783b6c0a83d4e3"
    text: {This will return *name* of the tab. I think that's not what you want.}
    sent: "2017-05-10T14:52:44.224Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5913292e33e9ee771c923caa"
    text: "which is tab1 by default"
    sent: "2017-05-10T14:52:30.907Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5913292ad1a7716a0ab102dc"
    text: "Ok, this is the problem: `t/data/(t/selected)`"
    sent: "2017-05-10T14:52:26.100Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59132925c89bb14b5aec520d"
    text: {it should be whatever the name of the current tab is}
    sent: "2017-05-10T14:52:21.963Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5913291bac693c532adca100"
    text: "well"
    sent: "2017-05-10T14:52:11.316Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591328faac693c532adca086"
    text: "oh"
    sent: "2017-05-10T14:51:38.494Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591328f8631b8e4e61c081b3"
    text: ":("
    sent: "2017-05-10T14:51:36.142Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591328cb83cb5db07319320a"
    text: {@AlexanderBaggett this is what you are sending to `call`: `"red.exe -r tab 1tab 1"`}
    sent: "2017-05-10T14:50:51.354Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591328b1d1a7716a0ab100b3"
    text: {That is, narrow things down so we know what debugging you've done so far.}
    sent: "2017-05-10T14:50:25.377Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59132880c4d73f445a92184f"
    text: {Right, but have you tried just getting `call` to work in the console? Can you call Red that way? Can you successfully pass an arg to a called program? }
    sent: "2017-05-10T14:49:36.875Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59132835ac693c532adc9aaf"
    text: {My compile button does not trigger the command line compilation.}
    sent: "2017-05-10T14:48:21.023Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591327e30a783b6c0a83cc71"
    text: {@AlexanderBaggett, what, specifically, are you having trouble with?}
    sent: "2017-05-10T14:46:59.082Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591327a3ac693c532adc97c6"
    text: {And it's for Rebol, since Red didn't have a GUI back then. Better to go all Red these days.}
    sent: "2017-05-10T14:45:55.554Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5913279483cb5db073192ba2"
    text: {@AlexanderBaggett I've never published it, but I will put it on my GitHub and let you know. I actually haven't used it in few months, compiling from command line is too easy ;)}
    sent: "2017-05-10T14:45:40.811Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5913278eac693c532adc9747"
    text: "@rebolek , It sounds cool, do you have the code?"
    sent: "2017-05-10T14:45:34.402Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5913277fc89bb14b5aec48d8"
    text: "May need updating after 5 years. :^^)"
    sent: "2017-05-10T14:45:19.443Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5913276cc89bb14b5aec48a9"
    text: {There's also an old one Arnold did: http://www.rebol.org/view-script.r?script=redcompiler.r}
    sent: "2017-05-10T14:45:00.769Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59132669ac693c532adc903d"
    text: {:point_up: [10 mei 2017 16:38](https://gitter.im/red/help?at=591325e10a783b6c0a83be03) You know the place to collect them!}
    sent: "2017-05-10T14:40:41.202Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59132630c89bb14b5aec3eee"
    text: {@AlexanderBaggett I wrote GUI for compiler once, if you are interested.^/http://i.imgur.com/9zK40Xb.png}
    sent: "2017-05-10T14:39:44.032Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591326242b926f8a673f65d0"
    text: "@geekyi afaik there is only a syntax highlighter"
    sent: "2017-05-10T14:39:32.117Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591325e10a783b6c0a83be03"
    text: {Would be nice to collect all those IDE efforts tho}
    sent: "2017-05-10T14:38:25.230Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591325c833e9ee771c9226d5"
    text: {But it does illustrate potential areas for growth in Red.  }
    sent: "2017-05-10T14:38:00.344Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "591325a8c89bb14b5aec3c03"
    text: "And @maximvl isn't there Emacs plugin for Red? "
    sent: "2017-05-10T14:37:28.678Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5913259fac693c532adc8c44"
    text: "This is just a fun project for me."
    sent: "2017-05-10T14:37:19.485Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591325968a05641b116b59ad"
    text: "It does"
    sent: "2017-05-10T14:37:10.997Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591325949d90dc7a1c656a14"
    text: "https://github.com/AlexanderBaggett/RedIDE"
    sent: "2017-05-10T14:37:08.308Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5913256a0a783b6c0a83bb2f"
    text: {The visual studio code plugin works quite nicely..}
    sent: "2017-05-10T14:36:26.093Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5913253d9d90dc7a1c656846"
    text: {and I'm quite tired of editing Red code in Emacs without any integration :D}
    sent: "2017-05-10T14:35:41.552Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59132524ac693c532adc89e2"
    text: {while we are waiting for the proper designed IDE from Red team we can play with a simple one to explore the possibilities}
    sent: "2017-05-10T14:35:16.359Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591324d3631b8e4e61c06b49"
    text: "Sure"
    sent: "2017-05-10T14:33:55.922Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591324c5d1a7716a0ab0e814"
    text: {Now it assumes you have a copy of Red with the name red.exe in the same directory.  You could change it to be something different if you were on linux or whatever.}
    sent: "2017-05-10T14:33:41.523Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591324bf2b926f8a673f5fec"
    text: {@AlexanderBaggett can you make a proper repo so I (and others) can make pull requests to you?}
    sent: "2017-05-10T14:33:35.636Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5913248a5c89dc536195294b"
    text: {simple doesn't mean bad, simple means easy to hack and get involved :D}
    sent: "2017-05-10T14:32:42.918Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591324628a05641b116b53d1"
    text: {Sure. Right now its very simple (as per my skill level)}
    sent: "2017-05-10T14:32:02.054Z"
    editedAt: "2017-05-10T14:32:07.541Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5913245c631b8e4e61c068fb"
    text: {@maximvl it is here, I believe https://gist.github.com/AlexanderBaggett/20ed905f7e77a30dab9cff0add62fa2b}
    sent: "2017-05-10T14:31:56.728Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5913244c0a783b6c0a83b567"
    text: {@AlexanderBaggett that's nice, could you post a link to your project?}
    sent: "2017-05-10T14:31:40.682Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5913242833e9ee771c921cea"
    text: {Well, I am working a simple IDE for Red written in red.   I am doing mostly as a learning exercise.  But still it's kind of fun. And as red advances in what it can do, I would like to keep updating it.}
    sent: "2017-05-10T14:31:04.065Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591323e05c89dc53619524ca"
    text: "@AlexanderBaggett I am here :)"
    sent: "2017-05-10T14:29:52.871Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591323cc0a783b6c0a83b0e4"
    text: {@rebolek , If you are  still online, I could still use some help getting compiling to work via `call` }
    sent: "2017-05-10T14:29:32.599Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59131cad2b926f8a673f32a3"
    text: ":)"
    sent: "2017-05-10T13:59:09.596Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59131c6f8a05641b116b257d"
    text: "Yes, that's the way to do it @AlexanderBaggett."
    sent: "2017-05-10T13:58:07.620Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59131a1dc89bb14b5aebfe4b"
    text: {Could I use `copy` and then `append` to append to the copied value?}
    sent: "2017-05-10T13:48:13.702Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591318670a783b6c0a836ece"
    text: {Is there a way to do an `append` without modifying the original `series!` and just returning the appended value? Like immutability and all that.}
    sent: "2017-05-10T13:40:55.070Z"
    editedAt: "2017-05-10T13:46:16.395Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5912db0eac693c532adb1715"
    text: {Looks like the UTF-16 decoding didn't happen on the output.}
    sent: "2017-05-10T09:19:10.066Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591296f29d90dc7a1c62df66"
    text: {Here is a side-by-side comparison with procmon filtering on the red console exe (successful version is on the left). I don't really understand it, but it makes me think it's something to do with app compat stuff checking for this particular version of cat (this time running from the VS Code/bin directory)^/http://imgur.com/a/hRyRO}
    sent: "2017-05-10T04:28:34.876Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5912923d33e9ee771c8f896a"
    text: {strange, I tried it a few more times, and got it to work once, so it seems to be sporadic. The output is a little funny, with some encoding thing going on, but I can't say that is Red's fault^/```^/>> tin: "test"^/== "test"^/>> tout: ""^/== ""^/>> call/input/output "cat" tin tout^/== 0^/>> tin^/== "test"^/>> tout^/== "t^^@e^^@s^^@t^^@"^/```^/I will see if I can find any more hints}
    sent: "2017-05-10T04:08:29.756Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59128c34ac693c532ad9d3bc"
    text: "@qtxie yes, I am on Win 10"
    sent: "2017-05-10T03:42:44.489Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "591285b033e9ee771c8f6163"
    text: "Happy to help. :^^)"
    sent: "2017-05-10T03:14:56.187Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591281cc33e9ee771c8f573c"
    text: {@dander You're using Win 10, right? I tried on Win 7, it works fine.}
    sent: "2017-05-10T02:58:20.778Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "59127c595c89dc536192469a"
    text: "Thank you very much."
    sent: "2017-05-10T02:35:05.148Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59127c52c89bb14b5ae95a9d"
    text: "It looks much more readable already"
    sent: "2017-05-10T02:34:58.100Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59127c498a05641b11687a3b"
    text: "I really like the coding style you suggested."
    sent: "2017-05-10T02:34:49.821Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59126f8b83cb5db073161ff2"
    text: {No need to use get-words for the refinement args though, since they're just strings.}
    sent: "2017-05-10T01:40:27.799Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59126f710a783b6c0a80b5d7"
    text: {You're using the refinements correctly, so it looks like a bug.}
    sent: "2017-05-10T01:40:01.316Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59126cf38a05641b11684954"
    text: {I'm trying to do some scripting around the command-line Perforce client. cat seems like a simpler sample though. I was also going to try it from the linux cat, but was having trouble getting red working in bash for Windows.}
    sent: "2017-05-10T01:29:23.600Z"
    editedAt: "2017-05-10T01:29:40.790Z"
    v: 2
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59126c582b926f8a673c46e8"
    text: { @greggirwin I have definitely gotten `/output` working by itself. I'll try it with just `/input`, but I can't do it right now. I was a little uncertain with the double refinements if I could have been doing something screwy there}
    sent: "2017-05-10T01:26:48.954Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59126bcc83cb5db0731610c0"
    text: "@qtxie ^^---"
    sent: "2017-05-10T01:24:28.376Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591266fa631b8e4e61bd38f9"
    text: {@dander, have you tried with just one or the other? I haven't done it myself.}
    sent: "2017-05-10T01:03:54.733Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59123b7dac693c532ad8c77d"
    text: {Should it be possible to redirect both stdin and stdout with `call` at the same time? This is what I'm trying:^/```^/>> in-text: "test"^/== "test"^/>> out: ""^/== ""^/>> call/console "which cat"^/C:\Program Files (x86)\Gow\bin\cat.EXE^/== 0^/>> call/input/output "cat" :in-text :out^/^/*** Runtime Error 1: access violation^/*** at: 773793D5h^/```}
    sent: "2017-05-09T21:58:21.280Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5911cc4d5c89dc53618f4ac4"
    text: {```^/>> parse read https://duckduckgo.com/?q=%5E&t=ffsb&atb=v35-2a_&ia=web [to #"^^^^" mark: (print copy/part mark 40)]^/^^ at DuckDuckGo</title><link rel="styles^/```}
    sent: "2017-05-09T14:03:57.878Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5911cc125c89dc53618f4997"
    text: "OK. thanks."
    sent: "2017-05-09T14:02:58.510Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5911cbfc2b926f8a6739715a"
    text: {In the http docs, you do not have to care about escaping.}
    sent: "2017-05-09T14:02:36.750Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5911cbd78a05641b11657aaa"
    text: {If it is in Red script, you must escape it, but if you `read` text string, carets do not have to be escaped:^/```^/>> write %test {a^^^^b}^/>> print read %test^/a^^b^/>> length? read %test^/== 3^/>> parse read %test [#"a" #"^^^^" #"b"]^/== true^/```}
    sent: "2017-05-09T14:01:59.915Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5911cbc95c89dc53618f479e"
    text: "Let's say I am parsing an http doc."
    sent: "2017-05-09T14:01:45.887Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5911cbad2b926f8a67396e78"
    text: "It depends where the string does come from."
    sent: "2017-05-09T14:01:17.926Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5911cb219d90dc7a1c5f8fe5"
    text: {E.g if I want to parse a string like "a^^b":^/```^/>> [{a^^b}]^/== ["ab"]^/```^/I cannot find  carets in strings.}
    sent: "2017-05-09T13:58:57.595Z"
    editedAt: "2017-05-09T13:59:37.754Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5911cae1ac693c532ad6b6d2"
    text: {@toomasv Not sure, if I understand you. The escaping is just a visual clue: ^/```^/>> length? {^^^^}^/== 1^/```}
    sent: "2017-05-09T13:57:53.985Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5911cada83cb5db073133a19"
    text: {@dockimbel ^^ am I misunderstanding something? It appears to me that something is not working right. As you can see, src was altered to no avail.}
    sent: "2017-05-09T13:57:46.500Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5911ca5dc4d73f445a8c287b"
    text: {Is it possible to have a single caret character in a string? That is, without it escaping something. In other words, is it possible to have a plain binary string (eg from some outer source) that is not  "cleaned" up?}
    sent: "2017-05-09T13:55:41.973Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59115fc2c4d73f445a8a3f8e"
    text: {@geekyi  Should be `Red...any whitespaces...[...]`.}
    sent: "2017-05-09T06:20:50.451Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59115c6c8a05641b11638574"
    text: "Ah, that makes sense about `Red[]`"
    sent: "2017-05-09T06:06:36.333Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59109dd18a05641b1160a4be"
    text: {```^/append clear "1 + 1" form load "1 + 1" ; => "1 + 1"^/```^/^/}
    sent: "2017-05-08T16:33:21.391Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
)#(
    id: "59109d7733e9ee771c874712"
    text: {@dockimbel well, changing src here does not give me the result I was thinking that it would.^/```^/system/lexer/pre-load: func [src part][^/    without-preload [^/        x: form load src^/    ]^/    append clear src x^/]^/probe load "1 + 1" ; => []^/```}
    sent: "2017-05-08T16:31:51.667Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59108cce5c89dc536189ed14"
    text: {@geekyi ^/> Why is the header case sensitive? i.e. only allowed is `Red` ?^/^/For a simple reason, `Red` followed by a block is used by the lexer to find the beginning of a Red script, passing everything before it. In Rebol, you have the same feature, but Rebol being a unique name, the odds you will find it in random text followed a squared brackets are very low, so it doesn't matter if you write it with capitals or not. In case of Red, it's a common word, so risks for finding false positives are high, so capitalizing the first letter is a way to reduce such risk.}
    sent: "2017-05-08T15:20:46.559Z"
    editedAt: "2017-05-08T15:21:07.920Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59108bffd1a7716a0aa59731"
    text: {@JacobGood1 You're right, you need to change the input string and not return a new one. I thought returning a string was supported, but after checking the code it's not.}
    sent: "2017-05-08T15:17:19.633Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591078e1ac693c532ad11a25"
    text: {@dockimbel I was not clear with my example, sorry. I tried returning a string in my code, I was just showing you that no matter what, when load is called, I get an empty block. Also, If I just return a string, it still does not work.^/^/```^/system/lexer/pre-load: func [src part][^/    without-preload [^/        load src^/    ]^/    "here is a string"^/]^/probe load "1 + 1" ; => []^/```^/^/```^/system/lexer/pre-load: func [src part][^/    "here is a string"^/]^/probe load "1 + 1" ; => [1 + 1], should not "here is a string" be here?^/```^/^/```^/system/lexer/pre-load: func [src part][^/    change src "I am here"^/]^/probe load "1 + 1" ; => "I am here"^/```^/^/```^/system/lexer/pre-load: func [src part][^/    append src " interesting..."^/]^/probe load "1 + 1" ; => [1 + 1 interesting...]^/```^/It seems only when mutating src, do I get results. So I tried clearing src and appending something:^/```^/system/lexer/pre-load: func [src part][^/    without-preload [^/        x: form load src^/    ]^/    append clear src x^/]^/probe load "1 + 1" ; => []^/```^/I did all of this previously but did not communicate it in the last post, sorry about that.^/}
    sent: "2017-05-08T13:55:45.587Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590fc2e1c4d73f445a83be52"
    text: {@JacobGood1 My implementation of `without-preload` was just meant to be an example of how to avoid the infinite recursion, it does not return the last value of the body block. You can easily modify it to do so, or just set a word to `load` output to keep it. But the real issue with what you want to do is that `pre-load` needs to return a `string!` value, as it's just a preliminary stage (as its name implies) before `load`, which expects an `any-string!` and not a `block!`.}
    sent: "2017-05-08T00:59:13.150Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590f5361e2285d3b163889f3"
    text: {@dockimbel that is really cool, if it would work. I tried it, if you call `load` inside `without-preload` the `load` function will return an empty block every time.^/```^/system/lexer/pre-load: func [src part][^/    without-preload [^/        load src^/    ]^/]^/probe load "1 + 1"  ; => []^/^/^/system/lexer/pre-load: func [src part][^/    without-preload [^/        ;load src^/    ]^/]^/probe load "1 + 1" ; => [1 + 1]^/```^/^/}
    sent: "2017-05-07T17:03:29.956Z"
    editedAt: "2017-05-07T17:04:31.169Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590f3d0e0a783b6c0a734ef4"
    text: {Sunanda just hit this as well. Something to note in a primer with an explanation.}
    sent: "2017-05-07T15:28:14.650Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590f08150a783b6c0a728c16"
    text: {Going forward, I don't see much of  a problem. Just something unexpected vs Rebol2}
    sent: "2017-05-07T11:42:13.795Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590f07a4631b8e4e61af1697"
    text: {@9214 I didn't like case insensitive languages till I came to red. Now I don't mind either way :D}
    sent: "2017-05-07T11:40:20.837Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590f07650dcaa48e6737b114"
    text: "Personally I like this unambiguity"
    sent: "2017-05-07T11:39:17.606Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590f068433e9ee771c81058f"
    text: {```Rebol^/Roses are red and I'm using Red.^/^/After taking RED pill there's no way back, ^/it's all rEd rED ReD reD!^/^/  []^/ [__]^/[____]^/^/;-- only "Red" immidiately followed by a block counts as a header^/Red[]^/^/print 42^/```}
    sent: "2017-05-07T11:35:32.264Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590f0582c4d73f445a810a4e"
    text: {My usual template has `Red` tho, so isn't that much of a problem. More a bump when coming/converting from Rebol2}
    sent: "2017-05-07T11:31:14.842Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590f0526d1a7716a0a9f8ca8"
    text: {Well, it isn't in Rebol, and I was getting an invalid Red program error: `not a Red program!`, which had me confused for a bit}
    sent: "2017-05-07T11:29:42.054Z"
    editedAt: "2017-05-07T11:31:33.850Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "590f04a5631b8e4e61af0d1b"
    text: "@geekyi because language name is `Red`?"
    sent: "2017-05-07T11:27:33.448Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590eff38631b8e4e61aefc47"
    text: {Why is the header case sensitive? i.e. only allowed is `Red` ?}
    sent: "2017-05-07T11:04:24.195Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590eae475c89dc536182f333"
    text: {@JacobGood1 You can locally disable pre-load to avoid such recursion, for example:^/```lisp^/without-preload: function [body [block!]][^/^-saved: :system/lexer/pre-load^/^-system/lexer/pre-load: none^/^-do body^/^-system/lexer/pre-load: :saved^/]^/^/system/lexer/pre-load: func [...][^/^-...^/^-without-preload [... load ...]^/^-...^/]^/```}
    sent: "2017-05-07T05:19:03.637Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590ea78fac693c532aca7ae9"
    text: {I agree, I was only pinging him so that it would not get lost after some help spam}
    sent: "2017-05-07T04:50:23.893Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590e8fff5c89dc5361829d98"
    text: {I hardly think this is something urgent that requires an immediate response from Nenad.}
    sent: "2017-05-07T03:09:51.073Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590e7ef0e2285d3b1635dca5"
    text: "@dockimbel ^^"
    sent: "2017-05-07T01:57:04.851Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590e6d719d90dc7a1c52a4e7"
    text: {calling load in the pre-load faze causes a stack overflow(for obvious reasons). I tried to copy the object that the pre-loader works with, but that still does not work. Short of copying and pasting the entire system, could we get a load that we can use during the reader phase? It is really nice to work on text in code mode vs string mode, as well all know. This would give red another edge over other languages, even "reader macros" in red can be data instead of raw strings.}
    sent: "2017-05-07T00:42:25.085Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590d6902c4d73f445a7bbf58"
    text: {No you would need to combine the functionality of OpenME with the View Desktop to get close to IOS}
    sent: "2017-05-06T06:11:14.673Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590d647b33e9ee771c7b9806"
    text: {So if you can combine the functionality of OpenME and Rebol Services you can get close to what IOS delivers?}
    sent: "2017-05-06T05:51:55.452Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "590d636cc4d73f445a7baf6f"
    text: {Like a combination of AltME and the View/Desktop with Rebol applets (like those you could distribute for View).}
    sent: "2017-05-06T05:47:24.462Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590d6301ac693c532ac65306"
    text: {Rebol/Services is a little like a lightweight RPC mechanism. IOS was }
    sent: "2017-05-06T05:45:37.057Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590d62a39d90dc7a1c4f05ee"
    text: {Pardon. It is OpenME. Saw AltMe client in archive.}
    sent: "2017-05-06T05:44:03.638Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "590d629ac4d73f445a7bad3b"
    text: {Did you mean OpenME which is intended to be an open source replacement for AltME?}
    sent: "2017-05-06T05:43:54.939Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590d61c533e9ee771c7b8f39"
    text: {Where did you see it. AltME is proprietary software and has never been published.}
    sent: "2017-05-06T05:40:21.762Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590d6187c4d73f445a7baa97"
    text: {Saw AltMe source on github. Is the code in any way complete/useable, and was it implemented somewhere? Peer-to-peer (server and client on same device?)^/^/Also, what was the purpose of Rebol Services and how does it differ from IOS?}
    sent: "2017-05-06T05:39:19.370Z"
    editedAt: "2017-05-06T05:40:50.353Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "590d0c90e2285d3b163138cd"
    text: {I should have emphasize "meant to", as in "It will someday".}
    sent: "2017-05-05T23:36:48.988Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590d0a8233e9ee771c7aa379"
    text: {@Gregg > `Do` requires you to know where the file is. `#include` is meant to find files in known locations, without specifying a full path to them, relative or absolute. ^/^/I don't think #include in Red works like this yet. It is based on #include from Red/System rather than the Rebol include.r pre-processor. [docs](https://doc.red-lang.org/en/preprocessor.html#__include)}
    sent: "2017-05-05T23:28:02.271Z"
    editedAt: "2017-05-05T23:31:02.263Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590cb5f1e2285d3b162fd8e4"
    text: {It calls `do-file` internally. I have to run as well, but will look into it later.}
    sent: "2017-05-05T17:27:13.565Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590cb4d02b926f8a672663d5"
    text: {ive got to go afk for a bit, hopefully, I will be able to show you what I am doing soon =)}
    sent: "2017-05-05T17:22:24.452Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590cb4ad0dcaa48e672ff3b7"
    text: {it does not seem to, I can only get the preprocessor to fire by calling load explicitly }
    sent: "2017-05-05T17:21:49.814Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590cb475c4d73f445a795950"
    text: "it might... let me check"
    sent: "2017-05-05T17:20:53.217Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590cb46b631b8e4e61a73d6b"
    text: "Ah, there you go."
    sent: "2017-05-05T17:20:43.786Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590cb461c89bb14b5ad3b1cf"
    text: {Interesting. I thought `do` always `load`ed implicitly.}
    sent: "2017-05-05T17:20:33.906Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590cb460d1a7716a0a97a814"
    text: {since I want to bend the language a little bit using the preprocessor, I need to run it though load first}
    sent: "2017-05-05T17:20:32.532Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590cb440c4d73f445a7958d7"
    text: "well, for me, load is needed"
    sent: "2017-05-05T17:20:00.500Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590cb2bf5c89dc53617c3e17"
    text: {`Do` requires you to know where the file is. `#include` is meant to find files in known locations, without specifying a full path to them, relative or absolute. Sometimes I prefer `do`(no need to `load` separately) to make my intent clear.}
    sent: "2017-05-05T17:13:35.554Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590cac035c89dc53617c1e56"
    text: {Is it a bad idea to use `do load %some-file.red` over using `#include %some-file.red`?}
    sent: "2017-05-05T16:44:51.303Z"
    editedAt: "2017-05-05T16:46:23.037Z"
    v: 3
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590b7b1d33e9ee771c7484ae"
    text: "Worth a ticket, so they can mark it as done."
    sent: "2017-05-04T19:03:57.828Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b77be5c89dc536177496f"
    text: {@greggirwin   thanks, is it worth reporting as a defect or just leave for now until the official release?}
    sent: "2017-05-04T18:49:34.058Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "590b731312f05b512a2c7c89"
    text: {Works on Win7, both gui and cli. Likely an OSX issue, as that's not officially set yet.}
    sent: "2017-05-04T18:29:39.855Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b7069dbeff564731adae9"
    text: "Code maybe terminal dependent"
    sent: "2017-05-04T18:18:17.956Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b705bd346fab721bb9f98"
    text: {@dnmurphy probably.. I'm using gui-console on win10, it might not work on normal console too.. hmm, it work from cmd.exe prompt too}
    sent: "2017-05-04T18:18:03.598Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b6fd463a9bc9028496e30"
    text: {@geekyi doesn't work at all with missing the first slash, produced this Script Error: cannot access size in path system/console/size Where: catch but as noted I was running on mac so maybe mac has a bug or this part isn't built yet on mac}
    sent: "2017-05-04T18:15:48.321Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "590b6f7ce1b61e932812633e"
    text: {@dnmurphy omit the first `/` : `system/console/size`}
    sent: "2017-05-04T18:14:20.298Z"
    editedAt: "2017-05-04T18:14:39.559Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "590b6f2de3b0d4e353c02d0f"
    text: {I then tried with /system/console/size^/== /size^/I did this in mac, with red installed in a  folder beneath my home folder -  are you assuming the location for red to match your results?  or maybe its a bug in Mac?}
    sent: "2017-05-04T18:13:01.386Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "590b6ed010a6a16673e1c10a"
    text: {@geekyi I ran your code for console dimensions and got this  system/console/size^/*** Script Error: cannot access size in path system/console/size^/*** Where: catch}
    sent: "2017-05-04T18:11:28.020Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "590b5952e1b61e932811f007"
    text: {One more: [Tell me my console dimensions!](https://codegolf.stackexchange.com/a/118921/49214)}
    sent: "2017-05-04T16:39:46.533Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "590b55a8d346fab721bb0ef7"
    text: {I stole your [answer](https://codegolf.stackexchange.com/a/118915/49214)  @endo64 ! :p }
    sent: "2017-05-04T16:24:08.600Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b510f10a6a16673e12b6f"
    text: "@endo64 ooh, do you have an answer already?"
    sent: "2017-05-04T16:04:31.751Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b50aed346fab721baf4d8"
    text: "Nice @geekyi !"
    sent: "2017-05-04T16:02:54.304Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b49ab4d51a79e643c03d6"
    text: {Or better^/```^/until ["" <> ask ""]^/```}
    sent: "2017-05-04T15:32:59.409Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "590b496be1b61e9328118a94"
    text: {And for https://codegolf.stackexchange.com/questions/118780/insist-on-an-answer ^/```^/until [not empty? ask ""]^/```}
    sent: "2017-05-04T15:31:55.960Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "590b4256bedc54b621c935b5"
    text: {Red is sometimes *very* suited to Stackoverflow code golf questions}
    sent: "2017-05-04T15:01:42.642Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b4222e66ccf474dee2588"
    text: "```red^/system/view/screens/1/size^/```"
    sent: "2017-05-04T15:00:50.206Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b420fbedc54b621c933bf"
    text: {Could [this](https://codegolf.stackexchange.com/a/118894/49214) be made any shorter?}
    sent: "2017-05-04T15:00:31.792Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590aafd212d2409935c498e7"
    text: "@qtxie Thanks"
    sent: "2017-05-04T04:36:34.821Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590aa631edf919574a757974"
    text: "@PeterWAWood It is `red-062.exe`."
    sent: "2017-05-04T03:55:29.041Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "590aa3dc881b89e101b03c6e"
    text: {If you aren't an ML member, I can post a reply for you.}
    sent: "2017-05-04T03:45:32.335Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590aa3c68e4b63533d2d8f9e"
    text: {Could somebody help respond to a message on the Red Mailing List?^/^/I am likely a total noob...  I installed the visual studio code plug-in, but I have no idea where to: "If Red is already installed (Note: For Windows user, need to run red.exe --cli first)"^/^/Where do I run this command?  And is it red.exe or red-062.exe?^/}
    sent: "2017-05-04T03:45:10.849Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590a0af0edf919574a73208d"
    text: {I believe set-get-word! syntax at the end of a path still has some work to be done on it. }
    sent: "2017-05-03T16:53:04.866Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5909f9b2881b89e101ad9193"
    text: {To be clear, this code is in another func, so the func is a func that produces a function.^/Here are the two versions.^/Does not work:^/```^/set make word! append copy "compile-" form name function args compose/deep [^/        code: copy state/code-to-compile^/        current: first pos^/        while [not tail? pos] [^/            if tail? next pos [^/                code/:current: (body)^/            ]^/            code: code/:current^/            pos: next pos^/            current: first pos^/        ]^/    ]^/```^/Works:^/```^/set make word! append copy "compile-" form name function args compose/deep [^/        code: copy state/code-to-compile^/        current: first pos^/        while [not tail? pos] [^/            if tail? next pos [^/                change/only at code current (body)^/            ]^/            code: code/:current^/            pos: next pos^/            current: first pos^/        ]^/    ]^/```}
    sent: "2017-05-03T15:39:30.446Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5909f8b708c00c092addab28"
    text: {@JacobGood1 if it works without path syntax and throws error with it, it looks like path-related bug IMO.}
    sent: "2017-05-03T15:35:19.076Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5909f833c1d3b50154458cb5"
    text: {@rebolek you were correct in your assumption, but you did not follow up with more thoughts... why did you assume it would work without path syntax?}
    sent: "2017-05-03T15:33:07.681Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5909f807f22385553d9ef394"
    text: {@dockimbel it contains a block with two words, not that it matters but the block is this: [pos expr]}
    sent: "2017-05-03T15:32:23.148Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59095179d32c6f2f09623c7f"
    text: "@JacobGood1 What does `args` contain?"
    sent: "2017-05-03T03:41:45.368Z"
    editedAt: "2017-05-03T03:41:51.501Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59090ebcd32c6f2f09616664"
    text: "well, maybe not... yes it only works without path"
    sent: "2017-05-02T22:57:00.551Z"
    editedAt: "2017-05-02T22:57:08.219Z"
    v: 3
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59090d67881b89e101a9d121"
    text: "error message was misleading me"
    sent: "2017-05-02T22:51:19.500Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59090d5ed32c6f2f0961617a"
    text: "I think it was an error on my part"
    sent: "2017-05-02T22:51:10.271Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59090b388fcce56b205b1293"
    text: "@rebolek yes"
    sent: "2017-05-02T22:42:00.553Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5908f1ed8e4b63533d26b295"
    text: {@JacobGood1 Does it work when not using path syntax?}
    sent: "2017-05-02T20:54:05.869Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5908e6288fcce56b205a7a83"
    text: {Odd error here(odd for me at least):^/^/```^/set make word! append "compile-" form name function args compose/deep [^/        code: state/code-to-compile^/        while [current: pos/1 not tail? pos: next pos] [^/            if tail? next pos [^/                probe current^/                probe first code^/                code/:current: (body)^/            ]^/            code: code/:current^/        ] ^/    ]^/^/3^/func^/*** Script Error: code is not in the specified context^/*** Where: set-path^/```^/This code generates a function, the error claims that code is not in the context when using path syntax. However, if I probe code, it is there, if I use first on it, it displays the first element. Is this a bug or am I getting something mixed up?^/}
    sent: "2017-05-02T20:03:52.384Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5908b384c1d3b50154402c7c"
    text: {what would be an interesting test is to have both windows open and change the text in them both and print out a/text}
    sent: "2017-05-02T16:27:48.442Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908b3428e4b63533d2580d0"
    text: {Okay cool so I can code it like this:^/^/``` ^/ view layout [^/    button 75x25 "Interpret" on-click [print "Running" do face/parent/pane/2/text ]^/    area 400x400^/ ]^/```^/^/But this still closes the first window and the Red Console.^/}
    sent: "2017-05-02T16:26:42.060Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908b2168bb56c2d1103b032"
    text: {But you never change what `a` refers to when you close the window. It's tempting to think that Red should unset things, but that's not how it works. Run your code, then close the window. In the console, type:^/```^/a/text: "Test"^/view editor^/```^/}
    sent: "2017-05-02T16:21:42.621Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908b19ed32c6f2f095fb6e9"
    text: {It shouldn't kill the console. I think that's a bug. }
    sent: "2017-05-02T16:19:42.948Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908b13b8fcce56b205970d9"
    text: {If it is supposed to behave that way and kill the first window, it's okay I understand. But it is also supposed to kill the Red REPL?}
    sent: "2017-05-02T16:18:03.676Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908b0f38e4b63533d25764b"
    text: "http://imgur.com/h0mVv57"
    sent: "2017-05-02T16:16:51.782Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908b0d2881b89e101a82435"
    text: {so if in creating the second window it overwrote the value of `a` in the first then it should refer to nothing}
    sent: "2017-05-02T16:16:18.364Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908b06c08c00c092ad8397d"
    text: {Forget the console at the moment. *Think* about what `a` refers to after you close the second window.}
    sent: "2017-05-02T16:14:36.289Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908b0115f3e76601edfe90d"
    text: "still has the same value"
    sent: "2017-05-02T16:13:05.025Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908afef08c00c092ad837a4"
    text: "Sorry, I have to run. Will check back later."
    sent: "2017-05-02T16:12:31.072Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908afd05f3e76601edfe737"
    text: {Yes. You open the first window, and `a` refers to its `area` face. Now you open a second one and `a` points to the new one. Now you close the second one and...what does `a` refer to?}
    sent: "2017-05-02T16:12:00.414Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908ae968e4b63533d2569ec"
    text: {is it because `a` is named? instead of referenced via the top level face?}
    sent: "2017-05-02T16:06:46.449Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908ae5308c00c092ad82ee5"
    text: {That is, it has a meaning in the VID dialect, but not globally.}
    sent: "2017-05-02T16:05:39.470Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908ae4f6aea30763d62c574"
    text: {still so why does closing a window kill the parent window and the red console in this example but not the other?}
    sent: "2017-05-02T16:05:35.291Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908ae3e8bb56c2d11039bc2"
    text: {`Area` is a word used in View/VID, but is not in the global context.}
    sent: "2017-05-02T16:05:18.620Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908ae2408c00c092ad82e09"
    text: "weird"
    sent: "2017-05-02T16:04:52.424Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908ae215f3e76601edfdf99"
    text: "oh"
    sent: "2017-05-02T16:04:49.838Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908adfb08c00c092ad82d6d"
    text: {Close your windows and see what `a` is in the console.}
    sent: "2017-05-02T16:04:11.385Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908adec6aea30763d62c365"
    text: "That is why `?  area` doesn't do anything"
    sent: "2017-05-02T16:03:56.280Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908adcf6aea30763d62c2fb"
    text: {`a` is global? I thought it was scoped to the `layout` since `area` doesn't exist outside of `view`}
    sent: "2017-05-02T16:03:27.666Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908ad935f3e76601edfdd48"
    text: {And so is `a`. What I see here is that it opens the second window the first time, but not a second time once it's closed.}
    sent: "2017-05-02T16:02:27.879Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908ad78c1d3b50154400cff"
    text: {```^/ view layout [^/    button 75x25 "Interpret" on-click [print "Running" do a/text ]^/    a: area 400x400^/ ]^/```^/}
    sent: "2017-05-02T16:02:00.190Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908ad5cc1d3b50154400c37"
    text: "I still get the issue if I don't give it a name"
    sent: "2017-05-02T16:01:32.151Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908ad51c1d3b50154400c0e"
    text: {Okay fair point. In this case editor is global right?}
    sent: "2017-05-02T16:01:21.167Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908ad358e4b63533d25636e"
    text: {Win7. Could be the difference there. But my questions stand. If you're `do`ing live coding like this, globals can be your friend or enemy.}
    sent: "2017-05-02T16:00:53.752Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908acf98fcce56b20595b13"
    text: "What OS are you on?"
    sent: "2017-05-02T15:59:53.556Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "5908acf512d2409935bc3abe"
    text: "I am using windows 10"
    sent: "2017-05-02T15:59:49.195Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908acd05f3e76601edfd9e5"
    text: {I get different behavior here, in that it doesn't close the first window, so there may be something different in the official build, if you're using that.}
    sent: "2017-05-02T15:59:12.954Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908ac9608c00c092ad82651"
    text: {OK, think for a moment. You run it, and what is `a` set to? Now you run it again. What is `a` set to? Same question for `editor`. }
    sent: "2017-05-02T15:58:14.300Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908aba4c1d3b501544003ef"
    text: {In other words, the code that created the first window is pasted into the  `area` of the first window.}
    sent: "2017-05-02T15:54:12.801Z"
    editedAt: "2017-05-02T15:54:28.287Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908ab48f22385553d995669"
    text: {Use this as the first window^/ ^/```^/Red [needs 'view]^/^/ editor: layout [^/    button 75x25 "Interpret" on-click [print "Running" do a/text ]^/    a: area 400x400^/ ]^/^/view editor^/```^/^/and then paste it in again and click interpret.^/It will create a second window.^/Close that and it will also close the first.}
    sent: "2017-05-02T15:52:40.372Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5908aad908c00c092ad81c11"
    text: {It works fine for me here @AlexanderBaggett. e.g. `view [text "text" button [unview]]` entered in the field will unview the second window only when the button is clicked. What are you entering in `a`?}
    sent: "2017-05-02T15:50:49.245Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59089215881b89e101a78d0d"
    text: {Let me clarify that,  if I use the second code chunk there as my starting point,  any new windows created from when closed, also close the main window.}
    sent: "2017-05-02T14:05:09.219Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59088f2b08c00c092ad78202"
    text: {Is this normal or  is there some kind of hidden bug killing the UI thread ?}
    sent: "2017-05-02T13:52:43.030Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59088edfedf919574a6c8898"
    text: {I have a question about interpretation in red. ^/^/In this Code ^/^/```^/view [field button 100x50 "interpet" on-click [do face/parent/pane/1/data ] ]^/```^/^/I can interpret the code normally and closing any child windows generated by this do not  cause the parent window to close.^/^/However, ^/^/In this code, when I create a second window with this one. Closing a second window here causes the parent window to close as well.^/^/```^/Red [needs 'view]^/^/ editor: layout [^/    button 75x25 "Interpret" on-click [print "Running" do a/text ]^/    a: area 400x400^/ ]^/^/view editor^/```^/}
    sent: "2017-05-02T13:51:27.474Z"
    editedAt: "2017-05-02T13:54:20.727Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59084aa712d2409935ba6329"
    text: {I have to sleep for awhile, but I'll leave it open}
    sent: "2017-05-02T09:00:23.588Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5908489812d2409935ba5b2a"
    text: "https://preview.c9users.io/zipteye/play_pen"
    sent: "2017-05-02T08:51:36.821Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5908486b8bb56c2d1101b5bb"
    text: {@dockimbel I saw your avatar, but saw nothing in the user list}
    sent: "2017-05-02T08:50:51.186Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5908484af22385553d978171"
    text: "https://play-pen-zipteye.c9users.io"
    sent: "2017-05-02T08:50:18.588Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5908447c881b89e101a62e7e"
    text: {You can attempt this link:^/https://ide.c9.io/zipteye/play_pen}
    sent: "2017-05-02T08:34:04.837Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5908439b8e4b63533d237143"
    text: {(I believe the workspace link can be accessed by "log in via GitHub" link, if the users don't have a Cloud9 account)}
    sent: "2017-05-02T08:30:19.375Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590842f28fcce56b20576fe2"
    text: {I think it can be shared to anyone, though I'll have to read a bit more. ^/I could write up something explaining how to set it up}
    sent: "2017-05-02T08:27:30.276Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590842505f3e76601eddde4b"
    text: {@gltewalt Very cool! Would you be willing to write an article about that, explaning how to set it up? Or can that setup instance be shared to anyone?}
    sent: "2017-05-02T08:24:48.011Z"
    editedAt: "2017-05-02T08:25:30.435Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59084186c1d3b501543e163f"
    text: {@gltewalt K, not a fan of providing CC details unless I *have* to but may consider that.}
    sent: "2017-05-02T08:21:26.829Z"
    editedAt: "2017-05-02T08:21:47.226Z"
    v: 2
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "5908414e5f3e76601eddda70"
    text: {Compiling in cloud linux container worked fine.^/http://imgur.com/a/BUd3k}
    sent: "2017-05-02T08:20:30.080Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5908410d12d2409935ba3a5e"
    text: "Thanks @dockimbel ... I'm off, enjoy."
    sent: "2017-05-02T08:19:25.723Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "590840abd32c6f2f095d9cf5"
    text: {@justinant It's not on master branch. There: https://github.com/red/red/tree/GTK}
    sent: "2017-05-02T08:17:47.819Z"
    editedAt: "2017-05-02T08:18:11.258Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590840758bb56c2d1101930c"
    text: {@dockimbel Excuse my ignorance ... "You can get a work in progress version for Linux/GTK from the gtk branch" <= where does that live? I looked through the Github red/red repo and didn't see that.}
    sent: "2017-05-02T08:16:53.996Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59083cf008c00c092ad60fed"
    text: {OK thanks for the replies. I'll source that tomorrow but continue playing with the non-GUI things.}
    sent: "2017-05-02T08:01:52.205Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59083c7a08c00c092ad60dfe"
    text: {@justinant You can get a work in progress version for Linux/GTK from the `gtk` branch. Though, only a few widgets are available and very basic Draw support.}
    sent: "2017-05-02T07:59:54.841Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59083b828fcce56b20575244"
    text: {@justinant Work on the GUI for Linux is not yet scheduled. A volunteer started working on porting the GUI to GTK+3 but hasn't been around for a while.  }
    sent: "2017-05-02T07:55:46.220Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59083a6a881b89e101a5ffad"
    text: {Saw this also: https://news.ycombinator.com/item?id=14069666}
    sent: "2017-05-02T07:51:06.005Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59083a5c881b89e101a5ff38"
    text: {I just noted that the GUI functions do not seem to be working for Linux. Is this correct? }
    sent: "2017-05-02T07:50:52.277Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59081aca8e4b63533d22d4a7"
    text: {I am a big fan of the STM32F3 series MCUs and plan to do more with them. As a test I have been using both a Forth and MicroPython to see which one annoys me the least. For all it's difficulty, I quite like *Forth.}
    sent: "2017-05-02T05:36:10.750Z"
    editedAt: "2017-05-02T05:37:02.759Z"
    v: 2
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59081a068bb56c2d1100fcd1"
    text: {Yes, I have 3, I currently develop (cough* cough*) on the STM32F3 Discovery using a variant of Forth but this "Whole Stack" concept is very appealing. It would be nice to be able to have Electronics bit do stuff and take the output onto the Web etc, but using the one language IMHO.}
    sent: "2017-05-02T05:32:54.910Z"
    editedAt: "2017-05-02T05:34:00.246Z"
    v: 2
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "590819d108c00c092ad58b6b"
    text: {@justinant Just curious, do you have a Cortex M3 board and would like to run Red on it?}
    sent: "2017-05-02T05:32:01.866Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590819998bb56c2d1100fbaa"
    text: "OK will do"
    sent: "2017-05-02T05:31:05.823Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "5908198b8e4b63533d22d0b3"
    text: {@justinant For your HOWTO, yes, we are very interested, you can coordinate for that with @Scaremonger and @greggirwin.}
    sent: "2017-05-02T05:30:51.804Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59081958881b89e101a582e4"
    text: "OK no worries, had to ask."
    sent: "2017-05-02T05:30:00.045Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "590819388e4b63533d22cf4d"
    text: {@justinant ARM Cortex series relies on the Thumb instruction set, our current backend only emits the standard ARM instructions for now. Thumb-mode support can be added, though, our resources being limited for now, such task is not scheduled yet.}
    sent: "2017-05-02T05:29:28.988Z"
    editedAt: "2017-05-02T05:29:53.029Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590818a68bb56c2d1100f83f"
    text: {I note that the ARM support is currently for ARMv5 and the RPi ... is there any reason why Red would not run on an ARM Cortex 3?}
    sent: "2017-05-02T05:27:02.393Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "5908185d08c00c092ad586f7"
    text: {I have written a HOWTO for Ubuntu/Linux as an expansion on the http://www.red-lang.org/p/getting-started.html document. I'd be happy to clean it up and forward for someones' review, to place in a Tutorial section.}
    sent: "2017-05-02T05:25:49.989Z"
    editedAt: "2017-05-02T05:31:54.558Z"
    v: 2
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "590817ed5f3e76601edd3848"
    text: {Haha non, merci, je suis Le Kiwi et je parlez Anglais desolee}
    sent: "2017-05-02T05:23:57.344Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "590817ecf22385553d96c25c"
    text: "@justinant Yes, the host OS is auto-detected."
    sent: "2017-05-02T05:23:56.068Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590817be8e4b63533d22cae4"
    text: {@justinant Il y a une room `red/red/france` si tu préfères. ;-)}
    sent: "2017-05-02T05:23:10.794Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590817b9f22385553d96c1e4"
    text: "Oh, so on Linux, the -t Linux is auto-checked? "
    sent: "2017-05-02T05:23:05.809Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59081798881b89e101a57c1d"
    text: {The output of the Red compiler is an executable binary. The Linux target will be auto-selected. `-t` is mostly used for cross-compilation.}
    sent: "2017-05-02T05:22:32.915Z"
    editedAt: "2017-05-02T05:22:40.092Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59081780edf919574a6a7951"
    text: "Thank you for taking the time to check."
    sent: "2017-05-02T05:22:08.843Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "5908176cd32c6f2f095cf9da"
    text: {And I tested that with "red -c ..." and "red -c -t Linux ..." }
    sent: "2017-05-02T05:21:48.816Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "5908174908c00c092ad58255"
    text: "Je suis tres dense 8-/ ..."
    sent: "2017-05-02T05:21:13.702Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59081702f22385553d96bed7"
    text: "If I do what you did, $ ./hello, works fine."
    sent: "2017-05-02T05:20:02.368Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "590816f55f3e76601edd352a"
    text: {Ah, I see the issue ... after reading the docs, I thought that you execute a compiled app like "red hello" ... it appears not.}
    sent: "2017-05-02T05:19:49.314Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "5908167af22385553d96bba9"
    text: {It works fine when compiled in dev mode or release mode.}
    sent: "2017-05-02T05:17:46.732Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5908167212d2409935b99fb7"
    text: "I'll do that, and see what happens, bbs"
    sent: "2017-05-02T05:17:38.494Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "590816526aea30763d60113d"
    text: {@justinant Here is what I get on a Ubuntu 16.04 64-bit:^/```lisp^/dk@ubuntu:~/Downloads$ cat hello.red ^/Red []^/^/print "Hello World!"^/^/dk@ubuntu:~/Downloads$ ./red-01may17-a8be796 hello.red ^/Compiling compression library...^/Compiling Red console...^/Hello World!^/dk@ubuntu:~/Downloads$ ./red-01may17-a8be796 -c hello.red ^/^/-=== Red Compiler 0.6.2 ===- ^/^/Compiling /home/dk/Downloads/hello.red ...^/Compiling libRedRT...^/...compilation time : 614 ms^/^/Compiling to native code...^/...compilation time : 18259 ms^/...linking time     : 249 ms^/...output file size : 573212 bytes^/...output file      : /home/dk/Downloads/libRedRT.so ^/^/^/...compilation time : 43 ms^/^/Target: Linux ^/^/Compiling to native code...^/...compilation time : 776 ms^/...linking time     : 66 ms^/...output file size : 38240 bytes^/...output file      : /home/dk/Downloads/hello ^/^/^/dk@ubuntu:~/Downloads$ ./hello ^/Hello World!^/dk@ubuntu:~/Downloads$ ./red-01may17-a8be796 -r hello.red ^/^/-=== Red Compiler 0.6.2 ===- ^/^/Compiling /home/dk/Downloads/hello.red ...^/...compilation time : 603 ms^/^/Target: Linux ^/^/Compiling to native code...^/...compilation time : 18388 ms^/...linking time     : 182 ms^/...output file size : 534304 bytes^/...output file      : /home/dk/Downloads/hello ^/^/^/dk@ubuntu:~/Downloads$ ./hello ^/Hello World!^/```}
    sent: "2017-05-02T05:17:06.042Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590815608fcce56b2056c18f"
    text: "BK, I'll just check my install for fun."
    sent: "2017-05-02T05:13:04.464Z"
    editedAt: "2017-05-02T05:13:29.652Z"
    v: 2
    author: "58a6526ed73408ce4f4aeac9"
)#(
    id: "5908109108c00c092ad56a73"
    text: "Out for 15 mins, bbs, can test as you need."
    sent: "2017-05-02T04:52:33.714Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59080ee28fcce56b2056a94a"
    text: "Thanks. ;-)"
    sent: "2017-05-02T04:45:22.293Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59080ee05f3e76601edd16ed"
    text: "Then let me try to see if there's a regression..."
    sent: "2017-05-02T04:45:20.053Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59080ed86aea30763d5ff76a"
    text: "Hi, cool language btw +1"
    sent: "2017-05-02T04:45:12.465Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59080ec7881b89e101a55e8f"
    text: {I do, I followed the Debian/Ubuntu Multiarch method.}
    sent: "2017-05-02T04:44:55.752Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "59080ea58bb56c2d1100d3bf"
    text: "@justinant Do you have 32-bit libs installed?"
    sent: "2017-05-02T04:44:21.656Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590809a3c1d3b501543d41b5"
    text: {Update: The cmd red>> ? system/options/args, outputs >> system/options/args is a none! of value: none ... so perhaps this is the previous issue on Linux under ver 0.6.1 reappearing under ver 0.6.2? I'll wait and see what you peeps say.}
    sent: "2017-05-02T04:22:59.115Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "5908095b6aea30763d5fe733"
    text: {Update: I did a search "* Error: cannot access argument file red" and saw the links to reported issues namely Linux: cannot access argument file #2426. This was closed on March 7 by  @dockimbel and I tested the  -v, -h, -c etc options and they all work correctly. }
    sent: "2017-05-02T04:21:47.168Z"
    v: 1
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "5908056bd32c6f2f095cbeb9"
    text: {Hi, I just installed the Linux-latest onto Ubuntu 16.10 (AMD64), ran through the install/setup, tested the REPL: works. Just wrote the "Hello World" Red script, compiled it using the -t Linux option. However on execution I am getting this message: *** Error: cannot access argument file ... If I execute "red hello.red", it works ok but not the compiled code. Any ideas why?}
    sent: "2017-05-02T04:04:59.196Z"
    editedAt: "2017-05-02T04:05:26.515Z"
    v: 2
    author: "58a6526ed73408ce4f4aeac9"
) #(
    id: "5907fa1e881b89e101a52028"
    text: {I know, but there always seems to be some magic lurking somewhere...}
    sent: "2017-05-02T03:16:46.468Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5907f55e8fcce56b20565934"
    text: {@JacobGood1 it's a whole different piece of data, even the `length?` is different :smile: }
    sent: "2017-05-02T02:56:30.063Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907f3968fcce56b20565333"
    text: {@dockimbel I figured that was the case, I was wondering if there was some other way... other than what you just proposed.}
    sent: "2017-05-02T02:48:54.579Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5907ee90edf919574a69f145"
    text: {@JacobGood1 When you are doing `form a/3`,  you are creating a new series, so you can't affect the original block. Only way would be:  `b: a/3: form a/3`}
    sent: "2017-05-02T02:27:28.363Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907ecaf8e4b63533d223968"
    text: {^/Is there a way to modify a: series! at the nth index that contains another b: series!, to a string!, and have that reflected back in b?^/```^/>> a: [1 2]^/== [1 2]^/>> b: [3 4]^/== [3 4]^/>> append/only a b^/== [1 2 [3 4]]^/>> a/3: form a/3^/== "3 4"^/>> b^/== [3 4] ; how would I make this a string without a reactor of some sort^/```}
    sent: "2017-05-02T02:19:27.736Z"
    editedAt: "2017-05-02T02:19:53.526Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590791586aea30763d5e3323"
    text: {Yes; that's what it was. Changes to an array element required `on-deep-change`. Cheers. :)}
    sent: "2017-05-01T19:49:44.758Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "59078f7108c00c092ad3b335"
    text: {There is a separate `on-face-deep-change*`, but I haven't use it yet myself.}
    sent: "2017-05-01T19:41:37.835Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59078f0808c00c092ad3b1f4"
    text: {There is a distinction between `on-change` and `on-deep-change` as noted in http://www.red-lang.org/2016/03/060-red-gui-system.html}
    sent: "2017-05-01T19:39:52.194Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59078e4008c00c092ad3affa"
    text: "Do you have an example, actual and expected?"
    sent: "2017-05-01T19:36:32.913Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5907859a8fcce56b2054ba36"
    text: {Whilst I was testing this; I noticed that an on-change event doesn't occur when you change a value in an array. Would that be by design? }
    sent: "2017-05-01T18:59:38.336Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "5907829112d2409935b79507"
    text: {@greggirwin  - Thanks; I've been messing about with that for ages!}
    sent: "2017-05-01T18:46:41.591Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "590782658e4b63533d209df2"
    text: {```^/== [1 2 x 11 y 12]^/>> x: 1  y: 2^/== 2^/>> reduce [data/x data/y]^/== [11 12]^/>> reduce [data/:x data/:y]^/== [1 2]^/```}
    sent: "2017-05-01T18:45:57.583Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590781b98bb56c2d11fed9f0"
    text: {You need to use  get-word! syntax to use the arg values in the path: `[data/:y/:x: value ]`.}
    sent: "2017-05-01T18:43:05.529Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590780b5edf919574a685dd3"
    text: {I'm having a problem setting an object value from a child function. Take the following test code; I can set a value using a path from outside the object, but from within the func it gives a `path data/y/x: is not valid for none! type` message. Am I just missing something obvious here?^/```^/Red []^/grid: object [^/^-data: [ ["A" "B" "C"] ["a" "b" "c"] ]^/^-item: func [ x [integer!] y [integer!] value [string!] ][ data/y/x: value ]^/]^/datagrid: grid^/^/print "Set by path:"^/datagrid/data/2/1: "TwoOne"^/probe datagrid/data^/^/Print "Set by func:"^/datagrid/item 1 2 "OneTwo"^/probe datagrid/data^/```}
    sent: "2017-05-01T18:38:45.113Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "5906a2a1cfec9192728ed16e"
    text: "@x8x, nice research!"
    sent: "2017-05-01T02:51:13.044Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590658c08fcce56b20509197"
    text: {That is just a hack to get the stack trace from R/S to Red level.. I needed to know the caller name to generate a proper error in a function and it suits this pourpuse, not sure how much that is otherwise usefull.. 😁}
    sent: "2017-04-30T21:36:00.517Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59065739881b89e1019f4041"
    text: {@x8x stack trace is possible with that? I'm not so familiar with debug functions in red. Also `trace` was more visible in rebol}
    sent: "2017-04-30T21:29:29.581Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5906560fcfec9192728de795"
    text: {Here is a more generalized version, probably more usefull:^/```^/stack: func [/local error block][^/^-set/any 'error try [make-an-error]^/^-system/state/trace?: on^/^-block: load form error^/^-system/state/trace?: off^/^-remove/part block 12^/]^/^/fun1: func[][fun2]^/fun2: func[][print ["parent:" first back find stack 'fun2]]^/^/fun1^/```^/Result:^/```^/parent: fun1^/```}
    sent: "2017-04-30T21:24:31.835Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "590641f8881b89e1019ef92f"
    text: {Thanks @geekyi and @greggirwin, looks like there is a woodoo solution:^/```^/system/state/trace?: on^/^/self: func [/parent /local error stack][^/^-set/any 'error try [make-an-error]^/^-stack: split form error #" "^/^-pick stack (length? stack) - either parent [6][5]^/]^/^/fun1: func[][fun2]^/fun2: func[][print ["I am" self "and I have been called by" self/parent]]^/^/fun1^/```^/Result:^/```^/I am fun2 and I have been called by fun1^/```^/😃}
    sent: "2017-04-30T19:58:48.203Z"
    editedAt: "2017-04-30T20:00:29.501Z"
    v: 3
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5906191d881b89e1019e6508"
    text: {As we think about how to do tracing and profiling, the evaluator knows when it sees a word that refers to a function, so keeping a list of those, including aggregate counts and runtimes, is all possible in the future. }
    sent: "2017-04-30T17:04:29.071Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590617868e4b63533d1b9dfa"
    text: {@x8x I don't think so, everything is anonymous.. So you can't reference it. You can have more than one word point to a function. But if you're explicit about it, you can get the word right at the time you set it..}
    sent: "2017-04-30T16:57:42.773Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590606b9881b89e1019e1eda"
    text: {Is there a way to know the name of a calling function?}
    sent: "2017-04-30T15:46:01.197Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5905b4128fcce56b204e60a8"
    text: {On the other hand, that might be an advantage if it results in contribution of technical knowledge}
    sent: "2017-04-30T09:53:22.881Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5905b3df6aea30763d5795a6"
    text: {@gltewalt I've thought that too.. I've been wondering if that's the cause of so many antivirus false positives}
    sent: "2017-04-30T09:52:31.302Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5904e243cfec919272893d35"
    text: {@dockimbel  ^/>  Organic growth^/It is a nice definition.}
    sent: "2017-04-29T18:58:11.959Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "5904ceef6aea30763d54d927"
    text: {It will be fun, and all at a very high level. The loader will surely be a target, and macros have to be considered, but think of how many problems go away once you're dealing with data at the block level.}
    sent: "2017-04-29T17:35:43.407Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5904ce8e6aea30763d54d7fe"
    text: {We also have a great weapon on our side: smart Reducers. If we develop a standard data exchange protocol, including tools to create implementations in our apps, our clever community will surely enjoy analyzing the ways it can be attacked, and building utilities to vet systems. We'll also have to be diligent in the core design, learning from E, knowing signing will change over time, and weaknesses exposed. }
    sent: "2017-04-29T17:34:06.963Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5904ca33cfec91927288e22f"
    text: {@greggirwin Interesting idea - design dialect that limits power}
    sent: "2017-04-29T17:15:31.719Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5904c9be6aea30763d54c8ac"
    text: {@dockimbel Sure, they're doing just fine without it. It's just something to consider ahead of time - how to handle that sort of influx if it comes}
    sent: "2017-04-29T17:13:34.892Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5904c895cfec91927288dc35"
    text: {@gltewalt, when I spoke about Red at Code Camp in 2015, a security guy I know was interested in it because of how dialects can make things more secure, and because of the small, auditable code base of the entire toolchain. He's now directory of security at Scentsy. I think about the hacking aspect as well, but our two biggest risks are 1) DOing untrusted data, and 2) things like buffer overflows where people who don't normally write low level code (e.g., me) make mistakes in Red/System. Both things we can solve. Even the case of someone being really tricky in obfuscating things we can mitigate. Design a dialect that limits power, don't include binary! values in it, limit the size of commands. At least that way, you make it harder for them. }
    sent: "2017-04-29T17:08:37.765Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5904bc9c8fcce56b204b7ba5"
    text: {@gltewalt Maybe, but I doubt they need Red for waging cyberwars, they seem to do very well already with existing tools. ;-)}
    sent: "2017-04-29T16:17:32.604Z"
    editedAt: "2017-04-29T16:17:57.612Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5904bbef08c00c092aca21b8"
    text: "@JacobGood1 :clap: "
    sent: "2017-04-29T16:14:39.332Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5904ad55cfec91927288798e"
    text: {It occurred to me that you might get swamped with computer security types (hackers) when Red reaches 1.0^/The size of the binaries will be attractive to Trojan and virus writers and they will also be able to do scripting and networking tricks}
    sent: "2017-04-29T15:12:21.056Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5904abda8e4b63533d171ede"
    text: {I have been promoting it at the school I teach at, hopefully we can get generations of programmers programming in red =)}
    sent: "2017-04-29T15:06:02.748Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59048e9dc1d3b50154314615"
    text: {@maximvl Organic growth, people are linking and mentioning Red and the website more and more in different forums, the frequency of page view peaks is increasing.}
    sent: "2017-04-29T13:01:17.679Z"
    editedAt: "2017-04-29T13:01:52.606Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5904490c587a245e245cf0e3"
    text: {That might be me and @iArnold waiting for the next big thing :-)}
    sent: "2017-04-29T08:04:28.437Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590448ac12d2409935acb7ed"
    text: "did we promote Red anywhere?"
    sent: "2017-04-29T08:02:52.129Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590448938bb56c2d11f3f253"
    text: "the website is getting so many views"
    sent: "2017-04-29T08:02:27.094Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59043e2a6aea30763d52df06"
    text: {I'm taking inspiration from emacs's eshell, it's a shell with almost everything implemented inside emacs and it has quite nice features}
    sent: "2017-04-29T07:18:02.141Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59043df008c00c092ac86f91"
    text: {@9214 ^/>why just don't use call with shell commands?^/^/Because you cannot nicely integrate Red code / datatypes with it}
    sent: "2017-04-29T07:17:04.687Z"
    editedAt: "2017-04-29T07:18:30.892Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5903bb206aea30763d516797"
    text: {Remember that it's early days for non-WIndows GUIs. Because of how menus work across systems, the team may have wanted to get more real world experience before committing to a higher level menu action design.}
    sent: "2017-04-28T21:58:56.199Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5903ba788fcce56b20486472"
    text: "oh :("
    sent: "2017-04-28T21:56:08.178Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5903b9d38bb56c2d11f250de"
    text: "Not currently."
    sent: "2017-04-28T21:53:23.716Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5903b9b5587a245e245b467f"
    text: {I am asking because an on-click for a button is so straight forward, whatever block follows the declaration is immediately assumed to be it's handler.}
    sent: "2017-04-28T21:52:53.785Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5903b95c8e4b63533d141630"
    text: "http://www.red-by-example.org/#0on-menu"
    sent: "2017-04-28T21:51:24.031Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5903b92c12d2409935ab1f52"
    text: {Is there a way to to menu events  like `on-menu` without using actors?}
    sent: "2017-04-28T21:50:36.242Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "590363bbd32c6f2f094d1365"
    text: "@9214 reveals the secret :shipit: "
    status: true
    sent: "2017-04-28T15:46:03.190Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590363a5d32c6f2f094d121c"
    text: "`/me` also try `s/reveals/shows/`"
    sent: "2017-04-28T15:45:41.952Z"
    editedAt: "2017-04-28T15:47:07.469Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "590363a16aea30763d4fe2a6"
    text: "@9214 wonders"
    sent: "2017-04-28T15:45:37.492Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590363988fcce56b2046f461"
    text: {how do you make those violet color self-references? :D}
    sent: "2017-04-28T15:45:28.131Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590362f8cfec919272842520"
    text: {@geekyi realises`s//` substitution cannot work with `/`}
    status: true
    sent: "2017-04-28T15:42:48.106Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590362a2d32c6f2f094d0d60"
    text: "`call/shell` I mean"
    sent: "2017-04-28T15:41:22.988Z"
    editedAt: "2017-04-28T15:41:56.613Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59036286f22385553d86b926"
    text: "`shell` only works on windows last I checked"
    sent: "2017-04-28T15:40:54.772Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590361f7c1d3b501542d4a23"
    text: {though `shell` dialect could be nice wrapper over `call` stuff}
    sent: "2017-04-28T15:38:31.106Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590361958fcce56b2046eabc"
    text: {@maximvl why just don't use `call` with shell commands?}
    sent: "2017-04-28T15:36:53.742Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5903616908c00c092ac575fe"
    text: "we'll see if it's useful or not"
    sent: "2017-04-28T15:36:09.184Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590361558e4b63533d129c60"
    text: {@geekyi `call` runs external program, while I want to make a `shell` functions in Red and have a dialect which works flawlessly with files & stuff}
    sent: "2017-04-28T15:35:49.557Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59034ff4cfec91927283cbab"
    text: "@maximvl cool! How does it compare to `call`? "
    sent: "2017-04-28T14:21:40.569Z"
    editedAt: "2017-04-28T14:22:47.556Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59030fa78fcce56b20457fe7"
    text: {Yes. Once the compiler is self-hosted macros in both the console and the compiler will run in the Red interpreter.}
    sent: "2017-04-28T09:47:19.342Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59030ee912d2409935a82dee"
    text: {@PeterWAWood I mean that it will work in the same way}
    sent: "2017-04-28T09:44:09.459Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "59030ea98fcce56b20457c0e"
    text: {@PeterWAWood so this will be changed when compiler will be self-hosted}
    sent: "2017-04-28T09:43:05.616Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "59030d8708c00c092ac3e68d"
    text: {@Pdelak Here is the code that will work as a macro under the compiler:^/```text^/Red[]^/#do [  ^/  invoke: func[f] [f]^/]^/#macro test: function []^/[^/  f1: func[] [print "hello"]^/  invoke :f1^/  []^/]^/test^/print "success"^/```}
    sent: "2017-04-28T09:38:15.262Z"
    editedAt: "2017-04-28T09:39:28.389Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59030cb18fcce56b20457405"
    text: {@PDelak There is one important point that I was overlooking. Compiled macros are run under Rebol2 whilst interpreted macros run under Red. This is explained in the [implementation note](https://doc.red-lang.org/en/preprocessor.html#_implementation_note).}
    sent: "2017-04-28T09:34:41.192Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590305b8c1d3b501542b8d1c"
    text: {That's good ... I'm still puzzled that ```reduce [] f``` evaluates f in the macro and ```reduce f``` gives a compile error.}
    sent: "2017-04-28T09:04:56.942Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5903020a12d2409935a7f1a9"
    text: "wrapping code within do block works :smile: "
    sent: "2017-04-28T08:49:14.918Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "5903015f881b89e10193de68"
    text: {```^/#macro test: function []^/[^/  foo1: func[] [print "hello"]^/  invoke :foo1^/  return []^/]^/```}
    sent: "2017-04-28T08:46:23.094Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "590301248bb56c2d11ef0d9f"
    text: {```^/#do [  ^/  invoke: func[f] [reduce [] f]^/]^/```}
    sent: "2017-04-28T08:45:24.687Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "590301126aea30763d4e11d7"
    text: "well, I wanted do exactly the same thing so, "
    sent: "2017-04-28T08:45:06.686Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "590300b6f22385553d84e432"
    text: "Is it possible for you to post your macro here?"
    sent: "2017-04-28T08:43:34.363Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5903007f12d2409935a7eb65"
    text: {This code:^/```text^/Red[]^/my-func: func [] [print "hello"] ^/invoke: func [f] [reduce [] f]^/print type? invoke :my-func ^/```^/produces this when compiled and executed:^/```text^/function^/```}
    sent: "2017-04-28T08:42:39.698Z"
    editedAt: "2017-04-28T08:42:49.069Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5902ffa2d32c6f2f094b49ee"
    text: "[] reduces to []"
    sent: "2017-04-28T08:38:58.171Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5902ff888e4b63533d10dba0"
    text: {That doesn't make much sense to me as that code reduces [] and returns f.}
    sent: "2017-04-28T08:38:32.086Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5902fae5c1d3b501542b59a7"
    text: "```^/invoke: func[f] [reduce [] f]^/```"
    sent: "2017-04-28T08:18:45.533Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "5902fac8881b89e10193c374"
    text: {@PeterWAWood  The other thing is that to use it in macro I had to do}
    sent: "2017-04-28T08:18:16.903Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "5902f9988e4b63533d10c2e3"
    text: {@PDelak Yes, it seems that you need to wrap all the code within a do block. I should have checked in the compiler not the console :-(^/}
    sent: "2017-04-28T08:13:12.214Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5902f54e587a245e2457cad8"
    text: "@PeterWAWood reduce works, but do does not. Thx"
    sent: "2017-04-28T07:54:54.108Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "59028df96aea30763d4c8894"
    text: {`To block!` info would be good to add to red-by-example.}
    sent: "2017-04-28T00:34:01.761Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59028df608c00c092ac21b8b"
    text: ":worried: "
    sent: "2017-04-28T00:33:58.542Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59028ddcf22385553d834bda"
    text: {Yes, though broken currently per notes in red/red.}
    sent: "2017-04-28T00:33:32.837Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59028db08fcce56b2043caeb"
    text: "Is your new help ready yet?"
    sent: "2017-04-28T00:32:48.439Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59028d9e6aea30763d4c878c"
    text: {That is, you have to learn how `to` will behave with different types.}
    sent: "2017-04-28T00:32:30.849Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59028d84d32c6f2f0949c91f"
    text: {OK, you do have to know that `to block!` will `load` a string.}
    sent: "2017-04-28T00:32:04.267Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59028d02f22385553d834960"
    text: "Should it matter? I believe help only says value"
    sent: "2017-04-28T00:29:54.132Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59028cdb8e4b63533d0f5253"
    text: {```^/>> to block! "a b c"^/== [a b c]^/```}
    sent: "2017-04-28T00:29:15.325Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59028cb8cfec91927280c3b4"
    text: {It's not a string once you load it, which `to-block!` does.}
    sent: "2017-04-28T00:28:40.055Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59028c97c1d3b5015429dca9"
    text: {Nothing in help that says "first char of a string can't be a number"}
    sent: "2017-04-28T00:28:07.387Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59028c3f8fcce56b2043c81b"
    text: "Uhh, yeah. Expected no syntax error"
    sent: "2017-04-28T00:26:39.469Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59028bcc8fcce56b2043c727"
    text: {Did you expect something different?^/```^/>> [4-ok]^/*** Syntax Error: invalid integer! at "4-ok]"^/*** Where: do^/```}
    sent: "2017-04-28T00:24:44.769Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59028a308fcce56b2043c125"
    text: {```^/>> to-block "a-ok"^/== [a-ok]^/>> to-block "4-ok"^/*** Syntax Error: invalid integer! at "4-ok"^/*** Where: do^/>> to-block "ok-a"^/== [ok-a]^/>> to-block "ok-4"^/== [ok-4]^/```}
    sent: "2017-04-28T00:17:52.190Z"
    editedAt: "2017-04-28T00:19:55.840Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59026efb8bb56c2d11ed1e99"
    text: {```reduce``` will also cause the function to be evaluated:^/```text^/>> invoke: func [f] [reduce f]^/== func [f][reduce f]^/>> invoke :my-func^/hello^/```}
    sent: "2017-04-27T22:21:47.787Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59026eba8e4b63533d0eed56"
    text: {@PDelak The current compiler doesn't support such code. I'm not sure in which version such support is planned. The work around is to get the function evaluated by the runtime:^/```text^/>> my-func: func [] [print "hello"] ^/== func [][print "hello"]^/>> invoke: func [f] [do f]^/== func [f][do f]^/>> invoke :my-func^/hello^/``` }
    sent: "2017-04-27T22:20:42.421Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "590268f612d2409935a5ec79"
    text: "@PDelak I don't know about compilation, sorry =\"
    sent: "2017-04-27T21:56:06.172Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5902584f6aea30763d4bc638"
    text: "but works from the console"
    sent: "2017-04-27T20:45:03.372Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "590258476aea30763d4bc627"
    text: {```^/foo: func[] [^/  print "hello"^/]^/^/invoke: func[f] [f]^/^/invoke :foo^/```}
    sent: "2017-04-27T20:44:55.036Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "5902581e8e4b63533d0e8ff6"
    text: "below example does not print hello"
    sent: "2017-04-27T20:44:14.809Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "590257c1587a245e2455a3ef"
    text: "1 2 3"
    sent: "2017-04-27T20:42:41.890Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "59025780d32c6f2f0948fa10"
    text: {hmm, strange. that works from console, but after compilation i'm receiving different result}
    sent: "2017-04-27T20:41:36.773Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "590252bb08c00c092ac13ac2"
    text: {@PDelak you can pass any value and function is not an exception:^/```^/>> apply: func [f arg] [f arg]^/== func [f arg][f arg]^/>> apply :first [1 2 3]^/== 1^/```}
    sent: "2017-04-27T20:21:15.254Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590251156aea30763d4ba667"
    text: {is passing functions as arguments already implemented? seems that does not work for me (or i don't know how to do that)}
    sent: "2017-04-27T20:14:13.769Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "59024a248bb56c2d11ec7feb"
    text: {np, the idea of adding a `shell` dialect was in my head for a long time, it seems now I understand Red enough to implement it :)}
    sent: "2017-04-27T19:44:36.726Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590249ee881b89e10191494b"
    text: "Cool. Thanks Maxim."
    sent: "2017-04-27T19:43:42.180Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590249db8e4b63533d0e50c4"
    text: {I'll make it usable and publish code on the weekend}
    sent: "2017-04-27T19:43:23.905Z"
    editedAt: "2017-04-27T19:43:25.779Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590249798fcce56b2042cbae"
    text: "Yeah!"
    sent: "2017-04-27T19:41:45.189Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5902493d8e4b63533d0e4e3a"
    text: {check this out :D^/```^/>> shell [ls %/ | grep "i"]^/== [%initrd.img %sbin/ %lib64/ %vmlinuz %bin/ %media/ %lib/]^/```}
    sent: "2017-04-27T19:40:45.736Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59024756d32c6f2f0948b41b"
    text: {ANTLR is useful for tooling ideas, and also for general language design and implementation. Somewhere between the simple dialects we do most of the time, and Red-in-Red at the far end of the complexity spectrum, I think it will be good to provide examples of how to build different types of languages in Red. Red could be *the* language for teaching language design and implementation.}
    sent: "2017-04-27T19:32:38.082Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59023c44881b89e10191033f"
    text: "thanks for other books "
    sent: "2017-04-27T18:45:24.459Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59023c3e08c00c092ac0cde8"
    text: {@greggirwin I doubt ANTLR is useful for making DSLs in Red, and I've read masterminds of programming already}
    sent: "2017-04-27T18:45:18.646Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59023c1a8fcce56b20428d74"
    text: {keep rule^-: append a copy of the matched input to the collecting block.^/^/I would assume if the rule is successful, keep the matched input to the rule}
    sent: "2017-04-27T18:44:42.963Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "59023bc4587a245e245526e3"
    text: {@greggirwin hm, does it mean `keep` will actually match next pattern and keep it only if it was successful?}
    sent: "2017-04-27T18:43:16.513Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5902222e881b89e1019078ca"
    text: ":+1: for Brodie"
    sent: "2017-04-27T16:54:06.095Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5902123608c00c092ac0029c"
    text: {@maximvl, there are a few books on DSLs. Which are good depends on what you want to learn. Martin Fowler's `Domain Specific Languages` is big, and like a Design Patterns book for DSLs. Technical info too, targeted at a broad audience. `DSLs in Boo` is smaller and more relaxed, with some nice sections to explain things to those not familiar with the concept, all in the context of the author's Boo language, which is .NET based. `Language Implementation Patterns` and an ANTLR reference are good choices. Terrence Parr is deeply technical, so more suited to building more capable DSLs, but also good to think about what tools we'll want to build. The Brodie books on Forth are good, for thinking about building vocabularies. There are a lot of other compiler books as well, some of which aren't too deep. A different book that I really enjoyed is `Masterminds of Programming` which is interviews with language designers. }
    sent: "2017-04-27T15:45:58.912Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59020e0ec1d3b5015427930f"
    text: {@maximvl, isn't that what your 'first parse example does, correctly?^/```^/>> parse [a] [collect [keep 'a]]^/== [a]^/>> parse [b] [collect [keep 'a]]^/== []^/```}
    sent: "2017-04-27T15:28:14.250Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5901bb4af22385553d7f875c"
    text: {@rpherman Cool! Thank you for reporting the issue in the first place. ;-)}
    sent: "2017-04-27T09:35:06.384Z"
    editedAt: "2017-04-27T09:35:33.366Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5901bb2c8bb56c2d11e9af13"
    text: {@dockimbel Thanks for updating the libRed.dll for the Excel Pong demo! It runs great, and is a great demo to show my friends interested in Red. Thanks again!}
    sent: "2017-04-27T09:34:36.355Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "5901b5a26aea30763d48bcee"
    text: {Yeah, dialect is "internal", while most of the books We've seen are about "external" ones, that's what I meant.}
    sent: "2017-04-27T09:10:58.809Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5901b4ff8bb56c2d11e9923d"
    text: "dialect is embedded DSL, this is what he said"
    sent: "2017-04-27T09:08:15.357Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5901b4d4d32c6f2f0945ff42"
    text: {@9214 https://gitter.im/red/red?at=58f7781e8bb56c2d11c1c2d0}
    sent: "2017-04-27T09:07:32.288Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5901b3e5d32c6f2f0945fafa"
    text: {though, Redbol dialect ain't "normal" string-based DSL as Nenad explained some time ago}
    sent: "2017-04-27T09:03:33.352Z"
    editedAt: "2017-04-27T09:11:21.263Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5901b3b38fcce56b203ffe97"
    text: {:point_up: [17 апреля 2017 г., 20:15](https://gitter.im/red/docs?at=58f4dc2a8bb56c2d11b707bc) this one seems to be about "external things" too}
    sent: "2017-04-27T09:02:43.109Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5901b349cfec9192727cedb9"
    text: "http://beautifulracket.com/"
    sent: "2017-04-27T09:00:57.188Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5901b348d32c6f2f0945f77a"
    text: {there is a part dedicated to DSL design, hopefully it will be applicable to Red}
    sent: "2017-04-27T09:00:56.325Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5901b335587a245e24528d31"
    text: {hm, perhaps something from Racket land should do...}
    sent: "2017-04-27T09:00:37.661Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5901b3248fcce56b203ffbea"
    text: "@9214 I'm reading it right now, same thing"
    sent: "2017-04-27T09:00:20.214Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5901b2fa8bb56c2d11e986b8"
    text: {@maximvl :point_up: [27 апреля 2017 г., 13:34](https://gitter.im/red/docs?at=5901ad31cfec9192727cd1f7) hivemind heard you even before you spoke :bee: }
    sent: "2017-04-27T08:59:38.917Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5901b2bad32c6f2f0945f585"
    text: {@dockimbel btw, could you recommend any guide/book on DSLs? I saw few, they are focused on external DSLs and different tools to generate parsers and grammars, which are not relevant for Red}
    sent: "2017-04-27T08:58:34.483Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5901b269881b89e1018e58c2"
    text: {@greggirwin I want `parse` to return `[a]` if the first element is `a` and empty thing otherwise, using `collect/keep`}
    sent: "2017-04-27T08:57:13.503Z"
    editedAt: "2017-04-27T08:57:26.443Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59019abc8e4b63533d0b030b"
    text: {@dockimbel @Phryxe The ticket concerning `put` on `any-string` is #1960}
    sent: "2017-04-27T07:16:12.148Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "590172f1f22385553d7e5e56"
    text: {I just updated the code to use an `if` construct instead.}
    sent: "2017-04-27T04:26:25.706Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59017244881b89e1018d5fe8"
    text: "I find it easier to read and it saves one block."
    sent: "2017-04-27T04:23:32.261Z"
    editedAt: "2017-04-27T04:23:37.180Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590171fd8fcce56b203f0876"
    text: {@maximvl ^/`all [pair? o: left/extra left/offset: left/offset + o / 2]` is equivalent to:^/`if pair? o: left/extra [left/offset: left/offset + o / 2]`^/^/It's probably the result of an unfinished refactoring, as I tend to use such construction more and more often in cases like:^/`if all [expr1 expr2][expr3]` => `all [expr1 expr2 expr3]`}
    sent: "2017-04-27T04:22:21.096Z"
    editedAt: "2017-04-27T04:22:38.574Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590171d512d2409935a193d1"
    text: {@dockimbel OK, thnx. Sorry if I bring up things that are obvious to hardcore Redbolers.}
    sent: "2017-04-27T04:21:41.316Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "590170b46aea30763d47b423"
    text: {@Phryxe Strings don't have a key/value concept, so that why it was not implemented initially. Though, as `select` is allowed on strings, it would be consistent to allow `put` too (I think there's a ticket about that).}
    sent: "2017-04-27T04:16:52.367Z"
    editedAt: "2017-04-27T04:16:59.244Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5901529d12d2409935a13098"
    text: {@RnBrgn, yes. Red/System has FFI today, and Red will have it soon.}
    sent: "2017-04-27T02:08:29.041Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59015282d32c6f2f09449c32"
    text: {@maximvl, what result are you looking for? The first one is "normal".}
    sent: "2017-04-27T02:08:02.932Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5901446a8bb56c2d11e800e7"
    text: {am I doing this wrong? how can I `collect` only on specific match?^/```^/>> parse [a] [collect [keep 'a]]^/== [a]^/>> parse [a] ['a collect [keep 'a]]^/== []^/>> parse [a] [collect ['a keep 'a]]^/== []^/```}
    sent: "2017-04-27T01:07:54.407Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59014433f22385553d7dc836"
    text: "@dander I see, looks like you are right :)"
    sent: "2017-04-27T01:06:59.624Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5901399c6aea30763d470dd2"
    text: {@maximvl `all` short-circuits execution, so it looks like a type-safety check there. If left/extra is not the correct type, it won't do the addition of the `offset` and `extra` fields. At least that's my take on it...}
    sent: "2017-04-27T00:21:48.168Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "590133e708c00c092abc7635"
    text: {why do you need `all` there? you don't check the result anyway}
    sent: "2017-04-26T23:57:27.599Z"
    editedAt: "2017-04-26T23:57:34.935Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590133b68fcce56b203e44f5"
    text: {@dockimbel could you explain this line in the worm reactive example? ^/https://gist.github.com/dockimbel/2d95c8c85e5bfed71bd1c15294ee77c5#file-worm-red-L19}
    sent: "2017-04-26T23:56:38.744Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590125e78fcce56b203e16c4"
    text: {Would Red have the capability to import libraries from other languages ?}
    sent: "2017-04-26T22:57:43.130Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5901122bf22385553d7d0ad0"
    text: {@9214 I have a gist with a fix function, courtesy of Gregg}
    sent: "2017-04-26T21:33:31.434Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "5900baca12d24099359e9520"
    text: "@greggirwin nice! :clap: "
    sent: "2017-04-26T15:20:42.450Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5900ba0bd32c6f2f09421090"
    text: {```^/make-spec: func [words [block!]] [^/^-forall words [words/1: to set-word! words/1]^/^-append words none^/]^/set o: context make-spec [a b c] [1 2]^/```}
    sent: "2017-04-26T15:17:31.030Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900b9f48fcce56b203c142b"
    text: {@9214, yes on `construct`, specifically blocks in spec block format.}
    sent: "2017-04-26T15:17:08.725Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900b28308c00c092aba1a94"
    text: {anyway, docstrings are misleading IMO, it clearly says `series!` and `series? "string" ; true`}
    sent: "2017-04-26T14:45:23.028Z"
    editedAt: "2017-04-26T14:45:31.656Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5900b2408bb56c2d11e563e0"
    text: "@9214 Maybe it is something to be done later ..."
    sent: "2017-04-26T14:44:16.168Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5900b1f1881b89e1018a3093"
    text: {@Phryxe that's what I call cognitive dissonance! :O}
    sent: "2017-04-26T14:42:57.781Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5900b1868bb56c2d11e55e01"
    text: {I think someone mentioned it long time ago, but can't remember}
    sent: "2017-04-26T14:41:10.525Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5900b1848fcce56b203be8f4"
    text: {`*** Script Error: put does not allow string! for its series argument`!?}
    sent: "2017-04-26T14:41:08.682Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5900b16e881b89e1018a2cdb"
    text: {and what if I want something like: `somehow-make-object [a b c] [1 2] --> make object! [a: 1 b: 2 c: none]` ?}
    sent: "2017-04-26T14:40:46.871Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5900b0f68bb56c2d11e559e1"
    text: {`construct` is for bulding objects from blocks, right?}
    sent: "2017-04-26T14:38:46.877Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5900ae2612d24099359e4d55"
    text: {```^/>> options: [token: #blahblah a: 3 b: 'd c: 3]^/== [token: #blahblah a: 3 b: 'd c: 3]^/>> new-line/skip options on 2^/== [^/    token: #blahblah ^/    a: 3 ^/    b: 'd ^/    c: 3^/]^/```}
    sent: "2017-04-26T14:26:46.102Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900ae026aea30763d447b26"
    text: "Sorry, use `/skip`"
    sent: "2017-04-26T14:26:10.707Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900adb608c00c092ab9fe9a"
    text: "`new-line/all body-of xxx on`"
    sent: "2017-04-26T14:24:54.858Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900ad98881b89e1018a12e9"
    text: {```^/>> to-block options^/== [token: #blahblah a: 3 b: 'd c: 3]^/```}
    sent: "2017-04-26T14:24:24.709Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5900ad758e4b63533d072043"
    text: {`body-of` or `to-block`, but then you don't get nice *newlines*}
    sent: "2017-04-26T14:23:49.224Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5900acab8bb56c2d11e5437c"
    text: {It's nested objects that leak out to users, which isn't nice. That's when you end up with custom loaders.}
    sent: "2017-04-26T14:20:27.165Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900ac87c1d3b501542194cc"
    text: {Which means building a spec-block-merge func that works like `construct`. Or maybe just `construct` and saving `body-of` will work well in Red. }
    sent: "2017-04-26T14:19:51.760Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900abfccfec91927278928c"
    text: {However, Red gives us much better support for spec block format, in direct use, so I'll have to see if I want to change from objects. It's more of a pain to save configs back out in a nice format for humans (spec block without the brackets).}
    sent: "2017-04-26T14:17:32.958Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900ab9cf22385553d7af825"
    text: {There's no best way, but I often use `construct/with`. Safer and more controlled than just `do`.}
    sent: "2017-04-26T14:15:56.427Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900ab4e8e4b63533d07148f"
    text: {What's the best way to load options?^/```red^/>> options: construct load %options.red^/== make object! [^/    token: #blahblah^/]^/```}
    sent: "2017-04-26T14:14:38.405Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590078808fcce56b203ac6b2"
    text: {```^/>> x: [1 2]^/== [1 2]^/>> put x "a" some@ema.il^/== some@ema.il^/>> x^/== [1 2 "a" some@ema.il]^/```}
    sent: "2017-04-26T10:37:52.519Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59007457cfec9192727775af"
    text: {I see, in the block!, `6` is added as a key of `9`, so `select x 6` works}
    sent: "2017-04-26T10:20:07.016Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59005884587a245e244c756a"
    text: "@dockimbel OK, thnx."
    sent: "2017-04-26T08:21:24.377Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5900587d8bb56c2d11e3a4ab"
    text: {Does not add to objects though, because they can't be extended.}
    sent: "2017-04-26T08:21:17.917Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900583a587a245e244c740e"
    text: {@Phryxe The docstring for `put` is not accurate enough, it should say: "Replaces, or adds...". Moreover `put` does not rely on indexes, but key-matching, `poke` is the one relying on an index.}
    sent: "2017-04-26T08:20:10.451Z"
    editedAt: "2017-04-26T08:21:57.716Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590057dd08c00c092ab85a28"
    text: {```^/>> x: [1 2 3 4 5]^/== [1 2 3 4 5]^/>> put x 6 9^/== 9^/>> x^/== [1 2 3 4 5 6 9]^/```^/I wonder why 6 is added. I thought I would get out of index or something.}
    sent: "2017-04-26T08:18:37.018Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58ff7ddc12d24099359939b2"
    text: "`system/lexer/pre-load`"
    sent: "2017-04-25T16:48:28.843Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff7d7c6aea30763d3f6012"
    text: "Are there 'on load' equivalent functions?"
    sent: "2017-04-25T16:46:52.597Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ff7cce8fcce56b2036bb67"
    text: {So they need to cross the macro context boundary somehow, correct?}
    sent: "2017-04-25T16:43:58.052Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff7c1e8e4b63533d0217a8"
    text: {yes, and be able to include macros from other files}
    sent: "2017-04-25T16:41:02.712Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ff7bf68bb56c2d11e03213"
    text: {So you want to be able to include the funcs, and have them available both for macro and regular use, correct?}
    sent: "2017-04-25T16:40:22.723Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff5d0f8fcce56b20361980"
    text: {If I include a macro from another file, it does not seem to work. Red reports that it does not have a value}
    sent: "2017-04-25T14:28:31.883Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ff5c56c1d3b501541baabf"
    text: {As of right now, I have to repeat all those functions in a #do directive, unless I am not understanding something. Allowing an include would be great, then we could use any user defined function in the definition of macros. This would get us closer parity with lisp}
    sent: "2017-04-25T14:25:26.344Z"
    editedAt: "2017-04-25T14:26:21.205Z"
    v: 3
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ff40c1587a245e2447b246"
    text: {@dockimbel the file is a bunch of functions that I use for other code, I was interested in being able to use those functions with a macro as well}
    sent: "2017-04-25T12:27:45.493Z"
    editedAt: "2017-04-25T12:28:03.142Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ff3f228fcce56b203590ce"
    text: {@JacobGood1 Ah, that's an interesting use-case, I think support for `#include` could be added in `#do` body. Though, why don't you move the `#do` inside the included file?}
    sent: "2017-04-25T12:20:50.101Z"
    editedAt: "2017-04-25T12:21:44.829Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff35a308c00c092ab373bf"
    text: "group-by-newline is in the utilities"
    sent: "2017-04-25T11:40:19.309Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ff358b6aea30763d3df8de"
    text: {@dockimbel^/I place an include file in #do [...] it seems that the macro cannot access what is in that file^/```^/#do [^/    #include %utilities.red^/    ^/]^/^/#macro ->: func [obj code]^/[^/    group-by-newline code^/]^/```}
    sent: "2017-04-25T11:39:55.622Z"
    editedAt: "2017-04-25T11:40:47.927Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fef992d32c6f2f093a6ddf"
    text: {@rpherman I've pushed a fresh version in tests/libred folder, please give it a new try.}
    sent: "2017-04-25T07:24:02.046Z"
    editedAt: "2017-04-25T07:24:07.081Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fef324f22385553d733f52"
    text: {@rpherman I can reproduce the crash, so the provided binary is faulty.}
    sent: "2017-04-25T06:56:36.012Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fee9cf8fcce56b203423e6"
    text: {@dockimbel Thanks! How can I enter the debugger after Excel crashes? I'd prefer you do more important things! }
    sent: "2017-04-25T06:16:47.130Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58fed71f881b89e10181fa54"
    text: {@rpherman Excel includes a full VBA IDE with a debugger. I will retest it here to confirm that the libRed binary provided in the repo is working fine.}
    sent: "2017-04-25T04:57:03.282Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fed5fd6aea30763d3c8427"
    text: {@dockimbel @geekyi I still can't figure out why the Pong example crashes Excel on two different computers and Excel versions. Console and Extract work as demonstrated. Is there a debugger for the VBA? Can I get a return from Red? }
    sent: "2017-04-25T04:52:13.376Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58fed40c12d240993596392e"
    text: {This should work:^/```lisp^/view [field button 100x50 "hello" on-click [do face/parent/pane/1/data ] ]^/```^/It avoids naming the field to keep the code re-entrant. You can copy/paste its own source code into the field and create a new instance of the app. @maximvl would that be useful for your presentation (you can name it "inception-style world building in a tweet" ;-))?}
    sent: "2017-04-25T04:43:56.011Z"
    editedAt: "2017-04-25T04:47:53.317Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fed39412d2409935963742"
    text: {@AlexanderBaggett In your event handler `face` refers to the button, not the field.}
    sent: "2017-04-25T04:41:56.225Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fed28012d2409935963441"
    text: {@JacobGood1 ^/> Can we use user defined functions in macros now?^/^/Not sure what you mean, but you can put arbitrary code in `#do [...]` and it will be accessible by any macro function.}
    sent: "2017-04-25T04:37:20.798Z"
    editedAt: "2017-04-25T04:37:36.189Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fed1c808c00c092ab1dfcf"
    text: {:point_up: [25 апреля 2017 г., 09:32](https://gitter.im/red/help?at=58fed15808c00c092ab1dd68) @dockimbel @qtxie source code link in article is broken, should be: https://github.com/red/code/blob/master/Showcase/simple-clock.red}
    sent: "2017-04-25T04:34:16.217Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fed177881b89e10181eabe"
    text: {hm, 404 :confused: https://github.com/red/code/blob/0.6.2/Showcase/simple-clock.red}
    sent: "2017-04-25T04:32:55.858Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fed15808c00c092ab1dd68"
    text: {@AlexanderBaggett http://www.red-lang.org/2016/07/eve-style-clock-demo-in-red-livecoded.html}
    sent: "2017-04-25T04:32:24.927Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fed0d6f22385553d72c8c5"
    text: {@AlexanderBaggett, look up the live code demos from Doc and DideC.}
    sent: "2017-04-25T04:30:14.409Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fed0b8587a245e2445d9c5"
    text: "@toomasv, unless Red is the beauty revealed. :^^)"
    sent: "2017-04-25T04:29:44.476Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58fecc686aea30763d3c659a"
    text: {:point_up: [April 24, 2017 9:47 PM](https://gitter.im/red/help?at=58fe4841587a245e2443eb7a)^/If the Guru were true to this maxim, he would never build Red :)}
    sent: "2017-04-25T04:11:20.220Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58febfa28bb56c2d11dcf07c"
    text: {But ideally, I should be able to paste in the same code I used to create the gui into the field and run it to create it again :)}
    sent: "2017-04-25T03:16:50.972Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58febf22d32c6f2f0939a936"
    text: {maybe` reduce` isn't quite what I want here for this}
    sent: "2017-04-25T03:14:42.375Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58febef78bb56c2d11dcee8e"
    text: {I am trying something like this: ^/^/```^/view [field button 100x50 "hello" on-click [reduce face/data ]  ]^/^/```^/^/}
    sent: "2017-04-25T03:13:59.896Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58febeaf8e4b63533dfedaca"
    text: {Not able to get it to work though, could use some help}
    sent: "2017-04-25T03:12:47.404Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58febe9a8bb56c2d11dced28"
    text: {I know this is a little meta, but as a fun little experiment I am trying to put some text in the REPL to make a GUI that can evaluate the text as code to make a GUI.}
    sent: "2017-04-25T03:12:26.845Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58fea2b908c00c092ab14f85"
    text: {I asked this earlier but I am not sure if anyone saw it:^/^/Can we use user defined functions in macros now?}
    sent: "2017-04-25T01:13:29.049Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe84448e4b63533dfe207e"
    text: {or a little shorter with this^/```^/if (if new-line? code [new-line code false])^/```}
    sent: "2017-04-24T23:03:32.593Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe81398bb56c2d11dc2e4a"
    text: {```^/group-by-newline: function [blk [block!]] [^/    find-new-line: [^/        code: if (new-line? code) (new-line code false) ^/        | ^/        end ^/        | ^/        skip find-new-line^/    ]^/    if new-line? blk [new-line blk false]^/    parse blk [collect [some [keep find-new-line]]]^/]^/```^/yay!^/^/}
    sent: "2017-04-24T22:50:33.550Z"
    editedAt: "2017-04-24T22:51:00.039Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe7b14cfec9192726f5a78"
    text: "@JacobGood1 you're welcome"
    sent: "2017-04-24T22:24:20.632Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe7a72d32c6f2f0938ce3e"
    text: "Thanks @rebolek "
    sent: "2017-04-24T22:21:38.278Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe783608c00c092ab0c47a"
    text: {```^/>> b: [1 2]^/== [1 2]^/>> parse b [integer! p: if (new-line? p) to end]^/== false^/>> new-line next b true^/== [^/    2^/]^/>> parse b [integer! p: if (new-line? p) to end]^/== true^/```}
    sent: "2017-04-24T22:12:06.804Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe78318fcce56b2032b582"
    text: {@JacobGood1 BUT, if you really want to parse for it...}
    sent: "2017-04-24T22:12:01.581Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe77da12d2409935950cc0"
    text: "You can check for it with `new-line?` function."
    sent: "2017-04-24T22:10:34.159Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe77bdcfec9192726f4eb1"
    text: "Just one bit."
    sent: "2017-04-24T22:10:05.848Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe779fcfec9192726f4ded"
    text: "Actually, new-line is a value's flag."
    sent: "2017-04-24T22:09:35.203Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe778a8fcce56b2032b0e0"
    text: {@JacobGood1 exactly, new-line is not a type and you cannot parse for it.}
    sent: "2017-04-24T22:09:14.920Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe773e8bb56c2d11dc0e40"
    text: {@rebolek since new-line is not a type I cannot parse for it, that is what you are saying?}
    sent: "2017-04-24T22:07:58.818Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe76b3587a245e2444b1c9"
    text: "now I see what you mean"
    sent: "2017-04-24T22:05:39.533Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fe764b12d24099359506a5"
    text: {I do not know what you mean, there is a new-line at 1 and 4}
    sent: "2017-04-24T22:03:55.448Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe757a6aea30763d3b48fa"
    text: "There is no hidden new-line that you can match."
    sent: "2017-04-24T22:00:26.173Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe755b8e4b63533dfdedb2"
    text: "It can't."
    sent: "2017-04-24T21:59:55.028Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe74e08fcce56b2032a83a"
    text: {^/This^/```^/parse [^/        hi there sally^/        how are you^/] [to new-line code: (probe code)]^/```^/does not work^/^/^/}
    sent: "2017-04-24T21:57:52.780Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe748ef22385553d71a4cf"
    text: {but what is the difference? why do you want it to be a type?}
    sent: "2017-04-24T21:56:30.531Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fe746012d24099359500cc"
    text: {@JacobGood1 you can't parse for new-line, it is not separate type.}
    sent: "2017-04-24T21:55:44.913Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe7410c1d3b50154180c2f"
    text: {I don't get it, could you give an example of what you are parsing?}
    sent: "2017-04-24T21:54:24.230Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fe73ecc1d3b50154180bd5"
    text: "> instead of strings?^/=P"
    sent: "2017-04-24T21:53:48.673Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe73c008c00c092ab0b35e"
    text: {I think you can use^/```^/red>> newline^/== #"^^/"^/```}
    sent: "2017-04-24T21:53:04.432Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fe738e12d240993594fe8f"
    text: {is there a new-line type for parsing code instead of strings?^/```^/new-line! [code: if (new-line? code)]^/parse some-code [to new-line!]^/```}
    sent: "2017-04-24T21:52:14.627Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe5c6512d2409935949b46"
    text: {You could use pattern matching macros with some gen sym magic =)}
    sent: "2017-04-24T20:13:25.759Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fe53d7881b89e101803989"
    text: {Blocks are malleable and the spec and body are both blocks}
    sent: "2017-04-24T19:36:55.114Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fe4ad26aea30763d3a9221"
    text: "Could morph body based on spec, I suppose"
    sent: "2017-04-24T18:58:26.690Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fe498ef22385553d70ebc2"
    text: {Or maybe "Don't fight the Universe. The Universe is very big. Instead, say 'Yes' to what the Universe brings you." -- Guru Meditation}
    sent: "2017-04-24T18:53:02.754Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe48bc8fcce56b2031f840"
    text: {A guru might say "Don't try to make the world what you think it should be. Accept the world for what it is, and its beauty will be revealed to you." --- Guru Meditation}
    sent: "2017-04-24T18:49:32.241Z"
    editedAt: "2017-04-24T18:49:47.157Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe4841587a245e2443eb7a"
    text: {Certainly a guru *could* build it in Red. But *would* they? ;^^)}
    sent: "2017-04-24T18:47:29.748Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe481508c00c092aaffb3f"
    text: "to me, function itself is its signature^/"
    sent: "2017-04-24T18:46:45.112Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe47fac1d3b50154175376"
    text: {Based on what I know so far, it is a hard fit. I wouldn't be able to figure it out at this point, but a guru could probably fashion something }
    sent: "2017-04-24T18:46:18.630Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fe47b1d32c6f2f0937f2d1"
    text: {Red is the perfect language for experimenting with something like that. Especially when you consider free ranging evaluation. Fun to think about.}
    sent: "2017-04-24T18:45:05.088Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe475cc1d3b50154175071"
    text: {And it seems like it would be hard to fit into how Red works, with bindings and such. Doesn't mean you can't build it *in* Red of course, it just wouldn't *be* Red.}
    sent: "2017-04-24T18:43:40.516Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe46fad32c6f2f0937ef48"
    text: {Then you can't do it based on arity alone. You have to consider type signatures for each arg. Given how Red spec arg types, including typesets, do you think you can disambiguate things?}
    sent: "2017-04-24T18:42:02.866Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe46b1c1d3b50154174da3"
    text: "Yes. "
    sent: "2017-04-24T18:40:49.444Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fe461812d2409935943c26"
    text: {@gltewalt, are you thinking about dispatching based on function signature?}
    sent: "2017-04-24T18:38:16.012Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fe4369c1d3b50154173e7e"
    text: {It is an advantage. You may assign a function to different names (words), but you do not have to.}
    sent: "2017-04-24T18:26:49.660Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe433e8e4b63533dfd196b"
    text: "Yes :)"
    sent: "2017-04-24T18:26:06.139Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe4323881b89e1017ff260"
    text: {I remember they are anonymous. But do they have to be?}
    sent: "2017-04-24T18:25:39.151Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fe42a8587a245e2443d13d"
    text: {@gltewalt functions are anonymous. If you want identity, you may somehow combine spec and body, for example mold them and get checksum, or anything else.}
    sent: "2017-04-24T18:23:36.630Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe415412d2409935942707"
    text: {What do you think about name of func + arity equalling identity? Being part of the signature when assigned to a word. ^/x: func [val] [] and x: func [][], would coexist. Would not be rebound. }
    sent: "2017-04-24T18:17:56.084Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fdbdb1881b89e1017d925f"
    text: "@x8x Works fine! thx"
    sent: "2017-04-24T08:56:17.770Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "58fdbd0dc1d3b5015414c026"
    text: "Thanks"
    sent: "2017-04-24T08:53:33.965Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fdbc356aea30763d37f6d8"
    text: {@gltewalt https://github.com/red/red/wiki/Guru-Meditations#why-are-contexts-static}
    sent: "2017-04-24T08:49:57.363Z"
    editedAt: "2017-04-24T08:50:46.982Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58fdbc1ac1d3b5015414bd09"
    text: "@planetsizecpu Should work now."
    sent: "2017-04-24T08:49:30.786Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fdbbb3881b89e1017d8a50"
    text: {@gltewalt You can't *remove* it, you can just *unset* it (but it's still there, just without a value).}
    sent: "2017-04-24T08:47:47.814Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fdb2f28bb56c2d11d89730"
    text: {```^/>> x: 1^/== 1^/>> x^/== 1^/>> unset 'x^/>> x^/*** Script Error: x has no value^/*** Where: catch^/```}
    sent: "2017-04-24T08:10:26.598Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdb2ed8e4b63533dfa6742"
    text: "global"
    sent: "2017-04-24T08:10:21.412Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fdb2e2881b89e1017d6717"
    text: "Remove from where?"
    sent: "2017-04-24T08:10:10.907Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fdb2d3f22385553d6e2dba"
    text: "I cant seem to recall... how to remove a word"
    sent: "2017-04-24T08:09:55.420Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fdb16bf22385553d6e27ec"
    text: "@x8x ^^---"
    sent: "2017-04-24T08:03:55.064Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fdacaa12d2409935916dc1"
    text: {@dockimbel @qtxie, could some one take an eye on the download page? the link for automated build on windows is giving error 404  thx}
    sent: "2017-04-24T07:43:38.349Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "58fd8be012d240993590f072"
    text: "Thanks!"
    sent: "2017-04-24T05:23:44.188Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd82f912d240993590d782"
    text: {Hmmm, should a `block!` of refs also coerce values to refinement?}
    sent: "2017-04-24T04:45:45.585Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd8194d32c6f2f0934a121"
    text: {@dockimbel, sub in your error mechanism of choice:^/```^/arity?: function [^/^-"Returns the fixed-part arity of a function spec"^/^-spec [any-function! block!]^/^-/with refs [refinement! block! path!] "Count one or more refinements, and add their arity"^/][^/^-if any-function? :spec [spec: spec-of :spec]^-^-; Extract func specs to block^/^-t-w: make typeset! [word! get-word! lit-word!]^-^-; Typeset for words to count^/^-t-x: make typeset! [refinement! set-word!]^-^-^-; Typeset for breakpoint, set-word is for return:^/^-n: 0^-^-^-^-^-^-^-^-^-^-^-^-; Arity counter^/^-; Match our word typeset until we hit a breakpoint that indicates^/^-; the end of the fixed arity part of the spec. 'Skip ignores the^/^-; datatype and doc string parts of the spec.^/^-parse spec rule: [any [t-w (n: n + 1) | t-x break | skip]]^/^-; Do the same thing for each refinement they want to count the^/^-; args for. First match thru the refinement, then start counting.^/^-if with [^/^-^-either path? refs [^/^-^-^-refs: remove to block! refs^-^-^-^-^-; Convert, then remove the first segment^/^-^-^-forall refs [refs/1: to refinement! refs/1]^-; So it works with t-x typeset rule^/^-^-][refs: to block! refs]^-^-^-^-^-^-^-; Convert/copy^/^/^-^-if not empty? missing: exclude refs spec [^-^-; See if refs are a subset of spec^/^-^-^-return make error! append copy "Unknown refinement(s): " mold missing^/^-^-]^/^/^-^-foreach ref unique refs [parse spec [thru ref rule]]^-; Count refinement args^/^-]^/^-n^/]^/```}
    sent: "2017-04-24T04:39:48.191Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd7a28587a245e24406751"
    text: {Learning that blocks have newlines in them has been great for what I am doing.}
    sent: "2017-04-24T04:08:08.716Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fd79a0cfec9192726afcd6"
    text: {I guess I will write my own for now, thanks @greggirwin for the code, I learn a lot from these examples. I wrote one a long time ago, but it was hideous in comparison to yours =)}
    sent: "2017-04-24T04:05:52.879Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fd6b3ff22385553d6d3811"
    text: {Shouldn't distract me *too* much from `format`. ;^^)}
    sent: "2017-04-24T03:04:31.190Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd6b168e4b63533df97167"
    text: "Agreed. "
    sent: "2017-04-24T03:03:50.079Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd6b086aea30763d36df57"
    text: {Might have to say: "Try not to use `-of`, but if you do, it should be for reflector like functions."}
    sent: "2017-04-24T03:03:36.486Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd6b04f22385553d6d37c8"
    text: {Users are free to use whatever conventions they prefer, but for the Red runtime library, we need to stick to some rules.}
    sent: "2017-04-24T03:03:32.846Z"
    editedAt: "2017-04-24T03:03:48.229Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd6acd12d240993590910c"
    text: {It may be hard to tell everyone not to use `-of`. :^^)}
    sent: "2017-04-24T03:02:37.310Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd6acb08c00c092aac463c"
    text: {If you have time to enhance it, that would be nice, otherwise, I'll do it when integrating it.}
    sent: "2017-04-24T03:02:35.066Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd6aa48bb56c2d11d7a094"
    text: {I can look at enhancing it if you want. Name is your call if it's standard. }
    sent: "2017-04-24T03:01:56.079Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd6a9e881b89e1017c6869"
    text: {(Anyway, we'll need to do a pass on metadata access conventions and functions at some point, and probably define new rules)}
    sent: "2017-04-24T03:01:50.696Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd6a446aea30763d36dcde"
    text: {Also, about the naming, the `-of` suffix is the convention we use for wrapper functions on `reflect` action, so I would use the more common `?` suffix.}
    sent: "2017-04-24T03:00:20.754Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd6974d32c6f2f09345599"
    text: {I like your short code, so I'll probably put it in the runtime library. Though, it misses a few features I need, like accepting a word or path as spec, and error checking on invalid refinement.}
    sent: "2017-04-24T02:56:52.774Z"
    editedAt: "2017-04-24T02:57:03.508Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd688a6aea30763d36d93b"
    text: "Will do, thanks."
    sent: "2017-04-24T02:52:58.668Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd67c312d2409935908735"
    text: {@greggirwin You can use `to-block refs` instead of `compose [(refs)]`.}
    sent: "2017-04-24T02:49:39.878Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd5e95cfec9192726aaabc"
    text: {https://gist.github.com/greggirwin/53ce7d1228422076e142fa5a061e7649}
    sent: "2017-04-24T02:10:29.893Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fd41a108c00c092aabd4df"
    text: {I think an `arity?` global function which would accept both word/path would be nice to have.}
    sent: "2017-04-24T00:06:57.978Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd41448e4b63533df8f4c1"
    text: {```lisp^/>> preprocessor/func-arity? spec-of :append^/== 2^/>> preprocessor/func-arity?/with spec-of :append 'append/part^/== 3^/```^/}
    sent: "2017-04-24T00:05:24.007Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd40c18bb56c2d11d726d5"
    text: {@JacobGood1 I wanted to write such function while working on the preprocessor, but that got lost in the process. The closest thing available is `preprocessor/func-arity?`.}
    sent: "2017-04-24T00:03:13.657Z"
    editedAt: "2017-04-24T00:03:25.524Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fd3ffd8fcce56b202dbf9c"
    text: {we cant use arbitrary functions in macros yet either can we? If not, can I include a file with those functions that I want to use? }
    sent: "2017-04-23T23:59:57.409Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fd3f71881b89e1017bec8d"
    text: {is there a function for returning the number of arguments another function/etc has?}
    sent: "2017-04-23T23:57:37.174Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fd3e428fcce56b202dbb22"
    text: {@geekyi and @dockimbel Silly me! I downloaded it incorrectly. I usually clone or download a zip file, but that option wasn't there, so I went to each file with another click, clicked Raw and it downloaded. Console and Extract example worked as demonstrated. Pong crashes Excel, and I guess I would need to run the VB debugger to find out why? I am not a big Windows system or VBA guy! Thanks for the help to stick with me. The promises of things to come is amazing!}
    sent: "2017-04-23T23:52:34.199Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58fcff34f22385553d6bdc3f"
    text: "COP^/Context Oriented Programming"
    sent: "2017-04-23T19:23:32.012Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fcfcb83e27cac331b7b41f"
    text: { I think you'll only need the files in that particular folder}
    sent: "2017-04-23T19:12:56.575Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58fcfc4f8fcce56b202ce76a"
    text: {@rpherman maybe the file is corrupt? It should open as a zip file if I'm not mistaken. I cannot test it myself because I have libreoffice. It does open tho, only cannot run the macros as the official Microsoft VB dialect isn't supported. *there may be other differences too which I couldn't test*}
    sent: "2017-04-23T19:11:11.683Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58fccbf4ad849bcf42b0c277"
    text: {@dockimbel I tried test.xlsm in both Excel 2013 and Excel 2016 and I allowed macros. All I did was right-click the file and SaveAs. Maybe I need to download the whole repository?}
    sent: "2017-04-23T15:44:52.539Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58fcc50708c00c092aaa359b"
    text: {The type and id arguments need to match `system/catalog/errors/:type/:id`}
    sent: "2017-04-23T15:15:19.199Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fcc4efad849bcf42b0a84e"
    text: {@JacobGood1 this may be useful http://www.rebol.com/docs/core23/rebolcore-17.html^/}
    sent: "2017-04-23T15:14:55.243Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fcc4d98fcce56b202c1f8d"
    text: "thanks!"
    sent: "2017-04-23T15:14:33.122Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fcc4bdf22385553d6b0cc8"
    text: {@JacobGood1 See `help cause-error` and `help system/catalog/errors`.}
    sent: "2017-04-23T15:14:05.063Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fcc452ad849bcf42b0a4e3"
    text: {@rebolek is there some docs on error!... also how would I change User Error to something else? I guess I should be asking how to even do error handling, lol.}
    sent: "2017-04-23T15:12:18.411Z"
    editedAt: "2017-04-23T15:12:33.115Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fcc399ad849bcf42b0a049"
    text: {@JacobGood1 it depends what are you trying to achieve.^/```^/>> parse "a" ["b" | (do make error! "parse problem")]^/*** User Error: "parse problem"^/```}
    sent: "2017-04-23T15:09:13.453Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fcc2ad3e27cac331b6d549"
    text: {> What is the best way to throw an error in parse?}
    sent: "2017-04-23T15:05:17.748Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fcbf0b08c00c092aaa1ad9"
    text: {hm, so it's only about newlines, not spaces and tabs between values and words}
    sent: "2017-04-23T14:49:47.827Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fcbec08bb56c2d11d565d9"
    text: {```^/>> mold [1 2 3]^/== "[1 2 3]"^/>> mold [^/[    1^/[    2 3^/[    4 5 6  7   8^/[    ]^/== {[^^/    1 ^^/    2 3 ^^/    4 5 6 7 8^^/]}^/>> ^/```}
    sent: "2017-04-23T14:48:32.901Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fcbe10cfec919272689706"
    text: {According to a physics theory, everything is made of strings... which explains the mess. ;-)}
    sent: "2017-04-23T14:45:36.365Z"
    editedAt: "2017-04-23T14:46:05.789Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fcbc7a08c00c092aaa119a"
    text: {To that moment I thought that the central essence of the universe is a Lisp list, now I'm beginning to suspect that it's a block}
    sent: "2017-04-23T14:38:50.325Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fcbbe6f22385553d6aed26"
    text: {Lots of subtle differences. But not being different from mainstream just for the sake of being different. Always pragmatic }
    sent: "2017-04-23T14:36:22.679Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58fcbb948bb56c2d11d55854"
    text: {Every small piece of engineering seems well thought out}
    sent: "2017-04-23T14:35:00.974Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58fcbb6d8bb56c2d11d557b3"
    text: "Never mind, just an analogy 😝"
    sent: "2017-04-23T14:34:21.083Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "58fcbb498e4b63533df720ab"
    text: {the "line marker" thing?}
    sent: "2017-04-23T14:33:45.713Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fcbb338fcce56b202bfc1b"
    text: {I mean, I don't feel it's just limited to `block!`s}
    sent: "2017-04-23T14:33:23.014Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58fcbaccc1d3b50154115097"
    text: "@geekyi I'm not sure that I understand you :("
    sent: "2017-04-23T14:31:40.872Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fcba628fcce56b202bf9de"
    text: {@9214 is there any one thing? Everything looks like a carefully stacked set of blocks. Compare red logo, looks very appropriate }
    sent: "2017-04-23T14:29:54.322Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58fcb7fead849bcf42b072c7"
    text: {what it is under the hood, its linked list + array + xenomorph technology implementation, features like line markers, etc}
    sent: "2017-04-23T14:19:42.183Z"
    editedAt: "2017-04-23T14:20:39.737Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fcb7cc8fcce56b202bf1c4"
    text: {hm, in fact we can come up with dedicated page about block overall}
    sent: "2017-04-23T14:18:52.946Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fcb75c8e4b63533df713b2"
    text: "@9214 look like you are willing to make it :D"
    sent: "2017-04-23T14:17:00.395Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcb54708c00c092aa9faed"
    text: "IMO it's worth a wiki entry"
    sent: "2017-04-23T14:08:07.651Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fcb52612d24099358e30f0"
    text: "wow!"
    sent: "2017-04-23T14:07:34.845Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fcb47c8bb56c2d11d54101"
    text: "Have to think about how it might work."
    sent: "2017-04-23T14:04:44.187Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcb3abd32c6f2f0931fb6e"
    text: {@dockimbel, should we have `new-line` support in `format`?}
    sent: "2017-04-23T14:01:15.295Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcb345cfec91927268781b"
    text: {In addition to @greggirwin's reply, you also can decide that some blocks have a particular formatting you want to be preserved (like tabular formatting) that no external tool can guess from the raw data.^/}
    sent: "2017-04-23T13:59:33.626Z"
    editedAt: "2017-04-23T13:59:43.584Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fcb2b08bb56c2d11d53c83"
    text: {@maximvl Without newline markers, all blocks would display on single lines. Preserving the original line breaks, or being able to manipulate them at runtime is a very helpful feature, and the way it is implemented is very cheap.}
    sent: "2017-04-23T13:57:04.327Z"
    editedAt: "2017-04-23T13:57:16.136Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fcb2a28bb56c2d11d53c5b"
    text: {And if you really want to twist your mind a bit, think about this. Can those markers be used by analysis tools, or even in dialects themselves, so an evaluator can "see" them?}
    sent: "2017-04-23T13:56:50.827Z"
    editedAt: "2017-04-23T13:57:09.538Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcb22a8bb56c2d11d53acd"
    text: "I don't remember any design posts about it."
    sent: "2017-04-23T13:54:50.978Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcb18bcfec9192726872a8"
    text: {No it can't, because then every recipient of the data then has to have those tools.}
    sent: "2017-04-23T13:52:11.170Z"
    editedAt: "2017-04-23T13:55:07.796Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcb18408c00c092aa9eee5"
    text: {@greggirwin do you think Carl had any posts on this?}
    sent: "2017-04-23T13:52:04.072Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcb16b8e4b63533df6fd23"
    text: {it makes sense, but same thing could be done with good tools}
    sent: "2017-04-23T13:51:39.134Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcb141cfec9192726870ba"
    text: {Remember, we're not just exchange data with machines, but with other people.}
    sent: "2017-04-23T13:50:57.213Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcb1278fcce56b202bd99a"
    text: {In the context of a data exchange language, does formatting have value? That is, when you exchange information, does formatting sometimes matter? Sometimes very much?}
    sent: "2017-04-23T13:50:31.519Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcb0d18bb56c2d11d534f4"
    text: {and adding this feature requires coding and everything, so one should have a reason to add this}
    sent: "2017-04-23T13:49:05.290Z"
    editedAt: "2017-04-23T13:49:09.551Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcb0bed32c6f2f0931f0ad"
    text: {The data we're talking about so far *is* serialized. All Red data is, unless you tell it not to be, basically. ^/```^/^/[    3 4^/[    ]^/== [1 2 ^/    3 4^/]^/>> form b^/== "1 2 3 4"^/```}
    sent: "2017-04-23T13:48:46.810Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcb0823e27cac331b696bf"
    text: {it's like you have huge one-line JSON data, but using the formatter you can output in any nice way you want}
    sent: "2017-04-23T13:47:46.370Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcb0538bb56c2d11d53357"
    text: {well, I would say that block just contains data, formatting is more like serialization detail}
    sent: "2017-04-23T13:46:59.072Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcafd53e27cac331b693ec"
    text: "You mean, besides the above examples Maxim?"
    sent: "2017-04-23T13:44:53.877Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcaf9acfec919272686afb"
    text: "@meijeru any ideas why is it there at all?"
    sent: "2017-04-23T13:43:54.883Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcaf858bb56c2d11d5304e"
    text: "@meijeru thanks"
    sent: "2017-04-23T13:43:33.808Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcaf6cd32c6f2f0931ec84"
    text: "Thanks Rudolf!"
    sent: "2017-04-23T13:43:08.564Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcaf3412d24099358e1c72"
    text: {As regards implementation, newline is a single bit in the header of a cell (the structure that fills the value slot). See `%runtime/allocator.reds`.}
    sent: "2017-04-23T13:42:12.688Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58fcaf19c1d3b50154112783"
    text: {Seems I even have an old dialect experiment. I can put it in a gist, but it doesn't work under Red.}
    sent: "2017-04-23T13:41:45.397Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcae628bb56c2d11d52c8f"
    text: {Here's an old R2 func:^/```^/    ; REBOL molds multi-line strings differently, so you can't guarantee^/    ; when they'll use ^^/ and fit on a single line, or not.^/    single-line-mold: func [^/        "Reformats a block/object to a single line."^/        val [any-block!]^/    ] [^/        replace/all mold new-line/all copy val  off  "^^/" "^^^^/"^/    ]^/```}
    sent: "2017-04-23T13:38:42.271Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcadbaf22385553d6abc79"
    text: "Nothing else comes to mind right now."
    sent: "2017-04-23T13:35:54.241Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcad9808c00c092aa9e05b"
    text: {because blocks are kinda the most important entity, everything is built from blocks, it's good to have a clear understanding what is it}
    sent: "2017-04-23T13:35:20.283Z"
    editedAt: "2017-04-23T13:35:30.953Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcad63ad849bcf42b04ca0"
    text: {any other "hidden" features?}
    sent: "2017-04-23T13:34:27.787Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcad568fcce56b202bcb63"
    text: "Ha! :^^)"
    sent: "2017-04-23T13:34:14.074Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcad16881b89e10179fbbd"
    text: {we need a blog post `50 shades of blocks` or something}
    sent: "2017-04-23T13:33:10.220Z"
    editedAt: "2017-04-23T13:33:17.276Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcad0812d24099358e1699"
    text: "There is no spoon. :^^)"
    sent: "2017-04-23T13:32:56.132Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcacee3e27cac331b68b8e"
    text: "now this"
    sent: "2017-04-23T13:32:30.683Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcacedf22385553d6ab989"
    text: {first I thought blocks are linked lists, then I found out they are more like arrays, then that they are combination of both}
    sent: "2017-04-23T13:32:29.160Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcaca38bb56c2d11d5271b"
    text: "wow"
    sent: "2017-04-23T13:31:15.110Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcac9e3e27cac331b68ab6"
    text: "Lets you generate formatted data to exchange."
    sent: "2017-04-23T13:31:10.268Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcac9aad849bcf42b04a13"
    text: "ow"
    sent: "2017-04-23T13:31:06.791Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcac878bb56c2d11d526b2"
    text: {```^/>> new-line/skip [1 2 3 4 5 6 7 8 9 10 11 12] on 3^/== [^/    1 2 3 ^/    4 5 6 ^/    7 8 9 ^/    10 11 12^/]^/```}
    sent: "2017-04-23T13:30:46.982Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcabccc1d3b501541119bb"
    text: {```^/CL-USER> (setf l '( 1 2^/                   3 4^/                   5 6))^/(1 2 3 4 5 6)^/CL-USER> l^/(1 2 3 4 5 6)^/```}
    sent: "2017-04-23T13:27:40.436Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcab8e12d24099358e1325"
    text: {I don't know any other homoiconic language keeping this information}
    sent: "2017-04-23T13:26:38.333Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcab7308c00c092aa9d9a2"
    text: "and newline is kinda the same"
    sent: "2017-04-23T13:26:11.289Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcab6c8e4b63533df6e31e"
    text: "well, you don't have whitespace as data"
    sent: "2017-04-23T13:26:04.392Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcab5cf22385553d6ab531"
    text: "It's all data. :^^)"
    sent: "2017-04-23T13:25:48.330Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcab4d8fcce56b202bc5c9"
    text: "`new-line? tail b`"
    sent: "2017-04-23T13:25:33.900Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcab4ccfec919272685e88"
    text: {yeah, but keeping this info in a block is interesting decision}
    sent: "2017-04-23T13:25:32.006Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58fcab368bb56c2d11d52168"
    text: {It's a nice feature, and `new-line` is very handy when analyzing data sometimes, and when generating code or data.}
    sent: "2017-04-23T13:25:10.737Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcaaf5c1d3b5015411156f"
    text: {Line markers at the tail have always been a special case in Rebol. Early morning here. My brain isn't pulling up why.}
    sent: "2017-04-23T13:24:05.843Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fcaaf03e27cac331b684f8"
    text: {you can actually use it to find out how many lines of code any function has:^/```^/red>> length? split mold body-of :math "^^/"^/== 14^/```}
    sent: "2017-04-23T13:24:00.554Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcaa98f22385553d6ab08b"
    text: "interesting thing"
    sent: "2017-04-23T13:22:32.599Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fcaa458fcce56b202bc2b8"
    text: {@greggirwin wat^/```^/red>> forall b [ probe new-line? b]^/false^/false^/true^/false^/== false^/```}
    sent: "2017-04-23T13:21:09.373Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fca9daf22385553d6aaf1e"
    text: {Blocks maintain line markers. Check out the `new-line/new-line?` funcs.}
    sent: "2017-04-23T13:19:22.891Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fc9cdf8fcce56b202b9218"
    text: {does it mean that we store "copy" of original data or something?}
    sent: "2017-04-23T12:23:59.917Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fc9cc3f22385553d6a84cf"
    text: {```^/red>> b: [ 1 2^/[    3 4^/[    ]^/== [1 2 ^/    3 4^/]^/red>> b^/== [1 2 ^/    3 4^/]^/```}
    sent: "2017-04-23T12:23:31.270Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fc9ca48e4b63533df6accf"
    text: {how does block keeps it's structure here? I mean newlines and spaces}
    sent: "2017-04-23T12:23:00.887Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fc9c908bb56c2d11d4efd5"
    text: {```^/red>> f: func [a b] [^/[    ; newline^/[    a + b^/[    print "test"^/[    0 ]^/== func [a b][a + b ^/    print "test" ^/    0^/]^/red>> body-of :f^/== [a + b ^/    print "test" ^/    0^/]^/```}
    sent: "2017-04-23T12:22:40.851Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fc9001ad849bcf42afeb99"
    text: {@rpherman ^/> Trying out the Excel integration, but the test.xlsm file doesn't open in Excel. I click on it, and I get a "...not a valid file format or file extension..." ^/^/We don't have Excel 2016 for testing it, but it should open .xlsm files just fine (maybe you need to enable macros support?).}
    sent: "2017-04-23T11:29:05.748Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fc4039c1d3b501540fca09"
    text: {@dockimbel It is the 32 bit version of Excel 2016. Maybe I did something wrong? I right-clicked and downloaded test.xlsm; the same with libRed.dll. I saved both to my Desktop and then tried opening test.xlsm by clicking on it, and after by opening it from File|Open in Excel.}
    sent: "2017-04-23T05:48:41.152Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58fc3dad881b89e10178a533"
    text: {@rpherman If you use the Desktop version of Excel, then just ensure that it's 32-bit in order for it to be able to load libRed. Excel 32-bit is the default install option in Office 2013, not sure about 2016 and 365.}
    sent: "2017-04-23T05:37:49.340Z"
    editedAt: "2017-04-23T05:40:09.155Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fc312af22385553d694972"
    text: {@dockimbel Nenad Office 365 is a full, local version of Office. You just get auto updates, cloud storage, and you can install it on several PCs depending on your plan. @pekr mentioned it must be 32 bit. I have a 64 bit machine, so I am assuming I am using a 64 bit version of Excel. Could that be the problem?}
    sent: "2017-04-23T04:44:26.129Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58fbddcf881b89e10177ad95"
    text: "Or recommended way?"
    sent: "2017-04-22T22:48:47.743Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fbddb3cfec9192726607a7"
    text: "What is the best way to throw an error in parse?"
    sent: "2017-04-22T22:48:19.912Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fbd72e3e27cac331b4311b"
    text: {Testing things out at libs is a great way to determine what might be worth including, and refine designs.}
    sent: "2017-04-22T22:20:30.759Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fbb694d32c6f2f092f203a"
    text: "yep, ive used that lib before, it is good"
    sent: "2017-04-22T20:01:24.381Z"
    editedAt: "2017-04-22T20:01:42.653Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fbb3293e27cac331b3c4a4"
    text: {@JacobGood1 they can be libs for sure, as a simple start we can copy https://github.com/m2ym/optima}
    sent: "2017-04-22T19:46:49.831Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fba3d78e4b63533df3f0d5"
    text: {You're also very familiar with functional programming, so probably a combination of your knowledge and Red making abstractions easy. ^/I'd guess that most of us are not as familiar with FP}
    sent: "2017-04-22T18:41:27.520Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fb9da58e4b63533df3e001"
    text: {Btw, I am not trying to brag or anything like that, I am simply stating that red makes abstractions easy. In other words, red was carrying me.}
    sent: "2017-04-22T18:15:01.688Z"
    editedAt: "2017-04-22T18:15:22.153Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fb9a718fcce56b2028b8dc"
    text: {I implemented destructuring in a single day without knowing red well(still do not know it well). I think things like pattern matching and destructuring can just be libs.}
    sent: "2017-04-22T18:01:21.135Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58fb99f88e4b63533df3d7d9"
    text: "Should there be a room for General Ideas?"
    sent: "2017-04-22T17:59:20.007Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fb98b03e27cac331b3717b"
    text: "Pattern matching looks better than nested funcs"
    sent: "2017-04-22T17:53:52.590Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58fb855ff22385553d6769e4"
    text: {though, it's Windows trick for sure :confused:  nvm}
    sent: "2017-04-22T16:31:27.203Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb83daad849bcf42ace92e"
    text: {Okay, now I encountered **really** weird bug with included `%.ico` files in Windows executables (with `Icon: %<icon-file>.ico` inside Red header). I'm not sure that it's Red related and want to ask someone to check it on their machine.}
    sent: "2017-04-22T16:24:58.741Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb8306d32c6f2f092e89c7"
    text: {you need to include at least basic console support to get some interaction. It actually may be easier to test in GUI directly, if you want to compile.}
    sent: "2017-04-22T16:21:26.407Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb7f8a12d24099358a9e8f"
    text: {script just reads some files in provided directory and spits out useful information}
    sent: "2017-04-22T16:06:34.083Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb7f46d32c6f2f092e7ff3"
    text: {@rebolek for now it's just for testing purposes before I get to the GUI stuff}
    sent: "2017-04-22T16:05:26.550Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb7f00c1d3b501540d9ed1"
    text: {@9214 you probably should describe your user case in more detail to get good answer :)^/}
    sent: "2017-04-22T16:04:16.198Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb7e6d881b89e101768c76"
    text: {I just don't like the idea of getting some interpreter to launch something}
    sent: "2017-04-22T16:01:49.292Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb7e50c1d3b501540d9c89"
    text: {@rebolek okay, maybe we can call it compiled script :)}
    sent: "2017-04-22T16:01:20.341Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb7e288fcce56b2028666e"
    text: {You would need to add console code to check for user's input.}
    sent: "2017-04-22T16:00:40.984Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb7e0e8e4b63533df385a8"
    text: {@9214 it works like basic shell program and basic shell programs usually quit without waiting for user confirmation.}
    sent: "2017-04-22T16:00:14.805Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fb7b093e27cac331b31d10"
    text: "i.e. without fancy View GUI"
    sent: "2017-04-22T15:47:21.432Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb7aff08c00c092aa664fd"
    text: {@dockimbel no, not Red console, I'm talking about compiled Red user script which (in my understanding) should act like basic console/shell program once compiled.}
    sent: "2017-04-22T15:47:11.184Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb79753e27cac331b31776"
    text: {@9214 I don't get it, you mean the Red console or your own custom console? You can ^/`#include %environment/console/input.red`}
    sent: "2017-04-22T15:40:37.417Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fb78f1c1d3b501540d8717"
    text: {@maximvl That's planned, but low priority for now.}
    sent: "2017-04-22T15:38:25.275Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fb71a7d32c6f2f092e4a70"
    text: "`input` and `ask` work only in interpreter"
    sent: "2017-04-22T15:07:19.182Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb711308c00c092aa64333"
    text: {How can I make compiled console program wait for exit confirmation from user before quitting?}
    sent: "2017-04-22T15:04:51.697Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fb6393f22385553d66ee63"
    text: {would be nice to have uniform access to it from users code}
    sent: "2017-04-22T14:07:15.972Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fb63833e27cac331b2c1fb"
    text: {I see that `error!` has some stack information: `stack: -161144072`}
    sent: "2017-04-22T14:06:59.839Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fb62f308c00c092aa60ce7"
    text: "@dockimbel and without causing an error?"
    sent: "2017-04-22T14:04:35.076Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fb62ac3e27cac331b2bd48"
    text: {@maximvl On error output, yes, you can, though it's limited to function names only for now. To enable stack info:^/```lisp^/>> system/state/trace?: yes^/== true^/>> foo: does [1 / 0]^/== func [][1 / 0]^/>> foo^/*** Math Error: attempt to divide by zero^/*** Where: /^/*** Stack: launch launch either run while eval-command if either switch either do-command unless case print = type? try either = set catch foo /^/```}
    sent: "2017-04-22T14:03:24.916Z"
    editedAt: "2017-04-22T14:03:55.801Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fb6044c1d3b501540d1ece"
    text: {do we have any way to get stack frames information? like the functions names and so on?}
    sent: "2017-04-22T13:53:08.965Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fb59c8ad849bcf42ac417d"
    text: {@rpherman I'm not an Office 365 user, but as far as I understand, it's an online version of Office, while our demo is native code, so requires a Desktop version of Excel (like Excel 2016). We have successfully tested the `test.xlsm` in Excel 2010 and 2013 on Windows.}
    sent: "2017-04-22T13:25:28.516Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fb56ef3e27cac331b28fc1"
    text: {Not sure what it was tested with, but the Excel should be 32bit.}
    sent: "2017-04-22T13:13:19.900Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58fb51228bb56c2d11d11def"
    text: {Trying out the Excel integration, but the test.xlsm file doesn't open in Excel. I click on it, and I get a "...not a valid file format or file extension..." I am using Excel 365 - the latest. I changed 'Blocked' in the file info to 'Unblocked' and it gives the same warning.}
    sent: "2017-04-22T12:48:34.669Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58fa9420cfec91927262044f"
    text: {I wouldn't look at the speed until there are problems with it}
    sent: "2017-04-21T23:22:08.554Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa91c6c1d3b501540a92a6"
    text: {Well I think we agree that in this case passing a function is nicer and still faster then the binding.^/So no function in a function but passing a function to a function yes. :smile: }
    sent: "2017-04-21T23:12:06.763Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
)#(
    id: "58fa90e88bb56c2d11ced54a"
    text: {```^/ f: func [words block /do /local a b] [^/     a: 1 b: 2^/     bind block object reduce [to-set-word words/1 a to-set-word words/2 b]^/     system/words/do block^/     exit^/ ]^/```^/`0:00:05.743286`^/}
    sent: "2017-04-21T23:08:23.988Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa8d2b12d2409935879262"
    text: {Yes, that variant would work for custom words, but a bit too slow ` 0:00:17.878778` and a little complicate for the task}
    sent: "2017-04-21T22:52:27.106Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa8c0e3e27cac331b016e8"
    text: "so, no difference really"
    sent: "2017-04-21T22:47:42.636Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa8bddcfec91927261e848"
    text: {```^/>> f [x z] [probe x probe z]^/1^/2^/```}
    sent: "2017-04-21T22:46:53.705Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa8bd0d32c6f2f092b6dfd"
    text: {1'000'000 iterations:^/- passing a `block!`: `0:00:04.688953`^/- passing a `func!`: `0:00:03.222704`}
    sent: "2017-04-21T22:46:40.151Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa8b518e4b63533df07f7c"
    text: "@x8x ^^ :)"
    sent: "2017-04-21T22:44:33.528Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa8b433e27cac331b0141b"
    text: {like^/```^/f: func [words block /do /local o] [^/    o: object collect [ forall words [ keep to-set-word words/1 keep none ] ]^/    o/(words/1): 1 o/(words/2): 2^/    bind block o^/    system/words/do block^/    exit^/]^/```}
    sent: "2017-04-21T22:44:19.704Z"
    editedAt: "2017-04-21T22:45:13.360Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa89d1c1d3b501540a7b88"
    text: {means you pass the word which you will use inside the block}
    sent: "2017-04-21T22:38:09.893Z"
    editedAt: "2017-04-21T22:38:16.354Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa89be8bb56c2d11cebd83"
    text: {@x8x you can give user a way to specify which names does we want, like the `foreach` does}
    sent: "2017-04-21T22:37:50.730Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa88b88e4b63533df0771d"
    text: {Ok thanks for saying only `a` and `b` could be passed, gonna speed test both examples}
    sent: "2017-04-21T22:33:28.234Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa88af8fcce56b202551f4"
    text: {try this: ```g: func [/local z] [ f [z: 3 print [a + z type? :do]] probe z ] probe z ```}
    sent: "2017-04-21T22:33:19.334Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa88728bb56c2d11ceb7c1"
    text: "it's leaking in the same way `f` is leaking :D"
    sent: "2017-04-21T22:32:18.801Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa88623e27cac331b00bed"
    text: "so it's leaking :-) passing a function doesn't"
    sent: "2017-04-21T22:32:02.604Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa884012d2409935878387"
    text: {yes, because it's binded to global context once block is created}
    sent: "2017-04-21T22:31:28.986Z"
    editedAt: "2017-04-21T22:31:38.926Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa882a8e4b63533df07592"
    text: "`z` gets set in the global context"
    sent: "2017-04-21T22:31:06.770Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa87f78fcce56b20254fd6"
    text: {yeah, good solution with separate context, not the function one}
    sent: "2017-04-21T22:30:15.803Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa87e408c00c092aa35b87"
    text: {@x8x `z` is not leaking, it's taken from the same block}
    sent: "2017-04-21T22:29:56.395Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa8631c1d3b501540a6f1f"
    text: {`z` still leaking but could be solved once we get `use`}
    sent: "2017-04-21T22:22:41.594Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa85458fcce56b202546e4"
    text: {Ah well this works:^/```rebol^/f: func [block /do /local o][^/^-o: object [a: none b: none]^/^-o/a: 1 o/b: 2^/^-bind block o^/^-system/words/do block^/^-exit^/]^/f [z: 3 print [a + z type? :do]] unset? :z^/4 native^/;   false^/```}
    sent: "2017-04-21T22:18:45.096Z"
    editedAt: "2017-04-21T22:28:35.440Z"
    v: 4
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa83ff8e4b63533df06708"
    text: "yep, I'm trying )"
    sent: "2017-04-21T22:13:19.505Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa83f1881b89e101735a12"
    text: "Could you make an example please?"
    sent: "2017-04-21T22:13:05.535Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa83d2cfec91927261cbbc"
    text: {block parsing the passed block and replace words with actual values?}
    sent: "2017-04-21T22:12:34.231Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa836acfec91927261cae8"
    text: {@x8x you need to find all instances of words inside the block}
    sent: "2017-04-21T22:10:50.586Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa82dd8fcce56b20253e5b"
    text: "@maximvl  How would I do that?"
    sent: "2017-04-21T22:08:29.519Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa8290cfec91927261c80f"
    text: {I would still prefer function in this case, but block is equally good}
    sent: "2017-04-21T22:07:12.420Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa827a8e4b63533df0622e"
    text: {@greggirwin Either it's buggy or Dock is already embedding defences against AIs}
    sent: "2017-04-21T22:06:50.653Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa826d12d2409935877030"
    text: {@x8x in your example, you can make block usage better if you only bind `a` and `b` words, not the whole block}
    sent: "2017-04-21T22:06:37.602Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa816a8bb56c2d11ce9ded"
    text: {Not too far from real.. https://openreview.net/pdf?id=ByldLrqlx}
    sent: "2017-04-21T22:02:18.802Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa7fd1c1d3b501540a5793"
    text: {Up to a point.^/```^/>> zero? 1.1^/== false^/>> zero? 1.0^/== true^/>> zero? 1.0^/== true^/>> zero? 2.0^/== true^/>> zero? 3.0^/== true^/>> zero? 12.0^/== true^/>> zero? 123.0^/== true^/>> zero? 1234.0^/== true^/>> zero? 12345.0^/== true^/>> zero? 123456.0^/== true^/>> zero? 1234567.0^/== true^/>> zero? 12345678.0^/== false^/```}
    sent: "2017-04-21T21:55:29.205Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa7fbe08c00c092aa33cc7"
    text: {@greggirwin look like all floats with `.0` return `true`}
    sent: "2017-04-21T21:55:10.470Z"
    editedAt: "2017-04-21T21:55:11.750Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa7f8dd32c6f2f092b49b4"
    text: {What I meant what that we are all that learning machine, suggesting improvements, etc. The Great Redbol Optimizer.}
    sent: "2017-04-21T21:54:21.089Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa7f5908c00c092aa33b8d"
    text: {@greggirwin Yes, it's in my plan for the next life when I will reborn smarter.. :smile: }
    sent: "2017-04-21T21:53:29.472Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa7f3608c00c092aa33b1e"
    text: "Thanks. "
    sent: "2017-04-21T21:52:54.450Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa7f02c1d3b501540a552d"
    text: "confirmed"
    sent: "2017-04-21T21:52:02.376Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa7ed0f22385553d642bae"
    text: "@x8x, you're in it. :^^)"
    sent: "2017-04-21T21:51:12.355Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa7eafad849bcf42a98f68"
    text: {Can someone please confirm this?^/```^/>> zero? 1234.0^/== true^/```}
    sent: "2017-04-21T21:50:39.810Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa7e783e27cac331afe96e"
    text: {Can't we just teach red to a learning machine so that we can feed it code and it will autosuggest improvements and best practices? :smile: }
    sent: "2017-04-21T21:49:44.489Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa7c413e27cac331afe0aa"
    text: {### Passing a `block!`:^/ ```^/f: func [block /do /local a b][^/^-a: 1 b: 2^/^-bind block 'a^/^-system/words/do block^/^-exit^/]^/f [z: 3 print [a + z type? :do]] unset? :z^/4 logic^/;   false^/```^/disadvantages:^/- words used in the passed block can conflict with `f` words^/- need to specify to `f` user that available values are `a` and `b`^/- also tell user can not use `do`, have to use `system/words/do`^/- words defined in the block leaks to global space (`z`)^/^/^/### Passing a `func!`:^/```^/f: func [fun /do /local a b][^/^-a: 1 b: 2^/^-(fun a b)^/^-exit^/]^/f func[c /local z][z: 3 print [c + z type? :do]] unset? :z^/4 native^/;   true^/```^/advantages:^/- no words conflict^/- user can use custom words (`c` for `a` in this case)^/- can use `do`, no need to know internals of `f`^/- can define local vars, no leaking^/}
    sent: "2017-04-21T21:40:17.784Z"
    editedAt: "2017-04-21T21:40:33.602Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa7c1d8fcce56b202524f2"
    text: {I just had a case where I went from passing a `block!` to passing a `func!` here is a short example:}
    sent: "2017-04-21T21:39:41.840Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa7bc9ad849bcf42a984ad"
    text: {:point_up: [April 22, 2017 12:32 AM](https://gitter.im/red/help?at=58fa42418fcce56b2024220d) That's a great inside! Thanks}
    sent: "2017-04-21T21:38:17.762Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58fa77a5cfec919272619cfb"
    text: {>Having functions in functions (instead of in an object context) means that the nested functions will be rebuilt each time the outer function is called.^/^/This one totally makes sense to me, btw}
    sent: "2017-04-21T21:20:37.448Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58fa4a71cfec91927260d1aa"
    text: {```^/context [^/    fn-b: does [1]^/    fn-c: does [x]^/    set 'fn-aaaa has [x][^/        x: 3^/        fn-c^/    ]^/    bind body-of :fn-c :fn-aaaa^/]^/```^/Not saying it's a *good* idea...}
    sent: "2017-04-21T18:07:45.747Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa489612d2409935867b02"
    text: "@dockimbel nice!"
    sent: "2017-04-21T17:59:50.965Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa4846d32c6f2f092a641c"
    text: "I added a note to Guru Meditations."
    sent: "2017-04-21T17:58:30.970Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa484612d2409935867966"
    text: {@9214 ^/> does it mean that with each `x: does [ y: 1 + 1 print "2"]` call `y` will be recalculated? ^/^/The real reason why it needs to be recalculated is:^/```lisp^/>> x: does [ y: 1 + 1 print y]^/== func [][y: 1 + 1 print y]^/>> poke body-of :x 4 41^/== 41^/>> x^/42^/>> :x^/== func [][y: 1 + 41 print y]^/```^/So even constants folding cannot be applied without breaking some semantics. Fortunately, they are workarounds (hint: future Red `strict` mode). ;-)}
    sent: "2017-04-21T17:58:30.482Z"
    editedAt: "2017-04-21T18:00:39.268Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa4832d32c6f2f092a63c8"
    text: "I think it's time to update our FAQ :^^)"
    sent: "2017-04-21T17:58:10.689Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa47fc3e27cac331aefb51"
    text: {If you do not need to use inner function in block often then it is better solution than inner function directly in  function.}
    sent: "2017-04-21T17:57:16.273Z"
    editedAt: "2017-04-21T17:57:35.341Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fa47e8f22385553d633e37"
    text: "will it be some sort of lazy evaluation?"
    sent: "2017-04-21T17:56:56.153Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa47ca08c00c092aa24d7b"
    text: "and what if I won't call `y` with `reduce`?"
    sent: "2017-04-21T17:56:26.154Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa47a48bb56c2d11cdaa24"
    text: "@9214 yes, you still have to reduce it."
    sent: "2017-04-21T17:55:48.622Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58fa478d12d240993586753f"
    text: {:point_up: [21 апреля 2017 г., 22:49](https://gitter.im/red/help?at=58fa4617d32c6f2f092a599b)}
    sent: "2017-04-21T17:55:25.749Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa4784cfec91927260c19b"
    text: "block doesn't help much^/"
    sent: "2017-04-21T17:55:16.674Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fa4775d32c6f2f092a60f2"
    text: "Oh, sorry, you said block, not context."
    sent: "2017-04-21T17:55:01.851Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa4763f22385553d633bee"
    text: "@9214, yes, see above."
    sent: "2017-04-21T17:54:43.094Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa4759d32c6f2f092a6013"
    text: {@dockimbel you're right. I really wish to find when and where I came to this belief.}
    sent: "2017-04-21T17:54:33.278Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fa4755881b89e1017253ed"
    text: "@dockimbel, yeah, I do love my porridge. "
    sent: "2017-04-21T17:54:29.467Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa4751ad849bcf42a89e48"
    text: {So, can wrapping functions inside block address this issue? Or macros?}
    sent: "2017-04-21T17:54:25.939Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa4741881b89e101725393"
    text: {I was thinking about a macro last night, and now I'm wondering what fun trickery is in store for my wandering brain on this. }
    sent: "2017-04-21T17:54:09.645Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa4739c1d3b50154095f07"
    text: {Blue pill is always the easy way out, but who wants juicy virtual steaks, when you can have real porridge. ;-)}
    sent: "2017-04-21T17:54:01.602Z"
    editedAt: "2017-04-21T18:00:57.271Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa46e08bb56c2d11cda720"
    text: "Ignorance is bliss Bolek. Where's that blue pill?"
    sent: "2017-04-21T17:52:32.378Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa46a5f22385553d63391b"
    text: {@rebolek I can hardly think of a way to achieve that without breaking the language semantics...Functions being anonymous, their construction doesn't depend on the place where that happens.}
    sent: "2017-04-21T17:51:33.103Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa46a0ad849bcf42a89b27"
    text: {Chris RG has a whole style based on `use`. It was hard for me to read, like JS in some ways, where it's not clear until end what's going on. Like a movie with a twist that makes you have to watch the beginning again.}
    sent: "2017-04-21T17:51:28.845Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa464ec1d3b50154095a67"
    text: "@greggirwin hehe, same feeling here ;)"
    sent: "2017-04-21T17:50:06.559Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fa46408fcce56b2024380f"
    text: {@greggirwin grouping functions to share binding can be solved by `use` that returns`function!`.}
    sent: "2017-04-21T17:49:52.647Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fa4637cfec91927260ba85"
    text: {<sarcasm>Thanks a lot Doc! All these years I didn't have a care in the world about using funcs in funcs. Now I'm going to think about it every freakin' time!</sarcasm>}
    sent: "2017-04-21T17:49:43.808Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa4617d32c6f2f092a599b"
    text: {```^/>> x: does [y: [does [1 + 1]] print reduce y]^/== func [][y: [does [1 + 1]] print reduce y]^/>> x^/2^/```}
    sent: "2017-04-21T17:49:11.444Z"
    editedAt: "2017-04-21T17:49:50.933Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa45ea12d2409935866d3d"
    text: {Can't wait for profiling tools. :^^) I've been doing this forever, but obviously never in a case where an inner loop of 1M needed to complete instantly. The downside of things being fast enough almost all the time.}
    sent: "2017-04-21T17:48:26.117Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa45848bb56c2d11cda1dc"
    text: {@dockimbel I see. I just remember (and probably it is false memory) that Carl wrote somewhere that functions in functions are not rebuild each time.}
    sent: "2017-04-21T17:46:44.082Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fa456ecfec91927260b5c9"
    text: {It's the binding aspect that makes inner funcs useful. Hmmmm.}
    sent: "2017-04-21T17:46:22.535Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa453812d2409935866a7a"
    text: {Hm, same in R3^/```^/>> dt [loop 1000000 [fn-a]]^/== 0:00:01.209189^/^/>> dt [loop 1000000 [fn-aa]]^/== 0:00:00.045218^/```}
    sent: "2017-04-21T17:45:28.228Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fa452912d2409935866a5b"
    text: {@rebolek ^/> I also thought that at least in Rebol, functions in functions were not rebuilt each time. ^/^/Constructing a function is the same no matter where you do it, in global context, in object context or in a function's body. As long as `func` word is bound to global context, there is no reason for it to behave differently, regardless of the call site.}
    sent: "2017-04-21T17:45:13.930Z"
    editedAt: "2017-04-21T17:46:38.099Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa44d212d240993586687a"
    text: {though we can wrap inner functions inside blocks or objects}
    sent: "2017-04-21T17:43:46.208Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa4490c1d3b501540953d9"
    text: ":scream_cat: "
    sent: "2017-04-21T17:42:40.148Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa44693e27cac331aee9fa"
    text: {```^/>> fn-a: func [][fn-b: does [] fn-c: does []]^/>> ctx: context [fn-b: does [] fn-c: does [] set 'fn-aa func [][]]^/^/>> time-it/count [fn-a] 100000^/== 0:00:00.155000001^/>> time-it/count [fn-aa] 100000^/== 0:00:00.004000001^/```}
    sent: "2017-04-21T17:42:01.263Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa43f3cfec91927260ae3f"
    text: {Same in Rebol, nothing specific to Red there. Though, if the outer function is not called often, that might not be a big issue in practice. Using an object context instead, ensures that you won't have any future trouble with that.}
    sent: "2017-04-21T17:40:03.312Z"
    editedAt: "2017-04-21T17:40:25.064Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa43df8fcce56b20242a91"
    text: {Only important if the outer func is called a lot, but then it's very important. }
    sent: "2017-04-21T17:39:43.314Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa43d63e27cac331aee78b"
    text: {@greggirwin I also thought that at least in Rebol, functions in functions were not rebuilt each time. }
    sent: "2017-04-21T17:39:34.327Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fa438d8fcce56b202428d4"
    text: {OK, we now have a *huge* reason *not* to use funcs in funcs. I don't know why I thought they were closed over.}
    sent: "2017-04-21T17:38:21.585Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa437dcfec91927260abd8"
    text: {It is, but that's not related to functions in functions, but to compiler optimizations (namely *constants folding*), which we don't do for now.}
    sent: "2017-04-21T17:38:05.779Z"
    editedAt: "2017-04-21T17:38:13.411Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa42a9cfec91927260a6c2"
    text: {@dockimbel does it mean that with each `x: does [ y: 1 + 1 print "2"]` call `y` will be recalculated? }
    sent: "2017-04-21T17:34:33.903Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa42418fcce56b2024220d"
    text: {Having functions in functions (instead of in an object context) means that the nested functions will be rebuilt each time the outer function is called.}
    sent: "2017-04-21T17:32:49.839Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa3f9c8fcce56b2024145e"
    text: {Without resorting to a context around all related funcs, which is what we can do in the meantime.}
    sent: "2017-04-21T17:21:32.284Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa3f88d32c6f2f092a3b03"
    text: {I find it *very* handy to have helper funcs in the same context at times.}
    sent: "2017-04-21T17:21:12.679Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa3f7308c00c092aa22667"
    text: "@greggirwin roger that!"
    sent: "2017-04-21T17:20:51.544Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa3f5d12d2409935864e88"
    text: {I use functions in functions all the time, Well, I did. The Red compiler doesn't like them currently, so avoid them until it does, if your code needs to be compiled.}
    sent: "2017-04-21T17:20:29.290Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa22d88e4b63533deea310"
    text: {@9214 It is fine, you spread it over multiple lines, to highlight the sub expressions, you can also use parens, though, if your code is inside a `compose` block, that would not be an option.}
    sent: "2017-04-21T15:18:48.636Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa1e2608c00c092aa18a2f"
    text: {right, thanks, but I'm still not sure about nested functions}
    sent: "2017-04-21T14:58:46.896Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa1d8612d240993585abe9"
    text: "https://doc.red-lang.org/en/style-guide.html"
    sent: "2017-04-21T14:56:06.348Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58fa1b618e4b63533dee7a94"
    text: {And what about enormously long expressions, is it appropriate to split them in multiple lines?^/```^/set 'foobar abra/cadabra 1337 to string! 'blah-blah-blah^/^/set 'foobar^/    abra/cadabra 1337^/    to string! 'blah-blah-blah^/```}
    sent: "2017-04-21T14:46:57.944Z"
    editedAt: "2017-04-21T14:47:29.116Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fa1a7ac1d3b501540880d7"
    text: {Is it a good Redbol coding style to nest functions in other functions?}
    sent: "2017-04-21T14:43:06.372Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f9ef8bad849bcf42a6f035"
    text: {Ahh, stupid me. Thanx.^/```^/>> x: [1 2 3 4 5]^/== [1 2 3 4 5]^/>> remove/part x 4^/== [5]^/```}
    sent: "2017-04-21T11:39:55.282Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58f9ee818bb56c2d11cbfc6e"
    text: {@Phryxe `/part` is `refinement!`. They are written as part of function name, as @meijeru shows.}
    sent: "2017-04-21T11:35:29.197Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f9ee4ccfec9192725f0c61"
    text: "You should write `remove/part` !"
    sent: "2017-04-21T11:34:36.464Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58f9ea1b881b89e10170a0eb"
    text: {How does `length` in `remove` work? It seems to only remove one value whatever number I write!?^/```^/>> x: [1 2 3 4 5]^/== [1 2 3 4 5]^/>> remove x /part 4^/== 4^/>> x^/== [2 3 4 5]^/```^/}
    sent: "2017-04-21T11:16:43.531Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58f9a6c58fcce56b20216ff1"
    text: {It is actually yours JSON, I just did some maintenance 😀}
    sent: "2017-04-21T06:29:25.641Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f98c978fcce56b20210716"
    text: {I think @rebolek 's JSON should be good enough, if you don't have any `null` value to deal with.}
    sent: "2017-04-21T04:37:43.842Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f96d168bb56c2d11c9f7cf"
    text: "Mine aren't clean enough to release right now."
    sent: "2017-04-21T02:23:18.820Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f96d0a8bb56c2d11c9f73b"
    text: {I don't think json saving (save/as) works yet. Looks like it writes out Red maps for objects.  Since you're fairly new to Red, it may be a lot for you to do. There is a lot of JSON Red experimentation, but we haven't tried to pick one as standard. }
    sent: "2017-04-21T02:23:06.998Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f96567f22385553d5f7d58"
    text: {I want to implement a small database programme. My data will be written in a file db.txt ,  but the problem is I have to print those data. I thought I would use browser for this. if I have a HTML file then  I can read db.js(it will be made from db.txt)  via <script SRC="db.js"></script> within my HTML file. For this I need to convert db.txt into  db.js from red.  db.txt contains 1000 lines like "name" "raton" "age" 35.            I need db.js   contains --- mydata= [{name: "raton", age: " 35"}, {name: "suvo", age: "25"}].                                                 }
    sent: "2017-04-21T01:50:31.637Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f8d4b23e27cac331a8f868"
    text: {:point_up: [April 20, 2017 8:06 AM](https://gitter.im/red/help?at=58f8c0808e4b63533de8aecd) There is a lesser known tool called Expect, which I always thought was a nice idea: https://en.wikipedia.org/wiki/Expect}
    sent: "2017-04-20T15:33:06.617Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58f8cd608e4b63533de8f155"
    text: {from [winpty readme](https://github.com/rprichard/winpty/blob/master/README.md)^/^/"The package consists of a library (libwinpty) and a tool for **Cygwin and MSYS** for running Windows console programs in a **Cygwin/MSYS pty**.^/^/**The software works by starting the winpty-agent.exe process with a new, hidden console window**, which bridges between the console API and terminal input/output escape codes. It polls the hidden console's screen buffer for changes and generates a corresponding stream of output.^/^/The Unix adapter allows running Windows console programs (e.g. CMD, PowerShell, IronPython, etc.) **under mintty or Cygwin's sshd** with properly-functioning input (e.g. arrow and function keys) and output (e.g. line buffering)."}
    sent: "2017-04-20T15:01:52.038Z"
    editedAt: "2017-04-20T15:03:42.565Z"
    v: 7
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f8ccfe8bb56c2d11c75600"
    text: {It would be a great addition to Red, but implementing it on windows is a bit hacky as seen in winpty...}
    sent: "2017-04-20T15:00:14.973Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f8ccfcc1d3b5015402ee9d"
    text: "yep, something like that"
    sent: "2017-04-20T15:00:12.685Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f8ccd4881b89e1016c04cd"
    text: {Looking at this :point_up: [April 20, 2017 8:13 AM](https://gitter.im/red/help?at=58f8204b881b89e101692ba5), I think this is what you mean...}
    sent: "2017-04-20T14:59:32.829Z"
    editedAt: "2017-04-20T14:59:46.800Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f8cb91ad849bcf42a231a2"
    text: {@JacobGood1 Do you mean something like this one in Python -^/[pty (linux)](https://docs.python.org/3.6/library/pty.html)^/[winpty (windows)](https://github.com/rprichard/winpty)^/?}
    sent: "2017-04-20T14:54:09.511Z"
    editedAt: "2017-04-20T14:58:02.926Z"
    v: 5
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58f8cb308fcce56b201de998"
    text: {something like this...^/```^/other-repl: run-other-repl^/out: send other-repl some-stuff^/probe out ^/-> output from other repl^/```}
    sent: "2017-04-20T14:52:32.636Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f8ca6e8e4b63533de8e305"
    text: {I want the red repl and a compiled red program to have those abilities. Other languages can do it, but red is still alpha. I was curious if it was possible in red, at this point.}
    sent: "2017-04-20T14:49:18.908Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f8c53d08c00c092a9be45b"
    text: {I am still a newbie at Red myself, but I suspect you would need to do some OS specific stuff in Red/System to get it to talk your other REPL.  If there is another way,  someone else please speak up.}
    sent: "2017-04-20T14:27:09.278Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f8c47af22385553d5cbf07"
    text: {So you want the Red REPL to talk to another REPL and generate commands for it?}
    sent: "2017-04-20T14:23:54.147Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f8c0808e4b63533de8aecd"
    text: {@dockimbel  It works in a way, the repl of the other language takes control of the cmd line, it basically becomes the repl of that language. I was wanting to stay in red, send commands to the running repl from the other language, from red... getting feedback from the repl of the other language. Hopefully, my wording is clear, when I read it it sounds a little odd. =)}
    sent: "2017-04-20T14:06:56.529Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f894ac08c00c092a9afc01"
    text: "@geekyi yup"
    sent: "2017-04-20T10:59:56.537Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f88b6b3e27cac331a794fb"
    text: {@9214 so you actually want `form bitset!` to print nicer? :p }
    sent: "2017-04-20T10:20:27.011Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f886aa8bb56c2d11c607e6"
    text: "yup, but don't tell me :smile: "
    sent: "2017-04-20T10:00:10.194Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8869d881b89e1016abf15"
    text: "You mean you want characters first, then digits?"
    sent: "2017-04-20T09:59:57.110Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8867d881b89e1016abe80"
    text: {anyway, I'll try to poke around and figure it out by myself, thanks for your help once again!}
    sent: "2017-04-20T09:59:25.951Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8866908c00c092a9abe91"
    text: {there's a little problem though, it generates `012 .. AZ` but I need `ABC .. 89`}
    sent: "2017-04-20T09:59:05.600Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8855a12d24099357ef19a"
    text: ";-P"
    sent: "2017-04-20T09:54:34.788Z"
    editedAt: "2017-04-20T09:55:10.291Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8855108c00c092a9aba4e"
    text: "> only-legally-acquired-songs^/^/:smirk: "
    sent: "2017-04-20T09:54:25.709Z"
    editedAt: "2017-04-20T09:54:32.199Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8852f8fcce56b201c9768"
    text: {@9214 ^/```lisp^/list-by-suffix: function [dir [file!] s [file!]][^/^-remove-each file list: read dir [s <> suffix? file]^/^-list^/]^/^/list-by-suffix %/c/music/only-legally-acquired-songs/ %.mp3^/```}
    sent: "2017-04-20T09:53:51.312Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f88465c1d3b50154018cf6"
    text: {@9214 Depends on how you want to use it, but yes, you can resolve such charset spec block that way.}
    sent: "2017-04-20T09:50:29.313Z"
    editedAt: "2017-04-20T09:50:53.511Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f884183e27cac331a7728f"
    text: {`build-charset [#"A" - #"Z" #"0" - #"9"]`}
    sent: "2017-04-20T09:49:12.267Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f883fa881b89e1016ab5e5"
    text: {@dockimbel :clap: I think you can pass `[#"A" - #"Z" #"0" - #"9"]` block instead and make bitset inside a function}
    sent: "2017-04-20T09:48:42.450Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f883d5f22385553d5b9258"
    text: "nice one"
    sent: "2017-04-20T09:48:05.499Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f8833708c00c092a9ab02d"
    text: {@9214^/ ```lisp^/build-charset: function [bs [bitset!]][^/^-out: make string! len: length? bs^/^-repeat i len [^/^-^-if find bs i: i - 1 [append out to char! i]^/^-]^/^-out^/]^/^/>> build-charset charset [#"A" - #"Z" #"0" - #"9"]^/== "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"^/```}
    sent: "2017-04-20T09:45:27.426Z"
    editedAt: "2017-04-20T09:48:45.642Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f883238bb56c2d11c5f7a7"
    text: "`read <folder>`! :sparkles: "
    sent: "2017-04-20T09:45:07.321Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f883143e27cac331a76d24"
    text: "nuh-uh"
    sent: "2017-04-20T09:44:52.414Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f882c708c00c092a9aae8b"
    text: {@9214 ^/```^/>> ls^/^-boot/               ^-bin/                ^-initrd.img.old      ^/^-lib64/              ^-nix/                ^-vmlinuz             ^/^-srv/                ^-opt/                ^-mnt/                ^/^-var/                ^-etc/                ^-root/               ^/^-sys/                ^-media/              ^-cdrom/              ^/^-sbin/               ^-dev/                ^-run/                ^/^-lost+found/         ^-initrd.img          ^-proc/               ^/^-lib/                ^-home/               ^-usr/                ^/^-vmlinuz.old         ^-tmp/                ^/```}
    sent: "2017-04-20T09:43:35.582Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f8823cf22385553d5b8bb9"
    text: {is it even possible without full `0.7.0` I/O support?}
    sent: "2017-04-20T09:41:16.534Z"
    editedAt: "2017-04-20T09:41:25.137Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f881278bb56c2d11c5efbf"
    text: {also, how can I make a list (possibly a block) of all files with specific format in some directory? Say, all `.jpeg` pictures or `.mp3` tracks.}
    sent: "2017-04-20T09:36:39.334Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f88053cfec919272590150"
    text: "but never mind, it will do for now"
    sent: "2017-04-20T09:33:07.239Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f88014cfec919272590023"
    text: {@dockimbel I figured out how bitset work, it's just that I want to nicely generate this large alphabet string :smile: }
    sent: "2017-04-20T09:32:04.555Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f87ff2d32c6f2f0922b9e2"
    text: {@maximvl Because they don't have a concept of  "position", you can't navigate a bitset, you can only access its content with a direct index.}
    sent: "2017-04-20T09:31:30.685Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f87f05d32c6f2f0922b711"
    text: {@dockimbel but bitsets still have indexing, why can't they work like a series?}
    sent: "2017-04-20T09:27:33.650Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f87ef33e27cac331a75e3b"
    text: {@9214 I wrote such a function for Rebol, let me see if I can find it...}
    sent: "2017-04-20T09:27:15.347Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f87ed6881b89e1016a9c14"
    text: {@maximvl Iteration is for series, `bitset!` is not a series. For the `false`, bitsets are virtually infinite, so every non-defined bit will return `false` (or `true` in a complemented bitset). See: http://www.rebol.com/r3/docs/datatypes/bitset.html#section-28}
    sent: "2017-04-20T09:26:46.934Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f878a312d24099357ebc42"
    text: {and iteration is not supported:^/```^/>> c: charset [#"a" - #"z"]^/== make bitset! #{0000000000000000000000007FFFFFE0}^/>> forall c [ prin c/1 ]^/*** Script Error: forall does not allow bitset! for its 'word argument^/```}
    sent: "2017-04-20T09:00:19.620Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f876a88bb56c2d11c5c1a0"
    text: {btw, @dockimbel  shouldn't last one return `none`?^/```^/>> b: make bitset! []^/== make bitset! #{00}^/>> b/10^/== false^/```}
    sent: "2017-04-20T08:51:52.393Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f876578fcce56b201c5e6e"
    text: {I don't think this is possible without custom decoding algorithm}
    sent: "2017-04-20T08:50:31.601Z"
    editedAt: "2017-04-20T08:50:39.226Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f8760b12d24099357ead83"
    text: {and writing whole alphabet in one large string is too clunky}
    sent: "2017-04-20T08:49:15.112Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f875f03e27cac331a733a4"
    text: {I need to decode bytes with some custom encoding scheme, each byte is simply and index of a character in "ABC ... 789" string}
    sent: "2017-04-20T08:48:48.405Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f875868bb56c2d11c5bd79"
    text: {is it possible to:^/* convert `charset [#"A" - #"Z" #"0" - #"9"]` to string `"ABC .. Z0123 .. 9"`?^/* somehow traverse `bitset!` and get specific chars by index?}
    sent: "2017-04-20T08:47:02.557Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f86bb808c00c092a9a493b"
    text: {@dockimbel thank you. Agree that introducing new feature requires careful check if it will work smoothly with existing features}
    sent: "2017-04-20T08:05:12.079Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f858ba08c00c092a99ff9e"
    text: {@rebolek :point_up: [April 20, 2017 12:45 AM](https://gitter.im/red/help?at=58f7da63a0e48562421e4945) ^/And continue:^/```^/>> insert skip block 2 'reduce^/== [first block]^/>> reduce block^/== [true]^/```}
    sent: "2017-04-20T06:44:10.229Z"
    editedAt: "2017-04-20T06:44:47.732Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f83509881b89e101696ed3"
    text: {@JacobGood1 Have you tried using `call/console` (from CLI console only if you're on Windows)? If the REPL is relying on standard I/O, it should work (like the Red CLI console), if it has its own handlers, it won't (like the Red GUI console).}
    sent: "2017-04-20T04:11:53.388Z"
    editedAt: "2017-04-20T04:13:10.490Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f830c38bb56c2d11c4bb98"
    text: {@PDelak ^/> yes, but is this something by design, or current limitation?^/^/The macro system is currently limited to preprocessing stage only, context are non-existent at that stage in Redbol, they are constructed at run-time only. Macros are a very new thing in Redbol world where tree walking is the norm for achieving meta-programming, so I prefer to advance carefully to avoid disrupting the rest of the language, as what works fine in Lisp, may not always be a good fit to Redbol. Nonetheless, I think I figured out a simple way to have context-aware macros, though it requires a bit more study to be sure it won't cause issues.}
    sent: "2017-04-20T03:53:39.244Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f820dca0e48562421f3d5a"
    text: {It would be very nice to have something similar in Red (especially if it worked with Windows as well).  It would make Red a great tool for QA testing.}
    sent: "2017-04-20T02:45:48.422Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58f8204b881b89e101692ba5"
    text: {@JacobGood1 I don't think you can do it with ```call```. I have done something like this in Ruby using the Unix Pseudo Terminal. (pty module in the Ruby Standard Library). }
    sent: "2017-04-20T02:43:23.949Z"
    editedAt: "2017-04-20T02:45:22.550Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58f7f02fbdf4acc11276d2bf"
    text: {Using the new call feature...^/^/If I run an external program that has a repl of sorts, after using call, how do I continue to send input to that program to recieve output(I have never done this before in other languages)}
    sent: "2017-04-19T23:18:07.316Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f7e1583e27cac331a52018"
    text: "anyway, thx for your help"
    sent: "2017-04-19T22:14:48.659Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7dfc1a0e48562421e5dc0"
    text: "I don't know. "
    sent: "2017-04-19T22:08:01.564Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58f7deeb3e27cac331a51704"
    text: {yes, but is this something by design, or current limitation?}
    sent: "2017-04-19T22:04:27.895Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7deb5bdf4acc11276907c"
    text: {I don't believe macros actually live *in* nested contexts. }
    sent: "2017-04-19T22:03:33.007Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7de023e27cac331a51384"
    text: {```^/api: generateGraphApi^/api/mac ; *** Compilation Error: word mac not defined in api/mac^/```}
    sent: "2017-04-19T22:00:34.897Z"
    editedAt: "2017-04-19T22:02:39.645Z"
    v: 2
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7ddeed32c6f2f09205004"
    text: {@greggirwin something like that, but in this example, macro is not accessible though api word}
    sent: "2017-04-19T22:00:14.370Z"
    editedAt: "2017-04-19T22:01:08.896Z"
    v: 3
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7dc0cbdf4acc112768518"
    text: {@PDelak, I haven't tinkered with macros much, so someone may point out issues with this. But is this what you want to do?^/```^/do expand [^/^-#macro generateGraphApi: function[][^/^-    [^/^-        context [^/^-            foo: function [][print "foo"]^/^-            bar: function [][print "bar"]^/^-            #macro mac: function [][function[] [probe "mac"]]^/^-        ]^/^-    ]^/^-]^/^-generateGraphApi^/^-mac^/]^/```}
    sent: "2017-04-19T21:52:12.670Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7da63a0e48562421e4945"
    text: {This is fun^/```^/>> value: [absolutely "anything"]^/== [absolutely "anything"]^/>> block: [value = get first block]^/== [value = get first block]^/>> reduce block^/== [true]^/>> remove skip block 2^/== [first block]^/>> reduce block^/== [false]^/```^/}
    sent: "2017-04-19T21:45:07.369Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7d763bdf4acc1127670a8"
    text: {I don't know, I think that `parse` is the best `find` :)}
    sent: "2017-04-19T21:32:19.856Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7d6d3f22385553d590696"
    text: ":)"
    sent: "2017-04-19T21:29:55.895Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7d6a4f22385553d590574"
    text: "Call it `search`. :^^)"
    sent: "2017-04-19T21:29:08.483Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7d6908e4b63533de519a3"
    text: {anyways I think `find` should be a nice dialect too :D}
    sent: "2017-04-19T21:28:48.187Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d66e08c00c092a984026"
    text: {@rebolek same thing, how do I do reverse and others}
    sent: "2017-04-19T21:28:14.215Z"
    editedAt: "2017-04-19T21:28:19.545Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d659a0e48562421e39ea"
    text: "of course this is incorrect"
    sent: "2017-04-19T21:27:53.051Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7d64af22385553d59044f"
    text: {```^/#macro generateGraphApi: function[][^/    [^/        context [^/            foo: function[][print "foo"]^/            bar: function[][print "bar"]^/            mac: #macro mac: function[] [^/              print "mac"^/            ] ^/        ]^/    ]^/]^/```}
    sent: "2017-04-19T21:27:38.218Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7d60ecfec919272568a04"
    text: "@greggirwin something like"
    sent: "2017-04-19T21:26:38.923Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7d5e5881b89e101682419"
    text: {```^/>> vals^/== [1x5 2x6 3x7]^/>> key: func [data value fc] [foreach val data [do [:fc value val]]]^/== func [data value fc][foreach val data [do [:fc value val]]]^/>> key vals 7 :second^/== 3x7^/```^/}
    sent: "2017-04-19T21:25:57.779Z"
    editedAt: "2017-04-19T21:26:47.384Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7d5dbcfec91927256894d"
    text: {@maximvl, doesn't seem like a great approach to the interface. Just use a func to test with the above.}
    sent: "2017-04-19T21:25:47.481Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7d5d88fcce56b201a26bb"
    text: "and your version only supports `logic!` functions"
    sent: "2017-04-19T21:25:44.791Z"
    editedAt: "2017-04-19T21:25:58.585Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d5c1cfec9192725688d8"
    text: {@greggirwin yes, but you basically have to reimplement `find` if you want to support `reverse` and other things}
    sent: "2017-04-19T21:25:21.594Z"
    editedAt: "2017-04-19T21:25:28.325Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d5bc881b89e10168232c"
    text: {I was thinking about generating macro as above examples for functions}
    sent: "2017-04-19T21:25:16.042Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7d59c8bb56c2d11c387a7"
    text: {@greggirwin no, this is for me calling macro by another macro. }
    sent: "2017-04-19T21:24:44.198Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7d590d32c6f2f09203007"
    text: {or "find element for which `type?` is `time!`" in my first example}
    sent: "2017-04-19T21:24:32.918Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d578f22385553d59015c"
    text: {```^/find-if: func [^/^-"Returns a series at the first value that matches a test."^/^-series [series!]^/^-test [any-function!] "Test (predicate) to perform on each value"^/^-/skip "Treat the series as fixed size records"^/^-^-size [integer! none!]^/][^/^-either empty? series [none][^/^-^-forall series [^/^-^-^-if test first series [return series]^/^-^-]^/^-]^/]^/find-if [2 4 6 7] :odd?^/```}
    sent: "2017-04-19T21:24:08.919Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7d53808c00c092a983b41"
    text: {"find an element for which `second` is `7`"}
    sent: "2017-04-19T21:23:04.415Z"
    editedAt: "2017-04-19T21:23:42.654Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d4efa0e48562421e34c2"
    text: {like `find/key [1x5 2x6 3x7] 7 :second` should return `[3x7]`}
    sent: "2017-04-19T21:21:51.850Z"
    editedAt: "2017-04-19T21:22:11.303Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d4c1d32c6f2f09202c7b"
    text: {Could you just provide a concrete example, with data?}
    sent: "2017-04-19T21:21:05.989Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7d4898fcce56b201a20c8"
    text: {the `key` should be a refinement for a function to apply to element before comparation}
    sent: "2017-04-19T21:20:09.346Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d46c8fcce56b201a203c"
    text: "Not sure how your example would work. "
    sent: "2017-04-19T21:19:40.529Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7d4478e4b63533de5103d"
    text: "something like `find/key block time! :type?`"
    sent: "2017-04-19T21:19:03.984Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d447ad849bcf429e4d2e"
    text: "@maximvl, not for standard find. HOF time."
    sent: "2017-04-19T21:19:03.312Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7d41e8fcce56b201a1e66"
    text: {@PDelak, do you mean something like this?^/```^/do expand [^/^-#macro make-api: function [body][^/^-^-reduce [context body]^/^-]^/^-#macro make-api-macro: function [body][^/^-^-make-api body^/^-]^/    api-1: make-api-macro [foo: function [][print "foo"]]^/    api-2: make-api-macro [bar: function [][print "bar"]]^/^/    api-1/foo^/    api-2/bar^/]^/```^/I've never tried it.}
    sent: "2017-04-19T21:18:22.170Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7d3d98fcce56b201a1d29"
    text: {@greggirwin any way to specify custom function instead of `=` while searching?}
    sent: "2017-04-19T21:17:13.436Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d39df22385553d58f875"
    text: "Yes."
    sent: "2017-04-19T21:16:13.501Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7d3863e27cac331a4ea75"
    text: {can I find if block has a value of certain datatype using `find`?}
    sent: "2017-04-19T21:15:50.796Z"
    editedAt: "2017-04-19T21:16:06.919Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7d194a0e48562421e2776"
    text: {@AlexanderBaggett or you can write simple `ultra-compose` function that will go thru every `paren!` just to get some value ;)^/```^/>> ultra-compose: function [value] [^/    rule: [^/        mark: change set val paren! (compose val) :mark rule ^/    |   ahead block! into rule ^/    |   skip^/    ] ^/    parse value [some rule] value^/]^/== func [value /local rule mark][...^/>> ultra-compose [([([(a: 10)])])]^/== [10]^/```}
    sent: "2017-04-19T21:07:32.774Z"
    editedAt: "2017-04-19T21:09:27.857Z"
    v: 5
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7cfa7881b89e101680aeb"
    text: {@AlexanderBaggett you can easily do, it's just doesn't give you the control you have with regular `compose`}
    sent: "2017-04-19T20:59:19.726Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7cf85ad849bcf429e3882"
    text: "@greggirwin  :smile: "
    sent: "2017-04-19T20:58:45.713Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7cf4d08c00c092a9821e7"
    text: {Compose composes parens in blocks but not parens in parens being composed. :^^)}
    sent: "2017-04-19T20:57:49.144Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7cf12ad849bcf429e3698"
    text: "Or to be more precise, what @maximvl said above "
    sent: "2017-04-19T20:56:50.061Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f7cec98bb56c2d11c36891"
    text: {`parens!` is what the current compose is stopping at}
    sent: "2017-04-19T20:55:37.783Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f7ce9f881b89e10168066f"
    text: "hmm"
    sent: "2017-04-19T20:54:55.725Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7ce90f22385553d58e242"
    text: "You could build recursive reducer yourself 😉"
    sent: "2017-04-19T20:54:40.203Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f7ce678bb56c2d11c36717"
    text: {@AlexanderBaggett `/` path syntax is used for refinements, among others. Quite a lot of stuff is multipurpose like that. For practicality and convenience }
    sent: "2017-04-19T20:53:59.528Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f7ce5fbdf4acc112764c92"
    text: {It would be interesting if there was  recursive composer/reducer that  evaluated all nested blocks no matter what level.}
    sent: "2017-04-19T20:53:51.507Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7cdb608c00c092a981a21"
    text: {just for you to understand why one `compose/deep` is not enough for your example}
    sent: "2017-04-19T20:51:02.023Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7cd79d32c6f2f09200ffc"
    text: {It may be totally logical, but to me its just fun.}
    sent: "2017-04-19T20:50:01.812Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7cd4d8bb56c2d11c36204"
    text: {@AlexanderBaggett in your example before - you have `compose` evaluating the code inside parens, which is a block and block is not evaluated by default}
    sent: "2017-04-19T20:49:17.078Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7cd353e27cac331a4cdcd"
    text: {Red enhanced path syntax in a very nice way. In Rebol, you couldn't use path notation to access set-word keys.}
    sent: "2017-04-19T20:48:53.040Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7cd1908c00c092a98179b"
    text: {there is same way for accessing values, be it `object!`, `block!`, `path!`, `file!`, `url!`, ...}
    sent: "2017-04-19T20:48:25.856Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7ccc28e4b63533de4ee8a"
    text: "yes"
    sent: "2017-04-19T20:46:58.916Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7ccba08c00c092a981626"
    text: {I thought `/` were for refinements are the inner blocks accessed in the same way?}
    sent: "2017-04-19T20:46:50.870Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "58f7cc968e4b63533de4ee23"
    text: {```^/>> a: [a: [a: [a: [a: a] ] ] ]^/== [a: [a: [a: [a: a]]]]^/>> get a/a/a/a/a^/== [a: [a: [a: [a: a]]]]^/```}
    sent: "2017-04-19T20:46:14.876Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7cc6d8fcce56b2019ffec"
    text: "Red is just too cool."
    sent: "2017-04-19T20:45:33.666Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7cc2308c00c092a981461"
    text: {this:  `a: [a: [a: [a: [a: a] ] ] ]` would never fly in an OOP language.  }
    sent: "2017-04-19T20:44:19.880Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7cc13d32c6f2f092009d5"
    text: "once it is evaluated, `word!` `a` gets value."
    sent: "2017-04-19T20:44:03.301Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7cbdff22385553d58d415"
    text: "it is not evaluated until `reduce` step"
    sent: "2017-04-19T20:43:11.245Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7cbc93e27cac331a4c7dd"
    text: "it is still a `set-word!`"
    sent: "2017-04-19T20:42:49.423Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7cbaa8e4b63533de4e93c"
    text: {I guess since the inner block isn't evaluated yet,  it isn't a word yet so you can get away with that kind of silliness.}
    sent: "2017-04-19T20:42:18.623Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7cb688fcce56b2019fc22"
    text: {```^/>> a: compose/deep [([([(a: 10)])])]^/== [([(a: 10)])]^/>> a: compose/deep compose/deep [([([(a: 10)])])]^/== [(a: 10)]^/>> a: reduce compose/deep compose/deep [([([(a: 10)])])]^/== [10]^/```}
    sent: "2017-04-19T20:41:12.478Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7cb518e4b63533de4e7aa"
    text: {I guess the order of evaluation is all that matters here.}
    sent: "2017-04-19T20:40:49.840Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7cb1a881b89e10167f831"
    text: {Actually,  I am surprised this works  ``` a: reduce compose/deep compose/deep [([([(a: 10)])])]```  }
    sent: "2017-04-19T20:39:54.879Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7cae58bb56c2d11c357ac"
    text: {@AlexanderBaggett new line after the backticks. Easy to miss at the beginning }
    sent: "2017-04-19T20:39:01.618Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f7cabdd32c6f2f0920048e"
    text: ":smile: ^/"
    sent: "2017-04-19T20:38:21.858Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7caaabdf4acc112763cdf"
    text: "it's a piece of modern art for sure"
    sent: "2017-04-19T20:38:02.451Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f7ca92f22385553d58cdff"
    text: {No problem, I see the difference, you're right :)^/}
    sent: "2017-04-19T20:37:38.237Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7ca79ad849bcf429e225a"
    text: {well I did not succeed in formatting that text lol^/}
    sent: "2017-04-19T20:37:13.278Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7ca46f22385553d58cc7c"
    text: {I get ^/```>> reduce compose/deep [([([(a: 10)])])]^/== [[(a: 10)]]^/```^/vs ^/```^/>> reduce compose/deep compose/deep [([([(a: 10)])])]^/== [10]^/```}
    sent: "2017-04-19T20:36:22.323Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7c9eca0e48562421e091f"
    text: {@AlexanderBaggett `compose/deep` does not need to call itself, it will `compose` every level.^/}
    sent: "2017-04-19T20:34:52.629Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7c952bdf4acc112763510"
    text: "Can macro generate other macro?"
    sent: "2017-04-19T20:32:18.259Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7c903881b89e10167ec7b"
    text: {```reduce compose/deep compose/deep [([([(a: 10)])])]```  Silliness indeed ;)}
    sent: "2017-04-19T20:30:59.163Z"
    editedAt: "2017-04-19T20:31:39.418Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7c5d2cfec919272564236"
    text: {But there are even puzzles within those examples. Intentionally. :^^)}
    sent: "2017-04-19T20:17:22.423Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7c56708c00c092a97f1be"
    text: {@AlexanderBaggett now you know `compose` :smile: one piece of the puzzle!}
    sent: "2017-04-19T20:15:35.783Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f7c4238fcce56b2019d996"
    text: {for now I'm gonna to use red/system at lower level}
    sent: "2017-04-19T20:10:11.320Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7c3efad849bcf429e04ff"
    text: "@PDelak linking to `C`?"
    sent: "2017-04-19T20:09:19.729Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f7c38cd32c6f2f091fe214"
    text: {@PDelak the difference is `reduce` evaluates everything inside the block while `compose` only things in parens}
    sent: "2017-04-19T20:07:40.072Z"
    editedAt: "2017-04-19T20:07:46.676Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7c373f22385553d58acef"
    text: {so the goal is to describe some constraints and generate library code at compile time}
    sent: "2017-04-19T20:07:15.462Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7c34bcfec9192725636ea"
    text: {@geekyi I'm using macros for generating library API at compile time }
    sent: "2017-04-19T20:06:35.990Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7c2e9bdf4acc1127616ad"
    text: "thank you all"
    sent: "2017-04-19T20:04:57.367Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7c289881b89e10167cfd3"
    text: {@geekyi notices @AlexanderBaggett has already mentioned it..}
    status: true
    sent: "2017-04-19T20:03:21.739Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f7c1e8f22385553d58a60c"
    text: {@PDelak you don't have to use `#macro` unless you want it to happen only at compile time. You can replace with `do` and `reduce` (or something simpler) }
    sent: "2017-04-19T20:00:40.569Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f7c01ba0e48562421dd9d9"
    text: {The console is your friend. ^/```^/>> a: 1^/== 1^/>> [a]^/== [a]^/>> compose [(a)]^/== [1]^/>> compose [[(a)]]^/== [[(a)]]^/>> compose/deep [[(a)]]^/== [[1]]^/>> compose/deep/only [[(a)]]^/== [[1]]^/>> compose/deep/only [([(a)])]^/== [[(a)]]^/>> compose/deep [([(a)])]^/== [(a)]^/```}
    sent: "2017-04-19T19:52:59.206Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7beb108c00c092a97d5c6"
    text: "so  `compose/deep ` would do nested blocks"
    sent: "2017-04-19T19:46:57.598Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7be7ea0e48562421dd21a"
    text: {`? compose`. Compose gives you more control via refinements.}
    sent: "2017-04-19T19:46:06.057Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7be38881b89e10167bce7"
    text: {So the difference between `compose` and `reduce `  is that reduce only works for 1 block but compose can be done do get all nested blocks as well?}
    sent: "2017-04-19T19:44:56.787Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7be1cf22385553d58948a"
    text: {```^/do expand [^/^-#macro generate-api: function [][^/^-^-code: [^/^-^-^-make hash! reduce [^/^-^-^-^-'foo function [][print "foo"]^/^-^-^-^-'bar function [][print "bar"]^/^-^-^-]^/^-^-]^/^-^-return code^/^-]^/^-api: generate-api^/^-api/foo^/^-api/bar^/]^/```}
    sent: "2017-04-19T19:44:28.262Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7bdb3a0e48562421dce70"
    text: {Though it's not clear why `hash!` is being used here.}
    sent: "2017-04-19T19:42:43.298Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7bd80d32c6f2f091fc8d1"
    text: {Either `reduce` or `compose` will work. Give me a minute.}
    sent: "2017-04-19T19:41:52.795Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7bd5abdf4acc11275fa3b"
    text: {@AlexanderBaggett you can use `compose` :D^/```^/>> h: make hash! compose [foo (func [] [print "foo"]) bar (func [] [print "bar"])]  ^/== make hash! [foo func [][print "foo"] bar func [][print "bar"]]^/>> h/foo^/foo^/>> h/bar^/bar^/```}
    sent: "2017-04-19T19:41:14.216Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7bd25d32c6f2f091fc6f7"
    text: "does he need to use `reduce` ?"
    sent: "2017-04-19T19:40:21.248Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7bd0dbdf4acc11275f986"
    text: {Note that you can also use `expand` to play with macros in the console, which is really nice.}
    sent: "2017-04-19T19:39:57.732Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7bcf4881b89e10167b781"
    text: {@PDelak, hash! isn't working in this case, because you aren't evaluating the block used to create it. }
    sent: "2017-04-19T19:39:32.557Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7bc1b8e4b63533de4a358"
    text: "@PDelak what do you mean?"
    sent: "2017-04-19T19:35:55.472Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7bbaff22385553d58892d"
    text: "btw. why hash table does not work in this case?"
    sent: "2017-04-19T19:34:07.147Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7bac38fcce56b2019ad8c"
    text: {I know what I want to achieve, the thing is I'm still learning how}
    sent: "2017-04-19T19:30:11.119Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7ba368e4b63533de49b26"
    text: {I think you should try writing code in console first:) And use macro once you know what you need to get.}
    sent: "2017-04-19T19:27:50.116Z"
    editedAt: "2017-04-19T19:28:14.070Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7ba12f22385553d588152"
    text: {```^/>> ?? context^/context: func [spec [block!]][make object! spec]^/```}
    sent: "2017-04-19T19:27:14.355Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7b9e28e4b63533de49a15"
    text: {@Oldes thanks. Whats the meaning of context word here?}
    sent: "2017-04-19T19:26:26.215Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7b95b881b89e10167a5cb"
    text: {@PDelak this works:^/```^/Red []^/^/#macro generateApi: function[][^/^-[^/^-^-context [^/    ^-^-foo: function[][print "foo"]^/    ^-^-bar: function[][print "bar"]^/^-^-]^/^-]^/]^/^/api: generateApi^/api/foo^/api/bar^/```}
    sent: "2017-04-19T19:24:11.888Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7b2df08c00c092a979d96"
    text: {but it does not have an effect. Is it possible to achieve? What I'm doing wrong?}
    sent: "2017-04-19T18:56:31.479Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7b297881b89e1016788ad"
    text: {```^/#macro generateApi: function[][^/  code: [^/          make hash![^/            foo function[][print "foo"]^/^-    bar function[][print "bar"]^/          ]          ^/  ]^/  return code ^/]^/^/api: generateApi^/api/foo^/api/bar^/```^/}
    sent: "2017-04-19T18:55:19.068Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
) #(
    id: "58f7b26c08c00c092a979b4c"
    text: "I'm trying to generate set of functions via macro"
    sent: "2017-04-19T18:54:36.968Z"
    v: 1
    author: "58eff4bfd73408ce4f583de7"
)#(
    id: "58f6feb0f22385553d55212e"
    text: {@maximvl ^/```lisp^/>> to-integer 2#{00110101 11001110}^/== 13774^/```}
    sent: "2017-04-19T06:07:44.360Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f6b82fbdf4acc112719c8d"
    text: "Happy to help, indirectly. :^^)"
    sent: "2017-04-19T01:06:55.545Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f6ab7369a692963ec2e0a4"
    text: "works great thanks @greggirwin, @dander "
    sent: "2017-04-19T00:12:35.710Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f6aa9a8fcce56b20155a26"
    text: "indeed :)"
    sent: "2017-04-19T00:08:58.690Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58f6aa7708c00c092a9354ed"
    text: {ty, I thought about writing my own but it is always good to check =)}
    sent: "2017-04-19T00:08:23.628Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f6aa51f22385553d540f6d"
    text: {@JacobGood1,  @greggirwin posted this one :point_up: [April 1, 2017 10:42 AM](https://gitter.im/red/help?at=58dfe69e0e4137042ad2ffb7)}
    sent: "2017-04-19T00:07:45.851Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58f6a84fcfec919272519948"
    text: {Is there a function to test the speed/perf of your code?^/```^/time [do-stuff]^/```}
    sent: "2017-04-18T23:59:11.981Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f678c6ad849bcf4298a4c7"
    text: "And `enbase` is its counterpart."
    sent: "2017-04-18T20:36:22.747Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f678a5bdf4acc11270b4d6"
    text: "didn't know about `debase`, thanks!"
    sent: "2017-04-18T20:35:49.729Z"
    editedAt: "2017-04-18T20:35:51.722Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f674dd881b89e101627e92"
    text: {```^/>> foreach b split "00110101 11001110" space [print to integer! debase/base b 2]^/53^/206^/>> ^/```^/roughly}
    sent: "2017-04-18T20:19:41.560Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f67418f22385553d53380a"
    text: "@9214 yep"
    sent: "2017-04-18T20:16:24.367Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f67406bdf4acc11270a12f"
    text: {in Rebol there is a `2#{}` syntax, but it's still not programmable}
    sent: "2017-04-18T20:16:06.208Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f673f8bdf4acc11270a0e8"
    text: "@maximvl you mean convert from binary to decimal?"
    sent: "2017-04-18T20:15:52.555Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f673dcf22385553d533703"
    text: {if I have a list of strings like `00110101 11001110` how do I parse them into numbers?}
    sent: "2017-04-18T20:15:24.067Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f62fa98e4b63533dde1d24"
    text: {Ok thanks, not a big deal with the work around! :smile: }
    sent: "2017-04-18T15:24:25.558Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f62dc3d32c6f2f09194185"
    text: "@x8x Yes."
    sent: "2017-04-18T15:16:19.236Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f62b86bdf4acc1126f581a"
    text: {@dockimbel Thanks! just curious is this also a case that has to wait for the dynamic stack branch?}
    sent: "2017-04-18T15:06:46.580Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f61e7e69a692963ec07248"
    text: {@x8x `do  [fun var]` That's the only way currently to get it compile properly.}
    sent: "2017-04-18T14:11:10.409Z"
    editedAt: "2017-04-18T14:11:50.703Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f60d9f881b89e101608c40"
    text: {There is an open issue about this https://github.com/red/red/issues/2485}
    sent: "2017-04-18T12:59:11.600Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f603e08fcce56b2012792f"
    text: {Hello, I need to pass a function as a parameter to another function, it works interpreted but not compiled. I'm sorry, I'm sure this has already been answered before but can't find any pointer. Here it is:^/```^/a: func [fun /local var][^/^-var: 123^/^-fun var^/]^/fun: func[var][print var]^/a :fun^/```^/Interpreter will print `123`, copiled will do nothing. Any smart way do get that working in compiled code beside putting everything in a `do []` ?}
    sent: "2017-04-18T12:17:36.870Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f5f4028fcce56b20123aef"
    text: {Well, I was not using View/VID for quite some time. Need to look into some Red examples}
    sent: "2017-04-18T11:09:54.139Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f5f3f2f22385553d50d47c"
    text: {@maximvl with `base`, which is a base for some styles, it works. For `box`, which seems to be based upon the `base` and uses a transparency, it does not work. For what you say - a function with an event, I am not sure what you meant.}
    sent: "2017-04-18T11:09:38.433Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f5f3c5f22385553d50d40f"
    text: "@maximvl just guessing"
    status: true
    sent: "2017-04-18T11:08:53.377Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f5f3ad69a692963ebfa869"
    text: {@pekr are you sure it should be a block, not a function with `event` argument?}
    sent: "2017-04-18T11:08:29.932Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f5f3828e4b63533ddd04fa"
    text: {Yes, the default one. Right now, it is a bit confusing. In R2, for an action, you used simply a block. With Red, you have `on-*`actions. I first used `on-click`, but I think it was already repeated many times, that it is for a button and maybe a subject for a change. But `on-down`seems to be a default actor, if you don't state one?}
    sent: "2017-04-18T11:07:46.355Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f5f356bdf4acc1126e519d"
    text: {ah, does it mean you can handle clicks on any kind of face?}
    sent: "2017-04-18T11:07:02.896Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f5f336d32c6f2f09183a6c"
    text: {isn't it the button property? how does it work on the `box`?}
    sent: "2017-04-18T11:06:30.130Z"
    editedAt: "2017-04-18T11:06:33.677Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f5f31fad849bcf42962bfe"
    text: "`on-down`"
    sent: "2017-04-18T11:06:07.188Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f5f30fbdf4acc1126e4ffe"
    text: {what kind of "property" is this `[print "test"]`?}
    sent: "2017-04-18T11:05:51.290Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f5f300bdf4acc1126e4fd1"
    text: "Don't understand"
    sent: "2017-04-18T11:05:36.903Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f5f2e58bb56c2d11bb6e76"
    text: {>If I change box to base, it works^/^/it works? what?}
    sent: "2017-04-18T11:05:09.195Z"
    editedAt: "2017-04-18T11:05:16.017Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f5f2788bb56c2d11bb6cae"
    text: {Is that because `box`is transparent by default, and hence the event fall on the underlying `face`? If I change `box`to `base`, it works ...}
    sent: "2017-04-18T11:03:20.825Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f5f2460ed3020c38298ae4"
    text: {Sorry for stupid question, but why I am not getting a print output for the following code? `view [box 300x300 [print "test"]]`}
    sent: "2017-04-18T11:02:30.519Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f5eca80ed3020c38297607"
    text: "Thanks Petr krenzelok"
    sent: "2017-04-18T10:38:32.547Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f5ebd608c00c092a90082e"
    text: {You mean faster than once in a second? Try this example in the console and play with the `rate`value: `view [b: base 300x300 rate 10 on-time [b/color: random 255.255.255.0]]` }
    sent: "2017-04-18T10:35:02.385Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f5eaa369a692963ebf85e5"
    text: {rate 1 moving the circle after every second. but is it possible to fire the on-time event less than 1 second}
    sent: "2017-04-18T10:29:55.064Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f5ea038fcce56b20120d50"
    text: "Maybe he meant fast?"
    sent: "2017-04-18T10:27:15.650Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f5e915a0e485624215ffab"
    text: {@raton3062015 Not sure what you mean by "I want to move it first", so I'll guess: `rate 1 now`.}
    sent: "2017-04-18T10:23:17.758Z"
    editedAt: "2017-04-18T10:23:33.940Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f5e8c369a692963ebf7e6e"
    text: {I am trying to move a circle with changing its offset.  rate 00:00:01 , which moving circle slowly. I want to move it first}
    sent: "2017-04-18T10:21:55.882Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f5bbd3881b89e1015f35a2"
    text: {`then` is not the most intuitive command, maybe a renaming will happen on that one.}
    sent: "2017-04-18T07:10:11.445Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f5bb3bf22385553d4fe589"
    text: "thanks "
    sent: "2017-04-18T07:07:39.459Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f5bb39d32c6f2f09175325"
    text: "TBH, I haven't used  `then` in a while."
    sent: "2017-04-18T07:07:37.514Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f5bb2c8e4b63533ddc0d24"
    text: "Th"
    sent: "2017-04-18T07:07:24.361Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f5bb1f69a692963ebeb54a"
    text: "There's a ticket about it."
    sent: "2017-04-18T07:07:11.262Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f5bb08d32c6f2f091752e3"
    text: {Oh, that's why I can't come up with some example? ;)}
    sent: "2017-04-18T07:06:48.648Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f5bad6d32c6f2f09175262"
    text: "`then` is half-broken for now, it needs redesign."
    sent: "2017-04-18T07:05:58.010Z"
    editedAt: "2017-04-18T07:06:14.978Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f5b924d32c6f2f09174c26"
    text: {If:^/`if` lets you do additional checks in Red, where parse rules are not enough:^/```^/>> parse [1 x] [set value integer! if (value > 0) word!]^/== true^/>> parse [0 x] [set value integer! if (value > 0) word!]^/== false^/```}
    sent: "2017-04-18T06:58:44.084Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f5b806f22385553d4fd8fe"
    text: {Ahead:^/```^/>> parse [a [b c]] ['a ahead block! into [some word!]]^/== true^/```^/`ahead` check for type and if it matches, it continues with `into` rule. Without this check, `into` would accept string also:^/```^/>> parse [a "b c"] ['a ahead block! into [some word!]]^/== false^/>> parse [a "b c"] ['a into [some word!]]^/*** Script Error: PARSE - matching by datatype not supported for any-string! input^/*** Where: parse^/```}
    sent: "2017-04-18T06:53:58.591Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f5b706ad849bcf42952da6"
    text: {Ahead, if, then  keywords in parse. Pls give some example of use of these keywords}
    sent: "2017-04-18T06:49:42.252Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f5917d08c00c092a8e9ce3"
    text: {Yeah. Converted into "null" for json. }
    sent: "2017-04-18T04:09:33.287Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58f58f6ca0e4856242149649"
    text: {Objects were used. No choice really. I did experiements with block and hash as well though. There was no swapping. None! was always used on the Rebol side.}
    sent: "2017-04-18T04:00:44.816Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f58ebf08c00c092a8e9384"
    text: "lol, cool comment. ^/; Is this ugly or what?! "
    sent: "2017-04-18T03:57:51.142Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f58e160ed3020c38280bb7"
    text: {Looks like "null" and none! were swapped back and forth for json, in this. But also looks like object! was used:^/http://www.rebol.org/view-script.r?script=json.r}
    sent: "2017-04-18T03:55:02.585Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f55c998bb56c2d11b93e31"
    text: {@RnBrgn not reassigned? this means you were looping from -1 to minus infinity, so zero comparison was always failing - this is why it hangs}
    sent: "2017-04-18T00:23:53.611Z"
    editedAt: "2017-04-18T00:24:03.397Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f55aa5a0e485624213e5d1"
    text: "You should be on 0.6.2 for current builds though."
    sent: "2017-04-18T00:15:33.165Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f55a7c08c00c092a8dec84"
    text: {Fine here.^/```^/>> until [print n n: n - 1 n = 0]^/5^/4^/3^/2^/1^/== true^/```}
    sent: "2017-04-18T00:14:52.433Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f55640a0e485624213d6af"
    text: {@maximvl   my error. I did not reassign n: 5.  Though the console shouldn't hang.^/```^/>> n: 5^/== 5^/>> until [print n n: n - 1 n < 0]^/5^/4^/3^/2^/1^/0^/== true^/>> until [print n n: n - 1 n = 0]^/```}
    sent: "2017-04-17T23:56:48.133Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "58f551f969a692963ebd57be"
    text: {@maximvl   Had the same issue on Win 7 . Red 0.6.1. not sure of build date.}
    sent: "2017-04-17T23:38:33.587Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "58f551aa8e4b63533ddab4a7"
    text: "@maximvl   Win10  build date 15-Apr-2107.   "
    sent: "2017-04-17T23:37:14.087Z"
    editedAt: "2017-04-17T23:37:22.166Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "58f54b3a8e4b63533dda9c05"
    text: {@RnBrgn which version and platform do you use?^/```^/>> n: 5 until [ print n n: n - 1 n = 0 ]^/5^/4^/3^/2^/1^/== true^/>> system/build/date^/== "27-Mar-2017/19:40:47+2:00" ^/```}
    sent: "2017-04-17T23:09:46.309Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f5452c8e4b63533dda86b3"
    text: {Shouldn't I get the same result when changing   n  <  0   to  n  = 0  ?  The Red console hangs when I try it..^/``` n: 5^/      until [print n n: n - 1 n < 0]```}
    sent: "2017-04-17T22:43:56.810Z"
    editedAt: "2017-04-17T22:44:37.058Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "58f50a32bdf4acc1126ad35f"
    text: {You can try to use Wine. There are many positive reports on Red working under Wine.}
    sent: "2017-04-17T18:32:18.482Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f4ff00a0e4856242125db4"
    text: "thanks "
    sent: "2017-04-17T17:44:32.023Z"
    v: 1
    author: "58f4fe19d73408ce4f5902fb"
) #(
    id: "58f4feea0ed3020c3825e5ca"
    text: "For now, yes."
    sent: "2017-04-17T17:44:10.509Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f4fecd0ed3020c3825e558"
    text: "ohhh till  that i need to hit windows or mac "
    sent: "2017-04-17T17:43:41.852Z"
    v: 1
    author: "58f4fe19d73408ce4f5902fb"
) #(
    id: "58f4fe7e8bb56c2d11b7ae96"
    text: {It's not in place yet. Windows is the leading GUI platform, and MacOS GUI support was just mainlined.}
    sent: "2017-04-17T17:42:22.329Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f4fe38f22385553d4d2cb4"
    text: {view is not working in linux any solution for that}
    sent: "2017-04-17T17:41:12.481Z"
    v: 1
    author: "58f4fe19d73408ce4f5902fb"
) #(
    id: "58f4fac1a0e485624212496f"
    text: {@x8x you need to be careful with these, if you know what is going to be changed and when you can write quite efficient code utilizing this "feature", eg have same data in different places and update it only once, and so on}
    sent: "2017-04-17T17:26:25.928Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4fa008bb56c2d11b794bc"
    text: "OK, thanks, got it :smile: "
    sent: "2017-04-17T17:23:12.610Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f4f9d38e4b63533dd92c0c"
    text: {if you slightly change it to `replace copy item` then you will end up with same block, but `item` will hold the old value}
    sent: "2017-04-17T17:22:27.028Z"
    editedAt: "2017-04-17T17:22:59.272Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4f9c369a692963ebbd8b1"
    text: {@maximvl , correct, but if you combine your `print` example with what @x8x expected, you can see what I mean.^/```^/>> reduce [probe item: {a} probe replace item {a} {b}]^/"a"^/"b"^/== ["b" "b"]^/```}
    sent: "2017-04-17T17:22:11.278Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f4f9aaad849bcf4292557d"
    text: {@x8x depends on what you want to achieve, in that code you created a block with old value and new value and updated `item` as well}
    sent: "2017-04-17T17:21:46.751Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4f97308c00c092a8c3f80"
    text: {so all block elements and `item` are pointing to the same value here, if you change it all of them are affected}
    sent: "2017-04-17T17:20:51.625Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4f95aad849bcf42925449"
    text: {Ok, thank you all! So I guess to get what I want this is the correct way:^/```^/  reduce [copy item: {a} replace item {a} {b}]^/;   ["a" "b"]^/```}
    sent: "2017-04-17T17:20:26.138Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f4f935f22385553d4d1458"
    text: "this is just how pointers work"
    sent: "2017-04-17T17:19:49.417Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4f92a8fcce56b200e77b2"
    text: {@greggirwin I don't think this is important in this case^/```^/>> v:  reduce [item: {a} replace item {a} {b}]^/== ["b" "b"]^/>> replace item {b} {c}^/== "c"^/>> v^/== ["c" "c"]^/```}
    sent: "2017-04-17T17:19:38.846Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4f8bba0e48562421241b3"
    text: {@x8x, the output isn't generated until the entire expression has been evaluated.}
    sent: "2017-04-17T17:17:47.764Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f4f8b908c00c092a8c3d5b"
    text: {@x8x in your example `item` word points to the string "a", while `replace` changes that exact string}
    sent: "2017-04-17T17:17:45.245Z"
    editedAt: "2017-04-17T17:17:52.064Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4f86fbdf4acc1126a7504"
    text: {@x8x reduction is from left to right, correct^/```^/>> do [print 1 print 2]^/1^/2^/```}
    sent: "2017-04-17T17:16:31.347Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4f732f22385553d4d0d1a"
    text: {ok it's nothing to do with bindology as this shorter version show the same:^/```^/ reduce [item: {a} replace item {a} {b}]^/;   ["b" "b"]^/```^/but I still don't get it, reduction should be from left to right, so the first `item` should be reduced to it's current value `"a"` only after that it is replaced by "b"}
    sent: "2017-04-17T17:11:14.767Z"
    editedAt: "2017-04-17T17:13:11.598Z"
    v: 3
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f4f43ff22385553d4cff63"
    text: {aha, so `replace` goes first and after that reduced block becomes `[b b]`}
    sent: "2017-04-17T16:58:39.438Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f4f32a881b89e1015c338d"
    text: {yes, `print [item replace  {a} {b}]` first reduces the block, then prints the result}
    sent: "2017-04-17T16:54:02.159Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f4f30569a692963ebbbda6"
    text: {is that about evaluation order? in `print <block>` `<block>` is evaluated first (applicative order)?}
    sent: "2017-04-17T16:53:25.395Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f4f028ad849bcf42922ab8"
    text: {in this case `bind` does nothing because `body` words already binded to global context, where the `item` get's it's value later}
    sent: "2017-04-17T16:41:12.755Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4efb4f22385553d4ced32"
    text: {yep, it's not about bindology, you just change the `item` and print afterwards}
    sent: "2017-04-17T16:39:16.632Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4ef7af22385553d4cebd2"
    text: {```^/>> body: [print item print [item replace item {a} {b}]] item: {a} bind body 'item do body^/a^/b b^/>> body: [print item print [item replace copy item {a} {b}]] item: {a} bind body 'item do body^/a^/a b^/```}
    sent: "2017-04-17T16:38:18.926Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f4eef78e4b63533dd8fa99"
    text: {Explanation of this behaviour greatly appreciated :smile: }
    sent: "2017-04-17T16:36:07.839Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f4eebf8bb56c2d11b760bd"
    text: {Hello, I got a bindology dilemma with following code:^/```^/body: [print item print [item replace item {a} {b}]]^/item: {a}^/bind body 'item^/do body^/```^/I get:^/```^/a^/b b^/```^/Thought, I would expect:^/```^/a^/a b^/```}
    sent: "2017-04-17T16:35:11.118Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58f48e248bb56c2d11b5ca67"
    text: {Unfortunately, that's the only option we have for now for newcomers, until Red gets its own official documentation.}
    sent: "2017-04-17T09:43:00.065Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f48ad9bdf4acc11268b6d0"
    text: {Good to know. Rebol 2 Guide is often pointed to as a good starting document, but the first example of to-logic is the zero case. The first Parse example uses none. ^/Two pitfalls that I know of, now}
    sent: "2017-04-17T09:28:57.242Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f4897c08c00c092a8a6aba"
    text: {The `to logic! 0` was a pitfall in Rebol2, and the cause of unexpected bugs:^/```lisp^/value: none^/to-logic any [value 2]^/== true^/to-logic any [value 0]^/== false^/```}
    sent: "2017-04-17T09:23:08.553Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f48908a0e485624210677f"
    text: {@gltewalt Yes, in Rebol2, but in Red and Rebol3, `to logic!` relies on what the language considers to be true, which is all values except `false` and `none`. OTOH, `make logic!` will construct the logic value using a more type-oriented rule, so will follow boolean algebra for integers.}
    sent: "2017-04-17T09:21:12.106Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f47dbcbdf4acc1126884ed"
    text: {With construction syntax it passes `none!` value. And all is right with the world.^/```^/>> m: make map! [foo 1 bar 2 baz #[none]]^/== #(^/    foo: 1^/    bar: 2^/)^/```}
    sent: "2017-04-17T08:33:00.928Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f47b678e4b63533dd7281e"
    text: {This is `false` in Rebol^/```^/>> to-logic 0^/== true^/```}
    sent: "2017-04-17T08:23:03.263Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f475fba0e48562421024d4"
    text: "#2592"
    sent: "2017-04-17T07:59:55.655Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f475e68e4b63533dd7147f"
    text: {Using `'none` or `'null` or any other word or special value is equivalent, as long as it tests as `true`.}
    sent: "2017-04-17T07:59:34.439Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f47599bdf4acc112686cbe"
    text: {Ok, but then would this help?^/```^/>> m/n: to-word 'none^/== none^/>> keys-of m^/== [n]^/```}
    sent: "2017-04-17T07:58:17.033Z"
    editedAt: "2017-04-17T07:58:54.863Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f4750b08c00c092a8a20e3"
    text: {I have to type out the access violation info. Can not copy from CLI after crash}
    sent: "2017-04-17T07:55:55.452Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f474d40ed3020c3823bd46"
    text: ";-)"
    sent: "2017-04-17T07:55:00.776Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f474cdd32c6f2f09126827"
    text: "Oh, of course"
    sent: "2017-04-17T07:54:53.582Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58f474b4881b89e1015a324b"
    text: "Aah"
    sent: "2017-04-17T07:54:28.266Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f4749e0ed3020c3823bc77"
    text: "That's a `word!` value, not a `none!` value."
    sent: "2017-04-17T07:54:06.759Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f474788e4b63533dd70fe1"
    text: {```^/>> m: #(n: none)^/== #(^/    n: none^/)^/>> keys-of m^/== [n]^/```}
    sent: "2017-04-17T07:53:28.717Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f4743b8e4b63533dd70ee0"
    text: "Because map values are not reduced on creation?"
    sent: "2017-04-17T07:52:27.410Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f4742b8fcce56b200c6384"
    text: {@gltewalt How? Are you sure you're not setting the key to `none` word rather than `none` value?}
    sent: "2017-04-17T07:52:11.525Z"
    editedAt: "2017-04-17T07:52:37.067Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f47410a0e4856242101dea"
    text: {Interestingly, map can be created with `none` values }
    sent: "2017-04-17T07:51:44.203Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f4735369a692963eb9beac"
    text: {@gltewalt Please make a ticket from that, if you can reproduce it.}
    sent: "2017-04-17T07:48:35.561Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f473388bb56c2d11b56da6"
    text: {I made a mistake when trying out `map!` and got an access violation}
    sent: "2017-04-17T07:48:08.112Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f47322881b89e1015a2c4e"
    text: {@toomasv Could work, but it's no better than `'null` word, as the key then needs to explicitly be tested against that "special" value (`if key = null [...`), instead of a more natural: `if not key [...`or `either key [...`.}
    sent: "2017-04-17T07:47:46.094Z"
    editedAt: "2017-04-17T07:49:49.843Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f472d1ad849bcf429024f1"
    text: {@gltewalt ^/```lisp^/>> 'foo^/== foo^/```^/Notice the lit-word decaying to a word when evaluated.}
    sent: "2017-04-17T07:46:25.787Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f4725ca0e48562421018de"
    text: {@dsgeyser Thanks for you help on nailing down that issue. :+1: }
    sent: "2017-04-17T07:44:28.956Z"
    editedAt: "2017-04-17T07:44:40.155Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f46ebf08c00c092a8a0c95"
    text: {```^/>> lit-word? 'foo^/== false^/>> lit-word? first ['foo bar]^/== true^/```}
    sent: "2017-04-17T07:29:03.870Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f463bd881b89e10159ff3d"
    text: "A null char is not the same as a JSON null value."
    sent: "2017-04-17T06:42:05.687Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f462b6881b89e10159fbe6"
    text: {Why not:^/```^/>> m: #(n: #"^^@")^/== #(^/    n: #"^^@"^/)^/>> null = m/n^/== true^/```}
    sent: "2017-04-17T06:37:42.564Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f455d98fcce56b200c0893"
    text: {> @dsgeyser The latest automated build is now auto-detecting non-SSE3 CPU and switches to "old" targetds automatically (both for consoles building and your own script compilation). Please give it a try.^/^/I tested the latest build. The console build ran without any problems, as well as the compiled script. Really awesome and quick  solution from Team Red. Many thanks!^/}
    sent: "2017-04-17T05:42:49.395Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f453fad32c6f2f091206e2"
    text: "that's true"
    sent: "2017-04-17T05:34:50.492Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f45366f22385553d4aa9b7"
    text: {That assumes you know everywhere, all the time, whether data you are working with came from, or will go to, JSON. It leaks a special JSON value into Red.}
    sent: "2017-04-17T05:32:22.821Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f452cca0e48562420fb74d"
    text: {I mean, `null` is a special value in json, so keeping it separate `'null` is fine as for me}
    sent: "2017-04-17T05:29:48.433Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f4527cd32c6f2f091203ae"
    text: {@greggirwin ^/>'null makes no sense in Red, since we don't use that term anywhere else.^/^/But this is a separate serialization format, how is it related to what we do in a language?}
    sent: "2017-04-17T05:28:28.279Z"
    editedAt: "2017-04-17T05:28:37.750Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f44ff8ad849bcf428fb7cc"
    text: {@gltewalt Yes, but that would be an expensive solution.}
    sent: "2017-04-17T05:17:44.958Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f44e218bb56c2d11b4fbca"
    text: "Could always make json! datatype :smile: "
    sent: "2017-04-17T05:09:53.978Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f44db08e4b63533dd69b9a"
    text: {There is no perfect answer, because of a mismatch in what is legal on each side. Unless you cache null key names when loading, in a hidden field, and generate them as null when producing JSON. But that sounds like a terrible hack to me. I'm ashamed I even thought of it. :^^\ Or use a block with a special marker in it to note it should map to a JSON object.}
    sent: "2017-04-17T05:08:00.167Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f44b8ed32c6f2f0911f01f"
    text: "Three things to account for"
    sent: "2017-04-17T04:58:54.389Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f44b83bdf4acc11267eb67"
    text: "http://stackoverflow.com/a/34360900"
    sent: "2017-04-17T04:58:43.474Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f44b4708c00c092a899efd"
    text: {'null makes no sense in Red, since we don't use that term anywhere else. We can use the word, but then it becomes a special case. I don't remember where the discussion left off.}
    sent: "2017-04-17T04:57:43.307Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f44afe08c00c092a899e5a"
    text: "'null"
    sent: "2017-04-17T04:56:30.112Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f44ac88e4b63533dd69382"
    text: "Convert to a lit-word?"
    sent: "2017-04-17T04:55:36.385Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f449f008c00c092a899c06"
    text: {By design, if you set a key to none it is removed from the map.}
    sent: "2017-04-17T04:52:00.285Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f449788fcce56b200be690"
    text: "Why not?"
    sent: "2017-04-17T04:50:00.195Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f44968a0e48562420f9e12"
    text: {Except that maps can't contain keys will `none` values.}
    sent: "2017-04-17T04:49:44.037Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f448e28e4b63533dd68c4e"
    text: "none"
    sent: "2017-04-17T04:47:30.205Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f44859a0e48562420f9b66"
    text: {@gltewalt What should `null` values be converted to in the map.}
    sent: "2017-04-17T04:45:13.700Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f4475af22385553d4a8a44"
    text: "Which null value question?"
    sent: "2017-04-17T04:40:58.062Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f444328fcce56b200bd7b3"
    text: "Yes json objects"
    sent: "2017-04-17T04:27:30.498Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f44330ad849bcf428f92dc"
    text: {@dsgeyser The latest automated build is now auto-detecting non-SSE3 CPU and switches to "old" targetds automatically (both for consoles building and your own script compilation). Please give it a try.}
    sent: "2017-04-17T04:23:12.458Z"
    editedAt: "2017-04-17T04:23:21.173Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f442fa69a692963eb93252"
    text: {@gltewalt You mean JSON objects? They should be transformed to maps, though we have the `null` value question to solve first.}
    sent: "2017-04-17T04:22:18.420Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f432e6a0e48562420f5d60"
    text: {Should json be transformed into object or map?^/(I'm aware of some Rebol stuff for json but it is overkill)}
    sent: "2017-04-17T03:13:42.091Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f3932d8fcce56b200989c2"
    text: {@dsgeyser :+1:  Glad to hear that. ;-) Now we can improve our toolchain to auto-detect such cases.}
    sent: "2017-04-16T15:52:13.078Z"
    editedAt: "2017-04-16T15:52:47.973Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f38d87ad849bcf428d224a"
    text: {@dockimbel Compiled Red GUI Console like you instructed me, and it works! Back in business, SO GRATEFUL... Again thanks.}
    sent: "2017-04-16T15:28:07.396Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f3880169a692963eb6cd15"
    text: {Can we get a macOS-old toolchain too for all ppl stuck on pre 10.7 macOSes?}
    sent: "2017-04-16T15:04:33.006Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f384d4bdf4acc112655056"
    text: {> Also thank you for accommodating my situation.^/^/I suspect you are not the only one, so we need to improve our toolchain anyway.}
    sent: "2017-04-16T14:51:00.172Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f384af408f90be66c6be25"
    text: {@dsgeyser You can use Red toolchain normally, just use `Windows-old` and `MSDOS-old` target names when compiling. For the GUI console, you need to download the sources (cloning the repo or downloading the source archive), and manually compile it using:^/`red -r -t Windows-old %environment/console/gui-console.red`}
    sent: "2017-04-16T14:50:23.729Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f37b3b8fcce56b20092d41"
    text: "Also thank you for accommodating my situation."
    sent: "2017-04-16T14:10:03.778Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f379ae69a692963eb6976a"
    text: {@dockimbel Many thanks for your help. Any chance I will still be able to use my current laptop? Possible to circumvent this?}
    sent: "2017-04-16T14:03:26.829Z"
    editedAt: "2017-04-16T14:04:37.458Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f37888ad849bcf428cd0a1"
    text: {Ok, so the cause was a pre-SSE3 CPU, we'll need a way to autodetect it from our red.r wrapper. @qtxie }
    sent: "2017-04-16T13:58:32.345Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f375ac08c00c092a86d185"
    text: {@dockimbel Sorry I missed your earlier reply. Compiled exe from `red -r -t Windows-Old` runs just fine.}
    sent: "2017-04-16T13:46:20.828Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f37160408f90be66c67d5a"
    text: {@dsgeyser ^/> @dsgeyser Could you try another compilation of the simple GUI script using: `red -r -t Windows-Old`?^/^/Did you try that?}
    sent: "2017-04-16T13:28:00.492Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f371098e4b63533dd3b49b"
    text: {@dsgeyser^/> How can I catch/capture the command prompt window output? Flashing on-screen.^/^/Just run it from DOS console.}
    sent: "2017-04-16T13:26:33.565Z"
    editedAt: "2017-04-16T13:26:53.660Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f36b75a0e48562420cb7ca"
    text: {@dockimbel `command prompt` output:^/`*** Runtime Error 17: illegal instruction*** at: 1001C6F8h` with smaller exe. Bigger exe - `004185E0h`}
    sent: "2017-04-16T13:02:45.423Z"
    editedAt: "2017-04-16T13:05:54.836Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f34f75881b89e1015654ac"
    text: {@dockimbel Above script was compiled with `red -c test.red` and `red -c test.red Windows`. With `red-14apr17-3ff52f9`, both resulted in a 64 kb file. Previous one was 692 kb. Same resulting errors from all exe's in `command prompt`.}
    sent: "2017-04-16T11:03:17.219Z"
    editedAt: "2017-04-16T11:04:36.512Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
)#(
    id: "58f34cd34cb8d09173963b65"
    text: {@dockimbel When I run the simple script which was compiled with `red-02oct16-5ec74dc`, the `command prompt` window flashes on-screen with message:^/`Runtime Error 17: Illegal instruction`, and following this message `at: xxxxxxxxx`. `xxxxxxxx` is the part I can't read because window disappears too quickly.^/^/This version of Red GUI Console also crashes on execution.}
    sent: "2017-04-16T10:52:03.230Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f349914cb8d091739632d2"
    text: {How can I capture the `command prompt` output, while trying to run the output exe file? }
    sent: "2017-04-16T10:38:09.204Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f340eb8e4b63533dd316cd"
    text: {How can I catch/capture the command prompt window output? Flashing on-screen.}
    sent: "2017-04-16T10:01:15.570Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f33c688bb56c2d11b15866"
    text: {@dsgeyser Could you try another compilation of the simple GUI script using: `red -r -t Windows-Old`?}
    sent: "2017-04-16T09:42:00.240Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f33aacbdf4acc1126457c4"
    text: "Processor is Intel Celeron M 380"
    sent: "2017-04-16T09:34:36.569Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f32ef6f22385553d46dba5"
    text: {Sorry for the inconvenience, but 0.60 GUI console compiled on the second try.}
    sent: "2017-04-16T08:44:38.395Z"
    editedAt: "2017-04-16T08:47:48.483Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f32e0d408f90be66c59ab5"
    text: "0.61 GUI console compiled, but not 0.60"
    sent: "2017-04-16T08:40:45.438Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f32d27f22385553d46d70d"
    text: {@dockimbel ^/Console was visible with title "Rebol/Pro" and first line as " ** Press enter to quit..."}
    sent: "2017-04-16T08:36:55.048Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f32ce2a0e48562420bea07"
    text: {@dockimbel I compiled two versions of the simple script. Both compiled successfully.  Only difference:--t linking time longer of two. None of the 2 compiled eye's ran - no error or output. ^/^/Also tried to compile 0.60. Returned error: "*** Linker Error: Locked or unreachable file: /C/ProgramData/Red/gui-console-2016-3-26-9662.exe"^/        }
    sent: "2017-04-16T08:35:46.581Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f325d7408f90be66c5821b"
    text: {It should be present in R2 docs too, see in Parse chapter. `bitset!` has been extended in R3 and Red beyond the 256-bit limit of bitsets in R2.}
    sent: "2017-04-16T08:05:43.588Z"
    editedAt: "2017-04-16T08:06:47.189Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f325b8881b89e10155cc80"
    text: "@dockimbel I see, was looking in Rebol2 docs :)"
    sent: "2017-04-16T08:05:12.903Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f32596f22385553d46bdea"
    text: {It's an array of bits, mostly used to represent charsets (see the "Introducing Parse" blog article).}
    sent: "2017-04-16T08:04:38.972Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f32558bdf4acc1126411dc"
    text: {@maximvl See: http://www.rebol.com/r3/docs/datatypes/bitset.html}
    sent: "2017-04-16T08:03:36.870Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f3250ead849bcf428bb61e"
    text: {I couldn't find any docs on `bitset!`, what is stored inside? how do I use it? Couldn't find answers in repl too:^/```^/>> to-bitset "1"^/== make bitset! #{00000000000040}^/>> to-bitset "a"^/== make bitset! #{00000000000000000000000040}^/>> to-bitset "b"^/== make bitset! #{00000000000000000000000020}^/>> to-integer #"b"^/== 98^/```^/^/98 is `1100010` in bit-form, doesn't look like value in bitset at all}
    sent: "2017-04-16T08:02:22.849Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f316ccbdf4acc11263e6f1"
    text: {It seems that support for SSE3 was added in more recent versions of Celeron M only (Celeron M 5xx series). Our native compiler uses an instruction from SSE3 by default (can be switched to a compatibility mode manually though, but not for the precompiled console). But, the crash error code should then correspond to a "Illegal Instruction" rather than "Access Violation"...}
    sent: "2017-04-16T07:01:32.150Z"
    editedAt: "2017-04-16T07:05:32.321Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f316528bb56c2d11b0e41e"
    text: "@dsgeyser Do you know if your CPU has SSE3? "
    sent: "2017-04-16T06:59:30.329Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f315468fcce56b2007d8e5"
    text: {@dsgeyser Could you compile and run a simple Red GUI program like `Red [Needs: 'View] view [text "hello"]`? Compile it with: `red -r -t Windows` first, then `try with just `red -t Windows`. Let us know the results.}
    sent: "2017-04-16T06:55:02.891Z"
    editedAt: "2017-04-16T06:57:24.877Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f31032f22385553d467985"
    text: {@qtxie Thanks for the suggestion. I'm afraid it's still not working. Does this have anything to do with type of proces sor? ( Celeron M) All fine on my 2 year old win tablet. Just ackward to work on a tablet.^/@dockimbel No dump file generated.}
    sent: "2017-04-16T06:33:22.890Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f2c416ad849bcf428aa44c"
    text: {@dsgeyser Try to delete all the files in `C:\ProgramData\Red` and run the console again.}
    sent: "2017-04-16T01:08:38.239Z"
    editedAt: "2017-04-16T01:09:09.297Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58f2b55d69a692963eb43297"
    text: {You can call into DLLs from Red/System, which you can write as `routine`s in Red too. Soon Red will get its own FFI.}
    sent: "2017-04-16T00:05:49.172Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f2afe6a0e48562420a7af9"
    text: {Thanks, I am just getting into finding the documentation new and old (Rebol)!}
    sent: "2017-04-15T23:42:30.287Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f2ac67a0e48562420a7020"
    text: "https://doc.red-lang.org/en/libred.html"
    sent: "2017-04-15T23:27:35.120Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f2a77c4cb8d0917394505c"
    text: {It can be used for just text, but it works great with OpenGL output. In the meantime, I need to learn some rudimentary Red. I seem to remember playing with Rebol decades ago...}
    sent: "2017-04-15T23:06:36.960Z"
    editedAt: "2017-04-15T23:13:03.410Z"
    v: 4
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f2a714408f90be66c418a8"
    text: {Moving my questions over from 'welcome' room:  **1.)**  I program in the J programming language, and it exposes a DLL (jdll.dll) for calling in and out of C. Can Red call into DLLs like this? [Calling J.DLL](http://www.jsoftware.com/help/user/calling_jdll.htm), and **2.)**  I also want to use a C++ library called [Versor](http://versor.mat.ucsb.edu/) for geometric algebra (a Clifford algebra) for doing geometry.}
    sent: "2017-04-15T23:04:52.659Z"
    editedAt: "2017-04-15T23:14:38.201Z"
    v: 7
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f272a0ad849bcf42897d0c"
    text: {it is definitely a downgrade, red not having regex was a lure for me, however, everyone is different...}
    sent: "2017-04-15T19:21:04.123Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f26f66881b89e1015379d3"
    text: {@JacobGood1 in a way it's a downgrade, but it's also a lure for outsiders who are familiar with regex}
    sent: "2017-04-15T19:07:18.740Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f256b3a0e48562420936b9"
    text: "@dockimbel Thanks. Will try and find it"
    sent: "2017-04-15T17:21:55.139Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f25634bdf4acc112618c61"
    text: {If you can find the corresponding crash dump file, it would be more helpful.}
    sent: "2017-04-15T17:19:48.257Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f255f5bdf4acc112618b85"
    text: {@dockimbel It's part of Win OS. Windows pops up with message "Red GUI Console has stopped working". At the bottom of that window is a pull down box "View problem details". I copied the report from that area.}
    sent: "2017-04-15T17:18:45.129Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f25478f22385553d44211b"
    text: "@dsgeyser About 4MB for the GUI console."
    sent: "2017-04-15T17:12:24.612Z"
    editedAt: "2017-04-15T17:16:03.714Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f25300881b89e101531428"
    text: "ok"
    sent: "2017-04-15T17:06:08.027Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58f252e18fcce56b20057697"
    text: {@dockimbel I disabled my anti-virus. Still the same. What is the minimum memory requirement? @angellom1 Think it is 2011 version}
    sent: "2017-04-15T17:05:37.816Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f25076ad849bcf4288fcef"
    text: "new version for Win7 ?"
    sent: "2017-04-15T16:55:18.529Z"
    v: 1
    author: "58f0c555d73408ce4f585f4d"
) #(
    id: "58f250144cb8d0917393126e"
    text: {@dsgeyser  Win7 here too, just downloaded a fresh version (`red-15apr17-ea439df.exe`) and it compiles and runs fine. Do you have an anti-virus installed?}
    sent: "2017-04-15T16:53:40.697Z"
    editedAt: "2017-04-15T16:54:29.332Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f22b35a0e485624208993a"
    text: {I am on Win 7 Ultimate. 0.61 stable opens up just fine.}
    sent: "2017-04-15T14:16:21.699Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f224a8f22385553d436eb7"
    text: {Red GUI console (latest automated build) crashes before opening.^/```^/Problem signature:^/  Problem Event Name:^-APPCRASH^/  Application Name:^-gui-console-2017-4-14-49641.exe^/  Application Version:^-0.9.0.0^/  Application Timestamp:^-58f233f7^/  Fault Module Name:^-StackHash_0a33^/  Fault Module Version:^-0.0.0.0^/  Fault Module Timestamp:^-00000000^/  Exception Code:^-c0000005^/  Exception Offset:^-00000000^/  OS Version:^-6.1.7600.2.0.0.256.1^/  Locale ID:^-1033^/  Additional Information 1:^-0a33^/  Additional Information 2:^-0a338c230ef4b8e5272da8f93730d1e0^/  Additional Information 3:^-c1fb^/  Additional Information 4:^-c1fbaf0a32e61e4d95746487b7526760^/```}
    sent: "2017-04-15T13:48:23.994Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f21d8bf22385553d435407"
    text: {@gltewalt  parse is also far more powerful than regex, there is no need to use regex in rebol, it would be a downgrade.}
    sent: "2017-04-15T13:18:03.303Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58f2094ef22385553d430929"
    text: "Oops, it was in Rebol docs."
    sent: "2017-04-15T11:51:42.444Z"
    editedAt: "2017-04-15T11:52:05.720Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f20891408f90be66c1d508"
    text: {@dockimbel Thanks a lot! Could not find the explanation in docs...}
    sent: "2017-04-15T11:48:33.952Z"
    editedAt: "2017-04-15T11:53:31.317Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f2086ff22385553d43069f"
    text: {The datatype serialized form looks the same as the datatype name (a word), so you need to be careful about when words are evaluated and when not.}
    sent: "2017-04-15T11:47:59.214Z"
    editedAt: "2017-04-15T11:48:14.962Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f207e8408f90be66c1d394"
    text: {```lisp^/>> (type? 123) = first [integer!]^/== false^/>> (type? 123) = first reduce [integer!]^/== true^/>> (type?/word 123) = first [integer!]^/== true^/```}
    sent: "2017-04-15T11:45:44.164Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f207b008c00c092a823435"
    text: {@toomasv `switch` does not evaluate the root content of his `cases` block argument, so `map!` in that case is just a word, while `type?` returns a datatype. Use `type?/word` to return the datatype name as a word.}
    sent: "2017-04-15T11:44:48.561Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f2071169a692963eb1c0af"
    text: {Why doesn't this work?^/```^/>> switch type? #() [block! [print "block"] map! [print "map"]]^/== none^/```^/Neither this:^/```^/>> switch (type? []) [block! [print "block"] map! [print "map"]]^/== none^/```^/But this does:^/```^/>> switch mold type? #() ["block!" [print "block"] "map!" [print "map"]]^/map^/```^/}
    sent: "2017-04-15T11:42:09.876Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f1b8b8f22385553d421164"
    text: {Indeed, regex is an incomprehensable gibberish. Parse can be difficult too at times but is more elegant. }
    sent: "2017-04-15T06:07:52.826Z"
    editedAt: "2017-04-15T06:08:37.339Z"
    v: 3
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f1669ead849bcf4285fe97"
    text: "@iArnold Worlds of difference"
    sent: "2017-04-15T00:17:34.962Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f12ad6a0e48562420581cf"
    text: {@greggirwin Yes, mine should be renamed to myextract of something. I can't edit it anymore.}
    sent: "2017-04-14T20:02:30.685Z"
    editedAt: "2017-04-14T20:04:21.517Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f1282b408f90be66bf1f4e"
    text: "@greggirwin You are right, I corrected it."
    sent: "2017-04-14T19:51:07.141Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f128044cb8d091738f6603"
    text: {Looks like you're referencing `test2` directly in the func, rather than the `xml` arg.}
    sent: "2017-04-14T19:50:28.841Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f127b8f22385553d40549c"
    text: {@toomasv  I'll try to remember to read and critique later. Note that there is a standard `extract` func in Red.}
    sent: "2017-04-14T19:49:12.515Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f12742408f90be66bf1c95"
    text: "@greggirwin OK, saw it, thanks!"
    sent: "2017-04-14T19:47:14.618Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
)#(
    id: "58f1271f69a692963eaf0fe9"
    text: {:point_up: [April 14, 2017 1:43 PM](https://gitter.im/red/help?at=58f12665bdf4acc1125dad63) hover over the timestamp of a message, and you should see a hint to alt+click.}
    sent: "2017-04-14T19:46:39.315Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f126fa8e4b63533dcc5183"
    text: {> Has anyone ever implemented regex for Rebol ?^/^/Sure, Carl did and he called his version `parse`}
    sent: "2017-04-14T19:46:02.986Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f126e28e4b63533dcc512e"
    text: {@gtewalt :point_up: [April 14, 2017 12:01 PM](https://gitter.im/red/help?at=58f10e61a0e48562420519a0) I have an old pattern matching func, but it's not full regex. }
    sent: "2017-04-14T19:45:38.609Z"
    editedAt: "2017-04-14T19:45:52.549Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f12665bdf4acc1125dad63"
    text: {I am sorry if I'll clutter your screen, but I'd like to ask for your critique, suggestions etc for this code I wrote as afterthought to the previous exercise referred to by  @greggirwin  (BTW How to add references to messages?):^/```^/extract: func [^/^-"Extracts tabular-like data from xml" ^/^-'from "Just a dummy arg for readability"^/^-xml [string!] "Well-formed x[ht]ml string containing tabular data"^/^-spec [block!] {Block of 3 tagnames -- for table, row and cell. ^/               May be string (without '<>') or block of alternative strings eg. ["ul" | "ol"]}^/^-/format frm [block!] {Block of 6 delimiters -- for each level's start and end. Defaults are ["" ^^#"^^^^/" "" ^^#"^^^^/" ^^#" " ""]}^/^-/local table row cell ws ts te rs re cs ce result level1 level2 rowstart^/][ ^/^-either 3 = length? spec [set [table row cell] spec] [cause-error 'script 'need-value ['spec]]^/^-ws: compose [any (charset reduce [space tab lf])]^/^-set [ts te rs re cs ce] either format [frm][["" #"^^/" "" #"^^/" #" " ""]]^/^-result: make string! 10^/^-level1: level2: off^/^-parse xml [^/^-^-any [^/^-^-^-"</" any [^/^-^-^-^-table (append result te level1: off) ^/^-^-^-^-| row (if level1 [append result re] level2: off)^/^-^-^-^-| cell (if (level1 and level2) [^/^-^-^-^-^-if not rowstart [append result cs] ^/^-^-^-^-^-append result reduce [either empty? content [#"-"][content] ce]^/^-^-^-^-] rowstart: off)^/^-^-^-]^/^-^-^-| #"<" any [^/^-^-^-^-table (append result ts level1: on) ^/^-^-^-^-| row (if level1 [append result rs level2: rowstart: on])^/^-^-^-^-| cell thru #">" ws if (level1 and level2) [copy content to [ws "</" cell]]^/^-^-^-]^/^-^-^-| skip^/^-^-]^/^-]^/^-print result^/]^/```^/Example test data:^/```^/test: {^/<sometag>^/^-<span>Intro</span>^/^-<table1>^/^-^-<tr><td></td><td>b</td><td>c</td></tr>^/^-^-<tr><td>d</td><td>e</td><td></td></tr>^/^-</table1>^/^-<table2>^/^-^-<tr>^/^-^-^-<td>^/^-^-^-^-aa^/^-^-^-</td>^/^-^-^-<td>^/^-^-^-^-bb^/^-^-^-</td>^/^-^-</tr>^/^-^-<tr><td>cc</td><td>dd</td></tr>^/^-</table2>^/^-<div>^/^-^-<ul>^/^-^-^-<li>ul text1</li>^/^-^-^-<li>ul text2</li>^/^-^-^-<li>ul text3</li>^/^-^-</ul>^/^-^-<p>Para</p>^/^-^-<ol>^/^-^-^-<li>ol text1</li>^/^-^-^-<li>ol text2</li>^/^-^-</ol>^/^-</div>^/</sometag>^/}^/```^/And some results:^/```^/red>> extract from test ["table" "tr" "td"]^/- b c^/d e -^/^/aa bb^/cc dd^/^/```^/Different output format:^/```^/red>> extract/format from test ["table" "tr" "td"] ["" #"^^/" " " #"^^/" " | " ""]^/ - | b | c^/ d | e | -^/^/ aa | bb^/ cc | dd^/```^/Transform to csv:^/```^/red>> extract/format from test ["table" "tr" "td"] ["" #"^^/" "^^"" #"^^/" ";^^"" "^^""]^/"-";"b";"c"^/"d";"e";"-"^/^/"aa";"bb"^/"cc";"dd"^/```^/Example of transformation:^/```^/red>> extract/format from test ["div" ["ul" | "ol"] "li"] [^/[        "<table>^^/" "</table>^^/" "^^-<row>^^/^^-^^-<cell>" "^^/^^-</row>^^/" "^^/^^-^^-<cell>" "</cell>"^/[    ]^/<table>^/    <row>^/        <cell>ul text1</cell>^/        <cell>ul text2</cell>^/        <cell>ul text3</cell>^/    </row>^/    <row>^/        <cell>ol text1</cell>^/        <cell>ol text2</cell>^/    </row>^/</table>^/```^/}
    sent: "2017-04-14T19:43:33.105Z"
    editedAt: "2017-04-14T19:52:24.552Z"
    v: 5
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f10e61a0e48562420519a0"
    text: "Has anyone ever implemented regex for Rebol ?"
    sent: "2017-04-14T18:01:05.787Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f0eeec4cb8d091738e8251"
    text: {:point_up: [April 14, 2017 3:01 AM](https://gitter.im/red/help?at=58f08ffc8bb56c2d11a8615a) @toomasv's conditional keep example is nice. Not sure we need that built in though. There will be times it would help, but those may be rare. Certainly we could start with examples like the above in a parse cookbook, and consider deeper design changes later. As we look at building higher level parse tools and dialects, features that support those should take precedence I think. Conditional keeping may be one.}
    sent: "2017-04-14T15:46:52.005Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f0e20069a692963eadebe6"
    text: "@dockimbel Indeed! Thanks for pointing this out!"
    sent: "2017-04-14T14:51:44.507Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f0c1bc08c00c092a7dd65b"
    text: {Notice how `append/part` nicely replaces `append ... copy/part` by avoiding the creation of a short-lived intermediary series. ;-)}
    sent: "2017-04-14T12:34:04.070Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0c17fbdf4acc1125c083b"
    text: {@toomasv Instead of building a block of values that will ultimately be `rejoin`-ed, you can just `append/part res s f` and drop `collect/keep`:^/```lisp^/multichar?: func [string [string!] /local c res s f][^/^-res: make string! 10^/    parse string [^/        any [^/            s: copy c skip any [^/                some c f: (append/part res s f) ^/                | break^/            ]^/        ]^/    ]^/    either empty? res [false][res]^/]^/```}
    sent: "2017-04-14T12:33:03.051Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0bbcebdf4acc1125bf232"
    text: {@raton3062015 try  ^/```^/```^/```^/To post code, (Ctrl+shift+m) for more details^/}
    sent: "2017-04-14T12:08:46.016Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f0af9dad849bcf428315b9"
    text: {Or better yet:^/```^/multichar?: func [string [string!] /local c res s f][^/^-parse string [^/^-^-collect set res any [^/^-^-^-s: copy c skip any [^/^-^-^-^-some c f: keep (copy/part s f) ^/^-^-^-^-| break^/^-^-^-]^/^-^-]^/^-]^/^-either empty? res [false][rejoin res]^/]^/```}
    sent: "2017-04-14T11:16:45.860Z"
    editedAt: "2017-04-14T11:20:03.682Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f0a89af22385553d3e3175"
    text: {This is interesting. Had to learn o use `word:`. Is this correct way:^/```^/rejoin parse "xxxabbsd" [^/^-collect any [^/^-^-s: copy c skip any [^/^-^-^-some c f: keep (copy/part s f)^/^-^-^-| break^/^-^-]^/^-]^/]^/```}
    sent: "2017-04-14T10:46:50.651Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f0a109f22385553d3e1562"
    text: "thanks"
    sent: "2017-04-14T10:14:33.696Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f0a0e2bdf4acc1125b877d"
    text: {@raton3062015 Learning a new language is done by experiencing/using it by yourself. We are pleased to help you with the learning process, but we can't do the work for you.}
    sent: "2017-04-14T10:13:54.370Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f09f328fcce56b20ff7dac"
    text: {I can help and guide you, but will not to code it for you}
    sent: "2017-04-14T10:06:42.250Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f09ef8ad849bcf4282d96f"
    text: "maxim V pls code it for me"
    sent: "2017-04-14T10:05:44.377Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09ecfbdf4acc1125b7ee7"
    text: "text3: {abcdef}, = false"
    sent: "2017-04-14T10:05:03.396Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09ec38fcce56b20ff7c8d"
    text: {you need to save each character and compare it on next iteration}
    sent: "2017-04-14T10:04:51.478Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f09ebd4cb8d091738d3164"
    text: {text2: "xxabdef", = xx}
    sent: "2017-04-14T10:04:45.150Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09eb108c00c092a7d50f4"
    text: {text: "abccdef" , = cc}
    sent: "2017-04-14T10:04:33.320Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09ea308c00c092a7d50cf"
    text: "i only needs those repeated chars"
    sent: "2017-04-14T10:04:19.963Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09e898e4b63533dca1a46"
    text: "ok, but what result do you want?"
    sent: "2017-04-14T10:03:53.005Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f09e6f69a692963eacd8af"
    text: {if you don't know in advance which character is going to be repeated}
    sent: "2017-04-14T10:03:27.986Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09e20a0e4856242034aeb"
    text: "@raton3062015 what do you want to do?"
    sent: "2017-04-14T10:02:08.369Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f09e03a0e4856242034a31"
    text: {`char: #"c" parse "abccdef" ["ab" 2 char "def"]`}
    sent: "2017-04-14T10:01:39.057Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f09df34cb8d091738d2e8e"
    text: {text1: {abzzkcd},  text2: {abxyyyf} , text3: {eefabcdde}}
    sent: "2017-04-14T10:01:23.514Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09d43881b89e1014d1273"
    text: {number of repetitions or `some` accept other rules, you can nest them as you wish}
    sent: "2017-04-14T09:58:27.783Z"
    editedAt: "2017-04-14T09:58:45.177Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f09d32f22385553d3e07fd"
    text: {@raton3062015 Did you read the [Rebol docs](http://www.rebol.com/docs/core23/rebolcore-15.html) for Parse? Several of your questions are answered in this doc.}
    sent: "2017-04-14T09:58:10.325Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f09d1f69a692963eacd4a8"
    text: {if we don't know in advance which character is being repeated}
    sent: "2017-04-14T09:57:51.513Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09ceea0e485624203466d"
    text: {yep, ^/```^/>> parse "abccdef" ["ab" 2 #"c" "def"]^/== true^/```}
    sent: "2017-04-14T09:57:02.049Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f09ccca0e4856242034629"
    text: {2 #"c"}
    sent: "2017-04-14T09:56:28.909Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f09cb78bb56c2d11a891f4"
    text: {some #"c"}
    sent: "2017-04-14T09:56:07.154Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f09cad4cb8d091738d2a97"
    text: {parse result = "cc"}
    sent: "2017-04-14T09:55:57.589Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09c924cb8d091738d2a5f"
    text: {text: "abccdef"}
    sent: "2017-04-14T09:55:30.962Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09c898e4b63533dca1241"
    text: "how can i parse repeated character"
    sent: "2017-04-14T09:55:21.233Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f09c6d69a692963eacd1ad"
    text: {As you mentioned somewhere earlier, in cases we parse (and act on) massive series and the parser is of some comlexity it would help a lot.}
    sent: "2017-04-14T09:54:53.591Z"
    editedAt: "2017-04-14T09:55:45.227Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f09bf88e4b63533dca1016"
    text: {Yep, some rules can depend on parens evaluation, that's why a selective control might be appropriate, but that's maybe "too much" in practice, except for extremely rare use-cases, so not sure it's worth it.}
    sent: "2017-04-14T09:52:56.500Z"
    editedAt: "2017-04-14T09:53:06.786Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f09b9dad849bcf4282cc18"
    text: {I don't think parens eval should be switched out -- then eg. parse using `if` would not work.}
    sent: "2017-04-14T09:51:25.638Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f09b90ad849bcf4282cc0a"
    text: {Yes, in some cases you might want rules locally or globally to be "check only". How often do we need such feature and which control granularity is required for most cases, I'm not sure.}
    sent: "2017-04-14T09:51:12.038Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f09b3ff22385553d3dffae"
    text: {I forgot also about the parens expressions evaluation.}
    sent: "2017-04-14T09:49:51.833Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f09ad3f22385553d3dfe67"
    text: {So that a kind of "raw" parse remains? May be, but then there shoud be possibility to specify which functionality is switched out. IE incremental swich-out.}
    sent: "2017-04-14T09:48:03.606Z"
    editedAt: "2017-04-14T09:49:45.651Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f098a0a0e4856242033693"
    text: {Should other extraction commands `copy` and `set` be affected by that? What about the input modifying commands: `insert`, `remove`, `change`?}
    sent: "2017-04-14T09:38:40.868Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0963af22385553d3deb80"
    text: {@dockimbel I would very much appreciate this. I recently parsed (and transformed) lot of html documents with red, and had to develop two parsers in parallel, one to check if the parse spec works ok and the other to make actions on parse matches. Even if I didn't use collect but expressions (I didn't understand collect well yet), now I would prefer to use collect in such cases. }
    sent: "2017-04-14T09:28:26.294Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f08ffc8bb56c2d11a8615a"
    text: {@toomasv @geekyi @greggirwin Do you think a way to locally/globally disable `keep` from acting in sub-rules would be worth having in Parse dialect? This could also provide a way to disable `collect` locally or globally from returning its result from `parse` call, with minimal effort.}
    sent: "2017-04-14T09:01:48.011Z"
    editedAt: "2017-04-14T09:02:08.924Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f08b40408f90be66bca2a2"
    text: {@greggirwin ^/> Only works if all your <p> tags contain a single char.^/> And would collect any <p> values outside an opening <table> as well.^/^/Fair enough. This one is more fault-tolerant:^/```^/test: {^/^-<p>some text</p>^/    <table>^/        <data> <p>a</p> <p>b</p> <p>c</p> </data>^/        <data> <p>d</p> <p>e</p> <p>f</p> </data> ^/    </table>^/    <p>textafter</p>more text^/^-<table>^/^-^-<data> <p></p> <p>bbb</p> <p>cc</p> </data>^/        <data> <p>dd</p> <p>e</p> <p>f</p> </data> ^/    </table>^/}^/parse test [^/^-(keeping: off) ^/^-collect set c any [^/^-^-{<table>} (keeping: on) ^/^-^-| {</table>} (keeping: off) ^/^-^-| {<p>} if (keeping) [ahead {</p>} keep (#"-") | keep to {</p>}] ^/^-^-| skip^/^-]^/]^/>> foreach [i1 i2 i3] c [print [i1 i2 i3]]^/a b c^/d e f^/- bbb cc^/dd e f^/```}
    sent: "2017-04-14T08:41:36.135Z"
    editedAt: "2017-04-14T08:42:21.707Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58f0764bbdf4acc1125ae703"
    text: "When would `copy key-text to` be a better idea?"
    sent: "2017-04-14T07:12:11.444Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f07369f22385553d3d69c7"
    text: {Looking at that code, I think you can further refactor it to combine the `collect`s into one right?}
    sent: "2017-04-14T06:59:53.174Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f072f5b52518ed4d0e3a0b"
    text: {@Rebol2Red less stringy, more types!^/```^/atest: to-block test^/^/table-rule: [^/    some [^/        thru <table> keep to </table>^/    ]^/]^/table-results: parse atest compose/only [collect (table-rule)]^/^/p-rule: [^/    some [^/        thru <p> keep to </p>^/    ]^/]^/p-results: parse first table-results compose/only [collect (p-rule)]^/^/foreach [i1 i2 i3] p-results [^/    print [i1 i2 i3]^/]^/```}
    sent: "2017-04-14T06:57:57.228Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eff32ea0e485624201020c"
    text: {Don't optimize unless you need to. Do some tests and see if it's anywhere near a point of concern, performance wise. In this case, it shouldn't be much different. A little extra overhead setting up parse again, but unless you have zillions of tables, you may not even be able to measure it.}
    sent: "2017-04-13T21:52:46.236Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eff1944cb8d091738afb57"
    text: {@greggirwin Will it be slower because of the two way pass? ^/Maybe not because the data is already read into memory, right?}
    sent: "2017-04-13T21:45:56.923Z"
    editedAt: "2017-04-13T21:46:45.603Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
)#(
    id: "58eff03cb52518ed4d0c9b39"
    text: {Excellent. Breaking big problems down into clearer, small ones, is always good.}
    sent: "2017-04-13T21:40:12.060Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efee48a0e485624200ebeb"
    text: {Maybe of some interest. This was how i did it with two collect commands.^/First parse between <table> and </table> then parse the result any time between <p> and </p>^/Maybe a bit simple but it is very clear to see what it does. ^/It worked well in a real program where i extracted a table from a site.^/```^/test: {^/^-<table>^/^-^-<data> <p>a</p> <p>b</p> <p>c</p> </data>^/^-^-<data> <p>d</p> <p>e</p> <p>f</p> </data> ^/^-</table>^/^-<p>textafter</p>more text^/}^/one: parse test [^/^-collect [^/^-^-any [^/^-^-^-thru {<table>} keep to {</table>}^/^-^-]^/^-]^/]^/two: parse to string! one [^/^-collect [^/^-^-any [^/^-^-^-thru {<p>} keep to {</p>}^/^-^-]^/^-]^/]^/foreach [i1 i2 i3] two [^/^-print [i1 i2 i3]^/]^/```}
    sent: "2017-04-13T21:31:52.471Z"
    editedAt: "2017-04-13T21:36:10.336Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58efec83408f90be66baa5eb"
    text: {It does nicely show that you can find elements easily, ignoring structure.}
    sent: "2017-04-13T21:24:19.803Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efec6cb52518ed4d0c8e02"
    text: {And would collect any <p> values outside an opening <table> as well.}
    sent: "2017-04-13T21:23:56.691Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efec1a408f90be66baa4fb"
    text: {Only works if all your <p> tags contain a single char.^/```^/test: {^/    <table>^/        <data> <p>aa</p> <p>bb</p> <p>cc</p> </data>^/        <data> <p></p> <p>eee</p> <p>f</p> </data> ^/    </table>^/    <p>textafter</p>more text^/}^/foreach [a b c] parse test [^/    collect any [{</table>} break | {<p>} keep skip {</p>} | skip]] [print [a b c]^/]^/```}
    sent: "2017-04-13T21:22:34.180Z"
    editedAt: "2017-04-13T21:22:46.855Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efe3e58fcce56b20fd109c"
    text: {Interesting version:^/```^/foreach [a b c] parse test [collect any [{</table>} break | {<p>} keep skip {</p>} | skip]] [print [a b c]]^/a b c^/d e f^/```}
    sent: "2017-04-13T20:47:33.986Z"
    editedAt: "2017-04-13T20:53:32.005Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58efe072b52518ed4d0c5c5c"
    text: {A good experiment would be to adapt the above code to handle multiple tables in the input.}
    sent: "2017-04-13T20:32:50.314Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efdfdca0e485624200b151"
    text: {It just takes time. I am always humbled by the real parse gurus, to this day.}
    sent: "2017-04-13T20:30:20.248Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efdf728e4b63533dc784a4"
    text: {@greggirwin Now i get it. ^/And you are right i'm not really good at parsing. Maybe i never will but i'm getting a bit better any time i ask something about it.}
    sent: "2017-04-13T20:28:34.750Z"
    editedAt: "2017-04-13T20:31:03.310Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58efdef008c00c092a7ac0a2"
    text: {- Match <p>^/- Keep everything up *to* </p>^/- Match </p>}
    sent: "2017-04-13T20:26:24.509Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efde84a0e485624200ac3a"
    text: {You're going to need to spend some time just playing with `parse`. :^^) That rule does just what your original `thru {<p>} keep to {</p>}`did.}
    sent: "2017-04-13T20:24:36.879Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efde1f8e4b63533dc77e8b"
    text: {@greggirwin This is confusing and very new to me! ^/p=:     [<p> keep to </p> </p>]^/Please explain what it does.}
    sent: "2017-04-13T20:22:55.776Z"
    editedAt: "2017-04-13T20:23:25.208Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58efdde408c00c092a7abc1e"
    text: {Note how the rules first check for the ending mark (closing tag), and break out of the `any` if they see it. Otherwise they try a sub-rule. If that also fails, they use `skip` to advance one element and do it all again.}
    sent: "2017-04-13T20:21:56.144Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efdd7a8e4b63533dc77c1d"
    text: {Sometimes it helps to break things up into sub-rules.^/```^/test: {^/    <table>^/        <data> <p>a</p> <p>b</p> <p>c</p> </data>^/        <data> <p>d</p> <p>e</p> <p>f</p> </data> ^/    </table>^/    <p>textafter</p>more text^/}^/^/p=:     [<p> keep to </p> </p>]^/data=:  [<data> any [</data> break | p= | skip]]^/table=: [<table> any [</table> break | data= | skip] to end]^/c: parse test [collect any [table= | skip]]^/foreach [i1 i2 i3] c [ ^/    print [i1 i2 i3] ^/]^/```^/}
    sent: "2017-04-13T20:20:10.121Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efdb8a8fcce56b20fcf15e"
    text: {@toomasv Thanks, It works but i have to dig into this. ^/Why do you use test as a block? I tested your code with test as a string which does'nt work. }
    sent: "2017-04-13T20:11:54.568Z"
    editedAt: "2017-04-13T20:18:58.711Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58efd8d5a0e4856242009635"
    text: {Try this:^/```^/>> data: load test^/== [^/    <table> ^/    <data> <p> a </p> <p> b </p> <p> c </p> </data> <data> <p> d </p> <p> e </p> <p> f <^/>> c: parse data [collect [thru <table> some [<data> [some [<p> keep skip </p>]] </data>]] to end]^/== [a b c d e f]^/>> foreach [i1 i2 i3] c [print [i1 i2 i3]]^/a b c^/d e f^/```^/}
    sent: "2017-04-13T20:00:21.296Z"
    editedAt: "2017-04-13T20:05:07.942Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58efd7cca0e48562420092dd"
    text: "@greggirwin I have no clue where to put the skip."
    sent: "2017-04-13T19:55:56.151Z"
    editedAt: "2017-04-13T19:58:13.260Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58efd74769a692963eaa374f"
    text: {`To` and `thru` don't see any "scope" in your rules, so you advance by one with `skip`, and check for elements.}
    sent: "2017-04-13T19:53:43.901Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd7078fcce56b20fcddb8"
    text: {You just need to check for your data and table elements, and use `skip`.}
    sent: "2017-04-13T19:52:39.428Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd6e48e4b63533dc75ee0"
    text: {@greggirwin Any solution with one collect command? Or use two parse commands?}
    sent: "2017-04-13T19:52:04.700Z"
    editedAt: "2017-04-13T19:53:07.643Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58efd6838bb56c2d11a5ebe0"
    text: {`thru {<p>}` continues to succeed, and finds `<p>textafter`. `to` and `thru` are great, until they aren't. :^^)}
    sent: "2017-04-13T19:50:27.401Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd4a3b52518ed4d0c28f9"
    text: {How to parse this with one collect command? ^/(i could do it with 2 parse commands)^/^/I only want:^/a b c^/d e f^/^/I get:^/a b c^/d e f^/textafter none none^/```^/test: {^/^-<table>^/^-^-<data> <p>a</p> <p>b</p> <p>c</p> </data>^/^-^-<data> <p>d</p> <p>e</p> <p>f</p> </data> ^/^-</table>^/^-<p>textafter</p>more text^/}^/^/c: parse test [^/^-collect [^/^-^-thru {<table>}^/^-^-^-any [^/^-^-^-^-thru {<data>}^/^-^-^-^-^-any [^/^-^-^-^-^-^-thru {<p>} keep to {</p>}^/^-^-^-^-^-]^/^-^-^-^-to {</data>}^/^-^-^-]^/^-^-to {</table>} to end^/^-]^/]^/foreach [i1 i2 i3] c [ ^/^-print [i1 i2 i3] ^/]^/```}
    sent: "2017-04-13T19:42:27.132Z"
    editedAt: "2017-04-13T19:44:22.383Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58efd42208c00c092a7a952b"
    text: {Another thing we always have to consider is the value of small helper funcs. We can do everything with raw Red, but the Forth approach to building up a vocabulary works very well sometimes.}
    sent: "2017-04-13T19:40:18.125Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd3b18fcce56b20fcd04a"
    text: "@toomasv I already fixed it for `either` )"
    sent: "2017-04-13T19:38:25.308Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efd38a408f90be66ba4283"
    text: "I could also have said `not none?` in this case."
    sent: "2017-04-13T19:37:46.863Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd3668fcce56b20fccf6d"
    text: {@maximvl You said, you want to act only on trueish value. You may do:^/```^/if in o 'key [... your code]^/```}
    sent: "2017-04-13T19:37:10.954Z"
    editedAt: "2017-04-13T19:37:49.735Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58efd33bbdf4acc11258ba12"
    text: {No requirement to cast to `logic!`, just a choice I made there. It seemed more appropriate.}
    sent: "2017-04-13T19:36:27.925Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd3028bb56c2d11a5dce3"
    text: "and for `in`?"
    sent: "2017-04-13T19:35:30.345Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efd2f3b52518ed4d0c21f4"
    text: "Yes, for comparison ops that works great."
    sent: "2017-04-13T19:35:15.190Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd2cf408f90be66ba3fc2"
    text: {my point was to return just `x > y`, no need to wrap into additional check}
    sent: "2017-04-13T19:34:39.294Z"
    editedAt: "2017-04-13T19:35:00.768Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efd2af08c00c092a7a9026"
    text: "ah, it's my mistake, sorry"
    sent: "2017-04-13T19:34:07.420Z"
    editedAt: "2017-04-13T19:34:11.829Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efd29fad849bcf428011cd"
    text: {`if` used to have an `/else` refinement, but it was not carried over to Red.}
    sent: "2017-04-13T19:33:51.800Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd28169a692963eaa243c"
    text: "why? `in` returns true-ish or false-ish value"
    sent: "2017-04-13T19:33:21.799Z"
    editedAt: "2017-04-13T19:33:31.216Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efd2608bb56c2d11a5daba"
    text: "Not so Maxim."
    sent: "2017-04-13T19:32:48.913Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd21dad849bcf42800f19"
    text: {As Reducers, we always run the risk of reducing things too much. Sometimes the longer code is clearer and easier to understand when reading later. I almost always use `either` instead of `pick` with logic values because I have to think a lot less when reading it.}
    sent: "2017-04-13T19:31:41.962Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd1ddf22385553d3b3bde"
    text: {It's the same as `either x > y [ true ] [ false ]` :D}
    sent: "2017-04-13T19:30:37.540Z"
    editedAt: "2017-04-13T19:34:20.634Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efd1c069a692963eaa211b"
    text: {That works too, it's just a bit longer and has to evaluate a condition block.}
    sent: "2017-04-13T19:30:08.891Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efd12dad849bcf42800afa"
    text: {Why not:^/```^/either in o 'key [true][false]^/```^/}
    sent: "2017-04-13T19:27:41.479Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58efc4b308c00c092a7a4fd3"
    text: {They can help a lot with debugging, telling you where the call site error was, rather than leaking internals. e.g.^/```^/>> has-word?: function [obj [any-object!] word [word!]][to logic! in obj word]^/== func [obj [any-object!] word [word!]][to logic! in obj word]^/>> has-word? #(a: 1) 'a^/*** Script Error: has-word? does not allow map! for its obj argument^/*** Where: has-word?^/>> has-word?: function [obj word ][to logic! in obj word]^/== func [obj word][to logic! in obj word]^/>> has-word? #(a: 1) 'a^/*** Script Error: in does not allow map! for its object argument^/*** Where: in^/```}
    sent: "2017-04-13T18:34:27.898Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efc439b52518ed4d0be0f3"
    text: {They don't make code faster, just the opposite currently, because the checks have to be done. The default typeset is used in any case, AFAIK, so the only slowdown would be if you have a lot of separate types you check. Eventually, they may be used for optimization. I use them as I would types in any language, documentation and catching mistakes.}
    sent: "2017-04-13T18:32:25.038Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efc2a08e4b63533dc6fb83"
    text: {@greggirwin why do you specify types in Red? just for yourself or do they make code faster?}
    sent: "2017-04-13T18:25:36.384Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efc23c4cb8d091738a3a25"
    text: ":D"
    sent: "2017-04-13T18:23:56.587Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efc1a98e4b63533dc6f845"
    text: {Could use `contains`, which is no longer, and not hyphenated, but also potentially ambiguous, as is `has`, whether you are asking for a key, value, or either one.}
    sent: "2017-04-13T18:21:29.387Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efc1578fcce56b20fc80b9"
    text: {```^/has-word?: function [obj [any-object!] word [word!]][to logic! in obj word]^/has-word: make op! :has-word?^/o: object [a: 1 b: 2]^/has-word? o 'a^/has-word? o 'c^/o has-word 'a^/o has-word 'c^/```^/Meh.}
    sent: "2017-04-13T18:20:06.868Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efc0814cb8d091738a30dd"
    text: {Needs a different name though, because we already have a `has` func as standard.}
    sent: "2017-04-13T18:16:33.650Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efc05bb52518ed4d0bcf23"
    text: {Fun with ops:^/```^/has?: function [obj [any-object!] key [word!]][to logic! in obj key]^/has: make op! :has?^/o: object [a: 1 b: 2]^/has? o 'a^/has? o 'c^/o has 'a^/o has 'c^/```}
    sent: "2017-04-13T18:15:55.457Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbeb308c00c092a7a34db"
    text: "Yes, `none` is falsey."
    sent: "2017-04-13T18:08:51.273Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbe9e4cb8d091738a26ed"
    text: "since `none ~= false`"
    sent: "2017-04-13T18:08:30.950Z"
    editedAt: "2017-04-13T18:08:49.749Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efbe99f22385553d3ae4a8"
    text: "Should work then."
    sent: "2017-04-13T18:08:25.694Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbe89a0e4856242001fd8"
    text: "to act only if the key is set"
    sent: "2017-04-13T18:08:09.334Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58efbe7cad849bcf427fb258"
    text: "this is exactly what I need :D"
    sent: "2017-04-13T18:07:56.207Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efbe6c08c00c092a7a339d"
    text: {That is, both a missing key, and a key that refers to `none` look the same.}
    sent: "2017-04-13T18:07:40.484Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbe4eb52518ed4d0bc5e4"
    text: {You can use `select`. `Select o 'key`, but that won't tell you if the key exists or not.}
    sent: "2017-04-13T18:07:10.005Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbe4669a692963ea9d114"
    text: "ok, @greggirwin thanks!"
    sent: "2017-04-13T18:07:02.973Z"
    editedAt: "2017-04-13T18:07:06.451Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efbdf44cb8d091738a2488"
    text: "I've sometimes used a helper `has?` func."
    sent: "2017-04-13T18:05:40.321Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbdedb52518ed4d0bc522"
    text: "and if I want to get that value right away?"
    sent: "2017-04-13T18:05:33.677Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efbdd2a0e4856242001cc5"
    text: "Will return `none` if they key doesn't exist."
    sent: "2017-04-13T18:05:06.498Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbdbc8fcce56b20fc6fa1"
    text: "`in o 'key`"
    sent: "2017-04-13T18:04:44.986Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbdbb408f90be66b9dfe6"
    text: "I think there should be something ;)"
    sent: "2017-04-13T18:04:43.988Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efbd814cb8d091738a227a"
    text: {is it possible to check if object has a field easier than `find keys-of o key` ?}
    sent: "2017-04-13T18:03:45.356Z"
    editedAt: "2017-04-13T18:03:55.650Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58efbc8308c00c092a7a28c8"
    text: "@greggirwin good to know, cheers"
    sent: "2017-04-13T17:59:31.776Z"
    v: 1
    author: "557df4ae15522ed4b3e1e6a2"
) #(
    id: "58efbc808bb56c2d11a57da6"
    text: {https://github.com/red/red/blob/master/environment/console/windows.reds#L138^/https://github.com/red/red/blob/master/environment/console/windows.reds#L204}
    sent: "2017-04-13T17:59:28.618Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbc3ef22385553d3ad87b"
    text: {@DavidConroy, it should come in 0.7.0 with ports. The GUI console on Windows does it today, internally.}
    sent: "2017-04-13T17:58:22.538Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efbb58f22385553d3ad573"
    text: {whoops said thanks in the wrong channel... thanks @greggirwin }
    sent: "2017-04-13T17:54:32.819Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58efb99af22385553d3acf56"
    text: {hi, beginner question, does red have a way to access the windows clipboard like in rebol, clipboard://   ? Cheers}
    sent: "2017-04-13T17:47:06.645Z"
    v: 1
    author: "557df4ae15522ed4b3e1e6a2"
) #(
    id: "58efad15b52518ed4d0b73a2"
    text: {@JacobGood1, https://gist.github.com/greggirwin/d0412f0c3d8e1ce4dfe26afc643742f1 has a bunch of mezzanines with doc strings.}
    sent: "2017-04-13T16:53:41.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efa69e69a692963ea96aa7"
    text: "@dockimbel thanks"
    sent: "2017-04-13T16:26:06.398Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ef9f858fcce56b20fbe4fc"
    text: {Most of @greggirwin code usually comes with great docstrings, some can be found in his gists.}
    sent: "2017-04-13T15:55:49.562Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef9ecc08c00c092a79a42d"
    text: {Hey guys, can you point me to some good red examples of doc strings(I know it is subjective), personal libs/code is welcome =)}
    sent: "2017-04-13T15:52:44.593Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ef780eb52518ed4d0a69ff"
    text: {@toomasv It should, yes. Another candidate for a ticket (just check if such issue has not been reported yet, as I remember one or two tickets like that, I don't remember if all were fixed).}
    sent: "2017-04-13T13:07:26.489Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef7780a0e4856242febcc3"
    text: {```^/>> [^}]^/[  ^/```^/Shouldn't the wrong usage of multiline string delimiter give an error?}
    sent: "2017-04-13T13:05:04.267Z"
    editedAt: "2017-04-13T13:07:13.116Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ef71718bb56c2d11a40bca"
    text: "@dockimbel wow!"
    sent: "2017-04-13T12:39:13.188Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef70bdbdf4acc11256d111"
    text: {Though, maybe a `parse` refinement would still be useful to switch off the collecting process and just check the validity of the input. If the input is really big and the collecting is taking a lot of resources, doing a pre-check only (without changing the rules) could be useful.}
    sent: "2017-04-13T12:36:13.497Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef7030b52518ed4d0a4396"
    text: {I had to move the inner `collect` in the `tags` rules to avoid an extra unwanted collected block level.}
    sent: "2017-04-13T12:33:52.434Z"
    editedAt: "2017-04-13T12:33:57.241Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef70028e4b63533dc55c4f"
    text: {@geekyi There is a way: if you use a *named* `collect` as top collector, then Parse will return the logic value and not the collected list:^/```lisp^/tags: [^/    any [^/^-^-ws^/^-^-| "</" thru ">" break^/^-^-| "<" copy name to ">" skip keep (load name) opt collect tags^/^-^-| keep to "<"^/^-]^/]^/^/>> parse html [collect set result tags]^/== true^/>> result^/== [html [head [title ["Test"]] body [div [u ["Hello"] b ["World"]]]]]^/```}
    sent: "2017-04-13T12:33:06.802Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef5c54ad849bcf427dbcf6"
    text: {Yes, I only have a problem with  the api, like switch `collect`ion and returning logic! . I suppose that's unavoidable due to those reasons}
    sent: "2017-04-13T11:09:08.545Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef5aaef22385553d38e92a"
    text: {> I see, parse doesn't store if tags is a `collect` rule.^/^/`collect` in Parse is a rule, but no different than others. It is not a property of "rule blocks". }
    sent: "2017-04-13T11:02:06.982Z"
    editedAt: "2017-04-13T11:04:21.084Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef59def22385553d38e471"
    text: {Actually, there are ways to avoid Parse returning the collected blocks, but that involves some rules modification anyway.}
    sent: "2017-04-13T10:58:38.706Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef599108c00c092a784c19"
    text: {That's an interesting question. Maybe it could be solved by a `/check` or `/only` refinement, disabling the collection, and forcing a returned logic value to signify that the parsing succeeded.}
    sent: "2017-04-13T10:57:21.828Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef590ef22385553d38e02d"
    text: {@dockimbel yes exactly. But now that you say it.. There can be I guess.. (I have to figure this out)}
    sent: "2017-04-13T10:55:10.701Z"
    editedAt: "2017-04-13T10:58:34.423Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef58db8bb56c2d11a3988a"
    text: {> It's not possible to have a non-collect tags rule.. ^/^/I'm not sure what you mean by that. Do you mean you can't have a `tags` rule which can be used both to collect and not collect?}
    sent: "2017-04-13T10:54:19.497Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef585cbdf4acc112565efa"
    text: "This maybe too much complexity tho.."
    sent: "2017-04-13T10:52:12.954Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef584b408f90be66b7f263"
    text: {There is an alternative way to define `parse-collect` in terms of `parse [] [collect [keep]]`, taking advantage of the fact that most common pattern of `collect` being at the beginning^/```^/insert alt-tag: copy tags/2 'collect    ; how would you nest a block?^/tags = alt-tags   ; should return true^/```}
    sent: "2017-04-13T10:51:55.384Z"
    editedAt: "2017-04-13T10:52:53.088Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef57958fcce56b20fa8014"
    text: {It's not possible to have a non-collect `tags` rule.. unless you do self-modification of the rule..}
    sent: "2017-04-13T10:48:53.653Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef575f408f90be66b7ed5b"
    text: {It could do that and hide that fact from the user tho}
    sent: "2017-04-13T10:47:59.550Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef5741ad849bcf427daae7"
    text: {I see, parse doesn't store if tags is a `collect` rule.}
    sent: "2017-04-13T10:47:29.147Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef56b8b52518ed4d09c702"
    text: {`tags` is a recursive rule, how would `parse/collect` know on which recursive rule it should generate a new nested block?}
    sent: "2017-04-13T10:45:12.632Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef545a08c00c092a78368c"
    text: {```^/parse html tags: [^/    collect [any [^/            ws^/            | "</" thru ">" break^/            | "<" copy name to ">" skip keep (load name) opt tags^/            | keep to "<"^/        ]]^/]^/```^/Arguably I could rewrite that as `parse/collect`^/}
    sent: "2017-04-13T10:35:06.175Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef528269a692963ea7cdd3"
    text: {Without the nesting ability, `collect` command in Parse would not be needed, just using the `collect` function would have been enough (though more verbose, as `keep` would require paren  expressions each time then).}
    sent: "2017-04-13T10:27:14.886Z"
    editedAt: "2017-04-13T10:28:41.414Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef5226b52518ed4d09b471"
    text: {To be fair, they both seem externally quite similar}
    sent: "2017-04-13T10:25:42.329Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef520c4cb8d09173882d7f"
    text: "@dockimbel ok thanks"
    sent: "2017-04-13T10:25:16.124Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef518a8e4b63533dc4cd98"
    text: {@geekyi You already have the ability to capture/extract values from input series in Parse using `copy` and `set`,  `collect` just adds a more sophisticate way to capture. Nesting `collect` calls allows you to create a captured block structure that matches the input structure (see my simple HTML parser on the blog article for introducing Parse).}
    sent: "2017-04-13T10:23:06.986Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ef5170ad849bcf427d946c"
    text: {@greggirwin  especially important that there are 2 `collect`s which are subtly different?}
    sent: "2017-04-13T10:22:40.394Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef4fbe8bb56c2d11a36e26"
    text: "There is a lot of subtlety in `parse`."
    sent: "2017-04-13T10:15:26.075Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ef4f44ad849bcf427d8a59"
    text: "But now Jacob has shown an exception. Nesting"
    sent: "2017-04-13T10:13:24.405Z"
    editedAt: "2017-04-13T10:13:38.724Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef4f298e4b63533dc4c42c"
    text: {Wondered why not `parse/collect` ? Cleaner api, just as powerful}
    sent: "2017-04-13T10:12:57.927Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef4f19b52518ed4d09a899"
    text: "Dirty because of the way `keep` is defined/used?"
    sent: "2017-04-13T10:12:41.832Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ef4ec808c00c092a781c69"
    text: {A different `collect`,  but I've always wondered about the difference, and the strange case of `collect` in `parse` being a sort of.. anomaly. Conveniently useful, but conceptually dirty}
    sent: "2017-04-13T10:11:20.159Z"
    editedAt: "2017-04-13T10:11:42.835Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef4e4e8e4b63533dc4bffd"
    text: {```^/>> collect [1 keep [2 [3 keep a]] collect [keep 4] keep collect [5 keep 6] keep []]^/== [2 [3 keep a] 6]^/```}
    sent: "2017-04-13T10:09:18.722Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef4e13f22385553d38b576"
    text: {@JacobGood1  :point_up: [April 12, 2017 8:27 PM](https://gitter.im/red/help?at=58ee475e08c00c092a73d290)^/Interesting, I hadn't thought of nesting `collect` before..}
    sent: "2017-04-13T10:08:19.848Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "58eedd2b69a692963ea5fe4f"
    text: {@luce80 It's explained under "Development and release modes for compilation" in the last [blog article](http://www.red-lang.org/2017/03/062-libred-and-macros.html). In case, it is still unclear after reading it, just stick to `-r`.}
    sent: "2017-04-13T02:06:35.313Z"
    editedAt: "2017-04-13T02:07:29.854Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ee755f69a692963ea46121"
    text: {@luce80 you should use `-r` when you changed Red code, like custom console etc.}
    sent: "2017-04-12T18:43:43.827Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ee705c4cb8d0917384b761"
    text: "How do I decide if I have to use -c or -r flag?"
    sent: "2017-04-12T18:22:20.037Z"
    v: 1
    author: "56eeeea485d51f252ab9d69f"
) #(
    id: "58ee4bc68fcce56b20f64832"
    text: "Thanks!"
    sent: "2017-04-12T15:46:14.581Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ee4952408f90be66b3ae92"
    text: {@JacobGood1 Nested `collect` calls produce nested blocks. You can try to put `collect` out of the recursive rule to avoid that.}
    sent: "2017-04-12T15:35:46.304Z"
    editedAt: "2017-04-12T15:36:33.819Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ee475e08c00c092a73d290"
    text: {Why is the first value of this parse collect a string while the others are  a string in a block, or just a block without anything?^/```^/parse mold 'hi/hey/hello rule: [collect [keep to "/"] skip rule | collect [keep to end]]^/== ["hi" ["hey"] [] ["hello"]]^/```}
    sent: "2017-04-12T15:27:26.471Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ee0043f22385553d332a23"
    text: "@dockimbel thanks"
    sent: "2017-04-12T10:24:03.621Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58eda18fbdf4acc1124f310f"
    text: {@JacobGood1 `this-parse-to-the-right-one`-> `system/words`}
    sent: "2017-04-12T03:39:59.932Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eda0f18e4b63533dbda996"
    text: {@luce80 Be sure to use latest version of the scripts from red/code and compile them in release mode (as they contain Red/System parts) using `-r` flag.}
    sent: "2017-04-12T03:37:21.078Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ed98ec4cb8d0917380ff89"
    text: {Don't know what `this-parse-to-the-right-one` means.}
    sent: "2017-04-12T03:03:08.331Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ed98b14cb8d0917380fe7e"
    text: "Bind to `system/words`?"
    sent: "2017-04-12T03:02:09.017Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ed95758fcce56b20f33de1"
    text: {hey guys, is there a way to bind to global context, or the default context(whatever it is called)^/```^/object [parse: func [] bind [parse some thing] this-parse-to-the-right-one]^/```}
    sent: "2017-04-12T02:48:21.236Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ed2d1b08c00c092a6f40dd"
    text: "Thanks for digging into that Arnold."
    sent: "2017-04-11T19:23:07.002Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ed27084cb8d091737f3ceb"
    text: "Now it uses as-float."
    sent: "2017-04-11T18:57:12.618Z"
    editedAt: "2017-04-11T18:57:30.114Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58ed26f9a0e4856242f4df78"
    text: {And it looks like it was updated to fix this very issue https://github.com/red/code/commit/4cc81938efde9712d5dc09b7a0b9be4cca1cbf7c}
    sent: "2017-04-11T18:56:57.843Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58ed25e8b52518ed4d00c349"
    text: "Yes it is in Red/Code repository."
    sent: "2017-04-11T18:52:24.286Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58ed256e08c00c092a6f18cc"
    text: {I think %perlin.red is in red/code repo, for demos. It's likely that something changed since it was written, and it hasn't been tested against new releases.}
    sent: "2017-04-11T18:50:22.217Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ed23adad849bcf42745e82"
    text: {Hi @luce80 the first thing that is undocumented is what you are doing here on what platform, and there is no perlin.red in script in the repository, so please provide all relevant information to get us ready to help you. Ok?   }
    sent: "2017-04-11T18:42:53.125Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58ed151368bee3091f3181dd"
    text: {Hi all,  sorry for bothering you with this but seems not be documente. I try to compile %code-master/scripts/perlin.red and it gives me error: undefined symbol: red/integer/to-float ,  I try to compile code-master/scripts/mandelbrot-fast.red and it gives me undefined symbol: red/image/acquire-buffer. What am I missing?}
    sent: "2017-04-11T17:40:35.354Z"
    v: 1
    author: "56eeeea485d51f252ab9d69f"
) #(
    id: "58ecacc3ad849bcf4271f70f"
    text: {@gltewalt Just a Warning with R2 64 bits : hash functions are broken (some fixed haven't been done in the C code). See my [comment on the blog](http://www.rebol.com/cgi-bin/blog.r?view=0552#comments)}
    sent: "2017-04-11T10:15:31.212Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58ec93ed8e4b63533db8e52f"
    text: "Never tried other options ...."
    sent: "2017-04-11T08:29:33.402Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ec8f528fcce56b20eea2fd"
    text: {And `rc "build libRed"` rebuilds it. Also mentioned in the docs. https://doc.red-lang.org/en/libred.html}
    sent: "2017-04-11T08:09:54.198Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58ec847b4cb8d091737c3a27"
    text: {OK `rc "clear"` works. }
    sent: "2017-04-11T07:23:39.622Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58ec834f68bee3091f2eda37"
    text: {( Or would that be just `rc "clear"`? )}
    sent: "2017-04-11T07:18:39.042Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58ec80308bb56c2d11973719"
    text: {@Pekr Have you already used clear? You compile like me in the rebol console using the rc method. Does `rc "red clear"` work?}
    sent: "2017-04-11T07:05:20.501Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58ec7a50ad849bcf42711eb4"
    text: "hmmm  `rebol --reinstall` worked. No error."
    sent: "2017-04-11T06:40:16.058Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec4289bdf4acc1124937c4"
    text: {I've used red clear but thought there was a difference}
    sent: "2017-04-11T02:42:17.374Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec4242bdf4acc1124936c9"
    text: "Oh, ok"
    sent: "2017-04-11T02:41:06.878Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec4188a0e4856242f0d30b"
    text: {You can also have a `red` binary and just do `red clear`. ;-)}
    sent: "2017-04-11T02:38:00.148Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ec41468fcce56b20ed879f"
    text: {I don't see how? Just use `rebol -qs --no-install red.r clear` or the shorter form: `rebol -qsi red.r clear`}
    sent: "2017-04-11T02:36:54.840Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ec3def68bee3091f2ddc91"
    text: {Yes, but it makes this problematic:^/rebol -qs red.r clear}
    sent: "2017-04-11T02:22:39.038Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec3afda0e4856242f0bc8b"
    text: {@gltewalt You can use it without installing (run it with `--no-install` option).}
    sent: "2017-04-11T02:10:05.818Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ec15eb08c00c092a6a8f11"
    text: {Kind of off-topic:  I can't "install" Rebol/View^/[Broken REBOL WIN7 64 bit](http://i.imgur.com/aI2PuJB.gif)}
    sent: "2017-04-10T23:31:55.913Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec06ed4cb8d091737a8af2"
    text: "`--: :negate` for the heck of it then"
    sent: "2017-04-10T22:27:57.202Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec06b7408f90be66aa2e78"
    text: "haha"
    sent: "2017-04-10T22:27:03.186Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec066cbdf4acc112486556"
    text: {@gltewalt https://github.com/red/red/blob/a45f9b5439c5abc2a1774058476611cb059692f5/system/runtime/common.reds#L16}
    sent: "2017-04-10T22:25:48.624Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ec061a8bb56c2d11958435"
    text: {Now I have to peek at negate and see how they decided to do it}
    sent: "2017-04-10T22:24:26.884Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec06058e4b63533db6ed89"
    text: "`--:func [val] [0 - val]`"
    sent: "2017-04-10T22:24:05.418Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec050f8e4b63533db6eb20"
    text: "true :smile: "
    sent: "2017-04-10T22:19:59.201Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec04dbb52518ed4dfbffc8"
    text: "well, `0 - val` is better then :D"
    sent: "2017-04-10T22:19:07.433Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ec04b64cb8d091737a8316"
    text: {Or roll your own?^/```^/--: func [val] [val: val - (val * 2)]^/```}
    sent: "2017-04-10T22:18:30.023Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec02898fcce56b20ecae8d"
    text: ":+1: "
    sent: "2017-04-10T22:09:13.537Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec027abdf4acc1124858ff"
    text: "true, haha, thanks :)"
    sent: "2017-04-10T22:08:58.565Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ec025f8bb56c2d119575d1"
    text: "x: negate x"
    sent: "2017-04-10T22:08:31.351Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec024cbdf4acc112485851"
    text: "negate"
    sent: "2017-04-10T22:08:12.553Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ebfe538e4b63533db6d082"
    text: {sorry for stupid question, but how do I negate the number?:^/```^/>> x: 5^/== 5^/>> x: -x^/*** Script Error: -x has no value^/*** Where: x^/>> x^/== 5^/>> x: - x^/*** Script Error: - does not allow set-word! for its value1 argument^/*** Where: -^/```}
    sent: "2017-04-10T21:51:15.002Z"
    editedAt: "2017-04-10T21:51:35.643Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb57d34cb8d0917377595d"
    text: "First we need plugin interface ;)"
    sent: "2017-04-10T10:00:51.817Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb576f8bb56c2d11924628"
    text: "we need that console/plugins repo so badly :D"
    sent: "2017-04-10T09:59:11.022Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb573c68bee3091f29fef7"
    text: "Actually, it could autorun, when I think of it."
    sent: "2017-04-10T09:58:20.088Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb57398fcce56b20e97c04"
    text: "interesting"
    sent: "2017-04-10T09:58:17.017Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58eb57288fcce56b20e97bd8"
    text: {It isn't compilable, true, but it's possible to work with it. I made custom build of gui-console, so I need to type just `c`to get into red-console.}
    sent: "2017-04-10T09:58:00.550Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb56e5ad849bcf426c393e"
    text: {@maximvl But helpr also needs rewrite, it uses Gritter rich-text engine that must be replaced with `text-box!` anyway. So, lot of work ;)}
    sent: "2017-04-10T09:56:53.138Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb56d3a0e4856242ecb4b4"
    text: "AFAIK it isn't compilable yet"
    sent: "2017-04-10T09:56:35.679Z"
    editedAt: "2017-04-10T09:56:45.012Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb56b168bee3091f29fbed"
    text: {@rebolek are you working with the new console already?}
    sent: "2017-04-10T09:56:01.981Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb569a4cb8d0917377532e"
    text: {@maximvl I want to integrate it with console but first I must fix my editor to run in console again :)}
    sent: "2017-04-10T09:55:38.613Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb5694408f90be66a6e9fd"
    text: "@rebolek Right! "
    sent: "2017-04-10T09:55:32.231Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58eb566bad849bcf426c375c"
    text: {mine is more like an index of all words with filters etc}
    sent: "2017-04-10T09:54:51.133Z"
    editedAt: "2017-04-10T09:54:57.774Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb5662ad849bcf426c3707"
    text: {now I want to integrate my thing with this one too :)}
    sent: "2017-04-10T09:54:42.158Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb56464cb8d09173775222"
    text: {@rebolek I think you can integrate thing into new console to be able to run it clicking on the word or something, without running `helpr reduce`}
    sent: "2017-04-10T09:54:14.345Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb562aad849bcf426c3667"
    text: "@maximvl yes, few months ago"
    sent: "2017-04-10T09:53:46.095Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb561ca0e4856242ecb2b5"
    text: "@rebolek wow, I didn't see that, you did that?"
    sent: "2017-04-10T09:53:32.305Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb55edad849bcf426c359d"
    text: {@iArnold do you mean helpr? http://i.imgur.com/rAZuCXz.gif}
    sent: "2017-04-10T09:52:45.904Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb54c9f22385553d27af09"
    text: {That could be it indeed. Thanks I'll wait. I am collecting things like that at the moment because I am investigating ways to improve documenting, integrating simple lookup with more complex wiki like documents.}
    sent: "2017-04-10T09:47:53.447Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58eb538968bee3091f29f098"
    text: {waiting for the new console to become compilable to add it there}
    sent: "2017-04-10T09:42:33.891Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb536bb52518ed4df8cb52"
    text: {I have a GUI "plugin" to the Red console to show help for words}
    sent: "2017-04-10T09:42:03.066Z"
    editedAt: "2017-04-10T09:42:11.026Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb533b8bb56c2d11923353"
    text: "It was a little GUI program."
    sent: "2017-04-10T09:41:15.146Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58eb4acf8fcce56b20e94a76"
    text: {@iArnold like this?^/```^/red>> first spec-of :find^/== {Returns the series where a value is found, or NONE}^/```}
    sent: "2017-04-10T09:05:18.991Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eb48efad849bcf426c0019"
    text: {I remember someone posting a small helper program on retrieving (function) descriptions from the Red definitions, but I cannot find it anymore. Anyone got a pointer or link to a gist?}
    sent: "2017-04-10T08:57:19.227Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58eb10e6b52518ed4df7c712"
    text: "@gltewalt That's allowed, yes."
    sent: "2017-04-10T04:58:14.615Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eaf58ebdf4acc11243c057"
    text: {```^/>> 0.0 / 0^/== 1.#INF^/```}
    sent: "2017-04-10T03:01:34.189Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eaf568ad849bcf426ad032"
    text: {We can divide `float!` by zero for an infinity representation?}
    sent: "2017-04-10T03:00:56.030Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eaf236f22385553d264abd"
    text: {@gltewalt Yes, see `help round`:^/```lisp^//to  => Return the nearest multiple of the scale parameter.^/    scale   [number!]  => Must be a non-zero value.^/```}
    sent: "2017-04-10T02:47:18.238Z"
    editedAt: "2017-04-10T02:47:32.719Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eaf1e38bb56c2d1190cb34"
    text: {@dockimbel While I remember - is round/to supposed to error with 0.0, or 0 ?}
    sent: "2017-04-10T02:45:55.777Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eaf182a0e4856242eb3ec6"
    text: "Ah, ok"
    sent: "2017-04-10T02:44:18.873Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eaf1384cb8d0917375ee20"
    text: {@gltewalt `mold` creates a new `string!` series, while `p` is a float!, so it cannot be affected by `trim` in any way (`trim` does not accept numbers as first argument).^/```lisp^/>> type? pi^/== float!^/>> type? mold pi^/== string!^/```}
    sent: "2017-04-10T02:43:04.770Z"
    editedAt: "2017-04-10T02:48:34.158Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eaea48f22385553d2635f9"
    text: "dang it `>> p: pi`"
    sent: "2017-04-10T02:13:28.088Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eae9f0bdf4acc112439c35"
    text: {```^/>> trim/with mold p "."^/== "3141592653589793"^/>> p^/== 3.141592653589793^/```}
    sent: "2017-04-10T02:12:00.696Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eae98a8e4b63533db2071d"
    text: {Looks like `trim` is sometimes destructive?^/```^/>> pi2: mold pi^/== "3.141592653589793"^/>> trim/with pi2 "."^/== "3141592653589793"^/>> pi2^/== "3141592653589793"^/^/```}
    sent: "2017-04-10T02:10:18.506Z"
    editedAt: "2017-04-10T02:11:08.611Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e9c7628e4b63533dae46f8"
    text: {@dockimbel I got it now. Do appreciate the explanation. Thanks.}
    sent: "2017-04-09T05:32:18.165Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e9c69c8e4b63533dae4524"
    text: {`/skip` allows you to treat the series as if it was made of records, but this is just an abstract representation, the series is not modified in any way. If you want tangible records, you can encapsulate them in sub-blocks (but searching then becomes a bit more complex, as you would need to use Parse or roll your own function for doing a deep search).}
    sent: "2017-04-09T05:29:00.053Z"
    editedAt: "2017-04-09T05:29:31.111Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e9c57a8fcce56b20e4294e"
    text: {@Rebol2Red `find/skip` works fine, it will skip values according to the skipping size, and does not alter the searched series in any way, so that the returned position is correct: `"0010"` is located at position 5. In order to create a "position by records of size 2", you need to do:^/```lisp^/block: ["0C0C" "CA"    "0407" "DE"    "0010" "IT"    "000A" "ES"]^/size: 2^-^-; record size^/idx: index? find/skip block "0010" size^/print ["Found at record index" (idx + size - 1) / size]^/```}
    sent: "2017-04-09T05:24:10.988Z"
    editedAt: "2017-04-09T05:24:49.066Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e9c161b52518ed4df362d7"
    text: {I need code which does things simular to select but the difference is it must return the index^/```^/block:^-["0C0C"^-"CA" "0407"^-"DE" "0010"^-"IT" "000A"^-"ES"]^/print index? find/skip block "0010" 2 ; fixed size records^/```^/Shouldn't this print 3 instead of 5? ^/Am i missing something or is find/skip not yet implemented?}
    sent: "2017-04-09T05:06:41.540Z"
    editedAt: "2017-04-09T05:08:55.191Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e8e4908fcce56b20e13373"
    text: "@dockimbel Ok, thanks."
    sent: "2017-04-08T13:24:32.757Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58e8da35408f90be669e98d8"
    text: {BTW, `(a/1)` will give you the same result as `a/1`, so you can just use `type? a/1`}
    sent: "2017-04-08T12:40:21.332Z"
    editedAt: "2017-04-08T12:40:36.628Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8d9e5ad849bcf4263b9e5"
    text: {@toomasv If you look at `source ?`, you will see that it uses a lit-word as argument (`'word`), so this means it will consume `(a/1)` without evaluating it on function's call, but will evaluate it later, probably in a deep way, that is why you get `b` evaluated also. Using `?`or  `help` is supposed to be used on words, paths and simple values, not expressions. So, you don't need to use `?` in such case, just:^/```lisp^/>> (a/1)^/== b^/>> a/1^/== b^/```}
    sent: "2017-04-08T12:39:01.437Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8d5ccad849bcf4263aca8"
    text: {Can you please explain, what is going on here: ^/```^/>> a: [b c]^/== [b c]^/>> b: [d e]^/== [d e]^/>> type? (a/1)^/== word!^/>> ? (a/1)^/b is a block! of value: [d e] ^/```^/Why is `type? (a/1)` saying it is *word* and `? (a/1)` saying it is *block*?}
    sent: "2017-04-08T12:21:32.408Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58e8c4ae8e4b63533daaba49"
    text: "@geekyi Thanks."
    sent: "2017-04-08T11:08:30.370Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8c3d4408f90be669e49a3"
    text: "Filed bug https://github.com/red/red/issues/2550"
    sent: "2017-04-08T11:04:52.960Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e8bfb0f22385553d1ee78e"
    text: {@geekyi Does not seem to generate an image, as you just found out ....}
    sent: "2017-04-08T10:47:12.506Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e8bd3f8e4b63533daa9f5e"
    text: "@dockimbel ok"
    sent: "2017-04-08T10:36:47.180Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e8bd30408f90be669e31e5"
    text: {@geekyi I get `false` on that also on Win7, please open a ticket for it.}
    sent: "2017-04-08T10:36:32.451Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8bcde7ea420cc424d8430"
    text: {```^/img: make image! [10x10 255.0.0]^/save %test-image.png draw img [^/    fill-pen black pen off^/    circle 10x10 8^/]^/exists? %test-image.png^/```^/}
    sent: "2017-04-08T10:35:10.632Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e8bb754cb8d091736e85b4"
    text: "So `27033` is `to-integer build-date/time`.."
    sent: "2017-04-08T10:29:09.005Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e8bb15ad849bcf42634c25"
    text: {@pekr  :point_up: [April 7, 2017 2:38 PM](https://gitter.im/red/help?at=58e75dfd408f90be6698f1fb) does it still work for you with latest build from download page? For some strange reason, I can't get it to work on Win10 here. Builds sometime after 27-march; the text can get saved, but the image doesn't}
    sent: "2017-04-08T10:27:33.627Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e8bad5b52518ed4deff0aa"
    text: "thanks"
    sent: "2017-04-08T10:26:29.140Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e8baab8fcce56b20e09f9f"
    text: "@geekyi See `decorate-name` function in `red.r`."
    sent: "2017-04-08T10:25:47.868Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8b28a8bb56c2d11892d47"
    text: {```^/>> ? system/build/config/build-basename^/system/build/config/build-basename is a file! of value: %gui-console-2017-4-8-27033^/```^/What does the `27033` mean? It used to correspond to a git commit, but there isn't one for `27033`!}
    sent: "2017-04-08T09:51:06.972Z"
    editedAt: "2017-04-08T09:58:39.222Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58e8a11db52518ed4def99d4"
    text: {@raton3062015 You can see for yourself by looking at the source as ```dir?``` is a mezzanine in Rebol and Red^/Rebol2:^/```text^/>> source dir?^/dir?: func [^/    "Returns TRUE if a file or URL is a directory." ^/    [catch] ^/    target [file! url!] ^/    /local info^/][^/    info: throw-on-error [info? target] ^/    either none? info [false] [info/type = 'directory]^/]^/```^/Rebol3:^/```text^/>> source dir?^/dir?: make function! [[^/    {Returns TRUE if the file or url ends with a slash (or backslash).}^/    target [file! url!]^/][^/    true? find "/\" last target^/]]^/```^/Red^/```text^/>> source dir?^/dir?: func [file [file! url!]][#"/" = last file]^/```^/}
    sent: "2017-04-08T08:36:45.274Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58e89ed68e4b63533daa3589"
    text: {```^/>> exists? %/u/^/== false^/>> exists? %/c/^/== true^/```}
    sent: "2017-04-08T08:27:02.339Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e89e388bb56c2d1188e98c"
    text: {@raton3062015 use here `ctrl+shift+m` and check out the formatting}
    sent: "2017-04-08T08:24:24.814Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "58e899478bb56c2d1188da49"
    text: {dir? is different between rebol2 and red^/in windows i have 3 drive  c: d: e:^/in rebol >> dir? %/c/ = true^/>> dir? %/u/ = false^/but in red ^/>> dir? %/u/ = true^/ ^/^/^/}
    sent: "2017-04-08T08:03:19.057Z"
    editedAt: "2017-04-08T08:05:07.023Z"
    v: 2
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e7ffc40e4137042af3bae8"
    text: "I'm not sure what you mean."
    sent: "2017-04-07T21:08:20.486Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e7e49d7ea420cc424ab20a"
    text: {@greggirwin I could have know this. Anyway, Thanks.}
    sent: "2017-04-07T19:12:29.745Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e7db7d68bee3091f1e1242"
    text: {Rate can take a `time!` value: `view [base rate 0:0:10 on-time [print "Go!"]]`}
    sent: "2017-04-07T18:33:33.240Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e7d9db0e4137042af30f6d"
    text: {Is there a way to have something done after for ex. 10 seconds in an event loop without interrupting it? Rate can only do things at 1 sec or ...?}
    sent: "2017-04-07T18:26:35.418Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e7c33e68bee3091f1da34a"
    text: {```^/>> to-url [http:// domain.com path file.red]^/== http://://domain.com/path/file.red^/```}
    sent: "2017-04-07T16:50:06.277Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e7c0910e4137042af28c9b"
    text: "@dockimbel Thanks a lot, I'll start playing "
    sent: "2017-04-07T16:38:41.819Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58e7b36e0e4137042af24c6b"
    text: {@toomasv I just pushed a commit to improve the conversion with `to url! <block>`, here's the result now:^/```lisp^/>> to-url [http]^/== http://^/>> to-url [http domain]^/== http://domain^/>> to-url [http domain.com]^/== http://domain.com^/>> to-url [http domain.com 8080]^/== http://domain.com:8080^/>> to-url [http domain.com 43 path]^/== http://domain.com:43/path^/>> to-url [http domain.com path]^/== http://domain.com/path^/>> to-url [http domain.com file.red]^/== http://domain.com/file.red^/>> to-url [http domain.com path file]^/== http://domain.com/path/file^/>> to-url [http domain.com path file #anchor]^/== http://domain.com/path/file#anchor^/>> to-url [http domain.com path file.red]^/== http://domain.com/path/file.red^/```}
    sent: "2017-04-07T15:42:38.552Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e79263b52518ed4deb964a"
    text: {@qtxie ^/> > bfr: copy "" call/output "dir" bfr^/^/Works now, thanks a lot!}
    sent: "2017-04-07T13:21:39.708Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e788de4cb8d091736a092d"
    text: {Yes, Red uses `form` on a block argument by default when converting to a `any-string!`, we should specialize the conversion for `url!`.}
    sent: "2017-04-07T12:41:02.467Z"
    editedAt: "2017-04-07T12:42:38.707Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e771768fcce56b20dbd17f"
    text: {Also, `url? g:g:f`returns *true*, which it probably should not.}
    sent: "2017-04-07T11:01:10.157Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58e76e1aad849bcf425e4219"
    text: {Yes, @dockimbel, that was the source of my initial confusion, when I saw how the rebol `url!`, `to-url` etc worked. Thanks, @Oldes, my bad. I understand that without `rejoin` the words in block are not evaluated, just joined together (without initial ":"), so not much use in general case. I also understand the case for incremental composition. What I don't understand is the usefulness of `url!`, defined in such way, in parsing. For example the code for `extract-from` that you gave above, would find `g:h` if we use `extract-from compose [3 "a" red 1 "hello" 2 255.0.0 g:h] url!`. But if I want to implement eg IRI-s then `g:h` is a candidate for IRI but not for URL.}
    sent: "2017-04-07T10:46:50.653Z"
    editedAt: "2017-04-07T10:48:36.346Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58e76cb44cb8d09173698e3f"
    text: {@dockimbel Rebol version seems to be a little bit more clever:^/```^/>> to-url [http domain.com]^/== http://domain.com^/```^/Red returns `httpdomain.com`}
    sent: "2017-04-07T10:40:52.911Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58e76c128bb56c2d11843b32"
    text: {@toomasv your version is producing: `http//domain.com` which is not what you want! }
    sent: "2017-04-07T10:38:10.023Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58e7660df22385553d19cd6c"
    text: {@dockimbel Thanks! It seems there is no need for `rejoin`, neither for quoting. `to-url [http :// domain.com]` works as well. }
    sent: "2017-04-07T10:12:29.291Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58e760da7ea420cc424854c6"
    text: {> bfr: copy "" call/output "dir" bfr^/^/@pekr Your code should work fine now.}
    sent: "2017-04-07T09:50:18.670Z"
    editedAt: "2017-04-07T09:50:31.030Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e7600968bee3091f1bded2"
    text: {@toomasv Yes, that is allowed so that you can construct a full URL from several pieces incrementally:^/```lisp^/>> url: to-url rejoin ['http "://" 'domain.com]^/== http://domain.com^/>> url: to-url 'http^/== http^/>> append url "://"^/== http://^/>> append url 'domain.com^/== http://domain.com^/```^/The dynamic construction abilities for many datatypes are more relaxed than the lexical rules for the same type.}
    sent: "2017-04-07T09:46:49.989Z"
    editedAt: "2017-04-07T09:47:51.094Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e75ef6f22385553d19ae4e"
    text: {It works again, that is the main thing! Very happy man again :-)}
    sent: "2017-04-07T09:42:14.519Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e75ed88e4b63533da56c73"
    text: "Yes it was something with the download here. "
    sent: "2017-04-07T09:41:44.475Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e75eb60e4137042af0c6cd"
    text: "@qtxie @pekr Confirmed!! "
    sent: "2017-04-07T09:41:10.082Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e75e4368bee3091f1bd72d"
    text: {Well, I like the GUI one, this is what I have really missed with R3 and am very grateful for that :-)}
    sent: "2017-04-07T09:39:15.084Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e75e3aad849bcf425dfa73"
    text: {```^/>> print bfr^/(...)^/crush.dll          modules               \305\276\303\275\303\241.delme^/```}
    sent: "2017-04-07T09:39:06.863Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e75e138bb56c2d1184000d"
    text: {@pekr However, it works in normal (non-GUI) console.}
    sent: "2017-04-07T09:38:27.191Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e75e030e4137042af0c424"
    text: {@pekr Hm, I just rebuild gui-console and can reproduce it now.}
    sent: "2017-04-07T09:38:11.168Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e75dfd408f90be6698f1fb"
    text: {@iArnold It works here unde Win10. It saves an image, with slight black border with blue outline, the button is visible on the tab ...}
    sent: "2017-04-07T09:38:05.974Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e75d67f22385553d19a7c2"
    text: {@qtxie I'll download again because I am not sure everything went okay there.}
    sent: "2017-04-07T09:35:35.579Z"
    editedAt: "2017-04-07T09:35:45.549Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e75d618fcce56b20db7ef0"
    text: "@rebolek  `ls`works here ..."
    sent: "2017-04-07T09:35:29.102Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e75d24408f90be6698ef23"
    text: {:point_up: [6 april 2017 15:24](https://gitter.im/red/help?at=58e6418d4cb8d0917364da4c)}
    sent: "2017-04-07T09:34:28.123Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e75d19ad849bcf425df5ad"
    text: {```^/red>> ls^/(...)^/    žýá.delme  ^/```}
    sent: "2017-04-07T09:34:17.170Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e75ce78bb56c2d1183fabd"
    text: "@iArnold any code example for us to try?"
    sent: "2017-04-07T09:33:27.041Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e75ce04cb8d09173694f91"
    text: {```^/E:\Code\red (editor)^/λ chcp^/Active code page: 852^/```}
    sent: "2017-04-07T09:33:20.237Z"
    editedAt: "2017-04-07T09:33:27.317Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e75cb47ea420cc424843ce"
    text: {@rebolek what does `chcp`return in your cmd console? Mine is `852`}
    sent: "2017-04-07T09:32:36.809Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e75cb068bee3091f1bd0f5"
    text: {@qtxie Just downloaded the latest master after commit 7766 compiled the gui-console and pasted my code created a screenshot and it was still wrong. Sorry.}
    sent: "2017-04-07T09:32:32.931Z"
    editedAt: "2017-04-07T09:32:48.939Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e75c750e4137042af0be70"
    text: {@pekr there are no conversion tables for converting other code tables than UTF-8.}
    sent: "2017-04-07T09:31:33.490Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e75c678bb56c2d1183f917"
    text: {I guess the number is process id, not a return code.}
    sent: "2017-04-07T09:31:19.425Z"
    editedAt: "2017-04-07T09:31:33.405Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58e75c4a8fcce56b20db7a8c"
    text: {Also - is above return code a error number? Because seccessful call returns 0}
    sent: "2017-04-07T09:30:50.887Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e75be868bee3091f1bce13"
    text: {I would like to ask, here in a help group (which is about getting help :-) ), to help me understand the outcome of following code:^/```^/>> call "dir"^/== 26416^/>> bfr: copy "" call/output "dir" bfr^/*** Access Error: invalid UTF-8 encoding: #{FF393631}^/*** Where: call^/```^/Am I facing just the same situation, as e.g. reading a website (you can try with www.idnes.cz for e.g.) with incorrect encoding, than the site claims? I know it is somehow related to codec system and I can imagine being able to read some header and configure codec, as far as reading a website, but - how do I work around something as the `call` output? I know that I could use `call/shell`for now, but I am trying to understand, what could cause the problem for me? E.g. @Rebolek was able to get above working, and his filesystem contains special Czech alphabet chars. Mine (at least in given directory, does not). Or could it be about the Shell configuration on my system? Thansk for any pointers ...}
    sent: "2017-04-07T09:29:12.975Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e757bc408f90be6698d9e3"
    text: {Is it meant to be so: ^/```^/>> url? to-url 'b^/== true^/>> a: to-url 'b^/== b^/>> ? a^/a is a url! of value: b^/```}
    sent: "2017-04-07T09:11:24.547Z"
    editedAt: "2017-04-07T09:12:43.884Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58e75192f22385553d197b04"
    text: {@iArnold @geekyi `to-image` should be working now.}
    sent: "2017-04-07T08:45:06.498Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e75157ad849bcf425dc351"
    text: {HI! Newbe question: Why does `to-url [http www.example.org]` result in *httpwww.example.org*, or  `to-url [foo bar]` give *foobar*; as well `url? foo:bar` (or any word with ':' in it) give *true*?}
    sent: "2017-04-07T08:44:07.796Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58e745f6408f90be66988c7b"
    text: {@iArnold No. I change the way to capture face in `to-image`. The previous `to-image` will be failed when your face is covered by other windows, and also not working when the window is minimized.}
    sent: "2017-04-07T07:55:34.498Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e7384a08c00c092a5825ac"
    text: {It is weird tho, seems to work sometimes partly in weird ways..}
    sent: "2017-04-07T06:57:14.675Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e737bd7ea420cc4247acc8"
    text: {But doesn't work at all on stable 0.6.2 (for me), so worse in that case}
    sent: "2017-04-07T06:54:53.039Z"
    editedAt: "2017-04-07T06:55:24.923Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58e737990e4137042af021d7"
    text: {@iArnold no, it worked as expected previously, so you're right, a regression}
    sent: "2017-04-07T06:54:17.626Z"
    editedAt: "2017-04-07T06:55:55.689Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58e737647ea420cc4247ab42"
    text: {@geekyi Your words puzzle me. If you say it is working as expected, I expected it to create the image of a window and a tab filled with a button. I test here on Windows 7 machine to be clear about that part, perhaps it works ok on Win10, i can't check that.}
    sent: "2017-04-07T06:53:24.642Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e7362c408f90be6698509f"
    text: {@iArnold  :point_up: [April 6, 2017 6:24 PM](https://gitter.im/red/help?at=58e6418d4cb8d0917364da4c) "Click" doesn't work for me at all and throws an error `cannot MAKE/TO image!` on stable 0.6.2^/After further testing, it looks like it works as expected on (windows 10, 64bit) : [2016-6-30 ], and like you said on: [2017-3-9, 2017-3-26]}
    sent: "2017-04-07T06:48:12.491Z"
    editedAt: "2017-04-07T06:49:24.371Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58e734fa68bee3091f1b2d4e"
    text: {> @iArnold For `to-image` issue, that caused by the special way we handle tab-panel on Windows. We'll fix it once we rewrite the tab-panel widget.^/^/Did the tab-panel widget change for version 0.6.2 compared to version 0.6.1? It is a regression for me.}
    sent: "2017-04-07T06:43:06.444Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e734ee8bb56c2d11834f39"
    text: {Go to investors to buy Roku for you. That would get Carl onboard as a side effect :-)}
    sent: "2017-04-07T06:42:54.552Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e732d168bee3091f1b2551"
    text: {We will make the Red docs as good as possible, I have many ideas about how to present the concepts in a simple, but complete manner. If anyone knows how to clone oneself, or open cross-dimensional portals through the Multiverse (Sheldon Cooper [might help](https://www.youtube.com/watch?v=fqa48tqNOj8)), or just avoid sleeping for a few years, that would help. ;-)}
    sent: "2017-04-07T06:33:53.143Z"
    editedAt: "2017-04-07T06:34:26.461Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e730200e4137042af0068e"
    text: {@gltewalt Haven't read that section since many years... looks good, indeed. Though I can spot a few cosmetic improvements there. }
    sent: "2017-04-07T06:22:24.556Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58e706898e4b63533da41de7"
    text: {It could be a matter of my brain already being comfortable with static scoping, but I think the documentation is fantastic in that Red/System section}
    sent: "2017-04-07T03:24:57.148Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e70616408f90be6697ad86"
    text: {The red/system docs on scoping are fantastic - and the examples behaved the same in Red console, but I know that Red/System has actual (static) scopes. Red doesn't have scope really. }
    sent: "2017-04-07T03:23:02.420Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e703ca8bb56c2d1182b266"
    text: {You can think of all those context constructors as using `bind` internally.}
    sent: "2017-04-07T03:13:14.768Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e70380408f90be6697a3ef"
    text: {For now, yes, but more will come: local contexts for iterators (probable future support), `use`, modules,...}
    sent: "2017-04-07T03:12:00.334Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e703384cb8d09173680c9d"
    text: "(And bind)"
    sent: "2017-04-07T03:10:48.519Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e7031e68bee3091f1a8722"
    text: {What are the context constructors? Just object and function?}
    sent: "2017-04-07T03:10:22.596Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e701808e4b63533da410b0"
    text: {@gltewalt Scoping: just think about your code as just words in global context when loaded, then at evaluation-time, when various context constructors are used (`context`, `func`, ...), you can think as them as "painters", who "paint" their body words in different colors (one for each context), and some words get "re-painted" several times (the last "painter" wins). ;-) Anyway, feel free to ask as much as needed here about that, as long as you still feel your understanding is not complete.}
    sent: "2017-04-07T03:03:28.586Z"
    editedAt: "2017-04-07T03:04:54.415Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e700b98e4b63533da40d2f"
    text: {I've just started to look at parse. I had the idea that I needed to be comfortable with everything else before starting with parse, but that doesn't seem practical now}
    sent: "2017-04-07T03:00:09.393Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e7001ab52518ed4de96193"
    text: "I did mistake it, yes"
    sent: "2017-04-07T02:57:30.743Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e7000a8fcce56b20da2ae3"
    text: {@dockimbel That's much cleaner, thank you for that extract-from example}
    sent: "2017-04-07T02:57:14.351Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6ffcd08c00c092a576068"
    text: {@gltewalt It seems you've mistaken `any-type!` for `datatype!` in your `extract-from` definition.}
    sent: "2017-04-07T02:56:13.878Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e6ff9f08c00c092a57600d"
    text: {"Very different" is understating it for me. My brain was wired for static scoping a long time ago, and I'm 'still' struggling to assimilate definitional scoping. It's frustrating and embarrassing for me }
    sent: "2017-04-07T02:55:27.702Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6ff75f22385553d185aff"
    text: {@gltewalt For your `extract-from` function, here is one possible implementation:^/```lisp^/extract-from: func [blk [block!] type [datatype!]][^/^-parse blk [collect any [keep type | skip]]^/]^/^/extract-from [3 "a" red l "hello" 2 255.0.0 78] integer!^/== [3 2 78]^/```}
    sent: "2017-04-07T02:54:45.972Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e6fdbd8bb56c2d1182a047"
    text: {@asampal^/> I don't have a problem with it either, but I have to say that if it's required to always inform users that their initial take on what it means is wrong, then something is not right^/^/You are making big assumptions there. Users are coming from different backgrounds, and most experienced programmers come with (strong) biais. Redbol is *very different*  and many of the Redbol features will collide with preconceptions of many programmers, shaking their knowledge at fundamental level (like "variables"). This is best addressed with good documentation, and not by crippling the language in various ways (like submitting design decisions to end-user votes, which is an extreme form of design by committee).^/^/We have naming conventions, and we try our best to stick to them. If existing names are not good enough, or creating exceptions when it could be avoided, I am all for adopting *better* ones, which are *in line* with our goals. Though, when people are proposing replacement names, while blantantly ignoring the existing conventions, and/or backing their choice with a "because I like it", that is not helpful at all. Naming is *hard*,  and not solved in a matter of seconds, on a purely subjective basis.}
    sent: "2017-04-07T02:47:25.937Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e6fa5108c00c092a574fca"
    text: {@iArnold For `to-image` issue, that caused by the special way we handle tab-panel on Windows. We'll fix it once we rewrite the tab-panel widget.}
    sent: "2017-04-07T02:32:49.843Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e6c570b52518ed4de8a66f"
    text: {Nothing special. I sometimes use sigils and conventions to denote that some thing is intended to be private to a context, related to parsing, etc. Red doesn't have a mechanism for hiding vars, though we can do it various ways, so naming is a lightweight way to notate things for humans.}
    sent: "2017-04-06T22:47:12.846Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6afd10e4137042aee6cce"
    text: "What's the underscore for?"
    sent: "2017-04-06T21:14:57.455Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6ad1e7ea420cc4245e440"
    text: {Of course, you can also dynamically produce values for objects:^/```^/person: context [^/    _data: none^/    name: does [rejoin ["person: " _data]]^/    age: does [rejoin ["age: " (50 + _data)]]^/]^/people: copy []^/repeat i 5 [^/    append people make person [_data: i]^/    print people/:i/name^/    print people/:i/age^/]^/print ""^/print people/3/name^/print people/3/age^/```^/And you can mix and match how you want.}
    sent: "2017-04-06T21:03:26.007Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6acf3408f90be66967956"
    text: "That's it for today, thanks. I learned a lot!"
    sent: "2017-04-06T21:02:43.175Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e6ac51f22385553d174a00"
    text: {And you can print an entire object^/```^/>> print people/3^/name: "person: 3"^/age: "age: 53"^/```}
    sent: "2017-04-06T21:00:01.864Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6ac0aad849bcf425b7c7e"
    text: {It's always a balance between keeping things together contextually and modularizing.}
    sent: "2017-04-06T20:58:50.672Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6abd268bee3091f19691c"
    text: {```^/person: context [^/    name: ""^/    age: 0^/]^/make-person: func [i][^/    make person [^/        name: rejoin ["person: " i]^/        age: rejoin ["age: " (50 + i)]^/    ]^/]^/people: copy []^/repeat i 5 [^/    append people make-person i^/    print people/:i/name^/    print people/:i/age^/]^/print ""^/print people/3/name^/print people/3/age^/```}
    sent: "2017-04-06T20:57:54.012Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6abab8bb56c2d11818218"
    text: {Consider creating the object with the values in the spec block, rather than setting them after creating an empty object. And if you're doing the same thing every time, break it out into a helper func. }
    sent: "2017-04-06T20:57:15.748Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6aa5c8bb56c2d11817c42"
    text: {Is this a good approach for using objects?^/```^/person: context [^/^-name: ""^/^-age: 0^/]^/^/persons: copy []^/repeat i 5 [^/^-append persons make person []^/^-persons/:i/name: rejoin ["person: " i]^/^-persons/:i/age: rejoin ["age: " (50 + i)]^/^-print persons/:i/name^/^-print persons/:i/age^/]^/print ""^/print persons/3/name^/print persons/3/age^/```}
    sent: "2017-04-06T20:51:40.370Z"
    editedAt: "2017-04-06T20:53:16.741Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e6a9567ea420cc4245d12f"
    text: {Of course, if R2 had used `length-of/index-of`, I probably wouldn't have had an issue with those either.  There is no reason we can't alias them in our own code. Make a lib that does so. If people adopt it and, eventually, no code contains `index?/length?`anymore, you've won.}
    sent: "2017-04-06T20:47:18.125Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a882b52518ed4de83339"
    text: {But I suppose someone could write a "Non-logic! return values from names ending with ? sigil considered harmful" paper to formalize the debate. :^^)}
    sent: "2017-04-06T20:43:46.051Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a7fc8bb56c2d1181720c"
    text: {Nenad welcomes feedback, from all I've ever seen. For my own part, I weigh input based on what I know of the individual. If someone is confused, I try to explain something. If someone new to Red says "This is wrong." I assume they have experience that gives them a different view, but I don't assume they're right. :^^)^/^/As you say, we're talking about this one instance. In this case, it's not a new argument, so I don't believe I'm discounting anything out of hand, nor is Nenad. Many years of no complaints, the issue is raised a few years ago, there is no clear resolution for a need to change, Nenad is aware of all this and decides what to use in Red. }
    sent: "2017-04-06T20:41:32.412Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a69c8fcce56b20d8f56f"
    text: "@Rebol2Red we both learned something :smile: "
    sent: "2017-04-06T20:35:40.942Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6a6807b553c707c519172"
    text: {Remember, "You're holding it wrong!"}
    sent: "2017-04-06T20:35:12.101Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a602c4ac989f3cb7c47e"
    text: {again, not necessarily talking about this one instance}
    sent: "2017-04-06T20:33:06.206Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a5ed01d449152eb5293d"
    text: {I don't have a problem with it either, but I have to say that if it's required to always inform users that their initial take on what it means is wrong, then something is not right}
    sent: "2017-04-06T20:32:45.724Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a5aed7ab15e8172476b6"
    text: {well, he can state his case, of course, but that doesn't mean that most people wouldn't think differently (not saying this is the case for this name in particular), but that user feedback on certain things (in particular naming) should be welcomed}
    sent: "2017-04-06T20:31:42.110Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a5a78e4b63533da2d557"
    text: {@asampal, I've been using `length?` for so long that I'm too biased to think of anything but what it currently means. If memory serves, I never had an issue or any confusion about it.}
    sent: "2017-04-06T20:31:35.349Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a5548fcce56b20d8ef8a"
    text: {@gltewalt My approch to this was not right in the first place^/@greggirwin Thanks i can use this}
    sent: "2017-04-06T20:30:12.614Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e6a543408f90be6696585e"
    text: {However, Nenad has already stated the case for these *exact* names in the style guide linked above.}
    sent: "2017-04-06T20:29:55.589Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a51fe3700b1461c8c70c"
    text: {e.g. when you see "length? foo", what do you think of?}
    sent: "2017-04-06T20:29:19.835Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a513f22385553d172854"
    text: "Perhaps confusion then. I thought you were."
    sent: "2017-04-06T20:29:07.701Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a50b7b553c707c519164"
    text: {but, on the basis of specific items that can cause initial confusion}
    sent: "2017-04-06T20:28:59.471Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a4ecc4ac989f3cb7c46d"
    text: {I'm _not_ talking about a strict naming convention}
    sent: "2017-04-06T20:28:28.144Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a4bbc4ac989f3cb7c469"
    text: {@greggirwin , also, it's obviously up to @dockimbel whether any particular issue should have some userbase feedback informing it, so I don't see how this would set a precedent}
    sent: "2017-04-06T20:27:39.753Z"
    editedAt: "2017-04-06T20:28:05.410Z"
    v: 2
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a4a28fcce56b20d8ec80"
    text: {@asampal Make a solid case for it, that's all I'm saying.  You are talking about a strict naming convention, yes? That affects how *everyone* names things in all their code. It effectively becomes a design decision.}
    sent: "2017-04-06T20:27:14.588Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a45308c00c092a562d27"
    text: "@greggirwin cool"
    sent: "2017-04-06T20:25:55.635Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6a405dddd87f332d2883b"
    text: "and this kind of thing doesn't come up that often"
    sent: "2017-04-06T20:24:37.718Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a3efc4ac989f3cb7c452"
    text: {we're talking about naming something, not about how things work}
    sent: "2017-04-06T20:24:15.463Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a3be7b553c707c519146"
    text: "this is not that"
    sent: "2017-04-06T20:23:26.350Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a3bbdddd87f332d28822"
    text: {I did mention not having design by committee, didn't I?}
    sent: "2017-04-06T20:23:23.423Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a3a0b52518ed4de81ba5"
    text: {@asampal, we're still a small sampling. I don't want to set a precedent that we can vote in design changes.  It needs a solid argument.}
    sent: "2017-04-06T20:22:56.813Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a383dddd87f332d2881e"
    text: {also, the fact that Carl spent a lot of time thinking about things shouldn't mean that if users, when first seeing something he designed, become confused, you shouldn't want to consider the motive for their confusion}
    sent: "2017-04-06T20:22:27.433Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a3588e4b63533da2c9c5"
    text: {```^/>> toggle: func ['word][set word not get word]^/== func ['word][set word not get word]^/>> a: false^/== false^/>> toggle a^/== true^/>> a^/== true^/>> toggle a ^/== false^/>> a^/== false^/```}
    sent: "2017-04-06T20:21:44.169Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a35268bee3091f194092"
    text: {@Rebol2Red @gltewalt, you can use lit-word params for this kind of thing.}
    sent: "2017-04-06T20:21:38.609Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58e6a302c4ac989f3cb7c41f"
    text: {as I said, I'm not advocating this approach for most design decisions}
    sent: "2017-04-06T20:20:18.914Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a3018bb56c2d11815abb"
    text: {`loop 5 [ prin toggle-a-variable a-variable prin " "]`}
    sent: "2017-04-06T20:20:17.173Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6a2e9c4ac989f3cb7c411"
    text: "@greggirwin , put it to a vote"
    sent: "2017-04-06T20:19:53.464Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e6a2a58fcce56b20d8e439"
    text: {@asampal, how do we know it's a majority? AFAIK, this particular naming issue didn't come up in the REBOL community for more than 12 years. While not infallible, Carl spent a long time thinking about these very issues. There are't many mistakes, certainly not of this caliber, in Rebol's set of standard funcs. Things added quickly, in later years, with more outside input, do suffer from design weakness IMO. Still, I believe in consistency. And if someone can make a strong case for this, I'm sure it will be considered. So far that hasn't happened. ^/^/It's not a matter of one being so much better, in my mind, just different tradeoffs. Neither choice is clearly superior across the board.}
    sent: "2017-04-06T20:18:45.824Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a2838e4b63533da2c6d0"
    text: {if a-variable was going to be a constant, you could do:^/```^/toggle-a-variable: func [var] [system/words/a-variable: not var]^/```}
    sent: "2017-04-06T20:18:11.855Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6a25868bee3091f193beb"
    text: "variable is in your functions scope"
    sent: "2017-04-06T20:17:28.808Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6a23c4cb8d0917366aed6"
    text: "a-variable is set globally"
    sent: "2017-04-06T20:17:00.539Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6a14668bee3091f19373a"
    text: {You have to rebind a-variable if you want it to keep the result }
    sent: "2017-04-06T20:12:54.478Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6a11bb52518ed4de8106a"
    text: {@gltewalt, there isn't a built in func to extract values by type. Here's one I worked on a while back.^/```^/collect-values: func [^/^-"Collect values in a block, by datatype or custom parse rule"^/^-block [block!]^/^-rule  "Datatype, prototype value, or parse rule"^/^-/deep "Include nested blocks"^/^-/local top-rule v^/][^/^-rule: switch/default type?/word rule [^/^-^-datatype! [reduce [rule]]^-^-^-^-^-; Turn a plain datatype into a parse rule for that type.^/^-^-block! typeset! [rule]^-^-^-^-^-^-; Blocks and typesets (e.g. any-word!) work directly as rules.^/^-][ reduce [type? rule] ]^-^-^-^-^-^-; Turn a prototype value into a rule for that value's type.^/^/^-; If they didn't spec /deep, any-block! skips nested blocks.^/^-; /deep does *not* look into nested path or string values.^/^-;!! We need good examples for `parse into` and its limitations.^/^-deep: either deep [^/^-^-[any-path! | any-string! | into top-rule]^-; Don't parse into nested paths or strings^/^-][any-block!]^-^-^-^-^-^-^-^-^-; any-block! skips nested blocks^/^/^-collect [^/^-^-parse block top-rule: [^/^-^-^-any [set v rule (keep/only v) | deep | skip]^/^-^-]^/^-]^/]^/;e.g. [^/;^-blk: [1 a 2 'b 3 c: 4 :d [a 'b c: :d  E 'F G: :H]]^/;^-print mold collect-values blk any-word!^/;^-print mold collect-values/deep blk any-word!^/;^-print mold collect-values blk set-word! ^/;^-print mold collect-values blk [set-word! | get-word!]^/;^-print mold collect-values/deep blk [set-word! | get-word!]^/;^-print mold collect-values/deep blk first [a:]^/;^-print mold collect-values/deep blk integer!^/;^-blk: [a/b/c 'j/k/l x/y/z: [d/e/f 'g/h/i t/u/v:]]^/;^-print mold collect-values blk path!^/;^-print mold collect-values blk lit-path!^/;^-print mold collect-values blk set-path!^/;^-print mold collect-values/deep blk path!^/;^-print mold collect-values/deep blk lit-path!^/;^-print mold collect-values/deep blk set-path!^/;^-blk: [[a] [b] (c) [[d] (e) ([f])]]^/;^-print mold collect-values blk block!^/;^-print mold collect-values/deep blk block!^/;^-print mold collect-values blk paren!^/;^-print mold collect-values blk first [()]^/;^-print mold collect-values/deep blk paren!^/;^-print mold collect-values blk any-block!^/;^-blk: [1 2.0 "b" %file a 3x3 [4.4.4.4 #5 50%]]^/;^-print mold collect-values blk [number! | tuple!]^/;^-print mold collect-values/deep blk [number! | tuple!]^/;]^/```}
    sent: "2017-04-06T20:12:11.790Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e6a0ee8bb56c2d118151fa"
    text: "you can only use `not` on a boolean value"
    sent: "2017-04-06T20:11:26.765Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6a0ce7ea420cc4245a9eb"
    text: {@gltewalt I don't get this. I need a function which toggles a given variable.}
    sent: "2017-04-06T20:10:54.065Z"
    editedAt: "2017-04-06T20:11:21.073Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e6a03e8fcce56b20d8d90f"
    text: {```^/>> loop 5 [^/[    a-variable: toggle-a-variable a-variable^/[    prin a-variable prin " "^/[    ]^/true false true false true^/```}
    sent: "2017-04-06T20:08:30.174Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e69eb968bee3091f192d5f"
    text: {@gltewalt I understand this but is there a way to make the second code work so i can toggle more variables inside one function?}
    sent: "2017-04-06T20:02:01.319Z"
    editedAt: "2017-04-06T20:03:40.988Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e69e27b52518ed4de80521"
    text: {The first version is using the global binding of a-variable}
    sent: "2017-04-06T19:59:35.939Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6975808c00c092a55f076"
    text: {Maybe a silly question but why does the first code works but the second not?^/```^/toggle: func[^/][^/^-a-variable: not a-variable return a-variable^/]^/a-variable: false^/loop 5 [^/^-toggle ^-^-^/^-prin a-variable prin " "^/] ; The output toggles^/print ""^/^/toggle-a-variable: func [^/^-variable^/][^/^-variable: not variable return variable^/]^/a-variable: false^/loop 5 [^/^-toggle-a-variable a-variable^/^-prin a-variable prin " "^/] ; The output is always false^/print ""^/```}
    sent: "2017-04-06T19:30:32.537Z"
    editedAt: "2017-04-06T19:35:49.666Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58e69675c4ac989f3cb7c307"
    text: {Of course, this isn't saying that design by committee is what you want, but imposing something unnatural (to the majority) doesn't seem like the way to go for certain subjective calls. }
    sent: "2017-04-06T19:26:45.200Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e695f101d449152eb527d0"
    text: {@greggirwin , wrt naming being subjective - this is exactly the point. If, say, as a language designer, you associate a certain meaning with a word (simple or compound), but a majority of your users would assume a different one upon first seeing it, wouldn't you go with their call? Maybe in some situations the users' subjective opinions aren't informed by the potential uses of that word so their initial gut feeling, but I'm not sure that that's the typical case.}
    sent: "2017-04-06T19:24:33.773Z"
    editedAt: "2017-04-06T19:27:34.943Z"
    v: 2
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58e695c4408f90be6696111d"
    text: {Obviously there is extract but it just picks elements based of skip number. And blows up. }
    sent: "2017-04-06T19:23:48.956Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e6908ef22385553d16c709"
    text: {Is there already a function similar to this that I'm missing?^/```^/extract-from: func [^/    blk [block!] ^/    type [any-type!]^/    /local ret-blk [block!]^/][^/    ret-blk: copy []^/    foreach elem blk [^/        if type = type? elem [append ret-blk elem]^/    ]^/    return ret-blk^/]^/```}
    sent: "2017-04-06T19:01:34.450Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e68f4408c00c092a55cc57"
    text: "Yes, it works, thanks"
    sent: "2017-04-06T18:56:04.284Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e68e49408f90be6695ea60"
    text: {@pekr does this way work for you? `call/output/shell "dir" bfr`}
    sent: "2017-04-06T18:51:53.011Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58e66a5a68bee3091f182ee5"
    text: {On re-reading it, I don't think we need to add anything. }
    sent: "2017-04-06T16:18:34.250Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e669c58fcce56b20d7c9da"
    text: {Naming is important enough to warrant its own wiki page, but we can expand https://github.com/red/red/wiki/Coding-Style-Guide#naming-conventions in the meantime.}
    sent: "2017-04-06T16:16:05.039Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e668264cb8d09173659f76"
    text: {On naming, we just need to note what decision Nenad has made and put it someplace it can be easily referenced. It's a subjective call, and Nenad has stated repeatedly what his preference is for Red. Unless someone has an objective argument and data to back it up, we should consider the matter closed.}
    sent: "2017-04-06T16:09:10.773Z"
    editedAt: "2017-04-06T16:10:42.517Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e65177f22385553d1596e4"
    text: {I compile from R2 console, doing red.r and then `rc "-t Windows %environment/console/gui-console.red"`}
    sent: "2017-04-06T14:32:23.214Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e64fd7f22385553d158eb6"
    text: {Hm, that's strange. When I compile gui-console, it say 0.6.1 and has no `call` support}
    sent: "2017-04-06T14:25:27.687Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e64ce3408f90be6694b0c6"
    text: {@qtxie I hope you will be able to fix this, I made a simple version of my program and sent you the link to the gist.}
    sent: "2017-04-06T14:12:51.677Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e64812f22385553d15665e"
    text: "I used non-GUI console, I will try with GUI one"
    sent: "2017-04-06T13:52:18.049Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e647de8e4b63533da119dc"
    text: {I use the GUI console compiled from latest sources ...}
    sent: "2017-04-06T13:51:26.097Z"
    editedAt: "2017-04-06T13:51:44.350Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e647d08bb56c2d117f9a2d"
    text: {Hm, works with localized filename (`ščř.delme`) also.}
    sent: "2017-04-06T13:51:12.296Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e6478e8bb56c2d117f9977"
    text: {It works for me, but I don't have any localized filenames in my directory.}
    sent: "2017-04-06T13:50:06.416Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e646a8f22385553d155dab"
    text: {when tried with the `call/output "cmd dir" bfr`, it hangs the process ... probably worth ticketing ....}
    sent: "2017-04-06T13:46:16.405Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e646708bb56c2d117f93ae"
    text: {How do I call a simple `dir` for example?^/```^/>> bfr: "" call/output "dir" bfr^/*** Access Error: invalid UTF-8 encoding: #{FF393631}^/*** Where: call^/```}
    sent: "2017-04-06T13:45:20.320Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e644b38bb56c2d117f89c2"
    text: {(for the tabpages I used `save %mytab1.png to-image main-panel/pane/1` for the first tabpage)^/}
    sent: "2017-04-06T13:37:55.936Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e6418d4cb8d0917364da4c"
    text: {(Windows) I have ^/```^/view [^/^-main-panel: tab-panel 200x200 [^/^-^-"tab1" [^/^-^-^-button "Click!" [save %mywindow.png to-image main-panel/parent]^/^-^-]^/^-]^/]^/``` ^/I can click the button "Click!" and get an image of the window, but the contents of tab1 is empty.^/In a more complex situation I have taken the creation of the images out of the view into a function that gets loaded before the view is called. In version 0.6.1 I got all the nice screenshots of the complete window and all tabpages, now I get, well lets say, strange results. }
    sent: "2017-04-06T13:24:29.204Z"
    editedAt: "2017-04-06T13:31:28.301Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e63f9e68bee3091f175076"
    text: "+1 @pekr "
    sent: "2017-04-06T13:16:14.189Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e63b418e4b63533da0d4e8"
    text: {We would have to create a code page, with two columns, comparing the old way, and *-of way, to see, if it bugs us, or not. The last thing we want is to have it eventually semantically correct, but not liking to work with :-)}
    sent: "2017-04-06T12:57:37.233Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e63af24cb8d0917364b5d9"
    text: {`lenght-of`would solve it. Well, it is pushing the code readability a bit, but we already opened a pandora box anyway ...}
    sent: "2017-04-06T12:56:18.006Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e639058fcce56b20d6d532"
    text: {Which isn't exactly what you want when you say overloading right? You want something like action! But in userspace}
    sent: "2017-04-06T12:48:05.077Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e638b6f22385553d15151e"
    text: {@maximvl good question.. You know we can do that kinda.. But wouldn't work for words loaded already, as it only changes the existing pointer or word to length function}
    sent: "2017-04-06T12:46:46.148Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e63584b52518ed4de5fcb1"
    text: {at least in OOP you can overload `length` method, how would you do it in Red?}
    sent: "2017-04-06T12:33:08.858Z"
    editedAt: "2017-04-06T12:34:14.888Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e6346868bee3091f171882"
    text: "it is not OO, how much ever you want it to be."
    sent: "2017-04-06T12:28:24.570Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e634167ea420cc42438bff"
    text: {well, in red it could be `a/length`, not very different}
    sent: "2017-04-06T12:27:02.888Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e633ef408f90be6694336c"
    text: {@maximvl a.length looks to me: `I am working in the wrong programming language!`}
    sent: "2017-04-06T12:26:23.018Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e62efc68bee3091f16fd63"
    text: {@iArnold ^/>Most other languages that I know are using length for returning the length^/^/How many of this list use `length` as a separate function and not a method? In my opinion this is a big difference, `a.length` looks like getting length of `a` while it can call a method, while `length a` is a clear function invocation, you can't confuse first one with a variable but it is the case in second example}
    sent: "2017-04-06T12:05:16.865Z"
    editedAt: "2017-04-06T12:06:34.741Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e62da7b52518ed4de5d0bc"
    text: {>And length? should just become length^/^/I disagree, `length` looks like a variable, in fact this name will often be used as a variable}
    sent: "2017-04-06T11:59:35.847Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e62d697ea420cc424369bd"
    text: {should we also call `numbers` something like `numerics`?}
    sent: "2017-04-06T11:58:33.390Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e62d26ad849bcf42591535"
    text: {using new word for existing thing doesn't make it special}
    sent: "2017-04-06T11:57:26.549Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e62cf88e4b63533da08c3b"
    text: {@iArnold ^/>and please forget the 'boolean', it will only be confusing, logic! is also yes/no on/off^/^/em, they are the `same`:^/```^/red>> same? true yes^/== true^/red>> same? true on^/== true^/```}
    sent: "2017-04-06T11:56:40.628Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e62a818fcce56b20d6842f"
    text: {@maximvl `dir?` and `exists?` do return `logic!` (and please forget the 'boolean', it will only be confusing, `logic!` is also yes/no on/off). And `length?` should just become `length`.}
    sent: "2017-04-06T11:46:09.353Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
)#(
    id: "58e621cbf22385553d14acc2"
    text: {it still may be that this is just my perception and other people think differently :)}
    sent: "2017-04-06T11:08:59.306Z"
    editedAt: "2017-04-06T11:09:10.988Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e62174ad849bcf4258e46a"
    text: {in the same time with `length-of` I certainly understand that I have to compare result to something, because it's not meant to be used in "boolean context" }
    sent: "2017-04-06T11:07:32.166Z"
    editedAt: "2017-04-06T11:07:42.692Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e6213d0e4137042aebbdcb"
    text: {but it makes no sense, because integers are `true` values in "boolean context"}
    sent: "2017-04-06T11:06:37.057Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e6211c8bb56c2d117ee08a"
    text: {eg: looking at `length?` I would assume I could write something like `if length? x`}
    sent: "2017-04-06T11:06:04.722Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e620fcf22385553d14a81a"
    text: {what I meant is not to return exactly `true`/`false` values, but to see the way you can use a word}
    sent: "2017-04-06T11:05:32.657Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e620afad849bcf4258e15a"
    text: {about logic values - I agree, they are called "generalized boolean" in Lisp world}
    sent: "2017-04-06T11:04:15.151Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e61fec8e4b63533da05235"
    text: {but it's forced by languages, which I don't really like}
    sent: "2017-04-06T11:01:00.094Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e61fd64cb8d0917364351f"
    text: {@dockimbel I'm actually a fan of Erlang/Prolog notation :)}
    sent: "2017-04-06T11:00:38.731Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e617278bb56c2d117eb00e"
    text: {@maximvl ^/> from my experience having naming conventions really helps reading code^/^/So, you must be a big fan of hungarian notation then? Let's adopt it for Red, so our code will be much more readable and fulfill our goals of simplicity and human-friendliness. ;-) More seriously, we do have *some* naming conventions, you can check them in the docs. If you look closer to the list you printed, you'll notice that the `?` suffix is used for naming functions formed from a noun or adjective, instead of a verb (we should describe that better in the docs). (Note to myself: rename `react?` to `reaction?`) Moreover, you'll notice some edge cases (like `exists?`) or exceptions sometimes, when no better alternative was found.^/^/> checking each time if the function returns boolean^/^/As a reminder, in Redbol, *any value* can be used as a "conditional expression" for feeding the built-in control flow function (e.g. `if find "hello" #"o" [print "found!"]`), so knowing what possible types can be returned from a given function is important, focusing specifically on logic values seems pointless to me.}
    sent: "2017-04-06T10:23:35.831Z"
    editedAt: "2017-04-06T10:33:30.338Z"
    v: 13
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e612758fcce56b20d61aee"
    text: {Is compiling using `-t Windows` triggering compiling without using/compiling Redlib? I use `-t Windows` because I do not want to get the annoying dosbox, and I don't see a libred being generated somewhere in my red-master folder.}
    sent: "2017-04-06T10:03:33.056Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e60fb48fcce56b20d60fa2"
    text: {from my experience having naming conventions really helps reading code, and checking each time if the function returns boolean or just ends on "?" without reason is a lot of hassle}
    sent: "2017-04-06T09:51:48.116Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e60f30ad849bcf42588e94"
    text: "`offset?` could be `offset-between`"
    sent: "2017-04-06T09:49:36.696Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e60e95ad849bcf42588c12"
    text: {Most other languages that I know are using `length` for returning the length. Perhaps keep an alias `length-of` to keep consistent. The only other exception I see here now is `react?` that would become `react-of` which should perhaps be `react-on`? }
    sent: "2017-04-06T09:47:01.669Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e60cef7ea420cc4242dd16"
    text: {or even more, because this is rough estimation, words like `new-line? `, `exists?`,`zero?` also return boolean}
    sent: "2017-04-06T09:39:59.818Z"
    editedAt: "2017-04-06T09:41:58.805Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e60c80ad849bcf425880cd"
    text: {as you can see we have 5 times more words with boolean return for ?-ending funcs }
    sent: "2017-04-06T09:38:08.358Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e60bc7ad849bcf42587d53"
    text: {and some statistics:^/```^/red>> bools: 0^/== 0^/red>> non-bools: 0^/== 0^/red>> w: keys-of system/words^/== [datatype! unset! none! logic! block! paren! string! file! url! ch...^/red>> forall w [^/[    if all [ value? w/1 #"?" = last to-string w/1 ] [^/[      either find fetch-help w/1 "Returns true" [ print [w/1 ": boolean"] bools: bools + 1 ] [ print [w/1 ": not boolean" ] non-bools: non-bools + 1 ] ]^/[    ]^/even? : boolean^/odd? : boolean^/head? : boolean^/index? : not boolean^/length? : not boolean^/tail? : boolean^/equal? : boolean^/not-equal? : boolean^/strict-equal? : boolean^/lesser? : boolean^/greater? : boolean^/lesser-or-equal? : boolean^/greater-or-equal? : boolean^/same? : boolean^/type? : not boolean^/complement? : boolean^/negative? : boolean^/positive? : boolean^/NaN? : boolean^/value? : boolean^/new-line? : not boolean^/context? : not boolean^/sign? : not boolean^/last-lf? : not boolean^/error? : boolean^/none? : boolean^/series? : boolean^/any-string? : boolean^/binary? : boolean^/any-list? : boolean^/word? : boolean^/url? : boolean^/zero? : not boolean^/string? : boolean^/suffix? : not boolean^/object? : boolean^/file? : boolean^/dir? : not boolean^/exists? : not boolean^/empty? : boolean^/offset? : not boolean^/float? : boolean^/block? : boolean^/set-word? : boolean^/function? : boolean^/unset? : boolean^/op? : boolean^/any-function? : boolean^/tag? : boolean^/action? : boolean^/native? : boolean^/routine? : boolean^/refinement? : boolean^/datatype? : boolean^/map? : boolean^/path? : boolean^/?? : not boolean^/bitset? : boolean^/char? : boolean^/email? : boolean^/get-path? : boolean^/get-word? : boolean^/hash? : boolean^/integer? : boolean^/issue? : boolean^/lit-path? : boolean^/lit-word? : boolean^/logic? : boolean^/pair? : boolean^/paren? : boolean^/percent? : boolean^/set-path? : boolean^/time? : boolean^/typeset? : boolean^/tuple? : boolean^/image? : boolean^/vector? : boolean^/any-block? : boolean^/any-object? : boolean^/any-path? : boolean^/any-word? : boolean^/number? : boolean^/immediate? : boolean^/scalar? : boolean^/=? : boolean^/react? : not boolean^/? : not boolean^/== none^/red>> bools^/== 72^/red>> non-bools^/== 15^/```}
    sent: "2017-04-06T09:35:03.060Z"
    editedAt: "2017-04-06T09:37:34.738Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e609448fcce56b20d5f08d"
    text: "`?` feels like a boolean result, at least for me"
    sent: "2017-04-06T09:24:20.244Z"
    editedAt: "2017-04-06T09:24:36.333Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e60925408f90be66936a84"
    text: {I like `context-of`, speaking about which I find `length-of` also more descriptive}
    sent: "2017-04-06T09:23:49.954Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e5e2e17ea420cc42421dfe"
    text: "Well, it should be imo removed anywa"
    sent: "2017-04-06T06:40:33.153Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e5e2b8b52518ed4de48323"
    text: {If we dont like context-of, then let's stay with context? and remove context, as Rebolek suggested}
    sent: "2017-04-06T06:39:52.995Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e5da5bf22385553d136a29"
    text: {Environment sounds bigger, and is a known term for the OS level env.}
    sent: "2017-04-06T06:04:11.324Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e580ac0e4137042ae96c38"
    text: "context-of feels better"
    sent: "2017-04-05T23:41:32.558Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e57d428e4b63533d9decab"
    text: "environment?"
    sent: "2017-04-05T23:26:58.350Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e52c8c08c00c092a4fdba0"
    text: {`context!` is in fact an _internal_ type, i.e. it has a number defined (TYPE_CONTEXT) and it has a source file `%runtime/datatypes/context.reds` which contains utility functions for context handling. As far as I can tell it will not become exposed to the user (does not need to). I would say that `context!` is therefore NOT synonymous to `object!` and that `context?` would be better called `context-of` the more so because the result of this function is of type `object!` or `function!`.}
    sent: "2017-04-05T17:42:36.830Z"
    editedAt: "2017-04-05T17:43:47.197Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58e51742b52518ed4de163aa"
    text: {@greggirwin there is `context!`commented out in Red sources, it may come one day. I like `context ` also, but not as synonym for `object `}
    sent: "2017-04-05T16:11:46.266Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e510e6ad849bcf42547386"
    text: {We already have object ownership of series (http://www.red-lang.org/2016/03/060-red-gui-system.html). I don't think we have access to `ownership/owned?`, though, to find an owner reflectively.^/^/I've always liked the word `context`. If `object/context` are synonyms, so should be `object?/context?`. That's a bit tricky, because where does it end? Do we then alias `object!` and `context!`? We can easily do that to some extent, as I've shown in the past with creating a `hashtag!` alias for `issue!`, but should we? In this case, `context-of` makes sense as it is a reflection of sorts.}
    sent: "2017-04-05T15:44:38.881Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e4963c68bee3091f100f1b"
    text: {Good points Gregg, an ownership systems comes in one of next releases, 0.6.4. IIRC}
    sent: "2017-04-05T07:01:16.659Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e495694cb8d091735dada0"
    text: {If there will be separate `context!` type, then `context` function would change anyway.}
    sent: "2017-04-05T06:57:45.074Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e495298bb56c2d1178376f"
    text: {If there's an ownership attribute planned for objects then they won't be exactly the same as a context - no?}
    sent: "2017-04-05T06:56:41.088Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e4949c68bee3091f10089a"
    text: {Is context important conceptually, though, despite being the same as object in implementation ?}
    sent: "2017-04-05T06:54:20.185Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e49439b52518ed4ddeec7a"
    text: "ok, done :-)"
    sent: "2017-04-05T06:52:41.885Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e49425f22385553d0dda1e"
    text: "If we remove `context` then yes ;)"
    sent: "2017-04-05T06:52:21.762Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e494120e4137042ae52adc"
    text: "then context? coukd just stay, right?"
    sent: "2017-04-05T06:52:02.933Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e493c8ad849bcf425210d6"
    text: {If we dont worry about the coompatibility, I would not have problem with that}
    sent: "2017-04-05T06:50:48.864Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e493af8fcce56b20cfb5c7"
    text: {I know it is controversial proposal, but the sooner will it be done, the lesser the damage will be.}
    sent: "2017-04-05T06:50:23.076Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4935c408f90be668d25ce"
    text: "Agreed, but we all used it so much ..."
    sent: "2017-04-05T06:49:00.588Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e491b14cb8d091735d9ec4"
    text: {I do not have problem with some `...?` functions not returning `boolean!`, but `context?` is bit unfortunate thanks to `object/context` vs. `object?/context?` problem. IMO it would be best to remove `context` function (even if I am used to it), it is a waste to have it just as duplicate of `object`.}
    sent: "2017-04-05T06:41:53.311Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4918ead849bcf4252066b"
    text: {Naming in the Redbol land was always treated seriously, so I dont expect easy answers}
    sent: "2017-04-05T06:41:18.961Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e49140f22385553d0dd06c"
    text: {the compromise coul be single word returnin boolean, -of? variant otherwise: context? , context-of?}
    sent: "2017-04-05T06:40:00.064Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e4907ab52518ed4ddee07e"
    text: {I can feel my psychological inclination to have ? there :-)}
    sent: "2017-04-05T06:36:42.400Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e49025408f90be668d18d0"
    text: "Another example is size? vs size-of"
    sent: "2017-04-05T06:35:17.172Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e48fc38e4b63533d998746"
    text: {There is some beauty to funcs accompanied with the question mark. We have lived with that for so long. Later on, some users started to ask, if any func accompanied with the ? shoul be strictly boolean, or not. But that woul push funcs like index? length? into a index-of, length-of territory. Are we ready for that? And yes, it would be consistent with the likes like maximum-of for e.g.}
    sent: "2017-04-05T06:33:39.565Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e48e3b408f90be668d1033"
    text: {Well, probably my last comment towards this topic. And sorry for not quoting funcs, just on the phone here}
    sent: "2017-04-05T06:27:07.765Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e48c897ea420cc423c5e6f"
    text: {@gltewalt `bind?` in R3 works same as `context?` in Red.}
    sent: "2017-04-05T06:19:53.084Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e48c6b68bee3091f0fe8c0"
    text: {I wouldn't know a better word to propose. binding? context-of? namespace?}
    sent: "2017-04-05T06:19:23.932Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e48c257ea420cc423c5d66"
    text: "I'm not sure if the behavior is similar or not"
    sent: "2017-04-05T06:18:13.130Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e48b380e4137042ae50966"
    text: {R3 has a bind?  I never look at R3 but I googled "Rebol binding?"}
    sent: "2017-04-05T06:14:16.093Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e47b730e4137042ae4cfb5"
    text: {@dockimbel ^/> Good point, indeed, we should rename context?, though I don't find bind? nor bound? particularly good.^/What about `context-of` ?}
    sent: "2017-04-05T05:06:59.348Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e46c6c7ea420cc423bec52"
    text: {`types-of` is part of the R2/Forward group of functions that were introduced in R2 2.7.8 (the latest version), written by BrianH, as an attempt to bring forward compatibility with R3. I don't think anyone ever used `types-of` in any public script. I never had a need for it too, even in the Red compiler code, I have my own tailor-made version. The use-cases are so rare, that I don't think it would be a useful addition to the Red core functions. There are even more weirder things in R2/Forward, like the `title-of` function which is supposed to return the "title" docstring from a function, it has very rare usages, it's trivial to write yourself, and the proposed implementation is flawed in R2 as it doesn't account for optional presence of function attributes...}
    sent: "2017-04-05T04:02:52.636Z"
    editedAt: "2017-04-05T04:12:28.626Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e46af58bb56c2d1177a2a0"
    text: {@greggirwin ^/> I think it's a good point, and confusing that `object/context` are the same, but `object?/context?` are not.^/^/Good point, indeed, we should rename `context?`, though I don't find `bind?` nor `bound?` particularly good.}
    sent: "2017-04-05T03:56:37.469Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58e43f238e4b63533d987dc6"
    text: {Tests now generate both ways for performance, I think.. from latest blog [post](http://www.red-lang.org/2017/03/062-libred-and-macros.html)^/![unified and split](https://4.bp.blogspot.com/-H292yUbKjLQ/WNervcj4B2I/AAAAAAAAASw/Zi6IVVwu54MPH_G7imngLO0A-7F-uWQRwCLcB/s1600/comp-bench2.png)}
    sent: "2017-04-05T00:49:39.716Z"
    editedAt: "2017-04-05T00:50:24.532Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58e43e61ad849bcf4250f247"
    text: {With a `types-of` helper, we can easily write something to check for func spec compatibility between funcs.}
    sent: "2017-04-05T00:46:25.232Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e43e090e4137042ae400c1"
    text: {Peter's stuff for Red generates a lot of small test files. Mine generated some massive ones (500K - 1MB). }
    sent: "2017-04-05T00:44:57.318Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e43d248fcce56b20ce8e57"
    text: {I have some test table generators too. Spits out a lot of stuff.}
    sent: "2017-04-05T00:41:08.589Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e43cea08c00c092a4be06b"
    text: {Peter must have similar stuff that generates tests for Red, I just don't remember how it all works right now. }
    sent: "2017-04-05T00:40:10.252Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e43cc2408f90be668c05cd"
    text: {@greggirwin  ah that was my first idea too! Like quickcheck in haskell}
    sent: "2017-04-05T00:39:30.443Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e43c4c8e4b63533d987444"
    text: {I found some of my old code that expanded typesets under R2/3 and did a bunch of test generation. Early steps, which I think stalled when R3 lost steam. It's related work to what you're talking about @geekyi. I'll have to examine it to see the current state, but it was going to be a type-recombining test generator. That is, look at a func spec, expand all typesets, and from that list of datatypes generate random inputs to the function to test it.}
    sent: "2017-04-05T00:37:32.030Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e438b8408f90be668bfa14"
    text: {I think `third` is spec. `First` is interface (just args).}
    sent: "2017-04-05T00:22:16.390Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e4380d08c00c092a4bd063"
    text: {so `first :append` is spec, second is body, third is..}
    sent: "2017-04-05T00:19:25.677Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e437c38e4b63533d9863a2"
    text: "R2 used ordinal funcs for reflection initially."
    sent: "2017-04-05T00:18:11.838Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e4376168bee3091f0ec585"
    text: "Use `spec-of` in its place."
    sent: "2017-04-05T00:16:33.801Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e437268fcce56b20ce79b2"
    text: {This is interesting, when I try to use `types-of` in red:^/```^/>> same-type? :add :subtract^/*** Script Error: third does not allow action! for its s argument^/*** Where: third^/```}
    sent: "2017-04-05T00:15:34.238Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e4366c408f90be668bf321"
    text: {I think it's a good point, and confusing that `object/context` are the same, but `object?/context?` are not.}
    sent: "2017-04-05T00:12:28.498Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e43642ad849bcf4250d58a"
    text: {`Types-of` in R2 seems a bit vague. I don't recall ever using it. It can match specs if they are exactly the same, but not otherwise. I'll see if I can find my old stuff.}
    sent: "2017-04-05T00:11:46.618Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e43503b52518ed4dddbfed"
    text: {I have some func oriented mezzanines, and we can collect them in gists or wikis for now. I'm as anxious as anyone to press forward with ways to configure Red locally with additions. Until we have official plans from Team Red, we'll have to roll our own interim solutions.}
    sent: "2017-04-05T00:06:27.048Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e433858fcce56b20ce6d09"
    text: {@PeterWAWood I see, It's an idea I had for a long time,  but I didn't have the code as I wasn't so familiar with the internals.. and `types-of` wasn't exactly what I wanted (missing return types when I checked, and I want it specifically for `any-function!`). What's the best way I can move forward? Put it in a future milestone? I'm not sure if it's big enough for a REP}
    sent: "2017-04-05T00:00:05.015Z"
    editedAt: "2017-04-05T00:00:45.989Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58e431fdb52518ed4dddb7a1"
    text: {I cannot see the need for such functions to be added to Red, certainly at this stage. You can easily write them yourself. The Rebol ```types-of``` function is written in Rebol. It is not native!. ^/^/When requests like this are  approved, the delivery of future milestones is delayed.^/}
    sent: "2017-04-04T23:53:33.039Z"
    editedAt: "2017-04-04T23:54:24.709Z"
    v: 4
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58e42fb6f22385553d0c94b8"
    text: {I suppose one could phrase it that way  @gltewalt :smile:}
    sent: "2017-04-04T23:43:50.252Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e42f878fcce56b20ce602f"
    text: "And assumed you meant 'new issue'"
    sent: "2017-04-04T23:43:03.044Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e42f608e4b63533d98464f"
    text: {I thought you meant bug because it works in R2, but not Red. That's the way I took it}
    sent: "2017-04-04T23:42:24.712Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e42f298fcce56b20ce5f39"
    text: {@PeterWAWood sorry, I meant wish, my use-case is the above `same-type?` functions and similar ones}
    sent: "2017-04-04T23:41:29.560Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e42dab0e4137042ae3c9f8"
    text: {@geekyi ^/> Should I file a bug? Unless @dockimbel has a better implementation planned..^/^/Why is  something you would like a bug? If you want a ```types-of``` function, you can write one and use it. You can even use the source of the Rebol2 implementation. ^/^/If you feel it is a useful addition to the Red runtime, you need to make a better case than "I want it".}
    sent: "2017-04-04T23:35:07.467Z"
    editedAt: "2017-04-04T23:38:32.874Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58e42c8fad849bcf4250b2e7"
    text: {Well your heads not going to get chopped off. I've done, said, and asked, some dumb things and I'm still allowed to hang around. ^/File one. }
    sent: "2017-04-04T23:30:23.949Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e42a95f22385553d0c834f"
    text: {Should I file a bug? Unless @dockimbel has a better implementation planned..}
    sent: "2017-04-04T23:21:57.420Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e42a878fcce56b20ce4d66"
    text: {I should also probably mention my use case.. (this works in rebol2):^/```^/>> same-type?: func[a [any-function!] b [any-function!]][(types-of :a) = (types-of :b)]^/>> same-type? :add :subtract^/== true^/```^/And similar functions^/I need return type as well, maybe that means I have to roll my own using `spec-of`?}
    sent: "2017-04-04T23:21:43.737Z"
    editedAt: "2017-04-04T23:22:25.728Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58e427b768bee3091f0e8ec2"
    text: {The returns are different, but that's gonna leave a mark on newcomers}
    sent: "2017-04-04T23:09:43.845Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e42773ad849bcf4250a0bf"
    text: {object? allows object! for its word. ^/context is the same as object. ^/context? Doesn't allow object! for its word}
    sent: "2017-04-04T23:08:35.348Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e41ffc8fcce56b20ce278d"
    text: {:point_up: [April 5, 2017 3:03 AM](https://gitter.im/red/help?at=58e4183b68bee3091f0e5948)^/In rebol2:^/```^/>> ? types-of^/USAGE:^/    TYPES-OF value^/^/DESCRIPTION:^/     Returns a copy of the types of a function.^/     TYPES-OF is a function value.^/^/ARGUMENTS:^/     value -- (Type: any)^/```^/^/}
    sent: "2017-04-04T22:36:44.044Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e41f2e08c00c092a4b789d"
    text: {`make object! spec` is the same within the different versions, but the interface, `context`, `object` maybe different.. doc mentions that ^/> Red should be using the Rebol3 object definition, as it provides that handy extra feature.}
    sent: "2017-04-04T22:33:18.546Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e41e0e08c00c092a4b7444"
    text: {@gltewalt maybe relevant https://stackoverflow.com/questions/41416193/what-is-the-difference-between-context-and-object}
    sent: "2017-04-04T22:28:30.802Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e41da78fcce56b20ce1e02"
    text: "If you want to extend `x`"
    sent: "2017-04-04T22:26:47.527Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e41d8a08c00c092a4b7247"
    text: "In that case use `make x spec`"
    sent: "2017-04-04T22:26:18.769Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e41d63408f90be668b926f"
    text: {Why wouldn't it allow object! for the word argument? Or "why doesn't it"}
    sent: "2017-04-04T22:25:39.129Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e41d60f22385553d0c507f"
    text: {@gltewalt as you see, the actual thing is `make object! spec`}
    sent: "2017-04-04T22:25:36.468Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e41d2bb52518ed4ddd69cb"
    text: {Anyone else see an issue here?^/```^/>> x: context []^/== make object! []^/>> object? x^/== true^/>> context? x^/*** Script Error: context? does not allow object! for its word argument^/*** Where: context?^/>> source context^/context: func [spec [block!]][make object! spec]^/>> source object^/object: func [spec [block!]][make object! spec]^/```}
    sent: "2017-04-04T22:24:43.355Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e41d297ea420cc423ad578"
    text: "@gltewalt it is the same"
    sent: "2017-04-04T22:24:41.491Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e41d014cb8d091735c1f78"
    text: "How are context and object different?"
    sent: "2017-04-04T22:24:01.497Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e41b0108c00c092a4b685d"
    text: {Kind of the reverse way - returns a list of functions that take certain data types }
    sent: "2017-04-04T22:15:29.283Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e41ab6408f90be668b8667"
    text: {@geekyi I think Greg Irwin has a function that does what you're talking about. what-takes}
    sent: "2017-04-04T22:14:14.895Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e41a6d4cb8d091735c13f6"
    text: {Rebol 2 doesn't have context?, but I could have probed more deeply and found out what the return values were}
    sent: "2017-04-04T22:13:01.194Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e418aaad849bcf42506241"
    text: "`help` shows you types, when they are specified."
    sent: "2017-04-04T22:05:30.872Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4183b68bee3091f0e5948"
    text: {@dockimbel It would be nice to have `types-of` to get at the input and output types in the spec of a function. Unless there is an easy way already? }
    sent: "2017-04-04T22:03:39.435Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e417260e4137042ae37071"
    text: {Yes. It is also helpful to think of `word!`s as pointers like in c and c++. To reinforce that everything is anonymous :smile: }
    sent: "2017-04-04T21:59:02.692Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e4162a4cb8d091735c0238"
    text: {@gltewalt in rebol2 `help` shows return value. Just a deficiency of current help}
    sent: "2017-04-04T21:54:50.164Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e346e0408f90be66878865"
    text: ":+1: "
    sent: "2017-04-04T07:10:24.820Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e343784cb8d091735812b0"
    text: {well, you can also find a use for diffing, but in general just to check if words belong to same context:^/```^/== func [x][[x]]^/>> z: f 5^/== [x]^/>> context? z/1^/== func [x][[x]]^/>> system/words = context? z/1^/== false^/>> (context? 'z) = (context? z/1)^/== false^/```}
    sent: "2017-04-04T06:55:52.411Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e3428608c00c092a4754af"
    text: "for diffing?"
    sent: "2017-04-04T06:51:50.324Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e34241ad849bcf424c47e9"
    text: {and as it was pointed out - all values are anonymous, so it can't return name, but still you can compare it with other contexts, this is why it's useful}
    sent: "2017-04-04T06:50:41.207Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e341d08fcce56b20ca0128"
    text: {I was only saying that at that moment the result would have been less confusing. What my brain was set on was the `context-of` example}
    sent: "2017-04-04T06:48:48.122Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e340ee7ea420cc4236ada7"
    text: {@gltewalt I think all words belong to some context, so it makes no sense to have boolean as `context?` return}
    sent: "2017-04-04T06:45:02.951Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58e33e704cb8d0917357fefe"
    text: {@gltewalt Yes, Red has no scopes, Red/System has lexical scopes and variables (no words, no binding, no dynamic rebinding).}
    sent: "2017-04-04T06:34:24.971Z"
    editedAt: "2017-04-04T06:35:05.404Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e33e2c8fcce56b20c9f100"
    text: {I am talking about renaming `context?` to `context-of`. Not sure if it could be called a reflector ...}
    sent: "2017-04-04T06:33:16.154Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e33e138e4b63533d93cc03"
    text: {@dockimbel Are the scope rules for Red/System different than Red?}
    sent: "2017-04-04T06:32:51.959Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33e0e0e4137042adf56d6"
    text: {```lisp^/>> help "-of"^/     body-of     =>  Returns the body of a value that supports reflection ^/     class-of     =>  Returns the class ID of an object ^/     keys-of     =>  Returns the list of words of a value that supports reflection ^/     layout     =>  Return a face with a pane built from a VID description ^/     spec-of     =>  Returns the spec of a value that supports reflection ^/     values-of     =>  Returns the list of values of a value that supports reflection ^/     words-of     =>  Returns the list of words of a value that supports reflection ^/```}
    sent: "2017-04-04T06:32:46.717Z"
    editedAt: "2017-04-04T06:32:56.585Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e33dd78bb56c2d11726a7c"
    text: {@pekr ^/> and thought the same could be true for "somehow" getting *-of reflectors. But I don't push for it. It seems you somehow don't like it ...^/^/All reflectors in Red are using the `-of` suffix... what are you talking about?}
    sent: "2017-04-04T06:31:51.983Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e33d9068bee3091f0a3a68"
    text: {@gltewalt Not your fault, it's `help`'s failure. We should have a new one in the next days anyway.}
    sent: "2017-04-04T06:30:40.448Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e33d878fcce56b20c9ee4a"
    text: {@pekr That solution unfortunately polutes `system/words`:^/```^/>> help to-^/Found these words:^/    (...)^/>> find system/words 'to-^/== true^/```}
    sent: "2017-04-04T06:30:31.831Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e33d8208c00c092a4741b5"
    text: {@rebolek context-of example was what my mind was set on}
    sent: "2017-04-04T06:30:26.661Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33d590e4137042adf539d"
    text: {As for `bound?`, wonder if it was added in some later incarnations of R2? Or was it there since the beginning? I lost my Rebol archive, where I had it since the 0.6 version :-(}
    sent: "2017-04-04T06:29:45.956Z"
    editedAt: "2017-04-04T06:30:13.783Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e33d33408f90be66876312"
    text: {It would have helped a lot to see what `context?` returned before I made a boob of myself - but I assumed that help would show it, and I was just... generally confused.}
    sent: "2017-04-04T06:29:07.531Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33d28408f90be668762c9"
    text: {Well, I would get used to them. I also like, in R2, just hitting `>> help to-`getting all conversion functions, and thought the same could be true for "somehow" getting *-of reflectors. But I don't push for it. It seems you somehow don't like it ...}
    sent: "2017-04-04T06:28:56.391Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e33cd7ad849bcf424c3459"
    text: {@pekr A search on rebol.org (biggest Rebol scripts codebase) shows that no script there is calling the `bound?` function. So, it does not seem that Rebol2 users are familiar with it. How many times did you use it?}
    sent: "2017-04-04T06:27:35.808Z"
    editedAt: "2017-04-04T06:28:28.412Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e33c34ad849bcf424c3272"
    text: {@pekr I doubt Carl "started" that, rather pushed by others (BrianH, Andreas,...). I think the rule was `-of` is reserved for naming reflectors, and that is what Carl probably agreed upon.}
    sent: "2017-04-04T06:24:52.704Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e33bb168bee3091f0a3278"
    text: "Yep, I get it finally"
    sent: "2017-04-04T06:22:41.521Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33ba68bb56c2d11726214"
    text: "but words are just pointers that change"
    sent: "2017-04-04T06:22:30.393Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33ba48e4b63533d93c132"
    text: {`bound?`exists in R2, Rebol users wold be familiar with that. But still the same story, some ppl complained, that they thought it is about if the word is bound, or not. I think that `*-of`reflectors was a solution Carl started but was not sure about. He opened a pandora box with the likes `words-of values-of minimum-of maximum-of`}
    sent: "2017-04-04T06:22:28.657Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e33b9b8e4b63533d93c112"
    text: {But you can't return object name, because object doesn't keep track of words and other types that are referring to it.}
    sent: "2017-04-04T06:22:19.618Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e33b5e08c00c092a473a2e"
    text: "return object 'name', object!, function!, none!"
    sent: "2017-04-04T06:21:18.969Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33ae1f22385553d081857"
    text: {All newly LOADed words are bound to global context by default (for now, until 0.8.0 and modules introduction). The console inputs are , as any other Red input, first LOADed, before `do` is called on the resulting block from `load`.}
    sent: "2017-04-04T06:19:13.311Z"
    editedAt: "2017-04-04T06:20:05.229Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e33a9f4cb8d0917357f0ce"
    text: {I think I just started down the wrong path in my thinking}
    sent: "2017-04-04T06:18:07.079Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33a758fcce56b20c9e444"
    text: {I noticed awhile back that it added words with no value to system/words, but it doesn't say "Hey my name is system/words, and here are me attributes"}
    sent: "2017-04-04T06:17:25.574Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33a567ea420cc4236953c"
    text: {Maybe `context?` should be renamed to `bound?`, I thought `context?` would be more meaningful and accurate, maybe that is not the case.}
    sent: "2017-04-04T06:16:54.666Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e33a45b52518ed4dd92812"
    text: "Yes, that's just gotcha which makes sense :-)"
    sent: "2017-04-04T06:16:37.753Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e339dd4cb8d0917357edb7"
    text: {@gltewalt ^/```^/>> a^/*** Script Error: a has no value^/*** Where: catch^/>> find words-of system/words 'a^/== [a c d null cause-error routines safer error? quit-return none tru...^/```^/By calling a word that has no value from console, it is added to `system/words` with value `unset!`. So when you ask for context of that word later with `context?`, it already has a context - `system/words`.}
    sent: "2017-04-04T06:14:53.667Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e339bf8e4b63533d93b979"
    text: {@gltewalt  `>> x` will retrieve the value of the word `x` in its bound context. `>> context? 'x` will retrieve the context which that specific `x` word is bound to. Those are two different properties of words, not to be confused.}
    sent: "2017-04-04T06:14:23.479Z"
    editedAt: "2017-04-04T06:17:33.039Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e3397e408f90be6687558c"
    text: "Yes, the return part would have helped"
    sent: "2017-04-04T06:13:18.477Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33977ad849bcf424c289f"
    text: {@rebolek  - nice function `context-of`. Not sure how useful, but nice indeed :-)}
    sent: "2017-04-04T06:13:11.516Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e3395108c00c092a47320d"
    text: {@gltewalt You must understand how evaluation works in Red to not be confused by result of `context?`}
    sent: "2017-04-04T06:12:33.339Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e33943b52518ed4dd92414"
    text: {These are my shortcomings and my ignorance to deal with. But @rebolek gave an example of what I was thinking about}
    sent: "2017-04-04T06:12:19.780Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e3393068bee3091f0a2a9a"
    text: {@gltewalt The current `help` implementation is not good, there are several replacements worked on right now. The `return:` part from Red function is not part of the `help` output, so you might have missed it for `context?`:^/```lisp^/>> probe spec-of :context?^/[^/    "Returns the context in which a word is bound" ^/    word [any-word!] "Word to check" ^/    return: [object! function! none!]^/]^/```}
    sent: "2017-04-04T06:12:00.850Z"
    editedAt: "2017-04-04T06:12:19.108Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e3390b7ea420cc423690a7"
    text: {Well, I know of course. It is just about the discussion I do remember was held while back ... No need for the change, if we don't see a fit ...}
    sent: "2017-04-04T06:11:23.436Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e338fb8bb56c2d1172557a"
    text: {I just say that right now `context?` would be less confusing to me if it returned boolean than this:^/```^/>> x^/*** Script Error: x has no value^/*** Where: catch^/>> context? 'x^/== make object! [^/    datatype!: datatype!^/    unset!: unset!^/    none!: none!^/```}
    sent: "2017-04-04T06:11:07.563Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e338c008c00c092a473011"
    text: "@pekr No, same names can be found in R3."
    sent: "2017-04-04T06:10:08.158Z"
    editedAt: "2017-04-04T06:10:38.463Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e3389b8bb56c2d11725401"
    text: {As Doc points out, not everything using `?`can be boolean, if we don't go the `length-of`route too ...}
    sent: "2017-04-04T06:09:31.872Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e338848e4b63533d93b3b9"
    text: "Yes!"
    sent: "2017-04-04T06:09:08.732Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33871f22385553d0810ac"
    text: {Yes, that is exactly what I thought by `context-of`. In R3, Rebol started to replace `?`function, which did not return boolean, no?}
    sent: "2017-04-04T06:08:49.018Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e338698bb56c2d11725323"
    text: {@pekr you mean something like:^/```^/>> o: context [dog: "Alík"]^/== make object! [^/    dog: "Alík"^/]^/>> p: context [dog: "Puňta"]^/== make object! [^/    dog: "Puňta"^/]^/>> context-of: function [word][collect [foreach value words-of system/words [all [object? get/any value find words-of get value word keep value]]]]^/== func [word /local value][collect [foreach value words-of system/wo...^/>> context-of 'dog^/== [p o]^/```}
    sent: "2017-04-04T06:08:41.930Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3384d8fcce56b20c9dbf1"
    text: {@gltewalt There is no rule in Redbol stating that word with a tail `?`, referring to a function, has to return a logic! value (remember functions have no strict concept of "name"). See `length?` and `index?` for example.}
    sent: "2017-04-04T06:08:13.029Z"
    editedAt: "2017-04-04T06:09:19.863Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e338028fcce56b20c9da53"
    text: {I'm trying to gather my thoughts about it... but for right now `context?` returning `true` or `false` would be less confusing to me}
    sent: "2017-04-04T06:06:58.261Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e3376e4cb8d0917357e5b2"
    text: {It doesn't make sense to me, nor is that a planned feature. `context?` is covering the needs already.}
    sent: "2017-04-04T06:04:30.622Z"
    editedAt: "2017-04-04T06:05:08.147Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e337690e4137042adf3f5f"
    text: "If so, we could create a Wish on Github ..."
    sent: "2017-04-04T06:04:25.666Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e337454cb8d0917357e511"
    text: {Yes, I know, but it was suggested in one of discussions IIRC. I thought it might be a possibility for the future. That is why I wrote "which we don't have". Not sure if it is planned, nor if it makes sense to have one ... }
    sent: "2017-04-04T06:03:49.763Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e336d268bee3091f0a2163"
    text: {*`context-of` reflector* There is no such reflector in Red nor Rebol, so we can't miss it.}
    sent: "2017-04-04T06:01:54.087Z"
    editedAt: "2017-04-04T06:03:30.263Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e336a58bb56c2d11724c8e"
    text: {It returns word's context. When that context is referred in some word and you evaluate that word, it also returns context. Both approaches return same value.}
    sent: "2017-04-04T06:01:09.542Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3368b0e4137042adf3bf3"
    text: {Maybe what is he looking for something like `context-of`reflector, which we don't have. We would have two options here - 1) `context-of my-word`returning the context, where `my-word`is bound 2) `context-of 'my-word` (or using /any) returning block of context, where `my-word`is used. Well, not sure it makes sense though .... }
    sent: "2017-04-04T06:00:43.896Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e33654f22385553d080950"
    text: {@gltewalt Aren't you using `context?` instead of `in`?}
    sent: "2017-04-04T05:59:48.977Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e33637b52518ed4dd91b53"
    text: {I don't see how `context?` currently tells anything useful}
    sent: "2017-04-04T05:59:19.753Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e3360468bee3091f0a1e27"
    text: "Thats what i wanted from context?"
    sent: "2017-04-04T05:58:28.560Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e335eaad849bcf424c1b55"
    text: {@gltewalt You can check if some word point to a context:^/```^/>> o: context [dog: "haf"]^/== make object! [^/    dog: "haf"^/]^/>> b: reduce [in o 'dog]^/== [dog]^/>> equal? o context? b/1^/== true^/```}
    sent: "2017-04-04T05:58:02.151Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e335744cb8d0917357dfaf"
    text: "@dockimbel hehe, okay :)"
    sent: "2017-04-04T05:56:04.556Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58e33549ad849bcf424c180d"
    text: {@rebolek We posted over each other, I leave it to you. ;-)}
    sent: "2017-04-04T05:55:21.107Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e335070e4137042adf364b"
    text: {What should the following code return then?^/```lisp^/list: reduce [context [dog: "whim"]]^/context? list/1^/```}
    sent: "2017-04-04T05:54:15.355Z"
    editedAt: "2017-04-04T05:54:19.316Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e334ffad849bcf424c1772"
    text: "What word(s) should `context?` return here?"
    sent: "2017-04-04T05:54:07.656Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e334f07ea420cc42368238"
    text: {@gltewalt No, it can't:^/```^/>> b: reduce [context [w: 1] context [w: 2]]^/== [make object! [^/    w: 1^/] make object! [^/    w: 2^/]]^/```^/}
    sent: "2017-04-04T05:53:52.606Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e334b468bee3091f0a1a56"
    text: {@gltewalt How can a context know which word point to it, if context are anonymous (and can have many or no words pointing to them)?}
    sent: "2017-04-04T05:52:52.424Z"
    editedAt: "2017-04-04T05:54:41.488Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e334a88e4b63533d93a377"
    text: "for dog"
    sent: "2017-04-04T05:52:40.235Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e3349f68bee3091f0a1a3a"
    text: "or a block of words. [global a b c]"
    sent: "2017-04-04T05:52:31.017Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e334598bb56c2d11724396"
    text: {But I mean - context? word should return the word that points to the context}
    sent: "2017-04-04T05:51:21.489Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33419408f90be66873eee"
    text: "I was just going to say that"
    sent: "2017-04-04T05:50:17.641Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e33408f22385553d080265"
    text: {@gltewalt All values are anonymous in Redbol:^/```lisp^/foo: bar: func [][print "what's my name?"]^/a: b: c: context [dog: "wimper"]^/list: reduce [does [print "what's my name"] context [dog: "wimper"]]^/```}
    sent: "2017-04-04T05:50:00.584Z"
    editedAt: "2017-04-04T05:50:50.814Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e333c068bee3091f0a1696"
    text: {```^/>> b: ["asdf"]^/== ["asdf"]^/>> s: b/1^/== "asdf"^/>> unset 's^/>> s^/*** Script Error: s has no value^/*** Where: catch^/>> b^/== ["asdf"]^/```^/}
    sent: "2017-04-04T05:48:48.533Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3339368bee3091f0a162c"
    text: {Because that's exactly what you are doing - referring. The value exists independently of words that are referring to it.}
    sent: "2017-04-04T05:48:03.254Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e333347ea420cc42367d0a"
    text: {You can refer to a context. Set value from one context to global context.  I'm not seeing how it is anonymous?^/```^/>> dog: b/dog^/== "wimper"^/>> dog^/== "wimper"^/```}
    sent: "2017-04-04T05:46:28.800Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e332de08c00c092a471d3e"
    text: {No, it is. It is just that path `system/words` has a value of an anonymous context that contains word `dog` with value `"bark!"` (that value is also anonymous, btw.)}
    sent: "2017-04-04T05:45:02.773Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3321c68bee3091f0a1117"
    text: "so that isn't anonymous"
    sent: "2017-04-04T05:41:48.464Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e332124cb8d0917357d4e2"
    text: {```^/>> dog: "bark!"^/== "bark!"^/>> b: context [^/[    dog: "wimper"^/[    print system/words/dog^/[    ]^/bark!^/== make object! [^/    dog: "wimper"^/]^/```}
    sent: "2017-04-04T05:41:38.888Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e3320b0e4137042adf2bf1"
    text: "Yes?"
    sent: "2017-04-04T05:41:31.449Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e330ea8fcce56b20c9c2b4"
    text: {You can call a value out of system/words from inside a different context}
    sent: "2017-04-04T05:36:42.769Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e330c08bb56c2d11723728"
    text: "It can't, contexts are anonymous."
    sent: "2017-04-04T05:36:00.405Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e330918e4b63533d939265"
    text: {I thought the idea was to return the name of the context}
    sent: "2017-04-04T05:35:13.138Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e3306b08c00c092a47178f"
    text: "The problem is the == make object! return"
    sent: "2017-04-04T05:34:35.067Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e3304708c00c092a47170c"
    text: {See this:^/```^/>> x: context [y: 1]^/== make object! [^/    y: 1^/]^/>> b: reduce [in x 'y 'y]^/== [y y]^/>> context? b/1^/== make object! [^/    y: 1^/]^/>> context? b/2^/== make object! [^/    datatype!: datatype!^/    unset!: unset!^/    none!: none!^/    logic!: logic!^/```}
    sent: "2017-04-04T05:33:59.193Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e33030408f90be6687314f"
    text: "should be a word in b"
    sent: "2017-04-04T05:33:36.253Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e32fde0e4137042adf246e"
    text: {The important part here is **in which a word is bound**: In `context? 'dog`, `dog` is not bound in your object, it is created as new word in `system/words`.}
    sent: "2017-04-04T05:32:14.470Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e32f53408f90be66872d93"
    text: {```^/>> help context?^/^/USAGE:^/      context? word^/^/DESCRIPTION:^/      Returns the context in which a word is bound.^/      context? is of type: native!^/^/ARGUMENTS:^/     word   [any-word!]  => Word to check.^/^/```}
    sent: "2017-04-04T05:29:55.842Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e32f168e4b63533d938cb0"
    text: {```^/>> a: context [cat: "meow"]^/== make object! [^/    cat: "meow"^/]^/>> b: context [dog: "bark"]^/== make object! [^/    dog: "bark"^/]^/>> context? dog^/*** Script Error: dog has no value^/*** Where: context?^/>> context? b/dog^/*** Script Error: context? does not allow string! for its word argument^/*** Where: context?^/>> context? 'dog^/== make object! [^/    datatype!: datatype!^/    unset!: unset!^/    none!: none!^/^/```}
    sent: "2017-04-04T05:28:54.783Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e32e5e08c00c092a471127"
    text: "`context?` does not appear to work"
    sent: "2017-04-04T05:25:50.876Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e2ab0ead849bcf424a3356"
    text: "I see, interesting, thanks "
    sent: "2017-04-03T20:05:34.002Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2aab07ea420cc42348510"
    text: {@maximvl only when you evaluate value with type `error!`}
    sent: "2017-04-03T20:04:00.495Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e2aaac4cb8d0917355fd5a"
    text: "@maximvl, yes, because the console evaluates it."
    sent: "2017-04-03T20:03:56.247Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e2aa990e4137042add3cdc"
    text: "@rebolek but it fires error in console ;) ^^"
    sent: "2017-04-03T20:03:37.048Z"
    editedAt: "2017-04-03T20:03:43.184Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2aa857ea420cc423484ae"
    text: {```^/>> reduce [z 2]^/== [make error! [^/    code: none^/    type: 'math^/    id: 'zero-divide^/    arg1: none^/    arg2: none^/    arg3: none^/  ...^/>> first reduce [z 2]^/*** Math Error: attempt to divide by zero^/*** Where: /^/```}
    sent: "2017-04-03T20:03:17.965Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e2aa6e8bb56c2d117054e1"
    text: "captured error IS regular value"
    sent: "2017-04-03T20:02:54.590Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e2aa5a408f90be6685482f"
    text: "at least sometimes"
    sent: "2017-04-03T20:02:34.730Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2aa50f22385553d061552"
    text: {so the "captured" error started to behave like a regular value}
    sent: "2017-04-03T20:02:24.117Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2aa4d68bee3091f082d1c"
    text: {```^/print mold reduce [z]^/print mold reduce [z 2]^/```}
    sent: "2017-04-03T20:02:21.405Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e2aa334cb8d0917355faac"
    text: "No, it did not."
    sent: "2017-04-03T20:01:55.311Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e2a9e9f22385553d0613d2"
    text: {I mean, the error happened, got returned, but evaluator "skipped" it}
    sent: "2017-04-03T20:00:41.846Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2a9bc8bb56c2d117051a4"
    text: "exactly"
    sent: "2017-04-03T19:59:56.750Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2a9af8e4b63533d91ae88"
    text: {See this:^/```^/>> z: func [] [ 1 y [ 5 / 0 ] ]^/== func [][1 y [5 / 0]]^/>> z^/*** Math Error: attempt to divide by zero^/*** Where: /^/>> z 2^/== 2^/```}
    sent: "2017-04-03T19:59:43.735Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e2a97e0e4137042add384a"
    text: "@rebolek yes, but error still happened :D"
    sent: "2017-04-03T19:58:54.768Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2a96d7ea420cc42347c64"
    text: "No ,because first example returns `integer!`"
    sent: "2017-04-03T19:58:37.074Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e2a9698fcce56b20c7dfe7"
    text: {so we calculate it in the same way, but it just got skipped or something}
    sent: "2017-04-03T19:58:33.770Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2a9464cb8d0917355f56c"
    text: {np, but what is interesting - we don't get error in the first example}
    sent: "2017-04-03T19:57:58.229Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2a9248e4b63533d91ab8a"
    text: "Oh, sorry, I meant return value of `z`"
    sent: "2017-04-03T19:57:24.822Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e2a90fad849bcf424a28bd"
    text: "wait, `z` is a func"
    sent: "2017-04-03T19:57:03.444Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2a90508c00c092a452e8d"
    text: {By evaluating it you get "*** Math error..." in the console.}
    sent: "2017-04-03T19:56:53.788Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e2a8e5b52518ed4dd7200c"
    text: {`z` is `word!` with value of `error!`:^/```^/>> type? z^/== error!^/>> body-of z^/== [code: none type: 'math id: 'zero-divide arg1: none arg2: none arg...^/```}
    sent: "2017-04-03T19:56:21.069Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e2a8438e4b63533d91a617"
    text: {it seems that if `error!` object is not directly accessed it doesn't "explode"}
    sent: "2017-04-03T19:53:39.736Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e2a8138e4b63533d91a55f"
    text: {```^/>> z: func [] [ 1 y [ 5 / 0 ] ]^/== func [][1 y [5 / 0]]^/>> z^/*** Math Error: attempt to divide by zero^/*** Where: /^/```}
    sent: "2017-04-03T19:52:51.521Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58e2a7f28e4b63533d91a49b"
    text: {very, very interesting:^/```^/>> y: function [x] [ error? res: try x res ]^/== func [x /local res][error? res: try x res]^/>> z: func [] [ 1 y [ 5 / 0 ] 2 ]^/== func [][1 y [5 / 0] 2]^/>> z^/== 2^/```}
    sent: "2017-04-03T19:52:18.128Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e28b7a8e4b63533d911806"
    text: {Mike Parr is the primary maintainer of the site now I think. I'm sure he'd welcome help if anyone is interested. }
    sent: "2017-04-03T17:50:50.682Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e261708bb56c2d116ee658"
    text: {@Phryxe yes, indeed! What a shame :fearful:  ^/It's a work of Arie van Wingerden, thank you for pointing this out, fixed now.}
    sent: "2017-04-03T14:51:28.524Z"
    editedAt: "2017-04-03T14:51:37.901Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58e2572ead849bcf42489a08"
    text: "http://www.red-by-example.org/about.html"
    sent: "2017-04-03T14:07:42.858Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58e2550a68bee3091f068871"
    text: {I don't think **Red by Example** is by Nick, but some dutch fellow. I might be wrong ...}
    sent: "2017-04-03T13:58:34.100Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58e24d474cb8d09173543197"
    text: {If anyone wants to stick this list in red wiki or something - please do, since user-made gist ain't quite "official" and is hard to find.}
    sent: "2017-04-03T13:25:27.357Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58e24c5c68bee3091f065e02"
    text: ":muscle: "
    sent: "2017-04-03T13:21:32.988Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58e246fa0e4137042adb5363"
    text: "Ah!! Mobile.. 😔 "
    sent: "2017-04-03T12:58:34.718Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e246cf408f90be66835f70"
    text: "@metaperl "
    sent: "2017-04-03T12:57:51.972Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e24697b52518ed4dd5374f"
    text: {https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b}
    sent: "2017-04-03T12:56:55.101Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58e2468d8fcce56b20c6000a"
    text: "@9214"
    sent: "2017-04-03T12:56:45.581Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e245977ea420cc42327713"
    text: {Isnt there a list of Red resources on github? Someone with the handle "9214" posted one awhile back.}
    sent: "2017-04-03T12:52:39.713Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58e20d078e4b63533d8eaa8a"
    text: {@gltewalt I'll let @qtxie write an analysis of this issue. (*Edit* works again now for me)}
    sent: "2017-04-03T08:51:19.682Z"
    editedAt: "2017-04-03T08:51:44.397Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1dd7fad849bcf42467d15"
    text: "#2393"
    sent: "2017-04-03T05:28:31.069Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1dced8fcce56b20c437d2"
    text: {```^/>> print [print [1 + 2]]^/3^/>> print [prin [1 + 2]]^/3^/ 3^/```}
    sent: "2017-04-03T05:26:05.371Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1dca98e4b63533d8de890"
    text: {While you're here, do you have an idea on what is inserting this space into some `print` and `prin` results?^/```^/>> prin [print [1 + 2]]^/3^/ 3^/```}
    sent: "2017-04-03T05:24:57.095Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1db1d8fcce56b20c430b8"
    text: "`print` does a `form reduce`on its argument."
    sent: "2017-04-03T05:18:21.562Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1daef68bee3091f047787"
    text: {(can't fix typos in my posts anymore, EDIT option is gone for me).}
    sent: "2017-04-03T05:17:35.216Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1dad87ea420cc4230a06e"
    text: {`do` evaluate each expression it encounters and return the result of the last expression. The evaluation rule for a block is the identity (it evaluates to itself).}
    sent: "2017-04-03T05:17:12.393Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1daae0e4137042ad983bf"
    text: {strange^/```^/>> do [1 2 [1 + 2]]^/== [1 + 2]^/>> print do [1 2 [1 + 2]]^/3^/```}
    sent: "2017-04-03T05:16:30.914Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1da31ad849bcf42467343"
    text: {```^/>> do [1 2 [1 + 2]]^/== [1 + 2]^/>> do do [1 2 [1 + 2]]^/== 3^/```}
    sent: "2017-04-03T05:14:25.835Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1d95208c00c092a415314"
    text: "In other words - doesnt reduce?"
    sent: "2017-04-03T05:10:42.484Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1d8da4cb8d09173523535"
    text: "`do` doesn't do deep traversal?"
    sent: "2017-04-03T05:08:42.901Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1d7714cb8d09173523045"
    text: {Or just: ^/```lisp^/>> do/next [foo 2 3 4] 'position^/== 3^/>> position^/== [3 4]^/```}
    sent: "2017-04-03T05:02:41.070Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1d73a4cb8d09173522f97"
    text: "I see"
    sent: "2017-04-03T05:01:46.998Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1d70b8e4b63533d8dd922"
    text: "`== 3` is from evaluating `val + 1`"
    sent: "2017-04-03T05:00:59.143Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1d6bf8fcce56b20c4249f"
    text: {```lisp^/>> foo: func [val][val: val + 1]^/== func [val][val: val + 1]^/>> code: reduce [:foo 2 3 4]^/== [func [val][val: val + 1] 2 3 4]^/>> do/next code 'position^/== 3^/>> position^/== [3 4]^/```}
    sent: "2017-04-03T04:59:43.428Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1d63f68bee3091f04664e"
    text: {`[func [val] [val: val + 1]]` block contains a word followed by two blocks. When doing such block, you just invoke `func` constructing a function, which is returned as value.}
    sent: "2017-04-03T04:57:35.854Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1d5e38bb56c2d116c8fee"
    text: "Seems to behave the same"
    sent: "2017-04-03T04:56:03.772Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1d5c28e4b63533d8dd432"
    text: {Wrap like this? `do/next [func [val] [val: val + 1]] 'position`}
    sent: "2017-04-03T04:55:30.980Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1d5390e4137042ad973d7"
    text: {Moreover, `do` in Red, when applied to a function value will not fetch the arguments for it, you need to enclose the function call and its argument in a block for proper behavior. The reason for this is that `do` is fixed-arity in Red, while it's variable arity in Rebol2/3.}
    sent: "2017-04-03T04:53:13.833Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1d4d38fcce56b20c41ef5"
    text: {A function invocation is a single expression, a block can contain more than one expression.}
    sent: "2017-04-03T04:51:31.846Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1d4b968bee3091f0462fd"
    text: {Contrast with:^/```^/>> do/next [1 2 3 4] 'pos^/== 1^/>> pos^/== [2 3 4]^/>> head pos^/== [1 2 3 4]^/```}
    sent: "2017-04-03T04:51:05.760Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1d44d08c00c092a41436e"
    text: {Ok, I see how it works with a regular block now. But this is a bit confusing:^/```^/>> do/next func [val] [val: val + 1] 'position^/== func [val][val: val + 1]^/>> position^/== []^/>> head position^/== [func [val] [val: val + 1]]^/>> position^/== []^/```}
    sent: "2017-04-03T04:49:17.732Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1d0e10e4137042ad9656f"
    text: {@gltewalt No documentation for it yet. It works the same as in Rebol2, it differs only in how values are returned:^/* in Rebol2, a block is returned with the result of the consumed expression, and a reference to the next one.^/* in Red/Rebol3, the result of the consumed expression is returned, and the reference to the next one is referred by the argument word.}
    sent: "2017-04-03T04:34:41.065Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1d0517ea420cc42307d74"
    text: {```^/>> do/next "1 2 3 4" 'x^/== 1^/>> x^/== [2 3 4]^/>> do/next "1 + 2" 'y^/== 3^/>> y^/== []^/```}
    sent: "2017-04-03T04:32:17.361Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1d03dad849bcf424651b4"
    text: {@dockimbel  I don't understand it. Is there Red documentation for it?}
    sent: "2017-04-03T04:31:57.685Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1ce5368bee3091f045202"
    text: {@gltewalt `do/next` in Red uses the better approach from Rebol3 to avoid creation of an extra block for holding both the return value and reference to next expression.}
    sent: "2017-04-03T04:23:47.215Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1cdcbf22385553d0230d6"
    text: {@fergus4 Hi Alan, nice to see you here! You could do that if PhoneGap has a FFI.}
    sent: "2017-04-03T04:21:31.916Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1cd3f8e4b63533d8dbb7c"
    text: {@maximvl Red uses internally `LF` and conforms to the platform standard when doing I/O, so it outputs `CRLF` on Windows, and `LF` on other platforms.}
    sent: "2017-04-03T04:19:11.601Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e1cc768fcce56b20c4069c"
    text: {```^/Rebol^//next -- Do next expression only.  Return block with result and new position.^/^/Red^/ /next  => Do next expression only, return it, update block word.^/     position   [word!]  => Word updated with new block position.^/```}
    sent: "2017-04-03T04:15:50.921Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e1cc0cad849bcf4246442c"
    text: {`do/next` doesn't seem to work in the way that it is explained in the Rebol 2 guide}
    sent: "2017-04-03T04:14:04.049Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e15be18fcce56b20c2a862"
    text: {Can it be used for some kind of browser integration via JavaScript? I read somewhere that phonegap uses ffi to do what it does via js.}
    sent: "2017-04-02T20:15:29.475Z"
    v: 1
    author: "556af11b15522ed4b3e13239"
) #(
    id: "58e15b6608c00c092a3fc78c"
    text: "Regarding libred"
    sent: "2017-04-02T20:13:26.254Z"
    v: 1
    author: "556af11b15522ed4b3e13239"
) #(
    id: "58e0f9254cb8d091734f287f"
    text: "yeah, but it will not be around anytime soon, so"
    sent: "2017-04-02T13:14:13.650Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0f8f708c00c092a3e4e44"
    text: "good job... we need a red emacs, would be so nice"
    sent: "2017-04-02T13:13:27.541Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e0f8204cb8d091734f25c2"
    text: "I have Red working in org-mode, yay :D"
    sent: "2017-04-02T13:09:52.819Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0f8208bb56c2d11698174"
    text: "It is of course platform dependent."
    sent: "2017-04-02T13:09:52.228Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e0f7caad849bcf42434b29"
    text: {Yea, I like \n better, newline maps to my mind better than return}
    sent: "2017-04-02T13:08:26.981Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e0f7658fcce56b20c12870"
    text: "maybe it's platform dependent of course"
    sent: "2017-04-02T13:06:45.112Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58e0f754b52518ed4dd05da9"
    text: "which is `\n` :D"
    sent: "2017-04-02T13:06:28.144Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0f7308e4b63533d8abd06"
    text: {@JacobGood1 well,^/```^/#<STANDARD-CHAR {A49}>^/--------------------^/Char code: 10^/Lower cased: @0=#\Newline^/Upper cased: @0=#\Newline^/```}
    sent: "2017-04-02T13:05:52.756Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0f6f9f22385553dff5002"
    text: "CL uses #\newline"
    sent: "2017-04-02T13:04:57.467Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58e0f643bc370d964ede632b"
    text: {btw Red repl uses `\r` as a newline, while rest of the world - `\n` ;)}
    sent: "2017-04-02T13:01:55.706Z"
    editedAt: "2017-04-02T13:02:13.936Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0ee088fcce56b20c10772"
    text: "it can handle escape codes & stuff"
    sent: "2017-04-02T12:26:48.329Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0edda7ea420cc422d76dc"
    text: {I was able to get nice output with `ansi-term` emacs emulator}
    sent: "2017-04-02T12:26:02.744Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0ed4d4cb8d091734efce5"
    text: {I was using Ruby's pty (pseudo-terminal) to run code snippets from files and capture the console output. (This was before ```call``` was introduced). It worked in 2014 \but stopped working sometime ago. #1186}
    sent: "2017-04-02T12:23:41.605Z"
    editedAt: "2017-04-02T12:26:17.118Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58e0de34f22385553dfeed66"
    text: {IIRC, @PeterWAWood reported similar issues with calling Red programs from Ruby, he might have more info about that.}
    sent: "2017-04-02T11:19:16.769Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0db4a8e4b63533d8a59c5"
    text: "I'll dig into this"
    sent: "2017-04-02T11:06:50.353Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0dafdbc370d964ede025a"
    text: {So you get ANSI escape codes, not sure if you need to change some settings in Emacs or if we need to do something in the console (@qtxie might have an idea).}
    sent: "2017-04-02T11:05:33.226Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0dafbb52518ed4dd0007e"
    text: {`make-comint-in-buffer` runs program and redirects IO to the process and back}
    sent: "2017-04-02T11:05:31.438Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0da8e7ea420cc422d2fc7"
    text: "http://i.imgur.com/z9tS7vA.png"
    sent: "2017-04-02T11:03:42.356Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0da7e8bb56c2d11691da3"
    text: ""
    sent: "2017-04-02T11:03:26.435Z"
    editedAt: "2017-04-02T11:03:32.962Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0da4d8e4b63533d8a5439"
    text: "let me show you a screenshot"
    sent: "2017-04-02T11:02:37.597Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0da400e4137042ad60140"
    text: "Using the console binary?"
    sent: "2017-04-02T11:02:24.428Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0da2c7ea420cc422d2edb"
    text: "this is what I get inside Emacs buffer"
    sent: "2017-04-02T11:02:04.284Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0da1fad849bcf4242dce6"
    text: "What it that?"
    sent: "2017-04-02T11:01:51.065Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0da0ebc370d964eddfd10"
    text: {This is how it looks now =\^/^/```^/--== Red 0.6.2 ==-- ^/Type HELP for starting information. ^/^/u001b[3C^/5 + 5^/u001b[8Cprint "hi"^/u001b[18C^/1^/u001b[19C^/```}
    sent: "2017-04-02T11:01:34.695Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0d9777ea420cc422d2c1a"
    text: {@maximvl `red` is only a wrapper for our toolchain, which acts as a proxy to the console, what you really want is the console executable. So just use the console binary from the Red cache folder, or re-compile one, or use a shell script to wrap `red` executable. (`python` is equivalent to our console, not to `red`, which is the toolchain).}
    sent: "2017-04-02T10:59:03.241Z"
    editedAt: "2017-04-02T11:01:01.679Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0d95f08c00c092a3dda7e"
    text: "if I change `red` for `python` it starts fine"
    sent: "2017-04-02T10:58:39.794Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0d90d408f90be667e21a8"
    text: "any idea what can be the reason?"
    sent: "2017-04-02T10:57:17.961Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0d9030e4137042ad5fced"
    text: {@dockimbel I'm trying to make interactive Red session for Emacs, but when I run the command I get:^/```^/** Script Error: Invalid compressed data - problem: -3^/** Near: script: decapsulate ^/if none? script^/^/Process *red* finished^/```}
    sent: "2017-04-02T10:57:07.546Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0d6517ea420cc422d2129"
    text: {for now I can do^/```^/echo "print 5 + 5 q" | red62 | tail -n '+4'^/10^/```^/:D}
    sent: "2017-04-02T10:45:37.140Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0d42df22385553dfecb16"
    text: {@maximvl Sorry, I misclicked on "delete" on my last message...  I've added an entry on our [Trello](https://trello.com/c/Fmq7wsLz/147-0-6-3-macos-gui-support) board for that.}
    sent: "2017-04-02T10:36:29.089Z"
    editedAt: "2017-04-02T10:36:58.935Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0d3f04cb8d091734ea13b"
    text: "ok, I created an issue #2531"
    sent: "2017-04-02T10:35:28.719Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0d3e2408f90be667e1277"
    text: {@dockimbel is there any document describing Red/System runtime standard library?}
    sent: "2017-04-02T10:35:14.948Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "58e0d34c08c00c092a3dc564"
    text: {@dockimbel I imagine it's not hard to add, could we have it in 0.6.3?}
    sent: "2017-04-02T10:32:44.026Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0cff57ea420cc422d0cc8"
    text: "@maximvl Not yet."
    sent: "2017-04-02T10:18:29.165Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0cd177ea420cc422d03de"
    text: {like `red -e "print 5 + 5"` ?}
    sent: "2017-04-02T10:06:15.474Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0cd0c408f90be667dfb40"
    text: {is there a way to execute arbitrary string directly from command line?}
    sent: "2017-04-02T10:06:04.398Z"
    editedAt: "2017-04-02T10:07:14.982Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b6068fcce56b20c05397"
    text: {something like^/```^/>> my-value?: func ['x] [not unset? get/any x]^/== func ['x][not unset? get/any x]^/>> my-value? x^/== false^/```}
    sent: "2017-04-02T08:27:50.627Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b5ba8fcce56b20c05224"
    text: {@maximvl^/> btw `help in` is not descriptive at all :D^/^/The docstrings are missing for `in` native.}
    sent: "2017-04-02T08:26:34.597Z"
    editedAt: "2017-04-02T08:26:41.892Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b535408f90be667daaf7"
    text: {@maximvl Ah, you're right, overlooked it. I should not reply to questions while writing some documentation. ;-)}
    sent: "2017-04-02T08:24:21.084Z"
    editedAt: "2017-04-02T08:24:57.881Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b504408f90be667daa4c"
    text: {looks like `unset?` works with values while `value?` works with words}
    sent: "2017-04-02T08:23:32.268Z"
    editedAt: "2017-04-02T08:24:09.253Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b4b0f22385553dfe6365"
    text: {@dockimbel doesn't seem so:^/```^/>> x^/*** Script Error: x has no value^/*** Where: catch^/>> value? 'x^/== false^/>> unset? 'x^/== false^/>> unset? :x^/== true^/>> value? :x^/*** Script Error: value? does not allow unset! for its value argument^/*** Where: value?^/```}
    sent: "2017-04-02T08:22:08.426Z"
    editedAt: "2017-04-02T08:22:42.362Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b3eb08c00c092a3d5f63"
    text: "@maximvl Just logical opposites."
    sent: "2017-04-02T08:18:51.192Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b398408f90be667da51d"
    text: {@dockimbel what is the difference between `unset?` and `value?`?}
    sent: "2017-04-02T08:17:28.453Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b36cad849bcf424262b8"
    text: {while^/```^/>> unset? system/words/x^/== true^/```}
    sent: "2017-04-02T08:16:44.492Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b358bc370d964edd7839"
    text: {@maximvl `'x -> x` which is a `word!`, so the `false` is correct.}
    sent: "2017-04-02T08:16:24.601Z"
    editedAt: "2017-04-02T08:16:34.474Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b3348bb56c2d11689cab"
    text: "@meijeru Yes, I think it should."
    sent: "2017-04-02T08:15:48.683Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b331ad849bcf42426241"
    text: {```^/>> unset? 'x^/== false^/>> x^/*** Script Error: x has no value^/*** Where: catch^/```}
    sent: "2017-04-02T08:15:45.827Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b313ad849bcf424261e5"
    text: {@maximvl On your previous question: `o/:word:` does not give an error in my version Red 0.6.2 - 27-Mar-2017/20:46:55+2:00 (W10)}
    sent: "2017-04-02T08:15:15.814Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58e0b30d8e4b63533d89d8a8"
    text: "in is only usable in objects?"
    sent: "2017-04-02T08:15:09.781Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e0b2e48bb56c2d11689bc4"
    text: {@maximvl A quick test shows that Rebol2 works the same.}
    sent: "2017-04-02T08:14:28.404Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b2bf0e4137042ad57a5a"
    text: "I'll create an issue"
    sent: "2017-04-02T08:13:51.404Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b28508c00c092a3d5afb"
    text: {@maximvl Looks like a  side-effect of the implementation, I guess `system/words/` prefix uses internally the `get-word` semantics. We should probably consider that a bug.}
    sent: "2017-04-02T08:12:53.020Z"
    editedAt: "2017-04-02T08:13:25.133Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b236bc370d964edd7535"
    text: {`none!` in Redbol is significant, you don't want to hide it.}
    sent: "2017-04-02T08:11:34.811Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b2330e4137042ad5788d"
    text: {@dockimbel but why `system/words/x` is not an error here?^/```^/>> load "x"^/== x^/>> system/words/x^/>> x^/*** Script Error: x has no value^/*** Where: catch^/```}
    sent: "2017-04-02T08:11:31.844Z"
    editedAt: "2017-04-02T08:11:45.334Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b1c808c00c092a3d585c"
    text: {@maximvl Then Python's `None` is our `unset!`. ;-)}
    sent: "2017-04-02T08:09:44.158Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b1b20e4137042ad5772a"
    text: {btw, Python uses `None` and it doesn't print it as a result}
    sent: "2017-04-02T08:09:22.384Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58e0b17f0e4137042ad576cb"
    text: {@gltewalt It could, but in the console:^/```lisp^/>> print "hello"^/hello^/>> ^/```^/is nicer than:^/```lisp^/>> print "hello"^/hello^/== none^/>>^/```^/(There are other cases where an extra `== none` would be confusing, like `help`).}
    sent: "2017-04-02T08:08:31.044Z"
    editedAt: "2017-04-02T08:08:50.246Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b150f22385553dfe59a8"
    text: {@gltewalt I guess `unset` is used to show that there is no value at all, while `none` is a valid value :)}
    sent: "2017-04-02T08:07:44.492Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b10d4cb8d091734e37f9"
    text: "btw `help in` is not descriptive at all :D"
    sent: "2017-04-02T08:06:37.856Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b107f22385553dfe58a1"
    text: "Couldn't print return none  ?"
    sent: "2017-04-02T08:06:31.529Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e0b0fcf22385553dfe5888"
    text: "@maximvl needs to get familiar with `in`"
    status: true
    sent: "2017-04-02T08:06:20.670Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b0e48bb56c2d1168962d"
    text: "nice, thanks"
    sent: "2017-04-02T08:05:56.911Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b0ce08c00c092a3d560e"
    text: "`set/any in o :word`"
    sent: "2017-04-02T08:05:34.193Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b0b8bc370d964edd70fc"
    text: {It seems to be working in the latest version, though, I am not sure if we'll keep that behavior or not.}
    sent: "2017-04-02T08:05:12.408Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b0b10e4137042ad574ec"
    text: {@dockimbel which one is preferred then? `set 'o/:word` or `o/(word):` ?}
    sent: "2017-04-02T08:05:05.456Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0b02c0e4137042ad571e8"
    text: {@maximvl It shouldn't, I would need to check if the implementation allows that or not.}
    sent: "2017-04-02T08:02:52.044Z"
    editedAt: "2017-04-02T08:03:30.931Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0b01e7ea420cc422ca4dc"
    text: {@dockimbel btw, it is possible to use a word in a path to get it, like `word: 'x o/:word`, but is it possible to do the same to set it? `o/:word:` gives error}
    sent: "2017-04-02T08:02:38.385Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0af7c08c00c092a3d51f6"
    text: {@gltewalt Because in Redbol, every valid expression returns a value. There are not such thing as statements. Though in some cases, you want to "ignore" the return value, as if it did not exist (console output, or just assignment prevention), that is where `unset!` type comes handy.}
    sent: "2017-04-02T07:59:56.159Z"
    editedAt: "2017-04-02T08:02:05.924Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0af558e4b63533d89cd75"
    text: "Why does print return an unset! ?"
    sent: "2017-04-02T07:59:17.188Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58e0af2e8e4b63533d89ccb7"
    text: {@maximvl Yes, but you would need then to escape properly the setting/getting of words referring to such value (`set/any` for setting, get-word for getting or `get/any`).}
    sent: "2017-04-02T07:58:38.727Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0af1608c00c092a3d4ef7"
    text: "ok, `:ret` should work, thanks! :)"
    sent: "2017-04-02T07:58:14.118Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0aec00e4137042ad56d53"
    text: {@dockimbel can I also propagate `unset!` value as return from my function?}
    sent: "2017-04-02T07:56:48.683Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0aeacbc370d964edd68e4"
    text: "@dockimbel hm, I see"
    sent: "2017-04-02T07:56:28.050Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e0ae2b7ea420cc422c9f61"
    text: {@maximvl A set-word cannot be set to an `unset!` value. `print` is returning an `unset!` value, so you need to use the escape mechanism for setting such value: `set/any 'ret do body`.}
    sent: "2017-04-02T07:54:19.847Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e0add1b52518ed4dcf6ebe"
    text: {what's wrong here? I don't get it:^/```^/>> myfun: func [body /local ret] [ret: do body]^/== func [body /local ret][ret: do body]^/>> myfun [print "test"]^/test^/*** Script Error: ret: needs a value^/*** Where: ret^/```}
    sent: "2017-04-02T07:52:49.599Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dff423ad849bcf4240317e"
    text: "OK, understood, thanks :-)"
    sent: "2017-04-01T18:40:35.464Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58dff330f22385553dfc1a55"
    text: {That is, it effectively finds the difference between doing your code, and doing an empty block.}
    sent: "2017-04-01T18:36:32.202Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dff30508c00c092a3b11f8"
    text: {@pekr, the baseline part accounts for the overhead of `do`, since you may specify a high `count`.}
    sent: "2017-04-01T18:35:49.360Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dff28a0e4137042ad32e86"
    text: {The condition and restart system of CL is great, more good stuff to rip from CL}
    sent: "2017-04-01T18:33:46.707Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58dff20b08c00c092a3b0cea"
    text: {Sorry for an uneducated question, but - what is there a baseline part? I mean - first t: assignment?}
    sent: "2017-04-01T18:31:39.727Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58dfe806bc370d964edaf9d6"
    text: {As we see people do stuff like this in Red, it shows how powerful the language design is, and because it works the way it does, it really is a great language construction toolkit, because you can emulate so many other behaviors with it.}
    sent: "2017-04-01T17:48:54.378Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfe7a9ad849bcf424003a8"
    text: {:point_up: [April 1, 2017 5:33 AM](https://gitter.im/red/help?at=58df900b8e4b63533d862a03) @maximvl ,wow! That will take me some time to digest. Very cool.}
    sent: "2017-04-01T17:47:21.701Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dfe69e0e4137042ad2ffb7"
    text: {@dander, timing func:^/```^/time-it: func [block /count ct /local t baseline][^/^-ct: any [ct 1]^/^-t: now/time/precise^/^-loop ct [do []]^/^-baseline: now/time/precise - t^/^-t: now/time/precise^/^-loop ct [do block]^/^-now/time/precise - t - baseline^/]^/```}
    sent: "2017-04-01T17:42:54.039Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58df9767b52518ed4dcc03fd"
    text: {@maximvl Thanks, looks interesting, good food for thought (another thank for all the comments).}
    sent: "2017-04-01T12:04:55.616Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df90b30e4137042ad1c33a"
    text: {in fact - this is what CL debugger does, all system functions raise exceptions using this standard approach making both user and system exceptions play nicely together with system debugging capabilities and allowing users write their own (this is what SLIME remote debugger does)}
    sent: "2017-04-01T11:36:19.468Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df900b8e4b63533d862a03"
    text: {bonus of this approach: it's incredibly easy to add a debugger, stack of current restarts is available they should have a human-readable description of what each of them does and the error itself should be descriptive regarding why it happened }
    sent: "2017-04-01T11:33:31.536Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df8a7c8e4b63533d861a87"
    text: {I tried to do my best commenting, though this technique is not easy to understand, feel free to ask me any details}
    sent: "2017-04-01T11:09:48.817Z"
    editedAt: "2017-04-01T11:13:11.456Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df89b18fcce56b20bc9ac2"
    text: {and both stacks should be thread-local when we get threads/processes}
    sent: "2017-04-01T11:06:25.460Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df899d4cb8d091734a8e2b"
    text: {taking into account that it uses custom errors and throw functions one may consider it complete}
    sent: "2017-04-01T11:06:05.433Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df88ef408f90be6679f4b5"
    text: {@dockimbel @greggirwin  here is CL condition-restart system implementation with usage examples: https://gist.github.com/maximvl/dcb8c4e9ef5d4db91f7a6b52da9b9cee}
    sent: "2017-04-01T11:03:11.596Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df83f608c00c092a397ead"
    text: {@dander In Rebol2, there was an explicit `disarm` function for that usage, though, in Red and Rebol3 (IIRC), it's disarmed by default when caught, so you can safely manipulate it, and eventually re-arm it.}
    sent: "2017-04-01T10:41:58.054Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df836cb52518ed4dcbc468"
    text: {@dander For your exception example, when you use `try`, you are catching and disarming the error exception. If you want to throw it up again (re-arm it), you need to use `do` on the error value: `do e`. So, injecting `do` in your `f` function should give what you expected (as I understand it):^/```lisp^/>> f: func [code][either error? e: try code [do e] [2]]^/== func [code][either error? e: try code [do e] [2]]^/>> g^/test test^/```}
    sent: "2017-04-01T10:39:40.599Z"
    editedAt: "2017-04-01T10:40:14.253Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df822eb52518ed4dcbc17b"
    text: {@dander @rebolek About `append copy digit-nz #"0"`, it looks odd indeed, and I don't see any reason why `union` or `charset` is not used instead. What I remember clearly though, is that I wrote that JSON code during a very shaky 3h flight, my laptop was jumping on my knees, so that might also explain the missing `F` in `hexa` definition. :-)}
    sent: "2017-04-01T10:34:22.282Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df815dad849bcf423e8a31"
    text: {@greggirwin `parse` is reentrant, yes, you can call it recursively.}
    sent: "2017-04-01T10:30:53.275Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df80078e4b63533d85faa7"
    text: {You can also better see that's three expressions using a reduction: ^/```lisp^/>> reduce [a: 1 2 3]^/== [1 2 3]^/```}
    sent: "2017-04-01T10:25:11.009Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df7f7a8e4b63533d85f99a"
    text: {Keep in mind that the command-line you type is loaded as a block of values, which are then evaluated.}
    sent: "2017-04-01T10:22:50.972Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df7f54b52518ed4dcbb79b"
    text: "`>> a: 1 2 3` is equivalent to `do [a: 1 2 3]`."
    sent: "2017-04-01T10:22:12.548Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df7f518bb56c2d1164ccff"
    text: "I see"
    sent: "2017-04-01T10:22:09.661Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df7f4108c00c092a396f18"
    text: {@maximvl `a: 1 2 3` is not an expression, it's three expressions: `a: 1`, `2`, `3`.}
    sent: "2017-04-01T10:21:53.849Z"
    editedAt: "2017-04-01T10:23:17.497Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df7ef5bc370d964ed98574"
    text: "@dockimbel not `1 2 3`?"
    sent: "2017-04-01T10:20:37.011Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df7ed1b52518ed4dcbb53e"
    text: {@maximvl The expression after `a:` is `1`. Once `a` is set, the interpreter fetches the next expression: `2`, which evaluates to `2`, then `3`  which evaluates to `3`. That being the last result of the list of expressions, it is then returned.}
    sent: "2017-04-01T10:20:01.271Z"
    editedAt: "2017-04-01T10:21:29.259Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58df7e508e4b63533d85f666"
    text: {so, set-word gets closest value instead of a result of expression after it}
    sent: "2017-04-01T10:17:52.605Z"
    editedAt: "2017-04-01T10:18:24.080Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df7e178fcce56b20bc7336"
    text: {it's also interesting how `set-word`s get their value:^/```^/>> 1 2 3^/== 3^/>> a: 1 2 3^/== 3^/>> a^/== 1^/```}
    sent: "2017-04-01T10:16:55.087Z"
    editedAt: "2017-04-01T10:17:21.482Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df7515f22385553dfa4b6e"
    text: {Red exceptions/errors semantics is also quite different from what I'm used to:^/```^/>> probe :f^/func [code][either error? e: try code [e] [2]]^/== func [code][either error? e: try code [e] [2]]^/>> g: func [] [ error? try [return f [5 / 0]] print "test test"]^/== func [][error? try [return f [5 / 0]] print "test test"]^/>> g^/*** Math Error: attempt to divide by zero^/*** Where: /^/```}
    sent: "2017-04-01T09:38:29.620Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58df5e57b52518ed4dcb3c0d"
    text: "cool, thanks!"
    sent: "2017-04-01T08:01:27.991Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58df5def8e4b63533d858cc4"
    text: {Just a simple function, @greggirwin posted much better one recently:^/```^/>> dt: function [code] [t: now/time/precise do code now/time/precise - t]^/== func [code /local t][t: now/time/precise do code now/time/precise ...^/>> dt [loop 1000000 [charset [#"0" - #"9"]]]^/== 0:00:00.616000001^/```}
    sent: "2017-04-01T07:59:43.507Z"
    editedAt: "2017-04-01T07:59:54.211Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58df5dad8e4b63533d858c25"
    text: {I like that it seems to be the clearest form for getting the meaning across. By the way, what do you use to time things? I can't seem to figure it out...}
    sent: "2017-04-01T07:58:37.252Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58df5ca4b52518ed4dcb365b"
    text: "Shorter and faster, I am going to change it :D"
    sent: "2017-04-01T07:54:12.283Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58df5c660e4137042ad110f4"
    text: "did I surprise you?"
    sent: "2017-04-01T07:53:10.800Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58df5c1b08c00c092a38ef74"
    text: "!"
    sent: "2017-04-01T07:51:55.806Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58df5c01ad849bcf423e0806"
    text: {@rebolek that's funny :smile: maybe I just haven't gotten used to seeing copy everywhere. How about `charset [#"0" - #"9"]` that's even shorter}
    sent: "2017-04-01T07:51:29.199Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58df5a938fcce56b20bbfd2c"
    text: {@dander so my theory is that `append copy digit #"0"` is one character shorter than `union digit charset "0"` :) Also, it seems to be bit faster (around 15%).}
    sent: "2017-04-01T07:45:23.406Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58df58ff4cb8d0917349ebe0"
    text: "@9214 I think you did it just fine :)"
    sent: "2017-04-01T07:38:39.037Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58df581a408f90be66794d31"
    text: {eh, dunno how to insert issue number from github :(}
    sent: "2017-04-01T07:34:50.176Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58df57f28fcce56b20bbf592"
    text: "@gltewalt #2393"
    sent: "2017-04-01T07:34:10.321Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58df3f5cb52518ed4dcad945"
    text: "That should be a cleaned version but maybe not"
    sent: "2017-04-01T05:49:16.316Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58df3c2a8fcce56b20bba306"
    text: {Is that from a build where we're tinkering with the unset stuff? Mine don't do that here.}
    sent: "2017-04-01T05:35:38.885Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58df21b50e4137042ad05731"
    text: {Wish I knew what this weirdness was about^/```^/>> print [1 2 print 5]^/5^/>> print [1 2 print 5]^/5^/>> print [1 2 prin 5]^/5^/1 2^/>> prin [1 2 print 5]^/5^/1 2^/```}
    sent: "2017-04-01T03:42:45.335Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dee0ec0e4137042acf90cf"
    text: {@dander I fixed the missing `F` in my repo, I'll take a look at the `append` vs `union` in the morning.}
    sent: "2017-03-31T23:06:20.027Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dee0558fcce56b20ba91fb"
    text: {@rebolek Ok, cool. In general, that code looks like a nice example for how to do something moderately complex with parse. At least I found it pretty easy to read through, but it's still hard for me to tell sometimes which things are intentional or not}
    sent: "2017-03-31T23:03:49.820Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58dedb19408f90be6677d8ea"
    text: {As for hexa being only a-e, this is almost certainly a bug.}
    sent: "2017-03-31T22:41:29.665Z"
    editedAt: "2017-03-31T22:42:07.469Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dedaeb8e4b63533d83fc9d"
    text: {@dander I am not sure, I think there is no reason for it, maybe `union` wasn't implemented when @dockimbel wrote [original version](https://gist.github.com/dockimbel/71f48be60273d9c8d609)? I've just fixed some problems I found when using it with JSONs from GitHub and Gitter, I wasn't doing much rewriting in other areas of code.}
    sent: "2017-03-31T22:40:43.870Z"
    editedAt: "2017-03-31T22:41:52.685Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ded95ff22385553df8619b"
    text: {@rebolek I was studying the Json source you posted in red/red, and was wondering about [these lines](https://github.com/rebolek/gritter/blob/tools/json.red#L12-L14)^/is there a reason for doing: `append copy digit-nz #"0"` over something like `union digit charset #"0"` (since the other rules are using union)? Or using the charset range syntax? Does it prevent extra allocations or something?^/Also, why doesn't `hexa` contain 'F'?}
    sent: "2017-03-31T22:34:07.888Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58de8ad2b402a53211d0e7db"
    text: {The blog entry on parse talks about what each event means. }
    sent: "2017-03-31T16:58:58.337Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58de896ab402a53211d0e14d"
    text: {The callback gives you info about the state of the internal parse state machine, yes. Like a hook.}
    sent: "2017-03-31T16:52:58.180Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58de87d708c00c092a35ebf9"
    text: {I like how I can go from 0 to "hmm.. so that's kinda how this works" in a few seconds in redbol :smile: }
    sent: "2017-03-31T16:46:15.606Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58de879bb52518ed4dc8430b"
    text: {So it's like a state machine? ^/```^/>> third spec-of :on-parse-event^/== {Trace events: push, pop, fetch, match, iterate, paren, end}^/```}
    sent: "2017-03-31T16:45:15.370Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58de871c408f90be66765c33"
    text: {`parse-trace` is a useful helper utility covering most of my parse debugging. I think I've not advanced enough..  `source parse-trace` looks simple. `:on-parse-event` however..}
    sent: "2017-03-31T16:43:08.634Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58de7b7e408f90be66761f0b"
    text: {@pekr, normal parse can be used for streamed data. Parse callbacks give you information about the parsing process itself, so you can see where you are in your rules and where the input stream is pointing, without having to build it in. We can also use it for debugging, catching the `push/pop/fetch` events, rather than adding tracing code to every rule. Debugging large parsers on large inputs can be a pain, and this will help with that a lot.}
    sent: "2017-03-31T15:53:34.654Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58de7a99b402a53211d097b7"
    text: {Thanks for the ideas @dockimbel, I'll have to soak them up a bit before they're clear in my head. So `parse` is safely reentrant?}
    sent: "2017-03-31T15:49:45.654Z"
    editedAt: "2017-03-31T15:55:16.629Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58de4e4b7ea420cc42242bee"
    text: {and then rebinds all `keep` words in `body` to the function}
    sent: "2017-03-31T12:40:43.765Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58de4e37ad849bcf4239ee56"
    text: {it creates `keep` function which is pretty much a closure over `collected` block}
    sent: "2017-03-31T12:40:23.729Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58de4df10e4137042accf1cc"
    text: {source: https://github.com/red/red/blob/bbaf50b82a1157a87cb043edaa067b50c977aeaf/environment/functions.red#L696}
    sent: "2017-03-31T12:39:13.410Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58de4dceb52518ed4dc7269d"
    text: {I just realized that interesting example of context usage is the `collect` function}
    sent: "2017-03-31T12:38:38.291Z"
    editedAt: "2017-03-31T12:38:49.310Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58de4db74cb8d0917345dfb5"
    text: {we had quite a lot of discussions about contexts and scopes here}
    sent: "2017-03-31T12:38:15.958Z"
    editedAt: "2017-03-31T12:42:40.843Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58de440e08c00c092a34961e"
    text: {Sorry for stupid question, but - is parse callbak useful e.g. for streamed protocols?}
    sent: "2017-03-31T11:57:02.959Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58de428df22385553df5a198"
    text: {@greggirwin I don't think you need to exit the Parsing + saving/restoring process in order to write a GUI tool for it. You could open a View window and run a new event loop from the callback directly. If you want to make a GUI for doing step-by-step, you should make the GUI app call `parse/trace` and from the callback, update the GUI and interact with the user (looping on `do-events/no-wait` eventually).}
    sent: "2017-03-31T11:50:37.802Z"
    editedAt: "2017-03-31T11:53:40.086Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58de41e2b52518ed4dc6f446"
    text: {@greggirwin Parse callback has been poorly used/tested so far, if anyone find bugs, please fill tickets about them. That feature will grow up to be an important feature of Parse, so we need it to work flawlessly. }
    sent: "2017-03-31T11:47:46.429Z"
    editedAt: "2017-03-31T11:49:22.328Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dd26c97ea420cc421f6193"
    text: {Maybe not needed, if we use the push/pop events. Forgot about `iterate` and `paren` too.  We may have all we need.}
    sent: "2017-03-30T15:39:53.424Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dd25dd8bb56c2d115b7003"
    text: {There's a callback param called `stack`, which is the internal parse rules stack (says a comment). That could be an issue, as there's no way to save and restore that.}
    sent: "2017-03-30T15:35:57.503Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dd24e88e4b63533d7c8492"
    text: {To do it in a GUI, we could probably treat the callback params as a closure of sorts. That is, when we get a callback, we store all the state, return false to stop parsing, and a "step" is just calling `parse` again with the stored state.}
    sent: "2017-03-30T15:31:52.271Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dd2415b402a53211cad856"
    text: {Parse callback works fine in a quick test, and you can interrupt it in the console with a simple `ask/input`, to step trace.}
    sent: "2017-03-30T15:28:21.935Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dd20108e4b63533d7c6bb1"
    text: {When Red added the trace callback feature, that was key to making this easy. When I played with it early on, it didn't work for me, so I haven't pursued that. If it works now, and we come up with a nice way to step-trace (maybe just blocking in the callback would work), we could make a demo to show for 0.6.3.}
    sent: "2017-03-30T15:11:12.965Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dd1f4aad849bcf4234ebbe"
    text: {@geekyi, I used to use a tool called Visual Parse++, which was a precursor to some of the regex viz tools we see now. Something similar for `parse` would be a great example of Red's self-tooling capability. }
    sent: "2017-03-30T15:07:54.899Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dd1e858e4b63533d7c62f1"
    text: {@gltewalt, the important thing is knowing how it works, which I don't yet.}
    sent: "2017-03-30T15:04:37.331Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dcd4c1b402a53211c9635c"
    text: {```^/>> prin [:_ :_ :_ "a" :_ :_ :_ :_ "ok"]^/ a ok^/>> prin ["a" :_ :_ :_ :_ "ok"]^/a ok^/```}
    sent: "2017-03-30T09:49:53.902Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dcd45c408f90be666ec961"
    text: {@greggirwin  Adding a check for #" " in the unless block almost does it.  Maybe grab the buffer and trim the head?...^/```^/```}
    sent: "2017-03-30T09:48:12.759Z"
    editedAt: "2017-03-30T09:49:32.520Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dcb174b402a53211c8c3d7"
    text: "something like dissect would be awesome"
    sent: "2017-03-30T07:19:16.185Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dca6c38fcce56b20b0d4e8"
    text: "I'll check it out shortly driving right now"
    sent: "2017-03-30T06:33:39.860Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dca673f22385553deebcdd"
    text: {[more details](http://code.jsoftware.com/wiki/Vocabulary/Dissect)}
    sent: "2017-03-30T06:32:19.337Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dca65c0e4137042ac5bc87"
    text: {[![image.png](https://files.gitter.im/red/help/ziG0/thumb/image.png)](https://files.gitter.im/red/help/ziG0/image.png)}
    sent: "2017-03-30T06:31:56.283Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dca58aad849bcf4232b5a3"
    text: {I've not thought about animation, but j has a nice thing called dissect}
    sent: "2017-03-30T06:28:26.249Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dca4e28e4b63533d7a3d92"
    text: {I don't have a sketch, but I was thinking a Draw thing that animated flowcharts of the running code. Kind of like 9214 had drawn up to think through scoping}
    sent: "2017-03-30T06:25:38.094Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dca0e8ad849bcf4232a484"
    text: {@gltewalt how would that fancy animated vid trace work? Have a sketch? }
    sent: "2017-03-30T06:08:40.861Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dc7087ad849bcf4232110e"
    text: "Or... a fancy, animated vid-trace"
    sent: "2017-03-30T02:42:15.702Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc7071b52518ed4dbf7324"
    text: "Too bad their isn't a trace program"
    sent: "2017-03-30T02:41:53.412Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58dc70108fcce56b20b025ee"
    text: {I was compiling on Windows (7). Same error on that variable. }
    sent: "2017-03-30T02:40:16.072Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc6ef1ad849bcf42320c59"
    text: "Hmm"
    sent: "2017-03-30T02:35:29.792Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc57ad8fcce56b20afd24f"
    text: {Compiles on Windows, but if I cross compile to Linux I get:^/```^/...Target: Linux ^/^/Compiling to native code...^/*** Compilation Error: a variable is already using the same name: red/crypto/get-errno-ptr ^/*** in file: %/D/Red/crypto.reds ^/*** at line: 278 ^/```}
    sent: "2017-03-30T00:56:13.106Z"
    editedAt: "2017-03-30T00:56:31.255Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc566f8fcce56b20afcd6c"
    text: "Good to hear it is compiling"
    sent: "2017-03-30T00:50:55.787Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58dc56378bb56c2d115823ac"
    text: "I still use the -r option"
    sent: "2017-03-30T00:49:59.036Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc55f2408f90be666cfd1c"
    text: "It compiles now after pulling fresh from master"
    sent: "2017-03-30T00:48:50.775Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc55dc8fcce56b20afcbf4"
    text: {@gltewalt Did you compile using the ```-r``` option}
    sent: "2017-03-30T00:48:28.300Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58dc559e8fcce56b20afcafb"
    text: {I had to re pull. I guess something got modified in crypto.reds, even though I didn't knowingly modify it}
    sent: "2017-03-30T00:47:26.513Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc5214f22385553deda73e"
    text: {Man, I love that I can get into Red/System, make changes, and have things mostly work. Sadly, I haven't done enough there to figure this one out @gltewalt. My latest attempt was checking the last value to see if it was unset, but that didn't work either. Can't hack my through this one in spare moments.}
    sent: "2017-03-30T00:32:20.324Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc4f948fcce56b20afb6ae"
    text: "What OS?"
    sent: "2017-03-30T00:21:40.501Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc4f66b52518ed4dbf05c9"
    text: {This is what I get when I try to modify a Red/System file and compile console^/```^/Compiling to native code...^/*** Compilation Error: undefined symbol: get-errno-ptr^/*** in file: %/C/Users/Old%20Man/Desktop/My%20Changes/runtime/crypto.reds^/*** in function: red/crypto/init^/*** at line: 34^/*** near: [get-errno-ptr]^/```}
    sent: "2017-03-30T00:20:54.113Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc4df5f22385553ded9bcd"
    text: {Here's a Red  mp3 music player:  http://www.mycode4fun.co.uk/red-apps  }
    sent: "2017-03-30T00:14:45.203Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "58dc4b53408f90be666cdc09"
    text: {Wait, no, `part` is the refinement for `form`. Shouldn't glance at this while working on other things. }
    sent: "2017-03-30T00:03:31.231Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc4574ad849bcf423183a8"
    text: {Ah, no. `buf` is the output, it's `part` we want to check, I think.}
    sent: "2017-03-29T23:38:28.506Z"
    editedAt: "2017-03-29T23:39:09.690Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc397b0e4137042ac44ca9"
    text: {That's from quick digging here, not prior knowledge, so I could be missing something.}
    sent: "2017-03-29T22:47:23.877Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc39498bb56c2d1157b89b"
    text: {`prin` outputs the block, whose `form` action is called in preparation. Unset values then also get formed, and they come back as `""`. Block's `form` adds spaces between values that don't end in a whitespace char. There is just no special check for empty strings.^/```^/>> form reduce [:test]^/== ""^/>> form reduce [:test :test]^/== " "^/```^/https://github.com/red/red/blob/master/runtime/datatypes/block.reds#L635^/^/Maybe adding a check for #"^^@" (null) in the `unless` block there would do the trick. Depends on what the result of `get-char` is there.}
    sent: "2017-03-29T22:46:33.280Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc347f7ea420cc421b95e9"
    text: {```^/>> reduce ["a" :test :test :test "ok"]^/== ["a" unset unset unset "ok"]^/>> prin ["a" :test :test :test "ok"]^/a    ok^/```}
    sent: "2017-03-29T22:26:07.726Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc282fb402a53211c6db54"
    text: "there is an extra space indeed"
    sent: "2017-03-29T21:33:35.174Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dc280db52518ed4dbe79d0"
    text: {```^/>> prin ["a" :test "b"]^/a  b^/```}
    sent: "2017-03-29T21:33:01.904Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dc278aad849bcf423116d2"
    text: {Try cascading some blocks. prin[prin[... etc. ^/I'm away from computer for a bit so it will be awhile before I can get back to it}
    sent: "2017-03-29T21:30:50.345Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc26acc4ac989f3cb744ec"
    text: {@gltewalt , I don't see `prin` printing an unset as an empty string here:^/```^/>> prin "blah" prin :blah print "foo"^/blahfoo^/```}
    sent: "2017-03-29T21:27:08.324Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58dc242e4cb8d091733d1801"
    text: {print doesn't do much other than piggy-back on prin and add line feed}
    sent: "2017-03-29T21:16:30.051Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc23f38fcce56b20af1136"
    text: {prin returns unset, but I can't see how unset would be printed as an empty string - but it looks like it is. ^/Maybe when cascading them it tries to print unprintable characters?}
    sent: "2017-03-29T21:15:31.492Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc21d08e4b63533d787fca"
    text: {Wanted to poke around and perhaps figure out the print and prin anomalies of #2393 for my own education }
    sent: "2017-03-29T21:06:24.159Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc1bde8fcce56b20aeefec"
    text: {Hmm... trying to make a small change in natives.reds and it throws an error about crypto}
    sent: "2017-03-29T20:41:02.717Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc1ae7b52518ed4dbe435a"
    text: {you need Rebol SDK to compile the red binary and that's it AFAIK}
    sent: "2017-03-29T20:36:55.273Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dc1ad18bb56c2d115739f1"
    text: "@gltewalt no, I did it with `red gui-console.red`"
    sent: "2017-03-29T20:36:33.617Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dc18e808c00c092a2bade9"
    text: {Is Rebol SDK needed to be able to compile a console after making changes to to a .reds file?}
    sent: "2017-03-29T20:28:24.886Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc05870e4137042ac3652a"
    text: "No need to be sorry. Thanks again. "
    sent: "2017-03-29T19:05:43.851Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58dc04ae7ea420cc421ac754"
    text: {See here: http://www.rebol.com/docs/core23/rebolcore-15.html#section-10.2}
    sent: "2017-03-29T19:02:06.874Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dc04ab7ea420cc421ac74c"
    text: {@Phryxe Sorry, you're right, it should be in the Iterations, but isn't.}
    sent: "2017-03-29T19:02:03.366Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dc04070e4137042ac35de7"
    text: {I have bookmarked that page and many others. I can't see the min max thing there, but sometimes I feel there is a lot written between the lines. I just have to experiment more.}
    sent: "2017-03-29T18:59:19.053Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58dc02bb408f90be666bb226"
    text: {@Phryxe `parse` is too complex to fit the help in the help string. See http://www.red-lang.org/2013/11/041-introducing-parse.html for more informations.}
    sent: "2017-03-29T18:53:47.185Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dc027fad849bcf423070c9"
    text: "It's part of rule of course ..."
    sent: "2017-03-29T18:52:47.717Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58dc027e8bb56c2d1156ca2c"
    text: {It's the `min max` count the dialect supports. `1 1000` in the above example.}
    sent: "2017-03-29T18:52:46.996Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc02447ea420cc421abcef"
    text: "I don't see range in `help parse`"
    sent: "2017-03-29T18:51:48.455Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58dc009e7ea420cc421ab4ff"
    text: {`Any` and `some` are great, until they're not. Same with `to/thru` when they don't work how you first expect, but are correct. But we have options. You can set limits easily with ranges to prevent endless loops. e.g.^/```^/>> n: 0 parse "ab cd cdefg" [1 1000 [to "cd" (n: n + 1)] to end]^/== true^/>> n^/== 1000^/```}
    sent: "2017-03-29T18:44:46.814Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc0066f22385553dec5acd"
    text: "I get it, I think. Thanx, boys."
    sent: "2017-03-29T18:43:50.392Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58dc00000e4137042ac34a95"
    text: {So it finds "cd" and may have skipped a bunch of stuff to do so. Now it's right at "cd" but doesn't know that you may care if it had to skip something to get there.}
    sent: "2017-03-29T18:42:08.988Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbff74ad849bcf42306314"
    text: {It's just doing exactly what you tell it. Look for "cd", any number of times, then go to the end.}
    sent: "2017-03-29T18:39:48.880Z"
    editedAt: "2017-03-29T18:41:02.389Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbff14b52518ed4dbdbdf8"
    text: {It boils down to a Turing machine halting problem.  Or is `parse`less powerful than that? }
    sent: "2017-03-29T18:38:12.045Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dbfe83b52518ed4dbdbbad"
    text: "@greggirwin same way we did? Aka linting"
    sent: "2017-03-29T18:35:47.911Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dbfe1b4cb8d091733c6899"
    text: "Or `some`"
    sent: "2017-03-29T18:34:03.507Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dbfde608c00c092a2b2771"
    text: "Yep"
    sent: "2017-03-29T18:33:10.622Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dbfdd84cb8d091733c675e"
    text: {So, I guess, one should never use `any` before `to`?}
    sent: "2017-03-29T18:32:56.780Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58dbfc5f7ea420cc421a9da8"
    text: {The question is, how can Red know that's not what you want, this being a simple example.}
    sent: "2017-03-29T18:26:39.438Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbfc408fcce56b20ae5bf4"
    text: "Clever obfuscation of `forever`."
    sent: "2017-03-29T18:26:08.583Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbfc2d0e4137042ac3377a"
    text: {@Phryxe `to "cd"` stops before `"cd"` and `any` will trigger that rule again. And again. And...}
    sent: "2017-03-29T18:25:49.228Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dbfbeb7ea420cc421a9b22"
    text: {This hangs Red - `parse "ab cd cdefg" [any [to "cd"] to end]`. Infinite loop? The first `to` should be `thru` to make it work.}
    sent: "2017-03-29T18:24:43.429Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58dbba84ad849bcf422eed31"
    text: {@sergeantWilson I guess this will be added with the IO... now you can use something like this:^/```^/>> call/output "MOVE /Y t1.txt t3.txt" s: copy "" print s^/        1 file(s) moved.^/^/>> read %t3.txt^/== ^{^^/-=== Red Compiler 0.5.4 ===- ^^/^^/Compiling /c/dev/git/red/tests/test2.reds^/```}
    sent: "2017-03-29T13:45:40.014Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
)#(
    id: "58dbb763f22385553deadead"
    text: {In Rebol I can do this:^/rename %myscript.txt  %newscript.txt ^/and:^/delete %newscript.txt^/^/How can i achieve this with Red ?^/^/thanks.}
    sent: "2017-03-29T13:32:19.939Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "58dbb722f22385553deadd67"
    text: "Thanks for the help  @greggirwin "
    sent: "2017-03-29T13:31:14.317Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "58db4db17ea420cc421748ec"
    text: ":+1: "
    sent: "2017-03-29T06:01:21.509Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58db4cf5f22385553de9044d"
    text: {@geekyi Yes, love it, it's good SciFi and...hilarious. :smile: }
    sent: "2017-03-29T05:58:13.321Z"
    editedAt: "2017-03-29T06:01:13.834Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58db152908c00c092a270ce2"
    text: "@dockimbel ooh you watch Rick & Morty! :D"
    sent: "2017-03-29T02:00:09.339Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dae9c70e4137042abe921b"
    text: {%text-list-words.txt contains `words are fun in Red`^/```^/Red []^/^/words: load %text-list-words.txt^/^/; Because our words are words and text-list wants strings^/form-all: func [blk][forall blk [blk/1: form blk/1]  blk]^/form-all words^/^/list-cur-text: func [face "text list"] [pick face/data face/selected]^/list-cur-word: func [face "text list"] [to word! list-cur-text face]^/^/view [text-list data words [print list-cur-word face]]^/```^/}
    sent: "2017-03-28T22:55:03.752Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dae5434cb8d0917337d5a4"
    text: {Hi, Are there any examples dealing with text-list ? ^/How can I read a list of words into text-list from disk ^/and then retrieve selected ones as required ?^/thanks.}
    sent: "2017-03-28T22:35:47.102Z"
    v: 1
    author: "58be1871d73408ce4f4edc1f"
) #(
    id: "58dadd9f8e4b63533d73061f"
    text: "Don't know about license. Didn't download. "
    sent: "2017-03-28T22:03:11.532Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dadcb1b402a53211c13443"
    text: "I will see if we can get a message to Carl."
    sent: "2017-03-28T21:59:13.612Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dadca1f22385553de77a99"
    text: {Probably not good, but there's no license key in those, is there?}
    sent: "2017-03-28T21:58:57.393Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dad2178bb56c2d1151c261"
    text: "well that's what I call infosec :shit:"
    sent: "2017-03-28T21:13:59.935Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58dad1feb402a53211c105a0"
    text: {Link to buy from the site is dead, but direct link is listed in google}
    sent: "2017-03-28T21:13:34.854Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dad17dad849bcf422b3daf"
    text: "I think it's a mistake"
    sent: "2017-03-28T21:11:25.530Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dad14c408f90be66669dbf"
    text: {You mean they give it up for free now? Last time I checked SDK page purchase link wasn't even working.}
    sent: "2017-03-28T21:10:36.233Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58dad0b9b52518ed4db8b09c"
    text: "http://www.rebol.com/downloads/v278/sdk/"
    sent: "2017-03-28T21:08:09.002Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dad0a77ea420cc42158833"
    text: "Hmm... this probably shouldn't be this way?"
    sent: "2017-03-28T21:07:51.622Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dacd737ea420cc42157b52"
    text: "%build/build.r"
    sent: "2017-03-28T20:54:11.754Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58daccfbad849bcf422b29f5"
    text: {You need to have the R2 SDK for that. Red has a build script to do it though.}
    sent: "2017-03-28T20:52:11.092Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dacc9a4cb8d091733770c5"
    text: "Ah, good question "
    sent: "2017-03-28T20:50:34.034Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dacc547ea420cc421576f9"
    text: "like the ones we download from the website"
    sent: "2017-03-28T20:49:24.905Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dacc404cb8d09173376f39"
    text: "but how can I compile the `red` binary itself?"
    sent: "2017-03-28T20:49:04.973Z"
    editedAt: "2017-03-28T20:49:12.083Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dacbd58fcce56b20a9620f"
    text: {    >> do/args %red.r "%environment/console/console.red"}
    sent: "2017-03-28T20:47:17.701Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dacb410e4137042abe12af"
    text: "From Rebol"
    sent: "2017-03-28T20:44:49.170Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dacb384cb8d09173376a48"
    text: {How I've been doing it: do/args %red.r "-r %path-to-console.red}
    sent: "2017-03-28T20:44:40.616Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58daca704cb8d091733766fe"
    text: {how do I compile Red from sources? In the Readme I only see examples of how to run Red programs}
    sent: "2017-03-28T20:41:20.549Z"
    editedAt: "2017-03-28T20:41:40.737Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58dac75d408f90be66667288"
    text: {My `help` rewrite is up in a gist, for a few people to comment on before opening it up to wider criticism. Since I went in quite a different direction than the original code, I'll state some of my goals in doing so:^/- Make `help` a less monolithic function^/- Make it easier to change the output formatting^/- Provide functions that others can copy and reuse^/- Build in a func spec parser that can be used for other tools}
    sent: "2017-03-28T20:28:13.932Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58da78a48bb56c2d114ff27c"
    text: {Heh... there is still something new to find.. I just found that there is already this:^/```^/>> trim/lines mold/part system/codecs 100^/== ^{[png make object! [ title: "" name: 'PNG mime-type: [image/png] s...^/```}
    sent: "2017-03-28T14:52:20.803Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da6c48b52518ed4db6b02d"
    text: {hm.. probably not a problem.. as mold escape the values inside the string.}
    sent: "2017-03-28T13:59:36.499Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da6b6ab402a53211beddd9"
    text: {I have a function, which can trim the spaces from the molded result.. But it changes values in case like: `b: [{^^/^^/foo^^/^^/boo}]`}
    sent: "2017-03-28T13:55:54.115Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da6aeeb52518ed4db6a7b9"
    text: {```^/>> mold/flat/part system/codecs 100^/== ^{#(png: make object! [title: "" name: 'PNG mime-type: [image/png] suffixes: [%.png] encode: ro...^/```^/}
    sent: "2017-03-28T13:53:50.899Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da6a9c408f90be66648b7b"
    text: {@Oldes `mold` has `/flat` refinement, but it's marked as TBD, would that help?}
    sent: "2017-03-28T13:52:28.686Z"
    editedAt: "2017-03-28T13:52:45.811Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da6a168e4b63533d70accd"
    text: {@9214 it would remove brackets so even worst:^/```^/>> form/part system/codecs 100^/== {png title: ""^^/name: 'PNG^^/mime-type: [image/png]^^/suffixes: [%.png]^^/encode: routine [img [image!]][^^/  }^/```}
    sent: "2017-03-28T13:50:14.672Z"
    editedAt: "2017-03-28T13:50:31.344Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da69b38bb56c2d114f998b"
    text: "@Oldes `form/part`?"
    sent: "2017-03-28T13:48:35.050Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da683af22385553de51f96"
    text: {Now imagine, that in the block is multiline string value... what it should display than?}
    sent: "2017-03-28T13:42:18.687Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da681dad849bcf422914e3"
    text: {Although it is still not that much easy.. as it creates result like:^/```^/>> mold/part system/codecs 100^/== {[png make object! [^^/    title: ""^^/    name: 'PNG^^/    mime-type: [image/png]^^/    suffixes: [%.png]^^/  }^/```}
    sent: "2017-03-28T13:41:49.293Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da58310e4137042abbac9c"
    text: "Ah... interesting.. I missed that functionality:)"
    sent: "2017-03-28T12:33:53.520Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da55240e4137042abb9bd4"
    text: {@Oldes `mold/part` or `form/part`. I generally prefer a preview of inner content, even if partial. Also, in many cases, the content of blocks in objects will contain valuable data which can fit into a single line.}
    sent: "2017-03-28T12:20:52.976Z"
    editedAt: "2017-03-28T12:24:42.932Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da5186408f90be66640fc3"
    text: {> must be completely converted^/^/Not true, you can copy just about 30-40 values, depending on the maximal width of the text you will allow.}
    sent: "2017-03-28T12:05:26.247Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58da509eb52518ed4db61b21"
    text: {The main disadvantage of the first version is, that the content of the block must be completely converted to string and than cropped... so it is highly memory inefficient. }
    sent: "2017-03-28T12:01:34.652Z"
    editedAt: "2017-03-28T12:01:39.160Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da50258e4b63533d702449"
    text: {This is output of the Gregg's proposal:^/```^/>> ? system^/SYSTEM is an object! with the following words and values:^/    version         string!     "0.6.1"^/    build           object!     [date config]^/    words           object!     [datatype! unset! none! logic! block! pare...^/    platform        function!   "Return a word identifying the operating s...^/    catalog         object!     [datatypes actions natives errors]^/    state           object!     [interpreted? last-error trace?]^/    modules         block!      []^/    codecs          block!      [png make object! [title: "" name: 'PNG mi...^/    schemes         object!     []^/    ports           object!     []^/    locale          object!     [language language* locale locale* months ...^/    options         object!     [boot home path script args do-arg debug s...^/    script          object!     [title header parent path args]^/    standard        object!     [header error]^/    lexer           object!     [pre-load throw-error make-hm make-msf mak...^/    console         object!     [prompt result history limit catch? count ...^/    view            object!     [screens event-port metrics fonts platform...^/    reactivity      object!     [relations stack queue debug? eval eval-re...^/```^/and this is my version (based on Rebol)^/```^/>> ? system^/SYSTEM is an object of value:^/    version            string!     "0.6.1"^/    build              object!     [date config]^/    words              object!     [datatype! unset! none! logic! block! paren! string! file! url! char! integer! f...^/    platform           function!   Return a word identifying the operating system.^/    catalog            object!     [datatypes actions natives errors]^/    state              object!     [interpreted? last-error trace?]^/    modules            block!      length: 0^/    codecs             block!      length: 8^/    schemes            object!     []^/    ports              object!     []^/    locale             object!     [language language* locale locale* months days]^/    options            object!     [boot home path script args do-arg debug secure quiet binary-base decimal-digits...^/    script             object!     [title header parent path args]^/    standard           object!     [header error]^/    lexer              object!     [pre-load throw-error make-hm make-msf make-hms make-hmsf make-time make-binary ...^/    console            object!     [prompt result history limit catch? count ws gui? read-argument init-console cou...^/    view               none!       none^/    reactivity         object!     [relations stack queue debug? eval eval-reaction on-stack? check is~]^/```}
    sent: "2017-03-28T11:59:33.828Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da4fec7ea420cc4212dc60"
    text: {Using `help`.. should the `block` in `object` be partially visible or should be there just the length of it?}
    sent: "2017-03-28T11:58:36.698Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58da47e2408f90be6663e08a"
    text: ":v::alien: "
    sent: "2017-03-28T11:24:18.858Z"
    editedAt: "2017-03-28T11:32:27.097Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da44f108c00c092a2327a2"
    text: ":-D"
    sent: "2017-03-28T11:11:45.014Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da44bb0e4137042abb47cc"
    text: "let's wait for IO first )"
    sent: "2017-03-28T11:10:51.192Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da449fb52518ed4db5de8d"
    text: "I need Red to study Xenomorph DNA :-)"
    sent: "2017-03-28T11:10:23.478Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da44578bb56c2d114eda3a"
    text: "oh, pardon, I meant `4.2` ;)"
    sent: "2017-03-28T11:09:11.137Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da4426ad849bcf4228639f"
    text: {4.0 will cause technological singularity :rocket: }
    sent: "2017-03-28T11:08:22.098Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da3a7d08c00c092a22f622"
    text: {@RiVeND Don't be, as long as there is no bug in 4.0, the multiverse should be safe. ;-)}
    sent: "2017-03-28T10:27:09.883Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da39ab0e4137042abb14ad"
    text: "I am almost living in fear of Red 4.0!"
    sent: "2017-03-28T10:23:39.701Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "58da37da8e4b63533d6fb876"
    text: {@9214 Red 3.0 will bring a dialect for creating a new bubble Universe, where you can be the god (cf "Rick & Morty" S02E06). ;-)}
    sent: "2017-03-28T10:15:54.235Z"
    editedAt: "2017-03-28T10:18:38.697Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58da37a9f22385553de42d12"
    text: {@greggirwin I was hoping we could do that this year. ;-)}
    sent: "2017-03-28T10:15:05.677Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da2cd9f22385553de3f8a1"
    text: "yes ..."
    sent: "2017-03-28T09:28:57.224Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da2a7f7ea420cc4212328a"
    text: "do you all live in Czechia guys?"
    sent: "2017-03-28T09:18:55.574Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58da29107ea420cc42122cfa"
    text: {i.e. start small and build transistor with some `quantum parse dialect`, then build logic gates, registers, FSM... CPU, assembler, OS, userland stuff, etc etc}
    sent: "2017-03-28T09:12:48.337Z"
    editedAt: "2017-03-28T09:13:59.534Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da28b1ad849bcf4227e7fe"
    text: {and after 2.0 release it could be nice to create a project "from transistor to neural network bot of yourself" entirely in Red :O}
    sent: "2017-03-28T09:11:13.007Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da28a37ea420cc42122b5b"
    text: "cool, when and where? ;)"
    sent: "2017-03-28T09:10:59.735Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58da2885408f90be66634a50"
    text: {We need to meet and drink few beers together, that's even more important imo :-)}
    sent: "2017-03-28T09:10:29.027Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da281808c00c092a22a798"
    text: {@pekr we need books and detailed documentation before the launch, that's an important part}
    sent: "2017-03-28T09:08:40.936Z"
    editedAt: "2017-03-28T09:09:08.088Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58da1f5cf22385553de3bdbb"
    text: "Next year is reserved for 1.0 ;-)"
    sent: "2017-03-28T08:31:24.945Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58da1a03b52518ed4db52741"
    text: "Sure. So, next year sometime? ;^^)"
    sent: "2017-03-28T08:08:35.867Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58da19da8bb56c2d114e1bbf"
    text: {@greggirwin For HOF, we could schedule that after `format` is done?}
    sent: "2017-03-28T08:07:54.931Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da19bcb52518ed4db52583"
    text: "Will do."
    sent: "2017-03-28T08:07:24.861Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58da19b108c00c092a226a25"
    text: {@greggirwin Making others review the new `help` would be great (in a gist seems appropriate).}
    sent: "2017-03-28T08:07:13.358Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58da19940e4137042aba830e"
    text: {After `help`, I was planning to go back to `format`.}
    sent: "2017-03-28T08:06:44.213Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58da193eb402a53211bd53c7"
    text: {Great. Let me know when you want to talk about it. I have a new `help` implementation in pretty good shape. Should I have Peter, Oldes, or Bolek review first, to see if they have suggestions before taking your time? Or should I just put it in a gist for review?}
    sent: "2017-03-28T08:05:18.042Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58da186bf22385553de39d66"
    text: {@greggirwin I plan to support both forms, using blocks and funcs.}
    sent: "2017-03-28T08:01:47.420Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d94de28e4b63533d6bf184"
    text: {@dockimbel, I have a mix of block and func based HOFs. For `*-each` style funcs, the block model works really well, but I haven't tried it where more rebinding was used, or layered calls. I imagine a lot of functional people will want a more traditional approach, using funcs. If Red doesn't build them in, they'll create various libs for them. Blocks are cleaner than inline `func` lambdas, but func args for existing funcs can be cleaner still, in some cases. ^/^/}
    sent: "2017-03-27T17:37:38.240Z"
    editedAt: "2017-03-27T17:38:10.391Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d929404cb8d09173302413"
    text: {That's right, that's the idiomatic way. For Red's HOF, we should leverage that.}
    sent: "2017-03-27T15:01:20.724Z"
    editedAt: "2017-03-27T15:02:04.387Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d92161f22385553ddf81c9"
    text: {@dockimbel so the common pattern is to pass words which you want underlying code to bind and a block which uses this words the way you want, right?}
    sent: "2017-03-27T14:27:45.453Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d9158408c00c092a1e16e4"
    text: {@maximvl A block is more lightweight than a function.}
    sent: "2017-03-27T13:37:08.327Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d910df8e4b63533d6ab283"
    text: "Good, examples I need."
    sent: "2017-03-27T13:17:19.818Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58d9106a8fcce56b20a182ed"
    text: {@Phryxe here is a nice intro with examples:^/https://en.wikibooks.org/wiki/REBOL_Programming/Language_Features/Parse/Parse_expressions}
    sent: "2017-03-27T13:15:22.384Z"
    editedAt: "2017-03-27T13:15:28.397Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d90fe58fcce56b20a180c8"
    text: {```^/>> parse "ab cd efg" [thru "cd" to end]^/== true^/```^/Thanx for suggestions.}
    sent: "2017-03-27T13:13:09.157Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58d90f187ea420cc420d6471"
    text: "@maximvl because `to` or `thru` does all the work"
    sent: "2017-03-27T13:09:44.429Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d90f057ea420cc420d638e"
    text: "it works without `skip`, true"
    sent: "2017-03-27T13:09:25.231Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d90ef14cb8d091732f9c0b"
    text: "@rebolek why?"
    sent: "2017-03-27T13:09:05.135Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d90edb408f90be665e82cc"
    text: {and `to`/`thru` accept a rule, which is word match in my example}
    sent: "2017-03-27T13:08:43.500Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d90ed38fcce56b20a17c65"
    text: "@maximvl you don't need `skip` here"
    sent: "2017-03-27T13:08:35.631Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d90eaa408f90be665e80dd"
    text: {```^/red>> parse [a b c end] [skip thru 'c 'end]^/== true^/```}
    sent: "2017-03-27T13:07:54.101Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d90ea7b402a53211b8da90"
    text: "@Phryxe `skip` works with `to` and `thru`"
    sent: "2017-03-27T13:07:51.428Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d90e2d408f90be665e7da6"
    text: {why not. or `to end`. that also matches everything.}
    sent: "2017-03-27T13:05:49.898Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d90de67ea420cc420d5e7e"
    text: "`any skip`? :)"
    sent: "2017-03-27T13:04:38.069Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58d90d718bb56c2d11499c60"
    text: {@Phryxe it skips one element by default, you can add number of repetitions as with other rules:^/```^/red>> parse [a b c] [2 skip 'c]^/== true^/```}
    sent: "2017-03-27T13:02:41.917Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d90d467ea420cc420d5bd0"
    text: "OK, I'll have a closer look. Thanks."
    sent: "2017-03-27T13:01:58.770Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58d90d07408f90be665e78a0"
    text: "nope"
    sent: "2017-03-27T13:00:55.312Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d90ca08e4b63533d6a9cc5"
    text: {Doesn't `skip` need an offset (number of chars to skip)?}
    sent: "2017-03-27T12:59:12.746Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58d90bfc8bb56c2d11499482"
    text: "@Phryxe you can use `skip` for that"
    sent: "2017-03-27T12:56:28.283Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d90a774cb8d091732f81f9"
    text: {How do I write this regex `.*` (match any char) in Parse?}
    sent: "2017-03-27T12:49:59.259Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58d9035d8fcce56b20a14472"
    text: {loop, try, if use `block` as an argument and bind what's needed inside, but HOF can do the same using functions only}
    sent: "2017-03-27T12:19:41.606Z"
    editedAt: "2017-03-27T12:20:06.641Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d901d6f22385553ddedf49"
    text: {I wonder what is the difference and in what should I use in which particular case }
    sent: "2017-03-27T12:13:10.745Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d901c0b52518ed4db0512e"
    text: {so if I want to pass something "computable" to a function there are two alternatives - funcs and blocks}
    sent: "2017-03-27T12:12:48.482Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d9010c4cb8d091732f5374"
    text: {interesting, so using contexts one can still do closures and stuff without polluting global namespace}
    sent: "2017-03-27T12:09:48.951Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d900f00e4137042ab59bd6"
    text: {```^/red>> f: func [x /local o] [ o: object compose [x: (x) my-closure: func [] [x: x + 1]] :o/my-closure ]^/== func [x /local o][o: object compose [x: (x) my-closure: func [] [x...^/red>> g: f 5^/== func [][x: x + 1]^/red>> g^/== 6^/red>> g^/== 7^/red>> g^/== 8^/red>> g^/== 9^/red>> x^/*** Script Error: x has no value^/*** Where: catch^/```}
    sent: "2017-03-27T12:09:20.153Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8e2a9f22385553dde4c88"
    text: {Curl should be good enough. Red is using Curl for its `simple-io`stack under Linux and macOS me thinks. Here's quick example - http://stackoverflow.com/questions/14722556/using-curl-to-send-email}
    sent: "2017-03-27T10:00:09.472Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8e23c8e4b63533d69e2c5"
    text: {I think `call` is the way to go for now, there are should be terminal applications to send emals}
    sent: "2017-03-27T09:58:20.633Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d8e17fad849bcf42222d3d"
    text: {There is no email protocol included. I think we will have to wait for full IO, or look into the Curl. If it can send an email, `call`could be used to wrap eventual Curl functionality, if it exists ...}
    sent: "2017-03-27T09:55:11.455Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d8e131ad849bcf42222c53"
    text: {Will it be possible to send/receive email, or do we have to wait for port! I believe Red can already handle https:// connections.}
    sent: "2017-03-27T09:53:53.019Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58d873d3b402a53211b657ae"
    text: {@virtualAlan Try the [Red Web Site](http://www.red-lang.org).}
    sent: "2017-03-27T02:07:15.457Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d86932f22385553ddc6ed3"
    text: {Been on holiday, So not looked on here for a while, Congrats. on Red 06.2 -  where can i see what's new ? }
    sent: "2017-03-27T01:21:54.825Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "58d808c4ad849bcf421ec97e"
    text: {good practice, I also have something similar in plans}
    sent: "2017-03-26T18:30:28.868Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58d80884b52518ed4dac66ce"
    text: {@Travis-OBrien ^/>if (binPath.find(L"WoW.exe") != wstring::npos) ^{ //L"WoW.exe" //processName^/^/writing bots for WoW, aren't you? ;D}
    sent: "2017-03-26T18:29:24.948Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d7c1a98bb56c2d1144708b"
    text: "Thank you @endo64 "
    sent: "2017-03-26T13:27:05.755Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d7789c8e4b63533d646a97"
    text: {@metaperl `copy` on `series!` is important to understand. Examine the following examples:^/```^/>> f: has [s] [s: "" append s form random 9]^/>> f^/== "4"^/>> f^/== "46"^/>> f^/== "464"^/^/>> f: has [s] [s: copy "" append s form random 9]^/>> f^/== "3"^/>> f^/== "6"^/>> f^/== "5"^/```^/}
    sent: "2017-03-26T08:15:24.369Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58d6d7735982df9373a9f015"
    text: {Additional info from the Rebol guide:^/```^/Local variables that hold series need to be copied if the series is used multiple times. For example, if you want the stars string to be the same each time you call the start-name function, you should write:^/^/star-name: func [name] [^/    stars: copy "**"^/    insert next stars name^/    stars^/]^/^/Otherwise, if you write:^/^/star-name: func [name] [^/    stars: "**"^/    insert next stars name^/    stars^/]^/^/you will be using the same string each time and each time the function is used the previous name will appear within the result.^/^/print star-name "test"^/*test*^/print star-name "this"^/*thistest*^/```}
    sent: "2017-03-25T20:47:47.606Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d699038e4b63533d615575"
    text: {IMO it's a good coding style to initialize "variables" with `copy`, saves you from lots of headaches later}
    sent: "2017-03-25T16:21:23.881Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d688d98bb56c2d114044f1"
    text: {@metaperl The example on redprogramming has indeed this block, it is an error in the guide. I can't find Nick's ID on gitter, I'm not sure he registered here, I will notify him by email.}
    sent: "2017-03-25T15:12:25.133Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d687ef8bb56c2d114041ee"
    text: {@metaperl For the second question, you're right, there is no differences in that specific case. Though, `gui: []` is setting always `gui` to the same block, so in some cases, you need to `copy` it to start with a new empty one. For example:^/```lisp^/loop 3 [ gui: [] append gui 0 probe gui]^/loop 3 [ gui: copy [] append gui 0 probe gui]^/```}
    sent: "2017-03-25T15:08:31.073Z"
    editedAt: "2017-03-25T15:09:33.095Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d687c841a045e94dc7800e"
    text: "ok now it works. Thanks."
    sent: "2017-03-25T15:07:52.861Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d6878e0e4137042aac5576"
    text: {@dockimbel I was just following along with [this guide](http://redprogramming.com/Getting%20Started.html#section-3.8) }
    sent: "2017-03-25T15:06:54.921Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d6876bad849bcf42196f4d"
    text: {@metaperl Why do you use `[print pick t/data t/selected]` instead of `print pick t/data t/selected`? If you put the code in a block, then the block evaluates to itself, and nothing happens.}
    sent: "2017-03-25T15:06:19.897Z"
    editedAt: "2017-03-25T15:06:30.408Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d686f94cb8d09173263c15"
    text: {Why did the author set the gui to `copy []` instead of just `[]` ... I set it just `[]` and it worked just fine:^/```^/Red [title: "test" needs: 'view]^/gui: []^/foreach color [red green blue] [^/    append gui reduce ['text color]^/]^/view layout gui^/```^/}
    sent: "2017-03-25T15:04:25.708Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d6852a8bb56c2d114034d5"
    text: {```^/Red [title: "test" needs: 'view]^/view [^/    below^/    text "Some action examples.  Try using each widget:"^/    button red "Click Me" [^/        print "You clicked the red button."^/    ]^/    f: field 400 "Type some text here, then press [Enter]" [^/        print f/text^/    ]^/    t: text-list 400x300 data ["Select this" "Then this" "Now this"][^/        [print pick t/data t/selected]^/    ]^/    check yellow [print "You clicked the yellow check box."]^/    button "Quit" [unview]    ^/]^/```^/}
    sent: "2017-03-25T14:56:42.304Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d684f68bb56c2d11403463"
    text: {The text-list is not printing any values when they are selected:}
    sent: "2017-03-25T14:55:50.299Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d683f741a045e94dc771f4"
    text: {How would you get help on the word `text` in the `view` dialect?}
    sent: "2017-03-25T14:51:35.473Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d64dcb8bb56c2d113f668b"
    text: {@geekyi uhm, nothing, It just looks fun and hacky enough to try}
    sent: "2017-03-25T11:00:27.737Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d61f5841a045e94dc616f1"
    text: {@9214 actually, I'm not sure what you're trying for here. What's your goal, what are you trying to maximize/ optimize for?}
    sent: "2017-03-25T07:42:16.387Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d56cb82f7d097c106a563a"
    text: {okay, perhaps I should try write a parser for lambdacalc (or some interesting esoteric language)}
    sent: "2017-03-24T19:00:08.488Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56c2f2f7d097c106a5469"
    text: {I don't understand - one of the greatest Rebol/Red assets is simply a Parse. And why you want is to disqualify us, not considering it being a bare bones of the language? :-)}
    sent: "2017-03-24T18:57:51.597Z"
    editedAt: "2017-03-24T18:58:02.502Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d569a1155e992759b571f4"
    text: "*and* with minimal set of required atomic parts"
    sent: "2017-03-24T18:46:57.704Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d56961cbc40f02638e22c4"
    text: {but Rebol has strong typing and I don't think that it's possible to do hacks and tricks such as in JSFuck}
    sent: "2017-03-24T18:45:53.920Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d569125231ebb865b19b72"
    text: {it's a *dialect*, but I want that stuff *in terms* of a bare-bone Red/Rebol, without building any external support as parser}
    sent: "2017-03-24T18:44:34.679Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5684eb2eadab3653aff77"
    text: {Brian Dickens' Rebmu project is along those lines I think.}
    sent: "2017-03-24T18:41:18.441Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d566a926c446b31c075b90"
    text: {@dander nay, I know about `parse` power, what I mean is some kind of "unconventional" use of atomic parts of a language}
    sent: "2017-03-24T18:34:17.364Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d5646926c446b31c0751c2"
    text: {@9214 Nenad wrote one for his [blog post about parse](http://www.red-lang.org/2013/11/041-introducing-parse.html) with implementation here: https://gist.github.com/dockimbel/7713170}
    sent: "2017-03-24T18:24:41.592Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58d55980b2eadab3653ab2de"
    text: {I know that answer to any question starting with "in Red/Rebol, is it possible to..." is **YES**, but still... :grin: ^/Is it possible to create some kind of a [turing-tarpit](https://en.wikipedia.org/wiki/Turing_tarpit) similar to [JSFuck](http://www.jsfuck.com/) (i.e. using only *limited set* of build-in constructs, "atoms" and primitives) in Red or Rebol?}
    sent: "2017-03-24T17:38:08.599Z"
    editedAt: "2017-03-24T17:45:09.220Z"
    v: 5
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d3f1257b3f37e75429f008"
    text: {in Red/Rebol everything is data until it's explicitly evaluated with a function call, `print` inside a string is just a bunch of symbols, but after appending and calling `do`, `{print "Here's your running code..."  <code>}` become `[print "Here's your running code..." <code>]` - a valid Red block which can be evaluated.}
    sent: "2017-03-23T16:00:37.587Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d3d77b8fa16339540b3157"
    text: {if you input: `x: 2 y: 10 square-root x * x + (y * y)`, then append will just join it to the string.^/That will give the string! `{print "Here's your running code..." x: 2 y: 10 square-root x * x + (y * y)}`.^/Then do will interpret this string!: first it will be loaded (because it's a string!) to become a block! of values, then it is evaluated.}
    sent: "2017-03-23T14:11:07.669Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58d3d69c58ad4eb0284497c8"
    text: {```^/do [^/        code: ask {Enter some code:  }   ; for example, {print "hello"}^/        do append {print "Here's your running code..." } code^/    ]^/```}
    sent: "2017-03-23T14:07:24.684Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58d3d663590d72c864f9c6b2"
    text: {`code` can be anything you type. So the resulting code is just preceded by a line that print "Here's your running code..." in the console. To me, there is a missing space at the end of the string to have good Red code.}
    sent: "2017-03-23T14:06:27.340Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58d3c4ed590d72c864f96ef6"
    text: {[Section 3.5 of these^/docs](http://redprogramming.com/Getting%20Started.html#section-3.5)^/says "{Curly braces} can be used instead of quotes, to enclose strings^/of text which contain quote characters, or multi-line strings"^/^/OK and that is indeed the case as we can see when evaluating:^/`{Hi there my name is } {Bob Jones}`^/^/However, in the following code^/```^/    do [^/        code: ask {Enter some code:  }   ; for example, {print "hello"}^/        do append {print "Here's your running code..."} code^/    ]^/```^/^/The second line confuses me. I would've expected this to be written:^/`append {"Here's your running code..."} do code`}
    sent: "2017-03-23T12:51:57.090Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d3c48c6d7eb18404fa1730"
    text: {enclosed in backtick for oneliner, three of them for multiline ...}
    sent: "2017-03-23T12:50:20.180Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d3c284590d72c864f9650d"
    text: {How do you inline source code in this chat? That source code was indented 4 spaces, like github-flavored markdown.}
    sent: "2017-03-23T12:41:40.243Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d3c25da84f611959d5c99a"
    text: {[Section 3.5 of these^/docs](http://redprogramming.com/Getting%20Started.html#section-3.5)^/says "{Curly braces} can be used instead of quotes, to enclose strings^/of text which contain quote characters, or multi-line strings"^/^/OK and that is indeed the case as we can see when evaluating:^/{Hi there my name is } {Bob Jones}^/^/However, in the following code^/    do [^/        code: ask {Enter some code:  }   ; for example, {print "hello"}^/        do append {print "Here's your running code..."} code^/    ]^/^/The second line confuses me. I would've expected this to be written:^/    append {"Here's your running code..."} do code}
    sent: "2017-03-23T12:41:01.841Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d3bdfb590d72c864f94e40"
    text: {@dockimbel is the author of Rebol Cheyenne web server framework. If I am not mistaken, one of the initial motivations for Red was to create next generation of Cheyenne, without the limitations of Rebol2, mainly its closed nature, possible internal bugs, etc. But - it will take some time to get there ...}
    sent: "2017-03-23T12:22:19.883Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d3b9c42215a08f04b74434"
    text: {Is this the appropriate channel to ask this question: "I want a web application framework in Red that has user auth and other goodies with it out of the box. What can you recommend? I prefer one that does client side rendering in javascript instead of the old terminal-server WSGI server-side templating"}
    sent: "2017-03-23T12:04:20.253Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d3b48a8fa16339540a808f"
    text: {@greggirwin Nice. I nether thought of counting the empty loop overhead to substract it later!}
    sent: "2017-03-23T11:42:02.443Z"
    editedAt: "2017-03-23T11:42:37.937Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58d361a6a84f611959d42e4a"
    text: {@gltewalt ^/```^/time-it: func [block /count ct /local t baseline][^/^-ct: any [ct 1]^/^-t: now/time/precise^/^-loop ct [do []]^/^-baseline: now/time/precise - t^/^-t: now/time/precise^/^-loop ct [do block]^/^-now/time/precise - t - baseline^/]^/```}
    sent: "2017-03-23T05:48:22.000Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d35535f7f7d48104475f0f"
    text: {Not yet, just an internal profiler for the compiler so far, that I use when I want to spot the bottlenecks.}
    sent: "2017-03-23T04:55:17.577Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d3550958ad4eb028427150"
    text: "Is there a profiler for Red?"
    sent: "2017-03-23T04:54:33.531Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d354f78fa163395408fafa"
    text: "ok"
    sent: "2017-03-23T04:54:15.808Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d354e6b809ca5f4a7294f6"
    text: {Anyway, in your use-case, it doesn't seem to matter a lot.}
    sent: "2017-03-23T04:53:58.435Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d35483a84f611959d407bf"
    text: {I tried with both versions on a 30MB input (just duplicating Yahoo page content), and the bitset version is more than twice faster. The difference would be even bigger if the code was compiled.}
    sent: "2017-03-23T04:52:19.070Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d34f5c6701410e58677dcf"
    text: "Might be `lowercase` that slows it up a little?"
    sent: "2017-03-23T04:30:20.967Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d34f22590d72c864f7ae2e"
    text: {```^/>> sum-letters read http://www.yahoo.com^/== 3758827^/```}
    sent: "2017-03-23T04:29:22.909Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d34ef7f7f7d48104474a95"
    text: {Normally not that big, but I was feeding it yahoo.com}
    sent: "2017-03-23T04:28:39.722Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d34b46a84f611959d3ee0c"
    text: "@gltewalt How big is your input string?"
    sent: "2017-03-23T04:12:54.815Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d34a397b3f37e754271967"
    text: {The above works, but doesnt seem to be faster (most likely because im still a crummy programmer :smile: )}
    sent: "2017-03-23T04:08:25.243Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d349c96701410e58676b04"
    text: {@gltewalt Indeed, I overlooked it, you wanted the index.}
    sent: "2017-03-23T04:06:33.235Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d348c3a84f611959d3e54a"
    text: {```^/sum-letters: func [str [string!] /local alpha acc][^/    acc: 0^/    alpha: charset [#"a" - #"z"] ^/    str: lowercase str^/    foreach c str [^/        acc: acc + either find alpha c [c - 96][0]]^/]^/```}
    sent: "2017-03-23T04:02:11.743Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d348af2215a08f04b594f7"
    text: "@greggirwin How are you timing it?"
    sent: "2017-03-23T04:01:51.580Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58d33e918fa163395408afe1"
    text: {@dockimbel  find for charset returns true or false}
    sent: "2017-03-23T03:18:41.783Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d33e40f7f7d48104471877"
    text: {Can anyone help me understand this problem? I'm trying to read/write to memory using Red. I've made a DLL using C++ libraries to look up a process ID and retrieve a handle to that process. Using the handle, I'm trying to read a memory address. However, the only thing that's working so far is retrieving the ID of a process. Getting a handle to that process always returns a null pointer (That's what I'm assuming anyways, I'm very new to the Red language... the output is always 000000). I've uploaded everything to GitLab. Can someone look this over and point me in the right direction? Thanks!^/^/PS. It's a 32bit DLL.^/^/https://gitlab.com/Travis-OBrien/Red_Memory_Manipulation/tree/master}
    sent: "2017-03-23T03:17:20.571Z"
    v: 1
    author: "563fa17916b6c7089cb9f59e"
) #(
    id: "58d336ad6701410e58672d8a"
    text: {Instead of `alpha: "abcdefghijklmnopqrstuvwxyz"`, you can create a bitset which would be way more faster for lookups: `alpha: charset [#"a" - #"z"]`. With the string form, each `find` is a linear search (O(n)), while with the charset, it's a direct lookup in an array, so constant time (O(1)).}
    sent: "2017-03-23T02:45:01.908Z"
    editedAt: "2017-03-23T02:46:25.860Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d335dd5917e26076c41dc7"
    text: "@greggirwin No preferences."
    sent: "2017-03-23T02:41:33.734Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d32c8f2215a08f04b53b2f"
    text: {```^/a-z-count-latin-1: routine [^/^-str^-^-[string!]^/^-return: [integer!]^/^-/local^/^-^-s^- [series!]^/^-^-pos  [byte-ptr!]^/^-^-tail [byte-ptr!]^/^-^-n    [integer!]^/^-^-ch   [integer!]^/][^/^-s:^-  GET_BUFFER(str)^/^-pos:  as byte-ptr! s/offset^/^-tail: as byte-ptr! s/tail^/^/^-n: 0^/^-while [pos < tail][^/^-^-ch: as-integer pos/value^/^-^-if all [ch >= 65  ch <=  90] [n: n + ch - 64]^/^-^-if all [ch >= 97  ch <= 122] [n: n + ch - 96]^/^-^-pos: pos + 1^/^-]^/^-n^/]^/```}
    sent: "2017-03-23T02:01:51.812Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d32ac9a84f611959d387d9"
    text: {It can be a bit simpler if you assume Latin1, but I just found something close in %string.reds and hacked it real quick.}
    sent: "2017-03-23T01:54:17.700Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d32a846d7eb18404f7b73a"
    text: {It crossed my mind, but wasn't sure how much more detailed it had to be}
    sent: "2017-03-23T01:53:08.927Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d32a627b3f37e75426ad81"
    text: {I'm the guy always preaching against premature optimization, but I don't drop down to R/S much and wanted to see the difference. }
    sent: "2017-03-23T01:52:34.594Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d32a1c5917e26076c3f64a"
    text: {Your original takes ~1.2s here, on Yahoo. Not using `find` takes ~0.5s. R/S takes 0.01s.}
    sent: "2017-03-23T01:51:24.547Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d329ad7b3f37e75426abcb"
    text: {Happens to all of us. In the spirit of fun, though, R/S is blazing fast for this kind of thing. More work, of course, but if you were doing this kind of thing and needed it fast:^/```^/a-z-count: routine [^/^-str^-^-[string!]^/^-return: [integer!]^/^-/local^/^-^-s^- [series!]^/^-^-unit [integer!]^/^-^-pos  [byte-ptr!]^/^-^-head [byte-ptr!]^/^-^-tail [byte-ptr!]^/^-^-n    [integer!]^/^-^-ch   [integer!]^/][^/^-s:^-  GET_BUFFER(str)^/^-unit: GET_UNIT(s)^/^-head: (as byte-ptr! s/offset) + (str/head << (log-b unit))^/^-pos:  head^/^-tail: as byte-ptr! s/tail^/^/^-n:^-  0^/^-while [pos < tail][^/^-^-ch: string/get-char pos unit^/^-^-if all [ch >= 65  ch <=  90] [n: n + ch - 64]^/^-^-if all [ch >= 97  ch <= 122] [n: n + ch - 96]^/^-^-pos: pos + unit^/^-]^/^-n^/]^/```}
    sent: "2017-03-23T01:49:33.566Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d32932fe6a638b1af3f877"
    text: {As soon as I decided to use find, it led me down a certain path.  :worried: }
    sent: "2017-03-23T01:47:30.284Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d323d32215a08f04b52184"
    text: {And find is case insensitive without a refinement }
    sent: "2017-03-23T01:24:35.033Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d323d25917e26076c3e00a"
    text: "Right `- 96` maps to those values for your range."
    sent: "2017-03-23T01:24:34.612Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d323b2b809ca5f4a71f6fa"
    text: {Ah. I was using index for the value since it's 1 to 26}
    sent: "2017-03-23T01:24:02.566Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d322da8fa1633954084e8b"
    text: "ASCII offset of lowercase chars."
    sent: "2017-03-23T01:20:26.014Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d322ab6d7eb18404f79c41"
    text: "What's the - 96 for?"
    sent: "2017-03-23T01:19:39.202Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d321576d7eb18404f796c1"
    text: "Enlightenment step #3."
    sent: "2017-03-23T01:13:59.194Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d321492215a08f04b5180b"
    text: "Ohhhhh"
    sent: "2017-03-23T01:13:45.828Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d3212f7b3f37e754268d40"
    text: {Ah, that's not failing though. Note that I have `acc` at the end of the func, because funcs return the last evaluated value. If the last char isn't a-z, the `if` block isn't used, and `if` returns `none`.}
    sent: "2017-03-23T01:13:19.410Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d321158fa163395408496a"
    text: "I haven't started on parse yet"
    sent: "2017-03-23T01:12:53.694Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d320e5fe6a638b1af3dbfd"
    text: {```^/sum-letters: func [str [string!] /local alpha acc val][^/    acc: 0^/    alpha: "abcdefghijklmnopqrstuvwxyz"^/    foreach c str [^/        acc: acc + either val: find alpha c [index? val][0]^/    ]^/]^/```}
    sent: "2017-03-23T01:12:05.037Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d320c2a84f611959d3655e"
    text: "Something returns none"
    sent: "2017-03-23T01:11:30.935Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d320b87b3f37e754268bfa"
    text: {Also, with `either` you could hoist `acc:` to the front, so you're not repeating it in each condition block.}
    sent: "2017-03-23T01:11:20.546Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d3209d8fa1633954084880"
    text: "Really? How does it fail?"
    sent: "2017-03-23T01:10:53.828Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d3205aa84f611959d363a8"
    text: {Without the else clause (the zero) it will fail on rebol.com}
    sent: "2017-03-23T01:09:46.192Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d3201f58ad4eb02841c76a"
    text: {It's not *bad*, but you're doing `find` a lot. Bolek's parse version shows how to avoid that. You can use `if` instead of `either`, because you don't need to add 0 if there's no match. You can avoid `find` without parse as well.^/```^/sum-letters-ltgt: func [str [string!] /local acc][^/    acc: 0^/    foreach c str [^/        if all [c >= #"a"  c <= #"z"] [acc: acc + (c - 96)]^/    ]^/    acc^/]^/```^/}
    sent: "2017-03-23T01:08:47.088Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d31971f7f7d48104469b00"
    text: {I'm just having fun playing - `sum-letters` is for a numerology game. a = 1, b = 2, etc.^/I wanted to see what happened when I fed it a huge string though^/}
    sent: "2017-03-23T00:40:17.851Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d315c4590d72c864f6eb40"
    text: {```^/>> sum-letters read http://www.rebol.com^/== 50256^/>> sum-letters read http://www.google.com^/*** Access Error: invalid UTF-8 encoding: #{A050726F}^/*** Where: read^/>> sum-letters read http://www.yahoo.com^/== 3755672^/```}
    sent: "2017-03-23T00:24:36.203Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d315b458ad4eb02841a32e"
    text: "takes a few seconds if you feed it yahoo"
    sent: "2017-03-23T00:24:20.825Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d314ce8fa1633954081a85"
    text: {@rebolek @greggirwin  Is this bad?^/^/```^/sum-letters: func [str [string!] /local alpha acc val][^/    acc: 0^/    alpha: "abcdefghijklmnopqrstuvwxyz"^/    foreach c str [^/        either val: find alpha c [acc: acc + index? val][acc: acc + 0]]^/]^/```}
    sent: "2017-03-23T00:20:30.665Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d30a2f6701410e58669332"
    text: {^^ is the string escape character in Red. So the string has no closing "}
    sent: "2017-03-22T23:35:11.318Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58d3048e5917e26076c3695e"
    text: {Looks like maybe the `^^` character?^/```^/>> type? "^{<!doctype>^^"^/*** Syntax Error: invalid value at ^{"^^^{<!doctype>^^^^"^}^/*** Where: do^/```}
    sent: "2017-03-22T23:11:10.840Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d304067b3f37e754261f04"
    text: {Something breaks it if I feed it a web page...^/```^/>> type? read http://www.rebol.com^/== string!^/>> sum-letters read http://www.rebol.com^/== none^/>> data: read http://www.rebol.com^/== ^{<!doctype html>^^/<html><head>^^/<meta name="generator" content="REBOL^/>> type? data^/== string!^/```}
    sent: "2017-03-22T23:08:54.421Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2f1457b3f37e75425c278"
    text: {It would come in handy for the sub rooms at least. The main Red room can sort of be tracked by the GitHub issues}
    sent: "2017-03-22T21:48:53.975Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2ef587b3f37e75425b902"
    text: "Sounds good. @dockimbel, preferences? "
    sent: "2017-03-22T21:40:40.112Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d2eaf47b3f37e75425a197"
    text: {@greggirwin @gltewalt I can do web mirror like we have for AltME. That might be useful.}
    sent: "2017-03-22T21:21:56.210Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2e3607b3f37e754257aeb"
    text: {No. You can use @rebolek's gritter to download everything though. We should do that. Pull chat by year or something.}
    sent: "2017-03-22T20:49:36.085Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d2e251f7f7d4810445a61d"
    text: "Are there logs for these rooms?"
    sent: "2017-03-22T20:45:05.342Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d68ba84f611959d216ef"
    text: {something like `reduce-integer sum-letters "bla bla bla"`}
    sent: "2017-03-22T19:54:51.536Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d64cf7f7d48104456a03"
    text: {I have another function (somewhere) that reduces an integer down to its digital root. How do I pass the result of sum-letters to it?}
    sent: "2017-03-22T19:53:48.585Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d62e6701410e5865a5bc"
    text: {@gltewalt yep, good enough. You are doing the search twice, I would store the first result to use it later, but this works.}
    sent: "2017-03-22T19:53:18.841Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d5c06701410e5865a3b1"
    text: {Good enough?^/```^/sum-letters: func [str [string!] /local alpha acc][^/    acc: 0^/    alpha: "abcdefghijklmnopqrstuvwxyz"^/    foreach c str [^/        if find alpha c [acc: acc + index? find alpha c]]^/]^/```}
    sent: "2017-03-22T19:51:28.938Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d4b1b809ca5f4a709aa9"
    text: "foreach"
    sent: "2017-03-22T19:46:57.565Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d36f590d72c864f5b809"
    text: "@gltewalt what loop? "
    sent: "2017-03-22T19:41:35.085Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d3567b3f37e754252841"
    text: {or parse version:^/```^/sum-letters: func [str [string!] /local alpha acc val][^/^-acc: 0^/^-alpha: charset [#"a" - #"z"]^/^-parse str [^/^-^-some [^/^-^-^-set val alpha (acc: acc + (to integer! val) - 96)^/^-^-|^-skip^-^/^-^-]^/^-]^/^-acc^/]^/```}
    sent: "2017-03-22T19:41:10.555Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d2c38fa163395406ed2c"
    text: {will loop continue though if it retrieves `none` ?}
    sent: "2017-03-22T19:38:43.650Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d2bfb809ca5f4a708f6c"
    text: {Something like ^/```^/sum-letters: func [str [string!] /local alpha acc val][^/    acc: 0^/    alpha: "abcdefghijklmnopqrstuvwxyz"^/    foreach c str [^/    ^-if val: find alpha c [^/    ^-^-acc: acc + index? val^/    ^-]^/    ]^/]^/```}
    sent: "2017-03-22T19:38:39.486Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d28d7b3f37e7542523f8"
    text: "ah, yes"
    sent: "2017-03-22T19:37:49.472Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d27eb809ca5f4a708e8b"
    text: {First, check if it returns value and then add it to accumulator.}
    sent: "2017-03-22T19:37:34.579Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d26e7b3f37e7542522b0"
    text: "space should be ignored, or have value of zero"
    sent: "2017-03-22T19:37:18.765Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58d2d2688fa163395406ea14"
    text: {You have to deal with it separately, I guess. Or use `parse`.}
    sent: "2017-03-22T19:37:12.518Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d23f8fa163395406e9ab"
    text: {`find` will return `none` when it can't find the pattern, `space` in your example.}
    sent: "2017-03-22T19:36:31.831Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d1f4590d72c864f5b06c"
    text: "wait a  moment"
    sent: "2017-03-22T19:35:16.590Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d1c8590d72c864f5afb0"
    text: {```^/>> sum-letters "Greg"^/== 37^/```}
    sent: "2017-03-22T19:34:32.105Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d18d590d72c864f5ae6a"
    text: "yes"
    sent: "2017-03-22T19:33:33.777Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d1896d7eb18404f62b29"
    text: "space returns none"
    sent: "2017-03-22T19:33:29.486Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d17b6d7eb18404f62aec"
    text: "Oh, I see"
    sent: "2017-03-22T19:33:15.143Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d16db809ca5f4a7088a1"
    text: {`sum-letters "greg tewalt"`}
    sent: "2017-03-22T19:33:01.874Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d1546d7eb18404f62a15"
    text: {This breaks if there are spaces.^/^/```^/sum-letters: func [str [string!] /local alpha acc][^/    acc: 0^/    alpha: "abcdefghijklmnopqrstuvwxyz"^/    foreach c str [acc: acc + index? find alpha c]^/]^/```}
    sent: "2017-03-22T19:32:36.202Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d14e6701410e58658a9d"
    text: {I am not sure what exactly you want to accomplish with the second example.}
    sent: "2017-03-22T19:32:30.228Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d1008fa163395406e3c0"
    text: {```^/a: "abcdefghijklmnopqrstuvwxyz"^/find a "o"^/find a "o  k"^/```}
    sent: "2017-03-22T19:31:12.434Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d2d09a7b3f37e754251a94"
    text: "@gltewalt any example?"
    sent: "2017-03-22T19:29:30.606Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d2d07e5917e26076c26b14"
    text: "How can I ignore `space` with `find` ?"
    sent: "2017-03-22T19:29:02.898Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d296192215a08f04b26af6"
    text: "@9214 - that's an impressive collection"
    sent: "2017-03-22T15:19:53.197Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d295736d7eb18404f4db15"
    text: {@metaperl [shameless plug](https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b)}
    sent: "2017-03-22T15:17:07.612Z"
    editedAt: "2017-03-22T15:17:34.998Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d29535f7f7d4810443fb10"
    text: {basicly yes, every value in a block is evaluated, `string!` values evaluate to themselves, and values associated with `word!`s are fetched from their contexts (?)}
    sent: "2017-03-22T15:16:05.114Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d294e17b3f37e75423d4da"
    text: "Yes, `prin/print` reduces the block."
    sent: "2017-03-22T15:14:41.881Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d294ca6d7eb18404f4d6e8"
    text: "yes, though they are called `words` :)"
    sent: "2017-03-22T15:14:18.158Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d294bc5917e26076c116d0"
    text: {OK I'm reading [the block section in Rebol/Core](http://www.rebol.com/docs/core23/rebolcore-3.html#section-4) maybe that will clear this up for me.}
    sent: "2017-03-22T15:14:04.143Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d2948258ad4eb0283f1d0c"
    text: {so did `prin` evaluate the block so that the labels got expanded to their values?}
    sent: "2017-03-22T15:13:06.844Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d294335917e26076c11401"
    text: {@9214 the Red website recommends [this resource](http://redprogramming.com/Getting%20Started.html#section-3.2) and I've been working through it steadily... }
    sent: "2017-03-22T15:11:47.572Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d29417a84f611959d0b410"
    text: "So, square brackets are not overloaded."
    sent: "2017-03-22T15:11:19.139Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d293f22215a08f04b25f44"
    text: {If we get Rebol's construction syntax (`#[...]`) that will be a special case that's related.}
    sent: "2017-03-22T15:10:42.234Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d293e56d7eb18404f4cefc"
    text: {@metaperl start small and read [Rebol/Core guide](http://www.rebol.com/docs/core23/rebolcore.html) first}
    sent: "2017-03-22T15:10:29.335Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d293b9590d72c864f451e7"
    text: "Square brackets always define a block. "
    sent: "2017-03-22T15:09:45.560Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d293b56701410e5864473e"
    text: {```^/>> blk: ["name: " name "  birthday: " birthday "  phone: " phone]^/== ["name: " name "  birthday: " birthday "  phone: " phone]^/>> block? blk^/== true^/```}
    sent: "2017-03-22T15:09:41.612Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d29345a84f611959d0af23"
    text: {Are square brackets overloaded in Red? For instance in [this small code sample](https://gist.github.com/metaperl/c91bbd2a5849da214378d3f10f61f332) is a block created with the use of square brackets?}
    sent: "2017-03-22T15:07:49.961Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d291ca7b3f37e75423c264"
    text: {"^^/" = newline}
    sent: "2017-03-22T15:01:30.193Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d291c5fe6a638b1af12460"
    text: "thanks @greggirwin "
    sent: "2017-03-22T15:01:25.017Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d291c15917e26076c1065b"
    text: "ah!"
    sent: "2017-03-22T15:01:21.384Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d291b4fe6a638b1af1241f"
    text: "It starts a comment."
    sent: "2017-03-22T15:01:08.862Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d29196a84f611959d0a598"
    text: {Hello, what does the semicolon do in this line of code: `prin "no newline " prin "add a newline manually" prin newline  ; "^^/"`}
    sent: "2017-03-22T15:00:38.592Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58d1b09f6d7eb18404f0f5b9"
    text: {Anyone can also use macros.. search for `Loop macro` in http://www.red-lang.org/ (shame it is not possible to link it directly)}
    sent: "2017-03-21T23:00:47.401Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d1af7ffe6a638b1aed7d6d"
    text: {Anyone can write own `native!` (quite easy), just cannot expect it will be merged into official repository.}
    sent: "2017-03-21T22:55:59.007Z"
    editedAt: "2017-03-21T22:56:17.946Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d1acb96701410e5860821f"
    text: {@Oldes ^/>  I don't understand what you mean with:^/_From my cursory reading on Forth, I expected adding new words would be easy in the spirit of the Forth compiler being available to tweak.^/What stops anyone from creating their own loop function and/or add refinment to it?_^/^/This statement refers @geekyi invite to readthe `for` proposal. https://github.com/red/red/wiki/REP-0101---For-loop-function^/^/Anyone is free to go into Red/System and write their own `native!` word if they feel like it at the "bare metal level" just as in Forth?^/^/Within that context integrating my wish list  word in Red becomes of relative importance?}
    sent: "2017-03-21T22:44:09.615Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58d1aa2a7b3f37e7541ff766"
    text: {@Oldes Thanks for mention the second version which I integrate to my code.^/^/At this point I am using Rebol to explore and/or bootstrap a long term project. I feel I am yet to know enough Redbol to add something like `foreach-range`.}
    sent: "2017-03-21T22:33:14.917Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58d1a8d97b3f37e7541ff24c"
    text: {You know.. Red is still not in version 1.0, and the compiler is written in Rebol and will be trashed after 1.0 relase and replaced with a new one written in Red itself... so extending it now is not the best idea what to do with free time. Also every code added to runtime slowdowns compilation while testing yet missing parts being implemented. Nobody stops you to write own code like the `foreach-range`, if you find it useful.. I did it just for fun.}
    sent: "2017-03-21T22:27:37.329Z"
    editedAt: "2017-03-21T22:29:19.726Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d1a7995917e26076bd28e2"
    text: {My [second](https://gitter.im/red/help?at=58cbc320a84f611959b52865) version was better. Anyway... I don't understand what you mean with:^/_From my cursory reading on Forth, I expected adding new words would be easy in the spirit of the Forth compiler being available to tweak.^/What stops anyone from creating their own loop function and/or add refinment to it?_}
    sent: "2017-03-21T22:22:17.627Z"
    editedAt: "2017-03-21T22:24:03.321Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d1a790b809ca5f4a6b4b64"
    text: {> @OneArb honestly, I don't understand what you are asking :/^/^/That  was me doing my @Oldes `foreach-range` adoption report.^/^/Hope that clarifies :)}
    sent: "2017-03-21T22:22:08.974Z"
    editedAt: "2017-03-21T22:22:24.181Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58d1a6ab2215a08f04ae8e1e"
    text: {@Oldes ^/Thanks for the 'foreach-range` solution.^/^/I changed the line `0 >= count` into `0 > count` so range 1 1 would work. ^/^/Since few people need it, ^/```^/wonder overdose I either [^/^-cryptonite^/]^-[^/^-word count minimize^/]^/```^/:)^/```^/foreach-range: func[^/    "Evaluates body for each value in a series limited to range"^/    'word [word! block!] "Word, or words, to set on each iteration"^/    series [series!]^/    from   [integer!]^/    to     [integer!] ;beware that `to` is used system word!^/    body [block!]^/    /local index __counter result count^/][^/    if from < 1 [ from: 1] ;or throw error?^/    if 0 > count: to - from [return]^/    series: skip series (either block? word [length? word][1]) * (from - 1)^/^/    __counter: 0^/^/    index: length? body ;store original body size^/    append body [^/        __counter: __counter + 1^/        if __counter > count [break]^/    ]^/    foreach :word series body^/    clear at body index ;remove the code we added to body^/]^/^/lang-list: [2 "Rebol" 3 "Rebol" 0 "Red" 4 "Scala" 7 "Haxe"]^/^/foreach-range [version r-dialect] lang-list 1 1 [^/    print rejoin [ r-dialect " " version ]^/]^/```}
    sent: "2017-03-21T22:18:19.668Z"
    editedAt: "2017-03-21T22:19:05.893Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58d1a480b809ca5f4a6b3e08"
    text: {@OneArb honestly, I don't understand what you are asking :/}
    sent: "2017-03-21T22:09:04.309Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58d1a37a2215a08f04ae80c3"
    text: {@geekyi^/> @OneArb regarding for have you seen the [for loop proposal](https://github.com/red/red/wiki/REP-0101---For-loop-function^/^/I have. It reminded me of one of the reasons I chose Rebol in the first place.^/^/I read some place forth among other languages inspired Rebol.^/^/From my cursory reading on Forth, I expected adding new words would be easy in the spirit of the Forth compiler being available to tweak.^/^/What stops anyone from creating their own loop function and/or add refinment to it?^/^/For instance @Oldes kindly offered a foreach-range solution and I can `do load` it wherever I feel like using it.^/^/:point_up: [March 17, 2017 12:06 PM](https://gitter.im/red/help?at=58cbc320a84f611959b52865)}
    sent: "2017-03-21T22:04:42.765Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58d16c5958ad4eb0283a3fe1"
    text: "Maybe he went Van Gogh, or Howard Hughes ?"
    sent: "2017-03-21T18:09:29.914Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d153bcfe6a638b1aebaa3d"
    text: {Many members of the Rebol/Red community were following Carl from the Amiga times. }
    sent: "2017-03-21T16:24:28.086Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d153aefe6a638b1aeba9e5"
    text: "@pekr, https://xkcd.com/1782/"
    sent: "2017-03-21T16:24:14.717Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d153746d7eb18404ef36b7"
    text: {Not good for gaining followers, but *very* effective for getting work done and fostering a community.}
    sent: "2017-03-21T16:23:16.481Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d153276d7eb18404ef348a"
    text: "@greggirwin yeah that's what I meant actually"
    sent: "2017-03-21T16:21:59.603Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d153208fa1633954000afd"
    text: {We used AltME to meet/organise. Some of us still do :-)}
    sent: "2017-03-21T16:21:52.344Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d1530758ad4eb02839bb28"
    text: {Not closed, just not web public. That is, anyone was welcome, no secret handshakes; but you had to know which alley to walk down, and the unmarked door to knock on.}
    sent: "2017-03-21T16:21:27.672Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d152ffa84f611959cb11d7"
    text: "no, surely not :-)"
    sent: "2017-03-21T16:21:19.887Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "58d152ae58ad4eb02839b9df"
    text: "and Rebol community was  closed and private too?"
    sent: "2017-03-21T16:19:58.771Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d151717b3f37e7541e3b44"
    text: {@greggirwin Scheduler is really a nice example of how Redbol dialecting looks like ...}
    sent: "2017-03-21T16:14:41.321Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d151566d7eb18404ef2a76"
    text: {I think, that in the end, he simply lost his motivation. It was too much of a burden for 1 person to proceed, make a living, etc. For a very long time, RT refused to make the project open sourced}
    sent: "2017-03-21T16:14:14.043Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d151528fa1633954000122"
    text: "I extended `scheduler` and use it in production. "
    sent: "2017-03-21T16:14:10.044Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d1512e5917e26076bb6b77"
    text: {@9214 Difficult to say even for us, oldtimers. RT (Rebol Technologies) was a commercial entity. They had really nice system - Rebol/IOS (it even won Webby award). Then the company shrinked. RT was financed from tool sales, plus some private investor money. And then R3 project came - it was a big project, for mostly a one-man-show. Carl also got distrated by some other home-work and once in a time, all of a sudden, went into a so called "cave mode", not being available for cca 2-3 months ...}
    sent: "2017-03-21T16:13:34.260Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d150948fa1633954fffd88"
    text: "`Size: 7kb` now that's the spirit"
    sent: "2017-03-21T16:11:00.115Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d15081fe6a638b1aeb9836"
    text: {What I also liked very much, was Doc's Scheduler dialect: http://softinnov.org/rebol/scheduler.shtml}
    sent: "2017-03-21T16:10:41.319Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d15072f7f7d481043e4cec"
    text: {and what happened, why development of Rebol and all of the projects have stalled?}
    sent: "2017-03-21T16:10:26.101Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d14fd9f7f7d481043e4975"
    text: {Have you seen what Carl did with Rebol/Services? It was close to release, some prototype existed. That is exactly how you could have machines/apps/ppl talk one to each other - http://www.rebol.com/docs/services/tutorial.html}
    sent: "2017-03-21T16:07:53.101Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d14f6958ad4eb02839a9cb"
    text: "No XML, just DSLs"
    sent: "2017-03-21T16:06:01.761Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58d14f397b3f37e7541e3031"
    text: {>to talk to a machine as easily as machines can talk to each other^/^/Please no XML}
    sent: "2017-03-21T16:05:13.055Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d14f1c6701410e585ec35b"
    text: "that's how I see it at least"
    sent: "2017-03-21T16:04:44.804Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d14ef2a84f611959cafcdc"
    text: {so the idea is that people should be able to talk to a machine as easily as machines can talk to each other, and also get information in a human-readable form (no punchcards, bytes, or obscure syntax)}
    sent: "2017-03-21T16:04:02.477Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d14cce8fa1633954ffe9fd"
    text: {@greggirwin yeah, I read it somewhere, maybe in Carls blog, that Rebol place is in a world with distributed systems and network communications between different machines and programs}
    sent: "2017-03-21T15:54:54.026Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d14c82f7f7d481043e3786"
    text: {That I can write in this edit area and, with a few limitations on syntax, the computer can easily understand what I write. My text isn't filled with double quotes, curly braces, and semicolons. You can read it easily, but someone could write a program to do so as well, understanding it at the token level. I can include special commands, which may not stand out much, or at all, to control things, or get information back from the machine. I can "talk" to the machine. As a programmer, I can then write programs that "talk" to each other, and reason about them in a very different way. And this will only become more important as we write more distributed systems.}
    sent: "2017-03-21T15:53:38.758Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d14ba2fe6a638b1aeb7f99"
    text: {I also heard about "messaging language" before, but didn't really understand it}
    sent: "2017-03-21T15:49:54.117Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d14b866d7eb18404ef0c46"
    text: {> direct communication of person to machine, or program to program.}
    sent: "2017-03-21T15:49:26.270Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d14b78b809ca5f4a696923"
    text: "@greggirwin could you elaborate on that?"
    sent: "2017-03-21T15:49:12.817Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d14b362215a08f04acc787"
    text: {Carl said that Rebol was designed as a messaging language, for the exchange of information between people and machines. When I first learned that, I thought in terms of network messaging, which it can do of course. It took some time before I realized that it also meant the direct communication of person to machine, or program to program.}
    sent: "2017-03-21T15:48:06.294Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d14911fe6a638b1aeb71bd"
    text: {```^/; @JacobGood's closure func^/closure: func [^/^-vars [block!] ^/^-spec [block!] ^/^-body [block!]^/][^/^-; Can't use `function` here, because it will collect set-words^/^-; in the body, which may be closure vars.^/^-func spec compose [(bind body context vars)]^/]^/cycler: func [block [block!]][^/^-closure compose/only [block: (block)] [/reset] [^/^-^-if any [reset  tail? block] [block: head block]^/^-^-also  first block  block: next block^/^-]^/]^/test-cyc: func [cyc-fn [function!]][loop 7 [probe cyc-fn]]^/cyc: cycler [1 2 3 4 5]^/test-cyc :cyc^/cyc: cycler [a #test 5x5 8 "key" %file 10%]^/test-cyc :cyc^/cyc: cycler [[a #test] [5x5 8] ["key" %file 10%]]^/test-cyc :cyc^/```}
    sent: "2017-03-21T15:38:57.674Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d13a615917e26076baef9c"
    text: {it's dangerous to write "Lisp" all in lowercase :alien: }
    sent: "2017-03-21T14:36:17.540Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d1293c6d7eb18404ee4f40"
    text: {@9214  This is why you have people who are seemingly religious, proselytizing their language in the lisp community. Once you play around with a programmable programming language, it is really hard to be at peace in other languages.}
    sent: "2017-03-21T13:23:08.053Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58d10ece6701410e585d78a8"
    text: {resonates with me somehow, I miss old times of *personal* systems, when you could see whole picture all by yourself and be in full control :(}
    sent: "2017-03-21T11:30:22.043Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d108e56d7eb18404edbaf0"
    text: {@9214 http://www.amigareport.com/ar501/feature1.html}
    sent: "2017-03-21T11:05:09.352Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d105f4fe6a638b1aea142d"
    text: {and which things inspired Carl to create Rebol btw?}
    sent: "2017-03-21T10:52:36.509Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d0fe51fe6a638b1ae9eea2"
    text: {Many languages where created with a "problem to solve" (PHP, ADA, Java...) or a "programming paradigm" (C++, Java too...) in mind. Rebol is data oriented for sure, ence parsing and DSL.}
    sent: "2017-03-21T10:20:01.651Z"
    editedAt: "2017-03-21T10:20:14.424Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58d0fb568fa1633954fe4ecd"
    text: {Lot of languages are trying to be better C. There is nothing wrong about it, but that's all they are. C with some newer stuff. And that's the better case, some languages are just random stuff glued together, look at PHP.}
    sent: "2017-03-21T10:07:18.159Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d0fa286701410e585d1c34"
    text: {They probably just haven't been thinking enough about it.}
    sent: "2017-03-21T10:02:16.590Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d0f567fe6a638b1ae9c52f"
    text: { Redbol implementation is so logical, to-the-point and practical ito data handling. In the end, everything in life is data until you decide what you want to do with it. Where and why... did so many language implementations go wrong/astray?}
    sent: "2017-03-21T09:41:59.632Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58d0e5ea6d7eb18404ed18ad"
    text: "@dockimbel "
    sent: "2017-03-21T08:35:54.793Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58d0cbd6b809ca5f4a671fbb"
    text: {First value, IMO. I do not like that using refinement would switch the function from returning value to not returning one.}
    sent: "2017-03-21T06:44:38.779Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d0cb782215a08f04aa6d52"
    text: {Even with the above closure model, if we have a `/reset` refinement, should it `exit` or should it return the first value, which would let us use `any [reset  tail? block]` and remove some redundancy?}
    sent: "2017-03-21T06:43:04.863Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d0caba2215a08f04aa6ab7"
    text: {@9214, the other problem with Red is that you always think "How else could I....?"}
    sent: "2017-03-21T06:39:54.936Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d0ca38590d72c864ec73d1"
    text: {@gltewalt, another way to write a simple cycler:^/```^/; @JacobGood's closure func^/closure: func [^/^-vars [block!] ^/^-spec [block!] ^/^-body [block!]^/][^/^-; Can't use `function` here, because it will collect set-words^/^-; in the body, which may be closure vars.^/^-func spec compose [(bind body context vars)]^/]^/^/cycler: func [block [block!]][^/^-closure compose/only [block: (block)] [/reset] [^/^-^-if reset [block: head block  exit]^/^-^-if tail? block [block: head block]^/^-^-also  first block  block: next block^/^-]^/]^/test-cyc: func [cyc-fn [function!]][loop 7 [probe cyc-fn]]^/^/cyc: cycler [1 2 3 4 5]^/test-cyc :cyc^/cyc: cycler [a #test 5x5 8 "key" %file 10%]^/test-cyc :cyc^/cyc: cycler [[a #test] [5x5 8] ["key" %file 10%]]^/test-cyc :cyc^/```^/}
    sent: "2017-03-21T06:37:43.984Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d0ad0bf7f7d481043b5f9c"
    text: {@9214 ^/> @dockimbel do you realize that  after Red  I won't be able to write in any other language without tears of despair (except maybe for Rebol ancestors?) :joy: ^/^/Indeed, that is the biggest drawback of using Red, once the infection spreads, you are ~~zomb~~red-ified for good. ;-)}
    sent: "2017-03-21T04:33:15.782Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d042b2b809ca5f4a653f6d"
    text: "That is awesome. :smile: "
    sent: "2017-03-20T20:59:30.545Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d03fde6701410e585a70eb"
    text: {```^/cycler: context [^/^-_data: none^/^-_key:  none^/^-set-data: func [data [block!]][^/^-    _data: copy data^/^-    ; Should we make sure the data conforms to our needs?^/^-^-;if (last data) <> (first data) [^/^-^-^-append/only _data first _data^/^-^-;]^/^-^-_key: last data^/^-^-^/^-]^/^-take: does [_key: select/only _data _key]^/^-test: does [loop length? _data [probe take]]^/]^/^/cyc: make cycler []^/cyc/set-data [0 1 2 3 4 5 6 7 8 9]^/cyc/test^/^/cyc: make cycler []^/cyc/set-data [a #test 5x5 8 "key" %file 10%]^/cyc/test^/^/cyc: make cycler []^/cyc/set-data [[a #test] [5x5 8] ["key" %file 10%]]^/cyc/test^/```}
    sent: "2017-03-20T20:47:26.687Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d03d2f2215a08f04a8782e"
    text: {With a small mod to `cycle`, using `select/only` we can support blocks too.^/```^/>> vals:  [[a #test] [5x5 8] ["key" %file 10%] [a #test]]^/== [[a #test] [5x5 8] ["key" %file 10%] [a #test]]^/>> val: vals/1^/== [a #test]^/>> cycle: func [v][select/only vals v]^/== func [v][select/only vals v]^/>> loop length? vals [probe val: cycle val]^/[5x5 8]^/["key" %file 10%]^/[a #test]^/[5x5 8]^/== [5x5 8]^/```}
    sent: "2017-03-20T20:35:58.950Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d03c515917e26076b6ebf5"
    text: {Yup, round-robin distribution has never been easier. }
    sent: "2017-03-20T20:32:17.406Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d03be7a84f611959c67489"
    text: "that's cool"
    sent: "2017-03-20T20:30:31.661Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d03b9e5917e26076b6e897"
    text: {@maximvl, no, because we're using `select`:^/```^/>> vals:  [a #test 5x5 8 "key" %file 10% a]^/== [a #test 5x5 8 "key" %file 10% a]^/>> val: 'a^/== a^/>> cycle: func [v][select vals v]^/== func [v][select vals v]^/>> loop 7 [probe val: cycle val]^/#test^/5x5^/8^/"key"^/%file^/10%^/a^/== a^/```}
    sent: "2017-03-20T20:29:17.986Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d03aa958ad4eb028353444"
    text: {@greggirwin not limited to numbers? you need to return next number, needn't you?}
    sent: "2017-03-20T20:25:13.265Z"
    editedAt: "2017-03-20T20:25:23.514Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d03a53f7f7d4810439a658"
    text: "It's far from true, but thanks, @greggirwin :)"
    sent: "2017-03-20T20:23:47.152Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d03a2ba84f611959c66bdf"
    text: {The cycle trick isn't limited to numbers of course.}
    sent: "2017-03-20T20:23:07.178Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d039cb6701410e585a573f"
    text: "No shame in being beat by the best @rebolek."
    sent: "2017-03-20T20:21:31.735Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d039b77b3f37e75419ae7d"
    text: {@gltewalt @9214 ^/```^/>> nums:  [0 1 2 3 4 5 6 7 8 9 0]^/== [0 1 2 3 4 5 6 7 8 9 0]^/>> cycle-n: func [n][select nums n]^/== func [n][select nums n]^/>> n: 0^/== 0^/>> n: cycle-n n^/== 1^/>> n: cycle-n n^/== 2^/>> n: cycle-n n^/== 3^/...^/>> n: cycle-n n^/== 9^/>> n: cycle-n n^/== 0^/```}
    sent: "2017-03-20T20:21:11.563Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d0393c5917e26076b6dbe9"
    text: "okey, interesting, thanks!"
    sent: "2017-03-20T20:19:08.431Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d039317b3f37e75419aafb"
    text: "@greggirwin sorry Gregg ;)"
    sent: "2017-03-20T20:18:57.400Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d039238fa1633954fb7275"
    text: "Always, always beat by Bolek. :^^)"
    sent: "2017-03-20T20:18:43.734Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d03922b809ca5f4a6510d0"
    text: "In Red/System, it is pointer."
    sent: "2017-03-20T20:18:42.660Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58d0391b2215a08f04a861a0"
    text: {In Redbol, it returns value, it does not evaluate the word.}
    sent: "2017-03-20T20:18:35.536Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d039125917e26076b6da78"
    text: {`get-word!` meaning is different at the R/S level.}
    sent: "2017-03-20T20:18:26.556Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d03907b809ca5f4a65103e"
    text: {@maximvl it has different meaning in Red (and Rebol) and in Red/System.}
    sent: "2017-03-20T20:18:15.823Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d038ac590d72c864ea6360"
    text: {@rebolek yes, but I think I saw this is Rebol and regular Red too}
    sent: "2017-03-20T20:16:44.859Z"
    editedAt: "2017-03-20T20:16:52.329Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d03899a84f611959c66536"
    text: "That is Red/System code, isn't it?"
    sent: "2017-03-20T20:16:25.878Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d038866701410e585a51c4"
    text: {what is the reason for this? why just `c` is not enough?}
    sent: "2017-03-20T20:16:06.128Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d038676701410e585a5129"
    text: {reading code sometimes I see this kind of get-word usage:^/```^/emit: func [c [byte!]][^/^-write stdout :c 1^/]^/```}
    sent: "2017-03-20T20:15:35.230Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d0174e8fa1633954fac7e7"
    text: "series are perfect for it probably.  "
    sent: "2017-03-20T17:54:22.762Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d016f68fa1633954fac595"
    text: "maybe port this one to Red/Rebol"
    sent: "2017-03-20T17:52:54.825Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d016e6a84f611959c5bd25"
    text: "Cool"
    sent: "2017-03-20T17:52:38.290Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d016c36701410e5859a6c8"
    text: "http://shop.oreilly.com/product/0636920025481.do"
    sent: "2017-03-20T17:52:03.216Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d0169ba84f611959c5bb0f"
    text: {I actually want to try either a turing tarpit interpreter or some computational model (lambda calculus will do?)}
    sent: "2017-03-20T17:51:23.609Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d016382215a08f04a7b22e"
    text: {One advancing pointer for the ones column, one advancing pointer for the tens column, etc}
    sent: "2017-03-20T17:49:44.721Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d015fe58ad4eb028348483"
    text: {If you are at tail, make a new number that is the second index of the block followed by the head of the block. When you reach tail again, create a new number of the third index of the block followed by head of the block}
    sent: "2017-03-20T17:48:46.575Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d015f5f7f7d4810438e388"
    text: "ah, got it"
    sent: "2017-03-20T17:48:37.092Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d01555f7f7d4810438e098"
    text: {Sure: find your current number in the block, move the pointer one position forward, return the value. }
    sent: "2017-03-20T17:45:57.368Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d0150eb809ca5f4a645080"
    text: "@gltewalt could you please elaborate on that?"
    sent: "2017-03-20T17:44:46.758Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d0150b5917e26076b62092"
    text: "Baby machines"
    sent: "2017-03-20T17:44:43.312Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d014ebfe6a638b1ae64a6f"
    text: {You could implement incrementing and decrementing integers just by using this with series traversal and different offsets. [0 1 2 3 4 5 6 7 8 9]}
    sent: "2017-03-20T17:44:11.931Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58d014918fa1633954fabb44"
    text: ":)"
    sent: "2017-03-20T17:42:41.249Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58d01489b809ca5f4a644d79"
    text: {I.e. I'm doomed as a bloatware engineer, in a good way :^^)}
    sent: "2017-03-20T17:42:33.761Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d01303590d72c864e9a936"
    text: {@dockimbel do you realize that  after Red  I won't be able to write in any other language without tears of despair (except maybe for Rebol ancestors?) :joy: }
    sent: "2017-03-20T17:36:03.711Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d012968fa1633954fab09e"
    text: "Happy to help. :^^)"
    sent: "2017-03-20T17:34:14.208Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d01283590d72c864e9a665"
    text: {Because each type has a cell header taking space, there is really only 96 bits of data space available in a slot.}
    sent: "2017-03-20T17:33:55.703Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d0126cb809ca5f4a64435d"
    text: "ooooh, I see now, thank you  @greggirwin !"
    sent: "2017-03-20T17:33:32.827Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d011d72215a08f04a79b44"
    text: {%runtime/datatypes/structures.reds shows the structure used for each datatype's value slot.}
    sent: "2017-03-20T17:31:03.834Z"
    editedAt: "2017-03-20T17:31:13.495Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d01124b809ca5f4a643b56"
    text: {Or is it always a 2^^7 bit reference to some scalar value?}
    sent: "2017-03-20T17:28:04.162Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d01095fe6a638b1ae631c9"
    text: {And every value slot can store either scalar value or a reference to another value container (or to a "value slot part" of another container)?}
    sent: "2017-03-20T17:25:41.551Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d010057b3f37e75418ddbb"
    text: "Yes. head/offset/tail."
    sent: "2017-03-20T17:23:17.539Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d00f50f7f7d4810438c060"
    text: {Bounds checking is done. You can't move past the head or tail.}
    sent: "2017-03-20T17:20:16.317Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d00f3fb809ca5f4a642e17"
    text: {So it's more like `| left boundary | current offset | right boundary |`under the hood?}
    sent: "2017-03-20T17:19:59.586Z"
    editedAt: "2017-03-20T17:20:08.641Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d00ed7fe6a638b1ae6292b"
    text: {Does it have some boundaries inside of it? I.e. "don't go to the left of first `h` and to the right of last `o`"?}
    sent: "2017-03-20T17:18:15.768Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d00e5c5917e26076b5fcc8"
    text: "Correct."
    sent: "2017-03-20T17:16:12.266Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d00a446d7eb18404e9933c"
    text: {"value slot part" is just an offset amount?}
    sent: "2017-03-20T16:58:43.993Z"
    editedAt: "2017-03-20T17:04:04.452Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d00a17a84f611959c57746"
    text: "but w/ different offsets"
    sent: "2017-03-20T16:57:59.794Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d00a026701410e5859662a"
    text: {inside `[a b c d]` all 4 words are slot values, pointing to one shared buffer?}
    sent: "2017-03-20T16:57:38.250Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d009a5a84f611959c57457"
    text: {@maximvl Sure you can, the underlying external buffer is still there, you just moved the starting position inwards.}
    sent: "2017-03-20T16:56:05.513Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d00970fe6a638b1ae60b61"
    text: {It also means that you can have an arbitrary number of series sharing the same external buffer underneath, but with (or without) different starting offsets:^/```lisp^/>> a: "hello"^/== "hello"^/>> b: next a^/== "ello"^/>> c: skip a 3^/== "lo"^/>> d: tail a^/== ""^/>> reduce [a b c d]^/== ["hello" "ello" "lo" ""]^/>> foreach s [a b c d][print index? get s]^/1^/2^/4^/6^/```}
    sent: "2017-03-20T16:55:12.604Z"
    editedAt: "2017-03-20T16:56:38.212Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d00948fe6a638b1ae60ada"
    text: "oh yep, I didn't get the original idea"
    sent: "2017-03-20T16:54:32.335Z"
    editedAt: "2017-03-20T16:54:42.312Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d009407b3f37e75418bc72"
    text: "`a: head a`"
    sent: "2017-03-20T16:54:24.278Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d00938590d72c864e97939"
    text: "I believe he can"
    sent: "2017-03-20T16:54:16.040Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d009176d7eb18404e98d2e"
    text: "wait, can't you `head a` afterwards?"
    sent: "2017-03-20T16:53:43.808Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58d008aea84f611959c56dff"
    text: {Series (like blocks) have a "value slot part" (where the starting offset resides) and an external buffer. When a series is pushed on the stack ("by value", like every other type), only the value slot part is copied on the stack. This means that is a transformation of that value slot happens, if you don't save the returned value, it will be lost:^/```lisp^/>> a: "hello"^/== "hello"^/>> next a^/== "ello"^/>> a^/== "hello"^/>> a: next a^/== "ello"^/>> a^/== "ello"^/```}
    sent: "2017-03-20T16:51:58.239Z"
    editedAt: "2017-03-20T16:52:29.614Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d0084b590d72c864e97502"
    text: {@geekyi check [this one](https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b), I've edited it yesterday}
    sent: "2017-03-20T16:50:19.136Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d007d1a84f611959c56859"
    text: {While stack push/pop is more like a melting snowflake :snowflake: (ah, how poetic)}
    sent: "2017-03-20T16:48:17.947Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d0078a58ad4eb0283436ea"
    text: {And then I `bind` a block, every `any-word!` scalar value in it will be rebinded (i.e. its context reference will be changed), but block will still reside in a memory, because there's still a pointer to it?}
    sent: "2017-03-20T16:47:06.481Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d006f6fe6a638b1ae5fe16"
    text: {A reference to a block can be a word or any other value container (e.g., another block). A rootless root (as you say in your diagram) exists internally, it is a block where we store references to core values. That is the seed for the GC, to start marking live values.}
    sent: "2017-03-20T16:44:38.549Z"
    editedAt: "2017-03-20T16:46:28.381Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d006f0fe6a638b1ae5fdfc"
    text: {Every slot is 128 bit size, it's either scalar value or another series (i.e. pointer to another location in memory)?}
    sent: "2017-03-20T16:44:32.508Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d006b46d7eb18404e9819f"
    text: {It is an array of value slots, stored contiguously in memory (though, an alternative implementation could use linked-lists, but that is not great performance-wise for the common use-cases).}
    sent: "2017-03-20T16:43:32.971Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d006a27b3f37e75418abdf"
    text: {and there should be a pointer to this `block` (i.e. some word should be setted to point to that block), or it will be wiped out with GC (?)}
    sent: "2017-03-20T16:43:14.044Z"
    editedAt: "2017-03-20T16:43:21.990Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58d00652a84f611959c55fbf"
    text: "okay, so `block` is essentialy a chunk of memory?"
    sent: "2017-03-20T16:41:54.072Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d006055917e26076b5d194"
    text: {I've skimmed through wikibooks and really like all the details, need to dig further in that}
    sent: "2017-03-20T16:40:37.749Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d006047b3f37e75418a80b"
    text: {Looks like the same one from https://github.com/revault/rebol-wiki/wiki/Bindology#Acknowledgments}
    sent: "2017-03-20T16:40:36.242Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d005f9590d72c864e9668f"
    text: {@maximvl ^/> why not just use `c` ?^/^/Works too, no difference with `:c` for objects as they evaluate to themselves, though the get-word is required in case of functions (or in the not-too-distant future, closures).}
    sent: "2017-03-20T16:40:25.814Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58d005d45917e26076b5d07b"
    text: {Yeah. I like the wikibooks one better: https://en.wikibooks.org/wiki/Rebol_programming/Advanced/Bindology}
    sent: "2017-03-20T16:39:48.451Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d005c0590d72c864e96528"
    text: "kinda old?"
    sent: "2017-03-20T16:39:28.379Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d005b17b3f37e75418a64e"
    text: {that guide is nice but: ^/>auteur: Patrick Philipot^/date: 10-mar-2002, 11-mar-2002^/version: 1.01}
    sent: "2017-03-20T16:39:13.610Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d00569f7f7d48104388e04"
    text: "@geekyi http://www.pat665.free.fr/doc/bind.html ?"
    sent: "2017-03-20T16:38:01.111Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d005558fa1633954fa65e1"
    text: "Btw, did you read about bindology?"
    sent: "2017-03-20T16:37:41.765Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d005476d7eb18404e97a3d"
    text: {@9214 ^/> and there should be much easier visual metaphor for that^/^/I think *context* is one of the few bits of symantics that's hidden from the user that doesn't have a mapping from literal `syntax -> symantics`, in a very high level way}
    sent: "2017-03-20T16:37:27.182Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58d0052358ad4eb028342859"
    text: {Because, since `any-word!` is a scalar value, it will be pushed onto stack, rebounded, and then poped off. To save that rebinding I should `set` that word to its rebinded alternative.^/On the other hand, `series!` is a non-scalar type, it's passed by a refference... a-a-and? I don't get the whole mechanism :( How do `word`s reside inside a container?}
    sent: "2017-03-20T16:36:51.107Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d0035c6701410e5859432e"
    text: {And for that change to be persistent, `word` should be enclosed in a `series`?}
    sent: "2017-03-20T16:29:16.182Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d003077b3f37e7541897bc"
    text: {So, the only thing I can change in a `word` is it's `context! pointer` part? And to change the value of a word, one should alter the entry in a `context` to which word refers?}
    sent: "2017-03-20T16:27:51.375Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d002c7a84f611959c54c10"
    text: {I think they're the same, glancing at %interpreter.reds}
    sent: "2017-03-20T16:26:47.898Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d001e1f7f7d48104387ba1"
    text: "`same?` says they're the same, but..."
    sent: "2017-03-20T16:22:57.495Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d001a2b809ca5f4a63e53a"
    text: {`c` evaluates but `:c` doesn't, dunno if there's a difference for a context}
    sent: "2017-03-20T16:21:54.165Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d0017a6d7eb18404e963bd"
    text: {I left the `context? ...` part, as it related to `in`, but we could remove it. `c` and `:c` should be the same for a context. Maybe Nenad can confirm is there are any subtle differences.}
    sent: "2017-03-20T16:21:14.832Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58d000486d7eb18404e95d0f"
    text: {and there should be much easier visual metaphor for that}
    sent: "2017-03-20T16:16:08.672Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58d00018590d72c864e94539"
    text: {@geekyi are you sure that they are correct? Something in it buzzes me, since it may mislead someone to apply this flawed model proposed by me :confused: }
    sent: "2017-03-20T16:15:20.550Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfffa77b3f37e754188618"
    text: {is there any difference? why use `context? in c 'a`}
    sent: "2017-03-20T16:13:27.372Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfff9858ad4eb02834094f"
    text: {```^/red>> c: context [a: 2]^/== make object! [^/    a: 2^/]^/red>> new: bind 'a c^/== a^/red>> print get new^/2^/```}
    sent: "2017-03-20T16:13:12.366Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfff386701410e58592ec5"
    text: "why not just use `c` ?"
    sent: "2017-03-20T16:11:36.004Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfff326d7eb18404e9583f"
    text: {@greggirwin ^/>Also, you can use :c instead of context? in c 'a. They are strictly equivalent.^/^/I didn't get this part also in original discussion}
    sent: "2017-03-20T16:11:30.844Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cffa496701410e58591707"
    text: {Whew! Good stuff. I updated https://github.com/red/red/wiki/Guru-Meditations with extracts. If someone would review the section on binding near the end, that would be great.}
    sent: "2017-03-20T15:50:32.999Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cff63e5917e26076b57aad"
    text: {@9214 you really should post an answer with those nice diagrams ;)}
    sent: "2017-03-20T15:33:18.992Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cff5882215a08f04a70670"
    text: {Also,  is different? ^/```red^/[^/    get get-word!^/    set set-word!^/    quote lit-word!^/]^/```}
    sent: "2017-03-20T15:30:16.129Z"
    editedAt: "2017-03-20T15:30:52.887Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58cff5318fa1633954fa1679"
    text: {next ^/> BTW, you can just use `:a` instead of `context? in c 'a` (strictly equivalent).^/}
    sent: "2017-03-20T15:28:49.551Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cff486f7f7d48104383659"
    text: {I posted a question on the [differences between `in` and `bind`](https://stackoverflow.com/questions/42907481/how-is-bind-and-in-different)}
    sent: "2017-03-20T15:25:58.672Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cfd2876d7eb18404e86df6"
    text: {Okay, I think that's it. [gist v3](https://gist.github.com/9214/1dd30a88383a3e46edf45e33e9def3a7).}
    sent: "2017-03-20T13:00:55.265Z"
    editedAt: "2017-03-20T13:01:18.139Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfcfd4b809ca5f4a62d950"
    text: {@geekyi please do, as I'm still not sure that I've got everything right, plus I'm not a native english speaker, hence my explanations may be more clumsier than they should be :mortar_board: }
    sent: "2017-03-20T12:49:24.082Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfcf108fa1633954f94600"
    text: "I will post some questions of myself"
    sent: "2017-03-20T12:46:08.781Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cfcedf590d72c864e84989"
    text: {@9214 no, don't need points, also can post anonymously (but I don't recommend that)}
    sent: "2017-03-20T12:45:19.668Z"
    editedAt: "2017-03-20T12:45:52.087Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58cfced3b809ca5f4a62d32f"
    text: {And for marketing purposes also. You can link from an answer to a blogpost or wiki for more details}
    sent: "2017-03-20T12:45:07.108Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cfceae8fa1633954f9445f"
    text: {@geekyi I don't mind if you'll do that, I have 0 experience with SO (I think that I should have some points to post questions or what?)}
    sent: "2017-03-20T12:44:30.411Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfce916d7eb18404e85aab"
    text: {There's lots of documentation scattered everywhere}
    sent: "2017-03-20T12:44:01.066Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cfce76a84f611959c43fa0"
    text: "Yeah, just SO has quite a lot of exposure"
    sent: "2017-03-20T12:43:34.053Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cfce58f7f7d48104376dfd"
    text: {@geekyi IMO it would be nice to organise all that stuff on wiki or in red-lang.org blog post}
    sent: "2017-03-20T12:43:04.648Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfce3758ad4eb0283304fe"
    text: "I've learnt much today"
    sent: "2017-03-20T12:42:31.204Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cfce28b809ca5f4a62d097"
    text: {@9214 you should really put all that on stackoverflow as a question..}
    sent: "2017-03-20T12:42:16.890Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cfcddf6701410e58583bea"
    text: {What if you load more files? How should each function "know" from which file it was? What if the function is dynamically constructed?}
    sent: "2017-03-20T12:41:03.729Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfcd39590d72c864e8425d"
    text: {so there's no other way for a script to know a name of a file in which it resides but to specify that filename inside of a script itself?}
    sent: "2017-03-20T12:38:17.185Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfccc201bcf42439a57b06"
    text: {@9214 How do you want to load a file which name you do not know?}
    sent: "2017-03-20T12:36:18.796Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfcc92b809ca5f4a62c8cf"
    text: {Hm, but that means that I should know exact name of a file before I'll load its `file` entry from a header :confused:, what's the point?}
    sent: "2017-03-20T12:35:30.176Z"
    editedAt: "2017-03-20T12:36:04.858Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfcafb7b3f37e754177e54"
    text: {Populating the header: `Red [File: %1337.red]`, though, Red does not yet store the header info in system object (Rebol does).}
    sent: "2017-03-20T12:28:43.729Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfcaf9ef369b900482f56a"
    text: {```^/c> script: load/header %json.red^/== [Red [^/    Title: "JSON parser"^/    File: %json.red^/    Author: ...^/c> script/2^/== [^/    Title: "JSON parser"^/    File: %json.red^/    Author: "Nena...^/c> script/2/file^/== %json.red^/```}
    sent: "2017-03-20T12:28:41.440Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfcaf64ec6efa73051c03e"
    text: "`load/header`"
    sent: "2017-03-20T12:28:38.609Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfcaba5917e26076b49f31"
    text: {and how could I make this trick more general, i.e. `h4x0r: load <somehow construct file name from the header or some metanifo?>`}
    sent: "2017-03-20T12:27:38.265Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfca7e6d7eb18404e84897"
    text: "With great power... ;-)"
    sent: "2017-03-20T12:26:38.213Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfca61a84f611959c42a49"
    text: {the power of the gods at my fingertips :sparkles: :point_left: }
    sent: "2017-03-20T12:26:09.911Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfca226d7eb18404e846cb"
    text: "script can load itself! :O"
    sent: "2017-03-20T12:25:06.956Z"
    editedAt: "2017-03-20T12:25:40.261Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58cfc9fdf7f7d48104375870"
    text: {Yes, if you save that script to `1337.red` file, then:^/```lisp^/h4x0r: load %1337.red^/h4x0r/9: h4x0r/4^/do h4x0r^/```}
    sent: "2017-03-20T12:24:29.859Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfc86ea84f611959c4216e"
    text: {```^/Red [] ; 1^/       ; 2^/a: 1   ; 3^/a: 2   ; 4^/       ; 5^/1336 + <`a` at line 3 inside LOADed block> ; --> 1337^/^/```^/is that possible?}
    sent: "2017-03-20T12:17:50.835Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfc6b9a84f611959c41890"
    text: "ah, no, my bad, it's not about console either"
    sent: "2017-03-20T12:10:33.082Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfc64ba84f611959c4167f"
    text: {should I use `system/console/history` for that? ;)}
    sent: "2017-03-20T12:08:43.889Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfc63b8fa1633954f91944"
    text: "i.e. introspect script block itself"
    sent: "2017-03-20T12:08:27.472Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfc629fe6a638b1ae4b2ee"
    text: {by using `spoon: "take the RED pill"` which was entered in a script later... somehow}
    sent: "2017-03-20T12:08:09.242Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfc5fcf7f7d4810437442d"
    text: {@dockimbel I think I can do it even trickier on `78` line, `bind back tail shelf-with-spoons context [spoon: "take the RED pill"]`}
    sent: "2017-03-20T12:07:24.709Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfc57f8fa1633954f915d5"
    text: {"s(puny)", good one. :+1: :laughing: }
    sent: "2017-03-20T12:05:19.079Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfc3dd58ad4eb02832d5e8"
    text: {okay, I've updated [gist](https://gist.github.com/9214/1dd30a88383a3e46edf45e33e9def3a7), come and see! :alien: }
    sent: "2017-03-20T11:58:21.877Z"
    editedAt: "2017-03-20T11:59:08.927Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfbec88fa1633954f8f726"
    text: {a fork and a knife, but still no spoon! :fork_and_knife: ^/```^/bind back tail shelf-with-spoons make object! [spoon: "take the RED pill"]^/print reduce shelf-with-spoons^/print spoon^/```}
    sent: "2017-03-20T11:36:40.929Z"
    editedAt: "2017-03-20T11:38:56.825Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfbcfe590d72c864e7fc88"
    text: {so, before that part last `spoon` in a block should be rebounded somehow, to keep an old string value?}
    sent: "2017-03-20T11:29:02.303Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfbc325917e26076b457ef"
    text: {Ah, at the end of it I've started to write^/```^/; now, let us make our spoon to be just a "spoon"^/set 'spoon bind 'spoon third contexts ; <-- at this part I've started doubting myself and started a discussion^/print spoon^/^/print reduce shelf-with-spoons^/comment {^/    however, last entry changed too!^/    how can we avoid that? <-- use poke on a series..?^/}^/```}
    sent: "2017-03-20T11:25:38.009Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfbae38fa1633954f8e77d"
    text: {But I've forgot what I actually wanted to accomplish with that :D}
    sent: "2017-03-20T11:20:03.550Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfbaa458ad4eb02832abb8"
    text: {As a matter of fact this discussion beginned from this gist https://gist.github.com/9214/1dd30a88383a3e46edf45e33e9def3a7}
    sent: "2017-03-20T11:19:00.712Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfba94f7f7d48104371142"
    text: {Yes, in any value container (block!, paren!, map!, hash!, context!, ...). Values in Redbol cannot exist outside a value container, even what you write in the console, the input is loaded as a block.}
    sent: "2017-03-20T11:18:44.776Z"
    editedAt: "2017-03-20T11:19:52.403Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfba696d7eb18404e7fddb"
    text: "like `'x`"
    sent: "2017-03-20T11:18:01.502Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfba62fe6a638b1ae4783d"
    text: {@dockimbel but word's values themselves are stored somewhere, right?}
    sent: "2017-03-20T11:17:53.999Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfba602215a08f04a5e233"
    text: "hehe ;-)"
    sent: "2017-03-20T11:17:52.845Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfba44fe6a638b1ae4776b"
    text: {*For no apparent reason Tuvan throat singing comes from my speakers*}
    sent: "2017-03-20T11:17:24.960Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfba3aa84f611959c3df88"
    text: "Yep."
    sent: "2017-03-20T11:17:14.527Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfba2a6d7eb18404e7fd3b"
    text: {`find a in current context` - makes little sense, you can only find value of `a` in context, right?}
    sent: "2017-03-20T11:16:58.642Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb9ec5917e26076b44de6"
    text: {@9214 Precisely, yes. Drop the scopes from the part of your mind you are filling with Redbol. ;-)}
    sent: "2017-03-20T11:15:56.880Z"
    editedAt: "2017-03-20T11:16:41.334Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb9d92215a08f04a5e04a"
    text: {It is, and we really need some good visual ways to explain it, because it it really not complex, just very different.}
    sent: "2017-03-20T11:15:37.384Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb9d56701410e5857e1ef"
    text: {Aaaaah! I thought `bind 'a context` means "find `a` in a *current* context..." but that's BS since there's no **current** context}
    sent: "2017-03-20T11:15:33.218Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfb9ae590d72c864e7ec87"
    text: {I have to admit this is much deeper concept than I saw it in the beginning}
    sent: "2017-03-20T11:14:54.317Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb947f7f7d48104370a11"
    text: "or should I say symbol?)"
    sent: "2017-03-20T11:13:11.561Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb9476d7eb18404e7f8ae"
    text: {@maximvl Yup, I knew that before, but didn't know about instance on the stack}
    sent: "2017-03-20T11:13:11.026Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfb945b809ca5f4a627033"
    text: {I think it is ok to use the term "variable" in Redbol as a shortcut, for convience, but you need to be aware of the binding mechanism and contexts, otherwise, you are building a wrong picture of how words behave.}
    sent: "2017-03-20T11:13:09.332Z"
    editedAt: "2017-03-20T11:13:54.081Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb9318fa1633954f8df57"
    text: {without block you bind only one "instance" of the word}
    sent: "2017-03-20T11:12:49.838Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb925b809ca5f4a626fbd"
    text: {@9214 with block it just binds every corresponsding word inside}
    sent: "2017-03-20T11:12:37.978Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb85958ad4eb02832a1da"
    text: {`bind` does the same job, it's just that words with same symbol are not inter-connected (other than sharing the same symbol ID). A new word (sent to input in the case above) is by default bound to global context, no matter what you did to a previous word with the same spelling. Now you start to realize how far the "variables" concept from other languages can be. ;-)}
    sent: "2017-03-20T11:09:13.691Z"
    editedAt: "2017-03-20T11:12:03.258Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb831b809ca5f4a626c98"
    text: {In fact it puzzled me why `bind` works like I expect with blocks but not with bare-bone words, now I see that (I think)}
    sent: "2017-03-20T11:08:33.447Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfb80ff7f7d48104370536"
    text: {That is the correct picture. Words are instances of symbols.}
    sent: "2017-03-20T11:07:59.515Z"
    editedAt: "2017-03-20T11:08:04.169Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb7f36d7eb18404e7f11c"
    text: {the fact that `a` and `a` are two completely different words, just happend to be named with the same symbol makes total sense now}
    sent: "2017-03-20T11:07:31.419Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb7b5b809ca5f4a626a9a"
    text: {It's beyond fixable, I'm afraid. ;-) Ah, you were talking about the code...}
    sent: "2017-03-20T11:06:29.528Z"
    editedAt: "2017-03-20T11:06:51.440Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb7b3590d72c864e7e3b7"
    text: "you mean `data`, not `code` ;)"
    sent: "2017-03-20T11:06:27.415Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfb7ac58ad4eb028329f10"
    text: ":D"
    sent: "2017-03-20T11:06:20.819Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb7ab7b3f37e754172dfb"
    text: {```^/red>> a: get bind 'a ctx^/== 2^/red>> a^/== 2^/```}
    sent: "2017-03-20T11:06:19.343Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb7a55917e26076b443b6"
    text: "I also can fix it"
    sent: "2017-03-20T11:06:13.975Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb796a88e334071079b73"
    text: ":)"
    sent: "2017-03-20T11:05:58.571Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfb78b7b3f37e754172d1d"
    text: {Congrats, you reached guru-level of understanding, if you look around you now, you can see the source code of the Matrix. :smile: }
    sent: "2017-03-20T11:05:47.547Z"
    editedAt: "2017-03-20T11:07:31.215Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb766b809ca5f4a62696d"
    text: ":D"
    sent: "2017-03-20T11:05:10.706Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb7612215a08f04a5d327"
    text: "Correct!"
    sent: "2017-03-20T11:05:05.703Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb74e5917e26076b44299"
    text: "and binded to system context"
    sent: "2017-03-20T11:04:46.735Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb7495917e26076b44281"
    text: "while in the next input `a` is totally new word"
    sent: "2017-03-20T11:04:41.720Z"
    editedAt: "2017-03-20T11:05:24.144Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb740f7f7d481043700ba"
    text: "Correct, it has no other effect."
    sent: "2017-03-20T11:04:32.341Z"
    editedAt: "2017-03-20T11:04:45.782Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb739590d72c864e7e16a"
    text: {`bind 'a ctx` returns new "a" word binded to `ctx` }
    sent: "2017-03-20T11:04:25.226Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb71cf7f7d4810437003b"
    text: {it explains the example @9214 tried to do above:^/```^/red>> a: 1^/== 1^/red>> ctx: context [a: 2]^/== make object! [^/    a: 2^/]^/red>> get bind 'a ctx^/== 2^/red>> a^/== 1^/```}
    sent: "2017-03-20T11:03:56.245Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb6d158ad4eb028329b3a"
    text: {Right, but it's "looking for any-word! values which symbol exists in the context".}
    sent: "2017-03-20T11:02:41.573Z"
    editedAt: "2017-03-20T11:03:09.880Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb6a1590d72c864e7dcb9"
    text: {does it mean that `bind` called on a block will just traverse a block looking for a values available in a context and bind these words to the context?}
    sent: "2017-03-20T11:01:53.670Z"
    editedAt: "2017-03-20T11:02:16.333Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58cfb687ac314c8a1a6a4a11"
    text: {@dockimbel just as a follow up on this one^/>@9214 You can, you just need to pass a block instead of a single word value to `bind`.}
    sent: "2017-03-20T11:01:27.765Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cfb441f7f7d4810436f249"
    text: {[![tumblr_nt9jfo8IwI1svefdfo6_500.gif](https://files.gitter.im/red/help/Yerj/thumb/tumblr_nt9jfo8IwI1svefdfo6_500.gif)](https://files.gitter.im/red/help/Yerj/tumblr_nt9jfo8IwI1svefdfo6_500.gif)}
    sent: "2017-03-20T10:51:45.547Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb4252215a08f04a5c6ca"
    text: {> The part that doesn't give me the rest is the "everything is data" homoiconic nature of Redbol...^/^/Actually, it is pretty simple, everything is data, and remains data, which is eventually evaluated to produce computations, which results in changed or new data. ;-)}
    sent: "2017-03-20T10:51:17.377Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb32d7b3f37e754171b77"
    text: {@9214 No problem, those Q/A discussions are valuable to others too, and are good inputs for a future Red documentation on that topic.}
    sent: "2017-03-20T10:47:09.586Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb28c590d72c864e7c837"
    text: {@dockimbel Thank you, Nenad! I think I'll go on my own investigations for now, because I'm worrying that I've bothered you too much and constantly disturbing from getting the job done. :smile: ^/^/The part that doesn't give me the rest is the "everything is data" homoiconic nature of Redbol... and lack of any detailed documentation on the internal mechanisms, except for the source codes which I can barely read :D}
    sent: "2017-03-20T10:44:28.071Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfb0fcf7f7d4810436e3d7"
    text: {Yes, "rebound" means you changed the context pointer for that word value.}
    sent: "2017-03-20T10:37:48.046Z"
    editedAt: "2017-03-20T10:38:04.694Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb0df6701410e5857b957"
    text: {To keep a simple picture of it, scalar values can fit in a value slot entirely (128-bit slot), non-scalar values cannot, so they have a "value slot" part and one or several extra buffers. Those extra buffers are shared by default.}
    sent: "2017-03-20T10:37:19.944Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb0cf58ad4eb028327e63"
    text: {And "rebound" means `a: <new-value>`?}
    sent: "2017-03-20T10:37:03.245Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfb0b6ac314c8a1a6a320b"
    text: "Yup, I know that"
    sent: "2017-03-20T10:36:38.884Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfb08c2215a08f04a5b5eb"
    text: {If you want to keep it side-effect free on the argument block, you can use `copy` or the `/copy` refinement of `bind`(which avoids an extra internal copy do be done).}
    sent: "2017-03-20T10:35:56.842Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfafff5917e26076b41fe1"
    text: {`bind` is quite dumb, it will simply process the argument you provide on the stack. As you can only get the return value back from the stack, if you pass a scalar value (word! value in this case) and do not use the returned value (rebound new word), your `bind` call will have produced no effect.}
    sent: "2017-03-20T10:33:35.644Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfaf926d7eb18404e7cad6"
    text: "gee"
    sent: "2017-03-20T10:31:46.104Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfaf17b809ca5f4a624731"
    text: {Words are scalar values, they are "passed by value" on the evaluation stack, so if you bind a word directly, you are binding its instance on the stack, nothing else. When you pass a block, the words in the block are rebound, and if you keep a reference on that block, you can then use the rebound words.}
    sent: "2017-03-20T10:29:43.655Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfaef658ad4eb0283277b6"
    text: {why with `block` the `bind` change is kinda persistent, but without one it has zero effect, just returns a value?}
    sent: "2017-03-20T10:29:10.807Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfae9d6701410e5857b130"
    text: {@dockimbel  :point_up: [20 марта 2017 г., 06:52](https://gitter.im/red/help?at=58cf35f87b3f37e754155d47)}
    sent: "2017-03-20T10:27:41.211Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfae5f6d7eb18404e7c61c"
    text: {```lisp^/a: 0^/one: context [a: 1]^/b: [a]^/print bind b/1 one  ; == 1^/print b             ; == 0 ^/bind b one^/print b             ; == 1^/```}
    sent: "2017-03-20T10:26:39.205Z"
    editedAt: "2017-03-20T10:26:53.835Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfae09590d72c864e7b4ac"
    text: "Right."
    sent: "2017-03-20T10:25:13.680Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfad7c7b3f37e754170420"
    text: {hm, in fact, after `load` phase script itself is a block}
    sent: "2017-03-20T10:22:52.313Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfad5dac314c8a1a6a217a"
    text: {and `block` because `word` can exist only inside a container?}
    sent: "2017-03-20T10:22:21.473Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfad18590d72c864e7afdf"
    text: {@9214 You can, you just need to pass a block instead of a single word value to `bind`.}
    sent: "2017-03-20T10:21:12.649Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfacfd6701410e5857a9f6"
    text: "Or I can but I have missed the point?"
    sent: "2017-03-20T10:20:45.604Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfacd36701410e5857a8f9"
    text: {But why I can't change `context pointer` part to point to some different context, leaving older context entry as it was? ^/^/Say, `a: 1` and `a: 2` are entrys in different context; when I've encountered `a` word which points to the first `a: 1`, why can't I alter this word to point to the second one `a: 2`, leaving `a: 1` as it was without any changes?}
    sent: "2017-03-20T10:20:03.724Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfac7eac314c8a1a6a1dde"
    text: {> And in fact every `any-word!` in my code is more like `| symbol | context! reference | index |` under the hood?^/^/Yes. Those info are stored in the slot occupied by the word in the container (usually `block!` or `paren!`).}
    sent: "2017-03-20T10:18:38.187Z"
    editedAt: "2017-03-20T10:19:24.690Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfabe97b3f37e75416fe27"
    text: {*so words can exist only in those tables* No, symbols can only exist there, words can exist in any value container (blocks for example). Word = symbol + a context pointer. Symbols are context-free, words are context-bound.}
    sent: "2017-03-20T10:16:09.300Z"
    editedAt: "2017-03-20T10:17:49.184Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa98e58ad4eb028325da7"
    text: {And in fact every `any-word!` in my code is more like `| symbol | context! reference | index |` under the hood?}
    sent: "2017-03-20T10:06:06.233Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfa929590d72c864e79f16"
    text: {Yep, table analogy, so words can exist only in those tables? And if word is in a table, then it's bounded to that table (context)?}
    sent: "2017-03-20T10:04:25.279Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfa886f7f7d4810436bec9"
    text: {You can picture a context as just a table with two colums, the left one for symbols, the right once with value slots.}
    sent: "2017-03-20T10:01:42.507Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa80d590d72c864e799df"
    text: {A word value contains a symbol, a context! reference and an index in that context (used as cache). In your last diagram, I don't see what is `system` block compared to `system/words`?}
    sent: "2017-03-20T09:59:41.866Z"
    editedAt: "2017-03-20T10:00:57.559Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa6b85917e26076b3f646"
    text: {I think it's that time when everyone should say "go read some sources, kid!" :baby: }
    sent: "2017-03-20T09:54:00.089Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfa447590d72c864e788bd"
    text: {@dockimbel so in my diagrams the left one model is more accurate or non of them are even close to the real life? I can see that `any-word!` word consists of `symbol!` part (its textual representation), `object!`reference part (pointer to a context) and value part of some type.}
    sent: "2017-03-20T09:43:34.999Z"
    editedAt: "2017-03-20T09:48:16.062Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfa317ac314c8a1a69f5f5"
    text: "@dockimbel :C happens! :wink:"
    sent: "2017-03-20T09:38:31.937Z"
    editedAt: "2017-03-20T09:39:07.051Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfa2fc6d7eb18404e79221"
    text: "Oops, I meant `:c`."
    sent: "2017-03-20T09:38:04.368Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfa2da590d72c864e7834f"
    text: {> BTW, you can just use `:a` instead of `context? in c 'a` (strictly equivalent).^/^/I'm not sure that I've understand that part clearly :confused:}
    sent: "2017-03-20T09:37:30.535Z"
    editedAt: "2017-03-20T09:37:58.003Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf8f03a84f611959c31aff"
    text: {BTW, you can just use `:a` instead of `context? in c 'a` (strictly equivalent).}
    sent: "2017-03-20T08:12:51.766Z"
    editedAt: "2017-03-20T08:13:39.904Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cf8e8fac314c8a1a699ccc"
    text: {@9214 I haven't read the whole discussion, but `bind` or `in` will just rebind the argument value, other words (with same symbol) are unaffected. Each word is an instance of a symbol (internal `symbol!` type), and exists independently of all others. `bind` and `in` will return their arguments bound, you need to use that rebound value in your example:^/```lisp^/c: context [a: 2]^/new: bind 'a (context? in c 'a)^/print new          ; == 2^/print get in c 'a  ; == 2^/```}
    sent: "2017-03-20T08:10:55.266Z"
    editedAt: "2017-03-20T08:11:45.640Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cf85ea2215a08f04a50103"
    text: {That is because you are trying to `print` `a` in default context. Even simpler version:^/```^/c: context [a: 2]^/bind 'a (context? in c 'a)   ; No error here. (parens aren't needed)^/print a  ;there is no a in default context, hence an error occurred^/print get in c 'a  ; == 2^/```^/^/```^/c: context [a: 2]^/b: in c 'a  ;b bounds to c *now*^/get b  ; == 2^/^/context? b ; == make object! [a: 2]^/```}
    sent: "2017-03-20T07:34:02.883Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58cf5ae47b3f37e75415cec5"
    text: {For clarity^/```^/c: context [a: 2]^/a: 1^/```}
    sent: "2017-03-20T04:30:28.508Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf56c858ad4eb0283140f9"
    text: {?^/[![unnamed01313123123123.png](https://files.gitter.im/red/help/BgrL/thumb/unnamed01313123123123.png)](https://files.gitter.im/red/help/BgrL/unnamed01313123123123.png)}
    sent: "2017-03-20T04:12:56.846Z"
    editedAt: "2017-03-20T04:13:09.717Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf561b2215a08f04a46517"
    text: "`block` is kinda misleading though"
    sent: "2017-03-20T04:10:03.595Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf55f705a31d5a4a76aaab"
    text: {I believe it is the left one based on previous explanations, to think of a context as a block of words.}
    sent: "2017-03-20T04:09:27.460Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58cf55bdfe6a638b1ae2ff84"
    text: {Sherlock `Word`es and Doctor `Bind`son, or "Zen and The Art of Scope Maintenance: An Inquiry into `Context`s" :bulb: }
    sent: "2017-03-20T04:08:29.059Z"
    editedAt: "2017-03-20T04:10:54.769Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf500a05a31d5a4a769990"
    text: "which one is correct? Left one?"
    sent: "2017-03-20T03:44:10.109Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf4ff86701410e5856599a"
    text: {[![unnamed021312.png](https://files.gitter.im/red/help/qu9b/thumb/unnamed021312.png)](https://files.gitter.im/red/help/qu9b/unnamed021312.png)}
    sent: "2017-03-20T03:43:52.457Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf4ef6b809ca5f4a60f4a6"
    text: "I.e. there's no external refference to it?"
    sent: "2017-03-20T03:39:34.707Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf4ec37b3f37e75415aa7c"
    text: {Yes, every context is a dictionary with `word -- meaning` pairs. Does that mean that actual `word` is that exact `word` part inside `word -- meaning` pair?}
    sent: "2017-03-20T03:38:43.350Z"
    editedAt: "2017-03-20T03:39:47.447Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf4e5fa84f611959c2497d"
    text: {As I understand,  a word exists in a context. One good explanation that I have read, is that each context is like a dictionary, ```a``` in one context can mean 1, in another context it can mean ```"This is mine."```.}
    sent: "2017-03-20T03:37:03.419Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58cf4dd2fe6a638b1ae2eb6e"
    text: {because if a `word!` value is something external to a `context`, then I don't get why I can't change its pointer and make it refer to a different context where word will have different value (meaning)}
    sent: "2017-03-20T03:34:42.549Z"
    editedAt: "2017-03-20T03:37:14.257Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf4d9005a31d5a4a769124"
    text: {Or... I think my notion of `word`s is completely wrong. I know that it's a structure with a text representation and a pointer to the context, but... uhm... do they "exist" *inside* or *outside* of contexts?}
    sent: "2017-03-20T03:33:36.205Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf4c8d6d7eb18404e65ae6"
    text: {It could be that I misunderstand bind more than you :-)}
    sent: "2017-03-20T03:29:17.069Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58cf4bf6a84f611959c24381"
    text: {Perhaps I've misunderstood what "binds" actually mean}
    sent: "2017-03-20T03:26:46.707Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58cf496b590d72c864e64f64"
    text: {`a:` is "context dependent", while `set` is not?}
    sent: "2017-03-20T03:15:55.987Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf4946a84f611959c23bdc"
    text: {and ^/```text^/red>> b^/== 2^/red>> get 'b^/== 2^/red>> get 'a^/*** Script Error: a has no value^/*** Where: get^/red>> get in o 'a^/== 1^/```}
    sent: "2017-03-20T03:15:18.359Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58cf491f7b3f37e754159b6a"
    text: {i.e. `set 'b 2` in any context is the same as `system/words/b: 2`?}
    sent: "2017-03-20T03:14:39.738Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf48aff7f7d4810435649f"
    text: {@9214 Not quite:^/```text^/red>> o: make object! [ a: 1 set 'b 2]^/== make object! [^/    a: 1^/]^/red>> o/a^/== 1^/red>> o/b^/*** Script Error: cannot access b in path o/b^/*** Where: catch^/red>> b^/== 2^/```}
    sent: "2017-03-20T03:12:47.258Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58cf46a47b3f37e754159133"
    text: "`get 'a` == `:a`"
    sent: "2017-03-20T03:04:04.186Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf468eb809ca5f4a60df55"
    text: "`set 'a 3` is the same as `a: 3`, right?"
    sent: "2017-03-20T03:03:42.152Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf44a4ac314c8a1a68b425"
    text: {Note that I have a different perspective that may be wrong; my understanding of `bind` is from `in`}
    sent: "2017-03-20T02:55:32.260Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf43bb6701410e585639f9"
    text: "@geekyi :+1:"
    sent: "2017-03-20T02:51:39.497Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf4356b809ca5f4a60d5bc"
    text: "@9214 https://github.com/red/red/issues/2249"
    sent: "2017-03-20T02:49:58.065Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf3e54590d72c864e62d25"
    text: "Maybe that deserves a proper question"
    sent: "2017-03-20T02:28:36.672Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf3d9d2215a08f04a41f4c"
    text: "> as an inversion of `bind` parameter order^/:O"
    sent: "2017-03-20T02:25:33.062Z"
    editedAt: "2017-03-20T02:25:52.903Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3cacfe6a638b1ae2bb38"
    text: {[What is `in`?](https://stackoverflow.com/questions/21059228/how-to-use-in-with-a-block-instead-of-an-object/39812409#comment66916104_39812409)}
    sent: "2017-03-20T02:21:32.260Z"
    editedAt: "2017-03-20T02:23:41.396Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf3c89f7f7d48104354126"
    text: {I know how `bind/copy` is used on blocks (see p 3.4 [here](http://www.pat665.free.fr/doc/bind.html)), not sure how it can help with `word`s though}
    sent: "2017-03-20T02:20:57.881Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3c47b809ca5f4a60c1ae"
    text: {I don't know yet, I'm still learning like you :smile: }
    sent: "2017-03-20T02:19:51.451Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf3c206d7eb18404e6288a"
    text: "@geekyi a-a-and..?"
    sent: "2017-03-20T02:19:12.561Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3be96d7eb18404e627de"
    text: "@9214 `bind` does have refinement `/copy`"
    sent: "2017-03-20T02:18:17.202Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf3bc3590d72c864e626da"
    text: {> `(get in c 'a) = (get bind 'a c)`^/^/Exactly :smile:  if there was a `flip` word to flip arguments..}
    sent: "2017-03-20T02:17:39.937Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf3bbda84f611959c213b5"
    text: {But I don't think that `in` and `bind` are the same thing}
    sent: "2017-03-20T02:17:33.333Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3b51f7f7d48104353f18"
    text: {They both returning the same context, I can see that^/```^/Red []^/^/c: context [a: 2]^/a: 1^/^/print equal? (probe context? in c 'a) (probe context? bind 'a c)^/```}
    sent: "2017-03-20T02:15:45.407Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3af26d7eb18404e6241c"
    text: {Okay, let me show my trail of thought:^/* We have two separate contexts, global and local.^/* In global context we have an entry `a: 1`, but in local we have `a: 2`.^/* By default `a` word is bounded to a global context, there it has associated entry `a: 1`, hence it's value is `1`.^/* If I want to change `a` binding, I should use `bind 'a local-context`. Now, in this local context, `a` has associated entry `a: 2`, hence its value should be `2`.^/* But at the same time there's still an `a: 1` entry in a global context to which I can revert back with `bind 'a global-context`.^/* ???}
    sent: "2017-03-20T02:14:10.174Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3aef6701410e58561f55"
    text: {```^/Red []^/^/c: context [a: 2]^/a: 1^/^/probe context? bind 'a c^/```}
    sent: "2017-03-20T02:14:07.467Z"
    editedAt: "2017-03-20T02:14:17.322Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf3a99ac314c8a1a6896b7"
    text: {> just for sanity check `print :in = :bind` :smile: ^/^/It's not the exact same thing}
    sent: "2017-03-20T02:12:41.094Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf39d16701410e58561cdd"
    text: {just for sanity check `print :in = :bind` :smile: }
    sent: "2017-03-20T02:09:21.587Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3998fe6a638b1ae2b41e"
    text: "and if I'll evaluate that `a` I'll get `2`"
    sent: "2017-03-20T02:08:24.453Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3986a84f611959c20ba7"
    text: "Wait.. Let me get on my pc to check.. "
    sent: "2017-03-20T02:08:06.212Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf3984b809ca5f4a60b881"
    text: "but value is `2` and it returns `a`"
    sent: "2017-03-20T02:08:04.818Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf393a2215a08f04a41385"
    text: {@9214 that code says.. What is the value of `'a` `in` the context `c`}
    sent: "2017-03-20T02:06:50.616Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf39192215a08f04a4133e"
    text: ":worried: "
    sent: "2017-03-20T02:06:17.836Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf389f6701410e58561971"
    text: {But turns out to be same as `bind` but positions reversed. So `bind` itself might not mean what you think.. }
    sent: "2017-03-20T02:04:15.801Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf386ea84f611959c208c4"
    text: {```^/Red []^/^/c: context [a: 2]^/a: 1^/^/probe context? in c 'a^/```}
    sent: "2017-03-20T02:03:26.761Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3849ac314c8a1a68909b"
    text: {a word with a pointer to a specific context from which it was... ehm... `in`ned?}
    sent: "2017-03-20T02:02:49.163Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf381aac314c8a1a688fda"
    text: {I thought similar.. Like "is a `in` b?" }
    sent: "2017-03-20T02:02:02.894Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf38176d7eb18404e61dc0"
    text: "ah, no, it returns a word, my bad"
    sent: "2017-03-20T02:01:59.504Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf37c9f7f7d481043535f2"
    text: "it just returns a value"
    sent: "2017-03-20T02:00:41.640Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf37a27b3f37e754156212"
    text: {@geekyi I thought `in` is an alternative for path synthax? `in obj 'foo` is the same as `obj/foo` to my believe.}
    sent: "2017-03-20T02:00:02.021Z"
    editedAt: "2017-03-20T02:01:09.218Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf3775b809ca5f4a60b2a4"
    text: {I had a question on SO, and a github issue.. Which is kinda hard to search right now since I'm on mobile.. }
    sent: "2017-03-20T01:59:17.202Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf3733a84f611959c2043d"
    text: {@9214 `in` and `bind` does the same thing, only a difference in syntax I think}
    sent: "2017-03-20T01:58:11.454Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cf35f87b3f37e754155d47"
    text: {but this one works as I expect^/```^/Red []^/^/c: context [a: 2]^/a: 1^/^/blk: [a]^/bind blk c ; i.e. bind all words (`a` word) in a block to a context^/print reduce blk ; 2^/print a          ; 1^/```}
    sent: "2017-03-20T01:52:56.195Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf34967b3f37e754155945"
    text: {Obviously I'm getting something wrong... and can't get what exactly :satisfied:}
    sent: "2017-03-20T01:47:02.476Z"
    editedAt: "2017-03-20T01:47:20.865Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf32d47b3f37e754155272"
    text: {And, to clarify, for now I thought that binding could be changed with `bind <word> <context>`. Am I wrong?}
    sent: "2017-03-20T01:39:32.530Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf31ae58ad4eb02830d334"
    text: {By changing `binding` of a `word` I change a pointer to a different `context`, there this `word` has some entry with associated value, is that so?}
    sent: "2017-03-20T01:34:38.535Z"
    editedAt: "2017-03-20T01:35:40.940Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf30d87b3f37e754154ccd"
    text: {Okay, every `word` has a `binding`.`binding` is kinda of a pointer to a specific `context`. `context` is a namespace with entrys, every entry is a `word: value` pair, simpy speaking. Is everything correct?}
    sent: "2017-03-20T01:31:04.167Z"
    editedAt: "2017-03-20T01:31:46.861Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf2fe3b809ca5f4a609bc8"
    text: "Hm, turns out I still don't get it :D"
    sent: "2017-03-20T01:26:59.727Z"
    editedAt: "2017-03-20T01:28:13.346Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cf2fa8a84f611959c1ef87"
    text: {```^/>> c: context [a: 2]^/== make object! [^/    a: 2^/]^/>> a: 1^/== 1^/>> ac: context? 'a^/== make object! [^/    datatype!: datatype!^/    unset!: unset!^/    none!: none!^/    logic!: logic!^/    block!: block!^/    paren!: paren!^/    string!: string!^/    file!: file!^/>> set 'a bind 'a c^/== a^/>> print a^/a^/>> print get a^/2^/>> get in c 'a^/== 2^/```}
    sent: "2017-03-20T01:26:00.469Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cf2f3bf7f7d48104351cac"
    text: {A word can only have one binding. `Bind` returns the bound word, but where would Red save the old binding? You would need to use `context?` and store the original binding yourself. You can also use `in` to get a word bound to a specific context.}
    sent: "2017-03-20T01:24:11.621Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cf2cae7b3f37e754153ea4"
    text: {Here I want `a` word to point to `c` context, while saving `a: 1` entry in a global one. Can't wrap my head around it :confused:^/```^/Red []^/^/c: context [a: 2]^/a: 1^/^/bind 'a c^/print a   ; want it to be 2^/```}
    sent: "2017-03-20T01:13:18.422Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cefe0b05a31d5a4a758b1e"
    text: "Oh, ok"
    sent: "2017-03-19T21:54:19.551Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cefdbfac314c8a1a67d373"
    text: {Yes, though I'm using a string instead. What I mean is that I want 0-9 to always roll in that range, same for A-Z and a-z. }
    sent: "2017-03-19T21:53:03.165Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cefa11b809ca5f4a5fe444"
    text: {Just use this if you want alpha-num?^/^/```^/red>> al-num^/== [48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70 ^/    71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 ^/    87 88 89 90 97 98 99 100 101 102 103 104 105 106 ^/    107 108 109 110 111 112 113 114 115 116 117 118 ^/    119 120 121 122^/]^/```}
    sent: "2017-03-19T21:37:21.254Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cef5dc7b3f37e754148282"
    text: {I think this will make a next/back option easier, and could be universal if you won't want friendly alpha-num stepping. But if you want friendly, we'll still need range markers (0Aa and 9Zz). }
    sent: "2017-03-19T21:19:24.748Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58cef3827b3f37e7541479f1"
    text: "I won't get to explore until tonight sometime"
    sent: "2017-03-19T21:09:22.063Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cef34cb809ca5f4a5fc959"
    text: {May still need them. Will require a bit of brain work.}
    sent: "2017-03-19T21:08:28.597Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cef198a84f611959c11df7"
    text: {Yes, and eliminate my `step-back` function. As I looked at my code, the magic range markers bothered me. Now I know why. ;^^)}
    sent: "2017-03-19T21:01:12.406Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cef16a58ad4eb028300229"
    text: "(That's the rough idea in my brain)"
    sent: "2017-03-19T21:00:26.498Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cef147b809ca5f4a5fc169"
    text: {That would make 'going forward' or 'going backward' essentially the same. Equal effort. ^/No?}
    sent: "2017-03-19T20:59:51.893Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cef067a84f611959c1193b"
    text: "Thanks for the idea!"
    sent: "2017-03-19T20:56:07.916Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cef055b809ca5f4a5fbe2c"
    text: "Yep"
    sent: "2017-03-19T20:55:49.175Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cef0056d7eb18404e52c04"
    text: "Dang. I may be late for dinner now. ;^^)"
    sent: "2017-03-19T20:54:29.182Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ceefedf7f7d48104344723"
    text: {Ah, I see what you mean. I misunderstood your buffer/range question then. You could certainly do that. Hmmmm. Then you can just create a new string of allowed chars to step, and pick/poke +/- 1 to incr/decr.}
    sent: "2017-03-19T20:54:05.996Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ceefcdac314c8a1a67a13e"
    text: {Moving the pointer forward or backward and replacing the current value of your last character with that new value}
    sent: "2017-03-19T20:53:33.840Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ceef7afe6a638b1ae1c36a"
    text: {Well you just find the value of the last character in the block of ascii values and do next, if you're incrementing - replace your last value with that new value}
    sent: "2017-03-19T20:52:10.226Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ceef05590d72c864e53188"
    text: {Unless you mean for the rollover chars. Those are selected from a map in my case.}
    sent: "2017-03-19T20:50:13.559Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ceeedb590d72c864e530b7"
    text: {My cheat is to parse backwards. I reverse the series, parse and change as I go, and when I hit a slot that doesn't carry, I break out to the end. If I carry all the way, I grow by appending. The last thing I do is reverse the series again.^/^/Not sure how you could do it without +/-.}
    sent: "2017-03-19T20:49:31.027Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ceee2f590d72c864e52e87"
    text: {(traversing a series would allow for incrementing and decrementing without a need for + or -)}
    sent: "2017-03-19T20:46:39.036Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ceede605a31d5a4a754f0d"
    text: {Once I reach the end of my buffer, insert the start value at head and set last to the start value - start the incrementing again^/?}
    sent: "2017-03-19T20:45:26.712Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ceed4b6d7eb18404e5219e"
    text: "`append` or `insert`."
    sent: "2017-03-19T20:42:51.842Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ceed2058ad4eb0282ff1c4"
    text: {Ok, I have an idea in mind, but - how do I grow a string?}
    sent: "2017-03-19T20:42:08.668Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cee888590d72c864e51c0c"
    text: "Yes."
    sent: "2017-03-19T20:22:32.936Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cee73bf7f7d4810434295e"
    text: {Do you do a circular buffer type thing with the ascii ranges?}
    sent: "2017-03-19T20:16:59.666Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cee68e6701410e58550e15"
    text: {I also prefer sequential numbers to hashes, if you don't need to use hashes.}
    sent: "2017-03-19T20:14:06.739Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cee63d58ad4eb0282fd3d7"
    text: {I've found it very handy when generating test data. Prime a block or object and step each value when generating test records.}
    sent: "2017-03-19T20:12:45.806Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cee5edb809ca5f4a5f9977"
    text: {If there are non alpha-nums, I skip those. If the first char is not alpha-num, I roll over, otherwise I grow it.}
    sent: "2017-03-19T20:11:25.970Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cee55d6d7eb18404e503a7"
    text: "I call mine `step`."
    sent: "2017-03-19T20:09:01.012Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cedd97f7f7d481043403ea"
    text: {I used .succ! once to brute force some MD5 hashed phone numbers, but never found a lot of other uses for it. ^/It's fun, though. }
    sent: "2017-03-19T19:35:51.828Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cedcff05a31d5a4a750e2f"
    text: {I'm not sure that I'd want to emulate it exactly - it only advances alpha numeric. }
    sent: "2017-03-19T19:33:19.235Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cedb156d7eb18404e4dbcc"
    text: {next is a better name, but there is already next for series}
    sent: "2017-03-19T19:25:09.322Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ceda452215a08f04a2d100"
    text: {@greggirwin I was emulating it at a basic level as a learning exercise }
    sent: "2017-03-19T19:21:41.848Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ced89ef7f7d4810433f082"
    text: {@gltewalt , looks like you're writing something to emulate Ruby's `succ` func. I have something I can port to Red, though you can learn a lot doing it too.}
    sent: "2017-03-19T19:14:38.464Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ce4074a88e334071078f5b"
    text: "Yes, the description is missing :)"
    sent: "2017-03-19T08:25:24.820Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce4042590d72c864e2c496"
    text: {`help replace` doesn't seem to mention first occurrence.   :smile: }
    sent: "2017-03-19T08:24:34.927Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3f79590d72c864e2c235"
    text: "got it"
    sent: "2017-03-19T08:21:13.462Z"
    editedAt: "2017-03-19T08:22:05.083Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3f6eef369b900482e83d"
    text: {I meant position in Redbol sense - series at position.}
    sent: "2017-03-19T08:21:02.351Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3f6d6701410e5852abce"
    text: "oh `index?`"
    sent: "2017-03-19T08:21:01.755Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3f52fa8a98870455e102"
    text: {```^/c> index? back tail "cat"^/== 3^/```}
    sent: "2017-03-19T08:20:34.286Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3f51ac314c8a1a651b2b"
    text: "returns a string to my untrained eye"
    sent: "2017-03-19T08:20:33.134Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3f37ef369b900482e83b"
    text: "Yes, `back tail` does, but `last` does not :)"
    sent: "2017-03-19T08:20:07.172Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3f20e8800cd70c7910f7"
    text: {ah, I thought you were saying that `back tail` returned a position}
    sent: "2017-03-19T08:19:44.140Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3ef5fa8a98870455e100"
    text: "But `last` doesn't return position."
    sent: "2017-03-19T08:19:01.861Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3ed8fe6a638b1adf2e4c"
    text: {Yes, but shouldn't it return an index if it returns position?}
    sent: "2017-03-19T08:18:32.491Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3ebfef369b900482e839"
    text: "it is `char!` vs `string!`"
    sent: "2017-03-19T08:18:07.364Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3e98ac314c8a1a65182c"
    text: {```^/red>> last "cat"^/== #"t"^/red>> back tail "cat"^/== "t"^/```}
    sent: "2017-03-19T08:17:28.034Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3e1e01bcf42439a56d25"
    text: {```^/c> equal? back tail s: "zaz" last s^/== false^/```}
    sent: "2017-03-19T08:15:26.979Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3dd5fa8a98870455e0fa"
    text: {@gltewalt no, it won't. `last` returns value, not position in series.}
    sent: "2017-03-19T08:14:13.266Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3db9794f24854d4e0822"
    text: {```^/c> replace "zaz" "z" "x"^/== "xaz"^/c> replace/all "zaz" "z" "x"^/== "xax"^/```}
    sent: "2017-03-19T08:13:45.211Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3da6fe6a638b1adf2bce"
    text: "will `last` work in place of `back tail` ?"
    sent: "2017-03-19T08:13:26.083Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3d634ec6efa73051b227"
    text: {`replace` changes first occurrence of a pattern. Or all of them, when `/all` is used.}
    sent: "2017-03-19T08:12:19.449Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3d0eb809ca5f4a5d25d9"
    text: "yep"
    sent: "2017-03-19T08:10:54.684Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3cdc794f24854d4e0820"
    text: {You mean this?^/```^/c> succ: func [s] [c: (to-integer last s) + 1 change back tail s to-char c s]^/== func [s][c: (to-integer last s) + 1 change back tail s to-char c s...^/c> succ "zaz"^/== "za^{"^/```}
    sent: "2017-03-19T08:10:04.388Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ce3c36a84f611959be8481"
    text: {I know, it's nowhere near complete. I was just playing around.}
    sent: "2017-03-19T08:07:18.327Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ce3c1fac314c8a1a651052"
    text: {This is weird. It should only increment the ascii value of the last character in the string.^/Or, return the succ(essor)^/^/```^/red>> succ: func [s [string!] /local c][c: (to-integer last s) + 1 ^/[        replace s last s to-char c^/[    ]^/== func [s [string!] /local c][c: (to-integer last s) + 1 ^/    replace s last s to-char c^/]^/red>> succ "cat"^/== "cau"^/red>> succ "zaz"^/== "^{az"^/red>> loop 10 [print succ "aa"]^/ba^/bb^/cb^/cc^/dc^/dd^/ed^/ee^/fe^/ff^/```^/}
    sent: "2017-03-19T08:06:55.231Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58ce37246701410e5852930d"
    text: {I like @rebolek's approach of multiple layers of dialects. Tho too many layers is bad}
    sent: "2017-03-19T07:45:40.475Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ce35f36701410e58528fdd"
    text: {Just increase the number of `load`able formats and `save`able formats and the rest will follow ;-)}
    sent: "2017-03-19T07:40:35.604Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cddedafe6a638b1ade2352"
    text: {https://en.m.wikipedia.org/wiki/Comparison_of_documentation_generators}
    sent: "2017-03-19T01:28:58.989Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd7f36d7eb18404e16b06"
    text: ":smile: "
    sent: "2017-03-19T00:59:31.237Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd784794f24854d4e065f"
    text: {@gltewalt Just Pacman? https://www.youtube.com/watch?v=nwg9eLHZZRo}
    sent: "2017-03-19T00:57:40.744Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd73a590d72c864e19f7f"
    text: "I totally forgot about REN"
    sent: "2017-03-19T00:56:26.995Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd71c05a31d5a4a719846"
    text: "I've seen pacman running in an excel workbook"
    sent: "2017-03-19T00:55:56.784Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd70005a31d5a4a719817"
    text: "and run DOOM in it"
    sent: "2017-03-19T00:55:28.492Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd6f901bcf42439a56b54"
    text: ":)"
    sent: "2017-03-19T00:55:21.596Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd6eefe6a638b1ade0d27"
    text: {the ultimate kitchen sink of all languages, we need to code our own emacs though}
    sent: "2017-03-19T00:55:10.885Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd6b27b3f37e75410aa80"
    text: "cool!"
    sent: "2017-03-19T00:54:10.432Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd64ba88e334071078d9f"
    text: {I made [Lest](http://lest.qyz.cz/) as an intermediate language that accepts different sources and can output to different targets.}
    sent: "2017-03-19T00:52:27.690Z"
    editedAt: "2017-03-19T00:52:43.617Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd5c94ec6efa73051b0a8"
    text: "Yes, asciidoc translated from original markdown"
    sent: "2017-03-19T00:50:17.187Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd5ba590d72c864e19b2e"
    text: {pick the most "convertable" one and that's it, or create your own (XKCD)}
    sent: "2017-03-19T00:50:02.333Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd59dfe6a638b1ade0931"
    text: "And I believe current docs are asciidoc"
    sent: "2017-03-19T00:49:33.163Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd57005a31d5a4a719343"
    text: {Asciidoc has chains that can render HTML and other formats}
    sent: "2017-03-19T00:48:48.195Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd540a88e334071078d9b"
    text: {Why I prefer formats like that is that they take less space for formatting than HTML.}
    sent: "2017-03-19T00:48:00.076Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd5164ec6efa73051b0a5"
    text: {@9214 HTML can be made easily from each of that formats.}
    sent: "2017-03-19T00:47:18.914Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd485e8800cd70c77e9c5"
    text: "I agree on that much. "
    sent: "2017-03-19T00:44:53.873Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd481b809ca5f4a5c07d2"
    text: {but then there will be that one person who wants html :sparkles: }
    sent: "2017-03-19T00:44:49.678Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd45a4ec6efa73051b0a3"
    text: {MarkDown, MakeDoc, ASCIIDoc are much easier to write in.}
    sent: "2017-03-19T00:44:10.473Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd41501bcf42439a56b41"
    text: {@gltewalt translating JSON to/from Red is not that hard, but it is not a format in which you want to write help.}
    sent: "2017-03-19T00:43:01.911Z"
    editedAt: "2017-03-19T00:43:20.967Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd4156701410e5851881c"
    text: {I think you could have a doc dialect that could either emit json or redbol}
    sent: "2017-03-19T00:43:01.843Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd413590d72c864e19674"
    text: {I mean, why not use some json-like Red dialect inside `spec`s ?}
    sent: "2017-03-19T00:42:59.327Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd3e3b809ca5f4a5c0665"
    text: "and since json is inspired by Rebol..."
    sent: "2017-03-19T00:42:11.896Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd3ceb809ca5f4a5c0615"
    text: {Some see JavaScript and json as the LCD - but they're here to stay and JavaScript is still growing... so... json wouldn't be the worst choice}
    sent: "2017-03-19T00:41:50.087Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd37f01bcf42439a56b3e"
    text: "@9214 because it is not text-describing format."
    sent: "2017-03-19T00:40:31.815Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd37a6d7eb18404e15e9d"
    text: "though that doesn't make much sense"
    sent: "2017-03-19T00:40:26.216Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd362ac314c8a1a63f44d"
    text: "why not use Red format itself (yay homoiconity) ?"
    sent: "2017-03-19T00:40:02.245Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd34ba88e334071078d96"
    text: "@gltewalt I agree, there should be one standard."
    sent: "2017-03-19T00:39:39.900Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd3432215a08f049f641f"
    text: {okay, then we should have the lowest common denominator to rule them all?}
    sent: "2017-03-19T00:39:31.476Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd31d7b3f37e75410a193"
    text: {Roll your own has its costs. (Look up the Lisp curse)}
    sent: "2017-03-19T00:38:53.723Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd2fdf7f7d48104307364"
    text: ":confused: "
    sent: "2017-03-19T00:38:21.989Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd2e86d7eb18404e15cfa"
    text: {If you do that, you get lispworld. No standards and 1000 70% done projects}
    sent: "2017-03-19T00:38:00.487Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd2e4e8800cd70c77e689"
    text: {And yeah, I would like to see some interactivity, like "living wiki" or something}
    sent: "2017-03-19T00:37:56.045Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd2b97b3f37e75410a07e"
    text: {IMO it's easier to teach user how to create parse dialects for such needs}
    sent: "2017-03-19T00:37:13.673Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd27eb809ca5f4a5c0206"
    text: {react would allow you to update documentation in one place, and have all other official documentation be updated nearly instantly}
    sent: "2017-03-19T00:36:14.037Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd265794f24854d4e0654"
    text: {@gltewalt The thing is that makedoc lacks some features and nobody uses it.}
    sent: "2017-03-19T00:35:49.707Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd22705a31d5a4a718929"
    text: {Cool - make use of makedoc. But also make it reactive}
    sent: "2017-03-19T00:34:47.808Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd208a88e334071078d93"
    text: "Yep, JSON is based on Rebol."
    sent: "2017-03-19T00:34:16.142Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd2002215a08f049f617b"
    text: "there was some yahoo AMA with such comment"
    sent: "2017-03-19T00:34:08.105Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd1eea84f611959bd564f"
    text: {I'd say that json is very close to REBOL (I think json was inspired by Carl's work btw)}
    sent: "2017-03-19T00:33:50.875Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd1dcef369b900482e6c1"
    text: {There is MakeDoc already: http://rebol.net/docs/makedoc/fastmd.html}
    sent: "2017-03-19T00:33:32.030Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd1b9590d72c864e18fb9"
    text: {XML has fallen off as nobody likes complexity. And red is already very close to json}
    sent: "2017-03-19T00:32:57.448Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd192f7f7d48104306fda"
    text: "red-docs.js"
    sent: "2017-03-19T00:32:18.536Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd1862215a08f049f6048"
    text: "lol "
    sent: "2017-03-19T00:32:06.461Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd171794f24854d4e0646"
    text: "https://imgs.xkcd.com/comics/standards.png"
    sent: "2017-03-19T00:31:45.484Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd1536701410e5851805b"
    text: "we need to go deeper!"
    sent: "2017-03-19T00:31:15.376Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd13f4ec6efa73051b0a0"
    text: {@9214 all formats like Mardown, Asciidocs, .. are metadialects. So let's introduce another one? (obligatory XKCD comics here)}
    sent: "2017-03-19T00:30:55.162Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd12a6701410e58517ff1"
    text: "http://odo.readthedocs.io/en/latest/"
    sent: "2017-03-19T00:30:34.332Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58cdd0e905a31d5a4a7185b5"
    text: {html - all other formats eventually have to be transformed into HTML if you want a web presence}
    sent: "2017-03-19T00:29:29.459Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd0daac314c8a1a63eda0"
    text: {@rebolek give users some easy meta-dialect for describing dialects for parsing docs (jeez) ?}
    sent: "2017-03-19T00:29:14.480Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd0a7ef369b900482e6b3"
    text: {There is ton of them, each with its own pluses and minuses.}
    sent: "2017-03-19T00:28:23.915Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd07ca88e334071078d8e"
    text: {I must confess that I am not sure what format should be preferred. }
    sent: "2017-03-19T00:27:40.772Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdd03ffe6a638b1addfbac"
    text: {Red documentation could be its own living system. Or dialect. }
    sent: "2017-03-19T00:26:39.107Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdd0386701410e58517c59"
    text: {Perhaps we can specify desired formats in Red header?}
    sent: "2017-03-19T00:26:32.279Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdd01c794f24854d4e0643"
    text: {Tweeting is easy, they use OAuth 1.0, not that 2.0 behemoth.}
    sent: "2017-03-19T00:26:04.957Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcff6794f24854d4e0641"
    text: ":)"
    sent: "2017-03-19T00:25:26.706Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcfdbfe6a638b1addfab3"
    text: "And tweet about that :bird: "
    sent: "2017-03-19T00:24:59.948Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdcfc6a88e334071078d8b"
    text: "(if there is no docstring)"
    sent: "2017-03-19T00:24:38.922Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcfb6590d72c864e189a4"
    text: {And maybe even better - be linked by react to instantly update website documentation}
    sent: "2017-03-19T00:24:22.551Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdcfb5a88e334071078d89"
    text: {It actually doesn't tell you much about the function.}
    sent: "2017-03-19T00:24:21.137Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcf88ef369b900482e6b1"
    text: "Getting specs is the easy part."
    sent: "2017-03-19T00:23:36.095Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcf86fe6a638b1addf9e5"
    text: "Great minds think alike :P"
    sent: "2017-03-19T00:23:34.679Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdcf60a88e334071078d87"
    text: "Yeah, I am working on that :) "
    sent: "2017-03-19T00:22:56.175Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcf51e8800cd70c77db28"
    text: {in every file find all functions, get their `spec` blocks, `parse` them, save in a file, something like that}
    sent: "2017-03-19T00:22:41.721Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdceeea84f611959bd4d8c"
    text: {could be a neat idea to provide simple dialects for doc generation, something like `gen-doc file-or-directory format`}
    sent: "2017-03-19T00:21:02.064Z"
    editedAt: "2017-03-19T00:21:47.278Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdce92ef369b900482e6ae"
    text: {@9214  Yes, that is possible. And I would like something like this to be also possible:^/```^/c> f: func ["help string" http://www.red-help.com/f] []^/```}
    sent: "2017-03-19T00:19:30.638Z"
    editedAt: "2017-03-19T00:19:40.045Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcde4e8800cd70c77d787"
    text: {```^/>> foo: func ["first" "second" "third"][]^/== func ["first" "second" "third"][]^/>> second spec-of :foo^/== "second"^/```^/then you could `parse` it or whatever, even entire block}
    sent: "2017-03-19T00:16:36.637Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdcd294ec6efa73051b089"
    text: {Actually, look at my `helpr`, it basically does it.}
    sent: "2017-03-19T00:13:29.510Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcd0eef369b900482e6a8"
    text: {You can write your own `help2` function that would accept docstrings in Markdown format, Red does not prevent you from doing that.}
    sent: "2017-03-19T00:13:02.460Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdccbe01bcf42439a56b17"
    text: {>  that dot trailing though and tab at the beginning^/^/This is based on expectation that docstrings are just one line.}
    sent: "2017-03-19T00:11:42.745Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcc96ef369b900482e6a4"
    text: {Yes, `help` does not expect newlines or actually any formatting at all in docstring. But as you can see, it is possible to store it there.}
    sent: "2017-03-19T00:11:02.733Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdcc89f7f7d4810430600a"
    text: "and tab at the beginning"
    sent: "2017-03-19T00:10:49.495Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdcc372215a08f049f51bc"
    text: "that dot trailing though"
    sent: "2017-03-19T00:09:27.184Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdcc01e8800cd70c77d29e"
    text: {```^/>> foo: func [^/[    { oh^/[    how^/[    I^/[    love^/[    to^/[    write^/[    long^/[    detailed^/[    documentation^/[    in^/[    a^/[    header^/[    of^/[    my^/[    lovely^/[    function^/[    !^/[    }][]^/== func [^/    { oh^^/how^^/I^^/love^^/to^^/write^^/long^^/detailed^^/documentation^^/in^^/a^^/header^^/of^^/my^^/lovely^^/function^^/!^^/}^/][]^/>> ? foo^/^/USAGE:^/      foo ^/^/DESCRIPTION:^/       oh^/how^/I^/love^/to^/write^/long^/detailed^/documentation^/in^/a^/header^/of^/my^/lovely^/function^/!^/. ^/      foo is of type: function! ^/^/ARGUMENTS:^/^/REFINEMENTS:^/^/>> ^/```}
    sent: "2017-03-19T00:08:33.625Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cdc433794f24854d4e05f6"
    text: {So the second string can work as detailed help in Markdown (or some other format).}
    sent: "2017-03-18T23:35:15.466Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdc3f4ef369b900482e672"
    text: {Actually, it is possible to put more strings in there:^/```^/c> f: func ["short string" "and long string, tadadam"] []^/== func ["short string" "and long string, tadadam"][]^/c> help f^/^/USAGE:^/      f^/^/DESCRIPTION:^/      short string.^/      f is of type: function!^/^/ARGUMENTS:^/^/REFINEMENTS:^/```}
    sent: "2017-03-18T23:34:12.285Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdc392fa8a98870455de76"
    text: {I see. It is already possible. That the docstring is <80 chars is just a convention.}
    sent: "2017-03-18T23:32:34.736Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdc3606d7eb18404e12f03"
    text: {Put documentation in header that can automatically be rendered to HTML or markdown or whatever}
    sent: "2017-03-18T23:31:44.949Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cdc13c01bcf42439a56add"
    text: {@gltewalt can yo go into details? I am not sure, I understand exactly.}
    sent: "2017-03-18T23:22:36.472Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cdc0ce2215a08f049f2bd7"
    text: {Should a docstring type thing be isolated to the header? If so you could block evaluation except for a special word}
    sent: "2017-03-18T23:20:46.279Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cd17ca6d7eb18404de9f67"
    text: "Understood!"
    sent: "2017-03-18T11:19:38.729Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cd159a6701410e584ec516"
    text: {So far, I just plan to set `system/script/header` to the header block, without any evaluation. But maybe forcing it to an object like Rebol would be better, as we can provide a prototype with default fields. Even in such case, I would block evaluation (using `construct`).}
    sent: "2017-03-18T11:10:18.757Z"
    editedAt: "2017-03-18T11:11:39.771Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cd1510a84f611959ba8f14"
    text: {@dockimbel If and when `system/script/header` will be filled, I can see the following considerations: will you require a sequence of `<field>: <value>` pairs, and if not, what will be the consequence of other items within the block, e.g. `set <word> <value>` like in the spec of `make object!`?  }
    sent: "2017-03-18T11:08:00.829Z"
    editedAt: "2017-03-18T11:08:24.459Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cd0dc47b3f37e7540da21b"
    text: {@dockimbel "Truly, a holy language is a homoiconic one. Whenever God speaks to a man, he uses Lisp with inline assembly (i.e. Red)"}
    sent: "2017-03-18T10:36:52.346Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cd0d63b809ca5f4a591499"
    text: {@9214 What about a visual dialect for HDL coding? ;-)}
    sent: "2017-03-18T10:35:15.920Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cd0d13ac314c8a1a6110f7"
    text: {@dockimbel that's soooo cool! After that we'll be able to  build our own system/os/userland/whatever **entirely** in Red :O^/But, uhm, don't do this in a cumbersome VHDL way (no offence to anyone, I just think that Verilog/SystemVerilog is much simpler and cleaner)}
    sent: "2017-03-18T10:33:55.768Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cd0cb92215a08f049c8725"
    text: {@meijeru Storing the header data into `system/script/header`is not implemented yet.}
    sent: "2017-03-18T10:32:25.646Z"
    editedAt: "2017-03-18T10:32:49.629Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cd0c622215a08f049c8555"
    text: {@rebolek and since it's `any-word!` it will be bounded at `load` time just like anything else, thanks!}
    sent: "2017-03-18T10:30:58.874Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cd0c451c040b8e040d1430"
    text: {I am still puzzled about `system/script` and `system/options`. When I compile^/```^/Red [^/^-field: 'value^/]^/print system/script/header^/```^/ I would expect to see the contents of the header printed out, but all I get is `none`. What do I do wrong?^/}
    sent: "2017-03-18T10:30:29.526Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58ccc4c3590d72c864ddbdf2"
    text: {@endo64 Those functions are hooks for the Red plugin for VScode made by @qtxie, though it might be possible to move them to a local context I guess.}
    sent: "2017-03-18T05:25:23.461Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ccc3d9fe6a638b1ada2903"
    text: {@9214 HDL: yes, for FPGA programming, though it is unlikely we'll have any time or resources for working on that before 1.0, or even 2.0. Also, dialects for harnessing the power of GPUs might be more interesting, as they are way more widespread than FPGAs.^/}
    sent: "2017-03-18T05:21:29.288Z"
    editedAt: "2017-03-18T05:23:31.617Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cc6632ac314c8a1a5f11a6"
    text: {@dockimbel  why `prin-out`, `print-out` and `fetch-help` functions are global? }
    sent: "2017-03-17T22:41:54.686Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58cc654205a31d5a4a6c8d4c"
    text: {@gltewalt "Yep... context? adds any word to system words" I think `context?` does not add word to system/words but the console.^/```^/context? 'test^/probe last words-of system/words^/```^/above code prints `test` on console, but not when it is compiled.}
    sent: "2017-03-17T22:37:54.260Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58cc5cca6d7eb18404dc4f88"
    text: "@9214 what is HDL?"
    sent: "2017-03-17T22:01:46.294Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cc5aeb6d7eb18404dc45d4"
    text: {Regarding issues, read this: https://github.com/red/red/issues/380, https://github.com/red/red/issues/1470 and https://github.com/red/red/issues/1997}
    sent: "2017-03-17T21:53:47.648Z"
    editedAt: "2017-03-17T21:55:19.740Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cc5082a84f611959b8020c"
    text: "type? #@k"
    sent: "2017-03-17T21:09:22.260Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc416f2215a08f0499d9ea"
    text: "It is `any-string!` in R2."
    sent: "2017-03-17T20:05:03.815Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cc414a590d72c864dbff90"
    text: "oh, my mistake!"
    sent: "2017-03-17T20:04:26.251Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "58cc408305a31d5a4a6be49b"
    text: {@dander actually, `issue!` is `any-word!`: ^/```^/red>>  type? #abcd^/== issue!^/red>> any-word? #abcd^/== true^/```}
    sent: "2017-03-17T20:01:07.637Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cc3deffe6a638b1ad85a8e"
    text: {@9214 I believe things starting with `#` are `issue!`s, which are not considered `word!`s}
    sent: "2017-03-17T19:50:07.627Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58cc2fba590d72c864dba8dc"
    text: {I know that HDL != programming language in a broader sense, but still}
    sent: "2017-03-17T18:49:30.956Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc2f69ac314c8a1a5e0f94"
    text: {And since Red wants to be a full-stack language, any kind of HDL dialect is planned? :ear: }
    sent: "2017-03-17T18:48:09.284Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc2c87590d72c864db9ae2"
    text: {Okay, I don't think there's any valid word starting with `#` inside `system/words`, could it be a bug? ^/Or is it about preprocessor and macros (they start with `#`)?^/^/@dockimbel could you please clarify it?  :point_up: [17 марта 2017 г., 23:15](https://gitter.im/red/help?at=58cc27dbb809ca5f4a55f06f)}
    sent: "2017-03-17T18:35:51.862Z"
    editedAt: "2017-03-17T18:36:24.148Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc2a6a1c040b8e040a05b9"
    text: {@gltewalt in Red `context` and `object` are essentially the same (to my believe), though I don't know much about it's internal representation (`context!` type?)}
    sent: "2017-03-17T18:26:50.383Z"
    editedAt: "2017-03-17T18:27:42.217Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc29b81c040b8e040a008d"
    text: {(Even if there isn't, I think context is a poor name.  just my opinion)}
    sent: "2017-03-17T18:23:52.108Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc29757b3f37e7540a6f94"
    text: {There has to be some difference between a normal object and a context that I havent seen?}
    sent: "2017-03-17T18:22:45.905Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc2960fe6a638b1ad7ef1c"
    text: "once you get it it's all the same"
    sent: "2017-03-17T18:22:24.009Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc28f505a31d5a4a6b7261"
    text: "I vote for `name-space: :context`"
    sent: "2017-03-17T18:20:37.504Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc28c3fe6a638b1ad7eb4f"
    text: {```^/>> :object^/== func [spec [block!]][make object! spec]^/```^/:grinning: }
    sent: "2017-03-17T18:19:47.148Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc2891ac314c8a1a5dea32"
    text: "`equal? source context source object`"
    sent: "2017-03-17T18:18:57.835Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc288d7b3f37e7540a6ad3"
    text: {@gltewalt yup^/```^/>> :context^/== func [spec [block!]][make object! spec]^/```}
    sent: "2017-03-17T18:18:53.331Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc286a7b3f37e7540a6a46"
    text: {looks like `context?` is a native, but `context` is just an alias for `object`}
    sent: "2017-03-17T18:18:18.700Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc282e05a31d5a4a6b6df7"
    text: "I dunno"
    sent: "2017-03-17T18:17:18.793Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc27dbb809ca5f4a55f06f"
    text: "why `context?` allows `issue!` for its agrument?"
    sent: "2017-03-17T18:15:55.343Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc276fac314c8a1a5de51e"
    text: {I'm not sure about `context? #issue` though :confused: }
    sent: "2017-03-17T18:14:07.879Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc26726701410e584b8a48"
    text: {`context?` word itself is bounded to `system/words`}
    sent: "2017-03-17T18:09:54.951Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc2667f7f7d481042a2f97"
    text: {```^/red>> context? 'cat^/== make object! [^/    datatype!: datatype!^/    unset!: unset!^/    none!: none!^/    logic!: logic!^/    block!: block!^/    paren!: paren!^/    string!: string!^/    file!: file!^/    url!: url!^/    char!: char!^/    integer!: integer!^/    float!: float!^/    symbol!: unset^/```^/^/And at the bottom of `help system/words`^/^/```^/ caps-lock        unset!    unset ^/     num-lock         unset!    unset ^/     cat              unset!    unset ^/```^/}
    sent: "2017-03-17T18:09:43.773Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc2661fe6a638b1ad7e040"
    text: {I'd say it's lexer (`load`) which parses string `context? <blah-blah>` and spits out `[context? <blah-blah]` a Red block with all words in it bounded to global context}
    sent: "2017-03-17T18:09:37.853Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc25cd6d7eb18404db461a"
    text: "Yep... context? adds any word to system words"
    sent: "2017-03-17T18:07:09.896Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc253a7b3f37e7540a5a3b"
    text: "Same with issue"
    sent: "2017-03-17T18:04:42.813Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc24fc05a31d5a4a6b5a50"
    text: {```^/>> (context? 'abracadabra) = system/words^/== true^/>> (context? 'whatever-its-all-the-same) = system/words^/== true^/```}
    sent: "2017-03-17T18:03:40.372Z"
    editedAt: "2017-03-17T18:04:37.868Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc24b8b809ca5f4a55dad0"
    text: {@gltewalt ^/```^/>> mold :test^/== "unset"^/``` ^/Well, I'm not an expert (yet) but I think that on `load`-time all `any-word!` values are bounded to global context by default}
    sent: "2017-03-17T18:02:32.204Z"
    editedAt: "2017-03-17T18:04:02.401Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cc246ba84f611959b7220b"
    text: {Not sure why that behaves that way.  Using context? on any 'word returns that}
    sent: "2017-03-17T18:01:15.443Z"
    editedAt: "2017-03-17T18:01:36.110Z"
    v: 2
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc23d0a84f611959b71f81"
    text: {```^/red>> context? 'test^/== make object! [^/    datatype!: datatype!^/    unset!: unset!^/    none!: none!^/    logic!: logic!^/    block!: block!^/    paren!: paren!^/    string!: string!^/    file!: file!^/    url!: url!^/    char!: char!^/    integer!: integer!^/    float!: float!^/    symbol!: unset^/^/```}
    sent: "2017-03-17T17:58:40.568Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cc12327b3f37e75409f5f8"
    text: {@9214 Nice! ;-) Yes, all that could go into a wiki page on github.}
    sent: "2017-03-17T16:43:30.883Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cc085b6701410e584ae84a"
    text: {All those conversations about contexts in Redbol world is great, it would be even great to organize and have them in a wiki page. Nick would be a great candidate for doing that :)}
    sent: "2017-03-17T16:01:31.022Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58cbd3776701410e5849c877"
    text: "though it's an overkill for sure"
    sent: "2017-03-17T12:15:51.437Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbd36a1c040b8e0408293e"
    text: {it's actually a great idea to create a (draw?) dialect which will construct diagrams similar to this one (at runtime?), for debugging purposes}
    sent: "2017-03-17T12:15:38.656Z"
    editedAt: "2017-03-17T12:21:36.536Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbd156ac314c8a1a5c216e"
    text: "hope anyone will find a good use for it"
    sent: "2017-03-17T12:06:46.080Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbd03e05a31d5a4a69994d"
    text: {@dockimbel [definitional scoping example v2.0, edited, shiny and colorful](http://i.imgur.com/nKjAwRb.png) :confetti_ball:}
    sent: "2017-03-17T12:02:06.938Z"
    editedAt: "2017-03-17T12:02:47.852Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbcf8105a31d5a4a699592"
    text: ""
    sent: "2017-03-17T11:58:57.509Z"
    editedAt: "2017-03-17T12:06:07.719Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbcee9fe6a638b1ad60bd0"
    text: "Ah, nevermind, I think I've got it"
    sent: "2017-03-17T11:56:25.192Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbce2505a31d5a4a698d96"
    text: {hm, I thought only `qux` word will be bounded, since it's `/local`..?^/```^/>> bar: 'whatever^/== whatever^/>> foo: func [bar /local qux] [return (context? 'bar) = :foo]^/== func [bar /local qux][return (context? 'bar) = :foo]^/>> foo 'boo-hoo^/== true^/```}
    sent: "2017-03-17T11:53:09.484Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbcdcb05a31d5a4a698c6d"
    text: {@geekyi Ah right, I forgot it was called `for` in the REP...I've already renamed it to `loop` in my head. ;-)}
    sent: "2017-03-17T11:51:39.242Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbcd88f7f7d481042847f3"
    text: {btw - in the past, there was also some talk about the range datatype, somethimg like [1..2], would something like that be useful?}
    sent: "2017-03-17T11:50:32.822Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cbcd772215a08f049780be"
    text: "Oh yeah, that's the REP you mentioned I believe"
    sent: "2017-03-17T11:50:15.826Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cbcd52a84f611959b5592b"
    text: {@OneArb regarding for have you seen the [for loop proposal](https://github.com/red/red/wiki/REP-0101---For-loop-function)? }
    sent: "2017-03-17T11:49:38.353Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cbcd12f7f7d4810428461f"
    text: "`for` and `forskip` are covered by `loop` REP."
    sent: "2017-03-17T11:48:34.620Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbccc77b3f37e75408899d"
    text: {just on a cell phine, but - does Red have forskip, or plan to add it? As for the loop dialect, I kind of like the proposal ...}
    sent: "2017-03-17T11:47:19.945Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58cbccb805a31d5a4a6987b4"
    text: {@Oldes @OneArb In addition to that, using set-words and a `function` constructor would avoid manually declaring them:^/```lisp^/function [][^/    ...^/    set [version: r-dialect:] list^/    ...^/]^/```}
    sent: "2017-03-17T11:47:04.108Z"
    editedAt: "2017-03-17T11:47:24.446Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbca396d7eb18404d9624b"
    text: {@OneArb note, that @dockimbel code must be closed in some context with defined local words, else the used `set` is setting `version` and `r-dialect` as global.}
    sent: "2017-03-17T11:36:25.941Z"
    editedAt: "2017-03-17T11:36:58.160Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cbc7c1ac314c8a1a5bf4ae"
    text: {There is also the `loop` REP in the wiki which should cover such needs though. I would like to implement it when we'll find time, extending the existing `loop` function.}
    sent: "2017-03-17T11:25:53.462Z"
    editedAt: "2017-03-17T11:26:25.775Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbc710a84f611959b53bd7"
    text: {If you want to avoid the `list: skip list...` parts, you can write your own iterator abstracting that (as shown by @Oldes).}
    sent: "2017-03-17T11:22:56.934Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbc6ce7b3f37e754086d95"
    text: {@OneArb This is how you can loop over the range 2-3 (with a bump of 2) right now, there is no need to add anything to the language:^/```lisp^/lang-list: [2 "Rebol" 3 "Rebol" 0 "Red"]^/line-num: 0^/^/list: skip lang-list 4^/while [not tail? list][^/    set [version r-dialect] list^/    print [^/        line-num: line-num + 1 " "^/        r-dialect " "^/        version^/    ]^/    if line-num = 2 [break]^/    list: skip list 2^/]^/```}
    sent: "2017-03-17T11:21:50.286Z"
    editedAt: "2017-03-17T11:24:04.396Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbc601fe6a638b1ad5e10c"
    text: {Maybe I would not even use `forall` and just used, that the series is holding its position (that would be the start) and then just simple loop with number of lines.}
    sent: "2017-03-17T11:18:25.930Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cbc54a6701410e58498a14"
    text: {And to be honest.. I never needed something like this... I would probably use `forall` in case like your mentioned editor. There is always many ways how to do things.}
    sent: "2017-03-17T11:15:22.488Z"
    editedAt: "2017-03-17T11:16:53.438Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cbc47f6701410e58498605"
    text: {I don't know.. he don't want to add more common code into Red yet as it adds time to compilation.}
    sent: "2017-03-17T11:11:59.390Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cbc3e87b3f37e7540860f2"
    text: {@Oldes How to twist @dockimbel's arm into making `foreach/range` into `native!`? :thinking_face:}
    sent: "2017-03-17T11:09:28.558Z"
    editedAt: "2017-03-17T11:10:25.413Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
)#(
    id: "58cbc393f7f7d4810428169b"
    text: {```^/todo: [print [a c]]^/foreach-range [a b c d] lang-list 1 1 todo^/probe todo ; just a test if the action code is really as before^/```}
    sent: "2017-03-17T11:08:03.095Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cbc320a84f611959b52865"
    text: {```^/foreach-range: func[^/    "Evaluates body for each value in a series limited to range"^/    'word [word! block!] "Word, or words, to set on each iteration"^/    series [series!]^/    from   [integer!]^/    to     [integer!] ;beware that `to` is used system word!^/    body [block!]^/    /local __counter __count __body^/][^/    if 0 > __count: (to - from) [return false]^/    from: either from < 1 [0][from - 1]^/   ^/    series: skip series from * either block? word [length? word][1]^/^/    __counter: 0^/^/    __body: insert body [^/        if __counter > __count [break]^/        __counter: __counter + 1^/    ]^/    foreach :word series body^/    remove/part body __body ;remove the code we added to body^/    true^/]^/```}
    sent: "2017-03-17T11:06:08.466Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cbbcab1c040b8e0407c821"
    text: {@OneArb so you want something like:^/```^/foreach-range: func[^/    "Evaluates body for each value in a series limited to range"^/    'word [word! block!] "Word, or words, to set on each iteration"^/    series [series!]^/    from   [integer!]^/    to     [integer!] ;beware that `to` is used system word!^/    body [block!]^/    /local index __counter result count^/][^/    if from < 1 [ from: 1] ;or throw error?^/    if 0 >= count: to - from [return]^/    series: skip series (either block? word [length? word][1]) * (from - 1)^/^/    __counter: 0^/^/    index: length? body ;store original body size^/    append body [^/        __counter: __counter + 1^/        if __counter > count [break]^/    ]^/    foreach :word series body^/    clear at body index ;remove the code we added to body^/]^/^/lang-list: [2 "Rebol" 3 "Rebol" 0 "Red" 4 "Scala" 7 "Haxe"]^/^/foreach-range  [version r-dialect] lang-list 2 4 [^/    print rejoin [ r-dialect " " version ]^/]^/foreach-range value lang-list 1 4 [probe value]^/```}
    sent: "2017-03-17T10:38:35.743Z"
    editedAt: "2017-03-17T10:46:46.341Z"
    v: 4
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cbbb341c040b8e0407c1eb"
    text: {@meijeru :+1: it make sence on a par with `body-of` and `spec-of`}
    sent: "2017-03-17T10:32:20.532Z"
    editedAt: "2017-03-17T10:32:28.722Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cbb7d9a84f611959b4f77d"
    text: {@Oldes index range series access would facilitate  loading a `list`with only the displayed range.^/^/Most editors choke on large files for that simple reason.}
    sent: "2017-03-17T10:18:01.938Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58cbb609b809ca5f4a538f00"
    text: {Ah... I understand what you mean. You want the range.}
    sent: "2017-03-17T10:10:17.337Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cbb5b72215a08f04971848"
    text: {@OneArb what is wrong with this?^/```^/lang-list: [2 "Rebol" 3 "Rebol" 0 "Red"]^/line-num: 0^/foreach [version r-dialect] lang-list [^/    print reform [^/        line-num: line-num + 1 " "^/        r-dialect " "^/        version^/    ]^/    if line-num = 2 [break]^/]^/```}
    sent: "2017-03-17T10:08:55.031Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cbb12db809ca5f4a5374c1"
    text: {The context business is further complicated by the fact that there is an (internal) type `context!` which has no values that the user can `make` or otherwise produce... But according to the convention, `context?` would be the test function to check if a value is of that type. So I agree with you it is not a good name. I could propose `context-of`.}
    sent: "2017-03-17T09:49:33.790Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cbaf17590d72c864d90bd2"
    text: {@dockimbel  :point_up: [March 17, 2017 12:29 AM](https://gitter.im/red/help?at=58cb1fe8ac314c8a1a596ef9)^/^/I meant range rather than scope. Instead of^/^/```^/lang-list: [2 "R ebol" 3 "Rebol" 0 "Red"]^/line-num: 0^/^/forever [^/^-^-print rejoin [^/^-^-^-line-num: line-num + 1 " "^/^-^-^-lang-list/(2 +(line-num * 2)) " "^/^-^-^-lang-list/(1 +(line-num * 2))^/^-^-]^/^-^-if line-num = 2 [break]^/^-]^/```^/I'd want to write^/```^/lang-list: [2 "Rebol" 3 "Rebol" 0 "Red"]^/line-num: 1^/^/for [version r-dialect] lang-list 2 3 [^/^-^-print rejoin [^/^-^-^-line-num: line-num + 1 " "^/^-^-^-r-dialect " "^/^-^-^-version^/^-^-]^/^-]^/```^/Would a `for labels series from to` construct make sense in Red?}
    sent: "2017-03-17T09:40:39.082Z"
    editedAt: "2017-03-17T09:46:49.190Z"
    v: 4
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58cbabe2ac314c8a1a5b6d1f"
    text: {Maybe `context?` name is misleading, I wanted to avoid the `bind?/bound?` naming mess of Rebol.}
    sent: "2017-03-17T09:26:58.485Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbab6e1c040b8e04077164"
    text: {No, in case of objects, `context?` returns an object!. There are no first-class context values.^/```lisp^/>> type? context? in context [a: 0] 'a^/== object!^/```}
    sent: "2017-03-17T09:25:02.862Z"
    editedAt: "2017-03-17T09:25:43.496Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cbaaf805a31d5a4a68e9e9"
    text: {@dockimbel *To be more precise, the context constructed by foo is :foo* is indeed not true, but that means that, in the case of functions,  the result of `context?` is not equal to the context, whereas in the case of objects, it is. :worried: }
    sent: "2017-03-17T09:23:04.885Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cba0e22215a08f0496b78a"
    text: {@dockimbel yEd editor :) yeah, I think it clicked, explanation is harder than an actual idea}
    sent: "2017-03-17T08:40:02.848Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cb8a6ea84f611959b42a15"
    text: {Yeah, looks like yed. Nice diagrams @9214 ! I was wondering about a dialect to draw diagrams like that in red}
    sent: "2017-03-17T07:04:14.151Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58cb7f6a2215a08f04962d6c"
    text: "http://www.yworks.com/products/yed, I think."
    sent: "2017-03-17T06:17:14.774Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58cb79bdf7f7d4810426d29d"
    text: {@9214 Nice diagram!  Which tool did you use to draw it?^/* The 3rd and 4th steps should change places. "At LOAD time..." block should be before the resulting `[my-context: ...]` loaded result block.^/* Just to be sure there is no confusion: when I say "bound`[a: 1]` to local context", it really means "bind the words in `[a: 1]` to local context".^/* `context` is just an alias to `object`, so the returned value from `context` is an object! value.}
    sent: "2017-03-17T05:53:00.997Z"
    editedAt: "2017-03-17T05:53:41.615Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cb7805a84f611959b3e4d0"
    text: {@9214^/> with dynamic scoping we have chains of function calls to traverse, with static scoping we have chains of definitions, but with definitional "scoping" there's no chains at all (hence no scopes), am I right?^/^/That's right.^/^/> and to clarify: in above example repeat isn't a context constructor, so i word is still bounded to global context during iteration?^/^/Correct. `repeat` is a context constructor in Rebol, not yet in Red.^/^/> and what's happening with 'x word at load-time and run-time? Is it bounded or skipped somehow?^/^/`'x` is bound to global context at load-time (like any other `any-word!` value), then rebound to the function's context at run-time by the `function` constructor.^/^/> Perhaps I can see why i is still bounded to global context - because there's no i word inside foo spec, hence new context will be constructed without i entry?^/^/Correct. I think you are getting it fully now. :+1:^/^/> and how can I view context constructed by foo? (jeez, lots of questions!)^/^/Contexts are not first-class values (though an internal `context!` type do exist). The closest you could get would be by using `words-of :foo` (and `values-of :foo` from inside the function), but those reflectors are not yet implemented for functions.}
    sent: "2017-03-17T05:45:41.258Z"
    editedAt: "2017-03-17T05:46:50.273Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cb7541f7f7d4810426c260"
    text: {@x8x That looks like a bug, probably a type-checking missing for `loop` in the compiler.}
    sent: "2017-03-17T05:33:53.732Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cb75150b2625d0648aba5b"
    text: {@OneArb There is no scope (see my answer to Maxim above), only contexts (namespaces). In Rebol, iterators are capturing their iteration words in a local contexts. In Red, there is no such feature yet, but if the code is wrapped in a function using the `function` constructor, then the iterator words will be locally bound to that function's context.}
    sent: "2017-03-17T05:33:09.585Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cb742f590d72c864d81a40"
    text: {@meijeru *To be more precise, the context constructed by `foo` is `:foo`* That is not accurate, the context is a property of a function, the context is not the function. `context?` returns the function itself if the argument word is bound to a function, because contexts are not first-class values, so for convience, the function! value itself is returned (so it can be manipulated by the user, doing, e.g., comparisons)}
    sent: "2017-03-17T05:29:19.241Z"
    editedAt: "2017-03-17T05:30:03.143Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cb1fe8ac314c8a1a596ef9"
    text: {What  would be the closest  to scope a `foreach` in Redbol?^/In the following example, I'd want to process two items on the list starting from the second item.^/^/```^/lang-list: [2 "Rebol" 3 "Rebol" 0 "Red"]^/line-num: 0^/foreach [version r-dialect] lang-list [^/^-^-print rejoin [^/^-^-^-line-num: line-num + 1 " "^/^-^-^-r-dialect " "^/^-^-^-version^/^-^-]^/^-]^/```}
    sent: "2017-03-16T23:29:44.122Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58cb1670590d72c864d6d5ef"
    text: "@meijeru nice example, thank you"
    sent: "2017-03-16T22:49:20.093Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cb0bb07b3f37e7540588e6"
    text: {To be more precise, the context constructed by `foo` is `:foo`}
    sent: "2017-03-16T22:03:28.669Z"
    editedAt: "2017-03-16T22:04:16.875Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cb0b85590d72c864d6a422"
    text: {Hence, the context constructed by a function is that function, I suppose.}
    sent: "2017-03-16T22:02:45.395Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cb0b5afe6a638b1ad30cf3"
    text: {If I try to view that from *inside* the function, I just get the function (value, not name).^/```^/>> foo: func [/local c][print mold context? 'c]^/== func [/local c][print mold context? 'c]^/>> foo ; invoke the function to get the printout^/func [/local c][print mold context? 'c]^/```^/}
    sent: "2017-03-16T22:02:02.332Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58cb0891a84f611959b242fc"
    text: {and how can I view context constructed by `foo`? (jeez, lots of questions!)}
    sent: "2017-03-16T21:50:09.374Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cb034e6d7eb18404d63157"
    text: "```print (context? 'i) = system/words ; true```"
    sent: "2017-03-16T21:27:42.774Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cb025e1c040b8e0404e171"
    text: {:point_up: [16 марта 2017 г., 21:04](https://gitter.im/red/help?at=58cab77d1c040b8e04033d81)}
    sent: "2017-03-16T21:23:42.572Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cb02436d7eb18404d62bba"
    text: {@dockimbel and what's happening with `'x` word at load-time and run-time? Is it bounded or skipped somehow? ^/^/Perhaps I can see why `i` is still bounded to global context - because there's no `i` word inside `foo` spec, hence new context will be constructed without `i` entry?}
    sent: "2017-03-16T21:23:15.307Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cb01396d7eb18404d627fa"
    text: "@x8x now that's weird, all `1` after compilation"
    sent: "2017-03-16T21:18:49.007Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cb00dcb809ca5f4a50be67"
    text: {@dockimbel and to clarify: in above example `repeat` isn't a context constructor, so `i` word is still bounded to global context during iteration?}
    sent: "2017-03-16T21:17:16.115Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cb00ce1c040b8e0404d905"
    text: {```^/Red []^/^/f: function [][^/^-c: 0^/^-loop "hello" [^/^-^-prin 1^/^-^-c: c + 1^/^-^-if c > 10 [quit]^/^-]^/]^/f^/```}
    sent: "2017-03-16T21:17:02.243Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58cb005e0b2625d0648909a9"
    text: "but it looks like a bug indeed :confused: "
    sent: "2017-03-16T21:15:10.452Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58caffcef7f7d4810425096e"
    text: {@x8x yup^/```^/Red []^/^/f: function [^/    n [integer!]^/][^/    c: 0^/    loop n [^/        prin 1^/        c: c + 1^/        if c > 10 [quit]^/    ]^/]^/f "hello"^/```^/```^/*** Script Error: f does not allow string! for its n argument^/*** Where: f^/*** Stack: f^/```}
    sent: "2017-03-16T21:12:46.767Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58caff7ba84f611959b216ff"
    text: {Ok, `loop` should not run with an argument of type `string!`, what about type checking in compiled code, should it return the same error as the interpreter or should one specify arguments type for compiled code?}
    sent: "2017-03-16T21:11:23.108Z"
    editedAt: "2017-03-16T21:12:40.608Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58cafeb8ac314c8a1a58d7b6"
    text: "Looks like a bug."
    sent: "2017-03-16T21:08:08.826Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cafd4e6d7eb18404d614c4"
    text: {Need help understanding this:^/^/lets have `test.red` with:^/```red^/Red []^/^/f: function [n][^/^-c: 0^/^-loop n [^/^-^-prin 1^/^-^-c: c + 1^/^-^-if c > 10 [quit]^/^-]^/]^/f "hello"^/```^/^/Now, run it interpreted:^/```^/  % red test.red^/*** Script Error: loop does not allow string! for its count argument^/*** Where: loop^/```^/Error as expected.^/^/Now compile it with `red -c -r test.red` and run it:^/```^/  % ./test^/11111111111^/```^/Compiled, `loop` doesn't complain about the wrong argument type and would run indefinitely.^/^/I'm sure I forgot some rules about compiled code.^/Thank you!}
    sent: "2017-03-16T21:02:06.691Z"
    editedAt: "2017-03-16T21:06:08.356Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "58cae65fac314c8a1a58531e"
    text: {with dynamic scoping we have chains of function calls to traverse, with static scoping we have chains of definitions, but with definitional "scoping" there's no chains at all (hence no scopes), am I right?}
    sent: "2017-03-16T19:24:15.400Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cae50ffe6a638b1ad246b8"
    text: "w/ comparison to dynamic and static scoping"
    sent: "2017-03-16T19:18:39.136Z"
    editedAt: "2017-03-16T19:20:07.729Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cae5051c040b8e0404470c"
    text: {IMO we need some good visual metaphor for that stuff}
    sent: "2017-03-16T19:18:29.331Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cae44ab809ca5f4a50243a"
    text: {@dockimbel behold! [yEd madskillz!](http://i.imgur.com/ZFBngBT.png)^/I'm not sure about `bound [a: 1] to new context` part though}
    sent: "2017-03-16T19:15:22.901Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cad5406d7eb18404d53f04"
    text: "My pleasure."
    sent: "2017-03-16T18:11:12.423Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cad4bd590d72c864d58876"
    text: "Sure thing, thank you for your help!"
    sent: "2017-03-16T18:09:01.143Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cad495b809ca5f4a4fc942"
    text: "Good, time for sleep here (2am) ;-)"
    sent: "2017-03-16T18:08:21.017Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cad4436d7eb18404d5377a"
    text: {now is the time for sparring with Redbol type system :facepunch: }
    sent: "2017-03-16T18:06:59.871Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cad3e3b809ca5f4a4fc5d0"
    text: {@dockimbel okay, I think it clicked in some casual way}
    sent: "2017-03-16T18:05:23.217Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cad3650b2625d064881060"
    text: "Among other gains, yes."
    sent: "2017-03-16T18:03:17.442Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cad32ef7f7d48104241297"
    text: {In Rebol2 it was causing issues with too many words used.. was `module!` mean to improve this?}
    sent: "2017-03-16T18:02:22.843Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cad3266d7eb18404d53153"
    text: {`load` is the lexer that converts a text representation of Red values, to Red values in memory. So that everything exists *only* as data at this point.}
    sent: "2017-03-16T18:02:14.732Z"
    editedAt: "2017-03-16T18:02:49.224Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cad2f605a31d5a4a65588b"
    text: "Every `any-word!` is bound to global context."
    sent: "2017-03-16T18:01:26.314Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58cad2f2590d72c864d57ee3"
    text: {and `load` is some sort of bridge between outter world with `strings` and Redbolland with `blocks` and other values? :D}
    sent: "2017-03-16T18:01:22.037Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cad2e21c040b8e0403de84"
    text: "Every `word!`"
    sent: "2017-03-16T18:01:06.809Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58cad2810b2625d064880b32"
    text: {On load-time every `set-word!` is bounded to a global context with `unset` value, and every `word!`..?}
    sent: "2017-03-16T17:59:29.090Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cad1e1f7f7d48104240b8e"
    text: {Yep. As a word requires to be defined in a context to be able to point to it, the global context acts as a `catch-all` and will auto-expand for new words, setting them to `unset` until they eventually get set to some other value. This special behavior is unique to the global context in Rebol2 and Red, but Rebol3 generalizes it to "modules" (of type `module!`). Red will get them in 0.8.0.}
    sent: "2017-03-16T17:56:49.479Z"
    editedAt: "2017-03-16T17:59:14.117Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cad1be590d72c864d578fa"
    text: "and `a: 1` in local?"
    sent: "2017-03-16T17:56:14.778Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cad1ada84f611959b12924"
    text: "ah, so in global context it's `a: unset`?"
    sent: "2017-03-16T17:55:57.978Z"
    editedAt: "2017-03-16T17:56:06.501Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cad186fe6a638b1ad1e0fb"
    text: {`context` will `bind` its body block just after gathering all the set-words it contains to create the new context (with all value entries preset as `unset`). Same happens for `func` or `function`.}
    sent: "2017-03-16T17:55:18.315Z"
    editedAt: "2017-03-16T17:55:49.752Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cad12cfe6a638b1ad1de88"
    text: "(forgot a step, it should be clearer now)"
    sent: "2017-03-16T17:53:48.177Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cad090fe6a638b1ad1db33"
    text: {but after new local context is created with `a: 1`, there's still `a: 1` entry inside global context?}
    sent: "2017-03-16T17:51:12.687Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cacfc2f7f7d4810423ff37"
    text: {Let me break down the steps:^/1. `"my-context: context [a: 1]"` is LOADed as `[my-context: context [a: 1]]` (all words there are bound to global context).^/2. Evaluation begins, `my-context:` is a set-word!, so a value is fetched for it.^/3. `context` is a function call requiring a single argument (`[a: 1]`), so it is evaluated.^/4. A context is created with `a` as the only entry. The `[a: 1]` block is rebound to that context and then evaluated.^/5. The value `1` is associated to `a` in the newly created context.^/6. `my-context` entry in the global context is associated to the context value that was created at 4.}
    sent: "2017-03-16T17:47:46.255Z"
    editedAt: "2017-03-16T17:54:07.919Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cacf806d7eb18404d51911"
    text: "It reminds me on Godel theorem somehow..."
    sent: "2017-03-16T17:46:40.469Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cacea01c040b8e0403c657"
    text: {Strictly speaking, at runtime, `a` will be rebound to the context referred to by `my-context` word. ;-) Keep in mind the separation between a word and the value it refers to. Words are not "variables" (label on a value) in Redbol, but first-class values themselves.}
    sent: "2017-03-16T17:42:56.048Z"
    editedAt: "2017-03-16T17:44:14.733Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cace9d6d7eb18404d51272"
    text: {After `my-context` was constructed ofc (and how exactly this happening?)}
    sent: "2017-03-16T17:42:53.441Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cace511c040b8e0403c4e6"
    text: {and on runtime `a` will be rebinded to `my-context`?}
    sent: "2017-03-16T17:41:37.494Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cace25fe6a638b1ad1c936"
    text: "Yup"
    sent: "2017-03-16T17:40:53.186Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cace15ac314c8a1a57bfc3"
    text: {On loading, all the words in your code snippet are bound to global context (my-context, context, a). Just a reference to that context is in the global context value slot for `my-context` symbol. That reference can be removed at any time, or other references can be created in the global context, or in another context, or in a block (anything that can contain a value).}
    sent: "2017-03-16T17:40:37.795Z"
    editedAt: "2017-03-16T17:42:12.432Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cace13a84f611959b11158"
    text: {I mean, it seems for me that `my-context` is (illusory) nested inside global context}
    sent: "2017-03-16T17:40:35.743Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cacdec6d7eb18404d50d63"
    text: {```^/my-context: context [a: 1]^/```^/In this example, word `my-context` will be bounded to "default" (i.e. global) context, and `a` will be bound to ...?^/}
    sent: "2017-03-16T17:39:56.852Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cacdb2ac314c8a1a57bdcd"
    text: "Yep, not related to each other."
    sent: "2017-03-16T17:38:58.978Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cacd68f7f7d4810423f1f9"
    text: "And these contexts are completely separated?"
    sent: "2017-03-16T17:37:44.910Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cacd5cfe6a638b1ad1c3b4"
    text: {Exactly. The basic concept is really very simple, though when composed (and eventually mixed with metaprogramming), it can emulate complex scoping rules and even go beyond (like in this last example).}
    sent: "2017-03-16T17:37:32.528Z"
    editedAt: "2017-03-16T17:38:44.161Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cacd47f7f7d4810423f062"
    text: {Yeah, so every `a` will point to a specific context where it's bound}
    sent: "2017-03-16T17:37:11.263Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cacd191c040b8e0403bd78"
    text: {In this last example above, the content of `list` will be rebound 3 times, but each time starting at an offset moved by one, so the left elements are not rebound, only the right ones. ;-) Note: once we add HOF iterators, such code examples should look nicer. ;-)}
    sent: "2017-03-16T17:36:25.877Z"
    editedAt: "2017-03-16T17:37:24.619Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cacccf05a31d5a4a653384"
    text: "@9214 Good! ;-)"
    sent: "2017-03-16T17:35:11.776Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cacc8e05a31d5a4a653153"
    text: {```lisp^/list: [a a a]^/ctx: reduce [context [a: 1] context [a: 2] context [a: 3]]^/repeat i length? list [bind at list i ctx/:i]^/^/list^/== [a a a]^/reduce list^/== [1 2 3]^/```}
    sent: "2017-03-16T17:34:06.487Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cacc886d7eb18404d5035b"
    text: "It... clicks! :D"
    sent: "2017-03-16T17:34:00.246Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cacc76f7f7d4810423ea9d"
    text: {If the body contains some context constructors, then some parts of the body will be rebound several times, yes.}
    sent: "2017-03-16T17:33:42.968Z"
    editedAt: "2017-03-16T17:35:20.884Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cacc31b809ca5f4a4f92c1"
    text: "no, I mean, inside body of `func`"
    sent: "2017-03-16T17:32:33.906Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cacc1d6d7eb18404d5017f"
    text: {There is only one context constructor in your expression: `func`, so only one binding pass, which will match every local word.}
    sent: "2017-03-16T17:32:13.051Z"
    editedAt: "2017-03-16T17:32:41.585Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cacbc51c040b8e0403b445"
    text: {so, in `func [a b c /local <things-to-bind>] [...]` there's multiple rounds of bindings for every nested construct?}
    sent: "2017-03-16T17:30:45.004Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cacae47b3f37e7540432d0"
    text: {A word can only refer to a single context. But in a block of words, each can refer to a different context.}
    sent: "2017-03-16T17:27:00.637Z"
    editedAt: "2017-03-16T17:27:22.833Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cacacd2215a08f0493122c"
    text: "Can't share across contexts?"
    sent: "2017-03-16T17:26:37.112Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cacaafa84f611959b0fb80"
    text: {Only during evaluation, and as a side-effect of the user nesting the various constructors. Once it's done (once the objects and functions are constructed), there is no relationship between contexts at all, they all exist independently of each other.}
    sent: "2017-03-16T17:26:07.984Z"
    editedAt: "2017-03-16T17:26:39.252Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58caca602215a08f04931084"
    text: {So it's a stack of contexts where each new context shadows the previous?}
    sent: "2017-03-16T17:24:48.332Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cac9da6d7eb18404d4f56f"
    text: {"To bind" means just make a word point to a context (where that symbol is defined). So you can't bind a word to a context where it is not defined.}
    sent: "2017-03-16T17:22:34.600Z"
    editedAt: "2017-03-16T17:24:15.360Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac983b809ca5f4a4f82ea"
    text: "Yup."
    sent: "2017-03-16T17:21:07.880Z"
    editedAt: "2017-03-16T17:21:09.376Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac97d05a31d5a4a651f7e"
    text: "context is essentially a namespace?"
    sent: "2017-03-16T17:21:01.053Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cac9727b3f37e75404294d"
    text: {Yes, he would like to do that, though, it would probably be just the graphical representation of what I just explained above.}
    sent: "2017-03-16T17:20:50.185Z"
    editedAt: "2017-03-16T17:20:59.649Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac9462215a08f04930b86"
    text: {I think I can try to do some whiteboard doodling on weekends, but first I need to get it verbally :D}
    sent: "2017-03-16T17:20:06.344Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cac92a0b2625d06487d1cd"
    text: {@9214 That's correct. A word never refers to a value directly, it refers to a context (a table of symbol/value pairs), and in that context, it is associated with a value.}
    sent: "2017-03-16T17:19:38.582Z"
    editedAt: "2017-03-16T17:21:22.298Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac9110b2625d06487d1a2"
    text: {@dockimbel can you make some diagrams?  ^/Maybe in the spirit of this book:^/https://www.cs.cmu.edu/~dst/LispBook/}
    sent: "2017-03-16T17:19:13.779Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cac8eefe6a638b1ad1a4a7"
    text: {Two key points to get it:^/1. Every word is bound to global context by default at `load` time (source as text to Red values).^/2.  Local contexts are constructed at run-time. Each context constructor will determine which words it should capture by either looking into a declared list (locals in functions), or gather all the set-words (objects). Then, the constructor will go through the nested blocks in the body to bind all the "local" words. When applied in nested way (object [... object [... func [...][...]]]), the various binding passes will produce a result which mimic nested scopes. That is what we call "definitional scoping".}
    sent: "2017-03-16T17:18:38.185Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac83f7b3f37e7540421ea"
    text: {So, every word has a "pointer" to its context, right? And `context` is a synonym for `object` (which is simply `word`--`value` mapping)?}
    sent: "2017-03-16T17:15:43.185Z"
    editedAt: "2017-03-16T17:16:56.242Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cac7da7b3f37e754041f90"
    text: {I don't remember ever seeing a diagram for that, though, it probably would be very helpful to give the right picture from the beginning. Many people struggle with it, because they come with other mental models (mostly scopes) which look similar on the surface, but don't apply in Redbol.}
    sent: "2017-03-16T17:14:02.217Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac78f0b2625d06487c6a4"
    text: {The principles are very simple, the explanations are usually not.}
    sent: "2017-03-16T17:12:47.859Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac76205a31d5a4a650f8e"
    text: {@dockimbel are there any graphical explanations of those things? Like, diagrams or doodling?}
    sent: "2017-03-16T17:12:02.385Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cac71ea84f611959b0e43a"
    text: {I'll try to dedicate some time to grok definitional scoping and bindology, thanks again! And yeah, it's kinda complicated :neutral_face: }
    sent: "2017-03-16T17:10:54.523Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cac6e6a84f611959b0e288"
    text: {Found a little simpler way:^/``` lisp^/^-use reduce [x] compose/deep/only [^/^-^-repeat (x) bump [case (case-block)]^/^-]^/```}
    sent: "2017-03-16T17:09:58.190Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac635f7f7d4810423c0f3"
    text: {Yeah, it's not for the faint-hearted. ;-) But I do believe that it should be possible to come up with a simpler solution.}
    sent: "2017-03-16T17:07:01.928Z"
    editedAt: "2017-03-16T17:07:37.006Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac57b1c040b8e04038d72"
    text: {![psyduck](https://i.ytimg.com/vi/4AS6bc_IbjU/hqdefault.jpg)}
    sent: "2017-03-16T17:03:55.134Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58cac4b0f7f7d4810423b436"
    text: {This version works, though, it should be possible to improve it:^/```lisp^/Red []^/^/i: 111^/^/use: func [spec [block!] body [block!]][^/^-body: has spec bind body 'body^/^-do body^/]^/^/foo: function [^/    'x         [word!]^/    bump       [integer!]^/    case-block [block!]^/][^/^-use reduce [x] compose [^/^-^-bind case-block :body^/^-^-repeat (x) bump [case case-block]^/^-]^/]^/^/^/foo i 10 [^/    even? i [print "even!"]^/    odd? i  [print "odd!"]^/]^/^/i^/```}
    sent: "2017-03-16T17:00:32.455Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac3470b2625d06487ab97"
    text: {idk what I'm doing :joy: ^/```^/Red []^/^/x: 1^/^/foo: does [^/    context [^/        x: 2^/        return x^/    ]^/]^/^/print foo ; 2^/print x   ; 1^/```}
    sent: "2017-03-16T16:54:31.875Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cac2770b2625d06487a78a"
    text: {Indeed, `bind` is useless in such use-case, I overlooked it.}
    sent: "2017-03-16T16:51:03.680Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac1910b2625d06487a1cc"
    text: {It works because `i` remains global, as iterators in Red are not creating local contexts (yet). It should work in Rebol (using a local word as `bind`'s target, instead of the function reference).}
    sent: "2017-03-16T16:47:13.928Z"
    editedAt: "2017-03-16T16:48:03.276Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac167590d72c864d517ef"
    text: "... and looks clunky :shit: "
    sent: "2017-03-16T16:46:31.520Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cac159f7f7d4810423a09f"
    text: {You need to create a local context if you want to avoid manual saving/restoring. There are other methods for creating such context (functions, objects), though `use` is optimized for that single usage scenario.}
    sent: "2017-03-16T16:46:17.118Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac1457b3f37e75403fa70"
    text: {In fact it works even without `bind case-block :foo` part}
    sent: "2017-03-16T16:45:57.692Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cac101ac314c8a1a5771f3"
    text: "isn't it possible to do now without `use`?"
    sent: "2017-03-16T16:44:49.164Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cac0e80b2625d064879e86"
    text: "Just create a local context for a single use."
    sent: "2017-03-16T16:44:24.423Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac0aaf7f7d48104239d15"
    text: "@dockimbel what does `use` do internally?"
    sent: "2017-03-16T16:43:22.599Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cac09d0b2625d064879ce4"
    text: {@dockimbel :clap: thanks Nenad, I'll try to meditate on that}
    sent: "2017-03-16T16:43:09.314Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cac074b809ca5f4a4f4df4"
    text: {Once we add `use` function (like in Rebol), you could wrap the body of `foo` into a `use reduce [x][...]` and avoid the manual saving/restoring of `x`.}
    sent: "2017-03-16T16:42:28.627Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cac030a84f611959b0bb5a"
    text: {@9214 ^/```lisp ^/Red []^/^/i: 111^/^/foo: function [^/    'x         [word!]^/    bump       [integer!]^/    case-block [block!]^/][^/^-old: get x^/^-bind case-block :foo^/    repeat :x bump [^/        case case-block^/    ]^/    set x old^/]^/^/^/foo i 10 [^/    even? i [print "even!"]^/    odd? i  [print "odd!"]^/]^/^/print system/words/i^/```}
    sent: "2017-03-16T16:41:20.046Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cabc3e590d72c864d4f754"
    text: "I thought function already did that (rebol)"
    sent: "2017-03-16T16:24:30.616Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cabc2dfe6a638b1ad15a20"
    text: {```^/old-i: :i^/foo i 10 [^/    even? i [print "even!"]^/    odd? i  [print "odd!"]^/]^/i: old-i^/```^/b-b-but my eyes are bleeding! :crying_cat_face: }
    sent: "2017-03-16T16:24:13.655Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cabbba1c040b8e04035393"
    text: {@gltewalt the idea is to bind `i` to `foo`'s context so that value doesn't affect any other one}
    sent: "2017-03-16T16:22:18.831Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cabb7b7b3f37e75403d70a"
    text: "copy 'x [word!]   ?^/(Not at computer to test)"
    sent: "2017-03-16T16:21:15.368Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58caba730b2625d064877641"
    text: {~~monad~~ definitional scoping considered harmful :smile: }
    sent: "2017-03-16T16:16:51.816Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cab9feac314c8a1a574298"
    text: {@gltewalt should every user of `foo` copy `i` and restore afterwards?}
    sent: "2017-03-16T16:14:54.554Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cab994b809ca5f4a4f2344"
    text: "Copy"
    sent: "2017-03-16T16:13:08.163Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cab98e6d7eb18404d49490"
    text: {is it possible to make `foo` so the `i` doesn't leak to global context?}
    sent: "2017-03-16T16:13:02.510Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58cab978f7f7d48104236cca"
    text: {Yes, I know, but I want `i` to be the same after `foo` call}
    sent: "2017-03-16T16:12:40.567Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cab92fac314c8a1a573eb6"
    text: "Function"
    sent: "2017-03-16T16:11:27.058Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cab91e2215a08f0492ac63"
    text: "finction rebinds i.   "
    sent: "2017-03-16T16:11:10.345Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58cab77d1c040b8e04033d81"
    text: {okay, I think there should be `bind` somewhere inside `foo` body, but I can't wrap my head around it... any ideas?^/```^/Red []^/^/i: 111^/^/foo: function [^/    'x         [word!]^/    bump       [integer!]^/    case-block [block!]^/][  ^/    repeat :x bump [^/        case case-block^/    ]^/]^/^/foo i 10 [^/    even? i [print "even!"]^/    odd? i  [print "odd!"]^/]^/^/print system/words/i ; => should be 111^/```^/```^/...^/10^/```}
    sent: "2017-03-16T16:04:13.529Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ca53cdac314c8a1a54de2d"
    text: {@dockimbel I've downloaded latest build and yeah, now it works^/```^/>> n: 600'851'475'143^/== 600851475143.0^/>> system/build/date^/== "16-Mar-2017/13:55:07+5:00"^/```^/```^/red>> n: 600'851'475'143^/*** Syntax Error: invalid value at "600'851'47"^/*** Where: do^/red>> system/build^/== "15-Mar-2017/14:34:50+5:00"^/```}
    sent: "2017-03-16T08:58:53.366Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ca4e7ab809ca5f4a4cabf1"
    text: {Yes, the URL is fake, it was just for the sake of making the point.}
    sent: "2017-03-16T08:36:10.339Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca4657f7f7d4810420b388"
    text: {It is because `load http://domain.com/get-name` returns `none`, it just an example usage, normally it should return a word.}
    sent: "2017-03-16T08:01:27.196Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58ca3f326d7eb18404d1be80"
    text: {Gives the following error:^/```red^/red>> foo^/123^/*** Script Error: set does not allow none! for its word argument^/*** Where: set^/```}
    sent: "2017-03-16T07:30:58.355Z"
    editedAt: "2017-03-16T07:31:40.915Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58ca3e7b7b3f37e75400ee11"
    text: {@dockimbel  This code isn't working on rebol or red :point_up: [March 15, 2017 5:31 PM](https://gitter.im/red/help?at=58c9341f872fc8ce62088941): ^/```lisp^/foo: function [][^/    probe set load "a" 123^/    probe set load http://domain.com/get-name 456      ;-- would return "b"^/]^/```^/Is it expected?}
    sent: "2017-03-16T07:27:55.659Z"
    editedAt: "2017-03-16T07:32:52.757Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58ca35a8f7f7d48104205e84"
    text: "Wow.. so much to read!"
    sent: "2017-03-16T06:50:16.968Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ca19ca05a31d5a4a6142e1"
    text: "@gltewalt Right, sorry, I meant @9214."
    sent: "2017-03-16T04:51:22.365Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ca07e3ac314c8a1a537578"
    text: {@maximvl  > well, anonymous funcs are more or less known thing, they are widely used in JS^/^/I think that anonymous functions in JavaScript are widely misunderstood. Most people refer to a function object that is not assigned to a variable as an anonymous function. Function objects can be anonymous (no name property) or named (have a name property). I know because Douglas Crockford says so :-)}
    sent: "2017-03-16T03:34:59.956Z"
    editedAt: "2017-03-16T03:38:23.368Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58ca05ad0b2625d064839fa5"
    text: "@dockimbel I think you tagged the wrong person"
    sent: "2017-03-16T03:25:33.671Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c9f9776d7eb18404d09a66"
    text: {@dander It is defined, but works on maps only, not supporting objects yet (we need to study the impacts on the compiled code first). `system/words` is a special context, which is managed by low-level code from the Red runtime library and by the compiler (for compiled user code), so it doesn't have the same constraints as contexts managed by users.}
    sent: "2017-03-16T02:33:27.138Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c9f8822215a08f048ec304"
    text: {@gltewalt It loads here:^/```lisp^/red>> n: 600'851'475'143^/== 600851475143.0^/red>> n: 600'851'475'1^/== 6008514751.0^/```}
    sent: "2017-03-16T02:29:22.335Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c9db3c7b3f37e754ff464b"
    text: {This is my favorite language book. It's very slow for the first few chapters though, if you have any experience. ^/I wish the redbol world had something like it. ^/^/https://www.cs.cmu.edu/~dst/LispBook/book.pdf}
    sent: "2017-03-16T00:24:28.023Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c9c0900b2625d0648262b8"
    text: {Following that binding conversation, I feel like things are really starting to click into place in my mind. @dockimbel , you stated that you intend to add `extend`, but it looks like it's already defined... Also, wouldn't it be necessary for adding new words to `system/words`?}
    sent: "2017-03-15T22:30:40.113Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58c9925cac314c8a1a50f775"
    text: {```^/Red [^/^-Title: "Largest prime factor"^/^-Description: {^/^-^-The prime factors of 13195 are 5, 7, 13 and 29.^/^-^-^/^-^-What is the largest prime factor of the number 600851475143 ?^/^-}^/^-^/^-Date:   "13-Dec-2016"^/    Author: "9214"^/]^/^/n: 600'851'475'143^/print form compose [^/^-the largest prime factor of the number (n) is^/^-(last collect [repeat i to integer! sqrt n [if all [odd? i n // i = 0] [n: n / i keep i]]])^/]^/```}
    sent: "2017-03-15T19:13:32.350Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c991c8590d72c864ceb40e"
    text: {```^/red>> n: 600'851'475'143^/*** Syntax Error: invalid value at "600'851'47"^/*** Where: do^/```^/```^/red>> n: 600'851'475'1^/== 1713547455^/```^/I'm confused, it worked back in December :confused: ^/}
    sent: "2017-03-15T19:11:04.014Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c94c52dd08b4b859d4bd13"
    text: {@9214 Yes, that was relaxed in Rebol3 and Red (will error out in Rebol2). It is more convienent than having to write `get/any 'anythingyouwant`, though I still feel uncomfortable about it (being too used to Rebol2's way).}
    sent: "2017-03-15T14:14:42.603Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c94bd87ceae5376ac17a59"
    text: {@maximvl Unlike JS, in Redbol all functions are anonymous, there are no distinction between "normal" functions and anonymous ones.}
    sent: "2017-03-15T14:12:40.608Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c9462921d548df2ce002f3"
    text: {`:never-gonna-give-you-up-never-gonna-let-you-down`}
    sent: "2017-03-15T13:48:25.047Z"
    editedAt: "2017-03-15T13:50:35.731Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c945e600c00c3d4f0f28c7"
    text: {interesting follow up is you can write `:anythingyouwant` and it will never fail :D}
    sent: "2017-03-15T13:47:18.722Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c9451300c00c3d4f0f22da"
    text: {@dockimbel the `strip-words` example is cool though, thanks}
    sent: "2017-03-15T13:43:47.886Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c944dcde50490822945832"
    text: {well, anonymous funcs are more or less known thing, they are widely used in JS}
    sent: "2017-03-15T13:42:52.289Z"
    editedAt: "2017-03-15T13:44:10.969Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c944d621d548df2cdff9a9"
    text: {> it's the bindology that should fear your mind - not the other way around.}
    sent: "2017-03-15T13:42:46.384Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c94416dd08b4b859d47e0f"
    text: {I'm feeling like Beatrix Kiddo in Three Inch punch teaching scene}
    sent: "2017-03-15T13:39:34.839Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c942d6872fc8ce6208f8aa"
    text: {Just to give you another perspective on things in Redbol: words are not necessary in order to achieve computations, so no function called by name, nor words used as variables are strictly required. Here is a function that will reduce all words to their value, so you can evaluate the values directly, achieving the same computation as the original block:^/```lisp^/strip-words: function [code][^/^-parse code rule: [any [^/^-^-p: word! (p/1: to-get-word p/1)^/^-^-| any-string!^/^-^-| into rule^/^-^-| skip^/^-]]^/^-reduce code^/]^/^/do probe strip-words [append "=" mold add 1 2]^/```^/Have a look at the output of `probe`. ;-) That is another important feature of Redbol: all values are anonymous (including functions, objects, context,...). If you're not convinced, tell me the name of the following function: ^/```lisp^/set [foo bar] func [ ][print "hello"]^/^/:foo^/== func [][print "hello"]^/:bar^/== func [][print "hello"]^/```}
    sent: "2017-03-15T13:34:14.034Z"
    editedAt: "2017-03-15T13:39:03.934Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c93e0621d548df2cdfc41b"
    text: {`func` is just a (convenient) shortcut for `make function!` by the way. Note that Red follows R3 in this case, with a fixed-arity `make` action (variable-arity in R2).}
    sent: "2017-03-15T13:13:42.200Z"
    editedAt: "2017-03-15T13:15:08.607Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58c93da2de50490822942442"
    text: {@maximvl That is correct. Though it also processes the local words and refinements in the same way, just setting them respectively to `none` and a logic value (depending if the refinement was used at call site or not).}
    sent: "2017-03-15T13:12:02.299Z"
    editedAt: "2017-03-15T13:12:10.059Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c93a8ede50490822941152"
    text: {@dockimbel one more thing - do I understand `func` word correctly? as in `func` creates context, then finds all it's arguments words in the body, binds them to this context, and on evaluation assigns passed parameters to context so each corresponding word in function will be evaluated to this value?}
    sent: "2017-03-15T12:58:54.778Z"
    editedAt: "2017-03-15T12:59:16.594Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c93961de5049082294093a"
    text: {Though, for macro expansion, we still have no way to distinguish code from data (unlike in Lisp).}
    sent: "2017-03-15T12:53:53.128Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c937887ceae5376ac0df21"
    text: {@maximvl Yes, you're describing the basis for `module!` type. We will introduce it in 0.8.0. It would also provide boundaries for macro expansions (@JacobGood1 ;-))  and modular compilation support.}
    sent: "2017-03-15T12:46:00.614Z"
    editedAt: "2017-03-15T12:54:31.557Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c9376b21d548df2cdf9328"
    text: {In Rebol2 and Red, contexts can be extended only by cloning operation (`make <proto> <spec>`), in Rebol3, object can be extended using series actions. I was not for that change, as it was blurring the lines between objects and series (not even mentioning maps). I personnaly had no need for expandable objects, just maybe for some specific cases, where reconstructing the whole objects with the right binding would have been too expensive/complex. So I was in favor of just an `extend` native, which would allow extending objects in-place (and would work only on objects, so avoiding confusion with series). In Red, I plan to add `extend`, though, it would probably make objects access path compilation much less efficient a priori, so I need to find a way to avoid the speed penalty for that first.}
    sent: "2017-03-15T12:45:31.103Z"
    editedAt: "2017-03-15T12:48:02.086Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c936787ceae5376ac0d827"
    text: {@dockimbel hm, but let's say if one could create it's own analogue to `system/words` and ask `load` to use this object instead, would it make sense?}
    sent: "2017-03-15T12:41:28.306Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c935e4dd08b4b859d41b1e"
    text: "ah :-)"
    sent: "2017-03-15T12:39:00.612Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c935db00c00c3d4f0eb063"
    text: "Once modules are introduced, will it change?"
    sent: "2017-03-15T12:38:51.943Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c935af7ceae5376ac0d159"
    text: {Yes, that is why you see many "unset" words there. Though, that will change once we introduce modules.}
    sent: "2017-03-15T12:38:07.810Z"
    editedAt: "2017-03-15T12:38:53.305Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c935a4e961e53c7feda7dc"
    text: {@dockimbel does it mean that any `load`ed word goes to `system/words` ?}
    sent: "2017-03-15T12:37:56.105Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c93561de5049082293eea2"
    text: {in R3, objects could be expanded. But not sure it is just the same :-)}
    sent: "2017-03-15T12:36:49.449Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c9355e09e7ba8510ccd380"
    text: {There is no "current context". That is a notion coming from scopes.}
    sent: "2017-03-15T12:36:46.567Z"
    editedAt: "2017-03-15T12:37:16.030Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c9354709e7ba8510ccd2be"
    text: "or `load`"
    sent: "2017-03-15T12:36:23.301Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c934fc21d548df2cdf8016"
    text: "I think"
    sent: "2017-03-15T12:35:08.084Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c934fa7ceae5376ac0cb88"
    text: {because otherwise `set` could add word to current context}
    sent: "2017-03-15T12:35:06.865Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c934e321d548df2cdf7fb5"
    text: {I don't see how it relates to contexts being expandable or not.}
    sent: "2017-03-15T12:34:43.557Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c934c3dd08b4b859d41500"
    text: "@dockimbel could you explain reasons behind that?"
    sent: "2017-03-15T12:34:11.312Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c934b621d548df2cdf7e63"
    text: {@dockimbel one of the reasons for this, I believe, also the fact that contexts are not expandable}
    sent: "2017-03-15T12:33:58.436Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c93496e961e53c7fed9f44"
    text: ":D"
    sent: "2017-03-15T12:33:26.239Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c9348409e7ba8510ccccd8"
    text: {Another one (not even the programmer can guess what the outcome would be ;-)):^/```lisp^/set first random [a b c] 789^/```^/;-)}
    sent: "2017-03-15T12:33:08.079Z"
    editedAt: "2017-03-15T12:34:08.479Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c9344d7ceae5376ac0c675"
    text: "exactly"
    sent: "2017-03-15T12:32:13.529Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c9341f872fc8ce62088941"
    text: {@maximvl That is why some things like catching automatically "local variables" in other languages is trivial, but can be very challenging in Redbol. For example:^/```lisp^/foo: function [][^/    set load "a" 123^/    set load http://domain.com/get-name 456      ;-- would return "b"^/]^/```}
    sent: "2017-03-15T12:31:27.369Z"
    editedAt: "2017-03-15T12:32:01.375Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c923a121d548df2cdf12e0"
    text: {the notion of the `red` pill becomes more deeper...}
    sent: "2017-03-15T11:21:05.162Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c9232709e7ba8510cc53ff"
    text: {yep, the read-time instead of run-time bindings is a good explanation}
    sent: "2017-03-15T11:19:03.759Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c922d37ceae5376ac05652"
    text: {It is like `there is no spoon` moment of `Neo`  :)}
    sent: "2017-03-15T11:17:39.681Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58c9203721d548df2cdef93c"
    text: {@dockimbel thanks for clarification, absence of scopes is very mind-blowing concept, need to get used to it}
    sent: "2017-03-15T11:06:31.797Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c91ee4e961e53c7fed1a9e"
    text: "thanks Nenad!"
    sent: "2017-03-15T11:00:52.836Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c91ecc7ceae5376ac03bcc"
    text: {Not if you use `view`. But in some cases, you might want to apply manual transformations to the face tree before passing it to `view`, so you will use `layout` separately in such cases. For example:^/```lisp^/win: layout [button "ok"]^/win/size: 200x200^/uppercase win/pane/1/text^/view win^/```}
    sent: "2017-03-15T11:00:28.935Z"
    editedAt: "2017-03-15T11:02:34.826Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c91ec4dd08b4b859d3893e"
    text: {ah, perhaps it's needed for backwards compatibility with R2}
    sent: "2017-03-15T11:00:20.602Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c91e9ae961e53c7fed1738"
    text: "so `layout` isn't mandatory?"
    sent: "2017-03-15T10:59:38.095Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c91e7ce961e53c7fed16cf"
    text: {@9214 `layout` is automatically called by `view`in Red (unlike in Rebol2).}
    sent: "2017-03-15T10:59:08.516Z"
    editedAt: "2017-03-15T10:59:23.453Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c91e4cdd08b4b859d38658"
    text: {as far as I know `layout` is used to transform `VID block` into tree of `faces`, and view in turn is used to actually show GUI from a face tree}
    sent: "2017-03-15T10:58:20.067Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c91dd1e961e53c7fed12a6"
    text: {what's the difference between using `view layout <VID block>` and `view <VID block>` in Red?}
    sent: "2017-03-15T10:56:17.227Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58c91845dd08b4b859d361a6"
    text: {@maximvl ^/> there was a post how function leaks words, now you are saying that foreach and other iterators in Red are not providing a local context^/> probably same applies to if, either, etc^/> again, I'm not saying it is a bad thing, just (almost) all other languages have local context in these places and people would expect this^/> so if I assign something in loop's body, I would expect this name to not interfere with anything outside the loop, and it makes a lot of sense to me^/^/`function` collects `set-words` not words, so "leaking words" is improper, as it does not collect words. For the rest, it makes no sense in languages like Redbol, as they don't have scopes (only an illusion of scopes constructed at runtime, called "definitional scoping").^/^/> in JS you have `var` which will keep variable in local context^/> what is analogue in Red?^/^/Strictly speaking, there are no "variables" in Redbol, and a `var`-like construct makes no sense, as it implies scopes.^/^/> And why global is default? What are the reasons?^/^/Because when a word is LOADed, it needs to be bound to a context (at least in R2 and Red, R3 allows "out of context" words). What we call the "global" context, would be more accurately described as the "default" context. There is no other way than binding to a default context, as local contexts are constructed at eval-time, while loading is at read-time (in Lisp terms).^/^/> I would prefer to have locally bound words by-default and if for some unimaginable reason I would need a global thing - to declare it separately^/^/Not possible in Redbol, as there is no scopes and no local contexts at read-time.^/^/> something similar to local scope - setting the word should bind it in the closes local context^/^/There are no scopes, nor there is any scope hierarchy, nor "close" or "far" or "outer" local contexts. Bindings are constructed at eval-time, nesting context constructors will give you similar results as nested scopes, but without having scopes.^/^/> the key idea is that `write`, that is changing word's value and `assign` which is creating a new binding are two different things.^/^/A word is bound to a context where it has a value. Binding a word to a context (using `load`, `bind` or a context constructor), and setting a word to a value (in a context) using a set-word or `set` function, are two differnt operations.^/^/> so these two are completely different things, right?^/> a: 5^/> a: 6^/^/They are the same kind of expressions. The first one will set the value of the word `a` to 5, the second will set it to 6 (assuming both `a:` are bound to the same context).^/^/> with `print d` I would like `d` to be searched in outer contexts as well^/^/There are no "outer" contexts, there are no implicit relations between contexts, no implicit hierarchy. You can make a  context self-reference itself, or you could build an arbitrary complex graph (and not a tree) of contexts. Think of contexts as just objects (in Redbol sense).^/^/> Nice article of how R3 aproached the available contexts - http://www.rebol.net/r3blogs/0334.html^/^/The way R3 handles bindings is specific, as it relies on modules, which are not present in Rebol2, nor Red (yet). So, reading that article will not help you understand Rebol2's or Red's contexts.^/^/> this is strange, a lot of compiled languages allow loop-local variables^/^/That is irrevelant, unless "a lot of compiled languages" are also homoiconic, with first-class contexts and without scopes.^/^/> Didec: You forget that there is no code in Rebdol, only data.^/> Maximvl: well, it's same for CL and SBCL complies everything down to native code and since code = data, one can say that there is no data, only code^/^/It is not the same in Lisp languages, there is a distinction between "code" and "data", as code has to start with a call. Redbol has no such restriction on code, which makes it a very different. Moreover, contexts and dynamic binding makes it way more flexible, but at the same time, translating directly to low-level assembly code, like in your CL example, is not possible.^/^/^/^/}
    sent: "2017-03-15T10:32:37.505Z"
    editedAt: "2017-03-15T10:33:43.455Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c90a42de5049082292e29d"
    text: {btw On Lisp by Paul Graham has nice example of how to implement Prolog in Lisp}
    sent: "2017-03-15T09:32:50.495Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c9062c21d548df2cde4fc0"
    text: {@JacobGood1 I tried to understand Shen's approach to types, but didn't get it yet}
    sent: "2017-03-15T09:15:24.385Z"
    editedAt: "2017-03-15T09:15:34.102Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c9061100c00c3d4f0d789d"
    text: {@JacobGood1 interesting, Prolog doesn't seem to be needed as a separate language, the DB and query system can be (and is) implemented as a library }
    sent: "2017-03-15T09:14:57.585Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c8af99de50490822910f43"
    text: {@PeterWAWood Yeah! Knew it had to be some place :)}
    sent: "2017-03-15T03:06:01.811Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c89d3009e7ba8510c96655"
    text: {```text^/red>> s: ""^/== ""^/red>> append/dup s #"*" 10^/== "**********"^/```}
    sent: "2017-03-15T01:47:28.745Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58c887e1872fc8ce6204ce96"
    text: {or even ^/```^/loop 10 [append str: "" "a"]^/```}
    sent: "2017-03-15T00:16:33.124Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c886bfdd08b4b859d07aca"
    text: {Thanks, I was wondering  if something like this existed^/^/```^/{5#"x" } ; or^/repeat  5  #"x"^/```}
    sent: "2017-03-15T00:11:43.502Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c882fa00c00c3d4f0ad12c"
    text: {I would just type^/```^/loop 10 [str: "" append str "x"]^/```}
    sent: "2017-03-14T23:55:38.875Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c87e1221d548df2cdb9a17"
    text: {Silly question:^/^/Is there a terse way to create a n char repeat string?^/^/```^/str: ""^/loop 10 [append str #"x"]^/```}
    sent: "2017-03-14T23:34:42.195Z"
    editedAt: "2017-03-14T23:35:32.182Z"
    v: 3
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c8684021d548df2cdb09d2"
    text: {@DideC  Thanks for the bind solution.^/^/:point_up: [March 14, 2017 3:08 PM](https://gitter.im/red/help?at=58c7f942e961e53c7fe5d087)^/^/Overall the terse simple R2 solution I chose is to use functions. Holding my breath for Red Linux :)^/^/```^/space: #" "^/text: [5 "Test"]^/space-to-tab: true^/tab-width: 4^/^/append-space-indent: func [^/^-tab-num ^/]  [^/^-loop (tab-num * tab-width) [append output-text tab]^/] ^/append-tab-indent: func [^/^-tab-num ^/] [^/^-loop tab-num [append output-text space]^/]^/file-save: does [^/^/output-text: copy []^/^/either space-to-tab^/  [append-indent: :append-tab-indent]^/  [append-indent: :append-space-indent]^/^/foreach [tab-num t ] text [^/  if tab-num > 0 [ append-indent tab-num ]^/]^/probe output-text^/]^/file-save^/```}
    sent: "2017-03-14T22:01:36.857Z"
    editedAt: "2017-03-14T22:05:36.403Z"
    v: 4
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c81f2f872fc8ce6201d0a6"
    text: {It is one of the most exciting languages along with Shen, Common Lisp, and Prolog... I keep an eye on all of them and their various developments}
    sent: "2017-03-14T16:49:51.961Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c81dcd872fc8ce6201c5d5"
    text: {I keep playing around with red for short bursts, usually months apart, so I am by no means an expert}
    sent: "2017-03-14T16:43:57.774Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c81d68dd08b4b859cdc854"
    text: {I actually think that definitional scoping will make macros very cool in the future, excited to see where it goes}
    sent: "2017-03-14T16:42:16.436Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c81d0521d548df2cd8e06b"
    text: "Aren't we all =)"
    sent: "2017-03-14T16:40:37.818Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c81cef21d548df2cd8e019"
    text: "And I'm still in alpha "
    sent: "2017-03-14T16:40:15.771Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c81cdbdd08b4b859cdc46a"
    text: {Red is still in alpha, thus the macros are alpha as well.}
    sent: "2017-03-14T16:39:55.449Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
)#(
    id: "58c81cb1872fc8ce6201bcd9"
    text: {@gltewalt you cant ask if something is a macro, a macro would expand before it could ever be asked. Red is too free form for the head question anyway. We will have to play with macros a good bit before some ideas can manifest into solutions. As of right now, macros are decent if used within your own code. I could not imagine people working together on some red code, mixing the code with macros, and getting good results(that is, predictable code).}
    sent: "2017-03-14T16:39:13.793Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c81c7709e7ba8510c5f0dc"
    text: {lol, when I was 5 math confused me because I wanted to know 'why' the symbols 1, +, and 1 equaled the symbol 2}
    sent: "2017-03-14T16:38:15.204Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c81ba1de504908228d6a6f"
    text: {When we get more users and more reading material someone will come along and explain things more plainly. The best idea for now is to code until it clicks.}
    sent: "2017-03-14T16:34:41.809Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c81b6ee961e53c7fe6ec98"
    text: {It is actually not hard at all to understand, I just think the explanations are a little cryptic. It is a lot like math, it really is not that hard but the explanations can make it seem like mystical incantations}
    sent: "2017-03-14T16:33:50.166Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c81b07de504908228d6697"
    text: {well, it exactly `seem` easy, but it's not easy inside :D}
    sent: "2017-03-14T16:32:07.222Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c8193cdd08b4b859cda947"
    text: {If I had came to it with no exposure to programming before, I'm sure it would seem easy}
    sent: "2017-03-14T16:24:28.669Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c818b809e7ba8510c5ce90"
    text: {Red/Rebol - very strange to me. ^/I've read the SO stuff many times but I continue to trip}
    sent: "2017-03-14T16:22:16.711Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c81881de504908228d54b5"
    text: {This might be essential - http://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red}
    sent: "2017-03-14T16:21:21.694Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c8187509e7ba8510c5cbcd"
    text: { That's what i mean. It was an aside about my struggles. }
    sent: "2017-03-14T16:21:09.830Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c81842dd08b4b859cda2fd"
    text: {Rebol uses so called definitional scoping - http://www.rebol.com/r3/docs/concepts/funcs-scope.html}
    sent: "2017-03-14T16:20:18.634Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c817a8e961e53c7fe6cd6f"
    text: "Confusing because it's so strange to me"
    sent: "2017-03-14T16:17:44.373Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c8177709e7ba8510c5c584"
    text: {For whatever reason, it has the most confusing semantics to me that I've yet encountered. In particular, no scope or "definitional scoping" continues to mess with my head. }
    sent: "2017-03-14T16:16:55.019Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c816a87ceae5376ab9e618"
    text: {@gltewalt that's the thing, there is no head in Redbol}
    sent: "2017-03-14T16:13:28.854Z"
    editedAt: "2017-03-14T16:13:43.962Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c8169600c00c3d4f07c02e"
    text: {My passing thought was: Are you a macro? Are you at head? If so, do your thing. Otherwise, be still}
    sent: "2017-03-14T16:13:10.748Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c80f50dd08b4b859cd6185"
    text: "Hmmm. ^/Yep, I see"
    sent: "2017-03-14T15:42:08.897Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c80f4821d548df2cd86a05"
    text: {which makes me think that Red can be a nice platform for a RedLisp with all the scopes and macros done well :D}
    sent: "2017-03-14T15:42:00.316Z"
    editedAt: "2017-03-14T15:43:29.447Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c80ed4e961e53c7fe67d5d"
    text: {so if you have `x: 5` and `f x` will be `f(x)` but if you have macro named `x` it will become `f(x())`}
    sent: "2017-03-14T15:40:04.923Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c80e957ceae5376ab99fa2"
    text: "or anything else"
    sent: "2017-03-14T15:39:01.775Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c80e907ceae5376ab99f21"
    text: {and in rebol you have `a b c` which can be `a() b() c()` or `a() b(c())` or `a(b()) c()`}
    sent: "2017-03-14T15:38:56.591Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c80e6cde504908228cff3d"
    text: {@gltewalt the thing is in lisp you know that first element of the list is a callable thing, function or macro}
    sent: "2017-03-14T15:38:20.012Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c80e4a00c00c3d4f0781ea"
    text: {(I could be confused and be wrong. Happens to me often lol)}
    sent: "2017-03-14T15:37:46.996Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c80e3b7ceae5376ab99c10"
    text: {@gltewalt I doubt it can be mimicked, well, unless you make a lisp out of rebol}
    sent: "2017-03-14T15:37:31.905Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c80e1021d548df2cd86026"
    text: {blocks in redbol behave like quoted lists in Lisp unless evaluated by Do. ^/Am I wrong?}
    sent: "2017-03-14T15:36:48.809Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c80d6d872fc8ce6201494c"
    text: {Basically - can't that behaviour be mimicked in Red?}
    sent: "2017-03-14T15:34:05.448Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c80d447ceae5376ab994e6"
    text: "With Lisp a bit, but didn't use macros"
    sent: "2017-03-14T15:33:24.081Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c80c24872fc8ce62013fcd"
    text: {@gltewalt Oh, lol. I do not understand the question, do you have experience with lisps and macros?}
    sent: "2017-03-14T15:28:36.487Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c80be421d548df2cd84e42"
    text: {To you. About Lisp not expanding macro unless at front of list}
    sent: "2017-03-14T15:27:32.973Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c80bbf7ceae5376ab989b2"
    text: "lol"
    sent: "2017-03-14T15:26:55.843Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c80aab09e7ba8510c56132"
    text: {@gltewalt who is that question directed toward? This channel is too derailed for me to know, =P}
    sent: "2017-03-14T15:22:19.433Z"
    editedAt: "2017-03-14T15:27:18.678Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c80a31e961e53c7fe65679"
    text: "Couldn't you use head in block! to mimic that?"
    sent: "2017-03-14T15:20:17.799Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c809597ceae5376ab978cd"
    text: {This is the help channel though, probably have taken this discussion too far lol}
    sent: "2017-03-14T15:16:41.475Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c80945e961e53c7fe64f60"
    text: {Shen has pattern matching macros as well, being a dialect of lisp, the ambiguity of expansion is taken care of there as well... even with the pattern matching style macros}
    sent: "2017-03-14T15:16:21.266Z"
    editedAt: "2017-03-14T15:17:44.241Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c808c500c00c3d4f07548c"
    text: {I always find a slight trade off when dropping those parens, the lisp heritage was really on to something}
    sent: "2017-03-14T15:14:13.962Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c8088709e7ba8510c54ef9"
    text: "```(defun hi (x mac) (do some stuff x mac))```"
    sent: "2017-03-14T15:13:11.511Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c80862e961e53c7fe6462f"
    text: {Well not just that, if we place mac in the body of some function, it still wont expand unless placed at the front of a list}
    sent: "2017-03-14T15:12:34.897Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c8081dde504908228cd048"
    text: {it's the `'` what makes difference, in CL you can tell what's data and what is the code during parsing}
    sent: "2017-03-14T15:11:25.763Z"
    editedAt: "2017-03-14T15:11:46.158Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c807e600c00c3d4f074e18"
    text: {The syntax pattern matching macro is more predictable, but that could still bite you}
    sent: "2017-03-14T15:10:30.817Z"
    editedAt: "2017-03-14T15:10:43.335Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c807b1de504908228ccbdc"
    text: {because you don't know what's code and what's data, right}
    sent: "2017-03-14T15:09:37.939Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c807a37ceae5376ab96c75"
    text: {>no matter if it is in a block, in some parse rule, no matter where it is at all}
    sent: "2017-03-14T15:09:23.961Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c8079ade504908228ccb31"
    text: "oh my, I didn't think about this"
    sent: "2017-03-14T15:09:14.057Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c8076d00c00c3d4f074a72"
    text: {I do not have to worry about something like '(hi there mac you are nice)}
    sent: "2017-03-14T15:08:29.196Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c8074fde504908228cc9c1"
    text: {In, common lisp for example, the macro expands at the front of the list}
    sent: "2017-03-14T15:07:59.255Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c8071edd08b4b859cd2665"
    text: {mainly, the unfolding of macros is more predictable...^/^/If I write some macro, lets call it ```mac [x y]```, every time the word mac is in the source code somewhere it will attempt to expand^/^/no matter if it is in a block, in some parse rule, no matter where it is at all, it will attempt to expand}
    sent: "2017-03-14T15:07:10.112Z"
    editedAt: "2017-03-14T15:07:29.025Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c8062a872fc8ce6201143e"
    text: "@JacobGood1 in which ways they are better?"
    sent: "2017-03-14T15:03:06.261Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c805eade504908228cc01c"
    text: {I still think macros are better in lisps, but well see what happens over time}
    sent: "2017-03-14T15:02:02.802Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c805847ceae5376ab9570e"
    text: "@JacobGood1 ok, makes sense"
    sent: "2017-03-14T15:00:20.962Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c804ef872fc8ce62010a8f"
    text: {I have programmed in many languages, but when I came to rebol, it had very unique programming semantics regarding "scoping"; there was some cross over of course, but the "scoping" was so different.  At first, I wanted local every where as well, but over time it becomes no big deal. I just kept plodding along(I make it sound like I have been programming a lot in rebol, I have not) with the idea that I wanted to learn the rebol way before I started to interject my ideas from other languages. So, at this point, I see the rebol way better than I did before and I understand why things are not "local"... contexts. I do not believe that making things "non local" is easier for beginners but, I have a skewed view point from other languages since I did not start with rebol. Of course, rebol is so easy in other ways for beginners, I think that it makes up for the scoping semantics.^/^/The only thing I really wanted was macros, Doc has obliged that. }
    sent: "2017-03-14T14:57:51.654Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c8000fe961e53c7fe603f4"
    text: "Try http://www.rebol.net/r3blogs/0144.html ?"
    sent: "2017-03-14T14:37:03.346Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7ffd809e7ba8510c4fc0a"
    text: "did Carl explain why he did that for loops?"
    sent: "2017-03-14T14:36:08.624Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7ffae00c00c3d4f0706bd"
    text: "@maximvl R2 does ;)"
    sent: "2017-03-14T14:35:26.553Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
)#(
    id: "58c7ff89dd08b4b859cce802"
    text: {@DideC Perhpas I can emulate `foreach` using a global `tab-cnt`?}
    sent: "2017-03-14T14:34:49.661Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7feaa7ceae5376ab91b88"
    text: {and since code = data, one can say that there is no data, only code ;)}
    sent: "2017-03-14T14:31:06.526Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7fe76872fc8ce6200d476"
    text: {```^/* (defun f (x y) (+ x y))^/^/F^/* (disassemble 'f)^/^/; disassembly for F^/; Size: 40 bytes. Origin: #x10058B0F13^/; 13:       498B4C2460       MOV RCX, [R12+96]                ; thread.binding-stack-pointer^/                                                              ; no-arg-parsing entry point^/; 18:       48894DF8         MOV [RBP-8], RCX^/; 1C:       488BD6           MOV RDX, RSI^/; 1F:       488BFB           MOV RDI, RBX^/; 22:       41BBC0010020     MOV R11D, 536871360              ; GENERIC-+^/; 28:       41FFD3           CALL R11^/; 2B:       488B5DE8         MOV RBX, [RBP-24]^/; 2F:       488B75F0         MOV RSI, [RBP-16]^/; 33:       488BE5           MOV RSP, RBP^/; 36:       F8               CLC^/; 37:       5D               POP RBP^/; 38:       C3               RET^/; 39:       CC10             BREAK 16                         ; Invalid argument count trap^/```}
    sent: "2017-03-14T14:30:13.980Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7fe57e961e53c7fe5f72b"
    text: {well, it's same for CL and SBCL complies everything down to native code}
    sent: "2017-03-14T14:29:43.315Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7fe33872fc8ce6200d27a"
    text: {You forget that there is no code in Rebdol, only data ;-)^/}
    sent: "2017-03-14T14:29:07.747Z"
    editedAt: "2017-03-14T14:29:12.242Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7fe09dd08b4b859ccdc4c"
    text: {@DideC this is strange, a lot of compiled languages allow loop-local variables}
    sent: "2017-03-14T14:28:25.260Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7fddddd08b4b859ccdbaa"
    text: {R2 Foreach define local values at the time it is execute.^/I guess Red act differently because of compilation issues with that: `foreach` body would have to be always interpreted.}
    sent: "2017-03-14T14:27:41.042Z"
    editedAt: "2017-03-14T14:28:12.300Z"
    v: 3
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7fdccde504908228c8057"
    text: {@DideC I plan a code browser so `does` will go away when browsing for the word definition.^/^/I intend a natural language reader to mostly use word vs. define new ones. So minimize `do` count?^/^/^/^/}
    sent: "2017-03-14T14:27:24.709Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7fd72872fc8ce6200cc30"
    text: {Yes, but it stuck you in binding difficulties as you already discover.^/Functions are goods with arguments to pass values they need to process.^/If your functions need to use values out of its context, they must have been defined previously.}
    sent: "2017-03-14T14:25:54.005Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7fc4fde504908228c7547"
    text: {@maximvl I declare snipets of code using `func-name: does [;some code]` format.^/^/This way `func-name` looks and feels like any other words.^/^/I came to Rebol in part because of the Forth  language inspiration.}
    sent: "2017-03-14T14:21:03.796Z"
    editedAt: "2017-03-14T14:21:25.215Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7fb7700c00c3d4f06e398"
    text: {so you realize that `func-name` should return a block for `do` to execute}
    sent: "2017-03-14T14:17:27.704Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7fb3300c00c3d4f06e09d"
    text: {I am exploring code allowing a person using a word-processor modifying the word-processor interface.^/^/I try for snipets of code to be just one word, like in natural language}
    sent: "2017-03-14T14:16:19.798Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7fb09e961e53c7fe5dcc6"
    text: {@OneArb what do you want to achieve writing `do func-name` ?}
    sent: "2017-03-14T14:15:37.477Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7fae9872fc8ce6200bb10"
    text: "yes."
    sent: "2017-03-14T14:15:05.859Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7fae000c00c3d4f06dd82"
    text: {`do` and `does` are completely different things, aren't they?}
    sent: "2017-03-14T14:14:56.437Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7facc872fc8ce6200b9dc"
    text: "wait wat"
    sent: "2017-03-14T14:14:36.123Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7faaf7ceae5376ab8fce4"
    text: {LOL^/`do` is 2 letters one time, but `does` is 4 letters two times ;-)}
    sent: "2017-03-14T14:14:07.817Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7fa7d7ceae5376ab8fb52"
    text: { @DideC I use `does` because it saves me writing `do` func-name}
    sent: "2017-03-14T14:13:17.413Z"
    editedAt: "2017-03-14T14:13:43.523Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7fa4621d548df2cd7c3b9"
    text: {For your last example, it's more complicated as you already define contexts for the code by using `does` (so you define functions). It become over complicated (but doable) to rebind them.}
    sent: "2017-03-14T14:12:22.367Z"
    editedAt: "2017-03-14T14:13:19.312Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7f942e961e53c7fe5d087"
    text: {@OneArb  Your first code :point_up: [14 mars 2017 01:06](https://gitter.im/red/help?at=58c733efde5049082287f6ff) could work in R2 if you use:^/```^/if tab-num > 0 [do bind :append-indent 'tab-num]^/```^/To rebind the block of code to the `foreach` context. And if you define `space: #" "` !^/}
    sent: "2017-03-14T14:08:02.781Z"
    editedAt: "2017-03-14T14:11:12.168Z"
    v: 3
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7f922872fc8ce6200ab8f"
    text: {I assume complex module system will not make things better :)}
    sent: "2017-03-14T14:07:30.901Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f90600c00c3d4f06d296"
    text: {it depends, of course, on target audience, but from my experience Red already introduces a lot of new concepts for developers}
    sent: "2017-03-14T14:07:02.108Z"
    editedAt: "2017-03-14T14:07:55.460Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f89900c00c3d4f06d0ac"
    text: {@maximvl  - just a note. Some experienced Rebol users found R3 aproach to modules/context being overcomplicated. I think, that Doc has some simpler idea in mind. We will see, what comes in terms of 0.8 release ...}
    sent: "2017-03-14T14:05:13.743Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f713e961e53c7fe5be66"
    text: {@DideC `append-space-indent` and `append-tab-indent` functionality is indeed reversed.^/^/In that code structure I like that all the reader may care for is to know indent is rendered somehow and save reading the details.^/^/I have yet to find any solution to make that code work in R2. It's perhaps not possible?^/^/```^/Red/Rebol []^/^/; ? can it work in R2^/^/text: [5 "Test"]^/space-to-tab: true^/tab-width: 4^/^/append-tab-indent: does [^/^-loop (tab-num * tab-width) [append output-text tab]^/]^/append-space-indent: does [^/^-loop tab-num [append output-text space]^/]^/file-save: does [ ^/^/^-output-text: copy []^/^/^-either space-to-tab^/^-^-[append-indent: :append-tab-indent]^/^-^-[append-indent: :append-space-indent]^/^-^/^-foreach [tab-num t ] text [^/^-^-if tab-num > 0 [ append-indent ]    ^/^-]^/  probe output-text^/]^/file-save^/```^/}
    sent: "2017-03-14T13:58:43.877Z"
    editedAt: "2017-03-14T14:05:20.774Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7f6e621d548df2cd7aac9"
    text: "maybe I'll get the idea"
    sent: "2017-03-14T13:57:58.130Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f6df872fc8ce62009c59"
    text: "ok, let me read your links"
    sent: "2017-03-14T13:57:51.639Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f6ab21d548df2cd7a8b7"
    text: {Nice article of how R3 aproached the available contexts - http://www.rebol.net/r3blogs/0334.html}
    sent: "2017-03-14T13:56:59.276Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f68121d548df2cd7a666"
    text: {@PeterWAWood exactly! I was asking why few weeks ago :)}
    sent: "2017-03-14T13:56:17.589Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f65509e7ba8510c4af99"
    text: {The reason that local variables need to be declared at the top of the function is that the context is created prior to the code being evaluated. It may be an implementation detail, but function contexts are not expandable (same with object contexts).}
    sent: "2017-03-14T13:55:33.864Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58c7f5fa00c00c3d4f06ba5b"
    text: {with `print d` I would like `d` to be searched in outer contexts as well}
    sent: "2017-03-14T13:54:02.777Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f5c821d548df2cd7a2a4"
    text: {OK, now tell me, how do I import/access some upper level `d: 10`in the body of the loop :-)}
    sent: "2017-03-14T13:53:12.983Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f59fe961e53c7fe5b3ca"
    text: {@pekr I would prefer `global [c] [loop 1 [c: 5]]` :)}
    sent: "2017-03-14T13:52:31.816Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f598872fc8ce620092f9"
    text: {@PeterWAWood what Maxim means is, that once you assign a value to some word, re my above example, it "leaks" to global context}
    sent: "2017-03-14T13:52:24.614Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f572872fc8ce62009249"
    text: "```loop``` is a function with it's own context."
    sent: "2017-03-14T13:51:46.331Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58c7f5617ceae5376ab8d326"
    text: {so these two are completely different things, right?^/```^/a: 5^/a: 6^/```}
    sent: "2017-03-14T13:51:29.563Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f541de504908228c41da"
    text: "ok, `:` is not an operator, but `set-word` thing"
    sent: "2017-03-14T13:50:57.151Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f52a872fc8ce62008fae"
    text: {@maximvl in R2, you could use `use [c][loop 1 [c: 5]]`, or define loop-local function, which would just do the same? But you probably are asking about the default, out of the box behaviour like that?}
    sent: "2017-03-14T13:50:34.179Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f5287ceae5376ab8d132"
    text: "or `:` in Redbol"
    sent: "2017-03-14T13:50:32.894Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f5217ceae5376ab8d11a"
    text: {most languages have single operator for this, usually `=`}
    sent: "2017-03-14T13:50:25.240Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f518e961e53c7fe5b064"
    text: "In Forth you mean?"
    sent: "2017-03-14T13:50:16.329Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7f4fc21d548df2cd79cb9"
    text: {the key idea is that `write`, that is changing word's value and `assign` which is creating a new binding are two different things}
    sent: "2017-03-14T13:49:48.520Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f4d6872fc8ce62008ddb"
    text: {@JacobGood1^/> you could always make a dialect for people who want local crap for every function^/^/I like the local side as well, in the hope some day, Red compiler becomes optimized. /local could then make a difference?}
    sent: "2017-03-14T13:49:10.633Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7f4ce00c00c3d4f06b380"
    text: "this is a good question actually"
    sent: "2017-03-14T13:49:02.367Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f4c900c00c3d4f06b36d"
    text: {@pekr ^/>So how do you assign to something or read from something out of your local scope, without some accessors?}
    sent: "2017-03-14T13:48:57.242Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f47fdd08b4b859cc9739"
    text: "Use it outside a func and it's a global !"
    sent: "2017-03-14T13:47:43.422Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7f47fe961e53c7fe5ac09"
    text: {@PeterWAWood the `/local` thing requires you to go to the head of function each time you introduce new word}
    sent: "2017-03-14T13:47:43.226Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f46100c00c3d4f06b0c1"
    text: { in JS you have var which will keep variable in *current* context.}
    sent: "2017-03-14T13:47:13.017Z"
    editedAt: "2017-03-14T13:47:27.594Z"
    v: 3
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7f44200c00c3d4f06afe6"
    text: "@PeterWAWood does `loop` has `/local` refinement?"
    sent: "2017-03-14T13:46:42.104Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f423e961e53c7fe5a962"
    text: {@maximvl  >  in JS you have `var` which will keep variable in local context^/^/In Red we have the /local refinement to to keep a word in the local context.}
    sent: "2017-03-14T13:46:11.253Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58c7f40d21d548df2cd79676"
    text: {Sorry, it was not the latest version:^/```^/text: [5 "Test"]^/^/space-to-tab: true^/tab-width: 4^/^/file-save: does [ ^/^/    output-text: copy []^/^/    foreach [tab-num t] text [^/       ^-either space-to-tab [^/            append/dup output-text tab tab-num^/        ][^/            append/dup output-text space tab-num * tab-width^/        ]^/    ]^/    probe output-text^/]^/file-save^/```}
    sent: "2017-03-14T13:45:49.822Z"
    editedAt: "2017-03-14T13:46:02.152Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
)#(
    id: "58c7f368dd08b4b859cc8fed"
    text: {@DideC ^/In my first intent `tab-num` and `output-text` were local to file-save.^/^/My brain attempts to "inject" `append-tab-indent` into `file-save`. My original post refers to code indirection. :point_up: [March 14, 2017 1:06 AM](https://gitter.im/red/help?at=58c733efde5049082287f6ff)^/^/My brain, like Forth, remembers `tab-cnt` is on the stack, in the short term memory.^/^/I further expect/ed to code compose file-save at runtime. Local or global variable is a compiler issue. What benefit for the human reader does scoping provide when the calling sequence makes it trivial to resolve the symbols?^/^/The lego bricks are yet to address both the local and global requirement. Isn't Rx a paradigm free script?}
    sent: "2017-03-14T13:43:04.735Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7f34c7ceae5376ab8c3f7"
    text: {@OneArb This looks simpler and is Red/R2 compatible:^/```^/text: [5 "Test"]^/^/space-to-tab: true^/tab-width: 4^/^/file-save: does [ ^/^/    output-text: copy []^/^/    foreach [tab-num t] text [^/       ^-either space-to-tab [^/            loop tab-num [append output-text tab]^/        ][^/            loop (tab-num * tab-width) [append output-text space]^/        ]^/    ]^/    probe output-text^/]^/file-save^/```}
    sent: "2017-03-14T13:42:36.721Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7f33321d548df2cd78f96"
    text: {Maxim - you see much more than I am technically skilled. What I actually learned in the past is, that usually there needs to be some deeper debate, before some fundamental change of concepts should happen ...}
    sent: "2017-03-14T13:42:11.391Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f2b209e7ba8510c494b2"
    text: {well, yes, I mean, I realize my understanding of Redbol & context and upcoming modules may be incomplete and I don't see everything}
    sent: "2017-03-14T13:40:02.293Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f26709e7ba8510c492bb"
    text: {What I suggest is - let's have it the way it is, and talk about it again, once modules are introduced. There are imo more of means of how to isolate the stuff one wants to isolate vs the damage leaks could cause, no? :-)}
    sent: "2017-03-14T13:38:47.807Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f21c09e7ba8510c490df"
    text: {As for Rebol, then yes, there are some gotchas and with contexts and word and series concepts, ppl get sometimes burned. I would have to see the concrete proposal to have it otherwise ....}
    sent: "2017-03-14T13:37:32.008Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f1d7dd08b4b859cc834f"
    text: {I've been there, with CA Visual Objects. That thing was so damned isolated, that you had to almost use some tricks to get somewhere :-)}
    sent: "2017-03-14T13:36:23.636Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f1a5872fc8ce6200726a"
    text: {So how do you assign to something or read from something out of your local scope, without some accessors?}
    sent: "2017-03-14T13:35:33.317Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7f1877ceae5376ab8b6e7"
    text: {and I heard a lot of stories about crappy things happening in PHP and JS because of the way scope is implemented from my friends & colleagues}
    sent: "2017-03-14T13:35:03.242Z"
    editedAt: "2017-03-14T13:35:13.596Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f14e21d548df2cd77f12"
    text: {I keep saying `scope` because this is pretty much it, I do believe a lot of things are wrong with modern languages, but scope is something decently good}
    sent: "2017-03-14T13:34:06.529Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f0c309e7ba8510c48787"
    text: {@pekr well this is exactly the idea - assigning only allows you to use word in current and nested scopes, but not outer ones}
    sent: "2017-03-14T13:31:47.897Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7f0377ceae5376ab8aedf"
    text: {Or let me rephrase, I have arguments for and against it, but I am not in the mood to argue right now... ive got work to do sadly}
    sent: "2017-03-14T13:29:27.484Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c7efee00c00c3d4f06949b"
    text: {@OneArb I think there is a mistake in  yours `append-tab-indent` and `append-space-indent`. As I understand them,  `append-tab-indent` would append `tab-num` `tab`s (it appends `tab-num * tab-with`) and `append-space-indent` would append `tab-num * tab-with` `space`s (it appends`tab-num` `tab`s).}
    sent: "2017-03-14T13:28:14.146Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7efe7de504908228c19e6"
    text: {@maximvl if everything is local by default - how do you access the upper level words? }
    sent: "2017-03-14T13:28:07.736Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7efe721d548df2cd77332"
    text: {@maximvl I don't have any arguments against using local everywhere, I really did mean crap as stuff, things, etc.}
    sent: "2017-03-14T13:28:07.206Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c7ef8521d548df2cd77075"
    text: {@maximvl^/This is actual code I write. My goal is to make the code as easy to modify for a natural language reader as possible.^/^/How would you rewrite the example to widen the reader audience?}
    sent: "2017-03-14T13:26:29.232Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7ef77872fc8ce6200639f"
    text: {@JacobGood1 IMHO making things as local as possible allows easier testing, running code in parallel, making wrappers, greater reuse and a lot of other stuff}
    sent: "2017-03-14T13:26:15.736Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7ee2ae961e53c7fe57ab7"
    text: {Anything is possible imo. Please refer to the following article, or related ones - just scan index of blog articles for contex and/or local words ... as you can see, those things were debated in the past http://www.rebol.net/r3blogs/0144.html}
    sent: "2017-03-14T13:20:42.634Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7ed6d21d548df2cd7641c"
    text: "```local stuff```"
    sent: "2017-03-14T13:17:33.523Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c7ed677ceae5376ab89a97"
    text: {@maximvl ^/The code sample attempts to implement a Forth / Lips like approach, many words that do little.^/^/Red global control structure global variables solves my R2 limitation.^/^/If I were to modify the compiler to think the way I do and possibly some other humans do, I'd have the called word look inside the calling scope to resolve undefined variables.^/^/Is there a way to satisfy the strict scoping requirement and the optimistic scoping with a `foreach /local` or even a global `system/`?}
    sent: "2017-03-14T13:17:27.017Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7ed5a00c00c3d4f0682f8"
    text: "`local crap` lol"
    sent: "2017-03-14T13:17:14.528Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7ed3e21d548df2cd76276"
    text: {I probably know what you might mean, but also remember - with r3, there was already some change - there was not a single storage space for words. And the thing got even more "complicated" with modules. We will see, what we will get with Red.}
    sent: "2017-03-14T13:16:46.136Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7ed3be961e53c7fe57412"
    text: {you could always make a dialect for people who want local crap for every function}
    sent: "2017-03-14T13:16:43.140Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c7ed0e00c00c3d4f068022"
    text: "in this case yes"
    sent: "2017-03-14T13:15:58.463Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7ed0609e7ba8510c46f4c"
    text: "It has its closest context, which is global :-)"
    sent: "2017-03-14T13:15:50.934Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7ecb9e961e53c7fe56e0e"
    text: {since I'm new to rebol's contexts idea, there may or may not be the way to do this}
    sent: "2017-03-14T13:14:33.296Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7ec98dd08b4b859cc603d"
    text: "I need to think about this"
    sent: "2017-03-14T13:14:00.845Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7ec67872fc8ce62004e32"
    text: {@maximvl In:^/```^/Red [] a: "Hello" print [a "word"]^/```^/you will have to define the 'local' context of `a`. It is the case, in some way, its the script context (think of it as the C `main`).}
    sent: "2017-03-14T13:13:11.952Z"
    editedAt: "2017-03-14T13:14:02.815Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7ec4bde504908228bff16"
    text: {something similar to local scope - setting the word should bind it in the closes local context}
    sent: "2017-03-14T13:12:43.258Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7ebfc7ceae5376ab890a1"
    text: "And - local to what context exactly?"
    sent: "2017-03-14T13:11:24.536Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7ebed872fc8ce62004b13"
    text: "What exactly do you want to be local?"
    sent: "2017-03-14T13:11:09.831Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7ebebdd08b4b859cc5bc7"
    text: {@pekr make a language good for beginners and only beginners will use it}
    sent: "2017-03-14T13:11:07.756Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7ebdcde504908228bfcd2"
    text: {I agree, but I have seen many languages limit themselves for that sole reason}
    sent: "2017-03-14T13:10:52.121Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c7ebd1e961e53c7fe569aa"
    text: "So use functions having local constructors then"
    sent: "2017-03-14T13:10:41.292Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7ebbce961e53c7fe568e8"
    text: {Not worrying about compatibility does not mean that there should be any change}
    sent: "2017-03-14T13:10:20.900Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7ebae09e7ba8510c4664c"
    text: {I would prefer to have `locally` bound words by-default and if for some unimaginable reason I would need a global thing - to declare it separately}
    sent: "2017-03-14T13:10:06.872Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7eba27ceae5376ab88d3f"
    text: {I hope that red 2.0 will not worry about compatibility at all}
    sent: "2017-03-14T13:09:54.292Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c7eb9ee961e53c7fe56819"
    text: {you also have the ability to mark something  as /local using refinement}
    sent: "2017-03-14T13:09:50.079Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7eb93872fc8ce62004920"
    text: {In Redbol world, `word!`s must have a context. So if the context is not specifically defined, the 'global' context is used.}
    sent: "2017-03-14T13:09:39.960Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7eb93de504908228bfb16"
    text: {There was some change during the R3 phase, where function constructors were swapped, or something like that, defining its words as local by default}
    sent: "2017-03-14T13:09:39.150Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7eb6d7ceae5376ab88beb"
    text: {It's not about not going that way. Any change nowadays means breaking the compatibility with Rebol imo}
    sent: "2017-03-14T13:09:01.319Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7eb50dd08b4b859cc5708"
    text: {There are various function constructors, to have it otherwise. There is also a `context`, `use`as a means to further isolate stuff}
    sent: "2017-03-14T13:08:32.981Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7eb447ceae5376ab88b04"
    text: "please don't go this way"
    sent: "2017-03-14T13:08:20.717Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7eb3fe961e53c7fe565ea"
    text: "oh my"
    sent: "2017-03-14T13:08:15.076Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7eb3e21d548df2cd7544b"
    text: ">about the simplicity for beginners"
    sent: "2017-03-14T13:08:14.222Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7eb3709e7ba8510c461d1"
    text: {@OneArb I guess you mean "...to use global `tab-num`."^/Its what Doc is explaining: in R2, `tab-num` and `t` are local to the `foreach` loop, but not in Red (actually).^/}
    sent: "2017-03-14T13:08:07.577Z"
    editedAt: "2017-03-14T13:08:15.450Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58c7eb23872fc8ce6200462a"
    text: {@maximvl the reason for everything being global by default, was a decision in an early days. I remember Carl stating something about the simplicity for beginners ...}
    sent: "2017-03-14T13:07:47.367Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c7eb1421d548df2cd752f6"
    text: {I hope this is just an example and not the code you would really write}
    sent: "2017-03-14T13:07:32.267Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7eaf37ceae5376ab887ec"
    text: {function arguments were invented exactly to prevent global state}
    sent: "2017-03-14T13:06:59.970Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7eae600c00c3d4f067320"
    text: "@OneArb I totally don't like this code example"
    sent: "2017-03-14T13:06:46.734Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58c7e97200c00c3d4f066a25"
    text: {@maximvl @PeterWAWood^/Does control structure local variable scoping result^/in some code composition / indirection being precluded in R2?^/^/Red global scope by default allows for the following code to work,^/whereas in R2 I cannot find a way to force `foreach` to use global `tab-cnt`.^/^/```^/Red/Rebol []^/^/text: [5 "Test"]^/space-to-tab: true^/tab-width: 4^/^/tab-num: 0^/output-text: copy []^/^/append-space-indent: does [^/^-loop (tab-num * tab-width) [append output-text tab]^/]^/append-tab-indent: does [^/^-loop tab-num [append output-text space]^/]^/file-save: does [ ^/^/^-output-text: copy []^/^/^-either space-to-tab^/^-^-[append-indent: :append-tab-indent]^/^-^-[append-indent: :append-space-indent]^/^-^/^-foreach [tab-num t ] text [^/^-^-if tab-num > 0 [ append-indent ]    ^/^-]^/  probe output-text^/]^/file-save^/```}
    sent: "2017-03-14T13:00:34.701Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7e2bddd08b4b859cc19c8"
    text: {>Words are defined in the "global" context by default in Red (and Rebol 2).^/^/And why global is default? What are the reasons?}
    sent: "2017-03-14T12:31:57.757Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7e25edd08b4b859cc17c4"
    text: "@PeterWAWood what is analogue in Red?"
    sent: "2017-03-14T12:30:22.306Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7e25121d548df2cd7152d"
    text: {@PeterWAWood in JS you have `var` which will keep variable in local context}
    sent: "2017-03-14T12:30:09.033Z"
    editedAt: "2017-03-14T12:36:11.435Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7da3edd08b4b859cbe386"
    text: {I believe this is not unusual in "dynamic" languages. It is certainly the case with JavaScript and Lua. Though IO seems to have no globals at all.}
    sent: "2017-03-14T11:55:42.010Z"
    editedAt: "2017-03-14T11:59:59.658Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58c7da1ddd08b4b859cbe242"
    text: {@maximvl Words are defined in the "global" context by default in Red (and Rebol 2). They have to be specifically defined to be local to a function. The ```function``` function is syntactic sugar that processes the source of a function and tries to automatically declare them as local to the function. }
    sent: "2017-03-14T11:55:09.690Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58c7d673dd08b4b859cbcc22"
    text: {let say it helps me to keep fewer things in mind looking at each part of the code, because I know for sure where the "scope" limits are}
    sent: "2017-03-14T11:39:31.296Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7d60e21d548df2cd6bd1b"
    text: {so if I assign something in loop's body, I would expect this name to not interfere with anything outside the loop, and it makes a lot of sense to me}
    sent: "2017-03-14T11:37:50.017Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7d56d00c00c3d4f05e57c"
    text: {again, I'm not saying it is a bad thing, just (almost) all other languages have local context in these places and people would expect this}
    sent: "2017-03-14T11:35:09.419Z"
    editedAt: "2017-03-14T11:35:18.180Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7d509dd08b4b859cbc3f8"
    text: "probably same applies to if, either, etc"
    sent: "2017-03-14T11:33:29.740Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7d4ea21d548df2cd6b635"
    text: {@dockimbel there was a post how `function` leaks words, now you are saying that `foreach and other iterators in Red are not providing a local context`}
    sent: "2017-03-14T11:32:58.260Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7c32221d548df2cd636b9"
    text: {>  It seems that Redbol doesn't care about local/global variables^/^/What makes you think that? Redbol has functions and objects for providing local contexts.}
    sent: "2017-03-14T10:17:06.747Z"
    editedAt: "2017-03-14T10:18:06.486Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c7c121dd08b4b859cb44e5"
    text: {and this often leads to mysterious behavior and subtle bugs }
    sent: "2017-03-14T10:08:33.416Z"
    editedAt: "2017-03-14T10:13:52.234Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c7c0f1de504908228ad897"
    text: {@dockimbel ^/>foreach and other iterators in Red are not providing a local context^/^/By design? It seems that Redbol doesn't care about local/global variables as other languages do}
    sent: "2017-03-14T10:07:45.360Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c774d1de504908228929e4"
    text: {@OneArb `foreach` and other iterators in Red are not providing a local context, so your `tab-num` and `t` words are globally declared, while in R2, they are local to the loop. Note that if you use the `function` constructor, they would have been captured and became local to `file-save` function. We might provide local context for iterators like Rebol in the future.}
    sent: "2017-03-14T04:42:57.054Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c767c5872fc8ce62fd30af"
    text: {@dockimbel ^/Great! What happens in Red that allows the code to run whereas in R2 tab-num "has no value"?^/^/Is there a workaround that would work in both language?}
    sent: "2017-03-14T03:47:17.490Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c7592b09e7ba8510c0f3d9"
    text: "@OneArb `do [append-ident]` => `do append-ident`"
    sent: "2017-03-14T02:44:59.617Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c757c500c00c3d4f030cda"
    text: {@geekyi :point_up: [March 14, 2017 4:06 AM](https://gitter.im/red/help?at=58c6fbb6872fc8ce62fabfc6)  A few reasons: ^/* Limited number of built-in commands.^/* Commands mostly for shell management (on Windows, many are filesystem-oriented).^/* Linux users tend to be more knowlegeable of their OS inner workings. ;-)}
    sent: "2017-03-14T02:39:01.618Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c733efde5049082287f6ff"
    text: {I am trying to use basic code indirection:^/^/How do I get this to work?^/^/```^/text: [5 "Test"]^/space-to-tab: true^/tab-width: 4^/^/append-tab-indent: [^/^-loop (tab-num * tab-width) [append output-text tab]^/]^/append-space-indent: [^/^-loop tab-num [append output-text space]^/]^/file-save: does [ ^/^/^-output-text: copy []^/^/^-either space-to-tab^/^-^-[append-ident: append-tab-indent]^/^-^-[append-ident: append-space-indent]^/^-^/^-foreach [tab-num t ] text [^/^-^-if tab-num > 0 [ do [append-ident] ]    ^/^-]^/  probe output-text^/]^/file-save^/^/```}
    sent: "2017-03-14T00:06:07.435Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c70adc872fc8ce62fb3972"
    text: { @meijeru^/Thanks, I get it now. Switch expects values rather than expressions.}
    sent: "2017-03-13T21:10:52.252Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c709817ceae5376ab368b0"
    text: "... AND as `space`"
    sent: "2017-03-13T21:05:05.525Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58c706dd9eb1bd81481fa1e2"
    text: "@OneArb Red already defines space as `sp`"
    sent: "2017-03-13T20:53:49.437Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "58c700dbde5049082286b90b"
    text: {`switch` labels are literals, i.e. they are not evaluated. Thus writing `tab`means testing for the lit-word`'tab`}
    sent: "2017-03-13T20:28:11.345Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58c70009dd08b4b859c702b7"
    text: {So, not selecting  `space` but needing `#" "`}
    sent: "2017-03-13T20:24:41.629Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c6ffbf872fc8ce62fae19d"
    text: {@OneArb ^/```red^/space: #" "^/str: rejoin [tab space]^/^/foreach char str [^/        do select  [^/          #"^^-" [print "tab"] ^/          #" " [print "space"]^/        ] char^/]^/```}
    sent: "2017-03-13T20:23:27.867Z"
    editedAt: "2017-03-13T20:23:35.146Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58c6fc0921d548df2cd1c5e5"
    text: {Can anyone explain the following behavior?^/^/```^/space: #" "^/str: rejoin [tab space]^/^/foreach char str [^/        switch char [^/          tab [print "tab"] ^/          space [print "space"]^/        ] ^/]^/```}
    sent: "2017-03-13T20:07:37.555Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58c6fbb6872fc8ce62fabfc6"
    text: {I'm curious why red/red#2475 special cases for windows. Linux users doesn't need the convenience? Come to think of it, there can only be a limited number of shell built-ins.. Which you can usually get from `help`}
    sent: "2017-03-13T20:06:14.391Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c6e6f5e961e53c7fdf384e"
    text: "Nice"
    sent: "2017-03-13T18:37:41.131Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c6e42b7ceae5376ab245bb"
    text: {@JacobGood1 Thanks for your help in identifying this libRed issue!}
    sent: "2017-03-13T18:25:47.752Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c6e3f47ceae5376ab24491"
    text: {libRed is working now, thanks to all who helped. Now one can dl the daily builds and it works out of the box with visual studio}
    sent: "2017-03-13T18:24:52.977Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c4c79600c00c3d4ff47884"
    text: "Ok"
    sent: "2017-03-12T03:59:18.089Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c4c22a7ceae5376aa65e6d"
    text: {`call` does not rely on Windows shell. In Rebol, there is a `run` command for taking advantage of Windows shell, but it's not there in Red yet. The `/shell` option in `call` refers to the default system CLI environment.}
    sent: "2017-03-12T03:36:10.589Z"
    editedAt: "2017-03-12T03:37:12.471Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c4c165dd08b4b859badbc0"
    text: "(Windows shell, not dos console)"
    sent: "2017-03-12T03:32:53.621Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c4bd79e961e53c7fd35cf3"
    text: {I think it's ok to fall back. Then error if it fails.}
    sent: "2017-03-12T03:16:09.003Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c4bbe41465c46a561e0654"
    text: {@maximvl I know, issue #2475 is about shell commands, and silently falling back to `/shell` if a file name is not found.}
    sent: "2017-03-12T03:09:24.337Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c4bba021d548df2cc534ca"
    text: {@gltewalt No, you don't need a DOS console to invoke Notepad.exe. It is a direct invocation (`notepad.exe` is in the default search paths).}
    sent: "2017-03-12T03:08:16.154Z"
    editedAt: "2017-03-12T03:10:19.359Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c4b8a4de504908227a63e9"
    text: {@dockimbel `call "notepad"` already works ;)}
    sent: "2017-03-12T02:55:32.576Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c4b845dd08b4b859baba07"
    text: {`xdg-open` is irrelevant here, ignore previous comment :)}
    sent: "2017-03-12T02:53:57.536Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c4b72a7ceae5376aa6330d"
    text: {but even now on linux it should be possible to `call {xdg-open firefox}`}
    sent: "2017-03-12T02:49:14.779Z"
    editedAt: "2017-03-12T02:49:24.465Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c4b6eb1465c46a561df2c7"
    text: {finding `desktop` files on linux and what is there on macs}
    sent: "2017-03-12T02:48:11.728Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c4b6d6dd08b4b859bab351"
    text: {I was thinking about resolving OS-dependent things, like search path and extensions}
    sent: "2017-03-12T02:47:50.281Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c4b6a9872fc8ce62ee1200"
    text: {If you call "notepad" it's still via shell on windows, isn't it?}
    sent: "2017-03-12T02:47:05.913Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c4b67100c00c3d4ff4327c"
    text: "would be useful I think"
    sent: "2017-03-12T02:46:09.763Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c4b5bb1465c46a561dee74"
    text: {Any executable. For example, `call "notepad"`.}
    sent: "2017-03-12T02:43:07.017Z"
    editedAt: "2017-03-12T02:43:36.295Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c4b5141465c46a561dec35"
    text: {What else can you call other than commands from a shell?}
    sent: "2017-03-12T02:40:20.666Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c4b19421d548df2cc5089b"
    text: {What are you thinking about https://github.com/red/red/issues/2475 ? Should Red's `call` behaves like Rebol one, and try to be more helpful to users or not?}
    sent: "2017-03-12T02:25:24.239Z"
    editedAt: "2017-03-12T02:26:18.232Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c4790c1465c46a561ce18d"
    text: "👍😀 "
    sent: "2017-03-11T22:24:12.113Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c467c9dd08b4b859b94b69"
    text: {>We already made good use (red/red#2475) of your APIMonitor^/^/:+1:  nice}
    sent: "2017-03-11T21:10:33.013Z"
    editedAt: "2017-03-11T21:10:38.453Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c461657ceae5376aa499ae"
    text: {I didn't write any libRed stuff, but I included the files and it built}
    sent: "2017-03-11T20:43:17.539Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c461051465c46a561c503d"
    text: {Did you do the vs command line that the libRed readme shows? (I assume you did, but on the off chance...)}
    sent: "2017-03-11T20:41:41.472Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58c46041e961e53c7fd19f5b"
    text: {@JacobGood1 I did not get an error for reading .lib}
    sent: "2017-03-11T20:38:25.221Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c414ede961e53c7fcff2e2"
    text: {@geekyi We already made good use (https://github.com/red/red/issues/2475) of your APIMonitor tool, thank you for suggesting it. ;-).}
    sent: "2017-03-11T15:17:01.683Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c3f90b21d548df2cc12ac4"
    text: {@gltewalt thanks a lot for doing this... just try to make a simple console app that uses libRed}
    sent: "2017-03-11T13:18:03.352Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c3ac50de504908227520bb"
    text: {Any specific thing you want me to try with VS? Project type?}
    sent: "2017-03-11T07:50:40.163Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c3474821d548df2cbdffc0"
    text: "Swapping to 2017 right now"
    sent: "2017-03-11T00:39:36.558Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c339e7872fc8ce62e68d93"
    text: "not yet"
    sent: "2017-03-10T23:42:31.946Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c331927ceae5376a9ec24d"
    text: {I have tried everything conceivable and continue to get the error saying that vs cannot read libRed.lib}
    sent: "2017-03-10T23:06:58.163Z"
    editedAt: "2017-03-10T23:07:10.603Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c33166de504908227310c8"
    text: {Hello everyone, has anyone gotten libRed to work with visual studio yet?}
    sent: "2017-03-10T23:06:14.569Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c29bf8e961e53c7fc7af49"
    text: {@geekyi Nice! :+1:  We'll give a try to API Monitor.}
    sent: "2017-03-10T12:28:40.907Z"
    editedAt: "2017-03-10T12:29:05.608Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c299c47ceae5376a9ab81a"
    text: {![UIforETW ](https://randomascii.files.wordpress.com/2015/04/image_thumb.png?w=629&h=293)}
    sent: "2017-03-10T12:19:16.752Z"
    editedAt: "2017-03-10T12:20:05.342Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58c299a800c00c3d4fe8abec"
    text: {Haven't tried [UIforETW](https://github.com/google/UIforETW/releases) yet. But it looks sort of like a gui version of wtrace with filtering:}
    sent: "2017-03-10T12:18:48.834Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c298ed00c00c3d4fe8a76c"
    text: {Best tool I've seen so far for debugging and introspecting native executables}
    sent: "2017-03-10T12:15:41.324Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c2988c00c00c3d4fe8a561"
    text: {[![image.png](https://files.gitter.im/red/help/2gHG/thumb/image.png)](https://files.gitter.im/red/help/2gHG/image.png)}
    sent: "2017-03-10T12:14:04.693Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c29841872fc8ce62e26512"
    text: {[api monitor](http://www.rohitab.com/apimonitor#Download) (~8mb, portable version):}
    sent: "2017-03-10T12:12:49.048Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c2976321d548df2cb996b4"
    text: {Some of the other tools mentioned have a better ui}
    sent: "2017-03-10T12:09:07.758Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c29718de504908226f3a03"
    text: {```^/1199.1341 (11892.8300) Thread/Start 11892 (12488)^/1199.5043 (11892.892) Thread/Start 11892 (8300)^/1199.6397 (11892.12488) FileIO/Create 'C:\Users\XX\Downloads\programming\LIBREDRT.DLL' (0xFFFFA984C9587440) rw-^/1199.7294 (11892.12488) FileIO/Close 'C:\Users\XX\Downloads\programming\LIBREDRT.DLL' (0xFFFFA984C9587440)^/1199.7708 (11892.12488) FileIO/Create 'C:\Users\XX\Downloads\programming\LIBREDRT.DLL' (0xFFFFA984C9587440) rw-^/1244.2050 (11892.2564) Thread/Start 11892 (8300)^/```}
    sent: "2017-03-10T12:07:52.422Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c296f0dd08b4b859afa669"
    text: {I'd only tried with a simple test.exe which uses libredrt tho. Here's a snip of my "hello world" test executable accessing it:}
    sent: "2017-03-10T12:07:12.062Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c29643dd08b4b859afa282"
    text: {@JacobGood1 Recently, there was a [HN post](https://news.ycombinator.com/item?id=13751803) about [wtrace](https://github.com/lowleveldesign/wtrace) (~1mb), which is a bit like strace or ltrace if you know about them.}
    sent: "2017-03-10T12:04:19.898Z"
    editedAt: "2017-03-10T12:11:36.257Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58c21d02dd08b4b859ad149c"
    text: "I may have not really been clear, who knows =)"
    sent: "2017-03-10T03:26:58.446Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c21cf0dd08b4b859ad1435"
    text: {Sorry I missed the earlier part of the chat on that.}
    sent: "2017-03-10T03:26:40.622Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c21cdb00c00c3d4fe602e6"
    text: {That is why I was asking for someone else to give it a shot}
    sent: "2017-03-10T03:26:19.473Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c21cc6e961e53c7fc4f4c0"
    text: "I hate it when that happens."
    sent: "2017-03-10T03:25:58.245Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c21caa00c00c3d4fe6020f"
    text: {Yes, but it works fine for Doc. He gave me his exact setup, I replicated it, got the same errors.}
    sent: "2017-03-10T03:25:30.100Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c21c76dd08b4b859ad1210"
    text: "Ah. Did you post the errors for Team Red?"
    sent: "2017-03-10T03:24:38.316Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c21af67ceae5376a9805e6"
    text: {I did I keep getting errors, I want to see if others get errors or if it works for them}
    sent: "2017-03-10T03:18:14.588Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c21a5c1465c46a560faf1a"
    text: ":smile: you're needed here. Don't do that. lol"
    sent: "2017-03-10T03:15:40.077Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c219fede504908226cad35"
    text: {:^^) Not sure how old my VS is on another machine. If I shake it, I'll die from dust inhalation.}
    sent: "2017-03-10T03:14:06.037Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c219dbdd08b4b859ad06a2"
    text: {I plan to try it. First I have to clean out 2015 and grab 2017. And shake the laptop a few times}
    sent: "2017-03-10T03:13:31.318Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c20f8900c00c3d4fe5c449"
    text: {I'm using VS 2013 in my Win7 box since a long time. I mainly use it to browse and test C/C++ projects. It works fine with libRed. }
    sent: "2017-03-10T02:29:29.287Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58c20d3de961e53c7fc4ade8"
    text: {Silly question perhaps but, since you know exactly what you need, why not do it yourself?^/^/I was going to see how big the DL was, but I said No Thanks to their Xamarin offer, and that seems to have nixed downloading it now.}
    sent: "2017-03-10T02:19:41.547Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58c202307ceae5376a979100"
    text: {I need someone to build libRed and try to use the library in c/c++ in windows through  VS 2017 community}
    sent: "2017-03-10T01:32:32.551Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c201fc1465c46a560f42c9"
    text: {I did not mean visual studio code I meant the massive c++ ide  which you linked}
    sent: "2017-03-10T01:31:40.321Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c1e1401465c46a560e9ce6"
    text: {Get [VS 2017 community](https://www.visualstudio.com/downloads/)}
    sent: "2017-03-09T23:12:00.255Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c1e0efe961e53c7fc3d11d"
    text: {I used it last with 2008, so it's confusing at the moment}
    sent: "2017-03-09T23:10:39.454Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c1e0cc21d548df2cb5e2ce"
    text: "Probably have to dump it and get 2017"
    sent: "2017-03-09T23:10:04.188Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c1e088dd08b4b859abf459"
    text: {@gltewalt There's a newer version. I've not tried editing anything other than red and html with it tho}
    sent: "2017-03-09T23:08:56.697Z"
    editedAt: "2017-03-09T23:09:52.810Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58c1e0261465c46a560e95d7"
    text: {Downloaded vs 2015. Went to add c++ extensions this morning and it already complained about disc space. }
    sent: "2017-03-09T23:07:18.357Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58c1dff91465c46a560e9241"
    text: {Not sure what you're saying here tho. Interfacing with another language?}
    sent: "2017-03-09T23:06:33.546Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c1dfa41465c46a560e9079"
    text: {@JacobGood1 I was surprised about the size too. Are you using the [red extension](https://marketplace.visualstudio.com/items?itemName=red-auto.red)? ^/(Ctrl+P) and `ext install red`}
    sent: "2017-03-09T23:05:08.339Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58c17318872fc8ce62dbaea3"
    text: {The newest VS is much smaller than before, so if you are apprehensive about installing the massive ide... at least it is smaller now(still absolutely massive though)}
    sent: "2017-03-09T15:22:00.869Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c172bddd08b4b859a935ac"
    text: {Specifically with a c/c++ console project exe or dll is fine}
    sent: "2017-03-09T15:20:29.796Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58c17287e961e53c7fc0ea15"
    text: {Would anyone be willing to try and set up libRed in visual studio and let me know how it goes?}
    sent: "2017-03-09T15:19:35.897Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b85dacde50490822388f5b"
    text: "@Rebol2Red, Picosheet ticket filed."
    sent: "2017-03-02T18:00:12.546Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b854ea00c00c3d4fae76ad"
    text: {Sorry, I guess you must be doing unmanaged since you are using the .lib. I'm not really familiar with C/C++ projects.}
    sent: "2017-03-02T17:22:50.297Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58b85462f1a33b62756f7d81"
    text: {@JacobGood1 are you doing managed or unmanaged code? There's a C# project over here that works in VS 2015 on Win 10: https://github.com/koba-yu/LibRedSharp}
    sent: "2017-03-02T17:20:34.026Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58b849611465c46a56d82729"
    text: {@greggirwin Because i dont know a good title for it, i ask you to file the ticket. Thanks.}
    sent: "2017-03-02T16:33:36.941Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58b83870e961e53c7f8ce26a"
    text: {If anyone gets libRed to work with visual studio 2015, windows 10, let me know how you set it up... I have got to do some other stuff for now.}
    sent: "2017-03-02T15:21:20.295Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b83423de50490822377702"
    text: {Has anyone tried to use libRed with the most recent build?}
    sent: "2017-03-02T15:02:59.186Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b82d861465c46a56d76188"
    text: "yep, that is what I am passing"
    sent: "2017-03-02T14:34:46.075Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b7b117f1a33b62756b83a4"
    text: {make sure .lib is getting passed to linker and not a .dll}
    sent: "2017-03-02T05:43:51.735Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58b79900e961e53c7f891898"
    text: {I did not put them here so that it would not convolute the help area}
    sent: "2017-03-02T04:01:04.494Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b798c71465c46a56d3ed27"
    text: {@dockimbel I sent you a few images directly so that you can see exactly what I am doing}
    sent: "2017-03-02T04:00:07.592Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b794ef21d548df2c7b216d"
    text: {Yea, I do not know what the problem is, it just wont read it for some reason}
    sent: "2017-03-02T03:43:43.516Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b790707ceae5376a5c0533"
    text: {Never seen that error before in VS. Try to replace your libRed.lib file with a freshly downloaded one and re-check all your VS settings (try disabling pre-compiled headers).}
    sent: "2017-03-02T03:24:32.392Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b770337ceae5376a5b5770"
    text: {When I try to use libRed on windows, I get : ^/Error^-LNK1107^-invalid or corrupt file: cannot read at 0x2DE3^-GoldDigger^-C:\red\lib-red\libRed\libRed.lib^/I am making sure that I am under x86 in vs, I also have compiled it both with std and without... ^-^/}
    sent: "2017-03-02T01:06:59.430Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58b65d67e961e53c7f813053"
    text: {@Rebol2Red The picosheet demo code needs a fix with latest version, as we have restricted the words conversion rules. Gregg's workaround is fine for now.}
    sent: "2017-03-01T05:34:31.626Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b6566e1465c46a56cbcf63"
    text: "Great!"
    sent: "2017-03-01T05:04:46.349Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b634191465c46a56cb22ea"
    text: {hi,  I created this blog that might be helpful to those new to Red- I had some good feedback for it and will add more to it soon. ^/It is in its early stages, but Please take a look:    http://jennyk36.blogspot.co.uk/}
    sent: "2017-03-01T02:38:17.646Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "58b5d2a5872fc8ce62992437"
    text: {@Rebol2Red, it looks like maybe a change in what words can be created with `to word!`.  There's a placeholder col header with `#" "` as the text, which `to word!` doesn't like when combined with a numeric digit to create the cell ref name.^/^/If you replace `[#" "]` with `[#"_"]`for now, it will work again. Please file a ticket, or I can do it if you want.}
    sent: "2017-02-28T19:42:28.928Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b5d1881465c46a56c8d16e"
    text: "Thanks @geekyi."
    sent: "2017-02-28T19:37:44.324Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b59cd4872fc8ce6297926d"
    text: {Why does the picosheet example does not work with latest Red verson?^/```^/Red [] L: charset "ABCDEFGHI" D: union N: charset "123456789" charset "0" ^/repeat y 9 [repeat x 9 [col: either x = 1 [#" "][#"A" + (x - 2)]^/  append p: [] set ref: (to word! rejoin [col y - 1]) make face! [size: 90x24^/    type:    pick [text field] header?: (y = 1) or (x = 1)^/    offset:  -20x10 + as-pair ((x - 1) * size/x + 2) ((y - 1) * size/y + 1)^/    text:    form case [y = 1 [col] x = 1 [y - 1] 'else [copy ""]]^/    para:    make para! [align: pick [center right] header?]^/    extra:   object [name: form ref formula: old: none]^/    actors:  context [on-create: on-unfocus: function [f e][f/color: none^/      if rel: f/extra/old [react/unlink rel 'all]^/      if #"=" = first f/extra/formula: copy text: copy f/text [parse remove text^/          [any [p: L N not ["/" skip not N] insert p " " insert "/data "^/          | L skip | p: some D opt [dot some D] insert p " " insert " " | skip]]^/        f/text: rejoin [f/extra/name "/data: any [math/safe [" text {] "#UND"]}]^/       if f/data [any [react f/extra/old: f/data do f/data]]]]^/      on-focus: func [f e][f/text: any [f/extra/formula f/text] f/color: yello]^/]]]] view make face! [type: 'window text: "PicoSheet" size: 840x250 pane: p]^/```^/^/*** Syntax Error: invalid character in: " 0"^/*** Where: to}
    sent: "2017-02-28T15:52:52.757Z"
    editedAt: "2017-02-28T15:53:31.072Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58b56327de5049082226bfe7"
    text: {The corresponding bug is https://github.com/red/red/issues/2178.  @greggirwin as "Known issues" When running from source?}
    sent: "2017-02-28T11:46:47.579Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58b503fd7ceae5376a4bcb01"
    text: "Can someone help me with VSCode and Git?"
    sent: "2017-02-28T05:00:45.865Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b4fdab00c00c3d4f9979c8"
    text: {@PeterWAWood, something else to include in the little Getting Started page.}
    sent: "2017-02-28T04:33:47.262Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b4f61af1a33b62755b68f6"
    text: "@PeterWAWood  Thank you"
    sent: "2017-02-28T04:01:30.670Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b4f473de50490822246316"
    text: {I didn't actually mean to grab Core, but it looks like I did}
    sent: "2017-02-28T03:54:27.923Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b4f44e872fc8ce6293889c"
    text: {The test suite uses 'call and on Windows with Rebol 2.7.8 uses Nenad's win-call.r which makes library calls. Rebol/Core does not allow library calls, Rebol/View does.}
    sent: "2017-02-28T03:53:50.996Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58b4f44e21d548df2c6a9f4b"
    text: "ok"
    sent: "2017-02-28T03:53:50.023Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b4f407e961e53c7f7880d0"
    text: {@gltewalt If you are using Rebol 2.7.8 you need to use Rebol/View.^/}
    sent: "2017-02-28T03:52:39.304Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58b4f3f9de504908222460d8"
    text: "Need rebol/view ?"
    sent: "2017-02-28T03:52:25.165Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b4f3d121d548df2c6a9caf"
    text: "Windows 7, latest rebol, latest build^/?"
    sent: "2017-02-28T03:51:45.808Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58b4f12b1465c46a56c3259d"
    text: {```^/>> do %run-all.r^/** Script Error: Feature not available in this REBOL^/** Where: context^/** Near: SECURITY_ATTRIBUTES: make struct! [^/    nLength [integer!]^/    lpSecurityDescriptor [integer!]^/    bInheritHandle [int...^/```}
    sent: "2017-02-28T03:40:27.969Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58abdd791465c46a56916a9d"
    text: ":^^)"
    sent: "2017-02-21T06:26:01.280Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58abb99e7ceae5376a19033e"
    text: {> Happens to the best of us, and me too.^/@greggirwin This is why I like you Gregg, we need more humility in programmer land}
    sent: "2017-02-21T03:53:02.412Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ab6cfade50490822f2ea48"
    text: {Include both, noting that there is no need to create a function, but that's what the spec said to do.}
    sent: "2017-02-20T22:26:02.199Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab6cd4f045df0a22728e1a"
    text: {`>> "She was a soul stripper. She took my heart!".delete("aei")`}
    sent: "2017-02-20T22:25:24.231Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab6ccc872fc8ce62607c2c"
    text: "Ruby version:"
    sent: "2017-02-20T22:25:16.688Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab6c85872fc8ce62607ad1"
    text: {`trim/with "She was a soul stripper. She took my heart!" "aei"`}
    sent: "2017-02-20T22:24:05.203Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab6c431465c46a568f772b"
    text: {Could stick very strictly to the spec, or cheat like the ruby version}
    sent: "2017-02-20T22:22:59.974Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab6b05f045df0a22728235"
    text: "Awesome"
    sent: "2017-02-20T22:17:41.508Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab6a8b00c00c3d4f65954c"
    text: "Yeah, I know, you have to use `/with` then. "
    sent: "2017-02-20T22:15:39.483Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab6a6f1465c46a568f6d62"
    text: {Or you could exceed the spec: `strip-chars: :trim` ;^^)}
    sent: "2017-02-20T22:15:11.939Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab69b821d548df2c366180"
    text: {`strip-chars: func [str [string!] chrs [string!]][trim/with str chrs]`}
    sent: "2017-02-20T22:12:08.093Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab68fc7ceae5376a178d87"
    text: "That's it. :-)"
    sent: "2017-02-20T22:09:00.970Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab68f17ceae5376a178d75"
    text: "Wow!"
    sent: "2017-02-20T22:08:49.703Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab68a3aa800ee52cc03357"
    text: {Ah, of course!^/```^/red>> trim/with copy s "aei"^/== "Sh ws  soul strppr. Sh took my hrt!"^/```^/Got distracted by the bitset. :^^)}
    sent: "2017-02-20T22:07:31.429Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab684b872fc8ce626062e7"
    text: "What's really needed is a Delete function ?"
    sent: "2017-02-20T22:06:03.614Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab682c1465c46a568f5e0b"
    text: {Yeah - thats what prompted to me to ask about the 'no spaces' thing.}
    sent: "2017-02-20T22:05:32.446Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab67fdaa800ee52cc02e92"
    text: {@gltewalt, without `trim` that doesn't match the spec though. }
    sent: "2017-02-20T22:04:45.694Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab67c321d548df2c36549f"
    text: {```^/stripchars: func [str [string!] chars [bitset!]][replace/all str chars space]^/^/```}
    sent: "2017-02-20T22:03:47.309Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab67be872fc8ce6260600c"
    text: {```^/strip-chars: func [str [string!] chrs [bitset!] /local res][^/^-res: copy ""^/^-parse str [collect into res [some [chrs | keep skip]]]^/^-res^/]^/print strip-chars "She was a soul stripper. She took my heart!" charset "aei"^/```}
    sent: "2017-02-20T22:03:42.202Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab67ae21d548df2c365410"
    text: {My initial stab at it (after the bitset matrix glitch):}
    sent: "2017-02-20T22:03:26.060Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab667121d548df2c364cc5"
    text: {It probably deserves a Parse example, but it's over my head right now.}
    sent: "2017-02-20T21:58:09.607Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab65d621d548df2c3649f8"
    text: {```^/strip-chars: func [str [string!] chrs [string! bitset!]][^/^-collect/into [foreach ch str [if not find chrs ch [keep ch]]] copy ""^/]^/print strip-chars "She was a soul stripper. She took my heart!" "aei"^/print strip-chars "She was a soul stripper. She took my heart!" charset "aei"^/```}
    sent: "2017-02-20T21:55:34.830Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab6522872fc8ce62604f66"
    text: "Solution"
    sent: "2017-02-20T21:52:34.211Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab651dde50490822f2be4d"
    text: "Poking around for the simplest olution"
    sent: "2017-02-20T21:52:29.377Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab64fdf045df0a22726173"
    text: {It is if you want to use `replace`. Otherwise roll your own.}
    sent: "2017-02-20T21:51:57.031Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab649e7ceae5376a177523"
    text: {I'm not sure if the trim part is required, but it doesn't match their example output without it}
    sent: "2017-02-20T21:50:22.316Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab6491f045df0a22725d79"
    text: "Yup."
    sent: "2017-02-20T21:50:09.947Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab646aaa800ee52cc016c4"
    text: "trim with null?"
    sent: "2017-02-20T21:49:30.688Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "58ab6466872fc8ce62604b06"
    text: {Will fail if the string contains null chars of course.}
    sent: "2017-02-20T21:49:26.316Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab644300c00c3d4f656e5c"
    text: {```^/red>> s: "She was a soul stripper. She took my heart!"^/== "She was a soul stripper. She took my heart!"^/red>> trim/with replace/all copy s charset "aei" null null^/== "Sh ws  soul strppr. Sh took my hrt!"^/```}
    sent: "2017-02-20T21:48:51.760Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab638f00c00c3d4f656989"
    text: {http://rosettacode.org/wiki/Strip_a_set_of_characters_from_a_string}
    sent: "2017-02-20T21:45:51.594Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab638f00c00c3d4f656987"
    text: {```^/red>> trim/all replace/all copy s charset "aeiou" #" "^/== "bcdfghjklmn"^/```}
    sent: "2017-02-20T21:45:51.227Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab6356aa800ee52cc00f52"
    text: {```^/red>> stripchars "She was a soul stripper. She took my heart!" charset "aei" ^/*** Script Error: invalid argument: ""^/*** Where: eval-set-path^/^/```}
    sent: "2017-02-20T21:44:54.632Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab633eaa800ee52cc00e5c"
    text: {Thought about trim, but chaining it didn't produce any result}
    sent: "2017-02-20T21:44:30.353Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab62f021d548df2c3636ef"
    text: {Ah, if you mean an empty `char!`, no. A char is always there. `#"@"`/`null` is the null char, but that will still take up space. In this case, you may just want to use `trim` on the result.}
    sent: "2017-02-20T21:43:12.361Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab6271aa800ee52cc00a0c"
    text: {`""` ?}
    sent: "2017-02-20T21:41:05.092Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab61c6872fc8ce62603aec"
    text: {is there an empty string symbol so that the result has no spaces?}
    sent: "2017-02-20T21:38:14.772Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab5dff7ceae5376a174a0d"
    text: "It is indeed."
    sent: "2017-02-20T21:22:07.788Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab5dd821d548df2c36184f"
    text: {I clicked on rosetta code and was thinking that solving tasks would be a good learning exercise. }
    sent: "2017-02-20T21:21:28.742Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab5d911465c46a568f1a5a"
    text: {```^/red>> replace/all "mississippi" charset "aei" space^/== "m ss ss pp "^/^/```}
    sent: "2017-02-20T21:20:17.331Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab5d41872fc8ce62601f6a"
    text: "Happens to the best of us, and me too."
    sent: "2017-02-20T21:18:57.994Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab5d2cf045df0a2272336a"
    text: {hmmm... works. It was late last night so now I doubt my brain}
    sent: "2017-02-20T21:18:36.625Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab5b6121d548df2c36043b"
    text: "I swear it wouldn't take bitset. Let me try again"
    sent: "2017-02-20T21:10:57.380Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab5b23872fc8ce626013d8"
    text: {```^/red>> s: "abcdefghijklmno"^/== "abcdefghijklmno"^/red>> replace/all copy s charset "aeiou" #"x"^/== "xbcdxfghxjklmnx"^/```}
    sent: "2017-02-20T21:09:55.284Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab5ad37ceae5376a1735e4"
    text: "Red wouldn't accept a bitset as an argument "
    sent: "2017-02-20T21:08:35.115Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab5aa5de50490822f28186"
    text: {Yep, like a bitset. ^/Have a list of the vowels a,i, and e. ^/Replace with "x"}
    sent: "2017-02-20T21:07:49.082Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ab59747ceae5376a172e01"
    text: {Another question would be "Have you tried it? If so, what didn't work as expected?"}
    sent: "2017-02-20T21:02:44.517Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab591fde50490822f27864"
    text: {`Replace` is a mezzanine, so you can see how it works.}
    sent: "2017-02-20T21:01:19.944Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab58ef1465c46a568efa5f"
    text: "Do you mean a substring or a bitset/charset?"
    sent: "2017-02-20T21:00:31.673Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab560900c00c3d4f651675"
    text: {Can a group or range of characters be used with replace ?}
    sent: "2017-02-20T20:48:09.254Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a880821465c46a56810740"
    text: {@dsgeyser, if you look at red/modules/view, you can see how that part is built. My view: Like many things, you have to make compromises and embrace constraints. R2 implemented its own GUI system, which is entirely possible to do in Red as well, so the number of OS calls and dependencies is minimized. Just different tradeoffs. For things that aren't OS specific, we can use R/S in place of C/C++. e.g., 0MQ is a great library, and we could write an implementation in R/S. Maybe even better, a mix of Red and R/S, with only the necessary bits in R/S and parsing and protocol handling in Red.}
    sent: "2017-02-18T17:12:34.930Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a7e5101465c46a567e5553"
    text: {@dockimbel With the power and simplicity that Red System provides wrt low level stuff, I was wondering (thinking out aloud) how much functionality ito especially third party dlls can be implemented in it to prevent broken code. Was silently admiring and wondering how you managed to hook into the native GUI, and how much could be natively incorporated into Red, without any external dependencies.^/^/Guess I have to try to study/understand the source code to see for myself. }
    sent: "2017-02-18T06:09:20.294Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58a69ced1465c46a56779f23"
    text: {@dsgeyser ^/> Would be nice to implement dll functionality entirely in Red System.^/^/Could you elaborate on that?}
    sent: "2017-02-17T06:49:17.044Z"
    editedAt: "2017-02-17T06:49:30.704Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58a67c6500c00c3d4f4d456e"
    text: {A keyboard subsystem would be pretty cool. Then you could write text-expander/macro tools and build dialects into templates and such.}
    sent: "2017-02-17T04:30:29.481Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a66711f045df0a225a52bc"
    text: {@greggirwin That sounds a good idea as it will help other people. I'm hoping that it will be possible for the Red team to come up with a cross-platform solution.}
    sent: "2017-02-17T02:59:29.649Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a5ec2fde50490822d8899b"
    text: {@PeterWAWood , I sent @dsgeyser my old code. Really old. :^^) I had forgotten all that was involved in it. e.g., handling keyboard mappings. If the team thinks it would be useful, I can certainly post my old code somewhere for others to reference for a Red implementation.}
    sent: "2017-02-16T18:15:11.177Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a55bdef045df0a22543e4b"
    text: {Sorry the link to https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx wasn't correct}
    sent: "2017-02-16T07:59:26.364Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a5394a872fc8ce6240d872"
    text: {4. The program must be compiled with the -r (release) option.}
    sent: "2017-02-16T05:31:54.995Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a538bcde50490822d45ba0"
    text: {There are somethings to note:^/1. The Red text must always be uppercase. That is because you need to pass Microsoft Virtual Key Codes to the Win-32 API keybd_event function. [Microsoft Virtual Key Codes](https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx).^/2. To get upper case letters to display in a Windows app, you need to send the shift key down message before sending the letter key down and key up and send the shift key up message after that.^/3. The program assumes that Notepad is already running and that the title it displays is "Untitled - Notepad".  }
    sent: "2017-02-16T05:29:32.876Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a5370d00c00c3d4f45e8a5"
    text: {@dsgeyser Here is a small example that might help set you in the correct direction: https://gist.github.com/PeterWAWood/9fe13c34ed1e52d5497a5da3e26625b4}
    sent: "2017-02-16T05:22:21.952Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a44050de50490822cec98e"
    text: {@endo64 One advantage of Windows is backward compatibility. It's good to know. Would be nice to implement dll functionality entirely in Red System.}
    sent: "2017-02-15T11:49:36.616Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58a43227872fc8ce623acfe2"
    text: {I don't think dll hell happens for user32.dll and similar system/kernel dlls because you should never deploy those dlls with your application, and those dlls are mostly backward compatible.}
    sent: "2017-02-15T10:49:11.757Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58a423a321d548df2c104955"
    text: {@PeterWAWood Thanks for the pointers. @greggirwin That would be much appreciated.^/The idea is to send keystrokes to the Win app. Want to stay away for mouse control - difficult and useless when user starts moving mouse pointer around. (A's an educational tool). ^/btw Is dll hell relevant when system dlls (like user32.dll) are implemented in code?}
    sent: "2017-02-15T09:47:15.295Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58a1e997f045df0a2241501b"
    text: "thanks!"
    sent: "2017-02-13T17:15:03.445Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58a1e955238b1dae57042f94"
    text: {@dander rendering engine - http://www.antigrain.com/}
    sent: "2017-02-13T17:13:57.972Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58a1e930f045df0a22414c4c"
    text: "What is AGG?"
    sent: "2017-02-13T17:13:20.749Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58a1e08f238b1dae5703f373"
    text: {@dsgeyser I have an old R2 `send-keys` dialect, for Windows, that uses APIs to do it. I haven't needed it in Red, so haven't tried to port it yet. If you want to take a crack at it, I can get it to you.}
    sent: "2017-02-13T16:36:31.533Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a19755aa800ee52c8b7e8f"
    text: {One proviso about what I've said, it will be possible to control  Windows apps that use the Win32 APIs to display their GUI. It may not be possible to control an app that uses an alternative method to display its GUI (e.g. Rebol/View which uses AGG).}
    sent: "2017-02-13T11:24:05.708Z"
    editedAt: "2017-02-13T11:25:18.853Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a196e81465c46a565aa565"
    text: {Controlling Windows apps from Red is not in the current roadmap. Personally, I wouldn't expect it to come from the Red team for a long time ( if ever). }
    sent: "2017-02-13T11:22:16.740Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a19668872fc8ce622bea48"
    text: {@dsgeyser ^/^/Firstly, I think that it is possible to do that today by calling the relevant Win32 API functions via Red/System code. ^/^/Secondly, I'm pretty certain that somebody will produce a library to make it easy to control other Windows apps from Red. ^/^/}
    sent: "2017-02-13T11:20:08.831Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a18ebcde50490822c00415"
    text: {Will it be possible to send keycodes from Red app to another active/visible Win app (not in Red), for navigation and input?}
    sent: "2017-02-13T10:47:24.784Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "589dc3a8872fc8ce621a378c"
    text: {@PeterWAWood  Thank you Peter, I will give it a try!}
    sent: "2017-02-10T13:44:08.125Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "589d85a900c00c3d4f1d60e1"
    text: { @DideC Wow, What a smart idea to use a pixel as the seed. Thanks.}
    sent: "2017-02-10T09:19:37.910Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589d7cd7567b0fc8138cfeab"
    text: {@geekyi it custom console build with different prompt}
    sent: "2017-02-10T08:41:59.795Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "589d7ca100c00c3d4f1d30d5"
    text: "@geekyi notices @rebolek is using `c>`"
    status: true
    sent: "2017-02-10T08:41:05.647Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589d7c46567b0fc8138cfea2"
    text: {@gltewalt `()` is same as `do []`:^/```^/c> equal? () do []^/== true^/```}
    sent: "2017-02-10T08:39:34.195Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "589d7a7e21d548df2cedcce1"
    text: {@Rebol2Red If you add things in an image, you can use part of the image as a seed. The simplest would be to use the first pixel value as a an 32bits value to seed random. You have to ensure that your algo don't overwrite this value while you hide chars to allow decypher.}
    sent: "2017-02-10T08:31:58.116Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "589d764ade50490822ad2b32"
    text: {You can say this is by design:^/```^/red>> [[]]^/== [[]]^/red>> (())^/red>>^/```}
    sent: "2017-02-10T08:14:02.329Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "589d7607567b0fc8138cfe34"
    text: {@gltewalt Then you must defer valuation, for example:^/```^/c> to-paren quote ()^/== ()^/```}
    sent: "2017-02-10T08:12:55.454Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "589d75b4aa800ee52c77c5ee"
    text: "I expected it to return empty paren"
    sent: "2017-02-10T08:11:32.901Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d6bc69eb1bd81481c4ad7"
    text: {```^/c> unset? ()^/== true^/```}
    sent: "2017-02-10T07:29:10.615Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "589d6bb300c00c3d4f1cdab5"
    text: "Empty paren can be used for unset?"
    sent: "2017-02-10T07:28:51.824Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d6b93567b0fc8138cfdbe"
    text: {@gltewalt `paren!` gets evaluated. Empty `paren!` returns `unset!`.}
    sent: "2017-02-10T07:28:19.668Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "589d6aa8aa800ee52c778f69"
    text: "huh?"
    sent: "2017-02-10T07:24:24.031Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d6aa2f045df0a222c224d"
    text: {```^/red>> to-paren ()^/*** Script Error: to-paren does not allow unset! for its value argument^/*** Where: to-paren^/```}
    sent: "2017-02-10T07:24:18.906Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d69c61465c46a5646c1de"
    text: "As I noted above, get-args is not safe."
    sent: "2017-02-10T07:20:38.963Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589d69a3872fc8ce6218389c"
    text: {need to be updated to handle Windows Double byte characters. The change would be needed in the call to string/load.}
    sent: "2017-02-10T07:20:03.627Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589d6916de50490822acec16"
    text: { @endo64 It assumes the args are UTF-8 encoded. It should handle any UTF-8. It probably would }
    sent: "2017-02-10T07:17:42.849Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589d644321d548df2ced5d82"
    text: {@PeterWAWood Is `get-args` safe for unicode characters? }
    sent: "2017-02-10T06:57:07.803Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "589d47b921d548df2ceceb73"
    text: "@greggirwin May be, once a guru has improved it."
    sent: "2017-02-10T04:55:21.797Z"
    editedAt: "2017-02-10T04:55:30.978Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589d45b821d548df2cece3fa"
    text: {@PeterWAWood, is your command line solution worth adding to Guru Meditations?}
    sent: "2017-02-10T04:46:48.338Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589d459d1465c46a5646330d"
    text: {@Rebol2Red, wouldn't setting your own seed work the same as using the default seed, aside from knowing it can't change out from under you?}
    sent: "2017-02-10T04:46:21.022Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589d4542872fc8ce6217abe1"
    text: {Two important notes:^/1. The code is not SAFE. It will overwrite memory if the length of the arguments exceed 1024 bytes. This can be fixed by checking that the ```buffer``` can accommodate the next argument before trying to add it.^/2. The code needs to be compiled with the release option, ```-r```, so that the correct Red/System functions will be available.}
    sent: "2017-02-10T04:44:50.022Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589d40d700c00c3d4f1c1e47"
    text: {Here are the results:^/```text^/mbp:red peter$ ./test^/count: 1^/first argument: ./test^/^/mbp:red peter$ ./test 1 2 3^/count: 4^/first argument: ./test^/argument 2: 1^/argument 2: 2^/argument 2: 3^/1 2 3 ^/```}
    sent: "2017-02-10T04:25:59.043Z"
    editedAt: "2017-02-10T04:26:29.992Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589d40ce6b2d8dd55224e8de"
    text: {@keesse You can access the command line arguments via Red/System using a ```routine```. Here is an example that will return a single string containing the arguments. The tricky part for me was creating a single string to return to Red from Red/System. I don't know of an easy way to concatenate strings in Red/System.^/^/```text^/Red []^/^/#system [^/^-args: declare str-array!^/^-buffer: allocate 1024^/^-c: 0^/^-c-str: declare c-string!^/^-save-buffer-start: buffer^/^-temp-buffer: declare byte-ptr!^-^/]^/^/get-args: routine [return: [string!]] [^/^-print ["count: " system/args-count lf]^/^-args: system/args-list ^/^-print ["first argument: " args/item lf]^/^-if system/args-count < 2 [^/^-^-return string/load "" 0 UTF-8^-^-^/^-]^/^-c: 2^/^-args: args + 1     ^-^-^-^-^-^-^-^-^-;; skip first argument^/^-until [^/^-^-print ["argument " c ": " args/item lf]^/^-^-temp-buffer: as byte-ptr! args/item^/^-^-until [^-^-^-^-^-^-^-^-^-^-^-;; copy the args to the buffer^/^-^-^-buffer/value: temp-buffer/value^/^-^-^-buffer: buffer + 1^/^-^-^-temp-buffer: temp-buffer + 1^/^-^-^-temp-buffer/value = as byte! 0^/^-^-]^/^-^-buffer/value: #" "^-^-^-^-^-^-^-^-;; add a space after the arg^/^-^-buffer: buffer + 1^/^-^-^/^-^-args: args + 1^/^-^-args/item = null^/^-]^/^-buffer/value: as byte! 0^-^-^-^-^-^-^-;; change the last space to end of string^/^-c-str: as c-string! save-buffer-start^/^-return string/load c-str length? c-str UTF-8^-   ^/]^/^/print get-args^/```^/}
    sent: "2017-02-10T04:25:50.209Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589d3e80aa800ee52c76d80c"
    text: "And @geekyi "
    sent: "2017-02-10T04:16:00.926Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d3ccdf045df0a222b6d3a"
    text: {I cracked a hashed phone number with Ruby, brute force. A slow language. Without knowing the internals of anything. ^/It was less than 5 minutes of run time. ^/^/I think @maximvl is right}
    sent: "2017-02-10T04:08:45.730Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d32856b2d8dd55224b83f"
    text: "@maximvl Thanks for the `probe` code solution!"
    sent: "2017-02-10T03:24:53.414Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589d2ce900c00c3d4f1bcf9a"
    text: {@keesse I don't think command line arguments have been implemented yet.}
    sent: "2017-02-10T03:00:57.227Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589cdbbbaa800ee52c74ed4e"
    text: {```^/red>> random/seed 0^/red>> random 75^/== 1^/```}
    sent: "2017-02-09T21:14:35.469Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589cdb8400c00c3d4f1a42b5"
    text: {@Rebol2Red  Still. Not having the sources isn't enough. If the security is weak, it can be broken if an adversary gets enough data (you don't need the code). You just need to crypt-analyze the data and look for patterns and entropy}
    sent: "2017-02-09T21:13:40.797Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589cdb5d6b2d8dd55223161b"
    text: {Is it possible to use commandline arguments in Red yet?^/I tried the Rebol way with `probe system/options/args` and  `probe system/script/args`, the first only gives the scriptname and the second says 'none' (I gave three arguments)}
    sent: "2017-02-09T21:13:01.970Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "589cc30700c00c3d4f19ab4e"
    text: {Btw: Stenography is well known. There are programs which can see if stenography is used. These programs will not work on my picture files. ^/It is also possible to hide a picture into a picture with my code. Even a mix of a picture and text. Maybe i will make another program which can do this.}
    sent: "2017-02-09T19:29:11.227Z"
    editedAt: "2017-02-09T19:34:29.580Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589cbf62de50490822a9d361"
    text: {@geekyi ^/You are right. It is a form of stenography, but different and less obvious. I put the picture between other pictures, the program is at a different location than the picture and the picture looks like a test file made with a programming language.^/^/What is the use of random/secure?^/^/@greggirwin I can not use random/seed because when i load a picture with secret text in it i must have the original order of the random numbers used when the secret text is saved to fetch the original secret text.^/ ^/Maybe this explains a bit:^/Say i put the value of "A" is 65 at place 32768  in the picture and then "T" at place 7000 in the picture, i must know where the "A" and "T" is put while saving the picture to get the text "AT" when the picture is loaded, so i can't use random/seed but only the default seed. ^/I will not further explain what i do because it will make my program useless. There is ofcourse a lot more going on. Ordering of the random bytes, offset of the pixels, ROT13, the  End Of text Marker, etc, etc.}
    sent: "2017-02-09T19:13:38.036Z"
    editedAt: "2017-02-09T19:22:37.311Z"
    v: 7
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589c9fa421d548df2ce951f0"
    text: {@Rebol2Red, if you're not giving out the source code, you can use `random/seed` to control the starting point. I agree with @maximvl that you should not rely on internal details in this case. }
    sent: "2017-02-09T16:58:12.284Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589c9972de50490822a8e35b"
    text: {Also, it looks like you are trying to implement [Steganography](https://en.wikipedia.org/wiki/Steganography)?}
    sent: "2017-02-09T16:31:46.087Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589c98fc872fc8ce6213f62f"
    text: {@Rebol2Red I think you'll need at least `random/secure` for real security (help shows it as TBD)}
    sent: "2017-02-09T16:29:48.147Z"
    editedAt: "2017-02-09T16:31:34.166Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "589c696221d548df2ce7f583"
    text: {apparently our professors though password-based security was enough for tests, but it wasn't :D}
    sent: "2017-02-09T13:06:42.910Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c69256b2d8dd552202b74"
    text: {@maximvl remembers hacking test's passwords in university with a keylogger}
    status: true
    sent: "2017-02-09T13:05:41.809Z"
    editedAt: "2017-02-09T13:06:03.769Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c68ebaa800ee52c71df11"
    text: {@Rebol2Red but, of course it depends on your use case, what do you want from your program}
    sent: "2017-02-09T13:04:43.200Z"
    editedAt: "2017-02-09T13:04:57.368Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c68a400c00c3d4f17501a"
    text: {@Rebol2Red well, they are mathematically proven to be secure, at least with current computers architecture}
    sent: "2017-02-09T13:03:32.151Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c687d21d548df2ce7ef59"
    text: {thus, relying on publicly available number in our case is not secure}
    sent: "2017-02-09T13:02:53.098Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c68671465c46a56414338"
    text: "Does those algorithms really exists? :)"
    sent: "2017-02-09T13:02:31.681Z"
    editedAt: "2017-02-09T13:03:20.308Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589c682b6b2d8dd552202525"
    text: {@Rebol2Red the whole idea is to have your algorithm so strong that attacker can't break it even if he knows everything and much smarter than you}
    sent: "2017-02-09T13:01:31.151Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c63a7f045df0a2226ab8a"
    text: {@maximvl My bad. Wrong choice of words. It hides text from plain sight.}
    sent: "2017-02-09T12:42:15.786Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589c5d8c6b2d8dd5521feb4e"
    text: {>if you hide text into a picture you ca'nt see the plain text even with an hex editor, this is also another security level.^/^/This is not security level, I suggest you to take a course on cryptography to get better understanding of what security is}
    sent: "2017-02-09T12:16:12.688Z"
    editedAt: "2017-02-09T12:16:31.168Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c5d53de50490822a75f65"
    text: {>If you do'nt know how i did it, you will have a hard time to crack^/^/@Rebol2Red this is exactly what the article above says:^/>but its owners or designers believe that if the flaws are not known, that will be sufficient to prevent a successful attack}
    sent: "2017-02-09T12:15:15.040Z"
    editedAt: "2017-02-09T12:16:56.680Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c52b4de50490822a72173"
    text: {No, i do'nt give the source that would be stupid. I want to keep this to myself and use it without someone knowing how i did it. If you do'nt know how i did it, you will have a hard time to crack. Btw: if you hide text into a picture you ca'nt see the plain text even with an hex editor, this is also another security level.}
    sent: "2017-02-09T11:29:56.499Z"
    editedAt: "2017-02-09T11:32:44.601Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589c524f00c00c3d4f16cc11"
    text: {let me even quote this:^/>A system or component relying on obscurity may have theoretical or actual security vulnerabilities, but its owners or designers believe that if the flaws are not known, that will be sufficient to prevent a successful attack. Security experts have rejected this view as far back as 1851, and advise that obscurity should never be the only security mechanism.^/}
    sent: "2017-02-09T11:28:15.860Z"
    editedAt: "2017-02-09T11:28:22.343Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c522600c00c3d4f16cb64"
    text: {@Rebol2Red FYI: https://en.wikipedia.org/wiki/Security_through_obscurity}
    sent: "2017-02-09T11:27:34.757Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c51e4aa800ee52c715b80"
    text: {and, btw, since you are using default seed as private key, once somebody knows it - he will be able to decrypt all your messages}
    sent: "2017-02-09T11:26:28.557Z"
    editedAt: "2017-02-09T11:26:58.876Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c51a91465c46a5640c7b6"
    text: {@Rebol2Red give me the source of program which produced it}
    sent: "2017-02-09T11:25:29.309Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c516721d548df2ce76796"
    text: {security level is based on how hard it is to break your algorithm, it is always assumed that attacker knows everything else about your algorithm, etc}
    sent: "2017-02-09T11:24:23.591Z"
    editedAt: "2017-02-09T11:25:09.787Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c5097aa800ee52c715674"
    text: "well, it's not secure at all :D"
    sent: "2017-02-09T11:20:55.782Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c5082872fc8ce62122f62"
    text: {I think that what i have done is pretty secure. The key is the default random seed. I did not set the seed with random/seed. So it is 19650218}
    sent: "2017-02-09T11:20:34.521Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589c507521d548df2ce76191"
    text: {you may want to check modern cryptographic approaches and how they do it}
    sent: "2017-02-09T11:20:21.512Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c4fe4de50490822a71412"
    text: "which is the seed in your case"
    sent: "2017-02-09T11:17:56.128Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c4fbbde50490822a712ef"
    text: {AFAIK from cryptography course, you have to have a secret key somewhere to make this reliable}
    sent: "2017-02-09T11:17:15.252Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "589c4f71872fc8ce62122a9a"
    text: "you should not base things on it"
    sent: "2017-02-09T11:16:01.034Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c4f66872fc8ce62122a74"
    text: "then you will lose all your encrypted data"
    sent: "2017-02-09T11:15:50.503Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c4f5bf045df0a22264023"
    text: {@Rebol2Red well, first of all number in Red code can change at any time}
    sent: "2017-02-09T11:15:39.471Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c4da7872fc8ce62122222"
    text: {@maximvl  Thanks for the default random seed. My program really needs the default seed to read back the secret text at the known random positions in the picture. ^/It wo'nt work if the seed is set to another value than the default each time the program is run. Well, if someone knows this seed i also have the extra coding method.}
    sent: "2017-02-09T11:08:23.749Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589c4963f045df0a22262421"
    text: {@maximvl feels like discovering obvious things, which will be available in 2 clicks in documentation}
    status: true
    sent: "2017-02-09T10:50:11.264Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c4921872fc8ce621208ae"
    text: "@PeterWAWood thanks anyway, good to know!"
    sent: "2017-02-09T10:49:05.878Z"
    editedAt: "2017-02-09T10:49:12.324Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c491821d548df2ce737f0"
    text: "@PeterWAWood hm, but what's the difference?"
    sent: "2017-02-09T10:48:56.655Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c4909872fc8ce62120841"
    text: {```now/precise``` is not yet available but ```now/time/precise``` could be used.}
    sent: "2017-02-09T10:48:41.030Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589c48e5de50490822a6ed09"
    text: {@maximvl ^/```text^/red>> now/time/precise^/== 18:47:42.466307^/```}
    sent: "2017-02-09T10:48:05.803Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589c488121d548df2ce7359e"
    text: {@Rebol2Red if you are still curious about default one, this seems to be it:^/https://github.com/red/red/blob/master/runtime/random.reds#L94}
    sent: "2017-02-09T10:46:25.191Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c47cb872fc8ce621201c6"
    text: {I think `now/precise` is a good candidate for this, but it seems not yet implemented}
    sent: "2017-02-09T10:43:23.151Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c47406b2d8dd5521f6f95"
    text: {there is a chance Red is already doing this by default}
    sent: "2017-02-09T10:41:04.574Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c46f921d548df2ce72d00"
    text: {I assume you just need to give `seed` something reliable and random, usually current time in nano/micro/seconds is used for this}
    sent: "2017-02-09T10:39:53.279Z"
    editedAt: "2017-02-09T10:40:10.996Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c46aef045df0a222614a9"
    text: {@Rebol2Red I don't know what you are doing, but I think you are doing it wrong if your program depends on whether user knows something about Red or not}
    sent: "2017-02-09T10:38:38.694Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c434d6b2d8dd5521f59e4"
    text: {@maximvl  ^/If this is not known by other people, who doesn't use Red, then i can safely use my program. A program which hide secret text into a picture at well known random places .^/It will be secure if someone is not using Red, they won't know the order of the random places.  My program also use an extra coding method to be sure if someone is reading this.}
    sent: "2017-02-09T10:24:13.703Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589c390a00c00c3d4f163892"
    text: {@Rebol2Red why do you need to know default random seed?}
    sent: "2017-02-09T09:40:26.660Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589c163d6b2d8dd5521e5cd1"
    text: {Saw MessageBox example in Red and Red System.Will try a few things as soon as I have some free time available.}
    sent: "2017-02-09T07:11:57.151Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "589c15b5872fc8ce6210fa42"
    text: {@PeterWAWood  Thanks. Will wait for some pointers from them to get me started.}
    sent: "2017-02-09T07:09:41.928Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "589c0940de50490822a5a0be"
    text: {@dsgeyser I think it would be possible under Windows by writing routines that access the relevant Windows APIs directly. For example, using ```FindWindow``` to get a handle to the main window of the other app. ^/^/I suspect that you would need to access the wide-char implementations of the Windows API. I think that there are already some Red/System functions to help with this aspect. @dockimbel and @qtxie will know much better than I.}
    sent: "2017-02-09T06:16:32.433Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "589c052bf045df0a2224d489"
    text: {Is it possible to implement mouse actions, etc. outside generated Red app?  Want to automate other Windows app, can't use AutoIt, there being no library functionality yet.}
    sent: "2017-02-09T05:59:07.279Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "589bfdec21d548df2ce5bea9"
    text: {Without setting the seed first:^/^/```^/print random [1 2 3 4 5 6 7 8 9]^/== 7 6 4 8 1 9 3 5 2^/```^/Now with setting the random seed first:^/^/random/seed ??? ; i need to know this number^/print random [1 2 3 4 5 6 7 8 9]^/must give 7 6 4 8 1 9 3 5 2^/^/In other words: What is the default seed for random (if it is not set)?}
    sent: "2017-02-09T05:28:12.438Z"
    editedAt: "2017-02-09T05:35:51.825Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "589bdacc6b2d8dd5521d64e9"
    text: "Why?"
    sent: "2017-02-09T02:58:20.077Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589bcc67f045df0a2223f858"
    text: {> @geekyi thinks @OneArb is trying to make a game. And at some point needs detection of repeated presses?^/^/text interface, @OneArb ,, gamify}
    sent: "2017-02-09T01:56:55.733Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589bcc1000c00c3d4f1458d4"
    text: {@geekyi^/> @OneArb just out of curiosity, what are you trying to do? Trying out stuff or building something^/^/The short answer^/* @OneArb ,, attempt write^/  * viral DSL ,, adopt maximize^/    *^-resource / skillset ,, minimize}
    sent: "2017-02-09T01:55:28.923Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589bcaf16b2d8dd5521d2a5b"
    text: ""
    sent: "2017-02-09T01:50:41.445Z"
    editedAt: "2017-02-09T01:51:02.791Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589b4486872fc8ce620ca4cf"
    text: "@maximvl the function(s) to use were left open."
    sent: "2017-02-08T16:17:10.701Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589b442bf045df0a2220f96e"
    text: {just be more descriptive, give example of input and desired output and explain why it should be like this}
    sent: "2017-02-08T16:15:39.906Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b4331872fc8ce620c9ad8"
    text: {@maximvl^/`parse` string for first n duplicate character found in (character ,n) set^/disambiguate the question.^/^/I'll try think of it :smile:}
    sent: "2017-02-08T16:11:29.794Z"
    editedAt: "2017-02-08T16:15:06.092Z"
    v: 4
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589b4233de50490822a1be9d"
    text: ""
    sent: "2017-02-08T16:07:15.776Z"
    editedAt: "2017-02-08T16:12:52.447Z"
    v: 3
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589b41f5aa800ee52c6ba424"
    text: {well, HostileFork made it much more clear, he explicetly asked for `parse` variant of code}
    sent: "2017-02-08T16:06:13.381Z"
    editedAt: "2017-02-08T16:06:19.142Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b41bb00c00c3d4f11278f"
    text: {@maximvl I was curious to see if Rebol (the provided code) suffice to spell out question to solve}
    sent: "2017-02-08T16:05:15.026Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589b41656b2d8dd5521a1849"
    text: "both solutions are very procedural to me"
    sent: "2017-02-08T16:03:49.861Z"
    editedAt: "2017-02-08T16:04:12.238Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b410621d548df2ce1c361"
    text: {Thanks.^/for @maximvl ^/"procedural vs. functional solution" clue / context need be expanded?}
    sent: "2017-02-08T16:02:14.494Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589b4045f045df0a2220e5a7"
    text: "so, yes"
    sent: "2017-02-08T15:59:01.995Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b4043f045df0a2220e5a2"
    text: {I spent around 15 minutes trying to understand what you are doing and what you need}
    sent: "2017-02-08T15:58:59.253Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b400cde50490822a1b298"
    text: {Did anyone find issue with my Stackoverlow "dogfood Red / Rebol" zip?^/^/Original OP^/^/* parse string for first n duplicate character found in^/(character ,n) set^/* "function" code below ^/* dogfood into Rebol / Red !^/^/https://stackoverflow.com/questions/42114410/parse-string-to-find-first-duplicate-character-procedural-vs-functional-solut}
    sent: "2017-02-08T15:58:04.282Z"
    editedAt: "2017-02-08T15:58:36.630Z"
    v: 3
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589b332200c00c3d4f10c377"
    text: {`break` stops parsing, `fail` continues with next rule}
    sent: "2017-02-08T15:02:58.277Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b332121d548df2ce16df7"
    text: "good to know there is `fail` :D"
    sent: "2017-02-08T15:02:57.707Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b331a00c00c3d4f10c360"
    text: "yup"
    sent: "2017-02-08T15:02:50.327Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b32f06b2d8dd55219b862"
    text: {@maximvl like: ^/```^/red>> parse [] [ fail | (print "second") ]^/second^/== true^/```}
    sent: "2017-02-08T15:02:08.314Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b32b3aa800ee52c6b3d36"
    text: {like in ^/```^/red>> parse [ 1 ] [ logic! | (print "second") ]^/second^/== false^/```}
    sent: "2017-02-08T15:01:07.941Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b328a1465c46a563aae36"
    text: {@geekyi if `break` fail matching - `parse` should have printed "second"}
    sent: "2017-02-08T15:00:26.907Z"
    editedAt: "2017-02-08T15:00:34.632Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b2e60872fc8ce620c1933"
    text: {I think then I don't understand what you mean by this (emphsis mine):^/> interesting that `break` does *not* fail the matching:}
    sent: "2017-02-08T14:42:40.011Z"
    editedAt: "2017-02-08T14:43:33.121Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "589b2e1921d548df2ce14e07"
    text: {@geekyi in your example `parse` will only hit the first rule}
    sent: "2017-02-08T14:41:29.495Z"
    editedAt: "2017-02-08T14:41:41.052Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b2da81465c46a563a8ca4"
    text: {It does:^/```^/red>> parse [] [ (print "first") | break]^/first^/== true^/```}
    sent: "2017-02-08T14:39:36.651Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b2b2d00c00c3d4f108bfd"
    text: "but `parse` returns `false` for some reason"
    sent: "2017-02-08T14:29:01.216Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b2b161465c46a563a7e01"
    text: {interesting that `break` doesn't fail the matching:^/```^/red>> parse [] [ break | (print "second") ]^/== false^/```}
    sent: "2017-02-08T14:28:38.501Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b29cc1465c46a563a74e8"
    text: {@maximvl needs a decent Red editor/repl to stop writing one-liners}
    status: true
    sent: "2017-02-08T14:23:08.415Z"
    editedAt: "2017-02-08T14:23:24.370Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b29af21d548df2ce132f5"
    text: "nice"
    sent: "2017-02-08T14:22:39.992Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b29aede50490822a1166d"
    text: {```^/red>> char-rule: [ set curr-char ["a" | "b" | "c"] [if (curr-char = prev-char) (count: count + 1) [if (count = 3) (print ["found 3-duplicate " curr-char]) break | ] | (count: 1 prev-char: curr-char) ] ]^/red>> parse "aabbccc" [ (set 'count 1 set 'prev-char none) any char-rule ]^/found 3-duplicate  c^/== true^/```}
    sent: "2017-02-08T14:22:38.593Z"
    editedAt: "2017-02-08T14:23:58.846Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
)#(
    id: "589b28e900c00c3d4f107d3b"
    text: {@geekyi you are right! :D^/```^/red>> parse [1 2 3] [any [set x number! (print ["x:" x]) [ if (x > 1) (print ["last:" x]) break | ]]]^/x: 1^/x: 2^/last: 2^/== false^/```}
    sent: "2017-02-08T14:19:21.935Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b28e5aa800ee52c6afcb2"
    text: {```^/red>> parse [1 2 3] [any [set x number! if (x > 1 print ["last:" x])]]^/last: 1^/last: 2^/last: 3^/== true^/```}
    sent: "2017-02-08T14:19:17.948Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b28b1f045df0a22204e6f"
    text: "let me try that"
    sent: "2017-02-08T14:18:25.025Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b28aede50490822a11062"
    text: "mm, so it controls `parse` by itself"
    sent: "2017-02-08T14:18:22.317Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b288f00c00c3d4f107ab5"
    text: {I think `if` just succeds or fails the expression, so no break needed?}
    sent: "2017-02-08T14:17:51.127Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b284bf045df0a22204bfc"
    text: {> so how does `if` work in `parse`?^/^/Not much documentation around. I found from [wikibooks](https://en.wikibooks.org/wiki/REBOL_Programming/Language_Features/Parse/Parse_expressions#Differences_between_R2_and_R3_parsing)}
    sent: "2017-02-08T14:16:43.906Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b2766de50490822a10a4c"
    text: "right now it seems to be executed after if"
    sent: "2017-02-08T14:12:54.995Z"
    editedAt: "2017-02-08T14:13:02.336Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b2755de50490822a109c7"
    text: "so how do I put `break` into if's branch?"
    sent: "2017-02-08T14:12:37.818Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b26ff00c00c3d4f10714b"
    text: {```^/red>> parse [1 2 3] [any [set x number! if (x > 1) (print ["last:" x]) break]]^/== false^/```}
    sent: "2017-02-08T14:11:11.390Z"
    editedAt: "2017-02-08T14:11:22.683Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "589b26e121d548df2ce11f21"
    text: "`'x` no need to quote"
    sent: "2017-02-08T14:10:41.511Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b26dcde50490822a1069f"
    text: "so how does `if` work in `parse`?"
    sent: "2017-02-08T14:10:36.666Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b26c9f045df0a22204526"
    text: "ye, I understand that"
    sent: "2017-02-08T14:10:17.189Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b26b3aa800ee52c6aedd3"
    text: {Important to keep in mind that what's inside `parse` block is a dialect, not normal rebol code}
    sent: "2017-02-08T14:09:55.484Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b266200c00c3d4f106e76"
    text: {@geekyi hm, what's wrong with my example?:^/```^/red>> parse [1 2 3] [any [set 'x number! if (x > 1) (print ["last:" x]) break]]^/*** Script Error: PARSE - unexpected end of rule after: set^/*** Where: parse^/```}
    sent: "2017-02-08T14:08:34.090Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b263100c00c3d4f106d63"
    text: {`if` here is a word in the parse dialect. As usual in the parse dialect, what is inside the parens `()` gets called as normal Red/rebol code}
    sent: "2017-02-08T14:07:45.096Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b25cede50490822a0fff2"
    text: "@geekyi I didn't get it, what happens here?"
    sent: "2017-02-08T14:06:06.527Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b254d21d548df2ce114bc"
    text: {@maximvl and the answer is yes :)^/```^/red>> parse [] [if (false) ]^/== false^/red>> parse [] [if (true) ]^/== true^/```}
    sent: "2017-02-08T14:03:57.534Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b241300c00c3d4f105e55"
    text: "Yeah"
    sent: "2017-02-08T13:58:43.674Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b2401aa800ee52c6ad98e"
    text: {so yeah, the question is can underlying code control the `parse` or not}
    sent: "2017-02-08T13:58:25.995Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b23e51465c46a563a4de7"
    text: {@maximvl I think not so easy in your code.. I'm not sure.. 🤔}
    sent: "2017-02-08T13:57:57.755Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b23606b2d8dd5521952c9"
    text: "@geekyi how can I put it outside the parens?"
    sent: "2017-02-08T13:55:44.112Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b2348aa800ee52c6ad5df"
    text: {>  * I don't know how to stop `parse` from inside itself^/^/`break` is a word in the `parse` dialect and also in red itself. You simply have to put `break` outside the parens}
    sent: "2017-02-08T13:55:20.986Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b20e1872fc8ce620bbc89"
    text: "ask around for the second :)"
    sent: "2017-02-08T13:45:05.974Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b20d8aa800ee52c6ac58b"
    text: {@OneArb it should not be a problem for you to fix the first one}
    sent: "2017-02-08T13:44:56.308Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b20c51465c46a563a396a"
    text: {* charset and counts are hard-coded^/* I don't know how to stop `parse` from inside itself}
    sent: "2017-02-08T13:44:37.812Z"
    editedAt: "2017-02-08T13:44:41.900Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b2093872fc8ce620bbaef"
    text: {```^/red>> char-rule: [ set curr-char ["a" | "b" | "c"] (either curr-char = prev-char [ count: count + 1 if count = 3 [ print ["found 3-duplicate " curr-char] break ] ] [ count: 1 prev-char: curr-char ] ) ]^/red>> parse "aabbbcc" [ (set 'count 1 set 'prev-char none) any char-rule ]^/found 3-duplicate  b^/*** Throw Error: no loop to break^/*** Where: break^/```}
    sent: "2017-02-08T13:43:47.530Z"
    editedAt: "2017-02-08T13:47:48.466Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b206321d548df2ce0f3a8"
    text: {@geekyi thinks @OneArb is trying to make a game. And at some point needs detection of repeated presses?}
    status: true
    sent: "2017-02-08T13:42:59.919Z"
    editedAt: "2017-02-08T13:43:39.527Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "589b204d21d548df2ce0f2dc"
    text: {@OneArb just out of curiosity, what are you trying to do? Trying out stuff or building something}
    sent: "2017-02-08T13:42:37.032Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589b1e4f1465c46a563a28d1"
    text: {you can keep current character & repetitions count in the same way you are doing with loop}
    sent: "2017-02-08T13:34:07.669Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b1e1d872fc8ce620bab92"
    text: "@OneArb so what's your problem with `parse`?"
    sent: "2017-02-08T13:33:17.759Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589b1daaf045df0a22200d8f"
    text: {@geekyi ^/> @OneArb I think that's a good question for stackoverflow^/^/parse challenge of the day  :smiling_imp: ^/https://stackoverflow.com/questions/42114410/parse-string-functional-vs-procedural-code}
    sent: "2017-02-08T13:31:22.119Z"
    editedAt: "2017-02-08T13:32:50.833Z"
    v: 4
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589b025000c00c3d4f0f931b"
    text: {@meijeru ^/Thanks for tipping before I posted Q on stackoverflow!}
    sent: "2017-02-08T11:34:40.318Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589ad63221d548df2cdf3d9c"
    text: {Also, while `==` is valid Red, it is possible to use `=`here.}
    sent: "2017-02-08T08:26:26.302Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "589ad5ba21d548df2cdf3957"
    text: {May I point out that your `if/else` is an old REBOL 2 facility which is superseded by `either`.}
    sent: "2017-02-08T08:24:26.525Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "589ab587872fc8ce620967f5"
    text: {@geekyi ^/Find the first repeat char count sequence.^/^/This is the code to do it without using parse:^/```^/key-arrow: [#"u" 2 #"d" 2 #"l" 3 #"r" 3]^/^/text: "ozzllluu"^/^/lastchar: ""^/count: 1^/escape-char: ""^/^/foreach char text [^/  if/else char == lastchar ^/  ^-[ ^/  ^-^-count: count + 1^/  ^-^-if (select key-arrow char) == count^/  ^-^-^-[^/  ^-^-^-^-escape-char: char^/  ^-^-^-^-break^/  ^-^-^-]^/  ^-]^/  ^-[count: 1]^/^-lastchar: char^-^/^-]^/^/^-if/else escape-char == ""^/^-^-[print   "no escape-char"]^-^/^-^-[print join "escape-char " escape-char]^/```}
    sent: "2017-02-08T06:07:03.814Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589ab457aa800ee52c6863c4"
    text: "@greggirwin @geekyi ^/Great feature thanks!"
    sent: "2017-02-08T06:01:59.311Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589aaed9872fc8ce62094ecd"
    text: {Red compiled GUIs are natively compiled versions. Can I automate the GUI with AutoIt dll embedded in Red? Library function not available?^/^/How then to enable AutoIt access from Red? I am looking for maximum functionality.^/^/Also, how much automation is possible strictly from Red wrt other Windows GUI applications?}
    sent: "2017-02-08T05:38:33.524Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "589aa3fdaa800ee52c681d06"
    text: {It's there today. I have gotten strange errors when trying to use a custom callback, but that was some time ago. The default callback has always worked fine for me.}
    sent: "2017-02-08T04:52:13.066Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589aa33d00c00c3d4f0da439"
    text: {@geekyi ^/> @OneArb have you used `parse-trace`?^/^/Isn't  parse-trace a Red planned feature?}
    sent: "2017-02-08T04:49:01.602Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "589a0e5200c00c3d4f0a6d9c"
    text: "Clicking the link works now as well. "
    sent: "2017-02-07T18:13:38.750Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589a0de9f045df0a221a86b2"
    text: {Thanks @geekyi. That option wasn't there before. In fact, I have a lot of new options in that menu now. Must have been as @asampleanu said, that I was on a stale version here.}
    sent: "2017-02-07T18:11:53.752Z"
    editedAt: "2017-02-07T18:14:36.259Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5899846e1465c46a56310cd8"
    text: {With a clearer explanation that you want repeated characters. Might have to keep state I think? `[set x]` and `[char some char]` may be useful here}
    sent: "2017-02-07T08:25:18.486Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589983c0f045df0a221740d8"
    text: {@OneArb I think that's a good question for stackoverflow}
    sent: "2017-02-07T08:22:24.383Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589981e9de50490822981b9c"
    text: {`probe parse "odd" [chars]` already matched, so no matching}
    sent: "2017-02-07T08:14:33.419Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589980fdf045df0a2217328a"
    text: "@OneArb have you used `parse-trace`?"
    sent: "2017-02-07T08:10:37.651Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589980a51465c46a5630f963"
    text: "2 . It should, if gitter isn't having problems"
    sent: "2017-02-07T08:09:09.055Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5899808421d548df2cd7b75e"
    text: {[![image.png](https://files.gitter.im/red/help/cH1V/thumb/image.png)](https://files.gitter.im/red/help/cH1V/image.png)}
    sent: "2017-02-07T08:08:36.294Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5899806000c00c3d4f06f983"
    text: {:point_up: [February 5, 2017 11:14 PM](https://gitter.im/red/help?at=58976b6b6018ccd65272db33) @greggirwin ^/1. Top right in settings}
    sent: "2017-02-07T08:08:00.824Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58990ef1aa800ee52c5f7149"
    text: {Help with probe R2 / Red compatible^/^/Any idea what concept I need grasp to get this to work?^/^/```^/numbers: charset [#"0" - #"9"]^/^/chars: reduce ['some (complement numbers)]^/^/keys:  ["uu" | "dd" | "lll" | "rrr"]^/^/probe parse "dd" [keys]^/^/probe parse "odd" [chars]^/^/probe parse "odd" [chars keys]^/; ??^/```^/^/The sought end result:^/^/skip any characters till matching x repeat characters "uu", "dd", "lll", ..., skip to tail.^/}
    sent: "2017-02-07T00:04:01.635Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58990e8821d548df2cd5aa45"
    text: ""
    sent: "2017-02-07T00:02:16.265Z"
    editedAt: "2017-02-07T00:02:40.154Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
)#(
    id: "58990d8200c00c3d4f04f850"
    text: {@endo64 ^/^/Thanks for that code!^/^/> You could do in R2 (possible R3 too) as follow:^/```^/s: "abc123def456ghi"^/copy/part pos: find s digit find  pos complement digit^/```}
    sent: "2017-02-06T23:57:54.460Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58990c3c6b2d8dd5520df950"
    text: {@xqlab ^/> this R2 version works in Red too^/^/numbers: charset [#"0" - #"9"]^/chars: complement numbers^/string: "abcd123efgh456sd"^/collect [parse string [any chars copy n some numbers (keep n)]]^/^/Thanks for the code, I ended using that version!}
    sent: "2017-02-06T23:52:28.305Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58976b6b6018ccd65272db33"
    text: {1. How do I get the archive? ^/2. Should the link work by just clicking it?}
    sent: "2017-02-05T18:14:03.101Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589708795bc3025608cbd740"
    text: {@greggirwin you can get the post in link from 2016 dec 15 archive}
    sent: "2017-02-05T11:11:53.163Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5896fbb773e8cb0a091b4b54"
    text: {@ujk you can check as follow before `get`ting value of a word:^/```^/red>> if value? word: load "blah" [get word]^/== none^/red>> if value? word: load "red" [get word]^/== 255.0.0^/```}
    sent: "2017-02-05T10:17:27.026Z"
    editedAt: "2017-02-05T10:17:58.697Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58964cba567b0fc8138c488f"
    text: "Yes, this works only for defined words."
    sent: "2017-02-04T21:50:50.355Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "589630ff3bcc9b3b25dc9948"
    text: {Just make sure to validate or trap.^/```^/red>> get load "blah"^/*** Script Error: blah has no value^/*** Where: get^/```}
    sent: "2017-02-04T19:52:31.080Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58962a5a46101c120989e5bf"
    text: "Thanks!"
    sent: "2017-02-04T19:24:10.309Z"
    v: 1
    author: "58961e91d73408ce4f4819a2"
) #(
    id: "589623ee3bcc9b3b25dc5c05"
    text: {```^/red>> get load "red"^/== 255.0.0^/```}
    sent: "2017-02-04T18:56:46.392Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5896235e46101c120989c336"
    text: {Hi, how to convert string "red" to color tuple 255.0.0  in a Red script?}
    sent: "2017-02-04T18:54:22.015Z"
    v: 1
    author: "58961e91d73408ce4f4819a2"
) #(
    id: "589614e43bcc9b3b25dc157b"
    text: "And now it is back! Very unstable"
    sent: "2017-02-04T17:52:36.527Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5896149e5bc3025608c81f8a"
    text: {I too have trouble with Gitter; the feed is gone again...}
    sent: "2017-02-04T17:51:26.398Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58960c4046101c1209895112"
    text: {Looks like the activity bar is still having trouble for me. And if I click on your link @rebolek, the chat area goes blank and even changing rooms doesn't bring it back. Have to refresh the page.}
    sent: "2017-02-04T17:15:44.467Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589592e84150746b15128d7f"
    text: {relevant: :point_up: [15. prosinec 2016 16:07](https://gitter.im/red/red?at=5852b1cb058ca967374defff)}
    sent: "2017-02-04T08:38:00.649Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58951f9573e8cb0a0913a134"
    text: {Have to see what the designer says about the intent or reason for the change. I only used the old syntax rarely, and my 'literalize... example came from a project where I wanted to allow numbers directly in templates, as example values.}
    sent: "2017-02-04T00:25:57.681Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5895174746101c12098564b9"
    text: {You'd want a literal number without extracting its value for macro tricks, maybe?}
    sent: "2017-02-03T23:50:31.329Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5894b47ce836bf7010c8ff6a"
    text: {I wasn't aware of the dialect change in Red, not allowing [m n val] with an integer. Thanks.}
    sent: "2017-02-03T16:49:00.831Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5894b40ddcb66e4f76e8774f"
    text: "Ah! `quote`, yes."
    sent: "2017-02-03T16:47:09.772Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58947046e836bf7010c76dfe"
    text: {Also, Rebol2 gives a better error message in this case:^/```^/>> parse [1 1] [2 '1]^/** Syntax Error: Invalid word-lit -- '1^/** Near: (line 1) parse [1 1] [2 '1]^/```^/Bug, er.. enhancement needed?}
    sent: "2017-02-03T11:57:58.492Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58946bb35309d6b358a24a80"
    text: {```^/red>> parse [1 1] [2 '1]^/*** Syntax Error: missing #"]" at "1] [2 '1]"^/*** Where: do^/```}
    sent: "2017-02-03T11:38:27.619Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58946b61e836bf7010c75669"
    text: {Reason we have to `quote` instead of `'lit-` `number!`s is because the parser treats numbers specially. `words!` can't start with a number:}
    sent: "2017-02-03T11:37:05.126Z"
    editedAt: "2017-02-03T11:38:35.053Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58946aea2ff29dec0671051b"
    text: {Also while you can do this:^/```Red^/red>> parse [a a] [2 'a]^/== true^/```}
    sent: "2017-02-03T11:35:06.362Z"
    editedAt: "2017-02-03T11:35:15.958Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58946a3cc0f28dd8627cc668"
    text: {Doesn't look very readable to me. I think Red is right to error here. I also prefer the `quote 1234` version}
    sent: "2017-02-03T11:32:12.451Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589469e1dcb66e4f76e6cf65"
    text: {```Rebol2^/>> parse [2 2] [3 2 2 5 end]^/== true^/```}
    sent: "2017-02-03T11:30:41.883Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589469c64c04e9a44e6663be"
    text: {```Rebol2^/>> parse [2 2 2 5 5] [3 3 2 2 2 5]^/== true^/```}
    sent: "2017-02-03T11:30:14.847Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58945237e836bf7010c6cfd7"
    text: {Just for completeness, in Rebol3 we also have:^/```^/>> parse [1] [1 1 1]^/== true^/```^/}
    sent: "2017-02-03T09:49:43.452Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58943d971e4d4bd962cbcbd2"
    text: "`parse [1] [quote 1]` should be ok."
    sent: "2017-02-03T08:21:43.692Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58942a714c04e9a44e6543c3"
    text: "I think erroring out is more useful here"
    sent: "2017-02-03T07:00:01.883Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58942a57c0f28dd8627b6f93"
    text: {```^/red>> parse [1] [1 1 1]^/*** Script Error: PARSE - invalid rule or usage of rule: 1^/*** Where: parse^/```}
    sent: "2017-02-03T06:59:35.253Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58942a331e4d4bd962cb6e6d"
    text: {Note that red gives an error unlike  :point_up: [Rebol2](https://gitter.im/red/help?at=5893a6ebe836bf7010c3f034):}
    sent: "2017-02-03T06:58:59.550Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589429f64c04e9a44e654269"
    text: {@JacobGood1 I think the use-case for that is simply not there? (apart from teaching) When would you rather want a literal number without extracting it's value?}
    sent: "2017-02-03T06:57:58.258Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58942928dcb66e4f76e58a1c"
    text: {```^/red>> parse [43535 43535] [2 quote 43535]^/== true^/```}
    sent: "2017-02-03T06:54:32.315Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589428f9dcb66e4f76e58912"
    text: "@greggirwin doesn't seem to work in red"
    sent: "2017-02-03T06:53:45.540Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5893c8aa4c04e9a44e63c39b"
    text: {```^/literalize-int-rules: func [template [block!] "modified" /local rule mark] [^/^-; Turn a single integer value into a quantity-of-one integer^/^-; rule for parse (e.g. 1 becomes 1 1 1, 4 becomes 1 1 4).^/^-rule: [^/^-^-any [^/^-^-^-into rule^/^-^-^-| mark: integer! (insert mark [1 1]) 2 skip ^/^-^-^-| skip^/^-^-]^/^-]^/^-parse template rule^/^-template^/]^/print mold literalize-int-rules [1 2 3]^/```}
    sent: "2017-02-03T00:02:50.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5893b3104c04e9a44e635985"
    text: {I am not sure yet but it will be between middle and high}
    sent: "2017-02-02T22:30:40.552Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5893b2f6fba5bfea06c07ade"
    text: {@JacobGood1, I don't have any practical teaching advice, but I was wondering about what level are the students?}
    sent: "2017-02-02T22:30:14.160Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5893b09cdcb66e4f76e38876"
    text: {Thanks for the help, but is there no way to do it without turning the code into a string?}
    sent: "2017-02-02T22:20:12.872Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5893aa3de836bf7010c401bc"
    text: {```^/red>> parse to-string [43535] [#"4"#"3"#"5"#"3"#"5"]^/== true^/```}
    sent: "2017-02-02T21:53:01.082Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5893a9bf1e4d4bd962c90e39"
    text: {See also [How to parse an IPv4 address accurately](http://www.red-lang.org/2013/11/041-introducing-parse.html)  @JacobGood1 }
    sent: "2017-02-02T21:50:55.681Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5893a8984c04e9a44e631e52"
    text: {```^/red>> parse to-string [43535] ["43535"]^/== true^/```}
    sent: "2017-02-02T21:46:00.854Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5893a71f2ff29dec066d52f8"
    text: {```^/>> parse [1] [1 1 1]^/== true^/```^/Can you figure out why that works? ;) (only in Rebol2)}
    sent: "2017-02-02T21:39:43.739Z"
    editedAt: "2017-02-02T21:42:23.917Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5893a6ebe836bf7010c3f034"
    text: "Hah! Nice workaround! (but rebol2!)"
    sent: "2017-02-02T21:38:51.492Z"
    editedAt: "2017-02-02T21:43:03.750Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58939fcadcb66e4f76e327e9"
    text: "```^/parse [43535] [to 43535]^/```"
    sent: "2017-02-02T21:08:26.100Z"
    editedAt: "2017-02-02T21:08:56.931Z"
    v: 4
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58939f80fba5bfea06bfffba"
    text: {no I don't want number! I want to match the number 1 exactly or any number exactly}
    sent: "2017-02-02T21:07:12.935Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58939e802ff29dec066d1fe5"
    text: "Sorry.. On mobile"
    sent: "2017-02-02T21:02:56.819Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58939e7f2ff29dec066d1fe2"
    text: "Use `number!` or if you want one, the character "
    sent: "2017-02-02T21:02:55.833Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58939e21c0f28dd86278b9d4"
    text: "Number of items "
    sent: "2017-02-02T21:01:21.794Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58939e12c0f28dd86278b8f3"
    text: "1 is special in parse dialect "
    sent: "2017-02-02T21:01:06.874Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58939dd64c04e9a44e62df3f"
    text: {Thanks for the answers, another question:  I was not able to find a way to parse numbers directly:^/```^/parse [1] [1]^/```^/Is there some documentation/help regarding this?}
    sent: "2017-02-02T21:00:06.702Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58938472c0f28dd86278130f"
    text: {What are the alternative languages, and what do they offer in comparison? As a tool for thinking, that is easy to get started with (in so many ways), but not limiting, it's hard to beat. If you are up against Java or JS as a vocational training type tool, it will be a tough sell.}
    sent: "2017-02-02T19:11:46.596Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "589383e3fba5bfea06bf5aad"
    text: {@JacobGood1,  David Matuszek used Rebol in his curriculum at UPenn and should have practical advice. See https://www.cis.upenn.edu/~matuszek/. Rebol's heritage comes partly from Logo, which is perhaps the most well-known programming language used to teach. It depends on what level and what your goals are. Certainly Mindstorms, et al, are ammunition to sell the concept. If you're doing university level work, Brian Harvey's 'Computer Science Logo Style' 3-volume series is a classic.}
    sent: "2017-02-02T19:09:23.870Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589380ed2ff29dec066c734e"
    text: {and it's a chance for students to participate in open-source development (Red is still in alpha) ;)}
    sent: "2017-02-02T18:56:45.278Z"
    editedAt: "2017-02-02T18:57:04.386Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "589380cb1e4d4bd962c8049b"
    text: {@JacobGood1 I'd say easy GUI and graphics programming, multiparadigm, simple basic data structures (series, blocks, kinda reminds me on lisp lists elegance), multiplatform, full-stack (both low-level tinkering and high-level stuff)}
    sent: "2017-02-02T18:56:11.385Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "589356031e4d4bd962c6d3bb"
    text: {Hello again everyone.  I am potentially picking up a teaching job soon. I am going to try and sell Red as a teaching language, do y'all have any good selling points for me to include? I already feel like I have a good strategy but I still want some input.}
    sent: "2017-02-02T15:53:39.480Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5892e858c0f28dd8627433c5"
    text: "Excellent example @endo64."
    sent: "2017-02-02T08:05:44.349Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5892dfa7dcb66e4f76deac01"
    text: {@gltewalt, there is some explanation of definitional scoping on this [Stack Overflow question](http://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red)}
    sent: "2017-02-02T07:28:39.427Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5892dda6fba5bfea06bb7fb0"
    text: "@endo64 that is a really nice, terse example!"
    sent: "2017-02-02T07:20:06.424Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5892d7fb5309d6b3589a1e9c"
    text: {Once this example made me understand "words carry their binding with them":^/```^/a: 1^/o: object [a: 2]^/p: object [a: 3]^/append b: [] reduce [^/^-'a^/^-in o 'a^/^-in p 'a^/]^/probe b    ; == [a a a]^/reduce b  ; == [1 2 3]^/```}
    sent: "2017-02-02T06:55:55.703Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58922874fba5bfea06b7d9bf"
    text: {This design can be, and is, used to simulate scoping in Red.}
    sent: "2017-02-01T18:27:00.096Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589228462ff29dec06650475"
    text: {@gltewalt , there are various ways it can be explained. If you really want to understand it at the core, the implementation is your guide, but that may be a bit much right now. If you want, you can look in %red/runtime/datatypes/ at %word.reds and %structures.reds. You'll see that a context contains a symbol table and words know their context and contain an index into the symbol table. So not quite a simple key:value pair.^/^/At a higher level, just know that you can `bind` words to contexts and when you evaluate (e.g. `get`) a word, the context determines the value you'll get. And because words carry their binding with them, you can re-bind them and have a mix of words with different bindings in a given "location".}
    sent: "2017-02-01T18:26:14.754Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5891943096a565f8440aec5a"
    text: "Closures are possible."
    sent: "2017-02-01T07:54:24.020Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58912fad4c04e9a44e55c80f"
    text: {Or optionally have the pointer to the key/value pair?}
    sent: "2017-02-01T00:45:33.973Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58912f3ce836bf7010b70c36"
    text: {Words are atoms that have a pointer to a key:value pair, where the key is the atoms value (itself), and the value is the scope (or binding) where it can be found?^/^/Is that even close? lol}
    sent: "2017-02-01T00:43:40.404Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589128b82ff29dec065f9ce1"
    text: {Is there somewhere that has a good explanation of definitional scoping?^/are closures not possible ?}
    sent: "2017-02-01T00:15:52.459Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5891262f1e4d4bd962bad68d"
    text: "That's normal. :^^)"
    sent: "2017-02-01T00:05:03.337Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589125acdcb66e4f76d61d82"
    text: "I read a bit about it. Still confused though. "
    sent: "2017-02-01T00:02:52.942Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589124881e4d4bd962bacdaa"
    text: {Rebol has a lot of things designed to make it appear friendly, for those used to other languages. *Definitional scoping* is generally how it's described in Redbol langs.}
    sent: "2017-01-31T23:58:00.608Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58910a00dcb66e4f76d58f27"
    text: {Hmmm... I just found out that rebol/red has no scope, per say. ^/I've been dabbling with rebol this whole time with the idea that things were (generally) globally scoped.   :worried: }
    sent: "2017-01-31T22:04:48.698Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589100af1e4d4bd962b9f639"
    text: {Sorry to inflict JavaScript on the masses but it's the last thing I read on curry}
    sent: "2017-01-31T21:25:03.055Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5890ffeadcb66e4f76d5559d"
    text: {I couldn't say 100%. ^/I understand it conceptually like this JavaScript example:^/^/http://kevvv.in/currying-in-javascript/}
    sent: "2017-01-31T21:21:46.635Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5890ffa2dcb66e4f76d55347"
    text: {And where `specialize` is a very simple example of metaprogramming, if you look at how it uses `parse` to analyze and modify the body of the template function, you can see how that approach could do more advanced work, finding complex patterns in code or data and rewriting them.}
    sent: "2017-01-31T21:20:34.267Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5890ff22e836bf7010b614ec"
    text: {It's not currying or partial application in this case, though we can reason about it in how it relates to them. With currying or partial application, you are binding args to an existing function, correct, and quite often delegating to them? What `specialize` does is to create a whole new function, using the original as a template. }
    sent: "2017-01-31T21:18:26.165Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58909921fba5bfea06aeba77"
    text: {Yep looks like currying to my simple brain, but his comment directly afterward seems to indicate that he doesn't think it is}
    sent: "2017-01-31T14:03:13.627Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589084c12ff29dec065b96f9"
    text: {@gltewalt :point_left: [August 8, 2016 10:12 AM](https://gitter.im/red/red?at=57a814cefb162b752ca71ec0) here is the `specialize`}
    sent: "2017-01-31T12:36:17.222Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589083f34c04e9a44e51bba7"
    text: {Doc once showed me a `specialize` function. Rebol has that feel of malleability to me }
    sent: "2017-01-31T12:32:51.208Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "589083965309d6b3588da67a"
    text: "I don't believe it is incompatible"
    sent: "2017-01-31T12:31:18.613Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58908381e836bf7010b331a0"
    text: {@gltewalt I think you mean things like Haskell; and others such as built on a theory of SKI combinators calculus?}
    sent: "2017-01-31T12:30:57.864Z"
    editedAt: "2017-01-31T12:36:53.969Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "588fc4e1c0f28dd86262ba3c"
    text: {There are languages that are actually single arity and use partial application. Is that a route that is incompatible with redbol languages?}
    sent: "2017-01-30T22:57:37.306Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588fad45e836bf7010af2f81"
    text: {@gltewalt, this is an example of why Redbol languages are fun and hard to outgrow. :^^)}
    sent: "2017-01-30T21:16:53.767Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588face51e4d4bd962b26fb3"
    text: {All doable of course. I have `arity-of` and `refinement-names` funcs, but haven't pushed things forward because I haven't needed them yet, and want to see what Doc's general HOF thoughts are, and his take on `apply`. It wasn't terribly friendly in Rebol, in the name of efficiency.}
    sent: "2017-01-30T21:15:17.898Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588fac3f1e4d4bd962b26b74"
    text: {A primary goal for a func like `do-refined` is easier propagation of refinements. Wrapping funcs that take refinements leads to a lot of extra code in R2. One catch we still have is easily mapping same-named refinements. They are logic values in the called func, which we then need to map back to refinement values to propagate this way.}
    sent: "2017-01-30T21:12:31.084Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588faa3c4c04e9a44e4d9969"
    text: {```^/refine: function [^/^-"Returns a path, by adding refinement(s) to a word or path."^/^-path [any-word! path!]^/^-refs [word! block!] "Refinements to add"^/^-return: [path!]^/][^/^-if block? refs [^/^-    ; Separate copy step because `remove-each` doesn't return^/^-    ; a value at this time.^/^-    refs: copy refs^/^-    remove-each val refs [not any-word? val]^/    ]^-^/^-to-path compose [(path) (refs)]^/]^/```}
    sent: "2017-01-30T21:03:56.815Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588fa9674c04e9a44e4d9342"
    text: {Bah! Deleted wrong message. Anyway, fix coming for `refine`.}
    sent: "2017-01-30T21:00:23.417Z"
    editedAt: "2017-01-30T21:01:03.514Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588fa9144c04e9a44e4d9143"
    text: "🤔 :+1: "
    sent: "2017-01-30T20:59:00.469Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f891561e516c15792ba9f"
    text: "@greggirwin Nice!"
    sent: "2017-01-30T18:42:29.143Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "588f82345309d6b358888b11"
    text: {Looks like the standard `to-path` does what the comment in my func works around. If you have refinements in the spec, the sigil gets doubled.}
    sent: "2017-01-30T18:13:08.388Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588f81af2ff29dec065655a1"
    text: {I have another version of `do-refined` with a different interface `[fn [word!] args [block!]]`, which was my first thought, but I like the way version reads at the call site better.}
    sent: "2017-01-30T18:10:55.620Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588f80a95309d6b3588880d3"
    text: {I included `to-path` here, which I wrote before it was standard in Red. I need to rename it now, we need to compare the standard version. The standard version doesn't work with this version of `do-refined`. }
    sent: "2017-01-30T18:06:33.648Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588f80401e4d4bd962b15513"
    text: {```^/filter: function [^/^-"Returns two blocks: items that pass the test, and those that don't."^/^-series [series!]^/^-test [any-function!] "Test (predicate) to perform on each value; must take one arg"^/^-/only "Return a single block of values that pass the test"^/][^/^-result: reduce [copy [] copy []]^/^-foreach value series [^/^-^-append/only pick result make logic! test :value :value^/^-]^/^-either only [result/1][result]^/]^/^/to-path: func [spec][^/^-; LOAD FORM is used to clean up specs that have refinements ^/^-; in them. Refinement values get their sigil doubled, which^/^-; FORM removes, so they are sanitized. More overhead, but we^/^-; could make that optional if this func lives on.^/^-load form append clear '_/_ spec^/]^/^/refine: function [^/^-"Returns a path, by adding refinement(s) to a word or path."^/^-path [any-word! path!]^/^-refs [word! block!] "Refinements to add"^/^-return: [path!]^/][^/^-refs: copy refs^/^-remove-each val refs [not any-word? val]^/^-to-path compose [(path) (refs)]^/]^/p: refine 'append [only]^/refine 'append [only]^/do reduce [ refine 'append [only] [] [a]]^/refine 'find [part only case same any with skip last reverse tail match]^/^/do-refined: func [spec [block!] args [block!]][^/^-; Filter to split args into refinements and arg values^/^-set [refs args] filter args :refinement?^/^-; Make refined path^/^-spec/1: refine spec/1 refs^/^-do compose [(spec) (args)]^/]^/do-refined [append [] [a]] [/only]^/do-refined [append [] [a]] [/only /dup 3]^/do-refined [append [] [a]] [/dup /only 3]^/do-refined [append [] [a]] [/dup 3 /only]^/do-refined [append [] [a]] [/dup 3 /only]^/do-refined [append/only [] [a]] []^/do-refined [append/only [] [a]] [/dup 3]^/```}
    sent: "2017-01-30T18:04:48.058Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588f06392ff29dec065354d5"
    text: {```^/red>> rejoin [to-path 'fun 'refa 'refb :other]^/== fun/refa/refb/unset^/```}
    sent: "2017-01-30T09:24:09.005Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f0616dcb66e4f76ca2554"
    text: "@DideC thanks, that's helpful too!"
    sent: "2017-01-30T09:23:34.914Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f04f5dcb66e4f76ca1ee8"
    text: {```^/red>> ref: 'time^/== time^/red>> do probe rejoin [to-path 'now :ref]^/now/time^/== 10:17:53^/```^/}
    sent: "2017-01-30T09:18:45.381Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "588f0483fba5bfea06a6031f"
    text: "I see.."
    sent: "2017-01-30T09:16:51.338Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f042661e516c15792a8cc"
    text: {```^/c> series? 'a/b/c^/== true^/c> length? 'a/b/c^/== 3^/```}
    sent: "2017-01-30T09:15:18.803Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "588f03fe61e516c15792a8ca"
    text: "It’s because `path!` is `series!`"
    sent: "2017-01-30T09:14:38.489Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "588f03c7fba5bfea06a5fd0d"
    text: {I wonder why `to-block` gives the same as `append` by removing the `/`}
    sent: "2017-01-30T09:13:43.580Z"
    editedAt: "2017-01-30T09:14:33.101Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "588f0343c0f28dd8625e152a"
    text: "@rebolek thanks!"
    sent: "2017-01-30T09:11:31.546Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f0329db9cafe9183e3add"
    text: "`append/only`"
    sent: "2017-01-30T09:11:05.457Z"
    editedAt: "2017-01-30T09:11:14.952Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "588f03284c04e9a44e49aa8d"
    text: "`to-block test` gives the same"
    sent: "2017-01-30T09:11:04.452Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f02f45309d6b35885785a"
    text: {Haven't figured out how to convert or add a `path!` to a `block!`:^/```^/red>> append [] test^/== [now time]^/```}
    sent: "2017-01-30T09:10:12.240Z"
    editedAt: "2017-01-30T09:10:46.817Z"
    v: 2
    author: "569c37abe610378809bccdff"
)#(
    id: "588f028fc0f28dd8625e10ee"
    text: {```^/red>> type? test^/== path!^/```}
    sent: "2017-01-30T09:08:31.781Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f0277e836bf7010ab0d58"
    text: {I can do this:^/```^/red>> test: load append copy {now/} 'time^/== now/time^/```}
    sent: "2017-01-30T09:08:07.504Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f0253dcb66e4f76ca0cfe"
    text: {I think I can use `attempt`, but it requires a `block!` e.g.^/```^/red>> attempt [now]^/== none^/```}
    sent: "2017-01-30T09:07:31.990Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f01e85309d6b358857337"
    text: {@DideC yes, sorry. I was trying to get it work on any `function!` and `refinement!` in general, `now` was useful in that it gave me that error}
    sent: "2017-01-30T09:05:44.327Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588f01762ff29dec0653371e"
    text: {@geekyi  on't forget that `now` is not fully implemented: only time! values for now.^/So `now/date`, `now/year`... will give you this kind of error!}
    sent: "2017-01-30T09:03:50.620Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "588ef7a24c04e9a44e496858"
    text: {To iterate through the different cases and `do` those}
    sent: "2017-01-30T08:21:54.928Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588ef7885309d6b35885344c"
    text: {I think my problem here is how to best create `words!` with `refinements!` in them}
    sent: "2017-01-30T08:21:28.639Z"
    editedAt: "2017-01-30T08:22:13.756Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "588ef6865309d6b358852e01"
    text: {Ok, this kinda works:^/```^/>> foreach ref refs [print [ref do append copy {now/} ref]]^/```^/```^/*** Internal Error: reserved for future use (or not yet implemented)^/*** Where: now^/```}
    sent: "2017-01-30T08:17:10.670Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588ef555e836bf7010aabd23"
    text: {Copying `source` of `join` from R2 to Red gives another error:^/```^/*** Script Error: reduce does not allow string! for its /into argument^/```}
    sent: "2017-01-30T08:12:05.808Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588ef52e4c04e9a44e495aa9"
    text: {It gives error: `*** Script Error: join has no value`}
    sent: "2017-01-30T08:11:26.845Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588ef432e836bf7010aab27a"
    text: "Trying to make it work with red. Any pointers?"
    sent: "2017-01-30T08:07:14.234Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588ef3c7e836bf7010aab0a5"
    text: {Then in Rebol2 this works:^/```^/>> foreach ref refs [print [ref do join join 'now {/} ref]]^/```^/```^/year 2017^/month 1^/day 30^/[..]^/```}
    sent: "2017-01-30T08:05:27.449Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588ef1f5e836bf7010aaa612"
    text: {```lisp^/refs: parse spec-of :now [string! collect some [keep refinement! string!] to end]^/```^/```^/== [^/    /year ^/    /month ^/    /day ^/    /time ^/    /zone ^/    /date ^/    /weekday ^/    /yearday ^/    /precise ^/    /utc^/]^/```}
    sent: "2017-01-30T07:57:41.878Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58860f8acbcb281770a6536f"
    text: {this R2 version works in Red too^/^/numbers: charset [#"0" - #"9"]^/chars: complement numbers^/string: "abcd123efgh456sd"^/collect [parse string [any chars copy n some numbers (keep n)]]^/^/}
    sent: "2017-01-23T14:13:30.349Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "5885ef72dcb66e4f769c7562"
    text: {But this doesn't work yet in Red, related issue is #2308}
    sent: "2017-01-23T11:56:34.578Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5885ef3bcbcb281770a5a7fc"
    text: {You could do in R2 (possible R3 too) as follow:^/```^/s: "abc123def456ghi"^/copy/part pos: find s digit find  pos complement digit^/```}
    sent: "2017-01-23T11:55:39.049Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "588500a5e836bf7010793fa6"
    text: {@rebolek Great!^/I removed `some` that does not seem to do anything.}
    sent: "2017-01-22T18:57:41.434Z"
    editedAt: "2017-01-22T19:01:14.610Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884fd0461e516c15791d0d9"
    text: {```^/>> string: "abc123def456ghi"^/== "abc123def456ghi"^/>> value: copy "" parse string [some [[copy char some numbers (append value char) to end] | skip]]^/== true^/>> value^/== "123"^/```}
    sent: "2017-01-22T18:42:12.340Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884fcfe96a565f84409cb4a"
    text: {@OneArb I see, Just ignore the rest after first successful match:}
    sent: "2017-01-22T18:42:06.676Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884fc5c300f220a661cff6e"
    text: {@rebolek I attempt to "extract the first digit sequence from a string"^/^/I am now getting all the digits.^/^/I attempt `first parse string non-digit`^/^/I try figure how to create `non-digit` a delimiter set containing all characters but digits.}
    sent: "2017-01-22T18:39:24.785Z"
    editedAt: "2017-01-22T18:41:00.552Z"
    v: 3
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884f501d43728124e8d934f"
    text: {@geekyi I can get in the habit of double-checking R2 code in Red just in case.}
    sent: "2017-01-22T18:08:01.405Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884f3bbcbcb281770a126aa"
    text: "Also trying red and reporting bugs is helpful"
    sent: "2017-01-22T18:02:35.283Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5884f393e836bf701078ff42"
    text: "@OneArb yes I think that's a good idea"
    sent: "2017-01-22T18:01:55.124Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5884f31cdcb66e4f7697a86d"
    text: {I agree my hypothesis is shooting in the dark which is what an hypothesis is for?^/^/I did try Red/View until I realized Linux Red VID is in planning stage.}
    sent: "2017-01-22T17:59:56.218Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884f22edb9cafe9183d5e3b"
    text: {Btw, have you tried GTK branch of Red? There is some support for VID already (but I don’t know the state of it, never tried it myself yet).}
    sent: "2017-01-22T17:55:58.733Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884f20296a565f84409ca8d"
    text: "Oh! :-D"
    sent: "2017-01-22T17:55:14.157Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884f1f5e836bf701078f8f3"
    text: "I meant VID"
    sent: "2017-01-22T17:55:01.831Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884f181d99b1dd03d30f048"
    text: {Sorry for my ignorance, but I don’t know what Linux VDI is. Anyway, for the R2 vs R3: Red may be R2 based but it incorporates some of the R3 improvements, like parse enhancements or additional datatypes (vector!, ...)}
    sent: "2017-01-22T17:53:05.185Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884f0d2d43728124e8d807a"
    text: {@rebolek I need Linux VDI^/My intent: minimize migrate to Red^/My current hypothesis: Red language set support  greater for R2 than R3}
    sent: "2017-01-22T17:50:10.213Z"
    editedAt: "2017-01-22T17:50:56.857Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884ec35db9cafe9183d5ddc"
    text: {There are many great things about R3 and I was using it for few years, so I think it IS usable.}
    sent: "2017-01-22T17:30:29.284Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884ec18d99b1dd03d30efd3"
    text: {@OneArb I am not sure I understand why you can’t use Red. Anyway the difference between R2 and R3 is that R2 is finished and R3 not, it is alpha also as Red (but Red is under development and R3 is not).}
    sent: "2017-01-22T17:30:00.703Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884eb6211e7a7f61dcd812a"
    text: {@geekyi Unless otherwise guidance, R2 develop while testing non VDI code on Red seems the best course of action.^/@rebolek Thanks for the help!}
    sent: "2017-01-22T17:26:58.657Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884e871519afee26b9a9ecb"
    text: {Till Linux VDI, I opted for R2.^/^/Any views on R2 vs. R3 code base to minimize port on Red?}
    sent: "2017-01-22T17:14:25.686Z"
    editedAt: "2017-01-22T17:14:40.663Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884e731db9cafe9183d5d97"
    text: {R2 is oldest so does not support lot of newer parse improvements.}
    sent: "2017-01-22T17:09:05.765Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884e71796a565f84409c9d2"
    text: {Second version (to numbers...) should work in R3 IMO}
    sent: "2017-01-22T17:08:39.530Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884e70396a565f84409c9d0"
    text: {collect/keep are Red additions to Parse, not found in Rebol.}
    sent: "2017-01-22T17:08:19.451Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884e6bfdcb66e4f769770d3"
    text: {Great, got it to work!^/^/Any idea why the first try only works in Red ?}
    sent: "2017-01-22T17:07:11.777Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884e6b0300f220a661ca325"
    text: {@OneArb since Red is mostly compatible with R2, but adds features, I think R2 is backwards compatible, but Red isn't forwards compat}
    sent: "2017-01-22T17:06:56.497Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5884e485db9cafe9183d5d4f"
    text: {@OneArb ^/```^/>> value: copy "" parse string [some [[copy char numbers (append value char)] | skip]]^/== true^/>> value^/== "123"^/```}
    sent: "2017-01-22T16:57:41.456Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884e38296a565f84409c975"
    text: "Let me try something else."
    sent: "2017-01-22T16:53:22.618Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884e376d99b1dd03d30ef21"
    text: {Oh., I haven’t tried it under R2, I just thought it should work}
    sent: "2017-01-22T16:53:10.782Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884e166300f220a661c8770"
    text: {In R2 I get ^/```^/>> parse string [to numbers copy value some numbers]^/** Script Error: Invalid argument: make bitset! #{^/000000000000FF03000000000000000000000000000000000000000000000000^/}^/** Where: action^/** Near: parse string [to numbers copy value some numbers]^/```}
    sent: "2017-01-22T16:44:22.116Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884de93cbcb281770a0c3c8"
    text: "My first shot was^/^/first parse string non-digit"
    sent: "2017-01-22T16:32:19.420Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884ddebdb9cafe9183d5c9c"
    text: "Most R2 code should fine."
    sent: "2017-01-22T16:29:31.310Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884ddbe074f7be763024ec3"
    text: {Can I expect a lot of rewrite or most R2 code will still be good?}
    sent: "2017-01-22T16:28:46.970Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884dd75d99b1dd03d30eeb4"
    text: {For R2 (works in Red also) you need to use some temporary word:^/```^/c> parse string [to numbers copy value some numbers]^/== false^/c> value^/== "123"^/```}
    sent: "2017-01-22T16:27:33.850Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884dd32e836bf7010789740"
    text: {Thanks, works in Red.^/^/I need the Linux VDI so I develop in R2 right now.}
    sent: "2017-01-22T16:26:26.812Z"
    editedAt: "2017-01-22T16:28:33.766Z"
    v: 3
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5884daf1d99b1dd03d30ee93"
    text: {for example:^/```^/c> numbers: charset [#"0" - #"9"]^/== make bitset! #{000000000000FFC0}^/c> string: "abcd123efgh"^/== "abcd123efgh"^/c> parse string [collect [to numbers keep some numbers]]^/== ["123"]^/```}
    sent: "2017-01-22T16:16:49.132Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884dae0d99b1dd03d30ee91"
    text: "Hi"
    sent: "2017-01-22T16:16:32.155Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5884da26dcb66e4f769731ab"
    text: {Hi all,^/^/How can I extract the first digit sequence from a string?}
    sent: "2017-01-22T16:13:26.531Z"
    editedAt: "2017-01-22T16:13:46.553Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
)#(
    id: "5883e30e519afee26b96aafc"
    text: {Ah it already does when use &. So is it possible to set a different shortcut key for a menu item, like CTRL-O for File/Open ?}
    sent: "2017-01-21T22:39:10.033Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5883e281d43728124e88ffcf"
    text: {Is it possible to set shortcut keys for menu items? As we do in VB6  like `&File` makes F key a shortcut to file menu.}
    sent: "2017-01-21T22:36:49.257Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "587fc0d3873d96e16d85c666"
    text: {The R2 `query` func was useful for finding new words your code added to the system. Combined with an include system, you could track what words each file or module added to the system, rather than just seeing what functions are defined in them. Hmmmm.}
    sent: "2017-01-18T19:24:03.568Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "587fc02fcbcb28177087f3a8"
    text: {I did a Smalltalk-like system browser for R2 a *long* time ago. And the R2 Word Browser reblet, along with the other active doc style reblets, could be modified as an XRef tool.}
    sent: "2017-01-18T19:21:19.085Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "587f5e23873d96e16d8338c5"
    text: {That is more or less, what I'm looking for. Thanks}
    sent: "2017-01-18T12:22:59.717Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f5ca1074f7be763e6d024"
    text: "Sorry @dockimbel "
    sent: "2017-01-18T12:16:33.688Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f5c8acbcb2817708550b0"
    text: {:point_up: [January 18, 2017 5:06 PM](https://gitter.im/red/help?at=587f5a606c1635643c4458cd) actually works}
    sent: "2017-01-18T12:16:10.278Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f5c3411e7a7f61db03878"
    text: "Desktop Librarian is very useful :smile: "
    sent: "2017-01-18T12:14:44.177Z"
    editedAt: "2017-01-18T12:15:04.566Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "587f5c2511e7a7f61db03827"
    text: "Yeah, that is exactly what I'm trying"
    sent: "2017-01-18T12:14:29.275Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f5c0d11e7a7f61db03807"
    text: "Hmm, I get the same error as you..."
    sent: "2017-01-18T12:14:05.633Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587f5bf811e7a7f61db037c8"
    text: {@geekyi Try this other source: http://www.rebol.org/view-script.r?script=anamonitor.r^/}
    sent: "2017-01-18T12:13:44.007Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587f5ba911e7a7f61db0358d"
    text: {I get an error when running it tho:^/```^/** Script Error: length? expected series argument of type: series port tuple bitset struct^/** Where: rejoin^/** Near: length? first :x "] " mold^/>>^/```}
    sent: "2017-01-18T12:12:25.427Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f5b75cbcb28177085492e"
    text: "@dockimbel interesting"
    sent: "2017-01-18T12:11:33.768Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f5a606c1635643c4458cd"
    text: {@geekyi I'm not aware of any tool like that in Redbol world. Should not be too hard to code though. OTOH, they are some tools to browse the code once loaded, like [Anamonitor](http://rebol2.blogspot.sg/2011/11/anamonitor-2-check-block-contents.html).}
    sent: "2017-01-18T12:06:56.270Z"
    editedAt: "2017-01-18T12:08:17.999Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587f5a1e300f220a66013ce1"
    text: {http://cleitonbueno.com/wp-content/uploads/2015/03/pydoc_server_serial_info_cleitonbueno.com_.png}
    sent: "2017-01-18T12:05:50.027Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f59cfcbcb281770853fdd"
    text: {Python has a built-in example of what I want: `pydoc`}
    sent: "2017-01-18T12:04:31.374Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f599edcb66e4f767ad9b1"
    text: {Usecase: you have some red code repository and you want to quickly check out how the code is organized}
    sent: "2017-01-18T12:03:42.078Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587f5968e836bf70105c01c6"
    text: {Is there something like a *code browser* for Redbol?}
    sent: "2017-01-18T12:02:48.257Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587d8f93dec171b811fa44ce"
    text: "Alan, wow! You've done a lot! Thanks for that."
    sent: "2017-01-17T03:29:23.737Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "587d73a711e7a7f61da5e813"
    text: "Yes, of course, I have to agree."
    sent: "2017-01-17T01:30:15.150Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "587d3f4511e7a7f61da4e454"
    text: {Some simple functions are very nice for convenience, and serve as an example of creating a clear vocabulary that aids understanding and expressing intent.}
    sent: "2017-01-16T21:46:45.094Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "587be264873d96e16d70c06b"
    text: "but why would one"
    sent: "2017-01-15T20:58:12.503Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587be259dec171b811f202bf"
    text: {well, it is possible to do everything in Turing machine}
    sent: "2017-01-15T20:58:01.159Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587be1e3873d96e16d70be74"
    text: "it is posibe to live without take though "
    sent: "2017-01-15T20:56:03.887Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "587be160cbcb28177072db14"
    text: {but I would argue to have more words in the same way we have shortcuts etc}
    sent: "2017-01-15T20:53:52.079Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587be141074f7be763d50f17"
    text: {well, two can be combined with refinement to switch between return values}
    sent: "2017-01-15T20:53:21.934Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587be05c61e516c157910f78"
    text: {also `take s` can be written as `also first s remove s`}
    sent: "2017-01-15T20:49:32.372Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587be00d6c1635643c31d9db"
    text: "Yes, that it exactly"
    sent: "2017-01-15T20:48:13.724Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "587bdfc7db9cafe9183c9756"
    text: {The basic difference is that `remove` returns series after removed value and `take` returns removed value.}
    sent: "2017-01-15T20:47:03.031Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587bdf556c1635643c31d4ed"
    text: {Thanks @redredwine  They are similar:  'remove' will remove a value from a series, and 'take' will also do the same, but 'take' will also retain what has been taken.^/s: "abcd"^/r: remove s ^/;;r and s are now the same^/^/s: "abcd"^/t: take s^/;;t now holds whats gone from s}
    sent: "2017-01-15T20:45:09.236Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "587bbf1b11e7a7f61d9d0c1c"
    text: {@redredwine well, one returns the series, another - removed elements}
    sent: "2017-01-15T18:27:39.912Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587bbbb2300f220a66eee0bf"
    text: {general question -  looks like   "take"   and  "remove"  are two commands that do  almost the same thing,   is there any reason why they are both there ?}
    sent: "2017-01-15T18:13:06.843Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "587bb73ccbcb2817707202e5"
    text: {@virtualAlan  -    great  work.  very helpful for newcomers to learning Red. }
    sent: "2017-01-15T17:54:04.323Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "5878e974300f220a66e30cc6"
    text: "Nice work!"
    sent: "2017-01-13T14:51:32.745Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58789abfdec171b811e34d02"
    text: "@virtualAlan very nice :+1: "
    sent: "2017-01-13T09:15:43.251Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587828b1cbcb28177061d8ce"
    text: {might be helpful: I update it weekly:  http://www.mycode4fun.co.uk/red-beginners-reference-guide  -  also adding new examples here:     http://www.mycode4fun.co.uk/About-Red-Programming  -  my site seems to be all about Red just lately.}
    sent: "2017-01-13T01:09:05.348Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "586d47fc058ca96737cac632"
    text: {@lajunta , as @geekyi  says I/O is basic in Red right now. If you can use HTTP for now, that should work. The GUI system, while VID is extended from Rebol, is also based on native widgets, where Rebol used its own, so capabilities of each widget are constrained by that right now.}
    sent: "2017-01-04T19:07:40.024Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586c96169d4cc4fc5373dbef"
    text: "OK @geekyi "
    sent: "2017-01-04T06:28:38.642Z"
    v: 1
    author: "5770a5e3c2f0db084a2014cf"
) #(
    id: "586c95e5c02c1a3959e58827"
    text: {@lajunta I'd recommend to get started with rebol2 if you're completely new to it}
    sent: "2017-01-04T06:27:49.350Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c95dbaa6be0472f056104"
    text: "Yeah😊"
    sent: "2017-01-04T06:27:39.234Z"
    v: 1
    author: "5770a5e3c2f0db084a2014cf"
) #(
    id: "586c95bec895451b7552bf8a"
    text: "You won't lose anything by learning rebol2 ;)"
    sent: "2017-01-04T06:27:10.657Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c95aa9d4cc4fc5373db29"
    text: {@geekyi Thanks for your help , I  will look at cheyenne web server and gitter .}
    sent: "2017-01-04T06:26:50.814Z"
    v: 1
    author: "5770a5e3c2f0db084a2014cf"
) #(
    id: "586c95747a3f79ef5dd3aa15"
    text: {@lajunta  red is still very alpha. Rebol2 works as a substitute in the meantime. The syntax is very similiar, and the documentation relevant too}
    sent: "2017-01-04T06:25:56.949Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c9408058ca96737c6784b"
    text: {yes ,  I just use Red for two day,  perhaps I should change my server side to use http }
    sent: "2017-01-04T06:19:52.809Z"
    v: 1
    author: "5770a5e3c2f0db084a2014cf"
) #(
    id: "586c93e5c895451b7552ba46"
    text: "(a gitter client)"
    sent: "2017-01-04T06:19:17.712Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c93c3c02c1a3959e57fad"
    text: {See [gritter](https://github.com/rebolek/gritter) for an example app written in red}
    sent: "2017-01-04T06:18:43.475Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c937a7a3f79ef5dd3a27c"
    text: { @lajunta I think you may be able to use `read` and `write` that already exists in red for that (at least for simple http)}
    sent: "2017-01-04T06:17:30.973Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c92bc7a3f79ef5dd39f3c"
    text: {@lajunta I sometimes use [cheyenne web server](http://cheyenne-server.org/download.shtml), from the same author of that as Red. Are you new to red and rebol?}
    sent: "2017-01-04T06:14:20.814Z"
    editedAt: "2017-01-04T06:15:13.655Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "586c9266af6b364a292b1b20"
    text: {@geekyi I  just want to make a simple client-server  app that send some simple text directives between client and server.}
    sent: "2017-01-04T06:12:54.287Z"
    v: 1
    author: "5770a5e3c2f0db084a2014cf"
) #(
    id: "586c85b49e6f00e74af43479"
    text: {I'm curious what you're trying to do, port code from rebol to red? In general, if it doesn't work in red, that means not implemented yet. But check that roadmap}
    sent: "2017-01-04T05:18:44.554Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "586c85797a3f79ef5dd35f83"
    text: {@lajunta In particular, this [trello card](https://trello.com/c/BW1SPeOU) linked from that page answer your question? ;)}
    sent: "2017-01-04T05:17:45.977Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c82de058ca96737c62f04"
    text: {DId you check the [roadmap](http://www.red-lang.org/p/roadmap.html)?}
    sent: "2017-01-04T05:06:38.016Z"
    editedAt: "2017-01-04T05:08:01.482Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "586c82d3058ca96737c62ed5"
    text: "@lajunta I think red io is very basic right now"
    sent: "2017-01-04T05:06:27.109Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c808b058ca96737c62561"
    text: {@geekyi  Red also does't have open method to connect a socket server,do you know some tutorials about socket programming with Red?}
    sent: "2017-01-04T04:56:43.512Z"
    v: 1
    author: "5770a5e3c2f0db084a2014cf"
) #(
    id: "586c7f53c895451b7552677e"
    text: "Yes"
    sent: "2017-01-04T04:51:31.202Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c7f46058ca96737c62045"
    text: {@geekyi  Red version field does't have options [hide-input: true] like Rebol }
    sent: "2017-01-04T04:51:18.170Z"
    v: 1
    author: "5770a5e3c2f0db084a2014cf"
) #(
    id: "586c7ae39e6f00e74af40c3e"
    text: {@lajunta see also the [Rebol](http://stackoverflow.com/questions/17868021/rebol-3-how-to-create-a-password-text-field-circles-or-stars-instead-of-text) method}
    sent: "2017-01-04T04:32:35.053Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c7ace9e6f00e74af40c08"
    text: {@geekyi ok, I would change field text color with the same color of background to solve my problem temporarily.}
    sent: "2017-01-04T04:32:14.721Z"
    v: 1
    author: "5770a5e3c2f0db084a2014cf"
) #(
    id: "586c783daa6be0472f04e609"
    text: {@lajunta not that I know of.  [This](https://doc.red-lang.org/gui/Overview.html) is the official documentation}
    sent: "2017-01-04T04:21:17.797Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586c67beaf6b364a292a7af1"
    text: "Is there a password field?"
    sent: "2017-01-04T03:10:54.802Z"
    v: 1
    author: "5770a5e3c2f0db084a2014cf"
) #(
    id: "586ac432058ca96737bcc122"
    text: {@meijeru, In R2 `system/script/args` is a raw string, as it comes from the OS. `system/options/args` is a block of strings where that string is split at spaces. Not the most intuitive design, but I understand the rationale.}
    sent: "2017-01-02T21:20:50.925Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586ac203c895451b754a22b3"
    text: {@maximvl, more than 100 lines, but look what it *does*!}
    sent: "2017-01-02T21:11:31.441Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586ac133c02c1a3959dd3d58"
    text: {:point_up: [December 30, 2016 2:38 PM](https://gitter.im/red/help?at=5866d3cbaf6b364a29130e36) @geekyi, yes, we already did that one. ;^^)}
    sent: "2017-01-02T21:08:03.500Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586a7f9daa6be0472ffa99c1"
    text: {I checked the toolchain source (using my grep utility) and I cannot find any assignment to `system/script/args`except `none`. BTW I am confused about `system/options/args`-- what is its relation to the other one?}
    sent: "2017-01-02T16:28:13.531Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "586a7e4f96a565f844075e88"
    text: "IIRC it’s not implemented yet."
    sent: "2017-01-02T16:22:39.363Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "586a7a05058ca96737bb2512"
    text: {hm, true, I'm not sure if the place is wrong or it's not implemented yet}
    sent: "2017-01-02T16:04:21.173Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586a753c9d4cc4fc5369f786"
    text: {@maximvl it doesn't work for some reason:)). Perhaps, I use it incorrectly: it always returns none.}
    sent: "2017-01-02T15:43:56.535Z"
    editedAt: "2017-01-02T15:49:30.398Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "586a6f7f7a3f79ef5dc95a0c"
    text: "@ifgem `system/script/args` should be it"
    sent: "2017-01-02T15:19:27.516Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586a6f3e058ca96737baeb0b"
    text: {@dockimbel how can I get list of command line arguments in Red?}
    sent: "2017-01-02T15:18:22.622Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "586914ea058ca96737b4c957"
    text: {> The CONSTRUCT function is useful for importing external objects, such as preference settings from a file, CGI query responses, encoded email, etc. }
    sent: "2017-01-01T14:40:42.660Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586914a6aa6be0472ff43d10"
    text: {A useful *construct* :smile: , prevents side effects}
    sent: "2017-01-01T14:39:34.667Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58691441c02c1a3959d5e287"
    text: {```red^/red>> obj: construct [^/        name: uppercase "Fred"^/        age: 20 + 7^/        time: now^/    ]^/== make object! [^/    name: 'uppercase^/    age: 20^/    time: 'now^/]^/```}
    sent: "2017-01-01T14:37:53.351Z"
    editedAt: "2017-01-01T14:38:27.653Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "586913c7af6b364a291b4978"
    text: {I had to share this somewhat useful `word!`, [`construct`](http://www.rebol.com/docs/words/wconstruct.html):}
    sent: "2017-01-01T14:35:51.174Z"
    editedAt: "2017-01-01T14:36:14.366Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5868023a058ca96737b0c77b"
    text: "@greggirwin now it's much more than 100 lines :)"
    sent: "2016-12-31T19:08:42.465Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5867fe2faf6b364a29176aec"
    text: {```^/-=== Red Compiler 0.6.1 ===- ^/^/Compiling Z:\home\maxvel\rebol\gui\test.red ...^/Compiling libRedRT...^/...compilation time : 1877 ms^/^/Compiling to native code...^/...compilation time : 52844 ms^/...linking time     : 898 ms^/...output file size : 792576 bytes^/...output file      : Z:\home\maxvel\rebol\libRedRT.dll ^/^/*** Syntax Error: Missing matching ]^/*** line: 348^/*** at: {[^/   stack: copy []^/   words: [^/      ; }^/```}
    sent: "2016-12-31T18:51:27.786Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5867fe15c895451b753f0a80"
    text: {Interesting thing is that I can run this script, but can't compile it}
    sent: "2016-12-31T18:51:01.313Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5867fd269e6f00e74ae10024"
    text: {Added forth interpreter and testing framework:^/https://gist.github.com/maximvl/81f31f26b49a7a3a5891b9a63f47171a}
    sent: "2016-12-31T18:47:02.016Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5867e4629e6f00e74ae09c58"
    text: "Red is something"
    sent: "2016-12-31T17:01:22.482Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5867e45e9e6f00e74ae09c50"
    text: {I started with few simple things in mind, but now I'm already finishing 3rd DSL}
    sent: "2016-12-31T17:01:18.592Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5867c6d4c895451b753e2311"
    text: "oh, context got destroyed after `func` finishes"
    sent: "2016-12-31T14:55:16.770Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5867c6a5c02c1a3959d12270"
    text: "why does it say `y` is not in the context?"
    sent: "2016-12-31T14:54:29.948Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5867c666c895451b753e2141"
    text: {there is something strange in `bind` + `reduce` combination:^/```^/red>> f1: func [x y block /local z] [bind block 'z]^/== func [x y block /local z][bind block 'z]^/red>> f1 1 2 [x y h]^/== [x y h]^/red>> reduce f1 1 2 [x y h]^/*** Script Error: y is not in the specified context^/*** Where: reduce^/```}
    sent: "2016-12-31T14:53:26.629Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5866d3e40730ce693729a82a"
    text: "Things in `factor` missing in `forth` actually"
    sent: "2016-12-30T21:38:44.180Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5866d3cbaf6b364a29130e36"
    text: "@greggirwin do you remember `fry`?"
    sent: "2016-12-30T21:38:19.256Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5866d3757a3f79ef5dbbbbcf"
    text: "Any examples of things you miss @geekyi ?"
    sent: "2016-12-30T21:36:53.396Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58669aa27a3f79ef5dbaa545"
    text: {and this is where I miss factor's functions for collections and high-level programming}
    sent: "2016-12-30T17:34:26.571Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58669a390730ce6937288a9b"
    text: {(btw, audio doesn't seem to be supported on firefox)}
    sent: "2016-12-30T17:32:41.286Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58669276af6b364a2911db51"
    text: {[mouse test](http://forthsalon.appspot.com/haiku-view/ahBzfmZvcnRoc2Fsb24taHJkchILEgVIYWlrdRiAgIDAq5yeCgw) even works as a thumbnail on the home page!}
    sent: "2016-12-30T16:59:34.665Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586692557a3f79ef5dba76c6"
    text: ":+1: "
    sent: "2016-12-30T16:59:01.201Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586690f09e6f00e74adb7bba"
    text: {cool, maybe we should also go to HN once Red version is complete ;)}
    sent: "2016-12-30T16:53:04.093Z"
    editedAt: "2016-12-30T16:53:13.725Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58669088058ca96737aae824"
    text: {[audio](http://forthsalon.appspot.com/haiku-view/ahBzfmZvcnRoc2Fsb24taHJkchILEgVIYWlrdRiAgIDA2aiACgw):^/```forth^/: hz pi * 2 * t * sin ;^/440 hz^/audio^/```}
    sent: "2016-12-30T16:51:20.685Z"
    editedAt: "2016-12-30T16:52:49.557Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58668fd09d4cc4fc535a7ab5"
    text: {[hacker news haiku thread](https://news.ycombinator.com/item?id=8307717)}
    sent: "2016-12-30T16:48:16.044Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58668d740730ce69372844f9"
    text: {> @geekyi shader toy hangs my browser =\^/^/yeah, it's pretty processor intensive, the idea is basically the same, but using gpu shaders}
    sent: "2016-12-30T16:38:12.111Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58668c1daf6b364a2911b67d"
    text: {yep, it is the best place for it, I'm just concerned the flow of the conversation getting lost, so just documenting it ;p}
    sent: "2016-12-30T16:32:29.255Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58668be09e6f00e74adb6138"
    text: {oh, yes, I decided to move discussion here, I think this channel is more appropriate}
    sent: "2016-12-30T16:31:28.902Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58668b7e9e6f00e74adb5f99"
    text: {:point_left: [December 28, 2016 10:08 PM](https://gitter.im/red/red?at=5863f17fc02c1a3959c0b4cd) so this is where it started}
    sent: "2016-12-30T16:29:50.860Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58668b5ec02c1a3959cc614e"
    text: "@geekyi shader toy hangs my browser =\"
    sent: "2016-12-30T16:29:18.152Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58668a0b9e6f00e74adb5915"
    text: {@geekyi there is `audio` word, so probably yes :) ^/http://forthsalon.appspot.com/word-view/617564696F}
    sent: "2016-12-30T16:23:39.797Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586689bbaf6b364a2911ac6f"
    text: {wasn't immediately apparent to me how it worked until :point_up: [December 30, 2016 9:16 PM](https://gitter.im/red/help?at=5866886aaf6b364a2911a655)}
    sent: "2016-12-30T16:22:19.656Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58668959c895451b75394b86"
    text: "and audio too?"
    sent: "2016-12-30T16:20:41.127Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "586689369e6f00e74adb54a1"
    text: "you can also do animations and different stuff"
    sent: "2016-12-30T16:20:06.076Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586689090730ce6937282b65"
    text: {@geekyi here are couple examples of it: http://forthsalon.appspot.com/haiku-list?order=rank}
    sent: "2016-12-30T16:19:21.332Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586688e5c895451b75394939"
    text: {Ah, like [shader toy](https://www.shadertoy.com/) but simpler}
    sent: "2016-12-30T16:18:45.267Z"
    editedAt: "2016-12-30T16:20:17.360Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "586688d0c895451b753948fc"
    text: "I want exact same copy"
    sent: "2016-12-30T16:18:24.769Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586688c47a3f79ef5dba41a3"
    text: {@geekyi I want to make version with Forth to explore and practice `parse`}
    sent: "2016-12-30T16:18:12.494Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586688a7af6b364a2911a74a"
    text: "try just `x y`"
    sent: "2016-12-30T16:17:43.530Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586688a00730ce69372826a5"
    text: {so you can get coordinates and use conditionals to draw something}
    sent: "2016-12-30T16:17:36.592Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5866886aaf6b364a2911a655"
    text: {basically it runs your Forth code for each pixel and the output is 4 numbers which result color code for this pixel}
    sent: "2016-12-30T16:16:42.647Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5866885baf6b364a2911a5fe"
    text: {Wasn't sure if your version was supposed to run red or forth}
    sent: "2016-12-30T16:16:27.409Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5866883fc02c1a3959cc507b"
    text: {@maximvl Yeah, I was checking it out and trying to figure out how it works}
    sent: "2016-12-30T16:15:59.528Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586688060730ce693728239e"
    text: {@geekyi if you go here:^/http://forthsalon.appspot.com/haiku-editor^/enter `0.5` and press two arrows button you will see}
    sent: "2016-12-30T16:15:02.075Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586687a70730ce69372821bb"
    text: "yep, this is it :)"
    sent: "2016-12-30T16:13:27.655Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5866879faf6b364a2911a3a7"
    text: {[![image.png](https://files.gitter.im/red/help/mRnF/thumb/image.png)](https://files.gitter.im/red/help/mRnF/image.png)}
    sent: "2016-12-30T16:13:19.554Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58668763058ca96737aab95b"
    text: "for now I'm trying to make it less laggy"
    sent: "2016-12-30T16:12:19.035Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5866874e9d4cc4fc535a4ee5"
    text: {yes, this is the gui part, I still need to add Forth interpreter there}
    sent: "2016-12-30T16:11:58.163Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586687277a3f79ef5dba3a0b"
    text: {may need to update red.. running it in the interpreter btw}
    sent: "2016-12-30T16:11:19.418Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58668711058ca96737aab75b"
    text: {wip aka.. "work in progress?"}
    sent: "2016-12-30T16:10:57.236Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586686fcc02c1a3959cc44eb"
    text: "I'm not sure if it works for me"
    sent: "2016-12-30T16:10:36.302Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586686e3c895451b753940c3"
    text: "@geekyi ?"
    sent: "2016-12-30T16:10:11.390Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586686467a3f79ef5dba35e1"
    text: "@maximvl wip?"
    sent: "2016-12-30T16:07:34.843Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58667b44058ca96737aa79a7"
    text: "@maximvl :clap:"
    sent: "2016-12-30T15:20:36.868Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586573f49e6f00e74ad6d271"
    text: {@dockimbel is there anything else I can do before trying R/S? how can I move only the generation part to R/S?}
    sent: "2016-12-29T20:37:08.706Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586573560730ce6937236a4f"
    text: {typing is still quite slow, though image doesn't blink anymore :)}
    sent: "2016-12-29T20:34:30.767Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586573319d4cc4fc5355a2b0"
    text: {https://gist.github.com/maximvl/81f31f26b49a7a3a5891b9a63f47171a}
    sent: "2016-12-29T20:33:53.154Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5865732bc02c1a3959c7c2ce"
    text: {@dockimbel ok, I simplified it a lot, I replaced panel with `image`, I removed generation of code and blocks allocation, now it just assigns to image directly, I turned off auto-sync}
    sent: "2016-12-29T20:33:47.923Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5861a8d2c02c1a3959b6716c"
    text: "`Generate`. Good name @geekyi."
    sent: "2016-12-26T23:33:38.546Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58619528c5a4e0233bd1da74"
    text: {It was an idea I had as part of a versatile `test` function}
    sent: "2016-12-26T22:09:44.472Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5861950bc895451b75237a90"
    text: {It would work somewhat like the quickcheck family of  testing (smallcheck, parsecheck)}
    sent: "2016-12-26T22:09:15.827Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586194dec895451b752379db"
    text: "Would be useful for testing"
    sent: "2016-12-26T22:08:30.697Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586194d40730ce6937117fc4"
    text: {Then you would have `generate: func [ /random /limits /others] [...]`}
    sent: "2016-12-26T22:08:20.597Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58619477c02c1a3959b620ad"
    text: {@maximvl  @greggirwin I'd always thought a `generate` function which operates only on `datatype!`s would be useful as an inverse to `parse`}
    sent: "2016-12-26T22:06:47.982Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58616ec67a3f79ef5da3268b"
    text: {Except that `random` on a block! would require a refinement or something, to distinguish it from returning a randomized block.}
    sent: "2016-12-26T19:25:58.398Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58616e53e7bdfe4e299e1da1"
    text: {@greggirwin ^/>think a dialect for doing so would be the way to go there^/^/I think `random` can become that dialect =)}
    sent: "2016-12-26T19:24:02.996Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586158707a3f79ef5da2b38b"
    text: {How can I get text-list to refresh once its underlying block as been changed?^/^/I tried `show`. For now updating the block causes text-list to remove the changed line from text-list facet.^/^/```^/lines: 10^/i: 0^/block: []^/^/repeat i lines [^/  append block append copy "line" i^/  ]^/^/text-list-selected: 2^/^/view [  ^/  below^/  field on-enter [ ^/    poke block text-list-selected face/data^/    probe block^/    show tl^/  ]^/  ^/  tl: text-list data block^/    on-create ^/      [ face/selected: text-list-selected ]^/    on-change^/      [ text-list-selected: face/selected ^/        print text-list-selected^/      ]^/            ^/  button "Quit" on-click [quit]^/]```}
    sent: "2016-12-26T17:50:40.650Z"
    editedAt: "2016-12-26T17:53:47.551Z"
    v: 5
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58615715e7bdfe4e299db109"
    text: "@endo64 Great got that!"
    sent: "2016-12-26T17:44:53.182Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "586154a3e7bdfe4e299da5a6"
    text: {The help string makes it sound like it could be extended. Each type just needs to be updated. I've always written my own random data generators, and think a dialect for doing so would be the way to go there, so you can specify constraints and such.}
    sent: "2016-12-26T17:34:27.011Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586147b0c02c1a3959b4b89e"
    text: "and you can add your own of course"
    sent: "2016-12-26T16:39:12.544Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58614792af6b364a29fa8f14"
    text: {so if you want random number you do `random(Int64)`, random date - `random(Date)`}
    sent: "2016-12-26T16:38:42.230Z"
    editedAt: "2016-12-26T16:38:50.236Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58614768058ca9673792a36f"
    text: {in Julia language random method has type `Datatype! => A (Datatype!)`}
    sent: "2016-12-26T16:38:00.951Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5861472f7a3f79ef5da2646b"
    text: {as well as other datatypes: percent, issues, dates etc}
    sent: "2016-12-26T16:37:03.125Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586146f4058ca9673792a0b0"
    text: "at least"
    sent: "2016-12-26T16:36:04.551Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586146f1e7bdfe4e299d6dab"
    text: "it makes sense for test purposes"
    sent: "2016-12-26T16:36:01.638Z"
    editedAt: "2016-12-26T16:36:15.276Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586146d9058ca9673792a067"
    text: "well, it may make random email address, why not"
    sent: "2016-12-26T16:35:37.613Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5861469261e516c1578f0a73"
    text: {It makes sense for `logic!` that has two values, but what would i.e. `random email!` do?}
    sent: "2016-12-26T16:34:26.507Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "586145afc5a4e0233bd038fe"
    text: {don't you think it would be better to allow datatypes for random? like^/```^/red>> random logic!^/*** Script Error: random does not allow datatype! for its value argument^/*** Where: random^/```}
    sent: "2016-12-26T16:30:39.559Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58614582c895451b7521e302"
    text: {btw for me this is counter intuitive:^/```^/red>> random true^/== true^/red>> random true^/== false^/```}
    sent: "2016-12-26T16:29:54.544Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5860f97f0730ce69370ebfdd"
    text: "or try in repl to find out what happens"
    sent: "2016-12-26T11:05:35.634Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5860f9690730ce69370ebf21"
    text: {general rule as with other languages - use parens if you are not sure about execution order}
    sent: "2016-12-26T11:05:13.342Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5860f957c895451b752095ee"
    text: "indeed it does! thanks Maxim"
    sent: "2016-12-26T11:04:55.641Z"
    v: 1
    author: "5860f48ed73408ce4f3f5aab"
) #(
    id: "5860f930c5a4e0233bcefa37"
    text: "which gives exactly 20% =)"
    sent: "2016-12-26T11:04:16.709Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "5860f923c02c1a3959b35769"
    text: {the fix coud be `if (random 1.0) < .20 [count: count + 1]`}
    sent: "2016-12-26T11:04:03.436Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5860f90bc895451b7520947d"
    text: "oh wow. silly mistake. Thanks!"
    sent: "2016-12-26T11:03:39.684Z"
    v: 1
    author: "5860f48ed73408ce4f3f5aab"
) #(
    id: "5860f8fe058ca967379143a7"
    text: "that's why you get exactly 50%"
    sent: "2016-12-26T11:03:26.744Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5860f8ed7a3f79ef5da10caa"
    text: "so Red first calculates `<` and then random"
    sent: "2016-12-26T11:03:09.270Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5860f8c2058ca967379142ce"
    text: {```^/red>> random 1.0 < .2^/== false^/red>> random 1.0 < .2^/== false^/red>> random 1.0 < .2^/== true^/```}
    sent: "2016-12-26T11:02:26.391Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5860f8bcc02c1a3959b350af"
    text: {@theopen-institute Hi and welcome, the problem in your code is that you calculate random boolean =)}
    sent: "2016-12-26T11:02:20.857Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5860f5b1af6b364a29f93d3a"
    text: {Hello, I'm getting unexpected (to me) results with `random`.^/```^/test_random: function [iterations][^/^-count: 0^/^-loop iterations [^/^-^-if random 1.0 < .20 [count: count + 1]^/^-]^/^-print to percent! (to float! count / to float! iterations) ^/]^/```^/I would expect outputs to cluster around 20%, but no matter what value I use for `iterations` I get what looks like a normal distribution centered on 50%. What am I doing wrong?}
    sent: "2016-12-26T10:49:21.360Z"
    editedAt: "2016-12-26T10:50:03.292Z"
    v: 3
    author: "5860f48ed73408ce4f3f5aab"
) #(
    id: "5860ca1e7a3f79ef5da0657c"
    text: {> Since I want my default behavior to be on-enter [field-data: face/text] how can I avoid repeat that code for each field?^/^/You can use `style` for that:^/```^/view [^/  style my-field: field red on-enter [probe face/text]^/  my-field^/  my-field^/  my-field^/]^/```^/}
    sent: "2016-12-26T07:43:26.107Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5860017cc02c1a3959afc899"
    text: {@9214  Would string! symbol be an accurate `face/text` description?}
    sent: "2016-12-25T17:27:24.262Z"
    editedAt: "2016-12-25T17:27:38.666Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5860003fc895451b751d1747"
    text: "@OneArb that what I think too"
    sent: "2016-12-25T17:22:07.170Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58600005058ca967378dcd51"
    text: {@9214 Reading the VID documentation, I'd conclude `field` in VID DSL expects a word! as `face/text` from reading `face/text` description "Input text, read/write value."?}
    sent: "2016-12-25T17:21:09.014Z"
    editedAt: "2016-12-25T17:21:38.384Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585ffe89af6b364a29f5c8ee"
    text: {@OneArb I think `field-data` is text which will be displayed in text field by default, and after you've entered something in that text field and clicked enter, this text will be saved in `field-data`, though I may be wrong since I haven't test it}
    sent: "2016-12-25T17:14:48.998Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585ffdb6af6b364a29f5c581"
    text: {I'd love to see a basic data processing example showing how all the pieces tie in together.^/^/Within VID Field documentation how would Red describe `field-data` role  within `field field-data on-enter [field-data: face/text]`?^/^/face/text?}
    sent: "2016-12-25T17:11:18.503Z"
    editedAt: "2016-12-25T17:13:01.994Z"
    v: 3
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585ff9807a3f79ef5d9d7fda"
    text: {@dander Somewhat^/^/I got as far as `field field-data on-enter [field-data: face/text]`^/^/What about moving the focus to the next field or face on hitting Enter?^/^/Since I want my default behavior to be `on-enter [field-data: face/text]` how can I avoid repeat that code for each field?}
    sent: "2016-12-25T16:53:20.256Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585fe95d7a3f79ef5d9d3f62"
    text: {@geekyi I picked that speak from the doc:^/^/*Event type*    click^/*Handler*         `on-click`^/*Description*  Triggered when the user clicks on the button^/^/VID facet handler works for you?}
    sent: "2016-12-25T15:44:29.705Z"
    editedAt: "2016-12-25T15:48:27.795Z"
    v: 4
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585f79dbc895451b751b2c84"
    text: "@OneArb not sure what you mean by VID *handler*"
    sent: "2016-12-25T07:48:43.191Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585f79b1058ca967378bfdb9"
    text: {@OneArb  have you seen https://github.com/red/red/blob/master/tests/view-test.red ? It might have some examples that you are looking for.}
    sent: "2016-12-25T07:48:01.938Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "585f115fe7bdfe4e2995a4c1"
    text: {Where would I find a VID handler example?^/^/I couldn't find any within VID doc and Github Scripts / showcase.}
    sent: "2016-12-25T00:22:55.367Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585e4ba9d99b1dd03d2df0a0"
    text: {Ho @GianlucaM95_twitter ! check if you have all the required 32bit libs, the list is here: http://www.red-lang.org/p/download.html}
    sent: "2016-12-24T10:19:21.750Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585e4852c895451b7516c1e1"
    text: {Hi everyone! I'm new to Red, I started writing some code on Fedora 23 and everything worked fine, but on Void Linux 64 bit I get this error when I run ./red-061 : symbol lookup error: ~/.red/console-2016-6-30-23134: undefined symbol: dlopen. Am I missing some dependency? glibc-devel-32bit is installed. In my filesystem I have both /usr/include/bits/dlfcn.h and  /usr/include/dlfcn.h^/}
    sent: "2016-12-24T10:05:06.476Z"
    v: 1
    author: "585e4611d73408ce4f3f13f7"
) #(
    id: "585c0c77058ca967377d47b7"
    text: {Good progress. I believe Red will let you do everything you want. It's just a matter of design now. :^^)}
    sent: "2016-12-22T17:25:11.235Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "585c086bc895451b750c2970"
    text: {@geekyi Forth can seep-into natural language, at times, clarify!^/^/Thanks for [in-depth code review] (https://codereview.stackexchange.com/questions/53794/rebol-view-layout-compose-seek-minima-notation)^/^/The lines between self-documenting code, documentation and screen description remain to be explored.^/^/IDE can feed screen design data and code into your final version code generator example.^/^/Red/Rebol would make a great template language.^/^/I like debug looking at generated code. Editor can feedback code modify into IDE.^/^/I need some time to look into the use case.}
    sent: "2016-12-22T17:07:55.717Z"
    editedAt: "2016-12-22T17:09:54.813Z"
    v: 3
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585b2c0de7bdfe4e2983f071"
    text: "I'm wondering if it helped"
    sent: "2016-12-22T01:27:41.467Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585b2be2058ca96737789d42"
    text: {Did you see my answer to your previous [question](https://codereview.stackexchange.com/questions/53794/rebol-view-layout-compose-seek-minima-notation)?}
    sent: "2016-12-22T01:26:58.438Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585b2bc0c5a4e0233bb5e533"
    text: {@OneArb "Talk in forth, you are" -yoda ;P}
    sent: "2016-12-22T01:26:24.343Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585b1b397a3f79ef5d878554"
    text: {@maximvl Segregate data is the explore aim of the posted code.^/^/```^/        field1: field^/        [(field1.Process)]^/        (field1.Initialize)^/```^/field description face/facet feeds from a data dictionary. That feature  buys WinDev and Clarion data engine independence.^/^/Clarion, last I know, uses a two step generation process:^/template language processes application description (data dictionary, screen design, business code), churns it into code to compile.}
    sent: "2016-12-22T00:15:53.900Z"
    editedAt: "2016-12-22T00:18:22.214Z"
    v: 4
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585b18aae7bdfe4e2983a2f3"
    text: {@greggirwin I did backtrack to get the dynamic face to work. Follows the fixed code. Add `compose/deep` before `load` and use `(ok)`^/```^/Red []^/^/ok: [ Button 100x33 "Ok"]^/^/field-demo: {^/    ^/ text maroon yellow bold font-size 10 55x20^/    center "Name"^/^/ field 80x20^/^/ origin 0x50^/ (ok)^/}^/ ^/system/view/silent?: yes^/^/panel-background: black^/^/view [^/^-title "my text entry"^/^-backdrop black^/^-across^/  ^/^-source: area #13181E 410x300 no-border field-demo font [^/^-^-name: "Consolas"^/^-^-size: 9^/^-^-color: hex-to-rgb #9EBACB^/^-]^/^-^/^-panel 400x300 panel-background react [^/^-^-attempt/safer [face/pane: layout/tight/only compose/deep load source/text]^/^-]^/]^/```}
    sent: "2016-12-22T00:04:58.713Z"
    editedAt: "2016-12-22T00:09:32.744Z"
    v: 5
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585b17d8c02c1a395999a3df"
    text: {@maximvl Segregate data is the explore aim of the posted code.^/^/I prefer data, including field description face/facet to be stored managed in a dictionary. A feature that buys WinDev and Clarion data engine independence.^/^/Clarion, last I know, uses a two step generation process:^/template language process application description, turns it into code to compile.^/^/Red/Rebol can use a single language.^/^/}
    sent: "2016-12-22T00:01:28.750Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585b1387e7bdfe4e2983871c"
    text: {@DideC Two livecoding / dynamic screen use-case:^/^/IDE:^/^/I develop using code generation aka template programming since the early 90's.^/^/Positioning fields and other faces by hand (mouse) took me a great amount of time. Once RAD scaffold code, screen design became for certain projects the next bottleneck.^/^/Run time field generation was an option but annoying to manage.^/^/Placing faces on the screen in a livecode setting, I look forward.^/I find it intuitive fast and fun, especially when I can develop my own^/set of face / facets structure.^/^/Runtime screen customize:^/^/Stakeholders would love reorder field position, sequence order^/to match their own workflow/taste? Can Red offer a dynamic experience?^/^/What stands in the way of a persistent context?}
    sent: "2016-12-21T23:43:03.075Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585adf727a3f79ef5d862997"
    text: {> I am trying to make a tiny editor wherein I can add fields live within the text.^/^/@OneArb, being able to generate a GUI from a fixed spec is easy with Red, as the live-coding demos show but, as Didier points out, there are a lot of details that may not work as expected. It makes perfect sense that `[ok]` will not work as expected inside a string in your live-coding example. *Why* it doesn't work is the reason we suggest building simpler things first, and getting more familiar with when/where/how things are evaluated.}
    sent: "2016-12-21T20:00:50.677Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "585ab5a6058ca96737762627"
    text: {but if you separate your data from gui it should be fine}
    sent: "2016-12-21T17:02:30.285Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585ab556058ca967377623e4"
    text: {1) "Livecoding" implies rebuilding all graphics objects from scratch at each modification of the VID code. So in an application, it can be problematic if your code refers to graphics objects (ie `my-field/text` or `my-list/data`) as contexts will be lost between each GUI rebuilt. You will need to always `reduce` or `compose` the code that acces these objects.^/It is good  for prototyping the VID or Draw code that you will copy to your application script as a base for your application.}
    sent: "2016-12-21T17:01:10.263Z"
    editedAt: "2016-12-21T17:01:27.875Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "585ab42aaf6b364a29de774a"
    text: {@OneArb Don't confused "livecoding" and "code generation". Especially in GUI domain.^/1) "Livecoding" is for a quick and realtime prototyping of a GUI.^/2) "Code generation" can be used for giving some dynamic behaviours to your GUI in the final program.^/^/}
    sent: "2016-12-21T16:56:06.677Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5859bc89e7bdfe4e297c8ce6"
    text: {> The GUI is still in Beta? below does  not place the fields below^/^/Red is still in Alpha? A Beta release is some way off.}
    sent: "2016-12-20T23:19:37.758Z"
    editedAt: "2016-12-20T23:20:28.493Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5859b8b2c895451b75ffb8f9"
    text: "@OneArb same site as your other question"
    sent: "2016-12-20T23:03:14.957Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5859b6b67a3f79ef5d7fea74"
    text: "Ask a review question where?"
    sent: "2016-12-20T22:54:46.034Z"
    editedAt: "2016-12-20T23:02:47.872Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859b6867a3f79ef5d7fe9b3"
    text: {Sure. Since field-demo is a string it makes total sense that [ok] the structure would not display?}
    sent: "2016-12-20T22:53:58.110Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859b5ccaf6b364a29d973d8"
    text: {@OneArb can you post  :point_up: [this](https://gitter.im/red/help?at=58597a2ee7bdfe4e297ae9c2) also as a review question and link here?}
    sent: "2016-12-20T22:50:52.604Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5859b3a27a3f79ef5d7fda63"
    text: { @greggirwin Thanks for the tips. I know where to look now.^/^/I am trying to make a tiny editor wherein I can add fields live within the text.^/^/The simple way is probably to update the structure then show rather than use react?}
    sent: "2016-12-20T22:41:38.125Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859b171c02c1a395991ef43"
    text: "I'll try with a structure, good point."
    sent: "2016-12-20T22:32:17.309Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859b0eac02c1a395991ec32"
    text: {By the way the origin is simple-clock.red from http://www.red-lang.org/2016/07/eve-style-clock-demo-in-red-livecoded.html}
    sent: "2016-12-20T22:30:02.288Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859b09fe7bdfe4e297c4ef1"
    text: {It does: `view [below text "A" field text "B" field]`}
    sent: "2016-12-20T22:28:47.021Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5859b099e7bdfe4e297c4ed9"
    text: "@OneArb I'm going to try to answer that question"
    sent: "2016-12-20T22:28:41.018Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5859b04baf6b364a29d95812"
    text: {The GUI is still in Beta? below does  not place the fields below}
    sent: "2016-12-20T22:27:23.562Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859afce7a3f79ef5d7fc3cf"
    text: {Possibly.. you want to compose Rebol code into the view dialect  @OneArb ?}
    sent: "2016-12-20T22:25:18.926Z"
    editedAt: "2016-12-20T22:25:34.125Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5859af64c02c1a395991e307"
    text: "Me too. "
    sent: "2016-12-20T22:23:32.588Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5859af530730ce6937ee2a8b"
    text: {Yeah, looking at the code, I'm not exactly certain what you were trying to do there.. unusual naming convention kinda tripped me up :p }
    sent: "2016-12-20T22:23:15.393Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5859aea8e7bdfe4e297c4332"
    text: "Good point `below`, now it comes back :)"
    sent: "2016-12-20T22:20:24.178Z"
    editedAt: "2016-12-20T22:20:47.147Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859ae72e7bdfe4e297c41b6"
    text: "@greggirwin correct"
    sent: "2016-12-20T22:19:30.497Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859ae5dc02c1a395991dc66"
    text: {I think that's just @OneArb 's naming convention. Not path access.}
    sent: "2016-12-20T22:19:09.957Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5859adc97a3f79ef5d7fb5c0"
    text: {Oh, just didn't know you had asked the question a long time ago. The first thing I notice is your use of `.` , it probably doesn't work like you think. You may want `/` instead}
    sent: "2016-12-20T22:16:41.199Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5859ad59af6b364a29d94737"
    text: "@geekyi what is your question?"
    sent: "2016-12-20T22:14:49.383Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859acd7c02c1a395991d3d0"
    text: "@OneArb wait, asked 2 years ago??"
    sent: "2016-12-20T22:12:39.453Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5859ab52e7bdfe4e297c24d9"
    text: {@geekyi @greggirwin FYI The preceding code attempts to use Red/Rebol as a template language and manage code using code inserts, in particular segregate all data from the code.^/^/HostileFork made extensive comments on it on Stackoverflow code review.^/^/https://codereview.stackexchange.com/questions/53794/rebol-view-layout-compose-seek-minima-notation^/^/I'll read it in more details. Boils down to writing my own compose function, if I get it right.}
    sent: "2016-12-20T22:06:10.493Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5859a521058ca96737705505"
    text: {Start by taking out the live-coding aspect, even if you want that eventually. Also take out reactivity. If you create a static layout using your definition for `ok` and making `field-demo` a block instead of a string you load, does it work how you expect?^/^/`Origin` is not for positioning individual items. Use `at` for that. And you shouldn't need to set a precise offset for everything. Use `across` and `below`, `space` and let VID align things for you as much as possible.}
    sent: "2016-12-20T21:39:45.043Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58599dbc0730ce6937eda157"
    text: {Refresh fails with `panel-background: "#2C3339"` works with^/`panel-background:black`.^/^/Opened a ticket.}
    sent: "2016-12-20T21:08:12.620Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585990427a3f79ef5d7ee3fd"
    text: { @greggirwin I like Red/Rebol ability to scafold code at run time.^/^/When I include or type `[ok]` in `field-demo:` I expect the code `[ button 100x33 "Ok"]`to run and a new button with these facets to be displayed in `panel` due to the `react` function.^/^/I ran into the same issue in Rebol. In ^/^/```^/field1.Declare: compose/deep [^/        field1: field^/        [(field1.Process)]^/        (field1.Initialize)^/    ]^/```^/` [(field1.Process)]` works with brackets and parenthesis, `(field1.Initialize)`works fine with parenthesis only. I am trying to figure out the consistency of "code composition".^/^/}
    sent: "2016-12-20T20:10:42.281Z"
    editedAt: "2016-12-20T20:14:31.428Z"
    v: 2
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58598cfbc5a4e0233bacde59"
    text: {@OneArb btw, I feel you are diving too fast into this. It's better to spend some time learning and reading a bit of rebol}
    sent: "2016-12-20T19:56:43.600Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58598c9fe7bdfe4e297b576a"
    text: "@geekyi I'll try that"
    sent: "2016-12-20T19:55:11.930Z"
    v: 1
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "58598a58c895451b75fea35f"
    text: {Hi and thanks!^/^/Live adding fields or screen composition is the specific feature I need and the reason I am considering Red.^/^/`[ok]` won't display when added to `field-demo`^/^/Is there a way to refresh the panel? When reducing  the size of a button part of the resized button drawing remains on the screen.^/^/In the same spirit I wrote the following code in Rebol which still runs in Red^/^/```^/Red[]^/^/Result: "Test"^/^/field1.Process: [^/^-^-^-alert join  "You typed: " ^/^-^-^-Result: field1/text^/^-^-^-]^/^/field1.Initialize: [do [field1/text: Result]]^/^/field1.Declare: compose/deep [^/^-^-field1: field^/^-^-[(field1.Process)]^/^-^-(field1.Initialize)^/^-]^/^/block: ^-compose [ ^/^-^-^-(field1.Declare)^/^-^-^-field^/^-^-^-field^/^-^-]^/^/view layout (block)^/```^/Any solution?^/^/Thanks}
    sent: "2016-12-20T19:45:28.222Z"
    editedAt: "2016-12-20T19:47:01.574Z"
    v: 3
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "585981cfe7bdfe4e297b1c28"
    text: {@OneArb, I suggest building some simple GUIs that don't involve live coding if you're new to Red and it's GUI system. Can you build the GUI you want directly? I'm not sure what you mean by "set field/facet to execute", and `[ok]` isn't used anywhere that I see, so I'm not sure what you tried with it. Also not sure how `origin` can be optimal or not.}
    sent: "2016-12-20T19:09:03.989Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "585981bbc02c1a395990af5e"
    text: {@OneArb so many questions! :p I think asking each on stackoverflow and linking here is better}
    sent: "2016-12-20T19:08:43.885Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58597a2ee7bdfe4e297ae9c2"
    text: {Hi,^/^/I am trying to get my first Red GUI script working.^/^/I picked up simple-clock.red trying to do live coding with fields.^/^/How to set facets to execute?^/`[(panel-background)]`^/^/How to set fields to execute?^/I'd have expected `[ok]` to do something.^/^/Is using `origin` optimal?^/^/Can I define `ok:` and `panel-background:` within the react facet?^/^/Thanks^/^/```^/Red [^/]^/^/ok: [ button 100x33 "Ok"]^/^/field-demo: {^/    ^/ text bold font-size 10 55x20 [(panel-background)]^/^- center "Name"^/ field 80x20 "Enter Name"^/^/ origin 0x50^/ Button 100x33 "Ok"^/^/ origin 0x100^/ text font-size 10 bold "Keep me"^/ radio "Public"^/ radio "Private"^/}^/^/system/view/silent?: yes^/^/panel-background: maroon^/^/view [^/^-title "Text entry"^/^-backdrop panel-background^/^-across^/^-^/^-source: area #13181E 410x300 no-border field-demo font [^/^-^-name: "Consolas"^/^-^-size: 9^/^-^-color: hex-to-rgb #9EBACB^/^-]^/^-^/^-panel 400x300 panel-background react [^/^-^-attempt/safer [face/pane: layout/tight/only load source/text]^/^-]^/]```}
    sent: "2016-12-20T18:36:30.494Z"
    editedAt: "2016-12-20T18:42:36.561Z"
    v: 7
    author: "5622ab5916b6c7089cb75d94"
) #(
    id: "5858fad1c895451b75fb4af8"
    text: {@geekyi Rebol scripts are so small, than it's more usefull to fully include them, than just an index. Bonus : work offline. And the full download is smaller than most of othe language package manager alone :-)}
    sent: "2016-12-20T09:33:05.342Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58573ccbc895451b75f23b7b"
    text: {Oh ok, I spoke too soon. It's a binary pack of all the scripts. Should have read the instructions properly too}
    sent: "2016-12-19T01:50:03.464Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58573b54c5a4e0233ba0519a"
    text: {Thanks. That is awesome! I wish it cached the index instead of doing it every time I started it tho}
    sent: "2016-12-19T01:43:48.808Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585699897a3f79ef5d6f7455"
    text: {@geekyi for Rebol.org, [the Librarian](http://www.rebol.org/download-librarian.r) is not far to be a package manager ;-)}
    sent: "2016-12-18T14:13:29.692Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58557621c5a4e0233b98d5d4"
    text: {@geekyi , the devil is in the details and the design. We probably all agree that it will be useful, and important, but someone either needs to make a well-thought-out proposal or wait for one. A long time ago, I did extensive research on various meta info and formats for projects, and still have my notes somewhere. }
    sent: "2016-12-17T17:30:09.083Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "585481b8589f411830f48b49"
    text: {but i recommend using the *stylize* branch, that’s where the development is going on. let’s hope @dockimbel  will accept `stylize` pull request soon, so i can merge the improvements into master}
    sent: "2016-12-17T00:07:20.005Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5854806ee7bdfe4e2963b4cb"
    text: {@geekyi of course! gritter is free to use, it would be public domain,if public domain was not banned in certain countries like germany}
    sent: "2016-12-17T00:01:50.149Z"
    editedAt: "2016-12-17T00:02:10.987Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58547f9dc02c1a395978aa17"
    text: {@rebolek can I put gritter as a the first test package? ;)}
    sent: "2016-12-16T23:58:21.116Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58547f47589f411830f4814b"
    text: {If I have that, then I can build on that layer some other ideas I have}
    sent: "2016-12-16T23:56:55.498Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58547f07c895451b75e69c56"
    text: {Rebol.org and github are the sites where I've found most of the code. So if I can search those 2, I guess that would give the majority of what I want}
    sent: "2016-12-16T23:55:51.726Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58547ebf058ca9673757e666"
    text: {Indeed. If anyone has a workflow/standard for searching/building packages (especially on rebol.org) that would be very helpful for me}
    sent: "2016-12-16T23:54:39.061Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58547e6f058ca9673757e55a"
    text: "it could be so powerful, when used correctly"
    sent: "2016-12-16T23:53:19.760Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58547e36c02c1a395978a4ee"
    text: {@geekyi header is probably the most underestimated thing}
    sent: "2016-12-16T23:52:22.196Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58547da2af6b364a29c12f39"
    text: {Actually, I've only rarely used rebol.org; sometimes for searching. If it had a better interface like a package manager, I might use it more}
    sent: "2016-12-16T23:49:54.870Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58547bfcc895451b75e68f5f"
    text: {*tl;dr* As an example, for the [`Plots`](https://github.com/JuliaLang/METADATA.jl/tree/metadata-v2/Plots) package, the structure is: ^/```^/Plots: [^/  versions: [^/    0.0.1: [^/      requires: [dependencies list of packages]^/      sha1^/    ]^/  ...^/  ]^/  url : git://github.com/tbreloff/Plots.jl.git^/]^/```}
    sent: "2016-12-16T23:42:52.651Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58547a04058ca9673757cfe7"
    text: {The basic structure is a folder with package name, url for updates and  a folder for each version. Data in each version folder is just a list of dependencies and sha1. Such a file for red can include even more info}
    sent: "2016-12-16T23:34:28.552Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58547944c02c1a3959788e6b"
    text: {What I'm thinking is http://www.rebol.org/ for red, but decentralized (with a local cache)^/[METADATA.jl](https://github.com/JuliaLang/METADATA.jl) for the Julia programming is a good example I think^/Basically, it's like a dump of RED[] header data. But I guess much simpler in this case}
    sent: "2016-12-16T23:31:16.713Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585478edaf6b364a29c11adb"
    text: {@rebolek it's automating the collection of data I'm thinking of. I think it is orthogonal to having modules in red.^/Right now, code is in various places; in gists and github repos.^/Most of the useful info is (or should be) stored in the Red headers. But I don't know of any conventions or standards on this. I guess you can say I'm still a bit new.}
    sent: "2016-12-16T23:29:49.281Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585470e7c5a4e0233b94b48d"
    text: {@geekyi Thanks! I believe these functions are very useful, but I use Red now, so I haven’t updated my Red/System stuff in a while. ^/Anyway, I understand your desire for some package manager but I would definitely wait for modules in Red. If you want improve discoverability, do some simple web page/db with links. The data are always more important, code can be always build on top of them later.}
    sent: "2016-12-16T22:55:35.525Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58546bbf0730ce6937d4e366"
    text: {@rebolek that looks like a useful set of functions! Wished I'd seen them sooner. There is a problem of discoverability right now. Been thinking of making something like a package manager / searcher}
    sent: "2016-12-16T22:33:35.431Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5853e7a70730ce6937d1b6fd"
    text: "Thanks both @rebolek @dockimbel I did the ticket."
    sent: "2016-12-16T13:09:59.754Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5853cd4f058ca9673753bf4c"
    text: {@meijeru see above link, I already wrote such function}
    sent: "2016-12-16T11:17:35.184Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5853cd22af6b364a29bd4a72"
    text: {You can open a ticket for signaling that internal error, that should not happen.}
    sent: "2016-12-16T11:16:50.459Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5853ccf9e7bdfe4e295fc264"
    text: {OK if that is what it takes. But instead of the compiler internal error on naive comparison one should have a warning...}
    sent: "2016-12-16T11:16:09.930Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5853cc89af6b364a29bd47bd"
    text: {I think we don't have any function for that in the Red or R/S runtimes (not needed internally). You can write your own function or import one of the C lib functions (like `strcmp()` or the safer `strncmp()`).}
    sent: "2016-12-16T11:14:17.853Z"
    editedAt: "2016-12-16T11:14:30.067Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5853cc57589f411830f051c0"
    text: {@meijeru https://github.com/rebolek/user.reds/blob/master/user.reds#L238}
    sent: "2016-12-16T11:13:27.024Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5853cc1ae7bdfe4e295fbd64"
    text: "@meijeru char by char IMO"
    sent: "2016-12-16T11:12:26.839Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5853cc01589f411830f05020"
    text: {How does one compare c-strings in Red/System? The following does NOT work (see issue #2369):^/```^/s: "abc"^/if s = "def" [print "hoopla"]```^/}
    sent: "2016-12-16T11:12:01.790Z"
    editedAt: "2016-12-16T11:12:12.658Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58466d7e44f3e83528e44a20"
    text: {@TimeSlip I've not been able to run the red binary on Android because it requires libcurl. Haven't found an easy way to install it. You might be able to hack around by commenting out the include in simple.io L1670 ? Also haven't tried out the android branch yet, which produces an apk I think}
    sent: "2016-12-06T07:49:18.038Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58460845b4ffd59e38ee3f29"
    text: {Hello, I was just wondering about the Android state of affairs.  Is there a general, "this will work" and "this won't" ? My guess is the VID doesn't at this point but I'd love to be wrong about that.}
    sent: "2016-12-06T00:37:25.837Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "584597a0f666c5a138d2be65"
    text: {@geekyi There were two different issues in the same error case.}
    sent: "2016-12-05T16:36:48.481Z"
    editedAt: "2016-12-05T16:37:23.514Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58458fe91eb3d648695c1841"
    text: {@dockimbel Eh.. https://github.com/red/red/commit/49c6bb26bf306035a2859a1c142d6c3b98971acd was the actual fix for this problem. You fixed something else! :smile: }
    sent: "2016-12-05T16:03:53.289Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58458f100da034021b6fbf5e"
    text: {@dander @RiVeND Thanks for the report (noticed only today). I've pushed a fix for it.}
    sent: "2016-12-05T16:00:16.189Z"
    editedAt: "2016-12-05T16:00:33.458Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584550cdbc32453c28915f3d"
    text: {@geekyi Hah, yes! Note to self, read things properly before commenting!}
    sent: "2016-12-05T11:34:37.816Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "5844374a90f847041bf85291"
    text: {Halfway writing this, I realized you were talking about something else and @RiVeND misunderstood the original problem, like me^/(you can see in @RiVeND version that console doesn't exit but prints (halted)) ^/>@RiVeND  @dander the red console exiting feels like the saner behavior for me. At least in that particular case. Wouldn't doing otherwise lead to hard to find bugs?^/In your particular example, I can't understand why it does that}
    sent: "2016-12-04T15:33:30.308Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583d6ede16207f7b0ebc9822"
    text: {```^/red>> about^/Red 0.6.1 - 22-Nov-2016/14:35:39^/red>> expand-directives [print #either config/OS = 'Windows ["Windows"]["Unix"]]^/== [print "Windows"]^/red>> about^/Red 0.6.1 - 29-Nov-2016/11:59:47^/red>> expand-directives [print #either config/OS = 'Windows ["Windows"]["Unix"]]^/*** Preprocessor Error in #either ^/*** Script Error: path config/OS is not valid for none! type^/*** Where: ???^/(halted)^/```}
    sent: "2016-11-29T12:04:46.773Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "583d6e0d8d65e3830eb42a21"
    text: "@dander @dockimbel Looks like a regression."
    sent: "2016-11-29T12:01:17.929Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
)#(
    id: "583d14e08e29aeee601ae75d"
    text: {I was playing around with the macros from the [documentation examples](https://github.com/red/docs/blob/master/preprocessor.md#expand-directives) and had a couple questions. When inside expand-directives, if there is an error, the red console exits. Is that expected behavior, bug, or just not implemented yet?^/^/This is from the documentation:^/```^/λ red --cli^/--== Red 0.6.1 ==--^/Type HELP for starting information.^/^/red>> about^/Red 0.6.1 - 28-Nov-2016/16:46:05-8:00^/red>> expand-directives [print #either config/OS = 'Windows ["Windows"]["Unix"]]^/*** Preprocessor Error in #either^/*** Script Error: path config/OS is not valid for none! type^/*** Where: ???^/λ $LASTEXITCODE^/0^/```^/^/I think it was meant to be this:^/```^/red>> expand-directives [print #either system/platform = 'Windows ["Windows"]["Unix"]]^/== [print "Windows"]^/```^/}
    sent: "2016-11-29T05:40:47.999Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "583578a023157bcb1cc1c214"
    text: {@Rebol2Red let’s move to https://gitter.im/red-gitter/Lobby please.}
    sent: "2016-11-23T11:08:16.001Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583577f152af72f054339229"
    text: "Hm, let me try it..."
    sent: "2016-11-23T11:05:21.831Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583577bfc790e0ec56201d1e"
    text: {@rebolek Copying and pasting the code is'nt working *** Syntax Error: invalid integer! at "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}
    sent: "2016-11-23T11:04:31.659Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5835777152af72f054339221"
    text: {The master branch is pretty old now, I do the development in `stylize` branch. Once @dockimbel accepts my `stylize` PR, I will merge the changes back to master.}
    sent: "2016-11-23T11:03:13.261Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58357715c0a27329230074b8"
    text: {You will see "token" followed by long hexadecimal value.}
    sent: "2016-11-23T11:01:41.479Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583576f3c0a27329230074b3"
    text: {@Rebol2Red press [Sign in] button in top-right corner.}
    sent: "2016-11-23T11:01:07.703Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58357642c790e0ec562015a9"
    text: {@rebolek I wanted to have a look at your gitter script. Can you tell me how to get a token?^/I don't know what to do on https://developer.gitter.im/apps ^/In your program i tried rebol2red as token but that's not right.}
    sent: "2016-11-23T10:58:10.677Z"
    editedAt: "2016-11-23T10:58:40.025Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "583562dd2db95267046e8c5e"
    text: "No worries, appreciate the help!"
    sent: "2016-11-23T09:35:25.680Z"
    v: 1
    author: "576105b9c2f0db084a1df4f6"
) #(
    id: "58356186cc0ea2cf7786277f"
    text: {@jthsmith I do not know if "Fine by me" sounds harsh (it might be)? If so, it was not my intention, English is not my native language.}
    sent: "2016-11-23T09:29:42.080Z"
    editedAt: "2016-11-23T09:31:11.028Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58355d9db07a1fd3482f4af6"
    text: {@jthsmith Fine by me. Maybe you have some use for it.}
    sent: "2016-11-23T09:13:01.592Z"
    editedAt: "2016-11-23T09:13:25.697Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58355d5c9a5479d0484f343b"
    text: {That's cool. But in my case I need to copy the bytes after a specific sequence instead of starting at a set position:^/```^/parse contents [thru #{030623E593} copy number 4 skip to end]^/```^/Probably not worth generalizing.}
    sent: "2016-11-23T09:11:56.603Z"
    v: 1
    author: "576105b9c2f0db084a1df4f6"
) #(
    id: "58355c65b07a1fd3482f4421"
    text: {Maybe something more general?^/```^/mid: func [s start len][copy/part at s start len] ; like basic's midstring^/print to integer! mid #{B79CE5D3ABCD} 1 4 ; mid string start length^/```}
    sent: "2016-11-23T09:07:49.571Z"
    editedAt: "2016-11-23T09:09:17.398Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58355aee2db95267046e5d97"
    text: "Ah that does it, thanks again!"
    sent: "2016-11-23T09:01:34.794Z"
    v: 1
    author: "576105b9c2f0db084a1df4f6"
) #(
    id: "583557edc0a273292300698b"
    text: {If you mean bytes, it’s easy. `collect` collects to block by default, but you can provide you own word to change behavior:^/```^/red>> number: #{}^/== #{}^/red>> parse #{B79CE5D3ABCD} [collect into number [4 [keep skip]] to end]^/== true^/red>> number^/== #{B79CE5D3}^/```^/^/or you can grab it directly:^/^/```^/red>> parse #{B79CE5D3ABCD} [copy number 4 skip to end]^/== true^/red>> number^/== #{B79CE5D3}^/```}
    sent: "2016-11-23T08:48:45.451Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5835571652af72f054338abe"
    text: "4 bits or bytes?"
    sent: "2016-11-23T08:45:10.676Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583554eac790e0ec561f5b62"
    text: {Suppose I want to copy the first 4 bits of a binary string to convert to integer. This works:^/```^/red>> to integer! to binary! parse #{B79CE5D3ABCD} [collect [4 [keep skip]] to end]^/== -1214454317^/```^/But it's not exactly elegant, 2 manual type conversions--collect returns a block of integers. Any suggestions for just copying out the 4-part sequence directly as a binary? Something like:^/```^/parse #{B79CE5D3ABCD} [copy number 4 bits to end]^/```^/^/}
    sent: "2016-11-23T08:35:54.426Z"
    v: 1
    author: "576105b9c2f0db084a1df4f6"
) #(
    id: "583553c1b07a1fd3482f15be"
    text: "@rebolek +1 That's my point. Feel free to ask!"
    sent: "2016-11-23T08:30:57.806Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58355157c0a27329230066cd"
    text: {@jthsmith You’re welcome. If you have any other questions, feel free to ask!}
    sent: "2016-11-23T08:20:39.207Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583551242db95267046e2bc5"
    text: {Wow thanks for the quick and helpful reply. Just tried the latest build and sure 'nough it works:^/```^/red>> to-integer #{B79CE5D3}^/== -1214454317^/```^/In fact it works better than Rebol 3 in correctly handling the negative (R2 works correctly as well). Thanks!^/}
    sent: "2016-11-23T08:19:48.155Z"
    v: 1
    author: "576105b9c2f0db084a1df4f6"
) #(
    id: "58354f6d52af72f054338930"
    text: {There has been a lot of work on make/to conversions in recent days, so latest version may have it already.}
    sent: "2016-11-23T08:12:29.164Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58354f5d9a5479d0484ee940"
    text: {@meijeru @maximvl ^/If i post code over here i don't do optimization, documentation and error checking (just the bare minimal code, no "fancy" stuff to distract or confuse the reader). I will leave all other things to the reader. He/she will stumbles upon the errors and in the process will learn how to avoid them. In a real program it's a different story. I think this is not the place for real programs (gists would be better). Only if code is plain wrong i would mention this, otherwise it might scare people off to show their code. I hope this is not the way this community will go. Do'nt get me wrong, i appreciate any comments on my code!^/}
    sent: "2016-11-23T08:12:13.762Z"
    editedAt: "2016-11-23T08:17:44.785Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58354f359fd0a9bb4709c32a"
    text: {@jthsmith If you look at https://github.com/red/red/blob/master/docs/conversion-matrix.xlsx for binary!->integer!, it says *base 16 binary as integer*. So expect it in next release.}
    sent: "2016-11-23T08:11:33.414Z"
    editedAt: "2016-11-23T08:13:37.913Z"
    v: 3
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58354e7bcc0ea2cf7785c006"
    text: {How do I convert binary numbers to integers? In Rebol it's as simple as^/```^/to-integer #{B79CE5D3}^/== 3080512979^/```}
    sent: "2016-11-23T08:08:27.208Z"
    v: 1
    author: "576105b9c2f0db084a1df4f6"
) #(
    id: "583474c1b07a1fd3482a5f24"
    text: {> If you think about reflection, we could add the current filename in the execution context. For the line info, that is not possible as the macros are evaluated after LOAD.^/^/Thanks @dockimbel. We could probably do something like "near" in errors. Tooling could do more from there.}
    sent: "2016-11-22T16:39:29.300Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58344405b07a1fd348291974"
    text: {Correction: I should of course have written `to-red-file`. Furthermore, Red uses `/`as separator for path elements, just like Unix, so `to-red-file` is correct and OS-independent. The converse is called `to-local-file`, which generates the OS-dependent form.}
    sent: "2016-11-22T13:11:33.364Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "583440c17f83e6c9771b8152"
    text: "`to-unix-path` is how I would name it"
    sent: "2016-11-22T12:57:37.228Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58344087b07a1fd348290522"
    text: "@meijeru name is very misleading =)"
    sent: "2016-11-22T12:56:39.927Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5834405c2db9526704682ac1"
    text: {One should also add `to-rebol-file` in order to change the `\`into `/` (at least on Windows).}
    sent: "2016-11-22T12:55:56.028Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58343d887f83e6c9771b71b9"
    text: {@Rebol2Red `system/options/args` is of type `string!`, so `to string!` is not needed in your example. Moreover, `to file!` can be replaced by `as file!`.}
    sent: "2016-11-22T12:43:52.419Z"
    editedAt: "2016-11-22T12:50:46.501Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "583439322db952670467fe75"
    text: "Typo on my phone...could not delete"
    sent: "2016-11-22T12:25:22.498Z"
    editedAt: "2016-11-22T12:25:35.984Z"
    v: 2
    author: "556af11b15522ed4b3e13239"
) #(
    id: "5834359423157bcb1cc15f3c"
    text: "@fergus4 hello"
    sent: "2016-11-22T12:09:56.023Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5834292416ee9e64046fc6e5"
    text: {"Is there a way to get the name of a running script?" was not a good question^/I could have found the answer when i looked at the documentation on red-lang.org^/ Anyway, in case someone wants to know:^/```^/scriptname-as-file: ^-to file! system/options/args^/scriptname-as-string: ^-to string! system/options/args^/probe scriptname-as-file^/probe scriptname-as-string^/```^/Note: I do'nt know how to get this compiled}
    sent: "2016-11-22T11:16:52.076Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5834131a7f83e6c9771a84a2"
    text: {@greggirwin ^/> @dockimbel, I don't see info in the macro execution context currently, but is there a plan for including current file and line info? Just curious.^/^/If you think about reflection, we could add the current filename in the execution context. For the line info, that is not possible as the macros are evaluated *after* LOAD.}
    sent: "2016-11-22T09:42:50.896Z"
    editedAt: "2016-11-22T09:43:07.443Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58338c1616ee9e64046cc67d"
    text: {@Rebol2Red I use `wait 0.1` to simulate `read ...` in your code, you don't need to use `wait`. Also you should put `do-event ...` inside your `repeat` loop.}
    sent: "2016-11-22T00:06:46.691Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58335d68cc0ea2cf777b4b6a"
    text: {Reading a file is synchronus, so timer events will be blocked while you read.}
    sent: "2016-11-21T20:47:36.837Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5833447b16ee9e64046b111b"
    text: {If on-time events go at a specified rate then the reading of files will also be at that rate?^/```^/i: 1^/view [^/    at 0x0^/^-x: base hidden on-time [^/^-^-either i <= 15 [^/^-^-^-w: read/lines %testing.red ^/; change to an existing (small) file!^/^-^-^-prin i print { }  ; show it is working^/^-^-^-i: i + 1^/^-^-^-p/data: (i / 15.0)^/^-^-][^/^-^-^-t/text: "Ready"^/^-^-]^/^-]; anim here^/^-button "start" [x/rate: 10]^/^-button "stop" [x/rate: none]^/^/    t: text font-size 20 " "^/    p: progress data 0.0^/]^/```^/It looks like the reading will finish between the events but i want to be sure}
    sent: "2016-11-21T19:01:15.185Z"
    editedAt: "2016-11-21T19:10:40.204Z"
    v: 11
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5833442dc0a2732923ffda22"
    text: "@Rebol2Red what do you mean by wasted time?"
    sent: "2016-11-21T18:59:57.574Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583343689a5479d04843cf0b"
    text: {@rebolek Great, What about the waisted time? Will there even be waisted time i wonder?}
    sent: "2016-11-21T18:56:40.786Z"
    editedAt: "2016-11-21T18:58:04.234Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5833425923157bcb1cc12e49"
    text: {@Rebol2Red ^/> how to start the on-time event with a button^/^/```^/x: base on-time [...]; anim here^/button "start" [x/rate: 10]^/button "stop" [x/rate: none]^/```}
    sent: "2016-11-21T18:52:09.549Z"
    editedAt: "2016-11-21T18:53:02.989Z"
    v: 3
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5833420e7f83e6c977164dd4"
    text: {@rebolek "I would move your code to on-time event"^/Problems:^/Rate can't be set to zero so how to start the on-time event with  a button?^/Reading of files would be done in the on-time event so there will be some waisted time.}
    sent: "2016-11-21T18:50:54.841Z"
    editedAt: "2016-11-21T18:51:53.064Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58333f9dbc17b2e756fa492f"
    text: {@dockimbel, I don't see info in the macro execution context currently, but is there a plan for including current file and line info? Just curious.}
    sent: "2016-11-21T18:40:29.718Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58333af3b07a1fd34823cdf6"
    text: {Yes, different purposes benefit from different models. Gabriele's timers and Nenad's scheduler are really nice for cron type work.}
    sent: "2016-11-21T18:20:35.252Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58333a6cc0a2732923ffd5f3"
    text: {Yes, it’s nice to have. I think that for GUI animations it’s better to have just one dispatcher that takes care of all animations, but that’s fairly easy to write.}
    sent: "2016-11-21T18:18:20.035Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58333a49bc17b2e756fa2304"
    text: {I imagine we'll see higher level timer functionality, as Nenad and Gabriele built a nice timer system for R2.}
    sent: "2016-11-21T18:17:45.378Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583339617f83e6c977160eee"
    text: "Nice, multple timers!"
    sent: "2016-11-21T18:13:53.089Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "583339232db9526704629a5d"
    text: {@Rebol2Red, if you want different intervals on a single face's timer, you need to manage that yourself. Just set a higher rate, check modulos, etc.}
    sent: "2016-11-21T18:12:51.310Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5833390a9fd0a9bb47092846"
    text: {@greggirwin Thanks for nice example. @Rebol2Red for something more complicated, see http://www.red-lang.org/2016/07/eve-style-clock-demo-in-red-livecoded.html}
    sent: "2016-11-21T18:12:26.274Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583338d452af72f05432f133"
    text: {@Rebol2Red Every face can have it’s on `rate`, so also 0x0 sized faces, why not.}
    sent: "2016-11-21T18:11:32.169Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583338d22db9526704629836"
    text: {```^/view [^/    button rate 1 on-time [print ["Not a click!" now/time]]^/]^/```}
    sent: "2016-11-21T18:11:30.009Z"
    editedAt: "2016-11-21T18:11:41.522Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "583338b652af72f05432f131"
    text: {You have to set `rate` for face and then it starts to processs `on-time` events.}
    sent: "2016-11-21T18:11:02.874Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583338b416ee9e64046ab42d"
    text: "You mean i can use hidden faces?"
    sent: "2016-11-21T18:11:00.751Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58333891c0a2732923ffd57a"
    text: {@Rebol2Red if by multiple you mean multiple faces, each with its own on-time, then yes}
    sent: "2016-11-21T18:10:25.814Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58333868b07a1fd34823bd69"
    text: {@rebolek How does on-time works, i mean when does the on-time event occurs? ^/Can i have multiple on-time events?}
    sent: "2016-11-21T18:09:44.803Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "583338242db952670462935f"
    text: "NP, I feel validated now. :^^)"
    sent: "2016-11-21T18:08:36.011Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583338139fd0a9bb470926cd"
    text: {@greggirwin Oh, good. I haven’t watched the discussion closely, sorry.}
    sent: "2016-11-21T18:08:19.646Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583337f37f83e6c97716080c"
    text: {No fault of Red. Just a side effect of being in an event loop and being single threaded. And I don't think we want to head down the path of multithreading for event handlers.^/^/Bolek +1. I suggested that earlier as well.}
    sent: "2016-11-21T18:07:47.346Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583337d623157bcb1cc1297b"
    text: {@Rebol2Red I would move your code to `on-time` event.}
    sent: "2016-11-21T18:07:18.012Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5833377ec0a2732923ffd533"
    text: ":)"
    sent: "2016-11-21T18:05:50.929Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "583337749a5479d0484383e8"
    text: "I think it's still a no-no. "
    sent: "2016-11-21T18:05:40.349Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "583337299fd0a9bb470926a0"
    text: {Is it possible to use `wait` in event code? I haven’t experimented with it yet, it was big no-no in Rebol, AFAIR.}
    sent: "2016-11-21T18:04:25.768Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5833369bb07a1fd34823ad5c"
    text: {@qtxie ^/This will show at exactly the right time but then the progress is going from 30 directly to 100%^/Now i would like to ask if wait depends on the speed of the computer?^/```^/view [^/^-button "start" [^/^-^-repeat i 2259 [^/^-^-^-p/data: (i / 2259.0)^/^-^-^-w: read/lines %testing.red ; change to an existing (small) file!^/^-^-]^/^-^-wait 0.1^/        loop 5 [do-events/no-wait]       ;-- let the View engine to process some events^/^-^-t/text: "Ready"^/^-]^/^-t: text font-size 20 " "^/^-p: progress data 0.0^/]^/```^/}
    sent: "2016-11-21T18:02:03.044Z"
    editedAt: "2016-11-21T18:02:59.952Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58332fe9c790e0ec56139323"
    text: {@qtxie Thanks. Just a little bit earlier before reaching 100% which is fine by me.^/I did not have an issue of a frozen window after pressing the start button.^/Maybe because of the windows version? I am using windows 10}
    sent: "2016-11-21T17:33:29.897Z"
    editedAt: "2016-11-21T17:42:55.687Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5832f1a13418b2e57f2be41b"
    text: {@Rebol2Red Another issue is the window is frozen after pressing the `start` button. It can be improved as below:^/```^/view [^/    button "start" [^/        repeat i 159 [^/            p/data: (i / 159.0)^/            wait 0.1^/            loop 5 [do-events/no-wait]       ;-- let the View engine to process some events^/        ]^/        t/text: "Ready"^/    ]^/    t: text font-size 20 " "^/    p: progress data 0.0^/]^/```}
    sent: "2016-11-21T13:07:45.905Z"
    editedAt: "2016-11-21T13:09:14.221Z"
    v: 7
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5832f080a5bc784f56584e60"
    text: {There is a hack to turn off it, maybe we should turn it off?}
    sent: "2016-11-21T13:02:56.739Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5832f05d3418b2e57f2be241"
    text: {It's caused by the animation of the progressbar on Windows.}
    sent: "2016-11-21T13:02:21.944Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5832f0283418b2e57f2be1c9"
    text: {> If i use this script i get the text "Ready" way before reaching 100%.}
    sent: "2016-11-21T13:01:28.362Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5832f00fc6c4993013c28093"
    text: "@Rebol2Red "
    sent: "2016-11-21T13:01:03.721Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5832d3a7613368f619dc9287"
    text: {```^/view [^/^-button "start" [^/^-^-repeat i 2259 [^/^-^-^-p/data: (i / 2259.0)^/^-^-^-w: read/lines %testing.red ^/ ; change to an existing (small) file!^/^-^-]^/^-^-p/data: 1.0 ^/^-^-t/text: "Ready"^/^-]^/^-t: text font-size 20 " "^/^-p: progress data 0.0^/]^/```^/At about 30 percent the text shows up^/^/note: ^/In fact i am using the above script as the test file.^/^/Is there a way to get the name of a running script?^/so i do'nt have to ask someone who test it to change the name of the file. ^/That way people are more willing to test them.^/^/Rebol2: print system/options/script^/Red: print system/options/script returns none^/}
    sent: "2016-11-21T10:59:51.380Z"
    editedAt: "2016-11-21T11:08:43.693Z"
    v: 9
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5832cece297a180b4f1e213f"
    text: {@endo64 That does'nt work (at least not over here).^/I was using a small file and a "small" loop, but even when using a large loop and p/data: 1.0 the text shows up way earlier.}
    sent: "2016-11-21T10:39:10.605Z"
    editedAt: "2016-11-21T10:48:59.695Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5832ccb0b7cf637f2ac8e9e0"
    text: {Just set `p/data: 1.0 ` before `t/text: "Ready"`}
    sent: "2016-11-21T10:30:08.413Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5832c6ace712c9a118934352"
    text: {```^/view [^/^-button "start" [^/^-^-repeat i 159 [^/^-^-^-p/data: (i / 159.0)^/^-^-^-w: read/lines %testing.red ; change to an existing (small) file!^/^-^-]^/^-^-t/text: "Ready"^/^-]^/^-t: text font-size 20 " "^/^-p: progress data 0.0^/]^/```^/If i use this script i get  the text "Ready" way before reaching 100%. ^/Am i doing things wrong (or how can i  "synchronise" this)?}
    sent: "2016-11-21T10:04:28.323Z"
    editedAt: "2016-11-21T10:08:54.481Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5832bba8b7cf637f2ac888e7"
    text: {@qtxie @geekyi^/Now i get it.^/Why didn't i thought of that before!^/I thought there was something wrong with my computer.^/So the solution is to write the file as latin-1 (ISO-8859) instead of utf-16?^/Or maybe better to read the file directly in latin-1. (not implemented yet?)^/Maybe a hint howto read directly? (I could use a online convertor for writing)^/```^/read/lines/as %bookmarks.txt 'latin-1 ^/*** Internal Error: reserved for future use (or not yet implemented)^/*** Where: read^/```}
    sent: "2016-11-21T09:17:28.938Z"
    editedAt: "2016-11-21T09:22:23.654Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "583259ac5eb8ea792a4658d0"
    text: {Here explains how does red string handle unicode: http://www.red-lang.org/2012/09/plan-for-unicode-support.html}
    sent: "2016-11-21T02:19:24.640Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58325850238757566cd0aff1"
    text: {@Rebol2Red If the text contains non-ascii characters, reading as string will take memory 2 ~ 5 times larger than the original file size. }
    sent: "2016-11-21T02:13:36.394Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58323b63238757566cd039c3"
    text: {@geekyi Can it be Red is handling some bytes in the file not right so it keeps on reading?^/Maybe some invalid utf-8?^/That could be the reason why read/binary works well.^/But then again, you mentioned a spike too with read/lines^/I'll give up on this. Never ever had problems reading files with Freebasic. ^/I have tested it with a simular program in Freebasic and the memory it used is steady at 0.5 MB even while displaying every line in the file.^/I could ofcourse read the files with Freebasic and process it with Red but i like to do all things in one program.}
    sent: "2016-11-21T00:10:11.530Z"
    editedAt: "2016-11-21T00:15:37.787Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "583227e2238757566ccfe182"
    text: {@geekyi I use the same version 20-11-2016. I'll look into process hacker.}
    sent: "2016-11-20T22:46:58.235Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "583227c8297a180b4f1b2e8b"
    text: {Also [process hacker](http://processhacker.sourceforge.net/downloads.php) is real nice for debugging on windows}
    sent: "2016-11-20T22:46:32.511Z"
    editedAt: "2016-11-20T22:48:15.239Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5832276a297a180b4f1b2c55"
    text: {:point_up: [November 21, 2016 3:32 AM](https://gitter.im/red/help?at=5832247023ce1ae73c0701c0) @Rebol2Red red itself doesn't write, maybe your OS writes swap.. still a bit strange.. I'm using `red-20nov16-88de5e0`}
    sent: "2016-11-20T22:44:58.963Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583226e8b7cf637f2ac5f2ce"
    text: {@geekyi Alright, thanks. I'll hope to find the solution and will post it here when i find one.}
    sent: "2016-11-20T22:42:48.470Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5832269c297a180b4f1b2875"
    text: "@Rebol2Red gonna go now, hope it helps!"
    sent: "2016-11-20T22:41:32.246Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5832266eb7cf637f2ac5f0cc"
    text: "Maybe without the `/lines`"
    sent: "2016-11-20T22:40:46.340Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5832265fe712c9a118904ce6"
    text: {`read/lines/part/seek %file.txt chunk offset` might help}
    sent: "2016-11-20T22:40:31.371Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583224d85eb8ea792a457967"
    text: {[![image.png](https://files.gitter.im/red/help/tjI1/thumb/image.png)](https://files.gitter.im/red/help/tjI1/image.png)}
    sent: "2016-11-20T22:34:00.774Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583224ccb7cf637f2ac5e6d6"
    text: "Yeah, maybe swap:"
    sent: "2016-11-20T22:33:48.822Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5832247023ce1ae73c0701c0"
    text: {@geekyi I think i have a reason why.^/ I only have 112 MB free on my harddrive. Maybe Red writes to the drive while reading?^/And yes i have other code i shall test it in another file. I'll be back soon.}
    sent: "2016-11-20T22:32:16.530Z"
    editedAt: "2016-11-20T22:33:00.999Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58322407238757566ccfcfa0"
    text: "Do you have any other code in that file?"
    sent: "2016-11-20T22:30:31.019Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583223c5e712c9a118903ef1"
    text: "Maybe.. but it shouldn't?"
    sent: "2016-11-20T22:29:25.920Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58322386297a180b4f1b1a9c"
    text: {@geekyi Strange, i can't explain why my computer behaves different. Maybe because you have more memory  free?}
    sent: "2016-11-20T22:28:22.571Z"
    editedAt: "2016-11-20T22:28:41.920Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58322344238757566ccfccb2"
    text: {[![image.png](https://files.gitter.im/red/help/sj7u/thumb/image.png)](https://files.gitter.im/red/help/sj7u/image.png)}
    sent: "2016-11-20T22:27:16.636Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583223285eb8ea792a4571a9"
    text: {With `read/lines`, there's a huge 771mb spike like your graph}
    sent: "2016-11-20T22:26:48.788Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583222eb238757566ccfcb0d"
    text: "Win 10 64bit"
    sent: "2016-11-20T22:25:47.509Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583222df23ce1ae73c06f9ae"
    text: "Ok.. `read/lines` crashes it for me"
    sent: "2016-11-20T22:25:35.880Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583222c8238757566ccfca69"
    text: {@geekyi I suppose you have much more memory than this "old" pc which has 4G  ^/I use windows 10. Which version are you using?}
    sent: "2016-11-20T22:25:12.425Z"
    editedAt: "2016-11-20T22:25:28.807Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58322244b563b5516c44a5c9"
    text: {:point_up: [November 21, 2016 1:45 AM](https://gitter.im/red/help?at=58320b6ab563b5516c4436b8) from this it appears much larger tho.. ?}
    sent: "2016-11-20T22:23:00.174Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58322203e712c9a11890383a"
    text: {Yeah, with plain text.. 3x as much memory.. with your sample text copied as many times to make size ~3.94MB }
    sent: "2016-11-20T22:21:55.687Z"
    editedAt: "2016-11-20T22:23:51.035Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5832219db7cf637f2ac5d880"
    text: {[![image.png](https://files.gitter.im/red/help/qDX9/thumb/image.png)](https://files.gitter.im/red/help/qDX9/image.png)}
    sent: "2016-11-20T22:20:13.739Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583220d423ce1ae73c06f04e"
    text: {@geekyi Yep, this works, but now i have the problem that i can't directly use the parse command on the binary data. ^/I'll first have to make strings from the binary data and then do the parsing on it, which takes ... time.^/I do'nt read plain txt files but html files which must be parsed.}
    sent: "2016-11-20T22:16:52.021Z"
    editedAt: "2016-11-20T22:18:42.330Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58321df3b563b5516c4491be"
    text: "@Rebol2Red At least a workaround I hope ;-)"
    sent: "2016-11-20T22:04:35.009Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58321de1238757566ccfb6bb"
    text: {I don't see that much of an increase there, ~164MB as you can see, which is expected.. haven't tried plain text file yet}
    sent: "2016-11-20T22:04:17.201Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "58321dc623ce1ae73c06e494"
    text: "Is this a workaround or my bad or...?"
    sent: "2016-11-20T22:03:50.074Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58321d8b613368f619d9580c"
    text: {@Rebol2Red I changed the `read` line to^/```^/read/binary %red-061.exe ; size is <1MB ;P^/```}
    sent: "2016-11-20T22:02:51.080Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58321d30b7cf637f2ac5c6c2"
    text: {[![image.png](https://files.gitter.im/red/help/bPga/thumb/image.png)](https://files.gitter.im/red/help/bPga/image.png)}
    sent: "2016-11-20T22:01:20.572Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58321b19e712c9a118900e8c"
    text: {Just a small sample of the bookmarks.txt^/```^/Acer Store Europe^/http://go.acer.com/?id=14428^/Acer Store US^/http://us-store.acer.com/^/Amazon^/http://www.amazon.com/?force-full-site=1^/Artificial Intelligence - Chapter 2 Notes - Computer Science Now^/http://www.comsci.us/ai/notes/chap02.html^/Back2BASIC - B2B Code Show^/http://back2basic.phatcode.net/?Issue_%235:B2B_Code_Show^/Back2BASIC - B2B Code Show: Polyplotter^/http://back2basic.phatcode.net/?Issue_%237:B2B_Code_Show%3A_Polyplotter^/BBC^/http://www.bbc.co.uk^/Beyond The Cosmos Quantum Mechanics - YouTube^/```^/Ofcourse i would'nt read this file 159 times, but is was just a test to see if i could read ^/long files 159 times, which i have to do for my bookmarksextractor program.}
    sent: "2016-11-20T21:52:25.689Z"
    editedAt: "2016-11-20T22:00:08.264Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58321a8423ce1ae73c06cefe"
    text: "@Rebol2Red Yeah thanks"
    sent: "2016-11-20T21:49:56.708Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58321a65b563b5516c4481f4"
    text: {@geekyi What else can it be? The code is on the left side of the screenshot.^/You mean paste the code over here?^/```^/view [^/^-button "start" [^/^-^-repeat i 159 [^/^-^-^-p/data: (i / 159.0)^/^-^-^-p/data: to percent! p/data^/^-^-^-read %bookmarks.txt ; size is 4,66MB^/^-^-]^/^-^-t/text: "Ready"^/^-]^/^-t: text font-size 20 " "^/^-p: progress data 0.0^/]^/```^/The bookmarks.txt is just a long plain txt file with links and descriptions in it.}
    sent: "2016-11-20T21:49:25.172Z"
    editedAt: "2016-11-20T21:50:00.787Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58321814a5bc784f5658181b"
    text: {@Rebol2Red simple GC should be there in 0.6.4. See https://trello.com/b/FlQ6pzdB/red-tasks-overview}
    sent: "2016-11-20T21:39:32.396Z"
    editedAt: "2016-11-20T21:39:38.510Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5832180d23ce1ae73c06c37e"
    text: {:point_up: [November 21, 2016 1:45 AM](https://gitter.im/red/help?at=58320b6ab563b5516c4436b8) can you paste a gist?}
    sent: "2016-11-20T21:39:25.997Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "583217c423ce1ae73c06c2c5"
    text: "@Rebol2Red is it `read`ing that causes the spike?"
    sent: "2016-11-20T21:38:12.524Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58321751b7cf637f2ac5ab25"
    text: {@rebolek Do you have any idea how long this would take, because i now get the idea i have more problems which might be related to this problem. }
    sent: "2016-11-20T21:36:17.708Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "583216a83418b2e57f2bb174"
    text: {@Rebol2Red not yet, you have to wait for garbage collector.}
    sent: "2016-11-20T21:33:28.408Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58321689297a180b4f1ade73"
    text: {I wonder if there is a way to clear the memory after reading and processing a file?}
    sent: "2016-11-20T21:32:57.806Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58321287238757566ccf7e3f"
    text: {Correction: ^/It is not at 41 percent when i get the error but at 25.78 percent^/After reading 41 times 4,66 MB  (after reading 191MB) so the used memory is a lot more than 3 to 4 times. See the gigantic spike.}
    sent: "2016-11-20T21:15:51.564Z"
    editedAt: "2016-11-20T21:21:17.801Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58320fd123ce1ae73c069b2a"
    text: {Memory = Geheugen ^/Available = Beschikbaar^/In use = In gebruik}
    sent: "2016-11-20T21:04:17.439Z"
    editedAt: "2016-11-20T21:09:31.425Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58320b6ab563b5516c4436b8"
    text: {Can someone explains this?^/I read 159 times a plain text file which is 4,66MB ^/After 41 percent of reading i get an out of memory error?^/Looks like reading takes many more memory than expected, about 3 to 4 times^/^/[![memory.jpg](https://files.gitter.im/red/help/n4ry/thumb/memory.jpg)](https://files.gitter.im/red/help/n4ry/memory.jpg)}
    sent: "2016-11-20T20:45:30.570Z"
    editedAt: "2016-11-20T20:48:57.555Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "583202595eb8ea792a44c56b"
    text: {Can i get the name of the script while executing it? ^/Rebol2: print system/options/script^/Red returns none}
    sent: "2016-11-20T20:06:49.424Z"
    editedAt: "2016-11-20T20:08:38.614Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "582ff7c3238757566cc62920"
    text: {@DonaldTsang Are you looking for something along these lines:  https://gist.github.com/iceflow19/f7d31ef5890f9d16e737e89086294bee}
    sent: "2016-11-19T06:57:07.862Z"
    v: 1
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "582f62c3b563b5516c385914"
    text: "Gonna retire now"
    sent: "2016-11-18T20:21:23.344Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f62b7e712c9a11883dd63"
    text: {@DonaldTsang basically, if you are just trying to count code points vs bytes `length?` works on `binary!` and `string!`. I think then you might need a custom UTF-16 type}
    sent: "2016-11-18T20:21:11.116Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f61c2b7cf637f2ab9ae2a"
    text: {@geekyi So basically code point count vs byte count}
    sent: "2016-11-18T20:17:06.204Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f614ab7cf637f2ab9ac42"
    text: {@gearss btw, I've also tried what  @WiseGenius has done, but the whole console instead.. didn't work because red requires libcurl on linux then. SHould try again sometime}
    sent: "2016-11-18T20:15:06.416Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f5d53613368f619cd41d8"
    text: "@geekyi I think so"
    sent: "2016-11-18T19:58:11.966Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f5be9e712c9a11883b707"
    text: {>pervasiveness of JavaScript means that UTF-16 interoperability will be needed as least as long as the Web is alive. JavaScript strings are fundamentally UTF-16. This is why we've tentatively decided to go with UTF-16 in Servo (the experimental browser engine) -- converting to UTF-8 every time text needed to go through the layout engine would kill us in benchmarks.^/For new APIs in which legacy interoperability isn't needed, I completely approve of this document.}
    sent: "2016-11-18T19:52:09.212Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f5ba4e712c9a11883b568"
    text: {@DonaldTsang are you talking about [this](https://news.ycombinator.com/item?id=3906590)}
    sent: "2016-11-18T19:51:00.153Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f5ab8b563b5516c382be2"
    text: {^/> HTML+CSS+JS is important (they use UTF16)^/^/UTF16 is used internally for performance right?}
    sent: "2016-11-18T19:47:04.606Z"
    editedAt: "2016-11-18T19:53:11.454Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "582f599d5eb8ea792a38d292"
    text: {@geekyi when you convert from UTF8 to UTF16, or other common encodings like Big5/GB/JIS, you need to convert `bytes` to `strings` and then back to `bytes`}
    sent: "2016-11-18T19:42:21.343Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f5977297a180b4f0eec21"
    text: {> @geekyi No, `string` uses code points or "characters" (which transcends binary data) while `bytes` represents binary data. I use `bytes` for texts sometimes and read/write files other times...^/FYI, never disagreed with `string` being a text type with virtual encodings}
    sent: "2016-11-18T19:41:43.069Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f58ef2cf343a318c28cda"
    text: "I think I get what you are trying to say.."
    sent: "2016-11-18T19:39:27.262Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f58e1e712c9a11883a13d"
    text: "@DonaldTsang Don't they ~~all~~ mostly use UTF-8"
    sent: "2016-11-18T19:39:13.203Z"
    editedAt: "2016-11-18T19:40:11.340Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "582f58c5613368f619cd1673"
    text: {But if you want to work with other encodings, I don't know. Might have to write that part yourself}
    sent: "2016-11-18T19:38:45.278Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f58c1b563b5516c381a42"
    text: {@geekyi but compatibility with HTML+CSS+JS is important (they use UTF16)}
    sent: "2016-11-18T19:38:41.551Z"
    editedAt: "2016-11-18T19:42:53.569Z"
    v: 2
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f5884297a180b4f0ee5a5"
    text: {IMHO, for text, there's little reason to not use anything other than UTF-8 these days}
    sent: "2016-11-18T19:37:40.676Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f5876613368f619cd142f"
    text: "But lets focus on the text part of the equation"
    sent: "2016-11-18T19:37:26.822Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f5850238757566cc36a75"
    text: {@geekyi No, `string` uses code points or "characters" (which transcends binary data) while `bytes` represents binary data. I use `bytes` for texts sometimes and read/write files other times...}
    sent: "2016-11-18T19:36:48.605Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f57b4c6c4993013c1ebf8"
    text: {More specifically, you want to work with text encodings, rather than binary data?}
    sent: "2016-11-18T19:34:12.483Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f5778a5bc784f5657ae95"
    text: {@DonaldTsang Er.. I thought that was what I said :D SO you want to convert from one code point into another?}
    sent: "2016-11-18T19:33:12.160Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f573f297a180b4f0edfdb"
    text: {@geekyi there is a function that convert `string` into `bytes` by encoding systems}
    sent: "2016-11-18T19:32:15.821Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f571cb7cf637f2ab9699d"
    text: {@geekyi No, in Python3 `string` is universal and count by the character (and other diacritics etc.) while `bytes` can represent UTF8, UTF16, file data or other "byte-like" things}
    sent: "2016-11-18T19:31:40.356Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f5679df9f0f6e7f57353a"
    text: {(I've not really had a *need* for unicode encoding other than utf-8)}
    sent: "2016-11-18T19:28:57.151Z"
    editedAt: "2016-11-18T19:29:38.036Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "582f5642a5bc784f5657ae54"
    text: {@DonaldTsang yes, in Python3 (to be specific) I recall you have fixed length `bytes` and the `string` type is unicode, utf-8}
    sent: "2016-11-18T19:28:02.168Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f55dce712c9a118838f83"
    text: {@geekyi the Most common Unicode encoding scheme is UTF8 and UTF16}
    sent: "2016-11-18T19:26:20.714Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f55c0238757566cc35cd6"
    text: {@geekyi So basically in Python, there are different byte encodings (`bytes`, also used for binary data and file blobs) and one singular universal character set/string (`str`)}
    sent: "2016-11-18T19:25:52.859Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "582f5568df9f0f6e7f5734a5"
    text: {@donaldtsang can you post a concrete example. Here or SO}
    sent: "2016-11-18T19:24:24.655Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582f12f25eb8ea792a36f4ad"
    text: {@gearss Someone correct me if I'm wrong, but if you know how to compile Red from source, you could theoretically cross-compile the Red interpreter as I compiled `hello.red` in my similar question [here](http://stackoverflow.com/questions/24360991/how-do-i-run-an-android-app-ive-written-in-red), and then follow the answers there, especially the top 2, to get it working on Android.^/I haven't tried it for the Red interpreter, but it worked for `hello.red`. I haven't done it in a long time, and Red has been worked on a lot since then, so there's a small chance that the Android part might not work anymore. Someone else might know, or you could just try it. It won't take long.^/Have you compiled Red from source before? It isn't hard.}
    sent: "2016-11-18T14:40:50.908Z"
    editedAt: "2016-11-18T14:41:09.275Z"
    v: 2
    author: "556ae44715522ed4b3e13190"
) #(
    id: "582ef09c004785313cbf591e"
    text: "how can I install Red on my android phone?"
    sent: "2016-11-18T12:14:20.299Z"
    v: 1
    author: "582eef6bd73408ce4f36dcb7"
) #(
    id: "582bbdcf37fbab5354b91b9f"
    text: "You’re welcome."
    sent: "2016-11-16T02:00:47.002Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582bbdace097df7575b8930e"
    text: "@rebolek  Ah, got it.  many thanks for your help "
    sent: "2016-11-16T02:00:12.654Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "582bbc2a4c9177c45e314ee8"
    text: "It’s about in the half of the page."
    sent: "2016-11-16T01:53:46.218Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582bbbffc2f2cf727517a609"
    text: "sorry will look again"
    sent: "2016-11-16T01:53:03.203Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "582bbbde4c9177c45e314ecb"
    text: {@TomGrey303 I don’t understand, all the options are explained there. For example:^/```^/-r, --no-runtime               : Do not include runtime during Red/System^/                                 source compilation.^/```}
    sent: "2016-11-16T01:52:30.868Z"
    editedAt: "2016-11-16T01:52:42.693Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "582bbb79c2f2cf727517a459"
    text: {I looked there but nothing explains it to me -  '-c'  means compile. Then   '-c -t windows' means compile to windows, but whats the rest for ? - just struggling here a bit.}
    sent: "2016-11-16T01:50:49.434Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "582bb8f937fbab5354b91aeb"
    text: "search for `options`"
    sent: "2016-11-16T01:40:09.187Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582bb8ef715933bd55738dde"
    text: "@TomGrey303 see https://github.com/red/red/"
    sent: "2016-11-16T01:39:59.510Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582bb8ce65485ebc679f50c7"
    text: {Hi, im pretty new to red  - Is there any info on the Red compile switches, not sure if thats the correct term - I mean, i understand     -c   and   -t   but there's more   -r   -  are there any docs on this ?}
    sent: "2016-11-16T01:39:26.733Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "582a16ad31c5cbef43f68586"
    text: {@geekyi  The image was  my desktop size 1640x1050 , after resizing it , i was able to drag&drop it here. ^/I just don't know right away after which size it works (Think it was 800x600, but i am not sure).^/Just do a little trial and error if you have to upload an image here.}
    sent: "2016-11-14T19:55:25.217Z"
    editedAt: "2016-11-14T19:59:24.362Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58283b22e097df7575a54da9"
    text: {I found http://getgreenshot.org/ , pretty lightweight and featureful}
    sent: "2016-11-13T10:06:26.965Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58283adf88fa21d53c162fe2"
    text: "image being too big?"
    sent: "2016-11-13T10:05:19.496Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58283ac745c9e3eb43305cc0"
    text: {@Rebol2Red so the error was due to your ^/> i can't: ^/Drag the screenshot onto this, gives an upload error^/It was too big to drag onto here, hope it isn't too small now :)}
    sent: "2016-11-13T10:04:55.136Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582839b145c9e3eb433058a2"
    text: "It's much better today tho"
    sent: "2016-11-13T10:00:17.944Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582839a788fa21d53c1628d4"
    text: {irx thanks! Will try it out, I need an alternative when gitter.im is down for me. ISP still recovering from the recent dns attacks}
    sent: "2016-11-13T10:00:07.564Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58271fdd65485ebc678713f9"
    text: {`irx` It's great for reading (except edited posts are hard to read this way). It's not so great to post.}
    sent: "2016-11-12T13:57:49.732Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "58271f67e097df7575a086c0"
    text: {`irx` @geekyi, I'm using gitter bridged into matrix and then the matrix client. Mostly riot android, sometimes riot.im/develop web-client.}
    sent: "2016-11-12T13:55:51.338Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "5826edace462097a303c33ec"
    text: "irx which client are you using?"
    sent: "2016-11-12T10:23:40.178Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58265947df5ae9664546804c"
    text: "@RiVeND Thanks. I removed the link."
    sent: "2016-11-11T23:50:31.278Z"
    editedAt: "2016-11-11T23:50:57.665Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5825ecbe6cb7207630647574"
    text: {`irx` @fergus4 and there is https://gitter.im/red which will send you to the listing of all red rooms.}
    sent: "2016-11-11T16:07:26.844Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "5825af0fe097df75759a44f6"
    text: {@dockimbel One room listed in there no longer appears to exist: red/red/char-datatype}
    sent: "2016-11-11T11:44:15.186Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "58254c04e462097a30350c06"
    text: {@fergus4 See https://github.com/red/red/wiki/Gitter-Room-Index}
    sent: "2016-11-11T04:41:40.695Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582506eee097df75759770b7"
    text: {I did not know this room existed. Gitter not good at making available rooms visible.}
    sent: "2016-11-10T23:46:54.652Z"
    v: 1
    author: "556af11b15522ed4b3e13239"
) #(
    id: "5824c99445c9e3eb432162b0"
    text: {[![Knipsel.jpg](https://files.gitter.im/red/help/Cx4g/thumb/Knipsel.jpg)](https://files.gitter.im/red/help/Cx4g/Knipsel.jpg)}
    sent: "2016-11-10T19:25:08.518Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5824c92398d63ff57f222f5a"
    text: {@Rebol2Red I use http://imgur.com for sharing images}
    sent: "2016-11-10T19:23:15.051Z"
    editedAt: "2016-11-10T19:23:25.729Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5824c81865485ebc677c5c4f"
    text: {[![screenshot.jpg](https://files.gitter.im/red/help/xJUg/thumb/screenshot.jpg)](https://files.gitter.im/red/help/xJUg/screenshot.jpg)}
    sent: "2016-11-10T19:18:48.039Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5824c722df5ae966453ea938"
    text: {Is there a simple way to share a link or an image directly?^/^/Because of murphy's law i can't: ^/Drag the screenshot onto this, gives an upload error^/ Can't share it with google drive despite the tutorial to do this^/Uploaded to my ftp server but can't access it^/^/It was too big to drag onto here, hope it isn't too small now :)}
    sent: "2016-11-10T19:14:42.273Z"
    editedAt: "2016-11-10T19:20:10.096Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58249cbddf5ae966453da14a"
    text: {@Rebol2Red could you show screenshot of the result? I don't have windows to test right now :)}
    sent: "2016-11-10T16:13:49.944Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582492d745c9e3eb432020aa"
    text: {If someone is interested^/Here is a version of the code from DideC with the addition of returning the clicked image as a pair^/```^/block: copy []^/append block [size 800x600 below]^/repeat j 3 [^/    append block reduce ['panel sub: copy [origin 0x0 below]]^/    repeat i 7 [^/        t: rejoin["t" j "," i]^/        append sub compose [^/            image 50x50 extra (as-pair j i) [print ["clicked" face/extra]] text (t)  return^/        ]^/    ]^/]^/;probe block^/view block^/```}
    sent: "2016-11-10T15:31:35.938Z"
    editedAt: "2016-11-10T15:35:27.788Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58248da26cb72076305d6654"
    text: {Yep that's it, thanks again^/Maybe someone knows a version (maybe using group-box) without the 2 loops?}
    sent: "2016-11-10T15:09:22.527Z"
    editedAt: "2016-11-10T15:19:05.544Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58248b20df5ae966453d2978"
    text: {Use `panel` maybe :^/```^/block: copy []^/append block [size 800x600 below]^/repeat j 3 [^/    append block reduce ['panel sub: copy [origin 0x0 below]]^/    repeat i 7 [^/        t: rejoin["t" i]^/        append sub compose [^/            image 50x50 text (t) return^/        ]^/    ]^/]^/probe block^/view block^/```}
    sent: "2016-11-10T14:58:40.261Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58247f5165485ebc677a9bd3"
    text: {Warning: Maybe a silly question ahead :)^/^/I want seven images on a row with a text below it (3 times)^/like this :^/^/i01 i02 i03 i04 i05 i06 i07^/t01 t02 t03 t04 t05 t06 t07^/^/i08 i09 i10 i11 i12 i13 i14^/t08 t09 t10 t11 t12 t13 t14^/^/i15 i16 i17 i18 i19 i20 i21^/t15 t16 t17 t18 t19 t20 t21^/^/i stands for image, t stands for text    (formatting is lost during posting)^/^/I have this code:^/```^/block: copy []^/append block [size 800x600]^/repeat i 21 [^/^-t: rejoin["t" i]^/^-append block compose [^/^-^-image 50x50 text (t)^/^-]^/] ^/probe block^/view block^/```^/^/What can be done? (I prefer the 'easy' way)^/^/I thought about:^/^/Use a group-box: ^/But then i can't use return in it to put the text below the picture^/Return is not allowed in a group-box block^/Is there any way to put the text below the image inside a group-box?^/^/Use 2 loops:^/I could place the images and text at a fixed place but the code would ^/be 'ugly' and not 'dynamic'^/^/Let an expert show me how (Think it comes down to this :) )}
    sent: "2016-11-10T14:08:17.857Z"
    editedAt: "2016-11-10T14:14:52.169Z"
    v: 7
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58247541d695f5db0f4dce14"
    text: {That’s possible. I haven’t tried it, I do not want to spent much time messing with web right now.}
    sent: "2016-11-10T13:25:21.543Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5824746265485ebc677a5521"
    text: {since we have stdin/out I think it is possible to use CGI}
    sent: "2016-11-10T13:21:38.887Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58247319c2c2b0744e33ceac"
    text: {@maximvl No, not yet. It runs on Apache server that has R3 CGI support, but these are static pages, so no Redbol is used.}
    sent: "2016-11-10T13:16:09.829Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582472dae097df757593e611"
    text: "@rebolek do you run it on redbol backend?"
    sent: "2016-11-10T13:15:06.537Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582472bed695f5db0f4dcd3e"
    text: "Hm, I probably should make it bit nicer ;)"
    sent: "2016-11-10T13:14:38.059Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582472a4c2c2b0744e33ce83"
    text: "Here is list of them http://red.qyz.cz/"
    sent: "2016-11-10T13:14:12.048Z"
    editedAt: "2016-11-10T13:14:19.989Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58247294e462097a30306ab6"
    text: "thanks"
    sent: "2016-11-10T13:13:56.756Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5824729445c9e3eb431f4753"
    text: {and http://rebol.qyz.cz/subdom/red/safe-and-persistent-locals.html}
    sent: "2016-11-10T13:13:56.359Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "582472936cb72076305cb970"
    text: "oh nice, I missed this one"
    sent: "2016-11-10T13:13:55.561Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58247283c48663546179732c"
    text: "@maximvl http://red.qyz.cz/code-is-data.html"
    sent: "2016-11-10T13:13:39.896Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5824726ac2f2cf7275f338d4"
    text: {are you talking about this one http://redlanguageblog.blogspot.co.uk/ ?}
    sent: "2016-11-10T13:13:14.413Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5824725fdf5ae966453c8e79"
    text: {I found the rebol articles always a bit hard to read, I prefer your style :)}
    sent: "2016-11-10T13:13:03.585Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "5824723fe462097a303068f7"
    text: {LOL there is enough to learn and to play with, already in those two articles}
    sent: "2016-11-10T13:12:31.422Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "58247223c2c2b0744e33ce30"
    text: {But daily dose...I don’t think I can write one every day ;)}
    sent: "2016-11-10T13:12:03.662Z"
    editedAt: "2016-11-10T13:12:12.506Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58247211c2c2b0744e33ce27"
    text: {@wolframkriesing Thanks! I am glad you find it helpful!}
    sent: "2016-11-10T13:11:45.497Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58246f5fdf5ae966453c7c6d"
    text: {@rebolek cool articles! keep it up, fun to read and learning red by applying them. My daily dose of Red :)}
    sent: "2016-11-10T13:00:15.042Z"
    editedAt: "2016-11-10T13:00:26.665Z"
    v: 2
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "582463ed65485ebc6779e2f8"
    text: "Now i get it, thanks for explaining!"
    sent: "2016-11-10T12:11:25.712Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58246395d695f5db0f4dc92d"
    text: {To use `extra` in VID, you write `extra` keyword, followed by some value.}
    sent: "2016-11-10T12:09:57.424Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5824637735e6cf0547738ed1"
    text: {@Rebol2Red `extra` is part of `face!` definition (try `red>> ? face!`) that can be used for storing user data.}
    sent: "2016-11-10T12:09:27.236Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58246332e462097a30301b0c"
    text: {Maybe i should refrase myself: Is extra a keyword or something you can add to an object or ...?}
    sent: "2016-11-10T12:08:18.702Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58245f92c486635461796dd7"
    text: {For example:^/^/```^/block:                 copy []^/number-of-buttons:     10^/fontsize:             50^/buttonsize:         100x70^/repeat i number-of-buttons [^/    append block compose [^/    ^-button buttonsize font-size fontsize extra (i) (form i) [print ["clicked" face/extra]]^/    ]^/]^/probe block^/view layout block ; post-processing with layout^/```}
    sent: "2016-11-10T11:52:50.178Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58245ef2e462097a3030011d"
    text: "Please do!"
    sent: "2016-11-10T11:50:10.294Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58245edcc486635461796dc4"
    text: "@Rebol2Red let me rewrite your example..."
    sent: "2016-11-10T11:49:48.709Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58245e30c2f2cf7275f2c8b5"
    text: {@rebolek I don't get it.  Where does extra fit in?}
    sent: "2016-11-10T11:46:56.772Z"
    editedAt: "2016-11-10T11:47:47.733Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5824543e35e6cf0547738bb3"
    text: {Something like: `view layout [button extra 'my-button [probe face/extra]]`}
    sent: "2016-11-10T11:04:30.205Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58245439c2c2b0744e33c750"
    text: {@Rebol2Red You have `face` object available. That should be enough IMO. But if it’s not, set something in `extra`.}
    sent: "2016-11-10T11:04:25.105Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58244fc045c9e3eb431e8b84"
    text: {While creating dynamic buttons, i need to know which button is clicked^/```^/block: ^-^-^-^-copy []^/number-of-buttons: ^-10^/fontsize: ^-^-^-50^/buttonsize: ^-^-100x70^/repeat i number-of-buttons [^/^-s: to string! i^/^-append block [button buttonsize font-size fontsize]^/^-append block s^/^-append block [[print "clicked"]] ; need to know which one is clicked^/]^/probe block^/view layout block ; post-processing with layout^/```}
    sent: "2016-11-10T10:45:20.566Z"
    editedAt: "2016-11-10T10:48:35.445Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58239f00df5ae966453877e1"
    text: {@meijeru somewhat convoluted: ^/```^/test1: make bitset! {test}^/test2: make bitset! length? test1^/not test2 = test1^/```}
    sent: "2016-11-09T22:11:12.793Z"
    editedAt: "2016-11-09T22:11:22.918Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "582392476cb7207630587976"
    text: {How do you test if a bitset value contains at least one bit that is set? I tried `not empty?` but that is forbidden.}
    sent: "2016-11-09T21:16:55.126Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58225e856cb7207630521507"
    text: "@qtxie Many thanks - looks like that was it."
    sent: "2016-11-08T23:23:49.264Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "58225a3331c5cbef43d18348"
    text: "@qtxie  thanks will try now"
    sent: "2016-11-08T23:05:23.399Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "582259f5e097df75758932c0"
    text: {@TomGrey303 Try release mode (add `-r`):^/```^/C:\Red>red.exe -r -c tests\console-call.red^/```}
    sent: "2016-11-08T23:04:21.696Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58225963df5ae96645319f42"
    text: {Compilation Error: undefined symbol: red/binary/rs-insert  ***  in function: exec/system-call/inset-string *** at line 121 *** near: [binary/rs-insert as red-binary! str 0 data/buffer data/count   - I used the  #include %system/library/call/call.red before compilling }
    sent: "2016-11-08T23:01:55.530Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "5822579be097df757589254b"
    text: "@TomGrey303 What error message you got?"
    sent: "2016-11-08T22:54:19.047Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "582256be31c5cbef43d171ad"
    text: {Hi, just started with Red - Can someone tell me how to call an exe from Red script. I'm using windows 10 - I did try an example from here: https://github.com/red/red/wiki/Reference-Call -  but with no luck. }
    sent: "2016-11-08T22:50:38.950Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "582255376cb720763051e563"
    text: {Others are similar, requiring a block for the condition handler.}
    sent: "2016-11-08T22:44:07.133Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5822379031c5cbef43d0c949"
    text: {Can't help but notice the rebol family is a good answer for that..}
    sent: "2016-11-08T20:37:36.830Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58223721df5ae9664530da11"
    text: {http://softwareengineering.stackexchange.com/questions/335504/why-do-languages-require-parenthesis-around-expressions-when-used-with-if-and}
    sent: "2016-11-08T20:35:45.613Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5821ece4e462097a30233ce4"
    text: {@dockimbel heh, it's interesting how people start using type systems to get some help from computer, but end up limiting themselves}
    sent: "2016-11-08T15:19:00.452Z"
    editedAt: "2016-11-08T15:19:08.924Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5821ea9ae462097a30232e56"
    text: {@maximvl I read it this morning. Seems like it was Elm's bashing day, there was another article on /r/programming also against Elm.}
    sent: "2016-11-08T15:09:14.210Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821e61b45c9e3eb4311e832"
    text: {fyi: Elm's type system doesn't allow one to make a select: https://medium.com/@boxed/a-small-dive-into-and-rejection-of-elm-8217fd5da235#.tj6koq1cs}
    sent: "2016-11-08T14:50:03.105Z"
    editedAt: "2016-11-08T14:50:24.423Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5820c1dbc2f2cf7275e009aa"
    text: "Answered in red/welcome."
    sent: "2016-11-07T18:03:07.713Z"
    editedAt: "2016-11-07T18:03:22.954Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58209a4e6cb7207630484fa5"
    text: {What is "operator overloading " in Red terms? An example is most welcome.}
    sent: "2016-11-07T15:14:22.579Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "581ffb7ac2f2cf7275dbae71"
    text: {@qtxie Don't worry. It was a stupid bug in my code. In one of the places, I had `change-dir:` instead of `change-dir`, haha!}
    sent: "2016-11-07T03:56:42.347Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "581ff8a3eed0c3125f45d32e"
    text: "XP. Let me try again, in case I made a mistake."
    sent: "2016-11-07T03:44:35.157Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "581ff84c31c5cbef43c4ba57"
    text: {@WiseGenius It should be affected by `change-dir`, Which OS are you using?}
    sent: "2016-11-07T03:43:08.233Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "581ff5eec2f2cf7275db9b0f"
    text: {When using `call`, how does one specify the working directory? `change-dir` doesn't seem to affect it.}
    sent: "2016-11-07T03:33:02.777Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "581c14f22d4796175f4094e9"
    text: {@Mufferaw You're welcome. Right, that's the optimized way to extract the beginning and end of the block. ;-)}
    sent: "2016-11-04T04:56:18.473Z"
    editedAt: "2016-11-04T04:56:23.734Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581c148231c5cbef43b3d341"
    text: {@dockimbel It works now, thanks again, here is the updated function^/```^/convert: routine[^/    ob [block!]^/    ob-len[integer!]^/    /local len i s value tail fl head^/][^/^-^/^-^-s: GET_BUFFER (ob)^/^-^-^/^-^-head:  s/offset^/^-^-value: head^/^-^-tail:  s/tail^/^/    while [value < tail][^/        fl: as red-float! value^/        probe fl/value^/        value: value + 1^/    ]^/]^/```}
    sent: "2016-11-04T04:54:26.654Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581c10032d4796175f407f97"
    text: {@greggirwin  for my 'learning exercise' I wrote a raytracer program in red/system, now I've made a GUI for it which has a 'scene' input area (that's why I had all those questions about parse earlier). The next step is to send the data from the gui to the red/system routines . }
    sent: "2016-11-04T04:35:15.754Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581c0ee9e462097a30078150"
    text: {@dockimbel Thanks, that's got me pointed in the right direction}
    sent: "2016-11-04T04:30:33.866Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581bfebb45c9e3eb43f6add1"
    text: {@Mufferaw Here is something to help you get started:^/```lisp^/convert: routine[^/    ob [block!]^/    ob-len[integer!]^/    /local len i s value tail fl^/][^/^-value: block/rs-head ob^/^-tail:  block/rs-tail ob^/^-^/^-while [value < tail][^/^-^-fl: as red-float! value^/^-^-probe fl/value^/^-^-value: value + 1^/^-]^/]^/```}
    sent: "2016-11-04T03:21:31.089Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581b963445c9e3eb43f4a623"
    text: {You can, of course. Check out how natives are implemented that work against blocks. It's just a bit of effort. What is the reason for using a routine, as opposed to straight Red? Or is it just to learn how?}
    sent: "2016-11-03T19:55:32.301Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581b826ae097df757567ca74"
    text: {@greggirwin  @rebolek I don't need to do anything too fancy with the block, my main goal is just to send the floats to my routine but the number of floats may change, so I thought I could use block!}
    sent: "2016-11-03T18:31:06.760Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581b81222d4796175f3da08c"
    text: {I haven't done much with routines either, but this works.^/```^/convert: routine [^/^-ob [block!]^/^-ob-len [integer!]^/^-return: [integer!]^/^-/local len i size^/][^/^-size: block/rs-length? ob^/^-return size^/]^/^/Sblock: [10.0 0.0 0.0 -1.0 2.0 1.0 0.2 0.2 0.0 10.0 0.0 0.0 -1.0 1.0 1.0 0.2 0.2 0.0]^/print convert Sblock length? Sblock^/```}
    sent: "2016-11-03T18:25:38.365Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581b80fbb4046d90642b9381"
    text: {Yeah, routine may handle passing red values without prefix automatically, I may be wrong here, I haven’t worked with R/S recently.}
    sent: "2016-11-03T18:24:59.301Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581b7fece097df757567b7e2"
    text: {`Routine` handles that automatically, but I had the same thought Bolek.}
    sent: "2016-11-03T18:20:28.417Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581b7fe545c9e3eb43f41e83"
    text: "@rebolek thanks, I'm taking a look at that now"
    sent: "2016-11-03T18:20:21.065Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581b7ea50d42ea911cbddbae"
    text: {@Mufferaw it’s possible, but not trivial. You have to pass red values with `red-` prefix (so as `red-block!`) and then use R/S functions defined in `%red/runtime/datatypes/block.reds` to work with that block.}
    sent: "2016-11-03T18:15:01.869Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581b6f3e2d4796175f3d2dfe"
    text: {Here is what I'm trying to do ^/```^/convert: routine[^/^-ob [block!]^/^-ob-len[integer!]^/^-/local len i s^/][^/       ob ; ????^/]^/^/Sblock: [10.0 0.0 0.0 -1.0 2.0 1.0 0.2 0.2 0.0 10.0 0.0 0.0 -1.0 1.0 1.0 0.2 0.2 0.0]^/convert Sblock length? Sblock^/```}
    sent: "2016-11-03T17:09:18.968Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581b6cd40d42ea911cbdd244"
    text: {For those cases where the official reference is not enough}
    sent: "2016-11-03T16:59:00.993Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581b6ca1b4046d90642b8984"
    text: {I also want to get started with red/system, and build some getting started tutorials, etc}
    sent: "2016-11-03T16:58:09.830Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581b6c700d42ea911cbdd224"
    text: "@Mufferaw some code might have helped?"
    sent: "2016-11-03T16:57:20.236Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581b6c47e097df7575673132"
    text: {@Rebol2Red I appreciate the reply, I should've worded my question a little better.}
    sent: "2016-11-03T16:56:39.636Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581b6be7c2f2cf7275c6c629"
    text: {Sorry, i thought you asked about a function (in some basic language routines are called functions, that's why)}
    sent: "2016-11-03T16:55:03.616Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "581b6af8e462097a300414dc"
    text: {@Rebol2Red No, I am trying to pass the red block to a red/system routine and I don't know how to access the things in the block. I searched github but couldn't find anything, I'm not even sure it's possible}
    sent: "2016-11-03T16:51:04.816Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581b69b1c2f2cf7275c6b8df"
    text: {@Mufferaw You mean something like this?^/```^/test: func [^/^-block [series!]^/][^/^-foreach item block [^/^-^-print item * 2 ; do something with each item^/^-]^/]^/block: [2.3 4.6 7.8 3.1 8.7 12.3 10.2]^/test block^/```}
    sent: "2016-11-03T16:45:37.555Z"
    editedAt: "2016-11-03T16:50:24.560Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "581b65c3e462097a3003eff9"
    text: {I have a block with a bunch of floats! that I want to pass to a routine, but in the routine, how can I access the values in that block?}
    sent: "2016-11-03T16:28:51.840Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581b5e41aa8f8c4b328e86de"
    text: {@DideC so `view/tight` is only for top level container..}
    sent: "2016-11-03T15:56:49.558Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581b4793eed0c3125f3019eb"
    text: "@greggirwin  Ah, thanks. But of course, right?"
    sent: "2016-11-03T14:20:03.243Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "581b1c472d4796175f3b1618"
    text: {Yes, but it belongs in general to the "words for a specific style" thing, not just `tight`. So extending per style VID dialect (in `fetch-options`).^/I would also like a way to extend default VID dialect without having to patch it (in `layout`).}
    sent: "2016-11-03T11:15:19.934Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "581b1a7a2d4796175f3b0bc3"
    text: {@DideC Agreed, it would be a useful addition. You are welcome to push a PR for it, or open a wish ticket.}
    sent: "2016-11-03T11:07:38.427Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581b0a8545c9e3eb43f1442b"
    text: {I miss the `tight` R2 VID keyword. Having to set `origin 0x0` in all subpanels is boring.}
    sent: "2016-11-03T09:59:33.803Z"
    editedAt: "2016-11-03T10:00:00.923Z"
    v: 4
    author: "57080f60187bb6f0eade8b26"
)#(
    id: "581ace6445c9e3eb43f0260b"
    text: {`Origin`^/^/```^/view/no-wait layout [  ^/^-space 0x0^/^-panel  [ ^/^-^-space 0x0^/^-^-origin 0x0^/^-^-p1: panel aqua [^/^-^-^-origin 0x0^/^-^-^-p1a: panel white [ ^/^-^-^-^-origin 0x0^/^-^-^-^-space 0x0^/^-^-^-^-t1: text "hello" ^/^-^-^-^-button "hi" [] ^/^-^-^-]^/^-^-^-return ^/^-^-^-p2: panel red  [^/^-^-^-^-origin 0x0^/^-^-^-^-pi2: panel blue [ ^/^-^-^-^-^-origin 0x0^/^-^-^-^-^-space 0x0^/^-^-^-^-^-text "here is"  ^/^-^-^-^-^-return ^/^-^-^-^-^-button "world" [] ^/^-^-^-^-]^/^-^-^-]^/^-^-]^/^-]     ^/] ^/center-face pi2 p2  ^/do-events^/```}
    sent: "2016-11-03T05:43:00.373Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581a8aff2d4796175f386799"
    text: {Is there a way to set panels so that they don't have a space/y pad and butt up against each other?^/^/```^/view/no-wait layout [  ^/^-space 0x-2 ^/^-panel  [ ^/^-^-space 0x-2 ^/ ^-^-p1: panel aqua [^/ ^-^-^-p1a: panel white [ ^/ ^-^-^-^-space 0x-2 ^/ ^-^-^-^-t1: text "hello" ^/ ^-^-^-^-button "hi" [] ^/ ^-^-^-] ^/ ^-^-return ^/ ^-^-p2: panel red  [^/ ^-^-^-pi2: panel blue [ ^/ ^-^-^-^-space 10x-2 ^/ ^-^-^-^-text "here is"  ^/ ^-^-^-^-return ^/ ^-^-^-^-button "world" [] ^/ ^-^-^-] ^/ ^-^-]^/ ^-] ^/ ^-]^- ^/] ^/center-face pi2 p2  ^/do-events^/^/```}
    sent: "2016-11-03T00:55:27.208Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5819ef1783a2008d220110af"
    text: {I understand your explanation better than  the documentation which i red a while ago. Thanks again.}
    sent: "2016-11-02T13:50:15.575Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5819ee2fcde075e65610b65e"
    text: {It is mostly a helper, you don't need to use it necessarily ...}
    sent: "2016-11-02T13:46:23.071Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5819ee18c3569a036e4b49ac"
    text: {If you would run in a loop and would like to get a result, you could as well use some code like (append result parse-var), or you just use keep marker and it adds to the resulting block ...}
    sent: "2016-11-02T13:46:00.215Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5819edd6c3569a036e4b4844"
    text: {http://www.red-lang.org/2013/11/041-introducing-parse.html}
    sent: "2016-11-02T13:44:54.422Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5819eda5cde075e65610b2f9"
    text: "Thanks, is there some documentation on it?"
    sent: "2016-11-02T13:44:05.642Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5819ec980e25dbfa118dee1e"
    text: {Anything you mark for a keep, gets added to the end result }
    sent: "2016-11-02T13:39:36.383Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5819ea2883a2008d2200ec5b"
    text: {I don't understand what collect/keep does.^/```^/parse "first second third" [thru "first " copy second to " third"]^/print second^/second: parse "first second third" [collect ["first " keep to " third"]]^/print second^/```^/Why/when use collect/keep?}
    sent: "2016-11-02T13:29:12.442Z"
    editedAt: "2016-11-02T13:32:12.646Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5819697949891fe7422c1884"
    text: {@dander Thanks. As Doc suggested: Red -o nameofprogram.exe -c sourcedoc.red^/Works like a charm!}
    sent: "2016-11-02T04:20:09.948Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "581964c99411972d60b3fd06"
    text: "ah, of course not Doc. :-) Thanks"
    sent: "2016-11-02T04:00:09.216Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "581964b5cde075e6560decec"
    text: {@TimeSlip Have you tried using the `-o` command-line option?}
    sent: "2016-11-02T03:59:49.073Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581960d327c3e02625eff68c"
    text: {Is there a  keyword in the red header that I can set to name the compiled output file? I like to use "." in the actual filename but then the compiler just uses the first part of the name.}
    sent: "2016-11-02T03:43:15.875Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5818fe6683a2008d22fc40c5"
    text: {Yes, quite different. In Smalltalk you send messages to objects. Red objects are basically a way to group words in a shared context. "Messaging" means something very different in Red. It relates to the exchange of information between people and machines.}
    sent: "2016-11-01T20:43:18.141Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818e0f327c3e02625ed69c9"
    text: {Is there a difference between Red and Smalltalk objects, seeing that both are messaging languages?}
    sent: "2016-11-01T18:37:39.442Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818d9b89411972d60b11936"
    text: {Coming back to change and patience, a lot of these things sound good, and demo well, but all the modern things I've seen have been toys and experiments, largely based on Bret Victor's inspiration. What we don't know (I'd love to see things) is how they work in practice. Like Mr. Victor, I'm a huge fan of Logo and Papert's work. Specialized languages (e.g. Processing, Mathematica) and frameworks (e.g. for audio software development and plug-ins) are proven. This comes back to domain specificity. That we can do easily. To emulate his active drawing/livecode is just treating your script as data and using `do/next` (basically). Generalizing this is much harder, and where the Eve/spreadsheet/dataflow model comes in.}
    sent: "2016-11-01T18:06:48.778Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818d6c327c3e02625ed2a4e"
    text: {Red is a tool for building tools. Remember that it's just the raw language right now. There is little shiny tooling yet as the priority is to make Red self-hosting (and also what investors require). }
    sent: "2016-11-01T17:54:11.057Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818d6bc83a2008d22fb3ca3"
    text: {Hence the visual representation of data, which would a good indication of where you are and possible ways to continue. I don't mind playing, but that could also be disruptive.}
    sent: "2016-11-01T17:54:04.676Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818d56a9411972d60b0fd35"
    text: {but I get sidetracked because of limitations in inspecting for instance the state and flow. I guess no real meaningful conversation in the console.}
    sent: "2016-11-01T17:48:26.512Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818d49c83a2008d22fb2de1"
    text: {I believe it is possible. I wouldn't mind if its loose standing code providing essential ways to streamline code development. }
    sent: "2016-11-01T17:45:00.172Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818d12f49891fe74228fef6"
    text: {And the console is, very much, a blank piece of paper. :^^)}
    sent: "2016-11-01T17:30:23.913Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818d10727c3e02625ed0510"
    text: {Do you think you (or someone) can build the tool you want with Red?}
    sent: "2016-11-01T17:29:43.457Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818d03727c3e02625ecffbf"
    text: {Red being so flexible and with nearly endless capabilities, I think a tool that provides me with introspection into the code and allows me to decompose/recompose code to effectively explore all the possibilities.  And allow me to go back and forth, kind of like a learning tool. The console provides some of that, but it is limiting. Somewhat like when a writer faces a blank piece of paper.}
    sent: "2016-11-01T17:26:15.400Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818cd159411972d60b0c6fe"
    text: {I did OOP for quite a number of years. I'm older, and perhaps jaded or cynical now, but let's call me pragmatic instead. Tools are tools are tools. Some are perfectly suited for one task, but totally inappropriate for others. There is no silver bullet. ^/^/Let me ask this: If you could have only one tool, and it was designed to do one thing really well, what would you want that one thing to be?}
    sent: "2016-11-01T17:12:53.007Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818cbcc0e25dbfa1188020a"
    text: {Only he can say. My view is that Red has a core strength in language construction, but is otherwise paradigm agnostic. And when I say "language construction", I don't mean just at the level of DSLs, or even GPLs, but in building the language you use to implement your program. This manifests itself very clearly sometimes, where `parse` is leveraged for all kinds of processing you might not initially consider it for.}
    sent: "2016-11-01T17:07:24.518Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818cbb3c3569a036e4529ea"
    text: {I found the Livecode environment to be very helpful and easy to manage code. But its OO based. Whats your view on OOP?}
    sent: "2016-11-01T17:06:59.606Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818ca1f806316005de60478"
    text: {Isn't doc mostly leaning towards dataflow model, seeing that it simplifies design and changes? }
    sent: "2016-11-01T17:00:15.683Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818c955cde075e6560ac9b6"
    text: {Considering program flow, is there a "best way" to do that? Is it the same for functional, OO, or imperative, or dataflow models? Is immutable data the answer? Should we all be starting with FSMs and STTs? Formal methods? It's a spectrum, and every combination of program, team, environment, and requirements has a different answer. I guess that's the other "hardest part" of software development. :^^)}
    sent: "2016-11-01T16:56:53.414Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818c8110e25dbfa1187ea1f"
    text: {These are great things to think about. As Mr. Victor points out, we often solve the wrong problem, or create something that doesn't address the problem at all, but sounds like it does.}
    sent: "2016-11-01T16:51:29.674Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818c777806316005de5f4e1"
    text: {I haven't re-read the article yet. Can you give me an example?}
    sent: "2016-11-01T16:48:55.363Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818c750806316005de5f373"
    text: {Wouldn't Red's freeform nature hinder most of the things Bret demonstated in the videos, or make difficult/impossible? Abstraction?}
    sent: "2016-11-01T16:48:16.745Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818c745c3569a036e450c4c"
    text: {Well, we make some things--most things--harder than they need to be. Some problems *are* hard, and some programs *will be* complex, but the vast majority of things we write shouldn't be.  This is where languages targeted at application domains (DSLs) can help. But they are not required to be very, very specific. DSLs with a wider scope are not "wrong" in any way, and mapping languages would make an interesting visualization. What were they designed for? What are they really used for? If we zoom out to view languages by primary paradigm, are there some that aid program flow, if program flow is the hard part? Do others make GUIs easy if that's your main hurdle?}
    sent: "2016-11-01T16:48:05.346Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818c55927c3e02625ecb8e5"
    text: "@greggirwin What about program flow as well?"
    sent: "2016-11-01T16:39:53.555Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818c50ac3569a036e44fa29"
    text: {My current feeling is that the hardest part of software development is balancing change and patience. }
    sent: "2016-11-01T16:38:34.026Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818c49b49891fe74228ae6a"
    text: {They say that GUI design is the hardest part of software development. Still unchanged since the Mac introduced the concepts. Teaching Red to the next generation in the best possible way will probably ensure widespread use.}
    sent: "2016-11-01T16:36:43.145Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818c4389411972d60b08cb5"
    text: {There are all kinds of data. In this case, I assumed you meant "application state" based on the Bret Victor link. Since Red is data, it's easy to do this kind of thing. Doc's live-coding example, extended by Didier, shows how easy this is. And it was short work to add "time travel" to my port of the micro-Paint app from R2. Even the little *-lab apps that have been done are steps in this direction.}
    sent: "2016-11-01T16:35:04.123Z"
    editedAt: "2016-11-01T16:36:16.051Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818c2570e25dbfa1187c271"
    text: {@greggirwin  I am finding it hard to express to Doc the intention, but I see you have understood it. Is it possible to make a visual representation of the data and see it change over time with typical feedback of what is actually being computed at that instance. Maybe create an object of the data to serve that purpose. I can't imagine a better subject than Red to make this possible.}
    sent: "2016-11-01T16:27:03.529Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818b7e00e25dbfa11878309"
    text: {@dsgeyser, visualizing with Red should be easier than almost any other heterogeneous type of data, whether as pure data (e.g. graphs and charts) or in the context of programming. }
    sent: "2016-11-01T15:42:24.384Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581868049411972d60ae4a55"
    text: {@dsgeyser Could you elaborate on "enable visualization of data"?}
    sent: "2016-11-01T10:01:40.514Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58185eae27c3e02625ea44bb"
    text: {@dockimbel  Do you think it is possible to enable visualization of data in Redbol, it being a messaging/data language?}
    sent: "2016-11-01T09:21:50.880Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5818568b0e25dbfa11854319"
    text: {@dsgeyser Bret Victor's work is well-known, you should watch its famous [Inventing on Principles](https://www.youtube.com/watch?v=PUv66718DII) video.}
    sent: "2016-11-01T08:47:07.556Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58184c1b0e25dbfa118511b1"
    text: {Interesting ideas at worrydream.com/LearnableProgramming/}
    sent: "2016-11-01T08:02:35.305Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "581835bc806316005de2ad43"
    text: "@greggirwin Thanks! "
    sent: "2016-11-01T06:27:08.434Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5818337c83a2008d22f793df"
    text: "Another possible case for `split` to handle."
    sent: "2016-11-01T06:17:32.944Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818334a83a2008d22f792cf"
    text: {```^/find-new-line: func [block] [^/    forall block [if new-line? block [return block]]^/    none^/]^/```}
    sent: "2016-11-01T06:16:42.836Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58183323c3569a036e40a7a0"
    text: {```^/red>> blk^/== [Suppose we have a block and ^/    it has two lines of text each having a different number of words^/]^/red>> find-new-line: func [block] [^/[        forall block [if new-line? block [return block]]^/[        none^/[    ]^/== func [block][forall block [if new-line? block [return block]] none]^/red>> pos: find-new-line blk^/== [^/    it has two lines of text each having a different number of words^/]^/red>> pt-1: copy/part blk pos^/== [Suppose we have a block and]^/red>> pt-2: copy pos^/== [^/    it has two lines of text each having a different number of words^/]^/```^/I have a few other line marker related funcs, though they haven't seen much use. }
    sent: "2016-11-01T06:16:03.526Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5818133c27c3e02625e7b9cb"
    text: {```^/[Suppose we have a block and^/it has two lines of text, each having a different number of words]^/```^/Is there a way to break that into two blocks? The newline character doesn't seem to work with blocks and if I convert the whole thing to a string and split it I can't change it back to a block.}
    sent: "2016-11-01T03:59:56.246Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581725cfc3569a036e39d8e0"
    text: "even loading a page takes a really long time"
    sent: "2016-10-31T11:06:55.803Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581725a7806316005ddb655e"
    text: {@Mufferaw yeah, it's the end of the month, so my internet is very slow.. *crawling*}
    sent: "2016-10-31T11:06:15.322Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58171b2d482c168b22d48130"
    text: {@PeterWAWood That certainly does help!  @dockimbel  @geekyi  I think I should definitely  read that wikibook, is this the one you mean https://en.wikibooks.org/wiki/REBOL_Programming/Language_Features/Parse  ?}
    sent: "2016-10-31T10:21:33.758Z"
    v: 1
    author: "56ced090e610378809c36532"
)#(
    id: "58171ad18ed1c0ff5c48c9b0"
    text: {It gives this result:^/```text^/RedBall sphere of radius 10 at position 0 0 5^/RedBall sphere of radius 20 at position 0 0 15^/```}
    sent: "2016-10-31T10:20:01.426Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58171aab7b15d16e55c927b5"
    text: {Perhaps this is a little better:^/```text^/radius: ['radius set ver number! ]^/position: ['position set v1 number! set v2 number! set v3 number! ]^/^/rule: [^/^-set name word! 'sphere^/^-any [radius | position ]^/^-to end (print [name "sphere of radius" ver "at position" v1 v2 v3])^/]^/^/parse [RedBall sphere radius 10 position 0 0 5] rule^/parse [RedBall sphere position 0 0 15 radius 20] rule^/```}
    sent: "2016-10-31T10:19:23.506Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5817188583a2008d22f07c3c"
    text: {^/Does this help:^/```text^/radius: ['radius set ver number! (print [name "radius" ver]) ]^/position: ['position set v1 number! set v2 number! set v3 number! ^/^-^-^-(print [name "position" v1 v2 v3 ])]^/^/rule: [^/^-set name word! 'sphere^/^-any [radius | position ]^/]^/^/parse [RedBall sphere radius 10 position 0 0 5] rule^/parse [RedBall sphere position 0 0 15 radius 20] rule^/```}
    sent: "2016-10-31T10:10:13.773Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5817181c482c168b22d4717b"
    text: {@Mufferaw There is a wikibook about rebol3 which *massively* helped me to understand parse}
    sent: "2016-10-31T10:08:28.243Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581717e30e25dbfa117db275"
    text: "@Mufferaw maybe, maybe not :wink: "
    sent: "2016-10-31T10:07:31.431Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581717ce0e25dbfa117db242"
    text: {@dockimbel doesn't work with the 2nd example.. I'll see if I can try my hand}
    sent: "2016-10-31T10:07:10.410Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5817166c806316005ddb1b74"
    text: {Out-of-order tokens are difficult to parse, we should provide something in Parse to help with that use-case.}
    sent: "2016-10-31T10:01:16.604Z"
    editedAt: "2016-10-31T10:01:28.604Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5817162a8ed1c0ff5c48b086"
    text: {@Mufferaw Something like this should work (untested):^/```lisp^/radius: pos: none^/^/rule: [^/^-word!^/^-'sphere 2 [^/^-^-if (not radius) 'radius set radius integer! (?? radius)^/^-^-| if (not pos)  'position pos: 3 integer! (print ["position:" copy/part pos 3])^/^-]^/]^/```}
    sent: "2016-10-31T10:00:10.860Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "581715cc482c168b22d46389"
    text: {@geekyi Maybe I should just keep it simple and not try anything too fancy until I understand a bit more about parse}
    sent: "2016-10-31T09:58:36.934Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581713de806316005ddb0e91"
    text: {```^/radius-or-position: [ radius | position | radius-or-position ]^/```}
    sent: "2016-10-31T09:50:22.851Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58171392c3569a036e397f29"
    text: {@Mufferaw unordered data... tricky. I was thinking a recursive sub rule after `'sphere`, but then, what would you do about duplicates?}
    sent: "2016-10-31T09:49:06.654Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58171217806316005ddb0524"
    text: {I'm trying to use parse for the first time, I want to parse a block that could have things in a different order.^/```^/[RedBall sphere radius 10 position 0 0 5]^/[RedBall sphere position 0 0 5 radius 10]^/```^/and my parse rule looks like this so far^/```^/rule: [^/  word!^/  'sphere^/  any [set ver 'radius (print ver) | set ver 'position (print ver)]^/  any [set int integer! (print ["Integer" int]) | float! (print ["float" ver])]^/  any [set ver 'radius (print ver) | set ver 'position (print ver)]^/]^/```^/After radius there should be one number (int or float) but after position there should be 3 numbers. Should it be something like ^/`if radius [more rules]`^/or am I going about this completely the wrong way?}
    sent: "2016-10-31T09:42:47.022Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58142811806316005dd0801f"
    text: {No, I'm wrong, it identified one of my compiled red programs as a virus}
    sent: "2016-10-29T04:39:45.766Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "581427c7482c168b22c96724"
    text: {@redredwine I had a problem with the Windows Defender before, it identified red.exe as some kids of virus}
    sent: "2016-10-29T04:38:30.998Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5814274a8ed1c0ff5c3df9e8"
    text: {my antivirus (avast + malwarebytes)  did not raise any alert while i was running the commands above.  also, when you say "maybe your anti virus delete it" ,  what is it deleting exactly ?   the red-061.exe is still in F:/red/  folder. }
    sent: "2016-10-29T04:36:26.687Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "581425e9806316005dd079ed"
    text: {See here: https://github.com/red/red#anti-virus-false-positive}
    sent: "2016-10-29T04:30:33.237Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "581425d2c3569a036e2e78ac"
    text: {@redredwine Maybe your anti-virus program delete it.}
    sent: "2016-10-29T04:30:10.094Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "581422f18ed1c0ff5c3ded16"
    text: "F:\red>red-061.exe^/^/F:\red>"
    sent: "2016-10-29T04:17:53.866Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "581422a47b15d16e55be1726"
    text: {Directory of F:\red^/^/10/27/2016  10:38 PM    <DIR>          .^/10/27/2016  10:38 PM    <DIR>          ..^/10/25/2016  09:29 AM           968,539 red-061.exe^/               1 File(s)        968,539 bytes^/               2 Dir(s)  100,930,060,288 bytes free^/^/F:\red>red-061.exe --cli^/Access is denied.^/^/F:\red>}
    sent: "2016-10-29T04:16:36.012Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "581421bf5a1cfa016e5b24c3"
    text: {Hello, I am new to red.  I downloaded the red-061.exe on my windows 10 machine. and ran windows-061 -- cli ,  it gave me access denied (although i ran it as an administrator). when I tried running just windows-061.exe  it does nothing, I don't get any red console.^/was wondering if anyone has come across same problem before, and could help me get started.^/}
    sent: "2016-10-29T04:12:47.662Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "5810a5ac806316005dc0dc3b"
    text: "yep, I see"
    sent: "2016-10-26T12:46:36.837Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5810a5630084729879800b14"
    text: {You just have to get used to the redbol terminology.}
    sent: "2016-10-26T12:45:23.545Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810a517997ba838692ea948"
    text: "And you can get that values with `values-of`."
    sent: "2016-10-26T12:44:07.138Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810a50b0084729879800b0a"
    text: {It’s not misleading actually. They really are words that hold values.}
    sent: "2016-10-26T12:43:55.533Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5810a4dd482c168b22b9b416"
    text: "I was looking for `keys` or `fields`"
    sent: "2016-10-26T12:43:09.304Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5810a4d00e25dbfa1163202b"
    text: {@maximvl thinks `words-of` name is a bit misleading}
    status: true
    sent: "2016-10-26T12:42:56.037Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5810a4c05a1cfa016e4b12bf"
    text: "@rebolek exactly, thanks!"
    sent: "2016-10-26T12:42:40.103Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5810a3e30084729879800ae0"
    text: {@maximvl I think you are looking for `words-of my-object`}
    sent: "2016-10-26T12:38:59.650Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58109df20e25dbfa1163018d"
    text: {What do you mean by "keys" and by "object" ?}
    sent: "2016-10-26T12:13:38.847Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "581096bf5a1cfa016e4ad23c"
    text: "how do I get keys from the object?"
    sent: "2016-10-26T11:42:55.148Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580d9d8ffb138dce65f1fc35"
    text: {@PeterWAWood That behavior difference is only because get-arguments in Red do not retrieve the word's value like in Rebol2.}
    sent: "2016-10-24T05:35:11.325Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580d45d1fb138dce65f108c0"
    text: {@dockimbel There is also a difference in how type checking is applied between Rebol 2 and Red:^/^/Red^/```text^/red>> f: func [:fun [function!]] [fun]^/== func [:fun [function!]][fun]^/red>> f1: func [] [print "running"]^/== func [][print "running"]^/red>> f f1^/*** Script Error: f does not allow word! for its :fun argument^/*** Where: f^/```^/^/Rebol2^/```text^/>> f: func [:fun [function!]] [fun]^/>> f1: func [] [print "running"]   ^/>> f f1                            ^/running^/```}
    sent: "2016-10-23T23:20:49.189Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580d3970fb138dce65f0e382"
    text: {```^/>> f1: func ['a] [probe a]^/>> a: 5^/== 5^/>> f1 a^/a^/== a^/>>  f2: func [:a] [probe a]^/>> f2 a^/5^/== 5^/```}
    sent: "2016-10-23T22:27:59.997Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580d1e8eb6fc192f5632cd5b"
    text: "@dockimbel what was behavior in Rebol2?"
    sent: "2016-10-23T20:33:17.947Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580ca674015db84e6fbb4f64"
    text: {@maximvl No difference in Red, like in Rebol3, though, the Rebol2 behavior looks more useful, so we may switch back to it.}
    sent: "2016-10-23T12:00:52.678Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580ca506fb138dce65eecee8"
    text: {Sorry, that's not relevant. (I shouldn't try to answer from my phone 🙁)}
    sent: "2016-10-23T11:54:46.149Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580ca4455af5969e7ef1831f"
    text: {":b"}
    sent: "2016-10-23T11:51:33.856Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580ca42b5af5969e7ef18302"
    text: "What happens if your function argument is :b: "
    sent: "2016-10-23T11:51:07.729Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580ca3f0305a10335db278c6"
    text: "Which a are you evaluating in probe a?"
    sent: "2016-10-23T11:50:08.196Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580c9b6e015db84e6fbb308e"
    text: "I don't see any difference here"
    sent: "2016-10-23T11:13:50.895Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580c9b685af5969e7ef161ab"
    text: {```^/red>> f1: func ['a] [probe a]^/== func ['a][probe a]^/red>> a: 5^/== 5^/red>> f1 a^/a^/== a^/red>> f2: func [:a] [probe a]^/== func [:a][probe a]^/red>> f2 a^/a^/== a^/```}
    sent: "2016-10-23T11:13:44.683Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580c9a3f015db84e6fbb2d57"
    text: {@PeterWAWood yep, I'm asking about difference in arguments specs: `func ['a]` vs `func [:a]`}
    sent: "2016-10-23T11:08:47.551Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580c99b1015db84e6fbb2bca"
    text: {The difference with function! values is that when evaluated via a word, the function is executed where the function! value is returned when evaluated via a get-word.^/```text^/red>> f: func [] [print "executed"]^/== func [][print "executed"]^/red>> f^/executed^/red>> :f^/== func [][print "executed"]^/```^/^/(You probably knew this anyway.)}
    sent: "2016-10-23T11:06:25.279Z"
    editedAt: "2016-10-23T11:07:00.075Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580c992b5af5969e7ef15b0b"
    text: {For many values, there is no difference when they are evaluated via a word or a get-word. e.g. ^/```text^/red>> a^/== 1^/red>> :a^/== 1^/```}
    sent: "2016-10-23T11:04:11.378Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580c96c7278cc54c6f5eee03"
    text: {@maximvl ```'a```, a lit-word!, evaluates to a word. ```:a```, a get-word, evaluates to the contents of the value bound to ```a```.^/```text^/red>> a: 1^/== 1^/red>> do first ['a]^/== a^/red>> do first [:a]^/== 1^/```}
    sent: "2016-10-23T10:53:59.194Z"
    editedAt: "2016-10-23T10:54:37.132Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580c9243b6fc192f5630f57a"
    text: {@dockimbel thanks for the link, however I used to use `'a` in arguments list to prevent evaluation, is it different from `:a` or are they the same?}
    sent: "2016-10-23T10:34:43.751Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580b0967a3bbf12d562726f3"
    text: {@this-gavagai +1 on notes. Those of us who have forgotten what we didn't know sometimes find it hard to explain things clearly. Very glad if this is all helpful.}
    sent: "2016-10-22T06:38:31.970Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580af2d0015db84e6fb67729"
    text: {@this-gavagai Such document would be most helpful to help other developers.}
    sent: "2016-10-22T05:02:08.956Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580ac311577f2c227906fe9b"
    text: {Also, I've been jotting down my thoughts as I go. If it would be useful to other beginners, I will do my best to consolidate them into a "Design principles of Red, from the outside" document of some sort. }
    sent: "2016-10-22T01:38:25.516Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "580ac1eb278cc54c6f59c59e"
    text: {@greggirwin and everyone else who has kindly responded to my earlier question about how to best represent entities in a simulation: Apologies for being so slow in getting back to you all.  I've been playing extensively with the concepts you offered me, and it has been both exciting and fun. There's a lot to digest, and I am still processing a lot of it. I will be back at some point soon with thoughts and undoubtedly more questions! Thanks again.}
    sent: "2016-10-22T01:33:31.392Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
)#(
    id: "580a4fd3a27d2220790e63e4"
    text: {@maximvl See [Get Arguments](http://www.rebol.com/docs/core23/rebolcore-9.html#section-3.3) section from Rebol manual.}
    sent: "2016-10-21T17:26:43.991Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580a4bd3278cc54c6f581394"
    text: {@maximvl Indeed, evaluation rules need to be fully covered in the Red documentation. Happy beer time! ;-)}
    sent: "2016-10-21T17:09:39.810Z"
    editedAt: "2016-10-21T17:09:51.744Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580a3eb256121b9c7ea94918"
    text: "http://www.rebol.com/article/0103.html"
    sent: "2016-10-21T16:13:38.965Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580a3c9b278cc54c6f57dccd"
    text: "@greggirwin thanks, now it's friday beer time :)"
    sent: "2016-10-21T16:04:43.438Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a3af7015db84e6fb4330d"
    text: {That's what makes Redbol so amazing. It *looks* like something you know, but is very different under the hood. You can use is effectively without ever understanding that though. It scales with your understanding and needs.}
    sent: "2016-10-21T15:57:43.295Z"
    editedAt: "2016-10-21T16:03:32.271Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580a3abd015db84e6fb431fc"
    text: "http://redlanguageblog.blogspot.nl/"
    sent: "2016-10-21T15:56:45.864Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580a3a98015db84e6fb43161"
    text: "@greggirwin new red blog?"
    sent: "2016-10-21T15:56:08.171Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a3a78a27d2220790e14bc"
    text: {good, because until this point I wasn't realizing Redbol is so different}
    sent: "2016-10-21T15:55:36.251Z"
    editedAt: "2016-10-21T15:55:49.012Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a3968278cc54c6f57cc81"
    text: {We will also work on primer docs for people coming from various backgrounds.}
    sent: "2016-10-21T15:51:04.346Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580a394b56121b9c7ea92fc1"
    text: {@maximvl, it's a bit of an advanced concept, so many newcomers won't encounter it for a long time. Functional programmers will, of course, but they should be able to grasp it with a little explanation, as we just did here. Someone want to put it in a blog post on the new Red blog Arie, et al are doing?}
    sent: "2016-10-21T15:50:35.669Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580a387f56121b9c7ea92be3"
    text: {this is something that should be explained in detail to newcomers}
    sent: "2016-10-21T15:47:11.018Z"
    editedAt: "2016-10-21T15:47:20.067Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a3835b6fc192f562a5418"
    text: "I don't mean it's bad or something"
    sent: "2016-10-21T15:45:57.375Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a381aa27d2220790e0956"
    text: {@dockimbel you work with Rebol for a long time, do you realize that there are nearly no languages doing same thing?}
    sent: "2016-10-21T15:45:30.898Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a37a25af5969e7eea24a0"
    text: "@maximvl Error: correct."
    sent: "2016-10-21T15:43:30.960Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580a378c015db84e6fb42402"
    text: {@maximvl As Gregg mentioned, you need to prevent unwanted intermediate evaluation of the passed function:^/```lisp^/red>> f: func [x :y] [append x :y]^/== func [x :y][append x :y]^/red>> f [] does [print "yo yo"]^/== [print "yo yo"]^/```}
    sent: "2016-10-21T15:43:08.907Z"
    editedAt: "2016-10-21T15:44:06.057Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580a36fa714642af22cc885c"
    text: "yes"
    sent: "2016-10-21T15:40:42.794Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a36f356121b9c7ea925ec"
    text: "if value evaluated to error, error happens"
    sent: "2016-10-21T15:40:35.786Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a36eee897cd3a71e03edc"
    text: "`error!` is just another datatype"
    sent: "2016-10-21T15:40:30.378Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a36dfb813566a4c6e7f81"
    text: "@maximvl yes"
    sent: "2016-10-21T15:40:15.759Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a36dea3bbf12d5624bc52"
    text: "and I guess errors in rebol work in the same way"
    sent: "2016-10-21T15:40:14.485Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a36bb278cc54c6f57c261"
    text: "Correct."
    sent: "2016-10-21T15:39:39.254Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580a36b95af5969e7eea2119"
    text: "right?"
    sent: "2016-10-21T15:39:37.625Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a36af5af5969e7eea20da"
    text: {@rebolek and when it evaluates to a function - function is called}
    sent: "2016-10-21T15:39:27.387Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a367f56121b9c7ea92303"
    text: {In Red, it's all about evaluation in a given context. You can control evaluation (e.g. passing a func as a get-word! to prevent evaluation).}
    sent: "2016-10-21T15:38:39.522Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580a3672e897cd3a71e03ec5"
    text: "sometimes it evaluates to function"
    sent: "2016-10-21T15:38:26.528Z"
    editedAt: "2016-10-21T15:38:33.973Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a3664b813566a4c6e7f56"
    text: "and that value gets evaluated"
    sent: "2016-10-21T15:38:12.130Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a365c714642af22cc884e"
    text: "everything is value"
    sent: "2016-10-21T15:38:04.499Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a364fb813566a4c6e7f54"
    text: "Do not look at it as value and function call"
    sent: "2016-10-21T15:37:51.150Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a364a278cc54c6f57c07b"
    text: "so `a` is a value, while `a()` or `(a)` is a call"
    sent: "2016-10-21T15:37:46.439Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a3639e897cd3a71e03eb0"
    text: "@maximvl yes, it’s the same"
    sent: "2016-10-21T15:37:29.813Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a3638b6fc192f562a4c39"
    text: {usually in a language there is a syntax distinction between a value and function call}
    sent: "2016-10-21T15:37:28.649Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a35db015db84e6fb41bc3"
    text: {ok, this starting to blow my head, I know this feeling}
    sent: "2016-10-21T15:35:55.765Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a35b6b6fc192f562a4a25"
    text: {@rebolek does it mean that `add` is exactly the same thing as `y` in my example above?}
    sent: "2016-10-21T15:35:18.482Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a359c577f2c2279051165"
    text: "so"
    sent: "2016-10-21T15:34:52.605Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a3586e897cd3a71e03e99"
    text: {```^/red>> add add 1 2 3^/== 6^/```}
    sent: "2016-10-21T15:34:30.803Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a35725636a5602eef68a7"
    text: "@maximvl yes, it will be evaluated"
    sent: "2016-10-21T15:34:10.464Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580a355ca3bbf12d5624b691"
    text: "changing `f` to `append x :y` works though"
    sent: "2016-10-21T15:33:48.992Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a35425af5969e7eea1aca"
    text: {this is something completely different from what I used to}
    sent: "2016-10-21T15:33:22.434Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a3523a3bbf12d5624b5b2"
    text: {```^/red>> f: func [x y] [append x y]^/== func [x y][append x y]^/red>> f [] does [print "yo yo"]^/yo yo^/== [unset]^/```}
    sent: "2016-10-21T15:32:51.873Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a3513015db84e6fb417de"
    text: "oh"
    sent: "2016-10-21T15:32:35.330Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a34df577f2c2279050db6"
    text: {if the value is a `function!`, will it be evaluated?}
    sent: "2016-10-21T15:31:43.067Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a34d3b6fc192f562a4506"
    text: "the line `insert pos value`"
    sent: "2016-10-21T15:31:31.042Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a34c2015db84e6fb416b9"
    text: "@greggirwin I just checked `replace` source"
    sent: "2016-10-21T15:31:14.249Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a3343278cc54c6f57b235"
    text: {It would be good to document the details of why it works that way, since it isn't clear.}
    sent: "2016-10-21T15:24:51.316Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580a2062b17b667961e17a4f"
    text: {I don't have the technical explanation.^/But, Carl Sassenrath claim that a Rebol script can't be compiled, due to it's dynamic nature. Dockimbel show that it's not completly true, but compiled programs "lost" some of their dynamic behaviour.^/I guess JIT will handle this kind of problem one day.^/But we have to leave with them for now.}
    sent: "2016-10-21T14:04:18.608Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "580a1d88b17b667961e16aef"
    text: {why does it start evaluate functions after moving to `interpreter` mode?}
    sent: "2016-10-21T13:52:08.624Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a1d7436d642263691e29a"
    text: "`replace` changes elements inside block"
    sent: "2016-10-21T13:51:48.805Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a1d5036d642263691e178"
    text: {I'm confused with functions calling order/rules here: https://github.com/red/red/wiki/Guru-Meditations#compiled-versus-interpreted-behaviors}
    sent: "2016-10-21T13:51:12.337Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a1ae58d2babbd08931209"
    text: {@geekyi ok, do `x:` and `set 'x` use same logic somewhere in low level code?}
    sent: "2016-10-21T13:40:53.967Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580a169736d642263691bbce"
    text: "I see. Which types of faces are focus-enabled?"
    sent: "2016-10-21T13:22:31.444Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
)#(
    id: "580a07f3b827179842e1f30e"
    text: {@meijeru Yes, relevant for key events only. You change it by setting `/selected` property or by clicking/tabbing to another focus-enabled face on screen. Tabbing support is not ready yet.}
    sent: "2016-10-21T12:20:03.817Z"
    editedAt: "2016-10-21T12:20:45.150Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580a07928d2babbd0892b865"
    text: {Focus system and/or tabing can get quite complicated. Some systems in Rebol had something like `tabbable?`property, to distinguish, if the item can actually get focus, or something like that. Some systems allow even the focus nesting, so that you have to press ESC to get out of that ... might be related to also how you wish arrow keys to works, etc.}
    sent: "2016-10-21T12:18:26.188Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "580a00fcb17b667961e0f544"
    text: {I have opened the ticket. Other question: is focus only relevant for key events? And how do you change the focus other than through setting win/selected?}
    sent: "2016-10-21T11:50:20.866Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5809fd90759f6d2436d2de4a"
    text: {@meijeru Feature not implemented. You can open a ticket for it, it's just a few lines to add. You'll get the mouse position relative to the focal face.}
    sent: "2016-10-21T11:35:44.680Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5809fc63b827179842e1d56f"
    text: {Thanks, but I also need the mouse position (event/offset) and View tells me this is `none`. How come?}
    sent: "2016-10-21T11:30:43.863Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5809d9c1759f6d2436d24c35"
    text: {@meijeru You need to put the focus on the face to get key events, otherwise, key events are sent to the window:^/```lisp^/view [b: base on-key [print event/key] do [self/selected: b]]^/```}
    sent: "2016-10-21T09:02:57.972Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5809d9378d2babbd08920e00"
    text: {Urgent question: does a base face accept keypresses? If not, how do I capture keys (e.g. delete key) on a drawing that is rendered in a base face?}
    sent: "2016-10-21T09:00:39.403Z"
    editedAt: "2016-10-21T09:02:12.740Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58093fb0b827179842df668b"
    text: {[this section](https://github.com/red/red/wiki/Differences-between-Red-and-Rebol#function-vs-funct) and other pages on wiki}
    sent: "2016-10-20T22:05:36.657Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58093edab827179842df63aa"
    text: {@maximvl  :point_up: [October 20, 2016 6:11 PM](https://gitter.im/red/help?at=5808c288b827179842dd1191) in Rebol3 (and maybe 2) the situation was worse :smile: see the wiki}
    sent: "2016-10-20T22:02:02.461Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5808f9f98d2babbd088eef4d"
    text: {@dander You're doing it correctly, with what the language currently provides. Though, a `closure!` type or a `[closure]` attribut to functions would probably allow a more efficient internal implementation.}
    sent: "2016-10-20T17:08:09.238Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5808f93036d64226368da6be"
    text: {@maximvl Correct, except for already locally defined words.}
    sent: "2016-10-20T17:04:48.111Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5808f928e897cd3a71e02538"
    text: {@dander of course it works, `context` always creates new context and old one is not destroyed. But with `func` version, `c` leaks and holds last context.}
    sent: "2016-10-20T17:04:40.557Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808f2f4b17b667961dcf6fc"
    text: {@maximvl , @rebolek It still seems to work when changing `func` to `function` (and actually seems better this way because it doesn't leak into the global namespace), presumably because it creates a new context object each time afun is called? I don't know if this is a good way of doing something like this. To be honest, I don't really know what I am doing. Just experimenting :smile: }
    sent: "2016-10-20T16:38:12.335Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5808e5dde897cd3a71e02261"
    text: {Yes. But you can access global `x` with `system/words/x`}
    sent: "2016-10-20T15:42:21.251Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808e5332189c68f42054c9d"
    text: {so, if I'm explicitly writing `/local x`, when `x` will be local in any case?}
    sent: "2016-10-20T15:39:31.832Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808e4245636a5602eef4ac4"
    text: {But remember that it will create global binding only if that word isn’t local:^/```^/red>> bla^/*** Script Error: bla has no value^/*** Where: catch^/red>> f: function [][bla: none set 'bla 1]^/== func [/local bla][bla: none set 'bla 1]^/red>> f^/== 1^/red>> bla^/*** Script Error: bla has no value^/*** Where: catch^/```}
    sent: "2016-10-20T15:35:00.713Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808e2d8e897cd3a71e021f0"
    text: "Yes. Or you can use `/extern`"
    sent: "2016-10-20T15:29:28.275Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808e2b74829257761404901"
    text: {@dockimbel I see, so `set` will also create a global binding inside `function`}
    sent: "2016-10-20T15:28:55.732Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808caf52189c68f4204c3ea"
    text: {@maximvl `func` is the lowest level constructor for functions, it requires you to declare local words yourself. `function` is a higher-level constructor (it has a different behavior in Rebol), which gather the local words for you using an heuristic (gathering set-words from the function's body), which can sometimes have unwanted effects (so to be used carefully). `function` is just a wrapper over `func`.}
    sent: "2016-10-20T13:47:33.235Z"
    editedAt: "2016-10-20T13:49:42.885Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5808c381759f6d2436ce1efb"
    text: {so the question actually is do we have any _good_ reason to not replace `func` with `function`?}
    sent: "2016-10-20T13:15:45.743Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808c2c948292577613fa4e5"
    text: {I can see a problem here - people will use `func` because it is simply shorter, and all variables will leak into global context}
    sent: "2016-10-20T13:12:41.035Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808c288b827179842dd1191"
    text: "do we really want compatibility with Rebol?"
    sent: "2016-10-20T13:11:36.119Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808c1c7759f6d2436ce16a3"
    text: {> are there any other differences between `func ` and `function` ?^/^/Use `help `.}
    sent: "2016-10-20T13:08:23.113Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5808c0da48292577613f9b4a"
    text: {Rebol historical reasons (understand: compatibility).}
    sent: "2016-10-20T13:04:26.463Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5808c0472189c68f420491ec"
    text: {are there any other differences between `func ` and `function` ?}
    sent: "2016-10-20T13:01:59.639Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808c01d80020cc608fa3816"
    text: {historical reasons? Red is not 30 years old to be affected by historical reasons}
    sent: "2016-10-20T13:01:17.940Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808bff4e897cd3a71e01c48"
    text: {It’s mostly for historical reasons, `func` does not gather them, `function` does.}
    sent: "2016-10-20T13:00:36.518Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808bfb6b827179842dd0663"
    text: "why is that?"
    sent: "2016-10-20T12:59:34.504Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808bfb3759f6d2436ce0e62"
    text: "`func does not gather local words`"
    sent: "2016-10-20T12:59:31.947Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808bf8d714642af22cc660d"
    text: "IMO it does not work anyway."
    sent: "2016-10-20T12:58:53.851Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808bf5cb813566a4c6e5cb6"
    text: {`func` does not gather local words, so `counter` is defined in global context in you example}
    sent: "2016-10-20T12:58:04.156Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808bf2936d64226368c7e21"
    text: "wat"
    sent: "2016-10-20T12:57:13.767Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808bf1bb813566a4c6e5cb4"
    text: "in your example"
    sent: "2016-10-20T12:56:59.620Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808bf16e897cd3a71e01c33"
    text: "because `counter` is global"
    sent: "2016-10-20T12:56:54.324Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808bf0a36d64226368c7da3"
    text: "how does this one work without closures support?"
    sent: "2016-10-20T12:56:42.328Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808beff48292577613f9241"
    text: "I don't get it"
    sent: "2016-10-20T12:56:31.220Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808bef480020cc608fa33c9"
    text: "@rebolek it works..."
    sent: "2016-10-20T12:56:20.077Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808bed380020cc608fa333b"
    text: {`func [] [counter: 0 func [] [ counter: counter + 1 ]]`}
    sent: "2016-10-20T12:55:47.876Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808bebb48292577613f9155"
    text: "eg:"
    sent: "2016-10-20T12:55:23.642Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808bebb5636a5602eef454e"
    text: "try it"
    sent: "2016-10-20T12:55:23.352Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808beae36d64226368c7c3f"
    text: "well, it should increase every time"
    sent: "2016-10-20T12:55:10.391Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808be94b813566a4c6e5ca1"
    text: {but what if you want to make i.e.: `counter` function, that will increase some local variable by one each time it’s called?}
    sent: "2016-10-20T12:54:44.751Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808be91759f6d2436ce08df"
    text: {so why when I return function from another function it isn't bound to this local scope?}
    sent: "2016-10-20T12:54:41.424Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808be64b813566a4c6e5c92"
    text: "@maximvl of course, there is"
    sent: "2016-10-20T12:53:56.941Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808be5648292577613f8fb6"
    text: {@rebolek local variables are not initialized in global scope, so there must be a local scope}
    sent: "2016-10-20T12:53:42.491Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808bc83b813566a4c6e5c66"
    text: {@maximvl why what? When you have `function` all local values are initialized on each call (usually to `none`).}
    sent: "2016-10-20T12:45:55.003Z"
    editedAt: "2016-10-20T12:46:15.929Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808bc3d759f6d2436cdfe9b"
    text: "@rebolek why?"
    sent: "2016-10-20T12:44:45.116Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808b88ce897cd3a71e01bc7"
    text: "You can’t (basically) do it with `function`."
    sent: "2016-10-20T12:29:00.336Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808b858e897cd3a71e01bc4"
    text: "@maximvl this creates persistent context."
    sent: "2016-10-20T12:28:08.349Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808b82148292577613f747f"
    text: {I mean, function definition should create context, shouldn't it?}
    sent: "2016-10-20T12:27:13.874Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "5808b80cb17b667961dbdb89"
    text: {@rebolek I see, but how is that different from function version?}
    sent: "2016-10-20T12:26:51.996Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808b41f714642af22cc6501"
    text: {Even if `afun` returns `f` only, it does not mean that the `c` context is gone.}
    sent: "2016-10-20T12:10:07.088Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808b3e6714642af22cc64fd"
    text: {@maximvl `f` is defined in context where `x` is also defined.}
    sent: "2016-10-20T12:09:10.000Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5808b3602189c68f42045845"
    text: "why does `x` inside `f` works for the context?"
    sent: "2016-10-20T12:06:56.829Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5808b34236d64226368c455e"
    text: {@dander hm, can you explain what happens in your code?}
    sent: "2016-10-20T12:06:26.371Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58085f6248292577613e0d8e"
    text: {@Mufferaw If you are embedding your R/S code in a Red script (using `#system` directive or `routine`), then the include and init are not required, they are already done for you by the Red runtime library.}
    sent: "2016-10-20T06:08:34.456Z"
    editedAt: "2016-10-20T06:08:35.992Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58085a1d2189c68f4202f35b"
    text: "@dockimbel thanks!"
    sent: "2016-10-20T05:46:05.590Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58085930b17b667961da5bcd"
    text: {@Mufferaw You should be able to include the %random.reds file from the Red runtime:^/```lisp^/#include %runtime/random.reds^/^/_random/init^/_random/srand 123      ;-- set the seed^/probe _random/rand     ;-- get a random 32-bit integer^/```}
    sent: "2016-10-20T05:42:08.957Z"
    editedAt: "2016-10-20T05:43:10.676Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5808474080020cc608f85c6f"
    text: {Using Red/System, how can I generate some random numbers? Do I need to #include something?}
    sent: "2016-10-20T04:25:36.267Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5807d2f22189c68f42011df7"
    text: {@maximvl  It looks like it is possible to make a closure with something like this^/```^/red>> afun: func [x] [c: context compose [x: (x) f: func[y][x]] :c/f]^/== func [x][c: context compose [x: (x) f: func [y] [x]] :c/f]^/red>> a: afun 1^/== func [y][x]^/red>> a 3^/== 1^/```^/I only learned about the `compose` trick for using the same argument name today, but it makes me think this could evolve into a generalized `closure` function generator}
    sent: "2016-10-19T20:09:22.664Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58076bf448292577613a289d"
    text: {@PeterWAWood @Mufferaw My bad, I forgot that we didn't implement indexed path notation support for arrays of structs yet, so you have to do an extra step. Here is a working example, setting up a dynamic array of 3 `sphere!` structs, initializing the `radius` with values from a literal array of integers:^/```lisp^/sphere!: alias struct! [^/    radius [integer!]^/]^/^/spheres: as sphere! allocate 3 * size? sphere!^/^/list: [45 30 60]^/s: spheres^/i: 0^/^/while [i < 3][^/^-s/radius: list/value^/^-print ["Sphere " i " radius: " s/radius lf]^/^-list: list + 1^/^-s: s + 1^/^-i: i + 1^/]^/```}
    sent: "2016-10-19T12:49:56.985Z"
    editedAt: "2016-10-19T12:50:57.692Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "580763c1b827179842d74faf"
    text: {Seems logical : `spheres` is a set of 3 pointers of 4 bytes each, so 12 bytes. So `spheres/item1` is the address of `s1` struct in memory: its a pointer.}
    sent: "2016-10-19T12:14:57.340Z"
    editedAt: "2016-10-19T12:18:22.590Z"
    v: 3
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58073e3fb827179842d694f2"
    text: {Also I got a compile error when I tried to access ```list/1```:^/```text^/*** Compilation Error: invalid struct member 1 ^/*** in file: %/Users/peter/VMShare/Code/Red-System/test.reds ^/*** at line: 25 ^/*** near: [list/1 lf]^/```}
    sent: "2016-10-19T09:34:55.217Z"
    editedAt: "2016-10-19T09:35:06.327Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58073da836d64226368614f9"
    text: {@dockimbel I found that the ```item1``` in the above structure is offset from the start of the structure:^/^/```text^/address of spheres        00003060^/address of spheres/item1  0000307C^/```^/^/I needed to set ```list``` to the address of ```spheres/item1 to get the code to work.}
    sent: "2016-10-19T09:32:24.290Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5807378db17b667961d5635e"
    text: {Deep paths are not supported in Red/System for now, you need to decompose it into two instructions.}
    sent: "2016-10-19T09:06:21.015Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58073336759f6d2436c74a93"
    text: {@dockimbel I can't get that to work^/```^/Red/System []^/^/sphere!: alias struct! [^/    radius [integer!]^/]^/^/spheres: declare struct![^/    item1 [sphere!]    ^/    item2 [sphere!]^/    item3 [sphere!]^/]^/^/s1: declare sphere!^/s1/radius: 45^/spheres/item1: s1^/^/list: as sphere! spheres^/print [list/1/radius]^/```^/gives me invalid path}
    sent: "2016-10-19T08:47:50.641Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "580724ba759f6d2436c70a6a"
    text: {Though, it would be probably better to allocate the spheres array dynamically:^/```lisp^/spheres: as sphere! allocate 3 * size sphere!^/```}
    sent: "2016-10-19T07:46:02.168Z"
    editedAt: "2016-10-19T07:46:05.295Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58072489b827179842d612ee"
    text: {@Mufferaw This is how:^/```lisp^/spheres: declare struct![^/    item1 [sphere!]    ^/    item2 [sphere!]^/    item3 [sphere!]^/]^/list: as sphere! spheres^/```^/^/then you can use `list/1` or `list/x`.}
    sent: "2016-10-19T07:45:13.000Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58071c198d2babbd08871027"
    text: {I'm not sure that is the best way to do what you want.It may be better to have an array of sphere!s could be a better choice ... but then you 'll need to manage memory allocation yourself.}
    sent: "2016-10-19T07:09:13.545Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580715712189c68f42fd4635"
    text: "@PeterWAWood Wow, thanks!"
    sent: "2016-10-19T06:40:49.039Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "580712a436d642263685409a"
    text: {The "arithmetic" will get tricky if the length of the structure is not a multiple of four bytes. (The compiler probably will pad the structure so that the fields are aligned in memory. I'm not sure of the details.)}
    sent: "2016-10-19T06:28:52.208Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580710c22189c68f42fd363d"
    text: {@Mufferaw It is possible to iterate over such a structure but you have to take care of all the details yourself so it is a bit tricky. Here is your example with a very simple  sphere! structure:^/```text^/Red/System []^/^/sphere!: alias struct! [^/    radius [integer!]^/]^/^/list: declare struct![^/    item1 [sphere!]    ^/    item2 [sphere!]^/    item3 [sphere!]^/]^/^/list/item1: declare sphere!^/list/item2: declare sphere!^/list/item3: declare sphere!^/list/item1/radius: 1^/list/item2/radius: 2^/list/item3/radius: 3^/^/print [as integer! list/item1/radius " " list/item2/radius " " list/item3/radius lf]^/^/sphere-len: 4^/item: declare sphere!^/list-as-array: as byte-ptr! list/item1^/i: 1^/until [^/    item: as sphere! list-as-array ^/    print [i " " item/radius lf]^/    list-as-array: list-as-array + sphere-len^/    i: i + 1^/    i > 3^/]^/```}
    sent: "2016-10-19T06:20:50.616Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5806fe222189c68f42fcf08a"
    text: {Another Red/System question,  I'm trying to make a 'list' with a struct and I wonder if there is a way to iterate through  the members of the struct^/```^/list: declare struct![^/^-item1 [sphere!]^-^/^-item2 [sphere!]^/^-item3 [sphere!]^/]^/```^/and I want to do something like - ^/`^/list/1 or list/x^/`}
    sent: "2016-10-19T05:01:22.886Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5806e4cb8d2babbd08865198"
    text: {@DideC I meant to write "Whilst you can't return a new structure ..."}
    sent: "2016-10-19T03:13:14.986Z"
    editedAt: "2016-10-19T03:13:23.758Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5806bdba2189c68f42fc1fe0"
    text: {OK, the following was being caused by not using the "stable" version (on both my computers). Whew! Thought I was going crazy.^/*** Runtime Error 1: access violation^/*** at: 10002182h^/}
    sent: "2016-10-19T00:26:34.028Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5806b6a536d642263683f9ba"
    text: {@DideC Whilst you can return a new structure from a function in Red/System, you can create a new structure and return a pointer to it. You would need to use ```allocate``` to reserve memory for the new structure and then assign the address of that memory to the structure. You can then return the pointer from the function. One issue with that approach is knowing when to release the memory allocated to the structure.^/^/I think it is better practice to supply the address of the structure for the return values as an argument to the function.^/^/ }
    sent: "2016-10-18T23:56:21.244Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5806669d759f6d2436c42f92"
    text: {@geekyi Yes, it uses view but I am using a previous  version of Red that compiled the same code before. 0.6.1 - 28-Sep-2016/11:09:27-7:00}
    sent: "2016-10-18T18:14:53.060Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "58065d07b827179842d30f36"
    text: "Nice Maxim!  Fun stuff."
    sent: "2016-10-18T17:33:59.870Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58065257b17b667961d1e523"
    text: {@dockimbel my little experiment with lambda lists / keyword arguments: https://gist.github.com/maximvl/e2c0c2b7695164bef30582ffc7eba931}
    sent: "2016-10-18T16:48:23.597Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58064f4d482925776135781b"
    text: {@maximvl , `to` is an action in each datatype so there is a logical reason why it might work for one but not another.}
    sent: "2016-10-18T16:35:25.525Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58064daa759f6d2436c3b23e"
    text: {@maximvl `to` is only partially implemented for now, we need to rework and complete it. Closures are not yet available in Red.}
    sent: "2016-10-18T16:28:26.289Z"
    editedAt: "2016-10-18T16:29:34.982Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58064d7c36d6422636823509"
    text: "and if not - what is the replacement?"
    sent: "2016-10-18T16:27:40.508Z"
    editedAt: "2016-10-18T16:27:42.977Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58064d5880020cc608f04053"
    text: {```^/red>> afun: func [x] [ func [y] [x]]^/== func [x][func [y] [x]]^/red>> a: afun 1^/== func [y][x]^/red>> a 3^/*** Script Error: x is not in the specified context^/*** Where: a^/```}
    sent: "2016-10-18T16:27:04.465Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58064d4a80020cc608f03fe1"
    text: "does Red support closures?"
    sent: "2016-10-18T16:26:50.543Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58064cb1b827179842d2be14"
    text: "@greggirwin thanks!"
    sent: "2016-10-18T16:24:17.248Z"
    editedAt: "2016-10-18T16:24:18.804Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58064c8a36d6422636823077"
    text: {@meijeru okey, but it makes little sense that `to` can convert to `lit-word!` and can't to `get-word!`}
    sent: "2016-10-18T16:23:38.837Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58064c46b17b667961d1ca06"
    text: {@maximvl Re #2275: If I remember well, several issues related to `to` have been dismissed by Doc because the implementation of `to` is not finalized.}
    sent: "2016-10-18T16:22:30.654Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58064a8436d6422636822552"
    text: {@maximvl  `load append copy ":" 'a` (until it's fixed).}
    sent: "2016-10-18T16:15:00.556Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58063f5536d642263681ed4f"
    text: {[October 17, 2016 5:21 AM](https://gitter.im/red/red?at=5804198c671ea7ae6c4673cf) same issue? (try to see if you can compile tests/vid.red), red was recently refactored to prepare for mac}
    sent: "2016-10-18T15:27:17.329Z"
    editedAt: "2016-10-18T15:28:29.344Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58063ec148292577613509c9"
    text: {@TimeSlip  :point_up: [October 18, 2016 6:59 PM](https://gitter.im/red/help?at=58062ad3482925776134a449) does your code use view and is on windows 10?}
    sent: "2016-10-18T15:24:49.872Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58063545759f6d2436c33a13"
    text: "https://github.com/red/red/issues/2275"
    sent: "2016-10-18T14:44:21.639Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58062fdb8d2babbd08834619"
    text: "sure"
    sent: "2016-10-18T14:21:15.227Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58062fd2b827179842d2225d"
    text: "@maximvl Can you post it as a bug?"
    sent: "2016-10-18T14:21:06.573Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "58062f7d36d642263681a081"
    text: "this is weird, I don't see any workaround here"
    sent: "2016-10-18T14:19:41.183Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58062ec68d2babbd08833ef7"
    text: "Ahhh"
    sent: "2016-10-18T14:16:38.138Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "58062eb3482925776134b8ab"
    text: {@TimeSlip I have word and a get-word, I need to convert one to another}
    sent: "2016-10-18T14:16:19.140Z"
    editedAt: "2016-10-18T14:17:13.140Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58062e64482925776134b6d4"
    text: "...until it's fixed."
    sent: "2016-10-18T14:15:00.967Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "58062e378d2babbd08833bfd"
    text: {@maximvl Yes, it doesn't seem to work. I know this is not elegant but^/type? load ":foo"^/== get-word!}
    sent: "2016-10-18T14:14:15.419Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "58062c83b17b667961d12201"
    text: {```^/red>> to get-word! "foo"^/*** Script Error: TO cannot convert get-word! from: foo^/*** Where: to^/red>> to set-word! "foo"^/== foo:^/red>> to word! "foo"^/== foo^/^/```}
    sent: "2016-10-18T14:06:59.551Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58062c17482925776134aabf"
    text: {Also, I noticed that on windows 10, when I have a backdrop image and then a base set to some level of transparency (alpha value), the transparency affects the backdrop image as well and makes a see-thru window. What I thought it would do is keep the backdrop at full opacity and just alter the base.}
    sent: "2016-10-18T14:05:11.246Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
)#(
    id: "58062bfe36d6422636818f79"
    text: "how do I convert get-word to just word?"
    sent: "2016-10-18T14:04:46.621Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58062b34b17b667961d11b4e"
    text: {I have made any changes and it was compiling just fine yesterday. This is happening on two computers (@home, @work)}
    sent: "2016-10-18T14:01:24.129Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "58062ad3482925776134a449"
    text: {I thought I would recompile my app this morning and I am getting "*** Runtime Error 1: access violation^/*** at: 730E2182h"}
    sent: "2016-10-18T13:59:47.155Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "58062985b813566a4c6e23c9"
    text: {@maximvl I see. That is `forall` limitation, see the help: *'word  [word!] => Word referring to series to iterate over.* - it does not accept `path!`}
    sent: "2016-10-18T13:54:13.046Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580628fb2189c68f42f981fa"
    text: "like `o: object [a: [1 2 3]]`"
    sent: "2016-10-18T13:51:55.242Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580628e1b827179842d1f999"
    text: {@rebolek ah, I meant another thing - to iterate over the block which is object's field}
    sent: "2016-10-18T13:51:29.801Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5806263a714642af22cc2b13"
    text: {You can, but not directly:^/```^/red>> o: object [a: 1 b: 2]^/== make object! [^/    a: 1^/    b: 2^/]^/red>> foreach w words-of o [print [w get w]]^/a 1^/b 2^/```}
    sent: "2016-10-18T13:40:10.981Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580624d82189c68f42f96bf4"
    text: {```^/red>> forall x/z [print first x/z]^/*** Script Error: forall does not allow path! for its 'word argument^/*** Where: forall^/```}
    sent: "2016-10-18T13:34:16.340Z"
    editedAt: "2016-10-18T13:34:25.242Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580624ae8d2babbd08830d7a"
    text: {I just realized one can't use loops over object's fields}
    sent: "2016-10-18T13:33:34.485Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58061dac759f6d2436c2bd27"
    text: {@PeterWAWood So it means that it's not possible to "create" a new structure inside a function and return it to the caller ?}
    sent: "2016-10-18T13:03:40.755Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5806096d80020cc608eef799"
    text: "@PeterWAWood Thank you"
    sent: "2016-10-18T11:37:17.482Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "580604c480020cc608eee5b6"
    text: {Here is an outline for a revised version of your vec3-Mfloat function:^/^/```text^/vec3-Mfloat: func [^/    vec [vector3!]^/    f [float!]^/    new-vec [vector3!]^/    ][  ^/        new-vec/x: vec/x * f^/        new-vec/y: vec/y * f^/        new-vec/z: vec/z * f^/]^/```^/^/Here are the revised calls of the function:^/```text^/vec3-Mfloat direction testf testu^/vec3-Mfloat origin testf testv^/```}
    sent: "2016-10-18T11:17:24.443Z"
    editedAt: "2016-10-18T11:17:59.827Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5806041eb827179842d1521f"
    text: {The normal way around this is to pass the address of the structure you wish to update as an argument to the function rather than returning a new structure. (The alternative is to copy the values from the returned structure before calling the function again).^/}
    sent: "2016-10-18T11:14:38.803Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "580603b636d642263680dff3"
    text: {@Mufferaw When you pass a structure as an argument to or return a structure from a function, the structure is not physically passed but a pointer to it. You will notice that the second set of probes in your gist always return an identical value (which is the address of ```a```).}
    sent: "2016-10-18T11:12:54.802Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5805e480759f6d2436c1b970"
    text: {@Mufferaw I don't program in R/S so it's far from my knowledge.^/But playing with your code, it behave like if `a` local variable is statically create for the function : its adress is the same at each call. So `testu` and `testv` point to the same address after calling the function: they are the same.^/Of course, it's not the behaviour that you want (I suppose it's the correct R/S one), but don't know how to change it.}
    sent: "2016-10-18T08:59:44.020Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5805c5a6b17b667961cf6159"
    text: "ok, I need to let that sink in"
    sent: "2016-10-18T06:48:06.745Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "5805c3b5b827179842d02ba3"
    text: {`a/b` is just syntactic sugar for `select a 'b`. Similarly, `a/:b` is sugar for `pick a b`.}
    sent: "2016-10-18T06:39:49.626Z"
    editedAt: "2016-10-18T06:45:13.187Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5805bfe336d64226367fbb4b"
    text: {Though one question remains, using `a: [b 1]` I can still access `a/b`, so what is in that block? It's not a set, right?}
    sent: "2016-10-18T06:23:31.841Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "5805be6980020cc608edce8e"
    text: {Thanks @greggirwin and @maximvl ... looks like it's time to dive deeper into the types set-word and get-* and lit-*}
    sent: "2016-10-18T06:17:13.125Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "5805b8ffb827179842d008be"
    text: {@dockimbel  I've made another gist that demonstrates the problem I'm having.^/Is my ignorance causing this problem? Am I doing something wrong?^/https://gist.github.com/Mufferaw/84ada8d399b70ae4dcc5f16d7e70e475}
    sent: "2016-10-18T05:54:07.224Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58054875b827179842ceadee"
    text: {```^/>> a: [ b: 1 ]^/== [b: 1]^/>> a/b^/** Script Error: Invalid path value: b^/** Near: a/b^/>> select a to set-word! 'b^/== 1^/```}
    sent: "2016-10-17T21:53:57.125Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5805484636d64226367e4945"
    text: {The change from Rebol allows set-words to be used as selectors, as was said. This is *very* nice, because the way you had to do it under R2 was a pain, forcing you to choose your block format much more carefully, if you wanted to use spec-block format.}
    sent: "2016-10-17T21:53:10.351Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5805483936d64226367e4927"
    text: {it is a different datatype, others are `get-word` (as `:a`), `lit-word` - `'a`}
    sent: "2016-10-17T21:52:57.368Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "580547b0b827179842ceab5e"
    text: {@wolframkriesing `b:` is a `set-word`, while `b` is just a `word`}
    sent: "2016-10-17T21:50:40.964Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5805471fb827179842cea9a6"
    text: {One difference is how they are evaluated.^/```^/red>> a: reduce [ b 1 ]^/*** Script Error: b has no value^/*** Where: reduce^/red>> a: reduce [ b: 1 ]^/== [1]^/```}
    sent: "2016-10-17T21:48:15.069Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58053badb813566a4c6e126b"
    text: "SO #needs_questions"
    sent: "2016-10-17T20:59:25.218Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58053b8980020cc608ec4c37"
    text: {i throw it out on stackoverflow #survives_longer :)}
    sent: "2016-10-17T20:58:49.349Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "58053b69714642af22cc1aa7"
    text: {```^/>> d: [e f g h i]^/== [e f g h i]^/>> d/e^/== f^/>> d/h^/== i^/```}
    sent: "2016-10-17T20:58:17.882Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58053b6236d64226367e1698"
    text: "thx @geekyi "
    sent: "2016-10-17T20:58:10.467Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "58053b4db813566a4c6e1266"
    text: "basically working like `select`"
    sent: "2016-10-17T20:57:49.783Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58053aff36d64226367e14db"
    text: {interesting^/```^/red>> a: [b: 1]^/== [b: 1]^/red>> a/1^/== b:^/```}
    sent: "2016-10-17T20:56:31.917Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "58053affe897cd3a71dfd355"
    text: "overloaded conventions I think"
    sent: "2016-10-17T20:56:31.306Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58053ab548292577613142c9"
    text: {makes sense. just wondering why does `a/b` return `1` for `a: [b 1]`, for `a: [b: 1]` I would understand it}
    sent: "2016-10-17T20:55:17.096Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "58053aad714642af22cc1aa1"
    text: {@wolframkriesing maybe also ask on stackoverflow? "difference between set-word! and word! in a block"}
    sent: "2016-10-17T20:55:09.213Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58053a285636a5602eeef913"
    text: {Just a usecase that came into my mind.. if you use `reduce a`, they would work different}
    sent: "2016-10-17T20:52:56.178Z"
    editedAt: "2016-10-17T20:53:03.707Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "580539ffb827179842ce77cd"
    text: "probably :)"
    sent: "2016-10-17T20:52:15.517Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "580539e95636a5602eeef902"
    text: {@wolframkriesing a block? :P I think what you are trying to say, when would you use one, and when the other?}
    sent: "2016-10-17T20:51:53.153Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580538f94829257761313b79"
    text: {what is the block `[b 1]`? its not a set, right? an object neither}
    sent: "2016-10-17T20:47:53.214Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "580538d080020cc608ec42b1"
    text: {ah, the generic version of ^/```^/red>> type? a/1^/== word!^/```^/thx}
    sent: "2016-10-17T20:47:12.131Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "580538b3b813566a4c6e1246"
    text: {I actually didn't know rebol2 had it, thought it was a red, rebol3 feature}
    sent: "2016-10-17T20:46:43.795Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58053892e897cd3a71dfd32a"
    text: {@wolframkriesing nope, you should try it out, useful for series}
    sent: "2016-10-17T20:46:10.189Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5805386836d64226367e0a1d"
    text: {@geekyi is the `collect` line pseudo code? I understand nothing of that line :)}
    sent: "2016-10-17T20:45:28.923Z"
    editedAt: "2016-10-17T20:45:45.292Z"
    v: 2
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "580537ef5636a5602eeef8dd"
    text: {@wolframkriesing ^/```^/collect [foreach thing a [keep type? thing]]^/```^/first case `a: [ b 1 ]`:^/```^/[word! integer!]^/```^/2nd case `a: [ b: 1 ]`:^/```^/[set-word! integer!]^/```}
    sent: "2016-10-17T20:43:27.953Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580536d536d64226367e03c9"
    text: {noob question ahead :)^/what’s the difference between^/```^/a: [ b 1 ]^/; and^/a: [ b: 1 ]^/```^/on both I can do `a/1` and `a/b`, the second is a set, what is the first?}
    sent: "2016-10-17T20:38:45.328Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "5805078836d64226367d28fe"
    text: "@greggirwin "
    sent: "2016-10-17T17:16:56.456Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5804fc0cb827179842cd4064"
    text: {```^/Color - v3/x: 0.1479379273840342 y 0.2071130983376479 z 0.2958758547680684^/Color - v4/x: 0.7041241452319316 y 0.7041241452319316 z 0.7041241452319316^/ADD-A x 0.7041241452319316 y 0.7041241452319316 z 0.7041241452319316^/ADD-B x 0.7041241452319316 y 0.7041241452319316 z 0.7041241452319316^/```}
    sent: "2016-10-17T16:27:56.568Z"
    editedAt: "2016-10-17T16:28:59.102Z"
    v: 2
    author: "56ced090e610378809c36532"
) #(
    id: "5804fba44829257761300f81"
    text: {@dockimbel on line 88, vec3-add v3 v4, the two arguments have different values but when they 'arrive' at the vec3-add function, they are the same. }
    sent: "2016-10-17T16:26:12.733Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5804f7982189c68f42f4ac50"
    text: "yep"
    sent: "2016-10-17T16:08:56.724Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804f64f759f6d2436be3599"
    text: "@maximvl Then `compose` is the right option."
    sent: "2016-10-17T16:03:27.929Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804f51db827179842cd1abb"
    text: {@dockimbel ok, then this is not what I want, I'm returning object from function}
    sent: "2016-10-17T15:58:21.971Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "5804f45bb827179842cd11b3"
    text: {@Mufferaw Could you pinpoint in your code where is that issue happening precisely? Remember that `declare` is a static allocation, not a dynamic one (use `allocate` and `free` for that).}
    sent: "2016-10-17T15:55:07.929Z"
    editedAt: "2016-10-17T15:55:28.841Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804f3f336d64226367cbf5a"
    text: {It just ensures that `x` value is fetched from global context and not local one.}
    sent: "2016-10-17T15:53:23.460Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804f3abb827179842cd0d42"
    text: {@dockimbel does `system/words/x` return value binded to `x` in current scope?}
    sent: "2016-10-17T15:52:11.331Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804f362759f6d2436be1c58"
    text: {@maximvl Another way to achieve it:^/```lisp^/red>> x: 5^/== 5^/red>> b: context [x: system/words/x]^/== make object! [^/    x: 5^/]^/```}
    sent: "2016-10-17T15:50:58.688Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804f26c2189c68f42f490ce"
    text: "@rebolek indeed, thanks!"
    sent: "2016-10-17T15:46:52.848Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804eae148292577612fb079"
    text: {Anyway, for your `x: x` example: try using `compose` and `x: (x)`}
    sent: "2016-10-17T15:14:41.528Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5804ea942189c68f42f462f9"
    text: {I tried it yesterday, but it crashes Red. I have to look at it and write an issue (I'm on phone now).}
    sent: "2016-10-17T15:13:24.886Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5804e90e48292577612fa5f2"
    text: {@rebolek I suppose this can be done with `bind` technique, but I'm not sure if it is ported to Red}
    sent: "2016-10-17T15:06:54.201Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804e741759f6d2436bdd388"
    text: {@maximvl in Rebol 3, I had function that let you make PARSE rules with local variables}
    sent: "2016-10-17T14:59:13.002Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5804e6ddb17b667961cc167c"
    text: {@geekyi `parse/collect` (or `parse/into`) may be a good idea, I was just playing devil's advocate ;) it's not that unusual that function returns different types}
    sent: "2016-10-17T14:57:33.017Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5804e16180020cc608ea87d3"
    text: {I've run into a strange issue, using Red/System. Inside a nested loop, I call a function which calls another function (ex: myfunc arg1 arg2) The problem is that the 2nd argument has somehow replaced the 1st argument, so the function executes like myfunc arg2 arg2.  Here's the code^/https://gist.github.com/Mufferaw/523a91d7c979a79bd6ce7509db283c21^/From the Color function I call the vec3-add function with arguments v3  and v4 but in the vec3-add function they are the same. Also, when I 'probe' v3 and v4 I get the same result }
    sent: "2016-10-17T14:34:09.913Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5804e140b827179842cc96b9"
    text: {so, basically one can't use a variable as initial value if field with same name exists in context}
    sent: "2016-10-17T14:33:36.654Z"
    editedAt: "2016-10-17T14:33:48.299Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804e11c2189c68f42f425c0"
    text: {```^/red --cli ^/--== Red 0.6.1 ==-- ^/Type HELP for starting information. ^/^/red>> x: 5^/== 5^/red>> b: context [^/[    x: x^/[    ]^/*** Script Error: x has no value^/*** Where: x^/```}
    sent: "2016-10-17T14:33:00.775Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804e1192189c68f42f425ba"
    text: "and"
    sent: "2016-10-17T14:32:57.485Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804e0e9b827179842cc94d2"
    text: {```^/red^/*** Driver Internal Error: Script Error : Out of range or past end ^/*** Where: parse-options ^/*** Near:  [if cmd: select [^/"clear" do-clear^/] first] ^/```}
    sent: "2016-10-17T14:32:09.620Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804e0e548292577612f7029"
    text: "oh"
    sent: "2016-10-17T14:32:05.512Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804de9948292577612f6441"
    text: "the question is how can I make this reusable?"
    sent: "2016-10-17T14:22:17.499Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804de5f2189c68f42f41827"
    text: {to store the data I'm hard coding names of variables into rules}
    sent: "2016-10-17T14:21:19.087Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804de058d2babbd087de83f"
    text: "I want to parse a block and extract data"
    sent: "2016-10-17T14:19:49.725Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804ddf72189c68f42f41670"
    text: "ok, here is the question about `parse`"
    sent: "2016-10-17T14:19:35.280Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804dceeb813566a4c6e0713"
    text: {:point_up: [October 17, 2016 6:57 PM](https://gitter.im/red/help?at=5804d8e51cc4cda4565acd08) @rebolek and the functionality was split out into `split` :smile: in rebol3 and red}
    sent: "2016-10-17T14:15:10.453Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804db4630abd79971906ae5"
    text: {@dockimbel there is, indeed, I forgot about `probe`, thanks)}
    sent: "2016-10-17T14:08:06.297Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804dafa30abd79971906933"
    text: {How can i set a focus on a face? How can i read  the mouseposition on a window or a face?}
    sent: "2016-10-17T14:06:50.505Z"
    editedAt: "2016-10-17T14:16:06.316Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5804dad578bd0d0363cee84c"
    text: "@maximvl BTW, `print mold` == `probe`. ;-)"
    sent: "2016-10-17T14:06:13.489Z"
    editedAt: "2016-10-17T14:06:41.052Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804dab8891a530163191ed9"
    text: {@maximvl It should not reverse the order, there might be a ticket for that already,  if not, please open one.}
    sent: "2016-10-17T14:05:44.506Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804d9dcb68c1ca566c2f9dd"
    text: "writing something general becomes more complex"
    sent: "2016-10-17T14:02:04.686Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804d9c81cc4cda4565ad117"
    text: {rules can be easily passed though the system from one place to another}
    sent: "2016-10-17T14:01:44.265Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804d9a8614116a2568f85aa"
    text: "@rebolek what do you mean `you set the rules`"
    sent: "2016-10-17T14:01:12.419Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804d95e1cc4cda4565aceec"
    text: {PARSE in Rebol could also return block! when used as Split function}
    sent: "2016-10-17T13:59:58.335Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5804d8e51cc4cda4565acd08"
    text: "IMO you know, because you set the rules"
    sent: "2016-10-17T13:57:57.995Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5804d83e1cc4cda4565aca37"
    text: "you dont know if it will return logic! or block!"
    sent: "2016-10-17T13:55:10.894Z"
    editedAt: "2016-10-17T13:55:24.521Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804d82b1cc4cda4565ac9e9"
    text: {makes sense, especially when you are not in control of which rules will come to parse}
    sent: "2016-10-17T13:54:51.566Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804d7e0e897cd3a71dfc765"
    text: {I was wondering if it shouldn't be `parse/collect`, it's the only case where parse returns a block! instead of  logic! @dockimbel }
    sent: "2016-10-17T13:53:36.897Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804d7c15636a5602eeeec88"
    text: {@maximvl `/into` has insert semantics, there was a conversation about it..}
    sent: "2016-10-17T13:53:05.501Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804d76978bd0d0363ced7e7"
    text: "but with `into` it prepends, not appends :)"
    sent: "2016-10-17T13:51:37.130Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804d74f891a530163190e99"
    text: {it says^/>keep (expr)^-: append the last value from the Red expression to the collecting block}
    sent: "2016-10-17T13:51:11.051Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804d746e897cd3a71dfc74f"
    text: {`collect` is a red feature, with `rebol` you use `set`}
    sent: "2016-10-17T13:51:02.059Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804d720e897cd3a71dfc74d"
    text: "Yep"
    sent: "2016-10-17T13:50:24.984Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804d7197972c5734212d82f"
    text: {@geekyi this one? http://www.red-lang.org/2013/11/041-introducing-parse.html}
    sent: "2016-10-17T13:50:17.827Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804d6ca5636a5602eeeec4a"
    text: "@maximvl (also) check the red blogpost for parse"
    sent: "2016-10-17T13:48:58.386Z"
    editedAt: "2016-10-17T13:50:06.111Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5804cf477972c5734212afc1"
    text: {```^/z: copy []^/print mold parse [a b c] [any [collect into z [keep word!]]]^/print mold z ; => [c b a]^/```}
    sent: "2016-10-17T13:16:55.831Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804cf2078bd0d0363ceb0ae"
    text: "@dockimbel ok, it's only for `collect into`"
    sent: "2016-10-17T13:16:16.734Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804ce70614116a2568f4eca"
    text: "let me make a small reproducible example"
    sent: "2016-10-17T13:13:20.621Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804cda41cc4cda4565a9a96"
    text: "No, it should not."
    sent: "2016-10-17T13:09:56.061Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804cc73b68c1ca566c2b274"
    text: "wait, should it revert result or not?"
    sent: "2016-10-17T13:04:51.218Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804c969b68c1ca566c2a61b"
    text: {@dockimbel collect works, it reverses the order in the end, but this is fine}
    sent: "2016-10-17T12:51:53.077Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804c6cf8eaaaea366a2b9d8"
    text: {Getting so close now. I have a handler used with a button that responds to key events. The trouble is that it only works after I press the button once. After that it is fine.}
    sent: "2016-10-17T12:40:47.609Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5804c1487972c573421273a5"
    text: {@maximvl `collect/keep` combo, or just `copy` or `set`, depends on your needs.^/```lisp^/parse [1 2 a 3] [any [integer! | copy w word! (?? w)]]^/^/list: []^/parse [1 2 a 3 b 4] [any [integer! | set w word! (append list w)]]^/^/parse [1 2 a 3 b 4] [collect any [integer! | keep word!]]^/```}
    sent: "2016-10-17T12:17:12.812Z"
    editedAt: "2016-10-17T12:17:30.548Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5804c0a9891a53016318a713"
    text: "or what is the general way to collect data?"
    sent: "2016-10-17T12:14:33.471Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5804c09d7972c57342127093"
    text: {is it possible to get last matched value in parse?}
    sent: "2016-10-17T12:14:21.395Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "5804aeedfa6b78846e260b75"
    text: {I don't know if there is a way to not make `parse` greedy, I changed my code to not work against it}
    sent: "2016-10-17T10:58:53.280Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5804acb294b459a576dcf4c5"
    text: {@maximvl `thru` or `to` might help in your case I think}
    sent: "2016-10-17T10:49:22.537Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58043684891a53016316df86"
    text: {@greggirwin I set the rate to none as suggested. Thank you! I was dreading removing that feature from my app.}
    sent: "2016-10-17T02:25:08.700Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "58042bb37972c57342108e59"
    text: {Are you holding a reference to the view elsewhere? Have you tried setting the rate to none before unviewing?}
    sent: "2016-10-17T01:38:59.777Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58041d2078bd0d0363cc58df"
    text: {Hello. Is there a way to elegantly destroy a view? I have this layout face that uses the "rate...on-timer" function to update the text. After is runs its course, I'd like to get rid of it since after an unview, it keeps running in the background (which could be a useful thing but not in this instance because I am done with the face.)}
    sent: "2016-10-17T00:36:48.195Z"
    editedAt: "2016-10-17T00:37:12.701Z"
    v: 2
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "5802429a30abd799718858b3"
    text: {@geekyi I am really loving red (more than rebol) because of the foundation expressed by @dockimbel. One day, I am pretty sure that Red would be my master language. }
    sent: "2016-10-15T14:52:10.263Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580241ee671ea7ae6c465dfb"
    text: {@rcqls You are right, I didn't know of words! that behaved like ops! like `and`, I'd thought it was more uniform. I'm a redbol newbie too :wink: }
    sent: "2016-10-15T14:49:18.246Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5802417dfa6b78846e25edef"
    text: {@rcqls https://github.com/red/red/blob/master/quick-test/quick-test.r#L716 right}
    sent: "2016-10-15T14:47:25.631Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58023f93614116a256872b9b"
    text: {@geekyi I think you do not understand me. Just check the red development. `tests/quick-test.r` and this line in particular  `to char! ((shift code 6) and #"^^(1F)" or #"^^(C0) »)`. It is like mathematics, at some point it is just impossible to avoid parentheses to change priority rules in evaluation.  The good point in Redbol is to try to avoid it when not necessary as a literal language. Sorry! You posted the same message or I receive an old message...}
    sent: "2016-10-15T14:39:15.654Z"
    editedAt: "2016-10-15T14:43:30.095Z"
    v: 5
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58023e54671ea7ae6c465dab"
    text: {@rcqls can you post some code that can't avoid parentheses? I want to understand what you are saying}
    sent: "2016-10-15T14:33:56.649Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58007d3cb68c1ca566b4907c"
    text: {@geekyi If you have an opened Rebol console where you did a Red compilation before, it can lock the crush DLL file.}
    sent: "2016-10-14T06:37:48.668Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58007a613ad9b17f6cc57a7e"
    text: {For anyone curious, when I try to compile from source; pretty sure it's caused by the antivirus:^/```^/-=== Red Compiler 0.6.1 ===-^/^/Compiling C:\Users\XXX\Documents\GitHub\red\red\tests\hello.red ...^/Compiling compression library...^/Script: "Red/System PE/COFF format emitter" (none)^/*** Linker Error: locked or unreachable file: .\..\crush.dll^/```}
    sent: "2016-10-14T06:25:37.402Z"
    editedAt: "2016-10-14T06:25:58.301Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5800796f20390f67704e4591"
    text: "do you have wireshark?"
    sent: "2016-10-14T06:21:35.106Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58007954eab966c85fbbe130"
    text: {@wolframkriesing I'm not sure, as you seem to be on MAC}
    sent: "2016-10-14T06:21:08.179Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5800790e457ae29b71da81c1"
    text: "No worries, any hints how I can investigate more?"
    sent: "2016-10-14T06:19:58.980Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "580078d740e7960d7b466fca"
    text: {@wolframkriesing can only use the current version as I had it running before. It has deleted all the other versions of red, can't use the builds or compile from source. Will check other ways later}
    sent: "2016-10-14T06:19:03.360Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5800784278bd0d0363c09fbf"
    text: "Wow"
    sent: "2016-10-14T06:16:34.741Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "5800783d30abd79971823579"
    text: "@geekyi just to do a read/info?"
    sent: "2016-10-14T06:16:29.000Z"
    v: 1
    author: "547c83bbdb8155e6700d9f77"
) #(
    id: "580070de20390f67704e451f"
    text: {@wolframkriesing sorry, I can't test anything right now as my antivirus (avira) has become overzealous and keeps quarantining crush.dll :worried: ^/I've tried disabling everything from disabling the antivirus but cannot even manually create a %crush.dll in the respective folders (`Program data\red` and `red` git source) :(}
    sent: "2016-10-14T05:45:02.423Z"
    editedAt: "2016-10-14T05:46:09.742Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58002881891a5301630a45d7"
    text: {@dander Thank you so much. Bo also posted some information a few days back that I managed to find. }
    sent: "2016-10-14T00:36:17.880Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "58001ec21cc4cda4564b6e75"
    text: {@TimeSlip , I haven't tried it yet, but I've heard it can be done. I don't know if it's built into the red exe yet though. I think these are good places to start:^/https://github.com/red/red/blob/master/tests/source/library/call-test.red^/or maybe^/https://github.com/red/red/blob/master/tests/console-call.red}
    sent: "2016-10-13T23:54:42.580Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57ff1aba614116a2567bec25"
    text: {Thanks doc. I'm still stuck with the compiler error. It seems when I add my mp3 system code red doesn't like it. I was wondering if there is a way to "CALL" a program with red. I was thinking I could create a player and have it launched.}
    sent: "2016-10-13T05:25:14.545Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ff18c0457ae29b71d555c3"
    text: {@TimeSlip https://github.com/red/red/blob/master/usage.txt}
    sent: "2016-10-13T05:16:48.049Z"
    editedAt: "2016-10-13T05:17:05.698Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fedaa6891a53016305698d"
    text: {@dander  @greggirwin  Thank you. That's what I was looking for. }
    sent: "2016-10-13T00:51:50.801Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fea2b678bd0d0363ba3bd8"
    text: "Doh! https://github.com/red/red"
    sent: "2016-10-12T20:53:10.782Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57fea28630abd799717baef1"
    text: {%red.r contains the handler. I thought there was a doc page listing them, but can't find it right now. In the meantime:^/```^/^-any [^/^-^-  ["-c"^-| "--compile"]^-^-(type: 'exe)^/^-^-| ["-r" | "--release"]^-^-(opts/dev-mode?: no)^/^-^-| ["-d" | "--debug" | "--debug-stabs"]^-(opts/debug?: yes)^/^-^-| ["-o" | "--output"]  ^-^-set output skip^/^-^-| ["-t" | "--target"]  ^-^-set target skip (target?: yes)^/^-^-| ["-v" | "--verbose"] ^-^-set verbose skip^-;-- 1-3: Red, >3: Red/System^/^-^-| ["-h" | "--help"]^-^-^-(mode: 'help)^/^-^-| ["-V" | "--version"]^-^-(mode: 'version)^/^-^-| ["-u"^-| "--update-libRedRT"] (opts/libRedRT-update?: yes)^/^-^-| "--red-only"^-^-^-^-(opts/red-only?: yes)^/^-^-| "--dev"^-^-^-^-^-(opts/dev-mode?: yes)^/^-^-| "--no-runtime"^-^-^-(opts/runtime?: no)^-^-;@@ overridable by config!^/^-^-| "--cli"^-^-^-^-^-(gui?: no)^/^-^-| "--catch"^-^-^-^-^-^-^-^-;-- just pass-thru^/^-^-| ["-dlib" | "--dynamic-lib"] (type: 'dll)^/^-^-;| ["-slib" | "--static-lib"] (type 'lib)^/^-]^/```}
    sent: "2016-10-12T20:52:22.747Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57fe98de8eaaaea3668e235c"
    text: {@TimeSlip do you mean beyond the output of `red --help`? Or is that what you are looking for?}
    sent: "2016-10-12T20:11:10.778Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57fe887f78bd0d0363b9ca03"
    text: {Where can I find more info on the Red command line switches}
    sent: "2016-10-12T19:01:19.661Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fe5b6eb68c1ca566acbd01"
    text: {@this-gavagai, I live in a rural area with the occasional blip, and slow access at times. I was on dial-up longer than any of my modern peers. People would sometimes mention how efficient my code was, and light on the wire. I would tell them that it had to be. My net connection was the slow test case.  :^^)}
    sent: "2016-10-12T15:49:02.959Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57fdf9e6dfe82a365b1adcad"
    text: {@greggirwin Wow! This is incredible. My apologies for the slow response. I live in a remote area and the internet sometimes goes out unexpectedly for up to a week at a time. I'm going to read through this all this evening and get back here.}
    sent: "2016-10-12T08:52:54.118Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57fdc826dfe82a365b1a3db5"
    text: {This particular app creates Vid code on the fly so  it's a bit funky. And if I knew what was causing it that would sure help. I got thrown off because the program was working flawlessly in the interpreter.}
    sent: "2016-10-12T05:20:38.143Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fdc7e868f560d80cf9fa13"
    text: {@TimeSlip Do not forget to add some example code how to reproduce the error.}
    sent: "2016-10-12T05:19:36.100Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fdc793d6251fd126afdc83"
    text: { @greggirwin Yes, I noticed that I had to do that for several words.   @rebolek Thanks for the instructions.}
    sent: "2016-10-12T05:18:11.372Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fdc780a7c618cd26037a0b"
    text: {Though the error you're seeing is likely not what I said, so nevermind. It would report an error correctly in that case.}
    sent: "2016-10-12T05:17:52.887Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57fdc733d6251fd126afdbbb"
    text: {go to https://github.com/red/red/issues and press "New Issue"}
    sent: "2016-10-12T05:16:35.221Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fdc71d4fde7203142cdcef"
    text: {The compiler may not yet handle dialects. If you're writing VID code, try setting any words you set *inside* the layout spec *outside* of it first.}
    sent: "2016-10-12T05:16:13.661Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57fdc7054fde7203142cdcc6"
    text: "OK, the next question is how to report it."
    sent: "2016-10-12T05:15:49.638Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fdc6e3d6251fd126afdb13"
    text: {Compiler Internal Error is not problem with your code. If it is in your code, compiler should throw specific error.}
    sent: "2016-10-12T05:15:15.531Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fdc68fa7c618cd260377fd"
    text: {The killer thing is I managed to get one version to compile but now I can't figure out what I did to make that happen. Me thinks it's in my code though.}
    sent: "2016-10-12T05:13:51.241Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fdc63ea7c618cd26037739"
    text: {@TimeSlip Compiler InternalError is bug. You should report it.}
    sent: "2016-10-12T05:12:30.295Z"
    editedAt: "2016-10-12T05:12:38.795Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fdbbbb4fde7203142cc16b"
    text: {Getting farther... Now this show up: Compiling to native code...^/*** Red/System Compiler Internal Error: Script Error : decorate-fun expected name argument of type: word^/*** Where: comp-expression^/*** Near:  [decorate-fun expr/1]^/}
    sent: "2016-10-12T04:27:39.570Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fdbba6dfe82a365b1a1f2a"
    text: {I'm able to compile a  test app with code using #"1" with the latest version. Must be something in the  larger app.}
    sent: "2016-10-12T04:27:18.702Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fda7b884f1db0614a1577b"
    text: "Ah, perhaps the # has to be escaped?"
    sent: "2016-10-12T03:02:16.831Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fda796a7c618cd26032d26"
    text: {I narrowed it down to using chars ( ex. #"1") in a switch. }
    sent: "2016-10-12T03:01:42.357Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fd9bf0a7c618cd26030fcf"
    text: "It's in something called comp-call"
    sent: "2016-10-12T02:12:00.872Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fd9b2cdfe82a365b19d527"
    text: {Here's a good one. I was all happy testing my app but now it's time to compile it and I'm getting some errors that don't show up  when I use the interpreter. Right now  I'm stuck because I'm getting  "compiler internal error" as opposed to a compilation error. Well, here's to finding  what's causing it.}
    sent: "2016-10-12T02:08:44.197Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc7fc968f560d80cf515d3"
    text: "You’re welcome."
    sent: "2016-10-11T05:59:37.024Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fc7f2c0aa72e3c5bf02d73"
    text: {Bo, works like a charm. Thanks. That's yet another thing I wouldn't have figured out.}
    sent: "2016-10-11T05:57:00.446Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc7e5d68f560d80cf511a6"
    text: {Then you use `on-time` actor that is run every second.}
    sent: "2016-10-11T05:53:33.447Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fc7e4bdfe82a365b155961"
    text: {@TimeSlip see this line: ```base 200x200 transparent rate 1 now``` You specify `rate 1` - that means 1 fps. }
    sent: "2016-10-11T05:53:15.613Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "57fc7e0468f560d80cf51050"
    text: {Well, let me experience. I think I see what it's doing.}
    sent: "2016-10-11T05:52:04.219Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc7db4dfe82a365b155776"
    text: "@rebolek how does rate work?"
    sent: "2016-10-11T05:50:44.622Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc7d07dfe82a365b15509a"
    text: "@rebolek Thanks Bo. I will check it out"
    sent: "2016-10-11T05:47:51.124Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc7cba84f1db06149cfdd4"
    text: {@TimeSlip You can use `rate` in VID. See the eve clock demo.}
    sent: "2016-10-11T05:46:34.653Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57fc78e90aa72e3c5bf017d6"
    text: {I also implemented my on-key "hot keys". One thing I noticed is that I have to manually  use a button the first time then the on-key starts to work.}
    sent: "2016-10-11T05:30:17.419Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc76cbd6251fd126ab3d05"
    text: {I ended up just creating a button that manually cycles through the strings. Cheesy but it works and has the advantage to user control.}
    sent: "2016-10-11T05:21:15.871Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc6424dfe82a365b15066a"
    text: {OK, another question. I'd like to create a loop that presents a series of strings one right after another with a pause in between. There seems to be a problem doing a view/no-wait and a do-events and then changing the /text and showing the face. I also tried placing the code inside the layout  and using a "do [ ]" but I don't know, it's not working as I would expect. }
    sent: "2016-10-11T04:01:40.943Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc5840dfe82a365b14edd4"
    text: "Thank you."
    sent: "2016-10-11T03:10:56.747Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc583cd6251fd126aaee22"
    text: "Works great Doc!"
    sent: "2016-10-11T03:10:52.606Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc51b984f1db06149c8d1c"
    text: "Ah, I wondered about that /as . I'll try it."
    sent: "2016-10-11T02:43:05.724Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fc4b0cd6251fd126aace2e"
    text: {@TimeSlip `load/as 64#{...} 'png` should work. We need to improve the image codec automatic detection, so it will work as in Rebol.}
    sent: "2016-10-11T02:14:36.044Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57fc195f68f560d80cf414d9"
    text: {@greggirwin Thank you. I ended up using a panel within a panel and it worked perfectly.}
    sent: "2016-10-10T22:42:39.813Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fbf6f54fde720314268f31"
    text: {```^/view/no-wait [p: panel 400x400 [btn: button "OK" [unview]]] ^/center-face/with btn p  ^/do-events^/```}
    sent: "2016-10-10T20:15:49.538Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57fbe9c368f560d80cf354fc"
    text: "New question. How can I center faces in a panel?"
    sent: "2016-10-10T19:19:31.164Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fbdbd0dfe82a365b135e07"
    text: {OK, I went back to R2, loaded it, saved the molded results and use that instead. Probably not as elegant but it works.}
    sent: "2016-10-10T18:20:00.062Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fbda07dfe82a365b1356c6"
    text: "What can I do to load it?"
    sent: "2016-10-10T18:12:23.068Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fbd9f6dfe82a365b135688"
    text: {I have this png file that is saved in a text format (forgive me if I don't recall the specific name for it) but to use it I "load" it. It looks like "load 64#^{iVBORw0KGg..." The problem is that when I try to "do" it in Red I get a "*** Access Error: invalid UTF-8 encoding: #^{89504E47^}"  }
    sent: "2016-10-10T18:12:06.050Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57fbcd1668f560d80cf2e36f"
    text: {cool, @greggirwin ! This will keep me occupied for a couple of my evenings :wink: }
    sent: "2016-10-10T17:17:10.840Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57fad60d0aa72e3c5bea92bd"
    text: ":^^)"
    sent: "2016-10-09T23:43:09.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57face4314e9dbfd785765de"
    text: {@geekyi realizes he has missed an interesting discussion}
    status: true
    sent: "2016-10-09T23:09:55.615Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57fab3ff68f560d80cef4d68"
    text: {@this-gavagai, be careful what you wish for: https://gist.github.com/greggirwin/e8b2b3c9310df477d31529297292c2de}
    sent: "2016-10-09T21:17:51.209Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f8f013d6251fd126a0c99d"
    text: {Like @dander  I am finding the whole Cows/Fields/People discussion fascinating. I'd love to see how this translates into fully working Red code/data as I still have to get my thinking fully into Red mode (my "normal" work is OOP).}
    sent: "2016-10-08T13:09:39.163Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "57f89a44a9a0a33375300aa5"
    text: "OK."
    sent: "2016-10-08T07:03:32.981Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f89a2968f560d80ce9632b"
    text: {Bo, I just thought of something. I'll send you an email tomorrow.}
    sent: "2016-10-08T07:03:05.604Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f89990dfe82a365b097390"
    text: {Yes, I am taking notes so that I can create some docs.}
    sent: "2016-10-08T07:00:32.138Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f89947470c6bb20f5dc8e5"
    text: {It’s great you have these questions. They can be answered and added to documentation for other people to help them.}
    sent: "2016-10-08T06:59:19.280Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f89933dfe82a365b0972bc"
    text: "Goodnight"
    sent: "2016-10-08T06:58:59.725Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f89911a7c618cd26f33515"
    text: {That's my problem. Unless it is so blatantly explained I miss it. Fortunately, I'm just that close to finishing my first R2 to Red project. So far I am loving Red despite these little troubles.}
    sent: "2016-10-08T06:58:25.364Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f898a5470c6bb20f5dc8d2"
    text: "You’re welcome."
    sent: "2016-10-08T06:56:36.999Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f8988c70fcb5db0c3c08e3"
    text: "Thanks brother."
    sent: "2016-10-08T06:56:12.920Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f8988c14e9dbfd7857505e"
    text: ":)"
    sent: "2016-10-08T06:56:12.584Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f8985070fcb5db0c3c0836"
    text: {I just looked at the docs again and see that it has that notation. It just never dawned on me that it worked that way. Now it makes sense.}
    sent: "2016-10-08T06:55:12.845Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f897d14fde7203141c4e0e"
    text: "Cool. Lucky guess for me then :smile: "
    sent: "2016-10-08T06:53:05.567Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f897b5470c6bb20f5dc8c5"
    text: "Yes."
    sent: "2016-10-08T06:52:37.524Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f897aba7c618cd26f33253"
    text: "That's just the way it works then."
    sent: "2016-10-08T06:52:27.076Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f8977ddfe82a365b096f30"
    text: {OK, so it always sends face and event , in that order, and there are no other parameters sent?}
    sent: "2016-10-08T06:51:41.226Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f89743470c6bb20f5dc8c2"
    text: {It doesn’t matter if you are calling them `face` and `event` in your function, or `foo` and `bar`. It’s just first and second argument.}
    sent: "2016-10-08T06:50:43.375Z"
    editedAt: "2016-10-08T06:50:57.665Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f89721a9a0a33375300a86"
    text: "@TimeSlip Exactly. "
    sent: "2016-10-08T06:50:09.596Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f89714d6251fd1269ff346"
    text: {Bo, I mean does it send face and event automatically?}
    sent: "2016-10-08T06:49:56.456Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f896ca14e9dbfd78575047"
    text: {@TimeSlip Red "doesn’t know" what parameters to send. It simply sends the same parameters again and again and your function must respect it.}
    sent: "2016-10-08T06:48:42.054Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f896794fde7203141c4b18"
    text: {One thing, however, is puzzling for me.  When I  add an actor, I use (in this case) on-over :myfunction.  How does Red know what parameters to send? In myfunction I have "face" and "evt" . Is there some common list of parameters Red sends? In other words, I am telling red to use myfunction but I don't have to include any parameters defined in the function. It simply sends the face and event.  I'm curious about that and if there are other parameters I could include. I hope my question makes sense.}
    sent: "2016-10-08T06:47:21.971Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f89375dfe82a365b09678e"
    text: {@qtxie Never mind. I see that there is an 'away flag which works fine. What was happening was I created some "bases" that I needed to behave like toggle buttons. When the mouse moved over them, they change colors to visually show hovering. The problem was that when the app first started and the mouse was over a "base" it would set the color based on the initial "over" event which was actually an "away". Now that I can see the 'away events I can check for that.}
    sent: "2016-10-08T06:34:29.961Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f89359a7c618cd26f329ec"
    text: "In `over` event,  you can check event/flag."
    sent: "2016-10-08T06:34:01.579Z"
    editedAt: "2016-10-08T06:34:37.348Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f87eb6a7c618cd26f30043"
    text: {@qtxie Thank you. Is there a hover off ? I need to distinguish when my mouse is going over a base and when it is leaving. I thought that focus and unfocus would work but  I think it is not sending those events with the base objects I am using.}
    sent: "2016-10-08T05:05:58.632Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f8728ba7c618cd26f2e4f7"
    text: "Yes. We have `focus` and `unfocus` event."
    sent: "2016-10-08T04:14:03.211Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f854694fde7203141bbaad"
    text: {Hello, is "focus" event (in Vid) supported? If not, is there any way to distinguish and entering/exiting with "over" ? Thanks.}
    sent: "2016-10-08T02:05:29.674Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f84b6f68f560d80ce8aeac"
    text: {@dander, on dialect design, I think that's a good analysis. On reactive programming, yes. Reactivity in Red is really more like dataflow programming than the ReactiveX stuff that's popular today. Regarding lazy evaluation, that's also possible. I believe Maxim Adloch's old liquid system for Rebol could be either push or pull, and is also a dataflow model. I haven't built anything where I needed lazy evaluation, aside from the nice notion of infinite series. }
    sent: "2016-10-08T01:27:11.478Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f805d884f1db06148ffd9c"
    text: {Would it be feasible to use reactor! relationships between things? For example, each cow's health is a function of rainfall + a number of other conditions, so if you update the weather object, that change propagates throughout the entire data model (including things that depend on the cows).^/I don't think I understand reactor!s well enough to know if that would be a good fit for their use... perhaps it depends on whether the use is read-heavy or write-heavy - in which case maybe lazy evaluation would be more appropriate?}
    sent: "2016-10-07T20:30:16.666Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57f801344fde7203141ac0e4"
    text: {I'll be interested to see how @this-gavagai responds to this discussion. I really appreciate how well he articulates his questions, and I've been learning a lot from this.}
    sent: "2016-10-07T20:10:28.042Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57f800a24fde7203141abed4"
    text: {So the way I am understanding this is that the process of designing the dialect forces you to think about both the data you are working with and also the way you will interface with it (including how you link different parts together). This seems like a really natural way of leading you to building the "thin vertical slices" of a project.}
    sent: "2016-10-07T20:08:02.073Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "57f7fe25dfe82a365b07d193"
    text: {Blocks are more flexible as well, if you have sparse data, or want to extend them. }
    sent: "2016-10-07T19:57:25.548Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7fd59470c6bb20f5dc14a"
    text: {@dander If you have anonymous data, use `block!`, for named data use `object!`. Or `map!`. That is the real question. Or `hash!` instead of `block!`?  Damned, so many datatypes ;)}
    sent: "2016-10-07T19:54:01.339Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7fd57d6251fd1269e6d9c"
    text: {For me there's no hard line. Red makes it almost transparent if you need to change. Not completely of course, but the universal path notation goes a long way. Sometimes it's pure convenience. I want to give users files that are basically spec-block formats for objects [name: value], and those are easy to `construct` into objects. Red solves a lot of the pain in Rebol that came from using set-words as keys in blocks, and we have maps too. It's a very fluid mix for me.}
    sent: "2016-10-07T19:53:59.414Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7fc17dfe82a365b07c674"
    text: {I think it's good to focus on data first, when designing systems. What are you talking about, and how do those things relate to one another. That may not always be records in a database, so it's maybe more data *discovery* than modeling. And it's part of the Forth approach to defining a vocabulary. If you think in terms of "write the language you want to write your program in", data is a big part of that. The language you create is not just verbs, but also nouns. And it's not just action verbs that are important, but the "little" verbs, sometimes called *linking* or *helping* verbs in the U.S., e.g. [is am are was were be being been has have had do does did shall will should would may might must can could].^/^/Think about where you've see those words used in programming. Ever see MUST or SHOULD in RFCs? We talk about is-a and has-a relationships. If you created a log, or undo stack, could you use those to replay history or determine temporal state change clearly? Capabilities? Design by Contract? How do we express things, and how do our tools help us?}
    sent: "2016-10-07T19:48:39.481Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7fb994fde7203141aa9fa"
    text: {I'm curious how you pick between using blocks vs object!s. Would you start with blocks for simplicity and maybe move certain parts to objects if the need arises? I guess a block looks a lot like an object from the outside if you structure it like that `world` example.}
    sent: "2016-10-07T19:46:33.033Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57f7f77f68f560d80ce7b68a"
    text: {I go both ways. A mix of top-down and bottom-up. I think what happened here is that we started with a problem and just got into a little flow discussing it. Now we know a little more about how to think about it, and that will drive the modeling. If you look at the above `world` block, just add `people` and `houses` and you have the basics. Then we have to define relationships between those things. What might that look like?}
    sent: "2016-10-07T19:29:03.260Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7f33070fcb5db0c3a54a0"
    text: {I thought the original question was about how to model the data, and create relationships between different parts. Do you guys think it's a better approach to define the dialect for interacting with the model first, and then derive a data model from that?}
    sent: "2016-10-07T19:10:40.404Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57f7ef8c470c6bb20f5dbfce"
    text: "Yes."
    sent: "2016-10-07T18:55:08.108Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ef140aa72e3c5be28d30"
    text: {But, per the current question (which we've strayed from, into cow dialects), maybe we start with a meta DSL for creating simulations.}
    sent: "2016-10-07T18:53:08.300Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ee3ca9a0a333753000fc"
    text: {OTOH, if you are in the cow business, you want things really simple and then, meta DSL may be useful for you, as the user ;)}
    sent: "2016-10-07T18:49:32.328Z"
    editedAt: "2016-10-07T18:49:52.004Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ee0f70fcb5db0c3a426d"
    text: "So we have to keep things *really* simple. ;^^)"
    sent: "2016-10-07T18:48:47.387Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ee0268f560d80ce7939b"
    text: "I mean, they don't even have thumbs to type with."
    sent: "2016-10-07T18:48:34.315Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7edf114e9dbfd785747d4"
    text: "Yeah :D"
    sent: "2016-10-07T18:48:17.904Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ede6a9a0a333753000f7"
    text: "That depends on the user case, I guess."
    sent: "2016-10-07T18:48:06.186Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ede184f1db06148f9af7"
    text: {We're talking cows here. I don't know if they're ready for meta DSLs. ;^^)}
    sent: "2016-10-07T18:48:01.490Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7edbddfe82a365b079146"
    text: "Or just keep the dialect simple and limited."
    sent: "2016-10-07T18:47:25.929Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7edbb470c6bb20f5dbfa8"
    text: "Dialect, that creates a dialect."
    sent: "2016-10-07T18:47:23.228Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7eda1470c6bb20f5dbfa4"
    text: "I guess that requires generator for the rules."
    sent: "2016-10-07T18:46:57.082Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ed6ebb20dfad43c414f9"
    text: "I see."
    sent: "2016-10-07T18:46:06.288Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ed660aa72e3c5be28604"
    text: {Given that Carol might own Bessie the cow, but *not* Flossie the cow, but she *does* own Flossie Field.}
    sent: "2016-10-07T18:45:58.075Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ed0c84f1db06148f9759"
    text: {Still not getting you. How do you disambiguate what you're buying, if your world looks like this?^/```^/world [^/    cows [^/        bessie []^/        flossie []^/    ]^/    fields [^/        flanders []^/        flossie []^/    ]^/]^/```^/i.e. how do you know `bessie and flossie` (without a sub block), means two cows, rather than a cow and a field?}
    sent: "2016-10-07T18:44:28.077Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ec9fbb20dfad43c414d4"
    text: "`word! ahead 'and` for infix rules"
    sent: "2016-10-07T18:42:39.474Z"
    editedAt: "2016-10-07T18:42:54.002Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ec7870fcb5db0c3a3d38"
    text: "Huh?"
    sent: "2016-10-07T18:42:00.518Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ec5abb20dfad43c414ca"
    text: "You have `and`. You do not care about `flossie`."
    sent: "2016-10-07T18:41:30.743Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ec41a7c618cd26f160c2"
    text: "With great power... Yup."
    sent: "2016-10-07T18:41:05.850Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ec3170fcb5db0c3a3bf7"
    text: {And whether we require unique names in the world or by type. e.g. could you have a field called flossie?}
    sent: "2016-10-07T18:40:49.811Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ec2fbb20dfad43c414c8"
    text: {Parse is so powerful that we sometimes need to be careful and not use all that power.}
    sent: "2016-10-07T18:40:47.760Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ec04470c6bb20f5dbf81"
    text: "Yes."
    sent: "2016-10-07T18:40:04.010Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ebf34fde7203141a6bec"
    text: {Even `2 cows` is not needed, but I thought of the sub-block more like a parenthetical comment.}
    sent: "2016-10-07T18:39:47.774Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ebe5470c6bb20f5dbf7a"
    text: {And if we want to be really hard to parse: ```Bob buys bessie and flossie from Carol```}
    sent: "2016-10-07T18:39:33.027Z"
    editedAt: "2016-10-07T18:39:40.207Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ebbe14e9dbfd7857478c"
    text: {```Bob buys 2 cows bessie and flossie from Carol```}
    sent: "2016-10-07T18:38:54.935Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7ebaf14e9dbfd7857478a"
    text: "Also, why are cows in block?"
    sent: "2016-10-07T18:38:39.885Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7eb82dfe82a365b0789b6"
    text: "Iterative dialect design we do here. "
    sent: "2016-10-07T18:37:54.571Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7eb59a9a0a333753000b5"
    text: {```^/[^/    Bob buys 2 cows [bessie and flossie] from Carol^/    Alice moves to house #5 ^/    Dan buys field #37N...^/]^/```}
    sent: "2016-10-07T18:37:13.347Z"
    editedAt: "2016-10-07T18:37:28.465Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7eb41bb20dfad43c4149d"
    text: "Almost ;)"
    sent: "2016-10-07T18:36:49.671Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7eb3984f1db06148f90c5"
    text: {Though the commas were *between* marked up dialect text, that wasn't clear in gitter.}
    sent: "2016-10-07T18:36:41.505Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7eaf4dfe82a365b0787b1"
    text: "LOL! And I did. :^^)"
    sent: "2016-10-07T18:35:32.073Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ead7bb20dfad43c41490"
    text: {Agreed. I really do not wanted to start discussion about comma. I just wanted to make you to clean up that dialect ;)}
    sent: "2016-10-07T18:35:03.343Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7eaafd6251fd1269e29cd"
    text: {And all the past discussion on it hasn't yielded a strong "we need it" conclusion.}
    sent: "2016-10-07T18:34:23.340Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7ea7f4fde7203141a66d7"
    text: {My current feeling (having leaned both ways at times) is that if you need to support it, we now have the ability to pre-process data when loading and it can be handled there. I often come back to the idea of "if you aren't sure whether you need it or not, you don't."}
    sent: "2016-10-07T18:33:35.905Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e9bc14e9dbfd7857474f"
    text: "Punctuation is very interesting topic, indeed. ;)"
    sent: "2016-10-07T18:30:20.132Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7e973bb20dfad43c41472"
    text: {Yep, I don’t want to pollute this channel with it. It’s something that was heavily discussed in Rebol but never resolved. }
    sent: "2016-10-07T18:29:07.521Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7e939d6251fd1269e23f4"
    text: {It's a big topic. Worth writing up a REP, though, to discuss it.}
    sent: "2016-10-07T18:28:09.619Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e8c414e9dbfd78574748"
    text: {Anyway, my comma idea is that `3,14` is `3.14` but `3, 14` or `3 ,14` is `[3 14]`.}
    sent: "2016-10-07T18:26:12.284Z"
    editedAt: "2016-10-07T18:26:27.944Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7e896dfe82a365b077d4b"
    text: "A good reason, too, for keeping dialects simple."
    sent: "2016-10-07T18:25:26.923Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e869d6251fd1269e2120"
    text: "Ah, I see what you mean."
    sent: "2016-10-07T18:24:41.937Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e853bb20dfad43c41452"
    text: "@greggirwin not enforce. It’s just for humans."
    sent: "2016-10-07T18:24:19.486Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7e82814e9dbfd78574730"
    text: {I still think that comma should be added as whitespace, unless it’s not.}
    sent: "2016-10-07T18:23:36.950Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7e81c4fde7203141a5d71"
    text: {Agreed, but then do we enforce newlines as the statement terminator? Maybe a bit OT for the question at hand. }
    sent: "2016-10-07T18:23:24.882Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e7fe0aa72e3c5be2706e"
    text: {They can ease some things in dialects, but aren't strictly needed of course.}
    sent: "2016-10-07T18:22:54.808Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57f7e7f7bb20dfad43c41442"
    text: "But for humans, newlines are enough, IMO."
    sent: "2016-10-07T18:22:47.544Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7e7e34fde7203141a5c8f"
    text: "Not for `parse`, but for humans."
    sent: "2016-10-07T18:22:27.987Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e7dd14e9dbfd7857471b"
    text: "Do we?"
    sent: "2016-10-07T18:22:21.822Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7e7cca7c618cd26f14f3a"
    text: {But then do we want statement terminators? ;^^)^/```^/[^/    Bob buys 2 cows [bessie and flossie]  from Carol .^/    Alice moves to house #5 .^/    Dan buys field #37N... .^/]^/```}
    sent: "2016-10-07T18:22:04.821Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e764470c6bb20f5dbeff"
    text: {@greggirwin It is better, but I think that parse does not need brackets to distinguish sequences ;)}
    sent: "2016-10-07T18:20:20.944Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7e73270fcb5db0c3a26a6"
    text: "I could lose the inner blocks as well, but..."
    sent: "2016-10-07T18:19:30.937Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e70ea7c618cd26f14c64"
    text: " Better?"
    sent: "2016-10-07T18:18:54.255Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e6a884f1db06148f7c55"
    text: "Ack!"
    sent: "2016-10-07T18:17:12.666Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e68914e9dbfd785746bf"
    text: {@greggirwin ho ho ho, please stop here. Everyone knows that comma is forbidden in Redbol ;)}
    sent: "2016-10-07T18:16:41.684Z"
    editedAt: "2016-10-07T18:16:58.635Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7e639a7c618cd26f14867"
    text: {Another way to look at it (see how I'm getting real work done now) is *how you want to describe* things. How do you say ^/```^/[^/    [Bob buys 2 cows [bessie and flossie]  from Carol]^/    [Alice moves to house #5]^/    [Dan buys field #37N...] ; (It's a UTM coordinate system, right? ;^^)^/]^/```^/and how those operations are performed.}
    sent: "2016-10-07T18:15:21.490Z"
    editedAt: "2016-10-07T18:18:41.442Z"
    v: 4
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e39d68f560d80ce75c4b"
    text: {In your simulation, how does the observer see all the cows if they're inside people? And if you want to have groups of cows, with different health, feed, etc. grouped differently, how do you do that? e.g., can cows owned by different people share a trough or bale? Does a veterinarian have to go to each person to see their cows, or can he inspect all the cows in one place?}
    sent: "2016-10-07T18:04:13.684Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7e2c9dfe82a365b0765fb"
    text: {An initial thought, which ties to Red's approach of using references, relates to hierarchies and "free agency". In your example, you say people own fields, but the field is a separate entity. If you have a `person` object, should it *contain* field? If so, is there also a global list of fields that has a separate copy of that field's data? Or is it better to think in terms of relationships between objects? Not the `is-a/has-a` inheritance/composition choice but as data relations. Object containership defines implicit, fixed relationships. But cows are not a property (in OO terms) of a person object. Except in this case: http://i.ebayimg.com/images/i/401128929397-0-1/s-l1000.jpg^/^/When I think of simulations, I often come back to NetLogo as a model. There is a "world" that has `patches` and `turtles`, each with localized behaviors and knowledge. The `observer` is the all-seeing eye.}
    sent: "2016-10-07T18:00:41.237Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7de0270fcb5db0c3a0187"
    text: {@this-gavagai, *FANtastic* example! Thanks for taking the time to do that. As Nenad said, puzzles are beloved by Reducers. For me, they're more of a curse. How am I supposed to get any real work done when there are puzzles to be solved! ;^^) Let me think on your example a bit, while I try to get some real work done. }
    sent: "2016-10-07T17:40:18.129Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7b5710aa72e3c5be17f9d"
    text: {@qtxie Great. Thanks again.^/I had just found the `allocate` function :smile: }
    sent: "2016-10-07T14:47:13.000Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57f7b508dfe82a365b06953b"
    text: {Yes. Something like this:^/```^/#define BUF_SIZE 1024^/buf: allocate BUF_SIZE^/sprintf [buf "number %d" 123]^/```}
    sent: "2016-10-07T14:45:28.691Z"
    editedAt: "2016-10-07T14:46:10.004Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f7b402d6251fd1269d3f22"
    text: {I saw allocation in some file on the sources, but can't remember where.}
    sent: "2016-10-07T14:41:06.536Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57f7b3b3a7c618cd26f0693c"
    text: {I didn't know Red/System had `sprintf`. Thanks @qtxie ^/I will need to allocate the space for the `c-string!`, won't I? How should I do this?}
    sent: "2016-10-07T14:39:47.240Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57f7b24f4fde720314196977"
    text: {@7hi4g0 You can use `sprintf` to format strings in Red/System if it's a c-string!.}
    sent: "2016-10-07T14:33:51.195Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f79f69a7c618cd26f01348"
    text: {I'll also need to format strings in Red/System, but I don't think there's  an easy way to do that, or is there?}
    sent: "2016-10-07T13:13:13.894Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57f79f2384f1db06148e2da2"
    text: {@greggirwin I would like see to some examples of how I can format strings :+1: }
    sent: "2016-10-07T13:12:03.775Z"
    editedAt: "2016-10-07T13:13:45.662Z"
    v: 2
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57f79dedd6251fd1269cdf47"
    text: {I had two off-by-one mistakes in the 100 doors code; fixed. And it's pretty ugly, certainly compared to the Rebol version.}
    sent: "2016-10-07T13:06:53.505Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f7992d4fde72031418f938"
    text: {And I pushed @DideC 's https://rosettacode.org/wiki/Roman_numerals/Decode#Red}
    sent: "2016-10-07T12:46:37.225Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f79903d6251fd1269ccc66"
    text: "https://rosettacode.org/wiki/100_doors#Red"
    sent: "2016-10-07T12:45:55.155Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f77deda9a0a333752ff4f1"
    text: "https://github.com/red/red/issues/2260"
    sent: "2016-10-07T10:50:21.680Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f77c13bb20dfad43c40926"
    text: "Thanks guys, I am going to open an issue."
    sent: "2016-10-07T10:42:27.239Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f77bf514e9dbfd78573b6a"
    text: "Actually it’s Runtime error: Access violation."
    sent: "2016-10-07T10:41:57.064Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f77bd3bb20dfad43c40924"
    text: "16GB should be enough for everyone I guess ;)"
    sent: "2016-10-07T10:41:23.669Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f77bbc70fcb5db0c385491"
    text: {@rebolek "Out of memory" error? It shouldn't happen, unless you have a huge number of small series and not much GB of RAM? If it's only on one platform, then it is worth adding to the bugtracker.}
    sent: "2016-10-07T10:41:00.316Z"
    editedAt: "2016-10-07T10:41:43.502Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f77b89bb20dfad43c40922"
    text: "I put the file somewhere and make an issue."
    sent: "2016-10-07T10:40:09.913Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f77b7aa9a0a333752ff4cc"
    text: {@qtxie I just checked it again and it happens only under OSX, under W7 it works.}
    sent: "2016-10-07T10:39:54.328Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f77b4f470c6bb20f5db275"
    text: {@rebolek Cannot load 22MB file? Sounds like a bug...}
    sent: "2016-10-07T10:39:11.890Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f7778a68f560d80ce57a22"
    text: {For too long I used Vim and Tcl for my puzzle playground... It's good to have a hobby. :-p}
    sent: "2016-10-07T10:23:06.182Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f77745dfe82a365b057d06"
    text: {@dahu Puzzle solving and code optimization is the favorite hobby of Rebolers (and now Reducers) for years. ;-)}
    sent: "2016-10-07T10:21:57.379Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f776efa7c618cd26ef601c"
    text: {@dockimbel That sounds like a good plan because I definitely need to sharpen my Redbol skills. @all Expect harassment :-D}
    sent: "2016-10-07T10:20:31.600Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f7764fa7c618cd26ef5d73"
    text: {@dahu I have a few candidates for the Decoding too, but no more time to play with it, so be my guest. Also, they are tons of other tasks on RosettaCode to fulfill, so feel free to contribute (you can use the community wisdom here to improve some code submissions if required).}
    sent: "2016-10-07T10:17:51.383Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f775afa9a0a333752ff477"
    text: {@dockimbel @qtxie Should I expect that Red would be able to load ~22MB file without Memory allocation error, or is it something that must wait for GC?}
    sent: "2016-10-07T10:15:11.368Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f77576d6251fd1269c4703"
    text: {Cool. Should probably add Decode solutions too if they don't already exist on Rosetta.}
    sent: "2016-10-07T10:14:14.234Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f7747370fcb5db0c3838dd"
    text: {@DideC @dahu I've added a Red entry for the Roman encoding task on Rosettacode.org: https://www.rosettacode.org/wiki/Roman_numerals/Encode#Red}
    sent: "2016-10-07T10:09:55.257Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f770ed84f1db06148d6fc9"
    text: {@this-gavagai Hard to tell. It will completely depends of how you code it. One way to do will have pros and cons, and another solution will have different ones.^/View is an example of complex object! hierarchy conception and behaviour in Red (screen is your village, windows are houses, faces are people ;-) ). + VID is a dialect to define the initial state.^/I see no better and functionnal example to give at this time !}
    sent: "2016-10-07T09:54:53.151Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f76b9d0aa72e3c5be03c75"
    text: {Cool, @DideC . I'll have to have a look at that tomorrow.}
    sent: "2016-10-07T09:32:13.152Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f76846dfe82a365b054377"
    text: "(And apologies for the length!)"
    sent: "2016-10-07T09:17:58.993Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f7682fdfe82a365b054330"
    text: {^/^/^/^/^/^/Thanks, @greggirwin. I appreciate the suggestion. Here's an example:^/^/Imagine you wanted to simulate economic dynamics in a third world village. You might begin with 30-50 households, each with 2-12 people. Most of these people would own a couple of different kinds of fields, and some of them might also own cows. Cows produce milk, which is a good source of cash, but this production is dependent on a number of factors including an animal's general health and well being. Any model of animal health would almost certainly be influenced by (among other things) what its owners choose to feed it, which in turn is going to be influenced by both the costs of fodder in the village generally and specific agricultural outputs of the household that owns it. ^/^/In other words, what I need to describe are templates for entities that can be instantiated in relatively large numbers to behave quasi-autonomously in a time-series simulation. The goal would be able to "experiment", testing for example how the arrival of a veterinary clinic in town (or a new breed of cow with different health functions, or a drop in fertilizer prices, or a sudden decrease in rain) would influence the system's overall dynamics.^/^/In an OOP paradigm, I would start by defining classes and their public interfaces, and then I would arrange them into hierarchical graphs. Some of these classes would be relatively self-contained (i.e., weather), some would depend on a parent many-to-one (i.e., people in a household), and still others would exist one-to-one as an extension of a parent (i.e., a particular cow's health, which might be complex enough to benefit from encapsulation as an object in its own right). That all works fine enough, but I'm not sure classic OOP is actually the right model for any of it. The hard distinction most languages expect between code and data, for example, is very limiting, and Rebol/Red's approach seems to promise a much more elegant way of thinking about entities in a simulation. The possibility that a vet might show up and re-write a particular cow's food consumption behaviors at runtime, for example, is just way too cool to ignore. It opens the door for unprecedented new kinds of elegance and expressiveness in this kind of scientific modeling. ^/^/Right now, what I'm trying to figure out as I get more familiar with Red is just general principles. For example, as in my past few posts, how should I think about the choice between hierarchies of objects and complex blocks? I get how both syntaxes work, but without a deeper intuition of why red programmers do things the way they do I know I'm just going to fall back on whatever I do in python.}
    sent: "2016-10-07T09:17:35.795Z"
    editedAt: "2016-10-07T09:18:56.779Z"
    v: 4
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f7651584f1db06148d46c5"
    text: {@dahu Interesting solution... but a verbose one. Nice exercise anyway.^/I updated my gist with the more optimized an shorter one I can make.^/https://gist.github.com/DideC/0ca3da92927c42b069454dc2994873b2#file-roman-to-from-arabic-red}
    sent: "2016-10-07T09:04:21.452Z"
    editedAt: "2016-10-07T09:06:10.582Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f744a2dfe82a365b04c1d4"
    text: {@this-gavagai, I don't know that there's a universal "Red way", and my common cases won't be yours, but if you have concrete examples some folks here might offer ideas of how they would model them in Red. }
    sent: "2016-10-07T06:45:54.670Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f73caca7c618cd26ee9dd9"
    text: {@7hi4g0, we'll have a full-blown `format` function in the future (lots of design ideas in the works). For now, if you specific needs, we can provide examples of little helpers that give you more control than `form`.}
    sent: "2016-10-07T06:11:56.281Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f72b124fde720314177cda"
    text: {>> most of the time, nested objects and instance-specific maps are out of step with Red's approach to prototyping^/^/>They are fine. What I meant is the need to clone them when you clone the outer object or map referencing them, is a rare need.^/^/It's exactly that rareness that I'm trying to understand.^/^/Coming from OOP, my first instinct with complex modeling is to define a hierarchical pile of objects, all of which get instantiated anew when a root object gets instantiated. The very fact that this is a rare use case in Rebol/Red makes me think that that whole approach must be bending the language in an unnatural way. What first caught my attention about Red is the fact that it doesn't make a hard distinction between data and code, but to exactly that end I'm still struggling to wrap my head around a more native design pattern for describing the state and behaviors of relatively complex and heavily instanced "things". I'm wondering if there's a more Red-like way of achieving these ends (parallel perhaps to the previous discussion about dialecting as a better alternative to public/private fields). But, maybe there's not a simple answer here.^/^/Thanks for link on how scope works. It's very orienting of some of the underlying mechanics at play.}
    sent: "2016-10-07T04:56:50.358Z"
    editedAt: "2016-10-07T04:57:04.531Z"
    v: 2
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f715dd84f1db06148c5ea2"
    text: {I'm sure the idiomatic Redbol way to do this would be cleaner -- I was aiming to stay as close to the ANTLR version as possible, both for comparison and more importantly because I don't know the Redbolly better way to express this yet.}
    sent: "2016-10-07T03:26:21.454Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f7156c4fde7203141744fa"
    text: {@dockimbel ANTLR version in Rebol (my Red-fu sucks too much to do a Red version :-( )^/https://gist.github.com/dahu/8a49ccde20acd53ff4a0631f66a7baf1}
    sent: "2016-10-07T03:24:28.727Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f7027770fcb5db0c36f136"
    text: {What is the best way to format strings? `form`?^/I noticed that `form` doesn't allow me to strip the spaces between different values nor does it allow me to prepend zeros.}
    sent: "2016-10-07T02:03:35.460Z"
    v: 1
    author: "57e85e4140f3a6eec0674e28"
) #(
    id: "57f697eda7c618cd26eca829"
    text: {:point_up: [October 5, 2016 11:33 PM](https://gitter.im/red/help?at=57f5e21b0ec6f9457da6a88e) @wolframkriesing_twitter, I just did `help read` in the console. }
    sent: "2016-10-06T18:29:01.160Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57f6824f4fde72031415488d"
    text: {@dockimbel I pick yous last solution and add [Roman-to-arabic with parse](https://gist.github.com/DideC/0ca3da92927c42b069454dc2994873b2#file-roman-to-from-arabic-red). For fun.}
    sent: "2016-10-06T16:56:47.593Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f66ec8dfe82a365b01d882"
    text: {I updated the code for a more "integrated", and maybe more readable approach.}
    sent: "2016-10-06T15:33:28.011Z"
    editedAt: "2016-10-06T15:34:21.461Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f66a564fde72031414c886"
    text: "@meijeru Indeed, let me fix it. Done."
    sent: "2016-10-06T15:14:30.570Z"
    editedAt: "2016-10-06T15:15:33.161Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f6560170fcb5db0c342d99"
    text: {The above solution breaks down for 9 => VIV instead of IX owing to the missing case. But that is easily repaired.}
    sent: "2016-10-06T13:47:45.496Z"
    editedAt: "2016-10-06T13:49:47.630Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57f646c6d6251fd12698093e"
    text: {Also I think it should be possible to come up with an elegant Parse-based solution (see the ANTLR entry [here](https://www.rosettacode.org/wiki/Roman_numerals/Decode#ANTLR)).}
    sent: "2016-10-06T12:42:46.009Z"
    editedAt: "2016-10-06T12:42:57.129Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f6449b70fcb5db0c33dba6"
    text: {mind hurting...^/programatically generated table with recursive calls back into a2r, starting from the first match in `case`...}
    sent: "2016-10-06T12:33:31.037Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f6429c84f1db0614891cdb"
    text: {@dahu Forth is best written in Forth. I have in my plans to add a stack-oriented small dialect in Red at some point in time, some algorithms can be implemented more easily and efficiently using such language (I have extensive experience in [RPL](https://en.wikipedia.org/wiki/RPL_(programming_language) and some with PostScript). For the converter itself, here is my take to implement it in Red, using what Red is best at (metaprogramming). ;-)^/https://gist.github.com/dockimbel/1abde8f2dfaf75816384609edf59098f}
    sent: "2016-10-06T12:25:00.689Z"
    editedAt: "2016-10-06T12:27:05.636Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f63eaaa7c618cd26eae656"
    text: {I guess Brodie's point is that the Forth way is to build a "lexicon" of commands, each doing one thing and intuitively (or deducibly) so from its name. He stresses that approach to better handle spec changes. The Vim solution is all balled up in one function, which _might_ be harder to modify for certain types of spec changes. This design concern is pretty much lost in this example, given how small the Vim solution is though.}
    sent: "2016-10-06T12:08:10.275Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f63cd9a7c618cd26eadeb7"
    text: "VIM solution is simpler and shorter !"
    sent: "2016-10-06T12:00:25.172Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f63199a7c618cd26eab139"
    text: {The original forth version:^/```^/\ Roman numerals^/^/Create romans      ( ones) char I c, char V c,^/                   ( tens) char X c, char L c,^/               ( hundreds) char C c, char D c,^/              ( thousands) char M c,^/Variable column# ( current_offset)^/: ones      0 column# ! ;^/: tens      2 column# ! ;^/: hundreds  4 column# ! ;^/: thousands 6 column# ! ;^/^/: column ( -- address-of-column ) romans column# @ + ;^/^/: .symbol ( offset -- ) column + c@ emit ;^/: oner  0 .symbol ;^/: fiver 1 .symbol ;^/: tener 2 .symbol ;^/^/: oners ( #-of-oners -- )^/   ?dup IF 0 DO oner LOOP THEN ;^/: almost ( quotient-of-5/ -- )^/   oner IF tener ELSE fiver THEN ;^/: digit ( digit -- )^/   5 /mod over 4 = IF almost drop ELSE IF fiver THEN^/   oners THEN ;^/^/: roman ( number -- ) 1000 /mod thousands digit^/                       100 /mod  hundreds digit^/                        10 /mod      tens digit^/                                     ones digit ;^/^/```}
    sent: "2016-10-06T11:12:25.254Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f62eb7a7c618cd26eaa4e4"
    text: "@dahu Any link to the original Forth version?"
    sent: "2016-10-06T11:00:07.097Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f62c3b70fcb5db0c3372a8"
    text: {Brodie's "Thinking Forth" was recommended on a Rebol forum somewhere so I decided to read it; very enjoyable.^/One of the examples in the book was about Roman numerals. Out of curiosity, I decided to emulate the Forth approach in Rebol. It isn't as "clean" as the original Forth due to the need to explicitly pass function parameters. Still... it's pretty ugly, imho. I am sure the idiomatic Rebol (Red) version would be much better. As a comparison, I also converted the version from one of my old Vim plugins (Nexus); I can't remember from where I stole that version of the solution. The two solutions are here:^/https://gist.github.com/dahu/e69aa11ee46c24e140ca201ac8669b7e}
    sent: "2016-10-06T10:49:31.827Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57f61ac63c59573f6f11b98f"
    text: {That mapping is done in the `url!` [datatype](https://github.com/red/red/blob/master/runtime/datatypes/url.reds#L168).}
    sent: "2016-10-06T09:35:02.339Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f612bc43b5aeb0099f83e6"
    text: {This is the Red/System low level func. As you see, there is an `info?` parameter that must be map to the `/info` refinment of the read handler.^/Port! are not implemented, so the maping between `read` and HTTP might be elsewhere.}
    sent: "2016-10-06T09:00:44.746Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f5e21b0ec6f9457da6a88e"
    text: {@greggirwin thx a lot for answering so quickly, actually I was looking into https://github.com/red/red/blob/3058bfe311e0dbdfd102509119388d06a86946af/runtime/simple-io.reds#L1844 but couldn't find `/info`, did I look in the wrong place?}
    sent: "2016-10-06T05:33:15.806Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f5df4bd45d7f0f52680e3c"
    text: {@this-gavagai *nested objects and instance-specific maps are out of step with Red's approach to prototyping* They are fine. What I meant is the need to clone them when you clone the outer object or map referencing them, is a rare need. Sharing them is most of the time, the best option. BTW, "nesting" is a relative concept in Red/Rebol, you only have a "reference" to other series/objects/maps, they are not really "nested" (there is no scoping in Red/Rebol, only an apparence of scoping, called [definitional scoping](http://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red#)).}
    sent: "2016-10-06T05:21:15.896Z"
    editedAt: "2016-10-06T05:28:30.617Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f5c36991d6af115231fe9d"
    text: {@dockimbel Great, so I think that's the answer to my original question: "Red chooses to pass `object!` and `map!` by reference but copy `series!` because, most of the time, nested objects and instance-specific maps are out of step with Red's approach to prototyping. Deep structure is usually better accomplished through blocks." If that's accurate, it makes sense, and it helps me see the differences from mainstream OOP a bit more clearly. Thanks!}
    sent: "2016-10-06T03:22:17.386Z"
    editedAt: "2016-10-06T03:24:30.020Z"
    v: 3
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f597c2f69c94ad0991a4a8"
    text: "Thank you. "
    sent: "2016-10-06T00:16:02.315Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f5974ff69c94ad0991a3d5"
    text: {This one? https://github.com/red/red/blob/master/environment/colors.red}
    sent: "2016-10-06T00:14:07.077Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57f5967d91d6af11523198f7"
    text: "Where are the various colors stored at?"
    sent: "2016-10-06T00:10:37.802Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57f58b9a0ec6f9457da5d4ca"
    text: {Red, even with only simple-IO in place, makes it easy to get at the headers:^/```^/red>> res: read/info http://red-lang.org^/== [200 #(^/    Cache-Control: "private, max-age=0"^/    Date: "Wed, 05 Oct 2016 23:20:41 GMT"^/    Transfer-Encoding: "chunked"^/    Content-Type: "text/html; char...^/```^/`/info` isn't documented yet, so may change in the future, but it very nicely returns you 3 values: [result-code [integer!] headers [map!] content [string! binary!]]}
    sent: "2016-10-05T23:24:10.079Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f581a529403a416fccbf63"
    text: {@wolframkriesing_twitter I think there was a stackoverflow question on that, can you check? I'm on mobile, so a bit hard right now..}
    sent: "2016-10-05T22:41:41.030Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f58164f69c94ad0991700a"
    text: {@wolframkriesing_twitter cookies actually are simple http headers afterall😛 you can write an abstraction, or maybe there is something already}
    sent: "2016-10-05T22:40:36.504Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f57c480ec6f9457da5a54c"
    text: {I am trying to figure out how to get the cookies out of an HTTP response, which means reading the headers, all I found (e.g. http://rebol.net/cookbook/recipes/0059.html) doesn't look straight-forward, is it like that in Red too? }
    sent: "2016-10-05T22:18:48.821Z"
    editedAt: "2016-10-05T22:19:25.618Z"
    v: 3
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f54748d45d7f0f52663de5"
    text: {@this-gavagai `make` does clone referenced series (`block!` is a series) in an object, because this behavior covers the best the common use-cases. Objects or maps are heavy datatypes, in the common cases, you want to keep a reference to the same ones, not clone them (though, you can clone them manually using `copy` when you really need it). Trees of objects or maps that you need to clone deeply is not a case I remember seeing often in Rebol (except in code from OOP guys, trying to bend the language to work in a purely OOP way), usually you would rather model such tree using blocks.}
    sent: "2016-10-05T18:32:40.277Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f542973c59573f6f0f3543"
    text: {Look at `copy`. It has a `/deep` refinement, so you can control whether you want it to copy nested non-scalars. `Make` with objects works similarly, except there's no `/deep` option and we just have to write a `clone` func to do it.}
    sent: "2016-10-05T18:12:39.050Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f53d80f69c94ad099062d3"
    text: {@dockimbel Indeed. That's why I was surprised that `make` doesn't clone `object!` or `map!` fields, as well. I'm sure there's a good reason for treating `block!` and `map!` differently in this regard; my reason for asking is just to try to understand Red's design.}
    sent: "2016-10-05T17:50:56.121Z"
    editedAt: "2016-10-05T17:52:04.086Z"
    v: 2
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f5399ad45d7f0f526607c5"
    text: {@this-gavagai The purpose of `make` is precisely to create a new instance of a given datatype. ;-)}
    sent: "2016-10-05T17:34:18.785Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f5391a29403a416fcbab56"
    text: {> The link Doc posted above says things well. Red doesn't copy by default. ^/^/Unless I'm completely misunderstanding, in the case of `make`, Red does copy `string!` and other `series!`by default, though, doesn't it? (Not to mention `integer!` and `float!`, but perhaps that's a different question)}
    sent: "2016-10-05T17:32:10.631Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f52fd843b5aeb0099cd717"
    text: "Let's move this discussion to red/red."
    sent: "2016-10-05T16:52:40.062Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f52fc1d45d7f0f5265e0d4"
    text: "Should change rooms to continue this chat."
    sent: "2016-10-05T16:52:17.538Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f52f3191d6af11523021bb"
    text: {`No.` can be used here, but the octothorp is the most common symbol.}
    sent: "2016-10-05T16:49:53.712Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f52efaf69c94ad09902820"
    text: {@wolframkriesing_twitter , you can create objects today, but defining a new type has to be done in Red/System, and datatypes are not like complex UDT/ADT/struct types.}
    sent: "2016-10-05T16:48:58.745Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f52ee729403a416fcb7f5f"
    text: {@greggirwin Never seen that syntax used in France (we use `n°` for that, as abbreviation for `numero` (== `number`), don't know for other EU countries.}
    sent: "2016-10-05T16:48:39.430Z"
    editedAt: "2016-10-05T16:49:18.286Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f52eb2f69c94ad09902692"
    text: "Right. :^^\"
    sent: "2016-10-05T16:47:46.992Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f52e9bd45d7f0f5265db52"
    text: {@greggirwin Remember we still have the issue-as-string vs issue-as-word duality to solve, so we'll need to reconsider how we define `issue!` type.}
    sent: "2016-10-05T16:47:23.613Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f52e8a3c59573f6f0edfd1"
    text: {re `issue!` I first thought  for a second "how cool, i can directly create github-issues in the language"}
    sent: "2016-10-05T16:47:06.945Z"
    editedAt: "2016-10-05T16:47:30.082Z"
    v: 2
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f52e7ff69c94ad099025ef"
    text: {Could be. # denoting a numeric string is common here (order #, confirmation #, etc.).}
    sent: "2016-10-05T16:46:55.913Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f52e4dd45d7f0f5265da6c"
    text: {creating types is of course the way to go, so any topic-specific type can be created ... what is the state of that, you @greggirwin are saying "When we can create user defined types more easily" what is missing?}
    sent: "2016-10-05T16:46:05.216Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f52e3743b5aeb0099cd12a"
    text: {@greggirwin I think it's a US-centric syntax, I was confused by it too at the beginning. "Hashtag" might be more meaningful world-wide.}
    sent: "2016-10-05T16:45:43.133Z"
    editedAt: "2016-10-05T16:46:03.560Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f52e0cf69c94ad0990243f"
    text: {Not at all. Phone numbers, serial numbers, record IDs, even before hashtags became a thing.}
    sent: "2016-10-05T16:45:00.916Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f52df70ec6f9457da46c11"
    text: {@dockimbel +1 i was confused and thought exactly that}
    sent: "2016-10-05T16:44:39.704Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f52de18b26e33e7d2cf776"
    text: {@wolframkriesing_twitter What if we renamed `issue!` to `hashtag!`? ;-)}
    sent: "2016-10-05T16:44:17.144Z"
    editedAt: "2016-10-05T16:44:22.710Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f52dcc3c59573f6f0edc61"
    text: "i like unit!"
    sent: "2016-10-05T16:43:56.391Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f52daf8b26e33e7d2cf6f5"
    text: {i was asking, because `issue!` seems quite exotic too, doesnt it?}
    sent: "2016-10-05T16:43:27.637Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f52d8f91d6af1152301b90"
    text: {When we can create user defined types more easily, I imagine we'll see an explosion of non-lexed types. That is, types that require `make` to construct them. That may or may not be a good thing. }
    sent: "2016-10-05T16:42:55.375Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f52d718b26e33e7d2cf678"
    text: {@wolframkriesing_twitter More types are welcome, but finding new good (and possibly natural) syntaxes is hard, as the available symbols on common keyboards are limited, and most of them already used. Though, if you have ideas for new datatypes, please propose them by all means in red/red channel. We have already a few more in mind, like ipv6!, matrix! or unit! (quantities with units).}
    sent: "2016-10-05T16:42:25.358Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f52d193c59573f6f0ed9ac"
    text: {One new type that has come up is  `ref!` which would be an `@name` value.}
    sent: "2016-10-05T16:40:57.255Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f52cf6f69c94ad09901f25"
    text: "i see"
    sent: "2016-10-05T16:40:22.173Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f52c9329403a416fcb75f0"
    text: {@wolframkriesing_twitter, the main thing to consider is what we can represent lexically, without creating ambiguities (or ugliness :^^). Then look at what is useful. Reduce the lexicon to the base elements that we use to construct bigger pieces. Ren (see ren-data.org) is intended to be the JSON equivalent for Redbol languages. There aren't too many extensions in there, and even those that are there, or TBD, generated a lot of discussion. }
    sent: "2016-10-05T16:38:43.987Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57f52b108b26e33e7d2cec56"
    text: {The link Doc posted above says things well. Red doesn't copy by default. The only thing we need to know is what types *can* be copied, or need to be constructed (e.g. object).}
    sent: "2016-10-05T16:32:16.622Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f5297bf69c94ad09901253"
    text: {@greggirwin speaking of design decision for types, what intrigued me first about rebol was types like time, tuple or pair ... those are amazing. Now that I am using it a bit more I could come up with many more types, where does Red draw the line here? Is there an active discussion about types, which to add and if to add any at all? or is this described somewhere what the process/thoughts behind it are?}
    sent: "2016-10-05T16:25:31.939Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f5265f8b26e33e7d2cd3fa"
    text: {@greggirwin Indeed. I don't have the knowledge to understand the big-picture implications behind these kinds of choices (especially wrt practical considerations like performance). My question was motivated purely by a desire to understand the design principles at play.}
    sent: "2016-10-05T16:12:15.705Z"
    editedAt: "2016-10-05T16:12:43.379Z"
    v: 2
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f5185d3c59573f6f0e84f7"
    text: {@this-gavagai, Rebol didn't document detailed datatype behavior, but because we have access to the source, we can do that for Red. How each type behaves, and whether that changes over time, is up to the design team.}
    sent: "2016-10-05T15:12:29.830Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f4bf2d43b5aeb0099b07b2"
    text: "@wolframkriesing_twitter My pleasure. ;-)"
    sent: "2016-10-05T08:51:57.691Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f4beedf69c94ad098e42eb"
    text: {thanks for helping me to get into the Red/rebol mindset of things}
    sent: "2016-10-05T08:50:53.732Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f4beb98b26e33e7d2b25eb"
    text: {@wolframkriesing_twitter Red, like Rebol allows side-effects on purpose, in order to keep both implementation and usage simple. `copy` function is there to allow you to avoid mutation when you need it. See a longer explanation here: http://www.rebol.com/article/0206.html^/}
    sent: "2016-10-05T08:50:01.954Z"
    editedAt: "2016-10-05T08:50:49.944Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f4ab9943b5aeb0099ac35c"
    text: {seeing the clone function (triggered by the earlier datetime example) I am curious what is the opinion/state in regards to immutability in Red-world? Or is that just not a low-level concern?}
    sent: "2016-10-05T07:28:25.335Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f4874343b5aeb0099a610d"
    text: {Thanks everyone. Out of curiosity, is this the intended behavior or just something that hasn't been fully clarified yet in the current alpha? Is it only `object!`, `map!`, and `bitset!`datatypes that pass through prototyping as references in this way?}
    sent: "2016-10-05T04:53:23.359Z"
    editedAt: "2016-10-05T05:03:08.285Z"
    v: 2
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f3e42f8b26e33e7d2865fb"
    text: {@this-gavagai, @SteeveGit  and I have slightly different versions of a `clone` func, and others may as well.^/```^/clone: function [^/^-"Deep make an object"^/^-object [object!]^/^-/with^/^-^-spec [block!] "Extra spec to apply"^/][^/^-cloners!: union series! make typeset! [object! map! bitset!]^/^-new: make object any [spec clear []]^/^-foreach word words-of new [^/^-^-val: get in new word^/^-^-if find cloners! type? :val [^/^-^-^-new/:word: either object? val [ clone val ][ copy/deep val ]^/^-^-]^/^-]^/^-new^/]^/```}
    sent: "2016-10-04T17:17:35.286Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f3d2d243b5aeb00997fc4e"
    text: {This is of course additional to the issue @this-gavagai signalled.}
    sent: "2016-10-04T16:03:30.580Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57f3d1de29403a416fc68d1a"
    text: {Anyway, if you look up the docstring for copy, there is a refinement called `types`which ensures only certain types of (non-scalar) fields are copied but the argument to that is `[datatype!]` whereas I would have thought it should be `[typeset!]` given the plural *types*. I will make that a wish.}
    sent: "2016-10-04T15:59:26.541Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57f3d1cec04ccb02115003bd"
    text: "IMO `copy/deep` should do exactly this."
    sent: "2016-10-04T15:59:10.900Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3d084c04ccb021150038e"
    text: "Not directly, AFAIK."
    sent: "2016-10-04T15:53:40.097Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3cf233c59573f6f09f89a"
    text: {I appreciate all the insights to my last question. This one should be much simpler: is it possible to use one object as a prototype for another while ensuring that `map!` or `object!` type fields get cloned (rather than just passed as reference)? I've tried using copy/deep, but the prototype and subsequent objects still both end up referencing the same thing.}
    sent: "2016-10-04T15:47:47.672Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f3b8a735724307023dd8bf"
    text: {Nice clean and buggy ;)  But yes, I should used Gist.}
    sent: "2016-10-04T14:11:51.804Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3b817f69c94ad098ab863"
    text: "Anyway: nice clean code."
    sent: "2016-10-04T14:09:27.934Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f3b7e629403a416fc60dbc"
    text: "Next time: use a Gist !"
    sent: "2016-10-04T14:08:38.295Z"
    editedAt: "2016-10-04T14:08:42.774Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f3b58fa848f2d24605f428"
    text: "Hm, I won’t. Too late :/"
    sent: "2016-10-04T13:58:39.458Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3b57fa848f2d24605f426"
    text: "That makes sense ;) I'll fix the code."
    sent: "2016-10-04T13:58:23.564Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3b52e43b5aeb009977372"
    text: {I will not rely on this trick for futureproof code :smirk: }
    sent: "2016-10-04T13:57:02.382Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f3b4ccc04ccb02114ffde9"
    text: {So theoretically, the loop could be just `if get word [break]`}
    sent: "2016-10-04T13:55:24.019Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3b4a1a848f2d24605f40c"
    text: {But because in Red, word in foreach is not local to foreach, it works.}
    sent: "2016-10-04T13:54:41.332Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3b47935724307023dd7ab"
    text: "@DideC You're right :) It’s a bug."
    sent: "2016-10-04T13:54:01.357Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3b42c29403a416fc5fdbf"
    text: {@rebolek last line of your func is `get word`, I would expect `get export` as you explain ?!}
    sent: "2016-10-04T13:52:44.297Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f3b31b59638aa568bef6e6"
    text: {@Rebol2Red You’re welcome. I’m glad I helped you a bit.}
    sent: "2016-10-04T13:48:11.188Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3b2e691d6af11522aa526"
    text: {@rebolek I get it. Learned a lot, Thanks.^/The purpose of my program was to 'think out of the box' and hoping to get a reaction from which i could learn.  }
    sent: "2016-10-04T13:47:18.091Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57f3af5235724307023dd6c7"
    text: {Of course, it can be called something else, `export` was just first word that came to my mind :)}
    sent: "2016-10-04T13:32:02.376Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3ad5c59638aa568bef5df"
    text: {So you can reuse refinements (which are normal values inside function) to store parsed values.}
    sent: "2016-10-04T13:23:40.002Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3ad3559638aa568bef5dd"
    text: {And at the end, it gets value of word stored in `export` and returns it.}
    sent: "2016-10-04T13:23:01.088Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3ad2035724307023dd657"
    text: {All refinements are then rewritten with values parsed from the page.}
    sent: "2016-10-04T13:22:40.149Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3ad0dc04ccb02114ffc60"
    text: {When you specify refinement, it’s value is `true`. So `export` stores name of first refinement that is `true`.}
    sent: "2016-10-04T13:22:21.352Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3acc6c04ccb02114ffc50"
    text: {`export` checks which refinement you want, otherwise the code would be more complicated}
    sent: "2016-10-04T13:21:10.287Z"
    editedAt: "2016-10-04T13:21:16.652Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3ac488b26e33e7d275f58"
    text: "I get the most of it, but export???"
    sent: "2016-10-04T13:19:04.338Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57f3abafc04ccb02114ffc32"
    text: "Of course, it can be improved further :)"
    sent: "2016-10-04T13:16:31.186Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3aab82e485b053d1f318f"
    text: {Something like this:^/```^/datetime: function [^/^-/hour^/^-/minute^/^-/second^/^-/dayname^/^-/month^/^-/day^/^-/year^/] [^/^-export: none^/^-foreach word [hour minute second dayname month day year] [^/^-^-if get word [export: word break]^/^-]^/^/^-page: read http://time.is/?lang=en^/^/^-months: [^/^-^-"january" "february" "march" "april" "may" "june" ^/^-^-"july" "august" "september" "october" "november" "december"^/^-]^/^/^-hour: minute: second:^/^-dayname: day: month: year: none^/^/^-parse page [^/^-^-thru <div id="twd"> ^/^-^-copy time ^/^-^-to </div>^/^-^-thru {title="Click for calendar">} ^/^-^-copy dayname ^/^-^-to #","^/^-^-2 skip^/^-^-copy month^/^-^-to #" "^/^-^-skip^/^-^-copy day^/^-^-to #","^/^-^-2 skip^/^-^-copy year^/^-^-to #","^/^-]^/^/^-set [hour minute second] split time #":"^/^-month: index? find months month^/^/^-get word^/]^/^/; usage:^/print [datetime/hour datetime/minute datetime/second]^/print [datetime/dayname datetime/day datetime/month datetime/year]^/```}
    sent: "2016-10-04T13:12:24.265Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3a96d65fcd8d94c30d3a6"
    text: {It should be rewritten as function where `/hour` etc. are refinements.}
    sent: "2016-10-04T13:06:53.793Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3a94165fcd8d94c30d39b"
    text: "Try `datetime/second`, it does not change."
    sent: "2016-10-04T13:06:09.920Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3a92c65fcd8d94c30d395"
    text: "So `page` is read once."
    sent: "2016-10-04T13:05:48.225Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3a92364f5e2a706b169a8"
    text: "The thing is that you are defining an object."
    sent: "2016-10-04T13:05:39.857Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3a90c64f5e2a706b169a1"
    text: {So, it’s not ideal:^/```^/datetime: context [^/^-page: read http://time.is/?lang=en^/^/^-months: [^/^-^-"january" "february" "march" "april" "may" "june" ^/^-^-"july" "august" "september" "october" "november" "december"^/^-]^/^/^-hour: minute: second:^/^-dayname: day: month: year: none^/^/^-parse page [^/^-^-thru <div id="twd"> ^/^-^-copy time ^/^-^-to </div>^/^-^-thru {title="Click for calendar">} ^/^-^-copy dayname ^/^-^-to #","^/^-^-2 skip^/^-^-copy month^/^-^-to #" "^/^-^-skip^/^-^-copy day^/^-^-to #","^/^-^-2 skip^/^-^-copy year^/^-^-to #","^/^-]^/^/^-set [hour minute second] split time #":"^/^/^-month: index? find months month^/]^/^/; usage:^/print [datetime/hour datetime/minute datetime/second]^/print [datetime/dayname datetime/day datetime/month datetime/year]^/```}
    sent: "2016-10-04T13:05:16.173Z"
    editedAt: "2016-10-04T13:05:22.798Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3a7c743b5aeb009973bed"
    text: "Thanks"
    sent: "2016-10-04T12:59:51.628Z"
    editedAt: "2016-10-04T13:00:41.535Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57f3a7b52e485b053d1f30f8"
    text: "Actually, let me improve it a bit..."
    sent: "2016-10-04T12:59:33.272Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3a78c64f5e2a706b1695f"
    text: {@Rebol2Red here’s working version:^/```^/Red []^/;-----------------------------------------------------------------------^/; Fetch date and time from internet ^/; (hack until date functions are implemented)^/;-----------------------------------------------------------------------^/datetime: context [^/^-mid: func [s start len][copy/part at s start len] ; as in Basic^/^-format2: func [^/^-^-num[integer!]^/^-^-] [^/^-^-num: form num^/^-^-if tail? next num [insert num "0"]^/^-^-return num    ^/^-]^/^-page: read http://time.is/?lang=en^/^/^-; maybe this have to be adjusted for other countries!^/^-; investigate the source of the page in a browser^/^-parse page [^/^-^-thru <div id="twd"> copy time to </div>^/^-^-thru {title="Click for calendar">} copy date to </div>^/^-]^/^/^-hour: mid time 1 2     ^/^-minute: mid time 4 2     ^/^-second: mid time 7 2^/^/^-months: [^/^-    "january" "february" "march" "april" "may" "june" ^/^-    "july" "august" "september" "october" "november" "december"^/^-]^/^/^-date: split date " "^/^-dayname: head remove back tail date/1^/^-day: head remove back tail date/3^/^/^-month: date/2^/^-year: head remove back tail date/4^/^-month: index? find months date/2^/]^/^/; usage:^/print [datetime/hour datetime/minute datetime/second]^/print [datetime/dayname datetime/day datetime/month datetime/year]^/```}
    sent: "2016-10-04T12:58:52.184Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3a7710ec6f9457d9ebcf5"
    text: "@rebolek Thanks, so nothing wrong with the code? "
    sent: "2016-10-04T12:58:25.367Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57f3a59664f5e2a706b168ef"
    text: {@Rebol2Red you should use this: `page: read http://time.is/?lang=en`}
    sent: "2016-10-04T12:50:30.462Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f3a4c12e485b053d1f305b"
    text: {@Rebol2Red Hm, doesn’t work here, because I get the result page in Czech.}
    sent: "2016-10-04T12:46:57.901Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f39cd143b5aeb009970db5"
    text: {Maybe someone can paste the right code so i can delete mine (the only thing i can do)?}
    sent: "2016-10-04T12:13:05.213Z"
    editedAt: "2016-10-04T12:13:57.267Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57f398d8f69c94ad098a34a3"
    text: {Thanks i will pay attention to that, but the program will not run over here. ^/I have a working version of it, but this is in dutch. I get the page loaded in dutch.^/Now i ca'nt edit the posted code?! ^/Because i can't run this code it has no point of posting again with possible other errors. ^/Wright/Wrong?}
    sent: "2016-10-04T11:56:08.787Z"
    editedAt: "2016-10-04T12:05:35.661Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57f3981943b5aeb00996fc01"
    text: {@Rebol2Red Please do not put line breaks between function spec and body blocks, it makes your code not paste-able in console.}
    sent: "2016-10-04T11:52:57.161Z"
    editedAt: "2016-10-04T11:53:23.333Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "57f3962329403a416fc58af9"
    text: {Will someone test this? (Will not work while copying and pasting in the console)^/```^/Red []^/;-----------------------------------------------------------------------^/; Fetch date and time from internet ^/; (hack until date functions are implemented)^/;-----------------------------------------------------------------------^/datetime: context [^/^-mid:   ^-^-func [s start len][copy/part at s start len] ; as in Basic^/^-format2:^-func[num[integer!]]^/^-[^/^-^-num: form num^/^-^-if tail? next num [insert num "0"]^/^-^-return num^-^/^-]^/^-page: read http://time.is/^/^/^-; maybe this have to be adjusted for other countries!^/^-; investigate the source of the page in a browser^/^-parse page [^/^-^-^-^-^-thru {<div id="twd">} copy time to {</div>}^/^-^-^-^-^-thru {title="Click for calendar">} copy date to { (}^/^-]^/^-^/^-hour: mid time 1 2 ^-minute: mid time 4 2 ^-second: mid time 7 2^/^/^-months: [^/^-^-"january" "february" "march" "april" "may" "june" ^/^-^-"july" "august" "september" "october" "november" "december"^/^-]^/^/^-date: ^-^-^-split date " "^/^-dayname: ^-^-date/1^/^-day: ^-^-^-date/2 2^/^-;day:^-^-^-format2 to integer! date/2 2 ; 2 digits^/^-month:      ^-date/3^/^-year:^-^-^-date/4^/^-month:^-^-^-index? find months date/3^/^-;month:         format2 to integer! index? find months date/3 2 ; 2 digits^/]^/^/; usage:^/print [datetime/hour datetime/minute datetime/second]^/print [datetime/dayname datetime/day datetime/month datetime/year]^/```}
    sent: "2016-10-04T11:44:35.480Z"
    editedAt: "2016-10-04T11:48:59.971Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57f28dc591d6af115226bd2d"
    text: {Definition of Simple by carl http://www.rebol.com/article/0509.html}
    sent: "2016-10-03T16:56:37.418Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f28d8a43b5aeb009936f29"
    text: "wrong quote :p "
    sent: "2016-10-03T16:55:38.433Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f28cb3d45d7f0f525c6cf0"
    text: {> "Simple Made Easy"^/^/-Rich Hickey}
    sent: "2016-10-03T16:52:03.444Z"
    editedAt: "2016-10-03T16:55:26.719Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f28c9291d6af115226b8c1"
    text: {The "right" way is not always obvious}
    sent: "2016-10-03T16:51:30.515Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f28c7fd45d7f0f525c6b8b"
    text: {@wolframkriesing_twitter It may or may not.. Red strives to be simple at everything, so you have to balance convenience, performance, etc..}
    sent: "2016-10-03T16:51:11.064Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f28c19f69c94ad0986a660"
    text: {@greggirwin +1, absolutely true. if the red-way is to do it right, which is more complex, I think it makes sense. I am just the messenger, watching where this is heading :)}
    sent: "2016-10-03T16:49:29.926Z"
    editedAt: "2016-10-03T16:50:20.155Z"
    v: 2
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f28c0091d6af115226b63e"
    text: {@wolframkriesing_twitter, sounds easy, but is it a good long term choice. Using a decimal to represent days+time in whole/frac part seems very un-Red. Now it's just a number with no type information.}
    sent: "2016-10-03T16:49:04.521Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f28bcef69c94ad0986a3fc"
    text: {It works really well for Frink IMHO, but I don't know if .. maybe it would be the best thing for Red}
    sent: "2016-10-03T16:48:14.139Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f28bc70ec6f9457d9b0bc1"
    text: {@geekyi how does the pedantic part collide with red goals?}
    sent: "2016-10-03T16:48:07.351Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f28b983c59573f6f05779a"
    text: {applying occam's razor that would be the thing to do :)}
    sent: "2016-10-03T16:47:20.872Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f28b7e8b26e33e7d239467"
    text: {Note tho, Frink may have different design goals: https://frinklang.org/LL4.html#slide7^/>When in doubt, be pedantic}
    sent: "2016-10-03T16:46:54.805Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f28b3ef69c94ad0986a246"
    text: {@wolframkriesing_twitter Maybe that is the right way :smile: }
    sent: "2016-10-03T16:45:50.417Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f289e729403a416fc1e6c1"
    text: {nice, https://frinklang.org/#DateTimeArithmetic  easy solution would be to return correct amount of days, including fractions^/```^/>> 2016-12-24/10:00 - 2016-10-01/11:00  ^/== 84.976^/```^/(the `.976` is random)^/instead of just `84` as rebol does }
    sent: "2016-10-03T16:40:07.949Z"
    editedAt: "2016-10-03T16:40:53.428Z"
    v: 3
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f289b629403a416fc1e5ae"
    text: {I'll check out Frink again. I do recall that I liked it being like Wolfram, with unit support.}
    sent: "2016-10-03T16:39:18.747Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f28928d45d7f0f525c5c79"
    text: {In general, the way quantities are handled is awesome}
    sent: "2016-10-03T16:36:56.363Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f2890a3c59573f6f0569a1"
    text: {The representation is not that nice, but the actual handling is pretty awesome}
    sent: "2016-10-03T16:36:26.646Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f28876f69c94ad098693d4"
    text: {@greggirwin I particularly like the way it is dealt with in [Frink](https://frinklang.org/#DateTimeHandling)}
    sent: "2016-10-03T16:33:58.564Z"
    editedAt: "2016-10-03T16:35:39.191Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f2886b43b5aeb0099358c9"
    text: {Need to explore how you get useful results which allow you to go from abs to rel and back to a correct abs.}
    sent: "2016-10-03T16:33:47.298Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f2882f43b5aeb00993579b"
    text: {Right. `Date-diff` will take some thought, as would a supporting relative date data model. I've seen it as [months days time] and [days time]. }
    sent: "2016-10-03T16:32:47.943Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f287868b26e33e7d2380fa"
    text: "which is the result of `difference`, it seems"
    sent: "2016-10-03T16:29:58.255Z"
    editedAt: "2016-10-03T16:30:09.053Z"
    v: 2
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f287710ec6f9457d9af5c5"
    text: {@greggirwin in sql you also have `select timediff("2016-12-24 10:00", Now())`}
    sent: "2016-10-03T16:29:37.671Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f287398b26e33e7d237f9a"
    text: {@geekyi hadn't realized before that you could look at the rebol source! :O}
    status: true
    sent: "2016-10-03T16:28:41.757Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f2871943b5aeb009935370"
    text: {@DideC why not add that to the answer  :point_up: [October 3, 2016 9:11 PM](https://gitter.im/red/help?at=57f2834a29403a416fc1c77d) (If you think it is a good idea)}
    sent: "2016-10-03T16:28:09.615Z"
    editedAt: "2016-10-03T16:29:32.795Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f286fc3c59573f6f0560de"
    text: {Just had a quick look, and the date! subtraction behavior may have been aligned with `DATEDIFF` in SQL.}
    sent: "2016-10-03T16:27:40.716Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f28699d45d7f0f525c50f7"
    text: {would be heck awesome if something like that comes out of the box, now the question might be where would the line to be drawn then. because there are lots of things that would be awesome ... that's something I guess you, core guys, have already made up your mind about}
    sent: "2016-10-03T16:26:01.110Z"
    editedAt: "2016-10-03T16:26:40.964Z"
    v: 3
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f286623c59573f6f055e07"
    text: {I have a lot of date! mezzanines, but no `date-diff`. I suppose rel-date! would be like timespan in some other langs.}
    sent: "2016-10-03T16:25:06.108Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f2865dd45d7f0f525c4fed"
    text: "definitely interesting"
    sent: "2016-10-03T16:25:01.387Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f286308b26e33e7d237bc4"
    text: {@greggirwin :+1: or something in general in the language that dealt with relative vs absoulte values}
    sent: "2016-10-03T16:24:16.433Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f285a0d45d7f0f525c4c2b"
    text: {If we had a relative-date! type, it could return full info. A `date-diff` would be easy to write, and let you control your result. The rebol behavior makes some things easy, and others a bit more work. Another one of those darn subjective design decisions. :^^)}
    sent: "2016-10-03T16:21:52.063Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f2851391d6af1152269378"
    text: {tbh I didn't think that far either, I just thought: the people behind red/rebol are smarter than me, so let's see what they did to date-math :)}
    sent: "2016-10-03T16:19:31.194Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f284d629403a416fc1ce20"
    text: {You can certainly make a wish request, but it needs to be well thought out. Red doesn't have date! yet, so we have a better chance of changing it now. It will break rebol compatibility though.}
    sent: "2016-10-03T16:18:30.723Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f2845029403a416fc1cc1b"
    text: {@wolframkriesing_twitter yeah, ^/```^/>> time-diff: difference 24-dec-2016 now^/== 1951:42:11^/>> time-diff/2^/== 42^/```}
    sent: "2016-10-03T16:16:16.791Z"
    editedAt: "2016-10-03T16:18:13.417Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f283b00ec6f9457d9adff4"
    text: {I actually thought there was something like (not-working syntax ahead): `(24-dec-2016 - now)/minutes` ... but since the subtraction returns an integer the refinement I tried can not even work (besides being invalid syntax, right?)}
    sent: "2016-10-03T16:13:36.157Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f2835c3c59573f6f054a44"
    text: "yep :)"
    sent: "2016-10-03T16:12:12.856Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f2834a29403a416fc1c77d"
    text: {The uggly math : ^/```^/in-minutes: func [d1 [date!] d2 [date!] /local d t] [d: d2 - d1 d1/date: d2/date t: difference d2 d1 d * 1440 + t/hour * 60 + t/minute]^/```}
    sent: "2016-10-03T16:11:54.910Z"
    editedAt: "2016-10-03T16:12:12.620Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f28325d45d7f0f525c41e4"
    text: {Or maybe you don't want that.. that is enough :point_up: [October 3, 2016 8:54 PM](https://gitter.im/red/help?at=57f27f4e3c59573f6f05355f)}
    sent: "2016-10-03T16:11:17.448Z"
    editedAt: "2016-10-03T16:11:36.743Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f2830891d6af1152268abc"
    text: {@geekyi i had no expectation, was just playing around and then I had the idea to get minutes, instead of days ... without doing the ugly math :)}
    sent: "2016-10-03T16:10:48.346Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f282e591d6af1152268a70"
    text: "The literal representation"
    sent: "2016-10-03T16:10:13.937Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f282d929403a416fc1c524"
    text: {The thing is, how do you expect your result to be?}
    sent: "2016-10-03T16:10:01.002Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f282bcd45d7f0f525c3b76"
    text: {@geekyi  http://stackoverflow.com/questions/39835881/red-rebol-subtracting-dates-returns-days-how-can-i-change-that}
    sent: "2016-10-03T16:09:32.717Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f282b929403a416fc1c4ac"
    text: "link ?"
    sent: "2016-10-03T16:09:29.363Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f282b129403a416fc1c480"
    text: "@geekyi done"
    sent: "2016-10-03T16:09:21.169Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f28296f69c94ad09867264"
    text: {@wolframkriesing_twitter I just realized something else (about how that will literally look like) let me know when you have posted the question :wink: }
    sent: "2016-10-03T16:08:54.913Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f2822629403a416fc1c249"
    text: {Hour result is bound to the internal representation. So with two spaced dates, result will be truncated, ence false.}
    sent: "2016-10-03T16:07:02.953Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f27fb93c59573f6f053665"
    text: {i see, the other meaning of `difference`, hadn't even thought it would do that }
    sent: "2016-10-03T15:56:41.717Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f27f4e3c59573f6f05355f"
    text: {@wolframkriesing_twitter `difference` seems to get you half-way there:^/```^/difference 24-dec-2016 now^/== 1952:06:01^/```}
    sent: "2016-10-03T15:54:54.748Z"
    editedAt: "2016-10-03T15:55:09.716Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f27ef50ec6f9457d9ac77f"
    text: {now I have to find my credentials again :) I knew the day would come}
    sent: "2016-10-03T15:53:25.910Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f27ec98b26e33e7d2355b6"
    text: "so its re-readable for others, thx"
    sent: "2016-10-03T15:52:41.825Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f27ebd43b5aeb0099322cd"
    text: "good point, will do"
    sent: "2016-10-03T15:52:29.247Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
)#(
    id: "57f27eaa29403a416fc1b3cd"
    text: {@wolframkriesing_twitter why not ask on stackoverflow.com?}
    sent: "2016-10-03T15:52:10.305Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f27a668b26e33e7d234312"
    text: {a rather simple question, playing with the date type, I was wondering, why a subtraction always returns days, how can I make it return minutes, which could be possible in the second example^/```rebol^/>> 24-dec-2016 - now^/== 82^/>> 24-dec-2016/0:00 - now^/== 82^/```^/is that just arbitrary or can I influence it? I tried around a bit with refinements, but would appreciate a push in a direction, the rebol/red way. thx}
    sent: "2016-10-03T15:33:58.897Z"
    v: 1
    author: "57f0e767d73408ce4f2b11bd"
) #(
    id: "57f2064434a8d5681cd8719a"
    text: {@this-gavagai That's one way to approach it, yes. Think about the usage patterns of the public API(s) you want to expose and capture them into an appropriate grammar. The larger the API and the usage patterns, the more gains you'll get from a wrapping DSL.}
    sent: "2016-10-03T07:18:28.424Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f143ef16c37362201e6776"
    text: {As to your parse example, yes, that's exactly the idea. It puts a new onus and emphasis on the designer, because now you're a language designer. That doesn't necessarily mean more work, but different work. What it does, very clearly, is force you to explicitly design and declare the public interface to your data. And if your data is all Red as well, it's easy to parse at the block level, which means you can write different dialects for different purposes (e.g. data gathering and admin, reporting, statistics).}
    sent: "2016-10-02T17:29:19.764Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f142a516c37362201e6326"
    text: {@this-gavagai my comment about reuse was based on^/> The problem is that a lot of these projects are maintained over long periods of time by loose networks of sloppy programmers^/^/I think Doc, and your further posts, have cleared up my confusion.}
    sent: "2016-10-02T17:23:49.476Z"
    editedAt: "2016-10-02T17:24:42.685Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f1260d0ff4ef7a50faa96b"
    text: {Also, thanks everyone. This has been a very warm welcome to a new community.}
    sent: "2016-10-02T15:21:49.884Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f125d7be5dec755012c377"
    text: {@geekyi Most immediately, my goal is to allow those I work with to rewrite their components without having to worry about whether doing so will break other people's code. More abstractly, I'm trying to think about how components in a simulation might communicate and interact with each other in an elegant, semantically-oriented way. This is what I find so intriguing about the work you guys are doing. Red's highly reflective nature has certainly been handy to me as I try to learn it, but it's also potentially very interesting to the extent that it allows objects in a context to ask questions about each other.}
    sent: "2016-10-02T15:20:55.495Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f125c934a8d5681cd601e0"
    text: {@dockimbel Very interesting. So the idea here would be to make objects, variables, and functions as usual and then define a grammar to poll and prod those things in a specifically constrained way?^/^/For example, rather than access `weather_module/temperature` directly, I might define a function called `request` that (in tandem with `parse`, presumably) can return the appropriate value to `request temperature from weather_component` but also reject `request private_variable from weather_component`?^/^/I've read about dialecting a bit, but I've always felt like I was missing something fundamental. Now that you've explained it as a way of abstracting away from an underlying implementation, the power of it all seems so obvious. I can't believe I didn't think of it in those terms before. I'm a linguist by training, and this is actually far more intuitive to me than all those headers and modifiers used in OOP. Very cool :)}
    sent: "2016-10-02T15:20:41.977Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f125bc6f39416b1ce0bf73"
    text: {@greggirwin I think I follow where you're going, but I'm not really looking to share or reuse code, I don't think. The question I'm trying to ask is how to best conceptualize the structure of data (some of which is evaluated as code) in order to make it clear which parts are "outward facing" and which parts aren't. }
    sent: "2016-10-02T15:20:28.263Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f0f6fcbe5dec7550124637"
    text: "New goal: post a stackoverflow question daily"
    sent: "2016-10-02T12:01:00.045Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f0f6e4b0ff456d3ada75fd"
    text: {I need to learn more about the redbol network stack and how to design http apis in red}
    sent: "2016-10-02T12:00:36.557Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f0f67e34a8d5681cd585dd"
    text: {Does anyone have an implementation of the github or gitter apis?}
    sent: "2016-10-02T11:58:54.012Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57f0f382b0ff456d3ada6cbe"
    text: {>`function` uses optional strings to self-document in a way that's accessible at runtime. Maybe something like that is the most elegant solution here?^/^/I believe so. Advantage of self documenting :smile:^/If you want even simpler api/interface you can go with dialecting as Doc says. (then you don't have the self documenting advantage tho) In all these cases, `parse` is useful}
    sent: "2016-10-02T11:46:10.664Z"
    editedAt: "2016-10-02T11:47:09.829Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f0f2c7be5dec7550123b95"
    text: {@this-gavagai what is your goal? Is to design andwrite simple interfaces? Or write modules? If so writing functions and using `spec-of` have been helpful for me. }
    sent: "2016-10-02T11:43:03.281Z"
    editedAt: "2016-10-02T11:43:12.926Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57f0d594b0ff456d3ada1ff4"
    text: {@this-gavagai You should consider creating dialects (DSL) as the high-level interface for each of your domains, instead of using classic OOP approach, which is not the best use of Red/Rebol features. They will provide much better domain-oriented abstractions, while hiding away the implementation details.}
    sent: "2016-10-02T09:38:28.910Z"
    editedAt: "2016-10-02T09:38:56.791Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f0d4e2c512d9653a5d8668"
    text: {@greggirwin "Reducers " :+1:  We strive to be *complexity reducers*! ;-)}
    sent: "2016-10-02T09:35:30.919Z"
    editedAt: "2016-10-02T09:36:23.717Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f08c8cd38f186520b9766d"
    text: {It's late here, so I'll sleep on it and write more tomorrow. A couple quick thoughts though. Red is data. Sometimes that data is evaluated as code, but think about everything being data which you can process in different ways (and where `parse` comes in). In that light, don't think about sharing code and making the code last. Think about structuring and sharing data so *it* can last and is amenable to processing and understanding.^/^/Thought #2, it has been said that reuse in the small is a solved problem, but reuse in the large is still an unsolved problem.}
    sent: "2016-10-02T04:26:52.711Z"
    editedAt: "2016-10-02T04:27:36.158Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f085750ff4ef7a50f92469"
    text: {@greggirwin Thank you, this was very orienting. The problem I'm trying to solve is not so much safety as just plain old conceptual complexity. I work in the social sciences, and there's real interest right now in better approaches to modeling and simulation. I'm still new to the spirit of Red, but from what I've gathered so far it seems to be *exactly* what everyone's looking for. The problem is that a lot of these projects are maintained over long periods of time by loose networks of sloppy programmers, people like me who are able enough to slap some code together but who generally possess very little sense of best practices. For example, in a simulation of the agricultural sector, you might have one researcher modeling weather, another modeling consumer demand, and someone else doing finance markets. Each component would generally evolve independently over time, so the less we all have to know about the inner workings of each others code, the better.^/^/I'm fully on board with a compositional approach to objects, but it would still be very useful to be able to define the public interface of objects clearly and explicitly somehow. I really like, for example, the way that `function` uses optional strings to self-document in a way that's accessible at runtime. Maybe something like that is the most elegant solution here? I assume I could accomplish something similar by using a mezzanine function to create my objects rather than invoking `make object!` directly. That wouldn't stop people from altering internal values directly from the console, of course, but it could perhaps allow a higher level interface of some sort to maintain control over access. Is this totally the wrong way to be thinking about it? I appreciate your time here. It is tremendously valuable to have so much access to people with so much experience.}
    sent: "2016-10-02T03:56:37.897Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f0856cd38f186520b968e7"
    text: {@PeterWAWood Thank you for finding these threads! It's very helpful to see some of the history here. I also came across the Rebol 3 function protect/hide, which seems conceptually similar in at least some respects. In any case, I'm glad to hear that wasn't just missing something obvious, and I look forward to seeing how Red moves forward with these questions.}
    sent: "2016-10-02T03:56:28.672Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57f0097e6f39416b1cde2055"
    text: {Welcome @this-gavagai! This question comes up from time to time (in Rebol's history), and it's  a good one. Technically, we can do it a number of ways (I can post a simple `use` mezzanine if you want to play with that). I haven't seen anyone pursue it and doc their experiences though. I did the same thing when I found Rebol. I implemented a few things, ended up using a naming convention after that, but often don't even do that. I would hazard a guess that most long time Redbol users are the same, based on code I've seen.^/^/That said, Red goes beyond Rebol. As it adds features to aid PitL, Reducers (Red Users :^^) may revisit this technique. Until we have a module system, and object design (for things like accessors or schemas) is fleshed out, we don't know what Red will provide, and where the line is that says "tooling starts here."^/^/I'm glad you asked if there's another way you should think about it, to align with Red's principles. With that mindset, you'll make a great Reducer. And, yes, there are principles. Briefly (I know this is getting long already), Red gives you enormous freedom, and safety comes in different forms than other languages. e.g. values are strongly typed but "variables" are not. For now, think of objects more like structs or dicts. Red also has a map! type. A little doc on the structured types and their strengths/weaknesses is a great idea. ^/^/Think in terms of composition, prototype-based, rather than inheritance and classes. Though people have built entire class systems as well. ^/^/I'll stop now. }
    sent: "2016-10-01T19:07:42.845Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ef5e990ff4ef7a50f634c5"
    text: {This may be a [better thread](http://www.rebol.org/ml-display-thread.r?m=rmlRYTS) to read.}
    sent: "2016-10-01T06:58:33.279Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ef5bad0ff4ef7a50f62d93"
    text: {There are other techniques that can be used and @dockimbel may have something better planned.}
    sent: "2016-10-01T06:46:05.387Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ef5b3734a8d5681cd1938c"
    text: {@this-gavagai There is a technique using ```use``` to create "private" words  in a context (object). It is explained in this Rebol mailing list [thread](http://www.rebol.org/ml-display-thread.r?m=rmlRJCC). ```use``` is not yet implemented in the current alpha release of Red.}
    sent: "2016-10-01T06:44:07.733Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ef20420ff4ef7a50f5a63d"
    text: {Hello, I'm having a lot of fun learning Red. Is there as yet a way to mark object fields as private? (Or, alternately, is there another way that I should be thinking about object interfaces more in line with Red/Rebol's design principles?)}
    sent: "2016-10-01T02:32:34.539Z"
    v: 1
    author: "57ee731dd73408ce4f2acc90"
) #(
    id: "57eea367b0ff456d3ad48f4a"
    text: "@greggirwin Thanks Gregg for the tip."
    sent: "2016-09-30T17:39:51.786Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ee309416c373622015eace"
    text: {@Mufferaw You're welcome. @qtxie My mistake, I forgot to turn off the auto-refreshing mode.}
    sent: "2016-09-30T09:29:56.102Z"
    editedAt: "2016-09-30T09:30:03.030Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ee2123d38f186520b27be5"
    text: {Arf, you are right. In a previous version there was a big one, but many things have changed since, and it seems to not be as relevant as before.}
    sent: "2016-09-30T08:24:03.333Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee1f3f0ff4ef7a50f1fa7a"
    text: "@DideC  I didn't notice any difference"
    sent: "2016-09-30T08:15:59.732Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ee1cab6f39416b1cd83d0b"
    text: {In my [livecode](https://gist.github.com/DideC/85d60c99f97f2e4972a6f7b09a1fe630) version with splitters, I had to disable auto-refresh when the splitter is dragged and do the `show` manually after all faces coords are changed. Else, refresh is done for each `XX/size` or `XX/offset` changes and its too heavy to be responsive. You can test it by changing the `on-drag-start` last value from `no` to `yes`.}
    sent: "2016-09-30T08:04:59.948Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee1b9ec512d9653a5600b5"
    text: "Exactly"
    sent: "2016-09-30T08:00:30.653Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57ee1b536f39416b1cd837d1"
    text: {ohhh, I was wondering about that, when the canvas would update. So if  system/view/auto-sync? is 'no' then 'show canvas is needed?}
    sent: "2016-09-30T07:59:15.356Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ee17acd6c90e8a6e65f4a0"
    text: {The solution is use `Deferred updating` mode, I updated the here:^/https://gist.github.com/qtxie/5318c5dc61f9584846d7f230fb7a07b9}
    sent: "2016-09-30T07:43:40.254Z"
    editedAt: "2016-09-30T07:46:19.813Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57ee1755d56b91170dfc7949"
    text: {@Mufferaw There is an issue in the code. ^/When insert this line of code (`fill-pen <color> circle <coord> 5`) into the draw block, the `canvas` face! will be refreshed immediately (Realtime updating mode). But the draw block is not completely constructed, it will case the following draw error:^/```^/*** Script Error: invalid Draw dialect input at: [<color> circle <coord> 5]^/*** Where: ???^/```}
    sent: "2016-09-30T07:42:13.730Z"
    editedAt: "2016-09-30T07:45:59.777Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57edff34be5dec755009c030"
    text: {@greggirwin It turned out ok and I learned a lot in the process, thanks to all the help I received here!}
    sent: "2016-09-30T05:59:16.912Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57edfd6dc512d9653a55a0ee"
    text: "@Mufferaw, nice!"
    sent: "2016-09-30T05:51:41.842Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57edf2830ff4ef7a50f16eac"
    text: "@dockimbel  No problem! Thank you."
    sent: "2016-09-30T05:05:07.524Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ededb30ff4ef7a50f16361"
    text: {I cleaned up the window size and increased the grid size, so it is a bit more 'exciting' now}
    sent: "2016-09-30T04:44:35.091Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57eded9034a8d5681cccfe3b"
    text: {https://gist.github.com/Mufferaw/b418dfb71c0f4c82053551e57dbdf3b5}
    sent: "2016-09-30T04:44:00.641Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57eded20c512d9653a5577e5"
    text: {@dockimbel  I also want to thank you for taking the time to fix my 'game of life' }
    sent: "2016-09-30T04:42:08.229Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ede9cc6f39416b1cd7a953"
    text: "Thanks Doc!"
    sent: "2016-09-30T04:27:56.959Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ede2826f39416b1cd79748"
    text: {@TimeSlip Keyboard shortcuts using char! values are not yet implemented in VID.}
    sent: "2016-09-30T03:56:50.734Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ede25dd38f186520b1c57a"
    text: "@greggirwin See `help do-actor`."
    sent: "2016-09-30T03:56:13.771Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ed75140ff4ef7a50eff67f"
    text: {http://doc.red-lang.org/gui/View.html contains details on face and event elements.}
    sent: "2016-09-29T20:09:56.076Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ed74af34a8d5681ccb9285"
    text: {I don't know what the plan is for something like `do-face` yet, to trigger its default actor.}
    sent: "2016-09-29T20:08:15.969Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ed743c6f39416b1cd64ad9"
    text: {You could also do it more inline:^/```^/cmd-do: does [print "hello"]^/view [^/    button "DO" [cmd-do] on-key [if all [event/ctrl? #"A" = event/key][cmd-do]]^/]^/```}
    sent: "2016-09-29T20:06:20.515Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ed73a534a8d5681ccb8e77"
    text: {```^/cmd-do: does [print "hello"]^/handle-key: func [face event][^/    if event/ctrl? [^/        switch event/key [^/            #"A" [cmd-do]^/        ]^/    ]^/]^/view [^/    button "DO" [cmd-do] on-key [handle-key face event]^/]^/```}
    sent: "2016-09-29T20:03:49.398Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ed736934a8d5681ccb8da2"
    text: {Red VID doesn't handle shortcut keys like REBOL VID at this time. You can add an `on-key` actor to do it though. e.g.}
    sent: "2016-09-29T20:02:49.911Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ed6d51d38f186520b04ec7"
    text: {@geekyi Thank you. At least it doesn't produce an error. Good night.}
    sent: "2016-09-29T19:36:49.755Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed6d420ff4ef7a50efd7f2"
    text: "I should probably get to sleep. Goodnight"
    sent: "2016-09-29T19:36:34.599Z"
    editedAt: "2016-09-29T19:36:43.496Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed6d23d38f186520b04e30"
    text: "Sorry"
    sent: "2016-09-29T19:36:03.455Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "57ed6cecbe5dec7550080762"
    text: {@TimeSlip Ah ok, I think I misunderstood, no it doesn't}
    sent: "2016-09-29T19:35:08.333Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed6cbcc512d9653a53f1ff"
    text: {When you press the "A" key, it prints "hello"?}
    sent: "2016-09-29T19:34:20.964Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed6bec16c3736220139ffa"
    text: {```^/view [button #"^^A" "DO" [print "hello"] ]^/```}
    sent: "2016-09-29T19:30:52.238Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed6bce16c3736220139f65"
    text: {prints "hello" for me}
    sent: "2016-09-29T19:30:22.626Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed6bc1be5dec755007fe9b"
    text: {@TimeSlip sorry, I don't know what could be the problem, both the builds seem to be based on latest git master}
    sent: "2016-09-29T19:30:09.513Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed5ea16f39416b1cd5eef9"
    text: "Windows as well."
    sent: "2016-09-29T18:34:09.927Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed5e95be5dec755007c907"
    text: "I'm using 28sep16 build. "
    sent: "2016-09-29T18:33:57.186Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed53e40ff4ef7a50ef6d0f"
    text: {[![blob](https://files.gitter.im/red/help/GvHO/thumb/blob.png)](https://files.gitter.im/red/help/GvHO/blob)}
    sent: "2016-09-29T17:48:20.743Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed535d34a8d5681ccb0e7d"
    text: {@TimeSlip works for me. Windows, red build `red-26sep16-5ec74dc`}
    sent: "2016-09-29T17:46:05.915Z"
    editedAt: "2016-09-29T17:47:11.441Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed4e570ff4ef7a50ef5623"
    text: {No errors but pressing "A" does nothing. }
    sent: "2016-09-29T17:24:39.393Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed4df6d38f186520afd253"
    text: {view [button #"^^A" "DO" [print "hello"] ]  }
    sent: "2016-09-29T17:23:02.576Z"
    editedAt: "2016-09-29T17:23:22.811Z"
    v: 2
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed46410ff4ef7a50ef3407"
    text: {Personally I like the choice but I'm sure there are things I am not considering.}
    sent: "2016-09-29T16:50:09.655Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed45ffbe5dec755007612f"
    text: "That was easy."
    sent: "2016-09-29T16:49:03.750Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed45f8b0ff456d3acfc18a"
    text: "oh, thanks Doc."
    sent: "2016-09-29T16:48:56.967Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed45d9c512d9653a5348ca"
    text: {@TimeSlip Use `#"^^A"`. I wonder if we should support ^^ escaping with lowercase letters.}
    sent: "2016-09-29T16:48:25.121Z"
    editedAt: "2016-09-29T16:49:22.889Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ed454b6f39416b1cd588af"
    text: {Can anyone tell me  what the Red equivalent is to #"^^a"  ?  I'm trying to add a keypress to a button and Red doesn't seem to like the Rebol notation. Thank you!}
    sent: "2016-09-29T16:46:03.947Z"
    v: 1
    author: "55817d1415522ed4b3e20c47"
) #(
    id: "57ed44b76f39416b1cd58674"
    text: "@greggirwin yeah, that is what's happening"
    sent: "2016-09-29T16:43:35.681Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed43fac512d9653a53411c"
    text: {It may just hit a static state. There are patterns that will never change once they exist.}
    sent: "2016-09-29T16:40:26.491Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ed4275d38f186520afa12c"
    text: {@dockimbel it looks like everything "dies", doesn't seem to be designed to wrap. I think it works as intended}
    sent: "2016-09-29T16:33:57.290Z"
    editedAt: "2016-09-29T16:35:39.817Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed421416c373622012f3b1"
    text: {@Mufferaw [This version](https://gist.github.com/dockimbel/422ad7631661abbc1afa511b6e981761) has a working display, though, not sure why it stops after a few seconds.}
    sent: "2016-09-29T16:32:20.133Z"
    editedAt: "2016-09-29T16:32:34.019Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ed40306f39416b1cd572d9"
    text: {@Mufferaw :smile: it was good.. :smile: next time use an `image!` ya?}
    sent: "2016-09-29T16:24:16.492Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed3f98c512d9653a532d6f"
    text: {Thanks for the help! It's past my bedtime, I'll have to try again tomorrow.}
    sent: "2016-09-29T16:21:44.893Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed3a83be5dec7550072984"
    text: {@Mufferaw It seems you are creating a new Draw block for displaying each time, but that block is not the one you passed to `draw` command (that one does not seem to be modified), so your display will not change. What you need to do is re-use the block of Draw commands (by clearing it, and filling it again), and not create new ones each time.}
    sent: "2016-09-29T16:00:03.260Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ed3a45d38f186520af7bf9"
    text: {yeah, it looks a lot like C code, I don't really understand Red yet.}
    sent: "2016-09-29T15:59:01.748Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed39bbbe5dec75500726ac"
    text: "Your code can be simplified tho.."
    sent: "2016-09-29T15:56:43.791Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed39a234a8d5681cca9f7e"
    text: {@Mufferaw I don't think it's a problem with your view code, unless I'm reading it wrong}
    sent: "2016-09-29T15:56:18.671Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed390a6f39416b1cd54fa7"
    text: {:smile:  I think I got a bit too excited and didn't really dig through the VID documentation enough}
    sent: "2016-09-29T15:53:46.599Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed38a216c373622012cc7b"
    text: {scratchgrid is the temporary block for the updated values, after I check the neighboring cells.^/This is one is not based on rebol code, I was trying to go through the documentation and get it working myself as way to learn Red.}
    sent: "2016-09-29T15:52:02.173Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed377cb0ff456d3acf86fa"
    text: "Btw, is this based on some rebol code?"
    sent: "2016-09-29T15:47:08.382Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed375bbe5dec7550071c25"
    text: {Better define `scratchgrid:` on the outside (oh wait, you have! hmm..)}
    sent: "2016-09-29T15:46:35.063Z"
    editedAt: "2016-09-29T15:49:57.013Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed36ce0ff4ef7a50eee9ac"
    text: {@Mufferaw^/```^/scratchgrid is a block! of value: [[false .. ]]^/```^/All false there, is that's what is supposed to be?}
    sent: "2016-09-29T15:44:14.744Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed35f0d38f186520af69c8"
    text: "no, it seems it is changing"
    sent: "2016-09-29T15:40:32.548Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed35da6f39416b1cd54368"
    text: "@geekyi is multitasking"
    status: true
    sent: "2016-09-29T15:40:10.756Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed34166f39416b1cd539d3"
    text: "Hmm! You're right, it's not changing.^/"
    sent: "2016-09-29T15:32:38.966Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed33cdb0ff456d3acf784b"
    text: "The code inside drawblock gets executed alright"
    sent: "2016-09-29T15:31:25.216Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed33a0b0ff456d3acf7788"
    text: {I wonder if you are actually changing anything in the drawblock @Mufferaw }
    sent: "2016-09-29T15:30:40.260Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed3226be5dec7550070399"
    text: "all the circles in the drawblock block are white^/"
    sent: "2016-09-29T15:24:22.997Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed320db0ff456d3acf702c"
    text: {I put probe in the on-time block and all the circles are white ^/}
    sent: "2016-09-29T15:23:57.239Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed31836f39416b1cd52aca"
    text: {It seemed like a good exercise to learn about Red :smile: }
    sent: "2016-09-29T15:21:39.404Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed313c34a8d5681cca76dc"
    text: {@Mufferaw ah, game of life :smile: you can also use an image and manipulate the pixels if you want.. right now, what I'd do is put a `probe` to see if it updates properly}
    sent: "2016-09-29T15:20:28.090Z"
    editedAt: "2016-09-29T15:21:01.595Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed3003d38f186520af50ae"
    text: {@geekyi https://gist.github.com/Mufferaw/cbb9862a8b0df3021125042e64c61678^/}
    sent: "2016-09-29T15:15:15.658Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed2fd76f39416b1cd521ea"
    text: "I'm not exactly sure what you are trying out now"
    sent: "2016-09-29T15:14:31.010Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed2f8b0ff4ef7a50eec933"
    text: {@Mufferaw would be helpful if you can post all your code as a [gist](https://gist.github.c)}
    sent: "2016-09-29T15:13:15.700Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed2f7f0ff4ef7a50eec8b8"
    text: "should I just draw a box over everything?^/"
    sent: "2016-09-29T15:13:03.864Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed2f12b0ff456d3acf606d"
    text: "@geekyi yes^/"
    sent: "2016-09-29T15:11:14.537Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed2effbe5dec755006f6bd"
    text: {Are you looking at https://github.com/red/code/blob/master/Scripts/bubbles.red ?}
    sent: "2016-09-29T15:10:55.282Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed2df80ff4ef7a50eec0f5"
    text: {Now I've got my circles drawn but I want update them, I tried^/```^/view [^/        size 800x600^/        canvas: base 780x580 draw drawblock rate 30 ^/        on-time [^/           do iterate^/           do refresh^/           do sync-grids  ^/           show canvas   ^/        ]     ^/    ]^/```^/the 'do refresh' function changes the drawblock but sadly it doesn't redraw it. How can I updat the view?}
    sent: "2016-09-29T15:06:32.020Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed0beac512d9653a521db7"
    text: "I will change it!^/"
    sent: "2016-09-29T12:41:14.125Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed0be4fdfac4436c12f5b6"
    text: "Done."
    sent: "2016-09-29T12:41:08.583Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ed0bbabe5dec7550062d72"
    text: "It is.. "
    sent: "2016-09-29T12:40:26.994Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "57ed0b4aaa1f6dce24627fb5"
    text: "It’s bit different question though, but yes :)"
    sent: "2016-09-29T12:38:34.662Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ed0b3a16c373622011e9b4"
    text: {@rebolek you going to answer that, or should I? :tongue: }
    sent: "2016-09-29T12:38:18.681Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed0acb0ff4ef7a50ee08ae"
    text: {@geekyi  I have posted the question^/http://stackoverflow.com/questions/39770518/convert-a-block-of-strings-to-a-block-in-red^/}
    sent: "2016-09-29T12:36:27.163Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed06e80ff4ef7a50edf225"
    text: {@Mufferaw why not also post your question on stack overflow? So others will also learn. "how to convert a block of strings into a block" :wink: }
    sent: "2016-09-29T12:19:52.628Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ed0125d6c90e8a6e65d766"
    text: "Remember, code is data."
    sent: "2016-09-29T11:55:17.840Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ed0108aa1f6dce24627e5f"
    text: "Yes :) You do not need to use strings at all."
    sent: "2016-09-29T11:54:48.239Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ed00f6009614165527865e"
    text: "Thanks,  that's so simple^/"
    sent: "2016-09-29T11:54:30.264Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed00abfdfac4436c12f425"
    text: {Or^/```^/red>> compose [circle (coord) 5]^/== [circle 0x0 5]^/```}
    sent: "2016-09-29T11:53:15.848Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ed0088d56b91170dfc5d2b"
    text: {@Mufferaw ^/```^/red>> coord: 0x0^/== 0x0^/red>> reduce ['circle coord 5]^/== [circle 0x0 5]^/```}
    sent: "2016-09-29T11:52:40.745Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ed003554302caa6f2c2f5d"
    text: {'''^/keep rejoin['circle " " coord " " 5 " "]]] ^/'''^/which gives me the block of strings but how can I change that so it can be used with VID^/^/'''^/view [^/        size 800x600^/        base 780x580 ^/            draw  drawblock^/]^/'''^/}
    sent: "2016-09-29T11:51:17.710Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ed0030d56b91170dfc5d1c"
    text: {Do you have some example of your input and expected output?}
    sent: "2016-09-29T11:51:12.476Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57ecffe0ab9ba81255f32cfc"
    text: "'''"
    sent: "2016-09-29T11:49:52.497Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ecffd5783fe9b945a8406a"
    text: {Hi everyone, I'm trying to draw some things but I don't know how to convert a block of strings into a block. }
    sent: "2016-09-29T11:49:41.412Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ebbfe2009614165522edc9"
    text: ""
    sent: "2016-09-28T13:04:34.709Z"
    editedAt: "2016-09-28T13:04:48.329Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57eba7e7ca69aeb745b923a0"
    text: {@TimeSeriesLord Back to the point. When you consider Red or Rebol interpreter as a VM, do you mean to compare it to the [JVM](https://en.wikipedia.org/wiki/Java_virtual_machine)? I think the misunderstanding is that nowodays, VM is used by most people in the sense of [Virtual Machine](https://en.wikipedia.org/wiki/Virtual_machine), that abstract full computer hardware. But different products tends to make the frontier not so clear between the two kinds (Interpreter and virtual machine).^/}
    sent: "2016-09-28T11:22:15.191Z"
    editedAt: "2016-09-28T11:22:20.531Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57eb3c41857ab70f7d48f99d"
    text: {I, for one, value what @TimeSeriesLord has to say--some of it, anyway. S/he has valuable insight to offer to many who need it, including myself. H[is|er] delivery method wonts... Tact, perhaps? @TimeSeriesLord, I am sorry, but you're stuck with mere mortals, such as I. Please, tone down your a-hole attitude. Offer us your hard-earned wisdom and perspective, and let us mere mortals do what we will with it--for better, or for worse. And, truth be told, your posts can't boast a mastery of English language or grammar, either. Yes, most of us aren't as blessed as you with your intelligence and acumen. News flash: you're not an island. Help us who aren't as divine as thee to row this ship forward against the tide. We can do without the name-calling. We can do without the prickly provocation. What we cannot do without, however, is insight. Positive or negative, that insight counts. Your insight matters. Your arrogance, not so much. And to everyone else: stop provoking @TimeSeriesLord. S/he's obviously sensitive. Take the insight offered, and ignore the bully attitude.}
    sent: "2016-09-28T03:42:57.552Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57eb3596ab9ba81255ec9a7a"
    text: "The best troll I've ever seen:))))"
    sent: "2016-09-28T03:14:30.611Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57eaf04eab9ba81255ebef99"
    text: {No, @TimeSeriesLord , you haven't been "just sticking to language talk". You have been childishly attacking people and their traits.  Every time you join the discussions here it quickly degenerates to name-calling and arrogant dismissals. Your behaviour and attitude ruins whatever positive contribution you seem to want to make to the Redbol language and community. Check yourself.}
    sent: "2016-09-27T22:18:54.210Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57eaf02bca69aeb745b6dfb6"
    text: {I've been part of it too on and off since 1999 or so. REBOL dorks are such nerds. They scare people from the lang. That is likely the biggest block to adoption of it.}
    sent: "2016-09-27T22:18:19.372Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eaeffc783fe9b945a10140"
    text: "Who cares braggart."
    sent: "2016-09-27T22:17:32.763Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eaeff435e0f31c6c4a5179"
    text: {On a personal note, I've been part of the Redbol community for 15+ years, and it is a wonderful place, filled with generous, knowledgeable people from all over the world. I'm proud to be a part of it.}
    sent: "2016-09-27T22:17:24.443Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57eaefa2783fe9b945a1005a"
    text: {So you need to let it go now, Greggie.^/^/I will be back, even if under yet another GMAIL. LOL.}
    sent: "2016-09-27T22:16:02.544Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eaef75ab9ba81255ebed70"
    text: {You REBOL cum Reddies are exactly why the REBOL never took off. If one is not part of the clique but shows up those of the clique with superior thought, the clique goes apeshit like you have and that other one.}
    sent: "2016-09-27T22:15:17.469Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eaef2e35e0f31c6c4a4ec7"
    text: {Why don't you worry about yourself?  Had you not piped up with your comment and then that other guy piling on, this wouldn't happen.^/^/After the fact, you look like girls who are whining about phony injustice, which never happened. ^/^/I here to help and be helped. Stick to language talk. I have been.}
    sent: "2016-09-27T22:14:06.575Z"
    editedAt: "2016-09-27T22:16:41.230Z"
    v: 3
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eaeee854302caa6f24d5e4"
    text: {@TimeSeriesLord, please refrain from:^/- Telling people to get off the internet^/- Calling people stupid or a-holes^/- Insulting their mental state, nationality, or foreign language skills^/- Looking for loopholes in what is considered civil behavior^/^/If you can't do that, please leave.}
    sent: "2016-09-27T22:12:56.205Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57eae7f3e4e41c6a4afc1cb5"
    text: "Let it go"
    sent: "2016-09-27T21:43:15.804Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae78ee045d199550690fc"
    text: {As you say. Please, move other discussion to private channel. Thanks.}
    sent: "2016-09-27T21:41:34.703Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae743ab9ba81255ebd12b"
    text: {@rebolek So why don't you be quiet. You stepped into something you have not done so. You're the problem here  dude. I'm not.^/^/}
    sent: "2016-09-27T21:40:19.377Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae657c90661384a6e2978"
    text: {@TimeSeriesLord This is red/help. Do you need some help with Red? For other questions, you can PM me.}
    sent: "2016-09-27T21:36:23.153Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae64a35e0f31c6c4a3180"
    text: {Oh and you were quick to play the foreigner card — "I am not native speaker". }
    sent: "2016-09-27T21:36:10.767Z"
    editedAt: "2016-09-27T21:43:57.846Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae5f7ca69aeb745b6c0e7"
    text: {Just drop it already or do you have Asperger's or something?}
    sent: "2016-09-27T21:34:47.353Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae5e354302caa6f24b75c"
    text: "Reality isn't possibility."
    sent: "2016-09-27T21:34:27.454Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae5b9e045d199550690bf"
    text: {It’s possible, I don’t know. I never bothered where everyone is from.}
    sent: "2016-09-27T21:33:45.569Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae55835e0f31c6c4a2dfc"
    text: {I don't have time for it as well. The REBOL/Red Europeans always make this "place" and places like it "Rebol.org" unfriendly.}
    sent: "2016-09-27T21:32:08.849Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae53454302caa6f24b4dc"
    text: {You never see such stupidity in the Ruby or Python world. Only in the REBOL /Red world are guys a-holes. The common thread is that most of them in the REBOL/Red world are Europeans. }
    sent: "2016-09-27T21:31:32.715Z"
    editedAt: "2016-09-27T21:33:33.949Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae533c90661384a6e2965"
    text: {I do not have time for this, Redbol was always friendly place. Hodně štěstí, lásko!}
    sent: "2016-09-27T21:31:31.421Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae4e554302caa6f24b400"
    text: {The Internet was invented by Americans in the USA. The WWW is one bit of it.}
    sent: "2016-09-27T21:30:13.709Z"
    editedAt: "2016-09-27T21:30:29.007Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae4cfe045d19955069094"
    text: {Ok, thanks for your wisdom, master. I will refrain me from using the web, that was invited in Switzerland, until I improve my English. That makes sense.}
    sent: "2016-09-27T21:29:51.535Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae4910096141655201cd7"
    text: {Clearly, interpreters are not languages for someone with suitable time and effort could write an interpreter to interpret more than one language at the same time.}
    sent: "2016-09-27T21:28:49.723Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae41cca69aeb745b6b9a7"
    text: {I've seen the foreigner lot of the REBOL pull the same b.s. in argument. Perhaps you should refrain from using the Internet to discuss matters until you improve your English comprehension skills.^/^/Good luck}
    sent: "2016-09-27T21:26:52.664Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae41ad02791686c3f95ac"
    text: "But as I said, I may have understand you wrong."
    sent: "2016-09-27T21:26:50.894Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae403e5887b81555d22af"
    text: "To me, it sounds like an interpreter."
    sent: "2016-09-27T21:26:27.949Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae3f7d02791686c3f95a6"
    text: "I want to understand your concept of VM."
    sent: "2016-09-27T21:26:15.076Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae3e0c90661384a6e2957"
    text: {I am just trying to understand you. I am not native speaker, so my comprehension is of course deficient.}
    sent: "2016-09-27T21:25:52.452Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae3a1ab9ba81255ebc3f7"
    text: {By your deficient reading comprehension, you have misled yourself. Good luck!}
    sent: "2016-09-27T21:24:49.466Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae363c90661384a6e294b"
    text: "By your interpretation, every interpreter is VM."
    sent: "2016-09-27T21:23:47.795Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae34aab9ba81255ebc295"
    text: {... as you express your mere opinion. What I've written is fact, end of story.}
    sent: "2016-09-27T21:23:22.950Z"
    editedAt: "2016-09-27T21:23:38.479Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57eae31de5887b81555d2296"
    text: {As one great mind mentioned once: "Yeah, well, that's just, like, your opinion, man."}
    sent: "2016-09-27T21:22:37.609Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eae24a54302caa6f24a988"
    text: {True enough, everyone sees differently.  That said, no interpreter ever made in the history of mankind is a language. Interpreters are compiled executables that support the interpreting of a language.^/^/And what makes REBOL and now Nenad's Red a VC is simply that both abstracted layers of an OS — from the graphics to Internet protocols (TCP/IP stack).^/^/It's laughable to call  Red a language in the same way that is laughable for anyone to say that REBOL or Red have variables. The languages of those VMs do not variables and never have. ^/^/The underlying C code likely uses C variables to let the VCs of REBOL or Red support indirection in the langs that control those VCs, but those langs don't have variables. ^/^/I could go on and on. One of the main reasons why REBOL didn't fly in the larger world Carl's own confusion of what he had. Even he foolishly and wrongly talked about variables. Carl simply couldn't properly explain that he created a layer between data and a worker. ^/^/I intend to root out all of the stupidity I have seen over the years about REBOL and likely will see with Red. Even Nenad thinks he's writing a language. He isn't. He is writing a VM that supports a language in the same  way a good Game Engine can support a scripting language.^/^/Cheers, you eccentric nerd!^/^/}
    sent: "2016-09-27T21:19:06.605Z"
    editedAt: "2016-09-27T21:22:33.309Z"
    v: 3
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57ead06cca69aeb745b66d5d"
    text: {Thanks for posting. Lots of material there. It's good to have different explanations for things, since we don't all think the same. Some terms will vary as well. For example, I have never viewed Redbol as a virtual computer, though it can be argued that any language describes a set of virtual machine instructions in some way. ^/I'm sure it will find an audience, and you'll refine things over time. Keep up the good work!}
    sent: "2016-09-27T20:02:52.009Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57eabc3b00961416551f6490"
    text: {@greggirwin Hey Gregg. You are invited to read the latest revision of ^-[The RVC, Red and REBOL](https://timeserieslord.github.io/red/). You know, awhile back, I read an article you wrote long ago for O'Reilly's Onlamp. In their bio of you, they called you "eccentric!" ^/^/Well, I much like the learning flow of The RVC, Red and REBOL. I wrote it for everyday 21st century people who need to leverage Internet computing to do stuff. It's not really meant for pedantic comp sci majors, though I bet many would be schooled on matters.^/^/I still have a few "articles" to flesh out. Certainly, an eccentric fellow like you might have something to add to it. You seem always to bang out good quicky code examples. ^/^/The brilliant Nenad is simply too busy for us to bother him about teaching tools. We need him to keep focused to get to 1.0.}
    sent: "2016-09-27T18:36:43.655Z"
    editedAt: "2016-09-27T18:37:50.147Z"
    v: 3
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e9fc0fca69aeb745b3254b"
    text: {@geekyi Libcurl is not part of Android, you would need to compile it in order to use Red from command-line. Once we have full I/O, we'll drop the libcurl dependency.}
    sent: "2016-09-27T04:56:47.212Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e97814ab9ba81255e69847"
    text: {@greggirwin Thanks for the encouragement, the comments here have been very helpful.  I'll  definitely  have more questions. }
    sent: "2016-09-26T19:33:40.649Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57e96b1635e0f31c6c44cc17"
    text: {@Mufferaw, it can take a little while to ramp up on Red, and a little longer before things click about how different it really is, but it's worth it. As Bolek said, fell free to ask questions here.}
    sent: "2016-09-26T18:38:14.886Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e95a04857ab70f7d425d25"
    text: {Info: Android: 4.4.2^/Model: ASUS_T00F^/Manufacturer: asus}
    sent: "2016-09-26T17:25:24.797Z"
    editedAt: "2016-09-26T17:25:58.559Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57e95999ca69aeb745b10a39"
    text: {```^/u0_a264@ASUS_T00F:/ $ ./Removable/MicroSD/console^/CANNOT LINK EXECUTABLE: could not load library "libcurl.so.4" needed by "./Removable/MicroSD/console"; caused by library "libcurl.so.4" not found^/1|u0_a264@ASUS_T00F:/ $^/```^/for anyone curious}
    sent: "2016-09-26T17:23:37.593Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e958a1ca69aeb745b10613"
    text: {So can't run on android-x86 because Red has a dependency on libcurl}
    sent: "2016-09-26T17:19:29.158Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e9586576d85b087dab2e11"
    text: "@dockimbel thanks"
    sent: "2016-09-26T17:18:29.133Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e957f135e0f31c6c446d6e"
    text: {@geekyi `collect/keep` in Parse is faster, more flexible (`keep` can be applied to matched input by rules)  and it supports recursion.}
    sent: "2016-09-26T17:16:33.523Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e956aeea1b6b1a6c6c7643"
    text: "@dsgeyser had success with running on phone?"
    sent: "2016-09-26T17:11:10.641Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e9558bab9ba81255e5fb90"
    text: {:point_up: [September 23, 2016 3:56 PM](https://gitter.im/red/help?at=57e50a55a8fff5ac2d919304) so I'm trying this out^/```^/red-26sep16-5ec74dc.exe -c -t Android-x86 environment/console/console.red^/```^/got the binary into my phone.. I wonder what next..}
    sent: "2016-09-26T17:06:19.008Z"
    editedAt: "2016-09-26T17:06:59.634Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57e94c8cf71de5634c6185a0"
    text: {It’s syntax IMO. You can use both variants in Red.}
    sent: "2016-09-26T16:27:56.093Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e94c4335e0f31c6c4433ec"
    text: {From that page:^/>Can also be used with the parse function:^/```^/collect [^/    parse [a b c d e] [^/        any ['c | 'e | set w word! (keep w)]^/    ]^/]^/[a b d]^/```^/^/I wonder what's the advantage of having a `collect` for `parse` in red? Simpler syntax? I'd thought there was a technical reason..}
    sent: "2016-09-26T16:26:43.756Z"
    editedAt: "2016-09-26T16:26:51.471Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57e94717ab9ba81255e5bb48"
    text: {http://www.rebol.com/r3/docs/functions/collect.html}
    sent: "2016-09-26T16:04:39.482Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57e94590cca6236974b5ae28"
    text: "True, it’s not in Rebol’s `parse`."
    sent: "2016-09-26T15:58:08.736Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e9448100961416551a2064"
    text: {Whoa, it is in Rebol2!! (2.7.8.3.1) How did I miss that? I suppose collect is unique in Red's `parse`}
    sent: "2016-09-26T15:53:37.179Z"
    editedAt: "2016-09-26T15:55:36.342Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57e9444335e0f31c6c441026"
    text: {@Mufferaw Which docs, can you post me a link? I thought it was only in Red}
    sent: "2016-09-26T15:52:35.461Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e943b800961416551a1b85"
    text: {@geekyi  I've never used Rebol  but I did find some info about collect in the Rebol R3 docs.  @greggirwin  Thanks. That's super useful.  10 minutes on gitter feels like more progress than a week of reading docs and tinkering on my own!}
    sent: "2016-09-26T15:50:16.216Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57e940e1783fe9b9459ac6bc"
    text: {@Mufferaw, if you need to do this kind of thing a lot, here's  Red version of Rebol's `array` function:^/```^/array: function [^/^-"Makes and initializes a block of of values (NONE by default)"^/^-size [integer! block!] "Size or block of sizes for each dimension"^/^-/initial "Specify an initial value for elements"^/^-^-value "For each item: called if a func, deep copied if a series"^/][^/^-if block? size [^/^-^-if tail? more-sizes: next size [more-sizes: none]^/^-^-size: first size^/^-^-if not integer? size [^/^-^-^-cause-error 'script 'expect-arg reduce ['array 'size type? get/any 'size]^/^-^-]^/^-]^/^-result: make block! size^/^-case [^/^-^-block? more-sizes [^/^-^-^-loop size [append/only result array/initial more-sizes :value]^/^-^-]^/^-^-series? :value [^/^-^-^-loop size [append/only result copy/deep value]^/^-^-]^/^-^-any-function? :value [^/^-^-^-loop size [append/only result value]^/^-^-]^/^-^-'else [^/^-^-^-append/dup result value size^/^-^-]^/^-]^/^-result^/]^/^/a: array/initial [10 10] does [random true]^/```}
    sent: "2016-09-26T15:38:09.031Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e9404aab9ba81255e59913"
    text: {@Mufferaw collect is new in Red (if you are used to Rebol), so it is mainly documented in the blogposts of http://redlang.org website}
    sent: "2016-09-26T15:35:38.524Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e93cd1f71de5634c6182be"
    text: "That’s the best way how to learn something ;)"
    sent: "2016-09-26T15:20:49.355Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e93b16ab9ba81255e57c24"
    text: {@rebolek  Much appreciated, I have a feeling I'll have a lot of questions. }
    sent: "2016-09-26T15:13:26.654Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57e93a6c808246a0620a95e4"
    text: {@Mufferaw You’re welcome. If you have other questions, feel free to ask, I'll be happy to help.}
    sent: "2016-09-26T15:10:36.899Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e939f5009614165519ec5c"
    text: {@rebolek  Thank you very much! I didn't even see/notice the collect function when I was reading through all the docs. I have a long way to go!}
    sent: "2016-09-26T15:08:37.521Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57e93737cca6236974b5ab6f"
    text: {Here's one way how to do it:^/```^/collect [repeat i 10 [keep/only collect [repeat j 10 [keep random true]]]]^/```}
    sent: "2016-09-26T14:56:55.372Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e936a4cca6236974b5ab4f"
    text: "Welcome @Mufferaw "
    sent: "2016-09-26T14:54:28.266Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e9352176d85b087daa8539"
    text: {Hi everyone,  I'm new to Red and trying to get my bearings. I'm trying to make a 2d 'array' and fill it with random bools but I'm not having much luck.  Is there a way to iterate through all the elements  in my array ( which is basically a block of blocks) ?}
    sent: "2016-09-26T14:48:01.427Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57e820bb4ae02c250fc6372f"
    text: {If you have source installed, %red/environment/console/terminal.reds has the key handling. Basics are obvious, but also shows that Ctrl+<key> options for nav are supported, and Ctrl+K to delete to end of line. Ctrl+L should work in both consoles it seems, so there's likely a bit of lower level work to do.}
    sent: "2016-09-25T19:08:43.457Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e8162000df3cc42245b781"
    text: "Done, Thanks."
    sent: "2016-09-25T18:23:28.580Z"
    editedAt: "2016-09-25T18:23:37.966Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57e81561e7e28b6c76191fd0"
    text: "Wish: Sure. "
    sent: "2016-09-25T18:20:17.942Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e8154e240a335f12ecf95a"
    text: {Maybe someone from Team Red can say what their plan is. If  `system/console` can be modded, or if we need to do it at the lower levels.}
    sent: "2016-09-25T18:19:58.592Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e8151bb39f35d16d9a366c"
    text: "Should i post an wish  issue for it?"
    sent: "2016-09-25T18:19:07.721Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57e81444b39f35d16d9a342c"
    text: "I don't think that's possible yet. "
    sent: "2016-09-25T18:15:32.528Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e813f1b39f35d16d9a32cd"
    text: {But how to do it within a script? Just send keystrokes? Which ones?}
    sent: "2016-09-25T18:14:09.825Z"
    editedAt: "2016-09-25T18:15:04.566Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57e813cc00df3cc42245b044"
    text: ""
    sent: "2016-09-25T18:13:32.644Z"
    editedAt: "2016-09-25T18:13:40.816Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57e8134166e78880221368e6"
    text: "`Ctrl+L` clears the Red GUI console, just FYI."
    sent: "2016-09-25T18:11:13.442Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e81186c374062751ba12e6"
    text: {Hm, please check https://www.wikiwand.com/en/ANSI_escape_code#/Windows_and_DOS for more info, there should be some support in W10 (I have only W7 in Virtual Box, so I can’ t test it).  Anyway, for Windows I guess it would be good idea to add (at least partial) support for ANSI sequences to GUI console. It should be doable I guess.}
    sent: "2016-09-25T18:03:50.083Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e80812b39f35d16d9a07bf"
    text: {I am using windows 10 and there is no config.nt to enable ansi.sys. I do'nt know another way.}
    sent: "2016-09-25T17:23:30.028Z"
    editedAt: "2016-09-25T17:24:06.478Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57e7f84eef21946f5ecf1ce4"
    text: {It Windows, it apparently needs to be enabled first: https://support.microsoft.com/en-us/kb/101875}
    sent: "2016-09-25T16:16:14.272Z"
    editedAt: "2016-09-25T16:16:22.099Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e7f7e4c374062751ba1061"
    text: "Not under Windows."
    sent: "2016-09-25T16:14:28.451Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e7f773f0dfe1cf5a3d9e3f"
    text: {@Rebol2Red Tried this under OSX and it works:^/```^/print "^^(1B)[2J"^/```}
    sent: "2016-09-25T16:12:35.122Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e7f5cdef21946f5ecf1c9f"
    text: {Ten you should be able to use ANSI codes. Let me try...}
    sent: "2016-09-25T16:05:33.457Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e7f55d00df3cc4224556a1"
    text: "Then it is standard"
    sent: "2016-09-25T16:03:41.579Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57e7f54cc374062751ba1006"
    text: {Ah, GUI console is written in Red/View, standard is using standard system terminal.}
    sent: "2016-09-25T16:03:24.238Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e7f51b93ce88be4b511840"
    text: {Maybe stupid, but i think i don't know the difference}
    sent: "2016-09-25T16:02:35.483Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57e7f490c374062751ba0ff2"
    text: {@Rebol2Red Do you mean GUI console, or standard console?}
    sent: "2016-09-25T16:00:16.023Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e7ed2b7270539a6d86544a"
    text: {Is it possible to clear the console inside your script like cls or clearscreen in other programming languages?^/ ( maybe with some ansi code )}
    sent: "2016-09-25T15:28:43.601Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57e50c7bef85590051f06182"
    text: "@rebolek Thanks"
    sent: "2016-09-23T11:05:31.617Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57e50a55a8fff5ac2d919304"
    text: {@dsgeyser Compile console with `-t Android` and it should work (I haven’ tried it in a while but it worked last time I checked it)}
    sent: "2016-09-23T10:56:21.235Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e509ccdf21a757301f2b49"
    text: "@rebolek Android phone?"
    sent: "2016-09-23T10:54:04.782Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
)#(
    id: "57e509974d3ec93522727eff"
    text: {If it does compile for your CPU, there are no limitations, AFAIK.}
    sent: "2016-09-23T10:53:11.204Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e509444d3ec93522727ef8"
    text: {@dsgeyser there’s no minimum version, you can use the latest. GUI is not finished though.}
    sent: "2016-09-23T10:51:48.144Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e5090890ba43d2173e6510"
    text: {Whats the minimum Red version for Android (phone)? Want to play with 'Core' while on the move?}
    sent: "2016-09-23T10:50:48.357Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57e376f1c8af41d45f377fb2"
    text: "@qtxie  Thank you! Thank you! Xièxiè dàjiā!"
    sent: "2016-09-22T06:15:13.949Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e35857d66f1a7967e2131c"
    text: {@TimeSeriesLord Should be fixed now in master branch.}
    sent: "2016-09-22T04:04:39.371Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57e3468ec2287b924ff766eb"
    text: "Ok. I see the problem now. Try to fix it..."
    sent: "2016-09-22T02:48:46.471Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57e3447ac3e7045a306c6320"
    text: {@qtxie  Sure. Do you know Win 10 Alt+ with the right registry key set?^/^/If so, try typing ALT+00A1. It should produce this: `¡`}
    sent: "2016-09-22T02:39:54.467Z"
    editedAt: "2016-09-22T02:41:28.427Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e34095a3c0cb1b6a21eeb6"
    text: {@TimeSeriesLord I can type Chinese in the Red gui console under Windows 10. Would you please provide more information about it? Like how to reproduce the issue?}
    sent: "2016-09-22T02:23:17.529Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57e33640aabc89857fc15bec"
    text: {We don't yet have a *parse style guide*. :^^) @qtxie or @PeterWAWood can probably give details on the Unicode issue. }
    sent: "2016-09-22T01:39:12.026Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e317b6aabc89857fc0fa5a"
    text: {It seems though that one can not type Unicode at the Red console under Windows 10, which is a huge bummer. Does anyone know why?^/^/Red 0.6.1 - 8-Aug-2016/9:32:11-7:00 ^/Windows 10 1607^/^/^/^/^/}
    sent: "2016-09-21T23:28:54.590Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e31404fa660dd95ffe6ec0"
    text: {@greggirwin Yeah, I follow you why you do it right down to some words being plural. As you can see (some missing), this is kind of how I do it.^/^/More than one individual thing gets (s) at end. A group as a unit does not. ^/^/I put this up here only if it helps a novice. ^/^/^/```^/¿word: [some letter]^/^/¿spaces: [some whitespace]^/¿words: [some ¿word] ^/^/¿phrase:  [some [ ¿words | ¿spaces] ]^/¿sentence: [some ¿phrase opt endmark]^/^/red>> s: "This is a silly Sentence?"^/== "This is a silly Sentence?"^/^/red>> parse s [ ¿sentence]^/== true^/^/red>> s: "This is a sillier **$*$*$23 sentence!"^/== "This is a sillier **$*$*$23 sentence!"^/^/red>> parse s [ ¿sentence]^/== false^/^/```^/^/Of course, in true parsing, one would need to account for numbers of all kinds, e.g., 1st, 2nd, 3rd, 4th, 33.6, 2**6, 2x10^^6, and so on.^/^/Parse was a bit of more of a struggle than it should have been at times until I started doing it this way. ^/^/Many of the sparse examples of `Parse` mixed all kinds of naming, which only added to the  poor explanations offered. Too many struggle to explain what they claim to  know. Their struggling calls into question always how much do they  know, in truth.}
    sent: "2016-09-21T23:13:08.747Z"
    editedAt: "2016-09-21T23:21:11.358Z"
    v: 5
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e2bb0dc3e7045a306a7352"
    text: {@TimeSeriesLord, I add sigils and use naming conventions myself. For parse rules, I often append a char that mimics Kleene notation. i.e. ? for opt, * for any, + for some. Sometimes I'll pluralize the name though, depending on what makes other rules more readable. I've also appended = to names, to mimic ::= in BNF and make rule vars stand out.}
    sent: "2016-09-21T16:53:33.052Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e23b3fc3e7045a30685dae"
    text: {Well, everytime Red fires up, I am wowed over the start up speed. }
    sent: "2016-09-21T07:48:15.945Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e23a2e06bdca3327081c1b"
    text: "True."
    sent: "2016-09-21T07:43:42.538Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e23a1b18291e10488c7055"
    text: {Many good ideas can come from free form chat. Few can come from heavy-handed censorship.}
    sent: "2016-09-21T07:43:23.521Z"
    editedAt: "2016-09-21T07:43:35.620Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e239f3fa660dd95ffacb74"
    text: {That's too bad. The Red folks need a red/lounge  gitter}
    sent: "2016-09-21T07:42:43.682Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e239cfd66f1a7967e1fa49"
    text: {Yes, but I think we are getting really off-topic here ;)}
    sent: "2016-09-21T07:42:07.011Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e2399eaabc89857fbd6bbb"
    text: {Of course. Well,  anyone is only worth their opportunity cost (i.e., what another employer is willing pay to snatch one away). ^/^/Did you move to greener fields?}
    sent: "2016-09-21T07:41:18.261Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e2394fd66f1a7967e1fa42"
    text: "If they gave me raise, it would be better ;)"
    sent: "2016-09-21T07:39:59.440Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e237f218291e10488c6950"
    text: "Yeah, your team must have worshiped you."
    sent: "2016-09-21T07:34:10.455Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e2374706bdca3327081be4"
    text: {I was hero back then ;)  The team was doing it manually before I started using Rebol for this :D}
    sent: "2016-09-21T07:31:19.552Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e2371633c63ba01a1d72d5"
    text: {Hey I can totally understand your need with that mess.}
    sent: "2016-09-21T07:30:30.384Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e236fda3c0cb1b6a21d324"
    text: {I was using it for automated conversion of the mess that was Windows Vista localization some 10 years ago.}
    sent: "2016-09-21T07:30:05.786Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e2368f06bdca3327081bd3"
    text: {That is Rebol script for conversion from different codepages to UTF8. I guess it could be adapted for Red easily.}
    sent: "2016-09-21T07:28:15.048Z"
    editedAt: "2016-09-21T07:28:26.099Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e2368033c63ba01a1d70e2"
    text: "Cool. Will do."
    sent: "2016-09-21T07:28:00.456Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e2366d06bdca3327081bc1"
    text: {@TimeSeriesLord Take a look at something like http://www.rebol.org/view-script.r?script=utf-8.r&sid=wtldf3tk}
    sent: "2016-09-21T07:27:41.109Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e235d2d66f1a7967e1f9f7"
    text: "Oh, this. So different codepages, basically :)"
    sent: "2016-09-21T07:25:06.698Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e23582c8af41d45f32b021"
    text: {> Not sure what do you mean by extended ASCII. ASCII is 0-127.^/^/You have never heard of Extended ASCII?  You must be new at computing (circa 21st century). ;-)^/^/https://encrypted.google.com/webhp?hl=en#hl=en&q=extended+ascii&tbs=whnv:1^/^/I'll hand clean it. It's only about 50 parsesets. But I can't do my load into blocks any CSV file from anywhere on the Internet  magic without them.}
    sent: "2016-09-21T07:23:46.859Z"
    editedAt: "2016-09-21T07:24:56.716Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e2354fa3c0cb1b6a21d2ef"
    text: {It is possible to write convertor however, but having this in basic Red wouldn’t be practical.}
    sent: "2016-09-21T07:22:55.345Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e23506d66f1a7967e1f9eb"
    text: {If you mean some codepage like Latin-I or Windows-1250, Red does not support them.}
    sent: "2016-09-21T07:21:42.173Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e234e2c2287b924ff74d7d"
    text: {Not sure what do you mean by extended ASCII. ASCII is 0-127.}
    sent: "2016-09-21T07:21:06.910Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e234c533c63ba01a1d6a9b"
    text: {> That’s because they are not ASCII symbols.^/^/And not Extended ASCII? }
    sent: "2016-09-21T07:20:37.919Z"
    editedAt: "2016-09-21T07:21:17.515Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e234b006bdca3327081b9f"
    text: "That’s because they are not ASCII symbols."
    sent: "2016-09-21T07:20:16.715Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e2346027a8458f7f31b7e3"
    text: {@rebolek Yeah, thanks. It looks like a joy to fix. I saved it in UTF-8 w/BOM in Metapad and then opened it in Scite. Scite shows all of the funky chars that must not have translated. After I clean this up, I will let you know if that was the problem.^/^/For my parsesets, I use prefixes, e.g., ¿symbols for [some symbol] rules and ¡symbols for [any symbol] to remind me of  either some or any.  It looks like Red spit on the ASCII encoding of those.}
    sent: "2016-09-21T07:18:56.272Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e23166d66f1a7967e1f9c0"
    text: {@TimeSeriesLord that is my guess, it‘s probably not saved as UTF-8, as I can’t reproduce it.}
    sent: "2016-09-21T07:06:14.160Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e2314a27a8458f7f31ac9d"
    text: {@rebolek I'll check it out. It's possible that the file has old DOS encoding. }
    sent: "2016-09-21T07:05:46.363Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e2314106bdca3327081b5d"
    text: "I see."
    sent: "2016-09-21T07:05:37.886Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e23116df21a7573014f453"
    text: {Start up script = a script loaded at start up (boot up, fire up, launch — whatever word or phrase that you prefer).^/^/Running on Win 10, I have set up a shortcut that runs ^/^/```^/C:\Users\redacted\PortableApps\Red\red-061.exe start.red^/```^/That %start.red works like a %user.r in REBOL 2.7.8.  That is my master file that loads my dictionary of words (functions, aliases and the like) to create my virtual computer environment.}
    sent: "2016-09-21T07:04:54.342Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e23110a3c0cb1b6a21d292"
    text: {```^/red>> to binary! {-—}^/== #{2DE28094}^/```}
    sent: "2016-09-21T07:04:48.819Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e230ddc2287b924ff74d56"
    text: {When I save your example, I can’t find #{977D...} in it.}
    sent: "2016-09-21T07:03:57.664Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e230aaa3c0cb1b6a21d28a"
    text: {@TimeSeriesLord check the encoding of your file, if it is really UTF-8.}
    sent: "2016-09-21T07:03:06.273Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e23014a3c0cb1b6a21d286"
    text: {@TimeSeriesLord what do you mean by startup script?}
    sent: "2016-09-21T07:00:36.289Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e22fadc3e7045a306828be"
    text: {At the console, i can do this:^/^/```^/red>>  dash: charset ^{-—^}^/== make bitset! #^{0000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000```^/^/But when Red tries to evaluate that from a start up script, it chokes. Also, that looks like a bizarro  bitset. ^/^/The error:^/^/```^/*** Access Error: invalid UTF-8 encoding: #^{977D0D0A^}^/*** Where: read^/```^/^/Anyone?}
    sent: "2016-09-21T06:58:53.939Z"
    editedAt: "2016-09-21T07:00:59.746Z"
    v: 5
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e1e13633c63ba01a1c7be2"
    text: "I have my answer for Win 10. Thanks though."
    sent: "2016-09-21T01:24:06.686Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e1d31633c63ba01a1c53fb"
    text: {Does the Red exec look for user.r like REBOL 2.7.8 or is it something that can be fed at launch time as a command line argument?}
    sent: "2016-09-21T00:23:50.380Z"
    v: 1
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57de382cc8af41d45f24d21e"
    text: {@greggirwin  @PeterWAWood  Thanks. Your help is appreciated.}
    sent: "2016-09-18T06:46:04.476Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dde2d4df21a75730070389"
    text: {@dsgeyser Yes. The interpreter can be "isolated" from the compiler. The Red consoles do just that. If you first console, you can then run scripts with it like this:^/```^/PS E:\Red\red> ./gui-console tests/hello.red^/```}
    sent: "2016-09-18T00:41:56.486Z"
    editedAt: "2016-09-18T00:42:25.195Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57dda3ecfa660dd95feb5f51"
    text: {To evaluate a remote script in Rebol: REBOL --do "do http://www.rebol.com/speed.r". ^/And in Red with GUI output?}
    sent: "2016-09-17T20:13:32.703Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd9c6427a8458f7f22bc7f"
    text: {Is it possible to interpret a script without having the interpreter open. (console mode?  command line?)}
    sent: "2016-09-17T19:41:24.961Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd9234df21a757300625eb"
    text: {People are sometimes reluctant to download an unknown exe. I want to incorporate Red into a messaging system (webapp with encrypted Red scripts), as a collaborative workflow system. This is just an intermediate solution while we are waiting for networking and encryption. }
    sent: "2016-09-17T18:57:56.896Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
)#(
    id: "57dd8fe8c3e7045a30597615"
    text: "Sorry. You are correct. RDP"
    sent: "2016-09-17T18:48:08.188Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd8f9518291e10487d2115"
    text: {No. You can't separate them today. But what is the benefit of removing the compiler?}
    sent: "2016-09-17T18:46:45.732Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dd8f5827a8458f7f2296fd"
    text: {Can the interpreter be isolated without the compiler? No need for compiled scripts at the moment.}
    sent: "2016-09-17T18:45:44.500Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd8f12df21a75730061cb5"
    text: {No. For that you still need a client making the remote calls, right? I mean like RDP/SSH.}
    sent: "2016-09-17T18:44:34.217Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dd8ec218291e10487d1f17"
    text: "Like RPC?"
    sent: "2016-09-17T18:43:14.288Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd8e7b27a8458f7f22949f"
    text: {Unless you have them remote into the machine where Red is, or something like that.}
    sent: "2016-09-17T18:42:03.096Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dd8e56aabc89857fae5213"
    text: "i.e. where would the GUI display?"
    sent: "2016-09-17T18:41:26.076Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dd8e33c8af41d45f2328f9"
    text: {Red doesn't run in the browser, so I'm not sure how you could do anything like that with *any* tool. i.e. you need *something* on their system to run things from.}
    sent: "2016-09-17T18:40:51.259Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dd8d7dc8af41d45f232786"
    text: {@greggirwin What will be the absolute minimum requirement on the local system, as a starting point? Want to implement remote services without the user having to download and run the red exe to start with. Is this possible? Can I isolate the interpreter and run it remotely, but have the resulting GUI displayed locally.}
    sent: "2016-09-17T18:37:49.270Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd6631c8af41d45f22b479"
    text: {@dsgeyser, without networking support, the best you can probably do right now is using the file system as an IPC mechanism. If you're talking batch scripts, that should be fine. }
    sent: "2016-09-17T15:50:09.434Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57dd24a4c3e7045a30585a69"
    text: {Red has some basic IO, called simple-io, not sure if it could be ready for your needs though ...}
    sent: "2016-09-17T11:10:28.572Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57dd1cefaabc89857fad1057"
    text: "I know Red still lacks IO. "
    sent: "2016-09-17T10:37:35.675Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd1cccaabc89857fad100f"
    text: "What is initially needed on local host?"
    sent: "2016-09-17T10:37:00.714Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd1c9ddf21a7573004e9e0"
    text: "Initially."
    sent: "2016-09-17T10:36:13.213Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd1c7227a8458f7f21570f"
    text: {can I remotely host the red exe and via a remote process allow scripts to be compiled or interpreted locally, without red being present on the local host?}
    sent: "2016-09-17T10:35:30.374Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57dd057e33c63ba01a0ce61b"
    text: "Future versions will contain such features."
    sent: "2016-09-17T08:57:34.184Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57dd0557c8af41d45f21b7dd"
    text: {The current alpha release of Red does not support sending and receiving emails. }
    sent: "2016-09-17T08:56:55.098Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57dd046ac8af41d45f21b565"
    text: {@dsgeyser No. Red is still incomplete and does not yet have any encryption}
    sent: "2016-09-17T08:52:58.413Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57dcfb72c8af41d45f219e99"
    text: {Is it possible to encrypt/decrypt email or any message in Red, before sending/receiving? A custom solution will be nice.}
    sent: "2016-09-17T08:14:42.104Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57da6fe0df21a75730fc4749"
    text: {An easy workaround is to compose the parse rule:^/```text^/parse page compose [thru (:trigger/1) copy text to "</title>"]^/```}
    sent: "2016-09-15T09:54:40.612Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57da5fe9aabc89857fa436c7"
    text: "Parse should allow path! as rule."
    sent: "2016-09-15T08:46:33.118Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57da5fd9aabc89857fa4366d"
    text: "IMO it is a bug."
    sent: "2016-09-15T08:46:17.041Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57da5f27aabc89857fa43367"
    text: {I explore certain features of RED. The following script causes an error. ^/I wonder why:^/```^/red[]^/^-trigger: ["<title>" "</title>"]^/^-trigger-start: trigger/1^/^-^/^-page: read http://www.rebol.com/^/^-parse page [thru trigger-start copy text to "</title>"]^-; -- works^/^-parse page [thru trigger/1 copy text to "</title>"]^-^-; -- fails^/^-; *** Script Error: PARSE - invalid rule or usage of rule: trigger/1^/^-print text^/```^/}
    sent: "2016-09-15T08:43:18.977Z"
    v: 1
    author: "57c96bff40f3a6eec062f498"
) #(
    id: "57d9636f27a8458f7f151c4e"
    text: "@rebolek Ahh I see, good to know, thanks!"
    sent: "2016-09-14T14:49:19.435Z"
    v: 1
    author: "57d8db1040f3a6eec065248f"
) #(
    id: "57d91057ef19fa3f40834e86"
    text: {Red uses standard OS libraries to load fonts, so there is no mechanism to load custom ones.}
    sent: "2016-09-14T08:54:47.479Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d9102f7b9f81671148a593"
    text: "@BrianOtto AFAIK it is not possible (yet?)."
    sent: "2016-09-14T08:54:07.989Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d8f417a0e8dbb04f36fb44"
    text: {Is it possible to load a font from a local directory, instead of having to install it first and then reference it by name? I found an old REBOL example here: http://rebol2.blogspot.com/2011/12/using-bitmap-font.html^/But doing something similar in Red doesn't appear to work:^/^/displayFont: layout [^/    txtLine: text 1000x100 "Lorem ipsum dolor sit amet, consectetur" font [ name: "Cabin-Bold.ttf" color: red]^/]^/^/It just uses a default font when I do that. I have tried specifying the full path to the file too.^/I am running it in Windows if that makes a difference.}
    sent: "2016-09-14T06:54:15.763Z"
    v: 1
    author: "57d8db1040f3a6eec065248f"
) #(
    id: "57d6921ab8d4c13840882c34"
    text: {@dockimbel thanks. It stays simple but a little bit more usable IMO.}
    sent: "2016-09-12T11:31:38.328Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d47e4083c1556511b7f2bd"
    text: {@Dimonax posting in red/welcome is usually enough for starters, :tongue: problem usually is most people are away :smile: }
    sent: "2016-09-10T21:42:24.673Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d474ffb37816b14fa8b1f7"
    text: {How do we go about rebuilding Red since the Rebol SDK isn't available?}
    sent: "2016-09-10T21:02:55.113Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d3a33983c1556511b5ce2c"
    text: {@DideC Great work on enhancing the livecoding demo. :+1: }
    sent: "2016-09-10T06:07:53.969Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57d309d41e2af97718940fa5"
    text: {@WaBerlin_twitter for new features in Red, I found the blogposts on http://red-lang.org most useful. But you are right about the docs being sparse right now..}
    sent: "2016-09-09T19:13:24.837Z"
    editedAt: "2016-09-09T19:14:26.660Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57d30883473d7d833a8a586e"
    text: {The current reference docs are:^/- http://doc.red-lang.org/gui/View.html^/- http://doc.red-lang.org/gui/VID.html^/- http://doc.red-lang.org/gui/Draw.html^/^/There is not yet a per-style reference of supported facets (properties).}
    sent: "2016-09-09T19:07:47.527Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d2f91e8cd0681e7bfbfda3"
    text: "."
    sent: "2016-09-09T18:02:06.339Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57d2ba0e3f7260fe4bdfa446"
    text: {I play with it a lot and found that there was just a limitation to use it : you can't define Red's values to used in the VID code.^/So I made my own version to solve that, to be found [here](https://gist.github.com/DideC/85d60c99f97f2e4972a6f7b09a1fe630).}
    sent: "2016-09-09T13:33:02.113Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d2b8293f7260fe4bdf9af0"
    text: {Not sure you need a download for just that : ^/```^/Red [^/^-Title:   "Simple GUI livecoding demo"^/^-Author:  "Nenad Rakocevic"^/^-File: ^- %livecode.red^/^-Needs:^- 'View^/^-Usage:  {^/^-^-Type VID code in the right area, you will see the resulting GUI components^/^-^-rendered live on the left side and fully functional (events/actors/reactors working live).^/^-}^/]^/^/view [^/^-title "Red Livecoding"^/^-output: panel 400x600^/^-source: area 500x600 wrap font-name "Fixedsys" on-key-up [^/^-^-attempt [output/pane: layout/only load source/text]^/^-]^/]^/```}
    sent: "2016-09-09T13:24:57.531Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d2b6be1aacfaf84b040607"
    text: "No, where can I download this?"
    sent: "2016-09-09T13:18:54.335Z"
    v: 1
    author: "57c96bff40f3a6eec062f498"
) #(
    id: "57d2b5c01e2af977189290b3"
    text: {Did you play with Nenad's realtime VID script ? It help test any VID combination.}
    sent: "2016-09-09T13:14:40.193Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d2b551f4360c68182092f8"
    text: {The RED VID documentation is very generic and does not cover the details of element properties.^/I also looked at (http://www.red-by-example.org/index.html) which states "To do by red-by-example team ...".}
    sent: "2016-09-09T13:12:49.810Z"
    editedAt: "2016-09-09T13:14:13.260Z"
    v: 3
    author: "57c96bff40f3a6eec062f498"
) #(
    id: "57d2b53daf75d5187be4f4ca"
    text: {Don't forget that some keywords are irelevant for some styles!}
    sent: "2016-09-09T13:12:29.501Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d2b4b6f4360c6818209083"
    text: {@WaBerlin_twitter Did you have a look at [Red VID documentation](https://doc.red-lang.org/gui/VID.html) ?}
    sent: "2016-09-09T13:10:14.595Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57d2b363c475164703c150bb"
    text: {@rebolek : thank you. However the examples in Rebol's VID are not allways compatible with RED view.  E.g. the section "Document Text Style" says:^/```^/backcolor white                   ; not compatible to RED^/text "Normal"^/text "Bold" bold^/text "Italic" italic^/text "Underline" underline^/text "Bold italic underline" bold italic underline^/text "Big" font-size 32^/text "Serif style text" font-name font-serif ; not compatible to RED^/text "Spaced text" font [space: 5x0] ; not compatible to RED^/```^/I was looking for a more precise description of the possible properties for GUI elements in RED (without trial and error).^/If that does not exist at the moment, than this is OK but clarified.}
    sent: "2016-09-09T13:04:35.193Z"
    editedAt: "2016-09-09T13:09:51.143Z"
    v: 2
    author: "57c96bff40f3a6eec062f498"
) #(
    id: "57d24b34aa8223bd16cf9e25"
    text: {@WaBerlin_twitter Take a look at [Rebol's VID](http://rebol.com/docs/easy-vid.html). It’s basically the same (Red's VID is more advanced and things like reactors are not covered there, but [Red’s homepage](http://www.red-lang.org/) is full of usefull info).}
    sent: "2016-09-09T05:40:04.477Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d24590cdbf820f7fab6a0a"
    text: {I try to understand aspects of Red `VIEW` and want to ask about a pointer to any documentation. When looking at various examples I collected the following possible element properties for the GUI element `TEXT`.^/```^/center / right / left^/size^/bold / italic / underline^/font size <xx>^/background color <xxx.yyy.zzz>^/font-color^/hidden^/```^/Some of them need the property name, some not.^/`help text` does not work here.^/QUESTION: is there a document which describes those details of GUI elements of Red VIEW? Thank you in advance.}
    sent: "2016-09-09T05:16:00.690Z"
    editedAt: "2016-09-09T05:17:15.111Z"
    v: 2
    author: "57c96bff40f3a6eec062f498"
) #(
    id: "57d1474898f8df994d477374"
    text: {I think red/help *is* the appropriate channel to do so, possibly also from the red mailing list/ forums}
    sent: "2016-09-08T11:11:04.397Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d146ee1baa312a6be2a5b7"
    text: {@PeterWAWood I think SO questions can be integrated to the side bar here? I've not looked into how you can do that tho..}
    sent: "2016-09-08T11:09:34.629Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d1462af33967fc643b3f4e"
    text: {@WaBerlin_twitter oh I'm not saying *not* to ask here, but^/> add questions to stack overflow which don't turn out to be bugs in red^/^/so, ask here, and if it isn't a bug, and is useful info in the long term add there, (http://stackoverflow.com/questions/tagged/red) ^/@PeterWAWood yes exactly}
    sent: "2016-09-08T11:06:18.189Z"
    editedAt: "2016-09-08T11:08:01.211Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57d14519f33967fc643b3c6a"
    text: {@WaBerlin_twitter This is a good place to ask your questions. Another good place would be the [Red Mailing List/Forum](https://groups.google.com/forum/#!forum/red-lang).^/^/Questions and answers in this forum tend to get lost over time, though not those on the Mailing List which is searchable. ^/I suspect @geekyI is suggesting adding good questions to stack overflow as then they will be easily available to others. The downside of asking on Stack Overflow is that the people who would answer your questions posted here probably wouldn't see them if they were posted on Stack Overflow.}
    sent: "2016-09-08T11:01:45.983Z"
    editedAt: "2016-09-08T11:06:25.354Z"
    v: 4
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d142eaf33967fc643b3645"
    text: {If gitter/red/help is not the right forum, I am willing to change to stack overflow.^/^/Which is the correct location there : ^/(http://stackoverflow.com/questions/tagged/red)  or^/(http://chat.stackoverflow.com/rooms/291/rebol-and-red)  or ???}
    sent: "2016-09-08T10:52:26.373Z"
    editedAt: "2016-09-08T10:53:19.320Z"
    v: 3
    author: "57c96bff40f3a6eec062f498"
) #(
    id: "57d0881989655972304b25a0"
    text: "That's a good idea @geekyI "
    sent: "2016-09-07T21:35:21.802Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57d064a477c1b70d7ff27cb0"
    text: {@WaBerlin_twitter would you care to write there? :smile: In general, I feel we should add questions to stack overflow which don't turn out to be bugs in red}
    sent: "2016-09-07T19:04:04.561Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d0642098f8df994d44f82e"
    text: {:point_up: [this](https://gitter.im/red/help?at=57d0309efe284f6c30308ce1) and [this](https://gitter.im/red/help?at=57d0340cfe284f6c303098f4) should probably be on stackoverflow as a question}
    sent: "2016-09-07T19:01:52.668Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d036e3cdbf820f7fa50be9"
    text: {Once I got moving at a decent pace on the GUI, it was so much simpler and easier than other GUI technologies. I really like it.}
    sent: "2016-09-07T15:48:51.770Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57d036551baa312a6bdf85c8"
    text: {:^^) An advantage to this approach is that it greatly reduces redundancy and noise, where things aren't readily ambiguous.}
    sent: "2016-09-07T15:46:29.318Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d035a468f483b41cac925d"
    text: {Thanks, @greggirwin ! As usual, it makes perfect sense once you chime in.}
    sent: "2016-09-07T15:43:32.281Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57d034f5896559723049f8b8"
    text: {Under Datatypes, in the VID doc, you'll see that there is no handling of `logic!` values, which is why `true` or `on` isn't automatically applied to the `data` facet.}
    sent: "2016-09-07T15:40:37.560Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d0349d68f483b41cac8e31"
    text: {'Align isn't a keyword, it's part of the `para` facet, which you can apply like so:^/```^/red>> view layout [radio "test" para [align: 'right] data on]^/```^/The alignment keywords are just handy shortcuts.}
    sent: "2016-09-07T15:39:09.385Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d0340cfe284f6c303098f4"
    text: {VID is a dialect, so there is not a strict `property value` syntax. If you look at the Keywords and Datatypes sections in the doc, that should clear things up. Some keywords are independent, while others take args (e.g. draw, data), and some datatypes can be automatically applied to a face based on their type.}
    sent: "2016-09-07T15:36:44.289Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d0336b77c1b70d7ff1c736"
    text: {@WaBerlin_twitter I don't know the answer to why `data` is required where `align` and `text` are not. I've had a very tough time finding what I need in the documentation, and have just had to rely on the good folk here and lots of trial and error to get my GUI mostly functional. The community here is patient and very helpful.}
    sent: "2016-09-07T15:34:03.711Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57d0324577c1b70d7ff1c34f"
    text: {Thank you for the hint. Eventually I do not understand the logic of the documentation. I tried to put `align` in front of `right` or `text` in front of `"my_text"`. However both result in a Script Error. What is different with `data`?}
    sent: "2016-09-07T15:29:09.610Z"
    v: 1
    author: "57c96bff40f3a6eec062f498"
) #(
    id: "57d0315268f483b41cac8060"
    text: {```view layout [radio "test" right data true]```}
    sent: "2016-09-07T15:25:06.095Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57d0311098f8df994d443e9d"
    text: "@WaBerlin_twitter Include `data` before `true`."
    sent: "2016-09-07T15:24:00.007Z"
    editedAt: "2016-09-07T15:24:31.213Z"
    v: 2
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57d0309efe284f6c30308ce1"
    text: {I have a question on usage of elements in Red/View.  The documentation:^/(https://dockimbel.gitbooks.io/red/content/v/v0.6.0/gui/View.html#check)  ^/provides information on usage of a check box. ^/There is a "data" documented which can be true : checked or false : unchecked. How can I set this value? ^/The following line : `view layout [radio "test" right true]` results in a Script Error.}
    sent: "2016-09-07T15:22:06.534Z"
    v: 1
    author: "57c96bff40f3a6eec062f498"
) #(
    id: "57cdb457f5a156f564848dd3"
    text: {@endo, yes, I did look at it and read the Tour info when @geekyI posted about it before. Don't let me discourage you. We need to try things and see what sticks.}
    sent: "2016-09-05T18:07:19.262Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cd806b8965597230415bca"
    text: {@geekyI I'll try to play on SO, but I don't want to affect negatively on Red, as I'm not a guru and my English isn't that good.}
    sent: "2016-09-05T14:25:47.669Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57cd7f92cdbf820f7f9c3383"
    text: {There are many useful functions and idioms flowing here, many functions in our rebol.r/user.r files which one can learn very fast and easy, but no one see.^/}
    sent: "2016-09-05T14:22:10.472Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57cd7e2b1baa312a6bd6efa9"
    text: {@endo64 I mentioned this before on /docs [August 19, 2016 12:38 AM](https://gitter.im/red/docs?at=57b60ec7cd00bdff6e5e6b51), while my experience with stackoverflow isn't that great, I do think someone should try and see how that works (maybe that someone should be me and you :wink: )}
    sent: "2016-09-05T14:16:11.772Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cd7d47cdbf820f7f9c2ae5"
    text: {It shows usage examples for DataTime functions of R language. It limits the number of examples so it doesn't get too long.^/I thought that it might be useful especially for beginners (not people who have Rebol background, people who start with Red).^/Because the most useful documents when I start learning Rebol were Cookbook and Oneliners. They directly show what I need AND how to do it in Rebol (and how to think in Rebol way)}
    sent: "2016-09-05T14:12:23.373Z"
    editedAt: "2016-09-05T14:12:41.800Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57cd7c61fe284f6c30281e81"
    text: {For example check this out: http://stackoverflow.com/documentation/r/1157/date-and-time#t=201609051401041082496}
    sent: "2016-09-05T14:08:33.068Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57cd7c2e77c1b70d7fe92655"
    text: {I totally understand @greggirwin , I'm not a fun of wikis for a documentation of a programming language although wikis are great as general.^/But I'm not offering to have a Red Wiki, which we already have actually.^/But did you check the link I sent? Stackoverflow is providing a documentation tool, which looks useful because we all familiar with using of SO.}
    sent: "2016-09-05T14:07:42.261Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57cc5d356efec7117ca79799"
    text: {Note that I'm not saying I'm *against* it. With luck Red will get to the point where a lot of people put things out there. I'm thinking more of organized docs. I should also note that I've never been a huge fan of wikis. I *love* that anyone can edit, but they tend not to have a cohesive design. Wikipedia works amazingly well, because you get a link to a specific thing, and then you can follow more links, but I've never been able to use it to start someplace and explore in a linear or hierarchical manner.}
    sent: "2016-09-04T17:43:17.269Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cc5b7f29ee4a67058eb734"
    text: {Knowing we're a small community, we need to leverage tools. But we also have a language that can self-represent its documentation and use it in different ways. My personal concern is putting effort into a system that then owns my data, which I can't get at and use any other way.^/^/It would be great to have someone R&D on it though. My concerns may be unfounded, and there may be a great API. I remember past efforts (my own and others) to do something similar with wikis, where it ended up being more pain than it was worth.^/^/Still, it's early and my opinions are hardly set in stone. :^^)}
    sent: "2016-09-04T17:35:59.497Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cc5a35861faa7f07b6c5dc"
    text: {It could be good for examples, linked from reference docs, but one of my first questions was whether you can export from it. I didn't see any info on that.}
    sent: "2016-09-04T17:30:29.223Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cc59646efec7117ca78ed6"
    text: {I saw that recently as well. Didn't excite me at a glance.}
    sent: "2016-09-04T17:27:00.641Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cc585e928ae0e734772260"
    text: {We were talking about digging gitter to pick up useful Red functions, onelines, tips&tricks and put them on a wiki or similar formatted site.^/I just saw that SO has a beta Documentation section and it looks like what we plan. Take a look:^/http://stackoverflow.com/documentation}
    sent: "2016-09-04T17:22:38.198Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57cc546a861faa7f07b6b100"
    text: {If you probe the block before `view` gets it, what does it contain in the case where it fails? Examining the data sometimes make things obvious.}
    sent: "2016-09-04T17:05:46.483Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cc286b928ae0e73476a1ad"
    text: {:smile: I think red needs a way to do a stack trace? Just maybe.. that code goes through a dialect which makes things harder to see..}
    sent: "2016-09-04T13:58:03.560Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc278a861faa7f07b6315e"
    text: {Yeeees. That was the problem. Thank you very much!}
    sent: "2016-09-04T13:54:18.508Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57cc26fb6bf4c26505ccb7ad"
    text: {Works for me with that; probably it was also taking as input your .red file}
    sent: "2016-09-04T13:51:55.896Z"
    editedAt: "2016-09-04T13:52:36.764Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc26df928ae0e734769e1e"
    text: {@Rebol2Red ^/```^/block: copy []^/files: read %./^/^/foreach file files [^/^-if %.jpg = suffix? file [^/^-    append block 'image^/^-    append block 100x100^/^-    append block file^/^-]^/]^/^/view block^/```}
    sent: "2016-09-04T13:51:27.939Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1dbe6bf4c26505cca120"
    text: "Nope"
    sent: "2016-09-04T13:12:30.514Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57cc1d73958e6f4729e8492e"
    text: {@Rebol2Red just a suspicion, need to check if it requires new lines in the original block}
    sent: "2016-09-04T13:11:15.346Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1cfe29ee4a67058e07bb"
    text: "Maybe, But is there a way to do this dynamically?"
    sent: "2016-09-04T13:09:18.996Z"
    editedAt: "2016-09-04T13:09:39.669Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57cc1cc9928ae0e7347686f4"
    text: {@Rebol2Red not sure, but maybe because view parses the block as a dialect?}
    sent: "2016-09-04T13:08:25.302Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1becd52261ec3450b375"
    text: {I want to make a thumbgallery^/```^/block: copy []^/files: read %./^/^/foreach file files [^/^-append block 'image^/^-append block 100x100^/^-append block file^/]^/view block^/```^/*** Script Error: func does not allow file! for its body argument^/*** Where: func^/^/Why does the following works and the previous not?  (looks like the same thing to me)^/```^/view [^/^-^-image 100x100 %DirtbikeChampionship.jpg ^/^-^-image 100x100 %DominoDraw.jpg ^/^-^-image 100x100 %DuckHunt.jpg^/]^/```^/Ofcourse i want to do it dynamically}
    sent: "2016-09-04T13:04:44.603Z"
    editedAt: "2016-09-04T13:06:10.858Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57cb3fdd29ee4a67058c4fdf"
    text: {Tinkering now. There are a few different Redbol versions out there, which I'm trying to reconcile and bring up to date with rfc7159.txt.}
    sent: "2016-09-03T21:25:49.716Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cb3e486efec7117ca5344f"
    text: {@geekyI Nope, I was looking at  [this](http://red.esperconsultancy.nl/Red-JSON/tree?ci=trunk&expand), as linked from [red-lang contributions](http://www.red-lang.org/p/contributions.html). I don't think I handled it right, there are some references in the code which weren't locally available on my system. The code's quite intelligible though, helped me a lot.}
    sent: "2016-09-03T21:19:04.883Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "57cae5a76efec7117ca42f47"
    text: "Glad to hear you got it working @radebrecht !"
    sent: "2016-09-03T15:00:55.815Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cae591958e6f4729e5b13c"
    text: {just checked the source for `load`, it isn't implemented yet. There are options to deploy in rebol, [like this guy got to recently](https://gitter.im/red/red/welcome?at=57bc19fcb64a3a016f5c1fcf) but if you were able to do it in red, much better..}
    sent: "2016-09-03T15:00:33.017Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cae22b6efec7117ca42651"
    text: {@radebrecht by the way, which load-JSON function? Is it the built in `load` i.e.^/```^/load/as {{ "e" : "e" }} 'json^/```}
    sent: "2016-09-03T14:46:03.167Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cae11e29ee4a67058b3cbe"
    text: {@greggirwin @geekyI Yep, I thought about that. I need to deploy an executable though. Also I like the look of the native UI better. Looking forward to seeing OSX UI released. Also, I made good progress with `parse`, got my data extracted. Cheers}
    sent: "2016-09-03T14:41:34.605Z"
    editedAt: "2016-09-03T14:41:59.597Z"
    v: 2
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "57cabeee861faa7f07b31aa5"
    text: {@radebrecht as a relatively recent newcomer, I second the use of R2, if you aren't using it already}
    sent: "2016-09-03T12:15:42.518Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c9ddd86bf4c26505c7c360"
    text: {Depending on your needs, you could use R2 in the interim. }
    sent: "2016-09-02T20:15:20.440Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9d0af928ae0e7347172b3"
    text: {@greggirwin Thanks again. It worked as in I could load the file. Unfortunately now the load-JSON function throws parse errors. Sigh. I'll learn the parse dialect and extract the data I need myself. Luckily it's the weekend. Cheers}
    sent: "2016-09-02T19:19:11.587Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "57c9cfb2ff95228007a79dda"
    text: {You can use `do` on the file if you're running in the interpreter.}
    sent: "2016-09-02T19:14:58.533Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9cf586bf4c26505c7921e"
    text: {@greggirwin Thanks. So I clone the repo and #include %path/to/file.red in my own project. I'll give it a try.}
    sent: "2016-09-02T19:13:28.239Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "57c9ced96efec7117ca1b284"
    text: {@radebrecht, for now, yes. I have various Redbol JSON codecs here, and it's on my list to create a reference implementation that will be standard in Red.}
    sent: "2016-09-02T19:11:21.949Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9ce9b6bf4c26505c78f91"
    text: {@dgeyser, yes. We sometimes refer to them as vars in Red as well. They are just words that refer to values. A distinction from other languages being that *values* in Red are strongly typed, but *words* can refer to any value, so as "variables" words are *not* strongly typed.}
    sent: "2016-09-02T19:10:19.353Z"
    editedAt: "2016-09-02T19:13:31.818Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9ccb76bf4c26505c78946"
    text: {Hi. How do I load one of the contributions? I want to use the JSON codec. Do I need to clone the git repo?}
    sent: "2016-09-02T19:02:15.527Z"
    v: 1
    author: "57c9cc4f40f3a6eec0630abc"
) #(
    id: "57c9bf26ff95228007a76558"
    text: {@greggirwin Thanks. You have been very helpful. Am I correct in saying you are defining new words, which work like vars in other languages?}
    sent: "2016-09-02T18:04:22.875Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
)#(
    id: "57c9bdb5ff95228007a7609b"
    text: {Remember that not *everything* that  works in Rebol will work in Red. Compilation will change some rules, at the very least. In this case, it should at least not crash.}
    sent: "2016-09-02T17:58:13.840Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9bc6b29ee4a67058899f6"
    text: "@greggirwin it works in Rebol:))))"
    sent: "2016-09-02T17:52:43.788Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c9bbf4861faa7f07b0c5d7"
    text: {@greggirwin https://github.com/red/red/issues/2199. I'm not a native speaker, you know:))}
    sent: "2016-09-02T17:50:44.270Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c9bbc26bf4c26505c7445c"
    text: {@ifgem, it's a little hard to parse. :^^) "Redefined `function!|action!` crashes" ?}
    sent: "2016-09-02T17:49:54.194Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9bb6b6efec7117ca16c7b"
    text: {@dsgeyser , reading unit tests can show you edge cases and such, along with expected results, but it will be *very* dry way to learn the language. I suggest picking small programs you want to write, or that you've done before. Use the console and `help`. Play and have fun experimenting.^/^/What is your background? We might make other suggestions if we know where you're coming from.}
    sent: "2016-09-02T17:48:27.862Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c9baf7d52261ec344b7e6b"
    text: {@greggirwin Runtime crash on redefining function!, action! during its call. Is this a good title for a bug:)?}
    sent: "2016-09-02T17:46:31.078Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c9ba18928ae0e73471245d"
    text: {Say you're writing a minesweeper game. Your board has a block of cells, each is keyed by its position. ^/```^/board:  #(^/    size: 9x9^/    cells: [1x1 [a] 2x1 [b] 1x2 [c] 2x2 [d]] ; ...^/)^/```^/You need a random list 10% of the cells to put mines in, and to iterate over that.^/```^/foreach pos copy/part random extract board/cells 2 to integer! board/size/x * board/size/y * 10% [^/    ; place mine^/]^/```^/Using temp vars, it might look like this.^/```^/num-cells: board/size/x * board/size/y^/mine-count: to integer! num-cells * 10%^/cell-positions: extract board/cells 2^/random-mine-cells: copy/part random cell-positions mine-count^/foreach pos random-mine-cells [^/    ; place mine^/]^/```}
    sent: "2016-09-02T17:42:48.226Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c93101ccfcf7147cb1cdc4"
    text: {@PeterWAWood  Thanks. Do you think going through the Unit Tests will help me to grok Red? @greggirwin  Can you please show an example using temp vars, as I am trying to get a grip on following long sequences? Perhaps also ways to inspect intermediate values. Hope this makes sense.}
    sent: "2016-09-02T07:57:53.805Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c7c152ff95228007a16a83"
    text: {@dsgeyser You can find the main unit tests here in [Github](https://github.com/red/red/tree/master/tests/source/units).}
    sent: "2016-09-01T05:49:06.472Z"
    editedAt: "2016-09-01T05:49:30.276Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57c755f2ff95228007a05458"
    text: "@dsgeyser checkout gregg's gists"
    sent: "2016-08-31T22:10:58.007Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c752fe29ee4a67058198b0"
    text: {@greggirwin  Thanks. Will do. I really appreciate your active participation here. Got to get some sleep. Its midnight here, kind of hard to leave this place. ^^-)}
    sent: "2016-08-31T21:58:22.759Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c7513dccfcf7147cac910b"
    text: {Not shy, but just dumping them won't be useful. Happy to answer "How would I..." questions though.}
    sent: "2016-08-31T21:50:53.008Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c7508229ee4a67058190ff"
    text: { @greggirwin  Don't be shy to put your  gazillion mezzs somewhere reachable for us mere mortals, if you have the time. Also expect lots of questions. WE HUNGRY... ;-)}
    sent: "2016-08-31T21:47:46.576Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c74ef76efec7117c9a4a23"
    text: {I love Redbol, because they make it fun to think about things and try different approaches. }
    sent: "2016-08-31T21:41:11.302Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c74edc29ee4a67058189cc"
    text: {@dsgeyser, if there are any funcs you think would be good, let me know. I have zillions of them in R2. Trying to be selective, organize, and think about them as a whole.}
    sent: "2016-08-31T21:40:44.616Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c74eac85a31403548c59b6"
    text: {@geekyI I agree about the Factor environment - pretty sharp implementation.}
    sent: "2016-08-31T21:39:56.917Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "57c74ea3ff95228007a03f17"
    text: "@asampal thanks"
    sent: "2016-08-31T21:39:47.328Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74e85ccfcf7147cac87f6"
    text: {@greggirwin bit unfortunate it is eclipsed by an adobe product with the same name}
    sent: "2016-08-31T21:39:17.211Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74e6e6bf4c26505c00b0a"
    text: {Many years ago I did a simple Intellisense function for R2, and have also built a Smalltalk-like system viewer. We have very few technical limitations in Red. }
    sent: "2016-08-31T21:38:54.553Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c74e61ccfcf7147cac8784"
    text: {@greggirwin  started studying up on your Mezzs functions. Think it will make a great learning resource.}
    sent: "2016-08-31T21:38:41.279Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c74df7dc3c80b559a76667"
    text: {@geekyl , here's what someone did for Ren-C, a Rebol fork, in terms of a smarter REPL with some IDE-like features (https://www.youtube.com/watch?v=scNIGsLiCgM https://www.youtube.com/watch?v=0exDvv5WEv4). I'm sure that Red will allow for similar prototypes to be created quickly.}
    sent: "2016-08-31T21:36:55.560Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "57c74def6bf4c26505c009a7"
    text: "http://sprylang.org/"
    sent: "2016-08-31T21:36:47.788Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c74de9d52261ec344478c1"
    text: {@greggirwin  a little offtopic, but I think Red is capable of producing a way better search engine library than Elasticsearch etc. Especially after 2.0. }
    sent: "2016-08-31T21:36:41.472Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c74dcb29ee4a6705818694"
    text: {My approach is to build experimental tools, mezzanine ideas, etc. and see what clicks with people. I do think there's a lot to learn from other languages, but "collecting ideas" (the way it clicks in my head) is tricky. Rebol was designed over a very long period by one great mind. Red is following that vision. I don't think we can build Red by committee or feature matrix. Not that you meant that (text can be hard to get all meaning from), so please don't take offense. ^/^/Formal proposals for changes to Red need to be well thought out.^/^/Experimental tools, and building things based on good ideas we've seen...yeah, let's go nuts.}
    sent: "2016-08-31T21:36:11.597Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c74d5c6efec7117c9a43e9"
    text: {@greggirwin Spry is javascript? (https://en.wikipedia.org/wiki/Spry_framework)?}
    sent: "2016-08-31T21:34:20.607Z"
    editedAt: "2016-08-31T21:34:43.695Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74c66928ae0e7346a13d3"
    text: {Hehe.. sorry for the assumption. Maybe we should have some documentation somewhere collecting the ideas from different languages :). I should do this.. meaning to note them down somewhere}
    sent: "2016-08-31T21:30:14.141Z"
    editedAt: "2016-08-31T21:31:36.160Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74c3fff95228007a03894"
    text: {I did install Factor and fired it up (and Pharo and Racket and Io and Nim, and need to check out Spry). So much to do.}
    sent: "2016-08-31T21:29:35.558Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c74c2a29ee4a67058180ec"
    text: {For example, for the documentation, the main concept is you can include snippets of code, and each word (about the same as `word` in red) is clickable like a hyper link to get to the source}
    sent: "2016-08-31T21:29:14.239Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74be3d52261ec34447355"
    text: {And we can play with a lot of ideas. I started a couple gists (math-lab and trig-lab) to push the idea of "lab" tools for specific areas, like the gradient lab.}
    sent: "2016-08-31T21:28:03.195Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c74baa861faa7f07a9ab0c"
    text: {@greggirwin you should try out Factor, if only for the IDE, has one of the best UX. It is a large download tho}
    sent: "2016-08-31T21:27:06.675Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74b5bccfcf7147cac7d99"
    text: {What may be trickier is an environment that intelligently tracks context for dialects, but that will be doable too. }
    sent: "2016-08-31T21:25:47.875Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c74b1c6efec7117c9a3db7"
    text: {For learning, a lot of old Rebol material is applicable, including the Core guide. Start small. And trying to do too much in long expressions can make it hard to track. I know some people will say temp vars are bad (pure functionalists), but if you think along Forth lines, temp vars are just part of your vocabulary (rather than using the stack).}
    sent: "2016-08-31T21:24:44.651Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c74b16ccfcf7147cac7cf7"
    text: "also it is easier to build gui programs in Red"
    sent: "2016-08-31T21:24:38.969Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74af5ccfcf7147cac7c96"
    text: {@dsgeyser on the contrary I think it would be easier.. Factor is not much less free form, both have a common origin in Forth. If anything, I think there is mostly not that much *need*}
    sent: "2016-08-31T21:24:05.786Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74abb6efec7117c9a3c49"
    text: {I think we'll see amazing IDEas for Red in the future. If you look at how some tools build based on ASTs, you could think in those terms, but as progressive evaluations.}
    sent: "2016-08-31T21:23:07.415Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c749aa928ae0e7346a0ae8"
    text: {@geekyI  Yeah the IDE in Factor is really great. Wish we had one for Red. But I think the freeform nature of Red will make developnent of an IDE for Red very difficult. }
    sent: "2016-08-31T21:18:33.965Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c74712ff95228007a02ada"
    text: {@dsgeyser like the IDE in Factor? (without the history part) It's one of the best I've seen, really helped me to learn}
    sent: "2016-08-31T21:07:30.266Z"
    editedAt: "2016-08-31T21:08:38.733Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74697d52261ec344461a5"
    text: {@geekyI  Been reading up on Forth as well. What will really be great is to learn how to break down any Concept into its smallest parts, and build up via the console and at the same time keeping an audit history of states, values, progress  etc. Will be more organized and be able to go back and learn from  my mistakes. How about a programning environnent that is kind of incorporated into a realtime Federated wiki where you can share experiences on a realtime basis. All for a pleasant learning experience. }
    sent: "2016-08-31T21:05:27.110Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c7452b928ae0e73469fd88"
    text: {Other things on my todo list is looking at dependently typed languages like "Idris", which I think might interest you in that it does proofs and verification (like opa but more.. completely bug free code? :wink: ) but that adds complexity. But it is interesting that it can write it's own code in a way, assisted by the programmer. Give it types and it writes the code for you}
    sent: "2016-08-31T20:59:23.179Z"
    editedAt: "2016-08-31T21:01:30.121Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74439d52261ec344459ed"
    text: {I'd learned that simplifying things as much as possible has advantages when I used "J", a very terse languages, but it's hard to read as syntax there is not very clean (there being complexity due to the monad dyad dichotomy), whereas in Red much attention is paid to even designing the syntax as simple as possible}
    sent: "2016-08-31T20:55:21.434Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c74310928ae0e73469f6e6"
    text: {What helps me is in thinking in terms of datatypes. In object oriented programming, you grok things when you understand everything is an "object", in functional, everything is a "function", then in haskell for e.g. you think in terms of types, and in Red, you think in terms of data (there is no code, only data). These are not necessarily mutually exclusive, you can mix and match..}
    sent: "2016-08-31T20:50:24.426Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c741a16bf4c26505bfe351"
    text: {@dsgeyser agree with you on "the culmination of really powerful concepts", it seems to have a bit of everything. I think it's the philosophy that counts, there is no "rules set in stone", nothing that "you should not break", accepting all types of criticisms.^/I have used Factor too, and I'm not sure if there is anything I can add to your knowledge.. you might know more than me}
    sent: "2016-08-31T20:44:17.597Z"
    editedAt: "2016-08-31T20:44:35.850Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c7411eccfcf7147cac5ea6"
    text: {@geekyI  @ifgem  I am from South Africa. I see Red as my future. This is a great community, a bit small, but we will get there. It is really great to kearn from the Gurus out there in Red Paradise. @ifgem can"t use app; Android version too old  - not really keen on upgrading .}
    sent: "2016-08-31T20:42:06.098Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c73fcd6bf4c26505bfdba2"
    text: "@ifgem thanks, should try it out"
    sent: "2016-08-31T20:36:29.249Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c73eb929ee4a6705815563"
    text: {I'll take any recommendation. The love for programming is the driving force. And Red is really so addictive! What is tripping me up is the freeform nature. But therein lies the power. Trying to follow code and at the same time keeping intermediate steps/values in one's head. But I'll get there. Need to break  chunks of code diwn into smaller pieces and use the console more to start focusing on certain code patterns.}
    sent: "2016-08-31T20:31:53.249Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c73e026bf4c26505bfd4f3"
    text: {@geekyI AFAIK, it's not possible in mobile version, but if you use Android, gitteroid's pretty good}
    sent: "2016-08-31T20:28:50.107Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c73c33ff95228007a0051f"
    text: {@dsgeyser can't edit chats on phone? *like this*.. but wow, you have *much* more experience with rebol than me!}
    sent: "2016-08-31T20:21:07.981Z"
    editedAt: "2016-08-31T20:25:40.504Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57c73c0d6efec7117c9a0985"
    text: "Taken seriously. Damn cellphone keyboard!"
    sent: "2016-08-31T20:20:29.445Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c73be4d52261ec34443e87"
    text: {@geekyI  I've read  - or rather  tried to - halfway through some of the Factor, Lisp and Logo material out there to get a hang of what Rebol/Red is all about. What  I got from all of that is the realization that Red is the culmination of really powerful concepts. I also have a wandering mind. Studied some Opa also. I  knew about Rebol since 2001. Thought it was to simple to be seriousl}
    sent: "2016-08-31T20:19:48.269Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c73a3a928ae0e73469d8f5"
    text: "@geekyI no problem - все хорошо:)"
    sent: "2016-08-31T20:12:42.102Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
)#(
    id: "57c739fc861faa7f07a97058"
    text: "@ifgem what's the problem with it?"
    sent: "2016-08-31T20:11:40.979Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c739d5d52261ec34443853"
    text: {@geekyI I'm saying that I think your recommendation is false.}
    sent: "2016-08-31T20:11:01.766Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c7399c6bf4c26505bfc56e"
    text: {@ifgem are you saying when everyone is thinking the same thing, someone is not thinking? :wink: I agree with you there :)}
    sent: "2016-08-31T20:10:04.473Z"
    editedAt: "2016-08-31T20:10:55.084Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c73956861faa7f07a96e5f"
    text: "@geekyI  disagree"
    sent: "2016-08-31T20:08:54.117Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c7391c928ae0e73469d553"
    text: "all good sources there  also checkout rebol.info"
    sent: "2016-08-31T20:07:56.314Z"
    editedAt: "2016-08-31T20:08:16.547Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c738c46efec7117c99fda7"
    text: "@dsgeyser Great minds think alike :tongue:"
    sent: "2016-08-31T20:06:28.553Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c738bc928ae0e73469d41e"
    text: {@dsgeyser ^/http://rebol.org^/http://www.red-lang.org/2013/11/041-introducing-parse.html^/http://business-programming.com/business_programming.html^/http://www.rebol.com/docs/core23/rebolcore.html}
    sent: "2016-08-31T20:06:20.083Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c73862861faa7f07a96ba7"
    text: {Thanks @geekyI . What is your background experience programming wise? Kind of looking around to match up with some of the people here. I find learning Red is diffucult when youre feeling isolated, and with little spare time. Looking for ways to shorten the learning experience.  Any good suggestions?}
    sent: "2016-08-31T20:04:50.048Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c7385029ee4a67058140fa"
    text: {@dsgeyser What's your area of expertise? Or put it another way, which programming languages are you familiar with? The most useful "tools" to learn in Red I've found so far are `?`, `source` and `reflect`}
    sent: "2016-08-31T20:04:32.701Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c737c0ff952280079ff43b"
    text: {Mainly thinking of source to source transforms, trying to find better ways to understand what makes red 'tick'}
    sent: "2016-08-31T20:02:08.779Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c7376bccfcf7147cac3df4"
    text: {@dsgeyser "programmer's block"? :smile: I'm full of ideas, but don't understand enough of red/rebol yes to code much}
    sent: "2016-08-31T20:00:43.095Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c736ff861faa7f07a966bd"
    text: "https://github.com/red/red/issues/2178"
    sent: "2016-08-31T19:58:55.010Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c736ddccfcf7147cac3bc9"
    text: {if you use Windows you have to use rebol VIEW to run tests.}
    sent: "2016-08-31T19:58:21.567Z"
    editedAt: "2016-08-31T19:59:10.337Z"
    v: 2
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c736c5ff952280079fed07"
    text: {@dsgeyser https://github.com/red/red/tree/master/tests.}
    sent: "2016-08-31T19:57:57.228Z"
    v: 1
    author: "5794a6c740f3a6eec05c3afe"
) #(
    id: "57c73691928ae0e73469cdbc"
    text: {Sorry @PeterWAWood  great to know you are still here!  Btw. Where to find Unit tests? Maybe it can be a great source for learning Red. Is anyone else sometimes struggling with "writers block', but in a programming kind of way? How about the old timers? ;-)}
    sent: "2016-08-31T19:57:05.597Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c7345bd52261ec34442158"
    text: {Oh sorry. Thought that's the end of our 'test buddy'. Couldn't make out the rest. This would have been earth shuddering! Sigh...}
    sent: "2016-08-31T19:47:39.609Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c732f4d52261ec34441d79"
    text: "@dsgeyser he banned someone else :D"
    sent: "2016-08-31T19:41:40.362Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c732a5d52261ec34441cc8"
    text: " If I may ask: Why was @PeterWAWood  banned?"
    sent: "2016-08-31T19:40:21.354Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c6ffb6ccfcf7147cab7a44"
    text: "Ah! Thank you so much."
    sent: "2016-08-31T16:03:02.015Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57c6fe23928ae0e734690178"
    text: {```^/red>> word: "AbcD"^/== "AbcD"^/red>> do reduce [random/only [ lowercase uppercase ] word]^/== "ABCD"^/red>> do reduce [random/only [ lowercase uppercase ] word]^/== "abcd"^/```}
    sent: "2016-08-31T15:56:19.065Z"
    editedAt: "2016-08-31T15:56:50.816Z"
    v: 3
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c6f99d8f4ad01672d0b989"
    text: { This line of code runs in Rebol, but Red complains that the function (either `lowercase` or `uppercase`) is missing its string argument. Is there a new way to accomplish this in Red?^/^/```^/do random/only [ lowercase uppercase ] word^/```}
    sent: "2016-08-31T15:37:01.575Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57c0a7a7f6fe00361e032863"
    text: {A couple years ago I gave a talk on Red, where I showed various syntax elements and a small script being cross compiled. Not much really. A guy I know, who is a penetration tester by trade, thought Red was OK overall, but he was *really* excited about having a minimal toolchain and code that was small enough that you could actually audit it with some hope of success.}
    sent: "2016-08-26T20:33:43.649Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c0a720f6fe00361e0326df"
    text: {Can you guarantee security? If so, at what cost? These are good things to think about, but are a means, not an end. Capabilities are another way to go, right? As is minimizing surface area. And there's the Redbol idea that you can use dialects, which are tightly controlled, instead of strings that require careful escaping and are prime targets for injection attacks.}
    sent: "2016-08-26T20:31:28.277Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57c0a3f32a7bd0e920540281"
    text: "`secure` is a native in rebol fyi"
    sent: "2016-08-26T20:17:55.386Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c0a3a32a7bd0e920540131"
    text: {Can't disagree with you there on Wordpress, it has one of the biggest ecosystems out there.. has become sort of a CMS of it's own}
    sent: "2016-08-26T20:16:35.570Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c0a31d5b11de772155f81b"
    text: {@geekyI  Yes "secure".  Security is a big issue. I believe  you can use Red solely as a functional language with static type checking. Would be more fun to build web apps with it!  Kind of a "Wordpress" alternative with better security. Incidently,  Wordpress is being used on 1/4 of all websites and is becoming a viable platform for building web apps with. Now with Restful api as well. Theres a market for Red to go after, if security can be guaranteed. }
    sent: "2016-08-26T20:14:21.039Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c0a11c42e38279217b0f56"
    text: {Opa also seems to use the same PEG parsing concept it seems}
    sent: "2016-08-26T20:05:48.774Z"
    editedAt: "2016-08-26T20:05:56.741Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c0a0e242e38279217b0e6d"
    text: {But I feel Rebol and Red have an advantage here, as it has `parse` which if used properly..}
    sent: "2016-08-26T20:04:50.138Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c0a0958877dae6209d4831"
    text: {Still too soon for javascript at the moment I think}
    sent: "2016-08-26T20:03:33.926Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c0a067d872312a1e7fa681"
    text: {@dsgeyser do you mean `secure`? It is more relevant to executing arbitrary rebol code. AFAIK compiling to js hasn't been done yet.. but I've read about experimental emscripten builds..}
    sent: "2016-08-26T20:02:47.754Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c09f7442e38279217b0a50"
    text: {@geekyI  Not really. The begging question . .  How secure is it out there. Tested by anyone? What about injection? Or is it not possible, due to code being on the server.}
    sent: "2016-08-26T19:58:44.860Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c09d712a7bd0e92053e817"
    text: {The compiler automatically escapes XHTML values, which^/avoids injection attacks. }
    sent: "2016-08-26T19:50:09.760Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c09ce5e353af447b32cae6"
    text: {@dsgeyser are you familiar with `secure` in Rebol? It's one of the ways to do sandboxing there}
    sent: "2016-08-26T19:47:49.778Z"
    editedAt: "2016-08-26T19:49:37.274Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c09caa3cdeb6467b73fce1"
    text: {So it does verification on compile time. Looking at their web page, it does feel a bit familiar. And they've been doing it since ~2011, must have been one of the early birds}
    sent: "2016-08-26T19:46:50.798Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c09c2542e38279217af71f"
    text: {Dockimbel mentioned Opa as a possible model for web applications. Sure hope so.  Imagine blog engine, etc. with restful  api build into it. Yes, proper escaping also helps.}
    sent: "2016-08-26T19:44:37.430Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c09a4b8877dae6209d30b2"
    text: {^/In addition, an Opa application's monolithic structure is not merely conceptual. All^/the pieces of your Web application -- the HTML files, JavaScript source, image^/files, CSS files, and so on -- that would ordinarily be placed in separate directories^/are bundled by the compiler into a single executable. This makes deployment^/simple; you only need copy one executable file to the deployment destination.^/It also improves security significantly. Your code thinks that the application's^/directories and files are actual directories and files out on a file system^/somewhere. But, from the perspective of the outside world, the files and directories^/aren't there. Someone who manages to access your Web application's home^/directory cannot manipulate the constituent HTML, CSS, or JavaScript files^/because they simply don't exist. In addition, the Opa compiler runs a security audit^/as it builds your application, minimizing the likelihood that you might have^/inadvertently introduced a client-to-client or client-to-server code injection security^/weakness. The compiler will not allow foreign code to be inserted into the^/execution flow at runtime.}
    sent: "2016-08-26T19:36:43.830Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c09a188877dae6209d3035"
    text: {Based on this piece taken from source on web:   "}
    sent: "2016-08-26T19:35:52.720Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c09a0be353af447b32be91"
    text: {reading about Opa on [wikipedia](https://en.wikipedia.org/wiki/Opa_(programming_language)), it looks like the "strong, static typing" is the reason for preventing sql injections? Not too different from the many functional typed--compile to javascript languages out there.. or even properly doing escaping}
    sent: "2016-08-26T19:35:39.732Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c098b02a7bd0e92053da66"
    text: {@dsgeyser I think there was discussion about sandboxes and security, but perhaps it's a bit too early. Red is still too much in alpha. Need to compile to *webassembly* first?}
    sent: "2016-08-26T19:29:52.077Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c096b75b11de772155cc28"
    text: {I mean statically compiled. But no Javascript exists beforehand. So nowhere to inject code.^/}
    sent: "2016-08-26T19:21:27.429Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57c095bb3cdeb6467b73e5fe"
    text: {I've read somewhere that Opa, the programming framework, with is written in Ocaml, being functional with static typing, is very secure and immune to code injections and xss scripting. Code is dynamically compiled to Javascript, and the fact that the compiler verifies the code before execution, makes it extremely safe. ^/Now my question. Can Red be implimented in a similiar fashion? Would be a great selling point. }
    sent: "2016-08-26T19:17:15.384Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57bcda8e6981f5f269121f59"
    text: {@geekyI I believe this is a temporary problem until Red is self-hosted. Once Red is self-hosted, it will be possible to build a single executable that includes the gui-console and the compiler.  }
    sent: "2016-08-23T23:21:50.889Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57bcbfbeb64a3a016f5f073e"
    text: "Thanks @geekyI "
    sent: "2016-08-23T21:27:26.118Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bcb8bacd00bdff6e73e19f"
    text: {@greggirwin (in retrospect, I realize I've only answered one part of your question, or rather, where the *compilation cache* is stored)^/**tl;dr**: the approach currently taken by rebol for user configs is probably the best^/Most under the user folder in ^/* Appdata/Roaming,^/* some in Appdata/Local^/* some directly in the user folder `.using_dot_convention` (but mostly configs and volatile files in this case)^/^/~~~^/I think we can divide the languages into three types:^/* interpreted^/* compiled^/* hybrid (includes jit and anything which generates an IR)^/^/Compiled languages usually come with their own distribution of mingw and llvm^/^/Hybrid ones are probably the ones we are interested in, as interpreted ones don't generate a compilation cache, and compiled ones are usually shipped with the compiled machine code.^/^/Among the hybrid ones that I currently use in some way are java, python and julia:^/^/Java and python, being stable languages, and despite using somewhat different compilation models, use the same approach; they install the compiled files (.dlls and .pyd respectively) into `program files`,  just like the compiled languages ^/^/*the only one that comes close to Red's compilation model, julia,* has the core dist files stored in Appdata/Local and packages with their compilation cache in the user profile folder (TODO: check more JIT languages?)^/}
    sent: "2016-08-23T20:57:30.183Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57bc9222ed79c5ee4f2e2a10"
    text: {If someone knows what other languages do, that might be a nice little matrix to put in a wiki.}
    sent: "2016-08-23T18:12:50.207Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bc884e5ffbca3e3c075108"
    text: {But this is the cost of being in on the ground floor. :^^)}
    sent: "2016-08-23T17:30:54.219Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bc883f87f779f0691fd772"
    text: {End user Red apps will have slightly different rules. And there is the rise of containerization. ^/^/Most of us probably want the simplest setup possible. I know I lose track of the console builds until I go to appdata and see them all, and clean them up.}
    sent: "2016-08-23T17:30:39.816Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bc876787f779f0691fd3ac"
    text: {There are multiple issues.^/- Red should be a good citizen as each OS defines it. ^/- It should do the best it can by default, with no config^/- It should support a config file that lets you control things, as safely as possible}
    sent: "2016-08-23T17:27:03.980Z"
    editedAt: "2016-08-23T17:28:10.378Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bc1a695ffbca3e3c0572f9"
    text: {@qtxie I don't think it's necessary to change the directory yet. Most Red users at this stage will be responsible for the machine that they are using. Not too many people will be installing on  a locked down work-owned machine yet.}
    sent: "2016-08-23T09:42:01.877Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57bc19bdb64a3a016f5c1ed5"
    text: "@geekyI Thanks for the explanation."
    sent: "2016-08-23T09:39:09.044Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "57bc118bcd00bdff6e70ebf1"
    text: {[![blob](https://files.gitter.im/red/help/zJWL/thumb/blob.png)](https://files.gitter.im/red/help/zJWL/blob)}
    sent: "2016-08-23T09:04:11.453Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57bc0f03ed79c5ee4f2bfca1"
    text: ""
    sent: "2016-08-23T08:53:23.391Z"
    editedAt: "2016-08-23T09:02:27.756Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57bc0d8fed79c5ee4f2bf6ef"
    text: {[![blob](https://files.gitter.im/red/help/YUK4/thumb/blob.png)](https://files.gitter.im/red/help/YUK4/blob)}
    sent: "2016-08-23T08:47:11.851Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57bc0cd95ffbca3e3c053ff3"
    text: {@PeterWAWood `ProgramData` is per program, but `AppdData` is per user}
    sent: "2016-08-23T08:44:09.459Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57bc084c6981f5f2690e7ea3"
    text: {@qtxie I suspect that if the users ProgramData directory is locked down, that others are too.}
    sent: "2016-08-23T08:24:44.079Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57bc0640b64a3a016f5bd475"
    text: {Maybe we should use the `AppdData` instead of `ProgramData` ? }
    sent: "2016-08-23T08:16:00.224Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57bbcec5b64a3a016f5b1abf"
    text: {It is possible to compile the gui-console from source using the binary distribution:^/```^/PS C:\Users\peter\Red> ./red-061.exe -c -t Windows e:\Red\red\environment\console\gui-console.red^/```^/}
    sent: "2016-08-23T04:19:17.143Z"
    editedAt: "2016-08-23T04:22:16.984Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57bbce136981f5f2690db045"
    text: "We hope that you'll soon learn more about Red."
    sent: "2016-08-23T04:16:19.776Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57bbcdd487f779f0691cd4e6"
    text: {@jeffmaner It seems a perfectly reasonable thing to write :-)}
    sent: "2016-08-23T04:15:16.937Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57bbcd0e87f779f0691cd2dc"
    text: {@greggirwin  @PeterWAWood Ack! I'm so sorry. I did not intend to send that. That was my immediate written reaction, which I left as a draft. I guess when I leave Gitter, it sends my draft message. Again, so sorry. I'm a .Net developer by day, but I profess little to no knowledge of this particular project. I seriously regret that Gitter submitted that message! Lol. Ugh.}
    sent: "2016-08-23T04:11:58.350Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57bbca9ced79c5ee4f2b14ad"
    text: {@jeffmaner The gui-console can easily be compiled from source which gives full control over where the executable is saved. Though even then, I suspect that there are permissions issues in new versions of Windows.^/}
    sent: "2016-08-23T04:01:32.114Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57bbc877187885ef4f6ca4dd"
    text: {Seriously? I'm just a hobbyist in Red/Rebol. I've not looked at compiling it for myself. But as contemporary as Rebol/Red is, I cannot believe this isn't simple to remedy.}
    sent: "2016-08-23T03:52:23.585Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57bbb0d8cd00bdff6e6fb970"
    text: {I don't see an easy way. %gui-console.red expects it to be there, and the crush lib builds there as well. It may also be a limitation imposed by MS to be considered a well behaved Windows app. Doesn't mean it can't be done. Just not supported out of the box right now.}
    sent: "2016-08-23T02:11:36.176Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bb9232cd00bdff6e6f6113"
    text: {Can any of Windows 7+ users answer this question on the Mailing List?^/"Is there any way to compile the gui console to the same folder as the red exe instead of ProgramData?  (I am unable to run executables from that location due to administrative lockdown at work)"}
    sent: "2016-08-23T00:00:50.886Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57bac5eced79c5ee4f273ee5"
    text: {The example is from http://www.rebol.com/r3/docs/concepts/scripts-embeded.html}
    sent: "2016-08-22T09:29:16.181Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57bac2f2bb6fad403cf5167b"
    text: {You are right, it works without the brackets, but i want to embed it into an  html file like this^/```^/<!DOCTYPE html>^/<html lang="en"><head>^/^-<script language="RED">^/^-Red []^/^-print now/time^/^-</script>^/<html>^/```^/To run the script the brackets are needed, but this has nothing to do with Red i suppose?^/^/Ps:^/This is an embedded example in R3 which uses the brackets also^/^/If a script is to be followed by other text unrelated to the script itself, the script must be ^/enclosed with square brackets [ ]:^/```^/Here is some text before the script.^/[^/    REBOL [^/        Title:   "Embedded Example"^/        Date:    8-Nov-1997^/    ]^/    print "done"^/]^/Here is some text after the script.^/```^/Only white space is permitted between the initial bracket and the word REBOL.}
    sent: "2016-08-22T09:16:34.677Z"
    editedAt: "2016-08-22T09:25:52.082Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57babe07b64a3a016f56fda0"
    text: {It worked when I remove the outer brackets:^/^/```^/<script language="RED">^/    Red []^/    print now/time^/</script>^/```^/^/output^/```^/red>> do %file.txt^/11:54:28^/== </script>^/```}
    sent: "2016-08-22T08:55:35.422Z"
    editedAt: "2016-08-22T08:55:58.909Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57baa1e4b64a3a016f569f82"
    text: {I just found this "This header is used to locate the beginning of Red code when embedded in text, XML or HTML file. Starting it with a capital reduces the risks of wrongly identifying it." So i think it worked at one time, but is broken now. Can someone acknowledge this?}
    sent: "2016-08-22T06:55:32.260Z"
    editedAt: "2016-08-22T06:57:11.173Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57ba9e83cd00bdff6e6b834f"
    text: {Red seems to behave different from rebol in the way it cannot execute^/a script inside other files^/^/for example:^/^/content of test.txt:^/```^/<script language="RED">^/[^/^-Red []^/^-print now/time^/]^/</script>^/```^/When doing: ^/```^/do %test.txt ^/== </script>^/```^/No time displayed^/^/The question is:^/ ^/Will embedded scripting work at a distant time or should it work already?}
    sent: "2016-08-22T06:41:07.712Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57b230f67ce08cec69dc355e"
    text: {At some point I'll do a Red port of my Rebol 0MQ bindings. Glad you got Kaj's working in the meantime.}
    sent: "2016-08-15T21:15:34.600Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57b19b58f418d7a1682d41a6"
    text: {Ups, maybe one of the only pages, I didn't check - even if so obvious. Thanks again. :thumbsup:  }
    sent: "2016-08-15T10:37:12.564Z"
    v: 1
    author: "57ad896540f3a6eec05f1a40"
) #(
    id: "57b19aaeba833d475b5d82b8"
    text: {[This](http://www.red-lang.org/p/contributions.html) maybe? :)}
    sent: "2016-08-15T10:34:22.648Z"
    editedAt: "2016-08-15T10:35:16.329Z"
    v: 2
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "57b19a8623f0cacc34e74096"
    text: "Did I miss a link somewhere?"
    sent: "2016-08-15T10:33:42.758Z"
    v: 1
    author: "57ad896540f3a6eec05f1a40"
) #(
    id: "57b19a755d9880ce34e13b65"
    text: "Thank you, that's what I was searching for. :-)"
    sent: "2016-08-15T10:33:25.213Z"
    v: 1
    author: "57ad896540f3a6eec05f1a40"
) #(
    id: "57b19a41bc5c9ca66896cc45"
    text: {[This](http://red.esperconsultancy.nl/Red-common/dir?ci=tip) works for me ...}
    sent: "2016-08-15T10:32:33.436Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "57b17b39a00c6adb45e76927"
    text: {Hi, does anybody know if Kaj de Vos is reading/using one of these chat rooms. I'm trying to use his ZeroMQ bindings, but from the red files one can get from his website are missing at least two includes (#include %../common/common.reds and common.red), which aren't in his fossil repository, but seamingly in another one which is not accessible/seeable. Maybe somebody else has a complete set of his bindings?}
    sent: "2016-08-15T08:20:09.443Z"
    v: 1
    author: "57ad896540f3a6eec05f1a40"
) #(
    id: "57ae486e4073ee634d25b497"
    text: "oki"
    sent: "2016-08-12T22:06:38.094Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae4815418e6fc44cfa6896"
    text: {@SteeveGit problem with gitter, this room is for red/help, has no associated repo}
    sent: "2016-08-12T22:05:09.009Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ae4768aee33d7241e926a0"
    text: "https://github.com/red/red/issues/1642"
    sent: "2016-08-12T22:02:16.806Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae4750aee33d7241e92655"
    text: {Git does not always succeed in suppplying the right link url, so you would have to look for the ticket explicitly among the closed issues, instead of following the link.}
    sent: "2016-08-12T22:01:52.755Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57ae46be6cd7d05c37c2584c"
    text: {@meijeru I could not find the ticket #1642 > 404 File not found}
    sent: "2016-08-12T21:59:26.653Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae469546a301fa5a4a8ef7"
    text: "Definitely."
    sent: "2016-08-12T21:58:45.108Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae4685a00c6adb45e214c8"
    text: {Great. Thanks. Saves Nenad having to do one more thing. Every little bit helps.}
    sent: "2016-08-12T21:58:29.177Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae4663aee33d7241e92442"
    text: "There. @meijeru took care of it."
    sent: "2016-08-12T21:57:55.166Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae462246a301fa5a4a8e3d"
    text: "Can you delete the ticket?"
    sent: "2016-08-12T21:56:50.368Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae460ba00c6adb45e2140c"
    text: {Oh, no! Lol. I did a quick search but obviously missed your ticket. Oh, well. It can just be refused again.}
    sent: "2016-08-12T21:56:27.157Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae45d0625cb3d84542558d"
    text: {^/@steevegit @jeffmaner I already did put a tcket for 1. as float! but it was refused by Doc. See #1642}
    sent: "2016-08-12T21:55:28.481Z"
    editedAt: "2016-08-12T21:56:16.631Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57ae3a2d625cb3d845423ac0"
    text: "Haha!"
    sent: "2016-08-12T21:05:49.893Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae3a14a00c6adb45e1f59e"
    text: "Leave me notes. ;^^)"
    sent: "2016-08-12T21:05:24.327Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae39f446a301fa5a4a7153"
    text: {Lol! I know that feeling. Luckily smarter and more clever programmers in most of the languages I have studied have forged ahead before I tried, and they left good notes to inspire the lesser mortals such as I.}
    sent: "2016-08-12T21:04:52.731Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae3992ae0554d04c93d1f2"
    text: "My brain started melting after about 24 I think."
    sent: "2016-08-12T21:03:14.053Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae3881ae0554d04c93cdf8"
    text: {@greggirwin It is really fun. And it's a great way to explore new programming languages, paradigms, etc. I need to stick with exploring one language a little longer so I can get past the first 50 or so problems. Lol. I just keep going over the same problems. But it's fun. So it's worth it. I may explore past Problem 24 using Red.}
    sent: "2016-08-12T20:58:41.601Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae37d9364ad7fc5acec1f5"
    text: {@jeffmaner, I did some Project Euler bits in Rebol almost 10 years ago. Fun stuff.}
    sent: "2016-08-12T20:55:53.298Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae273b364ad7fc5ace99c8"
    text: "Interesting. I may do that."
    sent: "2016-08-12T19:44:59.693Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae27064073ee634d25b35a"
    text: {As a side note. I think you're right when you expect **1.** to be loaded as a float! You can put a Ticket.}
    sent: "2016-08-12T19:44:06.907Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae265a625cb3d845420934"
    text: "Nice. Lol. Sorry. I shall carry on. Thanks again!"
    sent: "2016-08-12T19:41:14.633Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae26229aba41a43d3e53af"
    text: "Easy to test in the console."
    sent: "2016-08-12T19:40:18.619Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae25faae0554d04c93a11f"
    text: {Yeah, when you said to remove it, I realized that it's only there to coerce `m` to `float!`. So in Rebol it was `1.`--is that not the case in Red? It needs to be `1.0`?}
    sent: "2016-08-12T19:39:38.041Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae25aa46a301fa5a4a3cf7"
    text: "Wow. That fixed it. Thank you!"
    sent: "2016-08-12T19:38:18.406Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ae253d9aba41a43d3e53a5"
    text: {> n [integer! ~~decimal!~~ float!] "Natural number to factor."^/^/decimal! does not exist as a type.^/> if ~~1. *~~ m * m > n [   ^/^/Use **1.0** instead of **1.** ,In fact you don't need it at all.}
    sent: "2016-08-12T19:36:29.774Z"
    editedAt: "2016-08-12T19:38:26.245Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
)#(
    id: "57ae216446a301fa5a4a31dc"
    text: {I'm encountering puzzling errors trying to run Rebol scripts at the Red Console.^/```^/*** Access Error: invalid UTF-8 encoding: #{D7323020}^/*** Where: read^/```^/My script files are Latin-1. I'm not sure how Red Console is finding a UTF-8 encoding.^/^/Digging into the scripts, I finally found a different error I thought I could comprehend.^/```^/*** Syntax Error: invalid integer! at "1. * m * m"^/*** Where: do^/```^/Investigating this error, I discovered that my Rebol `decimal!` type annotation needed to become `float!`. I also thought that perhaps Red was confused by mixing `integer!` and `float!`, so I appended a decimal to all the `integer!` literals in the function. But none of my efforts seem to address the error.^/^/Here's the code [file](https://github.com/jeffmaner/RebolProjectEuler/blob/master/prime-factors.r) that raises the latter error.^/^/I'm running this at the Red Console:^/```^/red>> do load %prime-factors.r^/```^/^/Ideas?}
    sent: "2016-08-12T19:20:04.018Z"
    v: 1
    author: "57ae1b8e40f3a6eec05f2e30"
) #(
    id: "57ac686aff82b9fc7e750690"
    text: "Thx!^/"
    sent: "2016-08-11T11:58:34.484Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ac684f613cc1803679d7a5"
    text: {From VID, `radio off`, from regular code, `face/data: off`.}
    sent: "2016-08-11T11:58:07.942Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ac67ddf7f11a7936b57093"
    text: "@dockimbel twice^/"
    sent: "2016-08-11T11:56:13.463Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ac649446610f173951c05d"
    text: {@planetsizecpu `face/rate: none` will stop the timer. For the radio button, are you asking how to do it from VID or from regular Red code?}
    sent: "2016-08-11T11:42:12.299Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ac6351613cc1803679cb10"
    text: "@planetsizecpu No,something I use sometimes"
    sent: "2016-08-11T11:36:49.092Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ac61a216b0696856ac6d21"
    text: {@dockimbel  "rate" & "on-time" what a powerful tool! I used  area/actors: ""  to stop  "on-time" code excution as I could not find other way on docs,  I guess there are some planed.^/Other question is how to default to down some of radio buttons?^/}
    sent: "2016-08-11T11:29:38.070Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ac5e78f7f11a7936b55659"
    text: {@Rebol2Red There is a known issue for that case, see the bugtracker.}
    sent: "2016-08-11T11:16:08.215Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ac552f16b0696856ac4dd4"
    text: {Is wrap supposed to work in an area?  If so what is the syntax?^/```^/view [area bold "boldtext"]  ; this works^/view [area wrap "this is a very long text which does not fit into the area^/ of this widget bla.. bla... bla..."]  ; seems to do nothing^/```}
    sent: "2016-08-11T10:36:31.106Z"
    editedAt: "2016-08-11T10:42:23.311Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57ac51a916b0696856ac4462"
    text: {@geekyI I found it useful :clap:   Are you involved in this project?}
    sent: "2016-08-11T10:21:29.785Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ac4df9ae838f6f5696bcee"
    text: {@planetsizecpu cool! Next step.. https://xkpasswd.net/s/}
    sent: "2016-08-11T10:05:45.330Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ac314d46610f17395144fe"
    text: {With red I saved at least some two or three hours of development only in asynchronous running of generator!  ;)^/}
    sent: "2016-08-11T08:03:25.954Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ac30d1bc688a13390e8659"
    text: {@geekyI These is the otp red exe script at this moment:^/https://dl.dropboxusercontent.com/u/35032037/otp.exe^/}
    sent: "2016-08-11T08:01:21.989Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ac2f5b16b0696856abefcd"
    text: {@qtxie Thx! and good job with development, much encouragement!}
    sent: "2016-08-11T07:55:07.475Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ac2ec65288c40a1dcc1512"
    text: {@planetsizecpu Use `-t Windows` or `-t WindowsXP` for compiling to hide the console.}
    sent: "2016-08-11T07:52:38.004Z"
    editedAt: "2016-08-11T07:53:26.906Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57ac2cb0ae838f6f56966dc0"
    text: "(untranslated sorry)"
    sent: "2016-08-11T07:43:44.174Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ac2c23ae838f6f56966cbd"
    text: {@dockimbel Thx I has compiled as we wanted. Now I don't remeber a clue to hide console while runing the exe script, could you tell me?^/@geekyI I just want to learn red, as I did on java in the past, I think one easy way is to learn writing programs that do string management. The script I am building is just a One Time Pad generator to create one time pads, that is not so much useful today :smile: ^/You can found the old (and some buggy) java version here: https://dl.dropboxusercontent.com/u/35032037/otp.jar^/^/}
    sent: "2016-08-11T07:41:23.722Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ab77bcbc688a13390cffc7"
    text: {:point_up: [August 9, 2016 9:16 PM](https://gitter.im/red/help?at=57aa01dbff82b9fc7e6f37fa) @planetsizecpu cool, what are you building?}
    sent: "2016-08-10T18:51:40.844Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ab612fff82b9fc7e72b0ba"
    text: "Thx, I'll test it tomorrow ;)"
    sent: "2016-08-10T17:15:27.094Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ab50c646610f17394f3c5b"
    text: "*...a simpler solution...*"
    sent: "2016-08-10T16:05:26.748Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ab4c3616b0696856a9d303"
    text: {@planetsizecpu Ok, I get it now, thanks. Replace `do` by `#include` in order for the compiler to be able to process it. You can use a `either system/state/interpreted? [do %... ][ #include ... ]` pattern to make it work for both the compiler and interpreter. The work for having a simpler [solution](https://github.com/red/red/issues/1601) is not yet finished.}
    sent: "2016-08-10T15:45:58.039Z"
    editedAt: "2016-08-10T15:46:38.505Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ab3bbdae838f6f569427b9"
    text: "that is in otplib.red"
    sent: "2016-08-10T14:35:41.078Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ab3b8bae838f6f56942704"
    text: {@dockimbel in source file there is a do %otplib.red that loads code as your mysql-protocol.r did, but on compile I get undefined word otpGet}
    sent: "2016-08-10T14:34:51.343Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ab2d5eff82b9fc7e720eb5"
    text: {@Phryxe Facets are "available" to all faces, it's up to each face type to use it or not.}
    sent: "2016-08-10T13:34:22.308Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ab2d1dd7087a017fa8d44a"
    text: {@planetsizecpu *how I do to compile all togther?* Define `all`, I don't get what you are trying to do.}
    sent: "2016-08-10T13:33:17.946Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ab17dff7f11a7936b22ec4"
    text: {Regarding the list of available facets in View documentation. I first thought the facets where available for all faces, but I now think that might be wrong ...}
    sent: "2016-08-10T12:02:39.701Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "57ab09c816b0696856a91983"
    text: {@dockimbel now that works, I would like compile to exe, but I get that function included on library file gives:^/^/   Compilation Error: undefined word otpGet  ^/^/I did a try to compile library as -dlib but I get:^/  ^/  *** Compilation Error: missing #export directive for library production^/^/And cannot compile, how I do to compile all togther?^/^/ }
    sent: "2016-08-10T11:02:32.181Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57ab00e3f7f11a7936b1f55a"
    text: "It's available now."
    sent: "2016-08-10T10:24:35.025Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ab008746610f17394e5874"
    text: "Ok! "
    sent: "2016-08-10T10:23:03.883Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aafecdf7f11a7936b1ef11"
    text: {@planetsizecpu Let me check that... A commit was missing, a new build is on the way, give it a new try when it's ready.}
    sent: "2016-08-10T10:15:41.774Z"
    editedAt: "2016-08-10T10:22:02.871Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57aafdf1f7f11a7936b1ed42"
    text: {@planetsizecpu Thanks for your support, @qtxie has done a good job on that one.}
    sent: "2016-08-10T10:12:01.332Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57aafddc46610f17394e5093"
    text: "it is red-10aug16-7970b41.exe"
    sent: "2016-08-10T10:11:40.168Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aafdb3f7f11a7936b1ecaf"
    text: {@dockimbel  I have downloaded it but on compile time I get: ** Press enter to quit... }
    sent: "2016-08-10T10:10:59.442Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aafc40ae838f6f56937a91"
    text: {@dockimbel  Thx! That is 1st class development, much encouragement!}
    sent: "2016-08-10T10:04:48.477Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aaf15abc688a13390b7f85"
    text: {@planetsizecpu I've just merged a PR which is fixing that font updating issue (among other font issues).}
    sent: "2016-08-10T09:18:18.329Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57aaed37613cc18036762cdb"
    text: {@dockimbel  that works fine:^/^/radio "Fixedsys" on-down [Area1/Font/Name: "Fixedsys"]^/^/But still does not affect screen, same as size^/^/Thx^/}
    sent: "2016-08-10T09:00:39.486Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aaebc4ae838f6f56934b85"
    text: "thx^/"
    sent: "2016-08-10T08:54:28.026Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aaeb9dd7087a017fa81c19"
    text: {@planetsizecpu `click` event only works on buttons, use `down` event handler for other widgets.}
    sent: "2016-08-10T08:53:49.963Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57aaeb62613cc180367628dc"
    text: {@dockimbel  Internal font refresh also affects font name, I have tested:^/^/     radio "Terminal" on-click [Area1/Font/Name: "Terminal"] ^/^/and it does nothing on screen, I have also noticed that radio buttons are not triggering "react"^/^/}
    sent: "2016-08-10T08:52:50.271Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aae9f816b0696856a8c889"
    text: "@dockimbel Thanks ..."
    sent: "2016-08-10T08:46:48.978Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "57aae9af613cc180367624d1"
    text: {@Phryxe Have a look [here](https://github.com/red/red/blob/master/tests/view-test.red#L128).}
    sent: "2016-08-10T08:45:35.523Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57aae97546610f17394e186c"
    text: "Is there a minimal menu example somewhere?"
    sent: "2016-08-10T08:44:37.313Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "57aa046716b0696856a6b9a6"
    text: {There is an other with data^/When you move size slider, area font size should change. Nothing is changed on screen but  Area1/Font/Size really change their value to the slider value^/}
    sent: "2016-08-09T16:27:19.099Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aa03c7ae838f6f56913505"
    text: {[![blob](https://files.gitter.im/red/help/btr7/thumb/blob.png)](https://files.gitter.im/red/help/btr7/blob)}
    sent: "2016-08-09T16:24:39.024Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aa01f6ae838f6f56912fa5"
    text: {[![blob](https://files.gitter.im/red/help/4qFI/thumb/blob.png)](https://files.gitter.im/red/help/4qFI/blob)}
    sent: "2016-08-09T16:16:54.924Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57aa01dbff82b9fc7e6f37fa"
    text: "Im testing, there is a shot"
    sent: "2016-08-09T16:16:27.944Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a9f92816b0696856a69535"
    text: {@planetsizecpu Indeed, something is wrong there, it should work fine. I guess some code is missing internally to refresh the font in the `area` widget.}
    sent: "2016-08-09T15:39:20.243Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a9f747ae838f6f569110e7"
    text: "@endo64 (sorry)^/"
    sent: "2016-08-09T15:31:19.886Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a9f70b16b0696856a68f15"
    text: {Yes, I have done that: area 410x410 blue font [ name: "Consolas"  size: 12  color: white ]^/But have to change size dinamically while script is running so:          siz: slider       react [Area1/Font/Size: (to integer! siz/data * 10)]  does not change font size^/}
    sent: "2016-08-09T15:30:19.718Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a9f6d7ccadff3c433f75c1"
    text: {IIRC, Clipboard support is implemented (copy and paste) in the console code ,but is localized. Would be good  to externalize it in global routines. Any volunteer?}
    sent: "2016-08-09T15:29:27.728Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
)#(
    id: "57a9f58eae838f6f56910ba2"
    text: {[![blob](https://files.gitter.im/red/help/F4G8/thumb/blob.png)](https://files.gitter.im/red/help/F4G8/blob)}
    sent: "2016-08-09T15:23:58.491Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a9f58846610f17394bea8b"
    text: "Did you try `font-size` in VID?^/"
    sent: "2016-08-09T15:23:52.452Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a9f54df7f11a7936af7404"
    text: {Clipboard support is not ready yet. It will come after port implementation.}
    sent: "2016-08-09T15:22:53.232Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a9cf71ae838f6f5690946a"
    text: {There is another question related. How can I copy text from this area to clipboard?}
    sent: "2016-08-09T12:41:21.143Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a9ced4bc688a133908bc2d"
    text: {Hi again. How can I modify font size of a given area field?  I did some like "Area1/Font/Size: 12" but nothing occurs.}
    sent: "2016-08-09T12:38:44.430Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a98b518689a3f328f1b036"
    text: {Dont worry, we will not forget since it's in the desription of the function.^/> red>> ? random^/USAGE:^/    random value /seed /secure /only^/DESCRIPTION:^/     Returns a random value of the same datatype; or shuffles series. ^/     random is of type: action!^/ARGUMENTS:^/     value => Maximum value of result (modified when series).^/REFINEMENTS:^/     /seed => Restart or randomize.^/     /secure => **TBD:** Returns a cryptographically secure random number.^/     /only => Pick a random value from a series.^/}
    sent: "2016-08-09T07:50:41.021Z"
    editedAt: "2016-08-09T07:50:55.532Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a98adbf7f11a7936ae5edb"
    text: {@planetsizecpu `random/secure` *is not* implemented yet.}
    sent: "2016-08-09T07:48:43.091Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a98a9fff82b9fc7e6df8e2"
    text: {Ok, I would make some research on that, but keep in mind random/secure is returning same predictable values as seed is not provided by user^/}
    sent: "2016-08-09T07:47:43.323Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a985d6613cc1803672c42e"
    text: {@planetsizecpu `random/secure` is not supported yet. For sources of randomness, you can google about that. Current time is the most used one, others can be: capturing random mouse movements or keys pressed, reading /dev/random on Unix machines for higher-quality randomness (relying on various hardware sources), querying a true random generator online, etc...}
    sent: "2016-08-09T07:27:18.325Z"
    editedAt: "2016-08-09T07:32:06.866Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a98403ff82b9fc7e6dea7c"
    text: {So, for example random/secure by default gives the same result as I tested what is not you expect from secure source. ^/What other sources are available to get seed?^/}
    sent: "2016-08-09T07:19:31.805Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a982f0ae838f6f568fd542"
    text: {@endo64 There's a bug when seeding with time! values indeed, we are fixing it.}
    sent: "2016-08-09T07:14:56.935Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a982cff7f11a7936ae4892"
    text: {@planetsizecpu The seed in Red's [PRNG](https://en.wikipedia.org/wiki/Pseudorandom_number_generator) is always the same at start, as seeding can potentially take significant time (depending on the source randomness quality) and the user should be the one choosing which source he wants to use. Moreover, as Steeve pointed out, it allows reproductible behavior by default, which can be very useful for debugging purposes.}
    sent: "2016-08-09T07:14:23.690Z"
    editedAt: "2016-08-09T07:15:59.033Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a982110f016bdd6d67a8ef"
    text: {@planetsizecpu it's important that the seed is not initialized by default. Some apps need it, especially if you perform tests.}
    sent: "2016-08-09T07:11:13.209Z"
    editedAt: "2016-08-09T07:13:42.270Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a98189ae838f6f568fd054"
    text: {@SteeveGit I understand what you meant, what I say is that it appears the default seed is not been initialized at start time or is to the same value^/}
    sent: "2016-08-09T07:08:57.700Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a98188ff82b9fc7e6de2f2"
    text: {without `form` it doesn't raise an error but doesn't change the seed value hence generates same numbers.}
    sent: "2016-08-09T07:08:56.689Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a9815bae838f6f568fcfef"
    text: {Ah I didn't know that! Thanks! The only difference between Red and Rebol, Red requires `form`ing the seed value.^/`random/seed now/time loop 10 [print random 100]`}
    sent: "2016-08-09T07:08:11.816Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a98100ccadff3c433f6e36"
    text: {@planetsizecpu Again, it's the expected result if you don't provide a new seed yourself}
    sent: "2016-08-09T07:06:40.160Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a980baccadff3c433f6e34"
    text: "now/time/precise is working"
    sent: "2016-08-09T07:05:30.448Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a980b7ff82b9fc7e6de105"
    text: {what is strange is that I started red-console at different moments and get the same randomness^/}
    sent: "2016-08-09T07:05:27.210Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a9809af7f11a7936ae433c"
    text: "Sure."
    sent: "2016-08-09T07:04:58.665Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a98086ccadff3c433f6e32"
    text: {Not specific to Rebol or Red, Random generators work like this  in various languages.}
    sent: "2016-08-09T07:04:38.278Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a9807b613cc1803672b653"
    text: {Normally `now/precise` will be more useful but it is not yet implemented.}
    sent: "2016-08-09T07:04:27.170Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a9804116b0696856a55edf"
    text: {That behavior is same on Rebol too. Same `seed` always generates same numbers in same order. }
    sent: "2016-08-09T07:03:29.541Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a980050f016bdd6d67a8e7"
    text: "Seems legit, what is the problem ? "
    sent: "2016-08-09T07:02:29.682Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a97ffcae838f6f568fcd0b"
    text: {@planetsizecpu Try to put `random/seed form now/time` in the beginning of your script.}
    sent: "2016-08-09T07:02:20.960Z"
    editedAt: "2016-08-09T07:02:57.190Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a97f9c46610f17394abcad"
    text: "what kind of randomness is on that image?^/"
    sent: "2016-08-09T07:00:44.749Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a97bdc8689a3f328f1afa2"
    text: "@planetsizecpu Why ?"
    sent: "2016-08-09T06:44:44.213Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a979fabc688a133907f46f"
    text: "Is random working fine?^/"
    sent: "2016-08-09T06:36:42.862Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a979bdd7087a017fa49d20"
    text: {[![blob](https://files.gitter.im/red/help/jeTY/thumb/blob.png)](https://files.gitter.im/red/help/jeTY/blob)}
    sent: "2016-08-09T06:35:41.714Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a96746ae838f6f568fa096"
    text: {@x8x for iterative development? :smile: do you do i somehow right now or are you trying to figure out a way?}
    sent: "2016-08-09T05:16:54.817Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a92c1d613cc18036721fce"
    text: {What's the best way to self relaunch a compiled app? (on *nix platforms)}
    sent: "2016-08-09T01:04:29.757Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a8d38616b0696856a3f51c"
    text: "@qtxie That seems to have worked. "
    sent: "2016-08-08T18:46:30.408Z"
    v: 1
    author: "57a84b6c40f3a6eec05e6b9a"
) #(
    id: "57a89b32613cc1803670a143"
    text: {@radebrecht_twitter Change last line to this: ^/```^/res: write/info https://api.github.com/user compose/deep [ GET [ Authorization: (authinfo) ] ]^/```}
    sent: "2016-08-08T14:46:10.785Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57a877adfb162b752ca7f5cb"
    text: {Here's a bit of example code I use t produce the crash:^/```^/user: "your username"^/token: "your private access token"^/authinfo: rejoin [ "Basic " enbase rejoin [ user ":" token ]]^/res: write/info https://api.github.com/user [ GET [ Authorization: authinfo ] ]^/```^/}
    sent: "2016-08-08T12:14:37.257Z"
    v: 1
    author: "57a84b6c40f3a6eec05e6b9a"
) #(
    id: "57a86b26978997001e9ff3cd"
    text: "Cool cool. No hurry, I'm having fun."
    sent: "2016-08-08T11:21:10.997Z"
    v: 1
    author: "57a84b6c40f3a6eec05e6b9a"
) #(
    id: "57a86b0b2f03cf8749d0c3b3"
    text: {@qtxie should have a look at that regression quickly.}
    sent: "2016-08-08T11:20:43.022Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a86ae448422f8b4978d0fc"
    text: {ah yes: ```res: write/info https://api.github.com [ GET [ ] ] ``` produces a response. I'm halfway there, hopefully ;)}
    sent: "2016-08-08T11:20:04.943Z"
    v: 1
    author: "57a84b6c40f3a6eec05e6b9a"
) #(
    id: "57a86a86d097eb6b2ccefa66"
    text: {slightly modified version ```res: write/info https://api.github.com [ GET ] ``` crashes the red console}
    sent: "2016-08-08T11:18:30.094Z"
    v: 1
    author: "57a84b6c40f3a6eec05e6b9a"
) #(
    id: "57a86a55d097eb6b2ccefa0f"
    text: {@dockimbel ``` res: write/info https://api.github.com [ ]  ```}
    sent: "2016-08-08T11:17:41.820Z"
    v: 1
    author: "57a84b6c40f3a6eec05e6b9a"
) #(
    id: "57a8699cfb162b752ca7d23a"
    text: {I can see a regression there, so I've opened a ticket: https://github.com/red/red/issues/2162}
    sent: "2016-08-08T11:14:36.063Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a866772f03cf8749d0b64d"
    text: {@radebrecht_twitter Can you show the code you're using?}
    sent: "2016-08-08T11:01:11.475Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a865b8483751d50f33284d"
    text: "using red-08aug16-c48c359.exe"
    sent: "2016-08-08T10:58:00.330Z"
    v: 1
    author: "57a84b6c40f3a6eec05e6b9a"
) #(
    id: "57a865a748422f8b4978c1e4"
    text: {I get a ^/```^/*** Internal Error: reserved for future use (or not yet implemented)^/*** Where: write^/```}
    sent: "2016-08-08T10:57:43.274Z"
    v: 1
    author: "57a84b6c40f3a6eec05e6b9a"
) #(
    id: "57a854c1fb162b752ca7a382"
    text: {Currently the only way to achieve it is using `write`:^/```lisp^/response: write/info url [GET [header1: value1 header2: value2 ...]]^/```}
    sent: "2016-08-08T09:45:37.241Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a84c54857442dc0f5cc571"
    text: {I want to access the github issue api from red. Something like this:  `curl -u username:token https://api.github.com/user`. How can I specify https header infos for `read`?}
    sent: "2016-08-08T09:09:40.182Z"
    v: 1
    author: "57a84b6c40f3a6eec05e6b9a"
) #(
    id: "57a8417e483751d50f32d45e"
    text: {@planetsizecpu `a: string!` -> `a: make string! 10`}
    sent: "2016-08-08T08:23:26.876Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a83f25857442dc0f5ca5a3"
    text: {Types are first class values in Red/Rebol. See [Datatypes of Values](http://www.rebol.com/docs/core23/rebolcore-4.html#section-3.2).}
    sent: "2016-08-08T08:13:25.068Z"
    editedAt: "2016-08-08T08:15:28.770Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a83f21d097eb6b2cce926b"
    text: "Thanks a lot ;)^/"
    sent: "2016-08-08T08:13:21.456Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a83efafb162b752ca76d54"
    text: {A datatype is not a series (like blocks or strings), so you cannot `append` to it.}
    sent: "2016-08-08T08:12:42.345Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a83ee1857442dc0f5ca500"
    text: {@planetsizecpu This is an empty string: `""`, this is a datatype: `string!`:^/```lisp^/red>> type? string!^/== datatype!^/red>> type? "A"^/== string!^/```}
    sent: "2016-08-08T08:12:17.713Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "57a83dd7483751d50f32cbef"
    text: {As I understand, you cannot append to an empty string! or is there an issue?^/}
    sent: "2016-08-08T08:07:51.825Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a83c966bf4dff61d3ca9f2"
    text: {Today testing I found that seems an issue: ^/--== Red 0.6.1 ==-- ^/Type HELP for starting information. ^/^/red>> about^/Red 0.6.1 - 8-Aug-2016/9:25:30+2:00^/red>> ^/red>> a: string!^/== string!^/red>> append a "A"^/*** Script Error: append does not allow datatype! for its series argument^/*** Where: append^/red>> ^/red>> ^/red>> b: "B"^/== "B"^/red>> type? b^/== string!^/red>> append b "B"^/== "BB"^/red>> ^/}
    sent: "2016-08-08T08:02:30.701Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a5c65d978997001e9b2ba7"
    text: "Ok, I will test to make sure, thanks^/"
    sent: "2016-08-06T11:13:33.292Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a5c557d097eb6b2cca1c2f"
    text: "@planetsizecpu Not the same, Red is Unicode."
    sent: "2016-08-06T11:09:11.211Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5c51c6bf4dff61d384c2e"
    text: {```to integer! #"A"``` will return ```65```. ```to integer! "A"``` will probably raise a script error. ;-)}
    sent: "2016-08-06T11:08:12.046Z"
    editedAt: "2016-08-06T11:09:25.936Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57a5c4a0483751d50f2e500a"
    text: "That's all I expected"
    sent: "2016-08-06T11:06:08.093Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a5c46a978997001e9b28af"
    text: "Yes"
    sent: "2016-08-06T11:05:14.037Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57a5c43c2f03cf8749cbe015"
    text: {So, to-char(65) would return "A" and to-integer("A") would return 65?}
    sent: "2016-08-06T11:04:28.015Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a5c380978997001e9b273a"
    text: {Yes in principle but not at the detailed level. A Red ```char!``` value is a Unicode Code Point so has a value in the range 0 - 10FFFFFh.}
    sent: "2016-08-06T11:01:20.502Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57a5c1c5fb162b752ca2fae4"
    text: {As I understand there will be   to-char(integer!)  and   to-integer(char!) , that's the same as old basic's functions chr$(int) and asc(char), all together userful for old timer app developers :smile: }
    sent: "2016-08-06T10:53:57.658Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a5c0a3857442dc0f5824a9"
    text: "Thats useful for me, thanks.  "
    sent: "2016-08-06T10:49:07.511Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a5b13bfb162b752ca2df92"
    text: {@planetsizecpu Use `make char!` for converting an integer! to char! (until we get proper `to` support):^/```lisp^/red>> make char! 41^/== #")"^/```}
    sent: "2016-08-06T09:43:23.414Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5adacfb162b752ca2d9e0"
    text: {Thanks all, what I want is the easyest way to do so with an integer value.}
    sent: "2016-08-06T09:28:11.999Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a571c8d097eb6b2cc99cd3"
    text: {We should provide better integer/binary converters in the future.}
    sent: "2016-08-06T05:12:40.723Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a55707978997001e9a80f9"
    text: "That works."
    sent: "2016-08-06T03:18:31.231Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a53b9bd097eb6b2cc94c4f"
    text: {I have:^/```^/  debase/base form 20 16^/;   #{20}^/```}
    sent: "2016-08-06T01:21:31.772Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a53b35fb162b752ca22db9"
    text: "Best way to go from 20 to #{20} ?"
    sent: "2016-08-06T01:19:49.769Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57a4da4e2f03cf8749ca3822"
    text: {@greggirwin LOL, thanks for knowing what I meant.... 41 to decimal^/}
    sent: "2016-08-05T18:26:22.358Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57a4d22c6bf4dff61d3690af"
    text: {```^/red>> to-char 49h^/== #"I"^/```}
    sent: "2016-08-05T17:51:40.135Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d1cc48422f8b49722720"
    text: {```^/red>> form to-char 41^/== ")"^/```^/How to convert  integer 41 to hex ?}
    sent: "2016-08-05T17:50:04.862Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57a4d14dd097eb6b2cc8581e"
    text: "To make it a string, just `form` the result."
    sent: "2016-08-05T17:47:57.760Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d0ea978997001e997337"
    text: "But it looks like you may want to use hex."
    sent: "2016-08-05T17:46:18.248Z"
    editedAt: "2016-08-05T17:46:34.486Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d0c5fb162b752ca14685"
    text: {`to-char: func [i [integer!]][#"^^(00)" + i]`^/}
    sent: "2016-08-05T17:45:41.913Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d03e857442dc0f5667fd"
    text: {@planetsizecpu ^/```^/;;Correction to previous post^/make-chr: function [x [integer!]] [^/    dehex rejoin ["%" (to string! x)]^/    ;; dehex append "%" (to string! x) ;; would work too^/]^/make-chr 49^/== "I"^/```}
    sent: "2016-08-05T17:43:26.135Z"
    editedAt: "2016-08-05T17:45:20.135Z"
    v: 3
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57a4cdbad097eb6b2cc8503b"
    text: "Oh, ok, programmatically generate characters? "
    sent: "2016-08-05T17:32:42.995Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4cd74978997001e9969fc"
    text: {@geekyI @planetsizecpu Didn't think of trying first LOL, it works for me too. However, it returns with the # tag. Which may be what the OP was looking to avoid ???}
    sent: "2016-08-05T17:31:32.973Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57a4cd04d097eb6b2cc84e79"
    text: {```^/red>> #"^^(41)" ^/== #"A"^/```}
    sent: "2016-08-05T17:29:40.817Z"
    editedAt: "2016-08-05T17:30:09.772Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4cce56bf4dff61d368435"
    text: {@planetsizecpu are you saying `#"^^(41)" ` doesn't work for you? Works for me in latest red}
    sent: "2016-08-05T17:29:09.581Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4cc7b483751d50f2c7e02"
    text: {```^/make-chr: function [x [integer!]] [^/^-dehex rejoin ["%" (to string! 41)]^/^-;; dehex append "%" (to string! 41) ;; would work too^/]^/make-chr 41^/^/```}
    sent: "2016-08-05T17:27:23.272Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57a4cb1f978997001e9963da"
    text: {@planetsizecpu would this work for you? `dehex rejoin ["%" (to string! 41)]`  I'm sure there's a better way but being a noob myself this is what I thought of. YAY rejoin !}
    sent: "2016-08-05T17:21:35.340Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57a4c132857442dc0f5640ca"
    text: {@dockimbel  In my way to learn red, I found no way to print or assign ASCII values ^/to char, other from the #"^^(41)" mode. For example #"^^(x)" (where x is^/integer!) gives an error. What is the correct mode to do so, there will^/ve some function, like chr(x) for example? }
    sent: "2016-08-05T16:39:14.324Z"
    v: 1
    author: "557c713515522ed4b3e1de1b"
) #(
    id: "57a30e6347659bfb108daf95"
    text: {@geekyI Good finding, that one is a good Parse doc. Just remember that in Red, splitting is handled by `split` and not by Parse. All the rest of Parse in Rebol2 should work the same in Red.}
    sent: "2016-08-04T09:44:03.061Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1ff311c2bf6621bb89666"
    text: {I used to look at the tutorial you mentioned. Maybe too difficult to me or the differences are too big between r3 and Red. I will look into the differences. Thanks}
    sent: "2016-08-03T14:26:57.201Z"
    editedAt: "2016-08-03T14:29:07.086Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1fdf2e2ff9ec76e5318b8"
    text: {Also, checkout [this tutorial](http://www.codeconscious.com/rebol/parse-tutorial-r3.html) there is similar page in the website for the differences between versions}
    sent: "2016-08-03T14:21:38.092Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a1fd859e85d3e826836bc2"
    text: {@Rebol2Red I found [wikibooks]( https://en.wikibooks.org/wiki/REBOL_Programming/Language_Features/Parse/Parse_expressions) really helpful to understand parse}
    sent: "2016-08-03T14:19:49.239Z"
    editedAt: "2016-08-03T14:21:04.049Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a1dfb41c2bf6621bb841e2"
    text: "Face palms"
    sent: "2016-08-03T12:12:36.763Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1df819e85d3e826831a54"
    text: {@Rebol2Red `to "is"`.}
    sent: "2016-08-03T12:11:45.689Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1de410bd017c16e381a5d"
    text: {Just one last thing about parsing. ^/In regular expressions you can have this "(.) is (.)" (after the dot is an astrix, which doesn't shows up over here)^/How to skip multiple words up to "is" (because i don't know in advance how many to skip)? }
    sent: "2016-08-03T12:06:25.958Z"
    editedAt: "2016-08-03T12:11:34.266Z"
    v: 8
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1d9b90bd017c16e380e22"
    text: {Thanks for making things about parsing much clearer.}
    sent: "2016-08-03T11:47:05.552Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1d881e2ff9ec76e52b6da"
    text: {@Rebol2Red In Parse dialect, the word `|` indicates that an alternative rule is following. Red dialects are using Red syntax, so a word remains a word in all possible dialects.}
    sent: "2016-08-03T11:41:53.314Z"
    editedAt: "2016-08-03T11:42:39.736Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1d83b9e85d3e826830849"
    text: "I thought the meaning of | is or."
    sent: "2016-08-03T11:40:43.845Z"
    editedAt: "2016-08-03T11:41:06.730Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1d7f200663f5b1b4721e7"
    text: {@Rebol2Red You need to put spaces between words, `|` is a word, not a delimiter:^/```lisp^/red>> first [every|any|an|a]^/== every|any|an|a^/red>> type? first [every|any|an|a]^/== word!^/```}
    sent: "2016-08-03T11:39:30.701Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1d7bc1c2bf6621bb82e4c"
    text: {What does it do ? (I thought it would give true when everything is parsed, like the case statement)}
    sent: "2016-08-03T11:38:36.761Z"
    editedAt: "2016-08-03T11:39:11.001Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1d7602c10fb940877b0eb"
    text: "**ANY** doesn't do what you think it's doing."
    sent: "2016-08-03T11:37:04.684Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a1d730c915a0e426b89a9c"
    text: {Phew, Thanks a lot!  I am really bad at parsing. The good thing is i have learned a few things.}
    sent: "2016-08-03T11:36:16.121Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1d6b92c10fb940877b0e0"
    text: {Ok, Instead of a block of words, I converted it to a block of strings with **split**.^/```lisp^/rule: [^/^-["every" | "any" | "an" | "a"] ^/^-skip ^/^-"is" ["a" | "an"] ^/^-skip^/ ] ^/print parse-trace split "every man is a human" " " rule ^/print parse-trace split "every man ist a human" " " rule ^/```}
    sent: "2016-08-03T11:34:17.328Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a1d4d6c915a0e426b894ab"
    text: {I am stuck. Must i make blocks of all the strings? Also in the rule? Use literal words?^/```^/rule: [any [[every|any|an|a] skip [is] [a|an] skip] end] ^/print parse-trace [every man is a human] rule ; must give true^/print parse-trace [every man ist a human] rule ; must give false because of "ist"^/```^/This does not work^/ps: I have looked at a lot  of parse examples on the internet but doesn't find anything like what i want do.}
    sent: "2016-08-03T11:26:14.290Z"
    editedAt: "2016-08-03T11:32:53.817Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1d3ba2c10fb940877b0d3"
    text: {Currently, You are parsing a string! not a block of word!.^/Switching to a block of words, makes writing the rules simpler in your case.}
    sent: "2016-08-03T11:21:30.067Z"
    editedAt: "2016-08-03T11:21:43.739Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a1d3351c2bf6621bb82366"
    text: {Thanks, Whow, I have to look into the results of parse-trace. ^/How can i skip words?}
    sent: "2016-08-03T11:19:17.082Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1d2a12c10fb940877b0c3"
    text: "replace **parse** by **parse-trace**. That's all."
    sent: "2016-08-03T11:16:49.024Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
)#(
    id: "57a1d2746085a4026515e894"
    text: {**to end** will always validate the whole rule. Use **end** instead}
    sent: "2016-08-03T11:16:04.331Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a1d27047659bfb108acede"
    text: "How to use parse-trace?"
    sent: "2016-08-03T11:16:00.049Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a1d228c2cebb0412466cf6"
    text: {Among other misses. **Skip** only skip one character,not a word.}
    sent: "2016-08-03T11:14:48.877Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a1d1e52c10fb940877b0b1"
    text: {@Rebol2Red Use **parse-trace** to debug your code.}
    sent: "2016-08-03T11:13:41.591Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57a1d00c9e85d3e82682f32b"
    text: {Can someone help me to parse this correct?^/```^/rule: [any ["every"|"any"|"an"|"a" skip "is" "a|an" skip] to end] ^/print parse "every man is a human" rule ; must give true^/print parse "every man ist a human" rule ; must give false, because of "ist" (but the result is true)^/; The rule must be wrong because i get 2 times true^/```}
    sent: "2016-08-03T11:05:48.800Z"
    editedAt: "2016-08-03T11:10:22.569Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57a0c8e70bd017c16e35a571"
    text: {It makes sense, and we should be able to do advanced things on our own with object ownership and dynamic reaction linking. }
    sent: "2016-08-02T16:23:03.403Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a01ec4e2ff9ec76e4ebe28"
    text: {@greggirwin Faces cannot share the same series for fields like `/text` and be able to auto-update, the current ownership system allows only one owner per series. There's a ticket about that already (posted by Rebolek). We'll see in next releases how to improve that.}
    sent: "2016-08-02T04:17:08.361Z"
    editedAt: "2016-08-02T04:19:14.197Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579fea4e47659bfb1086b79f"
    text: {Interesting. If multiple object words refer to a series, the last one set takes ownership? (I think that's what https://github.com/red/red/blob/master/modules/view/view.red#L293 does)}
    sent: "2016-08-02T00:33:18.563Z"
    editedAt: "2016-08-02T00:33:33.945Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fe1389e85d3e8267e9aca"
    text: {To work with the ownership system is a bit tricky.  ;-) As for why f1 change twice (should be just once), check [this code](https://github.com/red/red/blob/master/modules/view/view.red#L290) for detail. ;-)}
    sent: "2016-08-01T23:54:32.246Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "579fe0120bd017c16e33a372"
    text: {@SoleSoul This is caused by when you assign `f1/text` to `f2/text`, the **owner** of the string `text` changed from `f1` to `f2`. When you reverse the `text` later, the ownership system will notify `f2` instead `f1`,  so no update in f1.}
    sent: "2016-08-01T23:49:38.897Z"
    editedAt: "2016-08-01T23:50:10.247Z"
    v: 3
    author: "55659cf315522ed4b3e10064"
) #(
    id: "579fcb4e836d2d02115bc8e9"
    text: {I'm going to sleep now. Thanks for checking. I'll login again in the morning.}
    sent: "2016-08-01T22:21:02.390Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "579fca2e47659bfb108680d5"
    text: ":^^)"
    sent: "2016-08-01T22:16:14.021Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fca2300663f5b1b42b5f3"
    text: {One thing is for sure, I don't suspect we'll find a doc which says that reverse should be tracked up to two times :)}
    sent: "2016-08-01T22:16:03.842Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "579fc9e60bd017c16e337abb"
    text: "The blog entry says it should though."
    sent: "2016-08-01T22:15:02.370Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fc98e1c2bf6621bb3b4c9"
    text: {The object ownership system doesn't track `reverse`?}
    sent: "2016-08-01T22:13:34.836Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fc986e2ff9ec76e4e2aeb"
    text: {Thanks! I hope someone will notice the question and tell me if it's a fruit of my noobness in Red or something real.}
    sent: "2016-08-01T22:13:26.468Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "579fc9460bd017c16e3379a2"
    text: "I don't know."
    sent: "2016-08-01T22:12:22.928Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fc946c915a0e426b433bc"
    text: {Also, it's updating the f2 face through its /text and this works.}
    sent: "2016-08-01T22:12:22.149Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "579fc93547659bfb10867ebf"
    text: {If you manually force an update of f1/data it works. Someone on Team Red will have to say what the expected behavior is.}
    sent: "2016-08-01T22:12:05.465Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fc91900663f5b1b42b3b7"
    text: "Why does it change twice then?"
    sent: "2016-08-01T22:11:37.505Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "579fc8c69e85d3e8267e6f30"
    text: {It looks like f1/text changes each time, but f1/data does not, so the face doesn't update.}
    sent: "2016-08-01T22:10:14.771Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fc80900663f5b1b42b166"
    text: "Ah, I see now. I was just looking at 'f2."
    sent: "2016-08-01T22:07:05.210Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fc8030bd017c16e3376cb"
    text: {Yeah, the initial intention was to copy but I forgot to copy and saw this puzzling behavior}
    sent: "2016-08-01T22:06:59.342Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "579fc7e5836d2d02115bc267"
    text: {But do keep in mind that `reverse` modifies the series, so you may want to copy.}
    sent: "2016-08-01T22:06:29.232Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fc7d8836d2d02115bc253"
    text: {I downloaded the automatic build an hour ago. I just pasted this code snippet into Red's GUI console. f1 changes twice, f2 changes repeatedly.}
    sent: "2016-08-01T22:06:16.884Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "579fc7961c2bf6621bb3b0fa"
    text: "It works as expected here. Perhaps a recent fix?"
    sent: "2016-08-01T22:05:10.503Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579fc0b500663f5b1b42a02a"
    text: {```^/view [^/^-f1: field^/^-return^/^-button "Reverse!" [f2/text: reverse f1/text]^/^-return^/^-f2: field^/]^/```}
    sent: "2016-08-01T21:35:49.925Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "579fc0a01c2bf6621bb39f9e"
    text: {Hi, a small question. Why does f1/text change only twice when repeatedly clicking on  the button in this example? (write something in f1)}
    sent: "2016-08-01T21:35:28.576Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "579d8dee9684847b373fa6b9"
    text: {@dockimbel LOL, yeah I figured it out, my mistake I keep using the "Red by Example" site not the console help which is more up to date. (Not saying anything bad about the RBE site, just that console help is more accurate)}
    sent: "2016-07-31T05:34:38.966Z"
    editedAt: "2016-07-31T05:35:31.109Z"
    v: 2
    author: "578849c1c2f0db084a230f54"
) #(
    id: "579d8d4979f7597137552d75"
    text: {@canyonblue77 See their respective help strings. `cos` takes radians, `cosine` takes degrees (by default).}
    sent: "2016-07-31T05:31:53.089Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579d8d0d9684847b373fa584"
    text: "nevermind, got it.... cos N = cosine/radians N"
    sent: "2016-07-31T05:30:53.858Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "579d8c5807d2d2396e2f2bb3"
    text: {```^/;; FYI, maybe this is a bug or, cos <> cosine ??^/red>> cosine 90^/== 0.0^/red>> cos 90^/*** Script Error: cos does not allow integer! for its angle argument^/*** Where: cos^/red>> cos 90.0^/== -0.44807361612917^/red>> ^/```}
    sent: "2016-07-31T05:27:51.995Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "5799d2e48fb4820a466b0c6d"
    text: "I get it. Thanks."
    sent: "2016-07-28T09:39:48.761Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5799d27c7c9324e20e052f43"
    text: {@Rebol2Red `on-key` is a face-local event, it will only work when the face has focus.}
    sent: "2016-07-28T09:38:04.056Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5799d0f993148c6b21e5188c"
    text: "Maybe with on-key?"
    sent: "2016-07-28T09:31:37.598Z"
    editedAt: "2016-07-28T09:32:46.907Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5799d07b7c9324e20e052a76"
    text: ""
    sent: "2016-07-28T09:29:31.810Z"
    editedAt: "2016-07-28T09:31:04.801Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5799d0603383eb62214a31c7"
    text: "@Rebol2Red Same in Red."
    sent: "2016-07-28T09:29:04.088Z"
    editedAt: "2016-07-28T09:30:32.479Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5799cf8f7c9324e20e052828"
    text: {I want a window to dissapear when clicking ok or pressing enter.^/The following code is adapted from rebol2 (which works).^/What's the Red'ish way of doing this?^/```^/key-event: func [face event] [^/^-if event/type = 'key [^/^-^-if event/key = #"^^M" [unview]^/^-]^/^-event^/]^/insert-event-func :key-event^/view [^/^-text "Click ok or press enter"^/^-button "ok" [unview]^/]^/remove-event-func :key-event^/^/print "After ok clicked or enter pressed"^/```}
    sent: "2016-07-28T09:25:35.042Z"
    editedAt: "2016-07-28T09:26:10.253Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57999eded155b0294e10642a"
    text: {@jouborg_twitter That entry is part of [Idead for contributors](https://trello.com/b/tCypaglW/ideas-for-red-contributors) which was opened a couple of years ago when we applied to Google Summer of Code. Some entries have been added by contributors since them (like the OpenGL one), but this board has been left unsupervised, as we use only now [this one](https://trello.com/b/FlQ6pzdB/red-tasks-overview). No work so far has been done for defining an OpenGL high-level abstraction, though, using object! values for modelling a 3D world and a DSL on top of that, will probably be the way to go.}
    sent: "2016-07-28T05:57:50.571Z"
    editedAt: "2016-07-28T06:01:41.163Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579996747c9324e20e04a90a"
    text: "@canyonblue77 Glad you have fun with it. ;-)"
    sent: "2016-07-28T05:21:56.403Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57996ab8d155b0294e100a29"
    text: {```^/Red []^/digit: charset "0123456789"^/longnum: [8 100 digit]^/myfunc: ["long_join" | "long_rev_join" | "long_flip_join"]^/^/load-bigints: function [s [string!]][^/^-parse s [myfunc space insert {"} longnum insert {"} space insert {"} longnum insert {"}]^/^-s^/]^/^/long_join: function [s1 [string!] s2 [string!]] [ ^/^-trim/all form reduce [s1 s2]^/]^/long_rev_join: function [s1 [string!] s2 [string!]] [ ^/^-trim/all form reduce [( reverse s1) (reverse s2)]^/]^/long_flip_join: function [s1 [string!] s2 [string!]] [ ^/^-trim/all form reduce [s2 s1]^/]^/^/calculator: function [/local res][^/    forever [^/        code: ask "calculator>> "^/        if code = "q" [exit]^/^-   if code <> "" [^/            set/any 'res try/all [do load/all (load-bigints code)]^/            case [^/                error? :res [print form :res]^/^-^-^-not unset? :res [print ["==" :res]]^/        ^-  ]^/^-   ]^/    ]^/]^/calculator^/^/```}
    sent: "2016-07-28T02:15:20.787Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57996aac37c95e2446bbf903"
    text: {@dockimbel Custom console works like a charm! Thanks!!  I played with the parse to make sure it only converts long numbers for my functions and added if statement to allow for "submitting" empty lines. I can't believe how easy!!^/```}
    sent: "2016-07-28T02:15:08.475Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "5798c4093383eb622147aceb"
    text: {btw, I can take a swag at organizing the trello board a little if there's interest}
    sent: "2016-07-27T14:24:09.892Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5798c30837c95e2446ba2de6"
    text: {Are there any thoughts written down about the shape of the higher level abstraction? That way, if someone starts tackling https://trello.com/c/jdO6Velu/31-simple-opengl-4-x-wrapper they can take that into account}
    sent: "2016-07-27T14:19:52.846Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5798c2e400c8ebdd0e283007"
    text: {@dockimbel sure. Then I'm wondering - how should potential contributors think about the Trello board items? For example, the OpenGL one is titled "Simple OpenGL 4.x Wrapper" and body is "OpenGL 4.X Wrapper providing same funcionatily as OpenGL header for C/C++. It should provide mappings to OpenGL API functions, types and others apadting to make it mor Red-like." I suppose the low-level bindings are still necessary as a building block / dependency for a higher-level abstraction. }
    sent: "2016-07-27T14:19:16.973Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "57976f7100c8ebdd0e253555"
    text: {For sound, you can find a non-native solution at http://www.mycode4fun.co.uk/red-sound-engine}
    sent: "2016-07-26T14:10:57.150Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5797694093148c6b21df913f"
    text: {@jouborg_twitter As I said above, it's just a low-level wrapper over OpenGL. What we have in mind for Red is a higher abstraction, like we did for the Red/View engine for GUI.}
    sent: "2016-07-26T13:44:32.921Z"
    editedAt: "2016-07-26T13:44:36.357Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57975b5b00c8ebdd0e24ff0a"
    text: "but would be a good project to take and modernize"
    sent: "2016-07-26T12:45:15.724Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "57975b4d7c9324e20eff5753"
    text: {ha, but the code is pretty old; e.g. no OS X support}
    sent: "2016-07-26T12:45:01.144Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "579759b57c9324e20eff52af"
    text: {Ah, that's a great page. I hadn't come across it before. And didn't know there's an OpenGL binding yet. The Trello board lists OpenGL bindings as an (outstanding) item. https://trello.com/c/jdO6Velu/31-simple-opengl-4-x-wrapper}
    sent: "2016-07-26T12:38:13.736Z"
    v: 1
    author: "578111dec2f0db084a223578"
)#(
    id: "57973b5e93148c6b21df2527"
    text: {@rpherman You can find on the [contribution](http://www.red-lang.org/p/contributions.html) page, links to SDL, OpenGL and GFLW bindings, though they are low-level, just wrappers over the C API, so they can be used from Red/System only (means you need to write routines to interface those low-level layers with Red language itself).}
    sent: "2016-07-26T10:28:46.943Z"
    editedAt: "2016-07-26T10:29:21.582Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57973a897c9324e20eff0fdc"
    text: {Sound is not available officialy yet, nor is any opengl bridge. Some parts (fonts) of Windows gui are using Direct 2D. Such special features will come later imo ...}
    sent: "2016-07-26T10:25:13.685Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5797388900c8ebdd0e24b3b5"
    text: {I'd like to create a livecoding program in Red. Can anyone update me on what audio and opengl libs are available? I am playing with Gibber and Mathbox (check out the fm visualizer!) for comparison.}
    sent: "2016-07-26T10:16:41.788Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "579738483383eb622144380f"
    text: "I"
    sent: "2016-07-26T10:15:36.998Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "579612e893148c6b21dca4bd"
    text: "OK, I'll take a look"
    sent: "2016-07-25T13:23:52.028Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "57956fecd885c4d548dee8b5"
    text: {There are some functions in simple-io.reds, maybe you can reuse it.}
    sent: "2016-07-25T01:48:28.167Z"
    editedAt: "2016-07-25T01:48:39.397Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57956fc6683f0a5c4dcab188"
    text: "Nope. We haven't started it yet. :joy: "
    sent: "2016-07-25T01:47:50.933Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "579566871d2852c8438b0b80"
    text: "Or perhaps I can contribute "
    sent: "2016-07-25T01:08:23.192Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "57956035b92e27447fb3560d"
    text: {OK. Is there already a branch that has *some* of the additional I/O functionality? I'd like to conform to the style/location you're thinking for it. }
    sent: "2016-07-25T00:41:25.684Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "57955c63959ee82b3e53b00d"
    text: {The only way to do it is to write your own routine! for now. We'll be able to handle it in Red when we get complete I/O support in 0.7 .}
    sent: "2016-07-25T00:25:07.216Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57955a78959ee82b3e539b86"
    text: {how can I get a handle on STDOUT as a stream (as per stdio.h - http://linux.die.net/man/3/stdio)?}
    sent: "2016-07-25T00:16:56.935Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5795464232bd01d843bb1790"
    text: "@jouborg_twitter :+1: "
    sent: "2016-07-24T22:50:42.773Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57952f181b9de56c0ee0893f"
    text: ":-)"
    sent: "2016-07-24T21:11:52.941Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57952552bc636a263eebed0b"
    text: {:point_up: [July 24, 2016 6:23 AM](https://gitter.im/red/help?at=5794b3291b9de56c0edc3ec1) A custom console in under 20 lines of code. How can you not like that? :^^)}
    sent: "2016-07-24T20:30:10.425Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579509f9b92e27447fb08ff7"
    text: {got flushing working for print (stdout) and the websocketd echo now works. Not happy with how/where I'm exposing the `flush-file` / `fflush` from so going to experiment. Also need a way to constrain the stream to STDOUT, and not null/all. }
    sent: "2016-07-24T18:33:29.021Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5795096467c448730ef9b18a"
    text: "@qtxie @PeterWAWood figured it out!"
    sent: "2016-07-24T18:31:00.882Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794ddb6959ee82b3e4f70b4"
    text: {@qtxie I can try flushing output to see whether it solves the issue. Any pointers on how? }
    sent: "2016-07-24T15:24:38.863Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794d59167c448730ef7a935"
    text: "mysterious! :-)"
    sent: "2016-07-24T14:49:53.151Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794d58b32bd01d843b7531b"
    text: {Still learning to navigate the code base, but NAT_PRINT is opaque to me. See it "defined" in macros.reds, but nothing elsewhere in the source that seems to back it up}
    sent: "2016-07-24T14:49:47.394Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794d53d959ee82b3e4f3463"
    text: {`print: make native! [[^/^-^-"Outputs a value followed by a newline"^/^-^-value^-[any-type!]^/^-]^/^-#get-definition NAT_PRINT^/]`}
    sent: "2016-07-24T14:48:29.254Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794d52fbc636a263ee90ee9"
    text: "I see print's definition is:"
    sent: "2016-07-24T14:48:15.072Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794d3d567c448730ef7907c"
    text: "good morning :-)"
    sent: "2016-07-24T14:42:29.046Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794d34c959ee82b3e4f25a5"
    text: {could be because stdout is buffered; in some websocketd language examples, they flush stdout (e.g. for Swift - https://github.com/joewalnes/websocketd/blob/master/examples/swift/greeter.swift), while in others you don't have to (e.g. C# https://github.com/joewalnes/websocketd/blob/master/examples/c%23/Echo/Program.cs)}
    sent: "2016-07-24T14:40:12.171Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794d2c732bd01d843b739a3"
    text: {My command line for starting websocketd with my script above is: `./websocketd --port=8080 --devconsole ./red echo.r`}
    sent: "2016-07-24T14:37:59.661Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794d054b92e27447fae562e"
    text: {Maybe because the stdout is buffered. And also the `input` function expect UTF-8 encoded string.}
    sent: "2016-07-24T14:27:32.822Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5794cfddbc636a263ee8e014"
    text: {Not sure what is wrong in Red. Need to try websocketd to debug it.}
    sent: "2016-07-24T14:25:33.816Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5794c9381b9de56c0edced4c"
    text: {https://gist.github.com/joubertnel/b75e2300175a7e7cae9a5e226050fe0a}
    sent: "2016-07-24T13:57:12.943Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794c9301b9de56c0edced34"
    text: {https://gist.github.com/joubertnel/43bba914a96f4b2319fec7cae8e4f18e}
    sent: "2016-07-24T13:57:04.887Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794c92667c448730ef73dfe"
    text: {@qtxie I'm going to dig in a little more, but I wonder whether the issue is that in Red, the "input" function results in a line being printed to console before input is read, while in Rebol there's no additional line. I tried the websocketd echo in Rebol and it works perfectly. Same code as Red. Here are the two gists: }
    sent: "2016-07-24T13:56:54.921Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794c8bebc636a263ee8a2e3"
    text: "@qtxie  yes, it does. "
    sent: "2016-07-24T13:55:10.920Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794b3dfbc636a263ee7f3ee"
    text: {Before attempting to `load/all` the user input, I call `load-bigints` which will wrap big ints into double quotes, so they can be processed as strings. ;-)}
    sent: "2016-07-24T12:26:07.275Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5794b35932bd01d843b6365c"
    text: {```lisp^/red>> my-console^/custom>> ^/custom>> multiply_big 123456789123456789  789456789456789456789456^/== 123456789123456789789456789456789456789456^/```}
    sent: "2016-07-24T12:23:53.806Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5794b3291b9de56c0edc3ec1"
    text: {@canyonblue77 You could also rewrite a custom console, here is a short example to play with:^/```lisp^/digit: charset "0123456789"^/^/load-bigints: function [s [string!]][^/^-parse s [any [p: 10 500 digit e: insert e {"} insert p {"} | skip]]^-^/^-s^/]^/^/multiply_big: func [a [string!] b [string!]][rejoin [a b]]^/^/my-console: function [/local res][^/^-forever [^/^-^-code: ask "custom>> "^/^-^-if code = "q" [exit]^/^-^-set/any 'res try/all [do load/all load-bigints code]^/^-^-case [^/^-^-^-error? :res [print form :res]^/^-^-^-not unset? :res [print ["==" :res]]^/^-^-]^/^-]^/]^/my-console^/```}
    sent: "2016-07-24T12:23:04.999Z"
    editedAt: "2016-07-24T12:24:32.061Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5794ac201d2852c843849693"
    text: {Haha, no that's ok. That 'd be overkill for a silly coding experiment. Thanks much though!!}
    sent: "2016-07-24T11:53:04.173Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "5794a66d32bd01d843b5cf18"
    text: {@canyonblue77 You could try modifying the console code, though, you need to do it in the sources, changing the console code at runtime won't have any effect, as it's fully compiled.}
    sent: "2016-07-24T11:28:45.225Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579466f21d2852c843826d84"
    text: {```^/multiply_big "4520345347346508738273465" "2304634563457837852066527845"^/```^/I created a "multiply" for extremely large numbers however the numbers have to be entered as strings... is there anyway to allow them to be entered without the quotes but not get treated like "out of bounds" integers ? Not a big deal at all, just curious!}
    sent: "2016-07-24T06:57:54.495Z"
    editedAt: "2016-07-24T06:58:13.389Z"
    v: 2
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57942cad9d9e974a7f73bd30"
    text: {@jouborg_twitter Does your input string end with a linebreak(LF)?  if not, the `input` function won't return, then the `print msg` will not run.}
    sent: "2016-07-24T02:49:17.188Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5794131e67c448730ef1faa5"
    text: {In Red, when asking for input, e.g. data: input, there's a line printed before the input prompt. In Rebol there isn't. }
    sent: "2016-07-24T01:00:14.518Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5794130732bd01d843b186d1"
    text: {@qtxie will probably be able to say, as soon as he checks in. My guess, after glancing at things, is that it's probably just buffered in the current implementation. This is a good test.}
    sent: "2016-07-24T00:59:51.378Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579412951d2852c843801cee"
    text: {I've got the simple websocketd echo server working in Rebol. Looks to me like the problem in Red is the way console I/O (and I'm guessing, specifically input) is handled in Red}
    sent: "2016-07-24T00:57:57.212Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793fcf2b92e27447fa7fd7b"
    text: ":-)"
    sent: "2016-07-23T23:25:38.716Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793fc23bc636a263ee2a7e8"
    text: {I still find it strange that you get an error 'cannot access argument file' when using --cli. ^/It does'nt sound logical to me. If it is default in OS X i do'nt expect you to see an error like that. ^/But i have to admit that i am not a developer, but just a user of Red who is trying to help others.}
    sent: "2016-07-23T23:22:11.182Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5793fa8a1b9de56c0ed75af5"
    text: {it is a tower of stuff, including history management}
    sent: "2016-07-23T23:15:22.686Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793fa749d9e974a7f727d3b"
    text: {I'm now digging in deeper into how input is read from STDIN}
    sent: "2016-07-23T23:15:00.279Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793fa691d2852c8437f8316"
    text: "it was just a guess"
    sent: "2016-07-23T23:14:49.420Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793fa6067c448730ef15fd8"
    text: {I'm not sure that the problem I'm experiencing is due to buffered output. }
    sent: "2016-07-23T23:14:40.406Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793f8e4959ee82b3e48dd3a"
    text: {Oops, i thought you were using windows. I only have knowledge of windows and linux not OS X. ^/No errors when using --cli^/(I find it strange though that the output is buffered when the default on OS X is CLI mode. I had a simular problem without using the CLI mode, but could fix it with the --cli command)}
    sent: "2016-07-23T23:08:20.522Z"
    editedAt: "2016-07-23T23:14:36.491Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5793f830959ee82b3e48d990"
    text: {Looking at the docs I see "Note: On Non-Windows platforms, the REPL runs by default in CLI mode. But on Windows, the default is to run as gui-mode. To run it in the command line mode, invoke the red binary with the option `--cli`"}
    sent: "2016-07-23T23:05:20.000Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793f7db1d2852c8437f7358"
    text: {I still see the same, even after moving the script into the same directory. Does --cli work for you? Or do you also get the same error?}
    sent: "2016-07-23T23:03:55.290Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793f75bbc636a263ee2899e"
    text: {Bump. I think it matters. I'm on windows10. ^/But it looks like Red can't find the script. Maybe placing (a copy) of the executable Red in the same directory where the script is?^/}
    sent: "2016-07-23T23:01:47.046Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
)#(
    id: "5793f618959ee82b3e48c579"
    text: {looking at the source for "input" I see it just calls out to "ask", which in turn manipulates the console. Ultimately, I see a function "stdin-deadline" (https://github.com/red/red/blob/23a63d20ac73bd30419791ca58bc696f3aeac7be/environment/console/input.red#L447) being called. It is not available externally, so I'm going to have to experiment to see whether it gives me the right handle on stdin. }
    sent: "2016-07-23T22:56:24.725Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793f52f67c448730ef13e61"
    text: "(I'm on OS X, if that matters)"
    sent: "2016-07-23T22:52:31.609Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793f523bc636a263ee27c3c"
    text: "so not sure that that's a valid command line arg"
    sent: "2016-07-23T22:52:19.615Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793f51c67c448730ef13e2e"
    text: {@Rebol2Red the --cli argument results in this error: "*** Error: cannot access argument file"}
    sent: "2016-07-23T22:52:12.802Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "5793e6e832bd01d843b055ea"
    text: {> Nenad Rakocevic about a stdout question i had:^/@Rebol2Red Just use red --cli <scriptname> to get the output redirected to the shell. ^/By default, Red is using its own GUI console, not the system shell. ^/--cli forces it to use the system shell.}
    sent: "2016-07-23T21:51:36.001Z"
    editedAt: "2016-07-23T21:54:29.755Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5793e14ab92e27447fa72ed8"
    text: {Try to compile with: red --cli echo.red^/I'm not sure if this will help you, but just try it.}
    sent: "2016-07-23T21:27:38.119Z"
    editedAt: "2016-07-23T21:31:45.319Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5793d15d1d2852c8437e86b4"
    text: {@jouborg_twitter^/hi, I'm trying to write a simple echo server for websocketd^/code: https://gist.github.com/joubertnel/43bba914a96f4b2319fec7cae8e4f18e^/the code does what I expect when running on the console. ^/but when I run with websocketd (http://websocketd.com), STDOUT seems to only be triggered once the program exits. Is this because of STDIN/STDOUT buffering?^/something else?}
    sent: "2016-07-23T20:19:41.078Z"
    v: 1
    author: "578111dec2f0db084a223578"
) #(
    id: "57938b3b67c448730eed671a"
    text: "That was it. Thanks."
    sent: "2016-07-23T15:20:27.479Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57938ac232bd01d843acc5a9"
    text: "eg set to word! rejoin ['b 1] 1"
    sent: "2016-07-23T15:18:26.115Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57938a5dbc636a263ede7f62"
    text: {@Rebol2Red You need to set the words that you have dynamically created.}
    sent: "2016-07-23T15:16:45.215Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57938a101b9de56c0ed3abb9"
    text: "@"
    sent: "2016-07-23T15:15:28.122Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "579388849d9e974a7f6e683a"
    text: {That works, but not with the loop? Maybe it is because of a local assignment. Because the vars outside of the loop has no value?}
    sent: "2016-07-23T15:08:52.590Z"
    editedAt: "2016-07-23T15:12:58.189Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "579384809d9e974a7f6e36ab"
    text: {```^/red>> b1: 22^/== 22^/red>> i: 1^/== 1^/red>> get to word! rejoin ['b i]^/== 22^/```}
    sent: "2016-07-23T14:51:44.089Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57937f719d9e974a7f6e147e"
    text: {^/```^/repeat i 3 [to word! rejoin ['b i] i]^/print [b1 b2 b3]  ;*** Script Error: b1 has no value^/```^/I will try with the latest version^/^/Nope}
    sent: "2016-07-23T14:30:09.501Z"
    editedAt: "2016-07-23T14:35:09.749Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "57937b6b1b9de56c0ed30266"
    text: "try `to word! rejoin ['b i]`"
    sent: "2016-07-23T14:12:59.246Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5793712f32bd01d843abe516"
    text: {How can i make words dynamic?^/```^/set 'b4 22^/probe b4 ; == 22^/```^/ How about a loop:^/```^/repeat i 3 [set reduce[rejoin['b i]] i] ; thought this might work^/print [b1 b2 b3] ; *** Script Error: invalid argument: "b1"^/```}
    sent: "2016-07-23T13:29:19.688Z"
    editedAt: "2016-07-23T13:33:36.648Z"
    v: 6
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5792d5330d432ceb0981f395"
    text: {@canyonblue77  yes sorry I checked out a bit on Friday night. The problem that I often walked in to on a series is knowing where you are in the series.     I put 'head' in this clip to make sure you don't add a few lines inbetween which might change where you are in the series..}
    sent: "2016-07-23T02:23:47.877Z"
    v: 1
    author: "557c34d315522ed4b3e1dbe2"
) #(
    id: "5792d5169d9e974a7f688cdd"
    text: "Thanks!! @PeterWAWood  @Cybarite  @pekr "
    sent: "2016-07-23T02:23:18.109Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "5792cbf3959ee82b3e3f2822"
    text: {That is correct, head positions the index to the first value in the series.}
    sent: "2016-07-23T01:44:19.584Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57928c541d2852c843736d7d"
    text: {Ahhh! I see the head ensures we are starting from the beginning of the series... is that right?}
    sent: "2016-07-22T21:12:52.207Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57928bc132bd01d843a5016c"
    text: "Just found the edit feature :-D"
    sent: "2016-07-22T21:10:25.392Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57928b6a1b9de56c0ecb3367"
    text: {sorry, that r should be "long"}
    sent: "2016-07-22T21:08:58.924Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57928b47959ee82b3e3d1b07"
    text: {```^/long: [z r f v t g b y h n u j e d w e r t y]^/sub: copy/part (skip long 12) 2^/== [e d]^/```}
    sent: "2016-07-22T21:08:23.428Z"
    editedAt: "2016-07-22T21:10:03.144Z"
    v: 3
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57928b2232bd01d843a4fb95"
    text: "I came up with"
    sent: "2016-07-22T21:07:46.370Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57928a3d89521c0718aae2b0"
    text: {```^/world-series: [a b c d e f g h i j k]^/national-series: copy/part skip head world-series 2 3^/```}
    sent: "2016-07-22T21:03:57.756Z"
    v: 1
    author: "557c34d315522ed4b3e1dbe2"
) #(
    id: "5792863e683f0a5c4dcaa0fe"
    text: {@canyonblue77  Rebol series documentation applies  1.4 Extracting a Sub-series at this page http://www.rebol.com/docs/core23/rebolcore-6.html#section-1.4}
    sent: "2016-07-22T20:46:54.408Z"
    v: 1
    author: "557c34d315522ed4b3e1dbe2"
) #(
    id: "5792769fb92e27447f9adf44"
    text: "Sorry, I am just on the cell phone"
    sent: "2016-07-22T19:40:15.740Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57927689959ee82b3e3c3c68"
    text: {I dont understand what you mean, sorry. Pick returns the element. Have you tried with select, at, etc functions?}
    sent: "2016-07-22T19:39:53.697Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57927365959ee82b3e3c1d09"
    text: {ok.... i'm being dense again.... trying to pull a sub-series from a series. Basically something like `pick series index length`      if there's something built-in I'm totally missing it. Worst case was going to create a function that just did a repeating "pick" of index+1 and return a new series as the sub }
    sent: "2016-07-22T19:26:29.441Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "579129d216487c5e51770260"
    text: {@Rebol2Red @dockimbel it looks like Chocolatey also manages to work around that issue with the shim exe it generates (which is in the path)^/...by the way, I haven't forgotten about automated build package generation. It shouldn't be too difficult to add. I just need to find a solid block of time to work out the details and do some tests, etc.}
    sent: "2016-07-21T20:00:18.673Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5790b9a3ac85f2507ae971fb"
    text: "You're welcome."
    sent: "2016-07-21T12:01:39.609Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5790b8e73d74e5a01680f1e4"
    text: {Thank you very much. I will look at the issues first before asking.}
    sent: "2016-07-21T11:58:31.307Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5790b81c0720fd587ab936f0"
    text: {@Rebol2Red Not your fault, it's a known issue with the Rebol encapper we are using for producing `red.exe`. See a workaround there: https://github.com/red/red/issues/543 Once we'll rewrite the toolchain in Red (after 1.0), this issue will be gone, as well as the Rebol dependency.}
    sent: "2016-07-21T11:55:08.496Z"
    editedAt: "2016-07-21T11:56:29.551Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5790b6a90720fd587ab92184"
    text: {Thanks. It works with the --cli and also when compiled. ^/Does anyone get the same error i mentioned? (maybe i did something wrong at setting the path to it in windows. When it is windows related i'll have to fix that)}
    sent: "2016-07-21T11:48:57.245Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5790b3c916487c5e51709d99"
    text: {Not sure ... at first run, it seems to compile console in the background, then it should use it ....}
    sent: "2016-07-21T11:36:41.822Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5790b3979f35137e67f605b9"
    text: {Aha, will the compiled executable send the output to stdoud then? And is that the reason about the following error. I made a path to red. When i open a shell in a directory with no red executable in it and do red [script] i get: PROGRAM ERROR: Invalid encapsulated data. It is not nice to put red.exe in all the directories.}
    sent: "2016-07-21T11:35:51.708Z"
    editedAt: "2016-07-21T11:38:07.173Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5790b38b2d04e05851a5bc15"
    text: "Good to know :-)"
    sent: "2016-07-21T11:35:39.920Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5790b30aac85f2507ae92121"
    text: {@Rebol2Red Just use  `red --cli <scriptname>` to get the output redirected to the shell. By default, Red is using its own GUI console, not the system shell. `--cli` forces it to use the system shell.}
    sent: "2016-07-21T11:33:30.444Z"
    editedAt: "2016-07-21T11:35:24.540Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5790b20d16487c5e51708819"
    text: {I think that the reason might be, that the red executable is in fact R2 (Rebol) interpreter with some bundled stuff. It launches real GUI console here. What you should do is to compile pure Red console, I do it the following way:^/^/- install R2/View^/- hit enter on red.r, select Allow all on the security requester^/- run: rc %environment/console/console.red .... this will output console.exe into Red root dir^/- in shell, run: console your-script.red}
    sent: "2016-07-21T11:29:17.506Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5790ae1b75045f87671a7ad1"
    text: {Maybe a stupid question but if i run red [scriptname] in a windows10 shell i get no output while using print. (There is a gui opening  and showing the output though). Is output not redirected to stdout?}
    sent: "2016-07-21T11:12:27.577Z"
    editedAt: "2016-07-21T11:16:27.874Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578fb20dac85f2507ade8c45"
    text: {@rebolek, what I mean is that I think time! will move to the new decimal! type Red gets eventually.}
    sent: "2016-07-20T17:17:01.537Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578f5b0e69e7f1b17e4e181d"
    text: {@dockimbel Well ok but could I suggest to make  these modifications  (events  related) a top priority. More we waiting, more I'm impacted ;-) }
    sent: "2016-07-20T11:05:50.228Z"
    editedAt: "2016-07-20T11:10:07.183Z"
    v: 4
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578f570d16487c5e5161116c"
    text: {@pekr I'm getting to know the Gui better. Attempting to create templates which allow resizing...  until such time when the Gui will do it elegantly.}
    sent: "2016-07-20T10:48:45.004Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "578f565bac85f2507ad9705c"
    text: {@SteeveGit I now understand the logic - however - even if cascaded down: to be useful a relative offset is needed (as @dockimbel says).}
    sent: "2016-07-20T10:45:47.970Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "578f55d03d74e5a0167029b5"
    text: {@SteeveGit We need to change it, the current behavior is wrong. The event, when processed by parent faces, needs to provide an offset relative to them, not to their child or grandchild.}
    sent: "2016-07-20T10:43:28.045Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578f552b16487c5e51610529"
    text: "What are you cooking? :-)"
    sent: "2016-07-20T10:40:43.467Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578f5518f05182092e3e3532"
    text: {Also,  changing that, would break my current devs ;-)}
    sent: "2016-07-20T10:40:24.492Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578f540f4feb3a76689406b6"
    text: {@ralfwenske , @dockimbel Yes, The event is linked to the most inner face. ^/The parent face may also receive this event, if the actor does not stop it.^/To stop it, use **'done** or **'stop** as return value.^/e.g. ^/```lisp^/do-down: func [face [face!] event [event!]][^/    print ["down at" face/type event/offset]^/^-'done ^/]^/```^/I feel that the current behavior is convenient. I don't want the event/offset being modified when cascading.^/Because it's linked to the event/face, not to the face  of the actor as in your sample:^/```lisp^/do-down: func [face [face!] event [event!]][^/    print ["down at" face/type event/offset] ; <- face and event/face not always the same ^/    print ["down at" event/face/type event/offset]^/]^/```}
    sent: "2016-07-20T10:35:59.117Z"
    editedAt: "2016-07-20T10:37:17.624Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578f48aa0720fd587aa824d1"
    text: {@dockimbel Thank you - will work around until then.}
    sent: "2016-07-20T09:47:22.227Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "578f47b79f35137e67e5f558"
    text: {@ralfwenske It's a known limitation, there's ticket about it: https://github.com/red/red/issues/1636 We need an improved event! type implementation to unlock that feature (and many others).}
    sent: "2016-07-20T09:43:19.176Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "578f46ab3d74e5a0166f6680"
    text: {To determine on-down / on-up event offsets relative to 'window one can calculate it by adding up parent offsets.^/Simpler would be to use the 'window event: unexpectedly it returns the offset of the face directly under the mouse. ^/Doesn't seem useful as I cannot determine what face these offsets belong to.^/Is that intended behavior?^/```^/do-down: func [face [face!] event [event!]][^/^-print ["down at" face/type event/offset]^/]^/do-up: func [face [face!] event [event!]][^/^-print ["up at" face/type event/offset]^/]^/^/view [^/^-panel 100x100 blue on-down [do-down face event] on-up [do-up face event]^/^-area  100x100      on-down [do-down face event] on-up [do-up face event]^/ do [^/^-self/actors: make object! [^/^-^-on-down: func [face [face!] event [event!]] [do-down face event]^/^-^-on-up:   func [face [face!] event [event!]] [do-up face event]^/^-^-]^/^-]^/]^/```^/dragging the mouse from one panel into the other returns this:^/```^/down at panel 49x34^/down at window 49x34^/up at area 37x32^/up at window 37x32^/```^/}
    sent: "2016-07-20T09:38:51.286Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "578f3743a903740022b0589a"
    text: {@greggirwin Are you sure? It’s `decimal!` in Rebol, so `float!` seems appropriate in Red.}
    sent: "2016-07-20T08:33:07.020Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "578f2c2c3d74e5a0166e4c0c"
    text: {But it sometimes useful, as in SQL Server DateTime values are like HH:MM:SS.FFF so the seconds is float!}
    sent: "2016-07-20T07:45:48.080Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "578e9b7275045f8767035865"
    text: "Using float is a temporary solution. "
    sent: "2016-07-19T21:28:18.763Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e95f916487c5e515936ef"
    text: {```^/time: now/time^/print type? time/second^/```^/float ??? ^/Why not integer? Because of precision?}
    sent: "2016-07-19T21:04:57.666Z"
    editedAt: "2016-07-19T21:07:00.043Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578e7eaf0720fd587a9fb48a"
    text: "I'll just have to wait for it. Thanks."
    sent: "2016-07-19T19:25:35.348Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578e7d573d74e5a016670347"
    text: {Also - ftp is said being a tricky protocol to get right, we will see, which way will we get it supported in terms of Red ....}
    sent: "2016-07-19T19:19:51.104Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e7d2f2d04e058518ce325"
    text: {I think not. Red currently has just a so called "simple-io" implementation. Not a full stack protocol support. Maybe piping it via a Curl could be an interim alternative?}
    sent: "2016-07-19T19:19:11.924Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e7a9f16487c5e5157bbbd"
    text: {Is it already possible to write to ftp something like write/binary ftp://xxxx %file.jpg^/If so how to provide the password and username. Maybe the same as in rebol2 or rebol3?}
    sent: "2016-07-19T19:08:15.321Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578e2bafac85f2507acb99ca"
    text: {But it is a great example of why we need to document loop counter behavior. }
    sent: "2016-07-19T13:31:27.004Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578de1abac85f2507ac7b89d"
    text: {Sure I just wrote it as an example. Didn't check the output.}
    sent: "2016-07-19T08:15:39.390Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "578dde903d74e5a0165e3462"
    text: {@endo64 Have you tried the above code? It prints 1 to 5 and results in 7. I have difficulty thinking that this is what you intended. If you wanted to print the first 5 odd numbers, the following might work:^/```^/i: 1 loop 5 [print i i: i + 2]^/```}
    sent: "2016-07-19T08:02:24.995Z"
    editedAt: "2016-07-19T08:03:18.195Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "578dddc916487c5e514f03d1"
    text: {I usually use `repeat`  instead of `for` or `while` (of course there are times I need to use `while` as there is a nuance) ^/```^/repeat i 5 [print i i: i + 2]^/```}
    sent: "2016-07-19T07:59:05.855Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "578d6d7bac85f2507ac30df1"
    text: {Correct. The last evaluated value is returned. You only *need* to use return when exiting a function early. An important design aspect, though, is that you want to consider how a user may chain calls when deciding what to return.}
    sent: "2016-07-18T23:59:55.216Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d6d0a0720fd587a92aaad"
    text: {So my understanding of it is that the series is passed by reference so any changes made inside of the function are permanent... which I guess would mean that "mylist" wouldn't need to be explicitly returned ???}
    sent: "2016-07-18T23:58:02.936Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578d6bf616487c5e514a51b7"
    text: "lol, figured it was something overly simple^/"
    sent: "2016-07-18T23:53:26.723Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578d6bdd0720fd587a929970"
    text: "`remove at xarr 4`"
    sent: "2016-07-18T23:53:01.008Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d6b56ac85f2507ac2fd2b"
    text: {```^/xarr: [ 5 7 8 1 8 7 5]^/del_at_index: function [ mylist [series!] i [integer!]] [^/                    x: take at mylist i^/                    return mylist  ^/]^/del_at_index xarr 4^/^/```}
    sent: "2016-07-18T23:50:46.485Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578d6b472d04e058517fa269"
    text: {This is what is so cool to me about Red... I didn't know how to delete an item in a series at a specific index so I made my own and it just worked.^/```}
    sent: "2016-07-18T23:50:31.588Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578d20e12d04e058517bcec8"
    text: {Here we go. Actually pretty much rewrote it quickly for Red, since we don't have `use`, but we do have `map!`, and `difference` doesn't work on `time!`. Consider it a draft.^/```^/time-marks: object [^/^-data: #()^/^/^-_key: func [key][(any [key #__DEFAULT])]^/^-^-^/^-_get: func [key][data/(_key key)]^/^-_set: func [key][data/(_key key): now/time/precise]^/^-_clr: func [key][data/(_key key): none]^/^-^/^-set 'get-time-mark   func [/key k] [_get k]^/^-set 'set-time-mark   func [/key k] [_set k]^/^-set 'clear-time-mark func [/key k] [_clr k]^/^-^/^-set 'time-since-mark func [/key k] [^/^-^-if none? _get k [^/^-^-^-print ["##ERROR time-since-mark called for unknown key:" _key k]^/^-^-^-return none^/^-^-]^/^-^-now/time/precise - _get k^/^-]^/]^/;print time-since-mark^/;set-time-mark^/;print time-since-mark^/;wait 1^/;set-time-mark/key 'a^/;wait 2^/;print [time-since-mark  time-since-mark/key 'a]^/```}
    sent: "2016-07-18T18:33:05.000Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d1ad1ac85f2507abe7d50"
    text: {Going to have to port my other little funcs. No `use` in Red yet.}
    sent: "2016-07-18T18:07:13.918Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d1a42841e619d16fe6f49"
    text: "Very useful the ones in the series section!"
    sent: "2016-07-18T18:04:50.678Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578d1a350720fd587a8e8b47"
    text: {I have another little set of funcs...need to get to work here, but will get them up real quick.}
    sent: "2016-07-18T18:04:37.325Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d19fc2d04e058517b6560"
    text: {Ok, I thought its use is mostly in testing, but make sense 8-)}
    sent: "2016-07-18T18:03:40.239Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578d19f70720fd587a8e886e"
    text: {A lot of them were on Altme from a few years ago though. So I'm also eliminating the things that are standard in Red now.}
    sent: "2016-07-18T18:03:35.727Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d19d5ac85f2507abe67ed"
    text: {What's in the gist right now are some of the more basic things, and cleaning a bit as I go. Not *nearly* all I have. Note that there's nothing in the `series` section yet. That's my biggest group.}
    sent: "2016-07-18T18:03:01.122Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d19d2841e619d16fe6d43"
    text: "Wow, Thanks Gregg. I can use your functions."
    sent: "2016-07-18T18:02:58.082Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d19909f35137e67cbb52f"
    text: {@x8x, mine doesn't print because I use it to collect data in production apps as well.}
    sent: "2016-07-18T18:01:52.382Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d198f841e619d16fe6c92"
    text: "Gregg that's all you had on Altme?"
    sent: "2016-07-18T18:01:51.272Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578d192c3d74e5a016553d2b"
    text: {@pekr, we don't have a great/easy process for vetting new mezzanines. We can patch and PR, but need to not overload Doc (who has to see the big picture). In the meantime, I've started a gist dump of mezzanines: https://gist.github.com/greggirwin/d0412f0c3d8e1ce4dfe26afc643742f1}
    sent: "2016-07-18T18:00:12.704Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d18f33d74e5a0165537fb"
    text: {Gregg I like your version with integrated loop. I also think we would benefit from having a timing function in red by default.^/My one has the benefit of printing the time taken but still return the result.}
    sent: "2016-07-18T17:59:15.769Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578d18730720fd587a8e77d9"
    text: {```^/timer: func [^/^-code [block!] "Block of code to execute"^/^-/local t r^/][^/^-t: now/time/precise^/^-set/any 'r do code^/^-t: now/time/precise - t^/^-print [^/^-^-t ">>"^/^-^-copy/part t: trim/lines mold code 80^/^-^-if 80 < length? t [".."][""]^/^-]^/^-unless unset? :r [r]^/]^/```}
    sent: "2016-07-18T17:57:07.028Z"
    editedAt: "2016-07-18T18:00:44.285Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578d18573d74e5a016552bde"
    text: {@x8x , I often miss things because they are too easy. :^^)}
    sent: "2016-07-18T17:56:39.848Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d1833841e619d16fe5511"
    text: {This was my impementation:^/```^/execution-time: func[ blok /local start_ end_^/][^/^-start_: ^-now/time/precise^/^-do blok^/^-end_: ^-^-now/time/precise^/^-end_ - start_^/]^/^/; fast^/print execution-time[a: 2  loop 10000000 [a: a + 2]]^/^/; slow ? (looks if it is faster than above)^/print execution-time[a: 2 while [a <= 10000000][a: :a + 2]]^/```}
    sent: "2016-07-18T17:56:03.194Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d18259f35137e67cb976c"
    text: {HAHA not sure how I could miss that.. Thanks Gregg!}
    sent: "2016-07-18T17:55:49.477Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578d17f275045f8767eff265"
    text: {:^^) I imagine Doc has better things in mind. We will surely have real profiling in Red, all the way down. Maybe even something cool like DTrace does. }
    sent: "2016-07-18T17:54:58.130Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d17ab0720fd587a8e7077"
    text: {@greggirwin It is if you could read my mind. I wanted to ask if my executing timing code was wrong and if i could see your code.}
    sent: "2016-07-18T17:53:47.554Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d179d16487c5e5145a3d3"
    text: {```^/red>> s: "ABC123"^/== "ABC123"^/red>> to binary! s^/== #{414243313233}^/red>> to string! to binary! s^/== "ABC123"^/```}
    sent: "2016-07-18T17:53:33.427Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d17909f35137e67cb8c70"
    text: {I like it, could be added to Red, I bet ppl would find it useful for basic tweking/optimisations of their code ...}
    sent: "2016-07-18T17:53:20.189Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578d17472d04e058517b324e"
    text: {```^/time-it: func [block /count ct /local t baseline][^/    ct: any [ct 1]^/    t: now/time/precise^/    loop ct [do []]^/    baseline: now/time/precise - t^/    t: now/time/precise^/    loop ct [do block]^/    now/time/precise - t - baseline^/]^/```^/My cheat for now.}
    sent: "2016-07-18T17:52:07.662Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d171816487c5e5145a243"
    text: {IIRC, R3 had something like delta-time, or dt? I like time-it more!}
    sent: "2016-07-18T17:51:20.552Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578d1716ac85f2507abe38d2"
    text: {is there an easy way to convert `string!` to `binary!` end back?}
    sent: "2016-07-18T17:51:18.987Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578d16fd75045f8767efdf96"
    text: "Hey, where's my `time-it`? :-)"
    sent: "2016-07-18T17:50:53.909Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578d15cd75045f8767efd224"
    text: {```^/red>> time-it [a: 0  while [a < 1000][a: a + 1]]^/== 0:00:00.001^/red>> time-it [a: 0  while [a < 10000][a: a + 1]]^/== 0:00:00.01^/red>> time-it [a: 0  while [a < 100000][a: a + 1]]^/== 0:00:00.051^/red>> time-it [a: 0  while [a < 1000000][a: a + 1]]^/== 0:00:00.488^/```}
    sent: "2016-07-18T17:45:49.851Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d15489f35137e67cb6803"
    text: {As far as speed, remember that these things only have an effect when you're talking loops that run millions of times. And if you're doing any significant work in the body, that will likely dwarf the loop construct overhead.}
    sent: "2016-07-18T17:43:36.847Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d10a7ac85f2507abdd0d7"
    text: "So I don't compile too ..."
    sent: "2016-07-18T17:23:51.462Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578d109d3d74e5a01654cddb"
    text: {I felt in love with the Red's GUI console - very nice experience for me :-)}
    sent: "2016-07-18T17:23:41.478Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578d103c0720fd587a8defb9"
    text: {It is because of the long compiling time i do not compile very often. ^/Only when the program is almost finished.}
    sent: "2016-07-18T17:22:04.447Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d100e0720fd587a8def3e"
    text: {But you can make a fast version, if your tests work for it. e.g. ^/```^/a: 0  loop 5 [a: a + 2 print a]^/```^/That will be screaming fast, compared to `while`.}
    sent: "2016-07-18T17:21:18.326Z"
    editedAt: "2016-07-18T17:21:37.119Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d0fe62d04e058517ab69f"
    text: "Yes, the same speed, interpreted ..."
    sent: "2016-07-18T17:20:38.988Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "578d0fca75045f8767ef66b0"
    text: {Ah, well as Gregg said about the same speed as R2. I am glad to know. I will use while for now.}
    sent: "2016-07-18T17:20:10.333Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d0f9216487c5e51451a16"
    text: "Compilation might help?"
    sent: "2016-07-18T17:19:14.700Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578d0f622d04e058517aaad8"
    text: {Quick test here shows the `while` version under Red is about the same speed as `for` under R2.}
    sent: "2016-07-18T17:18:26.376Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d0f5e841e619d16fdce58"
    text: "But will the code be slower?"
    sent: "2016-07-18T17:18:22.292Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d0f32ac85f2507abdbc28"
    text: {Now you can implement your own `for` funciton using `while`}
    sent: "2016-07-18T17:17:38.473Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578d0f283d74e5a01654b394"
    text: "I agree to that"
    sent: "2016-07-18T17:17:28.596Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d0ee5841e619d16fdca77"
    text: {Of course, all the things you have to do manually are places to introduce bugs. }
    sent: "2016-07-18T17:16:21.680Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d0ee39f35137e67cb130d"
    text: "Will the code be slower?"
    sent: "2016-07-18T17:16:19.598Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d0ea316487c5e51450de9"
    text: {All you're doing is breaking out the `init, test, step` pieces and making them explicit.}
    sent: "2016-07-18T17:15:15.675Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d0ea0841e619d16fdc03b"
    text: {Not as nice as with a for but i can live with it. Thanks}
    sent: "2016-07-18T17:15:12.779Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d0e7775045f8767ef58a6"
    text: ":^^)"
    sent: "2016-07-18T17:14:31.691Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d0e6c2d04e058517a9d84"
    text: {I just did almost the same:^/```^/a: 2^/while [a <= 10]^/[^/^-print a^/^-a: :a + 2^/]^/```}
    sent: "2016-07-18T17:14:20.813Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d0e240720fd587a8dde5e"
    text: {```^/a: 0  while [a < 10][a: a + 2 print a]^/```^/would do the same in that case.}
    sent: "2016-07-18T17:13:08.913Z"
    editedAt: "2016-07-18T17:13:30.418Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d0c92ac85f2507abd927f"
    text: {Can you give me a little example of how you use while as for? ^/I am always interested in how other people do their coding.^/For example:^/```^/for a 2 10 2 [ print a ]^/```}
    sent: "2016-07-18T17:06:26.995Z"
    editedAt: "2016-07-18T17:09:15.281Z"
    v: 3
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d0b8d0720fd587a8dac73"
    text: {I hope `for` will be included in some form. Doesn't have to be mine. People will expect it, and it does provide features `loop` and `repeat` don't. You can do anything with `while`, but that's not always as clear IMO. I didn't use `for` often under R2, but when I needed it, I was glad to have it.}
    sent: "2016-07-18T17:02:05.015Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d0b369f35137e67cadee0"
    text: {The `for` proposal is here: https://github.com/red/red/wiki/REP-FOR-loop-function}
    sent: "2016-07-18T17:00:38.777Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578d0ae275045f8767ef2141"
    text: {Aha, I will wait and see.^/ I had some adjusted mezzanine code but that worked only interpreted but not  compiled. ^/That's why i returned to using "loop and repeat" code^/Thanks for explaining}
    sent: "2016-07-18T16:59:14.573Z"
    editedAt: "2016-07-18T17:00:10.142Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578d09e09f35137e67caca7e"
    text: {@greggirwin is also proposing much stronger `for`implementation, which would be really powerful. Forgot the link to the proposal, maybe Gregg will step-in.}
    sent: "2016-07-18T16:54:56.585Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578d09b89f35137e67cac733"
    text: {I believe, at some point, there's going to be one. Well, depends upon Red authors, but my take is - if ppl are asking for it, they might miss it, although I understand, that it might not feel natural to Red. Maybe it is going to be in the mezzanine library, who knows. I think that Doc is also waiting for the precompiled runtime to be available, and does not add much of a mezzanine code to slow the compilation further down ...}
    sent: "2016-07-18T16:54:16.671Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578d094375045f8767ef03a9"
    text: {Why is there no word "for" as in rebol2? (There are lots of other evaluating words) ^/If "for" is not acceptable then how can i use any of the other words as "for"?^/I can do "for" with an iterator inside a loop, but this is not what i want.}
    sent: "2016-07-18T16:52:19.465Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578cf966ac85f2507abc38c4"
    text: {Thanks Endo. I found it and sent it to him. You're now part of my "external memory" list though. ;^^)}
    sent: "2016-07-18T15:44:38.274Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578c8ac58423d0842457fd92"
    text: {> @dsgeyser @canyonblue77 , I think the lambda site just showed some dialect examples. Not sure why it's down.  I'll see if I can track down the original. It used the COM interface to Excel, so was version specific.^/^/@greggirwin I have that (Excel dialect) script on my PC, if anyone need I can put somewhere on Internet.}
    sent: "2016-07-18T07:52:37.790Z"
    editedAt: "2016-07-18T07:58:05.014Z"
    v: 3
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "578acb74d11cd2881234f5dc"
    text: "I'm "
    sent: "2016-07-17T00:04:04.977Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "578aaabe9f79ee4f2bc769c7"
    text: {```^/process: function [^/^-input [string! none!]^/][^/^-if attempt [blk: compose [(load input)]][^/^-^-res: parse blk [^/^-^-^-collect [^/^-^-^-^-any [^/^-^-^-^-^-set w word! set s string! keep (rejoin ["<" w ">" s "</" w ">"])^/^-^-^-^-^-| 'aref keep ({<a href="#"</a>})^/^-^-^-^-]^/^-^-^-]^/^-^-]^/^-^-either res [form res][input]^/^-]^/]^/^/view [^/^-below^/^-text yellow 300 bold {Try "h1{foo}" or "aref"}^/^-text "Input:"  input:  area 300x60^/^-text "Output:" output: area 300x180 react [face/text: process input/text]^/]^/```}
    sent: "2016-07-16T21:44:30.964Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578aaa53e4375c9212f4627b"
    text: {I'm excited to see what tools people build with Red. Things like template expansion (or Zen Coding / Emmet if you're under 30 :^^), are easy.}
    sent: "2016-07-16T21:42:43.581Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578aa91a9f79ee4f2bc75be7"
    text: {The thing about Redbol is that it's malleable, at a high level. Rebol experts scratched the surface over the years, but because we all wrote for our own needs, and the community stayed small, more general tools didn't emerge. }
    sent: "2016-07-16T21:37:30.779Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a9819e4375c9212f3bfc1"
    text: {I recently saw someone mention on a forum how great it would be for anyone to be able to convert a spreadsheet to a CRUD app - kind of like an interface to the spreadsheet. Imagine a dynamic and reative GUI. And docs' last demo thrown into the equation. It baffkes me. And perhaps pulling data from all sorts of places, being dynamically updated. I think the amount of need out there is great when it comes to data flow and business logic between mobile and Excel, for instance. They really are making it so complicated. I think it is time to show them how it should be done. This community may be small at the moment, but I think there is enough expertise and good old sense to bring about a lasting legacy to the coding world at large. Make doc proud.}
    sent: "2016-07-16T20:24:57.729Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "578a97418423d084244652c3"
    text: {@greggirwin  Thanks for the PM. I really feel priviledged to be talking to you and @pekr  - both old hands }
    sent: "2016-07-16T20:21:21.926Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "578a92ac8423d08424463df0"
    text: "I PM'd you here @dsgeyser ."
    sent: "2016-07-16T20:01:48.352Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a90f1196179690eee55df"
    text: {That was the first dialect I have seen ... And it allowed non programmers to do a useful stuff. So much power there ...}
    sent: "2016-07-16T19:54:25.143Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a90ef196179690eee55dc"
    text: {Sandstone Technology used to have a tool called Visual Parse ++ which was pretty cool. It was all shift-reduce style, but I think our ability to create interactive tools is unlimited once we embrace reactivity.}
    sent: "2016-07-16T19:54:23.726Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a90c8914c51592b2a86a7"
    text: {And he showed me his own code, using simple code like start, stop move 100 x, etc}
    sent: "2016-07-16T19:53:44.117Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a9093d11cd28812331290"
    text: {Guys, it was 20 years ago, when we built new scope for our ibservatory. We got some weird Czech step motor, Mikrokon, and I asked my brother - who is goimg to code it?}
    sent: "2016-07-16T19:52:51.225Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a90359f79ee4f2bc64103"
    text: {Now imagine ti accomoany it with the GUI rules editor ...}
    sent: "2016-07-16T19:51:17.335Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a9016d11cd28812330f07"
    text: {I can hardly produce quality code myself, hence most of my suggestions might be just shallow. But I try to believe the parse.exe might get popular ... IIRC, Doc planned a dialect to build dialects ...}
    sent: "2016-07-16T19:50:46.123Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a8fba8423d08424461e03"
    text: {Eh, one of my messages went pink and did not appeared here. Trying Android native client ...}
    sent: "2016-07-16T19:49:14.861Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a8f60e4375c9212f360e7"
    text: "Some of my best ideas were probably Petr's. :^^)"
    sent: "2016-07-16T19:47:44.764Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8f1ee4375c9212f35bc1"
    text: {But if at least one is useful, why not mention it ...}
    sent: "2016-07-16T19:46:38.392Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a8f0c9f79ee4f2bc631d1"
    text: {As much as I love the Redbol languages, I love the community more. }
    sent: "2016-07-16T19:46:20.193Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8ebcd11cd28812330362"
    text: {@pekr  You really have a great idea there. Maybe we can steer it somewhere useful. This is the reason why I love  it here, the constant innovation!}
    sent: "2016-07-16T19:45:00.420Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "578a8e32e4375c9212f34fdd"
    text: {@greggirwin  I am excited about this chance to do this. And as always I can certainly lean on my fellow community coder friends to make this happen. @pekr  You really have a freat}
    sent: "2016-07-16T19:42:42.324Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "578a8dfd3c5129720e3ee3be"
    text: "Agreed."
    sent: "2016-07-16T19:41:49.660Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8ded3c5129720e3ee0f9"
    text: {At work, colleagues wanted to parse one file. Told them about Red and Rebol. They dont want to learn new lang. But they agreed, that if they can call some exe with a parameter and get the result, the work is done. Hence it came to my mind, if possibly more audience would find use for targetted parse.exe doing wonders :-)}
    sent: "2016-07-16T19:41:32.999Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a8d70196179690eee31cc"
    text: {i.e. he wrote spreadsheet data you loaded which then dynamically altered the UI.}
    sent: "2016-07-16T19:39:28.655Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8d51914c51592b2a68f6"
    text: {And then Cyphre hacked it to make the cells all move around dynamically in the context entry. ;^^)}
    sent: "2016-07-16T19:38:57.995Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8d4f9f79ee4f2bc61e06"
    text: "well, it was just a wild idea."
    sent: "2016-07-16T19:38:55.495Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a8d31196179690eee2ec2"
    text: {I think the spreadsheet is a great killer app. If you recall, the old Nano-Sheets project had complete I/O built in.}
    sent: "2016-07-16T19:38:25.023Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8cf73cb52e8b24ce002e"
    text: {I'm with you Petr. My guerilla plan is to use Ren as the wedge. Markdown has opened the door. Create easy-to-consume data, likely including a DLL or static LIB that does the loading.}
    sent: "2016-07-16T19:37:27.871Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8c7a196179690eee2ae0"
    text: {I do think that's one way to market Red though. We have LOP, and POLs, Dialects and DSLs, but none of them have been designated as a new paradigm. e.g., everything is an object in OO, everything is a function in functional. Everything is a dialect, from `do` down, is our paradigm.}
    sent: "2016-07-16T19:35:22.446Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8c21196179690eee2a28"
    text: {If we can't rulenthe world with Rebol, extracting parse could do it. You see json? Well, it coul output data in REN :-)}
    sent: "2016-07-16T19:33:53.593Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "578a8bfdd11cd2881232e7fe"
    text: "Sometimes I wonder if I *over*use it. :^^\"
    sent: "2016-07-16T19:33:17.039Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8bdc196179690eee29bd"
    text: "Parse is an underused gem imo ..."
    sent: "2016-07-16T19:32:44.009Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a8bb1196179690eee272c"
    text: {A universal data translator, with parse rules as plug-ins? I like it.}
    sent: "2016-07-16T19:32:01.795Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8b953c5129720e3ec8d2"
    text: {I mean, wrappimg parse into parse.exe, giving it piping, grep like functionality, manual and ability to load and switch dialects as modules. Could be a killer app? :-)}
    sent: "2016-07-16T19:31:33.236Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a8b558423d0842445f079"
    text: "Anything can be done with `parse`. ;^^)"
    sent: "2016-07-16T19:30:29.234Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8b438423d0842445f048"
    text: {I was lately thinking, if somethimg like Munge could be done with Parse?}
    sent: "2016-07-16T19:30:11.974Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578a8b41d11cd2881232de2c"
    text: {I'll send you the code. My guess is that a simple example or two would be enough to get you going.  I'll include the original DLL source as well. I think %red/runtime/simple-io.reds uses a COM interface for HTTP reads. }
    sent: "2016-07-16T19:30:09.951Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8a7e9f79ee4f2bc5f1b9"
    text: {`Munge` is well-loved, and well-supported. Ashley always does outstanding work. It it strictly for manipulating tabular data. That means you have to do the work of getting it in and out of Excel, but also makes it much more general, which is great.}
    sent: "2016-07-16T19:26:54.653Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a88f4e4375c9212f32529"
    text: {@greggirwin  I currently have Excel 2010 and 2000 loaded. Would appreciate the opportunity to play with it. Do you think someone with limited abilities in Redbol like myself would be able to port COM to Red/System? Also, what is your take on Ashleys'  'Munch' script?}
    sent: "2016-07-16T19:20:20.318Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "578a85c53cb52e8b24cdc39c"
    text: {It also used a routine dialect I wrote, to make it easier to write the FFI part in R2.}
    sent: "2016-07-16T19:06:45.342Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8588e4375c9212f30b38"
    text: {Writing the COM part in Red/System, so it's "deep Red", would be great. I don't have a current Excel here to experiment with, but if someone wants to do that, I'll get them the code.}
    sent: "2016-07-16T19:05:44.272Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8502914c51592b2a1915"
    text: {You could DO Rebol code within it, of course, and dialect commands like: `alerts [on off], cut/copy/paste, cut/copy to <cell>, insert new books or sheets, paste [value formula format comment], remove sheets, save/save-as,  select/set [cell row col range]`}
    sent: "2016-07-16T19:03:30.993Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8427d11cd2881232893c"
    text: {The dialect looked like this:^/```^/excel [^/^-start^/^-show^/]^/^/foreach file files [^/^-if %.xls = suffix? file [^/^-^-excel compose [^/^-^-    open (join path file)^/^/^-^-    goto worksheet 1 goto cell "A1" set value to "Company Name"^/^-^-    goto worksheet 4 goto cell "A1" set value to "Destination"^/^/^-^-    goto cell "B2" set value to "=A1"^/^/^-^-    close workbook^/^-^-]^/^-]^/]^/^/excel [quit]^/```}
    sent: "2016-07-16T18:59:51.077Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a8381914c51592b2a04dd"
    text: {I found the original, from 2004. There is a DLL written in PowerBASIC, that wrapped the COM calls, so I could write routines in R2 to call them, with a dialect over that. Looks like there were about 25 commands mapped. Robert Muench, of Saphirion, used this to automate a bunch of spreadsheet processing, so it only included what he needed for that.}
    sent: "2016-07-16T18:57:05.764Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a7cce3cb52e8b24cd70ed"
    text: {@dsgeyser @canyonblue77 , I think the lambda site just showed some dialect examples. Not sure why it's down.  I'll see if I can track down the original. It used the COM interface to Excel, so was version specific.}
    sent: "2016-07-16T18:28:30.446Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578a6fe48423d0842444c15a"
    text: {@canyonblue77 Thanks for the kind words. ;-) About 0.6.1, it's already pretty good, but 0.7.0 will really feel more like a 1.0 with all the I/O implemented and a (simple) GC.}
    sent: "2016-07-16T17:33:24.893Z"
    editedAt: "2016-07-16T17:41:36.866Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578a6e95196179690eed0704"
    text: {Thanks @dockimbel ! Red is amazing work and it's happening so fast too!! Every time I check in on Red there are major advances. I definitely concur with the sentiment posted elsewhere that your version ~0.6.1 seems so much closer to a version 1.0 than other languages that are under development. }
    sent: "2016-07-16T17:27:49.980Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578a6ab93cb52e8b24ccbc05"
    text: {I could have use any valid word instead of `->` for naming the infix function.}
    sent: "2016-07-16T17:11:21.197Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578a6a9b3cb52e8b24ccbbb5"
    text: {@canyonblue77 For creating an infix function, you need to make a prefix function with 2 arguments first:^/```lisp^/make-range: function [a [integer!] b [integer!]][^/^-collect [i: a - 1 until [keep i: i + 1 i = b]]^/]^/->: make op! :make-range^/^/2 -> 7^/== [2 3 4 5 6 7]^/```}
    sent: "2016-07-16T17:10:51.570Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578a68833cb52e8b24ccafdf"
    text: {On a separate note, can anyone provide an example of (or let me know if it's even possible) to define your own infix operator in Red? Thanks!!}
    sent: "2016-07-16T17:01:55.454Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578a67c2e4375c9212f1ed26"
    text: {@greggirwin Really interested in your Excel DSL, link seems to be broken though...^/"""Warning: mysql_connect() [function.mysql-connect]: Lost connection to MySQL server at 'reading initial communication packet', system error: 113 in /home/ltu/www/includes/database.mysql.inc on line 31^/ Lost connection to MySQL server at 'reading initial communication packet', system error: 113"""}
    sent: "2016-07-16T16:58:42.305Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578a5afb3cb52e8b24cc0e10"
    text: "You're welcome. ;-)"
    sent: "2016-07-16T16:04:11.129Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578a3ee38423d0842442791d"
    text: {Thank you to the both of you. This is truly a great community. Feels like family .}
    sent: "2016-07-16T14:04:19.141Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "578a18ffd11cd288122e56c6"
    text: {@dsgeyser Check out @greggirwin's cool [Excel DSL](http://lambda-the-ultimate.org/node/1240) which allows you to remote control an Excel spreadsheet.}
    sent: "2016-07-16T11:22:39.218Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578a114fe4375c9212ee8349"
    text: {@dsgeyser The most up-to-date Rebol "Excel" library is [Ashley Trüter's Munge](http://www.dobeash.com/munge.html). Ashley is highly regarded in the Rebol community. I think that he and others use it daily including @endo64.}
    sent: "2016-07-16T10:49:51.546Z"
    editedAt: "2016-07-16T10:52:20.975Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "578a0f923cb52e8b24c8dd0a"
    text: {Anyone knows whether there is a dialect for Excel, and is it still working? Also, download link, if possible. I need it to learn Red (to port), would be really great. Thanks}
    sent: "2016-07-16T10:42:26.791Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5789ddb29f79ee4f2bbfb4ca"
    text: {`Rejoin`will be in 0.6.2, and the automated builds should have it. And, yes, the "re" in the name is for "reduce".  Rebol also has `remold` and `reform`. The tough design work is finding better names. The old names are important for porting from Rebol.}
    sent: "2016-07-16T07:09:38.294Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57898444914c51592b207918"
    text: "@pekr, apologies for wrong reference "
    sent: "2016-07-16T00:48:04.885Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578982b3d11cd28812296d19"
    text: {Sorry @RnBrgn, I meant to refer to you about append working good for strings but not vars}
    sent: "2016-07-16T00:41:23.502Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "5789815a196179690ee4d506"
    text: {Both of those work... which I guess is why the rejoin function would be what I'm looking for??? Regardless of the name my understanding of the rejoin function is that itreduces variables before joining them together?}
    sent: "2016-07-16T00:35:38.392Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57898109196179690ee4cd98"
    text: {```^/append "" reduce [ varA varB varC ]^/trim/all form reduce [ varA varB varC ]^/```}
    sent: "2016-07-16T00:34:17.359Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578980dad11cd28812295d1f"
    text: "'''"
    sent: "2016-07-16T00:33:30.227Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578980d2d11cd28812295d11"
    text: {so rejoin is not in 0.6.1 but is coming soon? And @pekr the append works good when the series values are actual strings... but not so much for when they're variables also the example I came up with has the same issue. I did figure out that if I add reduce to both of them that I get the desired result.}
    sent: "2016-07-16T00:33:22.629Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57891cae3cb52e8b24c0254d"
    text: {In compiled code, somethimes I get the errors printed, sometimes not, is there a rule? Maybe if it runs interpreted vs native ? thx! }
    sent: "2016-07-15T17:26:06.970Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5788f8c7e4375c9212e40b59"
    text: {may be some refinements can be added to `FORM`, put extra space between values or not, using a delimiter, forming `none` to empty string etc.^/Not having any option/refinement for `FORM` is making it less useful, and we all write our own string functions similar to each other's.^/Better switch to red channel.}
    sent: "2016-07-15T14:52:55.217Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5788f4c33cb52e8b24bdbcb8"
    text: {I never liked the name `ajoin`. My other issue is that we have a number of different functions that are similar but not identical, and all very closely named. And there is nothing in the name `ajoin` to tell you what's different about its behavior. ^/This is one I haven't tackled in a unifying way, like I've done with `round`, `split`, and my `for` proposal. I have separate funcs I combine to do things. For example, I have  a `delimit` func that works on any series type, so I can do that, then `rejoin`, but I also have specialized dlm str funcs for things like building CGI or other dict-style strings with field and rec separators.^/We want verbs as function names, to denote action, but we do have `object` now, which I like. What if we had `string` (string these things together), which also implies the return type? One concern is confusion by overloading the word string too much. More thought required.}
    sent: "2016-07-15T14:35:47.399Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788f2ed196179690ede567f"
    text: {@DarioX1973_twitter  I guess it depends on where and how you use the append function. If you're  running the statement just once, than you wouldn't necessarily need `copy`.^/If it's part of a function or loop, than you'll most likely need to use `append copy`.   }
    sent: "2016-07-15T14:27:57.911Z"
    editedAt: "2016-07-15T14:34:43.860Z"
    v: 3
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5788f00a8423d0842435bcfa"
    text: {@pekr, you're right, it's only in recent sources.^/```^/rejoin: func [^/    "Reduces and joins a block of values." ^/    block [block!] "Values to reduce and join"^/][^/    if empty? block: reduce block [return block] ^/    append either series? first block [copy first block] [^/        form first block^/    ] next block^/]^/```}
    sent: "2016-07-15T14:15:38.604Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5788eaefd11cd28812228a2f"
    text: {@RnBrgn Great, i never see it before .... perhaps is better add a copy (append copy "" ["A" "B" "C" "D"]) or it is not necessary?}
    sent: "2016-07-15T13:53:51.558Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5788de43196179690edd4e21"
    text: {@canyonblue77   `append ""  ["A" "B" "C" "D"]`}
    sent: "2016-07-15T12:59:47.725Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5788d7e2196179690edd01f3"
    text: {I agree with  @SteeveGit , I mostly need to concat blocks into strings without putting space between values as in `FORM` and usually don't need the `REJOIN`s behaviour, so I use `ajoin` mostly.^/What could be a better name? So we can have it on Red and make `ajoin` just an alias for compatibility.}
    sent: "2016-07-15T12:32:34.315Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "578892f188a3ed5b58bb6955"
    text: {Yes, rejoin is more versatile. But in the most use cases, coders just want an output string!.}
    sent: "2016-07-15T07:38:25.742Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5788927f4db4a6900bfca1ca"
    text: {@SteeveGit `ajoin` is good function, but `rejoin` can do much more:^/```^/>> ajoin [%a %b]^/== "ab"^/>> rejoin [%a %b]^/== %ab^/```}
    sent: "2016-07-15T07:36:31.621Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5788924e141a2f8a6b9a2ba2"
    text: "Though, the name is quite bad."
    sent: "2016-07-15T07:35:42.251Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578891d38aff7d5472007d14"
    text: {Personnaly, I prefer **ajoin** from Rebol3. Less overhead than **rejoin**.^/http://www.rebol.com/r3/docs/functions/ajoin.html^/}
    sent: "2016-07-15T07:33:39.710Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578890d588a3ed5b58bb665e"
    text: ""
    sent: "2016-07-15T07:29:25.762Z"
    editedAt: "2016-07-15T07:29:33.630Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578869043c5129720e280f83"
    text: {Was rejoin in 0.6.1, or is that just in recent sources? That could be state too, so that user is not eventually confused :-)}
    sent: "2016-07-15T04:39:32.215Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578866f33c5129720e27f8e1"
    text: {Red does have `rejoin` now, though the implementation is probably subject to change.}
    sent: "2016-07-15T04:30:43.714Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578850fed11cd288121c1a18"
    text: {In above case, you would have to add repend function too ...}
    sent: "2016-07-15T02:57:02.009Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578850b88423d084242ec7e9"
    text: {quite short, should work with Red too, but haven't tried ....}
    sent: "2016-07-15T02:55:52.262Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "578850a9e4375c9212dcb08d"
    text: {you can add such function yoursel. Just look into R2 source code:^/```^/>> source join^/join: func [^/    "Concatenates values."^/    value "Base value"^/    rest "Value or block of values"^/][^/    value: either series? :value [copy value] [form :value]^/    repend value :rest^/]^/```^/}
    sent: "2016-07-15T02:55:37.635Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57885033196179690ed74a38"
    text: {That's cool! Look forward to the built-in join function, totally realize what a huge undertaking Red is... thanks for being there to help it happen.  For now a join function could be made from trim and form will work just as nice :)}
    sent: "2016-07-15T02:53:39.444Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57884f96e4375c9212dca44b"
    text: "code :+1: "
    sent: "2016-07-15T02:51:02.622Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57884f893cb52e8b24b6573c"
    text: {```^/and a code block^/^/```^/^/}
    sent: "2016-07-15T02:50:49.704Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57884f5a3c5129720e27333d"
    text: {Hey thanks for the replies!!! ```attempt to write a code line```  }
    sent: "2016-07-15T02:50:02.778Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57884f213cb52e8b24b64f3e"
    text: {Apart from that, join/rejoin are not there yet, that's all. As for me, I don't like the automatic addition of spaces too, and I am glad that we did get rid of that with parse for eg. too ... it's my old time gripe with Rebol ... but others will not agree with me ....}
    sent: "2016-07-15T02:49:05.276Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57884ee79f79ee4f2baef096"
    text: {@canyonblue77 @dockimbel has not yet decided on how best to implement functions such as ```join``` and ```rejoin```  so they are yet to be implemented.^/^/Your code tags didn't really work as you wanted. For code, type 3 consecutive ` then the code and then another 3 . If you want a full code block, start a new line after the first 3.}
    sent: "2016-07-15T02:48:07.573Z"
    editedAt: "2016-07-15T02:49:36.719Z"
    v: 4
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57884edf9f79ee4f2baef077"
    text: {Hostilefork took R3 open source code and started to clean it, later on to adapt it. He introduced some underlying changes, which some old time rebollers don't agree with. His language is called Ren-C, not Rebol anymore, although those changes might be sometimes subtle. He does not like some Rebol naming, so is renaming some function. Not sure, what does he mean by "rejoindre", but he sometimes reffers to Dockimbel copying wrong design decision of R2. That's his opinion and not an universal truth :-)}
    sent: "2016-07-15T02:47:59.107Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57884d3b9f79ee4f2baee069"
    text: "*hostilefork blog"
    sent: "2016-07-15T02:40:59.667Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "57884d0e3cb52e8b24b63643"
    text: {The following words [  join rejoin combine ] return an error of "word has no value"    The guides for rebol mention some of them and there is a hostilefork that mentions them in context of Red, and even references DocKimbel pointing out that "rejoindre" is the French word for join. Were they removed or otherwise purposely excluded from Red, were they determined to be duplicative of other functions or  possibly missing due to a bug in the current release? Just generally curious... my original question stemmed from attempting to combine strings without spaces... turn [ "A" "B" "C" "D" ] into "ABCD"    I finally settled on `code` trim/all form ["A" "B" "C" "D"] `code` is this a good method, is there a better way? Not sure if I did the code tag correctly... hope so!!!}
    sent: "2016-07-15T02:40:14.709Z"
    v: 1
    author: "578849c1c2f0db084a230f54"
) #(
    id: "578666f9e4375c9212c527e6"
    text: "Thanks, i will not abuse and will study it."
    sent: "2016-07-13T16:06:17.213Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57866529196179690ebece7f"
    text: {It is a bit much right now Dario. I have to jump off and do some paying work. But if you look at http://www.red-lang.org/2013/11/041-introducing-parse.html and maybe some Rebol parse docs, start small, and work your way up, I'm sure `parse` will make sense to you soon.}
    sent: "2016-07-13T15:58:33.118Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5786645ce4375c9212c4ffc2"
    text: {Eh eh, here is  your nighmare Gregg ... if i want a series of words to find ... not only a certain numbers of them, is it too much complicated?^/How you modify your script in these case?^/^/```^/;i dont' want only 2 words, but how many words i want to find^/^/;word-1: "giornata" ^/;word-2: "sole" ^/^/words-to-find: ["today" "beautiful" "hot"] ; a series of near each other words to find ^/^/max-distance: 8^/sep: charset " !,.^^/"^/^/^/; this is the text where to find into^/; in this text the matches should be:^/;     today is a great beautiful day, with hot^/;     today, what beautiful hot^/^/s: {^/^-Really ... today, i can say that today is^/    a great beautiful day, with hot weather, and i go^/^-out to do something.^/^-Very hot, yes.^/    Hot, this today.^/^-I like a beautiful day, as today.^/^/^-Really ... today, what beautiful hot day!^/^-out to do something.^/^-Very hot, yes.^/    Hot, this today.^/^-I like a beautiful day, as today.^/}^/^/^/^/parse s [^/    any [^/        to word-1 mark-1: word-1 sep^/        ;(print index? mark-1)^/        [copy text to word-2 word-2 mark-2: (^/            ;(print [tab index? mark-2])^/            n: 0^/            parse text [space (n: n + 1) | skip]^/            if n < max-distance [^/                print ["Close words found at offset" index? mark-1 mold copy/part mark-1 mark-2]^/            ]^/        )  | to end]^/    ]^/]^/```^/^/}
    sent: "2016-07-13T15:55:07.973Z"
    editedAt: "2016-07-13T15:55:29.363Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57865db08423d0842415baa1"
    text: "Thanks for stepping in @pekr!"
    sent: "2016-07-13T15:26:40.464Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57864fc89f79ee4f2b94f0ff"
    text: {Of course, of course. I perfectly understand. i will return with simple examples ... now i learn Red basics. :smile: }
    sent: "2016-07-13T14:27:20.134Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57864ebc196179690ebd5fe6"
    text: {This is a complex stuff and goes beyond the simple help. Would consume much of the time. We can help with some parse or GUI alghoritms, but to close such app would require a significant effort ....}
    sent: "2016-07-13T14:22:52.980Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57864b673c5129720e0d8bc4"
    text: {the importat key is that the words you looking for, must be distant in range of words, so you can find the points of the texts you don't remeber where are, buy searching for two or more significant words (or part of them)}
    sent: "2016-07-13T14:08:39.896Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57864a53e4375c9212c29c53"
    text: {sorry, it's all in italian language ... but the concept of searching and display the words of own biblioteque, i think is clear}
    sent: "2016-07-13T14:04:03.842Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578649e23cb52e8b249bdffc"
    text: {mmmmm ... i had a project ... when i was young (i am kidding) ... this one:^/^/perhaps you understand me if you see it directly:^/http://textre.altervista.org/video.php^/^/please, don't go in the source files ... they are unreadable .... remember that as italian I am entitled to write spaghetti code :-D^/^/So, i want to arrive to have the same program, but in a simple way, because do it in python and freepascal and crossplatfoms has been not simple ...^/ ^/}
    sent: "2016-07-13T14:02:10.062Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578644fe1ca34a944e0efe3d"
    text: {searching for the distance of a variable amount of word pairs might be more complex ...}
    sent: "2016-07-13T13:41:18.668Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578644cb7aeb080527c9c09f"
    text: {we would have to see your examples in Python. Or even better - what is in fact requested.}
    sent: "2016-07-13T13:40:27.073Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578643a9064f82870730a722"
    text: {another thing: in the example i find 2 words, but many times i look for more words, but again the must be close to each others ... how i can modify the greg program? i still yet don't understand well ... i dont' now where put my hands ... but i would like to compare benchmarks with other staff i made in python ... }
    sent: "2016-07-13T13:35:37.767Z"
    editedAt: "2016-07-13T13:36:31.443Z"
    v: 3
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57864336b79455146fb290ae"
    text: "great! :clap: "
    sent: "2016-07-13T13:33:42.436Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5786431c3eaf66535e965b4c"
    text: "wow, it works now ... "
    sent: "2016-07-13T13:33:16.321Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578641ca1ca34a944e0ed4c6"
    text: {First fix is - fix the separator by: `sep: charset " ,.^^/"` ... and continue playing ....}
    sent: "2016-07-13T13:27:38.679Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578641a3c9b49c1d6f252341"
    text: {Look at what `s`is: `^{^^/    Oggi è una bella giornata^^/ ....`}
    sent: "2016-07-13T13:26:59.456Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578641763eaf66535e964a4d"
    text: {When I try to extend the `n: n + 1 print n`, you can see, it will never get there. It will fail sooner ...}
    sent: "2016-07-13T13:26:14.154Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57863fb13eaf66535e96358a"
    text: {Hello Greg, i have modified your program in this way, changing the 2 words and creating a little text so it will be more clear to me to understand.^/Why i get false after executing the script? i thought to have true because "giornata" and "sole" are distant by only 2 words ...^/^/```^/word-1: "giornata" ^/word-2: "sole" ^/max-distance: 5^/sep: charset " ,."^/^/^/; this is the text where to find if it contain "giornata" close to "sole"^/s: {^/^-Oggi è una bella giornata^/^-di gran sole, e me la ^/^-spasso fuori!^/}^/^/parse s [^/    any [^/        to word-1 mark-1: word-1 sep^/        ;(print index? mark-1)^/        [copy text to word-2 word-2 mark-2: (^/            ;(print [tab index? mark-2])^/            n: 0^/            parse text [space (n: n + 1) | skip]^/            if n < max-distance [^/                print ["Close words found at offset" index? mark-1 mold copy/part mark-1 mark-2]^/            ]^/        )  | to end]^/    ]^/]^/```^/}
    sent: "2016-07-13T13:18:41.542Z"
    editedAt: "2016-07-13T13:19:23.007Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57863eeec9b49c1d6f24f26f"
    text: ""
    sent: "2016-07-13T13:15:26.144Z"
    editedAt: "2016-07-13T13:16:10.925Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578574ac7aeb080527c07795"
    text: {Mmm it seems difficult to me ... i will try tomorrow at office. It's not time to sleep now in italy. Thank you very much, Greg.}
    sent: "2016-07-12T22:52:28.839Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5785745d064f82870727e3bd"
    text: {Ok, perhaps the next time i'll enter in gitter i will see the help room correctly.}
    sent: "2016-07-12T22:51:09.056Z"
    editedAt: "2016-07-12T22:51:26.587Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57855878b79455146fa863c7"
    text: {@DarioX1973_twitter, here's a very quick hack on your word distance problem.^/```^/word-1: "Troia" ^/word-2: "Grecia" ^/max-distance: 5^/sep: charset " ,."^/^/parse s [^/    any [^/        to word-1 mark-1: word-1 sep^/        ;(print index? mark-1)^/        [copy text to word-2 word-2 mark-2: (^/^-        ;(print [tab index? mark-2])^/            n: 0^/            parse text [space (n: n + 1) | skip]^/            if n < max-distance [^/                print ["Close words found at offset" index? mark-1 mold copy/part mark-1 mark-2]^/            ]^/        )  | to end]^/    ]^/]^/```^/Just to give you an idea of one way to do it.}
    sent: "2016-07-12T20:52:08.097Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5784f4ef59cfbd4c5e88a721"
    text: "Thank you"
    sent: "2016-07-12T13:47:27.961Z"
    v: 1
    author: "57369493c43b8c601972d80b"
) #(
    id: "5784f4aa1ca34a944efec536"
    text: {red>> s: "text"^/== "text"^/red>> s^/== "text"^/red>> unset [s]^/red>> s^/*** Script Error: s has no value}
    sent: "2016-07-12T13:46:18.914Z"
    v: 1
    author: "57369493c43b8c601972d80b"
) #(
    id: "57847270bdafd191076ea9be"
    text: {Actually, `unset` can take a block of words, so the `foreach` loop is not necessary;}
    sent: "2016-07-12T04:30:40.148Z"
    editedAt: "2016-07-12T04:31:15.265Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57846ba1c9b49c1d6f0dc494"
    text: {Here is an attempt at a function which would clean the states after running user code. It won't reclaim allocated memory though. It needs to be called once before any user code, as it can't clear past its first invocation.^/```lisp^/reset: function [][^/^-if zero? first ref: [0][ref/1: length? words-of system/words]^/^-foreach w at words-of system/words ref/1 [unset w]^/^-system/view/debug?: system/reactivity/debug?: off^/^-clear-reactions^/^-system/view/auto-sync?: on^/]^/```}
    sent: "2016-07-12T04:01:37.298Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5784684d3eaf66535e7f6363"
    text: {there is no GC in Red yet, but something like that might come. IIRC, even R3 planned something like that and provided some isolated boot phases, reset of the state of the interpreter, but can't remember, how far it went before it was abandoned by its author}
    sent: "2016-07-12T03:47:25.648Z"
    editedAt: "2016-07-12T03:47:39.156Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5784666f59cfbd4c5e82209d"
    text: {Has there been any thought about a console command to clear memory?  Interpreting more than one program from the console without restart has assignments carrying forward.}
    sent: "2016-07-12T03:39:27.616Z"
    v: 1
    author: "57369493c43b8c601972d80b"
) #(
    id: "57839455064f8287070f3d8c"
    text: {Very cool. Are you using a `base` face and building a splitter style on that?}
    sent: "2016-07-11T12:43:01.569Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578349bf7aeb080527a474bd"
    text: "@ralfwenske Nice work!"
    sent: "2016-07-11T07:24:47.992Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5782d695064f828707071045"
    text: {@greggirwin Learning is much more effective for me by doing things. When coding I find myself often being sidetracked by searching for and digging through the countless resources (websites / sample codes).^/So I thought this is a good challenge to develop an IDE in Red becoming a 'one stop place with integrated help, templates and examples. Allowing myself to add and change features as I go along.^/I want the IDE to resize faces when the window is being resized. Templates will be part of the IDE and so now I am developing a simple three column face which also allows to use dragging to hide and unhide the left and right columns.^/Next step will be a similiar template with rows.^/^/A six-pane template will contain the columns embedded in the center face of the rows which I want to use as the base for the IDE...^/^/now how do I embed an image here?^/!https://github.com/ralfwenske/images/blob/master/RedExplorer.JPG?raw=true}
    sent: "2016-07-10T23:13:25.735Z"
    editedAt: "2016-07-10T23:20:23.357Z"
    v: 2
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5782417b064f828707009cf4"
    text: {@ralfwenske, what is it you're actually trying to achieve?}
    sent: "2016-07-10T12:37:15.975Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5781faf2bdafd19107517052"
    text: {@ralfwenske No need, the face will be refreshed automatically by default. Your code above is fine, not interfering. ;-)}
    sent: "2016-07-10T07:36:18.976Z"
    editedAt: "2016-07-10T07:37:22.615Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5781ef6559cfbd4c5e65c2da"
    text: {btw. Main purpose for me is playing with perceived gaps (eg.resizing) to learn. I guess these will probably become part of Red GUI later on anyway...  ^/I am aware that in a way I am interfering with the workings of the GUI. :sparkles: }
    sent: "2016-07-10T06:47:01.630Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5781ee4e1ca34a944edbcca8"
    text: {@dockimbel I guess in this case I would call 'show' after manipulating offset and/or size values of faces?}
    sent: "2016-07-10T06:42:22.142Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5781edaab79455146f80ac67"
    text: {@ralfwenske Probably not. Those early resize events are unwanted, but Windows does weird things on creating a GUI components, so those events will proably be filtered out in the future.}
    sent: "2016-07-10T06:39:38.470Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5781e0cb3eaf66535e632f91"
    text: {@dockimbel Will the on-appear happen before the second (initial) on-resize happens? For my purpose (resizing window and automatic panel resizing) it would be desirable.}
    sent: "2016-07-10T05:44:43.775Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5781dfd71ca34a944edb7096"
    text: {@dockimbel That's great. Thank you.^/Doing it in on-resize works but it is not a very transparent solution. }
    sent: "2016-07-10T05:40:39.553Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5781df043eaf66535e632710"
    text: "I'll see if we can add such feature today."
    sent: "2016-07-10T05:37:08.647Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5781ddbec9b49c1d6ff0d914"
    text: {@ralfwenske `on-create` is really meant to be called before the system GUI resources are allocated, and parents setting needs to happen after that. What is really missing is a `on-appear` handler which would be called just after the face is fully created and displayed for the first time.}
    sent: "2016-07-10T05:31:42.895Z"
    editedAt: "2016-07-10T05:31:55.578Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5781dca8bdafd191075079ce"
    text: {@ralfwenske Use triple backquotes instead of single ones.}
    sent: "2016-07-10T05:27:04.822Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5781d92a7aeb08052795b7ac"
    text: {@dockimbel Is there a particular reason for this? The children (pane) are set; couldn't the parent be set at that time also?}
    sent: "2016-07-10T05:12:10.127Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5781d8ad064f828707fcb38a"
    text: {How do I enforce a linefeed in the 'code' section of markup?}
    sent: "2016-07-10T05:10:05.604Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5781d8573eaf66535e63011c"
    text: {on-resize gets called twice before layout is shown.^/At the second call parent is set so I can traverse the tree up and down.^/```^/l: layout [title "Why no parent at 'on-create' time"^/^-p1: panel "p1" 220.220.220 [^/^-^-p2: panel "p2" 180.180.180^/^-^-p3: panel "p3" 180.180.180^/^-] on-create [help p1/pane/1/text help p1/parent]^/^-do [^/^-^-self/actors: make object! [^/^-^-^-on-resize: function [face [object!] event [event!]][^/^-^-^-^-print ["In on-resize: help p1"]^/^-^-^-^-either p1/parent [^/^-^-^-^-^-help p1/parent/text^/^-^-^-^-][^/^-^-^-^-^-print ["p1/parent is none"]^/^-^-^-^-]^/^-^-^-]^/^-^-]^/^-]^/]^/view/flags l [resize]^/```^/this code returns the following:^/`^/ In on-resize: help p1^/p1/parent is none^/p1/pane/1/text is a string! of value: "p2"^/p1/parent is a none! of value: none^/In on-resize: help p1^/p1/parent/text is a string! of value: "Why no parent at 'on-create' time"^/`}
    sent: "2016-07-10T05:08:38.990Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5781d75b7aeb08052795ab2f"
    text: {@ralfwenske `parent` property is only set when the faces are shown on screen, `on-create` is called just before that.}
    sent: "2016-07-10T05:04:27.407Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5781d73cb79455146f800c58"
    text: "After some experimenting I found a workaround:"
    sent: "2016-07-10T05:03:56.934Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5781cb957aeb0805279540dd"
    text: {I try to access parent of a panel in the on-create event:^/```^/l: layout [^/^-p1: panel "p1" 220.220.220 [^/^-^-p2: panel "p2" 180.180.180^/^-^-p3: panel "p3" 180.180.180^/^-] on-create [help p1/pane/1/text help p1/parent]^/]^/view l^/```^/the result is: ^/`^/p1/pane/1/text is a string! of value: "p2"^/p1/parent is a none! of value: none^/`^/How (when) can I access the parent property?}
    sent: "2016-07-10T04:14:13.083Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "5781caae064f828707fc5595"
    text: {Feeling much more comfortable to ask questions here :smile: }
    sent: "2016-07-10T04:10:22.017Z"
    v: 1
    author: "566f98de16b6c7089cbeb944"
) #(
    id: "578109371ca34a944ed32723"
    text: "I will. Back to programming now.  Later..."
    sent: "2016-07-09T14:24:55.889Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578108f17aeb0805278d70a7"
    text: {Keep us posted. You may get advice is you're stuck.}
    sent: "2016-07-09T14:23:45.830Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5781082659cfbd4c5e5c4cc8"
    text: {Hmmm. I have seen the code. It is way above my head. Try to find a simpler solution. Thanks.^/^/I have a table with valid utf-8 so i can detect which ones are invalid. ^/Have done only a part of it which came up with the invalid utf byte so it's promising}
    sent: "2016-07-09T14:20:22.897Z"
    editedAt: "2016-07-09T14:23:32.198Z"
    v: 4
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578107b7bdafd191074808ac"
    text: {%runtime/unicode.reds is where this loads, it seems. Look at `load-utf8-buffer`.}
    sent: "2016-07-09T14:18:31.821Z"
    editedAt: "2016-07-09T14:19:44.901Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57810710bdafd1910747fb75"
    text: {I sense your frustration. :^^) UTF isn't my area either. Remember that Red is only 0.6.1 old. We can help fix it and make it work how we want.}
    sent: "2016-07-09T14:15:44.677Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57810664064f828707f3e534"
    text: {I programmed a lot in other languages like freebasic and had never any problems reading files. ^/I think it is essential for a programming language to read files without errors^/It may sound a little bit harsh but that's not my intention}
    sent: "2016-07-09T14:12:52.593Z"
    editedAt: "2016-07-09T14:15:17.641Z"
    v: 5
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578105f21ca34a944ed30b71"
    text: {Yes, the func may have too broad a name, as it may have just been enough for Ashley's needs. Making it complete could be very good, along with a sanitizer that takes rules perhaps. And since Red throws an error, it knows. We can use the source.}
    sent: "2016-07-09T14:10:58.200Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57810572064f828707f3dc1d"
    text: {Aha. But did you get my point at red/red?^/ I wish i could make it clear that the function is not complete ^/I just found that the mentioned file has code hex 96 in it which is invalid but not detected by the function.^/ Am i right? I get very confused with the utf matter.}
    sent: "2016-07-09T14:08:50.610Z"
    editedAt: "2016-07-09T14:09:22.874Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "578104d3bdafd1910747e48e"
    text: {Ashely's used `find`. I just showed how to do it with `parse` to get the actual position of the first invalid char.}
    sent: "2016-07-09T14:06:11.828Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578104b11ca34a944ed2fef4"
    text: "All I have is the one you already have."
    sent: "2016-07-09T14:05:37.753Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5781049b064f828707f3daa0"
    text: "Can i get the code somewhere?"
    sent: "2016-07-09T14:05:15.243Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5781043c3eaf66535e5a0d9c"
    text: {@Rebol2Red (from red/red room), I just ported Ashley's func, which was obviously very simple. If you only need to test loadability, trapping the error may be best right now. Otherwise we need a good, concise, reference for sanitizing UTF-8 (or maybe any UTF). Not sure I have for that right now.}
    sent: "2016-07-09T14:03:40.128Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5780fb07c9b49c1d6fe77869"
    text: {Sorry, damned phone editing. Not easy to know if the problem you find is a bug or (most likely) lack of knowledge...}
    sent: "2016-07-09T13:24:23.553Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5780fa29f9cb022a33efd0a6"
    text: "@Phryxe feel free to ask"
    sent: "2016-07-09T13:20:41.212Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5780fa103eaf66535e59a087"
    text: {Is this the sandbox thread? Newbies like myself have questiob}
    sent: "2016-07-09T13:20:16.673Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
)