#(
    id: "59c54d04bac826f054eb05e3"
    text: "oh thank you so much :)"
    sent: "2017-09-22T17:48:52.502Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c54c27614889d4752b6f71"
    text: "`face/selected` returns in the index number."
    sent: "2017-09-22T17:45:11.570Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c54bec210ac269205ffa76"
    text: {```^/view [^/    text-list linen 250x350 font-size 16  data ["A" "B" "C"] [^/        ;bilgi/text: pick face/data face/selected^/        print face/selected^/   ]^/]^/```}
    sent: "2017-09-22T17:44:12.522Z"
    editedAt: "2017-09-22T17:44:34.473Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c54ba1bac826f054eaff8a"
    text: "@greggirwin  i look this, but i want index number"
    sent: "2017-09-22T17:42:57.589Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c5491a210ac269205feb37"
    text: {@abdllhygt, does this help: https://gist.github.com/greggirwin/c67d640f09e9ccd0dac0859ec7374ca3}
    sent: "2017-09-22T17:32:10.333Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c548cdcfeed2eb653cec0c"
    text: {@KimRoach143_twitter, Red isn't going to be ready for everyone's needs for a while. Certainly, it's not going to be DevExpress soon. If that's what you need, Red is probably not for you yet. Just keep an eye on us and, if you like Red, see where you *can* apply it effectively. }
    sent: "2017-09-22T17:30:53.099Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59c534af210ac269205f861c"
    text: {my code:^/``` ^/text-list linen 250x350 font-size 16  data rn/1 [^/        bilgi/text: pick face/data face/selected^/]^/``` }
    sent: "2017-09-22T16:05:03.522Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c5342c32fc8b7e402d1972"
    text: {@dockimbel  sorry, i don't understand this. can you show me?}
    sent: "2017-09-22T16:02:52.896Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c5280f210ac269205f482f"
    text: {@KimRoach143_twitter it is possible to write you own widgets using Draw dialect, that will work across all platforms in Red. I’ve written text table and graph widgets that may provide at least partial functionality of what you need.}
    sent: "2017-09-22T15:11:11.545Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c518cfc101bc4e3af85343"
    text: {@abdllhygt [`selected` facet](https://doc.red-lang.org/en/view.html#_text_list).}
    sent: "2017-09-22T14:06:07.318Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59c509761081499f1f5ef315"
    text: "How to get index of text-list?"
    sent: "2017-09-22T13:00:38.167Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c508ffbac826f054e9a63b"
    text: "Hi"
    sent: "2017-09-22T12:58:39.674Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59c4e98a7b7d98d30d25095d"
    text: {@pekr Please don't misunderstand me, but I was looking for UI controls and widgets like "devexpress" and that must be cross platform but it's not. That's why I was looking around on internet and stumbled upon red than I found out it is work in progress and there aren't any widgets that can do similar things like simple table with good GC or datagridview with excel like filters. Also I am very impressed by 1mb executable thing never in my life I have found something like that. I tried to do similar thing with rebol and its table but  it was not  as sophisticated like "devexpress" or other UI controls and widgets.}
    sent: "2017-09-22T10:44:26.666Z"
    v: 1
    author: "59c1121bd73408ce4f7666ce"
) #(
    id: "59c4e4ad177fb9fe7eeea9da"
    text: {The question is, if there is a need to wait. In some areas, Red might be already more stable than R2. As fir the funcionality, we have simple-io stack, which allows you to do basic networking. We've also got call, so you can interface with outer world too. In terms of the next version or two, we will get simple GC too ...}
    sent: "2017-09-22T10:23:41.331Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59c4e16fbac826f054e8efb8"
    text: {I have been doing some programming with red/rebol for last two days so far I like it. But After reading Roadmap and trello I think RED 1.0 will take at least more 3 years to complete and fully stable and that's very long time to wait.}
    sent: "2017-09-22T10:09:51.701Z"
    v: 1
    author: "59c1121bd73408ce4f7666ce"
) #(
    id: "59c2988fcfeed2eb65310cda"
    text: "@Oldes Oops... thank you."
    sent: "2017-09-20T16:34:23.099Z"
    v: 1
    author: "5632f77f16b6c7089cb8cfa0"
) #(
    id: "59c29009177fb9fe7ee429f2"
    text: "@Laily123 This is not  implemented yet. (in Red)"
    sent: "2017-09-20T15:58:01.118Z"
    editedAt: "2017-09-20T15:59:53.412Z"
    v: 3
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59c28e087b7d98d30d1a98c9"
    text: {hello, could someone tell me how to use send function. I tried `send aa@aa.com "123"` but failed}
    sent: "2017-09-20T15:49:28.777Z"
    v: 1
    author: "5632f77f16b6c7089cb8cfa0"
) #(
    id: "59c144e8bc4647297452c1b7"
    text: {last weeks were all about private `0.6.5` branch, now Doc and Co are back and try to push `0.6.4` a little, it's hard to do any estimation though}
    sent: "2017-09-19T16:25:12.984Z"
    editedAt: "2017-09-19T16:25:17.896Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c11ba97b7d98d30d139572"
    text: {thanks @pekr , @rebolek  than I will wait for future updates may be @dockimbel  can give some insight  :wink: }
    sent: "2017-09-19T13:29:13.142Z"
    v: 1
    author: "59c1121bd73408ce4f7666ce"
) #(
    id: "59c11a1c1081499f1f4d9379"
    text: {There are two branches - 0.6.4 and 0.6.5, Android. Those are developed in parallel, or that is how I understand the situation. Last few weeks, only 0.6.5 can see some progress though. But - Red Team does some development in some non-public repos too, so difficult to guess ...}
    sent: "2017-09-19T13:22:36.589Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59c119bdbc4647297451c7cd"
    text: {I believe as soon as possible ;) it's going to include Android GUI also, so it may take some time. Probably @dockimbel can give us some estimate}
    sent: "2017-09-19T13:21:01.544Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c1190dbac826f054d7c252"
    text: "any hint on when next release will be"
    sent: "2017-09-19T13:18:05.234Z"
    v: 1
    author: "59c1121bd73408ce4f7666ce"
) #(
    id: "59c118f5bac826f054d7c20f"
    text: {@KimRoach143_twitter then you probably need to wait for next release, it should include simple GC, that would vastly improve custom styles.}
    sent: "2017-09-19T13:17:41.852Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c11803cfeed2eb6529ca26"
    text: {@rebolek  My Requirement is very simple lots of data-driven tasks so I need table or datagridview or pivotview gui , And I am trying to migrate from windows to linux and mac so must be cross platform gui and red does that, that's  why I am interested.   }
    sent: "2017-09-19T13:13:39.629Z"
    v: 1
    author: "59c1121bd73408ce4f7666ce"
) #(
    id: "59c116a2210ac269204d1202"
    text: {@KimRoach143_twitter it depends on your requirements. Red is still alpha, but pretty stable IMO.}
    sent: "2017-09-19T13:07:46.449Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c1165cb59d55b823151089"
    text: {@rebolek Can I use red in my production workflow  I mean is it stable to use?}
    sent: "2017-09-19T13:06:36.257Z"
    v: 1
    author: "59c1121bd73408ce4f7666ce"
) #(
    id: "59c1156c177fb9fe7edd006e"
    text: {@KimRoach143_twitter I wrote `text-table` style that probably would fit your needs, but  I am waiting for GC with release, as it can get out of memory *really fast*}
    sent: "2017-09-19T13:02:36.081Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c11442bc4647297451a53f"
    text: {is there any plan for gui with datagridview in next release if yes when just found out about red full stack like it a lot}
    sent: "2017-09-19T12:57:38.554Z"
    v: 1
    author: "59c1121bd73408ce4f7666ce"
) #(
    id: "59c0e77f210ac269204c232f"
    text: {With `db/idx`, you are selecting value next to `idx` in `db`: `db: [1 2 3 idx 123] db/idx ; == 123`}
    sent: "2017-09-19T09:46:39.150Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c0e730177fb9fe7edc0c6e"
    text: "Try `db/:idx`"
    sent: "2017-09-19T09:45:20.196Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c0e723177fb9fe7edc0c3a"
    text: {@sptorin_twitter This room is exactly for elementary question so no need to be sorry!}
    sent: "2017-09-19T09:45:07.012Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c0e6fecfeed2eb6528c6f3"
    text: {Sorry for elementary question, but how I can use variable as index option for access subset of block? For example: `db: [1 2 3 4]`, `idx: 1`, `print db/idx` -  `none`. Need like `print db/1`.}
    sent: "2017-09-19T09:44:30.589Z"
    v: 1
    author: "59152d8dd73408ce4f5eeed0"
) #(
    id: "59c08337210ac269204a9419"
    text: {@sptorin_twitter On Unix systems, Red has a temporary dependency on libcurl, which itself has tons of dependencies. We will remove the libcurl dependency in 0.7.0.}
    sent: "2017-09-19T02:38:47.901Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59c00d28177fb9fe7ed84aaa"
    text: "You probably should exclude system libraries."
    sent: "2017-09-18T18:15:04.914Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59c008761081499f1f48e351"
    text: {BTW, when I compile to native under linux - ELF executable have a lot library dependencies (40 libs). It's normal? In description lang: "Produces executables of less than 1MB, with no dependencies"}
    sent: "2017-09-18T17:55:02.939Z"
    v: 1
    author: "59152d8dd73408ce4f5eeed0"
) #(
    id: "59c00709614889d475133e05"
    text: "I'm trying `map!`, nice key-value datatype."
    sent: "2017-09-18T17:48:57.737Z"
    v: 1
    author: "59152d8dd73408ce4f5eeed0"
) #(
    id: "59c005c5c101bc4e3ae14ee5"
    text: {it's a `block!` of `block!`s actually, we have dedicated `map!` datatype for fast read access}
    sent: "2017-09-18T17:43:33.760Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59c001b0cfeed2eb6524d066"
    text: "not exactly maps, but looks like it"
    sent: "2017-09-18T17:26:08.573Z"
    v: 1
    author: "59152d8dd73408ce4f5eeed0"
) #(
    id: "59c0017bc101bc4e3ae1357c"
    text: ":)"
    sent: "2017-09-18T17:25:15.481Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59c0006a210ac2692048316d"
    text: "@9214 - block of maps! it's work!"
    sent: "2017-09-18T17:20:42.525Z"
    v: 1
    author: "59152d8dd73408ce4f5eeed0"
) #(
    id: "59bfea13614889d47512924d"
    text: {@sptorin_twitter you mean this?^/```text^/>> db: [[name: "me" mail: ".org"][name: "not me" mail: ".com"]]^/== [[name: "me" mail: ".org"] [name: "not me" mail: ".com"]]^/>> db/1/name^/== "me"^/>> db/2/mail^/== ".com"^/```}
    sent: "2017-09-18T15:45:23.901Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59bfe9efbc464729744c0de9"
    text: {@sptorin_twitter  You don't always need to use block of blocks. You can use `sort/skip/compare` as well.   http://www.red-by-example.org/#sort}
    sent: "2017-09-18T15:44:47.382Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "59bfb654bac826f054d0e6bb"
    text: {Tnx. Really simple method - use block of blocks. Before I'm trying `person: make object! [ ... ]` and maps. May be exist path addressing block of blocks like `users/1/name` and `users/2/mail`? Now it looks `users/1/1` and `users/2/3`}
    sent: "2017-09-18T12:04:36.595Z"
    v: 1
    author: "59152d8dd73408ce4f5eeed0"
) #(
    id: "59bfafd1bc464729744aa057"
    text: {Sure you can, please check: http://www.rebol.com/docs/core23/rebolcore-7.html and http://www.rebol.com/docs/core23/rebolcore-6.html^/They are almost identical for Red as well.}
    sent: "2017-09-18T11:36:49.877Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59bfaeee7b7d98d30d0c7e98"
    text: {Hello. Can I organize data like flat table? With certain set of columns. With possibility to create new rows and modify existing. Like table "Users" with columns: "Login" "Name" "Mail" "Department"...}
    sent: "2017-09-18T11:33:02.984Z"
    v: 1
    author: "59152d8dd73408ce4f5eeed0"
) #(
    id: "59b7f94e210ac2692021688c"
    text: {Leave the complicated constructs like some/path/:get-word.  You're right there, too, it is good enough}
    sent: "2017-09-12T15:12:14.559Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b7f899c101bc4e3ab9f977"
    text: {Ok, you're right. Better to draw attention to a possible problem and return keyword. }
    sent: "2017-09-12T15:09:13.747Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b7c320c101bc4e3ab8ae39"
    text: {@gltewalt I made some corrections. I think you have to shift-refresh to load changes. `i` returning `text` while hovering over I didn't see. But whitespace (everywhere) neighbouring tokens shows `text`.^/And what to do with constructs like `some/path/:get-word` or `some/(to-word "string")/path` and the like? I think these should be leaved just as it is, not trying to accommodate every possibility, as this would become quite complicated. ^/One thing more: what to do with cases when keywords are used as set-words, that is redefined, as for example in `to-float: func [..][..]`. I think in such cases keyword should still be tagged as `keyword`, not as `variable.set-word`, to call attention to a possible problem. What do you think?}
    sent: "2017-09-12T11:21:04.035Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b79028cfeed2eb65fb6228"
    text: {Sorry, I see you have already tried different code samples :wink:}
    sent: "2017-09-12T07:43:36.934Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
)#(
    id: "59b78ca8cfeed2eb65fb5075"
    text: {@gltewalt Thanks for reviewing! I'll try to correct these misfits. The problem is there are only a handful of keywords to use that different themes would recognize. Some of my tags would not be recognized and therefore treated differently by themes. E.g. there is no `value` tag, not to mention `issue` or `refinement` or `datatype`. So I guess new themes are also needed for Red. To overcome this I have used several tags to at least let existing themes to color things somehow.  ^/As about `paren.lparen` and `paren.rparen`, this is how currently all languages seem to categorize `[{(` and `)}]`. I think folding functionality is connected to this. ^/BTW You can paste different code samples with varying keywords/datatypes to the document pane to test more tags. }
    sent: "2017-09-12T07:28:40.349Z"
    editedAt: "2017-09-12T07:38:01.349Z"
    v: 5
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b76121c101bc4e3ab6acad"
    text: "You deserve Red dollars"
    sent: "2017-09-12T04:22:57.745Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b7609f319100804e23e337"
    text: {hmm... hovering over `i` returns `text`instead of `variable.word` in something like:^/```^/apply: func [fn blk][^/    collect [foreach i blk [keep fn i]]^/]^/```^/^/And `[` `]` returns `paren.lparen` and `paren.rparen` -- not sure if that's expected}
    sent: "2017-09-12T04:20:47.908Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b75ecb210ac269201e2c87"
    text: {@toomasv ^/On compound "names" such as `get-col:`^/Mouse-over on `get-` portion returns `keyword`, while mouse-over on `col` returns `variable.set-word`^/^/Other than that, everything seems to be good as I play around with it. :+1: }
    sent: "2017-09-12T04:12:59.349Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b709361081499f1f1d1887"
    text: {Oh, except `refinement` comes back as `keyword`. Paths in code come back as `variable.path`, which seems right to me}
    sent: "2017-09-11T22:07:50.810Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b708a21081499f1f1d1553"
    text: {Just trying in the Document Pane in the Mode Creator -- works awesome so far. Hovering over tokens is returning the correct info so far}
    sent: "2017-09-11T22:05:22.285Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b706f4cfeed2eb65f8fe49"
    text: {I will have to dig into it tonight, and do some playing. ^/Thanks!}
    sent: "2017-09-11T21:58:12.667Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b6c8fe319100804e20fc51"
    text: {@gltewalt [Cloud9 syntax highlighter for Red](http://toomas.vooglaid.ee/ace/tool/mode_creator.html). Work in progress. Errata? Omissions? Suggestions?}
    sent: "2017-09-11T17:33:50.065Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b370dc66c1c7c4772ec7d9"
    text: "@gltewalt Thanks, I'll try"
    sent: "2017-09-09T04:41:00.674Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b35e7f614889d475d79933"
    text: {I tried their tool to convert tmLanguage file but it failed with WSH errors}
    sent: "2017-09-09T03:22:39.858Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b310f966c1c7c4772d773e"
    text: { Looks like it would be worth it to make an ACE Editor mode for Red. It's used by Cloud9, but also many other places:^/^/https://ace.c9.io/#nav=production^/}
    sent: "2017-09-08T21:51:53.543Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b2f100b16f2646421e0087"
    text: "@gltewalt Thanks!"
    sent: "2017-09-08T19:35:28.582Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b2f016614889d475d5f710"
    text: {I think, under the 'Defining Syntax Highlighting Rules' section, here:^/https://ace.c9.io/#nav=higlighter^/^/}
    sent: "2017-09-08T19:31:34.792Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b2e792162adb6d2e8039cd"
    text: {@gltewalt I haven't used Cloud9. Do you have a link where I can see what to do? }
    sent: "2017-09-08T18:55:14.628Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59b2d4bf162adb6d2e7fe292"
    text: {I'm not sure if he plans on parse to regex translation, but it would help for reducers who wish to use cloud9 but aren't into regex}
    sent: "2017-09-08T17:34:55.013Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b2d208162adb6d2e7fd583"
    text: {No I haven't used cloud9 as a daily driver for Red. Mainly because syntax hi-lighting is regex driven - but @toomasv has since done a lot of work with regex}
    sent: "2017-09-08T17:23:20.136Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59b2a9e2ee5c9a4c5f485fe4"
    text: "Right. Each model has different features. "
    sent: "2017-09-08T14:32:02.033Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a9ccb16f2646421ca22b"
    text: {in Erlang it's solved with `links`, one process can link to another and get a message that the second one died}
    sent: "2017-09-08T14:31:40.931Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a9b966c1c7c4772b923e"
    text: "well, yeah, that makes sense"
    sent: "2017-09-08T14:31:21.096Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a938210ac269200acc82"
    text: {A process could die for any reason. Say you have an indexing system. A tuple contains a url, processes consume that tuple, read the url, scan the content for urls, and write new tuples for each url found, and also another for indexing. If process A takes a tuple with a url, then dies while working, no other process will know that tuple existed, and everything downstream of that url won't be processed.}
    sent: "2017-09-08T14:29:12.754Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a8c1b16f2646421c9b06"
    text: {Each process can do what it wants. Some may consume just one message, others may be long running and consume in a loop. The original model also had an `exec` op, which is kind of like spawning in Erlang. You call `exec` and the engine spawns a processs, passing it the tuple you provided.}
    sent: "2017-09-08T14:27:13.698Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a884bc464729740daddc"
    text: {>is that the process which took it dies^/^/doesn't sound like an issue to me - maybe it died because of corrupted message}
    sent: "2017-09-08T14:26:12.828Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a843210ac269200ac888"
    text: {An issue with the tuplespace model, at least the original one, is that once a tuple is taken, it's gone from the space (the op is atomic). The risk, then, is that the process which took it dies before putting it back (if modifying) or writing a new tuple for another step in the chain. Modern system address that in various ways.}
    sent: "2017-09-08T14:25:07.505Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a83ebc464729740dacf8"
    text: {>you can have multiple processes matching on the same pattern^/^/How does this look like? You specify patterns and then run consume loop?}
    sent: "2017-09-08T14:25:02.229Z"
    editedAt: "2017-09-08T14:26:45.588Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a7e7b16f2646421c97b6"
    text: {Right, in the TS model, your thinking is reversed. The focus is more on the messages themselves, and modeling the data and its flow. If you've ever built a blackboard system, it's a lot like that.}
    sent: "2017-09-08T14:23:35.576Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a794b59d55b823d21e27"
    text: {interesting, in Erlang there are libraries to do that, basically they just forward messages to idle workers  }
    sent: "2017-09-08T14:22:12.679Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a71bcfeed2eb65e6dba7"
    text: {With a tuplespace, because any process can consume any message, you can have multiple processes matching on the same pattern. Automatic load balancing and redundancy. Then you can also add supervisor processes, as you would in Erlang, either to monitor spaces or processes themselves (likely using tuples).}
    sent: "2017-09-08T14:20:11.816Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a6b3c101bc4e3aa2ff7e"
    text: {once you have too many messages coming and process doesn't process them on time - it dies quite soon}
    sent: "2017-09-08T14:18:27.853Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a69d4e50cfde2719d2ef"
    text: {I'm asking because in Erlang it's one main issues - size of the mailbox}
    sent: "2017-09-08T14:18:05.035Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a672bc464729740da33a"
    text: "There is no perfect system. :^^)"
    sent: "2017-09-08T14:17:22.309Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a664162adb6d2e7ef540"
    text: {that's an interesting feature, though I can see many issues which can raise here}
    sent: "2017-09-08T14:17:08.805Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a63e614889d475d494c7"
    text: {Implementations vary. I'm just talking about the overall model.^/^/If nobody consumes them, it depends on the system. Some systems have "leases" that let things expire.}
    sent: "2017-09-08T14:16:30.609Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a60cee5c9a4c5f484cc5"
    text: "and what if nobody consumes them?"
    sent: "2017-09-08T14:15:40.393Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a5f8614889d475d49399"
    text: {Messages aren't destined for a specific process. Addressing is content based. So there is no "delivery", only a possibility that some process will come along and consume them.}
    sent: "2017-09-08T14:15:20.809Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a5e9162adb6d2e7ef266"
    text: {@greggirwin do programmers have control over it? what if a service died and now all the messages which should be delivered to it are going to be stored and eat all the memory?}
    sent: "2017-09-08T14:15:05.939Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a5aa66c1c7c4772b7d5c"
    text: {Yes, it is stored. That's "the space".}
    sent: "2017-09-08T14:14:02.372Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b2a5a5162adb6d2e7ef0f1"
    text: {>where Erlang processes all have to run on the VM^/^/in Erlang you spawn VM process which communicates with external things, like a proxy, so it's not an issue}
    sent: "2017-09-08T14:13:57.584Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a56aee5c9a4c5f484a51"
    text: {>With a tuplespace, tuples (not Red tuple!) are found by pattern matching^/^/Erlang has libraries for that^/^/>so processes can be temporally decoupled as well^/^/what happens with the message then? is it stored? where? does it get delivered to process later?}
    sent: "2017-09-08T14:12:58.535Z"
    editedAt: "2017-09-08T14:13:04.438Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2a512bc464729740d9d19"
    text: {The big difference is that in Erlang you send messages to a specific process, and that process has to be alive when you do. With a tuplespace, tuples (not Red `tuple!`) are found by pattern matching, and are persistent in the space, so processes can be temporally decoupled as well. Also, it naturally leads to the ability to write heterogeneous processes, where Erlang processes all have to run on the VM. That does mean that the processes are OS processes (normally). You can build a layer to handle them though. I think that's what Gigaspaces does on the JVM.}
    sent: "2017-09-08T14:11:30.575Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b254d8c101bc4e3aa194cb"
    text: {here's some detailed explanation: https://hamidreza-s.github.io/erlang/scheduling/real-time/preemptive/migration/2016/02/09/erlang-scheduler-details.html}
    sent: "2017-09-08T08:29:12.410Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b25488bac826f054926a57"
    text: {you listened to the course "Erlang in 5 minutes" :D}
    sent: "2017-09-08T08:27:52.181Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2545e4e50cfde27186c10"
    text: {but this creates overhead, of course and regular non-parallel code in Erlang is slower than similar in other languges}
    sent: "2017-09-08T08:27:10.815Z"
    editedAt: "2017-09-08T08:28:15.141Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b254328f4427b462e57a53"
    text: {which removes possibility of one process to hang whole group}
    sent: "2017-09-08T08:26:26.025Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2541dee5c9a4c5f46d8e0"
    text: {this allows to stop process at any given point, not only on specific IO operations like with the green threads}
    sent: "2017-09-08T08:26:05.064Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b253ec66c1c7c47729f4b7"
    text: {if it reaches some value scheduler got called and transfers control to another process}
    sent: "2017-09-08T08:25:16.946Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b253d54e50cfde2718690a"
    text: {each erlang process is a structure which has so called "reductions counter" and on any function/operation call it got increased}
    sent: "2017-09-08T08:24:53.591Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2533eee5c9a4c5f46d4bf"
    text: {concurrency model in Erlang is super good, but it has performance drawbacks. Basically Erlang doesn't use OS threads nor "green threads", it has it's own scheduler implemented in low level C code}
    sent: "2017-09-08T08:22:22.589Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b2464d614889d475d2e0ce"
    text: {except, maybe in Erlang processes namespace is flat, while from the description above you may have different object spaces}
    sent: "2017-09-08T07:27:09.970Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b24602614889d475d2dfdf"
    text: {this is exactly the description of Erlang's actors, every process is on object which belongs to process/"object" space and each of them is a service other processes can use via it's API requests}
    sent: "2017-09-08T07:25:54.096Z"
    editedAt: "2017-09-08T07:29:49.669Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59b245c666c1c7c47729b6ce"
    text: {@greggirwin I'm not sure what the Tuplespace model is, but from the wiki on Object Spaces:^/>Object Spaces is a paradigm for development of distributed computing applications. It is characterized by the existence of logical entities, called Object Spaces. All the participants of the distributed application share an Object Space. A provider of a service encapsulates the service as an Object, and puts it in the Object Space. Clients of a service then access the Object Space, find out which object provides the needed service, and have the request serviced by the object.}
    sent: "2017-09-08T07:24:54.162Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "59b22672b16f2646421a518e"
    text: {I think @gltewalt did the Cloud9 setup. Not sure if he's using it as a daily driver though.}
    sent: "2017-09-08T05:11:14.108Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1d86f66c1c7c47728145b"
    text: "http://www.mycode4fun.co.uk/red-apps"
    sent: "2017-09-07T23:38:23.465Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "59b1d5bb66c1c7c477280b18"
    text: "You're welcome!"
    sent: "2017-09-07T23:26:51.921Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1cb9066c1c7c47727e4d3"
    text: "I'll be sure to check that out, thanks! "
    sent: "2017-09-07T22:43:28.992Z"
    v: 1
    author: "598e4d9ed73408ce4f710f5f"
) #(
    id: "59b1c11f66c1c7c47727b73f"
    text: {There is a howto: https://github.com/red/red/wiki/Install-Red-in-Cloud9-IDE}
    sent: "2017-09-07T21:58:55.823Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1c0c0b16f26464218b439"
    text: "how would I do that?"
    sent: "2017-09-07T21:57:20.887Z"
    v: 1
    author: "598e4d9ed73408ce4f710f5f"
) #(
    id: "59b1c01f162adb6d2e7b3ba4"
    text: "Is anyone of you using Red in the Cloud9 IDE?"
    sent: "2017-09-07T21:54:39.821Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1bfa7210ac269200714df"
    text: "Godspeed!"
    sent: "2017-09-07T21:52:39.424Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1bf5ab16f26464218aafb"
    text: {Whatever it is in the end, I'm sure it will be great!}
    sent: "2017-09-07T21:51:22.730Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1be68614889d475d0c51f"
    text: "Interesting."
    sent: "2017-09-07T21:47:20.402Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1bdb24e50cfde27160afe"
    text: {I'm personally a fan of the Tuplespace model, especially in the context of a data and messaging oriented language.}
    sent: "2017-09-07T21:44:18.730Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1bd8d8f4427b462e31ef2"
    text: "Final concurrency model is TBD."
    sent: "2017-09-07T21:43:41.104Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1bd72bac826f054900b3c"
    text: {If an Erlanger wanted to do it, the first step is still to design the concurrency model in Red, because you need that to map to all back ends. Then look at what benefits BEAM offers as a target, the effort required, and if it can be made to work consistently on all platforms.}
    sent: "2017-09-07T21:43:14.765Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1bd54210ac269200708f5"
    text: {Yeah, sure.^/IIRC you are  gonna use something different than Actors for concurrency.}
    sent: "2017-09-07T21:42:44.576Z"
    editedAt: "2017-09-07T21:43:13.420Z"
    v: 2
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1bd24162adb6d2e7b2c6b"
    text: {We need to look at each piece and weigh the costs and benefits. }
    sent: "2017-09-07T21:41:56.708Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1bce4614889d475d0bdf6"
    text: "@maximvl :point_up: hear hear!"
    sent: "2017-09-07T21:40:52.160Z"
    editedAt: "2017-09-07T21:40:57.953Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1bcdf614889d475d0bdf2"
    text: {Only Nenad can say for sure, but I would say it's not likely. JoeA showed up here, not long ago, and maybe he would share his wisdom when it comes time for us to go concurrent.}
    sent: "2017-09-07T21:40:47.735Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1bcd59acddb240713b932"
    text: {Sorry, in case someone doesn't know: it's the ErlangVM}
    sent: "2017-09-07T21:40:37.202Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1bc8ec101bc4e3a9f2d60"
    text: {I read that you also want to target JVM and MSIL. Any thoughts about BEAM?}
    sent: "2017-09-07T21:39:26.906Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1bc5266c1c7c47727a0aa"
    text: ":)"
    sent: "2017-09-07T21:38:26.426Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1bc31614889d475d0bb16"
    text: "What could me more fun? :^^)"
    sent: "2017-09-07T21:37:53.487Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1bbee66c1c7c477279f38"
    text: "You guys really want to push the limits :+1: "
    sent: "2017-09-07T21:36:46.177Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1bbe6c101bc4e3a9f2a44"
    text: {and then @rebolek and @toomasv find a Grave Flaw (TM) in other examples and benchmarking races start :car: :blue_car: :runner: }
    sent: "2017-09-07T21:36:38.639Z"
    editedAt: "2017-09-07T21:40:37.269Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1bbdd210ac2692007037a"
    text: {Red's core design, from Rebol, also comes into play, as it is very flexible, and allows you to leverage datatypes much more than in other langs.}
    sent: "2017-09-07T21:36:29.765Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1bb3466c1c7c477279b92"
    text: {We also have a pretty amazing Redbol optimizer. You post code, the community dissects it, and many great brains come up with solutions from different perspectives.}
    sent: "2017-09-07T21:33:40.251Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1bb2c66c1c7c477279af7"
    text: {@9214 saw OMeta references ~10 times in the last month and starts to think that hivemind wants something from him}
    status: true
    sent: "2017-09-07T21:33:32.574Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1babcee5c9a4c5f445f6d"
    text: {VPRI's Nile project is pretty amazing too, when looking at what dialects can do.}
    sent: "2017-09-07T21:31:40.657Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1ba9c8f4427b462e30ffa"
    text: {We could make some things even smaller, but that's not the *only* goal. We also want maintainable code.}
    sent: "2017-09-07T21:31:08.961Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1ba8366c1c7c4772798c6"
    text: {Work. Lots and lots of work. Resisting inclusion of the kitchen sink, and making size a priority.}
    sent: "2017-09-07T21:30:43.246Z"
    editedAt: "2017-09-07T21:32:05.635Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1ba44b16f26464218935d"
    text: {I'm still wondering how Red can be so concise. Not to mention the 1MB file size.}
    sent: "2017-09-07T21:29:40.884Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1ba3bbc4647297409aa29"
    text: {Can't say. It's not on the roadmap that I know of.}
    sent: "2017-09-07T21:29:31.175Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1ba0b9acddb240713a9af"
    text: {Flickers at 24/30 rate as well, but otherwise pretty smooth.}
    sent: "2017-09-07T21:28:43.741Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b9e4162adb6d2e7b1e4f"
    text: {Regarding animation: will Red come with full fledged tweening support?}
    sent: "2017-09-07T21:28:04.181Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b9c64e50cfde2715f92a"
    text: "I see."
    sent: "2017-09-07T21:27:34.593Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b9b78f4427b462e30bb9"
    text: {A hint, yes. I don't think Red double-buffers at this point.}
    sent: "2017-09-07T21:27:19.084Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b996210ac2692006f9d0"
    text: "Do you also have some flickering?"
    sent: "2017-09-07T21:26:46.349Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b947b16f264642188f34"
    text: {It's normal to start with the easiest code that expresses what you want to say, and optimize later. Often we don't have to, but it's early days for animation in Red.}
    sent: "2017-09-07T21:25:27.576Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b9134e50cfde2715f513"
    text: {Absolutely. The data can always be streamed in, or/and implementing some round robin database like RRDtool.}
    sent: "2017-09-07T21:24:35.352Z"
    editedAt: "2017-09-07T21:24:49.174Z"
    v: 2
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b9109acddb240713a5dc"
    text: "Just playing."
    sent: "2017-09-07T21:24:32.513Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b907210ac2692006f7d9"
    text: {```^/system/view/auto-sync?: off^/^/size: 320x240 ; 800x600 ;1800x900^/n: size/x^/^/data: make block! size/x^/append data 'line^/repeat i n [append data as-pair i random i]^/^/view lay: layout compose/only [^/    f: base (size) draw (data) rate 10 on-time [^/        repeat i n [^/            if i > 1 [data/:i/x: data/:i/x - 1]^/        ]^/        remove at data 2^/        append data as-pair size/x random size/y^/        show f^/    ]^/]^/```}
    sent: "2017-09-07T21:24:23.359Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b872c101bc4e3a9f1b66"
    text: {Yeah, 100k data points is more of an exception, than the rule. I'm just curious how many data points Red could handle, running on a decent frame rate. If it's slow, it could be also my fault :)}
    sent: "2017-09-07T21:21:54.349Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b7a9b16f26464218886d"
    text: {Yeah, I watched the Red talk and it mentioned inline Assembly.}
    sent: "2017-09-07T21:18:33.679Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b72bc101bc4e3a9f155a"
    text: "Thanks for the code!"
    sent: "2017-09-07T21:16:27.107Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b721bac826f0548fed6c"
    text: "Just ran it. About 2-4fps."
    sent: "2017-09-07T21:16:17.877Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b6fe8f4427b462e30059"
    text: "There's that too. Look at the Mandelbrot example."
    sent: "2017-09-07T21:15:42.520Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b6f04e50cfde2715e9e4"
    text: "or you can go down into R/S rabbit hole :rabbit: "
    sent: "2017-09-07T21:15:28.567Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b6c6b16f2646421881b4"
    text: {But, here's the thing. If you have 100K data points, on multiple charts, and want 60 FPS, you can hope it will magically handle it (you seem reasonable, so know that may not be the case), or look at how Red may let you interpolate effectively, so you can maximize its capabilities. We often have more data than we can display, and have to map it to human limits.}
    sent: "2017-09-07T21:14:46.806Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b69666c1c7c47727872b"
    text: {:) I never heard about REBoL or Red until today. I'm currently using C/C++, Haxe and Elixir recently.}
    sent: "2017-09-07T21:13:58.815Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b651b16f264642187fd1"
    text: {If you run the above, you can tweak and play. I have a non-GPU workstation card. Low end. Not fast. It's slow for me, updating 100K data points, especially on a large face.}
    sent: "2017-09-07T21:12:49.445Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b62766c1c7c4772784f0"
    text: "fresh blood would be me :feelsgood: "
    sent: "2017-09-07T21:12:07.854Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "59b1b60fc101bc4e3a9f0eab"
    text: {We have a mix of experience levels, both old Rebolers and fresh blood.}
    sent: "2017-09-07T21:11:43.745Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b5fb66c1c7c47727849e"
    text: {I guess you guys all started with Red a while (years) ago? Or have some REBoL experience?}
    sent: "2017-09-07T21:11:23.972Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b5fa614889d475d09fa2"
    text: {```^/Red []^/^/system/view/auto-sync?: off^/^/n: 100'000^/size: 320x240 ; 800x600 ;1800x900^/^/data: make block! n^/append data 'line^/repeat i n [append data random size]^/^/view lay: layout compose/only [^/    f: base (size) draw (data) rate 10 on-time [^/        repeat i n [^/            if i > 1 [  ; don't process 'line command^/                data/:i: data/:i + random random/only [-2x-2 -2x2 2x-2 2x2]^/            ]^/        ]^/        show f^/    ]^/]^/```}
    sent: "2017-09-07T21:11:22.725Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b5e2bac826f0548fe6b9"
    text: {List of all red rooms is [here](https://gitter.im/orgs/red/rooms) I suppose.}
    sent: "2017-09-07T21:10:58.536Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b5afbac826f0548fe609"
    text: {Also [`code`](https://github.com/red/code)  and [`community`](https://github.com/red/community) repos with various examples.}
    sent: "2017-09-07T21:10:07.661Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b5a366c1c7c47727831c"
    text: "Thanks! Much appreciated!"
    sent: "2017-09-07T21:09:55.713Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b56b614889d475d09d96"
    text: {@BeardPower here's my [grab bag](https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b) of learning resources, the major ones are [Rebol/Core](http://www.rebol.com/docs/core23/rebolcore.html), [Red docs](https://doc.red-lang.org/en/) and [wiki](https://github.com/red/red/wiki).}
    sent: "2017-09-07T21:08:59.820Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b535162adb6d2e7b0b6b"
    text: {No need for some In-Game editor. More like LightTable :)}
    sent: "2017-09-07T21:08:05.217Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b4c44e50cfde2715df94"
    text: {Yes, metaprogramming in Red is a no-brainer. Data-oriented and language-oriented approaches are highly encouraged.}
    sent: "2017-09-07T21:06:12.584Z"
    editedAt: "2017-09-07T21:06:22.319Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b4a4c101bc4e3a9f0963"
    text: {Will do. I'm currently digging through http://www.red-by-example.org and the doc.^/I hope I can switch to Red completely, once 1.0 is released.}
    sent: "2017-09-07T21:05:40.837Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b46a210ac2692006e45e"
    text: {It's also easy to build some small examples, as Red is data oriented, that generate different numbers of points, rates, etc. and check results directly.}
    sent: "2017-09-07T21:04:42.650Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59b1b43bbc46472974098dc5"
    text: "And list some other alternatives of course."
    sent: "2017-09-07T21:03:55.872Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b419bc46472974098cfb"
    text: {I suggest you to stick around, read some docs, get familiar with language and wait for the next release with first version of GC, after that all gates will be open :)}
    sent: "2017-09-07T21:03:21.708Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b3f5162adb6d2e7b0625"
    text: {Once it supports concurrency and everything, it's not a problem to adapt the code.}
    sent: "2017-09-07T21:02:45.424Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b3a19acddb2407138e41"
    text: {That's totally okay. I'm just trying out some frameworks. I always searched for something like Red. One thing for the full stack.}
    sent: "2017-09-07T21:01:21.768Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b3338f4427b462e2eed5"
    text: {Perhaps. It's hard to answer unequivocally, bear in mind that Red is in active development and isn't considered to be `1.0` and production ready.}
    sent: "2017-09-07T20:59:31.644Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b31e210ac2692006deb9"
    text: "Nice."
    sent: "2017-09-07T20:59:10.792Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b2948f4427b462e2ebb1"
    text: {So something like in the link I posted would be absolute feasible in Red? E.g. 60fps (regarding animations) and responsivenes of the UI/charts.}
    sent: "2017-09-07T20:56:52.841Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b239bc46472974098217"
    text: {see [Win32](https://github.com/red/red/blob/master/modules/view/backends/windows/win32.reds) and [Cocoa](https://github.com/red/red/blob/master/modules/view/backends/macOS/cocoa.reds) examples}
    sent: "2017-09-07T20:55:21.757Z"
    editedAt: "2017-09-07T20:55:28.085Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b2134e50cfde2715cfdc"
    text: {here my knowledge is lacking, but I believe that Red manages all of the GUI stuff directly with system API calls}
    sent: "2017-09-07T20:54:43.856Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b1acee5c9a4c5f443610"
    text: "Ah, I see."
    sent: "2017-09-07T20:53:00.298Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b15fc101bc4e3a9ef88d"
    text: {there's no `face!` or even `button!` datatypes, *face* is just an `object!` that represents hierarchy of UI elements on the screen. For custom widgets - either `style` on existing ones or `draw`ing everything from scratch and specifying needed actors.}
    sent: "2017-09-07T20:51:43.614Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b1184e50cfde2715caab"
    text: "So it's directly using DirectX or OpenGL?"
    sent: "2017-09-07T20:50:32.393Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b0db614889d475d08546"
    text: {I read about a basic Face!, which should be used for "custom widgets", but is it possible to skin a Button!? Does style work on the Faces?}
    sent: "2017-09-07T20:49:31.376Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1b0d1c101bc4e3a9ef705"
    text: {I believe graphical backends do not rely on any third-party libraries at all (that's the main idea of the language, to be totally self-contained). Only Win and MacOS are currently fully supported, Linux backend is WIP with recent community efforts.}
    sent: "2017-09-07T20:49:21.144Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1b01cb16f264642186299"
    text: {This UI is not designed by me, but it gives a nice overview of what the application is about:  https://www.behance.net/gallery/41921083/One-Admin-Dashboard}
    sent: "2017-09-07T20:46:20.624Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1afa1bac826f0548fc73b"
    text: {Thanks for your information. Will wait for them for sure :)}
    sent: "2017-09-07T20:44:17.413Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1af64614889d475d07e6d"
    text: {2D rendering: the charts consist of circles, squares, lines etc.. As I read, Red is using Direct2D for rendering, so it's GPU accelerated. But how about Linux and macOS or FreeBSD? Is the backend using OpenGL (ES) or Vulkan?}
    sent: "2017-09-07T20:43:16.559Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1aef8bc46472974097137"
    text: {Since charts are 2D, you can go with a `hash!` of `point!`s I suppose}
    sent: "2017-09-07T20:41:28.469Z"
    editedAt: "2017-09-07T20:43:37.693Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1aeba4e50cfde2715beb9"
    text: {@BeardPower ^/* Red has its own reactive framework, so, yeah you'll get real-time interactivity;^/* Skins/themes - yup, I think you should use Draw dialect for that or `style` keyword for something more basic;^/* Speaking of speed - I haven't worked with large GUI apps, but I believe it's reasonably fast;^/* The only drawback is memory management - we should get GC in the next major release, and until that happen making non-trivial GUI apps is kinda tricky.^/^/But don't count on me and wait for our gurus to stick in and clarify everything :)}
    sent: "2017-09-07T20:40:26.081Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1ae9666c1c7c477275f77"
    text: {Data types: as there are multiple interactive charts on the screen, which can have up to 100k data points,  which native data type/structure would be the best choice for that? The data points are pushed in real-time, about 10 per/sec and only need to be stored in memory.}
    sent: "2017-09-07T20:39:50.440Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1ad7d66c1c7c477275a49"
    text: {The application is a trading terminal/charting system, so it needs a lot of reactive GUI elements. It will also use a flat design. Is the GUI in Red fast enough to manage 50-100 UI elements, changing in real-time? Is it possible to create themes/skins? I don't need native controls.}
    sent: "2017-09-07T20:35:09.209Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1ace7210ac2692006c1e8"
    text: "Thanks!"
    sent: "2017-09-07T20:32:39.877Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59b1accc4e50cfde2715b3d5"
    text: "@BeardPower welcome! Sure, go ahead."
    sent: "2017-09-07T20:32:11.999Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59b1ac909acddb2407136a65"
    text: {Hi all, I'm currently testing out various languages/frameworks for my "research" project, and I wanted to ask various things about Red, which is just awesome, if it fits my needs.^/The questions are related to the GUI, data types, 2D rendering and performance. Is this the right channel, or should I post each relevant question in the specific room?}
    sent: "2017-09-07T20:31:12.348Z"
    v: 1
    author: "59b1a9fdd73408ce4f74ccdf"
) #(
    id: "59ab08bdb16f264642fc0a40"
    text: {There is: edit `console-cfg.red`in^/```text^/~/.wine/dosdevices/c:/users/Public/Red^/```}
    sent: "2017-09-02T19:38:37.012Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59aad550210ac26920ea6dfd"
    text: {Is there any way to save REPL settings (i.e. background color, font color and font type) when running under Wine?}
    sent: "2017-09-02T15:59:12.666Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9be28614889d475af5053"
    text: "Right. A snapshot, basically "
    sent: "2017-09-01T20:08:08.598Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59a9bdf29acddb2407f26368"
    text: "but bindings should be preserved"
    sent: "2017-09-01T20:07:14.048Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9bde7bc46472974e80994"
    text: "@9214 I think so"
    sent: "2017-09-01T20:07:03.816Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59a9bdccbac826f0546e8337"
    text: {Soon it could be time for this:^/http://rosettacode.org/wiki/Rosetta_Code}
    sent: "2017-09-01T20:06:36.273Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59a9bdc2ee5c9a4c5f2362b2"
    text: {I think it boils down to saving `system/words` somewhere, no?}
    sent: "2017-09-01T20:06:26.932Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9bd7db16f264642f757b8"
    text: "add call/cc to the list?"
    sent: "2017-09-01T20:05:17.576Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59a9bbeeba0f0f6e38093afb"
    text: {Yeah, I think the other part to that is many of those languages which have a philosophy like "functional" do so by imposing constraints on themselves, like immutability, while Red favors flexibility}
    sent: "2017-09-01T19:58:38.955Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59a9ba249acddb2407f252de"
    text: {or perhaps the confusion comes from the fact that Red claims to be functional and "functional" is often read as "Haskell / Lisp"}
    sent: "2017-09-01T19:51:00.511Z"
    editedAt: "2017-09-01T19:59:04.781Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9b951ee5c9a4c5f2351c9"
    text: {It would be great to have a general wiki for it, and either sections, or language specific wikis, that help people migrate and find their way.}
    sent: "2017-09-01T19:47:29.304Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a9b936c101bc4e3a7e5d5c"
    text: "closures and lambdas are already on the list"
    sent: "2017-09-01T19:47:02.762Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9b9279acddb2407f24f4f"
    text: {well, at least for those who are coming from other languages}
    sent: "2017-09-01T19:46:47.454Z"
    editedAt: "2017-09-01T19:49:43.386Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9b85e162adb6d2e5a46cb"
    text: {We could start a wiki for it, but the list is endless. Needs a certain level of organization as well, which wikis aren't great for (at least automatically), because the possible list is so varied.}
    sent: "2017-09-01T19:43:26.953Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a9b60ab16f264642f73720"
    text: "those make great Stack Overflow questions as well"
    sent: "2017-09-01T19:33:30.960Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "59a9b3a88f4427b462c22a9b"
    text: {I mean "how do I make X in Red"}
    sent: "2017-09-01T19:23:20.417Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9affdbac826f0546e453a"
    text: "@greggirwin worth a wiki entry, what ya think?"
    sent: "2017-09-01T19:07:41.912Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9ac0fbc46472974e7bb12"
    text: {Certainly it's good to say "How do I ... in Red?". Always. And to see how we might implement concepts from other langs in Red. We all learn from that.}
    sent: "2017-09-01T18:50:55.613Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a9aafaba0f0f6e3808ef3f"
    text: {but otherwise it's a nice challenge of porting Haskell to Red :) though, I can relate to @greggirwin and point out that it's better to not to go against the grain}
    sent: "2017-09-01T18:46:18.598Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9a6b6bc46472974e7a237"
    text: {@unchartedworks, please take this in the spirit of constructive criticism.^/^/A lot of your posts come across, at least to me, as "Red is wrong because...it doesn't work how I expect it to." No language is perfect, but I think your confusion comes from expecting Red to be *something*, rather than trying to understand what Red *is*. For example, the `type? :read/lines` problem you had. In the context of Red, when and how things are evaluated comes into play. e.g.:^/```^/>> type? first [:read/lines]^/== get-path!^/```^/Works just fine. Now we can talk about *why* things evaluate the way they do. `(function [x][x + 1]) 3` is another example. If you do this:^/```^/>> reduce [(function [x][x + 1]) 3]^/== [func [x][x + 1] 3]^/```^/and think about how Red returns the last evaluated value, you can see that the first expression created the function, but that it isn't called automatically.^/^/Again, please take this constructively. It's not a personal criticism. Just trying to help us all communicate more effectively.^/^/}
    sent: "2017-09-01T18:28:06.954Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a99573c101bc4e3a7dbb2e"
    text: {@9214 I've been experimenting with iterators/generators, and find myself using it a lot, but mainly just because I don't have `yield`, so I'm kind of using it as a hack}
    sent: "2017-09-01T17:14:27.667Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59a990aac101bc4e3a7da2c8"
    text: "It makes sense in loops usually"
    sent: "2017-09-01T16:54:02.621Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a99047c101bc4e3a7da19f"
    text: {yes, thanks @rebolek, `also` seems like an interesting construct, I just can't figure out how to leverage it}
    sent: "2017-09-01T16:52:23.111Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a99020210ac26920e5a703"
    text: {again, what's the benefit?^/```text^/== func [x][print mold x x]^/>> probe1 "hi"^/"hi"^/== "hi"^/```}
    sent: "2017-09-01T16:51:44.348Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a99015b16f264642f68748"
    text: {@9214 ^/For example this is useful:^/```^/>> x: 1^/== 1^/>> also x x: x + 1^/== 1^/>> x^/== 2^/```}
    sent: "2017-09-01T16:51:33.908Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a98ffb210ac26920e5a5f9"
    text: {```^/>> print mold "hi"^/"hi"^/>> probe1: func [x] [also (copy x) (print mold x)]^/== func [x][also (copy x) (print mold x)]^/>> probe1 "hi"^/"hi"^/== "hi"^/```}
    sent: "2017-09-01T16:51:07.328Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a98fda8f4427b462c19108"
    text: {ah, jeez, you're using `probe` instead of `probe1` :D}
    sent: "2017-09-01T16:50:34.301Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a98fc58f4427b462c190c2"
    text: "no, this actually makes sense"
    sent: "2017-09-01T16:50:13.797Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a98fac9acddb2407f18ea5"
    text: {that’s another problem. ^/```^/print mold “hi”^/```}
    sent: "2017-09-01T16:49:48.944Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a98f9bba0f0f6e38086f92"
    text: {and how is it different from^/```text^/== probe1: func [x][print x x]^/>> probe1 "hi"^/hi^/== "hi"^/```}
    sent: "2017-09-01T16:49:31.714Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a98f2166c1c7c47705b001"
    text: {hm, why after the first call `"hi"` is printed instead of `hi`?}
    sent: "2017-09-01T16:47:29.789Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a98e8e9acddb2407f18967"
    text: {```^/>> probe1: func [x] [also (copy x) (print x)]^/== func [x][also (copy x) (print x)]^/>> probe1 "hi"^/hi^/== "hi"^/>> probe "hi"^/"hi"^/== "hi"^/```}
    sent: "2017-09-01T16:45:02.024Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a98d21bc46472974e728e6"
    text: "can anyone show me a good use-case for `also`?"
    sent: "2017-09-01T16:38:57.283Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a97a4fba0f0f6e38080752"
    text: {@unchartedworks ^/```text^/>> :apply^/== func [f x][do reduce compose [f (x)]]^/>> &: make op! func reverse copy spec-of :apply body-of :apply^/== make op! [[x f]]^/>> apply curry :add 4 4^/== 8^/>> 4 & curry :add 4^/== 8^/```}
    sent: "2017-09-01T15:18:39.285Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a978c1bac826f0546d383e"
    text: "& is a reverse application operator."
    sent: "2017-09-01T15:12:01.178Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a97856210ac26920e52972"
    text: {I found it finally.^/```^/ 4 & curry :add 4^/```}
    sent: "2017-09-01T15:10:14.897Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a9783c8f4427b462c117cb"
    text: {you can write it in one line if it really bothers you ;)}
    sent: "2017-09-01T15:09:48.814Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a97779ee5c9a4c5f220de8"
    text: {Write it in two lines intead of in one line.^/```^/    f: curry [x y] -> [x * y] 2^/    y: 8^/    z: f 4^/```^/}
    sent: "2017-09-01T15:06:33.237Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a9750166c1c7c477052f26"
    text: {:point_up: [1 сентября 2017 г., 19:23](https://gitter.im/red/red/welcome?at=59a96d4ac101bc4e3a7cf3db)}
    sent: "2017-09-01T14:56:01.167Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a974fa614889d475adefe0"
    text: {okay, but you can apply you "partial" function to another argument the same way}
    sent: "2017-09-01T14:55:54.445Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a974d0b16f264642f5fdc8"
    text: {partial application and application are not the same thing. }
    sent: "2017-09-01T14:55:12.529Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a97475162adb6d2e58f493"
    text: {```text^/>> apply: func [f x][do reduce compose [f (x)]]^/== func [f x][do reduce compose [f (x)]]^/>> apply :add [1 2]^/== 3^/```}
    sent: "2017-09-01T14:53:41.572Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a97440162adb6d2e58f3c5"
    text: {```^/>> funcall func [x y] [ x + y] [3 4]^/== 7^/```}
    sent: "2017-09-01T14:52:48.907Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a973c4bc46472974e6a01d"
    text: "oh, right"
    sent: "2017-09-01T14:50:44.169Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a97382b16f264642f5f4c7"
    text: "@9214 it works with multiple arguments"
    sent: "2017-09-01T14:49:38.864Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a97352ee5c9a4c5f21f1a3"
    text: {isn't that the same as  :point_up: [1 сентября 2017 г., 19:23](https://gitter.im/red/red/welcome?at=59a96d4ac101bc4e3a7cf3db) ?}
    sent: "2017-09-01T14:48:50.695Z"
    editedAt: "2017-09-01T14:48:57.526Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9734f614889d475ade59f"
    text: "arguments should be provided as a list though"
    sent: "2017-09-01T14:48:47.517Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a9732f210ac26920e50ae9"
    text: {```^/>> funcall: func [f args] [ do append append copy [] :f args ]^/== func [f args][do append append copy [] :f args]^/>> funcall func [x] [x + 1] 3^/== 4^/```}
    sent: "2017-09-01T14:48:15.759Z"
    editedAt: "2017-09-01T14:50:15.024Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a97321bac826f0546d16b1"
    text: "function should be enough"
    sent: "2017-09-01T14:48:01.196Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a971feb16f264642f5ebee"
    text: {I believe that behavior can be simulated with a macro, though idk how error-prone it will be}
    sent: "2017-09-01T14:43:10.388Z"
    editedAt: "2017-09-01T14:44:30.873Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a971b69acddb2407f0fa1d"
    text: "I think :)"
    sent: "2017-09-01T14:41:58.833Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a9714a614889d475add9ff"
    text: {but in the same way in Haskell functions do not exist as a runtime values}
    sent: "2017-09-01T14:40:10.458Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a9713dc101bc4e3a7d0953"
    text: {... but that doesn't mean that Red is "bad"}
    sent: "2017-09-01T14:39:57.781Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a97129bc46472974e6934d"
    text: {@unchartedworks it's true that you can't write code like in haskell, chaining all the call together}
    sent: "2017-09-01T14:39:37.921Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a970eec101bc4e3a7d0789"
    text: "@toomasv oh nice, I'll take a look"
    sent: "2017-09-01T14:38:38.171Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a970a1c101bc4e3a7d0644"
    text: "phew, I thought I'm doomed"
    sent: "2017-09-01T14:37:21.307Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a97095bac826f0546d0b8d"
    text: "@9214 not you :)"
    sent: "2017-09-01T14:37:09.607Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a97069bac826f0546d0a4a"
    text: {it could be nice to have "hungry" (or greedy?) functions though}
    sent: "2017-09-01T14:36:25.231Z"
    editedAt: "2017-09-01T14:36:34.992Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a97056bc46472974e68c4d"
    text: {in this sense Red's semantics is a bit different from other languages}
    sent: "2017-09-01T14:36:06.248Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a9705266c1c7c477051534"
    text: {@maximvl  :point_up: [September 1, 2017 11:53 AM](https://gitter.im/red/red/welcome?at=59a91ffc162adb6d2e576114) I cooked something [similar](https://gist.github.com/toomasv/eaac3829ac5e745f43121aa60b555d68)}
    sent: "2017-09-01T14:36:02.259Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a97044ba0f0f6e3807ccf8"
    text: "@maximvl me?"
    sent: "2017-09-01T14:35:48.992Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9703bb16f264642f5e3a7"
    text: "you are confusing values with calls"
    sent: "2017-09-01T14:35:39.586Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a97021614889d475add3d3"
    text: {@unchartedworks it's fully functional, `func` is a function which returns function}
    sent: "2017-09-01T14:35:13.431Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a96ffa614889d475add31a"
    text: {and how `function!` **value** can take another **value**?}
    sent: "2017-09-01T14:34:34.247Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96edbee5c9a4c5f21da48"
    text: "it can, you should just tell it to do so"
    sent: "2017-09-01T14:29:47.834Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "59a96eb166c1c7c477050d3e"
    text: {Red isn’t functional, it can’t return a function and take arguments.}
    sent: "2017-09-01T14:29:05.118Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a96d8cc101bc4e3a7cf533"
    text: "whatever"
    sent: "2017-09-01T14:24:12.435Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96d4d162adb6d2e58d0e7"
    text: {I would say `func` is exactly function in a strict sense}
    sent: "2017-09-01T14:23:09.208Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a96d4ac101bc4e3a7cf3db"
    text: {```text^/>> apply: func [f x][do reduce [f x]]^/== func [f x][do reduce [f x]]^/>> apply curry :add 2 1^/== 3^/```}
    sent: "2017-09-01T14:23:06.267Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96be0ee5c9a4c5f21cbc3"
    text: {in fact `func` is a shortcut for^/```text^/>> make function! [[x][x + 1]]^/== func [x][x + 1]^/```}
    sent: "2017-09-01T14:17:04.407Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96b669acddb2407f0d575"
    text: {`func` is not a function in a strict sense, it's a _function constructor_, i.e. if you evaluated it, it returned a function, but for that function to be applied to some arg it should again be evaluated}
    sent: "2017-09-01T14:15:02.812Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96af38f4427b462c0ca1d"
    text: {it's the same as writing^/```text^/>> 1 2 3^/== 3^/```}
    sent: "2017-09-01T14:13:07.601Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a969c8210ac26920e4d87a"
    text: {only the result of last evaluation is returned from expression, namely `1`}
    sent: "2017-09-01T14:08:08.804Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a969afba0f0f6e3807a7e5"
    text: {it does evaluate `curry :add 2` but it doesn't evaluate it's result}
    sent: "2017-09-01T14:07:43.903Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a969ad66c1c7c47704f3c4"
    text: "then `1` evaluates to itself"
    sent: "2017-09-01T14:07:41.651Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96998b16f264642f5c2c9"
    text: "and returns a function value, but that's it"
    sent: "2017-09-01T14:07:20.670Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96990614889d475adb1f8"
    text: "it is"
    sent: "2017-09-01T14:07:12.033Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96982c101bc4e3a7cdf5b"
    text: {I think the problem is () doesn’t evaluate curry :add 2.}
    sent: "2017-09-01T14:06:58.742Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a969419acddb2407f0ca89"
    text: {```text^/>> do reduce [(curry :add 2) 1]^/== 3^/```}
    sent: "2017-09-01T14:05:53.135Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96921210ac26920e4d4b4"
    text: {well, in this case `(curry :add 2)` is evaluated, and `1` is evaluated too, what you need is to wrap it up inside `do reduce [...]` I think}
    sent: "2017-09-01T14:05:21.206Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a968a5ba0f0f6e3807a299"
    text: {```^/^/curry: function [^/    "curry converts an uncurried function to a curried function."^/    f [any-function!]^/    x^/][^/    function [y] reduce [:f x 'y]^/]^/^/f: curry :add 2^/f 1^/^/(curry :add 2) 1^/^/```}
    sent: "2017-09-01T14:03:17.833Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a9685366c1c7c47704ecf3"
    text: {I thought you want to apply a function without bounding it to some word, i.e. lambdas}
    sent: "2017-09-01T14:01:55.583Z"
    editedAt: "2017-09-01T14:02:07.534Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96827b16f264642f5ba53"
    text: "can you show some Red example?"
    sent: "2017-09-01T14:01:11.947Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96812bc46472974e65ffa"
    text: "(f x) y is preferred."
    sent: "2017-09-01T14:00:50.631Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a967e6210ac26920e4ceee"
    text: {The problem is that I don’t understand the difference between the first and the second ones.}
    sent: "2017-09-01T14:00:06.440Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a967cabc46472974e65f14"
    text: "what's that, partial application?"
    sent: "2017-09-01T13:59:38.894Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96726c101bc4e3a7cd3ab"
    text: {```text^/>> λ: func [spec body args][do reduce [func spec body args]]^/== func [spec body args][do reduce [func spec body args]]^/>> λ [x][x + 1] 3^/== 4^/```}
    sent: "2017-09-01T13:56:54.394Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a9671cb16f264642f5b485"
    text: {Maybe not. ^/```^/g: f x^/g y^/```^/What I want:^/```^/(f x) y^/```}
    sent: "2017-09-01T13:56:44.948Z"
    editedAt: "2017-09-01T13:57:12.182Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a9667e8f4427b462c0b377"
    text: {I already showed you how to create "lambdas"}
    sent: "2017-09-01T13:54:06.866Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96666c101bc4e3a7cd064"
    text: "I have no idea why I can’t write it in one line."
    sent: "2017-09-01T13:53:42.035Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a96650bac826f0546cd7b7"
    text: "and..?"
    sent: "2017-09-01T13:53:20.819Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96641bac826f0546cd785"
    text: {```^/>> f: (function [x][x + 1])^/== func [x][x + 1]^/>> f 3^/== 4^/```}
    sent: "2017-09-01T13:53:05.375Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a965ee9acddb2407f0b868"
    text: {```text^/>> do reduce [func [x][x + 1] 3]^/== 4^/```}
    sent: "2017-09-01T13:51:42.633Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a96584614889d475ad9c94"
    text: {What’s wrong?^/```^/>> (function [x][x + 1]) 3^/== 3^/```}
    sent: "2017-09-01T13:49:56.356Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a93ed966c1c7c477041cb1"
    text: "@9214 Thanks. I use block! instead."
    sent: "2017-09-01T11:04:57.606Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a93e3f66c1c7c477041898"
    text: " Nohow, I think `pair!` supports only `integer!`s"
    sent: "2017-09-01T11:02:23.689Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a93de2210ac26920e402d4"
    text: {How to create a string pair in Red?^/```^/>> "string"x"string"^/*** Script Error: x has no value^/*** Where: catch^/*** Stack:^/^/>> 7x7^/== 7x7^/```}
    sent: "2017-09-01T11:00:50.213Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a9245cb16f264642f47a76"
    text: "I see, thanks"
    sent: "2017-09-01T09:11:56.084Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a92451b16f264642f47a5f"
    text: "There is no `lit-refinement!` type"
    sent: "2017-09-01T09:11:45.413Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a92444c101bc4e3a7b95f6"
    text: {```^/>> parse [/local a][quote /local 'a]^/== true^/```}
    sent: "2017-09-01T09:11:32.576Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a92221b16f264642f47050"
    text: {suppose I want to parse `/local` separately:^/```^/>> parse [/local a] ['/local 'a]^/*** Syntax Error: missing #"]" at "'/local 'a]"^/*** Where: do^/*** Stack: load ^/```}
    sent: "2017-09-01T09:02:25.337Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a92201bac826f0546b99f4"
    text: {@dockimbel I don't understand how to parse literal refinement values though}
    sent: "2017-09-01T09:01:53.122Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a92065614889d475ac55b2"
    text: "@maximvl :+1: "
    sent: "2017-09-01T08:55:01.686Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a9205ac101bc4e3a7b858d"
    text: {the foundation of `curry` dialect, will try to make it later, need to get back to work :D}
    sent: "2017-09-01T08:54:50.492Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a91ffc162adb6d2e576114"
    text: {here's the set of rules to parse any type of `spec` block :)^/```^/>> probe rules^/[opt string! any [[any-word! opt block! opt string! | refinement! any [not [refinement! | 'return] opt string! opt any-word! opt block!]]] opt ['return block! opt string!]]^/```^/tested on all `function!`, `op!`, `native!`, `action!` values}
    sent: "2017-09-01T08:53:16.543Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a9149f66c1c7c477035ea3"
    text: "@meijeru I see, thanks."
    sent: "2017-09-01T08:04:47.853Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a913adba0f0f6e38060f00"
    text: {Also, see the conversion matrix in the red/docs repository.}
    sent: "2017-09-01T08:00:45.740Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a9132fba0f0f6e38060c52"
    text: {@rebolek the only difference between `to` and `make` is when the argument is a number; see issue #2645 for an exhaustive discussion}
    sent: "2017-09-01T07:58:39.718Z"
    editedAt: "2017-09-01T08:00:04.759Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a912619acddb2407ef32bd"
    text: "seems like we need a `curry` dialect :D"
    sent: "2017-09-01T07:55:13.931Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a91225614889d475ac1b93"
    text: {now thinking about it I wonder, is it (theoretically) possible to curry funcs and refinements, like:^/```^/read-lines: :read/lines^/read-lines source^/```}
    sent: "2017-09-01T07:54:13.772Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a911f466c1c7c4770353c3"
    text: {@meijeru I believe you are talking about `to`, not `make`.}
    sent: "2017-09-01T07:53:24.649Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a911e8b16f264642f42685"
    text: "hm"
    sent: "2017-09-01T07:53:12.224Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a9119d614889d475ac192f"
    text: {Per definition, anything that is not `none` or `false` is `true`. That now appears to include `unset`. I would say it is not a bug, it is a feature :worried: }
    sent: "2017-09-01T07:51:57.325Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a8fe4f8f4427b462bed31c"
    text: {@dander I think it may be a bug, you should open an issue.}
    sent: "2017-09-01T06:29:35.544Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a8a048bc46472974e30d18"
    text: {`any` can be used for default values, if you are using `none` as the invalid value^/```^/>> x: 1 y: 2^/== 2^/>> any [x y]^/== 1^/>> x: none^/== none^/>> any [x y]^/== 2^/```^/It starts to get weird with unset things though. Anyone know why `make logic! ()` => `true`?^/```^/>> unset 'w^/>> any [w x y]^/*** Script Error: w has no value^/^/>> any [get/any 'w x y]^/>> ^/>> type? any [get/any 'w x y]^/== unset!^/```}
    sent: "2017-08-31T23:48:24.082Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "59a877b6c101bc4e3a78f1a8"
    text: "It's a surprise. "
    sent: "2017-08-31T20:55:18.032Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a870a2210ac26920e0c894"
    text: {To get back to `type? :read/lines`: the evaluation rules of the language (as yet unfortunately not completely documented) say that the expression `:read/lines` where the head word (`read`) is referring to a function/action etc., is in error. One could discuss the best formulation for the error message, but an error it is. In other words, `:read/lines` cannot have a type, only `:read` can.}
    sent: "2017-08-31T20:25:06.790Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a86a469acddb2407eca07a"
    text: {@maximvl  I think it’s a compiler error but not a run-time error. I prefer compiler errors.}
    sent: "2017-08-31T19:57:58.702Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a869e9b16f264642f1817e"
    text: "it will also fail"
    sent: "2017-08-31T19:56:25.833Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a869e766c1c7c47700b401"
    text: {@unchartedworks but it's the same as if you pass non-object to `isNothing`}
    sent: "2017-08-31T19:56:23.059Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a86975bac826f05468c2d5"
    text: "I think using object is simpler in this case."
    sent: "2017-08-31T19:54:29.574Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a869488f4427b462bc9430"
    text: {@maximvl ^/```^/>> none? read/lines^/*** Script Error: read/lines is missing its source argument^/*** Where: read^/*** Stack: none?^/```}
    sent: "2017-08-31T19:53:44.936Z"
    editedAt: "2017-08-31T19:53:55.094Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a86946c101bc4e3a78aba0"
    text: {the thing is `get` fails on bad arguments:^/```^/>> get 5^/*** Script Error: get does not allow integer! for its word argument^/*** Where: get^/*** Stack:  ^/```}
    sent: "2017-08-31T19:53:42.416Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a8691ebac826f05468c116"
    text: "as @meijeru mentioned before"
    sent: "2017-08-31T19:53:02.670Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a86912614889d475a96a0b"
    text: "@unchartedworks you can use `none? x`"
    sent: "2017-08-31T19:52:50.038Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a868c6210ac26920e0a559"
    text: {This is what I know. That’s why I prefer type checking.}
    sent: "2017-08-31T19:51:34.548Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a86861bc46472974e20f0e"
    text: {```^/>> type? get 'read^/== action!^/>> type? get 'read/lines^/*** Script Error: unsupported type in read/lines get-path^/*** Where: get^/*** Stack:^/```}
    sent: "2017-08-31T19:49:53.311Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a8681bc101bc4e3a78a7fd"
    text: "`type? get x`"
    sent: "2017-08-31T19:48:43.442Z"
    editedAt: "2017-08-31T19:48:48.687Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a86814c101bc4e3a78a7de"
    text: "you can"
    sent: "2017-08-31T19:48:36.803Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a867fd614889d475a96658"
    text: {```^/>> x: '+^/== +^/>> type? x^/== word!^/>> type? get x^/== op!^/```}
    sent: "2017-08-31T19:48:13.629Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a867e2162adb6d2e5492e2"
    text: {@maximvl yes, what I mean is I can’t use type? to check if it’s none (Nothing).}
    sent: "2017-08-31T19:47:46.584Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a867c3614889d475a96594"
    text: {if `x` contains the name of something - you should use `get`}
    sent: "2017-08-31T19:47:15.222Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a867a5614889d475a96475"
    text: {@unchartedworks `:x` gets value of x, means of `x` is a function, action or error - it will get you the value instead of "running it"}
    sent: "2017-08-31T19:46:45.835Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a8673766c1c7c47700a7ec"
    text: {```^/>> get-word :read/lines^/*** Script Error: get-word has no value^/*** Where: catch^/*** Stack:^/```}
    sent: "2017-08-31T19:44:55.939Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a866acbac826f05468b61c"
    text: {```^/>> type? :read^/== action!^/>> type? :read/lines^/*** Script Error: unsupported type in :read/lines get-path^/*** Where: type?^/*** Stack:  ^/```}
    sent: "2017-08-31T19:42:36.285Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a866a68f4427b462bc87f7"
    text: "proper way is to use `get-word`"
    sent: "2017-08-31T19:42:30.307Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a866a0ba0f0f6e38034be6"
    text: "`none! = type? x` can be simplified to `none? x`"
    sent: "2017-08-31T19:42:24.130Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a86671614889d475a95ea5"
    text: {Type-Checking is a good thing. isNothing read/lines^/```^/>> type? :read/lines^/*** Script Error: unsupported type in :read/lines get-path^/*** Where: type?^/*** Stack:^/```}
    sent: "2017-08-31T19:41:37.748Z"
    editedAt: "2017-08-31T19:45:31.284Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a865fdc101bc4e3a789dce"
    text: {btw you can use `?` in names, like `just? x`, `nothing? x`}
    sent: "2017-08-31T19:39:41.412Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a865dc162adb6d2e5488ce"
    text: {`Nothing: none` :) and check with `none! = type? x`}
    sent: "2017-08-31T19:39:08.467Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a865c166c1c7c477009f98"
    text: "@maximvl what’s the other option?"
    sent: "2017-08-31T19:38:41.072Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a865a5162adb6d2e548712"
    text: {@unchartedworks well, you don't have to make Nothing an object}
    sent: "2017-08-31T19:38:13.742Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a864ff9acddb2407ec891e"
    text: {I want to keep it simple, this is the final one.^/```^/^/Nothing: [] -> [make object! [type: 'Nothing]]^/Just: [x] -> [make object! [type: 'Just value: x]]^/isJust: [^/    "returns True iff its argument is of the form Just _"^/    x [object!]^/] -> [x/type == 'Just]^/^/isNothing: [^/    "returns True iff its argument is Nothing."^/    x [object!]^/] -> [x/type == 'Nothing]^/```}
    sent: "2017-08-31T19:35:27.771Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a864b3210ac26920e09243"
    text: "(isNothing none) == (isNothing Nothing) it works."
    sent: "2017-08-31T19:34:11.101Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a864759acddb2407ec861a"
    text: "Unless I override == and <>."
    sent: "2017-08-31T19:33:09.313Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a8644cba0f0f6e38034063"
    text: "It doesn’t work.  Nothing == none"
    sent: "2017-08-31T19:32:28.897Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a8642eee5c9a4c5f1d762b"
    text: {@maximvl ^/```^/Nothing: [] -> [make object! [type: 'Nothing]]^/isNothing: [^/    "returns True iff its argument is Nothing."^/    x [object! none!]^/] -> [and’ [(x/type == ‘Nothing) (x == none)]^/^/```}
    sent: "2017-08-31T19:31:58.687Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a863cdba0f0f6e38033e61"
    text: "@unchartedworks `Nothing: none` ?"
    sent: "2017-08-31T19:30:21.182Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a85ac3210ac26920e060ad"
    text: {@greggirwin I tried to use none and Nothing both. I don’t have a problem to change isNothing or isJust, however `none == Nothing` is false. I have to override == to work around this issue. I think it might be a mistake to mix them.}
    sent: "2017-08-31T18:51:47.064Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a85933bc46472974e1c69b"
    text: {:point_up: [August 31, 2017 8:43 AM](https://gitter.im/red/red/welcome?at=59a82094210ac26920df3cda) @unchartedworks, where do you start in any other lang that doesn't have `Maybe`? You're on track, though. A dialect is the way to go about this. If you think of Red as a "value based language" (just made that up), maybe it will help. When you want something like `Maybe`, it's up to you to choose which value type represents the non-value. As @maximvl said, the most common way is to use `none!`, with the trick being that `none!` is a valid value in some contexts, not an indication of failure.}
    sent: "2017-08-31T18:45:07.371Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a83e158f4427b462bbbbfd"
    text: {blackjack^/```^/hit:      [x] -> [Just (x + 8)]^/stand:    [x] -> [either x > 21 [Nothing][Just x]]^/win:      [x] -> [Just "$1000"]^/showtime: [x] -> [Just ("You win " ++ x ++ "!")]^/^/blackjack: [x [object!]] -> [x >>= :hit >>= :hit >>= :stand >>= :win >>= :showtime]^/r1: blackjack Just 3^/r2: blackjack Just 8^/print r1^/print r2^/^/```^/```^/type: 'Just^/value: "You win $1000!"^/type: 'Nothing^/```}
    sent: "2017-08-31T16:49:25.599Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a8277c162adb6d2e535424"
    text: "That’s what I am going to do. To implement >>="
    sent: "2017-08-31T15:13:00.570Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a827378f4427b462bb4649"
    text: {the dialect could look like `typed [x: nothing x >>= first]` to return 'nothing}
    sent: "2017-08-31T15:11:51.995Z"
    editedAt: "2017-08-31T15:12:12.422Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a82674614889d475a814b2"
    text: {You are right. It’s a dialect. That’s why it looks different.}
    sent: "2017-08-31T15:08:36.874Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a826109acddb2407eb412e"
    text: {the naming looks strange for Red though, we prefer dashed lower-case eg: `is-just`}
    sent: "2017-08-31T15:06:56.423Z"
    editedAt: "2017-08-31T15:07:11.852Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a825d7210ac26920df5863"
    text: "looks good"
    sent: "2017-08-31T15:05:59.748Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a825a7162adb6d2e534ba1"
    text: {```^/->: make op! :function^/^/Nothing: [] -> [make object! [type: 'Nothing]]^/Just: [x] -> [make object! [type: 'Just value: x]]^/isJust: [x [object!]] -> [x/type == 'Just]^/isNothing: [x [object!]] -> [x/type == 'Nothing]^/fromJust: [x [object!]] -> [x/value]^/^/print Just 3^/print isJust Just 3^/print isJust Nothing^/print Nothing^/print isNothing Nothing^/print isNothing Just 3^/```^/^/```^/type: 'Just^/value: 3^/true^/false^/type: 'Nothing^/true^/false^/```}
    sent: "2017-08-31T15:05:11.399Z"
    editedAt: "2017-08-31T15:05:56.096Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a8258cba0f0f6e3802031d"
    text: "I think it’s a good start. Thanks."
    sent: "2017-08-31T15:04:44.253Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a8257b8f4427b462bb39ef"
    text: {I'd like to have such system implemented in Red as well :)}
    sent: "2017-08-31T15:04:27.609Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a82561ba0f0f6e3802025a"
    text: {otherwise you are just replacing `if`s with checks for types}
    sent: "2017-08-31T15:04:01.056Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a8253dc101bc4e3a775ca2"
    text: {for the stuff like `Either` you need a proper type checking system}
    sent: "2017-08-31T15:03:25.680Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a82198614889d475a7fad6"
    text: {and make few functions like `is-nothing`, `from-just` etc}
    sent: "2017-08-31T14:47:52.439Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a8218ebac826f054674d6f"
    text: "duh, @maximvl was faster"
    sent: "2017-08-31T14:47:42.560Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a821829acddb2407eb2723"
    text: "or an `object!`"
    sent: "2017-08-31T14:47:30.119Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a8217cbc46472974e0a5c0"
    text: {you can use simple objects to implement it like `make object [type: 'just value: 10]` and `make object! [type: 'nothing value: none]`}
    sent: "2017-08-31T14:47:24.781Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "59a8213cbc46472974e0a473"
    text: {idk, pass everything in a container-like blocks with `['type var]` spec}
    sent: "2017-08-31T14:46:20.545Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a8210fee5c9a4c5f1c2b0a"
    text: "though `unset` could be considered as a nothing"
    sent: "2017-08-31T14:45:35.972Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a821059acddb2407eb24cb"
    text: {@9214 That’s not enough. Maybe is just a start point. I would like to have Either  Error  Data if I know how to implment Maybe.}
    sent: "2017-08-31T14:45:25.808Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a820c1bc46472974e0a1ac"
    text: {@unchartedworks maybe is super easy, `if error? e: try compose/deep [return [just (code)]] [return 'nothing]`}
    sent: "2017-08-31T14:44:17.715Z"
    editedAt: "2017-08-31T14:45:16.422Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a82094210ac26920df3cda"
    text: {@maximvl I am not expecting Red supports Algebraic data type. However if it doesn’t support simple data type like Maybe, I have no idea where to start.}
    sent: "2017-08-31T14:43:32.091Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a8208966c1c7c477ff3bbf"
    text: {personally I always try to define failabale funcs in such a way that they return either result or `none`}
    sent: "2017-08-31T14:43:21.906Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a82036614889d475a7f2e4"
    text: "you may call it... pu**red** or something"
    sent: "2017-08-31T14:41:58.451Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a81febbc46472974e09cb6"
    text: {but the good news is you can implement one yourself ;)}
    sent: "2017-08-31T14:40:43.855Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a81fdb9acddb2407eb1eac"
    text: {@unchartedworks what you are asking is higher-level framework than pure Red}
    sent: "2017-08-31T14:40:27.917Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59a81f35bac826f05467419b"
    text: {`attempt`,`try`, `get/any` and `set/any` are your friends}
    sent: "2017-08-31T14:37:41.234Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a81edc162adb6d2e532850"
    text: {@9214 Optional values provides a reasonable framework for managing failable computations in a consistent and extensible way. For example, consider an operation that can fail.^/```^/> (define (safe-first lst)^/    (if (empty? lst)^/        nothing^/        (just (first lst))))^/```}
    sent: "2017-08-31T14:36:12.263Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a81bd9210ac26920df2732"
    text: {```text^/>> a: 'setted!^/== setted!^/>> x: [a b]^/== [a b]^/>> probe get/any first x^/setted!^/== setted!^/>> probe get/any second x^/unset^/```}
    sent: "2017-08-31T14:23:21.506Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a81b5666c1c7c477ff1c16"
    text: "for me it looks like an alias for `get/any`"
    sent: "2017-08-31T14:21:10.823Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a81b49162adb6d2e531699"
    text: {well, that's a tricky one, what specifically are you trying to achieve?}
    sent: "2017-08-31T14:20:57.222Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a81a0e66c1c7c477ff1657"
    text: {How to define an optional type like Racket does?^/```^/> (safe-first '(#\a #\b #\c))^/(just #\a)^/> (safe-first '())^/#<nothing>^/```}
    sent: "2017-08-31T14:15:42.096Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a7f79766c1c7c477fe5fed"
    text: {@9214 I found a way to work around it.^/```^/>> f: function [x] reduce [first [read/lines] 'x]^/== func [x][read/lines x]^/>> f %/etc/passwd^/== ["##" "# User Database" "# " ^{# Note that this file is consulted…^/```}
    sent: "2017-08-31T11:48:39.581Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a7f63d66c1c7c477fe5a52"
    text: {```text^/>> type? get first [read]^/== action!^/```}
    sent: "2017-08-31T11:42:53.119Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7f625bc46472974dfb95a"
    text: {@unchartedworks yes, because `block!` contains either `any-word!`s or `immediate!`s (I think), oh, and `series!`}
    sent: "2017-08-31T11:42:29.453Z"
    editedAt: "2017-08-31T11:43:34.610Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7f5f7210ac26920de5f5a"
    text: {```^/>> type? first [read]^/== word!^/```}
    sent: "2017-08-31T11:41:43.464Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a7f5d5162adb6d2e525db0"
    text: "why do you think it's a bug?"
    sent: "2017-08-31T11:41:09.867Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7f5bebc46472974dfb7e2"
    text: {Is it a bug?^/```^/>> print mold type? first [read/lines]^/path!^/```}
    sent: "2017-08-31T11:40:46.144Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a7f079bc46472974df9cfa"
    text: "attempt is better in my case."
    sent: "2017-08-31T11:18:17.081Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a7f05dbc46472974df9c9a"
    text: "@rebolek I see. Thanks."
    sent: "2017-08-31T11:17:49.176Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a7f0239acddb2407ea2bd9"
    text: {The error is returned to console, because it is last value, but it does not break the run of the script:^/```^/>> try [1 / 0] 1 + 1^/== 2^/```}
    sent: "2017-08-31T11:16:51.479Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a7f00e210ac26920de4410"
    text: {```text^/>> probe try [type? :read/lines]^/make error! [^/    code: 330^/    type: 'script^/    id: 'invalid-path-get^/    arg1: :read/lines^/    arg2: none^/    arg3: none^/    near: none^/    where: 'type?^/    stack: 40667144^/]^/```}
    sent: "2017-08-31T11:16:30.589Z"
    editedAt: "2017-08-31T11:16:36.754Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7efdf210ac26920de42ab"
    text: {```^/>> ret: try [1 / 0]^/*** Math Error: attempt to divide by zero^/*** Where: /^/*** Stack:  ^/^/>> type? ret^/== error!^/```}
    sent: "2017-08-31T11:15:43.479Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a7efc98f4427b462ba21fb"
    text: {or^/```text^/>> attempt [type? :read/lines]^/== none^/```}
    sent: "2017-08-31T11:15:21.972Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7efbdc101bc4e3a764a0b"
    text: {@unchartedworks you've just caught the error with `try`}
    sent: "2017-08-31T11:15:09.669Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a7ef88ee5c9a4c5f1b2ee4"
    text: {How to catch the error? ^/```^/>> try [type? :read/lines]^/*** Script Error: unsupported type in :read/lines get-path^/*** Where: type?^/*** Stack:^/```}
    sent: "2017-08-31T11:14:16.850Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a7ef078f4427b462ba1e3d"
    text: "you've made my day"
    sent: "2017-08-31T11:12:07.448Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7eed9bac826f054665668"
    text: "@9214 спосиба :)"
    sent: "2017-08-31T11:11:21.685Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a7eeb68f4427b462ba1d1c"
    text: "@rebolek да ;)"
    sent: "2017-08-31T11:10:46.789Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7eea9162adb6d2e523e4a"
    text: "@9214 Thanks.^/"
    sent: "2017-08-31T11:10:33.344Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a7ee93ba0f0f6e3800f31f"
    text: {@unchartedworks ^/```text^/>> type? :form^/== action!^/>> type? /part^/== refinement!^/>> type? :form/part^/*** Script Error: unsupported type in :form/part get-path^/*** Where: type?^/*** Stack:  ^/^/>> type? quote :form/part^/== get-path!^/``` }
    sent: "2017-08-31T11:10:11.514Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7ee4dee5c9a4c5f1b2922"
    text: {@unchartedworks `/lines` is an `refinement!`, `read/lines` is just `read`.}
    sent: "2017-08-31T11:09:01.810Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a7ee0ab16f264642ef09fa"
    text: {read/lines is different from many functions. I even can’t get its type. Is it a bug?^/```^/>> type? :type?^/== native!^/>> type? :read/lines^/*** Script Error: unsupported type in :read/lines get-path^/*** Where: type?^/*** Stack:^/```}
    sent: "2017-08-31T11:07:53.987Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a7e40dee5c9a4c5f1af9b1"
    text: "@9214  @rebolek cool!"
    sent: "2017-08-31T10:25:17.854Z"
    v: 1
    author: "57fb62e1d73408ce4f2d1d09"
) #(
    id: "59a7e3b19acddb2407e9f17b"
    text: "да"
    sent: "2017-08-31T10:23:45.295Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a7e36aee5c9a4c5f1af6c6"
    text: {@x86128 :point_right: there's also [`red/Russian`](https://gitter.im/red/Russian) room if you want to join :)}
    sent: "2017-08-31T10:22:34.071Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7e2218f4427b462b9e475"
    text: "@rebolek thanks^/"
    sent: "2017-08-31T10:17:05.011Z"
    v: 1
    author: "57fb62e1d73408ce4f2d1d09"
) #(
    id: "59a7e20566c1c7c477fdf913"
    text: {@x86128 you need to wait for full IO support in 0.7.0, currently it's not possible to access file on disk, only to load it to memory.}
    sent: "2017-08-31T10:16:37.478Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a7e1cd162adb6d2e520436"
    text: {$ /usr/bin/time ./vvvv^/^/*** Runtime Error 1: access violation^/*** at: F76B71B1h^/Command exited with non-zero status 1^/6.24user 0.57system 0:06.89elapsed 98%CPU (0avgtext+0avgdata 3786424maxresident)k^/0inputs+0outputs (0major+368489minor)pagefaults 0swaps^/}
    sent: "2017-08-31T10:15:41.471Z"
    v: 1
    author: "57fb62e1d73408ce4f2d1d09"
) #(
    id: "59a7e1cb614889d475a6c079"
    text: {@PeterWAWood i'm talking about my case when I'm reading a large CSV (about 1.2G).  }
    sent: "2017-08-31T10:15:39.745Z"
    v: 1
    author: "57fb62e1d73408ce4f2d1d09"
) #(
    id: "59a7e0b866c1c7c477fdf187"
    text: "Which directory is your red-0.6.3 in?"
    sent: "2017-08-31T10:11:04.514Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a7e09dc101bc4e3a76069b"
    text: "I ran the above code with red-0.6.3"
    sent: "2017-08-31T10:10:37.138Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a7dfccc101bc4e3a760258"
    text: {@PeterWAWood thanks for reply, i checked this. red-0.6.3 just falls with access violation...}
    sent: "2017-08-31T10:07:08.808Z"
    v: 1
    author: "57fb62e1d73408ce4f2d1d09"
) #(
    id: "59a7df7cbac826f054661089"
    text: {I need to check if the file is read one line at a time or converted after being read.}
    sent: "2017-08-31T10:05:48.479Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a7df5cb16f264642eec277"
    text: {@x86128 This might help:^/```text^/>> write %test.csv "1;2;3^^/4;5;6"^/>> foreach line read/lines %test.csv [print line]^/1;2;3^/4;5;6^/```}
    sent: "2017-08-31T10:05:16.107Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a7ddec8f4427b462b9d008"
    text: {@x86128 hi! Curent I/O support is pretty basic, I believe what you ask should come with `port!` datatype and full blown I/O support in `0.7.0` release}
    sent: "2017-08-31T09:59:08.240Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7dce1162adb6d2e51ef8f"
    text: {Hello! Is any simple way to read VERY large text file line by line to process each line individually, not all lines at once, like "read" do? My task is to select and print to stdout some records from LARGE CSV-file.}
    sent: "2017-08-31T09:54:41.795Z"
    v: 1
    author: "57fb62e1d73408ce4f2d1d09"
)#(
    id: "59a7d10ac101bc4e3a75bc86"
    text: ":joy:"
    sent: "2017-08-31T09:04:10.509Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a7d014614889d475a66f84"
    text: {@toomasv think of it as of super-sofisticated `parse` rule :)}
    sent: "2017-08-31T09:00:04.223Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7cfae210ac26920ddb294"
    text: {@9214 Not bad at all! I'm just too dumb for the  crypto stuff :(. Nevertheless I enjoyed the reading :)}
    sent: "2017-08-31T08:58:22.856Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a7c2cc8f4427b462b94d48"
    text: "thanks @Oldes "
    sent: "2017-08-31T08:03:24.465Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a7c2a6bc46472974decd36"
    text: "@9214 wau... interesting reading :o)"
    sent: "2017-08-31T08:02:46.093Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a7badb8f4427b462b92f85"
    text: "@toomasv oh c'mon, is it that bad? :("
    sent: "2017-08-31T07:29:31.248Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a79ad8bac826f05464d9bd"
    text: {Thanks @9214 ! Late here, but I will try to look tomorrow.}
    sent: "2017-08-31T05:12:56.304Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a79a9ac101bc4e3a74d8c8"
    text: {@9214 That's `Aww yiss!` It really is! (Not that I understood anything :pensive:)}
    sent: "2017-08-31T05:11:54.488Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a770e2162adb6d2e504892"
    text: {Lo and behold!^/^/I've spent last month working on a [tiny app](https://github.com/9214/daruma) about which I really care about. I also wrote an [article](https://9214.github.io/13) about this experience and there's a lot (clumsy disguised :stuck_out_tongue_winking_eye:) Red advocacy. Any feedback is appreciated, as this is my first "serious" piece of software and full-release-circle-open-source experience.^/^/I also leaved a couple of [issues](https://github.com/9214/daruma/issues) (dare I say *issues*?) for other Red newbies and newcomers who want to dabble their feets with the language and contributing. Let's make the world a better place ;)}
    sent: "2017-08-31T02:13:54.006Z"
    editedAt: "2017-08-31T02:14:54.035Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6ecbf162adb6d2e4e07b8"
    text: "The second is better for me. Thanks."
    sent: "2017-08-30T16:50:07.304Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a6ec0f162adb6d2e4e04de"
    text: {Sorry, It is my mistake. I can't duplicate the issue.}
    sent: "2017-08-30T16:47:11.344Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a6ea44ba0f0f6e38fc91c8"
    text: {or maybe^/```text^/>> chain: func [f g][func [x] reduce [:f :g 'x]]^/== func [f g][func [x] reduce [:f :g 'x]]^/>> c: chain func [x][x + 1] func [x][x * 2]^/== func [x][func [x][x + 1] func [x][x * 2] x]^/>> c 3^/== 7^/>> c 42^/== 85^/```}
    sent: "2017-08-30T16:39:32.088Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6e9069acddb2407e5d12f"
    text: {what do you mean?^/```text^/>> f: func [a][a + 1]^/== func [a][a + 1]^/>> g: func [b][b * 2]^/== func [b][b * 2]^/>> h: chain f g^/== func [x][f g x]^/>> h 3^/== 7^/>> h 42^/== 85^/>> f 1^/== 2^/>> g 2^/== 4^/```}
    sent: "2017-08-30T16:34:14.559Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6e8d8b16f264642eaa673"
    text: {The function names can't be f or g, otherwise it won't work.}
    sent: "2017-08-30T16:33:28.942Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a6e892614889d475a291bc"
    text: "@9214 There is a problem. chain f g"
    sent: "2017-08-30T16:32:18.093Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a6d95276a757f808fc9735"
    text: {@unchartedworks ^/```text^/>> chain: func ['f 'g][func [x] reduce [f g 'x]]^/== func ['f 'g][func [x] reduce [f g 'x]]^/>> foo: func [x][x + 1]^/== func [x][x + 1]^/>> bar: func [x][x * 2]^/== func [x][x * 2]^/>> qux: chain foo bar^/== func [x][foo bar x]^/>> qux 3^/== 7^/>> qux 42^/== 85^/```}
    sent: "2017-08-30T15:27:14.246Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6d82f66c1c7c477f9709e"
    text: {Hi, how to work around this issue?^/```^/compose-function: function [^/    f [any-function!]^/    g [any-function!]^/][^/    return func [x][f x]^/]^/^/f1: func [x][x + 1]^/g1: func [x][x * 2]^/^/fg1: (compose-function :f1 :g1)^/print (fg1 3)^/^/*** Script Error: f is not in the specified context^/```}
    sent: "2017-08-30T15:22:23.935Z"
    editedAt: "2017-08-30T15:22:35.990Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a6cef09acddb2407e5476f"
    text: {@codenoid  `ask` is specific for console,  you need to `#include` this file: https://github.com/red/red/blob/master/environment/console/input.red}
    sent: "2017-08-30T14:42:56.528Z"
    editedAt: "2017-08-30T14:43:26.946Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a6cd00162adb6d2e4d654a"
    text: "I believe `ask` doesn't work only then compiling"
    sent: "2017-08-30T14:34:40.174Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6cbfc614889d475a1f5b6"
    text: {https://groups.google.com/forum/#!topic/red-lang/7LjOOj5Yg7E}
    sent: "2017-08-30T14:30:20.949Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6cb7cba0f0f6e38fbef75"
    text: {`undefined word ask` , is `ask` for getting STDIN deprecated or ?}
    sent: "2017-08-30T14:28:12.995Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6c4388f4427b462b511ab"
    text: {@codenoid :point_right: https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b}
    sent: "2017-08-30T13:57:12.954Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6c41abc46472974da72fd"
    text: {> [Rebol/Core user guide](http://www.rebol.com/docs/core23/rebolcore.html) is essential, [Red wiki](https://github.com/red/red/wiki) too. thanks :+1: }
    sent: "2017-08-30T13:56:42.877Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6c3f9c101bc4e3a71177c"
    text: "haha, success, my first GUI app with Red"
    sent: "2017-08-30T13:56:09.801Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6c3e6bc46472974da722c"
    text: {[Rebol/Core user guide](http://www.rebol.com/docs/core23/rebolcore.html) is essential, [Red wiki](https://github.com/red/red/wiki) too.}
    sent: "2017-08-30T13:55:50.702Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6c392ba0f0f6e38fbc5ad"
    text: "nice http://www.red-by-example.org/index.html"
    sent: "2017-08-30T13:54:26.804Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6c36dbc46472974da6f11"
    text: {as well as the language itself, bear in mind that its version is `0.6.3`, not `1.0.0`}
    sent: "2017-08-30T13:53:49.169Z"
    editedAt: "2017-08-30T13:54:11.833Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6c326c101bc4e3a711398"
    text: "work in progress :/"
    sent: "2017-08-30T13:52:38.025Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6c30dbc46472974da6e3b"
    text: "https://doc.red-lang.org/"
    sent: "2017-08-30T13:52:13.358Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6c3008f4427b462b50ac1"
    text: "@codenoid you probably forgot `Red []` header"
    sent: "2017-08-30T13:52:00.655Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6c2ee162adb6d2e4d2c5f"
    text: {i just write^/`view [text "Hello Mac World!"]` at vscode^/and got `invalid Red program`, what wrong?^/^/is there any documentation?}
    sent: "2017-08-30T13:51:42.891Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6b173bc46472974da0d8d"
    text: {@codenoid No problem, we were all beginners in programming at some point. ;-)}
    sent: "2017-08-30T12:37:07.228Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a6b14276a757f808fbc367"
    text: {ok ^^^^, thanks ^^^^ , i'm really new in programming world, my background is text plain ;) :+1: }
    sent: "2017-08-30T12:36:18.769Z"
    editedAt: "2017-08-30T12:36:29.604Z"
    v: 2
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6b0818f4427b462b4a089"
    text: {@codenoid :+1:  Feel free to ask questions about Red learning in the [red/help](https://gitter.im/red/red/help) group.}
    sent: "2017-08-30T12:33:05.152Z"
    editedAt: "2017-08-30T12:33:52.669Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a6b05a76a757f808fbbe92"
    text: "done @dockimbel  ;) "
    sent: "2017-08-30T12:32:26.531Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6b05376a757f808fbbe84"
    text: {```^/~/Downloads ᐅ ./red^/zsh: permission denied: ./red^/~/Downloads ᐅ sudo chmod -R 777 red^/Password:^/~/Downloads ᐅ ./red^/Compiling compression library...^/Compiling Red console...^/--== Red 0.6.3 ==--^/Type HELP for starting information.^/^/>>^/```}
    sent: "2017-08-30T12:32:19.591Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6af908f4427b462b49aef"
    text: {Once we get the GUI console on macOS, it will be as simple to run as on Windows.}
    sent: "2017-08-30T12:29:04.651Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a6af658f4427b462b49a58"
    text: "oh, right, `chmod`, my *nix skills are rusty :("
    sent: "2017-08-30T12:28:21.610Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6af4b9acddb2407e4a475"
    text: {@codenoid From terminal:^/```lisp^/chmod +x red-063^/./red-063^/```}
    sent: "2017-08-30T12:27:55.290Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59a6af0aba0f0f6e38fb5d4b"
    text: {anyway, I'm not MacOS guy, but if launching downloaded binary with `./red-063` doesn't work, let's wait for someone with OSX at hand to help you.}
    sent: "2017-08-30T12:26:50.234Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6aec2162adb6d2e4cc1b0"
    text: "yasss"
    sent: "2017-08-30T12:25:38.683Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6aebac101bc4e3a70a562"
    text: {is that "wait" or "what"? :)}
    sent: "2017-08-30T12:25:30.041Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6ae9a614889d475a15a96"
    text: "whait"
    sent: "2017-08-30T12:24:58.572Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6ae92162adb6d2e4cc0f1"
    text: "what about `./red-063` from shell?"
    sent: "2017-08-30T12:24:50.110Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6ae5cee5c9a4c5f157eeb"
    text: "*opened as text file"
    sent: "2017-08-30T12:23:56.414Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6ae4f162adb6d2e4cbfc4"
    text: "is not executable file on here :( "
    sent: "2017-08-30T12:23:43.548Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6ae2cba0f0f6e38fb5848"
    text: "I believe just double-click on it ;)"
    sent: "2017-08-30T12:23:08.196Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6ae0b66c1c7c477f89396"
    text: "then ? what i must do ?"
    sent: "2017-08-30T12:22:35.528Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
) #(
    id: "59a6adfc9acddb2407e49c7c"
    text: {@codenoid grab release for MacOS [here](http://www.red-lang.org/p/download.html)}
    sent: "2017-08-30T12:22:20.375Z"
    editedAt: "2017-08-30T12:22:41.173Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a6adb79acddb2407e49b4c"
    text: "please, how to install on MAC"
    sent: "2017-08-30T12:21:11.407Z"
    v: 1
    author: "58b3c149d73408ce4f4d1dca"
)#(
    id: "59a698679acddb2407e43921"
    text: {rejoin is strange.^/```^/>> rejoin [#"a" #"b" #"c"]^/== "abc"^/>> rejoin ["a" "b" "c"]^/== “abc”^/>> rejoin [[a] [b] [c]]^/== [a [b] [c]]^/```}
    sent: "2017-08-30T10:50:15.598Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a68cf09acddb2407e404b4"
    text: {```text^/>> x: []^/== []^/>> extract/into "abcd" 1 x^/== [#"a" #"b" #"c" #"d"]^/>> x^/== [#"a" #"b" #"c" #"d"]^/>> rejoin x^/== "abcd"^/```}
    sent: "2017-08-30T10:01:20.709Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a68c678f4427b462b3f577"
    text: {```^/chars-to-string:  [xs] -> [concatMap :to-string xs]^/```}
    sent: "2017-08-30T09:59:03.235Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a68be09acddb2407e3ff57"
    text: {I believe `to-strings concat` could be replaced with `rejoin`}
    sent: "2017-08-30T09:56:48.139Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a68b4776a757f808fb02ee"
    text: "@9214 I don’t use >>> for bitwise operations."
    sent: "2017-08-30T09:54:15.063Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a68ac4ee5c9a4c5f14d12d"
    text: "though it uses rebinded `>>>`"
    sent: "2017-08-30T09:52:04.444Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a68a5e76a757f808fafef4"
    text: "*B* seems to be more modular and flexible"
    sent: "2017-08-30T09:50:22.525Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a68965b16f264642e8b86e"
    text: "@rebolek not really. ;) "
    sent: "2017-08-30T09:46:13.506Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a688e18f4427b462b3e37f"
    text: {@unchartedworks You're certainly good at obfuscation :) Once I will understand what is going there, I may answer, but not sooner :)}
    sent: "2017-08-30T09:44:01.120Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a68805210ac26920d7f7f6"
    text: {Which is better? A or B?^/(& is a reverse application operator.)^/(-> is function operator)^/```^/to-charints: [xs] -> [map ([x] -> [to-integer #"a" + x]) xs]^/to-chars:    [xs] -> [map :to-char xs] ^/to-strings:  [xs] -> [map :to-string xs]^/^/;A^/[0 1 2 3] & :to-charints & :to-chars & :to-strings & :concat & :uppercase & :print^/^/;B^/[0 1 2 3] >>> [to-charints to-chars to-strings concat uppercase print]^/^/```^/^/```^/ABCD^/ABCD^/```}
    sent: "2017-08-30T09:40:21.688Z"
    editedAt: "2017-08-30T09:45:43.151Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a68706ba0f0f6e38faa0d4"
    text: "It’s good to know."
    sent: "2017-08-30T09:36:06.720Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a5d573578b44a046002501"
    text: {Only a couple facets support arbitrary expression at this time, as an experiment. `Data` is one. e.g. `view [text-list data (collect [repeat i 10 [keep form i]])]`}
    sent: "2017-08-29T20:58:27.706Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a5b6f7578b44a046ff8aa4"
    text: "@9214 It’s working. Thanks. :)"
    sent: "2017-08-29T18:48:23.208Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a5b6299acddb2407e07b06"
    text: {```text^/>> view compose [text (append reverse form 'ih #"!")]^/```}
    sent: "2017-08-29T18:44:57.005Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a5b5ed76a757f808f796eb"
    text: {@unchartedworks use `compose` to evaluate the parens}
    sent: "2017-08-29T18:43:57.469Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a5b4d08f4427b462b0665b"
    text: {```^/view [text (concat replicate 4 "OK”)]^/^/*** Script Error: VID - invalid syntax at: [(concat replicate 8 "OK")]^/*** Where: do^/*** Stack: view layout cause-error^/```^/It doesn’t work, why?^/^/```^/oks: concat replicate 4 "OK"^/;;"OKOKOKOK"^/view [text oks]^/```^/It works.}
    sent: "2017-08-29T18:39:12.040Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a556649acddb2407de8d2e"
    text: "@tekjar you're welcome"
    sent: "2017-08-29T11:56:20.775Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a5565dbc46472974d3f82f"
    text: " @9214 Ohh..Ok..Thanks :)"
    sent: "2017-08-29T11:56:13.026Z"
    v: 1
    author: "558e0e5d15522ed4b3e2e545"
) #(
    id: "59a55611bc46472974d3f735"
    text: {@tekjar hi, GTK backend is a work in progress (though you can see recent changes in [`gui-branch`](https://gitter.im/red/red/gui-branch) room). Meanwhile, just stick with Wine (if that's ok for you).}
    sent: "2017-08-29T11:54:57.732Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a555b8210ac26920d29b58"
    text: {```^/*** Script Error: view has no value^/*** Where: catch^/*** Stack:^/```}
    sent: "2017-08-29T11:53:28.528Z"
    v: 1
    author: "558e0e5d15522ed4b3e2e545"
) #(
    id: "59a555af162adb6d2e46ab09"
    text: "I get this error"
    sent: "2017-08-29T11:53:19.758Z"
    v: 1
    author: "558e0e5d15522ed4b3e2e545"
) #(
    id: "59a5557976a757f808f59dae"
    text: {```^/Red [needs: 'view]^/view [button "OK"]^/```}
    sent: "2017-08-29T11:52:25.884Z"
    v: 1
    author: "558e0e5d15522ed4b3e2e545"
) #(
    id: "59a55571578b44a046fd938f"
    text: "Hi. I'm trying this simple example on ubuntu16.04"
    sent: "2017-08-29T11:52:17.173Z"
    v: 1
    author: "558e0e5d15522ed4b3e2e545"
) #(
    id: "59a55238210ac26920d28a17"
    text: "@9214 Thanks. "
    sent: "2017-08-29T11:38:32.297Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a55213ba0f0f6e38f52f59"
    text: {@unchartedworks just grab the latest automated build}
    sent: "2017-08-29T11:37:55.865Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a551cd66c1c7c477f26c49"
    text: {I use a workaround,  because I can’t build binary compiler from source. }
    sent: "2017-08-29T11:36:45.692Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a52f36578b44a046fce1e0"
    text: "qtxie fixed it on latest commit. It works now."
    sent: "2017-08-29T09:09:10.621Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a4ba1d8f4427b462abf3ad"
    text: {@unchartedworks  :point_up: [August 28, 2017 5:44 PM](https://gitter.im/red/red/welcome?at=59a41036ba0f0f6e38ef8697) didn't see this chat, I posted details in your bug https://github.com/red/red/issues/3003^/*tl;dr* It's like @endo64 said, not implemented}
    sent: "2017-08-29T00:49:33.357Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59a46100210ac26920ce8fb5"
    text: "@greggirwin :)"
    sent: "2017-08-28T18:29:20.751Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a46084162adb6d2e42a6fb"
    text: {@unchartedworks, a little more explicit approach (idea):^/```^/export: function [^/^-"Export words to the global context"^/^-obj   [object!] "Context to export from"^/^-words [block!]  "Words to export"^/^-/as names [block!] "Use these names in the global context"^/][^/^-if all [as  (length? words) <> (length? names)][^/^-^-print "You need a name for each word when using /as."^/^-^-halt^/^-]^/^-foreach word words [^/^-^-set either as [also  first names  names: next names][word] :obj/:word^/^-]^/^-words^/]^/obj: object [a: 1 b: does [print "Hey!"]]^/export obj [a b]^/export/as obj [a b] [aa bb]^/```^/Couldn't find my old one just now.}
    sent: "2017-08-28T18:27:16.448Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a45c0bc101bc4e3a66797c"
    text: {@9214, my old gray roots are showing, `get in` vs `get-path!` syntax. :^^)}
    sent: "2017-08-28T18:08:11.311Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a45b3dc101bc4e3a6674be"
    text: "@9214 @greggirwin Thanks. It’s working."
    sent: "2017-08-28T18:04:45.123Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a45ab78f4427b462aa3fb9"
    text: {```^/BaseKit: object [delete*: func [xs][head remove xs]]^/delete*: :BaseKit/delete*^/print mold delete* [1 2 3]^/^/[2 3]^/```^/}
    sent: "2017-08-28T18:02:31.386Z"
    editedAt: "2017-08-28T18:02:57.203Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a45ab666c1c7c477ee4441"
    text: {```text^/>> obj: context [foo: does [print "hey"] bar: does [print "there"]]^/== make object! [^/    foo: func [][print "hey"]^/    bar: func [][print "...^/>> set [my-foo my-bar] reduce [:obj/foo :obj/bar]^/== [func [][print "hey"] func [][print "there"]]^/>> my-foo^/hey^/>> my-bar^/there^/```}
    sent: "2017-08-28T18:02:30.244Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a45a6a210ac26920ce7265"
    text: {```^/>> obj: context [fn: does [print "Hey!"]]^/== make object! [^/    fn: func [][print "Hey!"]^/]^/>> global-fn: get in obj 'fn^/== func [][print "Hey!"]^/>> global-fn^/Hey!^/```}
    sent: "2017-08-28T18:01:14.147Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a45a2c9acddb2407da4ff8"
    text: {You can also, of course, create the functions in the context and then set global words to refer to just those you want exported.}
    sent: "2017-08-28T18:00:12.135Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a459e776a757f808f16b95"
    text: {`Set`, used in a context, sets the word in the global context:^/```^/>> context [set 'global-fn does [print "Hey!"]]^/== make object! []^/>> global-fn^/Hey!^/```}
    sent: "2017-08-28T17:59:03.868Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a4576966c1c7c477ee335f"
    text: {```text^/>> obj: object [answer: 42]^/== make object! [^/    answer: 42^/]^/>> do bind [print answer] obj^/42^/```}
    sent: "2017-08-28T17:48:25.260Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a4574276a757f808f15ff8"
    text: "or to multiple objects at once"
    sent: "2017-08-28T17:47:46.375Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a457388f4427b462aa2d50"
    text: {@unchartedworks you can `bind` block with function usage to this object instead.}
    sent: "2017-08-28T17:47:36.398Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a456e6614889d475970733"
    text: {@greggirwin It doesn’t work for me. I don’t want to use functions with an object/context name.}
    sent: "2017-08-28T17:46:14.976Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a448d876a757f808f11902"
    text: {@greggirwin but then it's the matter of writing `obj/foo`, no?}
    sent: "2017-08-28T16:46:16.893Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a44896c101bc4e3a6615ab"
    text: {:point_up: [August 28, 2017 3:21 AM](https://gitter.im/red/red/welcome?at=59a3e0ae578b44a046f707ac) @unchartedworks, you can create a context in the file and only export those funcs you want globally visible, by using `set`.}
    sent: "2017-08-28T16:45:10.214Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a42646bc46472974ced159"
    text: "Yes, looks like a bug to me."
    sent: "2017-08-28T14:18:46.667Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a422e0c101bc4e3a655481"
    text: "I think it’s a bug."
    sent: "2017-08-28T14:04:16.692Z"
    editedAt: "2017-08-28T14:05:23.925Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a41ca2578b44a046f82745"
    text: {I think `sort/compare` ignores the given function if the parameters are `string!`^/Check this out: `sort/compare xs func [x y] [ 1 / 0 ] ; == == "abcd"` ^/No error!}
    sent: "2017-08-28T13:37:38.509Z"
    editedAt: "2017-08-28T13:37:57.223Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59a410f5ba0f0f6e38ef8b14"
    text: {If the input is an array of string, it works as expected.^/```^/>> xs: ["d" "c" "b" "a"]^/== ["d" "c" "b" "a"]^/>> sort/compare xs func [x y][x < y]^/== ["a" "b" "c" "d"]^/>> sort/compare xs func [x y][x > y]^/== ["d" "c" "b" "a"]^/```}
    sent: "2017-08-28T12:47:49.573Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a41036ba0f0f6e38ef8697"
    text: {Why are the results the same? Is it a bug of sort?^/```^/>> xs: "dcba"^/== "dcba"^/>> sort/compare xs func [x y][x < y]^/== "abcd"^/>> sort/compare xs func [x y][x > y]^/== "abcd"^/```}
    sent: "2017-08-28T12:44:38.303Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a3e297578b44a046f71258"
    text: "@rebolek Thanks."
    sent: "2017-08-28T09:29:59.728Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a3e0d666c1c7c477ebec44"
    text: {@unchartedworks I see. Than you need to wait for modules.}
    sent: "2017-08-28T09:22:30.742Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "59a3e0ae578b44a046f707ac"
    text: {@rebolek I don’t want to expose some internal functions which should be accessed only by other functions which are in the same file.}
    sent: "2017-08-28T09:21:50.665Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a3e000162adb6d2e4024e4"
    text: {@unchartedworks I'm not sure what you mean by *file scope*, but all functions are anonymous in Red. It's up to you how much you expose them (Red can be more helpful in this area, but you have all the control).}
    sent: "2017-08-28T09:18:56.740Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a3ddfdee5c9a4c5f08dc93"
    text: {Hi ,is there any way to create a private function? For instance it’s only in file scope.}
    sent: "2017-08-28T09:10:21.322Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a2bd6a9acddb2407d3a7a3"
    text: {Red/System compiled file is also about 20KB. Even less without runtime.. but than it is all up to user to implement what is needed.}
    sent: "2017-08-27T12:39:06.702Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59a2a229578b44a046f23724"
    text: {Ok, thank you very much. As I consider, it's temporary situation and compiler will be improved in the future. :+1: }
    sent: "2017-08-27T10:42:49.642Z"
    v: 1
    author: "59a1f0b7d73408ce4f731dec"
) #(
    id: "59a21881ba0f0f6e38e8360a"
    text: {@DVL333, at 600K you get the entire Red runtime, as there is no modular compilation yet (as Peter noted about optimizations as well). The extra for the GUI system adds the other 300K. Nim compiles to C, so gets the benefit of those compiler systems. Red, on the other hand, is a self-contained toolchain. That's why no optimizations or other benefits yet.}
    sent: "2017-08-27T00:55:29.258Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a2008bc101bc4e3a5d671d"
    text: {The Red/System dialect should be used for hardware and driver creation. The size of a "Hello World" app created by the current bootstrap compiler is 106KB. Optimisation is not possible with the bootstrap compiler.}
    sent: "2017-08-26T23:13:15.385Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59a1f9c2210ac26920c57898"
    text: {Hello everybody!^/I've interested by Red. And some questions had appeared...^/Red is considerated to be a language for hardware and driver creation. What about speed and file size of its apps? Is there any tests, comparisons with other languages?^/^/I compiled "Hello world" app, without dependencies. And was badly surprised - its size is about 600KB without GUI and about 900KB with GUI (Windows platform). In the same time, size of that program written with Nim is much less - about 22 and 27 KB respectively (with optimization)! May be Red compiler has any options, that allow to reduce file size? Or any plans to optimize the compiler in the future? What results is expected?}
    sent: "2017-08-26T22:44:18.376Z"
    v: 1
    author: "59a1f0b7d73408ce4f731dec"
) #(
    id: "59a19e2e66c1c7c477e3a86e"
    text: {Currently, the order of keys is always same, but that may change with implementation, so theoretically it is not guaranteed, but right now it practically is.}
    sent: "2017-08-26T16:13:34.601Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a19d7976a757f808e6e208"
    text: {```^/>> m: #(a: 1 b: 2 c: 3)^/== #(^/    a: 1^/    b: 2^/    c: 3^/)^/>> keys-of m^/== [a b c]^/>> m/b: none ^/== none^/>> m/b: 22^/== 22^/>> keys-of m^/== [a b c]^/>> m/bb: 222^/== 222^/>> keys-of m^/== [a b c bb]^/```}
    sent: "2017-08-26T16:10:33.879Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a19d14ba0f0f6e38e6616c"
    text: {I could be wrong, but I don't believe that's a guarantee. Maps are intended to be accessed by key, not index.}
    sent: "2017-08-26T16:08:52.020Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a19c95bc46472974c5396b"
    text: "@greggirwin I thought it’s ordered map."
    sent: "2017-08-26T16:06:45.660Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a19c619acddb2407cfc962"
    text: {> What if I want to query the value of the first key value pair and I don’t know the key name.^/^/@unchartedworks, `map!` entries are unordered, so there is no guarantee you will always get them back in the same order on each access. Accessing them that way works fine though.}
    sent: "2017-08-26T16:05:53.140Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a15df4ee5c9a4c5fffa985"
    text: "@meijeru @9214 Thanks."
    sent: "2017-08-26T11:39:32.093Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a15db966c1c7c477e2a2cc"
    text: {```text^/>> map: #("a key I don't know" value)^/== #(^/    "a key I don't know" value^/)^/>> keys-of map^/== ["a key I don't know"]^/>> values-of map^/== [value]^/```}
    sent: "2017-08-26T11:38:33.385Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a15d9f614889d4758b8ec0"
    text: {`keys-of` gives you a block of keys. Pick the first one of that: `select m first keys-of m`}
    sent: "2017-08-26T11:38:07.258Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a15c0266c1c7c477e29d15"
    text: {@rebolek Thanks. It works. ^/```^/m1: #(a: 1 2 20 "c" 3)^/== #(^/    a: 1^/    2 20^/    "c" 3^/)^/>> m1/2^/== 20^/```^/What if I want to query the value of the first key value pair and I don’t know the key name.}
    sent: "2017-08-26T11:31:14.205Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a15bc3ee5c9a4c5fffa03b"
    text: {Unfortunately, for lexical reasons the expression `m/"key"` is not allowed. But `m/("key")` is.}
    sent: "2017-08-26T11:30:11.988Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "59a157c5a7b406262dcbbc67"
    text: {@unchartedworks of course^/```^/^/>> m: #("key" value)^/== #(^/    "key" value^/)^/>> select m "key"^/== value^/```}
    sent: "2017-08-26T11:13:09.390Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59a156e5ee5c9a4c5fff8ce9"
    text: "Hi, does map! support key which type is string?"
    sent: "2017-08-26T11:09:25.436Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a136c066c1c7c477e21a6b"
    text: "@geekyi that's the spirit!"
    sent: "2017-08-26T08:52:16.163Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a123c1210ac26920c251e1"
    text: {```red^/>> to url! "https://en.wikipedia.org/wiki/Macro_(computer_science)"^/== https://en.wikipedia.org/wiki/Macro_%28computer_science%29^/```^/@9214  [macro]( https://en.wikipedia.org/wiki/Macro_%28computer_science%29 )}
    sent: "2017-08-26T07:31:13.472Z"
    editedAt: "2017-08-26T07:34:54.865Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "59a0d8f0210ac26920c16e7f"
    text: {@abdllhygt, since Red is still Alpha, most of us are working on tools, functions, and examples for Red, plus testing, rather than production apps. Certainly we can write tools for our own use though.}
    sent: "2017-08-26T02:12:00.939Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59a06ed266c1c7c477df519e"
    text: "okay now :)"
    sent: "2017-08-25T18:39:14.707Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06eca9acddb2407cb8da7"
    text: ":+1: "
    sent: "2017-08-25T18:39:06.818Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06e37ba0f0f6e38e20b5c"
    text: {yes, small hash decoder, but I haven't released it yet (needs some final polishing)}
    sent: "2017-08-25T18:36:39.476Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a06ddf578b44a046ea4f07"
    text: "do you develop an app with red?"
    sent: "2017-08-25T18:35:11.181Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06dc4210ac26920bfcf29"
    text: ":+1:"
    sent: "2017-08-25T18:34:44.147Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a06dba9acddb2407cb890f"
    text: "i will research"
    sent: "2017-08-25T18:34:34.948Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06db19acddb2407cb88fd"
    text: "okay, thank you"
    sent: "2017-08-25T18:34:25.179Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06d3066c1c7c477df4aa1"
    text: {@9214 dang, Gitter can't handle nested parens inside links}
    status: true
    sent: "2017-08-25T18:32:16.966Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a06ccebc46472974c0d99b"
    text: {yes, just like Lisps, Red is [homoiconic](https://en.wikipedia.org/wiki/Homoiconicity) and extremely flexible, has good [metaprogramming](https://en.wikipedia.org/wiki/Metaprogramming) capabilites and  macro (https://en.wikipedia.org/wiki/Macro_(computer_science)) system. But unlike Lips, it also has built-in [TDPL parser](http://www.red-lang.org/2013/11/041-introducing-parse.html).}
    sent: "2017-08-25T18:30:38.172Z"
    editedAt: "2017-08-25T18:31:52.566Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a06c2fc101bc4e3a579a12"
    text: "language are good*"
    sent: "2017-08-25T18:27:59.082Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06bc8ee5c9a4c5ffc4b18"
    text: {i know that, like lisp or red languages good for language development}
    sent: "2017-08-25T18:26:16.874Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06b9fee5c9a4c5ffc481d"
    text: "oh okay"
    sent: "2017-08-25T18:25:35.231Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06a8ea7b406262dc86ae3"
    text: {"In my opinion"}
    sent: "2017-08-25T18:21:02.323Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a06a80578b44a046ea3e4f"
    text: "what is IMO?"
    sent: "2017-08-25T18:20:48.345Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06a2776a757f808e26024"
    text: {note that Red itself is in active developement, if you just want to play around and build a toy programming language - IMO it's a good choice }
    sent: "2017-08-25T18:19:19.615Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a06a22bc46472974c0cc1e"
    text: "@toomasv not bad. :)"
    sent: "2017-08-25T18:19:14.170Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a069e0ba0f0f6e38e1f68c"
    text: "i have an idea"
    sent: "2017-08-25T18:18:08.893Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a069cf9acddb2407cb77e2"
    text: "i think: 70% DSL and 30% normal :)"
    sent: "2017-08-25T18:17:51.872Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a069ae578b44a046ea3b8d"
    text: "you're welcome"
    sent: "2017-08-25T18:17:18.387Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a069a5162adb6d2e339e93"
    text: "thank you"
    sent: "2017-08-25T18:17:09.909Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06976ee5c9a4c5ffc3c61"
    text: {I would say it's good for domain-specific languages, not sure about general-purpose PLs}
    sent: "2017-08-25T18:16:22.549Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a069569acddb2407cb75f7"
    text: "red is good for it?"
    sent: "2017-08-25T18:15:50.091Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a0694bba0f0f6e38e1f33f"
    text: "i want to develop a programming language"
    sent: "2017-08-25T18:15:39.832Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a0693c578b44a046ea3907"
    text: "I'm ok"
    sent: "2017-08-25T18:15:24.822Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a0692f76a757f808e25c7b"
    text: "oh :) fine thanks and you"
    sent: "2017-08-25T18:15:11.878Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06913a7b406262dc863e3"
    text: "https://en.wikipedia.org/wiki/Howdy ;)"
    sent: "2017-08-25T18:14:43.675Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a068f3ba0f0f6e38e1f230"
    text: {what is "howdy"}
    sent: "2017-08-25T18:14:11.193Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
)#(
    id: "59a068cdee5c9a4c5ffc3980"
    text: "@abdllhygt howdy"
    sent: "2017-08-25T18:13:33.107Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a068b9bc46472974c0c538"
    text: "Hi"
    sent: "2017-08-25T18:13:13.215Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59a06317ee5c9a4c5ffc1eea"
    text: {@unchartedworks Current [type hierarchy](https://github.com/toomasv/red-type-hierarchy/blob/master/Red%20type%20hierarchy2.pdf)}
    sent: "2017-08-25T17:49:11.224Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59a058ee578b44a046e9e8ee"
    text: "@9214 Thanks."
    sent: "2017-08-25T17:05:50.823Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a05887578b44a046e9e69c"
    text: {`function!` is a subset of `any-function!` among with some other datatypes^/```text^/>> any-function!^/== make typeset! [native! action! op! function! routine!]^/>> function!^/== function!^/```}
    sent: "2017-08-25T17:04:07.646Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a05825162adb6d2e33490a"
    text: {What’s the difference between function! and any-function!?}
    sent: "2017-08-25T17:02:29.506Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a05780ba0f0f6e38e1a17a"
    text: {oh, wait, you actually passed quoted `sort/compare` to it}
    sent: "2017-08-25T16:59:44.013Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59a0575fee5c9a4c5ffbea2e"
    text: "@9214 I see. Thanks. :)"
    sent: "2017-08-25T16:59:11.605Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "59a0573776a757f808e20269"
    text: {@unchartedworks `?` expected "help string", not a `block!` value}
    sent: "2017-08-25T16:58:31.839Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ffc0176a757f808e036a3"
    text: "http://www.rebol.com/docs/words/wprotect.html"
    sent: "2017-08-25T10:29:21.453Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ffbd6578b44a046e8196c"
    text: "or we should just wait for `protect`"
    sent: "2017-08-25T10:28:38.102Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ffab4578b44a046e814c9"
    text: "https://docs.racket-lang.org/ts-guide/"
    sent: "2017-08-25T10:23:48.477Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ffa5a162adb6d2e3186ba"
    text: "I envision rap songs about RAAP"
    sent: "2017-08-25T10:22:18.205Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ffa2da7b406262dc64c3d"
    text: "RAAP - Red as a platform"
    sent: "2017-08-25T10:21:33.541Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff9e5ba0f0f6e38dfed1b"
    text: "yeah, only smaller and simplier"
    sent: "2017-08-25T10:20:21.892Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff9e3ba0f0f6e38dfecad"
    text: "but for a DSL we don't really need that, I guess"
    sent: "2017-08-25T10:20:19.215Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff9d766c1c7c477dd14e3"
    text: "even thinking about that gives me goosebumps"
    sent: "2017-08-25T10:20:07.674Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff9d09acddb2407c95cbf"
    text: "Like llvm?"
    sent: "2017-08-25T10:20:00.479Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599ff9bc614889d47585fcfc"
    text: "will be a big time"
    sent: "2017-08-25T10:19:40.440Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff9a2614889d47585fc96"
    text: "modular toolchain"
    sent: "2017-08-25T10:19:14.227Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff8e466c1c7c477dd0fd0"
    text: {moreover `f` may not be a function, because `function` is not a... well, `function!` constructor.}
    sent: "2017-08-25T10:16:04.441Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff8d8210ac26920bd96aa"
    text: {No, it won’t against the language itself, it just make it better. For intance, if you don’t define the type of an parameter, then it’s the same as before, otherwise compiler will raise errors if there is an illeagal parameter.}
    sent: "2017-08-25T10:15:52.449Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599ff85ec101bc4e3a55705c"
    text: "but, that's another story :D"
    sent: "2017-08-25T10:13:50.764Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff84466c1c7c477dd0cee"
    text: {and when it comes to Red `2.0` with its modual toolchain, I think you could just plug in your `hs` compiler module and have fun}
    sent: "2017-08-25T10:13:24.787Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff822a7b406262dc6423c"
    text: "others are super awesome"
    sent: "2017-08-25T10:12:50.891Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff81d578b44a046e80bc8"
    text: "some things are just terrible to write in haskell"
    sent: "2017-08-25T10:12:45.387Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff802210ac26920bd92a4"
    text: {exactly, when it's a dialect - you can use it whether you want}
    sent: "2017-08-25T10:12:18.242Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff7ea66c1c7c477dd0b2e"
    text: {such compiler checks are a good thing, but they will go against language free-formity, thus, they should be optional (not to say that typing is a debatable thing itself!). I think Racket done this in a clever way with its `#lang`s.}
    sent: "2017-08-25T10:11:54.173Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff7e8ba0f0f6e38dfe4a0"
    text: {and keep dynamics for quick prototyping and hacky things}
    sent: "2017-08-25T10:11:52.756Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff7ce162adb6d2e317bff"
    text: {because it's so easy to make assumptions about proven and checked code}
    sent: "2017-08-25T10:11:26.256Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff7b5578b44a046e80910"
    text: "typed functional dialect"
    sent: "2017-08-25T10:11:01.848Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599ff790a7b406262dc63ff8"
    text: "yep, I'd love to have typed, even pure dialect"
    sent: "2017-08-25T10:10:24.941Z"
    editedAt: "2017-08-25T10:10:34.201Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff774a7b406262dc63f2f"
    text: {anyway, if you want to stick with Red but code in Haskell, bake a `hs` dialect and enforce strong typing, currying, monads or whatever}
    sent: "2017-08-25T10:09:56.837Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff72bba0f0f6e38dfe142"
    text: "yeah, code is data anyways"
    sent: "2017-08-25T10:08:43.148Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff71eba0f0f6e38dfe0d2"
    text: {ok, to rephrase - `block!` is _data_ until it's evaluated, and what `block!` _does_ as _code_ depends on _how_ it's evaluated and in which context.}
    sent: "2017-08-25T10:08:30.388Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff70b614889d47585f2e2"
    text: {well I would say that your paste is data, but in^/```^/subleq [^/3 4 6^/7 7 7^/3 4 0^/]^/```^/it's a code :D}
    sent: "2017-08-25T10:08:11.747Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff6bcbc46472974be92cf"
    text: {is that code or data?^/```^/[^/3 4 6^/7 7 7^/3 4 0^/]^/```^/one could say that it's a block of integers, but _maybe_ it's a code for `subleq` dialect?}
    sent: "2017-08-25T10:06:52.017Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff68e162adb6d2e317702"
    text: {but if you start nailing things with it - it becomes a hammer :D}
    sent: "2017-08-25T10:06:06.101Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff680c101bc4e3a55688f"
    text: "it's like if you have a brick - it's a brick"
    sent: "2017-08-25T10:05:52.000Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff668bc46472974be9108"
    text: "once you evaluate it it becomes a code"
    sent: "2017-08-25T10:05:28.884Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff654210ac26920bd8a09"
    text: "it depends! ;)"
    sent: "2017-08-25T10:05:08.275Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff64bba0f0f6e38dfdd50"
    text: "`block!` is data actually ;)"
    sent: "2017-08-25T10:04:59.428Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff63276a757f808e01d33"
    text: {`block!` is _code_, and what code _does_ depends on how it's evaluated and in which context it resides, I doubt that compiler can figure out all of this (at least in its current alpha stage)}
    sent: "2017-08-25T10:04:34.470Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff5c5ee5c9a4c5ff9fa9c"
    text: "to understand what is going on"
    sent: "2017-08-25T10:02:45.728Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff5b6162adb6d2e31738c"
    text: {the thing with Red code is you should always know the context}
    sent: "2017-08-25T10:02:30.915Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff597614889d47585ed02"
    text: "that's possible of course"
    sent: "2017-08-25T10:01:59.408Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ff53e9acddb2407c94a09"
    text: {what if line above is executed in a dialect with completely different semantics?}
    sent: "2017-08-25T10:00:30.576Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff51a9acddb2407c9498d"
    text: {just curious, and what if `either` is rebounded to other function?}
    sent: "2017-08-25T09:59:54.027Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff483ee5c9a4c5ff9f5c6"
    text: "TL;DR - Red should be Haskell :neutral_face: "
    sent: "2017-08-25T09:57:23.092Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599ff36d66c1c7c477dcf755"
    text: {How can the compiler know the type of value to which p is bound?}
    sent: "2017-08-25T09:52:45.978Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "599fed54210ac26920bd63b6"
    text: {The point is that Red compiler should raise an error when p’s type isn’t expected type, integer!.}
    sent: "2017-08-25T09:26:44.413Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fec2f210ac26920bd5eac"
    text: {But p is not any-type! it is integer! or string!. So what you ask is strong typing, p should be integer! and cannot change.}
    sent: "2017-08-25T09:21:51.153Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599feb5bba0f0f6e38dfab3e"
    text: {```^/***Script Error: f does not allow any-type! for its x argument^/```}
    sent: "2017-08-25T09:18:19.754Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599feaf4578b44a046e7d0e2"
    text: {And what will happen for, a warning?^/```^/either test [p: 1] [p: "s”]^/f p^/```}
    sent: "2017-08-25T09:16:36.517Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe9ea162adb6d2e314152"
    text: {Assume^/`f: function [x [integer!]][x + 3]`^/^/```^/p: either test [1] ["s”]^/f p^/```^/Compiler should raise an error, because either’s return type is any-type! but not integer!.}
    sent: "2017-08-25T09:12:10.969Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fe91d66c1c7c477dcc9ea"
    text: {f's parameter could be anything and compiler can never know before executing that line.}
    sent: "2017-08-25T09:08:45.948Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe8e676a757f808dfe5a7"
    text: {or even better:^/`f random/only [1 "s" file! none [block] ]`}
    sent: "2017-08-25T09:07:50.801Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe86b614889d47585b43d"
    text: {I don't even think it is possible, how could compiler detect error for below patern:^/```^/p: either test [1] ["s"]^/f p^/```^/}
    sent: "2017-08-25T09:05:47.501Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe825a7b406262dc5ff74"
    text: {@rebolek Are you saying it’s useful and low priority? ;)}
    sent: "2017-08-25T09:04:37.069Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fe7cfc101bc4e3a552891"
    text: {@unchartedworks I don't think this feature will be implemented before rewriting compiler to Red.}
    sent: "2017-08-25T09:03:11.827Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599fe762210ac26920bd48ba"
    text: "@endo64 "
    sent: "2017-08-25T09:01:22.130Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fe759614889d47585af7a"
    text: {f is used as another function's parameter. The parameter’s type should be integer! -> logic!, if f doens’t comply with the type-checking, compiler should raise an error.}
    sent: "2017-08-25T09:01:13.007Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fe6c2bc46472974be4fba"
    text: {Red and Rebol are different by their natures, it's not like Java or C#.}
    sent: "2017-08-25T08:58:42.031Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe6909acddb2407c90e4b"
    text: {@unchartedworks Is this what you are asking?^/for `f: function [x [integer!]][x + 3]` compiler should raise an error (at compile time) for `f "x"` ?}
    sent: "2017-08-25T08:57:52.232Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe58ec101bc4e3a551f8f"
    text: {@rebolek Not really. I can’t control how f is been written. What I can do it is to check f's type. I think it should be done by compiler/intepreter but not by developers.}
    sent: "2017-08-25T08:53:34.793Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fe52bc101bc4e3a551e0e"
    text: {@unchartedworks of course `[1 2 3]` is simpler than `make vector! [1 2 3]`. Vector is specialized type and it makes sense to use it only when you really need it.}
    sent: "2017-08-25T08:51:55.852Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599fe4dc9acddb2407c90803"
    text: {What you are looking for is ^/```^/>> f: function [x [integer!] return: [logic!]][x > 2]^/== func [x [integer!] return: [logic!]][x > 2]^/```}
    sent: "2017-08-25T08:50:36.252Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599fe4a3162adb6d2e3128ab"
    text: {```^/>> f: function [x [integer!]][x > 2]^/== func [x [integer!]][x > 2]^/>> function? f^/== true^/```^/It isn’t enough. What I want is something like this.^/```^/>> f: function [x [integer!]][x > 2]^/== func [x [integer!]][x > 2]^/>> function/type? :f [integer! -> logic!]^/== true^/```^/It can be even better.^/```^/f: function [x [integer!]][x + 3]^/filter :f [1 2 3 4]^/^/***Script Error: filter does not allow integer! -> integer! for its f argument^/```^/}
    sent: "2017-08-25T08:49:39.251Z"
    editedAt: "2017-08-25T08:49:59.911Z"
    v: 2
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fe296c101bc4e3a551402"
    text: {you are right. I can fix it.  function [x [integer!]][x > 2]}
    sent: "2017-08-25T08:40:54.547Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fe257614889d475859964"
    text: {`function [x][x > 2]` is not exactly integer! -> logic!, it is any-type! to logic! or error!}
    sent: "2017-08-25T08:39:51.729Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe1b776a757f808dfc6cc"
    text: {```^/>> b: [] append/only b b^/== [[...]]^/```^/}
    sent: "2017-08-25T08:37:11.691Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe15dbc46472974be3a27"
    text: {More precisely a block is a list of values (values of any-type, object, integer, block etc.)}
    sent: "2017-08-25T08:35:41.803Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599fe127614889d47585930d"
    text: {function! has the similar issue. I think function! is a composite data type, however I can’t really describle it in details in Red. For instance function [x][x > 2], the type of this fucntion is integer! -> logic!, there is no way to express it like this in Red as far as I know.}
    sent: "2017-08-25T08:34:47.023Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fe046162adb6d2e311661"
    text: {What I means is that block! is a composite data type. However it can’t express itself very well. I would rather say block is a list. There are many kinds of lists. a list of integer, a list of string… }
    sent: "2017-08-25T08:31:02.336Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fdeaf76a757f808dfbbf6"
    text: {That would be a fair wish, but the lexical space is limited!}
    sent: "2017-08-25T08:24:15.194Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599fde38162adb6d2e310d10"
    text: {Or are you pleading for a lexical form for vectors?}
    sent: "2017-08-25T08:22:16.055Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599fdde9ba0f0f6e38df7087"
    text: {Are you saying a type like block! should not exist? That pulls the rug from under the language ...}
    sent: "2017-08-25T08:20:57.338Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599fdbc0a7b406262dc5cc25"
    text: {That’s why I said it’s a limitation. It should be done by compiler/intepreter but not developers. This is the problem I found. And it’s error-prone.}
    sent: "2017-08-25T08:11:44.507Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fdb2b210ac26920bd0860"
    text: {If you go for block you have to enforce the identity of component type yourself. With vector, the compiler/interpreter does it for you.}
    sent: "2017-08-25T08:09:15.950Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599fd9fd578b44a046e7879e"
    text: {@rebolek ^/A:^/```^/>> sum [1 2 3]^/>> 6^/```^/B:^/```^/>> sum (make vector! [1 2 3])^/>> 6^/```^/I think A is simpler.^/}
    sent: "2017-08-25T08:04:13.836Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fd949bc46472974be133c"
    text: {@unchartedworks There is no literal vector representation, `[1 2 3]` is a `block!`, you need to do vector from that:^/```^/>> vector: make vector! [1 2 3]^/== make vector! [1 2 3]^/>> vector? vector^/== true^/```}
    sent: "2017-08-25T08:01:13.210Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599fd8a0614889d475856e28"
    text: {```^/>> vector? [1 2 3]^/== false^/```^/@meijeru I think it’s a limitation of Red, it can’t express composite data type very well.^/}
    sent: "2017-08-25T07:58:24.105Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599fd5ceee5c9a4c5ff964cf"
    text: {The nearest thing to a series of integers is a `vector!` value. Vectors are ordered sequences of values of identical type, which can be `char!` or `integer!` (8/16/32 bits), `percent!` or `float!` (32/64 bits); default: 32 bits for `char!` or `integer!` and 64 bits otherwise.}
    sent: "2017-08-25T07:46:22.707Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "599fd299ba0f0f6e38df4166"
    text: {How to define a function parameter type like this, a series of integer!.}
    sent: "2017-08-25T07:32:41.039Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599ea4b99acddb2407c391a5"
    text: "@PeterWAWood I see. Thanks."
    sent: "2017-08-24T10:04:41.045Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599ea2fd76a757f808da55a6"
    text: {The Red alpha does not have an iOS target so libRed can't be built for iOS yet.}
    sent: "2017-08-24T09:57:17.663Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599e9acaee5c9a4c5ff3ee51"
    text: "@9214 All right. Thanks. :smile: "
    sent: "2017-08-24T09:22:18.117Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599e9a87614889d4757fec08"
    text: {_maybe_, though you better wait what our gurus will say}
    sent: "2017-08-24T09:21:11.958Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599e9a52162adb6d2e2b87ef"
    text: {@unchartedworks that's a tricky question actually :D}
    sent: "2017-08-24T09:20:18.008Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599e9a379acddb2407c35df1"
    text: "@9214 Does it support iOS?"
    sent: "2017-08-24T09:19:51.199Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599e992aa7b406262dc03f9f"
    text: {@unchartedworks :point_right: https://doc.red-lang.org/en/libred.html}
    sent: "2017-08-24T09:15:22.886Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599e991e66c1c7c477d70c99"
    text: {http://www.red-lang.org/2017/03/062-libred-and-macros.html}
    sent: "2017-08-24T09:15:10.546Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599e98fca7b406262dc03ee6"
    text: {I think you can. Red has so called libRed, which allows embeddability and there is very cute demo showing the Pong game between the MS Excel and Red window :-)}
    sent: "2017-08-24T09:14:36.973Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599e957e66c1c7c477d6f9ff"
    text: "Can I use Red as an embedded intepreter?"
    sent: "2017-08-24T08:59:42.152Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599d8c93614889d4757b6ac8"
    text: "@rebolek Thanks. I will write one myself."
    sent: "2017-08-23T14:09:23.623Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599d8c04c101bc4e3a4ad288"
    text: { @unchartedworks no, it's not implemented yet, because `join`'s going to be different from Rebol version.}
    sent: "2017-08-23T14:07:00.414Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599d8bc6578b44a046dd75f3"
    text: {I can’t find join function in red? Is it removed from Red? join [[1] [2] [3]] == [1 2 3]}
    sent: "2017-08-23T14:05:58.123Z"
    v: 1
    author: "54ef198815522ed4b3dc8268"
) #(
    id: "599d8925c101bc4e3a4ac677"
    text: "@greggirwin that's a nice one :D"
    sent: "2017-08-23T13:54:45.422Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599cb2be578b44a046d9f813"
    text: "@RnBrgn  thanks for the help."
    sent: "2017-08-22T22:39:58.524Z"
    v: 1
    author: "599b74b6d73408ce4f725ff4"
) #(
    id: "599b8a8e2723db8d5ecc1554"
    text: {@Sunnypt ^/```^/search:  "how"^/either find "hello how are you" search [^/     print "found how"][^/     print "none"]^/```}
    sent: "2017-08-22T01:36:14.054Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
)#(
    id: "599b881a2723db8d5ecc0bd0"
    text: {wait do I put --cgi  in the command line or at the top of my red file?}
    sent: "2017-08-22T01:25:46.831Z"
    v: 1
    author: "598e4d9ed73408ce4f710f5f"
) #(
    id: "599b83e8ee5c9a4c5fe6a8c8"
    text: {@Sunnypt   take a look at `find`   http://www.red-by-example.org/#find}
    sent: "2017-08-22T01:07:52.086Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "599b77bfc101bc4e3a41d90f"
    text: {Hi,^/Just started with Red, only a week ago.^/I need a little help. How can I search for a specific word in a string. I mean a sub-string^/ i.e. "Hello how are you today"  How can I inspect this to know if  "how" does or does not exist in the string and if it does, copy it to a variable. ^/thanks in advance.^/Sunny.}
    sent: "2017-08-22T00:15:59.411Z"
    v: 1
    author: "599b74b6d73408ce4f725ff4"
) #(
    id: "599b3c1d2723db8d5ecade3c"
    text: "@greggirwin That's very useful! Thanks!"
    sent: "2017-08-21T20:01:33.601Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599b35f6bc46472974aa0bbe"
    text: {```^/        Examples:^/            [accessed after 1-jan-2006]^/            [created before 1-jan-2006]^/            [newer than %test-files.r]^/            [older than %file-list.r]^/```}
    sent: "2017-08-21T19:35:18.462Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599b35dfc101bc4e3a40d2a4"
    text: {```^/        Examples:^/            [size >= 1024]^/            [less than or equal to 1024 bytes]^/            [>= 64 kb]^/            [smaller than 2 MB]^/            [greater than .5 MB]^/            [larger than %file-list.r]^/```}
    sent: "2017-08-21T19:34:55.918Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599b3596a7b406262db1c8ad"
    text: {4 dialects in one: spec, date, size, and attr. e.g. ^/```^/        Examples:^/            [%*.txt]^/            [%*.txt  changed after  1-Aug-1998]^/            [%*.txt  changed before 1-Aug-1998]^/            [%*.txt  changed after  1-Aug-1998 >= 10 kb]^/            [%*.txt  changed after  1-Aug-1998 <  10 kb]^/            [%*.txt  changed after  1-Aug-1998 >= 10 kb  system]^/            [%*.txt  changed after  1-Aug-1998 >= 10 kb  not system]^/            [%*.txt  changed after  1-Aug-1998 <  10 kb  read-only]^/            [%*.txt  changed after  1-Aug-1998 <  10 kb  not read-only]^/            [ <  10 kb  %*.txt  not read-only  changed after  1-Aug-1998]^/            [not read-only   < 10 kb   changed after 1-Aug-1998  %*.txt]^/            [not read-only   < 10 kb   changed after 1-Aug-1998  %*a*.txt]^/```}
    sent: "2017-08-21T19:33:42.736Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599b3509a7b406262db1c5f2"
    text: {> It would be nice to have a DSL like: "do-something on each file deeply if its create date is later than X and its size is smaller than Y"^/^/@endo64, that was the idea behind http://www.rebol.org/view-script.r?script=file-list.r}
    sent: "2017-08-21T19:31:21.095Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599b34b5614889d475718e09"
    text: {@pekr, it's actual in R2 code. Shouldn't be hard to port.}
    sent: "2017-08-21T19:29:57.024Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599afc9a2723db8d5ec9c8a5"
    text: "interesting read, thanks @pekr "
    sent: "2017-08-21T15:30:34.511Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599afb93ba0f0f6e38ca4268"
    text: {There is @greggirwin 's `for`loop proposal, not sure how actual it is ... https://github.com/red/red/wiki/REP-0101---For-loop-function}
    sent: "2017-08-21T15:26:11.120Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599af250ee5c9a4c5fe42e70"
    text: "exactly"
    sent: "2017-08-21T14:46:40.807Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599af243ba0f0f6e38ca1489"
    text: {I feel the same with Red - lots of iterators and all could be boiled down to one keyword to avoid mental baggage}
    sent: "2017-08-21T14:46:27.235Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599af1fb2723db8d5ec99868"
    text: {and I tried to remember how and when use each of them, but once I understood loop - this was the only one I used ever since for every case :)}
    sent: "2017-08-21T14:45:15.220Z"
    editedAt: "2017-08-21T14:45:47.290Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599af1d4578b44a046d22b2c"
    text: {just to give you personal example: CL has plenty of iterating facilities, like do, dolist, dotimes and so on}
    sent: "2017-08-21T14:44:36.052Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599af081210ac26920a80c40"
    text: "there are some bizarre examples :D"
    sent: "2017-08-21T14:38:57.975Z"
    editedAt: "2017-08-21T14:39:26.348Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599af0682723db8d5ec98f98"
    text: {@9214 scroll through examples here: http://www.gigamonkeys.com/book/loop-for-black-belts.html}
    sent: "2017-08-21T14:38:32.074Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599af04a162adb6d2e1bd875"
    text: {yeah, I know that, just never actually saw them in action}
    sent: "2017-08-21T14:38:02.844Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599af037578b44a046d22279"
    text: {CL doesn't have as many built-in dialects as Red, but two biggest ones are `loop` and `format`}
    sent: "2017-08-21T14:37:43.281Z"
    editedAt: "2017-08-21T14:37:51.312Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599af020bc46472974a8b526"
    text: "I'm sold"
    sent: "2017-08-21T14:37:20.882Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599aeffa578b44a046d22053"
    text: "yup"
    sent: "2017-08-21T14:36:42.728Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599aeff69acddb2407b3bff9"
    text: "@maximvl is it an actual CL code? :O"
    sent: "2017-08-21T14:36:38.074Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599aefd52723db8d5ec98b75"
    text: {you could write something like `(loop for file in each-file when (equal (extension file) ".png") do (move file "/tmp"))`}
    sent: "2017-08-21T14:36:05.768Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599aefcba7b406262db08b1c"
    text: {@maximvl I think @dockimbel mentioned `loop` dialect (or macro?) somewhere as TBD}
    sent: "2017-08-21T14:35:55.606Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "599aefa0ba0f0f6e38ca05c3"
    text: "@endo64 reminds me of CL's `loop` macro"
    sent: "2017-08-21T14:35:12.648Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599ae43c9acddb2407b385a3"
    text: "*transducers* in *clojure*?"
    sent: "2017-08-21T13:46:36.328Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599ae4229acddb2407b38499"
    text: {Able to select from a spectrum between *depth* first and *breadth* first}
    sent: "2017-08-21T13:46:10.001Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599ae3d6162adb6d2e1b98cb"
    text: {This would help a lot if there's a `word!` for traversing trees, like we have the `for-` family to traversing lists}
    sent: "2017-08-21T13:44:54.587Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "599ab6a3578b44a046d1035c"
    text: {@endo64 defining the dialect is the hardest part :)}
    sent: "2017-08-21T10:32:03.155Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599ab69276a757f808c952e7"
    text: "Not a well thought example of course :)"
    sent: "2017-08-21T10:31:46.293Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599ab66a578b44a046d10209"
    text: {@rebolek @pekr Yes something like that but with a DSL and  keeping in the shell mode.^/```^/shell> move to /tmp if extension = %.png^/shell> delete if size > 100 MB and modified < 2017-08-01^/```}
    sent: "2017-08-21T10:31:06.251Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599ab2c99acddb2407b29f14"
    text: {@endo64 ^/> do-something on each file deeply (...)^/^/Sounds like a task for my old `foreach-file` function :) do-something on each file deeply}
    sent: "2017-08-21T10:15:37.356Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599ab278578b44a046d0ef0f"
    text: {@endo64 found this old article. Not sure if it is what I remember from the former Rebolforces article by Jeff Kreis though ..... http://www.cs.unm.edu/~whip/rebol-unix-shell.html}
    sent: "2017-08-21T10:14:16.364Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "599aaf9e210ac26920a6d661"
    text: {For example, switch to shell mode, a `forever` loop inside console which executes the given DSLs would be great.}
    sent: "2017-08-21T10:02:06.124Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599aaf529acddb2407b28d82"
    text: {I sometimes want to use Red (or Rebol) on my company's servers (there are a plenty of Ubuntu servers) as a replacement of bash, it is much easier to do some operation on Redbol console than writing cryptic find/grep.^/It would be nice to have a DSL like: "do-something on each file deeply if its create date is later than X and its size is smaller than Y"}
    sent: "2017-08-21T10:00:50.055Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a9d17ee5c9a4c5fe28be7"
    text: {hopefully new console will be able to do things like this}
    sent: "2017-08-21T08:43:03.470Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599a9cc9210ac26920a67b17"
    text: {and with some graphical output support it can become real gui shell replacement :D}
    sent: "2017-08-21T08:41:45.585Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599a9c629acddb2407b23248"
    text: {I would love to integrate it into something like emacs `*scratch*` to be able to call commands not in line-by-line manner as in shells, but to execute arbitrary things}
    sent: "2017-08-21T08:40:02.416Z"
    editedAt: "2017-08-21T08:41:00.081Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599a998a210ac26920a668a4"
    text: {@endo64 @greggirwin sure, all feedback is welcome :)}
    sent: "2017-08-21T08:27:54.491Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599a755d162adb6d2e199b69"
    text: {Very cool @maximvl. I'll try to take a look at it for real, soon. }
    sent: "2017-08-21T05:53:33.747Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599a0d8876a757f808c6b66d"
    text: "@maximvl Cool!"
    sent: "2017-08-20T22:30:31.997Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "599a0ab1ee5c9a4c5fe06027"
    text: "Red seems to be extremely productive :D"
    sent: "2017-08-20T22:18:25.279Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "599a0aa9ee5c9a4c5fe05fff"
    text: {first version of shell dialect I made over the weekend in 200 loc : https://gitlab.com/maxvel/red-shell-dialect}
    sent: "2017-08-20T22:18:17.558Z"
    editedAt: "2017-08-20T22:19:35.874Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59970c95614889d47560f424"
    text: {the people on IRC helped me out, it was me just not being vigilant }
    sent: "2017-08-18T15:49:41.408Z"
    v: 1
    author: "598e4d9ed73408ce4f710f5f"
) #(
    id: "5996d840ee5c9a4c5fd3b8da"
    text: {https://github.com/red/VScode-extension/blob/master/README.md#configurations}
    sent: "2017-08-18T12:06:24.766Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "5996d83d80d90ca02410e0e7"
    text: "Or you mean this?"
    sent: "2017-08-18T12:06:21.094Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "5996d5d92723db8d5eb8f3f8"
    text: {@callowaysutton you mean vs code extension setting? if you downloaded Red from [here](http://www.red-lang.org/p/download.html), it is binary you downloaded(it may have the name like "red-063" or "red-_date_" )}
    sent: "2017-08-18T11:56:09.639Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "59965e0a210ac2692095b5a4"
    text: "or settings.json sorry"
    sent: "2017-08-18T03:24:58.388Z"
    v: 1
    author: "598e4d9ed73408ce4f710f5f"
) #(
    id: "59965b2e76a757f808b7b0ee"
    text: {hey where would red.redPath be on a Windows 10 64 bit computer?}
    sent: "2017-08-18T03:12:46.357Z"
    v: 1
    author: "598e4d9ed73408ce4f710f5f"
) #(
    id: "5994ba97578b44a046b7e775"
    text: {something like this https://gist.github.com/plugnburn/93af4a06ec54b0e6ac26b9b7ecf49be6}
    sent: "2017-08-16T21:35:19.814Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
)#(
    id: "5994ae8d80d90ca024071f65"
    text: {ok, it worked after changing to-char to to-binary because the decoded values are raw keys, and even after removing it, because debase returns binary}
    sent: "2017-08-16T20:43:57.325Z"
    editedAt: "2017-08-16T20:45:50.775Z"
    v: 2
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5994aa94a7b406262d968246"
    text: {yes, that was the version, ok thanks, let me try it out}
    sent: "2017-08-16T20:27:00.658Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5994aa7d614889d475560d30"
    text: "and now I want to port other Graham's tools :)"
    sent: "2017-08-16T20:26:37.769Z"
    editedAt: "2017-08-16T20:26:44.330Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5994aa58ee5c9a4c5fc9d8ba"
    text: ":)"
    sent: "2017-08-16T20:26:00.035Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5994aa299acddb2407996ee8"
    text: {I beat you on time @rebolek, but you win on content. :^^)}
    sent: "2017-08-16T20:25:13.623Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5994a90bee5c9a4c5fc9d206"
    text: {https://gist.github.com/rebolek/d3c1e680b63a3b73c86309e590c6e356}
    sent: "2017-08-16T20:20:27.798Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5994a8e72723db8d5eaf2155"
    text: {@NihilCoin_twitter actually, the conversion was very easy, `ajoin` is basically `rejoin`:^/```^/>> to-base32/decode to-base32 "https://gist.github.com/rebolek/d3c1e680b63a3b73c86309e590c6e356"^/== {https://gist.github.com/rebolek/d3c1e680b63a3b73c86309e590c6e356}^/```}
    sent: "2017-08-16T20:19:51.227Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5994a8e1a7b406262d967a3c"
    text: {@NihilCoin_twitter, if you patch `ajoin` from R2, does it work? If not, can you post a link to the source you're trying to port?^/```^/ajoin: func [^/    {Reduces and joins a block of values into a new string.}^/    [throw]^/    block [block!]^/][^/    make string! reduce block^/]^/```}
    sent: "2017-08-16T20:19:45.644Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5994a3e8ee5c9a4c5fc9b69a"
    text: {Hi again, are there any Base32 decoder libraries for Red? I found one for Rebol3 but unfortunately my red-fu is not enough to port it since it's using ajoin^/other than that, TOTP lib compatible with Google Authenticator is pretty much complete, it just accepts raw binary keys instead of  Base32-encoded ones now}
    sent: "2017-08-16T19:58:32.806Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "599188ec2723db8d5ea0ed7a"
    text: {@PeterWAWood managed to call a function from libcrypto with #system and external .reds file, still have to learn a lot on how OpenSSL APIs are operating on a level that low, but at least it's proven to be doable^/thank you all a lot!}
    sent: "2017-08-14T11:26:36.888Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "59918745c101bc4e3a170a48"
    text: {You will need `routine!` to bridge between Red and Red/System. @Bolek has written some notes.}
    sent: "2017-08-14T11:19:33.639Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "599186b44bcd78af56401bc5"
    text: "yes, #system, thanks"
    sent: "2017-08-14T11:17:08.892Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "59918694614889d4754796b3"
    text: "Section 16.8"
    sent: "2017-08-14T11:16:36.438Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5991867a162adb6d2ef371e6"
    text: "oops, I mean #call"
    sent: "2017-08-14T11:16:10.674Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599185c3ee5c9a4c5fbb7c83"
    text: {http://static.red-lang.org/red-system-specs-light.html}
    sent: "2017-08-14T11:13:07.442Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "599185bd4bcd78af56401878"
    text: "Do you want #system ?"
    sent: "2017-08-14T11:13:01.533Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59917e2680d90ca024f85a0f"
    text: {^-^-;-- Using OpenSSL Crypto library^/^-^-#switch OS [^/^-^-^-macOS [^/^-^-^-^-#define LIBCRYPTO-file "libcrypto.dylib"^/^-^-^-]^/^-^-^-FreeBSD [^/^-^-^-^-#define LIBCRYPTO-file "libcrypto.so.8"^/^-^-^-]^/^-^-^-#default [^/^-^-^-^-#define LIBCRYPTO-file "libcrypto.so.1.0.0"^/^-^-^-]^/^-^-]^/^-^-#import [^/^-^-^-LIBCRYPTO-file cdecl [^/...and so on^/^/but how can we use Red/System bridge in a usual Red code afterwards? Could you please point me to the documentation where this is described?}
    sent: "2017-08-14T10:40:38.747Z"
    editedAt: "2017-08-14T10:40:42.783Z"
    v: 2
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "59917d81a7b406262d87c056"
    text: {btw I already see that approach in https://github.com/red/red/blob/master/runtime/crypto.reds}
    sent: "2017-08-14T10:37:53.973Z"
    editedAt: "2017-08-14T10:41:23.734Z"
    v: 2
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "599177cd1c8697534ab723b9"
    text: {@rebolek but seems like the most robust, so that we don't have to reinvent the wheel}
    sent: "2017-08-14T10:13:33.932Z"
    editedAt: "2017-08-14T10:13:39.423Z"
    v: 2
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "59917797ee5c9a4c5fbb4488"
    text: {@rebolek making this support cross-platform is not so easy}
    sent: "2017-08-14T10:12:39.724Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5991770a614889d475475d84"
    text: {@NihilCoin_twitter adding support for OpenSSL seems the easiest way to me.}
    sent: "2017-08-14T10:10:18.088Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59917652210ac269207f8352"
    text: {@rebolek I see. It's all cryptocurrency-related btw: once one has ECDSA, JSON-RPC and hash functions, one has the ability to create apps for the entire blockchain infrastructures like Bitcoin and Ethereum. Looks like hashes are in place, JSON-RPC (JSON+HTTPS) is in place, ECDSA is the only part missing in Red. We can create a transaction logger/price monitor in Red but cannot write a complete wallet (to send transactions ourselves) because of this missing part.^/There is, for example, a very small amount of libraries for Ethereum transaction signing out there, and most of them target JavaScript. However they all use somewhat quirky ECDSA implementation based on no less quirky bignum emulation.^/Just FYI that it would be a **huge** jump forward for Red if such a library appears.  We're also ready to contribute and start digging into this ourselves. If anyone of us comes up with a bignum/crypto solution/a way to leverage OpenSSL in some way, I'll get in touch.}
    sent: "2017-08-14T10:07:14.281Z"
    editedAt: "2017-08-14T10:07:25.560Z"
    v: 2
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "599172d21c8697534ab70ec1"
    text: {@NihilCoin_twitter There **is** some crypto support in Red, there is HTTPS and you can get SHA and other hashes using `checksum`. ^/However bignums are currently not supported.}
    sent: "2017-08-14T09:52:18.040Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5991721f4bcd78af563fcb6c"
    text: {@rebolek ok nevermind, how about bignum support? (up to 2^^256)^/if there's any, I can reimplement ECDSA from scratch in Red, although it might take lots of time}
    sent: "2017-08-14T09:49:19.655Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5991714ec101bc4e3a16b925"
    text: {@rebolek if there were some, I could probably port them to Red}
    sent: "2017-08-14T09:45:50.460Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "59917133a7b406262d878e02"
    text: {@rebolek I mean probably there were some libraries for Rebol where this crypto was already implemented, unfortunately couldn't find any}
    sent: "2017-08-14T09:45:23.940Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "599170e6a7b406262d878c06"
    text: {@NihilCoin_twitter I have no experience with ECDSA, you say it could be ported from Rebol, can you point me where in Rebol is this implemented?}
    sent: "2017-08-14T09:44:06.710Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59917074a7b406262d878a64"
    text: {ok thanks a lot, anything about ECDSA (probably something that could be ported from Rebol) or generic cross-platform OpenSSL bridge? (we need just ECDSA though to sign transactions)}
    sent: "2017-08-14T09:42:12.032Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "59916f5f4bcd78af563fbeb8"
    text: {@NihilCoin_twitter JSON: https://github.com/rebolek/red-tools/blob/master/json.red}
    sent: "2017-08-14T09:37:35.375Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59916f2f80d90ca024f821d1"
    text: {Another question: are there any known JSON and ECDSA libraries for Red?}
    sent: "2017-08-14T09:36:47.038Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "59914c4abc464729747ee449"
    text: {http://static.red-lang.org/dl/auto/win/red-latest.exe is now renamed when downloaded. I thought there were a reason for it to always have the same name.}
    sent: "2017-08-14T07:07:54.446Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5990b663a7b406262d854a85"
    text: {@Tobleron737_twitter, welcome! Red is based heavily on Rebol's design, as a language. There are others as well, which we collectively call "Redbol" languages. A key difference between Red and R2 is that R2 was closed source. R3 was open source, and has a few forks. While each project has its own goals and features, they will be largely compatible. Not completely, but the core concepts are solid and should be common. ^/^/Red got some investment money a few years ago, which has allowed it to get to this point, even with a very small team. One of our goals is to figure out how to make Red sustainable. Other languages have the same issue. Project goals have to align with investor goals, which is also tricky.  The business side is not being neglected, but it is a challenge.^/^/The future is bright. Rebol has been around for a long time, and even the frozen version of R2 is still used in production in many places (I've used Rebol since 2001). And we have a few weapons in our arsenal to help ensure that Red users (we call ourselves Reducers), can safely commit to Red for their work. We need to push hard to get to 1.0, and make Red completely self-hosted. There are key features needed to get there, but if you read the blog entries at red-lang.org, you can see how much has already been done, especially in the past year.^/^/Development only stops if we *all* decide there is something better out there, and stop using Red. It's a very different language, and attracts a different kind of user. We can't guarantee that Red will become popular, and so may not be the only tool in your box, but it has, effectively, been around, as Rebol, for 20 years, and could probably be *a* tool in your box for at least that much longer. The design is amazing, and more languages every day adopt bits and pieces from it. It's a great tool for thinking, even if development on it stopped tomorrow.^/^/Worrying doesn't do any good, but working *against* things you *might* worry about is a positive action each of us can take. Not just for Red, but in life. If you want Red to stick around, *use* it. I could say "Talk it up, blog about it, contribute code, find investors, ..." and those are all good things to do, but start by *using* it.  Let it make your life better. Enjoy it.  Everything else will follow.^/^/Happy Reducing!}
    sent: "2017-08-13T20:28:19.148Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5990adfe80d90ca024f5daed"
    text: {@NihilCoin_twitter, the latest blog entry talks about some GUI rule engine possibilities. Along with `foreach-face`, which you can use today yourself. e.g. ^/```^/win: layout [^/^-across^/^-style area: area 200x50^/^-button area return^/^-button area return^/^-button area return^/]^/rows: 3^/win/actors: object [^/^-on-resizing: function [face [object!] event [event!]][^/^-^-w: face^/^-^-foreach-face/with win [face/size/x: w/size/x - face/offset/x - 10] [face/type = 'area]^/^-^-y: w/size/y / rows^/^-^-i: 0^/^-^-foreach-face win [^/^-^-^-if face/type = 'area [face/size/y: y - 10]^/^-^-^-face/offset/y: y * (i / 2) + 5^/^-^-^-i: i + 1^/^-^-]^/^-]^/]^/view/flags win [resize]^/```}
    sent: "2017-08-13T19:52:30.437Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5990a19bc101bc4e3a1430cc"
    text: "ok thanks"
    sent: "2017-08-13T18:59:39.436Z"
    editedAt: "2017-08-13T18:59:41.604Z"
    v: 2
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5990a161162adb6d2ef0a922"
    text: {only could find how to get the screen size, not window}
    sent: "2017-08-13T18:58:41.001Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5990a158bc464729747cd0eb"
    text: {@NihilCoin_twitter for example:^/```^/>> window: view/no-wait [button "hello world"]^/== make object! [^/    type: 'window^/    offset: 904x516^/    size: 11...^/>> window/size^/== 111x48^/```}
    sent: "2017-08-13T18:58:32.456Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5990a104614889d47544b0a3"
    text: "@rebolek I mean, how to get the size of window"
    sent: "2017-08-13T18:57:08.881Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5990a0eb76a757f8089eb2c3"
    text: {@rebolek is there any example of that? I couldn't find it in the docs}
    sent: "2017-08-13T18:56:43.435Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5990a0aaa7b406262d84ff21"
    text: {@NihilCoin_twitter of course, you can get all sizes, from text to window and add custom resizing on top of VID.}
    sent: "2017-08-13T18:55:38.097Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5990a07dc101bc4e3a142cf0"
    text: {@rebolek but is there a way to retrieve current window size?}
    sent: "2017-08-13T18:54:53.925Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5990a01d4bcd78af563d36b1"
    text: {@NihilCoin_twitter all questions are welcome, you are not disturbing at all. Percent sizing is currently not supported, there is no resizing engine yet.}
    sent: "2017-08-13T18:53:17.773Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59909a314bcd78af563d2525"
    text: {hi, sorry for disturbing again, but I cannot find any single example of View dialect with responsive controls, i.e. how to even get current window size dynamically or specify face width in percents, any lead on that?}
    sent: "2017-08-13T18:28:01.479Z"
    editedAt: "2017-08-13T18:29:06.959Z"
    v: 3
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "599097e776a757f8089e8f6a"
    text: {So how do you guys see the future going for this DEV platform?}
    sent: "2017-08-13T18:18:15.151Z"
    v: 1
    author: "598f28a0d73408ce4f71208a"
) #(
    id: "599097c380d90ca024f58d61"
    text: {I wonder how you guys  imagine the future of Red's language. I haven't seen anything other than REBOL similar in terms of being able to do everything in one solution. But I am a bit worried that for some reason the development of this great language stops.. }
    sent: "2017-08-13T18:17:39.440Z"
    v: 1
    author: "598f28a0d73408ce4f71208a"
) #(
    id: "599097364bcd78af563d1c5c"
    text: "Hi everyone"
    sent: "2017-08-13T18:15:18.010Z"
    v: 1
    author: "598f28a0d73408ce4f71208a"
) #(
    id: "59909186210ac269207ca7dc"
    text: {Contributions for system specific extensions will also be *very* welcome, though they may not go into an official cross-platform build. Because Red is its own toolchain, and because we can build custom runtimes easily, we'll likely see people do that quite a bit, to support mutiple apps as an external runtime, as libRed, and for standalone EXEs with no external dependencies.}
    sent: "2017-08-13T17:51:02.911Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "599087cf76a757f8089e5a74"
    text: "good to know"
    sent: "2017-08-13T17:09:35.798Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "599087391c8697534ab40731"
    text: {Both macOS and Windows GUI try to target common subset, leaving system-specific things out (at least for now), so I guess Android will go the same path. However, there are system-wide notifications in Windows and macOS too, so some kind of support may come. But I'm just guessing here.}
    sent: "2017-08-13T17:07:05.539Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599086a7bc464729747c7780"
    text: "oh ok"
    sent: "2017-08-13T17:04:39.526Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5990869780d90ca024f54b97"
    text: {I'm not sure what will the first version of Android GUI support, it's possible that system-specific things will come later.}
    sent: "2017-08-13T17:04:23.383Z"
    editedAt: "2017-08-13T17:04:33.396Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "599086564bcd78af563cdddf"
    text: {but how about Android-specific things like system tray push notifications?}
    sent: "2017-08-13T17:03:18.021Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5990864e80d90ca024f54a94"
    text: {GTK GUI works only partially, that's why I've put Linux in parenthesis.}
    sent: "2017-08-13T17:03:10.441Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5990863080d90ca024f54a2b"
    text: {and Linux? Is GTK GUI in place? Can test also on Mac though.}
    sent: "2017-08-13T17:02:40.800Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "59908602162adb6d2ef0410b"
    text: {Well, you can start writing for Android now, testing it on macOS/Windows (and Linux) and just adapt the GUI later.}
    sent: "2017-08-13T17:01:54.570Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5990859e614889d475445055"
    text: {and considering Red already has client HTTP(S) requests, with 0.6.5 we're going to start writing our own wallet for Android in Red, I believe the experience is going to be revolutionary}
    sent: "2017-08-13T17:00:14.207Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "599085464bcd78af563cd984"
    text: "Yes, that's the advantage of using Red."
    sent: "2017-08-13T16:58:46.730Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599084f4210ac269207c7b90"
    text: {that's great, because dependency on Android SDK/Studio and all that Java stuff is terrible}
    sent: "2017-08-13T16:57:24.106Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "599084cb1c8697534ab3fd21"
    text: "AFAIK it should be completely autonomous."
    sent: "2017-08-13T16:56:43.160Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5990849f4bcd78af563cd788"
    text: {one more question - from what I heard, Android GUI support is coming in 0.6.5, will it require Android SDK or will the compiler be completely autonomous?}
    sent: "2017-08-13T16:55:59.429Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5990848b614889d475444b9d"
    text: {Yes, for TCP you have to wait (I am waiting also ;) ), but I believe it would be worth it :)}
    sent: "2017-08-13T16:55:39.430Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59908451ee5c9a4c5fb8345c"
    text: {@rebolek no I didn't mean CGI, I meant socket support by Red itself, ok, we'll wait for 0.7.0}
    sent: "2017-08-13T16:54:41.338Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "59908431210ac269207c7988"
    text: "Yes, that's correct."
    sent: "2017-08-13T16:54:09.605Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599084112723db8d5e9dc56b"
    text: {same goes about raw socket access, from what I've seen is HTTP(S) URL support only, is it correct?}
    sent: "2017-08-13T16:53:37.118Z"
    editedAt: "2017-08-13T16:53:52.146Z"
    v: 2
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "5990840f614889d4754448f0"
    text: {Hi @NihilCoin_twitter ! There is *some* server-side capability, you can use Red as CGI for example, but not for listening on TCP port. This will come in 0.7.0 with full IO.}
    sent: "2017-08-13T16:53:35.897Z"
    editedAt: "2017-08-13T16:53:53.575Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "599083bdc101bc4e3a13c66c"
    text: {Hi all,^/Are there any server-side capabilities of Red yet? I mean, for listening on TCP ports and processing incoming connections}
    sent: "2017-08-13T16:52:13.491Z"
    v: 1
    author: "598ea893d73408ce4f7116a4"
) #(
    id: "598b67f8a7b406262d72f864"
    text: {We don't have a Red/Turkish room yet, but you're not the only one here.}
    sent: "2017-08-09T19:52:24.050Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598b6085a7b406262d72dcab"
    text: "i think to write book but with turkic language :)"
    sent: "2017-08-09T19:20:37.381Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598b5e114bcd78af562b115e"
    text: {@abdllhygt or can help other ways too ;) write docs, find bugs, etc https://doc.red-lang.org/en/ could use some screenshots and more examples}
    sent: "2017-08-09T19:10:09.596Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598b5da8a7b406262d72d182"
    text: {you say "donate Abdullah!" :D}
    sent: "2017-08-09T19:08:24.375Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598b5d8a614889d475329ccb"
    text: ":)"
    sent: "2017-08-09T19:07:54.003Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598b5d58614889d475329c26"
    text: "yes, i want like this"
    sent: "2017-08-09T19:07:04.225Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598b5ccdc101bc4e3a024383"
    text: "Or anyone else willing for that matter.."
    sent: "2017-08-09T19:04:45.696Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598b5cab210ac269206ae9e8"
    text: {@abdllhygt also, is [this](https://gitter.im/red/red/gui-branch?at=59896606329651f46efd8ef1) what you're looking for? Donating to @rebolek or the team really does speed things up ;)}
    sent: "2017-08-09T19:04:11.089Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598b5bb42723db8d5e8c6c00"
    text: "Yes, what @geekyi said."
    sent: "2017-08-09T19:00:04.402Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598b580180d90ca024e3879f"
    text: {Also read https://github.com/red/red/wiki/Contributor-Guidelines ;)}
    sent: "2017-08-09T18:44:17.255Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598b57cc80d90ca024e38692"
    text: {Writing X-platform GUI parts is hard, and Red needs more man-power, it is a  small team after all..}
    sent: "2017-08-09T18:43:24.121Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598b5783210ac269206ad412"
    text: {@abdllhygt because Red is alpha. You can sponsor to make that part faster, code it yourself, use Rebol, etc}
    sent: "2017-08-09T18:42:11.393Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598b54d2329651f46e05544e"
    text: "I want that, code + gui image for all."
    sent: "2017-08-09T18:30:42.051Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598b549cbc464729746a7a8d"
    text: "Why :("
    sent: "2017-08-09T18:29:48.067Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598b4c59a7b406262d727fcc"
    text: "Red doesn't have a data grid view yet."
    sent: "2017-08-09T17:54:33.555Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598b4c40ee5c9a4c5fa61a63"
    text: "You mean https://doc.red-lang.org/en/ ?"
    sent: "2017-08-09T17:54:08.691Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598b34b54bcd78af562a5b62"
    text: "data grid view, list-box, vector..."
    sent: "2017-08-09T16:13:41.490Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598b349076a757f8088bd28c"
    text: "this is good but i want big doc"
    sent: "2017-08-09T16:13:04.274Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598b2f3576a757f8088bb74c"
    text: {http://www.red-by-example.org/vid.html has examples, as does @virtualAlan on his site.}
    sent: "2017-08-09T15:50:13.521Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598b2ef4614889d47531d138"
    text: {Do you mean tasks to complete, to learn by, or  examples themselves?}
    sent: "2017-08-09T15:49:08.708Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "598b2ea0c101bc4e3a016a70"
    text: {I need "Red GUI exercise doc"}
    sent: "2017-08-09T15:47:44.187Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598b2e751c8697534aa1545c"
    text: "Hi!"
    sent: "2017-08-09T15:47:01.632Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "598a61ddc101bc4e3afe4e5a"
    text: "Oh my, this is glorious, thank you very much"
    sent: "2017-08-09T01:14:05.833Z"
    v: 1
    author: "598a6047d73408ce4f709c01"
) #(
    id: "598a619f329651f46e019ceb"
    text: {You can use `help` to show the usage:^/```text^/>> help request-file^/USAGE:^/    REQUEST-FILE /title text /file name /filter list /save /multi^/^/DESCRIPTION: ^/    Asks user to select a file and returns full file path (or block of paths) ^/    REQUEST-FILE is a function! value^/^/REFINEMENTS:^/    /title     => Window title^/        text     [string!] ^/    /file     => Default file name or directory^/        name     [string! file!] ^/    /filter     => Block of filters (filter-name filter)^/        list     [block!] ^/    /save     => File save mode^/    /multi     => Allows multiple file selection, returned as a block^/```^/}
    sent: "2017-08-09T01:13:03.317Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "598a616c1c8697534a9e2cd1"
    text: "@Meshu Use `request-dir` or  `request-file`."
    sent: "2017-08-09T01:12:12.868Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "598a60e9c101bc4e3afe4b13"
    text: {Is there an idiomatic way to leverage the native ones yet ?}
    sent: "2017-08-09T01:10:01.310Z"
    v: 1
    author: "598a6047d73408ce4f709c01"
) #(
    id: "598a60cbbc4647297466ace2"
    text: {Hey there ! Total newb here, checking Red out and loving it for a little internal tool.^/I am looking to provide a way for the user to open file and dir dialogs }
    sent: "2017-08-09T01:09:31.241Z"
    v: 1
    author: "598a6047d73408ce4f709c01"
) #(
    id: "59893772a7b406262d6a2a07"
    text: "@dockimbel Thanks for info."
    sent: "2017-08-08T04:00:50.231Z"
    v: 1
    author: "597a1f46d73408ce4f6f0a08"
) #(
    id: "598936042723db8d5e84034c"
    text: {@doublegifts Such feature is planned, but not implemented yet. Probably a first version of a "geometry manager" will be included in 0.6.5, with Android release.}
    sent: "2017-08-08T03:54:44.751Z"
    editedAt: "2017-08-08T03:55:00.957Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59891588bc4647297461a0c4"
    text: {Newbis question about GUI: does it exist any kind of geometry manager like TK to handle resize; or ... I have to DIY base on on-resize event?}
    sent: "2017-08-08T01:36:08.760Z"
    v: 1
    author: "597a1f46d73408ce4f6f0a08"
) #(
    id: "5985f61d45fc670746f9b255"
    text: {@greggirwin ^/Hi Gregg  &thanks^/^/^/}
    sent: "2017-08-05T16:45:17.388Z"
    v: 1
    author: "58497955d73408ce4f3ba8d9"
) #(
    id: "5985f59ef5b3458e30b2cf82"
    text: "Seeing some recent work on that though. Woohoo!"
    sent: "2017-08-05T16:43:10.262Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f58bf5b3458e30b2cf61"
    text: {No Linux GUI yet, so that may not be what you need.}
    sent: "2017-08-05T16:42:51.620Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f57976a757f8087976f0"
    text: {The Red REPL is solid, and will get a big refresh in 0.6.4, to be even better. We have `call` today as well, so you can tap into the OS if needed. While Red has added some advanced features (compilation, macros, etc.), I'd say start with running interpreted, and play with the GUI system, as it's familiar (VID), but all native, with new features like reactivity. }
    sent: "2017-08-05T16:42:33.290Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985f3cef5b3458e30b2c896"
    text: {Jason, https://gitter.im/red/red is the main chat group here, but you can also ask questions in https://gitter.im/red/help. See https://github.com/red/red/wiki/Gitter-Room-Index for a more complete list of rooms. (Thanks for updating that @geekyi)}
    sent: "2017-08-05T16:35:26.781Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5985f1cdbc4647297457682a"
    text: {Nice to see you again Jason! Welcome! ^/^/Start by asking questions and playing with Red, since it has so many new features over Rebol. You know the basics, and those are not changed much. You'll ramp up fast. From there, docs and tests are key places to help, but also cool demos. We have a community repo that isn't really in use yet, as we're all stretched for time. }
    sent: "2017-08-05T16:26:53.417Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5985d9a176a757f808791d6d"
    text: {Hello ^/intro cont..^/^/Like many, trajectory of Rebol was thrilling & painful.^/I am so happy and grateful to see how the Red project has emerged.^/Want to thank ALL of you for the beautiful work you have been doing>^/^/I am stepping back in now .. ^/Have questions, ideas, projects.. ^/Want to contribute in any way I can^/^/that's for now^/~Jason}
    sent: "2017-08-05T14:43:45.035Z"
    v: 1
    author: "58497955d73408ce4f3ba8d9"
) #(
    id: "5985d54f329651f46ef22750"
    text: {Greetings Everyone..^/<de-lurking>^/I am returning Rebol enthusiast starting around 2001(?)^/Mainly I was using the charming vanilla.r ^/{blog-cms by Chris Langreiter & others} ^/Customized towards mt own projects.}
    sent: "2017-08-05T14:25:19.968Z"
    editedAt: "2017-08-05T14:32:23.197Z"
    v: 3
    author: "58497955d73408ce4f3ba8d9"
) #(
    id: "5985c0cca7b406262d5f1ca6"
    text: {@kpeters58 why not just `do-it` at the end.. or button press like  :point_up: [above](https://gitter.im/red/red/welcome?at=5984e1d5329651f46eef7a3f)}
    sent: "2017-08-05T12:57:48.806Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59850bf1bc4647297454d9c1"
    text: {The code above does not work (which makes sense, since form-1 isn't fully defined by the time do-it gets called. But is there a way to achieve what I am after - like deferred execution or such?}
    sent: "2017-08-05T00:06:09.830Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59850b72614889d4751d13d1"
    text: {Red [ needs: 'view ]^/^/ctx-1: context [^/^/    do-it: does [^/        foreach-face form-1 [ switch face/type [^/                                field area          [ print "field or area"]^/                                text-list drop-list [ print "list"]^/                                check radio         [ print "check or radio"]^/                            ]^/        ]^/    ]^/^/    form-1: layout [^/        p: panel 200x200 [^/            button "1" []^/        ]^/        do [ do-it ]^/    ]^/    view form-1 ^/]}
    sent: "2017-08-05T00:04:02.131Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5984e1d5329651f46eef7a3f"
    text: {```^/do-it: does [^/^-foreach-face win [^/^-^-switch face/type [^/^-^-^-button [face/text: rejoin ["I'm a button at " face/offset]]^/^-^-^-field [face/text: rejoin ["I'm a field of style: " face/options/style]]^/^-^-]^/^-]^/]^/view win: layout [^/^-style button: button 150^/^-style fld-150: field 150^/^-button button button "Click Me!" [do-it] return^/^-fld-150 fld-150 fld-150^/]^/```}
    sent: "2017-08-04T21:06:29.267Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5984dcb6a7b406262d5c9aab"
    text: {Yes, `/with` is refinement and refinements are optional, they sometimes can take an argument, but they are not mandatory.}
    sent: "2017-08-04T20:44:38.908Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5984dc2f1c8697534a8bf790"
    text: {Ah - not deploying the second block for identifying the face type. Didn't realize that that was optional - thanks}
    sent: "2017-08-04T20:42:23.180Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5984db72210ac2692054ed2e"
    text: {```^/switch face/type [^/    field [some field action]^/    button [some button action]^/]^/```}
    sent: "2017-08-04T20:39:14.727Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5984db04a7b406262d5c951c"
    text: {It seems a great fit if one wants to perform the same action on   number of identical face/types. In my case, I need to perform slightly different actions based on face/types and I don't have the eyes yet to see that fit.....? Unless I looped once for each type group - which can't be right.}
    sent: "2017-08-04T20:37:24.858Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5984da4e2723db8d5e7663e1"
    text: { foreach-face/with win [face/size/x: w/size/x - face/offset/x - 10] [face/type = 'field]}
    sent: "2017-08-04T20:34:22.938Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5984da4c614889d4751c82b6"
    text: {@greggirwin   I had thought about that, of course, since you provided me with an example of it last week or so.}
    sent: "2017-08-04T20:34:20.196Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5984cf92f5b3458e30af9589"
    text: {Thanks @kpeters58  and @meijeru. On resetting, you could use `foreach-face` and dispatch on the style for what facets to reset.}
    sent: "2017-08-04T19:48:34.594Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5984cb3dbc4647297454132d"
    text: {[Here](https://github.com/red/docs/issues/22) it is}
    sent: "2017-08-04T19:30:05.430Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5984ca222723db8d5e762b45"
    text: "I will raise an issue."
    sent: "2017-08-04T19:25:22.013Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5984c231a7b406262d5c4289"
    text: {Who is in charge of the docs, so that his question won't have to get asked multiple times?}
    sent: "2017-08-04T18:51:29.794Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5984c1e145fc670746f62c8f"
    text: {On check faces: I am sure that there is a typo in the docs; the true/false belong to the data facet.}
    sent: "2017-08-04T18:50:09.730Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5984c0e9c101bc4e3aebfb04"
    text: {Discovered that while working on this next question:   How do I efficiently and 'red-ish' reset all input-capable faces; i.e. fields and areas to text = "", empty text-list & drop-list's data, set radio data to false and check para to false?}
    sent: "2017-08-04T18:46:01.235Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5984c0374bcd78af561467ea"
    text: {Slightly on the same 'illogical' topic:  Why do the docs say (haven't tried in code yet) that data: true/false drives the checked state for radio faces, but para: true/false for check faces?? Again, makes no sense to me whatsoever....}
    sent: "2017-08-04T18:43:03.809Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5984bd5e1c8697534a8b8561"
    text: {There is Red/System, so something like Red/Red could be used for regular Red header}
    sent: "2017-08-04T18:30:54.532Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5984bc0da7b406262d5c29ff"
    text: "Coder"
    sent: "2017-08-04T18:25:17.450Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5984bc04a7b406262d5c29b8"
    text: {Rebol isn't likely to be a word that some random cider makes up for a word. (Side note)}
    sent: "2017-08-04T18:25:08.679Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5984bb54f5b3458e30af4ae2"
    text: {;) https://github.com/red/red/blob/master/utils/preprocessor.r}
    sent: "2017-08-04T18:22:12.471Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5984bb20bc4647297453cf17"
    text: {There are already scripts working in both Red and Rebol - http://dobeash.com/files/munge3.r}
    sent: "2017-08-04T18:21:20.775Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5984bb16329651f46eeeee32"
    text: "It's weird to a 'newbie', and was funny to me. "
    sent: "2017-08-04T18:21:10.005Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5984bb162723db8d5e75e8fb"
    text: {In my mind it goes like this: only _words_ inside _scripts_ are case-insensitive, `Red` keyword isn't a part of the script - it's a part of the header, hence the case-insensitivity rule isn't applicable to it.}
    sent: "2017-08-04T18:21:10.000Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5984bad6bc4647297453ce1b"
    text: "So can write a script that works in both "
    sent: "2017-08-04T18:20:06.581Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5984babb45fc670746f60ed4"
    text: {@gltewalt Red allows interop with Rebol. It is a valid defined word in it}
    sent: "2017-08-04T18:19:39.471Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5984ba742723db8d5e75e63a"
    text: "Yep, that's why a limit of 1"
    sent: "2017-08-04T18:18:28.143Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5984ba57bc4647297453cc6c"
    text: {> reserved word^/^/IMO that goes against core language principles}
    sent: "2017-08-04T18:17:59.033Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5984ba232723db8d5e75e48b"
    text: "Red-Head []    ;-)"
    sent: "2017-08-04T18:17:07.545Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5984b9b2c101bc4e3aebdf84"
    text: {Could create one, and only one, reserved word. For delineation purposes. }
    sent: "2017-08-04T18:15:14.910Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5984b922210ac269205474ac"
    text: {even weirder, what value does rebol return in the repl?}
    sent: "2017-08-04T18:12:50.541Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5984b557f5b3458e30af2cfa"
    text: {It *will* come up from time to time, so we need to note it. The rule could be relaxed later, but not the other way around.}
    sent: "2017-08-04T17:56:39.091Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5984b4f81c8697534a8b629f"
    text: "or, say, some color-related DSL"
    sent: "2017-08-04T17:55:04.985Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5984b4aa4bcd78af56143be6"
    text: "How about `if color = red [<do something>]`"
    sent: "2017-08-04T17:53:46.811Z"
    editedAt: "2017-08-04T17:54:34.292Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5984b3d4bc4647297453addf"
    text: {I know that the reason for case-sensitive `Red` is its much higher probability than `Rebol`, but what is probability of case-insensitive `Red<blank>[`? Is it really that high?}
    sent: "2017-08-04T17:50:12.392Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5984b02a4bcd78af56142b1b"
    text: {Thanks for the thoughts @kpeters58. We should surely doc why that's the case.}
    sent: "2017-08-04T17:34:34.626Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5984a792bc46472974537cb8"
    text: {It's not exactly the same newbie crop as, say, one of the mainstream, established languages, though. It's beta software. ^/As far Rebol, I don't know if the word Rebol is set in global scope by default. ^/I understand the frustration from the little gotchas - perhaps the Red Team will consider any alternative ideas you might have^/}
    sent: "2017-08-04T16:57:54.915Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5984a5c71c8697534a8b25b5"
    text: {@greggirwin I hope I'll remember the case sensitivity of the Red header for life (unless Alzheimer's gets me ...). That's not my point and I should have made that clear - my point is that any gotchas are bad when it comes to promoting something - they create unnecessary frustration, especially in newcomers , that gets in the way of spreading the gospel. So, back to the issue at hand: When I, as a newbie, read that Rebol/Red are case insensitive and then pretty much the first word in any script negates that statement (and as a newbie I don't know nor care about any possible reasons for this design choice), I do not expect that and have to spend time to figure that out.  That is an unnecessary stumbling block; it may be small but small things can add up and tip scales. I very much like Rebol & Red - I have way more fun with them, than with any other language and often wonder why they have not (yet) become mainstream.  They are very different and maybe, just maybe, unnecessary little idiosyncrasies like this one works against them by adding to the learning curve...}
    sent: "2017-08-04T16:50:15.982Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "598220931c8697534a81a33b"
    text: {@kpeters58, now that you know it's case sensitive, for the Red header, how often do you think you'll make that mistake?}
    sent: "2017-08-02T18:57:23.286Z"
    editedAt: "2017-08-02T18:57:43.538Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5982199545fc670746ec3835"
    text: "Exact patterns can't be case insensitive "
    sent: "2017-08-02T18:27:33.582Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "598218631c8697534a81830b"
    text: {You could have embedded Red script in a text file, or more than one Red script in a text file.  So the first `Red` encountered wouldn't work.  There has to be an exact pattern to scan for}
    sent: "2017-08-02T18:22:27.583Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "598217edf5b3458e30a53a4f"
    text: {Or rEd, RED, etc.  The Red [] is an exact match special case, because.... how else do we determine the start of a script without something specific to look for?}
    sent: "2017-08-02T18:20:29.574Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59821778a7b406262d525ec3"
    text: {```^/>> type? red^/== tuple!^/```}
    sent: "2017-08-02T18:18:32.113Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5982174e210ac269204a858f"
    text: {because `red` has a default value.^/```^/>> red^/== 255.0.0^/```}
    sent: "2017-08-02T18:17:50.758Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59821457f5b3458e30a52c7b"
    text: {```text^/red [File: %bad-script.red]^/^/42^/```^/```text^/>> do %bad-script.red^/*** Syntax Error: script is missing a Red header: %bad-script.red^/*** Where: do^/*** Stack: do-file cause-error  ^/```}
    sent: "2017-08-02T18:05:11.094Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "598212cec101bc4e3ae1da0a"
    text: {As we can see, Red does not care about case - it's inconsistent to have a spot where it does}
    sent: "2017-08-02T17:58:38.136Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "598212a776a757f8086bf52f"
    text: {@kpeters58 we're talking about *scripts*, not REPL}
    sent: "2017-08-02T17:57:59.783Z"
    editedAt: "2017-08-02T17:58:06.893Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "5982128d2723db8d5e6bbf33"
    text: {>> Red: 1^/== 1^/>> red: 2^/== 2^/>> Red^/== 2^/>> }
    sent: "2017-08-02T17:57:33.731Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5982128aa7b406262d524600"
    text: "What do you mean by preface?"
    sent: "2017-08-02T17:57:30.434Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59821222210ac269204a6c9f"
    text: {@kpeters58 :point_up: [2 августа 2017 г., 22:49](https://gitter.im/red/help?at=598210a3614889d47511f83b) only `Red <any spacers> [` counts as a start of the header. And there's script's preface ;)}
    sent: "2017-08-02T17:55:46.095Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "598211d52723db8d5e6bbc93"
    text: "As it just did"
    sent: "2017-08-02T17:54:29.631Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "598211af2723db8d5e6bbb85"
    text: {Nothing prevents me from defining 'Red'  elsewhere - so not sure if that argument holds much water. Plus, you do have its position: It must be the first string REPL encounters... I feel that it's a gotcha waiting to happen...}
    sent: "2017-08-02T17:53:51.737Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "598210f8bc4647297449ba40"
    text: {@kpeters58 yes, that's intentional, `red` is a common word and `Red` is used to distinguish the regular `red` from header keyword}
    sent: "2017-08-02T17:50:48.566Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "598210ba76a757f8086bed95"
    text: {I just bumped into a (the?) case issue with the Red header - apparently one must propercase 'Red' - otherwise REPL complains about a missing header if a script containing a non-propercased header is loaded. Is this intentional? If so, what's the purpose behind it? Why not all cases as long as there's a header of the format: red[<optional content>]....}
    sent: "2017-08-02T17:49:46.694Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5980cb2876a757f808670f23"
    text: {I commented on the ticket about path eval in VID. Just a question of whether Doc left it out intentionally, so they could be used for something else. VID does allow more flexibility in recent releases. The `data` and `at` keywords can now be followed by arbitrary Red expressions.}
    sent: "2017-08-01T18:40:40.292Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59806fc3a7b406262d4bb7d0"
    text: "thks"
    sent: "2017-08-01T12:10:43.262Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59806f750cef4fed2eb873b1"
    text: {@tmpbci Sam, look here https://github.com/red/code/tree/master/Library/ZeroMQ .}
    sent: "2017-08-01T12:09:25.764Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59806d97210ac2692043fb13"
    text: "for rebol /red"
    sent: "2017-08-01T12:01:27.384Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59806d8a329651f46ede7e79"
    text: {do you have the 0MQ bindings in store ? the website is not responding http://rebol.esperconsultancy.nl/}
    sent: "2017-08-01T12:01:14.915Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59806b72c101bc4e3adb4919"
    text: {That's why I was familiar, there was talk in another room too, red/red or red/help. So I've read about it and understood the implications :smile: }
    sent: "2017-08-01T11:52:18.777Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59806b132723db8d5e6523fe"
    text: {:point_up: [July 21, 2017 OSC was mentioned](https://gitter.im/red/red/welcome?at=5971aa43c101bc4e3aa77a94)}
    sent: "2017-08-01T11:50:43.454Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59806a63c101bc4e3adb4485"
    text: {Well, http works now mostly, that could be ticked off I guess}
    sent: "2017-08-01T11:47:47.323Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59806a5b4bcd78af5603b243"
    text: "there is some early work ; read tcp://ident.me:80"
    sent: "2017-08-01T11:47:39.183Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59806a401c8697534a7abefd"
    text: {https://trello.com/c/Iz0cl1e8/61-070-full-i-o-support}
    sent: "2017-08-01T11:47:12.629Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59806a26f5b3458e309e7ad2"
    text: "I saw I/O in the roadmap"
    sent: "2017-08-01T11:46:46.625Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59806a0976a757f8086549da"
    text: "@tmpbci no ports yet in Red"
    sent: "2017-08-01T11:46:17.562Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598068d9210ac2692043e4d7"
    text: "maybe it's tty.USB0"
    sent: "2017-08-01T11:41:13.080Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "598068cfbc46472974430b25"
    text: {about path in reboluino it's at beginning define it according to your platform }
    sent: "2017-08-01T11:41:03.589Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "598067fc4bcd78af5603a7b5"
    text: "but how to open a local port to do a server"
    sent: "2017-08-01T11:37:32.000Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "598067bb614889d4750b4e6e"
    text: "I see i can read tcp:"
    sent: "2017-08-01T11:36:27.583Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "598067ab4bcd78af5603a6b8"
    text: {OSC is UDP so as soon as you have UDP, you can control anything far more than music. I didn't find how to open a network port in Red}
    sent: "2017-08-01T11:36:11.242Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59806762f5b3458e309e6b0b"
    text: {Just tested.. so it works in Rebol 2 , might be a path! bug actually (not sure if paths are asupposed to work inside Red's VID)}
    sent: "2017-08-01T11:34:58.780Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598066fdc101bc4e3adb3791"
    text: "far longer, way before github "
    sent: "2017-08-01T11:33:17.368Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "598066e145fc670746e54d7a"
    text: "probably :)"
    sent: "2017-08-01T11:32:49.321Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "598066d145fc670746e54ce8"
    text: {And you've been playing with VID for longer than me https://github.com/tmpbci/reboluino/blob/master/reboluino.r}
    sent: "2017-08-01T11:32:33.111Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598066b0c101bc4e3adb35a8"
    text: {no for DSL. OSC is the new MIDI so very useful. (rebol had no sound on OS X, that left no choices anyway)}
    sent: "2017-08-01T11:32:00.360Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "5980664ebc4647297442fe9e"
    text: "I see you like OSC quite a lot :smile: "
    sent: "2017-08-01T11:30:22.976Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5980660645fc670746e548f4"
    text: {@tmpbci do you know what I mean by dialects and DSLs?}
    sent: "2017-08-01T11:29:10.850Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "598065b51c8697534a7aa927"
    text: "ok i will try"
    sent: "2017-08-01T11:27:49.765Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59806596bc4647297442fa50"
    text: "That's just one way to do it"
    sent: "2017-08-01T11:27:18.456Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59806585a7b406262d4b8b5c"
    text: {```red^/c: ["something"]^/view compose [ field (c/1) ]^/```}
    sent: "2017-08-01T11:27:01.170Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59806544329651f46ede5bd1"
    text: {@tmpbci I think it's possible to some extent, but you don't have to use red syntax, you can `compose`}
    sent: "2017-08-01T11:25:56.547Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5980605645fc670746e52b8b"
    text: {of course i can define other variable with array content before using view. But not very practical... Imagine I design a functional MRI UI that launch stimulation scripts, I need to scan directories for script, build an array and view it.}
    sent: "2017-08-01T11:04:54.082Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59805f49614889d4750b2b43"
    text: "any plan to use red syntax in view ?"
    sent: "2017-08-01T11:00:25.688Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59805ee145fc670746e5249c"
    text: "cause of syntax error"
    sent: "2017-08-01T10:58:41.013Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59805e5d76a757f80865139e"
    text: "global array"
    sent: "2017-08-01T10:56:29.055Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59805e3745fc670746e5225c"
    text: {in fact I can't use any array anywhere in a view context}
    sent: "2017-08-01T10:55:51.354Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59805e1d76a757f8086512b5"
    text: ":)"
    sent: "2017-08-01T10:55:25.008Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59805e1a210ac2692043bb64"
    text: "geekyi I came to chat as requested "
    sent: "2017-08-01T10:55:22.271Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59805dd6329651f46ede3b93"
    text: "hi"
    sent: "2017-08-01T10:54:14.439Z"
    v: 1
    author: "597e4ed9d73408ce4f6f648d"
) #(
    id: "59805c01329651f46ede3443"
    text: {@virtualAlan Should have a space after "The time is":^/```red^/>> tm: rejoin ["The time is" t/hour " " t/minute]^/== "The time is07 44"^/```}
    sent: "2017-08-01T10:46:25.021Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59804967329651f46eddee33"
    text: "@virtualAlan Nice! Keep up the good work!"
    sent: "2017-08-01T09:27:03.017Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59803b8f4bcd78af5602df8f"
    text: {Was it @strpipe who was looking for voice recognition?}
    sent: "2017-08-01T08:27:59.448Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "597fbfebbc4647297440aeb4"
    text: {VoiceAlarm is a Speaking alarm clock.^/It Speaks the time when the set time is reached.^/Same as my example34 at:  http://www.mycode4fun.co.uk/About-Red-Programming^/but with a little extra for the voice.^/^/I used SAPI (Speech Application Programming Interface).^/I've also included the Red script in the  VoiceAlarm.zip. ^/I tend to avoid releasing scrips when I think they could confuse more than help, ^/but I think/hope you find this is pretty straight forward.^/I tested it with Win 7, Win 8, Win 8.1, Win 10.  All seems to work fine.^/try it here;      http://www.mycode4fun.co.uk/red-apps^/Alan.}
    sent: "2017-07-31T23:40:27.875Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "597f7631614889d47507ee5c"
    text: {ok. one more.  I give myself the name  : Barbarian Programmer.  Why ?   Simple.  A Barbarian wants to get results by his programming and is fighting against complexity.   ha }
    sent: "2017-07-31T18:25:53.517Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "597f71b3c101bc4e3ad7e041"
    text: {Ya.  Good viewpoint.  I aint able to make a suggestion for a nickname. This must be done automatic , from someone who is many times in contact. However , sometimes makes the athmosphere cool and  tuned in conversation. I only did for iArnold one time.  ok. thank you for your attention. im back again with programming issues. at the time i have to learn REBOL most important themes.    see you again   this whole thing  only " by the way".}
    sent: "2017-07-31T18:06:43.469Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "597f70f7614889d47507db76"
    text: {I knew Nenad as DocKimbel for a long time before learning his real name, so he may always be "Doc" to me. Same for Endo, Cyphre (an old Reboler), and a few others. I don't think I've ever used Bolek's full name. :^^)}
    sent: "2017-07-31T18:03:35.304Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "597f6ef21c8697534a772968"
    text: {I don't have one. I prefer real names, but don't have any problem with those who enjoy using them, and don't abuse them. }
    sent: "2017-07-31T17:54:58.878Z"
    editedAt: "2017-07-31T17:55:20.098Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597f686545fc670746e1b759"
    text: {Hallo Gregg , may i ask you. Do you have a programmers Nickname ? Or do you want nothing to do with that kind of stuff ?}
    sent: "2017-07-31T17:27:01.573Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "597f4f121c8697534a769e0a"
    text: ":^^)"
    sent: "2017-07-31T15:38:58.659Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597ef85f210ac269203e88d2"
    text: "The barbarian programmer is back.  Yes , its me."
    sent: "2017-07-31T09:29:03.076Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "597eac2a4bcd78af56fd42a6"
    text: {@kpeters58 In the [documentation](https://doc.red-lang.org/en/view.html), search for "flags" and "options" . The one specific to windows are [there](https://doc.red-lang.org/en/view.html#_window).}
    sent: "2017-07-31T04:03:54.143Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597e82091c8697534a73c6ee"
    text: {Where can I find info on the currently available view options & flags?}
    sent: "2017-07-31T01:04:09.877Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597d6d782723db8d5e5b278c"
    text: {@greggirwin Great article! Thank you! That explains a lot.}
    sent: "2017-07-30T05:24:08.140Z"
    v: 1
    author: "597bbc0fd73408ce4f6f3725"
) #(
    id: "597d690745fc670746db4c21"
    text: {One of the first rites of passage in Redbol languages: https://github.com/red/red/wiki/Why-do-I-have-to-copy-series-values%3F}
    sent: "2017-07-30T05:05:11.760Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597d629abc4647297438e29e"
    text: {I found some unexpected behavior when appending string within a function. Bug or feature? ^/```^/>> f: function [] [ append "" "Foo" ]^/== func [][append "" "Foo"]^/>> f^/== "Foo"^/>> f^/== "FooFoo"^/>> f^/== „FooFooFoo“^/```}
    sent: "2017-07-30T04:37:46.527Z"
    v: 1
    author: "597bbc0fd73408ce4f6f3725"
) #(
    id: "597d07eba7b406262d40bbf4"
    text: {@greggirwin I'll gather some links with some examples soon.}
    sent: "2017-07-29T22:10:51.034Z"
    v: 1
    author: "597b65f2d73408ce4f6f2f10"
) #(
    id: "597cca602723db8d5e5983a3"
    text: {Certainly, if you can do it from C, you can do it from Red/System, depending on specific functionality you need. See also: https://gitter.im/red/red/system}
    sent: "2017-07-29T17:48:16.940Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cca21210ac2692038528d"
    text: {Thanks @jacktyme_twitter. The context helps a lot. If you have links to examples, we can put our heads together on recommended approaches and applicability.}
    sent: "2017-07-29T17:47:13.007Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597cba221c8697534a6ec812"
    text: {@greggirwin  @dockimbel  Ok thanks for the input. I happen to be fascinated by MMO( Online Games ) bots. A lot of bot makers use image recognition to make bots. Another way is manipulating the memory of the game in question. I just wanted to know if Red can do this. I know there are numerous examples of bots writting in C# C++ Java etc that perform the bot operations by memory manipulation rather than image recognition. Thanks for the help guys.}
    sent: "2017-07-29T16:38:58.612Z"
    v: 1
    author: "597b65f2d73408ce4f6f2f10"
) #(
    id: "597c6fd576a757f808586ef9"
    text: {@PeterWAWood Thanks for the info! I tried PUT instead of POST anyway. Seems to work!}
    sent: "2017-07-29T11:21:57.102Z"
    v: 1
    author: "597bbc0fd73408ce4f6f3725"
) #(
    id: "597c3d652723db8d5e5804cf"
    text: {@jdrexler I checked the source code and HTTP PUT isn't implemented yet.}
    sent: "2017-07-29T07:46:45.761Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597c3ca9210ac2692036bc53"
    text: {@jdrexler It supports POST (see  :point_up: [May 23, 2017 2:06 PM](https://gitter.im/red/red/welcome?at=5923d16d5e34568d5e805970)). I'm not sure about PUT but you could try.}
    sent: "2017-07-29T07:43:37.431Z"
    editedAt: "2017-07-29T07:44:13.946Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597c37074bcd78af56f64aa0"
    text: {Hello,  I am doing my first Red experiments. Does the „write" action already support HTTP PUT? Or is the cURL binding a better option at the moment?}
    sent: "2017-07-29T07:19:35.180Z"
    v: 1
    author: "597bbc0fd73408ce4f6f3725"
) #(
    id: "597bf78c1c8697534a6cad0c"
    text: {> This has to be done by manipulating the memory values and not via any keystroke inputs.^/^/That is not a good option. Both because there is no reliable way to achieve it regardless of the language, and because it would be considered a "bad practice", as processes exist in the first place to provide memory isolation.}
    sent: "2017-07-29T02:48:44.378Z"
    editedAt: "2017-07-29T02:52:39.230Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597bf6f9614889d475fd4bc0"
    text: {@jacktyme_twitter ^/>  You can find the answer to what you asked for in the first example on [this page](http://www.mycode4fun.co.uk/example-scripts).}
    sent: "2017-07-29T02:46:17.514Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b95f7c101bc4e3acc3f26"
    text: {Poking into another processes address space is a *really* bad idea.}
    sent: "2017-07-28T19:52:23.932Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597b95694bcd78af56f49284"
    text: {How would you do that from other languages? My question is why it needs to work that way? What is the ultimate goal?}
    sent: "2017-07-28T19:50:01.254Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597b83d176a757f80855c454"
    text: {@dockimbel Hey thanks for the answer. I didn't phrase what I exactly wanted correctly on stack. I edited the question but not sure if anyone could see it. I will post the new question here: "I want to create a program with Red that attaches to the windows process Calculator (calc.exe) and have it perform the calculation 1 + 1. This has to be done by manipulating the memory values and not via any keystroke inputs." ---> This is what I wanted but didn't word it correctly.}
    sent: "2017-07-28T18:34:57.233Z"
    v: 1
    author: "597b65f2d73408ce4f6f2f10"
) #(
    id: "597b79fca7b406262d3c3554"
    text: "[Ni Hau]"
    sent: "2017-07-28T17:53:00.601Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "597b667c1c8697534a6ad124"
    text: {@jacktyme_twitter Hi Jack. Sorry, I couldn't salvage your [question on SO](https://stackoverflow.com/questions/45259483/external-application-remote-control-from-red-language), the rules they apply there are quite strict (probably too strict in this case). You can find the answer to what you asked for in the first example on [this page](http://www.mycode4fun.co.uk/example-scripts). If you need any help with it, feel free to ask here or in the [red/help](https://gitter.im/red/red/help) room.}
    sent: "2017-07-28T16:29:48.584Z"
    editedAt: "2017-07-28T16:34:58.345Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597b661d1c8697534a6ad062"
    text: "is DocKimbel here?"
    sent: "2017-07-28T16:28:13.773Z"
    v: 1
    author: "597b65f2d73408ce4f6f2f10"
) #(
    id: "597b65fabc46472974332e6f"
    text: "Hello"
    sent: "2017-07-28T16:27:38.864Z"
    v: 1
    author: "597b65f2d73408ce4f6f2f10"
) #(
    id: "597b6467f5b3458e308e8c41"
    text: {You'll internalize the most important type categories in no time. And that's important, because types are a big part of what makes Red special, and leveraging them makes code much nicer.}
    sent: "2017-07-28T16:20:55.986Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597b642c1c8697534a6ac853"
    text: {Yes @doublegifts. You can also do quick checks in the console.^/```^/>> ? typeset!^/    series!          [block! paren! string! file! url! path! lit-path! set-path! get-path! vector! hash! binary! ...^/    any-type!        [datatype! unset! none! logic! block! paren! string! file! url! char! integer! float! word! ...^/    number!          [integer! float! percent!]^/    any-object!      [object! error!]^/    scalar!          [char! integer! float! pair! percent! tuple! time! date!]^/    any-string!      [string! file! url! tag! email!]^/    any-word!        [word! set-word! lit-word! get-word!]^/    any-function!    [native! action! op! function! routine!]^/    any-block!       [block! paren! path! lit-path! set-path! get-path! hash!]^/    any-path!        [path! lit-path! set-path! get-path!]^/    any-list!        [block! paren! hash!]^/    immediate!       [datatype! none! logic! char! integer! float! word! set-word! lit-word! get-word! refinement...^/    all-word!        [word! set-word! lit-word! get-word! refinement! issue!]^/    internal!        [unset!]^/    external!        [event!]^/    default!         [datatype! none! logic! block! paren! string! file! url! char! integer! float! word! set-wor...^/^/>> ? series!^/SERIES! is a typeset! value: make typeset! [block! paren! string! file! url! path! lit-path! set-path! get-path! vector! hash! binary! tag! email! image!]^/```}
    sent: "2017-07-28T16:19:55.954Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597b57552723db8d5e55436c"
    text: {@greggirwin Ah, thanks for explanation. I did not know that length? can apply to file! too. Its help doc said: ^/ARGUMENTS:     series       [series! bitset! map! tuple! none!] ^/and size? doc said: ^/ARGUMENTS:     file         [file!] ^/Now, I known that for the same file! value, length? returns file name length, and size? returns file's content size.^/Just found the type inheritance diagram, and known seres! --> string! --> file! ( so, length? can apply to file! type )}
    sent: "2017-07-28T15:25:09.965Z"
    v: 1
    author: "597a1f46d73408ce4f6f0a08"
) #(
    id: "597b1abe76a757f808540ab0"
    text: {@OhCoder ^/```red^/view [button "hi"]^/```}
    sent: "2017-07-28T11:06:38.028Z"
    editedAt: "2017-07-28T11:06:59.133Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "597b0ed8329651f46ecd8111"
    text: "hello, world!"
    sent: "2017-07-28T10:15:52.165Z"
    v: 1
    author: "597b09d4d73408ce4f6f23e1"
) #(
    id: "597a69c976a757f80851db59"
    text: {:point_up: [July 27, 2017 12:05 PM](https://gitter.im/red/red/welcome?at=597a2b6289aea4761ddcef97) @kpeters58, I can't dupe the problem. Works fine here. }
    sent: "2017-07-27T22:31:37.944Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597a697645fc670746d23160"
    text: {>  In other word, why we cannot just extend length? to suport file! type instead add new size? ^/^/Two different things. As Bolek said, one acts on the `file!` value, which is a string type. If `length?` is used to get the size of the file contents, how do you get the length of the `file!` value itself? You'd have to `form` it first.}
    sent: "2017-07-27T22:30:14.065Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597a68abf5b3458e308b1966"
    text: {:point_up: [July 27, 2017 11:32 AM](https://gitter.im/red/red/welcome?at=597a23a7bc464729742ec9d6) @doublegifts, confirmed. Good find!}
    sent: "2017-07-27T22:26:51.946Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597a37b9c101bc4e3ac76e77"
    text: {Probably the rules are not perfect yet :) Maybe you should report it as a bug.}
    sent: "2017-07-27T18:58:01.326Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597a378089aea4761ddd1f54"
    text: {that worked - but I was under the impression that it only affected OK/Cancel buttons....?}
    sent: "2017-07-27T18:57:04.264Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a344676a757f808510e66"
    text: {See http://www.red-lang.org/2017/07/063-macos-gui-backend.html for more informations abut rewrite engine.}
    sent: "2017-07-27T18:43:18.370Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597a3420614889d475f73b81"
    text: {@kpeters58 Try to turn off rewriting engine with  `system/view/VID/GUI-rules/active?: no`}
    sent: "2017-07-27T18:42:40.508Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597a329445fc670746d16b93"
    text: {Button order is not respected - bug or not? Even renamed 'Cancel' button to rule out that the new x-platform rules don't apply - still incorrectly ordered....}
    sent: "2017-07-27T18:36:04.508Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a323289aea4761ddd0bf8"
    text: {^-^-^-^-db-nav: panel [^/^-^-^-^-^-b_first:  nbtn "|<"^/^-^-^-^-^-b_prev:   nbtn "<"^/^-^-^-^-^-b_next:   nbtn ">"^/^-^-^-^-^-b_last:   nbtn ">|"^/^-^-^-^-    pad 10x0^/^-^-^-^-^-b_new:    btn  "New"^/^-^-^-^-^-b_edit:   btn  "Edit"^/^-^-^-^-^-b_del:    btn  "Delete"^/^-^-^-^-^-b_canc:   btn  "Cancel"^/^-^-^-^-^-b_save:   btn  "Save"^/^-^-^-^-] ; nav panel}
    sent: "2017-07-27T18:34:26.765Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a32304bcd78af56efbdb4"
    text: "The above is the result of this:"
    sent: "2017-07-27T18:34:24.188Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a31f41c8697534a6698c7"
    text: {[![image.png](https://files.gitter.im/red/red/welcome/XRUn/thumb/image.png)](https://files.gitter.im/red/red/welcome/XRUn/image.png)}
    sent: "2017-07-27T18:33:24.725Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a31ddbc464729742f01bd"
    text: {[![image.png](https://files.gitter.im/red/red/welcome/NdPq/thumb/image.png)](https://files.gitter.im/red/red/welcome/NdPq/image.png)}
    sent: "2017-07-27T18:33:01.112Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a2bb089aea4761ddcf12a"
    text: {And then use it from the console, but without supplying a caption for the button, the console quietly shuts down without any error reporting.}
    sent: "2017-07-27T18:06:40.704Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a2b73a7b406262d37a210"
    text: {^-^-style nbtn:     button      font [ style: [bold] size: 10 ]}
    sent: "2017-07-27T18:05:39.834Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a2b72c101bc4e3ac73db6"
    text: "When I create a style like this:"
    sent: "2017-07-27T18:05:38.315Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a2b6289aea4761ddcef97"
    text: "Bug or not?"
    sent: "2017-07-27T18:05:22.167Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597a2a3a4bcd78af56ef9eda"
    text: {Also, your version is from 18-Jul; many improvements have been made since, but -- admittedly --  I did not check whether those concerned date (but I think so, because date was heavily  developed recently).}
    sent: "2017-07-27T18:00:26.531Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "597a27594bcd78af56ef9193"
    text: {Hmm... i don't try on other platform, mine is Mac OS 10.12}
    sent: "2017-07-27T17:48:09.786Z"
    v: 1
    author: "597a1f46d73408ce4f6f0a08"
) #(
    id: "597a2697bc464729742ed41f"
    text: {@doublegifts That date problem looks like a bug indeed (though I cannot reproduce it).}
    sent: "2017-07-27T17:44:55.415Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "597a252c329651f46eca849d"
    text: "@doublegifts you're welcome."
    sent: "2017-07-27T17:38:52.102Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597a248dc101bc4e3ac72061"
    text: "got it. thanks @rebolek "
    sent: "2017-07-27T17:36:13.562Z"
    v: 1
    author: "597a1f46d73408ce4f6f0a08"
) #(
    id: "597a2450c101bc4e3ac71ff3"
    text: {It is usual in Red/bol to add common useful functions. I.e. first version of Rebol did not have `append`, you can do  the same with `insert tail`, but it's useful to have it. Same with `empty?`.}
    sent: "2017-07-27T17:35:12.989Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597a23a7bc464729742ec9d6"
    text: {Just play a bit Red and seems found a bug about  now/date + 1 ( at least the result behavior different than Rebol )^/```^/>> print [system/version  system/build/date]^/0.6.3 18-Jul-2017/14:03:42-04:00^/>> ^/>> now/date^/== 27-Jul-2017^/>> now/date + 1^/== 27-Jul-2017^/>> now/date + 0^/== 26-Jul-2017^/>> ^/>> d: 2017-07-27^/== 27-Jul-2017^/>> d + 1^/== 28-Jul-2017^/>> d + 0^/== 27-Jul-2017^/```}
    sent: "2017-07-27T17:32:23.362Z"
    v: 1
    author: "597a1f46d73408ce4f6f0a08"
) #(
    id: "597a22fa2723db8d5e512c86"
    text: {  `tail?` vs `empty?` - yes, they are basically the same, `empty?` also supports `none`because of the `none` transparency. ^/^/>  why length? cannot act on file! type and return the size^/^/Because `file!` type value does not represent the file in itself,  just the filepath. But once we get full IO, you would be able to use `length?` on files, See this R2 code:^/```^/>> file: open file://sony/Code/red/version.r^/>> length? file^/== 5^/>> size? %version.r^/== 5^/>> ^/```}
    sent: "2017-07-27T17:29:30.344Z"
    editedAt: "2017-07-27T17:30:52.019Z"
    v: 4
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597a2188614889d475f6f410"
    text: {Newbie on both Rebol/Red, got some "beginner" question; come from other languages, I am kind of confuse the different about empty? vs tail?  and size? vs length?  from "end-user" point of view, they seems alias ( doing the same  ).  To minimize and less function words to remember, why length? cannot act on file! type and return the size ( why we need a size? word? ;  same as tail?/empty?  although empty? doing more with none! and under the hood is calling tail? ) In other word, why we cannot just extend lenght? to suport file! type instead add new size? word ( because Red want as close as Rebol and Rebol already use size? and length? ? )}
    sent: "2017-07-27T17:23:20.598Z"
    v: 1
    author: "597a1f46d73408ce4f6f0a08"
) #(
    id: "5979a2b54bcd78af56ed652e"
    text: {moved from avira to kaspersky free.... it works :)}
    sent: "2017-07-27T08:22:13.387Z"
    v: 1
    author: "58ec5749d73408ce4f5783c3"
) #(
    id: "59789de389aea4761dd717c5"
    text: "@iceflow19 Thanks - that was it"
    sent: "2017-07-26T13:49:23.755Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597893352723db8d5e4b20db"
    text: "Thanks!"
    sent: "2017-07-26T13:03:49.480Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "597892214bcd78af56e96888"
    text: "@kskarthik type `? call` in REPL"
    sent: "2017-07-26T12:59:13.181Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "597891f189aea4761dd6d9d0"
    text: {How can I call Linux shell from red? Eg: dd, echo, cat. In python we do `import os`}
    sent: "2017-07-26T12:58:25.108Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "5978567fbc4647297427b891"
    text: {@kpeters58 You're forgetting a block! at the end. It should be:^/^/`style tabpnl: tab-panel   400x100  []`}
    sent: "2017-07-26T08:44:47.713Z"
    editedAt: "2017-07-26T08:45:22.247Z"
    v: 2
    author: "556b1a3715522ed4b3e13321"
) #(
    id: "59783ce21c8697534a5ec8c1"
    text: "Need a little more to go on. "
    sent: "2017-07-26T06:55:30.496Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5978116476a757f8084881f4"
    text: {Looks like a bug to me, but then I am very new to Red .... so is this a valid assessment or something I need to learn...?}
    sent: "2017-07-26T03:49:56.629Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597811222723db8d5e491096"
    text: "           style tabpnl: tab-panel   400x100  "
    sent: "2017-07-26T03:48:50.439Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59781110329651f46ec27392"
    text: {*** Script Error: foreach does not allow none! for its series argument^/*** Where: foreach^/*** Stack: context view layout  }
    sent: "2017-07-26T03:48:32.642Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5978110dbc4647297426c121"
    text: "The moment I add the line below, I receive:"
    sent: "2017-07-26T03:48:29.495Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5977790abc4647297424774d"
    text: {A currency dialect is the way to go, once we get there.}
    sent: "2017-07-25T16:59:54.302Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597778e945fc670746c6b900"
    text: {We can consider `decimal!` as the non-float decimal datatype name. We'll also want `money!/currency!` though. It won't be the full ISO treatment, just numeric, more than likely. R2 allowed country codes, but R3 does not. It was a nice idea in R2, but ended up being more effort when dealing with money values, because they weren't atomic.}
    sent: "2017-07-25T16:59:21.073Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59775e60614889d475ebe749"
    text: {If we make a cryptocurrency, better we follow mini blockchain system. Cryptonite, nimiq are using it already. Also let's name it RedCoin !}
    sent: "2017-07-25T15:06:08.732Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "59775de32723db8d5e4652b8"
    text: { I am interpreting. The no-wait is a leftover of testing various combinations. It fails with or without no-wait. Replacing drop-list by drop-down works ok.}
    sent: "2017-07-25T15:04:03.769Z"
    v: 1
    author: "574b318ac43b8c6019759842"
) #(
    id: "59775cde45fc670746c63758"
    text: {hahahahahaha… But we don’t have a reliable HTTP/Socket/RPC library yet, cryptocurrency! can wait...}
    sent: "2017-07-25T14:59:42.359Z"
    v: 1
    author: "5508042215522ed4b3dd6119"
) #(
    id: "59775be2bc4647297423e8b2"
    text: "`cryptocurrency!` will get us more views ;)"
    sent: "2017-07-25T14:55:30.528Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59775bce45fc670746c631d2"
    text: {LoL I don’t think money! or currency! is a good choice, because currency contains ISO 4217 unit(currency code). It’s a LOT of work https://en.wikipedia.org/wiki/ISO_4217}
    sent: "2017-07-25T14:55:10.452Z"
    v: 1
    author: "5508042215522ed4b3dd6119"
) #(
    id: "59775b0989aea4761dd20349"
    text: "Although currency! might be better"
    sent: "2017-07-25T14:51:53.622Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59775adb89aea4761dd2027d"
    text: {money! would be the most important next type, because... well, 'money' makes the world go round}
    sent: "2017-07-25T14:51:07.172Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59775884614889d475ebc923"
    text: {O tried compiling red in alpine chroot. Red needs rebol2 to compile it. Rebol is based on glibc.}
    sent: "2017-07-25T14:41:08.298Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "5977579d45fc670746c61da6"
    text: "Oh! Thanks for sharing "
    sent: "2017-07-25T14:37:17.010Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "5977518cbc4647297423b148"
    text: {Can't recall compiling red, but can run it in some form...}
    sent: "2017-07-25T14:11:24.930Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5977516945fc670746c5fdad"
    text: {@kskarthik I have done some experiments with Alpine Linux and red here: https://github.com/eranws/red-docker}
    sent: "2017-07-25T14:10:49.542Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5977468ac101bc4e3abbee2f"
    text: {@kpeters58 As a workaround you can use some padding to correct. Negative padding also works:^/```^/    btn "Text 3"  pad -2x0  fld^/```}
    sent: "2017-07-25T13:24:26.877Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59773bdf329651f46ebf1b4e"
    text: {@kpeters58 About the 2 pixels issue, the buttons on Windows have a 1+1 pixels margin on left and right, VID tries to rectify that, though, maybe it should not in that case. You can open a new ticket on github, and post your code there.}
    sent: "2017-07-25T12:38:55.669Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597733de614889d475eb0c30"
    text: {@vdsfr Are you compiling that code or interpreting it? When run from the GUI console, the first window does not close. If you are compiling it, it will close because there is no event loop anymore as you launch the first window with `view/no-wait`. So you can either remove the `/no-wait` refinement, or add a `do-events` at the end of your program, to ensure an event loop will be running for the first window.}
    sent: "2017-07-25T12:04:46.776Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "597732ecc101bc4e3abb9439"
    text: {Of course, that assumes that the functions in musl have the same names as LibC.}
    sent: "2017-07-25T12:00:44.242Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597732ab89aea4761dd136f3"
    text: {@kskarthik The alpha Red compiler is written in Rebol2. I very much doubt that a version of Rebol2 which is linked against musl exists.^/^/You could probably create a personalised Red interpreter by "patching" red/system/runtime/lib-names.reds and cross-compiling it on a non-Linux machine.}
    sent: "2017-07-25T11:59:39.318Z"
    editedAt: "2017-07-25T11:59:54.656Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "59772dc9c101bc4e3abb7c13"
    text: {@greggirwin thank you for inspiration. I will be really glad if this great programming language will grow faster!}
    sent: "2017-07-25T11:38:49.733Z"
    editedAt: "2017-07-25T11:39:02.100Z"
    v: 2
    author: "59768babd73408ce4f6e9730"
) #(
    id: "5977285cbc4647297422e498"
    text: {How can I compile red source against musl instead of glibc ? I am using alpine Linux & it uses musl.}
    sent: "2017-07-25T11:15:40.298Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "597719ba614889d475ea95a3"
    text: {In the code below  click the button and close the hello panel^/the window stays open. Now click the drop-list, click the button,^/close the hello panel, the main window closes. I suppose that the^/window should stay open. Right? or Wrong?^/^/Red [needs 'view]^/ view/no-wait compose [title (rejoin ["V: " form  system/version])  ^/      below ^/      drop-list 200 data  [ "1" "2"] []^/      button 200 "Show-Hi" [ view [ h1 "Hello"]]^/   ]^/; Peter}
    sent: "2017-07-25T10:13:14.950Z"
    v: 1
    author: "574b318ac43b8c6019759842"
) #(
    id: "5977138b4bcd78af56e34e3b"
    text: {Sorry guys. Just trying to setup a matrix bridge. }
    sent: "2017-07-25T09:46:51.779Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "59770710f5b3458e307da0a7"
    text: "You can use https://gitter.im/red/sandbox "
    sent: "2017-07-25T08:53:36.865Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5977067df5b3458e307d9d5d"
    text: {Please do not use this channel to play with a bot. }
    sent: "2017-07-25T08:51:09.580Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "597703dc89aea4761dd0613c"
    text: "what's that? Do you need guys any assistance? :-)"
    sent: "2017-07-25T08:39:56.351Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5977017b89aea4761dd05561"
    text: "pong"
    sent: "2017-07-25T08:29:47.844Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "5977017476a757f808441129"
    text: "`kskarthik` matrix ping!"
    sent: "2017-07-25T08:29:40.742Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "597700a3714ea96f781d84b8"
    text: "two way ping test"
    sent: "2017-07-25T08:26:11.213Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "5976ff9b2723db8d5e448f65"
    text: "`kskarthik` hello from Matrix !"
    sent: "2017-07-25T08:21:47.179Z"
    v: 1
    author: "56bb7a56e610378809c0cb2c"
) #(
    id: "5976af541c8697534a5880e3"
    text: {At a glance, the first thing I'd suggest is looking at https://github.com/red/red/wiki/Coding-Style-Guide and trying to get your code a little closer to that style. It will help people who want to contribute.}
    sent: "2017-07-25T02:39:16.995Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5976aee789aea4761dcf330b"
    text: {Thanks @vulnz! There are a few other beginnings of IDE experiments. Maybe their authors will chime in here. I'll try to look at yours soon.}
    sent: "2017-07-25T02:37:27.247Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59768c38bc4647297420a2c1"
    text: "Thank you ;)"
    sent: "2017-07-25T00:09:28.702Z"
    v: 1
    author: "59768babd73408ce4f6e9730"
) #(
    id: "59768c0e714ea96f781bf937"
    text: {I like this programming language and I did not find any working ide in Red that works, so I did my best so people can start programming in Red faster}
    sent: "2017-07-25T00:08:46.878Z"
    v: 1
    author: "59768babd73408ce4f6e9730"
)#(
    id: "59768bc6714ea96f781bf8e1"
    text: {https://github.com/vulnz/redide will be glad if you will use it and help it to become better}
    sent: "2017-07-25T00:07:34.099Z"
    v: 1
    author: "59768babd73408ce4f6e9730"
) #(
    id: "59768bb3714ea96f781bf8a6"
    text: "Hello guyz!"
    sent: "2017-07-25T00:07:15.396Z"
    v: 1
    author: "59768babd73408ce4f6e9730"
) #(
    id: "5976707c1c8697534a57b48b"
    text: {If you have test cases, those would be *most* welcome. I have old stuff too, but much of it was proprietary. }
    sent: "2017-07-24T22:11:08.242Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5976704076a757f80842210e"
    text: {That is great. I've worked with many dollar amounts to 10 decimal places in apps involving currency exchange data.}
    sent: "2017-07-24T22:10:08.696Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "5976701789aea4761dce6b40"
    text: "And it will be accurate. That's the top priority."
    sent: "2017-07-24T22:09:27.963Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59766ff91c8697534a57b326"
    text: "I don't care about that, the USD part that is."
    sent: "2017-07-24T22:08:57.455Z"
    editedAt: "2017-07-24T22:09:15.964Z"
    v: 2
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59766ff8c101bc4e3ab8c531"
    text: "We agree on the benefit."
    sent: "2017-07-24T22:08:56.423Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59766febc101bc4e3ab8c51c"
    text: {The `$` sigil will be there, yes. It's the `USD`, etc. part that may not.}
    sent: "2017-07-24T22:08:43.098Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59766fc42723db8d5e429943"
    text: "Anyway, cool. Thanks for your help. "
    sent: "2017-07-24T22:08:04.323Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59766fb0c101bc4e3ab8c4af"
    text: {In real world Internet / web programming, what gave REBOL a leg up over Javascript was date! money! and read http://whereever/data.csv}
    sent: "2017-07-24T22:07:44.116Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59766f4a1c8697534a57b129"
    text: {money! in REBOL and the supporting math ops has made work a breeze.}
    sent: "2017-07-24T22:06:02.320Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59766f2289aea4761dce68a5"
    text: {I see. But in the real world, countless data comes in the form of $10.99. I suppose I could load such data as floats after bringing in as strings and popping the $.^/^/But thanks for the heads up on this Gregg}
    sent: "2017-07-24T22:05:22.479Z"
    editedAt: "2017-07-24T22:08:42.680Z"
    v: 2
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59766c32714ea96f781b93e5"
    text: {Basically, a 3-value numeric type, with decimal support, and a different notation from `pair!`. e.g. `(x, y, z)`}
    sent: "2017-07-24T21:52:50.513Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59766b181c8697534a57a2a4"
    text: "Gitter search is not helpful. :^^\"
    sent: "2017-07-24T21:48:08.058Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59766a7c329651f46ebc1c3e"
    text: {There was chat here on `point!` can't turn up notes on it right now.}
    sent: "2017-07-24T21:45:32.585Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597669e8bc46472974202d1c"
    text: {And, while it's not spec'd yet, it's possible it will be *only* the numeric value, rather than being Rebol compatible. The case for the currency type attr hasn't been strong.}
    sent: "2017-07-24T21:43:04.729Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597669bf76a757f808420b98"
    text: "Are there docs on point!"
    sent: "2017-07-24T21:42:23.900Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "5976695c76a757f8084209fe"
    text: {`Money!` *will* come. It may come sooner if someone can do the work or sponsor it to make it a priority.}
    sent: "2017-07-24T21:40:44.476Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59766933c101bc4e3ab8ad02"
    text: {There is no timetable. It's based on priorities, which may change, and what is easy to experiment with. `Point!` has been discussed, as has `money!`, and a new `ref!` type. The known need, though, is `port!` for I/O, so that will probably be next.}
    sent: "2017-07-24T21:40:03.172Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5976685b1c8697534a579581"
    text: {Is there a published timetable for datatypes yet to be implemented? Do you know if currency will be supported and if so, when?}
    sent: "2017-07-24T21:36:27.164Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "5976681c45fc670746c27055"
    text: {`Split` is a simple func in Red right now, and may be enhanced in the future.}
    sent: "2017-07-24T21:35:24.678Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5976680d89aea4761dce4c20"
    text: "I see what you're saying now."
    sent: "2017-07-24T21:35:09.908Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "597667fc4bcd78af56e0d9e3"
    text: {You don't need to use `/all` in Red, it's the default behavior now.}
    sent: "2017-07-24T21:34:52.463Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597667d41c8697534a57935c"
    text: {Wait. /all is parse of Red parse or isn't? Help says it isn't. I can see why to remove it, right because did not split replace string parsing and in split whitespace can be handled?}
    sent: "2017-07-24T21:34:12.075Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "5976674e45fc670746c26df0"
    text: {If you're using `/all`, just remove it and you should be good to go.}
    sent: "2017-07-24T21:31:58.604Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59766731f5b3458e307b7a1f"
    text: {And, yes, `/all` is the standard in `parse` under Red.}
    sent: "2017-07-24T21:31:29.334Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5976671245fc670746c26d26"
    text: "Thanks much"
    sent: "2017-07-24T21:30:58.606Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "5976670189aea4761dce48f4"
    text: {@GuitarRover_twitter, understood. %console-cfg.red is where the Red console stores its data. You will find it under %programdata%/red/ on your system.}
    sent: "2017-07-24T21:30:41.629Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5976628a45fc670746c25add"
    text: {So what happened to /all refinement with PARSE? In trying to port REBOL 2.7.8 scripts to Red 0.6.3, the interpreter alerted me that Parse lacks an /all refinement. ^/^/Does that not mean there is now no way to manually account for whitespace is parsing?}
    sent: "2017-07-24T21:11:38.714Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "5976621f45fc670746c2594d"
    text: {I don't even know what the %console-cfg.red file is. I'm only using the downloaded executable from red-lang.org. ^/^/I am merely an end user who programs end user programs.}
    sent: "2017-07-24T21:09:51.142Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59765bd176a757f80841d4cf"
    text: {See https://github.com/red/red/issues/2897 for some details.}
    sent: "2017-07-24T20:42:57.899Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59765b80329651f46ebbe00a"
    text: {That file location may change in the near future, because of issues like this.}
    sent: "2017-07-24T20:41:36.457Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59765b62bc464729741fef50"
    text: {@GuitarRover_twitter Probably related to Win10 permissions on the prefs file. Can you manually edit %console-cfg.red in the program data dir for Red?}
    sent: "2017-07-24T20:41:06.583Z"
    editedAt: "2017-07-24T20:43:23.778Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59765b151c8697534a576139"
    text: "Ah, nice @abdllhygt."
    sent: "2017-07-24T20:39:49.733Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59765226614889d475e7b6a9"
    text: {Env: Win 10. Ver: 0.6.3. Is there a reason why the changes to the font size settings in the REPL fail to persist between sessions?}
    sent: "2017-07-24T20:01:42.123Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "5976509945fc670746c20b89"
    text: {https://github.com/abdllhygt/Sozluk my red program for basic language translater system}
    sent: "2017-07-24T19:55:05.949Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "5976505376a757f80841a34d"
    text: "i'm not new"
    sent: "2017-07-24T19:53:55.532Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "5976504dbc464729741fbddd"
    text: "i use red :)"
    sent: "2017-07-24T19:53:49.584Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59764eeac101bc4e3ab83516"
    text: "Hi @abdllhygt. Welcome to Red!"
    sent: "2017-07-24T19:47:54.377Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59764215bc464729741f77ec"
    text: "`nothing`"
    sent: "2017-07-24T18:53:09.210Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "597641d4714ea96f781adc7b"
    text: "Hi!"
    sent: "2017-07-24T18:52:04.512Z"
    v: 1
    author: "597641c4d73408ce4f6e8ea6"
) #(
    id: "59761e6a45fc670746c121f4"
    text: {Good question. I'll link to that from the GUI branch room.}
    sent: "2017-07-24T16:20:58.198Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5976123445fc670746c0e5fa"
    text: { Red []^/ ^/ view [^/^-style txt: text   100^-right ^/    style btn: button 100^-^-^/^-style fld: field  100^/^-^-^/^-group-box  [^/^-^-txt "Text 1" ^-fld^-  return^-^- ^/^-^-txt "Text 2"^-fld^-  return^/^-^-btn "Text 3"^-fld^/    ] ^/]}
    sent: "2017-07-24T15:28:52.416Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597612324bcd78af56df4d92"
    text: {I noticed that there is a 2 pixel (?) offset between a text face and a button face when I would expect perfect alignment. Bug or feature?}
    sent: "2017-07-24T15:28:50.831Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597611c0c101bc4e3ab6f860"
    text: "@greggirwin  Thanks!"
    sent: "2017-07-24T15:26:56.036Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59760ccd1c8697534a55e8e2"
    text: "Thanks"
    sent: "2017-07-24T15:05:49.422Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59760cb02723db8d5e40d4b1"
    text: {then compile the console, I do it in Rebol with `do/args %red.r "-r environment/console/console.red`, but there are other ways also. That's all you need to do.}
    sent: "2017-07-24T15:05:20.845Z"
    editedAt: "2017-07-24T15:05:38.083Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59760c67bc464729741e61c9"
    text: {something like `if exists? %loader.red [do %loader.red]` should be enough}
    sent: "2017-07-24T15:04:07.347Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59760c32714ea96f7819e033"
    text: {Just add your stuff here https://github.com/red/red/blob/master/environment/console/console.red (after `#include`s), or in `%gui-console.red`, if you are on supported system.}
    sent: "2017-07-24T15:03:14.150Z"
    editedAt: "2017-07-24T15:03:25.798Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59760bc076a757f80840624a"
    text: {Thanks. So absent a compile, I need to fire up Red and then merely do %user.red? Any thoughts on something like %loader.red compiled into my own REPL, which would point to a directory / folder to load whatever is in there?}
    sent: "2017-07-24T15:01:20.370Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
)#(
    id: "59760b3e1c8697534a55e113"
    text: {@GuitarRover_twitter Red does not support something like `%user.red`, you need to compile your own REPL that will either include stuff you want, or will load such file on start. It's pretty easy to add.}
    sent: "2017-07-24T14:59:10.064Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59760ad72723db8d5e40cba4"
    text: {Hello experts. Env: Win 10. I'd like to run a script at start-up of the REPL to load a bunch of words and have the REPL stay up afterward. How is this done in Red? I know how it is done in REBOL.}
    sent: "2017-07-24T14:57:27.265Z"
    v: 1
    author: "59760a3cd73408ce4f6e8787"
) #(
    id: "59756f51329651f46eb7deb3"
    text: {You could do it with the `foreach-face` func, but that's another concept that doesn't really exist in native UIs, AFAIK.}
    sent: "2017-07-24T03:53:53.910Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597522e0714ea96f781668d1"
    text: {One more for today:  How can I set the font size for an entire window?}
    sent: "2017-07-23T22:27:44.164Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5974f4dfbc464729741a4b99"
    text: ":^^)"
    sent: "2017-07-23T19:11:27.399Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5974f4ce89aea4761dc87f73"
    text: {Thanks once again, Gregg. (Should really create a keyboard macro for thanking you!) Shifting the mental model - exactly what I needed!}
    sent: "2017-07-23T19:11:10.408Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5974f2142723db8d5e3caed5"
    text: {```^/view [^/    style dk-lbl: text silver center^/    style lbl: text right^/    style field: field 100^/    across^/    panel [^/        lbl "Birth date" field return^/        dk-lbl "Gender" drop-down data ["Male" "Female" "Other"] return^/        lbl "Fee1" field hint "0.00"^/    ]^/    panel [^/        lbl "Current age" field return^/        dk-lbl "Title" drop-down data ["Mr." "Mrs." "Ms."] return^/        lbl "Fee2" field hint "0.00"^/    ]^/    panel [^/        dk-lbl "Provider" drop-down return^/        lbl "Prov. Ref." field return^/        lbl "Fee3" field hint "0.00"^/    ]^/    panel [^/        lbl "Referred by" field 300 return^/        lbl "Physician" area 300x60^/    ]^/    ^/]^/```}
    sent: "2017-07-23T18:59:32.464Z"
    editedAt: "2017-07-23T19:06:08.225Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5974f20f329651f46eb6502d"
    text: {@kpeters58,  you could do your layout with something like this:}
    sent: "2017-07-23T18:59:27.169Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5974f014c101bc4e3ab2b43b"
    text: {```^/win: layout [^/^-across^/^-button field return^/^-button field return^/^-button field return^/]^/rows: 3^/win/actors: object [^/^-on-resizing: function [face [object!] event [event!]][^/^-^-w: face^/^-^-foreach-face/with win [face/size/x: w/size/x - face/offset/x - 10] [face/type = 'field]^/^-^-y: w/size/y / rows^/^-^-i: 0^/^-^-foreach-face win [^/^-^-^-face/size/y: y - 10^/^-^-^-face/offset/y: y * (i / 2) + 5^/^-^-^-i: i + 1^/^-^-]^/^-]^/]^/view/flags win [resize]^/```}
    sent: "2017-07-23T18:51:00.302Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5974f0111c8697534a51d00a"
    text: {You can also resize vertically, of course, which might be something you mix in for your 2-row-spanning field.}
    sent: "2017-07-23T18:50:57.354Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5974efd82723db8d5e3ca62e"
    text: {```^/win: layout [^/^-across^/^-button field return^/^-button field return^/^-button field return^/]^/win/actors: object [^/^-on-resizing: function [face [object!] event [event!]][^/^-^-w: face^/^-^-foreach-face/with win [face/size/x: w/size/x - face/offset/x - 10] [face/type = 'field]^/^-]^/]^/view/flags win [resize]^/```}
    sent: "2017-07-23T18:50:00.693Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5974ef89f5b3458e30758a9f"
    text: {For Q2, look at the `View engine` section (same blog entry). After the GUI test feature, it talks about `foreach-face`, which will let you do this kind of thing very easily.}
    sent: "2017-07-23T18:48:41.593Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5974ef2f76a757f8083c27d4"
    text: {If you look at the `VID dialect` section in the latest blog entry (Red's main page), you can see the new VID features that work towards this. However, it's not magic. For @kpeters58 question #1, there aren't 2 rows for it to span. That is, VID's alignment rules aren't governed by a global, canonical grid/table. You can certainly achieve this kind of thing, but sometimes you need to pivot your mental view.}
    sent: "2017-07-23T18:47:11.658Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5974ee0b4bcd78af56db0625"
    text: {i mean you can have horizontal layout with two panels, but then widgets inside them will not be aligned against each other}
    sent: "2017-07-23T18:42:19.415Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5974edd589aea4761dc862b6"
    text: {i also wonder if layout engine can do this kind of things}
    sent: "2017-07-23T18:41:25.132Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5974ecf3f5b3458e30757e60"
    text: {Question 2: Is there an easy  way to tell a face to assume the current width of its parent container? My goal is to have a number of group-box faces all the same width with that width being determined by the widest group-box based on the faces inside that group-box. I would prefer to do this without specifying absolutes values.}
    sent: "2017-07-23T18:37:39.032Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5974eb70714ea96f78159be1"
    text: {Question: Can a layout like above be achieved without absolute positioning (Physician area spanning 2 rows)?}
    sent: "2017-07-23T18:31:12.085Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5974eb31f5b3458e3075783b"
    text: {[![image.png](https://files.gitter.im/red/red/welcome/1SOO/thumb/image.png)](https://files.gitter.im/red/red/welcome/1SOO/image.png)}
    sent: "2017-07-23T18:30:09.140Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59742c8c614889d475df9097"
    text: "Happy to help."
    sent: "2017-07-23T04:56:44.280Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59742b3cf5b3458e307300f6"
    text: "Thanks once again!"
    sent: "2017-07-23T04:51:08.655Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59742a063230e14f3a864798"
    text: {```^/one: " uno "^/view compose/deep [^/    title "Test"^/    tp: tab-panel [^/        (one)       []^/        " two "   []^/        " three " []^/    ]    ^/]^/```}
    sent: "2017-07-23T04:45:58.940Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5973cfdd89aea4761dc4e8bf"
    text: {Red [needs: 'view]^/^/one: " uno "^/    ^/view [^/    title "Test"^/    ^/    tp: tab-panel [^/            one       []^/            " two "   []^/            " three " []^/    ]    ^/]}
    sent: "2017-07-22T22:21:17.875Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5973cfdb45fc670746b92ad9"
    text: {I have been working on localizing a few layout mockups and I can get most of it done; the exception being the sheets in a tab panel. Since something like below does not work, how does one do it?}
    sent: "2017-07-22T22:21:15.210Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5972b6a01c8697534a4aa203"
    text: "Running interpreted sometimes helps."
    sent: "2017-07-22T02:21:20.182Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5972987f329651f46eaee1c4"
    text: {Thanks Gregg - turns out I jumped to conclusions, seeing the typo. It's something else that I haven't been able to pin down yet...}
    sent: "2017-07-22T00:12:47.048Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59729796c101bc4e3aab7fbd"
    text: {The silent failure is a separate issue, and I believe is already known.}
    sent: "2017-07-22T00:08:54.637Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59729720f5b3458e306e0fea"
    text: {VID, being a dialect, doesn't compile, so it won't get caught there. However, with the new GUI test capabilities, a build tool, or even the compiler with a switch perhaps, *could* find calls to `view` and use that to vet the VID specs. }
    sent: "2017-07-22T00:06:56.781Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59729590f5b3458e306e0af8"
    text: {Compiling for WIN with 'red -t Windows -r <source file>}
    sent: "2017-07-22T00:00:16.157Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59729569c101bc4e3aab793a"
    text: {    view [^/        title t_gtitle^/    ^/        style lbl:  text right 100^/        style fldw: field 200^/        style fldm: field 80^/        stype flds: field 40 ^/        ^/    ^/        tp: tab-panel [}
    sent: "2017-07-21T23:59:37.451Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59729566614889d475daad6a"
    text: {I had the typo (stype instead of style) as show below in my code and it produced an exe that silently failed. No error during compilation at all - is that to be expected or a bug?}
    sent: "2017-07-21T23:59:34.116Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59728a7076a757f8083473d9"
    text: {it couldn't quite make an index of everything. took an hour to process all the links!}
    sent: "2017-07-21T23:12:48.447Z"
    v: 1
    author: "592b9dc3d73408ce4f62fc8f"
) #(
    id: "597289fe614889d475da89bc"
    text: {mikeparr I used chmProcessor to make a chm help file from Red By Example.}
    sent: "2017-07-21T23:10:54.071Z"
    v: 1
    author: "592b9dc3d73408ce4f62fc8f"
) #(
    id: "59725703f5b3458e306d3156"
    text: {@michaeldesu Just to say that I am still updating Red by Example - hoping to add Vid GUI stuff in a week or 2.}
    sent: "2017-07-21T19:33:23.860Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5971ffd0bc464729741064c7"
    text: {@joeerl_twitter Inscore is inspirational beauty! Thanks}
    sent: "2017-07-21T13:21:20.815Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5971e0f3329651f46eabe19f"
    text: {No, it is not. Its author is not active anymore here, so unless someone takes over, it is not a high priority right now. You might try with Wine though, should work ....}
    sent: "2017-07-21T11:09:39.485Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5971e08576a757f8083179e4"
    text: "looks like linux GUI isn't ready yet..."
    sent: "2017-07-21T11:07:49.384Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "5971d7de4bcd78af56d0623c"
    text: {@kskarthik I really recommend reading the red-by-example.org site 'cover to cover'}
    sent: "2017-07-21T10:30:54.624Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5971d7863230e14f3a7e4794"
    text: {Hello all ! I came accross redlang few days ago. Nice to be here ! I a noob to programming & want to learn red. Please link me the docs for newbies to programming in red. I saw on the site but not so easy for me :worried: Thanks !}
    sent: "2017-07-21T10:29:26.291Z"
    v: 1
    author: "5971d727d73408ce4f6e295e"
) #(
    id: "5971c50cbf7e6af22cfd45f6"
    text: {Thanks @joeerl_twitter, more reading to do. One of the things I like about Red, regarding Tuplespaces, is that it is its own data format, and with `parse`, I can match tuples any which way. I built one years ago and it works great. Keep tossing ideas out. We make notes and play as time allows.}
    sent: "2017-07-21T09:10:36.070Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5971bf083230e14f3a7dda6d"
    text: {@joeerl_twitter I have to admit, I tried Erlang + wxWidgets and the idea that each object is a separate process with a state is quite cool, helps you reason about the system and do introspection easily}
    sent: "2017-07-21T08:44:56.555Z"
    editedAt: "2017-07-21T08:45:08.534Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5971aa43c101bc4e3aa77a94"
    text: {I have two "proof of concept" challenges - ^/a) make a software simulation of the Novation Circuit^/b) make a graphic backend that can do some of Dorico^/^/Be inspired by inscore (http://inscore.sourceforge.net/)^/The inscore GUI when started does *nothing* has no menus, no title bar - I repeat *NOTHING*^/To get it to do something you send it OSC messages over UDP.^/^/The novation circuit needs sound+graphics+real-time control - so would be a suitably difficult problem to test the system. (Actually I think sound should be handled *outside* red in (say) the manner of the superconductor.^/}
    sent: "2017-07-21T07:16:19.633Z"
    editedAt: "2017-07-21T07:24:39.801Z"
    v: 3
    author: "596dde2dd73408ce4f6da67b"
) #(
    id: "5971a897614889d475d6867c"
    text: {@maximvl Great idea - I've been struggling with wxWidgets  to make GUIs - aaaagggghhh the pain. It's crazy when things like rebol/red/tcl/shoes/smalltalk make GUI programming easy (so you would think would be popular) whereas QT/wxWidgets/C++ make GUI programming insanely hard are popular.}
    sent: "2017-07-21T07:09:11.428Z"
    v: 1
    author: "596dde2dd73408ce4f6da67b"
) #(
    id: "5971a6053230e14f3a7d7297"
    text: {@greggirwin Linda tuple spaces are one of the great "forgotten" ideas :-) - Imagine a shared whiteboard with programs written in any any language manipuating the spaces.^/^/In a way this is rather like this forum - there is^/a) A way of communicating (for Forum SW)^/b) A shared language (English)^/^/We all *think* in different languages - but we communicate with a shared languages.^/^/In computer terms communication could mean TCP or UDP. The shared languages could be JSON/XML/OSC^/My personal preferences is OSC/UDP. ^/^/ }
    sent: "2017-07-21T06:58:13.712Z"
    editedAt: "2017-07-21T07:03:36.590Z"
    v: 3
    author: "596dde2dd73408ce4f6da67b"
) #(
    id: "5971977b2723db8d5e30cc21"
    text: {@kpeters58, that seems to be planned for the [next release](https://trello.com/c/eNUMIJKu/185-gui)}
    sent: "2017-07-21T05:56:11.566Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59713856bc464729740d64f1"
    text: {I just noticed that there's no tabbing between edit fields (Windows) - both the TAB & ENTER keys don't navigate. On purpose or just not yet implemented?}
    sent: "2017-07-20T23:10:14.570Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "59712cb8329651f46ea952d3"
    text: "That's a really good GUI test app."
    sent: "2017-07-20T22:20:40.165Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5971215cbc464729740d15b3"
    text: {Many many years ago I wrote Total Commander clone in Rebol, called Red Commander. Maybe I should rewrite it ;)}
    sent: "2017-07-20T21:32:12.455Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "597111aa614889d475d47e49"
    text: ":D"
    sent: "2017-07-20T20:25:14.427Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597111804bcd78af56cd745f"
    text: {Our cloud service could be called Balloon. Our sailor's weather service, Sky.  Our government system will be Tape  (not sure how far Red Tape translates). }
    sent: "2017-07-20T20:24:32.308Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59710fc9329651f46ea8df12"
    text: "And a build tool called Ant."
    sent: "2017-07-20T20:17:13.693Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "59710fb1614889d475d47699"
    text: ":^^)"
    sent: "2017-07-20T20:16:49.315Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59710e3df5b3458e3068098a"
    text: {guys guys, we should create a Red framework called `Hat`}
    sent: "2017-07-20T20:10:37.195Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "597102cf329651f46ea8a76a"
    text: {Ahh - that works. Now I seem to have an  area to grab - thanks. }
    sent: "2017-07-20T19:21:51.206Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597101e53230e14f3a7b25fd"
    text: "And don't forget Red has a `percent!` datatype."
    sent: "2017-07-20T19:17:57.166Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5971014e2723db8d5e2ec143"
    text: {Fine here on Win7. Small window with a long title. What if you set the size of the window?^/```Red^/Red [needs: 'view]^/view [^/    title "Tip Calculator"^/    size 400x400^/    below^/    f: field "9"^/    t: field ".2"^/    button "Calculate" [^/        append clear x/text (to float! f/text) * (1 + (to float! t/text))^/    ]^/    x: field "tip"^/]^/```}
    sent: "2017-07-20T19:15:26.177Z"
    editedAt: "2017-07-20T19:15:47.498Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597100a789aea4761dba9f4f"
    text: {Red [needs: 'view]^/view [^/    title "Tip Calculator"^/    below^/    f: field "9"^/    t: field ".2" ^/    button "Calculate" [^/        append clear x/text (to float! f/text) * (1 + (to float! t/text))^/    ]^/    x: field "tip"^/}
    sent: "2017-07-20T19:12:39.557Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "597100a54bcd78af56cd2c74"
    text: "Windows 10"
    sent: "2017-07-20T19:12:37.588Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5970fff1bc464729740c86f5"
    text: {@kpeters58, it should work. What OS? Can you post your code?}
    sent: "2017-07-20T19:09:37.673Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5970ffc6bc464729740c8617"
    text: "@eranws at least we're intelligent!"
    sent: "2017-07-20T19:08:54.522Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5970ffa6f5b3458e3067cb0f"
    text: {Next question: That worked well, but the program window cannot be moved. What must I do to achieve that?}
    sent: "2017-07-20T19:08:22.266Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5970ff95329651f46ea899cc"
    text: {Judging by the fast response time in Red community, I'm starting to think that they red team are actually a group of intelligent help-bots... :smile: }
    sent: "2017-07-20T19:08:05.228Z"
    v: 1
    author: "5534d15915522ed4b3df402a"
) #(
    id: "5970fd93bf7e6af22cfa6ad0"
    text: "Thanks for the super-quick answer!"
    sent: "2017-07-20T18:59:31.257Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5970fc30c101bc4e3aa5192c"
    text: "Use `-t Windows` when compiling."
    sent: "2017-07-20T18:53:36.906Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5970fc17bc464729740c7741"
    text: {I just compiled my very first RED GUI program - upon start if also fires up a console in the background. Is there a way to suppress that behavior?}
    sent: "2017-07-20T18:53:11.008Z"
    v: 1
    author: "581b8296d73408ce4f336c72"
) #(
    id: "5970722fbc4647297409d6cf"
    text: "oh, my bad, you've already bypassed Avira"
    sent: "2017-07-20T09:04:47.849Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5970712f76a757f8082b7200"
    text: {@AndruxaSazonov try to leaf through this chat :point_up: [10 мая 2017 г., 00:01](https://gitter.im/red/red?at=591211fcc89bb14b5ae7c02d)}
    sent: "2017-07-20T09:00:31.655Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59705fcd1c8697534a4108f6"
    text: {no luck. ProgramData in Windows 10 is heavily protected by OS. even with full permissions of my account I had no chance (choco didn't help also). licensed choco have option to target install directory, but this is not good. later maybe i will try to clone and build from repo. thanks anyways}
    sent: "2017-07-20T07:46:21.981Z"
    v: 1
    author: "58ec5749d73408ce4f5783c3"
) #(
    id: "597051c4c101bc4e3aa1dd38"
    text: {@AndruxaSazonov Let us know how you fixed it (you can write it as comment on the ticket). Anyway, we'll probably switch to a different folder in the next release to avoid those permission-related issues.}
    sent: "2017-07-20T06:46:28.826Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5970509e89aea4761db76596"
    text: {found issue on github, will try to repair by myself}
    sent: "2017-07-20T06:41:34.675Z"
    v: 1
    author: "58ec5749d73408ce4f5783c3"
) #(
    id: "5970500cbc46472974093848"
    text: "also with admin permissions"
    sent: "2017-07-20T06:39:08.698Z"
    v: 1
    author: "58ec5749d73408ce4f5783c3"
) #(
    id: "59704ffa1c8697534a40c2e0"
    text: {done :smile: ... but now I have error "Cannot make directory /C/ProgramData/Red even if I start through ConEmu and git bash and win cmd console}
    sent: "2017-07-20T06:38:50.433Z"
    v: 1
    author: "58ec5749d73408ce4f5783c3"
) #(
    id: "59704b19bc46472974092513"
    text: {@AndruxaSazonov You shouldn't need to, just whitelist the Red executable and crush library in Avira.}
    sent: "2017-07-20T06:18:01.987Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59704ada1c8697534a40ac9d"
    text: "thanks"
    sent: "2017-07-20T06:16:58.643Z"
    v: 1
    author: "58ec5749d73408ce4f5783c3"
) #(
    id: "59704ad72723db8d5e2b52c3"
    text: "Ok, got it. will try on other machine"
    sent: "2017-07-20T06:16:55.179Z"
    v: 1
    author: "58ec5749d73408ce4f5783c3"
) #(
    id: "597040e389aea4761db72d79"
    text: "Any other AV should be fine."
    sent: "2017-07-20T05:34:27.050Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "597040d376a757f8082a9e90"
    text: {Noted in https://gitter.im/red/red too, that Avira still hasn't addressed the false positive on this.}
    sent: "2017-07-20T05:34:11.089Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59702d7bbc4647297408bf0a"
    text: {Hello! Red idea is cool! But one question. Avira blocks somewhat crush.dll after start of compiler binary. Some suggestions maybe?}
    sent: "2017-07-20T04:11:39.112Z"
    v: 1
    author: "58ec5749d73408ce4f5783c3"
) #(
    id: "596f19784bcd78af56c4d857"
    text: {btw I used Erlang in production for ~4 years, and I had an idea to write gui from Erlang using Red}
    sent: "2017-07-19T08:34:00.761Z"
    editedAt: "2017-07-19T08:35:05.718Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596f18b31c8697534a3b9357"
    text: "oh wait, Joe in the chat O_O"
    sent: "2017-07-19T08:30:43.905Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596f188e1c8697534a3b92ca"
    text: "(one of)"
    sent: "2017-07-19T08:30:06.779Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596f18880de4d2545e40d179"
    text: "creator of Erlang"
    sent: "2017-07-19T08:30:00.973Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "596f1108c101bc4e3a9c60f0"
    text: {@geekyi finds the name Joe Armstrong strangely familiar.. }
    status: true
    sent: "2017-07-19T07:58:00.840Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "596f08810de4d2545e408ac9"
    text: "I see!"
    sent: "2017-07-19T07:21:37.969Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "596f07fc329651f46ea0075e"
    text: {@meijeru We have working on two versions in parallel since last year (currently 0.6.4 and 0.6.5). The I/O todo-list in a different card, I just copied the basic list in the 0.7.0 card. }
    sent: "2017-07-19T07:19:24.403Z"
    editedAt: "2017-07-19T07:19:47.001Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596f0486c101bc4e3a9c2c66"
    text: {@meijeru  Work will be done for two releases simultaneously. https://trello.com/c/BW1SPeOU/48-i-o-support}
    sent: "2017-07-19T07:04:38.016Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "596f03b976a757f80825326c"
    text: {> @joeerl_twitter Hi Joe, unfortunately, not yet, it's scheduled for 0.7.0 (which will start as soon as 0.6.4 is out). Currently you can only do HTTP/S.^/^/I see a `0.6.5` release planned before `0.7.0`. Moreover, I don't see TCP/UDP in the Trello planning...}
    sent: "2017-07-19T07:01:13.583Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "596e3df4f5b3458e305c0de2"
    text: {@joeerl_twitter, thanks for the link. I recently read your HOPL paper on Erlang and was reminded of how close some ideas are to tuplespaces (one of my favorite models), which I keep bugging @dockimbel about. ^/Off to read more on OSC now.}
    sent: "2017-07-18T16:57:24.094Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596e24420de4d2545e3cfb0b"
    text: {@joeerl_twitter Thanks for the interesting article. I share that line of thought too. As @pekr said, many of Red (and Rebol) users were AmigaOS users in the 80's/90's, so heavily influenced by [ARexx](https://en.wikipedia.org/wiki/ARexx). I do have plans about supporting a modernized version of that, so that Red apps could be easily remote controlled (if desired) from third-party apps. I like the minimalism of OSC, so I'm willing to make a Red implementation for it as soon as we get TCP/UDP support (later this year).}
    sent: "2017-07-18T15:07:46.309Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596e13be1c8697534a3740cc"
    text: {Red is inspired by Rebol. And Rebol got created by the AmigaOS author, Carl Sassenrath. AmigaOS offered so called Arexx ports to the apps, so that you could do lots of automatition. I expect no less from the Red ... one day :-)}
    sent: "2017-07-18T13:57:18.686Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "596e112976a757f808213eff"
    text: {@dockimbel I wrote this article http://joearms.github.io/2016/01/28/A-Badass-Way-To-Connect-Programs-Together.html explaining why I like OSC messaging - I view programs as components connected together with message passing channels - a program that cannot be remote controlled should probably not be written. It would be great to remotely control red :-)}
    sent: "2017-07-18T13:46:17.884Z"
    editedAt: "2017-07-18T13:48:46.978Z"
    v: 2
    author: "596dde2dd73408ce4f6da67b"
) #(
    id: "596de9aec101bc4e3a977077"
    text: {@joeerl_twitter I'll be sure to notify you when we'll get full networking support. ;-) Thanks for stopping by.}
    sent: "2017-07-18T10:57:50.467Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596de01abf7e6af22cec9381"
    text: {@joeerl_twitter Hi Joe, unfortunately, not yet, it's scheduled for 0.7.0 (which will start as soon as 0.6.4 is out). Currently you can only do HTTP/S.}
    sent: "2017-07-18T10:16:58.663Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596dde5289aea4761dacfb86"
    text: {Hello - can red talk to the outside world though TCP or UDP}
    sent: "2017-07-18T10:09:22.796Z"
    v: 1
    author: "596dde2dd73408ce4f6da67b"
) #(
    id: "5967ac3276a757f808095edc"
    text: {That should be very doable, even if they are just jump markers, or to subtly change the backcolor of areas. In the early versions of VB, you didn't even have an option to edit action handlers for controls in the context of the entire file. You selected the control and action from drop lists, and you viewed and edited a single action/handler at a time. }
    sent: "2017-07-13T17:21:54.888Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59673a73bf7e6af22cd3626c"
    text: {I thought again about the IDE, what do you think about marking certain areas in the script and then displaying them as separate in the IDE.^/Meaning you open a script, let's say (foo.red) and it contains certain areas like UI, Initialization... and what else. Which will then appear in form of tabs for example, like in the internet browser, but perhaps on the bottom.^/So one could have some logical separation while still having it all in one single script.^/If this is not helpful, just dismiss it. ^/PS: I never haved programmed in red, I just saw some really long scripts in rebol on the internet.^/Happy Coding!^/}
    sent: "2017-07-13T09:16:35.820Z"
    v: 1
    author: "588b3065d73408ce4f4667cd"
) #(
    id: "59668f3d4bcd78af56a3bb2f"
    text: {Thanks @greggirwin   -  I'm on holiday, will do the edit when I return.}
    sent: "2017-07-12T21:06:05.773Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "596664a076a757f80803be7f"
    text: "Yes, good catch."
    sent: "2017-07-12T18:04:16.762Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5966533d329651f46e7e27cc"
    text: {@greggirwin Not just words declared with `set`,  but any word that is not set using a set-word, e.g., words in a dialect like Parse: `copy <word> <rule>`).}
    sent: "2017-07-12T16:50:05.459Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596650d62723db8d5e0406f6"
    text: "Bah, formatting."
    sent: "2017-07-12T16:39:50.385Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5966504b76a757f8080350f2"
    text: {Something along these lines perhaps?^/```^/Function (not a complete entry here)^/^/    - /local followed by all variables that should be local to the ^/             function. See note below.^/^/    - /extern followed by all variables that should be available in^/              global scope. See note below.^/        ^/As stated above, variables assigned using `set-word!` syntax in the ^/body of a function are automatically local to the function. If `set`^/is used instead, the variable is *not* captured. The combination of^/those behaviors, and the `/local` and `/extern` refinements, let you^/specify variable locality that makes the intent clear in a variety^/of situations.^/^/`Function` with `set-word!` usage is the most common case, and will ^/be most familiar if you're coming to Red from another language. ^/^/Func^/^/Replace "In almost any case it is better to use the word function."^/with "See also: `Function`"^/```}
    sent: "2017-07-12T16:37:31.228Z"
    editedAt: "2017-07-12T16:39:21.843Z"
    v: 5
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "59665039c101bc4e3a7a9139"
    text: {@mikeparr, RBE's `func`entry has a comment that is the reverse as well. In this case, I think it's worth going into a little more detail about the difference, because functions are so common in what we do. I had a similar thought about not using `/local` with `function`, but Doc pointed out that they are entirely compatible, because `function` won't catch `set` usage.}
    sent: "2017-07-12T16:37:13.039Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59663095329651f46e7d6224"
    text: {I would recommend function over func. But I still almost always declare all local variables anyway. I think the recommendation on Red-by-Example is ok for its purpose.}
    sent: "2017-07-12T14:22:13.042Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59662bddbf7e6af22cceb486"
    text: { ^/Func vs function. Should I rewrite this extract from Red-By-Example?   -      ^/ "In almost any case it is better to use the word function than func,^/because function provides out of the box what has to be specified^/explicitly with func otherwise."}
    sent: "2017-07-12T14:02:05.498Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "59636f7abc46472974d4f9fd"
    text: {@9214 Indeed, actually `func` is the safest default, as it has no *hidden* side-effects, unlike `function`. I think an IDE could help greatly there, by showing you which words in the body block get "caught" by `function`.}
    sent: "2017-07-10T12:13:46.152Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59636e912723db8d5ef7550b"
    text: {@dockimbel :+1: for `function` avoidance, recently I've forced myself to use `func` exclusively, this helped me to better understand context construction and prevent "leaking" behavior. ^/^/Also `function` doesn't pay attention to `set` syntax, this can lead to confusion. But manually specifying local words could be cumbersome sometimes :(}
    sent: "2017-07-10T12:09:53.074Z"
    editedAt: "2017-07-10T12:10:48.346Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "596302fdf5b3458e302e49a2"
    text: {@alexdore Sorry for that, I'm too happy to be able to use unquoted dates in Red headers since a few days. ;-) You can double-quote it, or just download the latest build from the link provided by @geekyi.}
    sent: "2017-07-10T04:30:53.345Z"
    editedAt: "2017-07-10T04:31:05.516Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596302332723db8d5ef5793c"
    text: {Get latest nightly build from http://www.red-lang.org/p/download.html}
    sent: "2017-07-10T04:27:31.387Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "596301debc46472974d327d9"
    text: {@alexdore which code are you talking about? `date` was implemented recently (a few days back); so that might be one reason it's not working}
    sent: "2017-07-10T04:26:06.505Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5962e124c101bc4e3a6bb305"
    text: {@dockimbel  It is a funny behaviour since in some other examples the date does not have to be in quotes in order to work}
    sent: "2017-07-10T02:06:28.846Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "5962dcafc101bc4e3a6ba51d"
    text: {@dockimbel : Sorry to bother you, but the example code you pointed me has a typo that prevents its execution.^/*** Syntax Error: invalid integer! at "08/07/2017]generate: function [board"^/The code should be Date:^-"08/07/2017" instead of Date: 08/07/2017 in the Red header^/Regards^/^/^/}
    sent: "2017-07-10T01:47:27.562Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "5962580cbf7e6af22cbe6f40"
    text: {@iArnold no(t anymore):^/```red^/a: layout [b: panel [c: button "hi"]]^/dump-face b^/```^/^/```^/ Style: panel Offset: 10x10 Size: 82x45 Text: none^/     Style: button Offset: 10x9 Size: 62x25 Text: "hi"^/== make object! [^/    type: 'panel^/    offset: 10x10^/...^/```}
    sent: "2017-07-09T16:21:32.494Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5961e96f2723db8d5ef1b64f"
    text: {because I probably know the answer already, and currently I am not on a supported system to test it out. I hope the dump will be restricted in some way to limit the almost endless output one has to `face` otherwise.}
    sent: "2017-07-09T08:29:35.372Z"
    editedAt: "2017-07-09T08:30:01.418Z"
    v: 3
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59616a7f89aea4761d7be88a"
    text: "Why not try it and see?"
    sent: "2017-07-08T23:27:59.057Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59612999c101bc4e3a65fb61"
    text: {Does `dump-face` still also dump the parent (face)?}
    sent: "2017-07-08T18:51:05.227Z"
    editedAt: "2017-07-08T18:51:22.981Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59610389329651f46e68b362"
    text: "@alexdore, welcome, and Happy Reducing!"
    sent: "2017-07-08T16:08:41.125Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5961035c3230e14f3a3b2142"
    text: {I agree that `function` can be a double-edged sword. And there's a place for generating VID or View code dynamically. ^/@pekr, we already have it in the spreadsheet example, but it doesn't scale very far. Generating sub-panes, ala R2's `list` style, can go a long way though. Other things ahead of the "virtual pane" on my task list though, especially now that we have `date!`.}
    sent: "2017-07-08T16:07:56.945Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5960c5514bcd78af568c2256"
    text: "@alexdore :+1: "
    sent: "2017-07-08T11:43:13.380Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5960c25cbc46472974cb4d07"
    text: {Thank you guys ! Never thought I would find such a nice bunch of people here. Lots of food to think about here. Regards.}
    sent: "2017-07-08T11:30:36.271Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "596081c2bf7e6af22cb85316"
    text: {Maybe we've just got first example of how we could bring in a grid widget to Red :-)}
    sent: "2017-07-08T06:54:58.372Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "596080e1329651f46e66eef2"
    text: {Just a remark about the code in that demo: beware of what you put in an object body block when defining it inside a function using `function` constructor, as it will gather *all* set-words, even the one inside the block you want to use as body for the object. If you don't pay attention to it, it will result in apparently odd errors. So in such cases, using `func` and manually defining the local words list, is the safe thing to do. @greggirwin One of the big drawback of the auto-gathering of set-words approach. I think that we maybe should avoid teaching `function` to beginners.}
    sent: "2017-07-08T06:51:13.556Z"
    editedAt: "2017-07-08T06:52:35.491Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59607fd13230e14f3a3955a2"
    text: {BTW, in purely dynamic GUI, you can also just drop VID, create face objects directly and assemble them into a tree. In some cases, it can result in simpler or more intuitive code. [Here](https://gist.github.com/dockimbel/a6ad059854e8059147d23e5033b490d6) is an example.}
    sent: "2017-07-08T06:46:41.545Z"
    editedAt: "2017-07-08T06:47:31.632Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59607f851c8697534a019e9f"
    text: {@geekyi keeps forgetting about `dump-face`, thanks!}
    status: true
    sent: "2017-07-08T06:45:25.501Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59607c0176a757f808ebd7ad"
    text: {@alexdore @geekyi `dump-face` is also a helpful function to know for checking your generated face tree.}
    sent: "2017-07-08T06:30:25.308Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "596069aa2723db8d5eecbcef"
    text: {`Compose` isn't actually required here, but I sometimes sneak in teasers. :^^)}
    sent: "2017-07-08T05:12:10.916Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5960481889aea4761d7802b2"
    text: {@alexdore If you haven't figured it out already, the key in @greggirwin's code is `compose`. It helps you compose stuff :p especially code in dialects.^/You can also go down an abstraction layer and see what happens internally, if you replace `view` with `layout`. That produces the `object!` representation of the view dialect}
    sent: "2017-07-08T02:48:56.146Z"
    editedAt: "2017-07-08T02:49:43.687Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "596046ffbf7e6af22cb7a925"
    text: {@alexdore just wanted to mention for the future, we have https://gitter.im/red/red/code for discussing about code in that repo}
    sent: "2017-07-08T02:44:15.322Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59602863f5b3458e3024c01f"
    text: {Since you're already diving into dynamic GUIs, I'm guessing you'll figure out how that works pretty quick. `Probe` `board` to see the generated layout block.}
    sent: "2017-07-08T00:33:39.249Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596027f12723db8d5eec03f0"
    text: {```^/; Defaults^/board-size: 4^/button-size: 60x60^/; TBD: set button size^/view [^/    text "Board Size:"  f-board-size:  field data (form board-size)  return^/    ;text "Button Size:" f-button-size: field data (form button-size) return^/    button "Go!" [^/        board-size:  to integer! f-board-size/data^/        ;button-size: to pair!    f-button-size/data^/        unview^/    ]^/]^/; Start with the static prologue of your layout^/; TBD: fix up hard-coded delta check^/board: compose [^/^-title "Tile game"^/^-style tile: button (button-size) font-size 12 bold [^/^-^-delta: absolute face/offset - empty/offset^/^-^-if delta/x + delta/y > 90 [exit]^/^-^-pos: face/offset face/offset: empty/offset empty/offset: pos^/^-]^/]^/; Add the dynamic buttons^/repeat n subtract round (board-size ** 2) 1 [^/    repend board ['tile form n]^/    if zero? n // board-size [append board 'return]^/]^/; Add the static epilogue^/append board [empty: tile ""]^/; See if it worked^/view/tight board^/```}
    sent: "2017-07-08T00:31:45.540Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "596026341c8697534a00957d"
    text: {@alexdore, as @dander said, it's not hard, if you think of your layout as data. }
    sent: "2017-07-08T00:24:20.216Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59601c9ff5b3458e30249d09"
    text: {I haven't had much experience with view yet, but I'm sure someone else will chime in about how to do it}
    sent: "2017-07-07T23:43:27.024Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59601b684bcd78af568a1b01"
    text: {OK, let met explain a little bit better. Before the start of the game, I want the player to specify how many buttons he wants to play with. This means that I do not know the number of buttons in advanced. But, as soon as he specifies the number of buttons, I should be able to generate the appropriate number of buttons in each row of the game. This has to be done on the spot not in advanced. I tried with : loop n [loop n [  generate buttons and return if appropriate ]], ... but it does not work. Sigh.}
    sent: "2017-07-07T23:38:16.625Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "5960192076a757f808eab372"
    text: {'''''^/^-style piece: button 100x100 font-size 12 bold [^/^-^-delta: absolute face/offset - empty/offset^/^-^-if delta/x + delta/y > 90 [exit]^/^-^-pos: face/offset face/offset: empty/offset empty/offset: pos^/^-]^/''''''^/Great, the code in the link you gave me is nice. "Rudolf W. MEIJER (meijeru)", the author and I found the same approach to determine if a button can or cannot be moved. However, Mr Meijer way to do it breaks if the size of the tile is more than 90. My approach works with any size button. Thank you Mr Andersen.}
    sent: "2017-07-07T23:28:32.354Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "596018414bcd78af568a10e6"
    text: "''''''"
    sent: "2017-07-07T23:24:49.361Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "5960166789aea4761d7776ad"
    text: {on a side note, I think this version of that demo might be working a bit better: https://github.com/red/code/blob/master/Showcase/tile-game.red}
    sent: "2017-07-07T23:16:55.706Z"
    editedAt: "2017-07-07T23:23:49.166Z"
    v: 2
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5960145ac101bc4e3a626404"
    text: {```Red^/>> append [title "title" other stuff] [button "one" button "two"]^/== [title "title" other stuff button "one" button "two"]^/```}
    sent: "2017-07-07T23:08:10.930Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59601443bf7e6af22cb7150b"
    text: {Hi @alexdore , welcome! I'm not an expert at programmatically generating View code, but the argument to `view` is just a block, so you could construct the part at the end with all the buttons, and append it to the rest.}
    sent: "2017-07-07T23:07:47.847Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59601168c101bc4e3a625976"
    text: {```^/Red [^/    Title: "Tile Game"^/    Needs: 'View^/]^/^/b: 50^/c: make pair! b ;; size of each button^/d: 3 ;; number of button per side ex 3 for 8 buttons and 1 empty box^/view [^/    title "Tile Game"^/    backdrop silver^/    style t: button c [^/        btn: face/offset ;; axb of clicked button ex 10x120^/        btn-empt: absolute (face/offset - e/offset) ;; scalar difference ex 0x60^/         if (btn-empt/1 + btn-empt/2) == (b + 10) [ ;; if 60 == b + 10 then btn can move^/            face/offset: e/offset^/            e/offset: btn^/        ]^/    ]^/    t "15"  t "14"  t "13"  t "12" return^/    t "11"  t "10"  t "9"  t "8" return^/    t "7" t "6"  t "5"  t "4" return^/    t "3"  t "2" t "1" e: base c silver^/]^/```^/}
    sent: "2017-07-07T22:55:36.157Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "5960109089aea4761d776301"
    text: {Now, what I would like to do is ask the player to choose not only the size of the button but also the number of buttons (3 by 3, 4 by 4 or 5 by 5). So I need to generate pragrammatically the buttons. I could not find any documentation or examples on this. Does anybody has an idea how to proceed ? Regards}
    sent: "2017-07-07T22:52:00.301Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "59600fe86ae41d5d33c8d658"
    text: {Absolute Newbie. I am trying to improve on the demo called Tile Gaming. It is nice but I found a major problem which is: clicking on any button will make the button position switch with the empty space in the game. This is not correct. Only button near the empty space can move. Any way, I manage to correct the problem in 3 lines of code : Red [^/    Title: "Tile Game"^/    Needs: 'View^/]^/^/b: 50^/c: make pair! b ;; size of each button^/d: 3 ;; number of button per side ex 3 for 8 buttons and 1 empty box^/view [^/    title "Tile Game"^/    backdrop silver^/    style t: button c [^/        btn: face/offset ;; axb of clicked button ex 10x120^/        btn-empt: absolute (face/offset - e/offset) ;; scalar difference ex 0x60^/         if (btn-empt/1 + btn-empt/2) == (b + 10) [ ;; if 60 == b + 10 then btn can move^/            face/offset: e/offset^/            e/offset: btn^/        ]^/    ]^/^/^/^/    t "15"  t "14"  t "13"  t "12" return^/    t "11"  t "10"  t "9"  t "8" return^/    t "7" t "6"  t "5"  t "4" return^/    t "3"  t "2" t "1" e: base c silver^/]}
    sent: "2017-07-07T22:49:12.459Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "59600f052723db8d5eebb443"
    text: "Hello you all,"
    sent: "2017-07-07T22:45:25.153Z"
    v: 1
    author: "582771b2d73408ce4f3568bd"
) #(
    id: "5960058b1c8697534a00283d"
    text: {What could be wrong?  `print ["init" tb-init]` doesn't print anything either.}
    sent: "2017-07-07T22:04:59.180Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "5960045b76a757f808ea6976"
    text: {The code compiles and runs with no error but it doesn't seem to work.}
    sent: "2017-07-07T21:59:55.546Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "596003ecc101bc4e3a622d67"
    text: {The `tb_init` function should return a integer but when I want to print it it doesn't do anything.}
    sent: "2017-07-07T21:58:04.226Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "596003bdf5b3458e302442da"
    text: {```^/#import [^/  "libtermbox.so.1" cdecl [^/    tb-init: "tb_init" [^/      return: [integer!]^/    ]^/    tb-shutdown: "tb_shutdown" [^/      return: [integer!]^/    ]^/  ]^/]^/^/print tb-init^/tb-shutdown^/```}
    sent: "2017-07-07T21:57:17.820Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "596003a16ae41d5d33c8acdb"
    text: {I'm trying to do a https://github.com/nsf/termbox/ wrapper with `Red/System` and got a question. }
    sent: "2017-07-07T21:56:49.570Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595ffdc576a757f808ea51a3"
    text: {And I have a bit of a beard at the moment, so I can look more like @toomasv. I think that's where his `parse` powers come from.}
    sent: "2017-07-07T21:31:49.704Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595fe706f5b3458e3023cb65"
    text: {I was pleasantly surprised to have pretty similar workflow with &dockimbel and &greggirwin :smile: }
    sent: "2017-07-07T19:54:46.961Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "595fe51ef5b3458e3023c30c"
    text: {I mostly never need to assist just to anyone having modern Windows machine, apart from users errors not having anything in common with Windows. Apart from that, I find Win10 being a solid OS. But your milleage might vary :-)}
    sent: "2017-07-07T19:46:38.193Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "595fe41e0de4d2545e04ea8f"
    text: {I have different experience. Windows frustrate me, I have macOS on desktop and Linux on notebook (having macOS on both would be great, but Apple tax is very prohibitive) and it's much better experience than Windows. I've also installed Linux on my parents computer and now I need to assist them just maybe once in a month (and that's usually some Skype problem), not 2-3 times a week, like with Windows :)}
    sent: "2017-07-07T19:42:22.712Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "595fc940c101bc4e3a61303f"
    text: {It sounds like Doc and I work very much the same. Maybe why we get along so well. :^^) If there were great improvements in new OSs, that would be nice, but sadly... Being comfortable, and knowing your tools and environment is probably the biggest productivity booster there is, but it's hard to make money from that, so we're smothered in anecdotes and methodologies. }
    sent: "2017-07-07T17:47:44.743Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "595fc68c89aea4761d764244"
    text: {:point_up: [July 6, 2017 11:19 PM](https://gitter.im/red/red/welcome?at=595f19eb2723db8d5ee759ea) @toomasv, yes, of course. Thanks for catching that.}
    sent: "2017-07-07T17:36:12.411Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595fb2f14bcd78af56884b18"
    text: "@dockimbel great thanks!"
    sent: "2017-07-07T16:12:33.072Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595fac7a329651f46e63f9b3"
    text: {@kingburrito666 Macros are functions that can modify your source code before it is interpreted or compiled (preprocessing stage).}
    sent: "2017-07-07T15:44:58.806Z"
    editedAt: "2017-07-07T15:45:04.119Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595fac07c101bc4e3a60a2da"
    text: {@mydoghasworms That's not my experience on Windows, here all my tools just start immediatly (I have a very fast desktop computer), except for VisualStudio and VSCode. ;-) That said, I'm not fan of Windows either, it's just the less annoying one to me among the main operating systems.}
    sent: "2017-07-07T15:43:03.863Z"
    editedAt: "2017-07-07T15:51:49.838Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595fa1ad89aea4761d75845b"
    text: {A little confused on the difference between a Macro and a Function?\\}
    sent: "2017-07-07T14:58:53.882Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595fa1a34bcd78af5687e4a6"
    text: {@dockimbel Linux distributions have certainly come a long way and, although I hear your point about the need for a distraction-free OS environment in which to program, the one gripe I have with Windows compare to Linux is that, due to (presumably) bloat in Windows, some functions like compiling programs takes orders of magnitude longer. On Linux my IRB shell starts instantly; on any of the 3 Windows installations to which I have access, it takes 2-4 seconds. The same can be said for starting up any programs and any long-running tasks; for whatever reason, Windows is always much slower; everything just performs poorly.^/I realize I will not convince you to switch, but hopefully someone else reading this message ;-)}
    sent: "2017-07-07T14:58:43.099Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "595f9c94329651f46e63a096"
    text: {> Clearly we need to accept our different opinions. I feel it is unfortunate that you are trying to divert people from contr^/^/I think that is meant as contributing to the official repo. I am not. I am creating an opportunity that gets more contributers in and help out to the level of their abilities. If some skilled ppl come in that are able to help out on the official project I am the first to point to the main branch.}
    sent: "2017-07-07T14:37:08.351Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595f9b23329651f46e639993"
    text: "Use the -o option"
    sent: "2017-07-07T14:30:59.548Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595f99f11c8697534afe4115"
    text: {Does anyone know how to change the compiler output path?}
    sent: "2017-07-07T14:25:53.784Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f97a36ae41d5d33c6bd8e"
    text: {Clearly we need to accept our different opinions. I feel it is unfortunate that you are trying to divert people from contr}
    sent: "2017-07-07T14:16:03.263Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595f9471c101bc4e3a602a38"
    text: {@PeterWAWood ^/> Isn't the best way to develop an acceptable GTK backend to make sure the code is acceptable each step of the way?^/^/In an ideal world perhaps yes, but it not given to all to get up to that level. We are not all QTXies.}
    sent: "2017-07-07T14:02:25.131Z"
    editedAt: "2017-07-07T14:03:43.872Z"
    v: 3
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595f941c2723db8d5ee98f6a"
    text: {@PeterWAWood Well that code could have improvement on improvement getting it more in line and from what is achieved parts can be cherry picked and offered in a version that is acceptable to be included in the official Red repo. In the mean time those interested in Red and using the GTK on their Linuxes have something to stick to Red and not dismissing it for lack of Linux support (and do not want to use Wine).}
    sent: "2017-07-07T14:01:00.383Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595f8f2d329651f46e6355ab"
    text: {Isn't the best way to develop an acceptable GTK backend to make sure the code is acceptable each step of the way?}
    sent: "2017-07-07T13:39:57.978Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595f8ec2f5b3458e302218f5"
    text: {@Arnold I'm afraid I don't see the benefit of developing a GTK backend that is not going to be accepted into Red to the people who want Red to have a GTK backend.}
    sent: "2017-07-07T13:38:10.336Z"
    editedAt: "2017-07-07T13:40:20.431Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595f8d9abf7e6af22cb4c114"
    text: {@Pekr Exactly you can experiment locally, there is no need to use a third party repository.^/}
    sent: "2017-07-07T13:33:14.388Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595f8ca91c8697534afdf982"
    text: {Yes their efforts would also be heavily restricted by the code requirements. In a fork there is more room for experimental/imperfect code.}
    sent: "2017-07-07T13:29:13.975Z"
    editedAt: "2017-07-07T13:30:02.059Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595f8c5d76a757f808e82ab5"
    text: {Well, it depends upon how much one wants to experiment :-) E.g. I am 100% sure that quality of my code is not acceptable for an official branch. But I don't need to even fork, I can download and experiment locally ... (not fluent with Git, merging stuff, PRs, etc.)}
    sent: "2017-07-07T13:27:57.610Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "595f8b6b1c8697534afdf2d4"
    text: {I just can't see the benefit in developing a GTK backend on a forked repository when people could actively contribute to Red by working on the GTK branch. }
    sent: "2017-07-07T13:23:55.724Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595f862976a757f808e80ce2"
    text: {There was no problem accepting PRs submitted by Zamlox on the GTK branch.}
    sent: "2017-07-07T13:01:29.863Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595f8341329651f46e631983"
    text: "And who will facilitate the commits and PR's?"
    sent: "2017-07-07T12:49:05.385Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595f81033230e14f3a357d7f"
    text: {Having people working on the GTK branch will not get in the way of the Red team. That is the whole point of having a separate branch. }
    sent: "2017-07-07T12:39:31.054Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "595f7ca50de4d2545e02f5be"
    text: {(I do need to update them with the new date! functionality though)}
    sent: "2017-07-07T12:20:53.301Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595f7c7876a757f808e7dcf0"
    text: {@kingburrito666 @mydoghasworms  I have a couple of repo's forked from the Red repo ideal for sharing code between developers wanting to have a common goal like expanding on the GTK branch. Using those makes sure that that development does not get in the way for the FS team.}
    sent: "2017-07-07T12:20:08.834Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595f71a26ae41d5d33c600df"
    text: {@mydoghasworms My memory being pretty average, I prefer my mind to be filled with code, architectures and algorithms, rather than man pages. ;-) I used to have several Linux boxes a long time ago (back to Slackware 2.0 days) and recompiling kernels and dealing with conflicting/broken archives (.tgz) was where my time was spent on instead of coding. Even now on Ubuntu 16.04, I can waste quite some time dealing with missing/conflicting dependencies in apps/packages. I really like the total freedom you get from an open source OS and the Linux ecosystem, but I can't afford the time for it. Coding is where I want to spend my time and energy. ;-)}
    sent: "2017-07-07T11:33:54.089Z"
    editedAt: "2017-07-07T11:34:51.501Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f66d70de4d2545e028c8c"
    text: "It's almost 4 am so Im lights out"
    sent: "2017-07-07T10:47:51.664Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f66b1c101bc4e3a5f4821"
    text: {I agree @dockimbel It's so much easier now when you know what you're doing}
    sent: "2017-07-07T10:47:13.306Z"
    editedAt: "2017-07-07T10:47:29.201Z"
    v: 2
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f668ebf7e6af22cb3fac2"
    text: {@dockimbel I will grant you that Linux users do spend more time on administration (though maybe because we enjoy it :-P ) but as far as UI/UX goes, I think it depends on what you are used to. I found that after a while on Linux, I was more productive once I had learned the shortcuts and doing things on the command line (like installing software) was more efficient.}
    sent: "2017-07-07T10:46:38.319Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "595f651e6ae41d5d33c5c092"
    text: "@kingburrito666 ~~apps~~ games! ;-)"
    sent: "2017-07-07T10:40:30.425Z"
    editedAt: "2017-07-07T10:40:35.650Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f64f2f5b3458e302154f9"
    text: "Windows I just use for apps"
    sent: "2017-07-07T10:39:46.814Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f64e42723db8d5ee89f3f"
    text: "Mint terminal "
    sent: "2017-07-07T10:39:32.364Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f64db4bcd78af5686ace0"
    text: "No I love ubuntu themes"
    sent: "2017-07-07T10:39:23.182Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f64d089aea4761d745589"
    text: "@geekyi thanks `-o` worked"
    sent: "2017-07-07T10:39:12.348Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f64b1f5b3458e302153ed"
    text: {@kingburrito666 Can't choose between Ubuntu and Mint?}
    sent: "2017-07-07T10:38:41.520Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f648676a757f808e7707d"
    text: "@geekyi Good overview. :+1: "
    sent: "2017-07-07T10:37:58.558Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f647f1c8697534afd3865"
    text: {I tri boot windows 8 and ubuntu 16.04 and Mint. Gotta have the best of all worlds}
    sent: "2017-07-07T10:37:51.633Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f642289aea4761d744eec"
    text: {@mydoghasworms I reboot my Win box once every few months only, when I decide to apply some OS updates, otherwise I just hibernate it daily, with all my dozens of windows and apps there opened for weeks/months. ;-)}
    sent: "2017-07-07T10:36:18.957Z"
    editedAt: "2017-07-07T10:36:47.830Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f63d889aea4761d744daf"
    text: {@kingburrito666 don't think it matters. `red -h` for all options}
    sent: "2017-07-07T10:35:04.959Z"
    editedAt: "2017-07-07T10:36:08.176Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "595f63d34bcd78af5686a7a6"
    text: "or is it ambiguous ^/"
    sent: "2017-07-07T10:34:59.736Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f63bd1c8697534afd3616"
    text: "before or after -t"
    sent: "2017-07-07T10:34:37.332Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f63b2c101bc4e3a5f3c75"
    text: "Thanks'"
    sent: "2017-07-07T10:34:26.460Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f63aec101bc4e3a5f3c71"
    text: "@kingburrito666 `-o`"
    sent: "2017-07-07T10:34:22.808Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "595f639e6ae41d5d33c5b710"
    text: "I put them all in a bash file"
    sent: "2017-07-07T10:34:06.523Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f6390f5b3458e30214e43"
    text: {Is there an option for compiling with a different filename? My OSX executable wrote over my linux one because they had the same name}
    sent: "2017-07-07T10:33:52.951Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f638589aea4761d744c80"
    text: {@kingburrito666 ^/> So gtk branch has some support?^/^/[Current implementation (gtk branch)](https://github.com/red/red/compare/GTK). Looking at [`modules/view/backends`](https://github.com/red/red/tree/master/modules/view/backends) gives you an idea of what you need to implement. `test`folder gives you a nice overview of the api^/Anything I've missed @dockimbel ?}
    sent: "2017-07-07T10:33:41.434Z"
    editedAt: "2017-07-07T10:34:00.598Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "595f63270de4d2545e027640"
    text: {Well, I must admit Microsoft are very thoughtful: Once in a while they force you to take a complete break by running updates. Us poor Linux users can never get a break :smiley_cat: }
    sent: "2017-07-07T10:32:07.268Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "595f62e76ae41d5d33c5b48b"
    text: "@kingburrito666 :+1: "
    sent: "2017-07-07T10:31:03.069Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f62d0c101bc4e3a5f3979"
    text: {Thanks for the help, just got it to launch with wine}
    sent: "2017-07-07T10:30:40.701Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f6280329651f46e627ea8"
    text: {@mydoghasworms The best OS for me is the one which disappears entirely, so I can focus on my work and not spend time administrating the OS in any way. ;-) I don't like any of the modern OSes wrt UX, Windows is the one which gets the less in my way so far, so I'm sticking with it for now. BTW, I don't use CLI for work (everything I do is either in my code editor or in the Red/Rebol GUI console), so I don't miss a good shell on Windows.}
    sent: "2017-07-07T10:29:20.220Z"
    editedAt: "2017-07-07T10:30:49.913Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f61ca1c8697534afd2d4a"
    text: {@dockimbel Time to switch to Deepin Linux! :-D (Or Kylin)}
    sent: "2017-07-07T10:26:18.379Z"
    editedAt: "2017-07-07T10:26:55.851Z"
    v: 2
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "595f61a1bf7e6af22cb3e54d"
    text: {@kingburrito666 If I had the choice, I would work exclusively on Linux, but for work I am forced to use Windows :-(}
    sent: "2017-07-07T10:25:37.721Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
)#(
    id: "595f613a329651f46e62744b"
    text: "Ubuntu is baby though"
    sent: "2017-07-07T10:23:54.790Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f611876a757f808e75bac"
    text: {@mydoghasworms Hmm..<cough>Win7<cough>. ;-) Using a basic code editor (just syntax coloring).}
    sent: "2017-07-07T10:23:20.739Z"
    editedAt: "2017-07-07T10:24:22.775Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f60f50de4d2545e026e52"
    text: {No timeframe until we find someone to work on it. Though, we should be presenting Red at the GNOME global conf in China on October, so I hope we can find someone motivated and skilled enough there to work on it.}
    sent: "2017-07-07T10:22:45.235Z"
    editedAt: "2017-07-07T10:25:00.238Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f60cc3230e14f3a34dd05"
    text: {@dockimbel On what platform do you develop, out of interest?}
    sent: "2017-07-07T10:22:04.781Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "595f60b489aea4761d743acb"
    text: {@dockimbel What is the timeframe for full support? How long you think?}
    sent: "2017-07-07T10:21:40.045Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f607589aea4761d7439a3"
    text: {Very limited, IIRC, button, text, field, a bit of Draw (our vector 2D dialect), like lines and pen colors. We are searching for someone skilled enough to take over that GTK backend and complete it (though, that's not for the faint-hearted).}
    sent: "2017-07-07T10:20:37.691Z"
    editedAt: "2017-07-07T10:21:46.287Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f60404bcd78af56869224"
    text: "So gtk branch has some support?"
    sent: "2017-07-07T10:19:44.623Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f6027c101bc4e3a5f2e9e"
    text: "gosh darn"
    sent: "2017-07-07T10:19:19.707Z"
    v: 1
    author: "57e0492640f3a6eec0661f88"
) #(
    id: "595f5fe82723db8d5ee8887e"
    text: {@kingburrito666 Use triple backticks for code snippets. No direct GUI support on Linux yet (just a prototype for GTK3, in the `gtk` branch), though our GUI system works fine on Wine.}
    sent: "2017-07-07T10:18:16.039Z"
    editedAt: "2017-07-07T10:19:09.043Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "595f5f9a76a757f808e753d1"
    text: {@kingburrito666 Are you on Linux or some other platform besides Windows or Mac?}
    sent: "2017-07-07T10:16:58.096Z"
    editedAt: "2017-07-07T10:17:34.794Z"
    v: 2
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "595f19eb2723db8d5ee759ea"
    text: {@greggirwin Shouldn't it be `concat-x` \ `concat-xx` on fourth line then?}
    sent: "2017-07-07T05:19:39.361Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "595efa6689aea4761d72a65e"
    text: {Pass 2: ^/```^/concat-xx: function [b] [^/    rejoin collect [^/        foreach el b [^/            keep either string? el [el][concat el]^/        ]^/    ]^/]^/```^/`Collect` is a handy function, which can replace allocating the block and the `append` call. `Keep` is the magic word there, inside `collect` bodies.}
    sent: "2017-07-07T03:05:10.054Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595efa031c8697534afb872e"
    text: {Here was my first pass:^/```^/concat-x: function [b] [^/    a: copy []^/    foreach el b [^/        append a either string? el [el][concat el]^/    ]^/    rejoin a^/]^/```^/Note that `either` is an expression, and returns a value you can use directly.  That leads to removing the paren, since the `concat el` call is now clearly bracketed. And you can omit the last `return` because the last expression is returned automatically.}
    sent: "2017-07-07T03:03:31.631Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595ef98abf7e6af22cb22b73"
    text: {Good stuff @rokf! In case you aren't familiar with the Redbol optimizer, it works like this: You post a nice piece of code, and it inspires someone to tweak it. That, in turn, may lead to more tweaks. Distributed refactoring at its best. :^^) }
    sent: "2017-07-07T03:01:30.712Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595e0639329651f46e5c69c6"
    text: {@geekyi Great! Added links to the Howl website and my bundle for Red}
    sent: "2017-07-06T09:43:21.963Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595dfc616ae41d5d33bf576c"
    text: {I started a wiki page for [editors with red support](https://github.com/red/red/wiki/Editor-Integrations) feel free to add to it!}
    sent: "2017-07-06T09:01:21.764Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "595df9d53230e14f3a2e9fa6"
    text: "@9214 thanks"
    sent: "2017-07-06T08:50:28.999Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "595df9be4bcd78af56802fe0"
    text: "@geekyi [Howl](https://howl.io/) I believe"
    sent: "2017-07-06T08:50:06.108Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595df987c101bc4e3a58f602"
    text: {@rokf which editor are you using? I remember thinking it was interesting.. but I don't know how to search in gitter}
    sent: "2017-07-06T08:49:11.963Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "595ded7bc101bc4e3a58c4f8"
    text: {@rokf be aware that Red doesn't support tail-call optimisation yet, you can blow up the stack with deeply nested blocks (`concat` recursive call)}
    sent: "2017-07-06T07:57:47.886Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595de89889aea4761d6db868"
    text: "This works :sparkles: "
    sent: "2017-07-06T07:36:56.391Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595de87c2723db8d5ee1fb98"
    text: {```^/concat: function [b] [^/  a: copy []^/  foreach el b [^/    either string? el [^/      append a el^/    ] [^/      append a (concat el)^/    ]^/  ]^/  return rejoin a^/]^/```}
    sent: "2017-07-06T07:36:28.450Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595de6076ae41d5d33bef311"
    text: {There is one less space produced using your method tho :smile: (compared to `rejoin`).}
    sent: "2017-07-06T07:25:59.694Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595de5331c8697534af69dd5"
    text: {@toomasv Still leaves spaces on a real example. This is a nested block that I get from my HTML parse dialect:^/`["<html>" ["<body>" ["<h1>" ["Heading"] "</h1>" "<p>" ["Content"] "</p>"] "</body>"] "</html>"]`}
    sent: "2017-07-06T07:22:27.167Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595dd9973230e14f3a2e0e35"
    text: {@rokf May be something like this?^/```^/>> str: clear "" parse ['a ['b 1 2 3] 'c 'd] [collect into str any [keep skip]]^/== true^/>> str^/== "ab123cd"^/```}
    sent: "2017-07-06T06:32:55.381Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "595d9ac14bcd78af567eb9a2"
    text: {:point_up: [July 5, 2017 2:15 PM](https://gitter.im/red/red/welcome?at=595d48c90de4d2545ef94f77) @rokf, you can use `source` on `rejoin` to see how it works. There's no `/deep` refinement, that is, it's not designed for nested structures, but you could hack the current one to do that. }
    sent: "2017-07-06T02:04:49.084Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d526d76a757f808de5d54"
    text: {If code is data, how can it be consistent? I know Ruby have mutable objects, but this is just... wow}
    sent: "2017-07-05T20:56:13.415Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "595d51dec101bc4e3a567f26"
    text: {@iArnold cutting through Another quarter of Haskell}
    sent: "2017-07-05T20:53:50.456Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "595d51556ae41d5d33bcc17d"
    text: {Agreed! What is wrong with the brackets? ^/I know what is wrong with Java LoL!^/I tried to teach the code is data concept:^/```^/say-hello: [print reverse "Hello"]^/probe say-hello^/do say-hello^/probe say-hello^/```^/And show that "Hello" in the code itself is reversed time after time. That is a hard concept to grasp.}
    sent: "2017-07-05T20:51:33.991Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595d503bf5b3458e30187abd"
    text: {@iArnold We should make a better children's book with Red, but the brackets... Java... :anguished: }
    sent: "2017-07-05T20:46:51.321Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "595d50126ae41d5d33bcbbc0"
    text: "Perhaps BASIC like we did in the old days ;-)"
    sent: "2017-07-05T20:46:10.103Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595d4fffbf7e6af22caad251"
    text: {I don't think kids should start programming schooling with monads, closures.}
    sent: "2017-07-05T20:45:51.946Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595d4e9e2723db8d5edfb3a4"
    text: {I came till the atoms. I think for kids the stuff gets too theoretical and there is way too little practice and missing on lots of basic computer cpu chip working things that can keep them interested.}
    sent: "2017-07-05T20:39:58.731Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595d4d5789aea4761d6b748f"
    text: {Also, the "Learn you some X for Great Good" is a perfect format for children's textbooks (I recognize the format, which is used everywhere for Y1-6 and maybe Y7-9 students)}
    sent: "2017-07-05T20:34:31.642Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "595d4cfe76a757f808de44c4"
    text: "@iArnold what are atoms, monads and monoids?"
    sent: "2017-07-05T20:33:02.221Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "595d4c24f5b3458e30186618"
    text: {@9214  Hmm, looks like its too aggressive for my case (cleaning up spaces from rendered html tags). I'll put something together with `replace`. Thanks tho!}
    sent: "2017-07-05T20:29:24.444Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595d4b984bcd78af567d7254"
    text: {@DonaldTsang  Learnyousomeerlang is also doable until about 1/4th and then we spoiled brats want to return to Red or Rebol ;-)}
    sent: "2017-07-05T20:27:04.011Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "595d4a6389aea4761d6b6364"
    text: "@9214 Hey"
    sent: "2017-07-05T20:21:55.022Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "595d4a4e329651f46e5982ca"
    text: "Make it 1/4th"
    sent: "2017-07-05T20:21:34.990Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "595d4a30f5b3458e3018582d"
    text: {Planning to relearn Red after reading 1/5th of "Learn Haskell for Great Good". A Red children's book would be great}
    sent: "2017-07-05T20:21:04.560Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "595d4a0489aea4761d6b60fa"
    text: "Hey there  @DonaldTsang "
    sent: "2017-07-05T20:20:20.419Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d49ef0de4d2545ef954dc"
    text: "Hi!"
    sent: "2017-07-05T20:19:59.508Z"
    v: 1
    author: "55df50f60fc9f982beaecef6"
) #(
    id: "595d49bc329651f46e5980ca"
    text: {```^/>> trim/all form ['a ['b 1 2 3] 'c 'd]^/== "ab123cd"^/```}
    sent: "2017-07-05T20:19:08.855Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d499276a757f808de32e6"
    text: "@9214  yup"
    sent: "2017-07-05T20:18:26.472Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595d4982329651f46e598011"
    text: {@rokf you want `"ab123cd"`?}
    sent: "2017-07-05T20:18:10.963Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d48c90de4d2545ef94f77"
    text: {Why does `rejoin` still put spaces in between when ran on a mixed nested block? Example: `rejoin ['a ['b 1 2 3] 'c 'd]` produces  `ab 1 2 3cd`.}
    sent: "2017-07-05T20:15:05.153Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595d42606ae41d5d33bc7505"
    text: {@9214 ^/```^/iterate-back: func [^/    'index [word!] ^/     bump  [integer!] ^/     body  [block!] ^/     /local ^/        ctx [object!]^/][  ^/    ctx: context reduce [to set-word! index bump]^/    do bind compose/deep [^/        while [(index) > 0][^/            (bind body ctx)^/            set quote (index) (index) - 1 ^/        ] ^/    ] ctx^/] ^/```}
    sent: "2017-07-05T19:47:44.251Z"
    editedAt: "2017-07-05T19:48:15.077Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d39a74bcd78af567d18df"
    text: "@greggirwin Thanks :thumbsup: "
    sent: "2017-07-05T19:10:31.022Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595d3657c101bc4e3a55ef1d"
    text: {```^/iterate-back: func [^/    'index [word!]^/     bump  [integer!]^/     body  [block!]^/     /local^/        body*^/        ctx^/][  ^/    body*: compose/deep [^/        while [(index) > 0][^/            do body^/            set quote (index) (index) - 1^/        ]^/    ]^/    ctx: context reduce [to set-word! index bump]^/^/    bind body* ctx^/    bind body  ctx^/    do body*^/]^/^/probe unset? :i^/iterate-back i 5 [print i]^/probe unset? :i^/```}
    sent: "2017-07-05T18:56:23.772Z"
    editedAt: "2017-07-05T19:00:58.100Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d36256ae41d5d33bc38ea"
    text: {@greggirwin ^/```^/foo: func ['ref body][do bind body context reduce [to set-word! get ref none]]^/^/probe unset? :qux^/bar: 'qux^/foo bar [qux: 42]^/probe unset? :qux^/```}
    sent: "2017-07-05T18:55:33.219Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "595d2d731c8697534af3a77c"
    text: {Hm, does function without arguments create context? If so, how can I access its context without using `context?` on some arg?}
    sent: "2017-07-05T18:18:27.016Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d2b2c0de4d2545ef8b6e5"
    text: "When you do, write it up. :^^)"
    sent: "2017-07-05T18:08:44.922Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d291d4bcd78af567cc3bd"
    text: {@greggirwin yes, that way I can get local context of the function, but can't figure out how to make everything work.}
    sent: "2017-07-05T17:59:57.524Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d1ec74bcd78af567c8bda"
    text: {I thought there was a note about using `context?` on a local word in a func, but can't find it at the moment.}
    sent: "2017-07-05T17:15:51.207Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d1e4c0de4d2545ef8762a"
    text: "No, wait, it's still leaking! :O"
    sent: "2017-07-05T17:13:48.742Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d1df789aea4761d6a847d"
    text: "No idea why my previous message turned pink."
    sent: "2017-07-05T17:12:23.086Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d1ddb4bcd78af567c877d"
    text: {Ah, dark magic :crystal_ball: ^/```^/iterate-back: func [^/    'index [word!]^/     bump  [integer!]^/     body  [block!]^/][  ^/    spec: reduce [:index]^/    body: reduce [^/        set :index bump^/        while [(get :index) > 0] [^/            do body^/            set :index (get :index) - 1^/        ]^/    ]^/^/    do has spec body^/]^/```}
    sent: "2017-07-05T17:11:55.823Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d1dd33230e14f3a2b0d88"
    text: {Because there are no args, it evaluates it. Maybe something we just want to document, as we can't really catch that.}
    sent: "2017-07-05T17:11:47.730Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d1c996ae41d5d33bbb6dd"
    text: {Functions are just values, which may or may not have words that refer to them.}
    sent: "2017-07-05T17:06:33.096Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d1c910de4d2545ef86b30"
    text: {Here:^/```^/iterate-back: func [^/    'index [word!]^/     bump  [integer!]^/     body  [block!]^/][^/    set :index bump^/    while [(get :index) > 0] [^/        do body^/        set :index (get :index) - 1^/    ]^/]^/```^/```^/>> leaked?^/*** Script Error: leaked? has no value^/*** Where: catch^/*** Stack: ^/>> iterate-back leaked? 1 []^/>> leaked?^/== 0^/```^/How can I bind word reffered with `'index` (`leaked?` in this case) to `iterate-back` and make it local?}
    sent: "2017-07-05T17:06:25.768Z"
    editedAt: "2017-07-05T17:06:54.038Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d1bc489aea4761d6a78e7"
    text: "Sounds too cryptic"
    sent: "2017-07-05T17:03:00.774Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d1b6a6ae41d5d33bbaf98"
    text: {Alternatively, how can function bind word to its context (or body) from within the body?}
    sent: "2017-07-05T17:01:30.349Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d1aa70de4d2545ef861be"
    text: {Here a question arises: can function reflect on itself without knowing its name? E.g. `foo: does [body-of :self]`}
    sent: "2017-07-05T16:58:15.772Z"
    editedAt: "2017-07-05T16:58:54.651Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d19e80de4d2545ef85d83"
    text: {That was unexpected :smile: ^/```^/>> ka-boom!: does [probe body-of ka-boom!]^/== func [][probe body-of ka-boom!]^/>> ka-boom!^/...^/```}
    sent: "2017-07-05T16:55:04.453Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "595d12033230e14f3a2acc26"
    text: {To join values without spaces between, use `rejoin`.}
    sent: "2017-07-05T16:21:23.783Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d11ef3230e14f3a2acbf5"
    text: {Parse rules aren't automatically re-entrant WRT vars. This was true in Rebol as well, which led to http://www.rebol.org/view-script.r?script=use-rule.r}
    sent: "2017-07-05T16:21:03.603Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "595d02636ae41d5d33bb1b09"
    text: {The closing tag for all the parent tags stays the same as the last tag value in the nested block.}
    sent: "2017-07-05T15:14:43.688Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595d020e1c8697534af2bf54"
    text: {However a new issue appeared^/```^/htmlize: function [ b ][^/  tree: [^/    collect [^/      any [^/        set tag word!^/        keep (form reduce ["<" tag ">"])^/        into tree^/        keep (form reduce ["</" tag ">"])^/      ]^/    ]^/  ]^/  parse b tree^/]^/```}
    sent: "2017-07-05T15:13:18.586Z"
    editedAt: "2017-07-05T15:13:52.871Z"
    v: 2
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595d01ea76a757f808dcc656"
    text: {Solved the `block!` issue by changing it into `into tree`.}
    sent: "2017-07-05T15:12:42.674Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595ce8af0de4d2545ef74297"
    text: {I've tried to replace the `form reduce [...]` parts with `append append ...` but then the output gets weird.}
    sent: "2017-07-05T13:25:03.717Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595ce6f90de4d2545ef73a3d"
    text: {Btw, what to use instead of `form` to achieve the same effect but without the spaces?}
    sent: "2017-07-05T13:17:45.355Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595ce6c4329651f46e577073"
    text: {Any idea what to change to get this to work? What am I missing?}
    sent: "2017-07-05T13:16:52.599Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595ce661bf7e6af22ca883eb"
    text: {With `block!` like in the code above the output contains both the `head` and `body` tags but doesn't go into the nested ones so there is no `<title> </title>` in the output.}
    sent: "2017-07-05T13:15:13.377Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595ce5c3329651f46e576b5f"
    text: {If I replace `block!` with `tree` as it is supposed to be then the output only contains the `<head> ... </head>` part .}
    sent: "2017-07-05T13:12:35.862Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "595ce5172723db8d5edd6e9e"
    text: {I'm trying to write a parse dialect to generate HTML from a block and have an issue.^/```^/Red []^/^/htmlize: function [ b ][^/  tree: [^/    collect [^/      any [^/        set tag word! (^/          otag: form reduce ["<" tag ">"]^/          ctag: form reduce ["</" tag ">"]^/        ) keep (otag) block! keep (ctag)^/      ]^/    ]^/  ]^/  parse b tree^/]^/^/html: [^/  head [^/    title []^/  ]^/  body []^/]^/^/probe htmlize html^/```}
    sent: "2017-07-05T13:09:43.636Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "594d0701743aa6f708901b32"
    text: {@strpipe for windows 10+ (not sure how early, maybe vista too?), it may be not so hard as there's a library. Just need someone to do it. Ditto android. I don't know about other platforms}
    sent: "2017-06-23T12:18:09.575Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594cc5fd3230e14f3ae718fa"
    text: {@rebolek Yeah you are right, however I knew you were searching for a cool IDE for beginners. And I thought speech recognition could solve that piece of the puzzle from a different perspective (if it works well) Ain't it? I think it would be catchy, although maybe not useful for crowded offices. I do not think it needs to be native however.}
    sent: "2017-06-23T07:40:45.131Z"
    editedAt: "2017-06-23T07:41:46.607Z"
    v: 3
    author: "588b3065d73408ce4f4667cd"
) #(
    id: "594cc38a76a757f808982ebd"
    text: {@strpipe it would be of course cool, but how would it be done? Native library in Red, or some existing one? How big it would be? And, who's going to do it? ;)}
    sent: "2017-06-23T07:30:18.970Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594cc341e60ad24f31058bf1"
    text: {Yesterday, I thought it would be really cool if there would be strong speech-recognition for red. I thought it would play well with it, considering it should be closer to natural language. What do you think about it? }
    sent: "2017-06-23T07:29:05.878Z"
    v: 1
    author: "588b3065d73408ce4f4667cd"
) #(
    id: "594c5db88dae42503143df1f"
    text: {not really - they are filtering applications - it seems like they want to curate the initial involvement to build the right community}
    sent: "2017-06-23T00:15:52.151Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "594c5d5c743aa6f7088d7c62"
    text: {Doesn't it seem weird that you can't just grab it and try it?}
    sent: "2017-06-23T00:14:20.260Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "594c5cd676a757f80896becf"
    text: {for me personally, I think the above comment is interesting and I will watch it too. FWIW my use of Red has been exclusively for data processing, and I've been alternating between Red and Python for my work, and lately returning to Python since Red is unable to open large files & has the GC issue (previously reported). It's not a criticism - Red is alpha, and it's a fantastic alpha, and I've been working within its limits. In time I know Red will address these - I mainly want to say, take the above as an encouraging step, as I think data is an interesting application (also will recent Julia interest) and Red seems well suited to this domain (and more with IoT etc in time).}
    sent: "2017-06-23T00:12:06.580Z"
    editedAt: "2017-06-23T00:13:06.856Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "594c5ccf11755ab05611b71a"
    text: {Thanks for the link. Lots of comments to go through there.}
    sent: "2017-06-23T00:11:59.930Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594c5bc36ae41d5d33752423"
    text: {@cyclecraze_twitter looks impressive, definitely will check up again once it'll be opensourced}
    sent: "2017-06-23T00:07:31.673Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594c478ac101bc4e3a0f03df"
    text: {Quoted from above conversation: How did you convince VC-s, that there's need for a new programming language? => We are not really making a programming language. So, err.. ok, we are. But it is "just" an engine. Luna is a data processing platform. It allows you to prototype, design and deploy data processing applications much faster than it is currently possible, while working in an elegant, interactive data visualization environment. Moreover, we are supported by many cool companies that want to use Luna for their purposes, including IOT, Data Science or Bioinformatics ones. We got a really big interest in our technologies and we've collected the whole round in less than 6 weeks, choosing the investors we liked among many that wanted to contribute. I'm writing about it because I'm really very grateful for their help and super happy that the need for such development is widely recognized. => ^/Wow. That's exciting. I wouldn't think it would be possible to get a programming language funded, but you found a way. I look forward to seeing where things go. Good luck!}
    sent: "2017-06-22T22:41:14.344Z"
    v: 1
    author: "593bea3ad73408ce4f6644ab"
) #(
    id: "594c472757a6e9f72eebf021"
    text: {If I may: https://news.ycombinator.com/item?id=14612680}
    sent: "2017-06-22T22:39:35.350Z"
    v: 1
    author: "593bea3ad73408ce4f6644ab"
) #(
    id: "594c24b9e265aa025eed4645"
    text: {`do` ignores `none`, so `trim` is not needed, but you're right, it's nicer 🙋}
    sent: "2017-06-22T20:12:41.058Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594c21e502c480e67270b814"
    text: {@rebolek yeah, yours is nicer, deals with `none` returned from `if`}
    sent: "2017-06-22T20:00:37.253Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594c21687bf0f2951a2d5c2d"
    text: {Yessiree! ^/```^/>> do compose [(if no [[1 +]]) 2]^/== 2^/>> do compose [(if yes [[1 +]]) 2]^/== 3^/```}
    sent: "2017-06-22T19:58:32.054Z"
    editedAt: "2017-06-22T19:59:26.208Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594c21615bf0bef94cd33ec5"
    text: {```^/>> trim compose [(if yes [[1 + ]]) 2]^/== [1 + 2]^/>> trim compose [(if no [[1 + ]]) 2]^/== [2]^/```}
    sent: "2017-06-22T19:58:25.371Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "594c20dfe59e74be0aa8145d"
    text: "@toomasv but if `no` I want it to return just `2`"
    sent: "2017-06-22T19:56:15.114Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594c20cf746f1fd6632f5d3a"
    text: {```^/>> append either yes [[1 +]][[]] 2^/== [1 + 2]^/```}
    sent: "2017-06-22T19:55:59.521Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594c20a3bf1bfe6770dd0722"
    text: {How about^/```^/if yes [append [1 +] 2]^/```}
    sent: "2017-06-22T19:55:15.324Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "594c201c88348abd0abb7ff2"
    text: {Also, can anyone point me out to this thing I'm trying to achieve? I think I've done this once, but can't remember how exactly:^/```^/>> reduce [if yes [[1 +]] 2] ; want it to become [1 + 2]^/== [[1 +] 2]^/```}
    sent: "2017-06-22T19:53:00.698Z"
    editedAt: "2017-06-22T19:53:07.377Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "594c1f4ea44c60fa4c52c57a"
    text: "Ummm, that would be C. ;^^)"
    sent: "2017-06-22T19:49:34.618Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594c1f0fbf1bfe6770dcfe71"
    text: {```^/>> :comment^/== func [value][]^/>> [1 2 comment {foo}]^/== [1 2 comment "foo"]^/>> [3 4 /* but what about real multiline comments? */]^/*** Syntax Error: invalid path! at "*/]"^/*** Where: do^/```}
    sent: "2017-06-22T19:48:31.834Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5942c71be531dbc905e82f8b"
    text: {Other %user.r bits are `file-list grep awk format` and such, so the REPL is largely my shell.}
    sent: "2017-06-15T17:42:51.017Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5942c6d0caf4d68d6f39fe49"
    text: {In R2 I have `load-clip/ do-clip` clipboard funcs (and other things in %user.r) per @geekyi's gist comment. I also have `cc` which molds a value and writes it to the clipboard. Makes it quick to grab data, hack it in the REPL, then put results for pasting elsewhere. I do the same thing in Red, but without the shortcut funcs yet.}
    sent: "2017-06-15T17:41:36.610Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59423723ca6d4ae80c1640ad"
    text: {thanks. Yeah I have a macro assigned to ctrl-m .. I was too lazy to turn it off to try ;-) glad I did seem like a useful thing.}
    sent: "2017-06-15T07:28:35.836Z"
    editedAt: "2017-06-15T07:29:00.075Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5942354ae531dbc905e58628"
    text: {@michaeldesu Just try it ;) I see you are a probably a *bottom up* programmer, while I'm a *top down* one most of the time :p}
    sent: "2017-06-15T07:20:42.797Z"
    editedAt: "2017-06-15T07:25:31.394Z"
    v: 2
    author: "569c37abe610378809bccdff"
)#(
    id: "59423537ca6d4ae80c163898"
    text: {3. If someone posts a gist or a link to file, I do the following:^/ a. get the raw link^/ b. `load` the code into a word ^/ c. `do` the code into another word^/ d. modify the `load`ed code^/e. repeat as necessary, putting each new piece of code into a new word with `copy`, so I have a history of my steps^/ }
    sent: "2017-06-15T07:20:23.333Z"
    editedAt: "2017-06-15T07:21:54.561Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59423488caf4d68d6f376fe1"
    text: {@geekyi  what does Ctrl+k Ctrl+m  do? I usually just press F6. Most of what you guys do is above me.. I just use REPL to test ideas (plus the help is good) and then move working fragments over to a file in VSCode.}
    sent: "2017-06-15T07:17:28.312Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "594231d06462d8493c143131"
    text: {2. If I want more abstraction (livecoding, etc), I do that particular file in vscode like in step `1`, then copy and paste code^/ - I guess a better way to do this would be nice (with a command as starting point, and with a file) haven't figured out a consistent way tho}
    sent: "2017-06-15T07:05:52.968Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "594230b16462d8493c142cd8"
    text: {@dander same except with the `reload`. ^/I'm using folders to organize everything in "repos" (I have a main *playground* repo for misc stuff and ideas, until it's promoted to a separate folder)^/The process goes as follows:^/1. `Ctrl+k Ctrl+m` and select the one I want, or `f6`:^/ a. CLI usually^/ b. GUI if I want to debug anything^/ c. Then compilation if needed^/ - Having a quick `ctrl+shift+p`command to `red clean` would be useful sometimes I think.^/}
    sent: "2017-06-15T07:01:05.887Z"
    editedAt: "2017-06-15T07:01:43.212Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "59422ca6e531dbc905e5642c"
    text: {@dander I just use a text editor save the changes and 'do the script from a compiled gui-console. I keep the command to run the script as a comment at the bottom, since I noticed that all stuff before the Red header is NOT comment like it should be. (Unless that has been fixed in the meantime but I do not know if)}
    sent: "2017-06-15T06:43:50.025Z"
    editedAt: "2017-06-15T06:46:21.851Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "594216c5e531dbc905e51724"
    text: {OTOH, if you really leverage the file system as a data store, it can be nice.}
    sent: "2017-06-15T05:10:29.352Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5942169a6549436c7d4bfef6"
    text: {I also have an overblown file-list experiment. Great fun, but could be simpler. More flexibility than you need 99% of the time.}
    sent: "2017-06-15T05:09:46.318Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5942165d142826e972b831c8"
    text: {We'll get there even more. A portable shell is too useful not to have. I, and others, have various grep funcs, and I have an AWK dialect as well. One of my old, fun projects was to see what base shell commands could be built with it in a small amount of space. e.g. cat, tee, etc.}
    sent: "2017-06-15T05:08:45.846Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "594215dad83c50560c0d0b77"
    text: {cool, thanks. I like the technique of recycling the GUI. I am beginning to notice how red can practically replace the shell}
    sent: "2017-06-15T05:06:34.254Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "594201d7f6a78eab484d3a86"
    text: {Nice trick @dander! My workflow varies, based on what I'm doing. I use the REPL much more when tinkering on small pieces, but I've also used the flow you describe in larger setups (R2 mainly, as my Red scripts are mostly self-contained at this point). As things grow, I just re-run from my editor most of the time. In R2 I have quite often included a `halt` button in my GUI scripts, so it's easy to go through some steps and then check the app state and poke around, then type `do-events` to get the GUI going again. That doesn't work in Red right now. I also use a lot of "driver" scripts, which I can use to trigger and run tests when more pieces are intertwined, or I'm editing test data and parse rules.}
    sent: "2017-06-15T03:41:11.094Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5941efc1cf9c13503c88c814"
    text: {I'm curious about other people's Red development flow.^/The workflow I've settled on lately is: start up VS Code, write some stuff, launch the file in GUI REPL for testing, then loop between edit / test. I've been putting this in pretty much every file `reload: does [do system/options/script]` to refresh function definitions and such. So I can just type `reload` after editing the file to keep using the same console window.}
    sent: "2017-06-15T02:24:01.220Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5941ef5ef6a78eab484cec2d"
    text: {@cyclecraze_twitter Just keep using Red and participating to the Red community, that's our best reward for the hard work. ;-)}
    sent: "2017-06-15T02:22:22.001Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5941a326f31c8ced0c379223"
    text: {There use to be a donate button, but I can't find it right now.}
    sent: "2017-06-14T20:57:10.572Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5941a28c6462d8493c1235ad"
    text: {How do I buy the team lunch? Got a button for that?}
    sent: "2017-06-14T20:54:36.660Z"
    v: 1
    author: "593bea3ad73408ce4f6644ab"
) #(
    id: "593fe54eca6d4ae80c0c9dc1"
    text: "That was useful, thanks."
    sent: "2017-06-13T13:14:54.558Z"
    v: 1
    author: "593bea3ad73408ce4f6644ab"
) #(
    id: "593c7be1cf9c13503c733ade"
    text: {@cyclecraze_twitter  > Is there a comparison of how rebol and red syntax differ if at all?  ^/^/https://github.com/red/red/wiki/Differences-between-Red-and-Rebol}
    sent: "2017-06-10T23:08:17.236Z"
    editedAt: "2017-06-10T23:08:43.253Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "593c17e56462d8493cfc1034"
    text: {@cyclecraze_twitter possibly less difference between rebol2 and red, than between rebol2 and rebol3 ;p}
    sent: "2017-06-10T16:01:41.058Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593c0caa02c480e6722ee8a6"
    text: {I do not count is difference, because they will be implemented ;)}
    sent: "2017-06-10T15:13:46.917Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593c06966549436c7d34b3c0"
    text: {@cyclecraze_twitter Also, no money! and date! datatypes yet in Red.}
    sent: "2017-06-10T14:47:50.960Z"
    editedAt: "2017-06-10T14:47:55.200Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593bfb9e31f589c64f933466"
    text: "thanks"
    sent: "2017-06-10T14:01:02.642Z"
    v: 1
    author: "593bea3ad73408ce4f6644ab"
) #(
    id: "593bf03cd83c50560cf53b03"
    text: {There are only minor differences. Red supports literal `map!` in form of `#(key value)` and hexadecimal numbers in form of `12ABh`. That's probably all, AFAIR.}
    sent: "2017-06-10T13:12:28.816Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593beb296462d8493cfb790f"
    text: {Is there a comparison of how rebol and red syntax differ if at all? }
    sent: "2017-06-10T12:50:49.729Z"
    v: 1
    author: "593bea3ad73408ce4f6644ab"
) #(
    id: "593a03f602c480e6722761f4"
    text: "Neurocutaneous"
    sent: "2017-06-09T02:12:06.215Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "593959bbca6d4ae80cf3993d"
    text: {Last, I remember doing something worthwhile was writing method to construct modified GNF(greibach normal form) table-driven parser for minor university paper. GNF modified slightly to construct parser. Sometimes, with advantage of experience, one tries to give ideas intuitively. }
    sent: "2017-06-08T14:05:47.562Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "593956dee531dbc905c285bd"
    text: {@greggirwin  I hope to share.  I'm  coming back to look into languages after long. }
    sent: "2017-06-08T13:53:34.014Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "593844f7167d046a7d7a34be"
    text: {I also wonder if it uses a Pratt parser, because of the association operator and precedence definition. }
    sent: "2017-06-07T18:24:55.053Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593844bf167d046a7d7a32b3"
    text: {How well the name maps to the goal. "Seed" is the perfect name for a growable language. More seriously, the extensibility in defining a language at load time, perhaps. The first big difference I noted from Red, in skimming the docs, is the small number of literal forms. Ties in with the construction syntax chat in red/red.}
    sent: "2017-06-07T18:23:59.766Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593843f4e531dbc905be4ca6"
    text: "What's the killer feature of Seed7? ;)"
    sent: "2017-06-07T18:20:36.097Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593842ebf31c8ced0c12a5be"
    text: {e.g., "What I love about seed7 is XXX, and here's how it helps me."}
    sent: "2017-06-07T18:16:11.432Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5938428fcf9c13503c630564"
    text: {@rupipal Red already has object oriented features (only the best parts ;p) See `make` and `make object!`}
    sent: "2017-06-07T18:14:39.913Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5938428ae531dbc905be4607"
    text: { I understand you're not pushing, sorry if it sounded that way. It's *great* when people suggest things that will help. What helps even *more* is sharing their expertise and knowledge of other tools and how they might align with Red. Please do share.}
    sent: "2017-06-07T18:14:34.681Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59384017167d046a7d7a1c0e"
    text: {I may work on it and may share as soon as possible}
    sent: "2017-06-07T18:04:07.308Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "59383fe0f2dd2dba067b9ad7"
    text: {Gregg. I simply suggested seed7 bcoz its goals overlaps that of red and also as you rightly noted.  It's model is different.  I simply suggested it as case study , as assistance, tip.  surely not as my wishlist.  With the kind of ambitious goals red has, as online docs suggest,  long research list may be inevitable, IMHO.  I simply gently suggested, didn't and wouldn't push it.  As far as specific comparison. }
    sent: "2017-06-07T18:03:12.203Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "59382cdde531dbc905bdd8f0"
    text: {My comment about "all" languages stems from N people each suggesting just one language. I have a long research list, and Seed7 is now on it as well.}
    sent: "2017-06-07T16:42:05.550Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59382c8c6549436c7d2610ec"
    text: {@rupipal, right, so *what, exactly* should Red try to learn from Seed7? I glanced at it, and its model is quite different from Red. But I can't really learn much in a few minutes and may be missing something.}
    sent: "2017-06-07T16:40:44.429Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59382a6ce531dbc905bdcd30"
    text: {I didn't imply that red team know about all languages. Rather I suggested one particular seed7, which clearly claims to be extensible programming language much as red or rebol supporting dialects}
    sent: "2017-06-07T16:31:40.171Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "593829277503e2b7061df3a0"
    text: "@greggirwin  "
    sent: "2017-06-07T16:26:15.429Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "5937809b6549436c7d231a08"
    text: "Entirely depends on the mascot. :smile: ^/"
    sent: "2017-06-07T04:27:07.439Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59373fa36462d8493ce90f87"
    text: "Should probably continue this in red/red channel "
    sent: "2017-06-06T23:49:55.002Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59373e0d6462d8493ce90b43"
    text: {@greggirwin I'm more interested in the search and categorization than namespaces. Namespacing would be better handled at the module level I think? My interest is at a higher level of abstraction. Such as search by type! Like hoogle and hayoo. Elm and Nix looks like the most interesting players in this area. They have functional and hashed dependecies. Then there's this, which I've not properly understood: standardML modules and how exactly they are related/useful. Nobody else looks like they are bringing any fresh ideas(or I haven't read about it recently). Not necessarily a bad thing, sticking to simple stuff that works.}
    sent: "2017-06-06T23:43:09.489Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937364de531dbc905b9c6f7"
    text: {Links and design ideas would be great @geekyi. I'm interested, and think it's good to shake out ideas over some time. }
    sent: "2017-06-06T23:10:05.684Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593735486462d8493ce8ed90"
    text: {@meowy, searchability is a benefit, I agree. I'm all about concrete when it comes to suggestions. If we throw things at the wall, something may stick. Or Doc may already have ideas.^/^/@geekyi, Maxim Olivier-Adloch did the packager and design for rebol.org. He may have based it on his SLiM work, which was very nice as well. For R2 I only ever used `#include`, SLiM, and my own stuff, and did OK with those.^/^/I have an old matrix of package systems and their metadata. `[REBOL       DOAP            RPM             GemSpec         DublinCore      Qtask           Maven       OPML        Roxy        REBOL.org       Packages(JS)]` It was before NPM, but that would be easy enough to add. Also a couple links to CL and Go.^/^/- http://www.gigamonkeys.com/book/programming-in-the-large-packages-and-symbols.html^/- https://thenewstack.io/understanding-golang-packages/^/}
    sent: "2017-06-06T23:05:44.754Z"
    editedAt: "2017-06-06T23:15:23.249Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59372696142826e9728d862b"
    text: {I'm also curious about how rebol.org and the librarian was built; their design in particular }
    sent: "2017-06-06T22:03:02.149Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5937264b142826e9728d84d7"
    text: {I'll put together a list of links for my inspiration. And maybe document my ideas in the wiki if anyone is interested }
    sent: "2017-06-06T22:01:47.170Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593725f26549436c7d21f4c9"
    text: "Thoughts? "
    sent: "2017-06-06T22:00:18.040Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593725d3cf9c13503c5e23d9"
    text: {Anyway, the only concern I have so far is duplication of effort. I don't think I'd be stepping toes on `module`s implementation, as I have a higher level goal. And if that does get implemented, I can simply swap my code to build up on it}
    sent: "2017-06-06T21:59:47.886Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "593725396549436c7d21f127"
    text: {@meowy remember that Red, python isn't actually unique enough either 😋 @greggirwin well I'd too come up with a rather boring name, something like `packager`. We can use your even more boring one too. 😜 }
    sent: "2017-06-06T21:57:13.416Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59372490142826e9728d7c5a"
    text: {If I search for "grunt", I'm not gonna get wrestling videos or military stuff, I'm gonna get the frontend tool. Doubly so if Google knows I have an interest in software.}
    sent: "2017-06-06T21:54:24.114Z"
    v: 1
    author: "5741418ac43b8c6019744206"
) #(
    id: "5937247a6549436c7d21ef05"
    text: {It would mostly be an interim solution till we have a real system, because I badly need a way to organize and search for code}
    sent: "2017-06-06T21:54:02.976Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59372435f31c8ced0c0db8db"
    text: {Ooh packaging! Something I've been thinking about a lot lately. Mostly because it's what I'm missing the most in Red. I have the basic design in my head, and I think I can begin on a prototype}
    sent: "2017-06-06T21:52:53.632Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "593723eef31c8ced0c0db824"
    text: {@greggirwin The good thing about unique names like that is searchability - they don't even need to make sense, that's just a bonus. But if the term's unique enough, it makes it far more likely to actually find what you're looking for when you're searching it on Google.}
    sent: "2017-06-06T21:51:42.007Z"
    v: 1
    author: "5741418ac43b8c6019744206"
) #(
    id: "5936fe5e02c480e6721ae2aa"
    text: "RPM is fine too, noone remembers RedHat anyway."
    sent: "2017-06-06T19:11:26.279Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5936fe226549436c7d213682"
    text: {I like Container. Can, tank, drum, holder. Locker, barn (for a big one).}
    sent: "2017-06-06T19:10:26.598Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5936fac4f2dd2dba06762cc1"
    text: {[this](https://en.wikipedia.org/wiki/Hemaris) guy is nice too}
    sent: "2017-06-06T18:56:04.253Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936fa52167d046a7d74c38d"
    text: {we could call it [Helena](https://en.wikipedia.org/wiki/Bee_hummingbird), and look at all these beautiful [pollen grains](http://www.slate.com/blogs/the_vault/2015/05/08/pollen_scientific_history_carl_julius_fritzsche_s_portraits_of_pollen_grains.html) :bird: }
    sent: "2017-06-06T18:54:10.276Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936f8fae531dbc905b8a2fd"
    text: {@greggirwin :point_up: [20 марта 2017 г., 10:48](https://gitter.im/red/red?at=58cf6d462215a08f04a4aad8) hummingbird (package manager) and pollen (packages) :D}
    sent: "2017-06-06T18:48:26.369Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936f678ca6d4ae80ce9b075"
    text: {At one time, I thought it would be fun to call Red/System `Infra/Red`, but I think Nenad made the right call. It says exactly what it is. Plus, it leaves `Infra` open for an IaaS offering. :^^)}
    sent: "2017-06-06T18:37:44.982Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5936f5eacf9c13503c5d3321"
    text: {Of course, RedHat has already taken RPM. If it weren't for possible confusion, I would suggest that. Straight-ahead acronym, but also the meaning of speed. }
    sent: "2017-06-06T18:35:22.486Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5936f4dc6462d8493ce7bf3d"
    text: {When you come up with a clever name, remember the package manager and build system need to reference it as well, and they need *their* own names. Naming is hard.}
    sent: "2017-06-06T18:30:52.545Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5936f4a3f2dd2dba06760e8f"
    text: {As one who loves wordplay and clever names (See: Ren), there are times when boring is best. From the names, can you tell what Grunt or Bower do? How about the zillion other things with clever names? I'm all for a clever name if it has value and adds meaning. Docker is a funny name, but Container is a great name in its context.}
    sent: "2017-06-06T18:29:55.485Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5936f3d8ca6d4ae80ce9a3ff"
    text: "@greggirwin that's too boring!"
    sent: "2017-06-06T18:26:32.209Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936f3a66549436c7d2100a5"
    text: "How about... `packages`?"
    sent: "2017-06-06T18:25:42.646Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5936f2e7e531dbc905b882f2"
    text: "We can call it `ruby` in Red :)"
    sent: "2017-06-06T18:22:31.330Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5936ed85cf9c13503c5d0237"
    text: {Anyone thought about how we gonna call packages in Red? There're `crates` in Rust, `shards` in Crystal, `gems` in Ruby, etc}
    sent: "2017-06-06T17:59:33.846Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936de4f142826e9728c127d"
    text: {@rupipal, OO is in Red today, and probably won't change much. It's prototype based, rather than class based. We'll also get modules and there will be more tools for PitL as time goes on.^/^/If you know seed7 (or for anyone saying we can learn from other langs), it helps if you can be specific. Team Red is small, and doesn't have the luxury to learn every other language to see what makes them special. People who have that knowledge can help by sharing it. It's unlikely that Red will change its fundamental design and principles, because those are vetted and sound. But knowing what people like about other tools, and showing how Red relates to them, is always good.}
    sent: "2017-06-06T16:54:39.070Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5936cd50167d046a7d73d9d0"
    text: {@9214 Love it. A fantastic set of languages come together to inspire Red.}
    sent: "2017-06-06T15:42:08.403Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936c8eb167d046a7d73c1f1"
    text: "all roads leads to Rome :D"
    sent: "2017-06-06T15:23:23.465Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936c8db6549436c7d202d0d"
    text: "AFAIK Self OO model also inspired Redbol"
    sent: "2017-06-06T15:23:07.558Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936c8b4e531dbc905b7a847"
    text: ":)"
    sent: "2017-06-06T15:22:28.779Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5936c89b31f589c64f7e0e87"
    text: {@CodeTortoise  ^/[![img.png](https://files.gitter.im/red/red/welcome/9pbI/thumb/___________.png)](https://files.gitter.im/red/red/welcome/9pbI/___________.png) ^/;)}
    sent: "2017-06-06T15:22:03.241Z"
    editedAt: "2017-06-06T15:22:42.015Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936c5cd6549436c7d201cc8"
    text: "Eh, I can just launch it with bash"
    sent: "2017-06-06T15:10:05.102Z"
    editedAt: "2017-06-06T15:10:25.111Z"
    v: 2
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936c5ad167d046a7d73afe3"
    text: "Ah, I too use Fish"
    sent: "2017-06-06T15:09:33.703Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936c577ca6d4ae80ce8a8a8"
    text: {> Note: Running the Red toolchain binary from a $PATH currently requires a wrapping shell script (see relevant tickets: #543 and #1547.}
    sent: "2017-06-06T15:08:39.526Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936c56b31f589c64f7dff48"
    text: "ah, wait a sec"
    sent: "2017-06-06T15:08:27.278Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936c5536462d8493ce6c753"
    text: {Same thing. Maybe I can just symlink it. I like to keep things I install on my own separate from how the package manager deals with things anyways.}
    sent: "2017-06-06T15:08:03.193Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936c52102c480e67219b315"
    text: "@CodeTortoise try `red --cli`?"
    sent: "2017-06-06T15:07:13.310Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936c4f8f31c8ced0c0bd275"
    text: "I put the red file in /usr/bin, so it is in PATH^/"
    sent: "2017-06-06T15:06:32.921Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936c4d2167d046a7d73aad9"
    text: {Alright on Linux I get Red to compile and can go in and out of the console. Yet, when I try calling Red from any other directory, I get => PROGRAM ERROR: Invalid encapsulated data.}
    sent: "2017-06-06T15:05:54.797Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936c47fe531dbc905b790f2"
    text: {The current GTK stuff was done by contributor, if anybody's willing to pick up where he stopped, it would be great of course.}
    sent: "2017-06-06T15:04:31.963Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5936c4446549436c7d201517"
    text: "@9214 Yes, it is."
    sent: "2017-06-06T15:03:32.952Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5936c414f31c8ced0c0bce39"
    text: {Ah, neato. I kind of miss it. I keep coming in and out of CS stuff because I just can't get too interested in a lot the language and frameworks that exist. I have given up on caring about the likes of Python, C[++,#]/Java, and go straight to the interesting languages and ideas, such as Nim, Rust, Clojure... Fun stuff.}
    sent: "2017-06-06T15:02:44.401Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936c40b31f589c64f7df6c9"
    text: {speaking of which, I don't see GTK in Trello milestones, is it low priority?}
    sent: "2017-06-06T15:02:35.869Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936c36a7503e2b70617bac2"
    text: "@CodeTortoise everything except GTK backend"
    sent: "2017-06-06T14:59:54.895Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936c366167d046a7d73a4f6"
    text: "Hm, I may try that. "
    sent: "2017-06-06T14:59:50.969Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936c3667503e2b70617ba98"
    text: {@CodeTortoise Hi, glad you like Red! Minus the GUI, Red on Linux is same as on Windows.}
    sent: "2017-06-06T14:59:50.013Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5936c3496462d8493ce6bb88"
    text: {My question is, how much of the Red language is ported to Linux, minus of course the GUI aspects of it, I guess VID [I know that is the Rebol term]?}
    sent: "2017-06-06T14:59:21.909Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936c346e531dbc905b787e3"
    text: {@CodeTortoise Hey, as far as I know Red works just fine under Wine}
    sent: "2017-06-06T14:59:18.533Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5936c311142826e9728b865c"
    text: {Hello. I got really excited about the Red language awhile back ago, and was getting my fingers whet by going through Rebol 2 tutorials. Since then I got distracted by other things, such as Smalltalk/Pharo, Self, Racket. Still, Red is on my mind as as language I want to keep my brain on. The problem is, I have abandoned Windows, losing half of what makes Red powerful and interesting, at least as far as the tutorials make it seem.}
    sent: "2017-06-06T14:58:25.364Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5936a1d3167d046a7d72f71a"
    text: {2ndly. About the language design and roadmap itself. Is object-orientation a major goal. I saw it documented, of course. In other words, I mean, we could set scalability or managing complexity of large programs a goal in roadmap . seed7 is another extensible programming language. We may want learn from it.}
    sent: "2017-06-06T12:36:35.451Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "59369c09e531dbc905b6c3a4"
    text: "GNURoot Debian is fakeroot,  But it is good. "
    sent: "2017-06-06T12:11:53.419Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "59369ba4e531dbc905b6c1ec"
    text: "processor arm"
    sent: "2017-06-06T12:10:12.341Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "59369a1be531dbc905b6b9e4"
    text: {hello. installing the nativeexe apk  on Android is one option. I'll try that. I have earlier tried to install Red in GNURoot Debian (app available in PlayStore), but I don't get execute permissions. chmod doesn't work in fakeroot. What is workaround to install in this debiam fakeroot? suggestions pls}
    sent: "2017-06-06T12:03:39.815Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "59367a4b6462d8493ce54b5c"
    text: "@dockimbel  @9214 Thanks!"
    sent: "2017-06-06T09:47:55.344Z"
    v: 1
    author: "5741418ac43b8c6019744206"
) #(
    id: "593678d76549436c7d1ea553"
    text: {@meowy Use `write/info` and pass a `GET` method + headers, as shown by @9214's link. }
    sent: "2017-06-06T09:41:43.386Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5936785df2dd2dba06739775"
    text: {@meowy :point_up: [7 апреля 2017 г., 18:19](https://gitter.im/red/red?at=58e791fc8e4b63533da644cd) how about that?}
    sent: "2017-06-06T09:39:41.190Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "593677c6f2dd2dba067394ea"
    text: {@meowy full-blown I/O support is planned for `0.7.0`, though I saw something about making requests from @rebolek, can't remember exact details}
    sent: "2017-06-06T09:37:10.342Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "593677196549436c7d1e9b80"
    text: {Yo. Does Red have something to make HTTP requests with that's slightly more comprehensive than what read offers? Because I need to pass headers.}
    sent: "2017-06-06T09:34:17.522Z"
    editedAt: "2017-06-06T09:36:12.339Z"
    v: 2
    author: "5741418ac43b8c6019744206"
) #(
    id: "593653be6462d8493ce49f8b"
    text: {@virtualAlan I think the title of this chat says it best "New to Red language? Ask any question about it here" - it's to pose questions not to really get an overview. The red-lang.org site gives a good overview, plus gives the handy link to this chat page. As a rank newbie myself, I personally found the approach really refreshing and welcoming - i.e. arrive at the site, get the overview and see the 'Open chat ' button to ask your newbie questions. The community here is really great, and has contributed to me sticking with it.}
    sent: "2017-06-06T07:03:26.771Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5936356b142826e97288f794"
    text: {@gltewalt If someone wants to write about `unset!` in Rebol-like languages and then writes about one language that is getting less and less Rebol-like, it's not very informative IMO and can be confusing for people.}
    sent: "2017-06-06T04:54:03.669Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "593619f2167d046a7d70d02f"
    text: {@virtualAlan ^/> This is the welcome page ? ^/^/No, this is the welcome chat room, and newcomers arrive here by clicking an "Open Chat" button.}
    sent: "2017-06-06T02:56:50.055Z"
    editedAt: "2017-06-06T02:57:46.881Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "593619b502c480e67216cbe2"
    text: {We can't guess what every visitor's background is. New here doesn't mean "new programmer" And we really have no control over the setup for a room in Gitter. It's just a chat system. I don't think we can even make sticky entries as you would in a forum. All we can hope for, IMO, is that they see "welcome" and post *something* here, so we can meet them and direct them to specific rooms or resources. We do our best to make people feel welcome. }
    sent: "2017-06-06T02:55:49.196Z"
    editedAt: "2017-06-06T02:57:52.272Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5936097331f589c64f7ac950"
    text: "Examples?"
    sent: "2017-06-06T01:46:27.905Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59360713f2dd2dba0671fc25"
    text: {Look, this aint rocket science.^/The novice programmer will automatically be drawn to the welcome/newcomer page. But It's what they see there that will make them decide. Will they go with Red, or not.. ^/So the student or the school wants to know about Red - then they look at this page, the welcome page, the newcomers page, ^/As it is now, it's game over, they will move on. New programmers are different, they need to be helped and made to feel really welcome. The welcome page should be a proper welcome page. simple (very simple) and instructive.  just my opinion.^/}
    sent: "2017-06-06T01:36:19.375Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "5935f9b502c480e67216638d"
    text: {This is the welcome page ?  - what ?  newcomers will run and never come back.  Come on,  you must see it ?}
    sent: "2017-06-06T00:39:17.724Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "5935df4b7503e2b706140770"
    text: {:fork_and_knife: look, it's a *fork* with a knife (wink-wink)}
    sent: "2017-06-05T22:46:35.146Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5935cb60cf9c13503c58211f"
    text: {@rebolek will understand. Up to him if he wants the link shown. }
    sent: "2017-06-05T21:21:36.203Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5935cb2602c480e67215b0dd"
    text: {Just added http://www.rebol.net/r3blogs/0318.html to the wiki entry as well.}
    sent: "2017-06-05T21:20:38.518Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5935cb0402c480e67215b080"
    text: {'Forum post'^/I chose not to link to it, but no, not your Meditations section. }
    sent: "2017-06-05T21:20:04.591Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5935c9d8167d046a7d6fb570"
    text: {Not sure what blog post you're talking about though.}
    sent: "2017-06-05T21:15:04.522Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5935c9b5cf9c13503c581a28"
    text: {https://github.com/red/red/wiki/Guru-Meditations#why-does-unset-exist}
    sent: "2017-06-05T21:14:29.460Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5935c02cf31c8ced0c079bbe"
    text: {I don't remember where the `unset!` talk was at, and it seems I can't reply to the blog post, so I'll say it here:^/```^/Sorry to set off such ill will.^/I've read that the creator of rebol took his time in putting the language together, so he must have had a reason for unset to be the way that it is. That's what I wonder about the most - the design decision.^/As a relative newcomer, unset being a non-benign return value causes me to stub my toe at times.^/^/I don't think we need to be rude to each other.^/```}
    sent: "2017-06-05T20:33:48.760Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59358b30cf9c13503c56ee81"
    text: "Thanks @dockimbel !"
    sent: "2017-06-05T16:47:44.219Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934ce2031f589c64f7597b7"
    text: {It's fixed now:^/```lisp^/C:\Dev\Red>red --cli --catch tests/hello.red^/Hello, world!^/Χαῖρε, κόσμε!^/你好, 世界^/Dobrý den světe^/>>^/```}
    sent: "2017-06-05T03:21:04.490Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5934caddf31c8ced0c0389fd"
    text: {@nd9600 Yes, using the `--cli --catch`, though it seems broken right now, looking into it...}
    sent: "2017-06-05T03:07:09.805Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593470757503e2b7060e7a09"
    text: {I should add that the prefix forms can be clear with some formatting and types of code. }
    sent: "2017-06-04T20:41:25.334Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59346ff6ca6d4ae80cdf379d"
    text: {`~` as a suffix on those funcs is also a holdover from Rebol.}
    sent: "2017-06-04T20:39:18.581Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59346813cf9c13503c52b0a0"
    text: {@9214 realises that `a + 1` ain't an `integer!`, it's addition of `block!` and `integer!`, hence the error}
    status: true
    sent: "2017-06-04T20:05:39.412Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59345874f2dd2dba066b7387"
    text: "Fair enough! :)"
    sent: "2017-06-04T18:59:00.783Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "5934580c31f589c64f74168b"
    text: {It's the same as with `!` in datatype words - because we can!}
    sent: "2017-06-04T18:57:16.382Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "593457e531f589c64f741629"
    text: {Why did you decide to use a  tilde (which means "Approximately")?}
    sent: "2017-06-04T18:56:37.974Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "59345741f2dd2dba066b6ee0"
    text: "DIY approach: `&: :and`"
    sent: "2017-06-04T18:53:53.070Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5934572e31f589c64f741303"
    text: {Not that we can't do it, just that we have to consider them carefully.}
    sent: "2017-06-04T18:53:34.454Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "593457017503e2b7060e19b1"
    text: {`Any` and `all` are more idiomatic in Red, though `and` and `or` work fine for 2 args of course. They are less clear in prefix form though.^/^/The strict left->right evaluation does mean you sometimes need to arrange things differently, or use parens. ^/^/> Adding a few more symbols to the language can do no harm i guess?^/^/On the contrary, lexical space is *very* tight in Red, because of the large number of literal forms.}
    sent: "2017-06-04T18:52:49.168Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59345526e531dbc905adbcc6"
    text: {I think `and~` is suitable for ANDing results of very long expressions^/```^/Red []^/^/print 13 and 37^/^/print and~^/^-^-10 * 2 - (3 * 2 + 1) + 100 - 100 * 1'000'000 / 1'000'000^/^-^-50 - 13 + 1'000'000'000 - 1'000'000'000 * 1 / 1^/```}
    sent: "2017-06-04T18:44:54.151Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59345325142826e97281ac94"
    text: {@nd9600 ^/```^/>> a: [] (length? a) + 1^/== 1^/```}
    sent: "2017-06-04T18:36:21.884Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5934529f167d046a7d6a1952"
    text: {`a + 1` is an `integer!`, not a `series!`, you can't get `length` from it}
    sent: "2017-06-04T18:34:07.677Z"
    editedAt: "2017-06-04T18:34:15.824Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59343668e531dbc905ad478b"
    text: "Yeah, I think it was"
    sent: "2017-06-04T16:33:44.602Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934365e31f589c64f739ea1"
    text: {I am not on PC, but i suppose that could be due to precedence rules? }
    sent: "2017-06-04T16:33:34.939Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5934363a6549436c7d16142e"
    text: {> I found that something like `a: [] length? a + 1` doesn't work, but `a: [] add length? a 1` does}
    sent: "2017-06-04T16:32:58.651Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5934360cca6d4ae80cde5f6b"
    text: {In that case `value1 and value2` should be replaced with `value1 & value2`. Adding a few more symbols to the language can do no harm i guess? In my case, well i do prefer these symbols to writing the whole word.}
    sent: "2017-06-04T16:32:12.172Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "593435cee531dbc905ad44ba"
    text: "I suppose there's the advantage"
    sent: "2017-06-04T16:31:10.733Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593435936549436c7d16111a"
    text: {I found that something like `a: [] length? a + 1` doesn't work, but `a: [] add length? a 1` does}
    sent: "2017-06-04T16:30:11.213Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934354e02c480e6720f9e99"
    text: {There's a similar thing with `add value1 value2` over `value1 + value2`}
    sent: "2017-06-04T16:29:02.317Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "59343520e531dbc905ad4191"
    text: {What is the advantage to `and value1 value2` over `value1 and value2`? IMHO only one way should be supported. Too many ways to do a thing hinders readability.}
    sent: "2017-06-04T16:28:16.232Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59343478142826e972813a18"
    text: "Maybe `halt`. I am not sure though."
    sent: "2017-06-04T16:25:28.722Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59343468cf9c13503c51ead5"
    text: {> Is there a way to get the CLI console to return to the console after running a script, like the GUI does?}
    sent: "2017-06-04T16:25:12.801Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "593433c131f589c64f73948e"
    text: "in place of `true and false`"
    sent: "2017-06-04T16:22:25.960Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593433b5f2dd2dba066af477"
    text: "yet `and true false` works"
    sent: "2017-06-04T16:22:13.683Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593433966462d8493cdc831e"
    text: {My old Rebol shows^/```^/REBOL/View 2.7.6.3.1 14-Mar-2008^/Copyright 2000-2008 REBOL Technologies.  All rights reserved.^/REBOL is a trademark of REBOL Technologies. WWW.REBOL.COM^/>> ? and^/USAGE:^/    value1 AND value2^/^/...^/>> ? and~^/USAGE:^/    AND~ value1 value2^/...^/```}
    sent: "2017-06-04T16:21:42.438Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5934329e6462d8493cdc7fe2"
    text: "I wonder how Rebol manages with both"
    sent: "2017-06-04T16:17:34.918Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934328dcf9c13503c51e506"
    text: "So it needs the `~` to distinguish it?"
    sent: "2017-06-04T16:17:17.545Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934324a167d046a7d69a6a9"
    text: { @nd9600 Because in Red there is op! `and`^/```^/>> and~ true true^/== true^/>> true and true^/== true^/```}
    sent: "2017-06-04T16:16:10.322Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "593431847503e2b7060d9248"
    text: "In Rebol , it's just `and value1 value2`"
    sent: "2017-06-04T16:12:52.904Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593431746549436c7d160052"
    text: {Is there a reason why the action! `and~` must be written with a `~`?}
    sent: "2017-06-04T16:12:36.271Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934298a6462d8493cdc5df7"
    text: {Is there a way to get the CLI console to return to the console after running a script, like the GUI does?}
    sent: "2017-06-04T15:38:50.501Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "59342521142826e972810051"
    text: "Still `wait` should do the trick."
    sent: "2017-06-04T15:20:01.369Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59342500cf9c13503c51ad70"
    text: {No, just with a .bat script like^/`red-062.exe --cli "%1"`^/I'll have it fixed in a sec}
    sent: "2017-06-04T15:19:28.544Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593424f6cf9c13503c51ad6d"
    text: {Add `wait 10` (or any other value) in the end so then the executable will wait for some time and you will be able to see the result.}
    sent: "2017-06-04T15:19:18.089Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "593424c17503e2b7060d62d6"
    text: {Are you compiling your script and running the executable by double clicking?}
    sent: "2017-06-04T15:18:25.017Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59342441167d046a7d697045"
    text: {hmm now my scripts close as soon as they finish running, so  I can't see the input}
    sent: "2017-06-04T15:16:17.002Z"
    v: 1
    author: "59341e11d73408ce4f649686"
)#(
    id: "593422b7f31c8ced0c01466e"
    text: "Just in the GUI"
    sent: "2017-06-04T15:09:43.169Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593422b131f589c64f7358a5"
    text: "Thanks"
    sent: "2017-06-04T15:09:37.912Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593422af6549436c7d15c5e3"
    text: {Yeah the 2nd issue does't exist in the CLI console}
    sent: "2017-06-04T15:09:35.978Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934229c142826e97280f6f0"
    text: {Start the cli console from command prompt with `red --cli`}
    sent: "2017-06-04T15:09:16.888Z"
    editedAt: "2017-06-04T15:09:32.470Z"
    v: 2
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "59342287e531dbc905acfa30"
    text: {You can use the code in red cli console till the issue is fixed for the gui console}
    sent: "2017-06-04T15:08:55.567Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "593421e2167d046a7d6967b4"
    text: "Rebol2 behaves like I expected"
    sent: "2017-06-04T15:06:10.126Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593421cd31f589c64f7354ef"
    text: {that should be^/```^/3 4 6^/7 7 7^/0 0 0^/```}
    sent: "2017-06-04T15:05:49.110Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934219bcf9c13503c51a1f6"
    text: {the 2nd issue matters for me because I'm writing a subleq interpreter (just for fun), and the code^/` 3 4 6^/7 7 7^/0 0 0`^/in a language like Python would continually jump between the first and third lines, but in Red, it doesn't print anything at all}
    sent: "2017-06-04T15:04:59.450Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593420eb6462d8493cdc3f88"
    text: "thanks @9214 "
    sent: "2017-06-04T15:02:03.611Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593420d1142826e97280f0b6"
    text: "@nd9600 https://github.com/red/red/issues/2627"
    sent: "2017-06-04T15:01:36.998Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "593420af02c480e6720f5153"
    text: {I can't quit the GUI console either - it has to be killed^/This is on Windows}
    sent: "2017-06-04T15:01:03.796Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934208bcf9c13503c519db2"
    text: {I'd expect it to print out "hello" forever, but it doesn't}
    sent: "2017-06-04T15:00:27.136Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934207c7503e2b7060d5224"
    text: {`forever [ print "hello" break]` prints "hello" once,^/but `forever [ print "hello"]` doesn't do anything at all}
    sent: "2017-06-04T15:00:12.001Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934203ef2dd2dba066aac34"
    text: "Is that by design?"
    sent: "2017-06-04T14:59:10.290Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "593420396462d8493cdc3cba"
    text: {Also, I've found that  input or output doesn't seem to work if a loop doesn't terminate, either}
    sent: "2017-06-04T14:59:05.743Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5934200b02c480e6720f4fb1"
    text: "rather than waiting a second each time"
    sent: "2017-06-04T14:58:19.489Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "59342002f2dd2dba066aab83"
    text: {`i: 0 while [lesser? i 10] [wait 1 print i i: add i 1]` waits for 10 seconds, and then prints all 10 values}
    sent: "2017-06-04T14:58:10.708Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "59341fede531dbc905acef81"
    text: {`wait` doesn't seem to work properly with `print` inside a loop}
    sent: "2017-06-04T14:57:49.577Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "59341f6cf2dd2dba066aa9a0"
    text: {Hi!^/I ran into a bit of a problem with loops in Red recently}
    sent: "2017-06-04T14:55:40.022Z"
    v: 1
    author: "59341e11d73408ce4f649686"
) #(
    id: "5931f376ca6d4ae80cd71d1b"
    text: {@pchg The Chocolatey package isn't really much of a package. It just downloads the latest stable red.exe from the website and puts it in your `path` for you. Saves a few clicks maybe. There is also a similar package manager for [Scoop](https://github.com/red/scoop-bucket), which is convenient because it can target the latest automated build and doesn't need to elevate. I didn't do that one}
    sent: "2017-06-02T23:23:34.058Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5931eee6cf9c13503c4a8795"
    text: "Thanks again, Gregg."
    sent: "2017-06-02T23:04:06.166Z"
    v: 1
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931eead142826e9727a03e2"
    text: "I have to run, but will check back tomorrow."
    sent: "2017-06-02T23:03:09.522Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ee826462d8493cd54211"
    text: {`/local` works the same in Red as in Rebol, so it should be fine. You may need to start small and test one piece at a time. }
    sent: "2017-06-02T23:02:26.652Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931edbee531dbc905a5f697"
    text: {```^/== func [^/    block [block!] value ^/    /local flag point parent-poin...^/```}
    sent: "2017-06-02T22:59:10.106Z"
    v: 1
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931ed9dcf9c13503c4a822b"
    text: "OK, will do."
    sent: "2017-06-02T22:58:37.458Z"
    v: 1
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931ed60e531dbc905a5f4b4"
    text: "ctrl+shift+M to see help."
    sent: "2017-06-02T22:57:36.603Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ed5b31f589c64f6c3355"
    text: "Thanks."
    sent: "2017-06-02T22:57:31.818Z"
    v: 1
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931ed53142826e97279fe2b"
    text: {Use 3 backticks on their own line to start and end code blocks.}
    sent: "2017-06-02T22:57:23.111Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ed4e02c480e672087d9f"
    text: "Yes, many tweaks are necessary...  I tried..."
    sent: "2017-06-02T22:57:18.171Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931ed38e531dbc905a5f42b"
    text: {== func [^/    block [block!] value ^/    /local flag point parent-poin...}
    sent: "2017-06-02T22:56:56.786Z"
    v: 1
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931ed2231f589c64f6c3282"
    text: {Eludes me to, just from that. :^^) What is the error?}
    sent: "2017-06-02T22:56:34.222Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ece7ca6d4ae80cd7091b"
    text: {@greggirwin Here is an example of a code incompatibility problem that currently eludes me: "  /local flag point parent-point p d"}
    sent: "2017-06-02T22:55:35.940Z"
    v: 1
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931ece2e531dbc905a5f2c9"
    text: "It may need a tweak or two. Don't know."
    sent: "2017-06-02T22:55:30.844Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931eccbcf9c13503c4a801b"
    text: {You can certainly paste it into your own code to make things easier right now.}
    sent: "2017-06-02T22:55:07.168Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ecace531dbc905a5f262"
    text: "And after, inspiration would come..."
    sent: "2017-06-02T22:54:36.187Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931eca5167d046a7d6279af"
    text: "FOR I = 1 TO"
    sent: "2017-06-02T22:54:29.260Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931eca1142826e97279fbf9"
    text: {We have https://github.com/red/red/wiki/REP-0101---For-loop-function as a source of discussion, but then Nenad wrote a macro, just for fun, which is probably even better than my version. }
    sent: "2017-06-02T22:54:25.627Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ec95e531dbc905a5f1fc"
    text: {I would just fire up the machine, and, without even thinking, begin to type:}
    sent: "2017-06-02T22:54:13.377Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931ec8002c480e672087af5"
    text: {Oups.  I use it very often...  Probably a bad habit that I got from the time when I programmed on a ZX81.  }
    sent: "2017-06-02T22:53:52.672Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931ec547503e2b7060651a7"
    text: {We try not to do that, though it's hard to change one-liners much. The problem with `for` in R2 is that it's not very efficient, or flexible, or predictable in its behavior. }
    sent: "2017-06-02T22:53:08.015Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ec43ca6d4ae80cd707a2"
    text: {Otherwise, it would be more interesting, albeit a bit longer, to dive into the code, understand it, and rewrite it differently from scratch.  No copy-paste, just mind.}
    sent: "2017-06-02T22:52:51.902Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931ec1b167d046a7d627811"
    text: {As the source is available for *for* in Rebol 2 (source for), I was wondering if there were some copyright or other similar issues, if one would take such code and get it into Red directly.  Any idea?}
    sent: "2017-06-02T22:52:11.967Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931ebeeca6d4ae80cd706c4"
    text: {Just write a dialect to control a rock-carving robot, and zoom out.}
    sent: "2017-06-02T22:51:26.055Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931eba96462d8493cd53a59"
    text: {I'm more often on reg than in sand, though.  Gotta learn how to make geoglyphs in Red.}
    sent: "2017-06-02T22:50:17.195Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931eba26462d8493cd53a55"
    text: {`For` may come, but likely not be Rebol compatible in the interface to it.}
    sent: "2017-06-02T22:50:10.423Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931eb8de531dbc905a5eec0"
    text: "Sure!"
    sent: "2017-06-02T22:49:49.333Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931eb826549436c7d0ec161"
    text: {Can you write them in the sand, and then send a link to a satellite photo? :^^)}
    sent: "2017-06-02T22:49:38.511Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931eb74f2dd2dba06639ec6"
    text: {Last time I ran into such a deception, I just realised that *for* was not implemented... And dockimbel didn't seem too excited about implementing for...}
    sent: "2017-06-02T22:49:24.698Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931eb6131f589c64f6c2c79"
    text: {We've just improved `help`, but it may still not be enough. ;^^)}
    sent: "2017-06-02T22:49:05.034Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931eb477503e2b706064ded"
    text: {There will be a big doc push a few releases down the road.}
    sent: "2017-06-02T22:48:39.767Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5931eb43cf9c13503c4a7a95"
    text: {Well, the thing is, I'm very often off the Internet.  Difficult to make phone calls from the Sahara.}
    sent: "2017-06-02T22:48:35.360Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931eb24142826e97279f859"
    text: {We have a pretty active group here, and often pull from chat into wikis for later reference. So ask away when you hit a snag.}
    sent: "2017-06-02T22:48:04.733Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931eafaca6d4ae80cd702eb"
    text: {True.  From time to time, I try to stuff some Rebol code into Red console, and I'm most often deceived.  The fact, as you say, that documentation questions are usually pointed to Rebol 2 documentation doesn't help much.}
    sent: "2017-06-02T22:47:22.314Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931eaf8ca6d4ae80cd702e8"
    text: {@pchg, it has a lot of potential, though we can still do most anything with `parse` at runtime. It just opens up a lot of new possibilities. }
    sent: "2017-06-02T22:47:20.039Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ead8ca6d4ae80cd70262"
    text: {@greggirwin Yes, that is for sure. I'm pretty comfortable with Rebol, though there's always more to learn.}
    sent: "2017-06-02T22:46:48.094Z"
    editedAt: "2017-06-02T22:47:52.907Z"
    v: 2
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931eab66549436c7d0ebefe"
    text: {We do still point people to Rebol docs for the basics, but the deeper stuff needs to get there for Red.}
    sent: "2017-06-02T22:46:14.126Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ea9c167d046a7d627280"
    text: {That said, you will probably need to take some time to learn a bit about Red, and what is different. }
    sent: "2017-06-02T22:45:48.332Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931ea94ca6d4ae80cd701f4"
    text: {@greggirwin This example (https://github.com/red/red/wiki/Guru-Meditations#modifying-data-before-loading-it-lisp-reader-macros ) makes me thing a lot of Frebol or Fred!  It is just a very simple mapping of words to allow my kids (who don't speak English) to be able to program.  Funny!}
    sent: "2017-06-02T22:45:40.228Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931ea7ef31c8ced0cfa22d7"
    text: {I commented out as many errors as I could, but eventually the incompatibilities become too numerous and complex for me to follow. I need to dig into Red more, but the documentation still seems a bit scant. Very promising for what it does so far, though.}
    sent: "2017-06-02T22:45:18.184Z"
    editedAt: "2017-06-02T22:45:32.768Z"
    v: 2
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931e9f931f589c64f6c295a"
    text: {If they're just in the header, comment them out or make them strings for now.}
    sent: "2017-06-02T22:43:05.673Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e9d431f589c64f6c2902"
    text: {Red doesn't have dates yet, so that's one roadblock.}
    sent: "2017-06-02T22:42:28.131Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e91c6462d8493cd5337c"
    text: {Thanks, Gregg! It is, in fact, Henrik's code, or rather, a link to an archive of it. I have added to it elsewhere, but wanted to get his version running before adding in my own complications. There seem to be numerous syntactical problems, beginning with "Syntax Error: invalid integer! at "2006-01-31  Date: 2006-02-02  Version." Each error I fix breeds a new one, eventually exceeding my comprehension. It may well take Henrik's eyes to make it work, given it's complexity. Thanks again.}
    sent: "2017-06-02T22:39:24.326Z"
    v: 1
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931e7d0f2dd2dba066393b4"
    text: {A small example: https://github.com/red/red/wiki/Guru-Meditations#modifying-data-before-loading-it-lisp-reader-macros^/}
    sent: "2017-06-02T22:33:52.306Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e75d142826e97279ea4f"
    text: {Red is still easy as can be, yes. But from a business perspective, they need to get it visible in as many places as possible. Makes it look respectable or something. ;^^)}
    sent: "2017-06-02T22:31:57.949Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e72d142826e97279e9c7"
    text: "Thanks, you convinced me!"
    sent: "2017-06-02T22:31:09.281Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e71c6462d8493cd52dbd"
    text: "Hm.  I must try these macros."
    sent: "2017-06-02T22:30:52.771Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e70002c480e672086a0d"
    text: {The big difference is that Red's macros can operate on Red values, not just text.}
    sent: "2017-06-02T22:30:24.398Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e6ecf31c8ced0cfa1847"
    text: {Chocolatey => is this a package manager?  I thought that Red was going to be as simple as Rebol was: just one executable, no need for a package or anything?  Maybe I'm wrong.}
    sent: "2017-06-02T22:30:04.234Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e6db6462d8493cd52d42"
    text: {Macros help at compile and load time. Rebol never compiled, so it wasn't an option to handle things then. One great use, though, is pre-processing things you want to load.}
    sent: "2017-06-02T22:29:47.307Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e685142826e97279e714"
    text: {Red is still alpha, so only places where someone has helped get it there. I think @dander did a Chocolatey setup, @gltewalt did a Cloud9 install, and @qtxie  did a VSCode plugin. MacGUI is new, pending official release.}
    sent: "2017-06-02T22:28:21.062Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e683cf9c13503c4a6b7c"
    text: {Yes, I've read some news from the Red site, once in a while.  Actually, I didn't quite get what the fuss concerning macros was all about: after all, in Rebol (and all these languages), a piece of code inside [] can be thought of as a macro, no?}
    sent: "2017-06-02T22:28:19.602Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e62b6462d8493cd529a0"
    text: {Maybe easiest to hit http://www.red-lang.org/ and scan for topics. Macros, libRed, Mac GUI, reactive GUI system, more...}
    sent: "2017-06-02T22:26:51.558Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e618e531dbc905a5dd9e"
    text: {Is Red now included in all GNU/Linux distros, all Mac machines, and Windows OSs?  Is Red now powering half of the Internet?}
    sent: "2017-06-02T22:26:32.210Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e5c3167d046a7d62652a"
    text: "@greggirwin so, what are the news, in a nutshell?"
    sent: "2017-06-02T22:25:07.715Z"
    editedAt: "2017-06-02T22:25:18.808Z"
    v: 2
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e5b4e531dbc905a5dbe5"
    text: {@taisantt "all ready a solution" => well, I use Rebol 2 to my greatest pleasure on a daily basis.  I wish I could switch ASAP to an open-source solution, Red.}
    sent: "2017-06-02T22:24:52.727Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e583f31c8ced0cfa13d8"
    text: {@taisantt "are there a reflexion about that" => oh yes!}
    sent: "2017-06-02T22:24:03.680Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e560cf9c13503c4a6723"
    text: "Excellent!"
    sent: "2017-06-02T22:23:28.539Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e55102c480e67208633c"
    text: {You may have a lot of catching up to do. Team Red has been busy.}
    sent: "2017-06-02T22:23:13.032Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e545142826e97279e312"
    text: "Thanks!"
    sent: "2017-06-02T22:23:01.294Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e53d167d046a7d62639b"
    text: "Welcome back!"
    sent: "2017-06-02T22:22:53.171Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e52b7503e2b706063a20"
    text: {Hello everybody!  I've been out for a long while, just got back from Africa.  And still Rebolling.  Redding a bit.}
    sent: "2017-06-02T22:22:35.268Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e4e86462d8493cd52566"
    text: "Bonsoir @taisantt !"
    sent: "2017-06-02T22:21:28.736Z"
    v: 1
    author: "55f2cadc0fc9f982beb060a1"
) #(
    id: "5931e49c02c480e6720860e1"
    text: {I don't know if Henrik is in this room, but he would know faster than anyone, as it's based on his code.}
    sent: "2017-06-02T22:20:12.628Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e443f31c8ced0cfa0f17"
    text: {There's a bit going on in there, so I can't tell at a glance what it might be.}
    sent: "2017-06-02T22:18:43.166Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e40f31f589c64f6c1706"
    text: {@michaelcmccann_twitter, if you can say exactly what problem you're encountering, that would help.}
    sent: "2017-06-02T22:17:51.733Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e3e7142826e97279dd8e"
    text: {@michaelcmccann_twitter, will scan shortly.^/^/@taisantt you may try https://gitter.im/red/red/France, but of course you're welcome here too. :^^) Red is the solution you're asking about. If you visit https://github.com/red/red, the readme will tell you quite a bit, and https://github.com/red/red/wiki has links to more resources.}
    sent: "2017-06-02T22:17:11.007Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931e26a02c480e6720858f5"
    text: "or all ready a solution"
    sent: "2017-06-02T22:10:50.484Z"
    v: 1
    author: "5931e0ecd73408ce4f644ae1"
) #(
    id: "5931e256167d046a7d625921"
    text: "are there a reflexion about that ?"
    sent: "2017-06-02T22:10:30.517Z"
    v: 1
    author: "5931e0ecd73408ce4f644ae1"
) #(
    id: "5931e24a6462d8493cd51d40"
    text: {I steel have a hope of one language, but just only one for multidevice, but also for multi level(net,hardware,soft,apps)}
    sent: "2017-06-02T22:10:18.328Z"
    v: 1
    author: "5931e0ecd73408ce4f644ae1"
) #(
    id: "5931e1c3167d046a7d625792"
    text: "did we have a progress about that ?"
    sent: "2017-06-02T22:08:03.445Z"
    v: 1
    author: "5931e0ecd73408ce4f644ae1"
) #(
    id: "5931e1b1ca6d4ae80cd6e2e7"
    text: {I always waiting thing concerning the web, mobile etc ...}
    sent: "2017-06-02T22:07:45.062Z"
    v: 1
    author: "5931e0ecd73408ce4f644ae1"
) #(
    id: "5931e17de531dbc905a5cc98"
    text: "and as the world of programming is !"
    sent: "2017-06-02T22:06:53.469Z"
    v: 1
    author: "5931e0ecd73408ce4f644ae1"
) #(
    id: "5931e16a6462d8493cd51a0c"
    text: "i follow rebol and  red also for a time"
    sent: "2017-06-02T22:06:34.082Z"
    v: 1
    author: "5931e0ecd73408ce4f644ae1"
) #(
    id: "5931e12e02c480e6720853c2"
    text: "my english may be will be no perfect"
    sent: "2017-06-02T22:05:34.425Z"
    v: 1
    author: "5931e0ecd73408ce4f644ae1"
) #(
    id: "5931e113167d046a7d6254ab"
    text: "Hello I'm a french one"
    sent: "2017-06-02T22:05:07.661Z"
    v: 1
    author: "5931e0ecd73408ce4f644ae1"
) #(
    id: "5931ddb66462d8493cd50c71"
    text: {Hello, I'm new to Red, but have been using REBOL awhile. A relations engine I use that runs in R2 core won't run in Red. I'm wondering if one of you could take a look at the code, at the link below, and suggest changes to make it work. Thanks! https://web.archive.org/web/20090629061029/http://www.hmkdesign.dk/rebol/relationsengine/relations.r  Here's a doc that explains how the relations engine works: https://web.archive.org/web/20090915173011/http://hmkdesign.dk:80/rebol/relationsengine/relations.txt}
    sent: "2017-06-02T21:50:46.431Z"
    v: 1
    author: "5931c45cd73408ce4f644582"
) #(
    id: "5931b4156549436c7d0de272"
    text: {I should have known it was possible. Including ASM in QB was one of my favorite features in a "toy" language. PowerBASIC went even further. Sad that it seems to have stalled since Bob Zale passed away.}
    sent: "2017-06-02T18:53:09.025Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5931a955142826e97278dabb"
    text: {btw, R/S turned out to be not that scary as I thought, even simplier than C.}
    sent: "2017-06-02T18:07:17.764Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5931a560e531dbc905a4c75c"
    text: "@greggirwin even the mighty shall fall... ;)"
    sent: "2017-06-02T17:50:24.613Z"
    editedAt: "2017-06-02T17:51:00.648Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5931a2fc7503e2b706052527"
    text: {I do remember only old tricks, Commodore 64 floppy drives, made some sounds reading/writing the data, so guys made it to make some mellody ...}
    sent: "2017-06-02T17:40:12.723Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "5931a1e16462d8493cd3fda9"
    text: {> you can code it in an assembler and include the resulting binary inside a R/S function ^/^/I never knew that was possible! I learn new things every day.}
    sent: "2017-06-02T17:35:29.009Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59319f54e531dbc905a4aca8"
    text: {There's an excellent [series of papers](https://arxiv.org/find/all/1/all:+Guri/0/1/0/all/0/1) about such stuff from Ben Gurion University}
    sent: "2017-06-02T17:24:36.127Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59319ecbca6d4ae80cd5cdee"
    text: {It's always amazing to see what people can achieve by leveraging electromagnetic emissions of PCs. ;-) I read an article a few weeks ago about a technic for guessing digits typed on a smartphone, by using machine learning on the accelerometer data recorded while typing. ;-)}
    sent: "2017-06-02T17:22:19.697Z"
    editedAt: "2017-06-02T17:22:57.208Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59319e5ef2dd2dba06626062"
    text: {@dockimbel yeah, I thought about that, but, as I understand, it's very platform-dependent}
    sent: "2017-06-02T17:20:30.474Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59319df7f2dd2dba06625e7a"
    text: "graduate diploma with tin foil hats, you know"
    sent: "2017-06-02T17:18:47.247Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59319d9b6462d8493cd3ead0"
    text: {You haven't seen the one which shows two PC communicating with each over via "thermal pings" from their heated system units ;)}
    sent: "2017-06-02T17:17:15.543Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59319c99eb257a8725d0bdba"
    text: {Looking at the front page of that paper... :-) For ch.5, you can't do that with R/S only for now, though you can code it in an assembler and include the resulting binary inside a R/S function (though I may have removed such option since early days of R/S...).}
    sent: "2017-06-02T17:12:57.824Z"
    editedAt: "2017-06-02T17:18:32.839Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59319bed02c480e672072c4f"
    text: {@dockimbel you're right, excuse me my newbiness, it's "multiple memory channels", not "multiple processing units". I just need CPU to write really huge chunks of bytes into RAM and keep RAM bus busy (that's what SIMD and parallelism can do, correct?). Though it could be much easier for me to leave [this](https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-guri-update.pdf) for you as a weekend reading (ch. 5 specifically) ;)}
    sent: "2017-06-02T17:10:05.884Z"
    editedAt: "2017-06-02T17:11:42.779Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59319bae167d046a7d612615"
    text: {`make RAM bus very busy` should be achieved by any tight loop intensively reading/writing 32-bit values in memory (until we get 64-bit support). Such operations will go through the caches, there is no specific cache control instructions emitted by the compiler. Such optimizations are planned for 2.0.}
    sent: "2017-06-02T17:09:02.565Z"
    editedAt: "2017-06-02T17:10:29.214Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59319adc6549436c7d0d77e4"
    text: {Codebase: `grep` is your friend on Unix, or any equivalent feature in your Code editor. I have a "Find in files" feature (<=> `grep`) in my main code editor, which I use dozens of time everyday to navigate through the source code.}
    sent: "2017-06-02T17:05:32.025Z"
    editedAt: "2017-06-02T17:06:54.111Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "593199d07503e2b70604f69d"
    text: {@9214 I don't remember any instruction on Intel/ARM capable of using multiple processing units at once, maybe you're thinking about hyperthreading?}
    sent: "2017-06-02T17:01:04.405Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5931982e6462d8493cd3d02a"
    text: {@dockimbel thanks Nenad!^/^/By "multi-channel" I meant instructions which use multiple processing units at once (frankly I'm not completely sure what I'm talking about :D guh, noobiness).  I think in real worlds it's called parallelism ;) Perhaps what I want in my case is something that can be considered "costly" operation which fully loads primary system bus and avoids caching mechanism, like SIMD `MOVNTDQ` instruction.^/^/About codebase: are there any tips for newcomers on how to navigate it? Sometimes I know that my answer is in the sources (like with `fpu/type` above), but I'm not sure where to find it :(}
    sent: "2017-06-02T16:54:06.239Z"
    editedAt: "2017-06-02T17:00:44.060Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5931951402c480e672070ee7"
    text: {@9214 ^/* SIMD:  we certainly want it, might happen in a 0.9.x version, or post 1.0. Direct access to XMM registers will be possible, though you'll have specific R/S types to abstract SIMD operations.^/* Multi-channel: no plans for that before 1.0 (not sure what are the `multi-channel commands ` you're referring to).^/* Search in the source code, definitions are there (we should probably replace it with an #enum): https://github.com/red/red/blob/master/system/runtime/system.reds#L14. Currently Red relies only on the x87 FPU, SSE is not yet used for general floats support, though such support should happen before 1.0.^/}
    sent: "2017-06-02T16:40:52.152Z"
    editedAt: "2017-06-02T16:43:50.425Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59318e19f2dd2dba06620e90"
    text: "@meijeru thanks!"
    sent: "2017-06-02T16:11:05.864Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "593180dbca6d4ae80cd53d74"
    text: {@9214: see in the sources `%system/runtime/system.reds` for your last question}
    sent: "2017-06-02T15:14:35.013Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5931462b7503e2b706036752"
    text: {Aha, Trello says concurrency is planed for `0.9.0`}
    sent: "2017-06-02T11:04:11.422Z"
    editedAt: "2017-06-02T11:04:21.031Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "593142fe6462d8493cd22acd"
    text: {* Any ETA on concurrency support in Red?^/* Is it possible (or will be possible) to call SIMD instructions from R/S? Or work directly with `xmm[0-7]` registers (currently this feature limited to IA32)?^/* Aside from concurrency and data level parallelism, how can I exploit multi-channel commands (i.e. how can I make RAM bus very busy) in Red or R/S? Maybe `system/fpu` and floating-point bit diddling will do?^/* In R/S, `print system/fpu/type` returns `1`, honestly I don't know how to interpret it :( (see [R/S specs](http://static.red-lang.org/red-system-specs.html#section-13.10)). Does it mean x87 FPU or SSE?}
    sent: "2017-06-02T10:50:38.159Z"
    editedAt: "2017-06-02T10:59:58.089Z"
    v: 6
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59306771142826e97273b29f"
    text: {People reach for comparisons. Many languages are written in C so I can see how C semantics would leak over to the new language }
    sent: "2017-06-01T19:13:53.864Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592fcc5ecb83ba6a411cc79b"
    text: "I definitely agreed on that."
    sent: "2017-06-01T08:12:14.318Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "592fcc1f5e34568d5eb035af"
    text: {"Most languages" are so different than Redbol, that such comparison is quite pointless. What makes sense in one language probably doesn't in another. Many of mainstream languages, are by default, just copying C semantics, which is a bad idea if the language is higher-level.}
    sent: "2017-06-01T08:11:11.727Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592fcc17fa63ba2f769e883e"
    text: {@dockimbel I didn't know that! That's another difference with R2 (R3 is same with Red, sorry R2 is still my main language)^/```^/R2> make logic! 0^/== false^/R2> to logic! 0^/== false^/```}
    sent: "2017-06-01T08:11:03.019Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "592fcadd5e34568d5eb02ee9"
    text: {@endo64 ^/```lisp^/>> to logic! 0^/== true^/>> make logic! 0^/== false^/```}
    sent: "2017-06-01T08:05:49.792Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592fca6838b37b982845faa6"
    text: {About logic!, most new comers expect `to logic! 0` and `to logic! ""` is  `false` as in most language (ex. PHP)^/```^/(bool) 'x'; // true^/(bool) '';  // false^/(bool) 3;   // true^/(bool) 0;   // false^/```^/}
    sent: "2017-06-01T08:03:52.146Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "592f79a33aeff8a61f64b9d7"
    text: {@gltewalt Redbol languages are based on denotational semantics, where the meaning of every expression needs to have a representation in the language itself. Every expression needs to return a value. Without `unset!` there would be a hole in the language, several fundamental semantic rules would be collapsing, e.g. `reduce [1 print ""] => [1]` (reducing 2 expressions would return 1 expression).}
    sent: "2017-06-01T02:19:15.534Z"
    editedAt: "2017-06-01T02:25:00.429Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592f17fd5e34568d5ead6b1e"
    text: "Yes, that makes sense."
    sent: "2017-05-31T19:22:37.312Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592f17ebfcbbe1891c63b437"
    text: {Maybe a section on `unset!` in general, and why it exists?}
    sent: "2017-05-31T19:22:19.690Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f17cdcb83ba6a411a170e"
    text: "Ok"
    sent: "2017-05-31T19:21:49.965Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f177cf3001cd34279aa1b"
    text: {@gltewalt I think you said it right, but I don't think it's worth putting there. Do people really need functions that return `unset!` that much? IMO it's easier to ignore returned value than make functions return `unset!`.}
    sent: "2017-05-31T19:20:28.471Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592f168c0a783b6c0af37fcb"
    text: {Is there a better way to say this? And is it worth putting into a Primer?^/```^/To create a function that returns unset! instead of ^/a traditional return value, use exit.^/^/>> example: func [value] [value]^/== func [value][value]^/>> example "value"^/== "value"^/>> example: func [value] [value exit]^/== func [value][value exit]^/>> example "value"^/>>^/>> type? example "value"^/== unset!^/>>^/```}
    sent: "2017-05-31T19:16:28.434Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592f035cfa63ba2f769b7fd4"
    text: {@gltewalt We have such hooks in our plans, though probably not in the current release, maybe the next one.}
    sent: "2017-05-31T17:54:36.517Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592f02ce3aeff8a61f62d7e9"
    text: {For noobies (like me) `old-falsey?: func [val][either to-logic val [parse to-string val ["0" | ""]][true]]`}
    sent: "2017-05-31T17:52:14.280Z"
    editedAt: "2017-05-31T17:52:24.844Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "592efedb0a783b6c0af30708"
    text: {@dockimbel Yes, the evaluation stack. Having handles to retrieve stack information. ^/It's probably necessary for writing Trace or Debug utilities, isn't it?}
    sent: "2017-05-31T17:35:23.783Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592efd920ba4d59763fbece8"
    text: "@greggirwin Thanks for starting it!"
    sent: "2017-05-31T17:29:54.704Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592efd6438b37b982842cf49"
    text: {@gltewalt You mean the Red evaluation stack? What kind of hooks are you thinking about?}
    sent: "2017-05-31T17:29:08.989Z"
    editedAt: "2017-05-31T17:29:15.770Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592efd0e631b8e4e612fc89c"
    text: "https://github.com/red/red/wiki/Primer"
    sent: "2017-05-31T17:27:42.139Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592efc5ecb83ba6a41198b6c"
    text: {@dockimbel Are there currently undocumented hooks for the stack in Red, or are they to be implemented for the next release?}
    sent: "2017-05-31T17:24:46.311Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592efb41fcbbe1891c631ac6"
    text: ":smile: "
    sent: "2017-05-31T17:20:01.722Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592efae30a783b6c0af2f2bc"
    text: {@gltewalt The wiki on red/red is there for that, it's public, you can write there. ;-) A page listing all the apparent "traps/gotchas" is welcome, so we can check it while writing the Red docs.}
    sent: "2017-05-31T17:18:27.352Z"
    editedAt: "2017-05-31T17:20:47.122Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592efab02b926f8a67af571d"
    text: {A problem I have is that I will think, "x y and z seem to cause confusion and would be a good document addition",  but then I forget about it}
    sent: "2017-05-31T17:17:36.280Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592efa8a2b926f8a67af562c"
    text: {@gltewalt Yes, trying to use your knowledge from other languages will just get in the way. }
    sent: "2017-05-31T17:16:58.715Z"
    editedAt: "2017-05-31T17:17:17.354Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592efa843aeff8a61f62b214"
    text: {But as I see, people usually do not read it anyway ;)}
    sent: "2017-05-31T17:16:52.785Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592efa6a3aeff8a61f62b1d1"
    text: {I see. Good points to mention in documentation then.}
    sent: "2017-05-31T17:16:26.045Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592efa4dfcbbe1891c6315aa"
    text: {I'm not saying anything is wrong. Just my feedback on what I see tripping people up}
    sent: "2017-05-31T17:15:57.959Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592efa21631b8e4e612fb9df"
    text: {The latter with logic!^/I don't think a lot of people are used to everything being true except for false and none}
    sent: "2017-05-31T17:15:13.702Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592efa1fc4d73f445a0116ca"
    text: {@gltewalt But then this won't work:^/```^/>> a: 1^/== 1^/>> a^/== 1^/```}
    sent: "2017-05-31T17:15:11.418Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592ef9df00efc2bb3ec2a07f"
    text: {Sure, but newcomers expect 'a to return 'a, from what I've noticed}
    sent: "2017-05-31T17:14:07.487Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592ef9d10a783b6c0af2ecf6"
    text: "What about `logic!` is confusing?"
    sent: "2017-05-31T17:13:53.724Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592ef9ce0a783b6c0af2ecf2"
    text: {@gltewalt What about `logic!`? Is it the word representation of the two logic! values which is causing trouble, or the fact that all values are treated as `true` except `false` and `none`?}
    sent: "2017-05-31T17:13:50.042Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592ef9b3c4d73f445a01146b"
    text: {Don't think of `lit-word!` as different from any other word. They all evaluate.^/```^/>> 'a^/== a^/>> a^/*** Script Error: a has no value^/*** Where: catch^/>> :a^/>> a:^/*** Script Error: a: needs a value^/*** Where: a^/```}
    sent: "2017-05-31T17:13:23.814Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592ef9575e34568d5eacdaf9"
    text: {lit-word! unset! logic!^/In the top 5 of Surprise and Alarm. ^/Making a paper on the top 5 traps would be a great document}
    sent: "2017-05-31T17:11:51.860Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "592ef915fa63ba2f769b4c61"
    text: {> unset! also wreaks havoc. It's a chain breaker. ^/^/That's precisely its purpose, to generate errors in order to signal logical issues in the code.}
    sent: "2017-05-31T17:10:45.287Z"
    editedAt: "2017-05-31T17:11:42.086Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592ef8f4f3001cd3427914c9"
    text: {@gltewalt `'word` evaluating to `word` is a basic evaluation rule overlooked by many when reading the (Rebol) docs. We'll try to improve that in the Red docs.}
    sent: "2017-05-31T17:10:12.673Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592ef88fcb83ba6a41197584"
    text: "unset! also wreaks havoc. It's a chain breaker. "
    sent: "2017-05-31T17:08:31.514Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "592ef830cb83ba6a4119733a"
    text: {'word is a sneaky snake in the repl. By the time output is shown it has decayed into (or been evaluated to) word. ^/I think it's within the top 5 "gotchas" for Red explorers. }
    sent: "2017-05-31T17:06:56.863Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59299794eec422e415f44594"
    text: ":D"
    sent: "2017-05-27T15:13:24.203Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59299788c4d73f445aec9c01"
    text: {Usually it's Bolek that beats me like that. You guys must have a system. ;^^)}
    sent: "2017-05-27T15:13:12.480Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592997625e34568d5e97d119"
    text: "@greggirwin Almost at the same time :)"
    sent: "2017-05-27T15:12:34.020Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5929975eeec422e415f4452e"
    text: ":^^)"
    sent: "2017-05-27T15:12:30.176Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5929973b631b8e4e611b13dc"
    text: {*But*, `help` uses a `lit-word!` argument, which is what may be confusing. It's an advanced technique which prevents the argument from being evaluated.}
    sent: "2017-05-27T15:11:55.937Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5929973500efc2bb3eadc2af"
    text: {@sergey6661313 And probably you are wondering why it is evaluated in `lit-word? 'a` but not in `help 'a`, check the source of `help` function:^/```^/>> ? help^/USAGE:^/      help 'word^/ARGUMENTS:^/     'word   [any-type!]  => Word you are looking for.^/```^/Note that the single quote in the argument.}
    sent: "2017-05-27T15:11:49.284Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "592965acfa63ba2f7685dd0f"
    text: {```lisp^/>> to-lit-word 'a^/== 'a^/```}
    sent: "2017-05-27T11:40:28.715Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5929658dc4d73f445aebf879"
    text: {So when you are passing `'a` as an argument, it will evaluate to a `word!` before reaching the caller function.}
    sent: "2017-05-27T11:39:57.114Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592965362b926f8a6799ddf3"
    text: {@sergey6661313 ^/```lisp^/>> 'a         ;-- a lit-word!^/== a          ;-- evaluates to a word!^/```}
    sent: "2017-05-27T11:38:30.992Z"
    editedAt: "2017-05-27T11:38:46.095Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59293c4d00efc2bb3eac9f8a"
    text: {Check this out:^/```^/>> b: [a 'a] reduce [word? b/1 word? b/2 lit-word? b/1 lit-word? b/2]^/== [true false false true]^/```}
    sent: "2017-05-27T08:43:57.256Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59293bd3eec422e415f323cc"
    text: {```^/>> lit-word? first ['a]^/== true^/```^/Probably you are on console and your `'a` evaluates to `a` which is not a lit-word but a word.^/}
    sent: "2017-05-27T08:41:55.218Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "59293b620ba4d59763e69a2b"
    text: {I again do not understand anything:^/```^/>> help 'a^/'a is a lit-word!^/^/>> lit-word? 'a^/== false^/```}
    sent: "2017-05-27T08:40:02.404Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5928f580eec422e415f254f4"
    text: "I tested with stdin, yes."
    sent: "2017-05-27T03:41:52.891Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5928f557631b8e4e61192648"
    text: "Ah, yes. Read from stdin does not work."
    sent: "2017-05-27T03:41:11.361Z"
    editedAt: "2017-05-27T03:49:56.089Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5928f453eec422e415f250d6"
    text: {On Linux with pipe:^/```shell^/qtxie@ubuntu:~/Red$ ./console red/tests/hello.red | grep 'den'^/Dobrý den světe^/```}
    sent: "2017-05-27T03:36:51.799Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5928f3c00a783b6c0adc32fe"
    text: {@dockimbel I tried this one, it works:^/```^/D:\Dev>console red\tests\hello.red >> redirect.txt^/```}
    sent: "2017-05-27T03:34:24.270Z"
    editedAt: "2017-05-27T03:34:44.956Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5928f08b5e34568d5e95d850"
    text: {@qtxie I can't make it work from DOS using the CLI console...}
    sent: "2017-05-27T03:20:43.624Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5928d01c2b926f8a67982702"
    text: {Also if you want to write to stdout in Red, there is a temporary routine `write-stdout` in the runtime. I use it in VSCode plugin.}
    sent: "2017-05-27T01:02:20.928Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5928ce8e00efc2bb3eab5ffd"
    text: {Yes. I think the CLI console supports I/O redirection.}
    sent: "2017-05-27T00:55:42.277Z"
    editedAt: "2017-05-27T00:56:13.770Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "5928810c0ba4d59763e4516a"
    text: "I don't assume it to be a task of high priority"
    sent: "2017-05-26T19:25:00.201Z"
    editedAt: "2017-05-26T19:30:57.371Z"
    v: 3
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "59286fd3c4d73f445ae8c446"
    text: {If you want to add support for I/O redirection, you can start by looking [here](https://github.com/red/red/blob/master/environment/console/engine.red#L44) and [there](https://github.com/red/red/blob/master/environment/console/engine.red#L85).}
    sent: "2017-05-26T18:11:31.138Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59286bd5fcbbe1891c4a7a9f"
    text: {Currently I've only tried on Windows 7 64bit, though I also have a 64bit Linux system}
    sent: "2017-05-26T17:54:29.561Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "59286b9fcb83ba6a4100e02e"
    text: {@nulldatamap BTW, on which platform are you running it?}
    sent: "2017-05-26T17:53:35.432Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59286b6d0a783b6c0ada5a46"
    text: {@qtxie ^^--- Do we already support standard I/O redirection in Red console?}
    sent: "2017-05-26T17:52:45.579Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59286b402b926f8a6796b187"
    text: "I pushed a fix for the wrapper script."
    sent: "2017-05-26T17:52:00.569Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59286a830ba4d59763e3ebc2"
    text: {Yeah because piping to the REPL executable still the halts the program}
    sent: "2017-05-26T17:48:51.604Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "59286a32eec422e415f06f68"
    text: {@nulldatamap For the REPL, I think it should work already, though I don't remember testing it, @qtxie should know better. For the `red` executable, it's a bit more complicated, as it contains the toolchain code wrapped with a Rebol executable to run it. Rebol has a `--cgi` option to enable I/O redirections, let me try if enabling that would make it work...}
    sent: "2017-05-26T17:47:30.833Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592863f7fa63ba2f7682821d"
    text: {@dockimbel thanks, where should I start digging into the code if I want to contribute to make piping work?}
    sent: "2017-05-26T17:20:55.944Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "59285a8af3001cd342602823"
    text: {@nulldatamap Then in such case, using the console executable directly would be a better way. The `red` executable is just a convenient wrapper over it. You can find the precompiled console in `c:\programdata\red` on Windows and in `~$HOME/.red/` on other platforms.}
    sent: "2017-05-26T16:40:42.234Z"
    editedAt: "2017-05-26T16:40:50.755Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "592858c5c4d73f445ae862a1"
    text: {I'm trying to connect to the Red REPL with emacs which is done by piping.}
    sent: "2017-05-26T16:33:09.844Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "592846b35e34568d5e93682c"
    text: {@nulldatamap I don't think redirections from command-line are properly supported yet. Were you trying to pipe in a Red script?}
    sent: "2017-05-26T15:16:03.309Z"
    editedAt: "2017-05-26T15:16:06.617Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5928294e0ba4d59763e2c46c"
    text: "that is a really cool way to make a map"
    sent: "2017-05-26T13:10:38.908Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59277685eec422e415ecc534"
    text: "Thanks. :^^)"
    sent: "2017-05-26T00:27:49.648Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59277673fa63ba2f767ebd0f"
    text: {@greggirwin thanks alot - great to see you here again :smile: }
    sent: "2017-05-26T00:27:31.666Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "592776410a783b6c0ad68ff5"
    text: {@michaeldesu, they work the same, yes. There's a bit of sugar to make things easier.^/```^/>> keys-of a: make map! [x 1 y 2 z 3]^/== [x y z]^/>> keys-of b: make map! [x: 1 y: 2 z: 3]^/== [x y z]^/```}
    sent: "2017-05-26T00:26:41.564Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "592774b100efc2bb3ea60d75"
    text: {with the recent map discussion, I have a question - are the following two ways to create a map (with data) identical?^/```^/>> a: make map! [x 1 y 2 z 3]^/>> b: make map! [x: 1 y: 2 z: 3]^/```^/it seems so. I thought it was the former method, but often seeing the later above}
    sent: "2017-05-26T00:20:01.492Z"
    editedAt: "2017-05-26T00:21:21.999Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "592774235e34568d5e9039d4"
    text: {@AlexanderBaggett, I don't think that feature is in place yet.}
    sent: "2017-05-26T00:17:39.459Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5927740a9f4f4ab05bffe6e3"
    text: {@dander, it's the `unset!` arg (or lack thereof) that trips it up. If you create a new typeset, just adding `unset!` to `default!`, it works.}
    sent: "2017-05-26T00:17:14.887Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5927734eeec422e415ecbbf8"
    text: "`ask` is in the console code, in %input.red."
    sent: "2017-05-26T00:14:06.718Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5927485d631b8e4e6112caa5"
    text: {How come I can't compile a script that uses `ask`? It says the word is not defined}
    sent: "2017-05-25T21:10:53.296Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "5927349d9f4f4ab05bff03ec"
    text: {so I noticed that the `lit-word!` function trick works when it's defined as `any-type!`,  but not for parameters that don't have type(s) defined. Any reason for that difference? I was thinking of the parameter type block as a constraint on evaluation.}
    sent: "2017-05-25T19:46:37.579Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "592730795e34568d5e8f3e13"
    text: {is there a way to get the selected text of a text-area?}
    sent: "2017-05-25T19:28:57.240Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59272d3ceec422e415ebbaf1"
    text: {```^/^-; I have this here because some old format code I'm porting uses it.^/^-; It may all change to `rejoin`, but it gave me a reason to port `join`^/^-; to Red for real and think about object/map support. `Rejoin` doesn't^/^-; work for those. The question, then, is what value there is in a^/^-; uniform interface for copy+extend.^/^-join: func [^/^-^-"Concatenate/merge values"^/^-^-a "Coerced to string if not a series, map, or object"^/^-^-b "Single value or block of values; reduced if `a` is not an object or map"^/^-][^/^-^-if all [block? :b  not object? :a  not map? :a] [b: reduce b]^/^-^-case [^/^-^-^-series? :a [append copy a :b]^/^-^-^-map?    :a [extend copy a :b]^/^-^-^-object? :a [make a :b]^/^-^-^-'else      [append form :a :b]^/^-^-]^/^-]^/```}
    sent: "2017-05-25T19:15:08.854Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59272d39fa63ba2f767dad1c"
    text: {@9214 I'll try not to ask stupid questions anymore :)}
    sent: "2017-05-25T19:15:05.386Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "59272c2beec422e415ebb67f"
    text: {```^/>> append "super" "duper"^/== "superduper"^/```}
    sent: "2017-05-25T19:10:35.928Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59272c14c4d73f445ae3c763"
    text: {@sergey6661313 ^/```^/>> type? :join^/== unset!^/```^/there's no `join` function}
    sent: "2017-05-25T19:10:12.543Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "59272b36c4d73f445ae3c349"
    text: {please tell me what I'm doing wrong?^/ ```^/>> join "super" "duper"^/**  Script Error: join has no value^/**  Where: catch^/ ```^/}
    sent: "2017-05-25T19:06:30.360Z"
    editedAt: "2017-05-25T19:07:07.040Z"
    v: 3
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "592727830a783b6c0ad563f4"
    text: {```^/table: object [^/    list-of-humans: copy []^/    ^/    next-id: does [add length? self/list-of-humans 1]^/    update: function [entry] [append self/list-of-humans entry]^/    find: function [id] [^/        foreach obj self/list-of-humans [^/            if obj/id = id [return obj]^/        ]^/    ]^/    delete: function [id] [^/        remove system/words/find self/list-of-humans find id^/    ]^/        ^/]^/^/entry: object [^/    id: name: none^/]^/^/table/update make entry [^/    id: table/next-id^/    name: "Сергей"^/    additional-info: "I code in Red"^/]^/^/table/update make entry [^/    id: table/next-id^/    name: "Владимир"^/    age: 3000^/    answer: 42^/]^/^/table/update make entry [^/    id: table/next-id^/    name: "Alice"^/]^/^/probe table/list-of-humans ; Alice is here^/table/delete 3^/probe table/list-of-humans ; Alice is gone :(^/```}
    sent: "2017-05-25T18:50:43.568Z"
    editedAt: "2017-05-25T19:00:11.378Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "592727609f4f4ab05bfec7c2"
    text: {@sergey6661313 so, in my example, you want to delete entry by id?}
    sent: "2017-05-25T18:50:08.825Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "592726c1fa63ba2f767d92b7"
    text: {very interesting. So basically the function consumes as many args as it wants, and any extra are still evaluated, but ignored because of where they are evaluated. I haven't seen a technique like that used anywhere else}
    sent: "2017-05-25T18:47:29.894Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59271d12fa63ba2f767d6a9f"
    text: {The `lit-word!` trick can be used, very effectively, in CLI scenarios, where the function can prompt for more details and args in an interrogative fashion.}
    sent: "2017-05-25T18:06:10.574Z"
    editedAt: "2017-05-25T18:06:34.971Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59271c915e34568d5e8ee7e5"
    text: {Old experiment:^/```^/map-js: func [^/^-"Evaluates a function for all values in a series and returns the results."^/^-series [series!]^/^-fn [any-function!] "Function to perform on each value; called with value, index, series, [? and size ?] args"^/^-;/only "Collect block types as single values"^/^-;/skip "Treat the series as fixed size records"^/^-;^-size [integer!]^/][^/^-collect [^/^-^-repeat i length? series [   ; use FORSKIP if we want to support /SKIP.^/^-^-^-keep/only fn series/:i :i :series ;:size^/^-^-]^/^-]^/]^/res: map-js [1 2 3 a b c #d #e #f] :form^/res: map-js [1 2 3 a b c #d #e #f] func [v i] [reduce [i v]]^/res: map-js [1 2 3 a b c #d #e #f] func [v i s] [reduce [i v s]]^/res: map-js "Hello World!" func [v i s] [pick s i]^/res: map-js "Hello World!" func [v] [either v = #"o" [1][0]]^-; sum result = count^/res: map-js "Hello World!" func [v i] [if v = #"o" [i]]^-^-^-; remove none! values to keep only index values^/res: map-js "Hello World!" func [v i s] [if v = #"o" [at s i]]^-; remove none! values to keep only series offsets^/```}
    sent: "2017-05-25T18:04:01.508Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59271c695e34568d5e8ee6bd"
    text: {You can also go the other way, and pass extra args that may not be consumed. Again, care is required.}
    sent: "2017-05-25T18:03:21.980Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59271c15fcbbe1891c453b70"
    text: {The `lit-word!` param is the trick there, yes. You can change that and get the error you expect. It's not something you want to do, in general. Easy to get wrong with free ranging stuff, but that's how `help` knows whether you asked for something specific as well.}
    sent: "2017-05-25T18:01:57.649Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59271b4feec422e415eb6b75"
    text: {@greggirwin It's nice to see you back again. I'm always learning so much from you. The `prn+` example surprised me. I thought functions always had to be fed the correct number of arguments. Is that special behavior related to `lit-word!` argument definitions? Why don't we get a `prn+ is missing its ... argument` error?}
    sent: "2017-05-25T17:58:39.470Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59271927eec422e415eb6045"
    text: {Hmm, `red --cli` halts and uses my entire CPU when I try to pipe input into it}
    sent: "2017-05-25T17:49:27.452Z"
    editedAt: "2017-05-25T17:49:54.963Z"
    v: 2
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "592715255e34568d5e8ec4c2"
    text: "%system/assets/ has some %.ico files in it."
    sent: "2017-05-25T17:32:21.596Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59271418fcbbe1891c451652"
    text: {Is there another Red Languange icon i could use besides this: }
    sent: "2017-05-25T17:27:52.382Z"
    v: 1
    author: "5581b27015522ed4b3e20ee8"
) #(
    id: "5927140f2b926f8a67916173"
    text: {[![image.png](https://files.gitter.im/red/red/welcome/shrZ/thumb/image.png)](https://files.gitter.im/red/red/welcome/shrZ/image.png)}
    sent: "2017-05-25T17:27:43.333Z"
    v: 1
    author: "5581b27015522ed4b3e20ee8"
) #(
    id: "592711d3631b8e4e6111c5c0"
    text: {It's a difference in how maps work, so an easy mistake to make as you get used to things.}
    sent: "2017-05-25T17:18:11.887Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5927119600efc2bb3ea487fc"
    text: {@greggirwin Thanks earned. Probably me already brains buggy. I do not know why I used the remove / part command instead of just none.}
    sent: "2017-05-25T17:17:10.244Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "59270f6cf3001cd3425afc96"
    text: "I'm afraid I'm still not clear on the problem."
    sent: "2017-05-25T17:07:56.811Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59270f04631b8e4e6111b7c2"
    text: {@greggirwin I asked about the example of objects ... And in your example, just the problem that I described above arises. I decided to use "id" for a reason. And that would be the key to which you could delete the record.^/It is necessary that it was like in python^/Table = {key: value}^/Table.remove (key)}
    sent: "2017-05-25T17:06:12.568Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "59270e0e631b8e4e6111b289"
    text: {With maps, you just set their value to `none`.^/```^/>> m: #(a: 11 b 22 3 33 "4" 44)^/== #(^/    a: 11^/    b: 22^/    3 33^/    "4" 44^/)^/>> m/3: none^/== none^/>> m^/== #(^/    a: 11^/    b: 22^/    "4" 44^/)^/```}
    sent: "2017-05-25T17:02:06.216Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59270dd75e34568d5e8ea384"
    text: {@9214 Records are obtained without keys. How can I delete them?}
    sent: "2017-05-25T17:01:11.579Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "59270c730a783b6c0ad4eede"
    text: {I don't know what you mean about `find` not working. Incrementing words is a bit of work, as you have to convert to string, modify, then back to word.}
    sent: "2017-05-25T16:55:15.669Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5927084c9f4f4ab05bfe2b78"
    text: {@greggirwin It's clear. But it is not clear how to work with this. Or replace id: integer! For example id: 'a0001 and try to work with it, but then I do not know how to increment it. Or I'll try all the same objects by advice @9214   as I originally thought ...^/Because such an option is possible: a: #(1 "test" 2 3 3 1)^/If I use the table / find function, it will not find the first three.}
    sent: "2017-05-25T16:37:32.354Z"
    editedAt: "2017-05-25T16:43:09.212Z"
    v: 3
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5927032000efc2bb3ea44685"
    text: {@sergey6661313, the reason you don't get a colon when using `new-id`as the key is because it's an integer, not a word.^/```^/>> m: #(a: 11 b 22 3 33 "4" 44)^/== #(^/    a: 11^/    b: 22^/    3 33^/    "4" 44^/)^/```}
    sent: "2017-05-25T16:15:28.807Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5927005a631b8e4e61116ff8"
    text: {Thanks @9214. Good to unplug, but had some Red withdrawals. :^^)}
    sent: "2017-05-25T16:03:38.578Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5926fd430a783b6c0ad4a6db"
    text: "@greggirwin howdy Gregg, nice to see you again :)"
    sent: "2017-05-25T15:50:27.939Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5926fcdc9f4f4ab05bfdf6a2"
    text: {@sergey6661313 IMO it's more suitable to use prototype object and inherit every entry directly from it^/```^/table: object [^/    list-of-humans: copy []^/    ^/    next-id: does [add length? self/list-of-humans 1]^/    update: function [entry] [append self/list-of-humans entry]^/    find: function [id] [^/        foreach obj self/list-of-humans [^/            if obj/id = id [return obj]^/        ]^/    ]^/]^/^/entry: object [^/    id: name: none^/]^/^/table/update make entry [^/    id: table/next-id^/    name: "Сергей"^/    additional-info: "I code in Red"^/]^/^/table/update make entry [^/    id: table/next-id^/    name: "Владимир"^/    age: 3000^/    answer: 42^/]^/^/probe table/list-of-humans ; not a pretty one :(^/probe table/find 1^/probe table/find 0 ; nope!^/```}
    sent: "2017-05-25T15:48:44.268Z"
    editedAt: "2017-05-25T15:51:44.468Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5926f91000efc2bb3ea41564"
    text: {You would have to know the context of the words, so tricky. This is something tools, like an IDE, will need to be creative with. When you have dialects, or words may be rebound, approximation is surely going to be low-hanging fruit. Anything you do for SLIME we can probably learn from.}
    sent: "2017-05-25T15:32:32.810Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5926f809fcbbe1891c4488b6"
    text: {You basically use a shortcut and it detects the bounds of the expression your cursor is inside of and evaluates it}
    sent: "2017-05-25T15:28:09.803Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "5926f7d4631b8e4e61114690"
    text: {I haven't used SLIME, but I think you're on track with approximation.}
    sent: "2017-05-25T15:27:16.286Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5926f7912b926f8a6790ce43"
    text: {Red is *very* flexible. Sometimes you have to take a deep breath, when learning it, and remember that it's by design.^/```^/>> prn+: func ['a [any-type!] 'b [any-type!]] [print [mold :a mold :b]]^/== func ['a [any-type!] 'b [any-type!]][print [mold :a mold :b]]^/>> prn+^/unset unset^/>> prn+ 1^/1 unset^/>> prn+ 1 2^/1 2^/>> do [prn+ ]^/unset unset^/>> do [prn+ ()]^/unset unset^/>> do [prn+ () 1]^/unset 1^/```}
    sent: "2017-05-25T15:26:09.744Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5926f78d0a783b6c0ad489b3"
    text: {But I guess I'll have to go with syntactic approximation and just write code that follows that guideline. The alternative is not really realistic }
    sent: "2017-05-25T15:26:05.761Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "5926f7680a783b6c0ad4891c"
    text: {I'd like to implement an evaluate expression command for emacs (like the one in SLIME for Common Lisp)}
    sent: "2017-05-25T15:25:28.281Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "5926f69f0a783b6c0ad48472"
    text: {It can make some things tricky, yeah. What are you trying to do?}
    sent: "2017-05-25T15:22:07.102Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5926f6670a783b6c0ad48378"
    text: "Ah, that's gonna make my life a lot harder then"
    sent: "2017-05-25T15:21:11.537Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "5926f630631b8e4e61113ca8"
    text: {ending expression on the same line or inside delimiters is just a preferred coding style}
    sent: "2017-05-25T15:20:16.905Z"
    editedAt: "2017-05-25T15:20:33.267Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5926f6055e34568d5e8e273c"
    text: {@nulldatamap I think the latter one, since Rebol and Red are completely freeform}
    sent: "2017-05-25T15:19:33.086Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5926f5fd631b8e4e61113b3d"
    text: {@9214, that's not how Red sees things, of course, and perhaps not even as common as you think. ^/^/@nulldatamap, Red has free-ranging evaluation, which depends on function arity in a given evaluation context.}
    sent: "2017-05-25T15:19:25.134Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5926f5c6fa63ba2f767ca7b5"
    text: {Is it definable by a grammar, or does it require information about how many arguments a function takes?}
    sent: "2017-05-25T15:18:30.441Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "5926f5805e34568d5e8e2270"
    text: {@nulldatamap usually it's newline or end of the block/parens}
    sent: "2017-05-25T15:17:20.858Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5926f5435e34568d5e8e20b4"
    text: {How do you tell syntactically when an expression ends? }
    sent: "2017-05-25T15:16:19.626Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "5926c9c600efc2bb3ea335a5"
    text: {All the same, colons of the court are important throughout. those. I have to use map!^/^/ ```^/humans: make map! [ last-id: 0 ]^/^/create-new-record: func [ ^/^-table^-[map!]^/^-info^-[map!]^/] [^/^-new-id: table/last-id + 1^-; here. What type of data should I use what was with the colon?^/^-put info 'id new-id^-^-^-; Here I get a colon^/^-put table new-id info ^-^-; But not here. ^/^-table/last-id: new-id^/]^/^/serg: make map! [^/^-name: "Сергей"^/]^/^/create-new-record humans serg^/;remove/part find humans id 1; And that it works^/help humans^/ ```}
    sent: "2017-05-25T12:10:46.218Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5926c01c0a783b6c0ad391dc"
    text: "@dockimbel  @rebolek  thx"
    sent: "2017-05-25T11:29:32.682Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5926bfd39f4f4ab05bfce2ae"
    text: {@sergey6661313 Use `try` or `attempt` if you don't want to process the error. For testing if a file exists, use the `exists?` function.}
    sent: "2017-05-25T11:28:19.036Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5926bf7e00efc2bb3ea30c44"
    text: {@sergey6661313 you can wrap your code in `try`, but ignoring exceptions doesn't seems wise ;) What exactly are you trying to do?}
    sent: "2017-05-25T11:26:54.484Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926bf1700efc2bb3ea30a24"
    text: {how to ignore exception?  try load not exist file and script stopped :(}
    sent: "2017-05-25T11:25:11.168Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5926beb9fa63ba2f767ba909"
    text: "Thanks!"
    sent: "2017-05-25T11:23:37.996Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "5926be3f00efc2bb3ea305da"
    text: {@nulldatamap compile with `-t Windows`, default target is MSDOS - console programs.}
    sent: "2017-05-25T11:21:35.341Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5926bded00efc2bb3ea3042e"
    text: {How do I make it so that compiled GUI programs on Windows don't spawn a parent console on startup?}
    sent: "2017-05-25T11:20:13.655Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "59268a3bf3001cd342589bc0"
    text: "And with an old-fashioned hairstyle."
    sent: "2017-05-25T07:39:39.850Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59267c18fa63ba2f767a9492"
    text: {@greggirwin Welcome back! Is that first one bearded? ;-)}
    sent: "2017-05-25T06:39:20.249Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59261e54631b8e4e610de655"
    text: {Though, in Red, your avatar should really be `{^^@}` or maybe ` #{00}`. ;^^)}
    sent: "2017-05-24T23:59:16.331Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "59261d05fa63ba2f76793e3d"
    text: "Hey."
    sent: "2017-05-24T23:53:41.431Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59260c120a783b6c0ad0f6bf"
    text: "Hey"
    sent: "2017-05-24T22:41:22.814Z"
    v: 1
    author: "54e751c415522ed4b3dc3f84"
) #(
    id: "5925fc432b926f8a678cda91"
    text: "@rokf, nice way to put Red to work."
    sent: "2017-05-24T21:33:55.043Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5925fa402b926f8a678cceb7"
    text: {@sergey6661313, each type has different strengths. Experimenting with them in the console, or just playground scripts, along with the examples others have given, should give you a feel for them. We should write up a primer doc, though, if we don't have one already.}
    sent: "2017-05-24T21:25:20.609Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5925a81c0a783b6c0acec892"
    text: {```^/>> m: #(x 1 x: 2)^/== #(^/    x: 2^/)^/```}
    sent: "2017-05-24T15:34:52.602Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5925a77800efc2bb3e9e0cc1"
    text: {@rebolek @sergey6661313 not necessarily equivalent with `block!`:^/```^/>> b: [x 1 x: 2]^/== [x 1 x: 2]^/>> select/same b 'x^/== 1^/>> select/same b quote x:^/== 2^/>> select/same b to set-word! 'x^/== 2^/```^/}
    sent: "2017-05-24T15:32:08.096Z"
    editedAt: "2017-05-24T15:35:34.248Z"
    v: 4
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59258c67f3001cd34253eff9"
    text: {```^/^/>> b: [x]^/== [x]^/>> b: [x 1]^/== [x 1]^/>> select b 'x^/== 1^/>> select b quote x:^/== 1^/>> select b quote :x^/== 1^/^/```}
    sent: "2017-05-24T13:36:39.303Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59258c61eec422e415e47a48"
    text: {@sergey6661313 It is normal and it won't affect usage. All word types are equivalent in block /map:}
    sent: "2017-05-24T13:36:33.137Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59258bfc00efc2bb3e9d74fc"
    text: {i try put  MyBlock  info/id info, and.  if i use map! i turns out  "id: []" . if i use block! i turns out [id []] Those  without a colon. This is normal? Will this affect the continued use?}
    sent: "2017-05-24T13:34:52.544Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "59257fd2c4d73f445adc1e8b"
    text: {```^/>> MyBlock: [ a: 0 b: 1 ]^/== [a: 0 b: 1]^/>> find MyBlock 'b^/== [b: 1]^/>> remove/part find MyBlock 'b 2^/== []^/>> MyBlock^/== [a: 0]^/```}
    sent: "2017-05-24T12:42:58.135Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59257f8e9f4f4ab05bf74914"
    text: {```^/>> MyBlock: [ a: 0 b: 1 ]^/== [a: 0 b: 1]^/>> remove/part MyBlock 2^/== [b: 1]^/>> MyBlock^/== [b: 1]^/```}
    sent: "2017-05-24T12:41:50.621Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "592566e6eec422e415e3d082"
    text: {@geekyi You understood me correctly.^/I do not like coffins in the form of "none". How to delete a record from the block correctly? ^/ ``` ^/MyMap: make map! [ a: 0 b: 1 ]^/MyMap/a: none^/print MyMap^/^/MyBlock: [ a: 0 b: 1 ]^/MyBlock/a: none^/print MyBlock^/```^/It turns out  "none, 1"  .}
    sent: "2017-05-24T10:56:38.048Z"
    editedAt: "2017-05-24T11:00:38.008Z"
    v: 5
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5924a770631b8e4e610717da"
    text: {My example above could be done better, showing more of *what to do when the structure changes*, like a new attribute getting added, etc. In general, you *never* delete attributes tho}
    sent: "2017-05-23T21:19:44.029Z"
    editedAt: "2017-05-23T21:20:00.283Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5924a6b5fa63ba2f76724184"
    text: {Actually, I don't find a reason why you cant use `make object!`: even for very flexible records, you don't generally want to delete any attribute or you would have problems. ^/The actual structure depends on your data schema. I get the feeling you want something like a document database tho (nosql, which redbol notation is much suited for)}
    sent: "2017-05-23T21:16:37.780Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5924a57100efc2bb3e99cafa"
    text: {@sergey6661313 Sorry, didn't see this.. In that case use blocks:^/```red^/; if necessary, wrap this with `products: [ bag: ... shoe: .. ]`^/bag: [^/    "Default Name"^/    other: 'Name^/    default-number: 344^/    numbers: [^/        #defaultNo.344^/        isbn: #32342^/        barcode: #sdfs^/    ]^/]^/```}
    sent: "2017-05-23T21:11:13.050Z"
    editedAt: "2017-05-23T21:13:41.463Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "592475bdf3001cd3424f5c91"
    text: {There is no code. Even the concept so far there.^/I want to combine a notebook, a phone book, office work (Office administration), a daily schedule and a production schedule.^/So I think how it will be.^/We need structures:^/Enterprise [name]^/Tasks [% of performance]^/Subtasks [requirements]^/Production hall [name, power]^/Person: [name, surname, telephone, company, division (production department)]^/Products [name, number production workshop (performer), labor intensity]^/^/But the trick is that some products sometimes have 2 or more numbers.^/Sometimes a few performers. Sometimes workers work on 2 shops at once. etc.^/In short, for flexible production, very flexible OOP facilities are needed}
    sent: "2017-05-23T17:47:41.555Z"
    editedAt: "2017-05-23T17:54:16.619Z"
    v: 3
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "59245511f3001cd3424eb1e7"
    text: {:laughing:  (sorry, I imagined that as "really want to :worried:")^/@sergey6661313  maybe you're trying to bend Red to do OOP? There's probably an easier way to do what you want.. Posting example code helps}
    sent: "2017-05-23T15:28:17.935Z"
    editedAt: "2017-05-23T15:30:00.825Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "592426a6fa63ba2f766fa7e8"
    text: "Maybe not right, but really want to."
    sent: "2017-05-23T12:10:14.214Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "592417be00efc2bb3e970a24"
    text: {@sergey6661313 Objects provide a namespace, maps do not. If you need to delete words from objects, you are probably using the wrong datatype, you should be using blocks or maps if you really need an associative data structure.}
    sent: "2017-05-23T11:06:38.547Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5924155d0a783b6c0ac7cfe7"
    text: "Or you can use literal syntax: `m: #(x: 1 y: 2)`"
    sent: "2017-05-23T10:56:29.563Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5924153d92217cca58a51ecc"
    text: "What is the advantage of objects?"
    sent: "2017-05-23T10:55:57.673Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "59241521f3001cd3424d5aff"
    text: "thx!"
    sent: "2017-05-23T10:55:29.007Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "592415150a783b6c0ac7cd9f"
    text: "O00ooo..."
    sent: "2017-05-23T10:55:17.426Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "592414eb631b8e4e61043503"
    text: {It is easy :)^/```^/m: make map! [x: 1 y: 2]^/m/x: none^/probe m^/```}
    sent: "2017-05-23T10:54:35.734Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592414a0f3001cd3424d5957"
    text: "I do not know how to use them :)"
    sent: "2017-05-23T10:53:20.327Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "592414785e34568d5e81888a"
    text: {Why not use maps, where you can easily remove keys?}
    sent: "2017-05-23T10:52:40.640Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5924143292217cca58a5184e"
    text: {example  a: make object! [b: 1 c: 2]   how get  object!   like "a" but   without   "b"          ( something like  new-object:  make a [del b]  )}
    sent: "2017-05-23T10:51:30.203Z"
    editedAt: "2017-05-23T10:52:13.832Z"
    v: 3
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "592413cb00efc2bb3e96f63f"
    text: "like `o: make object! [x: 1]`"
    sent: "2017-05-23T10:49:47.103Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592413b02b926f8a67839fdc"
    text: {If you make an object, you need both word and value that will be added.}
    sent: "2017-05-23T10:49:20.769Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59241301fa63ba2f766f42be"
    text: "In the sense of attribute"
    sent: "2017-05-23T10:46:25.812Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "592412e300efc2bb3e96f1fc"
    text: {yes. i forgot "make" word...  Can I get a new object without the specified parameter?}
    sent: "2017-05-23T10:45:55.664Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "592411d8631b8e4e61042123"
    text: {Do you mean `new-object: make last-object [new-attrib: integer!]`? This actually makes new object, it does not add to old one.}
    sent: "2017-05-23T10:41:28.485Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5924116d0a783b6c0ac7b880"
    text: {i can add.:  new-object: last-object [new-attrib: integer!]}
    sent: "2017-05-23T10:39:41.198Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5924112405e3326c67fe0b7f"
    text: {@sergey6661313 objects are static, you can't add or remove words (attributes). You can do that with maps, but they have their own limitations.}
    sent: "2017-05-23T10:38:28.274Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "592410a7c4d73f445ad5c564"
    text: "how to delete attribute in Object! ?"
    sent: "2017-05-23T10:36:23.862Z"
    editedAt: "2017-05-23T10:36:46.044Z"
    v: 2
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5923fd0264a70be11ad337d3"
    text: "That was fast.."
    sent: "2017-05-23T09:12:34.075Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923fcf621759a6a01669cc2"
    text: "@dockimbel Awesome! "
    sent: "2017-05-23T09:12:22.391Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923fafbc4d73f445ad557dd"
    text: "Cool!"
    sent: "2017-05-23T09:03:55.476Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923fae9eec422e415ddacea"
    text: {@kammd I just implemented the `size?` native, as it's too useful to not have, even with current simple IO.}
    sent: "2017-05-23T09:03:37.329Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5923f77bfa63ba2f766eb268"
    text: {OTOH this is not exactly precise value, maybe calling `ls` would be better in such case.}
    sent: "2017-05-23T08:48:59.158Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923f737fa63ba2f766eb18f"
    text: {Loading takes some time with larger files and without GC you will end up consuming more and more memory. Getting the file size from OS is probably better way with something like:^/```^/>> call/output "du -s ide.exe" s: ""^/== 0^/>> 512 * load first split s tab^/== 1097728^/```}
    sent: "2017-05-23T08:47:51.396Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923f71c05e3326c67fd8b42"
    text: {Prices for memory have gone up in the past year due to high demand from smartphone industry. ;-)}
    sent: "2017-05-23T08:47:23.999Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5923f66f05e3326c67fd8520"
    text: {With memory being cheap, this brute force method isn't so bad. }
    sent: "2017-05-23T08:44:31.483Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5923f5df0a783b6c0ac736dc"
    text: {@meijeru you can, but than you have the file in memory and do not need to use `read/skip` at all...}
    sent: "2017-05-23T08:42:07.153Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923f59205e3326c67fd810e"
    text: {You can always do a `read/binary` and ask for the `length?` of the resulting `binary!` value...}
    sent: "2017-05-23T08:40:50.831Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5923d538331deef4646996ba"
    text: {yeah was trying to figure out if there is a `size?` }
    sent: "2017-05-23T06:22:48.834Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d5065e34568d5e80664c"
    text: {However, AFAIK there is one missing piece still - you can't get file size ;)}
    sent: "2017-05-23T06:21:58.170Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923d4a792217cca58a3e3a7"
    text: {See help for `read`, there is also `/part` refinement that may be useful for this.}
    sent: "2017-05-23T06:20:23.923Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923d42e21759a6a01669a4d"
    text: "Hmm thats a start"
    sent: "2017-05-23T06:18:22.115Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d359eec422e415dcfea6"
    text: "There is `read/seek file index`"
    sent: "2017-05-23T06:14:49.453Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "5923d32764a70be11ad33553"
    text: {but without reading the whole file.. is that possible?}
    sent: "2017-05-23T06:13:59.095Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d31b21759a6a01669a35"
    text: {Oh ok.. btw while I am here.. I wanted to understand file io better.. let's say if I want to implement unix tail in red. }
    sent: "2017-05-23T06:13:47.622Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d2f8f3001cd3424c2a61"
    text: {So badly formatted block :) It should probably give better error message.}
    sent: "2017-05-23T06:13:12.039Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923d2cb7410563012836b7e"
    text: "naah my bad.. i forgot that here was a string.. "
    sent: "2017-05-23T06:12:27.603Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d2a40a783b6c0ac69a19"
    text: {It is possible to get this error when the info block is badly formatted.}
    sent: "2017-05-23T06:11:48.004Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923d27c9f4f4ab05befe803"
    text: "@kammd can I see your code?"
    sent: "2017-05-23T06:11:08.936Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923d25a21759a6a01669a33"
    text: "red 0.6.2"
    sent: "2017-05-23T06:10:34.343Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d24d5dc6925a7a44b9ea"
    text: "mac os "
    sent: "2017-05-23T06:10:21.469Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d243f3001cd3424c27e8"
    text: "@kammd which OS?"
    sent: "2017-05-23T06:10:11.266Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923d23a331deef46469969f"
    text: {oh ok.. btw I am getting *** Runtime Error 1: access violation}
    sent: "2017-05-23T06:10:02.108Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d2190a783b6c0ac6982c"
    text: {@kammd current IO in Red is just temporary solution, until full IO is implemented in 0.7.0. So expect IO documentation to come with 0.7 release.}
    sent: "2017-05-23T06:09:29.457Z"
    editedAt: "2017-05-23T06:09:42.232Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923d1fe0de3eb3e19a7a12b"
    text: {I mean is there a documentation page which gives the details??}
    sent: "2017-05-23T06:09:02.751Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d1dd7410563012836b73"
    text: "@rebolek where can I find this information?? "
    sent: "2017-05-23T06:08:29.005Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d16d5e34568d5e805970"
    text: {@kammd If you want to post data to url, in Red, you need to use `write/info`. Here's a simple example, feel free to ask about details:^/```^/write/info http://some.serv.er [POST [header: here] "data here"]^/```}
    sent: "2017-05-23T06:06:37.259Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5923d11b0de3eb3e19a7a11e"
    text: "Is there anything similar in red as well?"
    sent: "2017-05-23T06:05:15.457Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5923d11164a70be11ad3353a"
    text: {I came across some rebol code which mentions read/custom refinement to post some data to http url. }
    sent: "2017-05-23T06:05:05.380Z"
    v: 1
    author: "5768dd0bc2f0db084a1f0eec"
) #(
    id: "5922f916eec422e415d98584"
    text: "@rebolek @dockimbel Alright, thanks :+1: "
    sent: "2017-05-22T14:43:34.853Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "5922f19e2b926f8a677ea4ca"
    text: {@rokf No info, but you can use `help` to navigate it (like:^/ `help system/options`) and you can ask as many questions here (or in red/help) as you need. ;-)}
    sent: "2017-05-22T14:11:42.379Z"
    editedAt: "2017-05-22T14:11:56.267Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5922ed9e05e3326c67f94e3f"
    text: {@rokf I don' think so. There's some [info](http://rebol2.blogspot.cz/2012/04/system-object-exposed.html) about Rebol's `system` object, which is close to Red's one.}
    sent: "2017-05-22T13:54:38.331Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5922ebeafa63ba2f766a3287"
    text: {Are there any tutorials or examples around the stuff available in the `system` object?}
    sent: "2017-05-22T13:47:22.096Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "591f6ef25e34568d5e709f41"
    text: {I got what I wanted btw, https://github.com/rokf/howl-red/blob/master/gen_api_data.red^/^/It looks a bit thrown together but it works great :sparkles:. It writes the data in a Lua table format so I could add autocompletion and inline docs to my Red bundle for Howl :smile: }
    sent: "2017-05-19T22:17:22.024Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "591f604a92217cca589373fb"
    text: {Ok, I just realized I get something completely different. Must be the recent changes in `help` (`fetch-help` is deprecated now, should use `help-string` instead)}
    sent: "2017-05-19T21:14:50.401Z"
    editedAt: "2017-05-19T21:15:32.812Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "591f5c91c4d73f445ac42221"
    text: {@AlexanderBaggett strange, repeats only when it is `write`n:^/```^/>> print take/part get-api-data 300^/-------------^/%^/W is a word! value: %^/^/-------------^/-------------^/*^/```}
    sent: "2017-05-19T20:58:57.756Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591f51b733e9ee771cc4480f"
    text: "Shows up only once for me."
    sent: "2017-05-19T20:12:39.538Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "591f515792217cca58932af6"
    text: "You can run the code in my example above"
    sent: "2017-05-19T20:11:03.661Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f5140eec422e415ccafe0"
    text: {@geekyi  I was talking about the function above for Rok.  He was designing a function that would output all of the help for all of the functions.  I found the `%` function showed up many times.}
    sent: "2017-05-19T20:10:40.922Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f4de0c4d73f445ac3daeb"
    text: {Ok, I could replace all newlines with the pattern `^^^^/` instead of `^^/`}
    sent: "2017-05-19T19:56:16.677Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "591f48cc2b926f8a67717cdb"
    text: {@AlexanderBaggett what do you mean? Example code? }
    sent: "2017-05-19T19:34:36.029Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591f46365e34568d5e6fe028"
    text: {@dockimbel , there are a lot of duplicates for `%` that showed up in this. }
    sent: "2017-05-19T19:23:34.744Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f44e9f3001cd3423b3bbd"
    text: {You get stuff that looks like this : ^/^/^/```^/-------------^//^/^/USAGE:^/      value1 /  value2^/^/DESCRIPTION:^/      Returns the quotient of two values. ^/      / is of type: op! ^/^/ARGUMENTS:^/     value1   [number! char! pair! tuple! vector! time!]  => The dividend (numerator). ^/     value2   [number! char! pair! tuple! vector! time!]  => The divisor (denominator). ^/^/REFINEMENTS:^/^/-------------^/-------------^///^/^/USAGE:^/      a //  b^/^/DESCRIPTION:^/      ^{Wrapper for MOD that handles errors like REMAINDER. Negligible values (compared to A and B) are rounded to zero. ^/      // is of type: op! ^/^/ARGUMENTS:^/     a   [number! char! pair! tuple! vector! time!] ^/     b   [number! char! pair! tuple! vector! time!] ^/^/REFINEMENTS:^/^/-------------^/^/```^/}
    sent: "2017-05-19T19:18:01.674Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f44ac0a783b6c0ab635f8"
    text: {I like this format personally ^/^/^/```^/Red []^/^/get-api-data: function [][^/    collect/into [^/        foreach w sort words-of system/words [^/            if all [word? w any-function? get/any :w][^/                a: ""^/                append a "-------------"^/                append a newline^/                append a w^/                append a newline^/                append a fetch-help w^/                append a newline ^/                append a "-------------"^/                append a newline ^/                keep a^/            ]^/        ]^/    ] copy ""^/]^/write %api_data.txt get-api-data^/```^/^/^/^/}
    sent: "2017-05-19T19:17:00.589Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f448a0a783b6c0ab6355b"
    text: {I could yeah, but it looks cleaner with `reduce` and multiple `keep` calls.  Also I need the mold call, because I want each entry in its own line.}
    sent: "2017-05-19T19:16:26.546Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "591f433e5e34568d5e6fcb38"
    text: {You could add formatting newlines or whatever to the output via `append`if you wanted.}
    sent: "2017-05-19T19:10:54.033Z"
    editedAt: "2017-05-19T19:11:25.351Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f428e00efc2bb3e84d2f8"
    text: {@rokf   ^/^/try this^/^/```^/Red []^/^/get-api-data: function [][^/    collect/into [^/    foreach w sort words-of system/words [^/        if all [word? w any-function? get/any :w][^/            a: ""^/            append a w^/            append a fetch-help w^/            keep a^/        ]^/    ]^/    ] copy ""^/]^/write %api_data.txt get-api-data^/```^/^/}
    sent: "2017-05-19T19:07:58.526Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f425b92217cca5892e6a7"
    text: "Okay I got it"
    sent: "2017-05-19T19:07:07.509Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f41a800efc2bb3e84ce32"
    text: {The `{` and `}` denote individual strings.  Perhaps you need a way to combine it all into one before hand}
    sent: "2017-05-19T19:04:08.174Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f3f942b926f8a677151a1"
    text: "worth trying tho :D"
    sent: "2017-05-19T18:55:16.068Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "591f3f8983cb5db0734b0073"
    text: {`lf` is the same as `newline` and no, it does not work }
    sent: "2017-05-19T18:55:05.590Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "591f3f110a783b6c0ab61630"
    text: {@rokf  there is a newline char, let me double check.^/yeah the newline char is literally `newline` see if you can do your replace with that instead.}
    sent: "2017-05-19T18:53:05.642Z"
    editedAt: "2017-05-19T18:53:51.782Z"
    v: 3
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f3bfc5e34568d5e6fa902"
    text: {I've already tried `replace/all (...) lf "\n"` around the mold but it didn't work.}
    sent: "2017-05-19T18:39:56.130Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "591f3b750a783b6c0ab6041b"
    text: {I'm trying to extract function help descriptions with https://gist.github.com/rokf/40598a238211cc2a5a5b1caaeeca0478 and I have a question. The mold function gives me the output where newlines are represented with a `^^/`.  Can I somehow replace those `^^/` with `\n` and maybe remove the `{` and `}` that surrounds  the mold output?}
    sent: "2017-05-19T18:37:41.790Z"
    editedAt: "2017-05-19T18:38:29.331Z"
    v: 2
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "591f207292217cca58923e50"
    text: {As new features come out, I would like to incorporate them into my  project.}
    sent: "2017-05-19T16:42:26.457Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591f1e6d5e34568d5e6f21fa"
    text: {speaking of future updates, what is the timeline looking like for `0.6.3`?}
    sent: "2017-05-19T16:33:49.948Z"
    editedAt: "2017-05-19T16:34:01.001Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591e958e83cb5db07347f1b2"
    text: {@rebolek thanks again. Bit by bit I'm getting the gist of Red, and it's starting to click and is becoming enjoyable. Looking forward to the future updates!}
    sent: "2017-05-19T06:49:50.921Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591e91a10a783b6c0ab3147c"
    text: {@michaeldesu There's also `any` that works like `or`: `any [false true] => true, any [false false] => false`}
    sent: "2017-05-19T06:33:05.545Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591e8cdd92217cca588fc8e1"
    text: {@dockimbel Thanks alot - in my real case I have a string test and boolean test, so I guess it translates to something like: `all [term = "needed_string" not found-flag]` or `all [term = "needed_string" found-flag = false]` to be the equiv of my original `(term = "needed_string") and (found-flag = false)`. This learning from @rebolek about use of `all` is very good. Thanks once again!}
    sent: "2017-05-19T06:12:45.591Z"
    editedAt: "2017-05-19T06:13:54.362Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591e84cb0a783b6c0ab2e7e2"
    text: {@dockimbel @michaeldesu of course, that's much nicer :)}
    sent: "2017-05-19T05:38:19.885Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591e840a0a783b6c0ab2e58d"
    text: {@michaeldesu In addition to @rebolek  good answer, if you don't need to explicitly test for `false` logic! value (you very rarely need to do so), you can reduce your expression to: `not any [a b]` or `all [not a not b]`. The former one is often preferable, as you can shortcut `if not` with `unless`, so it can reduce to just `unless any [a b][print "ok"]`}
    sent: "2017-05-19T05:35:06.378Z"
    editedAt: "2017-05-19T05:42:12.130Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591e74d5eec422e415c8f442"
    text: "@rebolek :thumbsup: that's great, thanks alot"
    sent: "2017-05-19T04:30:13.927Z"
    editedAt: "2017-05-19T04:30:25.742Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591e74912b926f8a676de19c"
    text: {So you either can put your expressions in parens, or use more Red-like way:^/```^/all [a = false b = false]^/```}
    sent: "2017-05-19T04:29:05.954Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "591e745433e9ee771cc06af0"
    text: {Yes, there is. In Python (and other languages), operator precedence have priorities. Not so in Redbol, where all operators have same priority (see i.e `2  + 3 * 4`).}
    sent: "2017-05-19T04:28:04.955Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591e732b631b8e4e61eec5d0"
    text: {about^/```^/>> a^/== true^/>> b^/== false^/>> a = false and b = false^/== true ; incorrect^/>> (a = false) and (b = false)^/== false  ; correct^/```^/I've learnt that brackets are needed for this kind of test - it's strange for me (coming from python where brackets here is unneeded). Is there a subtle Red-related learning in this?}
    sent: "2017-05-19T04:23:07.445Z"
    editedAt: "2017-05-19T04:23:58.228Z"
    v: 4
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591e6f842b926f8a676dd34f"
    text: {@dockimbel Thanks alot. About my prev message, let me rethink it - I'm a bit tired}
    sent: "2017-05-19T04:07:32.171Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591e6ed25e34568d5e6c2a0f"
    text: {@michaeldesu You can have a look at [zlib](http://zlib.net/).}
    sent: "2017-05-19T04:04:34.167Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591e3c7e83cb5db07346d3ae"
    text: {I also found [this](http://rebol2.blogspot.com.au/2012/11/compression.html) Rebol page featuring some zip code but the code delivery part has been down for around a week}
    sent: "2017-05-19T00:29:50.325Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591e3c1b631b8e4e61ee136a"
    text: {a couple of questions here a little off-topic perhaps. Due to zip compress/decompress support being in the future, I've been `call`ing 7z exe on Windows as a workaround. I'd prefer to use a DLL - I guess it's possible to call DLLs from red/system? If so, anyone anyone can suggest a reasonable cost or free zip DLL for Windows? The  ones I've seen are rather expensive.}
    sent: "2017-05-19T00:28:11.963Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591dfe4a9f4f4ab05bda3d3a"
    text: {@geekyi for everything? Hmm. This depends on specific code structure. Native functions are defined as `name*`. For other code bases there should be different extraction mechanism. So it can be added, but it won't be automatic.}
    sent: "2017-05-18T20:04:26.922Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591dfa1b92217cca588dc74c"
    text: {@rebolek I've been meaning to write something exactly like that! For all functions you can't have source of. Except using my local git copy. Now that you posted it, it looks simpler than I expected.. `source-git`can we have it for everything? }
    sent: "2017-05-18T19:46:35.582Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591ddca5eec422e415c6bb7b"
    text: {hi , i am back again here. May i ask for the progress in networking for RED.  Just a port connection or else. Yeah it takes time i know. Anyway , it boost the fun up !}
    sent: "2017-05-18T17:40:53.952Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "591ddc0d83cb5db073454047"
    text: {Why not. This is oneliner written in two minutes, but I think that the general idea of getting help from web, where it makes sense, is something, that probably should be considered.}
    sent: "2017-05-18T17:38:21.851Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591dc95a5e34568d5e698ef4"
    text: {With suitable warnings, the methods to get at the source of natives, actions and routines, could be incorporated in the `source` function.}
    sent: "2017-05-18T16:18:34.514Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591dbd89631b8e4e61ebe21d"
    text: "@rebolek :+1: "
    sent: "2017-05-18T15:28:09.343Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591db3c75e34568d5e691d2b"
    text: {You can get source of natives if you want to, for example:^/```^/nsrc: function ['name] [^/    natives: pick load https://raw.githubusercontent.com/red/red/master/runtime/natives.reds 11 ^/    src: mold copy/part find natives to set-word! rejoin [name #"*"] 4 ^/    take/last remove src ; mold/flat emulation^/    print src^/]^/^/^/>> nsrc if^/^/    if*: func [check? [logic!]] [#typecheck if^/        either logic/false? [^/            RETURN_NONE^/        ] [^/            interpreter/eval as red-block! stack/arguments + 1 yes^/        ]^/    ]^/```}
    sent: "2017-05-18T14:46:31.623Z"
    editedAt: "2017-05-18T14:48:33.091Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591db305631b8e4e61eba7a3"
    text: {Right now I am using `probe body-of :routine-name` since `source` says "no source available" so I am not in a hurry :grimacing: }
    sent: "2017-05-18T14:43:17.490Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591dad5700efc2bb3e7e2041"
    text: {@meijeru I think there are better things to do now, aren't there?}
    sent: "2017-05-18T14:19:03.207Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591da5512b926f8a676a8581"
    text: {On the other hand, the source of routines IS available and publishing it is the subject of issue (WISH) # 2696.}
    sent: "2017-05-18T13:44:49.560Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "591d9b8f33e9ee771cbceb23"
    text: {Several extra MB to every Red executable. Just to save users from going on github to look at the source code.}
    sent: "2017-05-18T13:03:11.954Z"
    editedAt: "2017-05-18T13:04:11.036Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591d9b559f4f4ab05bd86400"
    text: "what's the cost?"
    sent: "2017-05-18T13:02:13.879Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591d9b1df3001cd3423433aa"
    text: {I don't think that including the whole Red runtime source code into Red runtime itself would be very helpful and worth it, given the cost.}
    sent: "2017-05-18T13:01:17.461Z"
    editedAt: "2017-05-18T13:02:03.252Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591d9580c4d73f445abc9960"
    text: "I wonder if we can make it available"
    sent: "2017-05-18T12:37:20.173Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591d92435e34568d5e687553"
    text: {@sergey6661313 You can't get the source of a native function, as it's written in Red/System and compiled to native code, so the source code is not available anymore.}
    sent: "2017-05-18T12:23:31.323Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591d920f2b926f8a676a25a9"
    text: {`stats/info` calls `mem-info` which is there: https://github.com/red/red/blob/master/runtime/debug-tools.reds#L25}
    sent: "2017-05-18T12:22:39.852Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591d8d4eeec422e415c53203"
    text: {@sergey6661313 you have to look for it in Red's sources: https://github.com/red/red/blob/d98300c334b4a4ff7779cf20298dabde4d2d1d7f/runtime/natives.reds#L1037}
    sent: "2017-05-18T12:02:22.039Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591d8cebf3001cd34233ede7"
    text: {@sergey6661313 ^/```^/>> source stats^/Sorry, stats is a native! so no source is available^/```}
    sent: "2017-05-18T12:00:43.350Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591d8cb233e9ee771cbca270"
    text: {@dockimbel What command do you need to enter to get the source code of  "stats/info"? }
    sent: "2017-05-18T11:59:46.744Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591d451b2b926f8a6768bc95"
    text: {@michaeldesu No docs, but looking at its source code, you can easily see what it is about.}
    sent: "2017-05-18T06:54:19.878Z"
    editedAt: "2017-05-18T06:54:28.606Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591c419cc4d73f445ab6e6e6"
    text: {@geekyi i used latest autobild. By the way right now I do not have the download page to download the new version ...}
    sent: "2017-05-17T12:27:08.128Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591bf75333e9ee771cb5a99e"
    text: {is there some doc about the memory categories for `stat/info`?}
    sent: "2017-05-17T07:10:11.051Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591bf68792217cca5884b061"
    text: {AFAIK, Rebol2 uses the same approach, if your memory needs fits into the available memory, the total won't change. If the available memory is not enough, it will increase.}
    sent: "2017-05-17T07:06:47.538Z"
    editedAt: "2017-05-17T07:08:16.871Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591bf619631b8e4e61e3e48b"
    text: {@dockimbel Thanks, I compared the result to what Rebol shows, where the value increased in such case.}
    sent: "2017-05-17T07:04:57.180Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591bf5b633e9ee771cb5a1d1"
    text: {@rebolek `stats` shows the total allocated memory from the system, used memory is lower (can be seen in `stats/info`, for each memory category, you get a list of [used free total]).}
    sent: "2017-05-17T07:03:18.050Z"
    editedAt: "2017-05-17T07:04:03.888Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591bf526631b8e4e61e3e0d4"
    text: {@dockimbel Hm, does `stats` really work?^/```^/>> stats^/== 3317760^/>> x: []^/== []^/>> loop 10000 [append x random 10000]^/== [2753 3781 1267 2651 4113 4804 2503 2771 7648 9492 1906 1951 5254 2638 4119 2614 5002 2619 6714 9524 5276 1575 3961 6703 ...^/>> stats^/== 3317760^/```}
    sent: "2017-05-17T07:00:54.821Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591bf51cd1a7716a0ad4cd97"
    text: "@michaeldesu You're welcome."
    sent: "2017-05-17T07:00:44.036Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591bf4dc83cb5db0733c8bf9"
    text: {@rebolek thanks alot.  @dockimbel grateful for your input - it's a great solution, thanks again, another nice learning.}
    sent: "2017-05-17T06:59:40.284Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591bf3f72b926f8a6762ffb8"
    text: "@michaeldesu `stats` shows amount of used memory"
    sent: "2017-05-17T06:55:51.836Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591bf3d3c4d73f445ab57435"
    text: {@dockimbel thanks alot. BTW glad you mentioned `stats` - is this figure showing the amount of memory free (when called)?}
    sent: "2017-05-17T06:55:15.368Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591bf37233e9ee771cb597f0"
    text: {```lisp^/>> test2: function [] [^/[        int-series: clear []^/[        num-str: "4111111111111111"^/[        foreach x num-str [append int-series to-integer x - #"0"]^/[    ]^/>> stats^/== 3317760^/>> loop 1000000 [test2]^/== [4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]^/>> stats^/== 3317760^/```^/Zero extra memory allocated.^/}
    sent: "2017-05-17T06:53:38.877Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591bf35a8a05641b118e2dd4"
    text: "`collect` is creating a new block on each call."
    sent: "2017-05-17T06:53:14.394Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591bf34ec4d73f445ab572d1"
    text: "The trick is to try and reuse everything "
    sent: "2017-05-17T06:53:02.965Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591bf2acf3001cd3422cdab2"
    text: {I'd be glad to use the other, which is more efficient, but it still consumes a fair amount of memory over a long time}
    sent: "2017-05-17T06:50:20.347Z"
    editedAt: "2017-05-17T06:50:33.238Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591bf26e83cb5db0733c80db"
    text: {`to-string` makes new string on each call, so that's 16 milion strings in total}
    sent: "2017-05-17T06:49:18.242Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591bf23400efc2bb3e767ac6"
    text: {@michaeldesu if I were to guess, I think it's the conversions, steeper because converting twice }
    sent: "2017-05-17T06:48:20.898Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591bf1bf33e9ee771cb58f7d"
    text: {@geekyi thanks - ok no long processing for me - I guess I'll have to reconsider my approach}
    sent: "2017-05-17T06:46:23.885Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591bf105c4d73f445ab568bd"
    text: "@michaeldesu no gc yet so it's expected "
    sent: "2017-05-17T06:43:17.592Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591bf0dbf3001cd3422cd25a"
    text: {maybe good to repost in red channel, for developers? otoh zhey monitor all channels}
    sent: "2017-05-17T06:42:35.345Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "591beee10a783b6c0aa7adcf"
    text: {I could use some help. I think I found my memory leak. I've whittled a test case down to the following:^/```^/test2: function [] [^/    int-series: clear []^/    num-str: "4111111111111111"^/    foreach x num-str [append int-series to-integer to-string x]   ; convert string to integer series for processing^/    ; int-series: collect [foreach x num-str [keep to-integer x - #"0"]]  ^/]^/^/loop 1000000 [^/    print test2^/]^/```^/Now when I run the above using `foreach x num-str` I see the memory usage continuously climb at a 45 degree angle (until I get a ` stack error or overflow`). If I comment that out and use the other i.e. `int-series: collect..` it does the same thing but at a shallower angle (around 30 degrees). I don't understand why. If someone can explain it I'd be glad. BTW this occurs on Win 7 using red 0.6.2 release or the latest (red-16may17-d98300c.exe) version.}
    sent: "2017-05-17T06:34:08.999Z"
    editedAt: "2017-05-17T06:41:59.790Z"
    v: 6
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591becd39f4f4ab05bd11d5a"
    text: {@sergey6661313 just curious, are you using red *master* branch or *android* branch? }
    sent: "2017-05-17T06:25:23.034Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "591be0f592217cca58845cc4"
    text: {i try Put quotation marks: red.exe --config "[PIC: yes]" -t android MyHello.reds        and i got а larger file. But right now I can not test it on my device ...}
    sent: "2017-05-17T05:34:45.374Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591bdf8292217cca58845723"
    text: {If the -t option is given, then the presence or absence of the -c option gives an absolutely identical file.}
    sent: "2017-05-17T05:28:34.506Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591bdf7f9f4f4ab05bd0e647"
    text: {@ZenoArrow  @dockimbel  i try copy yours command.   They are separated by a space. (in PIC?:__yes). Without a space, compilation runs without errors, but my phone still says that I'm not piling it to PIE binaries. }
    sent: "2017-05-17T05:28:31.136Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
)#(
    id: "591bd61c33e9ee771cb52072"
    text: {From the physical memory usage chart, it's clear I have a memory leak somewhere. I'll check it out.}
    sent: "2017-05-17T04:48:28.646Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591bd1aa83cb5db0733c0061"
    text: {I'm parsing hundreds of XML files (reading, parsing, writing within a loop) and getting  a `Runtime Error 19: stack error or overflow` at about the 70th file. I believe I'm operating within available RAM. Is there some memory-based debugging I can apply within my program. Also I have a question - within the loop, I'm doing a `read` into the same var like `s: read %string.xml` (reading over and over again into the same var - assuming the old content is replaced with the new). Is this safe?}
    sent: "2017-05-17T04:29:30.303Z"
    editedAt: "2017-05-17T04:30:15.368Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591b7e8b631b8e4e61e24802"
    text: {When I say it worked for me, I mean it compiled, I haven't tried the compiled code on an Android device.}
    sent: "2017-05-16T22:34:51.735Z"
    editedAt: "2017-05-16T22:35:10.728Z"
    v: 2
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "591b7e1e9f4f4ab05bcf99b6"
    text: {If red.exe is a renamed version of red-062.exe. the only other difference I can see is the use of -c .}
    sent: "2017-05-16T22:33:02.693Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "591b7dd2631b8e4e61e24412"
    text: {@sergey6661313 The following worked for me: C:\ProgramData\Red\0.6.2\red-062.exe --config [PIC?:yes] -^/t android -c C:\Users\User\Desktop\hello.red}
    sent: "2017-05-16T22:31:46.926Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "591b4d77f3001cd3422a6c88"
    text: {not, but news December 26, 2011 ARM support released.  binary files before was supported... }
    sent: "2017-05-16T19:05:27.242Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591b4d0e0a783b6c0aa53366"
    text: "I see"
    sent: "2017-05-16T19:03:42.493Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b4cf333e9ee771cb31df6"
    text: "is android platform already supported?"
    sent: "2017-05-16T19:03:15.297Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "591b4c95f3001cd3422a68c0"
    text: {red.exe --config [PIC?: yes] -t android MyHello.reds}
    sent: "2017-05-16T19:01:41.607Z"
    editedAt: "2017-05-16T19:08:35.260Z"
    v: 2
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591b41212b926f8a67605aca"
    text: {@sergey6661313 Can you post your current build command? I'd like to see if I can help.}
    sent: "2017-05-16T18:12:49.938Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "591b12dad1a7716a0ad10267"
    text: {Then, you should better wait until we upgrade Android support in 0.6.5.}
    sent: "2017-05-16T14:55:22.113Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591b128983cb5db07338d60c"
    text: "*** Error: cannot access argument file"
    sent: "2017-05-16T14:54:01.404Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591b12800a783b6c0aa4037c"
    text: {The same error, but now he writes it not in the console cmd, but in the console Red.}
    sent: "2017-05-16T14:53:52.835Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591b0f9583cb5db07338c56e"
    text: {@sergey6661313 Put `--config` option first, before `-t`.}
    sent: "2017-05-16T14:41:25.520Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ae7cc00efc2bb3e71d62a"
    text: {I probably do not enter the command correctly.^/How to enter correctly?^/^/G:\redlang>red.exe -t android --config [PIC?: yes] MyHello.reds^/Cannot access source file: G:\redlang\yes]}
    sent: "2017-05-16T11:51:40.815Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591ae567d1a7716a0acff9fb"
    text: {Just look [here](https://github.com/red/red/blob/master/system/config.r) for possible config options.}
    sent: "2017-05-16T11:41:27.589Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ae52bf3001cd342284c0a"
    text: {did not work. It would be nice to add possible configs to the wiki. }
    sent: "2017-05-16T11:40:27.330Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591ae3f62b926f8a675e6e20"
    text: {@sergey6661313 You can try cross-compiling using the extra `--config [PIC?: yes]` option, though it probably will not be enough for full PIE support.}
    sent: "2017-05-16T11:35:18.543Z"
    editedAt: "2017-05-16T11:35:53.128Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ae3f3d1a7716a0acff304"
    text: "Good luck"
    sent: "2017-05-16T11:35:15.370Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591ae3ab0a783b6c0aa3006e"
    text: {@sergey6661313 The current Android support code was a proof of concept and written for 4.x, so I guess that newer versions now require PIE binaries. We will upgrade our toolchain in the next months as we advance on [0.6.5](https://trello.com/b/FlQ6pzdB/red-tasks-overview).}
    sent: "2017-05-16T11:34:03.923Z"
    editedAt: "2017-05-16T11:36:14.522Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ae317d1a7716a0acfee1e"
    text: {I started the MyHello in the terminal emulator (termux) because "NativeExe app" crashes without warning. And I got an error (above)}
    sent: "2017-05-16T11:31:35.225Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591ae26cc4d73f445ab0d05a"
    text: {android 6.0. (homtom HT17Pro). Compiled the command red.exe -t android MyHello.reds}
    sent: "2017-05-16T11:28:44.010Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "591ade8300efc2bb3e71ac5e"
    text: {@sergey6661313 Which Android version? Red toolchain currently only supports PIC for shared libraries, not executables.}
    sent: "2017-05-16T11:12:03.280Z"
    editedAt: "2017-05-16T11:12:11.801Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "591ad6e333e9ee771cb0a24f"
    text: {android not  run my compiled simple hello world reds app... "error: only position independent executables (PIE) are supported." }
    sent: "2017-05-16T10:39:31.811Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5919caab33e9ee771cac2219"
    text: {@pekr `/collapse-all` doesn't work for you? On web}
    sent: "2017-05-15T15:35:07.012Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5919a9e1d1a7716a0aca6db7"
    text: {@iArnold You can collapse those visuals, using three dot menu at the right side of the post, but it is available only for a certain amount of time, which I found being a weak point of Gitter ...}
    sent: "2017-05-15T13:15:13.907Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "59199a490a783b6c0a9d30c1"
    text: {@iArnold thanks - I guess there's no size setting for those - they do take up alot of space}
    sent: "2017-05-15T12:08:41.039Z"
    editedAt: "2017-05-15T12:08:49.825Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59198b07631b8e4e61d93c28"
    text: {Right, after over three hours of Eurovision Songcontest that was a welcome distraction. I removed the posts because the links were taking a lot of visual space.}
    sent: "2017-05-15T11:03:35.861Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "59176018631b8e4e61d1bbcd"
    text: "Ah, MeatLoaf."
    sent: "2017-05-13T19:35:52.155Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591729168a05641b117b651e"
    text: "That's a really nice way to say it @xqlab."
    sent: "2017-05-13T15:41:10.781Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591728cd8a05641b117b640f"
    text: {It is three times as easy to build single use components in Re(d)bol than in other languages. Therefore I build single use components most of the time.}
    sent: "2017-05-13T15:39:57.536Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "59171e78631b8e4e61d0c271"
    text: {What is different about Red(bol) is that the components we build may be languages.}
    sent: "2017-05-13T14:55:52.939Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59171e3ad1a7716a0ac149d1"
    text: {Their relative truth should be comparable, but they are very general and, perhaps, came from an OOP mindset. Bertrand Meyer has an entire book about building reusable software, and tools are different than objects, which are not the same as modules or frameworks or functions. ^/^/Really *good* reusable "components" may be very hard to design and build indeed, but the return on investment is higher as well. We could probably also build a graph of diminishing returns based on the generality of solutions. But if you rotate that graph to see the third dimension, you may see huge spikes of value in specializations.}
    sent: "2017-05-13T14:54:50.779Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5916f37433e9ee771ca19a90"
    text: {Is this statement also true about Redbol development:^/^/There are two "rules of three" in [software] reuse:^/^/a. It is three times as difficult to build reusable components as single use components, and^/^/b. a reusable component should be tried out in three different applications before it will be sufficiently general to accept into a reuse library.}
    sent: "2017-05-13T11:52:20.753Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5915e6cd0de3eb3e19a70716"
    text: {@AlexanderBaggett the stuff works well in macOS and Linux terminal, not sure about Windows and GUI-Console 😃}
    sent: "2017-05-12T16:46:05.697Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5915ceabd1a7716a0abc3255"
    text: {I think that ANSI sequences are not supported in Red-console (yet).}
    sent: "2017-05-12T15:03:07.361Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5915bb3c92217cca586c17e0"
    text: {The new Red-console should have support for colors, don't know if ansi sequences support.}
    sent: "2017-05-12T13:40:12.824Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5915b9909d90dc7a1c705fb7"
    text: {I don't see the coloring on the trello board for 0.6.3 or 0.6.4}
    sent: "2017-05-12T13:33:04.987Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915b83600efc2bb3e5dc577"
    text: {Also, general question for everyone, when is the version of Red coming out?}
    sent: "2017-05-12T13:27:18.180Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5915b8120a783b6c0a8edf59"
    text: {@x8x  is that Color stuff console only or is it going to in `view` as well?}
    sent: "2017-05-12T13:26:42.755Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59154cff9d90dc7a1c6e7c6b"
    text: {FWIW, I've noticed when reading or writing very large XML files (> 200Mb) with any version of 0.62 on Windows (using plan read or write, usually the latter), I get `Runtime Error 1: access violation` but when I do the same with `/binary` it's ok. With smaller files, it's generally fine without /binary.}
    sent: "2017-05-12T05:49:51.468Z"
    editedAt: "2017-05-12T05:52:55.130Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5914bd3173b39c5f1573e671"
    text: {@greggirwin Make sense thx. Didn't know 64 bits int where coming .}
    sent: "2017-05-11T19:36:17.317Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59149e6900efc2bb3e5942a9"
    text: {:point_up: [May 11, 2017 2:18 AM](https://gitter.im/red/red/welcome?at=59141e3973b39c5f1573d951) @x8x, as Doc said, what happens when an integer is 64-bits in the future? I don't think the conversion choice is clear in this case. That happens sometimes, so then we have to ask "What is the value?" What is the big win in being able to convert directly from integer to tuple?}
    sent: "2017-05-11T17:24:57.130Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59149c7700efc2bb3e5937e6"
    text: {@geekyi, good thoughts though enforcement is always hard. Being able to move messages would help, but I don't think gitter allows that, WRT enforcement. What we *can* do is :point_left: :point_right:  and link to them as conversations shift. As topics come up that generate a lot of chat, we can add rooms. ^/^/The hard part, for me, is being able to *see* what rooms are available in the gitter UI. Is the "community" grouping in gitter what we have now, based at a repo?}
    sent: "2017-05-11T17:16:39.362Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59147b6000efc2bb3e588bb4"
    text: {# Rooms suggestions^/Gitter favors rooms based on github repos. We could re-organize code according to^/^/## Audience based^/1. Beginners to redbol `welcome`, also could be *learn*, *hello (world)*, only intro (no large code here, more Q&A, point to docs and SO)^/2. Re(d)bol users `help`, also could be *code-help*, *code-review* (any question should have at least partially working code here, or snippets. Link to SO code review)^/3. Redsystem users `red/system`?^/4. Red-development `red/red` (design vs regressions?)^/5. Red code snippets, libraries, demos, etc. `mezz`, also could be *code(-snippets)*, *pastebin*^/6. Language based, e.g. `Chinese`^/?? Red for programmers of X ( we have  `lisp`, why not others)? altho, I think we should have paradigms instead of languages: *functional*, *object-oriented*, *logic*, *ML*^/^/## Topic based^/1. +Dialects and parse. `dialecting`^/2. ++Metaprogramming `lisp` room sometimes has discussions a bit like this^/3. VID `red-guibranch`?^/4. +Draw^/5. +Red concepts `concepts` semantics, syntactically invisible things like *context*, theory, etc^/6. Tests `tests`? currently dedicated to quicktest and tests in red system^/7. Random `sandbox`^/8. Bugs.. `bugs` regressions/design vs other ?^/9. Data types and formats, currently we have lots of these `RIF`, `vector-datatype`, etc^/?? more of these? ^/?Programming paradigms? Integrations and ffi, data formats, api, parsers, editors and IDE, math, scientific programming, opencv and visual media^/^/## Repo based^/1. Red `red/red`^/2. Code `red/code`, could be `samples` or `examples` to avoid confusion with a room to^/3. Red official docs `red/doc` need a separate topical room on other docs, documentation style guides, etc.. ^/^/Note: `+` is room suggestions^/What I don't know is how to gently enforce rules. Maybe a bot?}
    sent: "2017-05-11T14:55:28.590Z"
    editedAt: "2017-05-11T14:58:02.186Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "591472988a05641b1170bfde"
    text: {@x8x  @pekr I've been thinking about chat, and I've come to the conclusion that the problem is limitation of gitter as a chat client, in that it doesn't have threads. `slack`, `flowdock`, `discord`, etc.. has them. Even stackoverflow has limited support for those.^/But alternatively, based on what gets posted, I have an idea of how the rooms can be arranged topically}
    sent: "2017-05-11T14:18:00.641Z"
    editedAt: "2017-05-11T14:18:20.095Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59145bedd1a7716a0ab5f928"
    text: {@x8x sorry about that, I'm a bit lost or not paying enough attention - I didn't realise the capability was there (coming soon to Windows I see). What you've outlined looks good - looking forward to it. Thanks to the contributors!}
    sent: "2017-05-11T12:41:17.133Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5914569cefe561b154b9a963"
    text: {[![Screen Shot 2017-05-11 at 19.17.42.png](https://files.gitter.im/red/red/welcome/28EK/thumb/Screen-Shot-2017-05-11-at-19.17.42.png)](https://files.gitter.im/red/red/welcome/28EK/Screen-Shot-2017-05-11-at-19.17.42.png)}
    sent: "2017-05-11T12:18:36.900Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5914565973b39c5f1573dd12"
    text: {@michaeldesu quick example:^/```rebol^/paint: func [b /local c s][^/^-print rejoin parse b [^/^-^-collect any [^/^-^-^-[c: [word! | path!] s: string! keep (^/^-^-^-^-either word! = type? c/1 [^/^-^-^-^-^-color s/1 c/1^/^-^-^-^-][^/^-^-^-^-^-color/bg s/1 c/1/1 c/1/2^/^-^-^-^-]^/^-^-^-)]^/^-^-^-| keep string!^/^-^-]^/^-]^/]^/paint [yellow/green "hello" " " red "Michael"]^/```}
    sent: "2017-05-11T12:17:29.957Z"
    editedAt: "2017-05-11T12:19:33.023Z"
    v: 6
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "591451bb4746d29d249a3b1b"
    text: {@michaeldesu This not good enough? `print [color/bg "hello" 'yellow 'green]` ? }
    sent: "2017-05-11T11:57:47.346Z"
    editedAt: "2017-05-11T11:58:21.231Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
)#(
    id: "591450a8e4cfd50062a5fff4"
    text: {@michaeldesu How would you write your example in Red?}
    sent: "2017-05-11T11:53:12.747Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5914507b551ea6485ba840ab"
    text: {@pekr I think the relax room is the `red/sandbox`. Anyway it looks to me that all old timer users of Altme are a little lost on choosing the right room here on Gitter. Not sure how to improve that, maybe just replicate the Altme rooms? Sure `announce` and `ann-reply` would be welcome here as well, so many others. The status now is that there is not much difference in what is being discussed between red, welcome, help, sanbox. Not complaining, but it probably means something is not clear or we really need more rooms, stricter rules and some policing.}
    sent: "2017-05-11T11:52:27.038Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59144dbb83cb5db0731def78"
    text: {FWIW, the [colorama](https://pypi.python.org/pypi/colorama) package for python is a nice reference for console colour, e.g. `print(Fore.YELLOW + Back.GREEN + "hello")`}
    sent: "2017-05-11T11:40:43.582Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591449e28a05641b116ffc3a"
    text: {I already proposed some red/relax for general chit chat ... could be called by some other name as well ...}
    sent: "2017-05-11T11:24:18.232Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "591449bf92217cca5865f9ab"
    text: {Well, we were talking console, coloring, so dunno why it should be offtopic ...}
    sent: "2017-05-11T11:23:43.908Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5914486cb88c0f5a0426b9b2"
    text: "@Oldes which room then?"
    sent: "2017-05-11T11:18:04.756Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "591448152b926f8a674427f6"
    text: "we are out off topic here imho."
    sent: "2017-05-11T11:16:37.637Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591447c78a05641b116ff34b"
    text: {which clears screen and prints HELLO on position 10x10}
    sent: "2017-05-11T11:15:19.960Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "591447b192217cca5865f136"
    text: {not in gui-console... but in nix terminals and CMD you can do: `prin "^^[[2J^^[[10;10HHELLO"`}
    sent: "2017-05-11T11:14:57.183Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59144726d1a7716a0ab5a034"
    text: {I remember some christmass tree demo. Btw - are we able to position the cursor in terms of the console?}
    sent: "2017-05-11T11:12:38.319Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "591446a35c89dc536199fa8a"
    text: "rebol.org"
    sent: "2017-05-11T11:10:27.116Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59144694ac693c532ae12f3f"
    text: {@pekr you mean TUI - text user interface? AFAIR it was on rebil.org}
    sent: "2017-05-11T11:10:12.550Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59144690ac693c532ae12f3a"
    text: {@x8x curses are part of the Red many years https://github.com/red/red/tree/master/system/library/curses just don't know if still works... for me it is too heavy. I'm fine with simple ansi sequences.}
    sent: "2017-05-11T11:10:08.712Z"
    editedAt: "2017-05-11T11:10:27.677Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59144634e4cfd50062a5ff3d"
    text: {I did some stuff in nodejs with blessed and it was quite pleasent to work with.}
    sent: "2017-05-11T11:08:36.318Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59144617631b8e4e61c52b0d"
    text: {Do you guys remember old console demos? I remember something from Bo, but can't find those scripts anymore ....}
    sent: "2017-05-11T11:08:07.707Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "591445f7efe561b154b9a871"
    text: {@Oldes what do you think about https://github.com/chjj/blessed is that a good reference (despite being 16'000 loc..) if considering to port to red? Or would some binding to ncurses or other be a better go?}
    sent: "2017-05-11T11:07:35.699Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5914438fe4cfd50062a5ff09"
    text: "@rebolek more than just colors = curses ? 😜😁😜"
    sent: "2017-05-11T10:57:19.864Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "591443840a783b6c0a888e47"
    text: "I'm doing my best to have it on Windows too:)"
    sent: "2017-05-11T10:57:08.100Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5914430c4746d29d249a3a34"
    text: {Sorry @Oldes , I'm really noob on Windows, I should have specified that above is for macOS and Linux.}
    sent: "2017-05-11T10:55:08.381Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59143d980a783b6c0a8874f6"
    text: "And actually more than just colors."
    sent: "2017-05-11T10:31:52.138Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59143d7cd1a7716a0ab573ab"
    text: {You *can* have color under control, if you know how. But you're right, there's lack of documentation, so you have to figure it out yourself. I would not recommend it for usage yet, but it is promising thing that will bring colors to all GUI platforms.}
    sent: "2017-05-11T10:31:24.639Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59143cfe0a783b6c0a887217"
    text: {Not finished and not documented and does just automatic conversion. I would like to have color under control like @x8x above.}
    sent: "2017-05-11T10:29:18.373Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59143bcc33e9ee771c9690cd"
    text: "But that's not finished, I know."
    sent: "2017-05-11T10:24:12.017Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59143bb8ac693c532ae102fc"
    text: "Red-console has color support."
    sent: "2017-05-11T10:23:52.889Z"
    editedAt: "2017-05-11T10:24:02.263Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59143b9b9d90dc7a1c6a07d2"
    text: {But it is my long lasting wish to have colorful console.}
    sent: "2017-05-11T10:23:23.648Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "59143b8033e9ee771c968fb0"
    text: {@x8x actually it does not work correctly in Windows yet... and not in gui-console.}
    sent: "2017-05-11T10:22:56.129Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5914367ee4cfd50062a5fe08"
    text: {[![Screen Shot 2017-05-11 at 16.52.40.png](https://files.gitter.im/red/red/welcome/gy3I/thumb/Screen-Shot-2017-05-11-at-16.52.40.png)](https://files.gitter.im/red/red/welcome/gy3I/Screen-Shot-2017-05-11-at-16.52.40.png)}
    sent: "2017-05-11T10:01:34.063Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5914365673b39c5f1573db0c"
    text: { @qtxie has been so nice to enhance the console, so now we can use colors!! I'm so happy! 😁^/```rebol^/colors: [black red green yellow blue magenta cyan white]^/;https://en.wikipedia.org/wiki/ANSI_escape_code^/color: function [s f /bg b /space][^/^-o: clear {}^/^-s: form s^/^-if space [s: rejoin [{ } s { }]]^/^-if t: find colors f [^/^-^-append o join {3} (index? t) - 1^/^-]^/^-if all [bg t: find colors b] [^/^-^-append o join {;4} (index? t) - 1^/^-]^/^-unless empty? o [^/^-^-s: rejoin [{^^[[} o {m} s {^^[[m}]^/^-]^/^-s^/]^/^/warn: func [n][loop n [print {^^[[?5h^^[[F} wait .05 print {^^[[?5l^^[[F} wait .05] exit]^/^/beep: does [warn 3]^/^/blink: func [s /local r][^/^-insert r: form s {^^[[5m}^/^-unless find/last r {^^[[m} [append r {^^[[m}]^/^-r^/]^/^/alert: func [s][beep print blink color/bg/space s 'white 'red]^/^/  a: ask color "Name: " 'red^/Name: John^/;   "John"^/```}
    sent: "2017-05-11T10:00:54.087Z"
    editedAt: "2017-05-11T10:01:50.672Z"
    v: 3
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59142ad9b88c0f5a0426b785"
    text: "Thanks, just curious."
    sent: "2017-05-11T09:11:53.390Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "591426f1631b8e4e61c4992f"
    text: "That's maximum that fits in Red value slot."
    sent: "2017-05-11T08:55:13.949Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591426ca551ea6485ba83d86"
    text: {it's just how the conversion should work, 1 integer = 4 bytes = 4-element tuple, about use cases I'm not sure 😉 Also why is tuple limited to max 12-elements ?}
    sent: "2017-05-11T08:54:34.699Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "591425055c89dc5361995925"
    text: {@x8x What if you want 3 elements only in your tuple, like for an RGB color, what if you want more... You integer is 32bits, but I don't see use-cases where you would want more a 4-element tuple from your integer rather than 3-element one.  What about 64-bit integers in the future, should they always convert to 8-element tuples?}
    sent: "2017-05-11T08:47:01.299Z"
    editedAt: "2017-05-11T08:49:33.832Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59141e3973b39c5f1573d951"
    text: {@greggirwin If I'm not wrong, an integer is 32 bits, 4 bytes, so it should fill a size 4 tuple from right to left: 0.0.0.1 , 0.0.0.2 , ... I don't see why it is tricky nor why it should be 0.0.1 or 0.0.0.0.0.0.0.0.0.0.0.1 .}
    sent: "2017-05-11T08:18:01.853Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5913d51e5c89dc536198293e"
    text: {A `tuple!` value is a fixed-length sequence of bytes. They are mapping issues arising from a direct conversion from a number. Should `to-tuple 1` return `0.0.1`, or `0.0.0.1`, or even a larger tuple? If you need to manipulate a byte representation of  a number, binary! is there for that, and it can be easily converted to tuple! if needed, and size of the resulting tuple! would then match the size of the binary series. }
    sent: "2017-05-11T03:06:06.648Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5913aac99d90dc7a1c67e292"
    text: {Tricky question. Why would a low int value go in segment 4? Why not 1.0.0 or 0.0.0.0.0.0.0.0.0.0.0.1?}
    sent: "2017-05-11T00:05:29.283Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59137c5de4cfd50062a5f60a"
    text: "Ok thanks! Have a good night!"
    sent: "2017-05-10T20:47:25.192Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "59137bc683cb5db0731ac5f5"
    text: {I think the conversion can be supported, when there are sensible rules for it. Doing the same as `to tuple! to binary!` makes sense IMO, let's see what @dockimbel thinks.}
    sent: "2017-05-10T20:44:54.579Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59137aad551ea6485ba83615"
    text: {Thanks for the link, I thought that was more complicate.. 😁}
    sent: "2017-05-10T20:40:13.113Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "591379feefe561b154b99fb0"
    text: {well yes like it does when going thru `binary!`:^/```^/  to-tuple to-binary 256^/;   0.0.1.0^/```}
    sent: "2017-05-10T20:37:18.789Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "591378fe5c89dc536196d40a"
    text: {`integer!` to `tuple!` - what about values over 255? Should they overflow to next tuple number?}
    sent: "2017-05-10T20:33:02.210Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591378d40a783b6c0a856bd2"
    text: {`binary!` representation is IEEE 754 value (see https://www.h-schmidt.net/FloatConverter/IEEE754.html).^/}
    sent: "2017-05-10T20:32:20.813Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5913787573b39c5f1573d27b"
    text: {I'm not sure about `float!` as I don't understand it's `binary!` representation, but `integer!` to `tuple!` why not?}
    sent: "2017-05-10T20:30:45.508Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "591377c1631b8e4e61c2088c"
    text: {@x8x What should `to tuple! 1.0` return? Going thru binary gives `63.240.0.0.0.0.0.0`, which makes sense, but should it return save value directly also? }
    sent: "2017-05-10T20:27:45.027Z"
    editedAt: "2017-05-10T20:27:55.626Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "591376ade4cfd50062a5f575"
    text: {Any reason why going directly from `integer!` to `tuple!` is not allowed?^/```^/  to-tuple to-binary 1^/;   0.0.0.1^/  to-tuple 1^/*** Script Error: cannot MAKE/TO tuple! from: 1^/*** Where: to^/  to-tuple to-binary 1.0^/;   63.240.0.0.0.0.0.0^/  to-tuple 1.0^/*** Script Error: cannot MAKE/TO tuple! from: 1.0^/*** Where: to^/```}
    sent: "2017-05-10T20:23:09.041Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5912dbd5d1a7716a0aaf73f1"
    text: {@michaeldesu  Charset ranges can be specified using literal char! values, or their codepoints (so integers).}
    sent: "2017-05-10T09:22:29.394Z"
    editedAt: "2017-05-10T09:23:54.550Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5912bbfb8a05641b116958d9"
    text: {greatly appreciated; thanks again to @greggirwin & @endo64}
    sent: "2017-05-10T07:06:35.428Z"
    editedAt: "2017-05-10T07:07:18.656Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912bbde9d90dc7a1c636f1c"
    text: {@michaeldesu you're welcome, I recently done some bitdiddling in Red myself and learned all of this}
    sent: "2017-05-10T07:06:06.956Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5912bb715c89dc5361932bd6"
    text: {@9214 thanks for your `skip to` examples too - that's kinda what I was looking for before}
    sent: "2017-05-10T07:04:17.488Z"
    editedAt: "2017-05-10T07:04:26.180Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912bac383cb5db073171bd2"
    text: {@michaeldesu just remember that `block!` is a structured pile of data until you *explicitly* evaluate it with a function call}
    sent: "2017-05-10T07:01:23.559Z"
    editedAt: "2017-05-10T07:01:31.639Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5912ba929d90dc7a1c636a41"
    text: "thanks guys - super quick!"
    sent: "2017-05-10T07:00:34.107Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
)#(
    id: "5912ba845c89dc536193283c"
    text: ":)"
    sent: "2017-05-10T07:00:20.553Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5912ba7ec89bb14b5aea3a97"
    text: "@endo64 dang! ;)"
    sent: "2017-05-10T07:00:14.526Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5912ba790a783b6c0a81b952"
    text: {@michaeldesu ^/```^/>> val: 255^/== 255^/>> to binary! reduce [val]^/== #{FF}^/```}
    sent: "2017-05-10T07:00:09.287Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5912ba6ed1a7716a0aaed68f"
    text: "`to binary! reduce [val]`"
    sent: "2017-05-10T06:59:58.378Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5912ba4d83cb5db073171a0f"
    text: {@9214 thanks - just for my curiosity about your upper example, why does this fail?^/```^/>> val: 255^/>> to binary! [val]^/*** Script Error: cannot MAKE/TO binary! from: val^/*** Where: to^/```^/}
    sent: "2017-05-10T06:59:25.321Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912b99c631b8e4e61be5be2"
    text: {```Red^/>> skip to binary! 42 3^/== #{2A}^/>> remove-each byte x: to binary! 42 [zero? byte]^/>> x^/== #{2A}^/```}
    sent: "2017-05-10T06:56:28.270Z"
    editedAt: "2017-05-10T06:56:37.185Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5912b53c2b926f8a673d4619"
    text: "@9214 thanks alot"
    sent: "2017-05-10T06:37:48.854Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912b51d0a783b6c0a81a356"
    text: {@michaeldesu this trick will do?^/```^/>> to binary! 42^/== #{0000002A}^/>> to binary! [42]^/== #{2A}^/```}
    sent: "2017-05-10T06:37:17.881Z"
    editedAt: "2017-05-10T06:40:03.473Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5912b2d85c89dc536193057c"
    text: {> A charset is for chars, hence the name, but the dialect is a bit flexible, to aid expression.^/^/thanks, that makes sense - I guess `numset` or similar might make more sense (for building a number set like your example), but now it's understood it's ok}
    sent: "2017-05-10T06:27:36.203Z"
    editedAt: "2017-05-10T06:27:43.236Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912b26a9d90dc7a1c6348e6"
    text: {A charset is for chars, hence the name, but the dialect is a bit flexible, to aid expression.}
    sent: "2017-05-10T06:25:46.807Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5912b239c4d73f445a8fdded"
    text: {You could also do `rng: charset [#"^^@" - #"ÿ"]`, but the numbers seemed clearer given your example.}
    sent: "2017-05-10T06:24:57.802Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5912b219ac693c532ada5c54"
    text: {On brackets vs no brackets, `if` would have to treat blocks specially, as a block itself is a truthy value. Imagine a word could refer to a block, or to `none`, which you use as the test condition. Now think about how `while` might work if its test was *not* a block. It has to evaluate it multiple times, with changing values.}
    sent: "2017-05-10T06:24:25.453Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5912b18f33e9ee771c8ffa5d"
    text: {@greggirwin thanks alot - you've saved my sanity - `charset [0 - 255]` threw me here a bit (i.e. a learning) - I thought charset was for characters only, but apparently not}
    sent: "2017-05-10T06:22:07.908Z"
    editedAt: "2017-05-10T06:23:41.962Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912b1279d90dc7a1c634366"
    text: {Something like this?^/```^/>> test: #{313233}^/== #{313233}^/>> rng: charset [0 - 255]^/== make bitset! #{FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}^/>> parse test [any [change rng #{FF} | skip]]^/== true^/>> test^/== #{FFFFFF}^/>> test: #{313233}^/== #{313233}^/>> rng: charset "13"^/== make bitset! #{00000000000050}^/>> parse test [any [change rng #{FF} | skip]]^/== true^/>> test^/== #{FF32FF}^/```}
    sent: "2017-05-10T06:20:23.300Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5912b0d3c89bb14b5aea14e3"
    text: {also I have a fundamental question.. as a rank beginner - why does `if` have a conditional expression, and `while` has a condition block! I've just been through some confusion about no-brackets vs brackets for these and getting errors due to that. e.g. `while [num-ints >= 0]` raises an error without the brackets}
    sent: "2017-05-10T06:18:59.687Z"
    editedAt: "2017-05-10T06:19:41.332Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912b06cc89bb14b5aea1394"
    text: {ok, I've opted to do the dumb solution :-) for my above question - building a range iteratively - but how can I force the binary values to be one byte wide only, rather than 32-bit values?^/```^/any-byte: clear []^/num-ints: 255^/^/; build the range for 'any byte'^/^/while [num-ints >= 0] [^/    append any-byte to-binary num-ints^/    if num-ints <> 0 [append any-byte [|]] ^/    num-ints: num-ints - 1^/]^/^/print mold any-byte ; gives [#{000000FF} | #{000000FE} | #{000000FD} | ...  #{00000003} | #{00000002} | #{00000001} | #{00000000}]^/^/test: to-binary "123"^/^/print ["before:" test]^/^/parse test [thru #{32} (print "found") change any-byte #{FF}]^/^/print ["after:" test]; this should be #{3132FF}^/```^/so how can I convert `[#{000000FF} | #{000000FE} | #{000000FD} | ...  #{00000003} | #{00000002} | #{00000001} | #{00000000}]` to be `[#{FF} | #{FE} | #{FD} | ...  #{03} | #{02} | #{01} | #{00}]`. I've noticed I can do things like ^/```^/>> test: to-binary 255^/== #{000000FF}^/>> test/4^/== 255^/>> to-binary test/4^/== #{000000FF}^/```^/but feel like this is going in circles.}
    sent: "2017-05-10T06:17:16.376Z"
    editedAt: "2017-05-10T06:17:47.030Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912a43c2b926f8a673d02ef"
    text: {@AlexanderBaggett ^/> Do you know a good way to convert a `string!` to a `file!`?^/^/`to file! string`}
    sent: "2017-05-10T05:25:16.368Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5912a41f631b8e4e61be07c2"
    text: {@gltewalt @AlexanderBaggett sorry, I was sleeping already. But I see @greggirwin was very helpful.}
    sent: "2017-05-10T05:24:47.855Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59129fe4d1a7716a0aae73d3"
    text: {maybe I should give an example. Let's say I want to change the #{33} value below to #{FF}, but I don't want to care what that next hex value is after the initial found case:^/```^/test: to-binary "123"^/== #{313233}^/parse test [thru r (print "found") change #{33} #{FF}]^/found^/== #{3132FF} ; direct case works^/test: to-binary "123"  ; reset^/>> r: [#{00} - #{ff}]  ; setting up a range for any value of byte width doesn't work^/== [#{00} - #{FF}]^/>> parse test [thru #{32} (print "found") change r #{FF}]^/found^/>> test^/== #{313233}  ; proof of failure^/```^/so I want to know how to avoid a hardcoded value for the `change` match. I know something like `r: [#{33} | #{34}]` works to setup several values to search for, so I was hoping for something like `r: [#{00} - #{ff}]`to get a range (for any byte value). Does it make sense?}
    sent: "2017-05-10T05:06:44.708Z"
    editedAt: "2017-05-10T05:07:56.759Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591298148a05641b1168d1a6"
    text: {I'm using parse to update some binary material. I'm wondering how to specify any byte value (so I can skip one byte at a time once I get to the beginning of the search). So far I have `r: [#{00} - #{FF}]` to specify any hex value of 1 byte width. It seems incorrect. What is the correct way?}
    sent: "2017-05-10T04:33:24.792Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912902a0a783b6c0a812197"
    text: "Your answer was very helpful."
    sent: "2017-05-10T03:59:38.123Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59128fdfd1a7716a0aae3d29"
    text: {Well I do have the constraint of the same thing in each tab.}
    sent: "2017-05-10T03:58:23.163Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59128e4dd1a7716a0aae37f7"
    text: {@AlexanderBaggett ^/> I had to do the face/pane approach per Doc's suggestion of how to dynamically add tabs to a tab pane.  https://stackoverflow.com/questions/43809351/how-can-you-dynamically-add-a-new-tab-to-a-tab-panel-in-red^/^/My answer was specific to your question, which asked for having the same content in different tabs. If there is no such constraint, then a simpler method, like suggested by @greggirwin, is preferable.}
    sent: "2017-05-10T03:51:41.598Z"
    editedAt: "2017-05-10T03:57:27.686Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5912874ad1a7716a0aae1fc2"
    text: {Do you know a good way to convert a `string!` to a `file!`?}
    sent: "2017-05-10T03:21:46.514Z"
    editedAt: "2017-05-10T03:21:54.480Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5912872ad1a7716a0aae1f5b"
    text: {Well I fixed 2 things myself since I have had the version you gave me back}
    sent: "2017-05-10T03:21:14.217Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591287169d90dc7a1c62ae83"
    text: "Yeah"
    sent: "2017-05-10T03:20:54.720Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5912856b9d90dc7a1c62a61c"
    text: {Correct on paths:^/```^/>> key: 'xx^/== xx^/>> blk: [a b xx yy]^/== [a b xx yy]^/>> blk/(key)^/== yy^/```^/Readability is one of those darn subjective things. Take this line from your original, for example:^/```^/        button 75x25 "Compile" on-click [print "Compiling" write %data.red face/parent/parent/pane/2/text  either face/parent/pane/3/data = "Dev" [print "Dev code path" call append "red-062.exe -c" "data.red"][print "release" call append "red-062.exe -r" "data.red"]] ^/```^/It's *really* long, and isn't just a single command. There's a lot going on in there.^/^/As Reducers, we do often pack a lot in on a single line, but it's always a balance. As you work on something, refactoring and shrinking it, it's clear to you as the author. When someone else sees it, they don't have the history, or the thought process. They only see the end result. Many's the time I've had to tease apart an experts code to figure out what it's doing. }
    sent: "2017-05-10T03:13:47.551Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59127ceb8a05641b11687b9b"
    text: "That makes it much more readable."
    sent: "2017-05-10T02:37:31.977Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59127ce7631b8e4e61bd8639"
    text: {I do like the coding style of doing a single command per line.}
    sent: "2017-05-10T02:37:27.285Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59127c8b5c89dc5361924735"
    text: {@greggirwin  So you are saying I didn't need compose on the paths?}
    sent: "2017-05-10T02:35:55.708Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59127b2c9d90dc7a1c628757"
    text: {I had to do the face/pane approach per Doc's suggestion of how to dynamically add tabs to a tab pane.  https://stackoverflow.com/questions/43809351/how-can-you-dynamically-add-a-new-tab-to-a-tab-panel-in-red}
    sent: "2017-05-10T02:30:04.136Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59126f3c5c89dc5361921d14"
    text: {My *main* suggestion is to break things out and test *small* pieces. Once you know a piece works, add it to the app. That eliminates all extraneous stuff that could be wrong.}
    sent: "2017-05-10T01:39:08.351Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59126e950a783b6c0a80b47a"
    text: {@AlexanderBaggett , I'll post edited code to you privately, to save space here. ^/^/Suggestion #1 is to format your code according to the style guide: https://github.com/red/red/wiki/Coding-Style-Guide^/That will make it a lot easier for others to review.^/^/The `face/parent/parent/pane/...` approach makes it hard to know what faces you're referring to. You should be able to set face references and access them by name.^/^/You shouldn't need to `compose` paths with parens as segments.^/^/Where `call` isn't working--I'm not going to fix that--look at your strings as you `append` to them.}
    sent: "2017-05-10T01:36:21.160Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59126dffd1a7716a0aadcf25"
    text: {@greggirwin   Can you leave a comment in the Gist? }
    sent: "2017-05-10T01:33:51.135Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59126db30a783b6c0a80b16a"
    text: {Does anyone have an example of Red using symbolic programming?}
    sent: "2017-05-10T01:32:35.090Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59126d9d5c89dc5361921720"
    text: "@greggirwin  thank you :)"
    sent: "2017-05-10T01:32:13.238Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59126ab8c4d73f445a8eeb79"
    text: {@AlexanderBaggett, looking at your code now. Found one problem so far. Bracket in the wrong place in your on-menu func spec.}
    sent: "2017-05-10T01:19:52.407Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59126aa633e9ee771c8f0f2a"
    text: "ok, thanks again :smile: "
    sent: "2017-05-10T01:19:34.347Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59126a9cd1a7716a0aadc307"
    text: "Glad you worked around it."
    sent: "2017-05-10T01:19:24.102Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59126a928a05641b11683fc4"
    text: "I don't think it will work, is what I meant."
    sent: "2017-05-10T01:19:14.700Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59126a7ac89bb14b5ae91dcd"
    text: {thanks for the tip, I'll give it a try (for now, rewriting the file to UTF8 solved my problem)}
    sent: "2017-05-10T01:18:50.895Z"
    editedAt: "2017-05-10T01:19:12.262Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5912684c5c89dc5361920347"
    text: {Yeah, I think you'll hit the same thing if you read as binary and use `to string!`, at a glance anyway.}
    sent: "2017-05-10T01:09:32.197Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591267f39d90dc7a1c6247f6"
    text: {@greggirwin  ok thanks. for now, I'll try to coerce the file into UTF8}
    sent: "2017-05-10T01:08:03.830Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591267d5c89bb14b5ae91469"
    text: {the reason why I have to do this is, oddly I'm reading a text file that seems to be encoded as windows european but I get ` Access Error: invalid UTF-8 encoding: #{A04D6364}` when I do `s: read in-file`}
    sent: "2017-05-10T01:07:33.318Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591267af33e9ee771c8f0615"
    text: "I believe `/as` will come with full I/O in 0.7.0."
    sent: "2017-05-10T01:06:55.834Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5912677d5c89dc536192011b"
    text: {I'm trying:^/```^/>> s: read/as request-file 'Latin-1^/*** Internal Error: reserved for future use (or not yet implemented)^/```^/have I done something wrong?}
    sent: "2017-05-10T01:06:05.352Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "591235b9c4d73f445a8e340b"
    text: "poke it with a good stick please"
    sent: "2017-05-09T21:33:45.451Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5912359c83cb5db07315516f"
    text: "Ahh, didn't see before I messaged (mobile)"
    sent: "2017-05-09T21:33:16.213Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59123583c4d73f445a8e32bb"
    text: {Or those of us who are still learning could poke at it together if the code was up somewhere }
    sent: "2017-05-09T21:32:51.471Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59123567c4d73f445a8e3250"
    text: {https://gist.github.com/AlexanderBaggett/20ed905f7e77a30dab9cff0add62fa2b}
    sent: "2017-05-09T21:32:23.765Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "59123566c4d73f445a8e324e"
    text: {Ok, well.   This is the basic idea.  The menu and compiling doesn't work. Could use some help with those.}
    sent: "2017-05-09T21:32:22.487Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59123502ac693c532ad8b02e"
    text: {@rebolek is a witch doctor. He could probably glance at a gist and give a bunch of suggestions }
    sent: "2017-05-09T21:30:42.720Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "591232f65c89dc5361914915"
    text: {Always tough when we're short of time, which I always seem to be. If you put it in a gist, someone might glance and make comments.}
    sent: "2017-05-09T21:21:58.274Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "591232be33e9ee771c8e415a"
    text: {I managed to convey my intent, but it doesn't actually function in a few areas.}
    sent: "2017-05-09T21:21:02.080Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5912329b631b8e4e61bc6e4d"
    text: {Well,  What I could really use is someone who can take a look at my code and show me the correct way to do the things I am trying to do.}
    sent: "2017-05-09T21:20:27.144Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5912325cd1a7716a0aacfaab"
    text: "Yeah I saw that on Trello"
    sent: "2017-05-09T21:19:24.323Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5912318c8a05641b116773e3"
    text: "We'll have a new GUI console coming soon as well."
    sent: "2017-05-09T21:15:56.328Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5912314d9d90dc7a1c61884a"
    text: {`help call` may give you more info as well. ^/^/I suppose you'll learn a language deeply by writing an IDE for it. Jumping right into the deep end though. :^^)}
    sent: "2017-05-09T21:14:53.403Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59122a3aac693c532ad87f97"
    text: {@AlexanderBaggett  just tinker with small toy-prototypes and gradually build upon it, Red has lots of things to learn, I still barely touched VID and View myself}
    sent: "2017-05-09T20:44:42.029Z"
    editedAt: "2017-05-09T20:46:05.581Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121e00c89bb14b5ae7ff5e"
    text: {I played with it before and decided I wanted to write my own.}
    sent: "2017-05-09T19:52:32.007Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121d4033e9ee771c8dda01"
    text: "https://github.com/ldci/RedEdit"
    sent: "2017-05-09T19:49:20.635Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121d0c83cb5db07314da22"
    text: "well not quite. it almost does what I want so far"
    sent: "2017-05-09T19:48:28.166Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121cf62b926f8a673b12f8"
    text: {@AlexanderBaggett oh, that's a tough one, you should start small}
    sent: "2017-05-09T19:48:06.675Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121cb92b926f8a673b11ba"
    text: {Well short story is I am working on an IDE for Red, long story is, its proving to be quite a challenge with out a background in rebol or lisp.}
    sent: "2017-05-09T19:47:05.477Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121c760a783b6c0a7f6f88"
    text: {```^/view [^/        sld: slider return^/        base 200x200 ^/            draw  [circle 100x100 5]^/            react [face/draw/3: to integer! 100 * sld/data]^/    ]^/```^/in your case it should be `react [t/face/data/1: <new string value somehow obtained>]` I guess}
    sent: "2017-05-09T19:45:58.383Z"
    editedAt: "2017-05-09T19:46:10.750Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121be3ac693c532ad83af3"
    text: ":)"
    sent: "2017-05-09T19:43:31.181Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121bafac693c532ad83a95"
    text: "let's find out :)"
    sent: "2017-05-09T19:42:39.301Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121b97d1a7716a0aac8d74"
    text: "how do I do that?"
    sent: "2017-05-09T19:42:15.302Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121b948a05641b11670b2a"
    text: "okay"
    sent: "2017-05-09T19:42:12.418Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121b93d1a7716a0aac8d67"
    text: "oh"
    sent: "2017-05-09T19:42:11.172Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121b82c89bb14b5ae7f451"
    text: {I think first one should do with `react`, if you want text to change on button click or something}
    sent: "2017-05-09T19:41:54.345Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121aadc89bb14b5ae7eea3"
    text: {could I do `t/face/data/1 :  "new text"`  and thus change the value of the first tab in the tab panel or  does that instead create a word named `t/face/data/1`  and assign it the value of "new text" ?}
    sent: "2017-05-09T19:38:21.259Z"
    editedAt: "2017-05-09T19:38:53.902Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121a898a05641b116704fb"
    text: "text in tab should be changed on some action?"
    sent: "2017-05-09T19:37:45.536Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121a5ad1a7716a0aac8766"
    text: "if it was view"
    sent: "2017-05-09T19:36:58.913Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121a44c89bb14b5ae7ec16"
    text: "Not sure which one I need for this case"
    sent: "2017-05-09T19:36:36.105Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5912195883cb5db07314c883"
    text: {@AlexanderBaggett are we talking about View or simple string manipulation?^/```^/>> replace "abracadabra" "cada" "-POO-"^/== "abra-POO-bra"^/```}
    sent: "2017-05-09T19:32:40.219Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "591218d883cb5db07314c57d"
    text: {is there a string replace? let's say I have a panel in a tab panel named t and I am trying to replace it's text with a new one. What would I do?   `t/face/data/1/ `  I feel silly asking this.  In C# this is just simple assignment. But I wonder if a function is required here in Red.}
    sent: "2017-05-09T19:30:32.848Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "59121874ac693c532ad82a5e"
    text: {`call/show "ping 8.8.8.8"` for example, but I'm not sure that it's working in Red, try R2 if it didn't}
    sent: "2017-05-09T19:28:52.674Z"
    editedAt: "2017-05-09T19:29:00.127Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5912182fc4d73f445a8daabe"
    text: "okay thank you"
    sent: "2017-05-09T19:27:43.360Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591217bfd1a7716a0aac79b9"
    text: {@AlexanderBaggett `call <shell command or executable name>`}
    sent: "2017-05-09T19:25:51.551Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59121223c89bb14b5ae7c1b8"
    text: {Are there any code samples available on how to use `call`?}
    sent: "2017-05-09T19:01:55.581Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "591168408a05641b1163b559"
    text: {@x8x  Thanks for reminder! I updated the [hierarhy](https://github.com/toomasv/red-type-hierarchy/blob/master/Red%20type%20hierarchy2.pdf). Also added some functionality and comments to my dir-tree (`/expand levels` -- 'all, 0, 1, 2, 3... default 2; `/only` -- to print directories only ; and `/redish` -- to keep Red format, default is plain format).}
    sent: "2017-05-09T06:57:04.419Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "5911354b9d90dc7a1c5d041c"
    text: "OK. "
    sent: "2017-05-09T03:19:39.870Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5911346c2b926f8a6736d74b"
    text: {@greggirwin Nothing more than what we discussed, `ext-word!` is still on the table, you can make a PR to switch the codebase to it if you have time.}
    sent: "2017-05-09T03:15:56.467Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5910d0862b926f8a6735585b"
    text: {@x8x, good reminder. @dockimbel, have you had any further thoughts on the `all-word/ext-word/???-word` names?}
    sent: "2017-05-08T20:09:42.493Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5910cdc44746d29d249a034c"
    text: {@toomasv There has been some changes lately about `any-word!` and introduction of new `all-word!` see here :point_up: [April 28, 2017 6:07 AM](https://gitter.im/red/red?at=590279b08bb56c2d11ed4477) (should point to red/red room)}
    sent: "2017-05-08T19:57:56.472Z"
    editedAt: "2017-05-08T19:59:54.926Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5910ca954746d29d249a030c"
    text: {@toomasv @greggirwin Thanks! 🤓 Tom, we both get to the same result! Btw, I just printed your red-type-hierarchy https://github.com/toomasv/red-type-hierarchy/raw/master/Red%20type%20hierarchy2.pdf , very neat, will help in improving my allowed types in function definitions! 👍🏼}
    sent: "2017-05-08T19:44:21.178Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5910b3a3631b8e4e61b5b8e2"
    text: {Could be the modern style of more visual line breaks. Minified JS that I see behind some browser info is unreadable to me - so not always the case that it's easier to read}
    sent: "2017-05-08T18:06:27.194Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5910b2a68a05641b116101df"
    text: {I don't know - maybe because I spent years looking at JS off and on?}
    sent: "2017-05-08T18:02:14.859Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "591087522b926f8a6733de37"
    text: "Cool Wayne! Greg, why do you think that is?"
    sent: "2017-05-08T14:57:22.858Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59107c84c4d73f445a868a82"
    text: {Three months in, and the JS version is still easier to read for me :worried: }
    sent: "2017-05-08T14:11:16.428Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "591060f733e9ee771c862731"
    text: {Wrote a simple sbn compiler: https://github.com/WayneCui/re-scripts/blob/master/sbn.red  ;-P}
    sent: "2017-05-08T12:13:43.737Z"
    v: 1
    author: "590eedbad73408ce4f5d94ad"
) #(
    id: "591015d833e9ee771c84e3a9"
    text: "@x8x It's very nice work!"
    sent: "2017-05-08T06:53:12.721Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590fe9270a783b6c0a75b61f"
    text: {@toomasv  and @x8x, both very nice. I have some reading to do.}
    sent: "2017-05-08T03:42:31.286Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590fe7d233e9ee771c844692"
    text: "@michaeldesu  @dockimbel  :)"
    sent: "2017-05-08T03:36:50.428Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590fddcdefe561b154b96623"
    text: {Alternative `tree` func using an improved `ls` func. Work in progress!! Functionality is good, doc strings are not 😬. https://gist.github.com/x8x/dfb530a2c86bc9599c5f46fa0e056823}
    sent: "2017-05-08T02:54:05.766Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "590fcab2c89bb14b5ade32fd"
    text: "@toomasv Your ascii-fu is great! ;-)"
    sent: "2017-05-08T01:32:34.001Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590fb4b60dcaa48e673a306d"
    text: "@toomasv wow, looks great - thanks alot"
    sent: "2017-05-07T23:58:46.292Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590f8216631b8e4e61b0ea22"
    text: {:point_up: [May 5, 2017 9:16 PM](https://gitter.im/red/red/welcome?at=590cc198ac693c532ac436e0) An alternative solution: [A directory tree](https://gist.github.com/toomasv/f2bcf320800ca340379457c1c4036338):^/```^/>> dir-tree %./ ; While in red-master^/%red-master/^/├─%.appveyor.yml^/├─%.editorconfig^/├─%.travis.yml^/├─%boot.red^/├─%bridges/^/│ ├─%android/^/│ │ ├─%build.r^/│ │ ├─%dex/^/│ │ │ └─%classes.dex^/│ │ ├─%samples/^/│ │ │ └─%eval/^/│ │ │   ├─%AndroidManifest.xml^/│ │ │   ├─%eval.red^/│ │ │   └─%res/^/│ │ │     ├─%drawable-hdpi/^/│ │ │     │ └─%ic_launcher.png^/│ │ │     ├─%drawable-mdpi/^/│ │ │     │ └─%ic_launcher.png^/│ │ │     ├─%drawable-xhdpi/^/│ │ │     │ └─%ic_launcher.png^/│ │ │     ├─%drawable-xxhdpi/^/│ │ │     │ └─%ic_launcher.png^/│ │ │     ├─%values/^/│ │ │     │ ├─%dimens.xml^/│ │ │     │ ├─%strings.xml^/│ │ │     │ └─%styles.xml^/│ │ │     ├─%values-sw600dp/^/│ │ │     │ └─%dimens.xml^/│ │ │     └─%values-sw720dp-land/^/│ │ │       └─%dimens.xml^/│ │ └─%src/^/│ │   ├─%org/^/│ │   │ └─%redlang/^/│ │   │   └─%eval/^/│ │   │     ├─%ClickEvent.java^/│ │   │     ├─%LongClickEvent.java^/│ │   │     ├─%MainActivity.java^/│ │   │     └─%TouchEvent.java^/│ │   └─%redroid/^/│ │     ├─%ClickEvent.java^/│ │     ├─%LongClickEvent.java^/│ │     ├─%MainActivity.java^/│ │     └─%TouchEvent.java^/...^/```}
    sent: "2017-05-07T20:22:46.940Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590e22c80a783b6c0a6fb787"
    text: {@toomasv @9214 what about *reduce, do, load* magic? Meta programming without parse.. Too advanced? }
    sent: "2017-05-06T19:23:52.717Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "590d6f8b0dcaa48e67325d01"
    text: "@greggirwin Cool! :)"
    sent: "2017-05-06T06:39:07.202Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590d6f6e0a783b6c0a6d2f9c"
    text: {@toomasv, I have some `help` work at the top of my list, but I've grabbed your format-related posts here for when I get back on `format`.}
    sent: "2017-05-06T06:38:38.068Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590d6ec2c4d73f445a7bd198"
    text: "Nice."
    sent: "2017-05-06T06:35:46.382Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590d6df52b926f8a6728dbd0"
    text: {:point_up: [May 5, 2017 11:31 AM](https://gitter.im/red/red/welcome?at=590c38610dcaa48e672daeb7) `bind` in `to-columns` may be an overkill. It is enough to `print compose template`, but then template must inlude column names in parens:^/```^/to-columns: func [source [block!] cols template /start s /end e][^/    set [s e] reduce [any [s ""] any [e ""]]^/    print s^/    foreach (cols) source [^/        ;bind template object to-spec cols reduce cols^/        print compose template^/    ]^/    print e^/]^/contents: [0 "Red apprenticeship" 1 1 "There is no spoon" 2 2 "Some `copy`-fu drills" 3 2 "`parse`kido exercises" 4 2 "First steps in tai-`reduce`" 5 1 "There be wizards" 7 2 "`system`-do" 8]^/to-columns contents [level title page][(level * 4) x " " fill (50 - (level * 4)) x "." 'left (title) pad (form page) 3]^/ Red apprenticeship................................ 1  ^/     There is no spoon............................. 2  ^/         Some `copy`-fu drills..................... 3  ^/         `parse`kido exercises..................... 4  ^/         First steps in tai-`reduce`............... 5  ^/     There be wizards.............................. 7  ^/         `system`-do............................... 8  ^/```}
    sent: "2017-05-06T06:32:21.655Z"
    editedAt: "2017-05-06T06:33:47.574Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590d613fc89bb14b5ad5fff9"
    text: { Is it sensible to use clear instead of copy until there is a garbage collector?}
    sent: "2017-05-06T05:38:07.570Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590d5ddc33e9ee771c7b8445"
    text: "Oh, I see you have `/inner` option for that."
    sent: "2017-05-06T05:23:40.719Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590d5a892b926f8a6728a3b5"
    text: {@toomasv  Very cool Hanoi construction. ;-) Be careful with `out: []` as it points to the same block on each call. You might want to change it to`out: copy []`.}
    sent: "2017-05-06T05:09:29.005Z"
    editedAt: "2017-05-06T05:09:54.273Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590d1b8a33e9ee771c7ad631"
    text: "@toomasv thanks so much - works well"
    sent: "2017-05-06T00:40:42.225Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590cce91d1a7716a0a981789"
    text: {> I wonder if anything like red-lang.org is planned for the community scripts, which are not eventually a representative showcase to be included in the Github's red/code?^/^/> @pekr, I'm sure there will be an official location for sharing resources.^/^/So for the time being the scripts that you think are nice to keep around but you do not believe to have the needed quality for official showcase can be collected at https://github.com/freered/Code}
    sent: "2017-05-05T19:12:17.766Z"
    editedAt: "2017-05-05T19:14:46.201Z"
    v: 3
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590cc198ac693c532ac436e0"
    text: {@michaeldesu  @rebolek  @9214 This does work for me:^/```^/get-files: function [path /inner] [^/    path: normalize-dir path       ; Convert to absolute path^/    out: [] ^/    unless inner [out: copy []] ^/    foreach file (read path) [^/        either dir? file [get-files/inner path/:file][append out path/:file]^/    ]^/]^/foreach f get-files %. [print f]^/```}
    sent: "2017-05-05T18:16:56.851Z"
    editedAt: "2017-05-05T18:20:17.215Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590cb836c89bb14b5ad3c393"
    text: {@pekr, I'm sure there will be an official location for sharing resources.}
    sent: "2017-05-05T17:36:54.155Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590cb81e631b8e4e61a74da0"
    text: {@toomasv, wow, thanks! I'm going to steal...er...*note* all this for upcoming work on `format`. The Hanoi tower is very fun. :^^)}
    sent: "2017-05-05T17:36:30.615Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590cb6f633e9ee771c795e6c"
    text: {I wonder if anything like red-lang.org is planned for the community scripts, which are not eventually a representative showcase to be included in the Github's red/code?}
    sent: "2017-05-05T17:31:34.346Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590cb6a72b926f8a67266be2"
    text: {Those functions should at least end up in some code repo. Might be handy for some devs ...}
    sent: "2017-05-05T17:30:15.173Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590cb36f0dcaa48e672fee7d"
    text: {```^/^-lines: ["_" "_|_|_" "_|_____|_" "|_________|"]^/^-foreach l lines [print fill "           " 'center l]^/     _     ^/   _|_|_   ^/ _|_____|_ ^/|_________|^/```}
    sent: "2017-05-05T17:16:31.746Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590cae8d33e9ee771c793966"
    text: {@greggirwin  Ok, now it uses the template to fill the spaces:^/```^/x: make op! func [n c][pad/with copy "" n to char! c]^/fill: function [^/^-"Fill part of a template string with a formed value"^/^-str [any-string!] "Template string"^/^-align [word!] "[left center right justify]"^/^-val "(formed) Value to insert in template string"^/^-;/trunc "Truncate val if longer than str" ;?? make ellipsis last char if truncated?^/][^/^-str: copy str                             ; Don't modify template string^/^-if not any-string? val [val: form val]    ; Prep the value^/^-diff: (length? str) - (length? val)       ; Find the length difference between them^/^-if not positive? diff [return val]        ; Never truncate the formed value^/^-pos: switch/default align [^/^-^-left   [1]^/^-^-center [add 1 to integer! divide diff 2]^/^-^-right  [add 1 diff]^/^-^-justify [^/^-^-^-num: length? split copy val " "                    ; Number of words^/^-^-^-unless num < 2 [                                   ; Unless too few word^/^-^-^-^-len: length? replace/all copy val " " ""       ; Length without spaces^/^-^-^-^-diff2: (length? str) - len                     ; Difference of template and spaceless string^/^-^-^-^-splen: diff2 / (num - 1)                       ; Length of would-be spaces^/^-^-^-^-remains: diff2 % (num - 1)                     ; Additional spaces to distribute^/^-^-^-^-replace/all val " " splen x " ";pad/with copy "" splen #" "     ; Replace single spaces to longer ones^/^-^-^-^-if 0 <> remains [parse val [remains [thru some " " insert " "]]]  ; Distribute additional spaces^/^-^-^-]^/^-^-^-1^/^-^-]^/^-][1]^/^-either align = 'justify [             ; Some special treatment^/^-^-w: charset [not " "]              ; Non-spaces^/^-^-parse val [some [to w s: copy word to [" " | end] (head change at str index? s word)]]     ;  Transfer words to template^/^-^-str                               ; Return template^/^-][^/^-^-head change at str pos val^/^-]^/]^/>> sentence: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."^/== {Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.}^/>> fill 150 x "_" 'justify sentence^/== {Lorem___ipsum___dolor___sit___amet,___consectetur___adipiscing___elit,___sed___do__eiusmod__tempor__incididunt__ut__labore__et__dolore__magna__aliqua.}^/```}
    sent: "2017-05-05T16:55:41.709Z"
    editedAt: "2017-05-05T17:04:48.271Z"
    v: 7
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590c87ec0a783b6c0a69d102"
    text: {:point_up: [May 4, 2017 6:50 PM](https://gitter.im/red/red/welcome?at=590b4daac93941e153c94b8e)  @greggirwin I tried to add `justify` to your alignments menue:^/```^/^-^-justify [^/^-^-^-num: length? split copy val " " ^/^-^-^-unless num < 2 [^/^-^-^-^-len: length? replace/all copy val " " "" ^/^-^-^-^-diff2: (length? str) - len^/^-^-^-^-splen: diff2 / (num - 1)^/^-^-^-^-remains: diff2 % (num - 1)^/^-^-^-^-replace/all val " " splen x " "^/^-^-^-^-if 0 <> remains [parse val [remains [thru some " " insert " "]]]^/^-^-^-]^/^-^-^-1^/^-^-]^/```^/And this is how it came out:^/```^/>> fill 150 x "-" 'justify ""^/== {------------------------------------------------------------------------------------------------------------------------------------------------------}^/>> fill 150 x " " 'justify "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."^/== {Lorem   ipsum   dolor   sit   amet,   consectetur   adipiscing   elit,   sed   do  eiusmod  tempor  incididunt  ut  labore  et  dolore  magna  aliqua.}^/```^/Oh, I used also this snippet there `x: make op! func [n c][pad/with copy "" n to char! c]`}
    sent: "2017-05-05T14:10:52.273Z"
    editedAt: "2017-05-05T14:15:46.341Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590c7c0333e9ee771c784780"
    text: {thanks, sorry I should have read the doc - maybe it's good to put that info in the [getting started](http://www.red-lang.org/p/getting-started.html) page}
    sent: "2017-05-05T13:20:03.010Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c7b9be2285d3b162ebe5d"
    text: {If you compile with the ```-r``` (release option) you will get a self-contained executable.}
    sent: "2017-05-05T13:18:19.305Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590c7907c4d73f445a782de7"
    text: {@michaeldesu libRed is recent addition to speed-up compilation. Before O.6.2 it was possible to compile self-contained exe **only**. :)}
    sent: "2017-05-05T13:07:19.010Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c78b8d1a7716a0a96779e"
    text: "thanks alot @rebolek "
    sent: "2017-05-05T13:06:00.534Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c78ab0dcaa48e672ecaba"
    text: {good news. I thought the libRedRT.dll was needed to accompany the exe}
    sent: "2017-05-05T13:05:47.983Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c7888e2285d3b162eb0b0"
    text: "Source: https://github.com/red/red/"
    sent: "2017-05-05T13:05:12.031Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c78612b926f8a67254395"
    text: {>> 7.Want to generate a compiled executable from that program with no dependencies?^/>> ^/>> $ red -r hello.red^/>> $ ./hello^/^/}
    sent: "2017-05-05T13:04:33.472Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c782433e9ee771c78376f"
    text: {@michaeldesu what DLL? You can build self-contained Red exe.}
    sent: "2017-05-05T13:03:32.220Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c77bc33e9ee771c7835f5"
    text: {I noticed with windows, a DLL is present and needed - I think I read somewhere there is a future plan to allow building a self-contained exe - is it a 1.0 feature plan?}
    sent: "2017-05-05T13:01:48.621Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c777c2b926f8a67253f13"
    text: "thanks - btw I lodged an issue about the above."
    sent: "2017-05-05T13:00:44.817Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c72550a783b6c0a696993"
    text: {@michaeldesu The equivalent shortcuts exist as built-in functions for all types.}
    sent: "2017-05-05T12:38:45.354Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "590c60c4631b8e4e61a5ae8e"
    text: {BTW today on windows 7 when using request-dir, the dialog only showed local fixed drives, and not mapped drive letters (though there were plenty on my machine) I wonder if this has been seen by others, and if not, perhaps I should raise an issue (have screenshot)}
    sent: "2017-05-05T11:23:48.945Z"
    editedAt: "2017-05-05T11:24:10.496Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c5d369d90dc7a1c4af83b"
    text: "@michaeldesu yes, it's just a shortcut"
    sent: "2017-05-05T11:08:38.988Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c5c722b926f8a6724b970"
    text: {:point_up: [May 5, 2017 11:31 AM](https://gitter.im/red/red/welcome?at=590c38610dcaa48e672daeb7) If we add to this following functions, then we can do down->across column printing also:^/```^/map: func [series [series!] fn [any-function! /local out]][^/^-out: make type? series []^/^-foreach i series [append out fn i]^/]^/to-blocks: func [blk num /local out l n b][^/^-out: clear []^/^-l: length? blk^/^-n: either 0 = (l % num) [l / num][l / num + 1]^/^-b: copy blk^/^-repeat i num [append/only out take/part b n]^/^-out^/]^/combine: func [blocks /local out num][^/^-out: clear []^/^-num: length? first blocks^/^-repeat i num [foreach b blocks [append out pick b i]]^/^-out^/]^/>> to-columns combine to-blocks ['a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l] 3 cols: [c1 c2 c3] map cols func [c][return compose [pad/left form (c) 5]]^/^/    a     e     i^/    b     f     j^/    c     g     k^/    d     h     l^/^/```}
    sent: "2017-05-05T11:05:22.532Z"
    editedAt: "2017-05-05T11:12:11.222Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590c5b83e2285d3b162e2c08"
    text: "is `to char!` equiv to `to-char`?"
    sent: "2017-05-05T11:01:23.083Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c5ac0c4d73f445a77a137"
    text: {@rebolek  @toomasv  @PeterWAWood @greggirwin thanks alot for showing some good tips, re: "-" * 10 method}
    sent: "2017-05-05T10:58:08.761Z"
    editedAt: "2017-05-05T10:58:49.835Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c3fa50dcaa48e672dca76"
    text: "too bad there's no TCO yet :("
    sent: "2017-05-05T09:02:29.651Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c3cdde2285d3b162dacfa"
    text: {Hm, I thought it could work, but not tested it very much. Let me come up with something better.}
    sent: "2017-05-05T08:50:37.364Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c3a6d631b8e4e61a50bef"
    text: {it lists only files in a directory (without subdirectories)}
    sent: "2017-05-05T08:40:13.954Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c3a070a783b6c0a686f80"
    text: {@9214 What does it do? There is missing `out` in the end, btw.}
    sent: "2017-05-05T08:38:31.905Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c3945c4d73f445a770c72"
    text: {@rebolek it seems that your `get-files` function doesn't work :confused: and I have no idea how to manage this task without blowing up the stack with recursive calls.}
    sent: "2017-05-05T08:35:17.670Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c38610dcaa48e672daeb7"
    text: {:point_up: [May 4, 2017 6:50 PM](https://gitter.im/red/red/welcome?at=590b4daac93941e153c94b8e)  @greggirwin  That's a nice `fill`. Thanks for sharing! What do you think of this:^/```^/to-spec: func [words values][^/^-out: clear []^/^-repeat i length? words [^/^-^-append out reduce [^/^-^-^-to-set-word pick words i ^/^-^-^-either v: pick values i [v][""]^/^-^-]^/^-]^/]^/to-columns: func [source [block!] cols template /start s /end e][^/^-set [s e] reduce [any [s ""] any [e ""]]^/^-print s^/^-foreach (cols) source [^/^-^-bind template object to-spec cols reduce cols^/^-^-print template^/^-]^/^-print e^/]^/```^/This can be used with `pad` or with your `fill`. Here are some examples of usage:^/```^/do %fill.red^/x: times: make op! func [n c][pad/with copy "" n to char! c]^/^/src: [123 342 5643 115 49837 324 2 99 3567 878589 9659 959 9589589 95 89589 959 59 95 895 95895 959 94564 242 66]^/to-columns/start src [a b c d][^/;^-pad/left form a 10 pad/left form b 10 pad/left form c 10 pad/left form d 10^/^-fill "|         " 'right a^/^-fill "|         " 'right b^/^-fill "|         " 'right c^/^-fill "|         " 'right d #"|"^/] ^-rejoin [^/^-fill "|__________" 'center "Col1" ^/^-fill "|__________" 'center "Col2" ^/^-fill "|__________" 'center "Col3" ^/^-fill "|__________|" 'center "Col4"^/]^/src: ["111" 111 [32 451] "nice!" url! %some/file #(a: map) 'word]^/to-columns/start src [a] [fill "|____________|" 'center a] rejoin [" " 12 x "_"]^/to-columns src [a] [pad/left mold a 10]^/^/; These are used together^/to-columns/end ["value" "type?"] [a b] [pad/left a 10 pad/left b 10] 21 x #"_"^/to-columns src [a] [pad/left form a 10 pad/left to-string type?/word a 10] ```}
    sent: "2017-05-05T08:31:29.437Z"
    editedAt: "2017-05-05T08:35:01.577Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590c35099d90dc7a1c4a5354"
    text: {The utility is Alt + Shift, which changes to English layout, which many programmers even in CZ use anyway :-)}
    sent: "2017-05-05T08:17:13.059Z"
    editedAt: "2017-05-05T08:17:20.371Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590c339b0a783b6c0a685346"
    text: {@pekr maybe there's a utility you can get to map the keystrokes more conveniently for you?}
    sent: "2017-05-05T08:11:07.943Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c3218d1a7716a0a954284"
    text: "thanks @rebolek "
    sent: "2017-05-05T08:04:40.325Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c2cee631b8e4e61a4cb9b"
    text: "smells like Emacs :alien:"
    sent: "2017-05-05T07:42:38.935Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c2c8bac693c532ac1a50a"
    text: {In the days of WordPerfect, everybody had a little paper with the combinations for the 12 function keys stuck on the keyboard.}
    sent: "2017-05-05T07:40:59.813Z"
    editedAt: "2017-05-05T07:41:14.578Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "590c2beb0dcaa48e672d77db"
    text: {Well, well, as for the keyboard layout effectivity, that all counts for an english keyboard layout only? For me, in order to get special chars like braces, curly braces or square braces, require special keypress too. In Czech layout for e.g., it is an Alt Gr key, plus specific key. On my keyboard from Logitech, it does not even have those alternative chars displayed, so I just need to know, that AltGr + F = `[` ... not much convenient ....}
    sent: "2017-05-05T07:38:19.576Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590c2b0d33e9ee771c76e98d"
    text: {@michaeldesu Try something like:^/```^/get-files: function [path /inner] [^/    out: [] ^/    unless inner [out: copy []] ^/    foreach file read path [^/        either dir? file [get-files/inner path/:file][append out path/:file]^/    ]^/]^/```}
    sent: "2017-05-05T07:34:37.455Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c2afeac693c532ac19ce4"
    text: "list all files in all subdirectories?"
    sent: "2017-05-05T07:34:22.533Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c2a0d33e9ee771c76e406"
    text: {probably a flat block with path, so I can do a foreach loop through each file}
    sent: "2017-05-05T07:30:21.515Z"
    editedAt: "2017-05-05T07:30:40.032Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c29f2e2285d3b162d58d7"
    text: {@michaeldesu How do you want to collect them? Structured tree, flat block, with/without path...?}
    sent: "2017-05-05T07:29:54.696Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c29da0a783b6c0a68283f"
    text: "@9214 ok that's great - thanks alot"
    sent: "2017-05-05T07:29:30.607Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
)#(
    id: "590c29bdc4d73f445a76cf7f"
    text: {* `system/options/script` refers to the script name (string! or none!).^/* `system/options/args` refers to a list of tokenized arguments (block! or none!).^/* `system/script/args` refers to the original command-line (string! or none!).}
    sent: "2017-05-05T07:29:01.936Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c29bc2b926f8a6723d83b"
    text: {also another dumb question, earlier I talked about collecting a bunch of files from a dir:^/```^/>> my-dir: request-dir^/>> files: read my-dir^/```^/how to do a recursive view to collect files in various sub-dirs?}
    sent: "2017-05-05T07:29:00.385Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c295fc4d73f445a76ceab"
    text: "thanks, I'll check it out"
    sent: "2017-05-05T07:27:27.130Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c29320dcaa48e672d6bf2"
    text: "@michaeldesu `system/script/args`?"
    sent: "2017-05-05T07:26:42.356Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c29060a783b6c0a682521"
    text: {for a MS-DOS app, is there anyway to pass command-line parameters into the program?}
    sent: "2017-05-05T07:25:58.998Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c28179d90dc7a1c4a1c98"
    text: {@9214 yeah I had realised that also - I think little things like that (and also no semi-colons at end) I think really make a nice difference}
    sent: "2017-05-05T07:21:59.752Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c280e631b8e4e61a4b67c"
    text: {I think Paul Graham said something like that about `lisp-naming-notation` versus `snake_case_naming`, since `_` = `Shift + -`.}
    sent: "2017-05-05T07:21:50.740Z"
    editedAt: "2017-05-05T07:22:14.038Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c2752c4d73f445a76c618"
    text: {The major advantage is that in Lisps you type `(` and `)` by pressing `Shift + 9` and `Shift + 0` with your poor little pinkie, while in Redbol it's just `[` and `]`. Language was designed with care about user's fingertips. :point_up:  :point_up_2: }
    sent: "2017-05-05T07:18:42.384Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c25f29d90dc7a1c4a140b"
    text: {@AlexanderKoshkarov I have a very similar background to you. I've never used Julia. I'm using python for its extensive libs for Excel and data processing, and lately this is my bread and butter activity. So far I like what I see with Red, and the community here is fantastic. I encourage you to try out Red (I think less brackets than Racket :smile: ).}
    sent: "2017-05-05T07:12:50.014Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590c12a7c89bb14b5ad0d241"
    text: "Yes"
    sent: "2017-05-05T05:50:31.054Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c1222c89bb14b5ad0cfd7"
    text: "ah, `:add` will be evaluated before `in`?"
    sent: "2017-05-05T05:48:18.646Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c11b65c89dc5361797195"
    text: "I don't get this error message :confused: "
    sent: "2017-05-05T05:46:30.518Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c1169c89bb14b5ad0cdcc"
    text: {```^/>> c: context [add: 1]^/== make object! [^/    add: 1^/]^/>> get in c 'add^/== 1^/>> get in c :add^/*** Script Error: in does not allow action! for its word argument^/*** Where: in^/```}
    sent: "2017-05-05T05:45:13.329Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c11330dcaa48e672d15b9"
    text: {but then `:add` will return whatever value is bounded to `add` in specific context, no?}
    sent: "2017-05-05T05:44:19.256Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c10d7c89bb14b5ad0cc95"
    text: {@9214 There is big difference, `:add` returns function directly, `'add` may have different meaning in different context.}
    sent: "2017-05-05T05:42:47.431Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c0f5a0a783b6c0a67bf0a"
    text: "@9214 gratzi"
    sent: "2017-05-05T05:36:26.183Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590c0e9ac89bb14b5ad0c5c1"
    text: {since `:add` and `'add` are `any-word!`s, there's little difference IMO}
    sent: "2017-05-05T05:33:14.363Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c0e80c4d73f445a766abf"
    text: {@9214 you're right, I should not post before first tea ;)}
    sent: "2017-05-05T05:32:48.961Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590c0e690a783b6c0a67bc6d"
    text: {@rebolek but you still need `do` `reduce` combo ;)}
    sent: "2017-05-05T05:32:25.017Z"
    editedAt: "2017-05-05T05:32:29.980Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c0dbfac693c532ac13310"
    text: {```Scheme^/((if #t + -) 1 2)^/=> 3^/((if #f + -) 1 2)^/=> -1   ^/```^/```Red^/>> do reduce [either on ['add]['subtract] 1 2]^/== 3^/>> do reduce [either off ['add]['subtract] 1 2]^/== -1^/```^/I'm still thinking about `deduce` (`do` + `reduce`) mezzanine.}
    sent: "2017-05-05T05:29:35.293Z"
    editedAt: "2017-05-05T05:30:15.230Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590c07980dcaa48e672cfab2"
    text: {@gltewalt https://gitter.im/red/red/code this one?}
    sent: "2017-05-05T05:03:20.547Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590bf53b631b8e4e61a4074f"
    text: {Is there a "code" room?}
    sent: "2017-05-05T03:44:59.488Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590bf514631b8e4e61a406ea"
    text: {```^/>> explode! @geekyi^/== [#"@" #"g" #"e" #"e" #"k" #"y" #"i"]^/```}
    sent: "2017-05-05T03:44:20.137Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "590b66594d51a79e643c9481"
    text: "to beat MPI"
    sent: "2017-05-04T17:35:21.053Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b6655c93941e153c9d305"
    text: {well, maybe there is a place to complement Julia in scientific computing, I do not know. Julia also was created with slogon : one language to rule them all :) and some Julia fanboys claim to use Julia for any type of programming , but I also doubt that. Anyway, julia is not so good at beating MPI yet, but they are work on it. If Red can be used on clusters with ~100000 processors, it would be nice replacement for C/Fortran , but this is very very difficult task}
    sent: "2017-05-04T17:35:17.929Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b648d4d51a79e643c8b71"
    text: {I don't want to beat the specialized tools, but complement them.}
    sent: "2017-05-04T17:27:41.209Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b6391e1b61e9328122946"
    text: {so will use it's own python... to not scare people with a lot of errors ....}
    sent: "2017-05-04T17:23:29.668Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b637e63a9bc9028492d9d"
    text: "can use Conda"
    sent: "2017-05-04T17:23:10.308Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b637263a9bc9028492d6a"
    text: "for example Plots.jl"
    sent: "2017-05-04T17:22:58.285Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b636810a6a16673e18cf7"
    text: {heh) well, Julia does not, but some packages outside of the language are quite free to do what they want}
    sent: "2017-05-04T17:22:48.940Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b62f84d51a79e643c848f"
    text: {> if whole world would move to something like NixOs, all those problems would be solved ofcourse^/^/I see we think alike! :D}
    sent: "2017-05-04T17:20:56.763Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b62dd63a9bc9028492a4e"
    text: {Mine is 2GB. And I thought that was large! Indeed.. so Julia comes batteries included with it's own python? XD}
    sent: "2017-05-04T17:20:29.478Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b62a4e66ccf474deed97d"
    text: {if whole world would move to something like NixOs, all those problems would be solved ofcourse}
    sent: "2017-05-04T17:19:32.411Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b628c734cd4454d1d0682"
    text: {heh, mine is 6GB. A lot of packages use their own version of things, like own version of python...  it makes it battery included,  but there is a bad taste about it}
    sent: "2017-05-04T17:19:08.108Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b6209734cd4454d1d056a"
    text: {@AlexanderKoshkarov My `.julia` file. Must be the dependencies installed}
    sent: "2017-05-04T17:16:57.877Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b61b210a6a16673e1839b"
    text: {" it takes quite a lot of space in my HD" ?}
    sent: "2017-05-04T17:15:30.542Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b6190e66ccf474deed35f"
    text: {I do not know if I think in math... and I defiantly do not know how other  people think, but haskell is not as difficult as it is advertised, it is just different =) From what I heard so far Red is also different =)}
    sent: "2017-05-04T17:14:56.327Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b6142d346fab721bb520f"
    text: {Agree about Julia. Still.. it takes quite a lot of space in my HD, and I'm not sure why..}
    sent: "2017-05-04T17:13:38.237Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590b60d0d346fab721bb507b"
    text: {well, for data science I think it would be difficult to beat julia. It is like matlab done right =) + whole community is focused on numerical computing. All lagnuage is designed to be good at it... So I doubt that I will switch my numerical staff needs. But I would check out Red just to see the ideas of the language. Maybe I will be a fan. (Currently haskell is my favourite)}
    sent: "2017-05-04T17:11:44.201Z"
    editedAt: "2017-05-04T17:16:09.096Z"
    v: 2
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b5ffb4d51a79e643c7808"
    text: {Languages like Haskell have huge appeal for people who think in math. :^^)}
    sent: "2017-05-04T17:08:11.266Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b5f71bedc54b621c9d5b6"
    text: {Making Red usable for science, including data science, will benefit greatly from users like you, who know the domain and your needs.}
    sent: "2017-05-04T17:05:53.323Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b5d7ebedc54b621c9cd58"
    text: {@greggirwin , heh, I am not coding for money, and I am not even in computer science major (I am theoretical physicst). I used python/C before, but then I descovered Haskell, and it was the best thing I ever tried :) so after that, I become interested in computer languages just to see what is out there. Currently,  I am learning lisp (racket) and It's selling point for me is homoiconicity, but I have not saw anything else new to me yet (I am optimistic). For my work, I use Julia or C or Fortran because there is nothing better for scintific computing yet. So I woild definatly check out the Red, but I would mostly look into language design not in good staff people want (cross compilation, good windows support, GUI). I work exclusively in Linux and a little gui is possible.}
    sent: "2017-05-04T16:57:34.743Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b5abbc93941e153c99a66"
    text: "I will definatly check red's parser anyway"
    sent: "2017-05-04T16:45:47.717Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b5a96594c95a5642eba2f"
    text: {@9214 well, I have never heard of this duckling library in Haskell, but I familiar with monadic parsers in haskell (like parsec), combining it with Haskell datatypes, I cannot imagine what can beat it in convenience (maybe not in speed)}
    sent: "2017-05-04T16:45:10.459Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "590b568863a9bc902848ea89"
    text: "It will, yes. "
    sent: "2017-05-04T16:27:52.207Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b559110a6a16673e1463d"
    text: {@greggirwin Does your format function do padding? Like with spaces (to line up columns) or leading zeros. If it had the ability to specify the padding character, that could support that case as well}
    sent: "2017-05-04T16:23:45.431Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "590b534c594c95a5642e9389"
    text: "@swthornton, wow. Indeed."
    sent: "2017-05-04T16:14:04.249Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b4dd44d51a79e643c1621"
    text: {```^/^-fill: function [^/^-^-"Fill part of a template string with a formed value"^/^-^-str [any-string!] "Template string"^/^-^-align [word!] "[left center right]"^/^-^-val "(formed) Value to insert in template string"^/^-^-;/trunc "Truncate val if longer than str" ;?? make ellipsis last char if truncated?^/^-][^/^-^-str: copy str^-^-^-^-^-^-^-; Don't modify template string^/^-^-if not any-string? val [val: form val]^-; Prep the value^/^-^-diff: (length? str) - (length? val)^-^-; Find the length difference between them^/^-^-if not positive? diff [return val]^-^-; Never truncate the formed value^/^-^-pos: switch/default align [^/^-^-^-left   [1]^/^-^-^-center [add 1 to integer! divide diff 2]^/^-^-^-right  [add 1 diff]^/^-^-][1]^/^-^-head change at str pos val^/^-]^/^-e.g. [^/^-^-template: "+________+"^/^-^-fill template 'left   ""^/^-^-fill template 'right  ""^/^-^-fill template 'center ""^/^-^-fill template 'left   "abc"^/^-^-fill template 'right  "abc"^/^-^-fill template 'center "abc"^/^-^-fill template 'left   "abcd"^/^-^-fill template 'right  "abcd"^/^-^-fill template 'center "abcd"^/^-^-fill template 'left   "abcdefghi"^/^-^-fill template 'right  "abcdefghi"^/^-^-fill template 'center "abcdefghi"^/^-^-fill template 'left   "abcdefghij"^/^-^-fill template 'right  "abcdefghij"^/^-^-fill template 'center "abcdefghij"^/^-^-fill template 'left   "abcdefghijk"^/^-^-fill template 'right  "abcdefghijk"^/^-^-fill template 'center "abcdefghijk"^/^-]^/```}
    sent: "2017-05-04T15:50:44.807Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b4daac93941e153c94b8e"
    text: {@toomasv, I have a different `fill` experiment in the `format` work I'm doing, which may also apply to what @michaeldesu says he does with filling between things in some cases.}
    sent: "2017-05-04T15:50:02.037Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590b4c7dd346fab721badba8"
    text: {Def and Dupe Demo: https://gist.github.com/greggirwin/75ec0e46b4babad9077b23a57916eeec^/^/I have `array` as well, but will let people make their own as a learning exercise.}
    sent: "2017-05-04T15:45:01.644Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "590b226cf22385553da3982d"
    text: {https://hackernoon.com/how-to-build-a-todo-app-using-react-redux-and-webpack-1aa99dc2f45c}
    sent: "2017-05-04T12:45:32.844Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b2256881b89e101b25136"
    text: {Why we use Red, hilarious example of doing a to-do app. So many layers 😊     ://hackernoon.com/how-to-build-a-todo-app-using-react-redux-and-webpack-1aa99dc2f45c }
    sent: "2017-05-04T12:45:10.111Z"
    v: 1
    author: "58fa606cd73408ce4f5a121f"
) #(
    id: "590b1751c1d3b501544a1daf"
    text: "@9214 lol, good stuff"
    sent: "2017-05-04T11:58:09.042Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "590b03dec1d3b5015449cc4d"
    text: {thanks @9214  for the laugh.. should rename "welcome" to "dojo" - it does feel like a path... :-) thanks all for your continue support & tips to the apprentices}
    sent: "2017-05-04T10:35:10.642Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590af5a88e4b63533d2ec3d3"
    text: {:) Here's a little `copy`-fu routine for those who come after:^/```^/fill: func [c n][pad/with clear "" n to-char c]^/a: third body-of :fill^/>> fill "-" 5^/== "-----"^/>> a^/== "-----"^/>> probe :fill^/== func [c n][pad/with clear "-----" n to-char c]^/>> fill "+" 3^/== "+++"^/>> a^/== "+++"^/>> probe :fill^/== func [c n][pad/with clear "+++" n to-char c]^/```}
    sent: "2017-05-04T09:34:32.282Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590af34f12d2409935c5a631"
    text: "@9214 :+1: ;-)"
    sent: "2017-05-04T09:24:31.974Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590aedf84098d96d3435f490"
    text: {According to ancient ~~docs~~ scrolls, to embark on the Path, apprentice should master the following combat styles:^/* `copy`-fu^/* jiu-`bind`su^/* `block!`kwang-`do`^/* `parse`kido}
    sent: "2017-05-04T09:01:44.663Z"
    editedAt: "2017-05-04T09:03:14.304Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590ae2194098d96d3435bf8d"
    text: {@PeterWAWood  OK, thanks!  So it's:^/```^/x: times: make op! func [n c][pad/with copy "" n to char! c]^/```}
    sent: "2017-05-04T08:11:05.664Z"
    editedAt: "2017-05-04T08:14:24.103Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590ae1da8fcce56b2062390e"
    text: {You need to copy or clear the string value in the function: ^/```text^/times: func [n c][pad/with  copy "" n to char! c]^/```}
    sent: "2017-05-04T08:10:02.165Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590ae16e8e4b63533d2e6ff2"
    text: {Thanks, @PeterWAWood! Interesting! How do you comment this? After defining the above function it gets stuck in first values:^/```^/times: func [n c][pad/with "" n to-char c]^/times: make op! :times^/>> 8 times "+"^/== "++++++++"^/>> 8 times "-"^/== "++++++++"^/>> 8 times " "^/== "++++++++"^/>> 20 times "-"^/== "++++++++------------"^/>> 30 times "."^/== "++++++++------------.........."^/>> 5 times ";"^/== "++++++++------------.........."^/```}
    sent: "2017-05-04T08:08:14.178Z"
    editedAt: "2017-05-04T08:10:33.666Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590ae0ed4098d96d3435bb43"
    text: {@toomasv I think you can shorten your times func to^/```^/times: func [n c][pad/with "" n to char! c]^/```^/^/It will be a little quicker too.}
    sent: "2017-05-04T08:06:05.555Z"
    editedAt: "2017-05-04T08:07:12.142Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590adc7dd32c6f2f09688943"
    text: "cool :-)"
    sent: "2017-05-04T07:47:09.589Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590ada1bedf919574a763114"
    text: "Nice :)"
    sent: "2017-05-04T07:36:59.963Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ad95fedf919574a762e9c"
    text: {Also:^/```^/times: func [n c][pad/with "" n either char? c [c][to-char c]]^/times: make op! :times^/x: :times^/>> 8 times "-"^/== "--------"^/>> 8 x "-"^/== "--------"^/```}
    sent: "2017-05-04T07:33:51.226Z"
    editedAt: "2017-05-04T07:35:40.547Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590ad83fc1d3b501544907d3"
    text: "@rebolek thanks - it's handy to know"
    sent: "2017-05-04T07:29:03.300Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ad7f612d2409935c5305c"
    text: {`x` -> `char!`, `form x` -> `string!`, `load form x` -> `integer!`}
    sent: "2017-05-04T07:27:50.247Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ad7e58fcce56b20620c21"
    text: {yes, in my case before I wanted to convert the string digits to a series containing integer equivalents}
    sent: "2017-05-04T07:27:33.299Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ad7e0c1d3b50154490629"
    text: {`parse "123" [any [char: (print copy/part char 1) skip]]`}
    sent: "2017-05-04T07:27:28.587Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590ad7bbd32c6f2f096876fa"
    text: "But it depends what type of `x` do you want."
    sent: "2017-05-04T07:26:51.561Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ad7a15f3e76601ee8c172"
    text: {@michaeldesu Actually, this works also:^/```^/>> foreach x "123" [print x]^/1^/2^/3^/```}
    sent: "2017-05-04T07:26:25.223Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ad778d32c6f2f0968758b"
    text: {this simpler one also seems to work:^/```^/>> foreach x "123" [print form x]^/1^/2^/3^/```^/I have a recollection now, that another may have already mentioned here before}
    sent: "2017-05-04T07:25:44.533Z"
    editedAt: "2017-05-04T07:26:15.901Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ad6edc1d3b5015448ffec"
    text: {there's always a better (mind-bending) way ;-) The wizard is casting his (educational) spells again! Thanks again @rebolek}
    sent: "2017-05-04T07:23:25.439Z"
    editedAt: "2017-05-04T07:24:48.664Z"
    v: 5
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ad6d0c1d3b5015448ffa1"
    text: {Or^/```^/>> foreach x "123" [print load form x]^/1^/2^/3^/```}
    sent: "2017-05-04T07:22:56.051Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ad696c1d3b5015448fea9"
    text: {ah yes, I've been caught out with that for converting string to integers^/```^/>> foreach x "123" [print to-integer x]^/49^/50^/51^/; need ^/foreach x "123" [print to-integer to-string x] ^/; or^/foreach x "123" [print to-integer x - #"0"]  ; thanks to Nenad's suggestion from before^/1^/2^/3^/```^/}
    sent: "2017-05-04T07:21:58.762Z"
    editedAt: "2017-05-04T07:22:45.683Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ad68e8e4b63533d2e457a"
    text: {I was looking for a `duplicate`function. Forgot it was part of `append`and other few funcitons ...}
    sent: "2017-05-04T07:21:50.889Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590ad58b8e4b63533d2e419a"
    text: {@pekr Actually, you can multiply hyphen too in Red :)^/```^/>> 10 * #"-"^/== 450^/```}
    sent: "2017-05-04T07:17:31.027Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ad5154098d96d34358626"
    text: {@pekr sorry - you had me giving it a try however, in case I missed something obvious. Yes - it's strange but effective in that lang, and commonly seen}
    sent: "2017-05-04T07:15:33.751Z"
    editedAt: "2017-05-04T07:16:35.988Z"
    v: 4
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ad4c5881b89e101b0ed35"
    text: {@michaeldesu that was not an example of Red, just a smile that multiplying hyphen char by 10 gets you 10 hyphens :-)}
    sent: "2017-05-04T07:14:13.343Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590ad49c08c00c092ae0eba9"
    text: {@toomasv yes, agree - thank you - I was just about to consider}
    sent: "2017-05-04T07:13:32.284Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ad3c1edf919574a7614cc"
    text: {```^/fill: func [c n][pad/with "" n c]^/>> fill #"-" 8^/== "--------"^/```}
    sent: "2017-05-04T07:09:53.222Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "590ad32b5e61bd94342fe2cd"
    text: {I see, thanks - it's a solution. I'm so used to putting compact hyphens to break up printed sections of output (with the python equiv.)}
    sent: "2017-05-04T07:07:23.476Z"
    editedAt: "2017-05-04T07:08:17.832Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ad2d68e4b63533d2e37d4"
    text: {`pad`ding empty string is probably shortest code, I guess^/```^/>> pad/with "" 10 #"-"^/== "----------"^/```}
    sent: "2017-05-04T07:05:58.346Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ad2b212d2409935c51c9a"
    text: "@michaeldesu but that does not work in Red."
    sent: "2017-05-04T07:05:22.972Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ad2a5881b89e101b0e6e4"
    text: {@pekr heh, I think it doesn't work  @rebolek thanks again!}
    sent: "2017-05-04T07:05:09.870Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ad270c1d3b5015448ecf4"
    text: {In Rebol , there is `array`:^/```^/>> rejoin array/initial 10 #"-"^/== "----------"^/```}
    sent: "2017-05-04T07:04:16.843Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ad2555f3e76601ee8abb1"
    text: "`- * 10`= 10 hyphens? :-)"
    sent: "2017-05-04T07:03:49.020Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590ad24a5f3e76601ee8ab9f"
    text: {@michaeldesu @greggirwin is currently working on a DSL for that. Right now, you don't have such syntactic sugar, but can use `pad` (`? pad`) or  `append/dup` to generate sequences of same pattern.}
    sent: "2017-05-04T07:03:38.066Z"
    editedAt: "2017-05-04T07:03:45.279Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590ad1ca8e4b63533d2e3388"
    text: {in python, I could do a thing like `print('-' * 10)` to emit 10 hyphens - what is the equivalent in Red?}
    sent: "2017-05-04T07:01:30.156Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ace8408c00c092ae0d464"
    text: {it's a different thinking compared to the usual in python :-)}
    sent: "2017-05-04T06:47:32.111Z"
    editedAt: "2017-05-04T06:47:43.871Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ace3e8e4b63533d2e22c9"
    text: "yes, I noticed - it's a learning here thanks"
    sent: "2017-05-04T06:46:22.449Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ace158fcce56b2061e611"
    text: {thanks again for the lesson @rebolek  @x8x you guys should write up some tutorial blog posts ;-)}
    sent: "2017-05-04T06:45:41.701Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ace134098d96d343567a1"
    text: "`print` does not print the quotes."
    sent: "2017-05-04T06:45:39.023Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590acdde08c00c092ae0d131"
    text: {I see how `print ["Area is" area "square units"]` in the REPL gives the unquoted output vs what's really needed:^/```^/>> print ["Area is" area "square units"]^/Area is 6 square units^/>> form reduce ["Area is" area "square units"]^/== "Area is 6 square units"^/```}
    sent: "2017-05-04T06:44:46.756Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590acd688e4b63533d2e1fe1"
    text: "yes, it works thanks - that was unexpected"
    sent: "2017-05-04T06:42:48.607Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590acd4fc1d3b5015448d6d9"
    text: "Maybe adding a newline makes sense also."
    sent: "2017-05-04T06:42:23.117Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590acd35edf919574a75fe91"
    text: {Probably what `print` does:^/```^/write %log.txt form reduce ["Area is" area "square units"]^/```}
    sent: "2017-05-04T06:41:57.675Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590acd04f22385553da219ad"
    text: {hmm, what's the best way to get a natural result in this case:^/```^/area: 6^/write %log.txt ["Area is" area "square units"]^/```^/i.e. `Area is 6 square units` to appear in the text file}
    sent: "2017-05-04T06:41:08.854Z"
    editedAt: "2017-05-04T06:42:01.033Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590acb238fcce56b2061dc8c"
    text: {@michaeldesu you should use `save` in your case, I think.}
    sent: "2017-05-04T06:33:07.667Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590aca59881b89e101b0c7c2"
    text: {I see a similar issue when I try to write a block form concat to `write` - if I write the block by itself I get the unexpected result. I think `form` is good here. Maybe.}
    sent: "2017-05-04T06:29:45.398Z"
    editedAt: "2017-05-04T06:32:13.635Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ac9eec1d3b5015448c958"
    text: "thanks "
    sent: "2017-05-04T06:27:58.674Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
)#(
    id: "590ac9cedddd87f332d407f0"
    text: {😃 have a look at `? form` `? mold` `? reduce` `? rejoin`}
    sent: "2017-05-04T06:27:26.847Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "590ac8595e61bd94342fba89"
    text: {no, please - multiple viewpoints welcome and greatly appreciated! :-)}
    sent: "2017-05-04T06:21:13.892Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ac8345e61bd94342fb9fa"
    text: {@x8x sorry, I will get back to work and leave it to you ;)}
    sent: "2017-05-04T06:20:36.979Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ac8197b553c707c531437"
    text: "@rebolek Hey, slowly! I was writing that.. 😠"
    sent: "2017-05-04T06:20:09.188Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "590ac7d95f3e76601ee88197"
    text: {It's the difference between passing `string!` and `block!` to `print`. `string!` is printed as is, while `block!` gets some special treatment (`form reduce` basically).}
    sent: "2017-05-04T06:19:05.991Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ac783edf919574a75ea22"
    text: "@x8x  - wow, thanks alot"
    sent: "2017-05-04T06:17:39.187Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ac6f9c4ac989f3cb93ea3"
    text: {```^/  area: 6 print ["Area is" area "square units"]^/Area is 6 square units^/  area: 6 print rejoin ["Area is" area "square units"]^/Area is6square units^/```}
    sent: "2017-05-04T06:15:21.650Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "590ac6aaedf919574a75e73b"
    text: {I think the spacing idea is good for this concat method: ^/```^/red>> print ["Area is" area "square units"]^/Area is 6 square units^/```^/but I wonder if there's a mode to make not add the space between items?}
    sent: "2017-05-04T06:14:02.415Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ac4bf5f3e76601ee87398"
    text: ":)"
    sent: "2017-05-04T06:05:51.795Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ac434f22385553da1f956"
    text: {no - it was welcome, not a spoiler - kinda put me out of my misery :-)}
    sent: "2017-05-04T06:03:32.969Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ac40b5f3e76601ee871e3"
    text: "Sorry for the spoiler :smile: "
    sent: "2017-05-04T06:02:51.381Z"
    editedAt: "2017-05-04T06:03:00.148Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ac3d98e4b63533d2dfcf0"
    text: {thanks for that - I was just trying to figure it out.. }
    sent: "2017-05-04T06:02:01.996Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ac34412d2409935c4e10b"
    text: {@michaeldesu `my-dir/:f` is a `path!` that gets evaluated and if first element is `file!`, it evaluates to `file!`. Note this:^/```^/>> my-dir^/== %/Users/sony/Documents/^/>> file: %some-file^/== %some-file^/>> my-dir/:file^/== %/Users/sony/Documents/some-file^/>> my-dir/file^/== %/Users/sony/Documents/file^/```}
    sent: "2017-05-04T05:59:32.213Z"
    editedAt: "2017-05-04T05:59:41.024Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ac207f22385553da1f393"
    text: {@rebolek thanks - that's super compact (wow that's a mind-bender)}
    sent: "2017-05-04T05:54:15.702Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ac19ad32c6f2f09682262"
    text: {@michaeldesu of course:^/```^/foreach f files [print my-dir/:f]^/```}
    sent: "2017-05-04T05:52:26.362Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "590ac12d8fcce56b2061b7c0"
    text: {I have a pretty dumb question about walking a directory collecting files to process - first I'm collecting the files for a dir. so I have ^/```^/>> my-dir: request-dir^/== %/C/temp/ms/test/^/>> files: read my-dir^/== [%test%20numbers1.txt %test%20numbers2.txt %test%20numbers3.txt]^/>> foreach f files [print [my-dir f]]^//C/temp/ms/test/ test numbers1.txt^//C/temp/ms/test/ test numbers2.txt^//C/temp/ms/test/ test numbers3.txt^/```^/I want to get the complete path, so I can read the file properly. I'm used to a simple direct concat. Is this ^/```^/foreach f files [a: clear "" append a my-dir append a f print a]^/; which gives:^/; /C/temp/ms/test/test numbers1.txt^/; /C/temp/ms/test/test numbers2.txt^/; /C/temp/ms/test/test numbers3.txt^/```^/the most elegant solution, or something better? }
    sent: "2017-05-04T05:50:37.943Z"
    editedAt: "2017-05-04T05:52:02.481Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ab62a8fcce56b20619363"
    text: "ok thanks"
    sent: "2017-05-04T05:03:38.019Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590ab1b55e61bd94342f6ef8"
    text: "`write/binary` + `read/binary`"
    sent: "2017-05-04T04:44:37.292Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590aa4aa5f3e76601ee80882"
    text: "is there a way to copy  a file within Red?"
    sent: "2017-05-04T03:48:58.327Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590a11135f3e76601ee5d8cd"
    text: {Their Notebooks and CDF are also something we can do. Active documents are an old concept in Rebol, and if you look at their symbolic expressions (https://www.wolfram.com/language/fast-introduction-for-programmers/en/symbolic-expressions/ -- can anyone say "Relative Expression"?) and WSTP, Red is *the* language to build things like it. As I've said about building an editor in Redbol, the first thing they did for Emacs was create the language to write it in. We already have that.}
    sent: "2017-05-03T17:19:15.166Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590a0f505e61bd94342d081e"
    text: "https://www.wolfram.com/data-framework/"
    sent: "2017-05-03T17:11:44.258Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590a0f148bb56c2d11097d31"
    text: {I looked at Frink when @geekyi posted about it some time back. It's on my list. :^^) I've thought of it more like symbolic programming, as Wolfram is, where we not only need to design the input format, but the internal symbolic structure and engine. It could be really fun, and a great example of how Red is a language construction toolkit, not just for programming, but for sharing and exchanging knowledge.}
    sent: "2017-05-03T17:10:44.004Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5909e7428fcce56b205e6b8a"
    text: {@maximvl Rebol does and how it does that is awesome!}
    sent: "2017-05-03T14:20:50.242Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e71b881b89e101ad2aae"
    text: "well, we have no dates yet :D"
    sent: "2017-05-03T14:20:11.016Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e6de12d2409935c164b6"
    text: {Not much to complain about it except the literal handling of dates and intervals}
    sent: "2017-05-03T14:19:10.065Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e6a7edf919574a72660f"
    text: {```frink^/now[] - # 2002-01-03 10:00 AM New York #  -> [years, months, days, min, s]^/15, 3, 29, 39, 19.6101544^/```}
    sent: "2017-05-03T14:18:15.022Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e5e75e61bd94342c265c"
    text: "and frinklang is dated back to... 2001?"
    sent: "2017-05-03T14:15:03.211Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5909e59712d2409935c15f70"
    text: "> weekend^/^/that's the whole point!"
    sent: "2017-05-03T14:13:43.110Z"
    editedAt: "2017-05-03T14:13:49.053Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5909e57e08c00c092add3deb"
    text: {If you've got java, or android, I suggest you try it out. ~ 1kb standalone .jar file or android app}
    sent: "2017-05-03T14:13:18.661Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e55108c00c092add3d26"
    text: "I'll try to make a dialect on the weekend :D"
    sent: "2017-05-03T14:12:33.109Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e533edf919574a725cfb"
    text: "Yep"
    sent: "2017-05-03T14:12:03.866Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e52b08c00c092add3c6b"
    text: "@geekyi is `5 5` a `25`?"
    sent: "2017-05-03T14:11:55.770Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e4f0f22385553d9e85b9"
    text: {In other words, whitespace meaning of multiplication is a bit crucial to remove the verbosity there}
    sent: "2017-05-03T14:10:56.767Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e4c95e61bd94342c214b"
    text: "interesting"
    sent: "2017-05-03T14:10:17.219Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e4b95f3e76601ee4f5e7"
    text: {It doesn't matter what it actually is, as long as the end result is the same :smile: }
    sent: "2017-05-03T14:10:01.242Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e48ec1d3b501544520f0"
    text: {Taken together, `5 m` is `5` multiplied by `m` end result which gives you a measure of a quantity of length/distance}
    sent: "2017-05-03T14:09:18.556Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e447881b89e101ad19cf"
    text: "Yes, exactly"
    sent: "2017-05-03T14:08:07.258Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e444c1d3b50154451f65"
    text: {but this `5 m` is still an expression, a multiplication, what is the result of it?}
    sent: "2017-05-03T14:08:04.399Z"
    editedAt: "2017-05-03T14:08:08.824Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e43ef22385553d9e8188"
    text: {The hierarchy is like this: `Quantity` -> `Unit` -> `UnitPrefix` : `length` -> `m` -> `km`}
    sent: "2017-05-03T14:07:58.730Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e413f22385553d9e8014"
    text: "so `5` is `5`, but `5 * m` is `5 m`, right?"
    sent: "2017-05-03T14:07:15.839Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e3e88bb56c2d11089b92"
    text: "ok, I see"
    sent: "2017-05-03T14:06:32.813Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e3d98bb56c2d11089b2b"
    text: "yep"
    sent: "2017-05-03T14:06:17.631Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e3c4881b89e101ad1747"
    text: {You mean in frink?^/```frink^/5 m km^/5000 m^^2 (area)^/```}
    sent: "2017-05-03T14:05:56.889Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e37e5f3e76601ee4eebf"
    text: {@geekyi but it space is multiplication, what will be the output of this? `5 m km` or `5 * 5 * m` ?}
    sent: "2017-05-03T14:04:46.732Z"
    editedAt: "2017-05-03T14:05:49.559Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e3655f3e76601ee4ee61"
    text: {@maximvl Yeah, dialect syntax being too different from redbol I mean specifically}
    sent: "2017-05-03T14:04:21.830Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909e33af22385553d9e7c0f"
    text: {@geekyi ^/>except as a dialect^/^/well, dialect is the way to go for such thing, why should it be anything else?}
    sent: "2017-05-03T14:03:38.062Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909e2ff8bb56c2d1108973c"
    text: {@maximvl yup. The problem is syntax tho. For the particular use case of doing offhand calculations and conversion, frink syntax is almost ideal (whitespace is multiplication)^/ I don't know how you would introduce it to red except as a dialect.. except with almost identical syntax^/Alternatively, you have to do `add 5 * m 5 * km` if you want to retain the meaning of whitespace as item seperator in blocks: `[5 * km 4 * m]`}
    sent: "2017-05-03T14:02:39.867Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909df20f22385553d9e67d3"
    text: "we can parse frink's datafile into Red rules :D"
    sent: "2017-05-03T13:46:08.923Z"
    editedAt: "2017-05-03T13:46:52.324Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909dd7c881b89e101acf544"
    text: {And the core idea there is having a corpus of examples and generating rules for it, and the rest is automated:^/>To extend Duckling's support for a dimension in a given language, typically 2 files need to be updated:^/* Duckling/<dimension>/<language>/Rules.hs^/* Duckling/<dimension>/<language>/Corpus.hs^/}
    sent: "2017-05-03T13:39:08.117Z"
    editedAt: "2017-05-03T13:40:32.416Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "5909dd52c1d3b5015444fc02"
    text: {What *Duckling* seems to provide in addition seems to be more relaxed rules of parsing; which isn't always an advantage (i.e. ambiguity and verbosity)}
    sent: "2017-05-03T13:38:26.961Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "5909d9ef08c00c092add05f4"
    text: {The *secret ingredient* is a [data file](https://frinklang.org/frinkdata/units.txt)}
    sent: "2017-05-03T13:23:59.698Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909d9615e61bd94342beb98"
    text: {It's a pretty lightweight system ~ 1 kB + Java. Between frink, redbol and j, they are the most handy tools I use almost daily basis}
    sent: "2017-05-03T13:21:37.984Z"
    editedAt: "2017-05-03T13:21:44.213Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5909d8038fcce56b205e204d"
    text: "`->` works like a conversion operator"
    sent: "2017-05-03T13:15:47.358Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909d7db8e4b63533d2a36a8"
    text: {```frink^/24 lightyears -> parsecs^/7.3584334508532136155^/```}
    sent: "2017-05-03T13:15:07.672Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909d7145f3e76601ee4a89a"
    text: {[![image.png](https://files.gitter.im/red/red/welcome/Nt6C/thumb/image.png)](https://files.gitter.im/red/red/welcome/Nt6C/image.png)}
    sent: "2017-05-03T13:11:48.532Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909d6f55f3e76601ee4a82c"
    text: {It's a slightly different take from rebol syntax and datatypes (whitespace is multiplication):^/```^/5 m + 5 km^/5005 m (length)^/```^/(first line is actual code, second result)}
    sent: "2017-05-03T13:11:17.596Z"
    editedAt: "2017-05-03T13:14:10.458Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5909d640edf919574a7209f7"
    text: {@geekyi do they have a type system which represents each "type"? I can imaging something like^/```^/a: 5 meters^/b: 5 kilometers^/a + b ; => 5005 meters^/```}
    sent: "2017-05-03T13:08:16.614Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909d5625f3e76601ee49d42"
    text: {@9214  @maximvl  Somewhat related: https://frinklang.org/#HowFrinkIsDifferent}
    sent: "2017-05-03T13:04:34.055Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5909d3008fcce56b205e084d"
    text: {looks like this is it: https://github.com/facebookincubator/duckling/blob/master/Duckling/AmountOfMoney/EN/Rules.hs}
    sent: "2017-05-03T12:54:24.530Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909d2b308c00c092adcde3c"
    text: {hm, they generate this file, but where is the source}
    sent: "2017-05-03T12:53:07.402Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909d277edf919574a71f936"
    text: "the guys almost invented `parse`"
    sent: "2017-05-03T12:52:07.181Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5909d271d32c6f2f0964536d"
    text: {@9214 check this out: https://github.com/facebookincubator/duckling/blob/master/Duckling/Ranking/Classifiers/EN.hs}
    sent: "2017-05-03T12:52:01.895Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "590950faf22385553d9c090d"
    text: {@AlexanderKoshkarov IDK if this is a good selling point, but  check [this Haskell library for parsing text into structured data](https://github.com/facebookincubator/duckling) and then compare it with build-in Red and Rebol `parse` meta-DSL and rich type system.  (Maybe someone from guru tribe will show you some examples, since I'm not that experienced with parsing yet :( ). But this thing in Haskell required Facebook incubator to build it, while in Redbol it could be done by one semi-experienced user for sure.}
    sent: "2017-05-03T03:39:38.027Z"
    editedAt: "2017-05-03T03:41:49.518Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5908f14dedf919574a6e8a11"
    text: {@mikeparr I'm pretty sure something related was posted here somewhere}
    sent: "2017-05-02T20:51:25.808Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590898b9d32c6f2f095f382a"
    text: {Perhaps you could use trim/with or trim in your code in place of remove and fill-count}
    sent: "2017-05-02T14:33:29.527Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "59086dd05f3e76601ede9a8c"
    text: {@dockimbel thanks. I've whittled it done to this working example. The objective is to cut and mask numbers to a set style (cut the overall length to 4 chars fewer than the original number length, but also leave remaining 4 digits visible). This is achieved using `remove` and `insert`. A necessary step is to validate the number (achieved with the `if`) - simplified for example's sake. The rule for skip is needed to avoid getting stuck when we don't want to use the number due to it being invalid. Any easier way is appreciated.^/```^/digit: charset "0123456789"^/check: [10 digit | 12 digit]    ; simplified multi-length values to check (in reality there are more sizes)^/^/is-valid: function [num-str] [^/    "simple validation"^/    either even? (to-integer (last num-str) - #"0") [true] [false]^/]^/^/s: "hi 7766665555 aaa 9876543210 bbb 1234567893 ccc 1122334452 ddd 991122334452 eee"^/^/print ["before:" s]^/^/parse s [^/    some [^/        to check ^/        ahead copy m check ^/        (n: (length? m) - 4 fill-count: n - 4)^/        [^/            if (is-valid m) [^/                remove n digit^/                fill-count insert "X"^/            ] | skip ^/        ]^/    ]^/]^/^/print [" after:" s]^/```^/gives^/```^/before: hi 7766665555 aaa 9876543210 bbb 1234567893 ccc 1122334452 ddd 991122334452 eee^/ after: hi 7766665555 aaa XX3210 bbb 1234567893 ccc XX4452 ddd XX334452 eee^/```^/I feel like I've learned a lot about Red just to get this working. I'm grateful for this board's help :-) BTW in learning about `remove` & `insert` I kinda feel those parameters are a bit inconsistent (but this is likely my misunderstanding). Thanks.}
    sent: "2017-05-02T11:30:24.340Z"
    editedAt: "2017-05-02T11:31:30.077Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59085922edf919574a6b8bb4"
    text: {@AlexanderKoshkarov hi, I know Racket as well, it's quite similar to CL it terms how they both are different from Red :D}
    sent: "2017-05-02T10:02:10.039Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "59084d3012d2409935ba6e42"
    text: {Parse and Red literal types. I can get it to recognise most types so far, apart from binary - the case where an explicit base is provided with a #.  Any thoughts? Bug, or work-in-progress?^/}
    sent: "2017-05-02T09:11:12.324Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5908384f6aea30763d609951"
    text: {@michaeldesu Could you post a real (short) example of what you want to achieve? There is probably a simpler way.}
    sent: "2017-05-02T07:42:07.203Z"
    editedAt: "2017-05-02T07:42:14.778Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59082d9812d2409935b9ea92"
    text: {@dockimbel well after a fair amount of frustration, the only way I could get it to work was like:^/```^/parse s [^/    some [^/        to my-rule ^/        ahead copy m my-rule ^/        [ if (pass-test m) [  ; do an update ] | skip ]^/    ]^/]^/```^/I'm not sure if it's the way you suggested. I guess I misunderstood it before. This is one of the really tricky things about Parse.}
    sent: "2017-05-02T06:56:24.876Z"
    editedAt: "2017-05-02T07:03:38.983Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5908171ff22385553d96bf60"
    text: "thanks "
    sent: "2017-05-02T05:20:31.827Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590816e96aea30763d6013b4"
    text: "@michaeldesu `if` rule can be used anywhere."
    sent: "2017-05-02T05:19:37.667Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590814bc08c00c092ad578e2"
    text: {ok I understand it now - thanks. Does it matter where the `if ` statement appears in the rule? I found in my case, it worked reliably when the `if` statement was placed as the last one in the rule.}
    sent: "2017-05-02T05:10:20.438Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590811b88bb56c2d1100deba"
    text: {so I guess it's like this? `[rule if(pass-test m) ; do the rule if the test passes | <alternative> ; do the alternative]`}
    sent: "2017-05-02T04:57:28.309Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5908114a881b89e101a56860"
    text: {@dockimbel oh I see - I've misunderstood the use of `if`. Thanks alot. I'll see how I go.}
    sent: "2017-05-02T04:55:38.009Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5908105c8bb56c2d1100d95c"
    text: {@michaeldesu You are trying to apply Red `if` syntax in Parse, it's not the same. `if` command in Parse only expects a paren expression, that's all. So:  `if (pass-test m) | skip` is enough. The purpose of `if` in Parse is to offer a way to set the success/failure state according to a Red expression rather than a matching rule.}
    sent: "2017-05-02T04:51:40.905Z"
    editedAt: "2017-05-02T04:52:39.720Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59080fc808c00c092ad567aa"
    text: {thanks, but I'm having some trouble. is it ^/```^/if (pass-test m) | skip [ ^/            ; m is valid, so an update that advances the pointer^/]^/```^/or ^/```^/ if (pass-test m) [ ^/            ; m is valid, so an update that advances the pointer^/] | skip^/```^/as I've tried both, and these don't work it seems}
    sent: "2017-05-02T04:49:12.867Z"
    editedAt: "2017-05-02T04:49:37.771Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59080e148e4b63533d22a54e"
    text: {@michaeldesu `if (pass-test m) | <alternative rule>`}
    sent: "2017-05-02T04:41:56.826Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59080b048e4b63533d229d12"
    text: {sorry to interrupt, I have a question about parse and this from the Red site:^/if (expr)^-: evaluate the Red expression, if false or none, fail and backtrack.^/^/I don't understand how to code the backtrack part. I am doing some string modification based on a validity check, something like this:^/```^/parse s [^/    some [^/        to my-rule ^/        ahead copy m my-rule ^/        if (pass-test m) [ ^/            ; m is valid, so do an update that advances the pointer^/        ]  ; otherwise skip^/    ]^/]^/```^/originally this was fine until I encountered a string that was invalid, and seem to stop everything. I realised I need a skip in the fail case, so I thought to try something like the following (to replace the if test), but it doesn't work since either is not a valid term I think.^/```^/either (pass-test m) [ ^/            ; m is valid, so an update that advances the pointer^/        ] [ skip ]^/```^/can someone show how to code the failure part using the backtrack? Thanks.}
    sent: "2017-05-02T04:28:52.835Z"
    editedAt: "2017-05-02T04:29:37.354Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59080337d32c6f2f095cb721"
    text: {e.g., 7GUIs came up recently, and I've done all but the last task in Red. If you do GUIs, you can compare the different langs they have in the project: https://github.com/greggirwin/7guis/tree/master/Red}
    sent: "2017-05-02T03:55:35.080Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590802c0f22385553d967d69"
    text: {So, @AlexanderKoshkarov, what kind of real-world needs do you have? What have you built that you would be curious to see an implementation of in Red? Obviously, we can't tackle huge projects, but it's fun to puzzle out new solutions and ideas. }
    sent: "2017-05-02T03:53:36.338Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908025b6aea30763d5fd0f5"
    text: {Red would be an easy sell if those who have used Rebol and Red for a long time could just mind meld their experiences and feelings to new users. :^^)}
    sent: "2017-05-02T03:51:55.736Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590801e5d32c6f2f095cb42b"
    text: {I do think there are revolutionary things in Red, many from Rebol's design, but Carl and Nenad's deep experience is like that of great writers or musicians. The result comes from them, and their past experience.}
    sent: "2017-05-02T03:49:57.097Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5908014d8fcce56b20568182"
    text: {I was reading some Robert Martin articles recently, and he has some great thoughts (I don't always agree with him, but sometimes I do strongly). One point was that there is nothing new in programming languages, not for a long time. We tweak and flavor, but nothing is revolutionary. ^/^/Each of us has favorite things about Red, and there are things about it that elegantly combine ideas from Lisp, Forth, Logo, and others. We can talk tech about a lot of things that are different, but it still doesn't tell the story. For better or worse, you really need to experience it to feel the difference. ^/^/One thing I often bring up is the number of datatypes, and how they let you clearly express things in a natural way. The wide range of ways to use it is another one. Not just in the sense of being full stack (metal to meta), but in that Lisper can hack crazy things their way, C-farers can do their thing down low, and anyone with a brain can write a GUI. All by dropping a single EXE in a folder. ^/^/Of course, we have our sacred cows, and it's easy enough to hold up our strengths, pointing them out as weaknesses in other languages. It all depends on what you want to do, and what clicks in your brain. ^/^/We do need to compare ourselves to other langs, to set some context and manage expecations, but, in many ways, doing so is an exercise in futility. Rather than competing in a feature matrix or micro-benchmark, we need examples of real things we need to write, what they look like in Red, and let others map to their language of choice. }
    sent: "2017-05-02T03:47:25.165Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5907ee2bc1d3b501543ce8df"
    text: "eh, @JacobGood1  you are right...^/Thanks guys"
    sent: "2017-05-02T02:25:47.525Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ee1108c00c092ad4fe97"
    text: {for anyother Arch linux users, there is an AUR package https://aur.archlinux.org/packages/red/}
    sent: "2017-05-02T02:25:21.264Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ee00edf919574a69eebc"
    text: "@AlexanderKoshkarov  yea, quit procrastinating =P"
    sent: "2017-05-02T02:25:04.376Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5907edf85f3e76601edcb05f"
    text: "Thanks"
    sent: "2017-05-02T02:24:56.005Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ede7881b89e101a4f4a4"
    text: {@AlexanderKoshkarov Good luck for your exams then, see you around.}
    sent: "2017-05-02T02:24:39.014Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907edb7c1d3b501543ce7df"
    text: "Shen... nice lisp... if you cal it so =D"
    sent: "2017-05-02T02:23:51.207Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ed9ed32c6f2f095c745c"
    text: {Clojure, CL, and Shen... those are the Lisps I am most familiar with}
    sent: "2017-05-02T02:23:26.470Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5907ed98c1d3b501543ce78e"
    text: {@AlexanderKoshkarov Yes, 32-bit libs are needed for now. }
    sent: "2017-05-02T02:23:20.833Z"
    editedAt: "2017-05-02T02:23:33.212Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907ed8a8bb56c2d11006ae8"
    text: {@AlexanderKoshkarov 32 bit libs are [needed](http://www.red-lang.org/p/download.html)}
    sent: "2017-05-02T02:23:06.677Z"
    editedAt: "2017-05-02T02:25:09.979Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5907ed6f08c00c092ad4fc86"
    text: {btw it is not working with arch linux out of the box (. anyway, I will fix it latter, once I pass my exam}
    sent: "2017-05-02T02:22:39.839Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ed51f22385553d96368c"
    text: "heh"
    sent: "2017-05-02T02:22:09.946Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ecf0d32c6f2f095c72d4"
    text: {@AlexanderKoshkarov FYI, we have plans for a "typed Red", something along the lines of Typed Racket.}
    sent: "2017-05-02T02:20:32.500Z"
    editedAt: "2017-05-02T02:21:14.869Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907ecc6f22385553d9634b1"
    text: "Then @JacobGood1 might give you better insights."
    sent: "2017-05-02T02:19:50.456Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907ecb7881b89e101a4f083"
    text: "so I am close to lisp in some sense"
    sent: "2017-05-02T02:19:35.186Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907eca86aea30763d5f8c03"
    text: "I am learning racket"
    sent: "2017-05-02T02:19:20.862Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907eca16aea30763d5f8bb4"
    text: "I do not know CL"
    sent: "2017-05-02T02:19:13.742Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
)#(
    id: "5907ec94f22385553d96341c"
    text: {We have some CL fans here (@maximvl) who can give you some better info by comparing it to CL.}
    sent: "2017-05-02T02:19:00.057Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907ec39c1d3b501543ce2fa"
    text: "Just decided to see what it is"
    sent: "2017-05-02T02:17:29.941Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ec0f881b89e101a4ef23"
    text: "someone mentioned it"
    sent: "2017-05-02T02:16:47.948Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ec0bf22385553d9632cb"
    text: "I was on some forum about common lisp"
    sent: "2017-05-02T02:16:43.549Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ec00edf919574a69e79f"
    text: "mm, let me remember"
    sent: "2017-05-02T02:16:32.967Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ebd88bb56c2d110066be"
    text: {@geekyi is curious how @AlexanderKoshkarov  found out about red}
    status: true
    sent: "2017-05-02T02:15:52.289Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907ebca6aea30763d5f8970"
    text: "thx"
    sent: "2017-05-02T02:15:38.509Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ebb56aea30763d5f8947"
    text: {@AlexanderKoshkarov You can have an overview of a few key features through some of the blog articles like:^/* http://www.red-lang.org/2016/03/060-red-gui-system.html^/* http://www.red-lang.org/2016/07/eve-style-clock-demo-in-red-livecoded.html^/* http://www.red-lang.org/2016/07/native-reactive-spreadsheet-in-17-loc.html^/* http://www.red-lang.org/2013/11/041-introducing-parse.html}
    sent: "2017-05-02T02:15:17.642Z"
    editedAt: "2017-05-02T02:15:55.266Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907eb51d32c6f2f095c6d84"
    text: {Once I've passed my comprehansive exam (in 2 weeks) I will play with red, it is indeed looks interesting}
    sent: "2017-05-02T02:13:37.443Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907eb298fcce56b20563647"
    text: "no mac for me =)"
    sent: "2017-05-02T02:12:57.975Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907eb1308c00c092ad4f536"
    text: "Well, I will play, you've got me intrigued"
    sent: "2017-05-02T02:12:35.348Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907eb0d8bb56c2d11006497"
    text: {A lot of others here use wine. But MacOS works slightly I think}
    sent: "2017-05-02T02:12:29.648Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907eae0f22385553d962f41"
    text: "=D"
    sent: "2017-05-02T02:11:44.646Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907eadeedf919574a69e3cd"
    text: "I do not use windows"
    sent: "2017-05-02T02:11:42.460Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ead05f3e76601edca5ce"
    text: {@AlexanderKoshkarov mm, I think I forgot biggest selling point ;) currently, gui works best on windows. Contributions welcome elsewhere :)}
    sent: "2017-05-02T02:11:28.683Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907eac5881b89e101a4e8cc"
    text: "that is neat"
    sent: "2017-05-02T02:11:17.049Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907eac28fcce56b20563412"
    text: {I say play with it for about a week. You'll probably have a "oh my god" moment}
    sent: "2017-05-02T02:11:14.537Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907eac0c1d3b501543cdf37"
    text: "=D"
    sent: "2017-05-02T02:11:12.905Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907eabfedf919574a69e399"
    text: "well, yes, now I see"
    sent: "2017-05-02T02:11:11.383Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907eaa8881b89e101a4e871"
    text: {1MB = Red compiler + native cross-compiler + linker + interpreter + runtime library (~50 datatypes, GUI system, 5 DSLs, ...) + REPL (a CLI and a GUI one).}
    sent: "2017-05-02T02:10:48.511Z"
    editedAt: "2017-05-02T02:11:38.299Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907ea418e4b63533d223153"
    text: {"Single-file (~1MB) contains whole toolchain, standard library and REPL." damn! at first I thought, the hellow world is ~1MB =D}
    sent: "2017-05-02T02:09:05.969Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907ea1bc1d3b501543cdd0c"
    text: {@AlexanderKoshkarov Your point is valid, it's just that whatever punch-line you can think of, it would be very reductive compared to the vast number of features Red offers (and will offer). Yet, we need to select one best angle for marketing it. Fullstack programming might be that one.}
    sent: "2017-05-02T02:08:27.661Z"
    editedAt: "2017-05-02T02:08:54.109Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907e9d9edf919574a69df56"
    text: {@geekyi , when I read a list of features in  http://www.red-lang.org/p/about.html I thought: I saw every point of this list already somewhere, so what Is so special about Red? and I came here bugging you guys}
    sent: "2017-05-02T02:07:21.395Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e94c881b89e101a4e2e7"
    text: {"The matrix is real"}
    sent: "2017-05-02T02:05:00.064Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e94712d2409935b912cf"
    text: "yes, I even watched some part of video"
    sent: "2017-05-02T02:04:55.162Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e9256aea30763d5f8073"
    text: {@AlexanderKoshkarov More seriously, it's hard to sum it up in a single sentence, as there are many dimensions in Red you won't find them all in other languages: everything is data (even more so than Lisps), DSL-oriented (5 or 6 DSL built-in already), (real) full-stack programming from metal to high abstractions,  built-in cross-platform GUI system, reactive programming, etc...}
    sent: "2017-05-02T02:04:21.594Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907e8f6881b89e101a4e1e8"
    text: {@AlexanderKoshkarov did you checkout http://www.red-lang.org/p/about.html ?}
    sent: "2017-05-02T02:03:34.516Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907e8cad32c6f2f095c6527"
    text: {I do feel like Julia is a really nice language we can steal ideas from..}
    sent: "2017-05-02T02:02:50.480Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907e8bed32c6f2f095c651a"
    text: {I was not ment to be an asshole, but you defiantly need to sell it with better marketing}
    sent: "2017-05-02T02:02:38.044Z"
    editedAt: "2017-05-02T02:02:47.295Z"
    v: 2
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e8a2f22385553d9626c5"
    text: "yes"
    sent: "2017-05-02T02:02:10.308Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e89108c00c092ad4ed6a"
    text: {"building the worlds first full stack programming language"}
    sent: "2017-05-02T02:01:53.481Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e8188e4b63533d2229e8"
    text: "Well, that's better I suppose"
    sent: "2017-05-02T01:59:52.002Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907e817c1d3b501543cd5a6"
    text: "that's better =) "
    sent: "2017-05-02T01:59:51.333Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e7f38e4b63533d2229a1"
    text: {"Red, it's bigger on the inside."}
    sent: "2017-05-02T01:59:15.783Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907e7ee8e4b63533d22298c"
    text: "=D"
    sent: "2017-05-02T01:59:10.386Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e7de8e4b63533d222976"
    text: {@AlexanderKoshkarov "Red: there is no code"}
    sent: "2017-05-02T01:58:54.037Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5907e7d908c00c092ad4eafb"
    text: "It's called definitional scoping. "
    sent: "2017-05-02T01:58:49.407Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e7d2f22385553d96241d"
    text: "factor? not really"
    sent: "2017-05-02T01:58:42.096Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e7bfd32c6f2f095c6288"
    text: "that is interesting"
    sent: "2017-05-02T01:58:23.215Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e7bb881b89e101a4ddf9"
    text: {@AlexanderKoshkarov Have you heard of factor? My next favourite thing (it's a forth dialect with high-level programming constructs, *combinators*)}
    sent: "2017-05-02T01:58:19.279Z"
    editedAt: "2017-05-02T01:58:31.744Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5907e7b95f3e76601edc9d65"
    text: "heh"
    sent: "2017-05-02T01:58:17.648Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e7a908c00c092ad4eaa3"
    text: "There are no scopes. :smile: "
    sent: "2017-05-02T01:58:01.599Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e7a85f3e76601edc9d53"
    text: "no scope?"
    sent: "2017-05-02T01:58:00.616Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e7a212d2409935b90d52"
    text: {I know Red is lisp influenced , homoiconic  and all. But a lot of languages have it, even for example Julia}
    sent: "2017-05-02T01:57:54.241Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e78012d2409935b90d0a"
    text: "Here's one. It has no scope. "
    sent: "2017-05-02T01:57:20.102Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e761881b89e101a4dc34"
    text: "oh, I do not know  forth"
    sent: "2017-05-02T01:56:49.652Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e74eedf919574a69d773"
    text: "..And also being simple, like forth? :)"
    sent: "2017-05-02T01:56:30.451Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907e6fa6aea30763d5f7919"
    text: {heh, that is exactly what Racket folk telling me about racket....}
    sent: "2017-05-02T01:55:06.678Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e6d06aea30763d5f78c3"
    text: {There are quite a lot of things that is different.. but if I were to settle on any one thing, it's being able to change the language to suit yourself. This might mean different things to different people}
    sent: "2017-05-02T01:54:24.639Z"
    editedAt: "2017-05-02T01:55:38.546Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5907e6baf22385553d961fa2"
    text: {steal from the best is good, but you guys originate from this strange Rebol, so Red probably has it's big thing, right? what is it? =)}
    sent: "2017-05-02T01:54:02.068Z"
    editedAt: "2017-05-02T01:54:14.800Z"
    v: 3
    author: "582a46a9d73408ce4f35e2e7"
)#(
    id: "5907e66a881b89e101a4d930"
    text: "hah, it is lisp slogan"
    sent: "2017-05-02T01:52:42.417Z"
    editedAt: "2017-05-02T01:52:49.351Z"
    v: 2
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e653881b89e101a4d914"
    text: {@AlexanderKoshkarov Red - have it all, or implement yourself  ;)}
    sent: "2017-05-02T01:52:19.636Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907e61712d2409935b9083e"
    text: {Re. Haskell, altho Red has a very rich set of types, what I want most is *typeclasses*. I feel a more sophisticated system could be implemented tho. Some people have code for higher order functions. ^/The general idea is to steal from the best I think. Doc said he'd implement something based on Rust ownership system in the future.}
    sent: "2017-05-02T01:51:19.617Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907e60dc1d3b501543cce67"
    text: {I see, anyway to promote it, you probably you need to have some good slogan. First thing you read is "Red is a new programming language strongly inspired by Rebol" but well, there are people who are not aware of Rebol. You need something anyone can understand, or at least become curious about, like: Haskell - pure, racket - programmable programming language, python - one way to do it, rust - no need for GC, perl - a lot of ways to do it, etc...}
    sent: "2017-05-02T01:51:09.442Z"
    editedAt: "2017-05-02T01:52:05.845Z"
    v: 2
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e5e38e4b63533d221f76"
    text: {Lots of people would say that Parse is a big advantage}
    sent: "2017-05-02T01:50:27.631Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e5898e4b63533d221df7"
    text: {Main advantage to me is that I feel more 'free' when playing around, And at the same time, challenged, because it's very different. }
    sent: "2017-05-02T01:48:57.121Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e4b6f22385553d9618bb"
    text: {@AlexanderKoshkarov the **tldr** is that red is still very much alpha. While you may feel a lot of things are missing, from what I've seen and experienced, almost anything can be easily implemented }
    sent: "2017-05-02T01:45:26.017Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5907e46a6aea30763d5f724f"
    text: {Domain Specific Languages. Can do system programming if you wish. ^/Compiles to binaries. Easy cross compiling. }
    sent: "2017-05-02T01:44:10.992Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e411881b89e101a4d0e2"
    text: {racket has clear modo: programmable programming language, but I cannot understand what is main advantage of Red. The desription: the one to rule them all does not look convincing}
    sent: "2017-05-02T01:42:41.561Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e4098bb56c2d11004a78"
    text: {I've never attempted Haskell. @geekyi Has experience, also he might be able to give you some input}
    sent: "2017-05-02T01:42:33.636Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e3ce8bb56c2d11004a0e"
    text: {@dander Rebol 2 docs are good, but there are things that will trip up the Red user immediately. The first Parse example comes to mind, and there were a few others that I can't recall right now - but more examples of first or second examples not working in Red }
    sent: "2017-05-02T01:41:34.429Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e38d12d2409935b8ff30"
    text: {I never tried rascal... only racket. so far looks good}
    sent: "2017-05-02T01:40:29.869Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e337c1d3b501543cc643"
    text: "what about haskell?"
    sent: "2017-05-02T01:39:03.599Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907e30dc1d3b501543cc5e1"
    text: {I tried Racket about a month ago - felt like I had handcuffs on compared to Red. (Just to do basic things)}
    sent: "2017-05-02T01:38:21.892Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907e2e1edf919574a69c877"
    text: "Rascal or Racket?"
    sent: "2017-05-02T01:37:37.917Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5907c3e1d32c6f2f095bf392"
    text: {and it looks that one of the targeted audience is system programming, so what about red vs rust?}
    sent: "2017-05-01T23:25:21.934Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907c34312d2409935b89743"
    text: {Hey all, I just learn about red language existence. It is advertised to be very expressive.  How does it compare to for example haskell with it's typeclasses ad hoc polymorphism. And for example with racket which probably has the most powerful DSL building capabilities? }
    sent: "2017-05-01T23:22:43.873Z"
    v: 1
    author: "582a46a9d73408ce4f35e2e7"
) #(
    id: "5907be8a6aea30763d5eeeb9"
    text: {See also: http://www.red-by-example.org/#form and http://www.red-by-example.org/#mold}
    sent: "2017-05-01T23:02:34.809Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5907bb3bd32c6f2f095bd4fb"
    text: {@GiuseppeChillemi  A good way to explain FORM is to see how it works in an example. Run the script below which creates a simple csv text file. Run the script using the word FORM than run it again removing the word FORM from the script.^/```^/Red []^/ users: [ "John Smith" "123 Tomline Lane Forest Hills, NJ" "555-1234" ^/"Paul Thompson" "234 Georgetown Pl. Peanut Grove, AL" "555-2345" ^/"Jim Persee" "345 Pickles Pike Orange Grove, FL" "555-3456"^/ "George Jones" "456 Topforge Court Mountain Creek, CO" ""^/ "Tim Paulson" "" "555-5678" ]^/ foreach [name address phone] users [^/ write/append %users.csv form reduce [ name ", " address ", " phone "^^/" ] ]```^/^/}
    sent: "2017-05-01T22:48:27.084Z"
    editedAt: "2017-05-01T22:51:30.728Z"
    v: 5
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5907ad9e881b89e101a415a2"
    text: {I believe we should start getting some documentation of our own.  And,  if updating documentation pages is not easily feasible, perhaps we could start asking questions on stackoverflow.}
    sent: "2017-05-01T21:50:22.944Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "5907a9de12d2409935b83604"
    text: {I think the most comprehensive docs are still the Rebol2 docs (unfortunately not online at the moment), though there are some inconsistencies with Red, still a useful resource^/https://web.archive.org/web/20170105211834/http://www.rebol.com/docs/core23/rebolcore.html^/and^/http://web.archive.org/web/20170105074227/http://www.rebol.com/docs/dictionary.html}
    sent: "2017-05-01T21:34:22.131Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5907a66bedf919574a68f465"
    text: "I hope I am not over-complicating things"
    sent: "2017-05-01T21:19:39.232Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5907a64312d2409935b82647"
    text: {@GiuseppeChillemi when you evaluate a `set-word!` (i.e. `a: ...`) it sets the value of the word to whatever follows it. The `[]` is a literal block with no elements in it, but it's important to realize that there is not a distinction between code and data (the whole function body is just data, and can be manipulated). If you modify the value referenced by `a`, you can see that block actually gets changed^/```^/>> f: function [value][a: [] append a value]^/== func [value /local a][a: [] append a value]^/>> f "hello"^/== ["hello"]^/>> :f^/== func [value /local a][a: ["hello"] append a value]^/```^/If you want a new block each time, you can either `copy []` which makes a copy of an empty block that nothing else will be touching, or `make block! n` which initializes a new block with `n` slots}
    sent: "2017-05-01T21:18:59.931Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59079e9e12d2409935b804e2"
    text: {Also I need a good explanation of CONTEXT and the words MOLD, FORM, BIND etc... where I could find one ?}
    sent: "2017-05-01T20:46:22.678Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "59079e266aea30763d5e6c03"
    text: {It seems to me more natural that A: [] removes this link. Why the choice has gone to A: copy [] and not A: []^/Has A: [] a meaning ?}
    sent: "2017-05-01T20:44:22.973Z"
    editedAt: "2017-05-01T20:44:52.338Z"
    v: 3
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "59079dcec1d3b501543bd667"
    text: {After 2 days I have understood that in A: ["hello!" "world!"] ^/: makes a link and an assignment}
    sent: "2017-05-01T20:42:54.962Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "59077457d32c6f2f095aaf71"
    text: {@docmathoc_twitter I updated the checksum of the package. It should be available within an hour or so probably}
    sent: "2017-05-01T17:45:59.661Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59076e50881b89e101a30d59"
    text: {@dockimbel I'm getting the checksum error too. I thought I had double-checked that. Did the release binary change?}
    sent: "2017-05-01T17:20:16.792Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "59075c01d32c6f2f095a415a"
    text: {@dockimbel  "implicit copy" was me trying to keep it simple, which I decided wasn't as good as a better explanation.}
    sent: "2017-05-01T16:02:09.980Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5907092108c00c092ad17dce"
    text: "@dander ^^---"
    sent: "2017-05-01T10:08:33.594Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590708d0d32c6f2f0958e486"
    text: "(On intel windows 10 64)"
    sent: "2017-05-01T10:07:12.197Z"
    v: 1
    author: "5907070ed73408ce4f5c23c0"
) #(
    id: "59070732c1d3b50154396af9"
    text: {Hi all - anyone tried choco install red recently? I get a hash error...}
    sent: "2017-05-01T10:00:18.626Z"
    v: 1
    author: "5907070ed73408ce4f5c23c0"
) #(
    id: "5906f696cfec9192728fda59"
    text: "There is no such rule in Red, nor in Rebol."
    sent: "2017-05-01T08:49:26.909Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5906f4d3f22385553d926c21"
    text: {Implicit copy - imo that in the repl, single assignment like `blk: []`behaves like `blk: copy []`?}
    sent: "2017-05-01T08:41:55.047Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5906f33b881b89e101a121dd"
    text: {@nc-x I'm not sure what @greggirwin meant by "implicit copy", but there is no difference in how the REPL and the compiler handle series (unless there's a bug I'm not aware of).}
    sent: "2017-05-01T08:35:07.963Z"
    editedAt: "2017-05-01T08:37:53.925Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5905ffc6d32c6f2f09558f27"
    text: {@nc-x, the question is how to make that work. In the console, Red takes a string input (what you type) and has to `load` that, then `do` it. In a script, the entire thing gets loaded once, and you are operating on a block of red values after that. That is, running a script looks like this (using @michaeldesu's example from above):^/```^/do load {^/test-me: function [str [string!]] [^/    my-series: []^/    print [">" my-series]^/    foreach x str [append my-series to-integer to-string x]^/]^/^/test-me "123"^/test-me "456"^/test-me "789"^/}^/```^/Where running in the console is like this:^/```^/str: {function [str [string!]] [^/    my-series: []^/    print [">" my-series]^/    foreach x str [append my-series to-integer to-string x]^/]}^/^/test-me: do load str^/do load {test-me "123"}^/test-me: do load str^/do load {test-me "456"}^/test-me: do load str^/do load {test-me "789"}^/```^/Does that make sense?}
    sent: "2017-04-30T15:16:22.094Z"
    editedAt: "2017-04-30T15:18:46.137Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5905f2808fcce56b204f2576"
    text: {Differences between the behaviour will lead to gotcha moments. Either all these gotcha moments need to be documented or behaviour made consistent.}
    sent: "2017-04-30T14:19:44.341Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5905f24dcfec9192728c9245"
    text: {For newbies like me, it is sure confusion. I would like consistent behaviour between repl, interpreter and compiler (dyn-stack branch)}
    sent: "2017-04-30T14:18:53.039Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5905f21112d2409935b20a39"
    text: {Wouldn't it lead to confusions? Something works in the console differently than when the same code is compiled.}
    sent: "2017-04-30T14:17:53.406Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5905f1f2587a245e24624dc4"
    text: ">  it is a convenience when working in the REPL."
    sent: "2017-04-30T14:17:22.490Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5904eb86d32c6f2f09524a14"
    text: "https://www.youtube.com/watch?v=cQl6r0fqRAI"
    sent: "2017-04-29T19:37:42.238Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5904e819f22385553d8bf86b"
    text: {Hi GuiseppeChillemi , many people sometimes hate thing in their occupation activities. Just remember captain trump who became manytimes a little bit angry about Sledge Hammer and the 45er Magnum. Finally they wordked together on the new project...............}
    sent: "2017-04-29T19:23:05.431Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5904c6a28bb56c2d11f5bf24"
    text: {The thing is, many people can use Red effectively without ever knowing anything about how it works internally.}
    sent: "2017-04-29T17:00:18.562Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5904c68212d2409935ae6155"
    text: ":^^)"
    sent: "2017-04-29T16:59:46.403Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5904c3d008c00c092aca43b0"
    text: {I hate you. I have headache ! I am just revisiting the topic and the spoon script... it will take some more question from me.}
    sent: "2017-04-29T16:48:16.336Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "59047a7acfec91927287d2d5"
    text: {@GiuseppeChillemi, in Lisp, there is an outer set of parens that makes it clear everything lives inside that "list". In Red, that outer block is implicit, so you don't see it. But if you imagine it there, then everything you see is just a series of values inside that block.}
    sent: "2017-04-29T11:35:21.998Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59047a0b12d2409935ad5e6c"
    text: {Thanks, now it is time to have a meal for me... I'll complete my study later. }
    sent: "2017-04-29T11:33:31.946Z"
    editedAt: "2017-04-29T11:33:49.506Z"
    v: 2
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590479cbcfec91927287d0ae"
    text: {@GiuseppeChillemi ^/> I would like to see how code/data is structured underneath in a structured manner. Is there any graph/table^/^/As Gregg said, just look at the "code" in front of you, that's the structure, blocks, values, words, ... Underneath, it's just the encoding of those values in memory in binary format (using 128-bit cells, you can see blocks as arrays of cells).}
    sent: "2017-04-29T11:32:27.379Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590479486aea30763d53a2a6"
    text: {@GiuseppeChillemi, the translation is correct. It refers to this: https://www.youtube.com/watch?v=uAXtO5dMqEI}
    sent: "2017-04-29T11:30:16.348Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5904794412d2409935ad5be7"
    text: "Thanks !"
    sent: "2017-04-29T11:30:12.930Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
)#(
    id: "59047937d32c6f2f0950b908"
    text: "Read Eval Print Loop. The console bascially. "
    sent: "2017-04-29T11:29:59.354Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590479318e4b63533d166cdc"
    text: {@GiuseppeChillemi "There is no spoon" might be a famous message from the Matrix movie :-)}
    sent: "2017-04-29T11:29:53.553Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5904792108c00c092ac92fd2"
    text: "REPL stands for ?"
    sent: "2017-04-29T11:29:37.913Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "5904791b08c00c092ac92fbe"
    text: ":("
    sent: "2017-04-29T11:29:31.447Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590478ffcfec91927287ce88"
    text: {@pekr, it is a convenience when working in the REPL. }
    sent: "2017-04-29T11:29:03.037Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590478de08c00c092ac92e4b"
    text: {That's the funny thing @GiuseppeChillemi, if you look at Red you can see the structure.}
    sent: "2017-04-29T11:28:30.992Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590478a2f22385553d8a68af"
    text: {@greggirwin I am not able to translate correctly the english word SPOON.^/The volcabulary say it is "cucchiaio", the food table companion tool of a FORK}
    sent: "2017-04-29T11:27:30.910Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "5904788a08c00c092ac92cf7"
    text: {@greggirwin Is REPL doing an implicit copy of the series a correct behaviour? Don't remember, how it was in R2 and can't check right now, typing on a phone ...}
    sent: "2017-04-29T11:27:06.170Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "590477fecfec91927287c824"
    text: {Variables in most other languages are just labels on memory storage spaces. The variable type is the type of the value stored into that memory place. In Redbol, a word is a first-class datatype, of type `word!` and that never changes. A word can exist and be manipulated, *without referring to any other value*. A word can refer to values of any type. Making a word refer to a value (let's say a string), does not change the type of the word, it is still `word!`. So, in Redbol, you have two distinct entities: word and the referred value. Such distinction does not exist in most other languages, which just have "variables", that's why such term can be misleading in Redbol.}
    sent: "2017-04-29T11:24:46.714Z"
    editedAt: "2017-04-29T11:28:37.032Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590477be8e4b63533d166790"
    text: {I would like to see how code/data is structured underneath in a structured manner. Is there any graph/table}
    sent: "2017-04-29T11:23:41.999Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590477918fcce56b204a81af"
    text: {https://gist.github.com/9214/1dd30a88383a3e46edf45e33e9def3a7 if you want to melt your brain, or a spoon, a bit.}
    sent: "2017-04-29T11:22:57.896Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5904775c8bb56c2d11f49560"
    text: "In fact I have a wrong mental model of this."
    sent: "2017-04-29T11:22:04.925Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "5904774e587a245e245d878e"
    text: {@dockimbel  > but I think a clear cut would be better, to avoid newcomers building a wrong mental model of how words and binding work.}
    sent: "2017-04-29T11:21:50.879Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590476fdc1d3b5015430f63c"
    text: {It is time I read the Bindology article from Ladislav....}
    sent: "2017-04-29T11:20:29.905Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590476c58fcce56b204a7f79"
    text: {@dockimbel The last 5 lines of the documentation cleared everything:^/>> One more thing. The colon (:) suffix in a word is not an assignment operator (as in other languages), it's part of the set-word! datatype literal syntax. When evaluated, it binds the word to the result of next expression. It doesn't do anything more than that. So a: "" does not "reset" or "reinitialize" the "variable" a. That is an incorrect interpretation, it just makes the word a refer to the literal string "" which follows it.}
    sent: "2017-04-29T11:19:33.981Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590475ea8e4b63533d165e4a"
    text: {Unfortunately this trick only seems to regain access to the Rebol.com homepage.}
    sent: "2017-04-29T11:15:54.934Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590475846aea30763d539456"
    text: {@dockimbel @greggirwin @GiuseppeChillemi  Correction - The rebol.com domain name has not yet expired. I can access the homepage only. My ISP has probably cached the page.}
    sent: "2017-04-29T11:14:12.623Z"
    editedAt: "2017-04-29T11:21:50.665Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "590475848e4b63533d165ce9"
    text: {@michaeldesu That R3 doc is to be taken with a grain of salt, as it tries to fit the concept of "variable" into Rebol, to ease the learning process, but I think a clear cut would be better, to avoid newcomers building a wrong mental model of how words and binding work.}
    sent: "2017-04-29T11:14:12.351Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5904753912d2409935ad4c18"
    text: {A context (and objects are contexts) can be viewed as 2 columns, the first being the words and the second being the values they refer to.}
    sent: "2017-04-29T11:12:57.283Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590474eecfec91927287bd1a"
    text: {@michaeldesu, right, with each pairing being unique to a context.}
    sent: "2017-04-29T11:11:42.196Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590474af8bb56c2d11f48c19"
    text: {Redbol is our word to encompass all rebol-like languages.}
    sent: "2017-04-29T11:10:39.777Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5904749e881b89e10199372e"
    text: {so I guess an analog for 'variables' is like a key: value pairing? where words are like the keys? and value is the actual data (or function). I guess it doesn't matter. So I can see there really are no variables, it's all just data (and even the labels).}
    sent: "2017-04-29T11:10:22.154Z"
    editedAt: "2017-04-29T11:11:46.955Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5904748b881b89e1019936e5"
    text: "I am just reading the first link"
    sent: "2017-04-29T11:10:03.785Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "59047474881b89e1019936cd"
    text: {Noooo, it makes me feel strange reading you using "Redbol" word....}
    sent: "2017-04-29T11:09:40.144Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590474658fcce56b204a771f"
    text: {this is interesting about words/variables http://web.archive.org/web/20161214100405/http://www.rebol.com/r3/docs/guide/code-words.html}
    sent: "2017-04-29T11:09:25.818Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5904742ccfec91927287baaa"
    text: {Golden rule of learning Red/Rebol: forget about the programming languages you already know, that knowledge will get in the way (unless it's Lisp ;-)), start with a fresh mindset.}
    sent: "2017-04-29T11:08:28.993Z"
    editedAt: "2017-04-29T11:09:18.228Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590473eb8bb56c2d11f48763"
    text: {"variable" is a convenient approximation we use, but we know that the meaning behind it, is different in Redbol.}
    sent: "2017-04-29T11:07:23.879Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590473878bb56c2d11f486c3"
    text: {"there are no "variables" in Red" - wow. Yeah may as well check all the preconceived notions about other languages at the door :-)}
    sent: "2017-04-29T11:05:43.604Z"
    editedAt: "2017-04-29T11:06:42.860Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59047386cfec91927287b70a"
    text: "There are just some domain expirations going on. "
    sent: "2017-04-29T11:05:42.002Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590473648fcce56b204a7464"
    text: "wow - did rebol.com recently die?"
    sent: "2017-04-29T11:05:08.577Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5904732ccfec91927287b503"
    text: {A fundamental cause is that there is no distinction between "code" and "data" in Redbol. `word: []` is data, which eventually gets evaluated. In JS, `v=[];` is just code.}
    sent: "2017-04-29T11:04:12.156Z"
    editedAt: "2017-04-29T11:05:03.403Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5904730dcfec91927287b4a2"
    text: {@GiuseppeChillemi http://web.archive.org/web/20170325102835/rebol.com}
    sent: "2017-04-29T11:03:41.681Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59047301587a245e245d76b7"
    text: {agree - that link probably should be required reading by any newcomer}
    sent: "2017-04-29T11:03:29.152Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590472f16aea30763d538afc"
    text: ":((("
    sent: "2017-04-29T11:03:13.652Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590472eaf22385553d8a5427"
    text: "Which just disappeared as we lost rebol.com"
    sent: "2017-04-29T11:03:06.098Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590472d3587a245e245d768e"
    text: {@GiuseppeChillemi There is this wiki entry posted by Gregg above, and otherwise, the whole Rebol documentation.}
    sent: "2017-04-29T11:02:43.133Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590472d1c1d3b5015430e8aa"
    text: "See the link I just posted."
    sent: "2017-04-29T11:02:41.012Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590472b28bb56c2d11f482b1"
    text: {@dockimbel Is there any documentation helping us undestand this and the global picture behind this design ?}
    sent: "2017-04-29T11:02:10.316Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "590472278fcce56b204a7153"
    text: {@michaeldesu @GiuseppeChillemi There is no specific design rule there, it is just a consequence of how the language works (both Red and Rebol). It boils down to understanding what `word: []` is, and how it is evaluated. It is deeply different from what you would have in another language (like in JS: `v=""`, or `v=[]`). Understanding such expression is a key part of understanding Redbol.}
    sent: "2017-04-29T10:59:51.169Z"
    editedAt: "2017-04-29T11:02:02.824Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "590471bd12d2409935ad421e"
    text: {https://github.com/red/red/wiki/Why-do-I-have-to-copy-series-values%3F}
    sent: "2017-04-29T10:58:05.116Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590470b58bb56c2d11f47c71"
    text: {Yes, it catches everyone not long after they start Reducing, but it is definitely intentional.}
    sent: "2017-04-29T10:53:41.871Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590470b56aea30763d538431"
    text: {A good question would be: why it has been designed in such a way  !}
    sent: "2017-04-29T10:53:41.489Z"
    v: 1
    author: "59045d00d73408ce4f5bcd9d"
) #(
    id: "5904705a6aea30763d53827a"
    text: {And it is true for all series variables in functions.}
    sent: "2017-04-29T10:52:10.050Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59047057587a245e245d6e19"
    text: {thanks @greggirwin  - ok so it's a potentially useful feature to keep in mind for the future}
    sent: "2017-04-29T10:52:07.880Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5904702312d2409935ad3d92"
    text: "It is by design. "
    sent: "2017-04-29T10:51:15.459Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59047008c1d3b5015430e064"
    text: {is it by design that `my-series: []` acts like a static variable (i.e. no clear or copy in use), or this is a side-effect of my bad coding}
    sent: "2017-04-29T10:50:48.070Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59046d2508c00c092ac904d3"
    text: "thanks alot @dockimbel "
    sent: "2017-04-29T10:38:29.259Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59046cfc6aea30763d537796"
    text: {Though, the `clear []` is the most memory-saving option.}
    sent: "2017-04-29T10:37:48.790Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59046cb6f22385553d8a415f"
    text: {@michaeldesu If you create your block dynamically, you would not run into such issue:^/`my-series: make block! 1` or doing some preallocation: `my-series: make block! length? str`.}
    sent: "2017-04-29T10:36:38.268Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "59046c84881b89e1019918ba"
    text: "thanks @greggirwin "
    sent: "2017-04-29T10:35:48.134Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
)#(
    id: "59046a63881b89e101991229"
    text: {The REPL does an implicit copy, which is confusing. Learning about copying series is a rite of passage in Redbol. :^^)}
    sent: "2017-04-29T10:26:43.725Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59046801d32c6f2f0950814d"
    text: {@xqlab thanks alot - `clear` is good. This is a bit counter-intuitive, unless a series can be like a static variable (in the way I did it). I guess I take it away as another learning :-). The reason why it's confusing is in the REPL it seems to work logically:^/```^/>> a: [1 2 3]^/== [1 2 3]^/>> a: []^/== []^/>> a^/== []^/```^/of course it might just be the behaviour in a function is different.}
    sent: "2017-04-29T10:16:33.842Z"
    editedAt: "2017-04-29T10:21:17.931Z"
    v: 5
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590467bc8bb56c2d11f45f28"
    text: "as long as no GC clear [] is recommended"
    sent: "2017-04-29T10:15:24.668Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "590467966aea30763d536a02"
    text: {Use^/my-Series: copy []^/or^/my-Series: clear []^/in order to initialize anew^/}
    sent: "2017-04-29T10:14:46.969Z"
    editedAt: "2017-04-29T10:17:09.225Z"
    v: 3
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "5904671ef22385553d8a31bd"
    text: {Please help me understand about initialising a series in a function. I have the following test case. The aim is to have an empty block each time the function is run.^/```^/test-me: function [str [string!]] [^/    my-series: []^/    print [">" my-series]^/    foreach x str [append my-series to-integer to-string x]^/]^/^/test-me "123"^/test-me "456"^/test-me "789"^/```^/However the output emitted by the print statement in the function shows me the series is not initialised to empty each time the function is called,  i.e. I see:^/```^/>^/> 1 2 3^/> 1 2 3 4 5 6^/```^/so I guess `my-series: []` is not the best way to init an empty series for this case.}
    sent: "2017-04-29T10:12:46.176Z"
    editedAt: "2017-04-29T10:13:53.575Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59045f8d587a245e245d35e4"
    text: {@geekyi assumes @AlexanderBaggett  got the answer in red/help}
    status: true
    sent: "2017-04-29T09:40:29.042Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5903b8f1c1d3b501542ec7b0"
    text: "Is there a way to do menu events without actors?"
    sent: "2017-04-28T21:49:37.254Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "590392238bb56c2d11f1b2c2"
    text: "Thx!"
    sent: "2017-04-28T19:04:03.691Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "59036a22587a245e2459ed4f"
    text: ":muscle: "
    sent: "2017-04-28T16:13:22.507Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "59036a1308c00c092ac59db4"
    text: "@9214 you beat me :smile:"
    sent: "2017-04-28T16:13:07.464Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "590369ee6aea30763d50038b"
    text: "You should put `#call` in front."
    sent: "2017-04-28T16:12:30.771Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "590369dfcfec919272844657"
    text: {@sergey6661313 you mean [this](http://static.red-lang.org/red-system-specs-light.html#section-16.8)?}
    sent: "2017-04-28T16:12:15.469Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "590367c96aea30763d4ff857"
    text: {how to run red func from  #System or routine block?^/```^/^-Red[]^/^/^-my-test-red-func: func [ ] [ print "lal" ]^/^/^-#System [^/^-^-my-test-red-func^/^-]^/``` ^/returned ^/'*** Compilation Error: undefined symbol: my-test-red-func '^/}
    sent: "2017-04-28T16:03:21.232Z"
    editedAt: "2017-04-28T16:04:47.120Z"
    v: 2
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5903385d12d2409935a8e28c"
    text: "Thanks too"
    sent: "2017-04-28T12:41:01.665Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "590336f808c00c092ac4ade1"
    text: {press the up arrow key, or try clicking on the 3 dots next to your message (edit)}
    sent: "2017-04-28T12:35:04.412Z"
    editedAt: "2017-04-28T12:35:36.052Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590336ea8e4b63533d11d26c"
    text: "How can I edit ?"
    sent: "2017-04-28T12:34:50.119Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "590336d3cfec919272835215"
    text: {@xqlab thanks! It's interesting how ahead works, treating the whole `copy letters some "a"` as a rule (block)}
    sent: "2017-04-28T12:34:27.882Z"
    editedAt: "2017-04-28T12:37:18.994Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590336bc8e4b63533d11d1b4"
    text: {You can either use ahead^/```parse "aaabbb" [ahead copy letters some  "a" (n: length? letters) n "b"] ```^/or   pos:  get an index and  set an index ':pos^/```parse "aaabbb" [ pos: copy letters some  "a" (n: length? letters)  :pos n "b"] ```}
    sent: "2017-04-28T12:34:04.533Z"
    editedAt: "2017-04-28T12:40:06.987Z"
    v: 5
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "590336a18bb56c2d11f001cc"
    text: {never mind, I found the answer, it's using `ahead`}
    sent: "2017-04-28T12:33:37.850Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59033245d32c6f2f094c28a2"
    text: {also to confirm, it's not possible to skip backwards, isn't it? From my testing, seems like for setups like `n skip` n >= 0 is ok}
    sent: "2017-04-28T12:15:01.003Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590331d1cfec919272833b08"
    text: {I'm wondering how to get the length of a matched content in a parse statement, without advancing the pointer. I noticed this example on the Red Parse blog:^/```^/parse "aaabbb" [copy letters some "a" (n: length? letters) n "b"]^/```^/but the pointer advances to the start of the b's. How to get the length of the a's without advancing the pointer?}
    sent: "2017-04-28T12:13:05.852Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5902d4d512d2409935a740ab"
    text: {@9214 thanks - that was a bit unexpected, but I see file! can be a directory, so I guess it makes sense. }
    sent: "2017-04-28T05:36:21.625Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5902d4b1c1d3b501542ac57f"
    text: {```^/>> series? list-dir %./hax^/    KaratInstall.rar       metasploit-lat...      metasploit-lat...      MiniMouseMacro...  ^/    nemesis-1.4.zip        PacketSenderPo...      PlayCap-0.1.1-...  == false^/```^/`list-dir <dir>` returns `unset`, not `series!` value, that's why `foreach` can't iterate over it}
    sent: "2017-04-28T05:35:45.105Z"
    editedAt: "2017-04-28T05:38:33.061Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5902d3fbf22385553d842c8e"
    text: {@michaeldesu ^/```^/>> read %./hax/^/== [%KaratInstall.rar %metasploit-latest-windows-installer-x86.exe %metasploit-latest-wind...^/```}
    sent: "2017-04-28T05:32:43.186Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5902d0788fcce56b2044909a"
    text: {just experimenting with directories:^/```^/>> foreach file list-dir pwd [print file]^/%/C/~tools/Red/    red-062.exe            sheet2.xml             TT Archive -20...  *** Script Error: foreach does not allow unset! for its series argument^/*** Where: foreach^/>> a: dir^/    red-062.exe            sheet2.xml             TT Archive -20...  *** Script Error: a: needs a value^/*** Where: a^/```^/why are the ` Script Error`s occurring? Alternatively, how do you put a list of files into a series block.}
    sent: "2017-04-28T05:17:44.726Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59027b3412d2409935a62b3f"
    text: {Would be happy to collab with anyone on a red board!}
    sent: "2017-04-27T23:13:56.119Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59027b10f22385553d831152"
    text: {https://papaly.com/#board_id=6c857d19f6854e0cabf209d851a92533 is something I tried, but it's not yet integrated into my workflow..}
    sent: "2017-04-27T23:13:20.248Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59027a4e8bb56c2d11ed4660"
    text: {https://papaly.com/ looks like a good social bookmarking service that allows organizing of links into a browsable form. Might be better than putting everything into a gist (drag and drop organizing) Less resilient tho (because they aren't text files)}
    sent: "2017-04-27T23:10:06.327Z"
    editedAt: "2017-04-27T23:12:08.010Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "590279a5587a245e2456304a"
    text: {I have a little idea of how the debugging red piece of puzzle works a bit now.. I have to organize some links I have tho..}
    sent: "2017-04-27T23:07:17.354Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59027953d32c6f2f0949827a"
    text: "Agreed."
    sent: "2017-04-27T23:05:55.026Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590279446aea30763d4c4844"
    text: {@Scaremonger seems to be pretty good at it :smile: }
    sent: "2017-04-27T23:05:40.425Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5902793df22385553d830829"
    text: {Just that people (i.e. me) don't take time to organize them. }
    sent: "2017-04-27T23:05:33.679Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59027917c1d3b501542996c2"
    text: {I'm all for someone organizing wikis. That's my main gripe with them in general. }
    sent: "2017-04-27T23:04:55.593Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590278f012d2409935a621d7"
    text: {@michaeldesu  @greggirwin I think a simple re-categorization is needed only from time to time ( Some of that could be moved to a *Debugging* page?)}
    sent: "2017-04-27T23:04:16.228Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "590278c8881b89e101921231"
    text: "@geekyi thanks"
    sent: "2017-04-27T23:03:36.675Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590278718fcce56b20438217"
    text: {@michaeldesu :point_left: [August 26, 2015 2:08 PM](https://gitter.im/red/red?at=55dd820b1b959eaa5602aeef) adaptive aka *responsive* (I forget the buzzwords) ui}
    sent: "2017-04-27T23:02:09.276Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5902785d8fcce56b204381c7"
    text: {Guru entries generally come from chat here. It is FAQ-like though.}
    sent: "2017-04-27T23:01:49.055Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590277bc8fcce56b20437f88"
    text: {> Pass by val/ref note added to https://github.com/red/red/wiki/Guru-Meditations.^/^/@greggirwin thanks for maintaining that, some interesting info in there. I noticed some of those entries look like FAQs - perhaps that Guru link should be posted/included on the FAQ page as well? or merged (e.g. take/copy those question-like ones) into the FAQ?}
    sent: "2017-04-27T22:59:08.976Z"
    editedAt: "2017-04-27T22:59:22.254Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5902772f6aea30763d4c4145"
    text: {@michaeldesu I think there was some talk on *adaptive* (vs responsive) uis before.. a search in the chats might turn it up}
    sent: "2017-04-27T22:56:47.078Z"
    editedAt: "2017-04-27T23:01:09.661Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "59027533f22385553d82f987"
    text: {@geekyi interesting :point_up: (about music/synths).. I was recently thinking about resizeable UIs in Red (whether it's possible in the future), as this is cropping up in many DAWs/VST plugins.}
    sent: "2017-04-27T22:48:19.991Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "590270218bb56c2d11ed22c8"
    text: {The last app reminds me of http://worrydream.com/ScientificCommunicationAsSequentialArt/}
    sent: "2017-04-27T22:26:41.523Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "59026e90d32c6f2f09495cde"
    text: {Nothing really groundbreaking here but, while browsing youtube today, I went from [this](https://www.youtube.com/watch?v=Ne_FEOK5JHk ),[this](https://www.youtube.com/watch?v=ddWQU6Wo3v8 ),[this](https://www.youtube.com/watch?v=QYbi4rbMK88 ), to [this](https://www.youtube.com/watch?v=GR72NwhuzfA)^/**All music synthesizers**, specifically sequencers, which are like drumkits: looping variations of beats.  Approx in increasing order of complexity. Unlike traditional sequencers that don't go beyond manual editing of sequences, some of these allow editing with patterns and even automatic variation and randomization. Wonderful how a properly designed app can be.^/Each of them having the following in terms of UI:^/1. Extremely dense information visualization^/2. Real-time modification^/3. Multiple layers that can be edited (and saved?) separately^/4. Math. Almost all of them feels like an application of group theory (to me)}
    sent: "2017-04-27T22:20:00.179Z"
    editedAt: "2017-04-27T22:24:00.583Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "590228d0f22385553d81a4a8"
    text: {@greggirwin Thanks for this nice explanation about series.}
    sent: "2017-04-27T17:22:24.269Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "59021723587a245e24546ac0"
    text: {Pass by val/ref note added to https://github.com/red/red/wiki/Guru-Meditations.}
    sent: "2017-04-27T16:06:59.926Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5901d25212d2409935a31893"
    text: {love this message (playing around..)^/```^/>> source a^/Sorry, a is a string! so no source is available^/```^/just discovered `what` and going through the listings.. feel like I've just opened pandora's box :-)}
    sent: "2017-04-27T11:13:22.726Z"
    editedAt: "2017-04-27T11:15:04.389Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5901c65fc1d3b501542636c2"
    text: "That's helpful, thanks!"
    sent: "2017-04-27T10:22:23.475Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5901c3cff22385553d7facf8"
    text: {https://github.com/red/red/blob/master/runtime/datatypes/structures.reds}
    sent: "2017-04-27T10:11:27.889Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5901c35f587a245e2452d266"
    text: {All *immediate* types (`?? immediate!`) are passed by value (they can fit entirely in a value slot). For the rest of types, they are "passed by reference" (not entirely accurate, but good approximation).^/For deeper explanation on that last part, series for example, have a "value slot" part (including the position) and a series buffer part (which is external and shared by all series created from the same original one). Some functions can change the info in the "value slot" part, like changing the position (`next, back, skip`, ...), in such case, the series will behave like "passed by value". Some other functions will modify the series buffer (`append, insert, remove`, ...), in such case, the series will behave like "passed by reference".}
    sent: "2017-04-27T10:09:35.034Z"
    editedAt: "2017-04-27T10:12:56.784Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5901c2d38e4b63533d0baf15"
    text: {@geekyi no clue, I just remembered that someone from guru tribe explained this to me some time ago :D}
    sent: "2017-04-27T10:07:15.568Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5901c27f587a245e2452ce5b"
    text: "same for a real number (not passed by reference)"
    sent: "2017-04-27T10:05:51.313Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
)#(
    id: "5901c2318fcce56b20404085"
    text: {@9214 it's an optimization for non-scalar `series!` like types only?}
    sent: "2017-04-27T10:04:33.217Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5901c1b6cfec9192727d30ca"
    text: {how about other numerical types? I guess it's the same as integer}
    sent: "2017-04-27T10:02:30.776Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5901c19c587a245e2452cad3"
    text: {`integer!` is a scalar value, so yes, it's not passed by reference}
    sent: "2017-04-27T10:02:04.689Z"
    editedAt: "2017-04-27T10:02:19.173Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5901c1878fcce56b20403cba"
    text: "Hmm.. I cannot refute your argument"
    sent: "2017-04-27T10:01:43.063Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5901c0ce12d2409935a2d177"
    text: {which is different to:^/```^/>> append-word: function [y][append y "world"]^/>> my-str: "hello "^/== "hello "^/>> append-word my-str^/== "hello world"^/>> my-str^/== "hello world"^/```}
    sent: "2017-04-27T09:58:38.045Z"
    editedAt: "2017-04-27T09:59:00.892Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5901bfbbc1d3b50154261905"
    text: {```^/add: function [x] [x: x + 1]^/>> my-number: 10^/== 10^/>> add my-number^/== 11^/>> my-number^/== 10^/```^/is it correct?}
    sent: "2017-04-27T09:54:03.395Z"
    editedAt: "2017-04-27T09:54:26.166Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5901bf9d8bb56c2d11e9c498"
    text: "@michaeldesu why not an `integer!`?"
    sent: "2017-04-27T09:53:33.192Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5901bf6ac1d3b501542617f3"
    text: {thanks - I've realised it's not quite everything, e.g. an integer is not by reference. But I guess you meant any series.}
    sent: "2017-04-27T09:52:42.167Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5901becbc1d3b501542615d3"
    text: {@michaeldesu ^/> strings are passed into a function by reference - is that correct? I have a recollection that any series is passed in like that.^/^/Everything is, and you have to `copy`. That's all you need to know now. ^/It goes deep tho.. and it's subtly different from normal scoping rules. You can think of it as everything being anonymous and being like pointers everywhere. Or it may take an year to sink in..}
    sent: "2017-04-27T09:50:03.500Z"
    editedAt: "2017-04-27T09:50:24.312Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "59019d99d32c6f2f094595c1"
    text: {You're welcome :) Also, I would replace strings with chars, but both should work same:^/```^/v-map: make map! [#"a" 0 #"e" 0 #"i" 0 #"o" 0 #"u" 0]^/parse a [some [set v vowels (v-map/:v: v-map/:v + 1) | skip]]^/```}
    sent: "2017-04-27T07:28:25.489Z"
    editedAt: "2017-04-27T07:28:59.252Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59019d738fcce56b203f9f5c"
    text: {do you think the `map` the best way here, or paired series is better?}
    sent: "2017-04-27T07:27:47.346Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59019d488e4b63533d0b0ce5"
    text: {@rebolek ah there's always a better way for the noobs, thanks alot!}
    sent: "2017-04-27T07:27:04.596Z"
    editedAt: "2017-04-27T07:27:09.935Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "59019d06cfec9192727c890b"
    text: {@michaeldesu try something like this:^/```^/parse a [some [to vowels copy v vowels (v-map/:v: v-map/:v + 1)]]^/```}
    sent: "2017-04-27T07:25:58.817Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "59019c87587a245e245226b5"
    text: {I've been trying a tally routine using parse - the following looks ok^/```^/vowels: charset "aeiou"^/a: "this is a lovely lucky cat with nine lives"^/v-map: make map! ["a" 0 "e" 0 "i" 0 "o" 0 "u" 0]^/== #(^/    "a" 0^/    "e" 0^/    "i" 0^/    "o" 0^/    "u" 0^/)^/parse a [some [to vowels copy v vowels (put v-map v (select v-map v) + 1)]]^/>> v-map^/== #(^/    "a" 2^/    "e" 3^/    "i" 5^/    "o" 1^/    "u" 1^/)^/```^/but seems a bit clumsy, especially the `put v-map v (select v-map v) + 1)` part which is so nicely done in python using something like `map[key]=value`. I've started to look into using (what I'm calling) a paired-series , i.e.^/```^/>> v-list: [a 1 e 2 i 3 o 4 u 5]^/== [a 1 e 2 i 3 o 4 u 5]^/^/>> ii: 'u^/== u^/^/>> v-list/:ii^/== 5^/```^/I feel like I'm onto something, however I'm a total noob about these lit style things. Anyway, if there's a more elegant or better solution to using map, it would be interesting to learn about it. Thanks.}
    sent: "2017-04-27T07:23:51.905Z"
    editedAt: "2017-04-27T07:25:48.947Z"
    v: 4
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "5900210af22385553d7879f2"
    text: {Besides, if we optimize too much, we won't stress test the GC as well when it appears. :^^)}
    sent: "2017-04-26T04:24:42.563Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "590020c9587a245e244b963f"
    text: {I normally build hierarchies based on functionality, not performance, but sometimes the lure of speed is too much to resist.}
    sent: "2017-04-26T04:23:37.874Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5900208ec1d3b501541f0d4f"
    text: {"it wouldn't hurt", it can. ;^^) However, I'm not against layers. Sometimes we gain a lot, though, by keeping things grouped contextually.}
    sent: "2017-04-26T04:22:38.976Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59001ffc12d24099359bcf45"
    text: {True. But it wouldn't hurt to have optimised versions and wrapper, eg `deal-with` :), which would let you have all of these together. Thus you could have a hierarchy of functions too, not only datatypes.}
    sent: "2017-04-26T04:20:12.403Z"
    editedAt: "2017-04-26T04:21:40.575Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "59001f5a6aea30763d41f4c4"
    text: {Our brain cells are far more valuable than compute cycles. Moreso every day. At least until performance is so bad that it keeps us from getting the ideas out as fast as they come.}
    sent: "2017-04-26T04:17:30.667Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59001ef9d32c6f2f093f6002"
    text: {One of the nice things about Red is that it's usually easy to whip up alt versions for testing. Optimization has to be worth it. Sometimes it comes for free, but not often.}
    sent: "2017-04-26T04:15:53.184Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "59001e39587a245e244b8e72"
    text: {@greggirwin Maybe it would be good to have optimized function for each of these: `map`,  `filter`, `partition`, `group`?}
    sent: "2017-04-26T04:12:41.846Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fffe028e4b63533d0434af"
    text: "@PeterWAWood thanks alot!"
    sent: "2017-04-26T01:55:14.236Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fffd8ef22385553d77ff54"
    text: {It is not possible to pass a series! value (such as a string!) by value.}
    sent: "2017-04-26T01:53:18.290Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58fffd478bb56c2d11e247ee"
    text: {@michaeldesu Use ```copy```^/```text^/red>> de-space: func [str] [replace/all copy str " " ""]^/== func [str][replace/all copy str " " ""]^/red>> a: "hello world"^/== "hello world"^/red>> de-space a^/== "helloworld"^/red>> a^/== "hello world"^/```}
    sent: "2017-04-26T01:52:07.661Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58fffbd0c1d3b501541e8cae"
    text: {strings are passed into a function by reference - is that correct? I have a recollection that any series is passed in like that.^/```^/de-space: func [str] [replace/all str " " ""]^/a: "hello work"^/de-space a^/== "hellowork"^/>> a^/== "hellowork"^/```^/how to pass it in by value, so it's copied?}
    sent: "2017-04-26T01:45:52.815Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ffb7e3f22385553d76e4fb"
    text: {Quicksort and Merge, see http://www.red-lang.org/search?q=sort}
    sent: "2017-04-25T20:56:03.894Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ffb79d6aea30763d4075a6"
    text: {Which sorting algorithm is used by the `sort` function?}
    sent: "2017-04-25T20:54:53.765Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58ffb65d8bb56c2d11e13f2f"
    text: "Comb sort is my favorite."
    sent: "2017-04-25T20:49:33.607Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffb47a8e4b63533d031e1c"
    text: {@geekyi wonders how many people know of partition sort}
    status: true
    sent: "2017-04-25T20:41:30.008Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ffb437d32c6f2f093de308"
    text: "Quick, sort! "
    sent: "2017-04-25T20:40:23.960Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ffb1c68e4b63533d031111"
    text: {```^/partition: function [   ; GROUP ?^/^-"Group values by matching predicate, with last group as vals that didn't match any"^/^-series [series!]^/^-predicates [block!] "Block of functions"^/^-args "Arg to go with each predicate"^/][^/^-result: copy []^/^-predicates: reduce predicates^/^-loop add length? predicates 1 [append/only result copy []]^-; until we have `array`^/^-foreach el series [^/^-^-match?: false^/^-^-repeat i length? predicates [^/^-^-^-match?: predicates/:i :el either block? :args [args/:i][:args]^/^-^-^-if match? [append result/:i :el  break]^/^-^-]^/^-^-if not match? [append last result :el]^/^-]^/^-result^/]^/data: [0.5 1 2 3.4 5.6 7 8.9 0 100]^/partition data [:integer? :float?] none^/partition data [:lesser? :greater?] [3 7]^/partition data [:lesser? :greater?] 3^/```}
    sent: "2017-04-25T20:29:58.907Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffade78fcce56b2037ab06"
    text: "Need to clean and modernize it. :^^)"
    sent: "2017-04-25T20:13:27.204Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffadc3f22385553d76b586"
    text: {```^/partition: func [   ; GROUP ?^/^-{Applies each predicate to each element in blk and returns^/^-a block of blocks with items partitioned by which predicate^/^-they match. If an item doesn't match any predicate, it will^/^-be in the last block. Only handles simple args right now.}^/^-series [series!]^/^-predicates [block!]^/^-args^/^-/local match result p^/][^/^-result: copy []^/^-loop add length? predicates 1 [append/only result copy []]^/^-foreach el series [^/^-^-match: false^/^-^-repeat i length? predicates [^/^-^-^-; Have to use a temp var for the predicate here, in addition to^/^-^-^-; the result of the predicate call.^/^-^-^-p: get predicates/:i^/^-^-^-match: p :el either block? args [args/:i][args]^/^-^-^-if match [^/^-^-^-^-append result/:i :el^/^-^-^-^-break^/^-^-^-]^/^-^-]^/^-^-if not match [^/^-^-^-append last result :el^/^-^-]^/^-]^/^-result^/]^/partition [1 2 3.4 5.6 7 8.9] [integer? float?] none^/partition [1 2 3.4 5.6 7 8.9 0 100] [lesser? greater?] [3 7]^/partition [1 2 3.4 5.6 7 8.9 0 100] [lesser? greater?] 3^/```}
    sent: "2017-04-25T20:12:51.739Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffadbd6aea30763d4045d9"
    text: "Easy fix."
    sent: "2017-04-25T20:12:45.356Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffad478fcce56b2037a897"
    text: {Will have to fix it up for Red. Doesn't work because of different `repeat` interface. No series support in Red.}
    sent: "2017-04-25T20:10:47.143Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffabd8cfec91927274645d"
    text: {And with partition, there is the `else` case, for values that don't match any predicate.}
    sent: "2017-04-25T20:04:40.679Z"
    editedAt: "2017-04-25T20:04:50.375Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffabb5cfec919272746389"
    text: {And we have `remove-each` already, so it's coming up with the hierarchy and naming that's important. e.g. `keep-each` for the bodied version.}
    sent: "2017-04-25T20:04:05.102Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffab5f6aea30763d403b10"
    text: {Yes, my old partition/group funcs can apply any number of tests to create groups. So you really have that as the foundation, and `filter` is just a special case with one test, like `forall` is a special case of `forskip`.}
    sent: "2017-04-25T20:02:39.462Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ffaae96aea30763d4038fe"
    text: {@greggirwin I am used to partition being a grouping function, not the classic filter}
    sent: "2017-04-25T20:00:41.181Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "58ffaa60c1d3b501541d3cd8"
    text: {```^/; Clojure: When coll is a map, pred is called with key/value pairs.^/; Some langs call this 'partition^/filter: function [^/^-"Returns two blocks: items that pass the test, and those that don't"^/^-series [series!]^/^-test [any-function!] "Test (predicate) to perform on each value; must take one arg"^/^-/only "Return a single block of values that pass the test"^/^-; Getting only the things that don't pass a test means applying NOT^/^-; to the test and using /ONLY. Applying NOT means making a lambda.^/^-; Not hard, for people who understand anonymous funcs.^/^-;/pass "Return a single block of values that pass the test"^/^-;/fail "Return a single block of values that fail the test"^/][^/^-;TBD: Is it worth optimizing to avoid collecting values we won't need to return?^/^-result: reduce [copy [] copy []]^/^-foreach value series [^/^-^-append/only pick result make logic! test :value :value^/^-]^/^-either only [result/1][result]^/]^/```}
    sent: "2017-04-25T19:58:24.157Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff9ffb6aea30763d4005cb"
    text: {@greggirwin Thank you for these examples and the explanation! Usually `map` should return  the same length as input data, but then `filter` is needed also. But this kind of procedure where you have complete control over the manipulation of succeeding elements of series is very handy. Thanks!}
    sent: "2017-04-25T19:14:03.011Z"
    editedAt: "2017-04-25T19:15:46.904Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff94b412d240993599a86d"
    text: "@greggirwin ok thanks, I misread the post"
    sent: "2017-04-25T18:25:56.671Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "58ff948b08c00c092ab549a3"
    text: "OSX, Linux, and Windows CLI are fine."
    sent: "2017-04-25T18:25:15.455Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff9471f22385553d7642cb"
    text: {@dnmurphy, in the GUI console on Windows, currently, nothing is displayed until the end, rather than after each tick. That will be fixed in 0.6.3.}
    sent: "2017-04-25T18:24:49.043Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff93918bb56c2d11e09cdf"
    text: {@9214 re "repeat i 5 [print i wait 1]" what result did you expect to see?  I ran the code in mac for Rebol and Red and they produced same as you except not showing the "; after 5 seconds"}
    sent: "2017-04-25T18:21:05.947Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "58ff92a6881b89e101856515"
    text: "@michaeldesu :clap: "
    sent: "2017-04-25T18:17:10.175Z"
    v: 1
    author: "529c6bd9ed5ab0b3bf04d74d"
) #(
    id: "58ff8784587a245e24491b4b"
    text: {:point_up: [April 25, 2017 12:22 AM](https://gitter.im/red/red/welcome?at=58feeb1bf22385553d732260) @michaeldesu, nice blog entry!}
    sent: "2017-04-25T17:29:40.435Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff8423d32c6f2f093d05a8"
    text: {And because of Red's free ranging evaluation we can do sort of a "reverse variadic" twist, where we pass a list of all possible args and the target func will take just as many as it uses. ^/```^/; JS-like MAP. The order of args to the function is a bit odd, but is set^/; up that way because we always want at least the value (if your func takes^/; only one arg), the next most useful arg is the index, as you may display^/; progress, and the series is there to give you complete control and match^/; how JS does it. Now, should the series value be passed as the head of the^/; series, or the current index, using AT?^/; This is *sort of* like map-indexed in Clojure.^/map-js: func [^/^-"Evaluates a function for all values in a series and returns the results."^/^-series [series!]^/^-fn [any-function!] "Function to perform on each value; called with value, index, series, [? and size ?] args"^/^-;/only "Collect block types as single values"^/^-;/skip "Treat the series as fixed size records"^/^-;^-size [integer!]^/][^/^-collect [^/^-^-repeat i length? series [   ; use FORSKIP if we want to support /SKIP.^/^-^-^-keep/only fn series/:i :i :series ;:size^/^-^-]^/^-]^/]^/res: map-js [1 2 3 a b c #d #e #f] :form^/res: map-js [1 2 3 a b c #d #e #f] func [v i] [reduce [i v]]^/res: map-js [1 2 3 a b c #d #e #f] func [v i s] [reduce [i v s]]^/res: map-js "Hello World!" func [v i s] [pick s i]^/res: map-js "Hello World!" func [v] [either v = #"o" [1][0]]^-; sum result = count^/res: map-js "Hello World!" func [v i] [if v = #"o" [i]]^-^-^-; remove none! values to keep only index values^/res: map-js "Hello World!" func [v i s] [if v = #"o" [at s i]]^-; remove none! values to keep only series offsets^/```}
    sent: "2017-04-25T17:15:15.755Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff832e8fcce56b2036d842"
    text: {Eliminate the `word` param, and change body to a `function!` arg, and you have standard `map`.}
    sent: "2017-04-25T17:11:10.481Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff82796aea30763d3f77af"
    text: {```^/map-each: function [^/^-"Evaluates body for each value in a series, returning all results."^/^-'word [word! block!] "Word, or words, to set on each iteration"^/^-data [series!] ; map!^/^-body [block!]^/][^/^-collect [^/^-^-foreach :word data [^/^-^-^-; @dockimbel said it should return a block of the same size^/^-^-^-; as the input, but there is no hard decision on whether ^/^-^-^-; unset results should be returned as NONE. They are different,^/^-^-^-; as unset! is treated as a truthy value.^/^-^-^-; Supporting unset! results means COLLECT's KEEP func has to^/^-^-^-; be modded to allow any-type! in its spec.^/^-^-^-;if not unset? set/any 'tmp do body [keep/only :tmp]^/^-^-^-;keep/only either unset? set/any 'tmp do body [none][:tmp]^/^-^-^-keep/only do body^/^-^-]^/^-]^/]^/map-each v [1 2 3] [2 * v]^/map-each v "IBM" [v - 1]^/;map-each [k v] #(a 1 b 2 c 3) [append form v k]^/map-each x [1 2 3 4 5] [either even? x [continue] [x]]^/map-each x [1 2 3 4 5] [either even? x [break] [x]]^/```}
    sent: "2017-04-25T17:08:09.241Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58ff825408c00c092ab4ef37"
    text: {@toomasv, what you're after is a `map` HOF. Doc has ideas on this, and some of us have drafts of implementations. Normally you would do just what Bolek said, but Red gives us another way as well, as `foreach` et al do, where you're anonymous func is just the body. }
    sent: "2017-04-25T17:07:32.313Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ff7faf08c00c092ab4e015"
    text: {@9214 `repeat i 5 [print i wait 1]` that problem occurs only on gui-console because gui-console already in an event loop and you are `wait`ing inside that loop. I think it will be fixed when the gui-console re-written .}
    sent: "2017-04-25T16:56:15.270Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58ff60688fcce56b20362b21"
    text: "@rebolek Thanks for advice!"
    sent: "2017-04-25T14:42:48.977Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff57bac1d3b501541b95ff"
    text: {@toomasv The proper way would be to pass function, not word referring to it, something like:^/```^/>> fn: func [s f][foreach v s [f v]]^/== func [s f][foreach v s [f v]]^/>> fn [1 2 3] :print^/1^/2^/3^/```}
    sent: "2017-04-25T14:05:46.567Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ff567208c00c092ab41226"
    text: {@pekr Thanks for the reference, but it is not `apply`. `apply` applies arguments as a block to the function, I apply a function to the block.}
    sent: "2017-04-25T14:00:18.722Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff541bc1d3b501541b7f48"
    text: {Maybe you are looking for an `apply`func, which is not yet available in Red? http://www.rebol.com/r3/docs/functions/apply.html}
    sent: "2017-04-25T13:50:19.316Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ff50ddc1d3b501541b6da3"
    text: {:point_up: [April 25, 2017 11:33 AM](https://gitter.im/red/red/welcome?at=58ff09e0c1d3b501541a24d1)^/Continuing to embarrass myself. What I was trying to get at, is this:^/```^/for-all: func [^/^-s [series!]^/^-f ^/^-/with gather^/][^/^-forall s [^/^-^-either with [^/^-^-^-gather: do reduce [f gather first s]^/^-^-][^/^-^-^-do reduce [f first s]^/^-^-]^/^-]^/]^/```^/Now I can do things like:^/```^/for-all "abcde" 'print^/for-all/with [3 5 7] 'multiply 1^/for-all [split cause-error] 'source^/```^/Is there some simple clever way in Red to do this kind of stuff?}
    sent: "2017-04-25T13:36:29.038Z"
    editedAt: "2017-04-25T13:44:21.366Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff2ff6587a245e244766d2"
    text: "@rcqls many thanks!"
    sent: "2017-04-25T11:16:06.184Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff2fe4c1d3b501541ad493"
    text: {@9214 @pekr it works on windows with `red —cli`too. Seems to be related to the `console-gui`.}
    sent: "2017-04-25T11:15:48.169Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58ff2f4d8e4b63533d009849"
    text: "@pekr ah, got it"
    sent: "2017-04-25T11:13:17.796Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff2f27cfec919272720561"
    text: {Maybe an incorrect english term, I simply thought about - how time related functionality is implemented ...}
    sent: "2017-04-25T11:12:39.008Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ff2ece6aea30763d3dda9a"
    text: {I'm not sure that it's about time measurement, it simply freezes the output}
    sent: "2017-04-25T11:11:10.920Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff2e5612d240993597af87"
    text: {Depends how time measures are implemented on each platform ...}
    sent: "2017-04-25T11:09:10.589Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ff2e0008c00c092ab356ad"
    text: "well played MS :shit:"
    sent: "2017-04-25T11:07:44.153Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff2dd66aea30763d3dd685"
    text: "@9214 It works too on linux!"
    sent: "2017-04-25T11:07:02.910Z"
    editedAt: "2017-04-25T11:07:21.906Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58ff2d8408c00c092ab354f9"
    text: "can someone check it on Linux?"
    sent: "2017-04-25T11:05:40.204Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff2d0a587a245e24475a5d"
    text: "@rcqls oh, now that's weird"
    sent: "2017-04-25T11:03:38.918Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff2cb412d240993597a934"
    text: " @9214 works as expected on macOS."
    sent: "2017-04-25T11:02:12.366Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58ff2be012d240993597a505"
    text: {I checked Rebol version and it works like expected, gonna fill the ticket}
    sent: "2017-04-25T10:58:40.029Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff27f3f22385553d742696"
    text: "Imo not intended - does not make much sense? ..."
    sent: "2017-04-25T10:41:55.501Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58ff2768c1d3b501541ab017"
    text: {```^/>> repeat i 5 [print i wait 1]^/; after 5 seconds^/1^/2^/3^/4^/5^/== none^/```^/Is that intended? I expected `1 (1 sec) 2 (1 sec) 3 (1 sec) etc`}
    sent: "2017-04-25T10:39:36.065Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff21508e4b63533d005b3f"
    text: "Yeah, bear with me the dumb one :shipit: "
    sent: "2017-04-25T10:13:36.712Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff13ee587a245e2446e684"
    text: ":-)"
    sent: "2017-04-25T09:16:30.310Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff0bb08bb56c2d11de13f4"
    text: {![bravo Watson](http://orig15.deviantart.net/45a4/f/2012/050/8/6/not_bad__by_ocean_crystal-d4q8b10.jpg)}
    sent: "2017-04-25T08:41:20.552Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff0b60c1d3b501541a2e8c"
    text: "`deduce: function [x] [do reduce x]` ;)"
    sent: "2017-04-25T08:40:00.720Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff09e0c1d3b501541a24d1"
    text: {:point_up: [April 25, 2017 11:05 AM](https://gitter.im/red/red/welcome?at=58ff036508c00c092ab298f1)^/Actually, I didn't get it wrong after all! :)^/`reduce [func [a][print a] "b"]` produces `[<func> "b"]`^/`do [[<func> "b"]]` produces `[<func> "b"]` and^/`do [<func> "b"]` produces `b`^/So, best to stick to `do reduce [...]`.}
    sent: "2017-04-25T08:33:36.826Z"
    editedAt: "2017-04-25T08:38:49.761Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff08348bb56c2d11de005b"
    text: "attention span of a goldfish :fish: "
    sent: "2017-04-25T08:26:28.761Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff0816881b89e10182c011"
    text: {@dockimbel ah, jeez, I messed up... `clear` != `unset`}
    sent: "2017-04-25T08:25:58.597Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff07958fcce56b2034a358"
    text: {Those two parts in your sentence are unrelated. `unset` accepts a block of words. How to created such block does not matter. Moreover, some reflectors return a direct reference (e.g. `body-of`).}
    sent: "2017-04-25T08:23:49.334Z"
    editedAt: "2017-04-25T08:24:28.670Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff0747d32c6f2f093aaa5b"
    text: {@dockimbel ok, so reflectors (`*-of` things) return copy, why then `unset words-of system/words` broke everything?}
    sent: "2017-04-25T08:22:31.312Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff070ccfec919272714678"
    text: {`words-of` gets you a copy of the words, not a direct reference to the list of symbols used in the target context.}
    sent: "2017-04-25T08:21:32.186Z"
    editedAt: "2017-04-25T08:21:52.357Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff06a7f22385553d739881"
    text: {but that one didn't worked :( it has something to do with `bind`ology, right? Or `copy`?^/```^/>> bomb: object [explode: does [wait 5 clear words-of :system/words]]^/== make object! [^/    explode: func [][wait 5 clear words-of :system/words]^/]^/>> bomb/explode^/== []^/```}
    sent: "2017-04-25T08:19:51.211Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff06808bb56c2d11ddf7b6"
    text: {@9214 You destroyed the universe! ;-) Once we had `protect` support, such actions will be less destructive.}
    sent: "2017-04-25T08:19:12.219Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ff05decfec9192727141b7"
    text: "What did you expect? :D"
    sent: "2017-04-25T08:16:30.269Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff0526cfec919272713fa2"
    text: {It didn't actually crashed, just closed without any warnings}
    sent: "2017-04-25T08:13:26.113Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff05058e4b63533dffdd7f"
    text: {`unset words-of system/words` crashed console :smiling_imp: with great power... (c)}
    sent: "2017-04-25T08:12:53.665Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff036508c00c092ab298f1"
    text: {Well, I got it wrong again :(^/ @rebolek  @9214 Thanks, this explains the situation:^/```^/>> do do [reduce [func [a][print a] "b"]]^/b^/```}
    sent: "2017-04-25T08:05:57.386Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff018f8bb56c2d11dde275"
    text: {```^/>> type? first do [reduce [func [a][print a] "b"]] ^/== function!^/>> type? second do [reduce [func [a][print a] "b"]] ^/== string!^/>> length? do [reduce [func [a][print a] "b"]] ^/== 2^/```}
    sent: "2017-04-25T07:58:07.958Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ff018d8e4b63533dffcf5d"
    text: {But, `do` executes block that contains `reduce` and its argument, it does not evaluate result of `reduce`.}
    sent: "2017-04-25T07:58:05.135Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ff0184587a245e244694ab"
    text: "Oh, I got it -- `reduce` creates another block"
    sent: "2017-04-25T07:57:56.709Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff01668bb56c2d11dde23c"
    text: {There are two values:^/```^/>> length? do [reduce [func [a][print a] "b"]]^/== 2^/```}
    sent: "2017-04-25T07:57:26.667Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ff010ed32c6f2f093a8f23"
    text: {But then again:^/```^/>> do [reduce [func [a][print a] "b"]]      ; why does `do` not evaluate this?^/== [func [a][print a] "b"]                  ; here should be 2 values now^/```}
    sent: "2017-04-25T07:55:58.894Z"
    editedAt: "2017-04-25T07:57:00.220Z"
    v: 5
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58ff0077cfec919272712743"
    text: "@dockimbel yes, I actually thought about that"
    sent: "2017-04-25T07:53:27.944Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58feff6af22385553d73766b"
    text: "Got it! Thanks"
    sent: "2017-04-25T07:48:58.750Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58feff28881b89e101829990"
    text: {`reduce` will evaluate each value and return block of results, `do` will do basically the same, but returns last value}
    sent: "2017-04-25T07:47:52.015Z"
    editedAt: "2017-04-25T07:48:03.276Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58feff1e8e4b63533dffc4ba"
    text: {Because `[func [a] [print a] "b"]` is a block of 4 values, none of which is a `function!`. So you need two evaluations, first one will construct the function, second one will evaluate it (consuming the "b" argument). To be more clear:^/```lisp^/>> reduce [func [a] [print a] "b"]        ; block of 4 values^/== [func [a][print a] "b"]                ; block of 2 values (a function! and a string!)^/```}
    sent: "2017-04-25T07:47:42.974Z"
    editedAt: "2017-04-25T07:49:41.665Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58feff08f22385553d7373f5"
    text: "no"
    sent: "2017-04-25T07:47:20.456Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fefeb1881b89e1018296b5"
    text: {But why is it so:^/```^/>> reduce [func [a] [print a] "b"]^/== [func [a][print a] "b"]^/>> do [func [a][print a] "b"]^/== "b"^/```^/Is it because `reduce` is binding "b" to argument a, but in case of `do [func...]` it is not bound?}
    sent: "2017-04-25T07:45:53.526Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fefc0b12d240993596c4d7"
    text: "Great!"
    sent: "2017-04-25T07:34:35.450Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fefbfdf22385553d7367c3"
    text: {```lisp^/>> do reduce [func [a] [print a] "b"]^/b^/```}
    sent: "2017-04-25T07:34:21.610Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58fefbec881b89e101828a63"
    text: "Yes, just returns last element in block"
    sent: "2017-04-25T07:34:04.710Z"
    editedAt: "2017-04-25T07:34:19.599Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fefbc98e4b63533dffb5c7"
    text: "Hmm, didn't work actually..."
    sent: "2017-04-25T07:33:29.344Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fefbb48bb56c2d11ddcb07"
    text: "Thanks!"
    sent: "2017-04-25T07:33:08.663Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fefba608c00c092ab2732e"
    text: {@toomasv ^/```lisp^/>> do [func [a] [print a] "b"]^/== "b"^/```}
    sent: "2017-04-25T07:32:54.698Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fefb5a6aea30763d3d042d"
    text: {How can I use anonymous function?^/```^/>> reduce func [a] [print a] "b"^/*** Script Error: func [a][print a] is missing its a argument^/*** Where: reduce^/```}
    sent: "2017-04-25T07:31:38.943Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fefab38bb56c2d11ddc0ce"
    text: {@9214 You can also recreate the `op!` from its `action!` counterpart:^/```lisp^/>> plus: make op! :add^/>> 2 plus 3^/== 5^/```}
    sent: "2017-04-25T07:28:51.644Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fef57a587a245e24465e87"
    text: "With great power comes great responsibility^/"
    sent: "2017-04-25T07:06:34.784Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fef55ccfec91927270ef37"
    text: ":D"
    sent: "2017-04-25T07:06:04.749Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fef52f8e4b63533dff9ba6"
    text: {```^/>> clear spec-of :help^/== []^/>> clear body-of :help^/== []^/>> help print^/[] is a block ^/^/*** Script Error: print is missing its value argument^/*** Where: print^/>> help 'print^/[help 'print] is a block ^/^/== print^/>> ? parse^/[? parse] is a block ^/^/*** Script Error: parse is missing its input argument^/*** Where: parse^/>> help^/[help] is a block ^/^/>> somebody help!^/*** Script Error: somebody has no value^/*** Where: catch^/>> plz^/*** Script Error: plz has no value^/*** Where: catch^/>> ^/```}
    sent: "2017-04-25T07:05:19.532Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fef4736aea30763d3ce630"
    text: {@rebolek ha, so I can literally cut off my limbs in Redbol that way? :D}
    sent: "2017-04-25T07:02:11.835Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fef43c881b89e1018265ee"
    text: "@9214 store it somewhere else first"
    sent: "2017-04-25T07:01:16.032Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fef40e08c00c092ab25396"
    text: {```^/>> 2 - 1^/== 1^/>> -: :+^/== make op! [[^/    "Returns the sum of the two values" ^/    v...^/>> 2 - 1^/== 3^/>> probe system/words/-^/make op! [[^/    "Returns the sum of the two values" ^/    value1 [number! char! pair! tuple! vector! time!] ^/    value2 [number! char! pair! tuple! vector! time!] ^/    return: [number! char! pair! tuple! vector! time!]^/]]^/== make op! [[^/    "Returns the sum of the two values" ^/    v...^/>> ; how can I bring original `-` back?^/>> ^/```}
    sent: "2017-04-25T07:00:30.945Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58fef165881b89e101825ba1"
    text: "@9214 oh, that :) I see."
    sent: "2017-04-25T06:49:09.186Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fef0d18fcce56b20343ee8"
    text: "agree"
    sent: "2017-04-25T06:46:41.693Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fef0b1f22385553d733542"
    text: {@rebolek true, I think the main confusion for me was that some `parse` functionality in Red was moved to `split` :)}
    sent: "2017-04-25T06:46:09.169Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58feef5cd32c6f2f093a44f5"
    text: {I think it's an important one, as discussed before, I think novice users expect to use the `word:` pointer catching and setting/updating text later, but this `change` mode I think is 'new' (at least to me:-)).}
    sent: "2017-04-25T06:40:28.562Z"
    editedAt: "2017-04-25T06:40:49.315Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58feeef56aea30763d3cd465"
    text: {@9214 thanks - I think `change` is not documented yet, but I think it's coming (from above). It's understandable as I see that post was written in 2013!}
    sent: "2017-04-25T06:38:45.570Z"
    editedAt: "2017-04-25T06:38:54.156Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58feeeb68e4b63533dff81e9"
    text: {@9214 I certainly wouldn't call it quite different. Red's version is enhanced Rebol's version.}
    sent: "2017-04-25T06:37:42.193Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58feee85c1d3b5015419aa50"
    text: {@michaeldesu ^/* [Rebol wikibook](https://en.wikibooks.org/wiki/REBOL_Programming/Language_Features/Parse) will tell you more about original Rebol parse dialect, but it's a little different from the one we have in Red, so,^/* [check blog post about Red parse](http://www.red-lang.org/2013/11/041-introducing-parse.html) to see the main differences.}
    sent: "2017-04-25T06:36:53.434Z"
    editedAt: "2017-04-25T06:41:02.246Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58feed5b8fcce56b20342ff5"
    text: "Thanks"
    sent: "2017-04-25T06:31:55.182Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58feecac8bb56c2d11dd879f"
    text: "@michaeldesu cool! Very newbie-friendly."
    sent: "2017-04-25T06:29:00.216Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58feebc7f22385553d73261a"
    text: {@michaeldesu Nice! The images surely help understanding what is going on.}
    sent: "2017-04-25T06:25:11.544Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58feeb1bf22385553d732260"
    text: {I've written a simple blog [post](http://www.michaelsydenham.com/reds-parse-dialect/) about some very basics about `parse` & `change` aimed at beginners like me. I hope to post more as I learn more. Any feedback/corrections welcome. Thanks to the community here for the learnings!}
    sent: "2017-04-25T06:22:19.511Z"
    editedAt: "2017-04-25T06:24:56.906Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fecfb9cfec919272706f96"
    text: {Sorry I haven't had time to look at it. Maybe tomorrow.}
    sent: "2017-04-25T04:25:29.126Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58feabe4587a245e244566d8"
    text: {or maybe for this case, it's better to collect all the matches in a series, and then subsequently process in another step. It's ok, it's just an exploratory question.}
    sent: "2017-04-25T01:52:36.275Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58feab9ff22385553d7258c0"
    text: {yes you're right about `multi` rule - thanks. Agree, it would be ok to break up the rules. I was just wondering since it seems like the matches result is passed through to `change`. Is it possible to call a function upon each match, and in that way pass out the matched value, and use the function return result for the subsequent `change`?}
    sent: "2017-04-25T01:51:27.236Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58feaa398e4b63533dfe9bf3"
    text: {Sometimes you need to, or it can help a lot, to break your rules down more. Also in `multi` you should check for longest matches first. }
    sent: "2017-04-25T01:45:29.033Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fea4fe881b89e101815d90"
    text: {how to get access to the length of the match in order to tailor a tricky replace - consider this:^/```^/multi: [4 digit | 5 digit | 6 digit]^/s: "123 aaa 1234 bbb 12345 zzz 123456 yes"^/parse s [some [to multi 2 skip change 2 digit "XX"]]^/; produces "123 aaa 12XX bbb 12XX5 zzz 12XX56 yes"^/```^/but say if I wanted to keep the last 2 digits from the matched result, and still do the `change` to XX, i.e. the desired result is ^/`"123 aaa XX34 bbb 1XX45 zzz 12XX56 yes"`}
    sent: "2017-04-25T01:23:10.346Z"
    editedAt: "2017-04-25T01:24:12.350Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fe8f54cfec9192726f9bf4"
    text: "@rebolek thanks again for your great explanation"
    sent: "2017-04-24T23:50:44.641Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fe7757587a245e2444b47a"
    text: {What `change` keyword in `parse` does is actually `change/part`, where the `/part` length is length of the match.}
    sent: "2017-04-24T22:08:23.696Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe771b6aea30763d3b5042"
    text: {And now take a look at `change/part`:^/```^/>> s: "111 and this is..."^/== "111 and this is..."^/>> change/part s "CHANGE" 3^/== " and this is..."^/>> s^/== "CHANGE and this is..."^/```}
    sent: "2017-04-24T22:07:23.110Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe76e76aea30763d3b4ea7"
    text: {See what `change` function does:^/```^/>> s: "111 and this is..."^/== "111 and this is..."^/>> change s "CHANGE"^/== "d this is..."^/>> s^/== "CHANGEd this is..."^/```^/}
    sent: "2017-04-24T22:06:31.860Z"
    editedAt: "2017-04-24T22:07:01.502Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe767e08c00c092ab0bebe"
    text: "OK, let's forget about `parse` for a moment."
    sent: "2017-04-24T22:04:46.927Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe7654c1d3b5015418145a"
    text: "@michaeldesu wait a moment..."
    sent: "2017-04-24T22:04:04.636Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe75e88fcce56b2032abc7"
    text: {@rebolek thanks - I will persevere with learning :-)}
    sent: "2017-04-24T22:02:16.803Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fe757008c00c092ab0bab7"
    text: {both these parse methods work, but the former is better (replaces the match with a larger text swap) - mine overwrites^/```^/a: "this is 111 and this is 222 and this is 333 and then"^/parse a [some [to triple change triple "CHANGED"]]^/>> a^/== {this is CHANGED and this is CHANGED and this is CHANGED and then}^/```^/```^/a: "this is 111 and this is 222 and this is 333 and then"^/parse a [some [to triple tmp: (change tmp "CHANGE")]]^/>> a^/== {this is CHANGEd this is CHANGEd this is CHANGEd then}^/```^/why is that?}
    sent: "2017-04-24T22:00:16.016Z"
    editedAt: "2017-04-24T22:00:54.071Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fe7504f22385553d71a7a6"
    text: {The assignment for the former (`change` keyword) is done by the matching rule.^/}
    sent: "2017-04-24T21:58:28.343Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe74dd881b89e10180bad5"
    text: {@michaeldesu there is difference between `change` as parse keyword and `(change)` as Red function.}
    sent: "2017-04-24T21:57:49.222Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fe74848fcce56b2032a7a1"
    text: {I am unsure about why @rebolek's example of:^/```^/digit: charset "0123456789"^/triple: [3 digit]^/a: "this is 111 and this is 222 and this is 333 and then"^/parse a [some [to triple change triple "xxx"]]^/```^/works the way it does. I mean looking at other examples, I was conditioned to thinking we have to put a pointer into a variable for the `change` action^/```^/parse a [some [to triple tmp: (change tmp "XXX")]]^/```^/But in the former, there is no such variable assignment. It's like the  `change triple "xxx"` is that assignment, but `triple` is a rule, and usually the first parameter in change is a series. It's almost magical :-) I think that latter application is similar to the earlier example of ^/```^/parse "aa 12/11/70 bb 13/12/71 xx" [to date copy d date]^/```^/where one moves to the first date, then takes an action using that date rule to fill the variable d.}
    sent: "2017-04-24T21:56:20.056Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdf805c1d3b5015415cf6a"
    text: {So it is actually `change/part s: "match" "replacement" length? s`}
    sent: "2017-04-24T13:05:09.363Z"
    v: 1
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fdf73df22385553d6f5ffc"
    text: {@toomasv Correct, internally in Parse, it's using `change/part`.}
    sent: "2017-04-24T13:01:49.227Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fdf59808c00c092aae6e98"
    text: {You mean in your last example? Yes, the match is the length of argument there. ^/... Actually, there is no match at all in this example :)}
    sent: "2017-04-24T12:54:48.723Z"
    editedAt: "2017-04-24T12:57:32.278Z"
    v: 2
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fdf54a8e4b63533dfba2e3"
    text: {So the result is not same. *length of the match* is 1 not 2 in my example.}
    sent: "2017-04-24T12:53:30.167Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdf4e112d240993592bb97"
    text: {@endo64 Yes, I changed "ax" into "b" as "123" was changed into "b" in doc's example.}
    sent: "2017-04-24T12:51:45.524Z"
    editedAt: "2017-04-24T12:52:55.815Z"
    v: 3
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fdf4a6587a245e2442535a"
    text: {@toomasv But you removed `x` from `s`,  `>> head s ; == "b" `}
    sent: "2017-04-24T12:50:46.411Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdf2c8d32c6f2f09366839"
    text: {@endo64 Seems like parse's `change` acts as `change/part`:^/```^/>> change/part s: "ax" "b" 2^/== ""^/>> s^/== "b"^/```^/That is, changing not the length of the argument, but the length of the match, which makes sense.}
    sent: "2017-04-24T12:42:48.919Z"
    editedAt: "2017-04-24T12:47:10.641Z"
    v: 4
    author: "58e74c67d73408ce4f56bd1f"
) #(
    id: "58fdf123cfec9192726ce21a"
    text: {```^/>> change s: "ax" "b"^/== "x"  ; not "b"^/```}
    sent: "2017-04-24T12:35:47.438Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdf11008c00c092aae56f7"
    text: {So it still different than normal `change` which returns the position *after* the change.}
    sent: "2017-04-24T12:35:28.809Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdf074587a245e24424003"
    text: {```lisp^/>> digit: charset "012345789"^/== make bitset! #{000000000000FDC0}^/>> parse s: "123" [change [3 digit] "b"]^/== true^/>> s^/== "b"^/```}
    sent: "2017-04-24T12:32:52.791Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fdf01d8bb56c2d11d9a959"
    text: {To be accurate, it's the `"a"` token which is making `change` rule advance. It's called the rule-mode (vs position-mode) for `change` in Parse, in the upcoming documentation for Red's Parse.}
    sent: "2017-04-24T12:31:25.433Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58fdefca08c00c092aae50ad"
    text: "this is all so deep :-) and interesting"
    sent: "2017-04-24T12:30:02.374Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdef8ecfec9192726cd9ee"
    text: "thanks guys"
    sent: "2017-04-24T12:29:02.434Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdef8c8fcce56b2030594e"
    text: {But see this one as a prove `change` is advancing:^/```^/>> parse s: "a" [p: change "a" "b"]^/== true^/>> p^/== "b"^/```}
    sent: "2017-04-24T12:29:00.873Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdef70c1d3b5015415a5e8"
    text: {how elegant that you can assign and use in the same line like `s: "a"` etc}
    sent: "2017-04-24T12:28:32.996Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdef6ec1d3b5015415a5e0"
    text: "You can ignore that. Its for debugging."
    sent: "2017-04-24T12:28:30.877Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdef628fcce56b20305840"
    text: "I think `p:` is there for debug."
    sent: "2017-04-24T12:28:18.503Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdef068fcce56b203055ee"
    text: {@endo64 thanks for your input - what's the significance of  the `p` assignment in your 2nd parse example?}
    sent: "2017-04-24T12:26:46.465Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdee98f22385553d6f366f"
    text: {no worries - your explanation did make sense also. The above from Semseddin was interesting.}
    sent: "2017-04-24T12:24:56.466Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdee62c1d3b5015415a1d5"
    text: {@michaeldesu sorry it does, I was focusing too much on `to` in the explanation.}
    sent: "2017-04-24T12:24:02.736Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdee05f22385553d6f343a"
    text: {ha - came back to see some more info:-) so `change` does advance the pointer after all.}
    sent: "2017-04-24T12:22:29.073Z"
    editedAt: "2017-04-24T12:24:00.308Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdd9446aea30763d387f39"
    text: "Ah, ok, no problem."
    sent: "2017-04-24T10:53:56.949Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdd93acfec9192726c6fa3"
    text: {Yep, I can't edit it anymore. Sorry for the confusion.^/}
    sent: "2017-04-24T10:53:46.139Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdd919c1d3b5015415413c"
    text: {Hmm wait.. it looks like it advance the pointer?^/```^/>> parse s: "a" [change "a" "x"]^/== true^/>> parse s: "a" [change "a" "x" p: insert "y"]^/== true^/>> s^/== "xy"^/```}
    sent: "2017-04-24T10:53:13.526Z"
    editedAt: "2017-04-24T10:53:43.207Z"
    v: 3
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdd90908c00c092aade63d"
    text: {@endo64 my bad, it does. I was too focused on `to`.}
    sent: "2017-04-24T10:52:57.702Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdd8c9cfec9192726c6dff"
    text: {Why `change` in `parse` doesn't advance the position as in  `Red`? I mean what is the reason?}
    sent: "2017-04-24T10:51:53.077Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58fdcf158bb56c2d11d91636"
    text: "@michaeldesu you're welcome, I am happy to help."
    sent: "2017-04-24T10:10:29.905Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdcc1412d240993591fd62"
    text: {@rebolek great answer! thanks so much - it makes sense.}
    sent: "2017-04-24T09:57:40.597Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdcb1c881b89e1017dcbb4"
    text: {Without change, you are still at `"111 and ..."` so it still matches -> infinite loop.}
    sent: "2017-04-24T09:53:32.020Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdcaf46aea30763d383db3"
    text: {With `change`, you are at `"111 and ..."`, it changes to `"XXX and ..."` so `triple` no longer matches and `to` must find next `triple`.}
    sent: "2017-04-24T09:52:52.746Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdcaaf08c00c092aad9e34"
    text: {@michaeldesu `change` does not advance the pointer, `to` does.}
    sent: "2017-04-24T09:51:43.260Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdca19881b89e1017dc8c5"
    text: {can I ask a potentially dumb question: without `change triple "XXX"` the parse goes into an infinite loop, so does that change advance the pointer to allow the next `to` to operate?}
    sent: "2017-04-24T09:49:13.970Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdc6b88e4b63533dfac0a0"
    text: {@michaeldesu ^/```^/>> parse a [some [to triple change triple "XXX"] (print "if you see this, it means previous rule stopped execution and parse moved to next rule (this one)")]^/if you see this, it means previous rule stopped execution and parse moved to next rule (this one)^/```}
    sent: "2017-04-24T09:34:48.661Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdc63e8e4b63533dfabb9a"
    text: "@rebolek ok, thanks alot once again!"
    sent: "2017-04-24T09:32:46.530Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdc5da12d240993591ddea"
    text: {@michaeldesu If you change all triples to "XXX", there's nothing to match and the rule fails, stopping execution.}
    sent: "2017-04-24T09:31:06.500Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdc5828fcce56b202f9d5d"
    text: {@rebolek can I ask, in your latest example, what advances the pointer to avoid an endless loop?}
    sent: "2017-04-24T09:29:38.359Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdb9ebc1d3b5015414b2a0"
    text: "thanks very much"
    sent: "2017-04-24T08:40:11.879Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdb9b9c1d3b5015414b1cd"
    text: {@michaeldesu `value` argument is `"XXX"` in your case, see `help change`.^/^/You do not need `skip`, because you are using `to`. I can rewrite my `change`keyword example as:^/`parse a [some [to triple change triple "XXX"]]`}
    sent: "2017-04-24T08:39:21.293Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdb8ff12d240993591a115"
    text: {@rebolek thanks, I'm not sure how the `value` argument is set- I will study the doc  @greggirwin thanks for your tips. I noticed that skip is not needed in my example^/```^/parse a [some [to triple tmp: (change tmp "XXX")]]^/>> a^/== "this is XXX and this is XXX and this is XXX"^/```}
    sent: "2017-04-24T08:36:15.959Z"
    editedAt: "2017-04-24T08:36:42.129Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fdb003f22385553d6e22a3"
    text: "It is not dependent on the next rule succeeding."
    sent: "2017-04-24T07:57:55.036Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fdafe0d32c6f2f09353e54"
    text: {@michaeldesu, if you `probe tmp`, you can see that it's the same in both cases. ^/```^/digit: charset "012345679"^/triple: [3 digit]^/a: "this is 111 and this is 222 and this is 333 and then"^/parse a [some [to triple tmp: 3 skip (change probe tmp "XXX")]]^/^/a: "this is 111 and this is 222 and this is 333 and then"^/parse a [some [to triple tmp: (change probe tmp "XXX") 3 skip]]^/```^/That's because the `tmp:` gets the position in the input *before* the next rule (e.g. `skip`) is evaluated.}
    sent: "2017-04-24T07:57:20.382Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fdaf6f12d2409935917cbf"
    text: {@michaeldesu you can also use `change` keyword in `parse`:^/```^/>> parse a [some [change triple "XXX" | skip]]^/== true^/>> a^/== {this is XXX and this is XXX and this is XXX and then}^/```}
    sent: "2017-04-24T07:55:27.908Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdaf05881b89e1017d57dc"
    text: {`change` changes as many characters as is the length of its `value`argument.}
    sent: "2017-04-24T07:53:41.489Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fdae5cf22385553d6e1bfe"
    text: {@rebolek thanks - I follow how `to` works, I guess what I didn't understand is the `change` is merely copying three chars starting at the position of tmp, and the skip doesn't really matter}
    sent: "2017-04-24T07:50:52.644Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fda42a8bb56c2d11d85962"
    text: {No, `to` moves the pointer to start of the triplet. `tmp:` stores position. `change` does the change.}
    sent: "2017-04-24T07:07:22.635Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58fda3c6c1d3b50154145d58"
    text: {I'm still studying parse, in particular [modifying text](http://www.rebol.com/docs/core23/rebolcore-15.html#section-7.5).  I'm trying the example there. I've come up with the following to exchange a 3 digit number to all X's.^/```^/digit: charset "012345679"^/triple: [3 digit]^/a: "this is 111 and this is 222 and this is 333 and then"^/parse a [some [to triple tmp: 3 skip (change tmp "XXX")]]^/>> a^/== {this is XXX and this is XXX and this is XXX and then}^/```^/but I wonder why the following also works:^/```^/parse a [some [to triple tmp: (change tmp "XXX") 3 skip]]^/```^/since in the later parse, it seems to me that the change request is being done before the pointer has moved to 3 skips. Thanks.}
    sent: "2017-04-24T07:05:42.017Z"
    editedAt: "2017-04-24T07:05:51.888Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fa8fc58bb56c2d11ced161"
    text: {@meijeru `do` solution - thanks alot Rudolf. Really appreciate this community!}
    sent: "2017-04-21T23:03:33.717Z"
    editedAt: "2017-04-21T23:04:06.105Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58fa50198bb56c2d11cdd2f9"
    text: "Thanks! Fixed."
    sent: "2017-04-21T18:31:53.895Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa49f68fcce56b20244943"
    text: {@greggirwin Nothing major but I guess a space is missing between 2 and 3 in the last point of the FAQ in `[1 23 4]`.}
    sent: "2017-04-21T18:05:42.085Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58fa426cad849bcf42a885de"
    text: "Me too. "
    sent: "2017-04-21T17:33:32.840Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa426308c00c092aa2349f"
    text: "Thanks, forgot we had one already."
    sent: "2017-04-21T17:33:23.552Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa420512d2409935865a3e"
    text: {:point_up: [April 21, 2017 5:39 AM](https://gitter.im/red/red/welcome?at=58f9ef73881b89e10170b682) https://github.com/red/red/wiki/FAQ}
    sent: "2017-04-21T17:31:49.897Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58fa22768bb56c2d11ccf82a"
    text: ":+1:  for `do` solution."
    sent: "2017-04-21T15:17:10.753Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58fa0769ad849bcf42a760b9"
    text: {But beware: `reduce` makes a block with all the evaluated values in it, while `do` yields the value of the last evaluation.^/```^/>> reduce [1 + 2 3 + 4]^/== [3 7]^/>> do [1 + 2 3 + 4]^/>> 7^/```^/}
    sent: "2017-04-21T13:21:45.433Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58fa06ce881b89e101711992"
    text: {What about `do a`? This will yield `6`. Remember: blocks are evaluated by `do` and parens evaluate automatically. So to quote a block, just write it; to quote parens, put `quote`in front. In the REPL:^/```^/>> [1 + 2]^/== [1 + 2]^/>> do [1 + 2]^/== 3^/>> (1 + 2)^/== 3^/>> quote (1 + 2)^/== (1 + 2)^/```^/}
    sent: "2017-04-21T13:19:10.119Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58f9fb138bb56c2d11cc3217"
    text: {here's another 'is there a better way' question :-). Reduce on a series including math operators gives the result in a block, e.g.^/```^/a: [1 + 2 + 3]^/b: reduce a ; gives [6]^/c: b/1 + 1^/== 7^/```^/so getting access to the block in b, I've done `b/1`, is there a smarter/more elegant way?}
    sent: "2017-04-21T12:29:07.235Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f9ef73881b89e10170b682"
    text: {No problem, such question can go into a FAQ (we should set up one on the wiki I guess, until we get a new website).}
    sent: "2017-04-21T11:39:31.466Z"
    editedAt: "2017-04-21T11:39:55.075Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9ef428fcce56b20229f33"
    text: {and I also believe a lot of newcomers from other languages will ask this exact question soon :D}
    sent: "2017-04-21T11:38:42.119Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9ef22881b89e10170b55c"
    text: "yep, I got it"
    sent: "2017-04-21T11:38:10.672Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9eefb8fcce56b20229dec"
    text: {@maximvl ^/> what bothers me in this case is that flatten is default behaviour, while it could be optional like `append/flat`^/^/I just explained to you why it's a better default.}
    sent: "2017-04-21T11:37:31.338Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9eea18bb56c2d11cbfcca"
    text: {I don't have strong arguments either, it just "feels" more logical}
    sent: "2017-04-21T11:36:01.019Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "58f9ee4e08c00c092aa0a428"
    text: {@maximvl oh, right. Then `do append [1 +] [1]`. :) Anyway, there was some debate if `/flat` route is netter than `/only`, but AFAIK, no strong argument for `/flat` ever came up.}
    sent: "2017-04-21T11:34:38.590Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f9ebcd8fcce56b20229254"
    text: {@rebolek you don't append block, so it's the same for your example ;)}
    sent: "2017-04-21T11:23:57.242Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9eb8b8fcce56b20229149"
    text: "instead of `append/only`"
    sent: "2017-04-21T11:22:51.717Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9eb7f881b89e10170a699"
    text: {@rebolek @dockimbel what bothers me in this case is that flatten is default behaviour, while it could be optional like `append/flat`}
    sent: "2017-04-21T11:22:39.076Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9e6c98e4b63533ded83a3"
    text: {And remember,  you can still do the second using the `/only` refinement that most series actions have.}
    sent: "2017-04-21T11:02:33.445Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58f9e073f22385553d61594d"
    text: {@maximvl Unless "every language" has the same types and semantics as Redbol, cherry-picking semantic rules from other languages, and applying them to Redbol, can quickly become irrevelant. The default behavior of `append` (and other series actions) wrt to block arguments is very useful, as Redbol relies on fixed-size arity functions, so specifying "several values" instead of one can only be achieved by passing a block (or a `any-block!`container, like `paren!`). Such usage is common enough in Redbol, to deserve to be the default behavior. Redbol is optimized for practical usage.}
    sent: "2017-04-21T10:35:31.081Z"
    editedAt: "2017-04-21T10:37:28.968Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9dedc12d2409935848ee4"
    text: { With the second, you can't do things like^/```^/>> do append [1 +] 1^/== 2^/```}
    sent: "2017-04-21T10:28:44.538Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f9dd3c8e4b63533ded5b04"
    text: "except perl, btw"
    sent: "2017-04-21T10:21:48.558Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9dd353e27cac331ad1ec0"
    text: {maybe it's because of my experience, but every language does second by default}
    sent: "2017-04-21T10:21:41.108Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9dc918bb56c2d11cbb723"
    text: {Both. Sometimes you want a container type to be treated as a single value, sometimes you want it to be treated as a list of value.}
    sent: "2017-04-21T10:18:57.261Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9dc4e3e27cac331ad1b15"
    text: {```^/>> a: [1 2]^/== [1 2]^/>> append a [3 4]^/== [1 2 3 4]^/```^/^/```^/>> append a [3 4]^/== [1 2 [3 4]]^/```^/Which one looks more logical? :D}
    sent: "2017-04-21T10:17:50.219Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f9d415881b89e1017047bb"
    text: {@9214 maybe a better expression is 'string fundamentalists'  ;)}
    sent: "2017-04-21T09:42:45.560Z"
    v: 1
    author: "56e1eb0685d51f252ab83511"
) #(
    id: "58f9cc38d32c6f2f09283059"
    text: {just realised that  @pekr (or can I say "string terrorists"? :suspect:) broke the chain of winking smiles}
    sent: "2017-04-21T09:09:12.371Z"
    editedAt: "2017-04-21T09:13:08.837Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f9be1b881b89e1016fe872"
    text: "elegant weapons for a not so civilized age ;)"
    sent: "2017-04-21T08:08:59.782Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f9bdab8bb56c2d11cb2fc9"
    text: {@rebolek I just mistakenly read "string terrorists" :-)}
    sent: "2017-04-21T08:07:07.349Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f9acd58fcce56b202187d4"
    text: ":clap: ;-)"
    sent: "2017-04-21T06:55:17.474Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9acb1ad849bcf42a5d634"
    text: {String theorists and Tcl programmers think that everything is a string ;)}
    sent: "2017-04-21T06:54:41.295Z"
    editedAt: "2017-04-21T06:54:50.417Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f9acadd32c6f2f0927a4c3"
    text: "thanks everyone - this has been really useful"
    sent: "2017-04-21T06:54:37.581Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f9ac9d12d240993583bfa1"
    text: "At least, we try. ;-)"
    sent: "2017-04-21T06:54:21.204Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9ac7b12d240993583bf42"
    text: {:-) yeah, the latter - so Rebol/Red is making things straight ;-)}
    sent: "2017-04-21T06:53:47.695Z"
    editedAt: "2017-04-21T06:54:22.056Z"
    v: 4
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f9ac54d32c6f2f0927a37c"
    text: {@michaeldesu In many languages, strings are made of...strings (probably old BASIC inheritage), in Redbol, strings are made of characters. Which one sounds the more logical to you? ;-)}
    sent: "2017-04-21T06:53:08.558Z"
    editedAt: "2017-04-21T06:53:24.698Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9ac0e08c00c092a9f8d19"
    text: {I hadn't thought about this in a long time. Good refresher.}
    sent: "2017-04-21T06:51:58.211Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9abe0c1d3b50154067df3"
    text: {Each returns an atomic value from the series. Should string be different? Should it do this?^/```^/>> pick "abcd" 4^/== "d"^/>> pick %abcd 4^/== %d^/>> pick http:// 4^/== p  ; (this is a url!)^/>> pick <abcd> 4^/== <d>^/```}
    sent: "2017-04-21T06:51:12.272Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9abd38bb56c2d11cae211"
    text: "@rebolek thanks alot - ok that makes sense"
    sent: "2017-04-21T06:50:59.616Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f9abbcc1d3b50154067d49"
    text: {I agree with @pekr `copy/part a 1` is another solution that returns a single-char string "a", so it's another alternative (I think other chars can be grabbed via `copy/part a 2 2 ; gives "b"`)}
    sent: "2017-04-21T06:50:36.967Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f9aba1d32c6f2f0927a1b0"
    text: {@michaeldesu `string!` is series of `char!` values. So you must pickup `char!` because that's what is there :)}
    sent: "2017-04-21T06:50:09.849Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f9ab55ad849bcf42a5cff7"
    text: {Not to belabor the point, but consider this:^/```^/>> pick #{AABBCCFF} 4^/== 255^/>> pick [a b c d] 4^/== d^/>> pick make image! 5x5 4^/== 255.255.255.0^/```}
    sent: "2017-04-21T06:48:53.932Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f9aa92f22385553d607b44"
    text: {@greggirwin @dockimbel thanks for comments and code improvements. Returning a char is a bit strange for me - strings are a series, so I think that it's not illogical to expect that when picking off one character from that series, that you get a single-character string as a result. I realise returning a char is just the way it is, and accept it. }
    sent: "2017-04-21T06:45:38.738Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f9a85a12d240993583ae32"
    text: {@pekr , thanks - yeah I agree (I understand this is a different system & way - pros/cons etc exist) but mostly just understanding of the new way^/> why picking a substring of length 1 from string, does convert to char by default -  this is historical Rebol behaviour, it is imo not going to change ...^/}
    sent: "2017-04-21T06:36:10.492Z"
    editedAt: "2017-04-21T06:36:42.869Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f9a5cd12d240993583a55b"
    text: {As Gregg pointed out, strings are series, so they are sequences of char values. Returning a string from `pick <string> <index>` makes no sense in that context, and would break the series behaviors (the whole series polymorphism would break down).}
    sent: "2017-04-21T06:25:17.274Z"
    editedAt: "2017-04-21T06:26:34.511Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f9a51708c00c092a9f6e1b"
    text: {@michaeldesu The following version is much more efficient:^/```lisp^/foreach x a [append b to-integer x - #"0"]^/```^/^/}
    sent: "2017-04-21T06:22:15.843Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f99f84c1d3b501540647ed"
    text: {`copy/part`is our friend then. Tried with other type, e.g. binary:^/^/```^/>> bin: #{FF0AFEC7} ^/== #{FF0AFEC7}^/>> copy/part bin 2^/== #{FF0A}^/>> copy/part bin 1^/== #{FF}^/>> bin/1^/== 255^/```^/}
    sent: "2017-04-21T05:58:28.426Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f99f0a8bb56c2d11caacce"
    text: {I think it's a coin toss about which is more useful, that's my point.}
    sent: "2017-04-21T05:56:26.382Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f99ee08bb56c2d11caac34"
    text: {It might be consistent, but not much useful. There might be some patterns, and here, you usually will convert back to string ...}
    sent: "2017-04-21T05:55:44.336Z"
    editedAt: "2017-04-21T05:56:07.282Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f99e1acfec9192725dbcc8"
    text: {You're picking a single value from its containing series, so what you get back depends on what the series contains. Do you expect `first [1]` to return `[1]` because you're picking from a block? Of course, it's an action strings could override, but I don't think it's a clear win either way, just a choice.}
    sent: "2017-04-21T05:52:26.675Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f99d568bb56c2d11caa780"
    text: {Well, to be honest, I thought the same many times in the past - namely why picking a substring of length 1 from string, does convert to char by default. If I want a char, I can easily convert. But - this is historical Rebol behaviour, it is imo not going to change ...}
    sent: "2017-04-21T05:49:10.802Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f99666ad849bcf42a57f7c"
    text: {getting a char instead of a single-char string is a difference to Python^/```^/a = "hello"^/for x in a:^/^-print(type(x)) # gives <class 'str'> times 5 for each char^/```}
    sent: "2017-04-21T05:19:34.760Z"
    editedAt: "2017-04-21T05:20:17.929Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f991b7f22385553d601865"
    text: {thanks - yes, I realise that (i.e. the post above with `to-integer form a/1 ; gives 1`) and (without form) `to-integer a/1 ; gives 49`where 49 is the ascii value of the char #"1"}
    sent: "2017-04-21T04:59:35.866Z"
    editedAt: "2017-04-21T05:01:39.445Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f99181cfec9192725d8fcd"
    text: {@michaeldesu btw, `form` gives you a string, not a character^/```^/>> first "123"^/== #"1"^/>> type? first "123"^/== char!^/>> form first "123"^/== "1"^/>> type? form first "123"^/== string!^/```}
    sent: "2017-04-21T04:58:41.851Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f98ff1881b89e1016f29c9"
    text: "@9214 Thanks - it's a nice study piece for me"
    sent: "2017-04-21T04:52:01.220Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f98c8d12d2409935834b12"
    text: {```^/b: charset [#"A" - #"Z" #"0" - #"9"]^/repeat i length? b [print [i tab to char! i]]^/```}
    sent: "2017-04-21T04:37:33.102Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f98b428e4b63533dec0816"
    text: {```^/a: "123"^/to-integer a/1 ; gives 49^/to-integer form a/1 ; gives 1^/```}
    sent: "2017-04-21T04:32:02.439Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f98ae108c00c092a9f13dd"
    text: {@9214  :-)  @greggirwin  Thanks alot. This was a good one.. `form` is new to me, and a nice solution to getting a character instead of string}
    sent: "2017-04-21T04:30:25.392Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f98aa812d24099358342cd"
    text: {If you have more complex needs, varying number of digits to grab, I can dig something up.}
    sent: "2017-04-21T04:29:28.960Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f98a8708c00c092a9f1322"
    text: "oh, my bad, but it's still a block! :^^)"
    sent: "2017-04-21T04:28:55.075Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f98a6bd32c6f2f092721d1"
    text: "`collect [foreach x a [keep to-integer form x]]`"
    sent: "2017-04-21T04:28:27.855Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f98a1908c00c092a9f11df"
    text: "@9214, nope. Try it."
    sent: "2017-04-21T04:27:05.230Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f989f63e27cac331abd1ea"
    text: {`load/all "123"`}
    sent: "2017-04-21T04:26:30.061Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f986613e27cac331abc4a6"
    text: {is there a smarter or more elegant way to convert a string containing digits to an integer series? Initial attempt below^/```^/>> a: "123"^/>> b: []^/>> foreach x a [append b to-integer to-string x]^/== [1 2 3]^/```^/to-string is needed since x is a char, so the to-integer conversion is the ascii number not the actual one.}
    sent: "2017-04-21T04:11:13.687Z"
    editedAt: "2017-04-21T04:14:30.297Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f92d948bb56c2d11c916f7"
    text: "Thank you @greggirwin "
    sent: "2017-04-20T21:52:20.008Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "58f92d3508c00c092a9dd9f5"
    text: "Use `call`."
    sent: "2017-04-20T21:50:45.315Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f92c838e4b63533deabd4a"
    text: {Is there a way to compile red code from the REPL or via  a command without going the OS's commandline/terminal?}
    sent: "2017-04-20T21:47:47.729Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f86d65c1d3b50154012d25"
    text: {Besides that, `vector!` is a series, so series action apply.}
    sent: "2017-04-20T08:12:21.953Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f86ccf12d24099357e8295"
    text: {@raton3062015 Block is a universal container (can contain anything), vector can only contain a limited number of types (mostly numbers) and all values in a given vector must be of same type. Basically, vector is close to number arrays in most other languages. Last but not least, vector optimizes the storage space, while each block value takes 128-bit.}
    sent: "2017-04-20T08:09:51.034Z"
    editedAt: "2017-04-20T08:13:13.826Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f86c94c1d3b501540129bf"
    text: {@raton3062015 ^/```^/>> type? make vector! [1 2]^/== vector!^/>> type? make block! [1 2]^/== block!^/```}
    sent: "2017-04-20T08:08:52.213Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f86c0ac1d3b501540124a1"
    text: {difference between make block! [1 2] and make vector! [1 2]}
    sent: "2017-04-20T08:06:34.238Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f86abe12d24099357e77ac"
    text: "is it possible to save  json format"
    sent: "2017-04-20T08:01:02.539Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f86a9dcfec919272589af9"
    text: "save/as %a.HTML { <p>raton</>} `html"
    sent: "2017-04-20T08:00:29.413Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f86598cfec919272588191"
    text: {I like the Doc's idea. Relatively easy to achieve, straightforward, and will surely help in the end ...}
    sent: "2017-04-20T07:39:04.641Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f862e612d24099357e5697"
    text: {@maximvl Sure, just use the block of data I posted above. A tool doing internal inspection should be type-aware, so harcoding those data in such tool would be fine. We can add it to the system object anyway (adding some docstrings to it, so `help` could use it).}
    sent: "2017-04-20T07:27:34.329Z"
    editedAt: "2017-04-20T07:32:25.591Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8621acfec919272587307"
    text: {@dockimbel I would also like to have tools which can inspect "hidden" fields like "alpha" in image:^/```^/>> i: make image! 2x2^/== make image! [2x2 #{FFFFFFFFFFFFFFFFFFFFFFFF}]^/>> i/alpha^/== #{00000000}^/```^/}
    sent: "2017-04-20T07:24:10.801Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f86174d32c6f2f092233ba"
    text: {And of course also `src/(to integer! #{deadbeef})` :)}
    sent: "2017-04-20T07:21:24.639Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f8614a3e27cac331a6da21"
    text: {@maximvl That's doable from the console input line, but not from a code editor (at least not from a text editor, but doable from a "live" editor).}
    sent: "2017-04-20T07:20:42.055Z"
    editedAt: "2017-04-20T07:22:45.173Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8612a3e27cac331a6d9a0"
    text: "or^/`i: to-integer #{deadbeef} src/:i`"
    sent: "2017-04-20T07:20:10.312Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f860c2f22385553d5af190"
    text: "now it works on objects only"
    sent: "2017-04-20T07:18:26.215Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f860963e27cac331a6d711"
    text: {@dockimbel I would like to have autocompletion work with these fields, for example}
    sent: "2017-04-20T07:17:42.487Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f86081d32c6f2f09222f5b"
    text: "`pick src to-integer #{deadbeef}`"
    sent: "2017-04-20T07:17:21.081Z"
    editedAt: "2017-04-20T07:17:24.234Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8605e8fcce56b201bfdac"
    text: "because it ain't works :("
    sent: "2017-04-20T07:16:46.988Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f8604bf22385553d5aef91"
    text: {suppose I want to get byte from `0xdeadbeef` offset ,`src/(#16{deadbeef})` is a vaild way to do so?}
    sent: "2017-04-20T07:16:27.154Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f860433e27cac331a6d64c"
    text: {@9214 All series actions apply to `binary!` series, you can even use Parse on it.}
    sent: "2017-04-20T07:16:19.715Z"
    editedAt: "2017-04-20T07:16:33.516Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f8600b08c00c092a9a18e1"
    text: {@maximvl `words-of` purpose is to list words from a context. You should make a practical case for what you're asking for, because, besides for quick help support, I can hardly see any use-case for it. I don't remember anyone ever asking for such feature in Rebol community (others can correct me if that happened). I never needed it either (except for quick `help` support). You can already have it if you need it:^/```lisp^/refinements: [^/    pair! [x y]^/    email! [user host]^/    time! [hour minute second]^/    image! [size argb rgb alpha]^/]^/```^/It should be all we have now.}
    sent: "2017-04-20T07:15:23.880Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f85fd0881b89e1016a1379"
    text: {The thing is: I want to read binary data, find  bytes on specific offsets and decode them. `read`ed binary is just a series, so I can manipulate them with path notation?}
    sent: "2017-04-20T07:14:24.342Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f85de1d32c6f2f0922260b"
    text: "@dockimbel everything clicked, ty :smile: "
    sent: "2017-04-20T07:06:08.980Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f85dbfa0e4856242201a54"
    text: {@9214 `to-binary` on a `string!` produces a UTF-8 encoded version of it, which is the format expected by `load` for Red files.}
    sent: "2017-04-20T07:05:35.209Z"
    editedAt: "2017-04-20T07:05:45.338Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f85d8dcfec919272585e72"
    text: {@9214 `load` is higher-level than `read`, it will attempt to decode the binary data using one of the built-in codecs, like image formats.`save` / `write` are the opposite functions.}
    sent: "2017-04-20T07:04:45.225Z"
    editedAt: "2017-04-20T07:06:23.889Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f85d678fcce56b201bf3c1"
    text: {@9214 this is for loading red data saved in binary format:^/```^/>> b: to-binary "[a b c]"^/== #{5B61206220635D}^/>> load b^/== [a b c]^/```}
    sent: "2017-04-20T07:04:07.905Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f85d10f22385553d5ae269"
    text: {@dockimbel as long as it is accessible with something like `words-of` I'm for it}
    sent: "2017-04-20T07:02:40.303Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f85ce88fcce56b201bf151"
    text: {@maximvl Maybe you missed the last sentence of my post:^/> A simple list somewhere in the system object could suffice.}
    sent: "2017-04-20T07:02:00.644Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f85cd3ad849bcf42a03cb9"
    text: "ah, `read`, thanks!"
    sent: "2017-04-20T07:01:39.289Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f85ccd8bb56c2d11c554aa"
    text: {`load` can accept `binary!` datatype, I'm not sure what that means}
    sent: "2017-04-20T07:01:33.797Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f85cc9881b89e1016a071e"
    text: "you can't `load` it, you can `read` it"
    sent: "2017-04-20T07:01:29.193Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f85cbccfec919272585bca"
    text: "@9214 `read/binary`"
    sent: "2017-04-20T07:01:16.859Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f85ca3881b89e1016a06bd"
    text: "well, ok, then how can I load binary file?"
    sent: "2017-04-20T07:00:51.804Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f85c62d32c6f2f09221ff7"
    text: "@9214 this is not related"
    sent: "2017-04-20T06:59:46.271Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f85c118bb56c2d11c55187"
    text: "so I should go down to R/S?"
    sent: "2017-04-20T06:58:25.178Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f85b9fcfec9192725856bf"
    text: {@9214 `load` only loads strings/files with Red syntax}
    sent: "2017-04-20T06:56:31.494Z"
    editedAt: "2017-04-20T06:56:57.713Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f85b7e881b89e1016a01d5"
    text: {Is it possible to `load` binary file in Red? I've tried and got `Access error: invalid UTF-8 encoding` error :confused: }
    sent: "2017-04-20T06:55:58.440Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f85b68cfec9192725855e3"
    text: {because this is much more convenient and gives you so much power that any "optimization" of not having this information is just nothing comparing to what it gives a programmer}
    sent: "2017-04-20T06:55:36.386Z"
    editedAt: "2017-04-20T06:56:03.358Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f858d0ad849bcf42a02b7d"
    text: {and we already have `words-of` which is perfectly fits this use case}
    sent: "2017-04-20T06:44:32.036Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f858848bb56c2d11c5418d"
    text: {it ended up with people adding custom compiler macros to provide these (constant) fields names for runtime}
    sent: "2017-04-20T06:43:16.060Z"
    editedAt: "2017-04-20T06:43:37.341Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f8586908c00c092a99fe14"
    text: {in Erlang one of the biggest issues of type system was that the only custom `record` datatype only had field's names in compilation time, thus you couldn't inspect these objects, you couldn't create them dynamically and so on}
    sent: "2017-04-20T06:42:49.926Z"
    editedAt: "2017-04-20T06:45:35.155Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f8581cbdf4acc112783d33"
    text: {@dockimbel I don't get this logic, ok, I will always get the same result for given datatype, so what? I still want to have this information in runtime, I know I will need it, I will use it}
    sent: "2017-04-20T06:41:32.248Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f828dca0e48562421f5910"
    text: {@maximvl ^/> We should support reflection on builtin types as well, I proposed this couple times :grinning:^/^/Reflection is helpful for accessing information only available at runtime, or which might change. Datatype accessors are fixed, you will *always* get the same result from a given datatype, so that would not qualify for support by reflection. A simple list somewhere in the system object could suffice.}
    sent: "2017-04-20T03:19:56.345Z"
    editedAt: "2017-04-20T03:22:42.382Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f7dffaa0e48562421e5e7f"
    text: "Thank you"
    sent: "2017-04-19T22:08:58.502Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7df98ad849bcf429e79cc"
    text: {and http://static.red-lang.org/red-system-specs.html#section-15}
    sent: "2017-04-19T22:07:20.465Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7df538fcce56b201a4a9b"
    text: {See http://static.red-lang.org/red-system-specs.html#section-6.3.2}
    sent: "2017-04-19T22:06:11.864Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7de1a8bb56c2d11c3a994"
    text: "Are there any good examples on how to do that?"
    sent: "2017-04-19T22:00:58.403Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7de058fcce56b201a45b1"
    text: {You can use C libraries from Red/System for example.}
    sent: "2017-04-19T22:00:37.920Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7ddb1881b89e101684165"
    text: "Is there any interop between Red/System and C ?"
    sent: "2017-04-19T21:59:13.206Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7dcb6d32c6f2f09204d50"
    text: "@greggirwin right, my fault."
    sent: "2017-04-19T21:55:02.922Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58f7dca0f22385553d591cae"
    text: {Actually, it compiles to machine language directly. No assembler required.}
    sent: "2017-04-19T21:54:40.711Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7dc9908c00c092a9858eb"
    text: {Red/System is C-level language and Red is high level language written in Red/System.}
    sent: "2017-04-19T21:54:33.037Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7dc69bdf4acc11276872c"
    text: "okay"
    sent: "2017-04-19T21:53:45.171Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7dc65a0e48562421e502c"
    text: {It compiles to assembler so it is inherently low level.}
    sent: "2017-04-19T21:53:41.810Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7dc413e27cac331a50d05"
    text: {Red/System compiles to assembler. Current compiler is written in Rebol, yes.}
    sent: "2017-04-19T21:53:05.290Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7dc2a881b89e101683c65"
    text: "Rebol?"
    sent: "2017-04-19T21:52:42.908Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7dc19cfec919272569fcc"
    text: "Okay,  so what is Red/System written in?"
    sent: "2017-04-19T21:52:25.612Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7dc0abdf4acc112768511"
    text: "Ah"
    sent: "2017-04-19T21:52:10.650Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7dbf43e27cac331a50b91"
    text: {runtime is `libRed`, it is what helps to run your scripts.}
    sent: "2017-04-19T21:51:48.603Z"
    editedAt: "2017-04-19T21:52:02.845Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7dbb9ad849bcf429e6c56"
    text: "help me understand what the runtime really is"
    sent: "2017-04-19T21:50:49.320Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7dbad881b89e101683a3e"
    text: {.exe is compiled program that includes runtime, when the source is Red.}
    sent: "2017-04-19T21:50:37.887Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7db6ed32c6f2f09204674"
    text: "No, runtime is not .exe"
    sent: "2017-04-19T21:49:34.049Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7db4da0e48562421e4c6f"
    text: {Mostly in Red/System and the rest is written in Red.}
    sent: "2017-04-19T21:49:01.474Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f7db3b8e4b63533de52da6"
    text: {And by runtime we mean the .exe for windows users?}
    sent: "2017-04-19T21:48:43.068Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7db24cfec919272569c67"
    text: {So, currently the Red runtime is written in Red/system  mostly?}
    sent: "2017-04-19T21:48:20.339Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7dadda0e48562421e4ad0"
    text: {I have some beginner questions about the roadmap and interop between red and red/system.}
    sent: "2017-04-19T21:47:09.390Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7c97f8e4b63533de4dfa7"
    text: {Years ago I used special inline comments too...  here is how looks [the source](http://rebol.desajn.net/rswf/swf-tag-rules_enczes.rb) when [converted to html](http://rebol.desajn.net/rswf/)}
    sent: "2017-04-19T20:33:03.521Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7c4598e4b63533de4cb1c"
    text: {Because `parse` isn't used there, and Red/System doesn't have all the datatypes Red does.}
    sent: "2017-04-19T20:11:05.877Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7c352f22385553d58ac80"
    text: "@greggirwin why?"
    sent: "2017-04-19T20:06:42.930Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7bf26cfec919272562410"
    text: {*Excellent* point Rudolf. "Dialects" built in Red/System can't be doc'd the same way as parse-based things we build in Red.}
    sent: "2017-04-19T19:48:54.042Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7babd3e27cac331a47a8c"
    text: {The func involved in the `make`dialects is `make`, and that is applicable to ALL types...}
    sent: "2017-04-19T19:30:05.730Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58f7b91a881b89e10167a523"
    text: {`Usage`. It could work like `help` providing base info if there's no arg, or probing available info for a type or arg. To start with, we just build the info directly into the func to experiment.}
    sent: "2017-04-19T19:23:06.587Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7b57ea0e48562421da8a7"
    text: {`help bitset!` shows help on the datatype, can also mention or include help on related dialect}
    sent: "2017-04-19T19:07:42.163Z"
    editedAt: "2017-04-19T19:07:50.225Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7b54c8e4b63533de481bb"
    text: {I would prefer just `help bitset!` for above. Or `help/dialect`  without argument would have to display all possible dialect values.}
    sent: "2017-04-19T19:06:52.292Z"
    editedAt: "2017-04-19T19:07:12.412Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7b379a0e48562421d9ec0"
    text: {@meijeru ^/>parts of make bitset! <spec>, make vector! <spec> etc. would be quite difficult to organize.^/^/I actually would like them to be made as "normal" dialects as well, so they would also have similar interface, and help can be as simple as `help/dialect bitset!` returning the description}
    sent: "2017-04-19T18:59:05.179Z"
    editedAt: "2017-04-19T19:00:16.594Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7b2548fcce56b201988fe"
    text: {@pekr ^/>Now having a time- how do I know about all those refinements I can use on it?^/^/We should support reflection on builtin types as well, I proposed this couple times :)}
    sent: "2017-04-19T18:54:12.986Z"
    editedAt: "2017-04-19T18:54:58.555Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7ae0b8fcce56b201975c9"
    text: "@geekyi  :smile:  "
    sent: "2017-04-19T18:35:55.254Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f7a7e7d32c6f2f091f6372"
    text: "Comments lie"
    sent: "2017-04-19T18:09:43.952Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f79b593e27cac331a3e661"
    text: {@AlexanderBaggett I think we all missed that you can't get `help` on vid 😉 }
    sent: "2017-04-19T17:16:09.727Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f797a18e4b63533de3ec69"
    text: {We could move this chat to red/docs if it's going to continue.}
    sent: "2017-04-19T17:00:17.686Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f79727a0e48562421d1eb4"
    text: {In some of my work, I've started including an `e.g.` alias for `comment`. I can then put `e.g. [ ... ]` as commentary, and also making it clear that it's example information, like how to use a function. We can easily do this kind of thing, to create the help/doc dialect. Aliasing to `comment/noop` when compiling could then exclude those bits, while another func might collect them into an internal resource section in the EXE for later use by `help`.}
    sent: "2017-04-19T16:58:15.979Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f7954c881b89e10166fd46"
    text: {Another way we can approach it is with tools. Executable documents that target one dialect or area. The old *-lab tool idea, and others. Old Rebolers will remember EasyVID and EasyDraw.^/^/Then help just needs a way to identify what tools are available, and where they can be accessed if not already installed locally. ^/^/We can argue that putting help info in the code is best, but it's not always. It doesn't guarantee it will be kept up to date, and sometimes the best person to write docs is not the person who writes the best code. }
    sent: "2017-04-19T16:50:20.384Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f794678fcce56b2018fe18"
    text: {Back on help, I've brought up the possibility of special sigil types (more types, I know) for documenation purposes. The tradeoff is that the more we include doc info directly, contextually, in place with what it docs, the more the code grows. So we need a way to exclude it. It may also obscure the code, and be best put elsewhere. And while it sounds great to have a standardized format for it, that may be difficult. }
    sent: "2017-04-19T16:46:31.852Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f793488e4b63533de3d74e"
    text: {Metadata is data about data. Metacognition is thinking about thinking. Metarules would be rules about rules. Just a simple view, that a metarule can't exist without a rule it affects.}
    sent: "2017-04-19T16:41:44.370Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f79302d32c6f2f091efcf6"
    text: {Formatting is tricky to normalize, because, as others have said, there is no single structure dialects will follow. In VID alone we have keywords, styles, facets, actors, and reactivity.}
    sent: "2017-04-19T16:40:34.723Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f792dbad849bcf429d1cc8"
    text: {@greggirwin Most rules can be nested, some cannot, so I would rather call them simply "top rules". "Meta" implies a higher abstraction level to me (though, maybe I'm not aware of a more common usage of that word).}
    sent: "2017-04-19T16:39:55.468Z"
    editedAt: "2017-04-19T16:40:30.099Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f792398e4b63533de3d113"
    text: {:point_up: [April 19, 2017 9:25 AM](https://gitter.im/red/red/welcome?at=58f7814f8e4b63533de37a27) Multiple dialects in a file will depend on organization. For example, `format` will have both short form and masks for formatting. Both like dialects. Does that mean we have to split the files up to satisfy the doc tool?}
    sent: "2017-04-19T16:37:13.425Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f790daf22385553d57ba59"
    text: {@dockimbel  :point_up: [April 18, 2017 11:09 PM](https://gitter.im/red/red/welcome?at=58f6f0f5d32c6f2f091c3b5f), I'm tempted to say we could describe some keywords as meta-rules. }
    sent: "2017-04-19T16:31:22.982Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f78c113e27cac331a3984f"
    text: {I can think about having those available in terms of `help date!`}
    sent: "2017-04-19T16:10:57.758Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f78beaad849bcf429cf9d8"
    text: {Even the help for simple "dialects" that are found in the `<spec>` parts of `make bitset! <spec>`, `make vector! <spec>` etc. would be quite difficult to organize. Though these intrinsic parts of Red belong perhaps in the "official" description which is no doubt off-line.}
    sent: "2017-04-19T16:10:18.615Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58f78bdabdf4acc112750520"
    text: {e.g. `time: now`(in R2, as not working in Red yet). Now having a `time`- how do I know about all those refinements I can use on it?}
    sent: "2017-04-19T16:10:02.489Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f78baad32c6f2f091ed7ab"
    text: {The other part of the language, and sorry for possibly incorrect classification, which are a bit troublesome, are a "hidden properties" (just my term).}
    sent: "2017-04-19T16:09:14.509Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f78b6dcfec919272552c3a"
    text: {The trouble imo is not to extend a help system, but to envision, how various dialects (which can be pretty much just anything) should self-document .... we would have to create some agreed upon mechanism, to which dialect authors would have to adhere. Not sure it is easily achievable ....}
    sent: "2017-04-19T16:08:13.304Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f78b11d32c6f2f091ed4db"
    text: {For quite some time, well maybe ever since VID appeared, we were all thinking about how to get dialects documented. In the past, I proposed an extension of `help`function, e.g. something like `help/dialect`, `help/custom`or some such extension ... so it could look like `help/custom vid button`}
    sent: "2017-04-19T16:06:41.002Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f78a9ebdf4acc11274ffda"
    text: {Sorry for joining the discussion late, hopefully will not create more confusion than adding to the discussion anything valuable :-)}
    sent: "2017-04-19T16:04:46.396Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58f7847f3e27cac331a3691e"
    text: "let it return a free text and that's it"
    sent: "2017-04-19T15:38:39.903Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f784338fcce56b2018a707"
    text: {@9214 Altme synchronize whenever you log in. Which was btw causing long initial startups and creation of new words when they started to be huge.}
    sent: "2017-04-19T15:37:23.438Z"
    editedAt: "2017-04-19T15:38:18.278Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f783c48e4b63533de3859b"
    text: "As I said.. it is the hardest part of it:)"
    sent: "2017-04-19T15:35:32.399Z"
    editedAt: "2017-04-19T15:36:18.710Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f783a0d32c6f2f091eac6b"
    text: {I'm trying to come up with a format for specifying a helping system for dialects, it's far from trivial, as, e.g., the syntax for keywords in different dialects can vary a lot, so coming up with a summary line, with common rules, like you have in `help` is actually pretty hard.}
    sent: "2017-04-19T15:34:56.818Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f783948e4b63533de38457"
    text: {I think Altme used something similar, some kind of offline database for each world, every user has his own copy an can synchronize it whenever he prefer, am I right?}
    sent: "2017-04-19T15:34:44.936Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58f7837da0e48562421cc049"
    text: {It could... if the url would be in form like: https://github.com/red/help/vid}
    sent: "2017-04-19T15:34:21.025Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7831e881b89e10166a5e0"
    text: "url inside header doesn't solve this problem IMO"
    sent: "2017-04-19T15:32:46.244Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f782e43e27cac331a35fb2"
    text: "Agree."
    sent: "2017-04-19T15:31:48.285Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f782d98e4b63533de38130"
    text: {anyway, we need unified, offline and modular documentation system for all kinds of things}
    sent: "2017-04-19T15:31:37.127Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f7829ad32c6f2f091ea5e4"
    text: {It is just a way how to get the help out of the rest for the compiler.}
    sent: "2017-04-19T15:30:34.196Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7828a8bb56c2d11c20153"
    text: {Just to make sure... the header does not have to hold data.. you can use file or url like in the example above.}
    sent: "2017-04-19T15:30:18.162Z"
    editedAt: "2017-04-19T15:31:05.397Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f78262881b89e10166a2bd"
    text: {file's header is something static, I can't program it}
    sent: "2017-04-19T15:29:38.265Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7825fcfec91927254fa33"
    text: {I don't like header idea either, this way metainfirmation about program will be bigger than actual program}
    sent: "2017-04-19T15:29:35.876Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f7825308c00c092a96aaca"
    text: {As a _serious_ dialect I consider [`VID`](https://github.com/red/red/tree/master/modules/view) or for example my [_Bass_ binding](https://github.com/red/code/blob/master/Library/Bass/bass.red)}
    sent: "2017-04-19T15:29:23.302Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f782438fcce56b20189c8b"
    text: {@Oldes let's say I'll go full meta and write one file which generates several ports, for example for different SQL dialects/dbs}
    sent: "2017-04-19T15:29:07.848Z"
    editedAt: "2017-04-19T15:29:18.182Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f782068fcce56b20189a77"
    text: {Also we should not limit only on dialects... there will be ports soon and you will be in the same situation.}
    sent: "2017-04-19T15:28:06.769Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7820508c00c092a96a98b"
    text: {how is writing something in header different from calling a callback which can be placed anywhere in the code?}
    sent: "2017-04-19T15:28:05.436Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f781d7ad849bcf429cc513"
    text: {Also we should not limit only on dialects... there will be ports soon and you will be in the same situation.}
    sent: "2017-04-19T15:27:19.098Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7819608c00c092a96a76a"
    text: {you see, now you define a "serious" dialect based on how it is spread in files}
    sent: "2017-04-19T15:26:14.530Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7817af22385553d5768ee"
    text: {I know you can do it... but it is not serious dialect than.}
    sent: "2017-04-19T15:25:46.682Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f781678bb56c2d11c1fb81"
    text: ":-)"
    sent: "2017-04-19T15:25:27.237Z"
    editedAt: "2017-04-19T15:25:50.488Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f7815c8e4b63533de37a60"
    text: "oh, I will do it just to prove you are wrong xD"
    sent: "2017-04-19T15:25:16.588Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7814f8e4b63533de37a27"
    text: {I don't think you will have multiple dialects in one file:)}
    sent: "2017-04-19T15:25:03.416Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f7814bf22385553d5767f5"
    text: "what if files will not exist in the future? :D"
    sent: "2017-04-19T15:24:59.595Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f78134d32c6f2f091e9df6"
    text: "what if you have several files for your dialect?"
    sent: "2017-04-19T15:24:36.557Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f7812b8e4b63533de37942"
    text: "what if you have several dialects in one file?"
    sent: "2017-04-19T15:24:27.802Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f78116f22385553d5766c8"
    text: {```^/Red [^/^-title: "My first dialect"^/^-name: 'something^/^-type: 'dialect^/^-help: http://somwhere/help  ^/]^/```}
    sent: "2017-04-19T15:24:06.886Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f780f9881b89e101669a37"
    text: {@Oldes I don't like this idea, it tires together code and files}
    sent: "2017-04-19T15:23:37.793Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f78033d32c6f2f091e987c"
    text: "some kind of internal offline DB"
    sent: "2017-04-19T15:20:19.790Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f780213e27cac331a34f2c"
    text: {It could just be a field in a script's header which could be included or ignored by compiler.}
    sent: "2017-04-19T15:20:01.312Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f77ff0881b89e1016692fa"
    text: {to keep red toolchain lightweight this documentation should be optional and modular, that's what I wanted to say}
    sent: "2017-04-19T15:19:12.907Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77fda881b89e10166927a"
    text: {I really like the format `?` spits out.  It's very helpful. }
    sent: "2017-04-19T15:18:50.630Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f77fbcd32c6f2f091e9554"
    text: {The hard part is to define the format which should be used. Probably which could be reused to create documentation in a HTML for as well.}
    sent: "2017-04-19T15:18:20.359Z"
    editedAt: "2017-04-19T15:18:57.445Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f77f94f22385553d575e02"
    text: {Ah, sure, though modules would be overkill, a simple object is enough.}
    sent: "2017-04-19T15:17:40.415Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f77f768e4b63533de36c3d"
    text: "the ones which are planned for 1.0, no?"
    sent: "2017-04-19T15:17:10.433Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77f5908c00c092a969ac9"
    text: "Which modules? "
    sent: "2017-04-19T15:16:41.263Z"
    editedAt: "2017-04-19T15:17:17.990Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f77f4cf22385553d575ca4"
    text: {store dialect inside modules with additional information and docs which you optionally can through}
    sent: "2017-04-19T15:16:28.166Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77ea4cfec91927254e409"
    text: {I think we can add a list of the keywords/commands for each dialect with a minimal description of their purpose and syntax. Though, we need a way to leave it out of the runtime library when compiling apps which are not the Red console, so it probably should be pulled by the console's code from somewhere in the codebase.}
    sent: "2017-04-19T15:13:40.142Z"
    editedAt: "2017-04-19T15:14:00.244Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f77e6ea0e48562421ca5a2"
    text: "that's what I think too"
    sent: "2017-04-19T15:12:46.202Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77e458e4b63533de36592"
    text: "It should be addressed with modules imho."
    sent: "2017-04-19T15:12:05.957Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f77e20d32c6f2f091e8e5f"
    text: "This is an interesting issue you've raised up"
    sent: "2017-04-19T15:11:28.291Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77dfc8fcce56b2018869a"
    text: {Anyway.. it should be made in a systematic way as there will be many dialects. }
    sent: "2017-04-19T15:10:52.523Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f77df3cfec91927254e07c"
    text: ":+1: "
    sent: "2017-04-19T15:10:43.955Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77de5f22385553d575595"
    text: "That is my opinion anyway."
    sent: "2017-04-19T15:10:29.650Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f77de58fcce56b20188676"
    text: "@maximvl agrees"
    status: true
    sent: "2017-04-19T15:10:29.145Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f77dd4f22385553d575558"
    text: {Anyway,  I like the idea of using `?` to find out what we need to.  I like the idea of not having to leave the red REPL to find out stuff. It makes the experience more immersive and enjoyable. }
    sent: "2017-04-19T15:10:12.583Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f77db28bb56c2d11c1e528"
    text: {Of course in the `view`'s doc string there may be mentioned a command which could be used for the `vid` help.}
    sent: "2017-04-19T15:09:38.317Z"
    editedAt: "2017-04-19T15:09:56.241Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f77d98ad849bcf429caa50"
    text: "spec-of vid/X ?"
    sent: "2017-04-19T15:09:12.426Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f77d858fcce56b201884ad"
    text: {But `view` has nothing to do with the `vid` dialect.. it is the `layout` which is using the dialects and converts it into structure which `view` may use.}
    sent: "2017-04-19T15:08:53.202Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f77d7b08c00c092a968f70"
    text: {idk how we gonna get help about `help` dialect itself}
    sent: "2017-04-19T15:08:43.258Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77d3bd32c6f2f091e8944"
    text: "lol"
    sent: "2017-04-19T15:07:39.197Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f77d39ad849bcf429ca7e7"
    text: {Could we do something where I could  type `view/? base` and get some info on base as an example?  Or `Vid/?  X ` and get info on X }
    sent: "2017-04-19T15:07:37.301Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f77d2e08c00c092a968dea"
    text: "in other words we need `help`dialect :D"
    sent: "2017-04-19T15:07:26.709Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77ccabdf4acc11274aff5"
    text: {I guess it can be redirected to something like `view/help 'base`}
    sent: "2017-04-19T15:05:46.584Z"
    editedAt: "2017-04-19T15:05:54.139Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f77c9ba0e48562421c9c4f"
    text: {@AlexanderBaggett `?` is a shorcut for `help` which provides help for words defined in the Red global (or local) context(s). Dialect words are not defined there, nor do they share the same concepts as the main language. Most dialects rely on keywords or commands, not words concept like in the main language. So the same helping system cannot be used (the format of the output would be totally different anyway).}
    sent: "2017-04-19T15:04:59.126Z"
    editedAt: "2017-04-19T15:05:34.543Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58f77c903e27cac331a33c5c"
    text: {can dialect possibly be wrapped inside of a module?}
    sent: "2017-04-19T15:04:48.219Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77c843e27cac331a33c45"
    text: "something like `help/dialect base view` ?"
    sent: "2017-04-19T15:04:36.534Z"
    editedAt: "2017-04-19T15:04:56.757Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f77c31ad849bcf429ca2c7"
    text: {I was thinking about special help function defined in the dialect context where the main help could redirect reqests. }
    sent: "2017-04-19T15:03:13.265Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f77c17881b89e101667e7b"
    text: ";"
    sent: "2017-04-19T15:02:47.699Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77becf22385553d574ba2"
    text: {We don't have yet a mechanism for providing a minimal doc about dialects.}
    sent: "2017-04-19T15:02:04.918Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f77be7d32c6f2f091e8284"
    text: {Right... there should be some help available for dialects.. do you have any idea how it should work?}
    sent: "2017-04-19T15:01:59.838Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58f77bd2cfec91927254d40b"
    text: {Also, the way things are documented on https://doc.red-lang.org/en/view.html  is a different format than what you get it if you did `?` on something.}
    sent: "2017-04-19T15:01:38.464Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f77b92881b89e101667bc8"
    text: {I hear what you are saying, however there should be a way to pull up some kind of help on them without going to the web.}
    sent: "2017-04-19T15:00:34.781Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f77b4fad849bcf429c9e6f"
    text: {@AlexanderBaggett Dialect are like sub-languages, so their words have no meaning (or a different meaning) in the main language.}
    sent: "2017-04-19T14:59:27.635Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f77b26881b89e1016679b6"
    text: {@AlexanderBaggett you can find it here :D https://doc.red-lang.org/en/view.html}
    sent: "2017-04-19T14:58:46.430Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f77b0f8bb56c2d11c1d365"
    text: "aside from external documentation"
    sent: "2017-04-19T14:58:23.816Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77b0508c00c092a968553"
    text: {@maximvl ^/> because base only belongs to view dialect^/^/VID is the dialect, View is the GUI engine (working with faces).}
    sent: "2017-04-19T14:58:13.116Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f77af43e27cac331a33403"
    text: "hm, and how are we supposed to document DSLs?"
    sent: "2017-04-19T14:57:56.205Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f77aecad849bcf429c9c89"
    text: "That makes it harder to learn..."
    sent: "2017-04-19T14:57:48.470Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f77acc8fcce56b201876ce"
    text: {@AlexanderBaggett if `view` would have it's own `help`/`?` it could have contained explanation}
    sent: "2017-04-19T14:57:16.528Z"
    editedAt: "2017-04-19T14:57:31.884Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f77aa6881b89e1016677c5"
    text: "unfortunately nope"
    sent: "2017-04-19T14:56:38.764Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f77a9a3e27cac331a331d6"
    text: "So I can't do `?` and find info on it?"
    sent: "2017-04-19T14:56:26.713Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f77a8b8bb56c2d11c1d057"
    text: "it is not normal Red entity"
    sent: "2017-04-19T14:56:11.683Z"
    editedAt: "2017-04-19T14:56:17.672Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f77a8008c00c092a96835b"
    text: {@AlexanderBaggett because `base` only belongs to `view` dialect}
    sent: "2017-04-19T14:56:00.567Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f77a6a3e27cac331a330b6"
    text: "Red^/"
    sent: "2017-04-19T14:55:38.079Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f77a6108c00c092a96825f"
    text: "is this Red or Rebol code?"
    sent: "2017-04-19T14:55:29.083Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f779e9cfec91927254cb21"
    text: {` view [title "hi" size 600x600 base 500x500 red]` ^/`? base`  `Word base is not defined `   What is `base` in this context?  It doesn't appear to be part of view either as I did `? view` and didn't see it there either.}
    sent: "2017-04-19T14:53:29.110Z"
    editedAt: "2017-04-19T14:55:14.292Z"
    v: 5
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f6f45fad849bcf429a58ed"
    text: "@dockimbel  Thanks alot"
    sent: "2017-04-19T05:23:43.470Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f6f1b469a692963ec3ce1a"
    text: {`some` evaluates the sub-rule (could be a block of rules or any other valid rule) iteratively, until the sub-rule fails. In the above case, `| skip` ensures that the sub-rule does not fail until the end of the input is reached.}
    sent: "2017-04-19T05:12:20.524Z"
    editedAt: "2017-04-19T05:12:43.881Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f6f0f5d32c6f2f091c3b5f"
    text: {@michaeldesu ^/> So am I right in that the system kinda works from the "inside out"...^/^/That's a way to express it. Rules are stacked in Parse, so if a nested rule fails, the action of the parent rule(s) will not be carried on.^/}
    sent: "2017-04-19T05:09:09.511Z"
    editedAt: "2017-04-19T05:09:24.109Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f6d86308c00c092a93ec39"
    text: {thanks for your kind explanation - it's great. I've seen that doc, and it's very good. Generally, I found the transition from `date` to `copy d date` a bit strange, since I consider the initial `date` as the rule, and the `copy d date` as a complete set of instructions about the  rule, i.e. copy into d the (just matched) rule (date) and that whole instruction replaces the original one (single rule). It might have been more intuitive like the `to` example above (`parse "abc12slkdfjkdl1245" [to 2 digits copy x 2 digits]`) where the search rule is achieved first, then the next step is the action as a result (i.e. copy). I realise this is not a Red matter per-se, it's just the parse design (and my lack of understanding :-)). I guess the way `some` works as an iterator is a bit lost on me, compared to the way `to` works, which is clear (advance the input) - but I think  I get it now: in this case `some` is just a test of the block contents, and skip is doing the input movement upon match failure.}
    sent: "2017-04-19T03:24:19.773Z"
    editedAt: "2017-04-19T03:24:51.345Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f6c766f22385553d546e77"
    text: {i.e. "Copy from <here> to the end of <rule>"}
    sent: "2017-04-19T02:11:50.800Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f6c737d32c6f2f091bb885"
    text: {You can think of `keep/copy` kind of like "start copying at this point in the input until the end of the following rule. If the rule fails, don't complete the copy operation."}
    sent: "2017-04-19T02:11:03.159Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f6c6ba8fcce56b2015b374"
    text: {I haven't examined the `parse` source, so can't say with authority how it works internally. http://www.red-lang.org/2013/11/041-introducing-parse.html nicely puts the commands in sections, with their purpose. It's a bit tricky because you put parens *after* the match has succeeded, but the extraction rules come *before*, still only triggering if the rule succeeds.}
    sent: "2017-04-19T02:08:58.033Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f6c5d9ad849bcf4299c7e7"
    text: {Thanks alot @greggirwin . I admit to struggling a bit with `copy d date` as the replacement for just `date`. So am I right in that the system kinda works from the "inside out", in that parse is doing the `some [date | skip]` with the extra items like `copy d` (and even `keep`) are modifiers that add extra functions like the copy & keep etc?}
    sent: "2017-04-19T02:05:13.331Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f6c44469a692963ec33be1"
    text: {`to end` is handy when you are looking for things in data, and once you find them you're done and can skip to the end. That way you still get a `true` result.}
    sent: "2017-04-19T01:58:28.575Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f6c3e1f22385553d546170"
    text: {Since you have `| skip` you don't need `to end`. It will just get there one item at a time.^/^/Here it is using parse's `collect`.^/```^/parse "welcome 12/01/17 how are 13/01/17 you" [^/    collect some [keep copy d date | skip]^/]^/```}
    sent: "2017-04-19T01:56:49.553Z"
    editedAt: "2017-04-19T01:59:00.749Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f6c227881b89e101639bdc"
    text: {I have another parse question - I've figured out how to collect all required items using:^/```^/digit: charset "0123456789"^/date: [2 digit "/" 2 digit "/" 2 digit]^/parse "welcome 12/01/17 how are 13/01/17 you" [(found: []) some [copy d date (append found d) | skip] to end] ^/```^/is there a better, clearer or more intuitive way to do this? e.g. with collect or other? Also I believe 'to end' is optional in this case, but is there any good reason to keep it? Thanks.}
    sent: "2017-04-19T01:49:27.096Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f5868708c00c092a8e77eb"
    text: {@michaeldesu We will have it in the future, but not before 0.7.0.}
    sent: "2017-04-18T03:22:47.936Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f5738a881b89e1015e4520"
    text: {At least a few of us want that as a native element, but it won't be standard soon, unless someone takes it on personally. I think they'd like it in Red, but it's not a priority for the core team to work on.}
    sent: "2017-04-18T02:01:46.546Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f564ef08c00c092a8e11de"
    text: {does Red have (or likely to have) native Zip file (decompress/compress) support? I did find some r code on the Rebol site for extracting files from zip so I can look at that if need be (just thought I'd check here first). Thanks.}
    sent: "2017-04-18T00:59:27.613Z"
    editedAt: "2017-04-18T01:00:19.887Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f54977ad849bcf4293be39"
    text: {@AlexanderBaggett you can check out the way I draw on image here: https://gist.github.com/maximvl/12d7f153c3479a54044f45cd8a5ace47}
    sent: "2017-04-17T23:02:15.552Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f5216ba0e485624212fdcb"
    text: {I'm already impressed at how easy it is to create a GUI. I've created a test app with a GUI the same as an app I wrote in another language and although it's not quite identical (whilst I mess about with the properties of faces) it's certainly a lots smaller.}
    sent: "2017-04-17T20:11:23.048Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58f520f8f22385553d4dc9a1"
    text: {There are a lot of features, and things are different enough from other langs that it can take some getting used to. Eventually you'll expect *everything* to take minimal effort and code, and complain when it takes a dozen lines to connect a few things via dynamic reactors. :^^)}
    sent: "2017-04-17T20:09:28.922Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f5204ef22385553d4dc5a5"
    text: "That's a good way to start."
    sent: "2017-04-17T20:06:38.039Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f5202fd32c6f2f09153197"
    text: {I've not got to Draw yet... :) Still messing about with the normal GUI components at the moment.}
    sent: "2017-04-17T20:06:07.092Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58f51f0808c00c092a8cf09d"
    text: {That just sets the color of the face though. If you want an image to manipulate and update, you need to do that separately, changing pixels in an image! or using `draw` commands.}
    sent: "2017-04-17T20:01:12.336Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f51ef108c00c092a8cf077"
    text: {@AlexanderBaggett - VID and VIEW have got some decent examples [here](http://www.mycode4fun.co.uk/About-Red-Programming) and the full documentation is [here](https://doc.red-lang.org/en/view.html#_check).. I'm just working my way through it at the moment.}
    sent: "2017-04-17T20:00:49.872Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58f51eb0d32c6f2f09152a25"
    text: "Thank you @Scaremonger , that does work."
    sent: "2017-04-17T19:59:44.224Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f51eafd32c6f2f09152a23"
    text: "`view [base 400x400 red]` will do it minimally."
    sent: "2017-04-17T19:59:43.515Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f51e55bdf4acc1126b2ff7"
    text: {'Canvas` isn't a known style in VID. That's one problem. Another is that blocks inside VID are used for actions, when a user interacts with a face. You can't just put Red code in there and have it evaluated. In general anyway.}
    sent: "2017-04-17T19:58:13.788Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f51e45ad849bcf42930410"
    text: {You can draw a simple red box by changing the `image img 300x300` to `box 300x300 #f00`}
    sent: "2017-04-17T19:57:57.537Z"
    editedAt: "2017-04-17T19:58:40.493Z"
    v: 3
    author: "58e02049d73408ce4f557047"
) #(
    id: "58f51e1e08c00c092a8ceb7c"
    text: "http://redlcv.blogspot.fr/"
    sent: "2017-04-17T19:57:18.734Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f51e16881b89e1015cff3f"
    text: {I messed up earlier, canvas was a variable name in a tutorial I was looking at.}
    sent: "2017-04-17T19:57:10.908Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f51df0d32c6f2f0915263d"
    text: {Okay this produces a grey square  `view [title "stuff" size 400x400  base [make image! reduce [640x480 red]]  ]`}
    sent: "2017-04-17T19:56:32.592Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
)#(
    id: "58f51decd32c6f2f0915260b"
    text: {@AlexanderBaggett - I don't know what a canvas is yet (I'm still learning too), but you can draw an image using the "IMAGE" face type^/ (Make sure you have a .JPG called example.jpg in the same folder):^/```^/Red [ needs view ]^/img: %example.jpg^/view [^/^-size 400x400 ^/^-image img 300x300^/]^/```}
    sent: "2017-04-17T19:56:28.726Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58f51bea0ed3020c38266c1e"
    text: {view [title "stuff" size 400x400  canvas  [img: make image! reduce [640x480 red] ] ]}
    sent: "2017-04-17T19:47:54.851Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f51be6d32c6f2f09151e16"
    text: {This is what I have so far. Correct me here if I don't understand something.}
    sent: "2017-04-17T19:47:50.949Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f51bd008c00c092a8ce1f0"
    text: {Hi all, I am trying to do something simple here. I am trying to create a view with a red image.  I can't seem to get the syntax correct however. }
    sent: "2017-04-17T19:47:28.644Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58f48a8b08c00c092a8a6dd1"
    text: "no problem - grateful for what it is today :-)"
    sent: "2017-04-17T09:27:39.346Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f476efbdf4acc112687120"
    text: "@michaeldesu 4GB only for now."
    sent: "2017-04-17T08:03:59.681Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f476738fcce56b200c6992"
    text: {Red is 32-bit only right now, so limits apply. 64-bit will come when it's self-hosted. Remember, it's early days for Red.}
    sent: "2017-04-17T08:01:55.028Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f469d3a0e48562420ffa28"
    text: {@greggirwin Thanks. It's probably not a big deal for now - I gather Red can access as much RAM as available within a 64-bit env on Windows?}
    sent: "2017-04-17T07:08:03.136Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f45cc58e4b63533dd6c520"
    text: {@dsgeyser I made changes to Gitter API that are not reflected in Gritter yet (just in Gitter tools). I will fix it and let you know.}
    sent: "2017-04-17T06:12:21.601Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58f45b44bdf4acc11268172a"
    text: ""
    sent: "2017-04-17T06:05:56.810Z"
    editedAt: "2017-04-17T06:07:17.697Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f449db69a692963eb944cb"
    text: {I/O is basic right now. Real I/O will come in 0.7.0 and will likely have direct mode for unbuffered access as an option.}
    sent: "2017-04-17T04:51:39.874Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f440ffd32c6f2f0911d2e3"
    text: {I have a question about reading (a large) text from a file line-by-line. In python, one could iterate over a file object, which automatically uses buffered IO/memory management. I'm wondering if Red supports the same, maybe in like the following?^/```^/foreach line read/lines %mydata [print line]^/```}
    sent: "2017-04-17T04:13:51.199Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f4345569a692963eb90a02"
    text: {@greggirwin I remember an HN article about HN, but I never followed enough to get to the bottom of it. I seem to remember the rabbit hole of links never led to a simple 'what is it, and this is how you use it' kind of article. I'll google later, thanks! I can tell from the little interaction here that Red's community is also right up my alley!}
    sent: "2017-04-17T03:19:49.831Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f4328e0ed3020c3822fc32"
    text: {Pablo Colapinto (wolftype) the creator of Versor, I think nailed it with his library. His dissertation is a great read too. Now, I need to figure out how to make a Versor livecoding GUI in Red!! I've been on the GA horse for almost 12 years, so this would be a milestone for me to be able to start coding and playing with GA, rather than making toy exercises in it.}
    sent: "2017-04-17T03:12:14.461Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f431f4881b89e1015968b7"
    text: {The interesting fact is that GA gives you power to do symbolic geometry on paper again, however, even libraries written to take advantage of it on the computer are still slower than the optimized vector, matrix stuff already out there. One is that the most useful GA is the conformal model in 5 dimensions to do 3D work. You are dealing with that many more calculations for the processor. I think this will change with time. For me, the real win is the ability to be able to abstract in my head and on paper, whereas computational science is moving into the area of just being able to view results, and not the way there.}
    sent: "2017-04-17T03:09:40.693Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f43119881b89e1015965fd"
    text: {@geekyi I blew countless bus trips playing with CluCalc. "Geometric Algebra for Physicists" was what I read to understand what I was doing with CluCalc back then.}
    sent: "2017-04-17T03:06:01.986Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f430bdad849bcf428f5fca"
    text: {I personally prefer Kenichi Kanatani's "Understanding Geometric Algebra: Hamilton, Grassmann and Clifford for Computer Vision and Graphics". He goes through all of them to show how GA evolved, and applies it to common computer graphics work.}
    sent: "2017-04-17T03:04:29.697Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f42fdfa0e48562420f5682"
    text: {@Mufferaw Vince's book is a very gentle introduction. I am also interested in GA for physics. David Hestenes book "New Foundations for Classic Mechanics" is mind-blowing. He is the one responsible for dredging this all up again and for bringing on a GA renaissance of sorts. The history of how vectors and matrices won out over Grassman and Clifford's work is another example of how the solution that wins is not always the best one.}
    sent: "2017-04-17T03:00:47.055Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f3d2ea408f90be66c7e5d1"
    text: {@dsgeyser no, I used only gritter's Gitter.red api lately.. Which you could also use in principle.. Right now, I don't think gritter is that optimized to save on data either.. @rebolek knows best}
    sent: "2017-04-16T20:24:10.909Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f39bd7a0e48562420d6857"
    text: {@geekyi Did you manage to run Gritter in latest build? I need to save on data, and stay off the browser.}
    sent: "2017-04-16T16:29:11.337Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58f393cba0e48562420d4c6c"
    text: {@rpherman, have you seen what VPRI has done with their Nile language? Might be right up your alley. }
    sent: "2017-04-16T15:54:51.275Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f37dce408f90be66c6a689"
    text: {@geekyi Haha, I know what you mean. I have a lot of things that I want to do but not nearly enough time!}
    sent: "2017-04-16T14:21:02.234Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58f37d8e69a692963eb6a8c5"
    text: {I'd need to write down the design of that first tho, it's all in my head right now. Too much is in my head :smile: }
    sent: "2017-04-16T14:19:58.112Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f37d6069a692963eb6a85d"
    text: {Would be really useful for a vector drawing app, for the next generation of *Sketch*}
    sent: "2017-04-16T14:19:12.310Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f37d14408f90be66c6a3be"
    text: {This might actually be useful for another idea I had.. being able to quickly change coordinate systems}
    sent: "2017-04-16T14:17:56.075Z"
    editedAt: "2017-04-16T14:18:25.410Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58f37cf269a692963eb6a734"
    text: {@Mufferaw sounds like a good idea, tho I'm still at the exploring and learning stage.. I'd need to understand more..}
    sent: "2017-04-16T14:17:22.835Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f37c968bb56c2d11b233b3"
    text: {@geekyi I don't know much about the subject but I wanted to try to make something like GeoGebra (except a lot more basic) to experiment with}
    sent: "2017-04-16T14:15:50.835Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58f37c8f408f90be66c6a1f0"
    text: "Concise code, interactive output"
    sent: "2017-04-16T14:15:43.408Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f37c438fcce56b20092fe6"
    text: {[output.webm](https://files.gitter.im/red/red/welcome/8ka4/output.webm)}
    sent: "2017-04-16T14:14:27.892Z"
    editedAt: "2017-04-16T14:22:02.593Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58f37bb34cb8d0917396e1b7"
    text: {[![image.png](https://files.gitter.im/red/red/welcome/T69A/thumb/image.png)](https://files.gitter.im/red/red/welcome/T69A/image.png)}
    sent: "2017-04-16T14:12:03.880Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f37a33f22385553d47cc57"
    text: {I've just installed CLUCalc 4 and am playing with it, has an interesting interface}
    sent: "2017-04-16T14:05:39.472Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f379bda0e48562420cebfe"
    text: {@Mufferaw nice, should collab once we have enough people right?}
    sent: "2017-04-16T14:03:41.906Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f3793e8bb56c2d11b22705"
    text: {@rpherman ^/>  I also don' t know if it is easy enough to just create an interface for existing C libs. I prefer C over C++, since I know it better.^/^/It should be easy enough especially for C. It depends on what you want to do, see [red blog posts](http://www.red-lang.org/search/label/compilation) , and [intro to red system](http://red.qyz.cz/red-system-from-red.html) by rebolek}
    sent: "2017-04-16T14:01:34.044Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f37749a0e48562420ce289"
    text: {@rpherman and anyone else that is interested, I recently picked up a good introductory book called "Geometric Algebra for Computer Graphics" by John Vince. Been too busy to dig into the book but the bits that I did read seemed pretty easy to follow.}
    sent: "2017-04-16T13:53:13.976Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58f36b06bdf4acc11264f95a"
    text: {The cool thing about Geometric Algebra (GA) is that you can think geometrically in numeric or algebraic terms. It expresses things like the circle created by intersecting spheres in a very concise equation, so you can start to think of manipulating geometry without all of the matrices coming up. Remembering even basic 2D transformation matrices usually requires I look them up each time I walk away from the subject for a bit. Yes, OpenGL/WebGL would be a great library to have in Red, and a hook into BLAS and LAPACK to do all sorts of fun game/math stuff! Sounds like I have my plate filled for year or so!}
    sent: "2017-04-16T13:00:54.811Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f36a35ad849bcf428c9d52"
    text: {Thanks @geekyi! I have used those programs, and they are wonderful. I code for fun, not work, so creating things is my hobby when I code. I am hoping to do many things with Red. The versor.js library is good, but I don' think it is a full implementation. Echolisp is a language that is a Lisp in Javascript that does math and other graphing too. I could just create simple vector classes, and such, I just didn't want to reinvent a library. I also don' t know if it is easy enough to just create an interface for existing C libs. I prefer C over C++, since I know it better.}
    sent: "2017-04-16T12:57:25.768Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f35e47881b89e101568753"
    text: {The functions in the [appendix](http://versor.mat.ucsb.edu/masters_appendix.pdf) could be implemented as a dialect}
    sent: "2017-04-16T12:06:31.556Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58f35da608c00c092a8687e7"
    text: {@rpherman  :point_up: [April 15, 2017 7:53 PM](https://gitter.im/red/red/welcome?at=58f233f08bb56c2d11ae072c) Red being very much alpha, so there aren't many libs for anything like you want, especially visualization of complex functions :smile: (unless, so you have to code your own. I use other software like *fragmentarium*, *mandelbulber* and *visions of chaos* for that. While they are fractal drawing programs, you can hack them to display what you want. I also think using gl shaders like used in those is the way forward, good news is, most of those are open source. So, I think that also answers your question:^/> What are the maths libs available in Red^/^/What red code exists you can search on [github](https://github.com/search?utf8=%E2%9C%93&q=language%3ARed&type=Repositories&ref=advsearch&l=Red) and I see Gregg  has mentioned RedCV.^/I've been reading about the *Versor* library you mentioned, and it looks very interesting! But I'm on windows and I've not been able to find an easy way to download and run it.^/After much browsing, I found a port called [versor.js](http://weshoke.github.io/versor.js/examples/C3.hopf.html) which demonstrates some of its features^/}
    sent: "2017-04-16T12:03:50.286Z"
    editedAt: "2017-04-16T12:04:12.105Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58f2b4fe4cb8d09173947ab5"
    text: {The worst thing about Redbol langs is that they kind of ruin everything else for you. ;^^)}
    sent: "2017-04-16T00:04:14.153Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f2b4ca881b89e101547f2d"
    text: {libRed also allows Red to be called from other langs, as well as calling out to them from standard Red+System, so integration is possible on many levels. Red doesn't have any math libs yet, but there's OpenCV work done by Francois Jouen which is very cool.^/^/Calling into C++ libs requires they be `extern c` callable.^/^/Just post where it seems most appropriate.}
    sent: "2017-04-16T00:03:22.191Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f2a36da0e48562420a5200"
    text: {What room should I move this conversation over to in future? red /red, or red /help?}
    sent: "2017-04-15T22:49:17.854Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f2a330a0e48562420a5126"
    text: {The J language is available as a DLL. It can call C and C can call it, so I am hoping it can be used with Red. What are the maths libs available in Red? I am teaching myself Geometric Algebra, a type of Clifford Algebra, that is finding great use in computer vision, graphics and many other fields. There is a C++ library called Versor that would be great if I could call into it, and build GUI and OpenGL/WebGL demos in! Red reminds me of my Amiga days of building and not sweating the platform or GUI details as much as what it is I am trying to create. Thanks 100X!}
    sent: "2017-04-15T22:48:16.864Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f2a27fad849bcf428a312f"
    text: {Thanks, everyone! I will probably check here more often. Google Groups seems to be lagging for all of my groups. I know J, but not the plotting or image libs as well as just straight J. The pictures on the link were just beautiful without understanding them fully, but some took quite long to render if I changed the 128 to 1024 for higher resolutions.}
    sent: "2017-04-15T22:45:19.581Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f270b88bb56c2d11aedb63"
    text: {@rpherman @geekyi Knows J. He might have some ideas. }
    sent: "2017-04-15T19:12:56.236Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58f2486ba0e48562420902ba"
    text: {Hi Rob. I replied on the ML, but good to see you here. Here's what I said there:^/> Red will be in the Python league, Red/System (the C level dialect of Red) will be much closer to C. No optimizing in place for either yet, but check out the Red/System demos, like Mandelbrot, to see what it can do. It should be 2-4x C speed in most cases. As the mandelbrot demo shows, you can easily prototype in Red and translate as well, or just drop down to Red/System for the routines that need to be fast.^/^/I should clarify that 2-4x is *slower* than C speed.}
    sent: "2017-04-15T16:20:59.648Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f23a2169a692963eb276fb"
    text: {@rpherman Hi and welcome :)^/Red should be fast enough for such things, unfortunately I don't know J to port your example}
    sent: "2017-04-15T15:20:01.136Z"
    editedAt: "2017-04-15T15:20:14.283Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58f233f08bb56c2d11ae072c"
    text: {I posted this on Google Groups, but I figure this is where I should be asking questions from now on:I am closely following Red, but I have not learned enough to go beyond other people's examples.^/^/I like doing math and graphics programming, usually the two together! I juse C, J and sometimes Mathematica or Python.^/^/With C and Python as two ends of the fast -> almost fast spectrum, where would Red fit in for something like graphing visual complex functions such as these examples by a J programmer:^/^/http://code.jsoftware.com/wiki/User:Andrew_Nikitin/Phase_portraits^/^/Red keeps luring me!^/^/Rob^/}
    sent: "2017-04-15T14:53:36.681Z"
    v: 1
    author: "57068cb2187bb6f0eade588d"
) #(
    id: "58f19381ad849bcf42867c45"
    text: {@greggirwin Thanks alot for your explanation to Arnold above - very helpful}
    sent: "2017-04-15T03:29:05.769Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f16ea88bb56c2d11aba9bd"
    text: {You can certainly be more explicit with your rules than just using skip. More self documenting and likely protected from inadvertent changes as rules morph.}
    sent: "2017-04-15T00:51:52.799Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f1662069a692963eafe0b1"
    text: {still learning.. but I think the following is more intuitive^/```^/parse "abc12slkdfjkdl1245" [to 2 digits copy x 2 digits]   ; or [to 2 digits copy x 2 digits to end] ; to get true result^/```^/originally I got hung up on true = matches found, but I guess if you're copying into a variable then the return value doesn't matter?}
    sent: "2017-04-15T00:15:28.458Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
)#(
    id: "58f0e84569a692963eae07bc"
    text: {Close Arnold. `copy x 2 skip` means "copy into x the contents to 2 skips". Nothing says to go to the end in this case, so the parse will actually return `false`, because the 2 skips didn't reach the end of the input. You could just add `to end` to the end of the rule though.}
    sent: "2017-04-14T15:18:29.725Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f086dd8fcce56b20ff2520"
    text: {The first block is to be parsed using the rules following it. (And as I understand this)^/The rule says  first go to the place where you find 2 digits in a row, then copy into x the next 2 places then skip (to the end).}
    sent: "2017-04-14T08:22:53.518Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58f08250408f90be66bc83b4"
    text: "pls explain what is happening here"
    sent: "2017-04-14T08:03:28.437Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f0809408c00c092a7cd91e"
    text: {You're right, I overlooked it. You can use a simpler approach then, for extracting the first number:^/```lisp^/parse {abc12slkdfjkdl1245} [to 2 digits copy x 2 skip]^/```}
    sent: "2017-04-14T07:56:04.075Z"
    editedAt: "2017-04-14T08:00:47.153Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f0801f4cb8d091738cc0f4"
    text: "if i don't use break then x = 45"
    sent: "2017-04-14T07:54:07.146Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f0800a8bb56c2d11a82701"
    text: "x = 12"
    sent: "2017-04-14T07:53:46.638Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f08001f22385553d3d98ef"
    text: {parse {abc12slkdfjkdl1245} [some [copy x 2 digits break | skip]]}
    sent: "2017-04-14T07:53:37.659Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f07fa0408f90be66bc7943"
    text: "Then your code is correct."
    sent: "2017-04-14T07:52:00.775Z"
    editedAt: "2017-04-14T07:52:10.015Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f07f8b08c00c092a7cd51d"
    text: {first number with 2 digits.     text: "abcdefs12efabc1457"}
    sent: "2017-04-14T07:51:39.095Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f07f528fcce56b20ff0a08"
    text: {It depends if you want first two digits or first number with two digits. ;-)}
    sent: "2017-04-14T07:50:42.583Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f07e1af22385553d3d90ce"
    text: "result 45"
    sent: "2017-04-14T07:45:30.426Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f07e15ad849bcf42825f06"
    text: {parse {abcdef1245sadf} [some [copy x 2 digits | skip]] }
    sent: "2017-04-14T07:45:25.701Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f07d74ad849bcf42825af4"
    text: {For limiting the number of loops, use an integer value instead of `some`. For example: `2 [copy...` for extracting only first 2 digits.}
    sent: "2017-04-14T07:42:44.990Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f07d3ead849bcf42825a03"
    text: "In such case, your code was correct. "
    sent: "2017-04-14T07:41:50.925Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f07ccb4cb8d091738cb5e3"
    text: "or just first 14"
    sent: "2017-04-14T07:39:55.780Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f07c9a408f90be66bc7228"
    text: "if i want to extract all digits 1419"
    sent: "2017-04-14T07:39:06.257Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f07c888bb56c2d11a81b00"
    text: "will just returning last 19"
    sent: "2017-04-14T07:38:48.427Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f07c7df22385553d3d8ae0"
    text: "text: abc14def19 "
    sent: "2017-04-14T07:38:37.821Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f07afe8bb56c2d11a815e5"
    text: {@raton3062015 `copy x digits` => `copy x some digits`. Moreover, the (append k: "") part there is not needed, if `k`word is the one which needs to refer to the extract digits string, then just use it instead of `x`.}
    sent: "2017-04-14T07:32:14.570Z"
    editedAt: "2017-04-14T07:33:25.286Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f078c98e4b63533dc98f30"
    text: {parse text [some [ copy x digits (append k: "" x) | skip]]}
    sent: "2017-04-14T07:22:49.590Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f07898f22385553d3d7c0b"
    text: {digits: charset "0123456789"}
    sent: "2017-04-14T07:22:00.495Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f0788bad849bcf42824b4f"
    text: {text: "abcdeff1245". i want to parse digit. ...........  }
    sent: "2017-04-14T07:21:47.932Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58f0786169a692963eac4940"
    text: "Just POP it! ;-)"
    sent: "2017-04-14T07:21:05.803Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f069f708c00c092a7c8b81"
    text: {It's worth it. I think we should coin a new paradigm: Parse Oriented Progamming. :^^)}
    sent: "2017-04-14T06:19:35.780Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58f06950bdf4acc1125abc4f"
    text: {@dockimbel Thanks for the confirmation - it's taking me a while to get my head around it - but it seems like the effort will be worth it @9214 Thanks - yes, I'm using the Red version as a main reference. }
    sent: "2017-04-14T06:16:48.205Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f063c7ad849bcf42820688"
    text: {@michaeldesu [some nice parse tutorial](https://en.wikibooks.org/wiki/REBOL_Programming/Language_Features/Parse), it's for Rebol though, [here's a blog post for Red version](http://www.red-lang.org/2013/11/041-introducing-parse.html)}
    sent: "2017-04-14T05:53:11.410Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58f062c9bdf4acc1125aa86e"
    text: {A different way to express it could be: if there is no path through the rules, which allows to reach the end position of the input series, a `false`will be returned.}
    sent: "2017-04-14T05:48:57.339Z"
    editedAt: "2017-04-14T05:50:37.690Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f06266ad849bcf428201db"
    text: {@michaeldesu Your understanding is correct, `some` stops on failure to match, and as the input's end position has not been reached by the parsing rules, `false` is returned.}
    sent: "2017-04-14T05:47:18.249Z"
    editedAt: "2017-04-14T05:49:02.611Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58f05032f22385553d3cfc8d"
    text: {I would like to ask if someone can confirm my understanding about `parse` in the following case. I've been studying some docs, and trying simple variations of `parse "dog cat" [some ["cat" | "dog" | space]]` and trying to get my head why some pass/fail, and I believe to understand it, it's good to understand the moving pointer or index concept. For the following example (I'd like to confirm my understanding of why it returns `false` since I thought at first it should be `true` due to the 'dog' part at the start:^/```^/parse "dog c at"  [some ["cat" | "dog" | space]]  ; returns false^/```^/at the start, the pointer is at 'd' and it's a 'pass' since those 3 chars is a match for dog. Then the pointer is moved to the space after 'g' and that is a 'pass' since it matches the space, and then the pointer is moved to the 'c' which presents a fail since neither 'c' nor 'c a' is a match for any rule. Is that the correct mechanism for the above code? This was based on the premise that `some` continues until failure. Sorry this was long. }
    sent: "2017-04-14T04:29:38.678Z"
    editedAt: "2017-04-14T04:36:00.043Z"
    v: 4
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f00e4c08c00c092a7b6c42"
    text: "@PeterWAWood Thanks alot!"
    sent: "2017-04-13T23:48:28.387Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f00e30ad849bcf4280f898"
    text: "I can confirm the problem and have opened #2575."
    sent: "2017-04-13T23:48:00.311Z"
    editedAt: "2017-04-13T23:50:42.106Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58f00d1c8bb56c2d11a6be37"
    text: {I just tried Mac 'red-13apr17-b27625b' and lauched it, and after it compiled itself, I found the same freeze issue (it's really minor) when pressing shift-left or right arrow keys}
    sent: "2017-04-13T23:43:24.242Z"
    editedAt: "2017-04-13T23:43:46.275Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f00b9bbdf4acc112599667"
    text: {I should try the Mac automated build version - thanks for the tip}
    sent: "2017-04-13T23:36:59.456Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58f00ae008c00c092a7b606f"
    text: {@maximvl sorry for (overnight) delay, yes I was using CLI (i.e. launching red-062 within the Mac terminal).  }
    sent: "2017-04-13T23:33:52.097Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eff745f22385553d3bdbfb"
    text: "@AlexanderBaggett it is, yep"
    sent: "2017-04-13T22:10:13.788Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58eff722ad849bcf4280a97b"
    text: "is `.reds` for Red/System files?"
    sent: "2017-04-13T22:09:38.791Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58efadae69a692963ea987fd"
    text: {The Mac GUI release is huge news. Once again, Go Team Red!}
    sent: "2017-04-13T16:56:14.316Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58efaca4b52518ed4d0b71da"
    text: {@AlexanderBaggett Good catch, we'll see how to customize those properties in our building toolchain.}
    sent: "2017-04-13T16:51:48.499Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58efaa64f22385553d3a884b"
    text: "http://imgur.com/a/PQdfY^/^/"
    sent: "2017-04-13T16:42:12.752Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58efa9f7ad849bcf427f543a"
    text: {FYI, the file properties of red-062.exe still show Rebol stuff.}
    sent: "2017-04-13T16:40:23.980Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58ef78b8ad849bcf427e4de9"
    text: {@maximvl true, my bad^/^/:point_up: [13 апреля 2017 г., 17:38](https://gitter.im/red/red?at=58ef7138ad849bcf427e26a6)}
    sent: "2017-04-13T13:10:16.079Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ef783f69a692963ea87c2d"
    text: {@9214 not anymore ;)^/https://twitter.com/red_lang/status/850331925004771333}
    sent: "2017-04-13T13:08:15.602Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ef78198bb56c2d11a429aa"
    text: {@maximvl I think CLI, since GUI is Windows only (for now)}
    sent: "2017-04-13T13:07:37.833Z"
    editedAt: "2017-04-13T13:07:45.129Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ef77aaa0e4856242febd3f"
    text: "@michaeldesu the cli repl or gui one?"
    sent: "2017-04-13T13:05:46.206Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ef7693a0e4856242feb91f"
    text: {this might not be the right place, but I wonder if anyone else using the Mac red-062 has found that if you press shift-left arrow or shift-right arrow, it seems to cause a freeze of the REPL (escape does not recover)}
    sent: "2017-04-13T13:01:07.311Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ef76608bb56c2d11a42124"
    text: "`````"
    sent: "2017-04-13T13:00:16.237Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ef5d488bb56c2d11a3ab3f"
    text: {@9214 :point_left: [April 13, 2017 4:10 PM](https://gitter.im/red/sandbox?at=58ef5cb14cb8d09173885977)}
    sent: "2017-04-13T11:13:12.825Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef3cbfa0e4856242fdb61c"
    text: "`` a`b ` ``"
    sent: "2017-04-13T08:54:23.255Z"
    editedAt: "2017-04-13T08:56:10.020Z"
    v: 3
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "58ef192aad849bcf427c9c6e"
    text: {@9214 one of those deep mysteries I haven't been able to solve 😝 how do you escape the escapes? How do you [mention the uses](https://en.wikipedia.org/wiki/Use%E2%80%93mention_distinction)? }
    sent: "2017-04-13T06:22:34.203Z"
    editedAt: "2017-04-13T06:24:03.051Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58ef104ff22385553d37b5c4"
    text: ":confused: "
    sent: "2017-04-13T05:44:47.535Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58ef1046bdf4acc11255260f"
    text: "`\`` `\``"
    sent: "2017-04-13T05:44:38.829Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ef10198e4b63533dc3bd32"
    text: "`\``"
    sent: "2017-04-13T05:43:53.963Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ef10114cb8d09173871f4e"
    text: {and how can I enclose backtick inside backticks? :D `<backtick>`}
    sent: "2017-04-13T05:43:44.999Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58eef791bdf4acc11254d47c"
    text: {*P.S.*  @AlexanderBaggett and  @raton3062015 , do you know you can use three backticks? "`" (ctrl+shift+m for more details)}
    sent: "2017-04-13T03:59:13.767Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eef72d8fcce56b20f9071c"
    text: {And I've used "weird" languages like `j`, `factor` and others.. and it's the most mind bending of them all}
    sent: "2017-04-13T03:57:33.970Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eef6d28bb56c2d11a1f4f7"
    text: {@AlexanderBaggett red isn't just a functional programming language. It doesn't fit any particular paradigm. It blows your mind multiple times. And that's the only thing you can expect consistently.. to be different}
    sent: "2017-04-13T03:56:02.051Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eef65ba0e4856242fca0a6"
    text: {t: "raton1234" tt: "1234raton" ttt:  "ra1234ton" .       with parse =  1234}
    sent: "2017-04-13T03:54:03.937Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58eef6158bb56c2d11a1f3b5"
    text: {@michaeldesu I think `split` is the only feature in rebol2 `parse` that isn't in red (also same as red in rebol3)}
    sent: "2017-04-13T03:52:53.800Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eedb6c08c00c092a764f35"
    text: {@greggirwin  Thanks alot for that. `split` is more intuitive in that regard, so I'm glad about that improvement.}
    sent: "2017-04-13T01:59:08.365Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eeda5bad849bcf427bc181"
    text: {Red's parse does not do the simple splitting that Rebol's did, by design. Right now, Red has a simple `split` function, which will be enhanced in the future.^/```^/>> split "The trip will take 21 days" space^/== ["The" "trip" "will" "take" "21" "days"]^/```}
    sent: "2017-04-13T01:54:35.587Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eecaaa69a692963ea5be97"
    text: {following from the above parse discussion, I'm studying the suggested rebol page on parsing . I have a question about the first example (splitter example)^/```^/probe parse "The trip will take 21 days" none^/["The" "trip" "will" "take" "21" "days"]   ; expected output^/```^/this doesn't work in Red (nor similar attempts like [none]) - I get an error. What is the Red equivalent?}
    sent: "2017-04-13T00:47:38.098Z"
    editedAt: "2017-04-13T00:49:03.491Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eeb1718fcce56b20f81441"
    text: {And on a public channel. Shame on me. Oh well, at least you're not a zombie.}
    sent: "2017-04-12T23:00:01.230Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeb11c8e4b63533dc265fe"
    text: {Gregg, you should keep that for yourself, not everybody has to know it.}
    sent: "2017-04-12T22:58:36.007Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeb091408f90be66b58a71"
    text: {Bolek pretends he wants to help people. Really he just wants to melt their minds.}
    sent: "2017-04-12T22:56:17.549Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeb053a0e4856242fba544"
    text: {@AlexanderBaggett thank you. I love good questions :)}
    sent: "2017-04-12T22:55:15.152Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeb03db52518ed4d076331"
    text: "Great! See you then."
    sent: "2017-04-12T22:54:53.392Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeb02b69a692963ea56287"
    text: {Well, I learned a lot today. Thanks to both of you. I will be back tomorrow with more questions}
    sent: "2017-04-12T22:54:35.657Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeb00d4cb8d0917385d426"
    text: ":)"
    sent: "2017-04-12T22:54:05.568Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeb0088fcce56b20f80e78"
    text: "Refinements are also first class values. :^^)"
    sent: "2017-04-12T22:54:00.632Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeb0018bb56c2d11a0fda7"
    text: {refinement is basically a switch that can be used with a function}
    sent: "2017-04-12T22:53:53.352Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeaffdb52518ed4d07618b"
    text: "Ah"
    sent: "2017-04-12T22:53:49.891Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeaff68bb56c2d11a0fd8d"
    text: {`Type?` is a function, you're correct. Refinements let you specify optional behavior and arguments, to "refine" how a function behaves.}
    sent: "2017-04-12T22:53:42.109Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeaff58e4b63533dc261ff"
    text: "What is a refinement?"
    sent: "2017-04-12T22:53:41.591Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeafce8bb56c2d11a0fcb8"
    text: {C doesn't have properties, so not sure what you mean. OOP C-langs do, but refinements are not the same thing.}
    sent: "2017-04-12T22:53:02.773Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeafa88fcce56b20f80bfa"
    text: {but what are they really since type?  is a function (I think its a function anyway).}
    sent: "2017-04-12T22:52:24.866Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeafa7ad849bcf427b3195"
    text: {Play with `mold` in the console, on blocks too, to get a feel for it.}
    sent: "2017-04-12T22:52:23.521Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeaf90bdf4acc11253d420"
    text: {It looked like refinements are the equivalent of properties in C style languages}
    sent: "2017-04-12T22:52:00.807Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeaf5608c00c092a75b3a2"
    text: {There's another option in this case. `foreach w "hello" [print type?/word w]` Now you've see a refinement used on a function. :^^)}
    sent: "2017-04-12T22:51:02.122Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeaf368e4b63533dc25f68"
    text: "Thanks :)"
    sent: "2017-04-12T22:50:30.957Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeaeea4cb8d0917385d067"
    text: {`Print` does an implicit `form` on values, which produces their human friendly format. `Mold` produces a `load`able format, much like `write` vs `save`.}
    sent: "2017-04-12T22:49:14.341Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeaed88fcce56b20f809be"
    text: "Okay, so then what does `mold` do?"
    sent: "2017-04-12T22:48:56.042Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeaeaff22385553d36692e"
    text: {They do. `foreach w "hello" [print mold type? w]` will show you the value that way.}
    sent: "2017-04-12T22:48:15.850Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeae7b69a692963ea55cc1"
    text: {Okay one sec.  `foreach w "hello" [print type? w]` prints out  `char`  but I thought value types ended  with a !}
    sent: "2017-04-12T22:47:23.308Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeae43b52518ed4d075a10"
    text: "Correct. Strings are also series values."
    sent: "2017-04-12T22:46:27.247Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeae26a0e4856242fb9df8"
    text: {Ahh, so that is why  `foreach w "hello" [print w]`  works}
    sent: "2017-04-12T22:45:58.124Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeade308c00c092a75ae6e"
    text: {There are other `series!` types, but do not care about them for now}
    sent: "2017-04-12T22:44:51.861Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeadc58e4b63533dc25a6e"
    text: {@AlexanderBaggett, Red can use typesets to verify that a value supports certain actions. `? typset!` will show you all of the standard ones, but you can define your own as well. As Bolek says, we sometimes call them metatypes or pseudotypes. }
    sent: "2017-04-12T22:44:21.476Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeadb308c00c092a75ad92"
    text: {Yes, `string!` is also a `series!` but it's not a `block!`}
    sent: "2017-04-12T22:44:03.381Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eead908e4b63533dc259e6"
    text: {`series!` is meta-type and `block!` is part of it.}
    sent: "2017-04-12T22:43:28.128Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eead8e8fcce56b20f80377"
    text: {are there series! that are not block!s or vice versa?}
    sent: "2017-04-12T22:43:26.471Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eead6ea0e4856242fb9b34"
    text: "Oh"
    sent: "2017-04-12T22:42:54.495Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eead61ad849bcf427b286c"
    text: "@AlexanderBaggett block! is always a series!"
    sent: "2017-04-12T22:42:41.311Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eead608e4b63533dc25941"
    text: {`Parse` is the crown jewel. Indeed a world of its own.}
    sent: "2017-04-12T22:42:40.591Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eead2f8e4b63533dc258a9"
    text: {parse is like a world to its own.. but sounds like it's great - have to drop a lot of baggage or past thinking}
    sent: "2017-04-12T22:41:51.672Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eead254cb8d0917385c964"
    text: {@greggirwin Yes, I am still working on a bot that will beat both of us :smirk: }
    sent: "2017-04-12T22:41:41.209Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eead258bb56c2d11a0f180"
    text: {So Gregg about what you said earlier about series! It looks like I can pass in a block!  for foreach. Does it have a way of determining that the block is actually a series?}
    sent: "2017-04-12T22:41:41.101Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeacf88e4b63533dc257c5"
    text: "You must have been busy. ;^^)"
    sent: "2017-04-12T22:40:56.571Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeace7ad849bcf427b2624"
    text: "*This* time. ;^^)"
    sent: "2017-04-12T22:40:39.312Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeacdcb52518ed4d0754f2"
    text: "@greggirwin you were faster again ;)"
    sent: "2017-04-12T22:40:28.530Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeaccb69a692963ea55783"
    text: "thanks Gregg"
    sent: "2017-04-12T22:40:11.862Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
)#(
    id: "58eeacb708c00c092a75a7fa"
    text: {@michaeldesu, if you want to collect values when parsing, use the `collect` keyword in your rules. In this case, the last match wins. If you merge your new test data with the `probed` version I posted, you can see it finds both.}
    sent: "2017-04-12T22:39:51.851Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeac5e69a692963ea555e4"
    text: {`type?` will give you datatype of value that a word holds.}
    sent: "2017-04-12T22:38:22.298Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeac598e4b63533dc254d4"
    text: "`?` is just an alias for `help`."
    sent: "2017-04-12T22:38:17.944Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeac45f22385553d365ef6"
    text: {wow - so much interesting activity overnight^/I have a question about the above parse example, since I also want to get my head around this..^/if `some` mean one or more, then if I change the text to "text: "welcome 12-01-17 how are you 12-02-17" and re-run the parse `parse text [some [copy d date | skip]]` then I'm not sure why d is not returning a block of 2 dates}
    sent: "2017-04-12T22:37:57.125Z"
    editedAt: "2017-04-12T22:38:36.768Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eeac4408c00c092a75a67f"
    text: {`help/?` is for interactive use. `Type?` is more for runtime use, but also handy when debugging.}
    sent: "2017-04-12T22:37:56.520Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeac3a408f90be66b5799c"
    text: "yes"
    sent: "2017-04-12T22:37:46.192Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeac2aa0e4856242fb97fa"
    text: {so ? essentially tells me the arguments and usage of a given function in the api yes?}
    sent: "2017-04-12T22:37:30.455Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeac0a8fcce56b20f7fd1c"
    text: "Just use both ;)"
    sent: "2017-04-12T22:36:58.035Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeabf74cb8d0917385c5cb"
    text: {Also, since this is functional programming, sometimes I am having trouble knowing when to use type? versus ?}
    sent: "2017-04-12T22:36:39.860Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeabcead849bcf427b2289"
    text: "It's a mind bender for a while, for everyone."
    sent: "2017-04-12T22:35:58.201Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeabc38fcce56b20f7fc47"
    text: "Okay"
    sent: "2017-04-12T22:35:47.049Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeabb9408f90be66b577d5"
    text: {If you do `? foreach` in the console, you can see that its first arg is a `series!` type, so any of those types will work there.}
    sent: "2017-04-12T22:35:37.565Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeab9808c00c092a75a35f"
    text: {But decomposing data into executable code and then evaluating it is a bit new for me.}
    sent: "2017-04-12T22:35:04.448Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeab858bb56c2d11a0e917"
    text: {<he he> Coming back to sequence types. Red calls them `series!`. In the console you can see what types support series actions:^/```^/>> ? series!^/series! is a typeset! of value: make typeset! [block! paren! string! file! url! path! lit-path! set-path! get-path! vector! hash! binary! tag! email! image!] ^/```^/There are a lot.}
    sent: "2017-04-12T22:34:45.781Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeab65a0e4856242fb957f"
    text: {passing around functions and blocks of code is not new to me.}
    sent: "2017-04-12T22:34:13.940Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeab4f8fcce56b20f7fa19"
    text: {@greggirwin I should, but @AlexanderBaggett has great questions :)}
    sent: "2017-04-12T22:33:51.977Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeab498bb56c2d11a0e87e"
    text: {Well now I am no stranger to functional programming}
    sent: "2017-04-12T22:33:45.772Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeab3a408f90be66b5765a"
    text: "Oh"
    sent: "2017-04-12T22:33:30.366Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeab3408c00c092a75a29f"
    text: {It is value that is returned from function that should not return a value.}
    sent: "2017-04-12T22:33:24.517Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeab2b69a692963ea55145"
    text: {@bolek, you're blowing minds! :^^) Maybe leave first class functions out of the mix for now, if @AlexanderBaggett  is just starting with Red. }
    sent: "2017-04-12T22:33:15.459Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58eeab2a69a692963ea5512d"
    text: "is it similar to void in C style languages? "
    sent: "2017-04-12T22:33:14.485Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeaaee69a692963ea54ffe"
    text: {`unset!` is special value that is treated as non-value.}
    sent: "2017-04-12T22:32:14.640Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeaac9bdf4acc11253c4c4"
    text: "So what is unset! ?"
    sent: "2017-04-12T22:31:37.211Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeaabea0e4856242fb9355"
    text: "I understand."
    sent: "2017-04-12T22:31:26.887Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeaa938e4b63533dc24d63"
    text: "some values may be words"
    sent: "2017-04-12T22:30:43.973Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeaa8d408f90be66b57414"
    text: "block is collection of values"
    sent: "2017-04-12T22:30:37.391Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeaa838bb56c2d11a0e525"
    text: "word can hold a value"
    sent: "2017-04-12T22:30:27.258Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeaa7b8e4b63533dc24d16"
    text: "word can be called a variable"
    sent: "2017-04-12T22:30:19.365Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeaa5a408f90be66b572fa"
    text: "the result is `[function! function! unset!]`"
    sent: "2017-04-12T22:29:46.749Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeaa4608c00c092a759ea5"
    text: "block is our  ~~variable~~   word. "
    sent: "2017-04-12T22:29:26.506Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eeaa2008c00c092a759e36"
    text: "`1` is printed by evaluated `fn`"
    sent: "2017-04-12T22:28:48.179Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eeaa06b52518ed4d074ab2"
    text: {you have three different expressions in `block`: `:fn`, `get 'fn` and `fn`}
    sent: "2017-04-12T22:28:22.325Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea9cc8fcce56b20f7f514"
    text: "`reduce` evaluates"
    sent: "2017-04-12T22:27:24.117Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea9a38bb56c2d11a0e0e3"
    text: "what does it do?"
    sent: "2017-04-12T22:26:43.558Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea9834cb8d0917385bd68"
    text: "Woah"
    sent: "2017-04-12T22:26:11.393Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea981bdf4acc11253c14d"
    text: "Also with regards to your code"
    sent: "2017-04-12T22:26:09.959Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea973ad849bcf427b171c"
    text: "Woah"
    sent: "2017-04-12T22:25:55.991Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea9588fcce56b20f7f3a3"
    text: {@AlexanderBaggett I am using Rebol from first publicly available version, so for 18 years I think? }
    sent: "2017-04-12T22:25:28.364Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea8be4cb8d0917385bafd"
    text: {```^/>> fn: does [print 1]^/== func [][print 1]^/>> block: reduce [:fn get 'fn fn]^/1^/== [func [][print 1] func [][print 1] unset]^/```}
    sent: "2017-04-12T22:22:54.021Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea887b52518ed4d0743e3"
    text: {Boleslav, what is your background in Red/Rebol btw?}
    sent: "2017-04-12T22:21:59.779Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea822b52518ed4d074250"
    text: "Let me show you some example"
    sent: "2017-04-12T22:20:18.702Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea813bdf4acc11253bb80"
    text: {Actually no, it just gets their value. It is the same in above example,  but  not always.}
    sent: "2017-04-12T22:20:03.281Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea7bf8e4b63533dc24293"
    text: {So calling get on the "values" in the block cause them to be evaluated?}
    sent: "2017-04-12T22:18:39.512Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea7658e4b63533dc2411e"
    text: {from your background - conceptually, series! could be like an Interface. The traversal functions are taken care of for you}
    sent: "2017-04-12T22:17:09.014Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eea6fff22385553d364d26"
    text: "I know, it is bit different, but it makes sense."
    sent: "2017-04-12T22:15:27.415Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea6f3ad849bcf427b0e83"
    text: "associated with Red/Rebol"
    sent: "2017-04-12T22:15:15.219Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea6e8bdf4acc11253b712"
    text: "*jargon*"
    sent: "2017-04-12T22:15:04.679Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea6dd8fcce56b20f7e965"
    text: {Yeah, I am still getting to know all of the words.}
    sent: "2017-04-12T22:14:53.058Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea6bd08c00c092a759042"
    text: "It should be `value` to be correct."
    sent: "2017-04-12T22:14:21.009Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea6a98bb56c2d11a0d577"
    text: {@AlexanderBaggett it depends on what do you call an iterator. `w` is not enough? :)}
    sent: "2017-04-12T22:14:01.151Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58eea66ff22385553d364b77"
    text: {so you can iterate over data in a block without having to implement an iterator?}
    sent: "2017-04-12T22:13:03.507Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea662b52518ed4d073bd7"
    text: "@AlexanderBaggett :)"
    sent: "2017-04-12T22:12:50.201Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea65108c00c092a758f3f"
    text: {okay one sec. Let me screw my head back on.   You just blew my mind.}
    sent: "2017-04-12T22:12:33.917Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea615ad849bcf427b0a0c"
    text: {```^/>> a: 1^/== 1^/>> b: 2^/== 2^/>> blk: [a b]^/== [a b]^/>> foreach w blk [print w]^/a^/b^/>> foreach w blk [print get w]^/1^/2^/>> ^/```}
    sent: "2017-04-12T22:11:33.532Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea5df8fcce56b20f7e601"
    text: "Can you give an example?"
    sent: "2017-04-12T22:10:39.740Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea5d5408f90be66b562ed"
    text: {So,  its unevaluated when in a block state and a do has to be used to cause some evaluation.}
    sent: "2017-04-12T22:10:29.664Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea5b5b52518ed4d073865"
    text: {then you get word's value, that's as close to a variable, as you can get :)}
    sent: "2017-04-12T22:09:57.015Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea5b408c00c092a758cc6"
    text: "Oh"
    sent: "2017-04-12T22:09:56.014Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea5abb52518ed4d073854"
    text: "It's all inert in a block until evaluated "
    sent: "2017-04-12T22:09:47.494Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eea5888bb56c2d11a0d13f"
    text: {until it's evaluated by a 'do' either explicitly or implicitly }
    sent: "2017-04-12T22:09:12.008Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58eea5618bb56c2d11a0d03e"
    text: "There are no variables, btw."
    sent: "2017-04-12T22:08:33.735Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea549408f90be66b560f7"
    text: {Your block can contain anything that is valid value in Red.}
    sent: "2017-04-12T22:08:09.636Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea52508c00c092a758abb"
    text: {so if my block contained only variable names it would work too?}
    sent: "2017-04-12T22:07:33.932Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea51cad849bcf427b0611"
    text: "You can interpret it as code."
    sent: "2017-04-12T22:07:24.709Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea50b69a692963ea534ef"
    text: {Well, it *may* be code, but is actually just a block of values.}
    sent: "2017-04-12T22:07:07.632Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea505408f90be66b55ffd"
    text: {I have a background in .Net so some of this is a bit new to me. }
    sent: "2017-04-12T22:07:01.173Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea4de8e4b63533dc2381d"
    text: "Yes."
    sent: "2017-04-12T22:06:22.328Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea4cdbdf4acc11253afda"
    text: {Okay, I know about  block!.  Its an arbitrary block of code basically.}
    sent: "2017-04-12T22:06:05.032Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea4aaf22385553d3643ed"
    text: {`block!` is basic. `[here "can" #be almost@anythi.ng]`}
    sent: "2017-04-12T22:05:30.633Z"
    editedAt: "2017-04-12T22:05:37.559Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea4358bb56c2d11a0cc67"
    text: {What kind of collections / sequences does red support?}
    sent: "2017-04-12T22:03:33.289Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea3598bb56c2d11a0c908"
    text: "I see"
    sent: "2017-04-12T21:59:53.035Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea34b69a692963ea52dba"
    text: {>> temp: print 1^/1^/*** Script Error: temp: needs a value^/*** Where: temp^/>> temp: probe 1^/1^/== 1^/}
    sent: "2017-04-12T21:59:39.796Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea3118bb56c2d11a0c759"
    text: {Exactly, that's the difference. So you can do things like^/```^/>> a: 1^/== 1^/>> 1 + probe a^/1^/== 2^/```}
    sent: "2017-04-12T21:58:41.350Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea2b98fcce56b20f7db55"
    text: {Oh I see, in the second scenario it really is returning the value. Thus the ==}
    sent: "2017-04-12T21:57:13.066Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea291bdf4acc11253a4b0"
    text: {```^/>> print 1^/1^/>> probe 1^/1^/== 1^/```}
    sent: "2017-04-12T21:56:33.540Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea26cbdf4acc11253a3d4"
    text: {`probe` is (almost) like `print`, but `print` does not return value}
    sent: "2017-04-12T21:55:56.361Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea2348e4b63533dc22e86"
    text: "@AlexanderBaggett exactly."
    sent: "2017-04-12T21:55:00.721Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea222f22385553d3638fb"
    text: {Oh, so in some scenarios stuff returned to the console is actually truncated and probe always returns the full value.}
    sent: "2017-04-12T21:54:42.462Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea20df22385553d3638d6"
    text: {Using `probe` in `load/read` example is not necessary, it's just habit.}
    sent: "2017-04-12T21:54:21.083Z"
    editedAt: "2017-04-12T21:54:36.066Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea1bf69a692963ea526fa"
    text: {```^/>> b: collect [loop 100 [keep random 100]]^/== [53 81 67 51 13 4 3 71 48 92 6 51 54 38 19 14 2 19 14 24 76 75 61 3 98 76 7 17...^/>> b^/== [53 81 67 51 13 4 3 71 48 92 6 51 54 38 19 14 2 19 14 24 76 75 61 3 98 76 7 17...^/>> probe b^/[53 81 67 51 13 4 3 71 48 92 6 51 54 38 19 14 2 19 14 24 76 75 61 3 98 76 7 17 15 68 30 100 44 20 84 60 73 98 62 34 43 100 7 12 38 69 12 1 20 37 42 92 90 91 71 24 21 46 22 63 54 5 11 37 90 86 27 27 29 40 47 41 38 95 34 99 10 76 83 19 6 97 2 6 15 100 92 90 40 6 96 32 33 70 11 69 83 31 56 39]^/== [53 81 67 51 13 4 3 71 48 92 6 51 54 38 19 14 2 19 14 24 76 75 61 3 98 76 7 17...^/>>^/```}
    sent: "2017-04-12T21:53:02.909Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea1b7bdf4acc11253a112"
    text: {It is useful when you have long values, like this:}
    sent: "2017-04-12T21:52:55.550Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea1a6408f90be66b5537d"
    text: {@AlexanderBaggett it does not assign value, it just prints and returns it.}
    sent: "2017-04-12T21:52:38.850Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea15e8fcce56b20f7d589"
    text: {So it lets us assign the value to a variable while writing the the console at the same time?}
    sent: "2017-04-12T21:51:26.004Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea1088e4b63533dc22a0f"
    text: {@AlexanderBaggett `probe` just prints value and returns it.}
    sent: "2017-04-12T21:50:00.132Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eea0de8fcce56b20f7d3dd"
    text: {>> length? load %del.me^/== 3^/>> length? read %del.me^/== 17^/>> }
    sent: "2017-04-12T21:49:18.307Z"
    editedAt: "2017-04-12T21:49:36.718Z"
    v: 2
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58eea0238bb56c2d11a0b9b0"
    text: {What does probe do in your example.  The read and load line both work fine without it.}
    sent: "2017-04-12T21:46:11.837Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58ee9fc0bdf4acc1125398ca"
    text: "I see"
    sent: "2017-04-12T21:44:32.027Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58ee9f848e4b63533dc22239"
    text: "`load` is doing `load read` when given `file!`"
    sent: "2017-04-12T21:43:32.018Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ee9f314cb8d091738594db"
    text: {@AlexanderBaggett ^/```^/>> write %del.me [this: is "code"]^/>> probe read %del.me^/{[this: is "code"]}^/== {[this: is "code"]}^/>> probe load %del.me^/[this: is "code"]^/== [this: is "code"]^/>> probe length? read %del.me^/17^/== 17^/>> probe length? load %del.me^/3^/== 3^/```}
    sent: "2017-04-12T21:42:09.177Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ee9ed1408f90be66b54581"
    text: "Thanks for the clarification"
    sent: "2017-04-12T21:40:33.317Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58ee9ea9ad849bcf427aea43"
    text: {@AlexanderBaggett `save` stores `load`able format. `write` stores bytes.}
    sent: "2017-04-12T21:39:53.939Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ee9db1a0e4856242fb5cc4"
    text: {Hi all. What is the difference between Write and Save in Red/Rebol?}
    sent: "2017-04-12T21:35:45.923Z"
    v: 1
    author: "58e78bead73408ce4f56c7f0"
) #(
    id: "58ee5576408f90be66b3f1c8"
    text: "Happy to help. :^^)"
    sent: "2017-04-12T16:27:34.248Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ee550d8bb56c2d119f5ae3"
    text: {```^/digit: charset "0123456789"^/date: [2 digit #"-" 2 digit #"-" 2 digit]^/^/text: "welcome 12-01-17 how are you"^/parse text [some [copy d date (print 'date!)| pos: (probe pos) skip]]^/d            ; == "12-01-17"^/```}
    sent: "2017-04-12T16:25:49.885Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ee54a4ad849bcf427996e4"
    text: "Thanks Gregg Irwin"
    sent: "2017-04-12T16:24:04.503Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58ee547f8fcce56b20f67994"
    text: {Without the `| skip` part, the rule will try to match the date from the first character of the string, fail, and give up (because no alternative rule is provided, and `some` is not advancing the input), returning `false` to show that the rules didn't match the input.^/```lisp^/>> d: none^/== none^/>> parse text [some [copy d date]]^/== false^/>> d^/== none^/```}
    sent: "2017-04-12T16:23:27.064Z"
    editedAt: "2017-04-12T16:25:56.188Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ee547aad849bcf42799668"
    text: {When learning, you can use set-words in rules to mark the current position in the input, which you can then probe to debug.}
    sent: "2017-04-12T16:23:22.090Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ee5440f22385553d34c447"
    text: {So the above example says "one or more times, copy text matching a date or advance" If you don't advance, it will just sit there trying to match a date at the head of the text.}
    sent: "2017-04-12T16:22:24.090Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ee53e98bb56c2d119f564e"
    text: "If I not use skip what will happen"
    sent: "2017-04-12T16:20:57.886Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58ee53aab52518ed4d05c82c"
    text: {`some` means "one or more". `skip` advances one element, not trying to match.}
    sent: "2017-04-12T16:19:54.083Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "58ee53998fcce56b20f675e7"
    text: "some will match 1 or more time "
    sent: "2017-04-12T16:19:37.097Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58ee5373b52518ed4d05c773"
    text: "Have you read the docs?"
    sent: "2017-04-12T16:18:59.988Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ee5364bdf4acc112523476"
    text: "Why use some and skip"
    sent: "2017-04-12T16:18:44.704Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58ee53338e4b63533dc0c0ae"
    text: "Parse text [ date ]"
    sent: "2017-04-12T16:17:55.002Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58ee520469a692963ea3b004"
    text: {@raton3062015 See also Rebol [Parse docs](http://www.rebol.com/docs/core23/rebolcore-15.html). For your example, here is some rules to get you started:^/```lisp^/digit: charset "0123456789"^/date: [2 digit #"-" 2 digit #"-" 2 digit]^/^/text: "welcome 12-01-17 how are you"^/parse text [some [copy d date | skip]]^/d            ; == "12-01-17"^/```}
    sent: "2017-04-12T16:12:52.116Z"
    editedAt: "2017-04-12T16:16:27.804Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ee51ac4cb8d09173842a79"
    text: { "welcome 12-01-17 how are you".   parse date }
    sent: "2017-04-12T16:11:24.608Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58ee5044bdf4acc1125221f0"
    text: {http://www.red-lang.org/2013/11/041-introducing-parse.html}
    sent: "2017-04-12T16:05:24.208Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ee4fe1f22385553d34abbf"
    text: {Pls give some example on parse. Especially use of keyword. }
    sent: "2017-04-12T16:03:45.470Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58ee4eb84cb8d09173841718"
    text: {You can post in red/help. If enough messages build up on `parse` we can create a room.}
    sent: "2017-04-12T15:58:48.446Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ee443769a692963ea3639c"
    text: {There should be a room on red/parse. Because we new comer want to learn red parse }
    sent: "2017-04-12T15:13:59.456Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58ee43c38e4b63533dc067f6"
    text: "Red/parse "
    sent: "2017-04-12T15:12:03.196Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58edeec108c00c092a72381b"
    text: {Once you've "misread" something it's difficult to re-read it without your brain assuming it says what you "misread" previously.}
    sent: "2017-04-12T09:09:21.828Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58edec5608c00c092a722c8f"
    text: {Well, no problem, small details can be easily missed when learning a new API. ;-)}
    sent: "2017-04-12T08:59:02.576Z"
    editedAt: "2017-04-12T08:59:17.295Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58edebe7ad849bcf42778680"
    text: {Yep. Guilty as charged. ;) I was using that document too. doh!}
    sent: "2017-04-12T08:57:11.742Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58edeb62ad849bcf42778411"
    text: {@Scaremonger Did you miss the Red/View [documentation](https://doc.red-lang.org/en/view.html)? In [event list](https://doc.red-lang.org/en/view.html#_event_names) you can find:^/`click | mouse | Left mouse click (button widgets only).`.}
    sent: "2017-04-12T08:54:58.487Z"
    editedAt: "2017-04-12T08:55:05.150Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ede0b1408f90be66b1c2e5"
    text: {@endo64 - Thats a good example and I was so close. @dockimbel - As I was only getting button clicks; thats obvious now, but sometimes you just can't see where you're going wrong. Thanks guys.}
    sent: "2017-04-12T08:09:21.590Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58eda20eb52518ed4d02b60c"
    text: {@Scaremonger `click` event is (for now) only available for `button` faces, use `down` for other faces to detect when the left mouse button is down.}
    sent: "2017-04-12T03:42:06.520Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ed49518e4b63533dbc636b"
    text: {React is completely different idea, have a look at `react-test.red` file in the repository.}
    sent: "2017-04-11T21:23:29.840Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58ed491408c00c092a6fc48d"
    text: {Here is a quick example on `actors` on `window` faces:^/```^/win: make face! [^/^-type: 'window^/^-size: 300x300^/^-actors: object [^/^-^-on-down: function [face event] [^/^-^-^-print "Window click"^/^-^-]^/^-^-on-alt-down: function [face event] [^/^-^-^-print "Window right click"^/^-^-]^/^-^-on-key: function [face event] [^/^-^-^-if event/key = #"^^[" [unview] ;escape to quit^/^-^-]^/^-]^/]^/^/view win^/```}
    sent: "2017-04-11T21:22:28.785Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58ed3a2fa0e4856242f550c5"
    text: {I'm having problems understanding GUI events. The documentation mentions actors, react and events, but I don't really get the difference! Does anyone have some example event code for "over", "click", "right-click" etc on a window rather than a button or panel? I've tried playing with the test code below and the commented blocks show my unsuccessful attempts. The only thing I received was button click events, but not those from the window itself. Where am I going wrong?^/```^/Red [ Needs: View ]^/^/mainwindow: layout [^/^-title "TESTAPP"^/^-button "OKAY" [print ["OK Pressed" ]]^/^/^-;on-click: func [ face [object!] event [event!]] [^/^-;^-print [ "click" ]^/^-;]^/]^/^/;mainwindow/react [ face ] [^/;^-switch event/click [ print "clicked" ]^/;]^/^/mainwindow/actors: make object! [^/^-on-click: func [face [object!] event [event!]] [ ^/^-^-print[ "click" ]^/^-]^/]^/^/view mainwindow^/```^/}
    sent: "2017-04-11T20:18:55.300Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58ed13e28bb56c2d119a046e"
    text: "puny mortals!"
    sent: "2017-04-11T17:35:30.447Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ed0a54408f90be66ae60a6"
    text: ":)"
    sent: "2017-04-11T16:54:44.464Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ed05708fcce56b20f0dab1"
    text: {top #1 HN post: whining about electron consuming too much resources as a platform :D}
    sent: "2017-04-11T16:33:52.551Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58ec4d4b8e4b63533db7e2e9"
    text: {I do have to set a https_proxy env var when I have to install python packages, so it's pretty tight}
    sent: "2017-04-11T03:28:11.814Z"
    editedAt: "2017-04-11T03:28:23.962Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec4c99b52518ed4dfcf29b"
    text: {JFYI I have to run a virus scan, so it will be interesting to see what happens :-) I understand about false positives, so I'm not expecting any issues}
    sent: "2017-04-11T03:25:13.518Z"
    editedAt: "2017-04-11T03:25:29.422Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec4c8108c00c092a6b4196"
    text: {yeah, both of those cause the same issue (red-062.exe is quarantined & effectively removed)}
    sent: "2017-04-11T03:24:49.423Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec4c04a0e4856242f0f2c4"
    text: "ok - thanks"
    sent: "2017-04-11T03:22:44.347Z"
    editedAt: "2017-04-11T03:22:47.989Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec4b7e8e4b63533db7dc3b"
    text: {Perhaps your corporate policies don't like plain http websites. You could check by trying both:^/```read https://bbc.co.uk``` and ```read http://bbc.co.uk```}
    sent: "2017-04-11T03:20:30.507Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58ec4abd408f90be66ab14d8"
    text: "yes"
    sent: "2017-04-11T03:17:17.156Z"
    editedAt: "2017-04-11T03:17:26.692Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec4a9c68bee3091f2e087b"
    text: {@michaeldesu Do you get the same trigger if you just read the webpage?^/```webpage: read http://www.red-lang.org```}
    sent: "2017-04-11T03:16:44.910Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58ec4a1768bee3091f2e0683"
    text: {JFYI I just tried that parse read http://www.red-lang.org example at work, and it triggered a Symantec endpoint trigger ([SONAR.Heuristic.159](http://securityresponse.symantec.com/security_response/writeup.jsp?docid=2017-010520-1048-99&tabid=2)) probably our aggresive corp antivirus}
    sent: "2017-04-11T03:14:31.225Z"
    editedAt: "2017-04-11T03:15:03.323Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec48d14cb8d091737b6eaf"
    text: {@PeterWAWood Thanks alot for that - great references. @dockimbel Sounds great. Thanks for your reply.}
    sent: "2017-04-11T03:09:05.075Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec40d808c00c092a6b1d26"
    text: {@michaeldesu Searching performance could be much faster, it is not optimized at all currently, we'll get it done on the road to 1.0.}
    sent: "2017-04-11T02:35:04.185Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58ec3dcf408f90be66aae8c3"
    text: {This parse rule counts the number of times 'the' appears in the Red homepage:^/```text^/parse read http://www.red-lang.org [(count: 0) any [thru "the" (count: count + 1) | thru end (print count)]]^/```}
    sent: "2017-04-11T02:22:07.799Z"
    editedAt: "2017-04-11T02:24:04.173Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58ec3c19a0e4856242f0c09a"
    text: {@michaeldesu Try this: ```parse "I called the phone" [to "the" thru end]```}
    sent: "2017-04-11T02:14:49.289Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58ec3a118bb56c2d11963828"
    text: {However searching via `find` is impressively quick. I loaded a huge XML file about 300Mb into a variable, and it took around 30 s to scan it looking for an ad-hoc string. This is really nice.}
    sent: "2017-04-11T02:06:09.846Z"
    editedAt: "2017-04-11T02:06:43.864Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec390e68bee3091f2dcbc5"
    text: {after finding this interesting [reference](http://rebol-land.blogspot.com.au/2013/12/count-string-occurrence-in-string.html) but I think it's overkill for simple searches. So I think `Find/any` will be a useful addition for simpler searches (until I learn some more). Parse looks really powerful for validation.}
    sent: "2017-04-11T02:01:50.984Z"
    editedAt: "2017-04-11T02:02:56.041Z"
    v: 3
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec38aebdf4acc112491487"
    text: {Thanks. I'm not finding parse particularly intuitive after learning regex, e.g. finding say, the word 'the' in a string like "I called the phone" is pretty trivial in regex. The closest I can get with parse is something like `parse "I called the phone" [some [thru "the"]]` - am I on the right track?}
    sent: "2017-04-11T02:00:14.024Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec35cbf22385553d2b8c68"
    text: {`Find/any` will come, and is basic wildcard matching, not full regex.}
    sent: "2017-04-11T01:47:55.397Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ec1c09408f90be66aa7af9"
    text: {Thanks. It's interesting about the regex past - it'll be interesting to see how parse compares or is better.}
    sent: "2017-04-10T23:58:01.787Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec1a95f22385553d2b3085"
    text: {There are some things that are not the same right now between the Red version and the Rebol version, so don't be afraid of a few bumps in the road.  If you hit a bump, don't be afraid to ask here or in the red/help room}
    sent: "2017-04-10T23:51:49.790Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec19ecf22385553d2b2f15"
    text: "Thanks again"
    sent: "2017-04-10T23:49:00.229Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec195668bee3091f2d6216"
    text: {From the Rebol/Core Users Guide^/http://www.rebol.com/docs/core23/rebolcore-15.html}
    sent: "2017-04-10T23:46:30.022Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec19008fcce56b20ecfee0"
    text: {http://www.red-lang.org/2013/11/041-introducing-parse.html}
    sent: "2017-04-10T23:45:04.002Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec18ef8e4b63533db72f45"
    text: {@gltewalt Thanks alot for your guidance, I'll check it out}
    sent: "2017-04-10T23:44:47.942Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ec18acad849bcf426fbf44"
    text: {@michaeldesu  `parse` is a whole dialect for regex type things}
    sent: "2017-04-10T23:43:40.537Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58ec187ea0e4856242f04123"
    text: {Thanks Rudolf & Gregg for your continuing guidances. It's appreciated. I'm experimenting with loading  text files and searching using `find`.  I noticed there is `/any` but it seems unavailable. Is there a plan to have it, and also how about regex or similar search capability?}
    sent: "2017-04-10T23:42:54.596Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58ebc367b52518ed4dfad1ed"
    text: {And any value can be used as a "key". That is, path notation works like `select`, returning the value that comes next, after the one you specify. It is not limited to name-value pairs.^/```^/>> data: [a 2x2 c %test d]^/== [a 2x2 c %test d]^/>> data/(2x2)^/== c^/```}
    sent: "2017-04-10T17:39:51.514Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ebbddf8fcce56b20eb64e7"
    text: {@michaeldesu `/(...)` is needed if the value used as a selector is semantically valid, but lexically forbidden after the `/`, e.g. a character literal like `#"a"`}
    sent: "2017-04-10T17:16:15.158Z"
    editedAt: "2017-04-10T17:17:57.180Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58eb919c68bee3091f2b0265"
    text: "@geekyi I mean 1 & 2."
    sent: "2017-04-10T14:07:24.069Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
)#(
    id: "58eb7b1ebdf4acc11245cabb"
    text: {But if you care only about the values in series, `foreach` is definitely better.}
    sent: "2017-04-10T12:31:26.266Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb7b144cb8d0917377ee60"
    text: "thanks again!"
    sent: "2017-04-10T12:31:16.987Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eb7b028e4b63533db4464b"
    text: {If you want numerical index, `repeat` is better than `foreach`}
    sent: "2017-04-10T12:30:58.359Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb7adb8bb56c2d1192e2a8"
    text: {@michaeldesu it is simple, `paren!` gets evaluated first: 1) it prints first names - "bill" and 2) it returns value of i - 2. That value is taken as index for names and "mary" gets printed}
    sent: "2017-04-10T12:30:19.304Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb7adabdf4acc11245c9d9"
    text: {I kinda thought the one in an example I saw ^/```^/repeat i (length? names) [print [names/:i]]^/```^/seems a bit easier to follow, or the foreach one is better again}
    sent: "2017-04-10T12:30:18.125Z"
    editedAt: "2017-04-10T12:31:02.942Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eb7a92b52518ed4df9744b"
    text: {@rebolek thanks, wow that's a bit of a head-scratcher for a newbie like me- I will study it}
    sent: "2017-04-10T12:29:06.422Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eb7a084cb8d0917377e92b"
    text: {@michaeldesu ^/```^/>> print names/(print first names i)^/bill^/mary^/```}
    sent: "2017-04-10T12:26:48.240Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb79fb68bee3091f2a944c"
    text: {BTW I like the tweeted direction of the colours in the console - I noticed the colour changed on string completion (like closing quote) this is nice. }
    sent: "2017-04-10T12:26:35.977Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eb79bb08c00c092a67a766"
    text: "@dockimbel Thanks so much"
    sent: "2017-04-10T12:25:31.392Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eb79a108c00c092a67a659"
    text: {@michaeldesu The idiomatic form is `/:i`, the latter approach is slower as it does a sub-evaluation of the expression(s) in the paren and returns the result of last evaluation.}
    sent: "2017-04-10T12:25:05.156Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58eb791db52518ed4df96c6f"
    text: {@greggirwin  thanks. The built-in help in console is very useful. BTW I've noticed that^/```^/names: ["bill" "mary" "jane"]^/i: 2^/print names/:i```^/and^/```^/print names/(i)```^/i.e. /:i and (i) appear to be functionally identical. Is there any problem with the latter approach, is any preferred?^/}
    sent: "2017-04-10T12:22:53.570Z"
    editedAt: "2017-04-10T12:23:19.048Z"
    v: 2
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58eb33288fcce56b20e8ee7a"
    text: "I'm moving this conversation to gritter chanel"
    sent: "2017-04-10T07:24:24.102Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eb31714cb8d0917376bed2"
    text: "@geekyi interesting, I still get zero."
    sent: "2017-04-10T07:17:05.810Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb309bad849bcf426b9ad2"
    text: {@rebolek I'm getting [4 messages](https://gitter.im/api/v1/rooms/570387cd187bb6f0eaddec47/chatMessages?q=Gritter&lang=en&limit=30) tho}
    sent: "2017-04-10T07:13:31.675Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eb27fc8e4b63533db2dffc"
    text: {However, search for"Gritter" returns empty block:^/```^/>> messages: gitter/get-messages/with 'red/red/welcome [q: "Gritter"]^/== []^/```^/even if there is at least one message with string "Gritter" in this room. So the search on Gitter **is** limited.}
    sent: "2017-04-10T06:36:44.059Z"
    editedAt: "2017-04-10T06:37:08.352Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb273ff22385553d26f4b2"
    text: {I pushed some fixes and search should be:^/```^/>> messages: gitter/get-messages/with 'red/red/welcome [q: "gitter"]^/>> print messages/33/text^/@keesse You can render nicely the posted source code on Gitter by enclosing it with 3 backquotes on a head line, then 3 backquotes on a bottom line.^/```}
    sent: "2017-04-10T06:33:34.993Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb25218fcce56b20e8b652"
    text: "Hm, that doesn't seem right :)"
    sent: "2017-04-10T06:24:33.831Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb24b3408f90be66a621f4"
    text: {Searching with `%gitter-api.red`:^/```^/>> do %gitter-api.red^/>> messages: gitter/get-messages/with 'red/red/welcome "q=gritter"^/>> print messages/50/text^/Gitter backend search api does have some hidden functions which you have to search for (not very discoverable)^/```}
    sent: "2017-04-10T06:22:43.985Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb2385b52518ed4df80498"
    text: {Gitter backend search api does have some hidden functions which you have to search for (not very discoverable)}
    sent: "2017-04-10T06:17:41.015Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eb234aa0e4856242ebddb6"
    text: {@rebolek yeah of course :smile: , right now, the workflow is download using your tool and working on it using custom functions..not that usable I guess}
    sent: "2017-04-10T06:16:42.747Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eb2238f22385553d26e1e3"
    text: {@geekyi There is no search UI in Gritter yet, but the API can be used for searching (it may need some wrapper function for easier searching, because API is not very user friendly in this regard).}
    sent: "2017-04-10T06:12:08.468Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58eb212b8fcce56b20e8a9c3"
    text: {But rebolek's gritter could be a better solution in the long term I think, if we're able to build a better ui. It's pretty easy to get started with, do check out, and ask in https://gitter.im/gitterHQ/gitter if you have problems..}
    sent: "2017-04-10T06:07:39.691Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eb20aaad849bcf426b5fce"
    text: {This FAQ problem could supposedly be solved by gitter TOPICS, which, last I heard, is still in beta}
    sent: "2017-04-10T06:05:30.823Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eb206608c00c092a663521"
    text: {You could report problems to gitterHQ channel (tho most of the time, their devs are busy implementing what takes more priority such as scaling)}
    sent: "2017-04-10T06:04:22.242Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58eb2001408f90be66a61272"
    text: {@Scaremonger  @nc-x ^/> search option on gitter rarely works^/^/What do you mean?^/1. Search not returning results^/2. Search ui is bad (when you scroll, pop ups open and close)^/3. Search results not relevant^/^/For 1, is a problem with gitter client sending multiple requests; solution: I copy and paste what I want in search field. For 2, I use mouse wheel. 3, I don't have problems with}
    sent: "2017-04-10T06:02:41.398Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58ea6c5408c00c092a63d7d3"
    text: {@Scaremonger, in addition to full history, it would be great to extract things into organized FAQ/wiki areas.}
    sent: "2017-04-09T17:16:04.765Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ea6c144cb8d09173743c5d"
    text: {:point_up: [April 9, 2017 5:31 AM](https://gitter.im/red/red/welcome?at=58ea1b9ef22385553d2363a2) @michaeldesu, Not only can you spec multiple types, as you did: `fn: func[x [integer! float!]][x: x + 1]`, but Red has a concept of typesets, which let you group types together. Many are built in, but you can create your own as well. Do `help typeset!` in the console to see the standard ones. You'll see that `number!` is there, and you can use that in func specs. There are also helper funcs (e.g. `any-string?`) to test for typeset membership.^/}
    sent: "2017-04-09T17:15:00.017Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ea499d08c00c092a635342"
    text: {I already have Stackoverflow in my bookmarks and found it useful so far, but I tried the gitter search earlier and didn't seem very good. I'll take a look at  @rebolek 's api. Thanks again.}
    sent: "2017-04-09T14:47:57.121Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58ea26afbdf4acc11240e4d5"
    text: {Messages are stored in simple format, each message is `map!` with 5 fields (when you use `/only` refinement), looking like this:^/```^/#(^/    id: "573ea8777aab25fb459d157e"^/    text: {The above image is part of (A) . IDK why it got uploaded late...}^/    sent: "2016-05-20T06:02:31.228Z"^/    v: 1^/    author: "5680c5f416b6c7089cc058a5"^/)^/```}
    sent: "2017-04-09T12:18:55.716Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ea26478bb56c2d118e11ff"
    text: {Yes,it is part of my Gitter API available here: https://github.com/rebolek/gritter . Downloader is in `%gitter-tools.red`, `download-all-messages/only`. There are also some support functions for searching. @Scaremonger  I am working exactly on that, extracting questions to help newbies, but it takes time. Contact me privately, if you have any questions.}
    sent: "2017-04-09T12:17:11.750Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ea22bbad849bcf4267f492"
    text: {IIRC @rebolek created a tool that could extract and store all the messages from gitter? If searching through those messages is possible then it is great.}
    sent: "2017-04-09T12:02:03.068Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ea227ea0e4856242e86cbf"
    text: "BTW the search option on gitter rarely works"
    sent: "2017-04-09T12:01:02.602Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ea22708fcce56b20e5512d"
    text: {@Scaremonger you can use the Search option on gitter. Also check Red questions on stackoverflow and the mailing list.}
    sent: "2017-04-09T12:00:48.712Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58ea1e458e4b63533daf5161"
    text: {This community is great, but is there an archive or a way to search through other peoples historic questions so newbies (like me) can find an answer without having to ask the same questions from you guys?}
    sent: "2017-04-09T11:43:01.833Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58ea1b9ef22385553d2363a2"
    text: {@geekyi  Thanks for showing the way with the multiple types part. I had no idea that was possible, and the fact the type is in a block makes sense for multiple types support. I experimented with the following in the console^/```fn: func[x [integer! float!]][x: x + 1]```^/and was surprised that it works as expected when passing in either type (I found this was mentioned [here](http://www.rebol.com/docs/core23/rebolcore-9.html#section-3.1)^/*Arg Type  A block that identifies the data types that are accepted by the function*^/This is an interesting & unexpected feature.}
    sent: "2017-04-09T11:31:42.067Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e9e4a1408f90be66a20369"
    text: {@michaeldesu to add to what everyone says here, you *could* argue that it is by convention. And you can override `function` to make it work that way easily. But my counter is.. Would it be better? What about accounting for the rest of the language? What about supporting arguments with multiple types? `[integer! string!]`}
    sent: "2017-04-09T07:37:05.212Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58e9a0177ea420cc4250a5e1"
    text: {Thanks @maximvl , @greggirwin  The community here is great.}
    sent: "2017-04-09T02:44:39.453Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e9453bf22385553d20d44f"
    text: "@greggirwin - Cheers. Good to know."
    sent: "2017-04-08T20:16:59.358Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e944c0ad849bcf42654971"
    text: {@dockimbel - Thanks for that. It's a good to know how easy it is to interface to the Win32 API too.}
    sent: "2017-04-08T20:14:56.345Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e90bbe8e4b63533dabcc1c"
    text: {When you're new to Red, a good way to learn (in addition to asking here), is to play in the console. You don't have to compile, and you can experiment easily.}
    sent: "2017-04-08T16:11:42.899Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e90b828e4b63533dabcac8"
    text: {:point_up: [April 8, 2017 5:28 AM](https://gitter.im/red/red/welcome?at=58e8c96fad849bcf42637ed8) Datatype declarations on function parameters do not cause any type coercion. They are strictly for type checking.^/```^/>> fn: func [i [integer!]][print i]^/== func [i [integer!]][print i]^/>> fn 1.0^/*** Script Error: fn does not allow float! for its i argument^/*** Where: fn^/```}
    sent: "2017-04-08T16:10:42.404Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e8efd28fcce56b20e164c9"
    text: {@michaeldesu Hi,^/>I have a question about function declaration^/^/The interesting thing is that Red doesn't have function declaration in usual sense, all values including functions are anonymous and `x: function ...` is just assignment of function value returned by function `function` to the word `x`, the same as `x: 5` :)}
    sent: "2017-04-08T14:12:34.121Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58e8e527408f90be669ec120"
    text: {@Scaremonger Here is the code for keeping the window on top (Windows plateforme only):^/```lisp^/Red [Needs: View]^/^/set-top: routine [hWnd [handle!]][^/^-gui/SetWindowPos as int-ptr! hwnd/value as int-ptr! -1 0 0 0 0 3^/]^/^/win: view/no-wait [title "Top" text "I'm always on top"]^/set-top win/state/1^/do-events^/```^/This code relies on Red/System, so it need to be compiled `red -r <script.red>`. You can use `#include` to include your app code, so that you can develop your app and test it from the console, and when ready, you can use this script to include your code and get the window flagged properly to stay on top.}
    sent: "2017-04-08T13:27:03.672Z"
    editedAt: "2017-04-08T13:27:20.165Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8daf28bb56c2d1189b8b2"
    text: {@Scaremonger No built-in way to get the Window always on top for now. You can use a call to `SetWindow()` from win32 API for that, though you'll need to write a routine! in Red/System for that for now (you should be able to do that from Red directly soon).}
    sent: "2017-04-08T12:43:30.068Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8cf614cb8d091736eca7b"
    text: "np. I'll post it over in red/gui-branch"
    sent: "2017-04-08T11:54:09.719Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e8cdfcb52518ed4df033f0"
    text: "Sorry, I'm not familiar with view/ui stuff yet."
    sent: "2017-04-08T11:48:12.100Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e8cd3668bee3091f213769"
    text: {Most of the time it sits as a sidebar at the edge of the screen.}
    sent: "2017-04-08T11:44:54.678Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e8cd0fad849bcf42638aff"
    text: {Not really. My application doesn't want to be exclusive on top. Just never go behind any other application.}
    sent: "2017-04-08T11:44:15.911Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e8cce0408f90be669e6965"
    text: "i.e. modal?"
    sent: "2017-04-08T11:43:28.612Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e8ccad408f90be669e68dd"
    text: {Don't suppose anyone knows how to make a window "allways on top"?}
    sent: "2017-04-08T11:42:37.933Z"
    v: 1
    author: "58e02049d73408ce4f557047"
)#(
    id: "58e8cc62408f90be669e6705"
    text: "I'm just trying to get my head around the GUI :("
    sent: "2017-04-08T11:41:22.095Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e8cc364cb8d091736ebfad"
    text: {I'm looking forward to trying out Android, but I noticed in the planned additions that AVR support was 15% complete... That is rather exciting too.}
    sent: "2017-04-08T11:40:38.413Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e8cc188e4b63533daad613"
    text: {I will study Red (I come from Python background, so I'm interested to explore the nice syntax of Red)}
    sent: "2017-04-08T11:40:08.986Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e8cbd74cb8d091736ebefa"
    text: {Indeed, this year should bring a lot of great features. ;-)}
    sent: "2017-04-08T11:39:03.701Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8cbbbb52518ed4df02b62"
    text: {Thanks Nenad - looking forward to future updates, particularly for Android - I noticed the tweet about Mac - exciting times!}
    sent: "2017-04-08T11:38:35.598Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e8cbb00e4137042af644db"
    text: {@raton3062015 Red is still very new (just 0.6.2) and not much known yet. Though, you can have a look at http://rosettacode.org/wiki/Rosetta_Code and see the examples for [Red](http://rosettacode.org/wiki/Category:Red) and [Rebol](http://rosettacode.org/wiki/Category:REBOL).}
    sent: "2017-04-08T11:38:24.457Z"
    editedAt: "2017-04-08T11:38:33.552Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8ca9a8e4b63533daacf16"
    text: {@michaeldesu Welcome! Thanks for the nice words. The block usage is necessary to separate type specification from arguments names. Both `x` and `integer!` are words in a unreduced block, so there is no way to tell for the function constructor. Moreover, mixing argument names and type specifier can lead to very hard to read function specifications:^/```lisp^/function [series block! string! path! value integer! char! path path!]^/vs^/function [series [block! string! path!] value [integer! char!] path [path!]]^/```}
    sent: "2017-04-08T11:33:46.787Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8ca7c0e4137042af63f1c"
    text: {there are lots of websites for sharpen programming skills by providing solution with different pro language. But no one use red language. I am looking forward earnestly a website where I can solve provided problems with my beloved tool red.}
    sent: "2017-04-08T11:33:16.065Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8ca730e4137042af63ef5"
    text: {@michaeldesu I don't know why yet either, i'm just taking it as the way things are for the moment. Good to know that the sq brackets are required though. I hadn't tried it without.}
    sent: "2017-04-08T11:33:07.448Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e8c9faf22385553d1f07fc"
    text: {it's not a problem.. I was just wondering.. maybe the square brackets puts the type declaration into a block for some other purpose}
    sent: "2017-04-08T11:31:06.716Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e8c9d18bb56c2d11897915"
    text: {@Scaremonger , thanks - I'm asking from a cosmetic angle,  i.e. to me the extra square brackets around integer looks a bit noisy, i.e. the following looks cleaner to me, but of course is not permitted^/inc: function [x integer!]^/}
    sent: "2017-04-08T11:30:25.672Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e8c96fad849bcf42637ed8"
    text: {@michaeldesu: I'm just learning too, but I think the optional [integer!] does a type conversion to make sure that you always receive an integer.}
    sent: "2017-04-08T11:28:47.930Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e8c965ad849bcf42637ece"
    text: {Find "raton" Flag  = aton ,where a is set in flag}
    sent: "2017-04-08T11:28:37.305Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8c91208c00c092a5e4b5d"
    text: {Flag: charset "abcdefg" , means 65 66 67 ... Bit are set and }
    sent: "2017-04-08T11:27:14.384Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8c8ea4cb8d091736eb63a"
    text: {@raton3062015 That's right. And the mapped data is codepoints or just plain integers.}
    sent: "2017-04-08T11:26:34.677Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8c8e28e4b63533daac981"
    text: {and to specify type, you do, e.g. ^/inc: function [x [integer!]]^/I wonder why the brackets around integer! is needed - is it just language convention, or there some reason?}
    sent: "2017-04-08T11:26:26.895Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e8c8bbb52518ed4df020d8"
    text: {so I can say bitset is a map of character where the bit is set as per the data provided}
    sent: "2017-04-08T11:25:47.609Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8c8a168bee3091f212751"
    text: "I see this is usual ^/inc: function [x]"
    sent: "2017-04-08T11:25:21.346Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e8c893f22385553d1f0347"
    text: {Hi - I'm a newcomer to Red and Rebol, so studying it from scratch - firstly thanks alot Nenad & other contributors for making Red - it's rather fantastic (and VS Code plugin is nice) - I have a question about function declaration}
    sent: "2017-04-08T11:25:07.087Z"
    v: 1
    author: "5767b3e5c2f0db084a1edda3"
) #(
    id: "58e8c80a68bee3091f212645"
    text: {```lisp^/>> n: 23^/== 23^/>> n: n or (1 << 6)^/== 87^/```}
    sent: "2017-04-08T11:22:50.577Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8c7c68e4b63533daac606"
    text: {@raton3062015 If what you want to achieve is bit-level manipulations, bitsets are not for that, just use base math/bitwise operators:}
    sent: "2017-04-08T11:21:42.266Z"
    editedAt: "2017-04-08T11:24:10.376Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8c71ead849bcf42637666"
    text: {n = 23; (0b00010111) ; set 6th  bit on ; (n |=1 << 6) ;; in red how I can do it with bitset!}
    sent: "2017-04-08T11:18:54.280Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8c4518bb56c2d118967a4"
    text: "@raton3062015 Please ignore that post."
    sent: "2017-04-08T11:06:57.924Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8c43db52518ed4df011b6"
    text: {@pekr Your post is offtopic here and confusing newcomers who are trying to learn Red.}
    sent: "2017-04-08T11:06:37.755Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8c3a08fcce56b20e0bec6"
    text: {@raton3062015 that is something that was just proposed, but does not work in Red (yet), so ignore it.}
    sent: "2017-04-08T11:04:00.915Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e8c36c8e4b63533daab424"
    text: {what is happening here? open is converted into an index or group of index and set those index true?}
    sent: "2017-04-08T11:03:08.073Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8c25608c00c092a5e35f4"
    text: {flags: make bitset! [ open] ,  flags is an array of bits. which bit is set here.  }
    sent: "2017-04-08T10:58:30.858Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8c0c5408f90be669e3e78"
    text: {@dockimbel in the past, Carl planned to introduce something like "named bits", which might be useful for flags, etc. Would you find anything like it useful in Red?^/^/```^/flags: make bitset! [opened closed connecting exited async]^/^/if not flags/opened [^/    flags/closed: true^/]^/```}
    sent: "2017-04-08T10:51:49.783Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58e8bf71b52518ed4deffec5"
    text: ">> in c , n= 0b0001"
    sent: "2017-04-08T10:46:09.130Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8bf700e4137042af61b84"
    text: {A bitset is just an array of bits, nothing more. They are often used as "charsets", as it is convenient to map Unicode codepoints to indexes in such array. For example: #"A" => 65, #"B" => 66, .... So when you flip bits in a bitset to represent a list of characters, checking if a character is in such list or not, becomes as easy as checking if the bit at that codepoint index in the array is set to 1 or 0.}
    sent: "2017-04-08T10:46:08.085Z"
    editedAt: "2017-04-08T10:46:50.326Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8beb7408f90be669e370e"
    text: {Actually I can not comprehend the basic of bitset. If I can then everything will be clear . suppose >> bits: make bitset! #"a". }
    sent: "2017-04-08T10:43:03.014Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8bcb28e4b63533daa9bf1"
    text: {@raton3062015 Try going through [this document](http://www.rebol.com/r3/docs/datatypes/bitset.html) first. If there are parts you don't get, feel free to ask here or in red/help.}
    sent: "2017-04-08T10:34:26.731Z"
    editedAt: "2017-04-08T10:34:46.807Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e8ba4b7ea420cc424d7aa0"
    text: {Pls help me to understand bitset!. What is it why it is necessary? Thanks in advance to all red monks}
    sent: "2017-04-08T10:24:11.616Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e8a111408f90be669dd627"
    text: "@rebolek  Good point"
    sent: "2017-04-08T08:36:33.911Z"
    v: 1
    author: "55fe876a0fc9f982beb13bac"
) #(
    id: "58e8a0cab52518ed4def989f"
    text: {@KenSingleton your solution is fine for given input, but does not prevent types in other:^/```^/>> t: [a [b]]^/== [a [b]]^/>> split form t space^/== ["a" "b"]^/```}
    sent: "2017-04-08T08:35:22.415Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e89d7108c00c092a5dbd3b"
    text: "@raton3062015  try this: split form t space"
    sent: "2017-04-08T08:21:05.937Z"
    v: 1
    author: "55fe876a0fc9f982beb13bac"
) #(
    id: "58e895a9ad849bcf4262ca78"
    text: {@raton3062015 ^/```^/>> flatten-tree: function [tree [block!]] [rule: [some [ahead block! into rule | keep skip]] parse tree [collect rule]]^/== func [tree [block!] /local rule][rule: [some [ahead block! into rule | keep skip]] parse tree [collect rule]]^/>> flatten-tree ["a" ["c" ["b" ["d"] "e"]] 1 3 "f"] ^/== ["a" "c" "b" "d" "e" 1 3 "f"]^/```}
    sent: "2017-04-08T07:47:53.070Z"
    editedAt: "2017-04-08T07:48:46.396Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e87dc8b52518ed4def298d"
    text: {flatten a block in red  ["a" ["c" ["b" ["d"] "e"]] 1 3 "f"] }
    sent: "2017-04-08T06:06:00.494Z"
    v: 1
    author: "5796611a40f3a6eec05c6980"
) #(
    id: "58e6d605ad849bcf425c179f"
    text: "sorry - I  meant  good, not big "
    sent: "2017-04-06T23:57:57.423Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "58e6d37a408f90be6697087c"
    text: {'call' is big - There is so much can be done with a o.s.  call ....}
    sent: "2017-04-06T23:47:06.033Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "58e4b2a6408f90be668dadc5"
    text: "@rebolek Good point! "
    sent: "2017-04-05T09:02:30.127Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e4b20c8bb56c2d1178b17b"
    text: {@rcqls Ok. Actually with `call` currently implemented, it should be easy to compile directly from Red console :)}
    sent: "2017-04-05T08:59:56.990Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4b16d0e4137042ae59d11"
    text: {@rebolek I meant red executable when saying red binary…. With a few lines of bash, I can have a script bash (using Rebol executable) that do almost the same thing than red executable but this former is more convenient as @dockimbel mentionned it. }
    sent: "2017-04-05T08:57:17.649Z"
    editedAt: "2017-04-05T08:57:52.958Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e4afc508c00c092a4d7456"
    text: {The `red` binary we offer for download is really just for convenience, it is not strictly required to use Red toolchain to compile any Red app (including the consoles), which can be done from sources with just a Rebol interpreter (free and easily available).}
    sent: "2017-04-05T08:50:13.780Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e4af778e4b63533d9a0d18"
    text: {You cannot compile Red executable without SDK, but you can build executables written in Red (it is bit confusing terminology).}
    sent: "2017-04-05T08:48:55.220Z"
    editedAt: "2017-04-05T08:48:59.965Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4af08ad849bcf42528286"
    text: {@rcqls that's not true. You can hapilly compile with normal Rebol from http://www.rebol.com/downloads.html . I do it few times each day.}
    sent: "2017-04-05T08:47:04.985Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e4aea58bb56c2d1178a1d4"
    text: {@qtxie Thanks for your explanation! Since there is no way to buy (or get) an SDK license it is unfortunately difficult to build red binary except for the lucky old Rebol users…. My only way is to compile with rebol binary. Not a big deal to have my own console.red with `Needs: View` added in the preamble.}
    sent: "2017-04-05T08:45:25.073Z"
    editedAt: "2017-04-05T08:45:49.023Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e4ad798fcce56b20d02304"
    text: {@rcqls It will be added automatically when you using red binary to run the console. But you need to add it manually when compiling the console from source.}
    sent: "2017-04-05T08:40:25.341Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e4a6e68bb56c2d1178803a"
    text: "@x8x Thanks! "
    sent: "2017-04-05T08:12:22.899Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e4a5a768bee3091f104b83"
    text: {@rcqls here is latest macGUI before `Needs: View` has been removed https://red.niaxa.com/tmp/red-05apr17-f70e4c4}
    sent: "2017-04-05T08:07:03.974Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
)#(
    id: "58e4a4ecb52518ed4ddf3669"
    text: {@qtxie Without `Needs: View`, `console` could not run GUI stuff. Is it on purpose? As a command line user, I would appreciate to be able to have it in console REPL. }
    sent: "2017-04-05T08:03:56.156Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e4a4048e4b63533d99de55"
    text: {@rcqls Yes. I remove it as we're preparing for merge it into master. }
    sent: "2017-04-05T08:00:04.799Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58e487f10e4137042ae4fd54"
    text: {BTW, console works perfectly now. I never test network stuff but GUI is almost ready...}
    sent: "2017-04-05T06:00:17.528Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e487947ea420cc423c4d48"
    text: {@rebolek in commandline `console` mode since `Needs: View` is  only required in the preamble of  `console.red` even if  `console` is not a GUI stuff but this provides access to view tools in the console REPL.}
    sent: "2017-04-05T05:58:44.460Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e485f3ad849bcf4251dca3"
    text: {@rcqls Yes, for GUI usage, you have to add that line manually, or use gui-console (but that can't be compiled yet). It's a hassle, but it is work in progress and will get better, I think.}
    sent: "2017-04-05T05:51:47.812Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e485328e4b63533d996265"
    text: {@rebolek I checked again and  `*** Script Error: view has no value^/*** Where: catch` is the message without `Needs: View` in `console.red`}
    sent: "2017-04-05T05:48:34.831Z"
    editedAt: "2017-04-05T05:51:24.626Z"
    v: 3
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e484f30e4137042ae4f21a"
    text: {@rcqls No, I have troubles with GUI and also networking on macOS, so I have to test things in Windows VM.}
    sent: "2017-04-05T05:47:31.321Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e483bef22385553d0d9f90"
    text: {@rebolek I had this in mind but it was no more possible to play with GUI examples with macOS. Have you tried to run tests on GUI with the last macGUI branch? }
    sent: "2017-04-05T05:42:22.195Z"
    editedAt: "2017-04-05T05:44:39.655Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e482708fcce56b20cf7385"
    text: "@rcqls I think it was there by error."
    sent: "2017-04-05T05:36:48.272Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e47cd17ea420cc423c2447"
    text: {was useful for macOS only I guess…. I though it was done in purpose thinking `gui-console.red` could compile but it was not the case….}
    sent: "2017-04-05T05:12:49.091Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e47c73ad849bcf4251bab0"
    text: {@dockimbel  recent commit`423178752300a2290897ce9359aea8b22e69acf5`}
    sent: "2017-04-05T05:11:15.065Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e47bc80e4137042ae4d101"
    text: {@rcqls are you sure it was removed? AFAIK, `Needs: View` isn't in `console.red`, only in `gui-console.red`.}
    sent: "2017-04-05T05:08:24.996Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e47a008fcce56b20cf5b22"
    text: {@dockimbel  @qtxie  don’t know why `Needs: View` has been removed in `console.red` in the `macGUI` branch. I have to put it back to have the tests or examples about GUI running .Do I miss something?  BTW, this works pretty well and looks really nice...}
    sent: "2017-04-05T05:00:48.208Z"
    editedAt: "2017-04-05T05:01:17.933Z"
    v: 2
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58e474f88bb56c2d1177c1f1"
    text: {@thinklog Mac GUI should be merged in master this week (maybe today or tomorrow). For the automated builds, one of our contributor is working on a solution, it should also be ready soon (@x8x this week?).}
    sent: "2017-04-05T04:39:20.147Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58e3de09f22385553d0b230a"
    text: {See https://github.com/red/red/tree/macGUI#running-red-from-the-sources for more details.}
    sent: "2017-04-04T17:55:21.789Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3ddc54cb8d091735af1da"
    text: {(The master branch has been merged into the macGUI branch.)}
    sent: "2017-04-04T17:54:13.474Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "58e3ddb9f22385553d0b21bf"
    text: "then run it with `./rebol`"
    sent: "2017-04-04T17:54:01.851Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3ddb87ea420cc42399b8b"
    text: "OK. Thanks."
    sent: "2017-04-04T17:54:00.071Z"
    v: 1
    author: "55c9812b0fc9f982beacf33f"
) #(
    id: "58e3dda94cb8d091735af14d"
    text: {Clone the repo, download Rebol 2.7.8 from here: http://www.rebol.com/downloads.html and unpack it}
    sent: "2017-04-04T17:53:45.177Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3dd788bb56c2d11756662"
    text: {@thinklog macGUI branch: https://github.com/red/red/tree/macGUI}
    sent: "2017-04-04T17:52:56.401Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3dd4f4cb8d091735aeef8"
    text: {Oh, I see, I was saying "yes" to your previous question about download, MacGUI has not been merged yet.}
    sent: "2017-04-04T17:52:15.142Z"
    editedAt: "2017-04-04T17:52:21.502Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3dd380e4137042ae2572d"
    text: {Where do I get the MacGUI branch, and how do I make it work?}
    sent: "2017-04-04T17:51:52.486Z"
    v: 1
    author: "55c9812b0fc9f982beacf33f"
) #(
    id: "58e3dd0c8e4b63533d96d034"
    text: {No. I'm using the official Red 0.6.2 for MacOSX download. That's why I asked my previous question regarding 0.6.3 having been marged with the official MacOSX download.}
    sent: "2017-04-04T17:51:08.800Z"
    v: 1
    author: "55c9812b0fc9f982beacf33f"
) #(
    id: "58e3dccfb52518ed4ddc3378"
    text: "Are you using MacGUI branch?"
    sent: "2017-04-04T17:50:07.977Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3dca60e4137042ae25503"
    text: "I'm on a Mac."
    sent: "2017-04-04T17:49:26.005Z"
    v: 1
    author: "55c9812b0fc9f982beacf33f"
) #(
    id: "58e3dc998e4b63533d96ce1a"
    text: "@thinklog what are you using to try it?"
    sent: "2017-04-04T17:49:13.217Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3dc76f22385553d0b1a8d"
    text: {--== Red 0.6.2 ==-- ^/Type HELP for starting information. ^/^/>> view [field hint "search text" field]^/*** Script Error: view has no value^/*** Where: catch^/>> ^/}
    sent: "2017-04-04T17:48:38.117Z"
    v: 1
    author: "55c9812b0fc9f982beacf33f"
) #(
    id: "58e3dc758bb56c2d117561e2"
    text: {@rebolek I must be misunderstanding something. This doesn't work}
    sent: "2017-04-04T17:48:36.997Z"
    v: 1
    author: "55c9812b0fc9f982beacf33f"
) #(
    id: "58e3dbc0ad849bcf424f3812"
    text: {Yes, unfortunately, there is some problem with Mac building machine, so Mac download is missing currently.}
    sent: "2017-04-04T17:45:36.069Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e3dbad0e4137042ae25018"
    text: {Is 0.6.3 that includes the macOS GUI backend already merged into the official Red 0.6.2 for MacOSX download?}
    sent: "2017-04-04T17:45:17.596Z"
    v: 1
    author: "55c9812b0fc9f982beacf33f"
) #(
    id: "58e3da6a7ea420cc42398977"
    text: {The same error is displayed when attempting to download the red binary for Mac either zipped or raw. The respective pages are http://static.red-lang.org/dl/auto/mac/red-latest.zip and http://static.red-lang.org/dl/auto/mac/red-latest }
    sent: "2017-04-04T17:39:54.803Z"
    v: 1
    author: "55c9812b0fc9f982beacf33f"
) #(
    id: "58e3da20ad849bcf424f2e5f"
    text: {Clicking on this link  "Mac OS X^-red-04apr17-78cd95a^-0 MB" goes to this page http://www.red-lang.org/p/download.html which displays a 404 Page not found error.}
    sent: "2017-04-04T17:38:40.089Z"
    v: 1
    author: "55c9812b0fc9f982beacf33f"
) #(
    id: "58e154c8f22385553d00b382"
    text: "Cheers @greggirwin ."
    sent: "2017-04-02T19:45:12.017Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e153a2f22385553d00af70"
    text: {It's easy to get started, but it sounds like you're one who will step off into the depths before long. When that happens, don't be afraid to post questions on channels here. We've all been there.}
    sent: "2017-04-02T19:40:18.333Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58e152f08bb56c2d116adce1"
    text: "... need to come up to speed with it now."
    sent: "2017-04-02T19:37:20.522Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e152d808c00c092a3fa5ed"
    text: "Thanks guys. Looks like i"
    sent: "2017-04-02T19:36:56.426Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e141658fcce56b20c23f4b"
    text: {@Scaremonger It's also worth pointing out that now that LibRed is released, it's even easier. Just include LibRed along with any code you write, you're almost certain to be able to licence and distribute the code that sits on top of it however you wish: http://www.red-lang.org/2017/03/062-libred-and-macros.html}
    sent: "2017-04-02T18:22:29.329Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e1403cb52518ed4dd172a1"
    text: {@Scaremonger I'd suggest you'd even be allowed derivative works as long as you used the same BSL licence and didn't try to use Red as the name of your software. What you suggested would be fine.}
    sent: "2017-04-02T18:17:32.217Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e11e6b8e4b63533d8b5568"
    text: {@Scaremonger IANAL, but as I understand it, you are probably correct.}
    sent: "2017-04-02T15:53:15.774Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58e11b27bc370d964edeeeee"
    text: {I always have a problem with legal scripts and not familiar with BSL. Looks like BSL allows distribution of executeables derived from Red or Red/System as long as its closed source and you've compiled it in relase mode and you don't use their product names to promote your software. If its open source you need to include all the BSL license stuff with your source. Is that the correct assessment?}
    sent: "2017-04-02T15:39:19.043Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e113e3f22385553dffb857"
    text: "@ZenoArrow, thanks. Just what i was looking for."
    sent: "2017-04-02T15:08:19.552Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58e0e9a1b52518ed4dd02ebe"
    text: {@Scaremonger If you just want to use the runtime, this is the BSL licence that the Red runtime is licenced under: https://github.com/red/red/blob/master/BSL-License.txt}
    sent: "2017-04-02T12:08:01.330Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e0e9518bb56c2d11694f8e"
    text: {@Scaremonger From the GitHub page: "Both Red and Red/System are published under BSD license, runtime is under BSL license. BSL is a bit more permissive license than BSD, more suitable for the runtime parts."}
    sent: "2017-04-02T12:06:41.143Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58e0e8a6bc370d964ede35fd"
    text: {Hey everyone. I'm trying out Red as a possible replacement of some of my current tools but can't find details on licencing for Red and for apps generated by it. Any pointers?}
    sent: "2017-04-02T12:03:50.541Z"
    v: 1
    author: "58e02049d73408ce4f557047"
) #(
    id: "58dca5608fcce56b20b0cf28"
    text: "Mobile is... lacking. I feel your pain. "
    sent: "2017-03-30T06:27:44.116Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dca1840e4137042ac5aa5f"
    text: {On mobile.. Incomplete messages get automatically posted.. 😓 }
    sent: "2017-03-30T06:11:16.672Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dc5d998fcce56b20afe58e"
    text: {@greglearns Welcome! For 0.7.0, no ETA yet, though most probably this year, as the work on it will start as soon as 0.6.3 is out.}
    sent: "2017-03-30T01:21:29.277Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58dc501a8bb56c2d11580c28"
    text: {yes, i used a 'basic' type language 'panoramic' to prototype the engine. It's so easy and quick to use - Will  use a better more compact option later.}
    sent: "2017-03-30T00:23:54.280Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "58dc4e9cf22385553ded9e19"
    text: {Cool Alan. What are you using to play them? The DL is pretty big.}
    sent: "2017-03-30T00:17:32.419Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dc4dc50e4137042ac4958a"
    text: {Here's a Red  mp3 music player:  http://www.mycode4fun.co.uk/red-apps  }
    sent: "2017-03-30T00:13:57.480Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
)#(
    id: "58dc0a48ad849bcf423095e2"
    text: ":)"
    sent: "2017-03-29T19:26:00.266Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58dc09458fcce56b20ae968e"
    text: "To create havoc, wrap it in `forever`"
    sent: "2017-03-29T19:21:41.416Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc0685f22385553dec798c"
    text: "That might be windows only though"
    sent: "2017-03-29T19:09:57.159Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dc062c08c00c092a2b531a"
    text: {lol^/```^/>> sites: [^/[     https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b^/[     https://doc.red-lang.org/en/^/[     http://www.rebol.com/docs/core23/rebolcore.html^/[    ]^/== [^/    https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855^/>> foreach site sites [browse site]^/```}
    sent: "2017-03-29T19:08:28.308Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dbfd4608c00c092a2b23e3"
    text: {@all anyone know a good online bookmarking system? The existing ones don't }
    sent: "2017-03-29T18:30:30.876Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58dbfbe68bb56c2d1156a845"
    text: "thanks!"
    sent: "2017-03-29T18:24:38.313Z"
    v: 1
    author: "570eca21187bb6f0eadf5530"
) #(
    id: "58dbfa8cf22385553dec3b10"
    text: "We need sticky posts in gitter."
    sent: "2017-03-29T18:18:52.881Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbfa7aad849bcf423048ae"
    text: {You know @9214, I have that bookmarked here, and yet I always forget about it. red-by-example.org also has a lot of stuff, and I forget to mention that as well.}
    sent: "2017-03-29T18:18:34.316Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbfa3d0e4137042ac32f29"
    text: {@greglearns https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b}
    sent: "2017-03-29T18:17:33.823Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58dbf9968fcce56b20ae4d77"
    text: {"red lang" can help, but Trello has the main roadmap.}
    sent: "2017-03-29T18:14:46.012Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58dbf993f22385553dec35c5"
    text: "got it"
    sent: "2017-03-29T18:14:43.543Z"
    v: 1
    author: "570eca21187bb6f0eadf5530"
) #(
    id: "58dbf989f22385553dec35ac"
    text: "Red language is usually the google phrase I use"
    sent: "2017-03-29T18:14:33.264Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58dbf9508fcce56b20ae4b18"
    text: {googling for Red related material is difficult since "red" is a pretty generic word. Any thoughts on how best to search for things? For example, I was about to ask "Is there an estimate as to when 0.7.0 will be out?" but then I thought that I should google it first, but then remembered that I've had a tougher time this last 12 hours finding Red stuff (Rebol is easier since it's a made-up word!) ... I just googled "red-lang 0.7" and probably got my answer... but...}
    sent: "2017-03-29T18:13:36.779Z"
    editedAt: "2017-03-29T18:14:40.927Z"
    v: 2
    author: "570eca21187bb6f0eadf5530"
) #(
    id: "58d01c02a84f611959c5d70b"
    text: {@geekyi It was https://trello.com/c/BW1SPeOU/48-i-o-support ^/}
    sent: "2017-03-20T18:14:26.414Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58d004612215a08f04a75544"
    text: {@lpvm ^/>Trello web page^/^/can you show what got you confused?}
    sent: "2017-03-20T16:33:37.118Z"
    editedAt: "2017-03-20T16:33:53.136Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58cffaf28fa1633954fa3485"
    text: {Red's I/O is basic today, but works very well. Full I/O will come in 0.7.0.}
    sent: "2017-03-20T15:53:22.670Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58cfe9e08fa1633954f9d39d"
    text: {@rebolek You're right! It was a Rebol3 error.  Tried it with Red and it worked fine.  I got the idea that http was not implemented because of what I saw at the Trello web page, but got it wrong.}
    sent: "2017-03-20T14:40:32.780Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58cfd7ea8fa1633954f97239"
    text: {`** Access error: protocol error: "Redirect to other host - requires custom handling"` - I think this is Rebol3 error.}
    sent: "2017-03-20T13:23:54.371Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfd7a458ad4eb0283331a0"
    text: {@lpvm Red has http(s). It does not have ports yet. But I use http(s) in Red everyday.}
    sent: "2017-03-20T13:22:44.602Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58cfd72da84f611959c46d73"
    text: "for the http (partial) rebol implementation^/"
    sent: "2017-03-20T13:20:45.531Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58cfd712a84f611959c46b6e"
    text: {As Red doesn't have http implemented yet, I tried to read html from a webpage but can't do it because of a redirect error:  `** Access error: protocol error: "Redirect to other host - requires custom handling"`.     I want to automate the process and only have information about these urls, not the redirected ones.  Is there anything I can do to still use Rebol to scrape these pages or do I have to do this in another language? http://www.rebol.net/docs/prot-http.html}
    sent: "2017-03-20T13:20:18.256Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58cfb5d5f7f7d4810436fa31"
    text: {We moved it to "Rebol enhanced dialect". ;-) Nowadays, I like to think of "Red" as a hint to "Reduce" (reduce code, reduce time, reduce costs). }
    sent: "2017-03-20T10:58:29.721Z"
    editedAt: "2017-03-20T11:00:29.383Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58cfb30e7b3f37e754171b0f"
    text: "@xqlab yup"
    sent: "2017-03-20T10:46:38.188Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cfb2e32215a08f04a5c0f2"
    text: "I thought red means reduced Rebol"
    sent: "2017-03-20T10:45:55.993Z"
    v: 1
    author: "55d18cee0fc9f982bead9e79"
) #(
    id: "58cf8c6da84f611959c310b4"
    text: {No, it's the answer, we should wait 1 million years for the question :)}
    sent: "2017-03-20T08:01:49.371Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58ced9aa590d72c864e4e56a"
    text: "That's a bigger question. "
    sent: "2017-03-19T19:19:06.279Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ced948fe6a638b1ae1705a"
    text: "@greggirwin nay, it should be 42"
    sent: "2017-03-19T19:17:28.125Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58ced70ff7f7d4810433e893"
    text: "Why not? :^^)"
    sent: "2017-03-19T19:07:59.433Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ce80e96701410e58538274"
    text: "why red?"
    sent: "2017-03-19T13:00:25.763Z"
    v: 1
    author: "5582dd4f15522ed4b3e21b38"
) #(
    id: "58cd62221c040b8e040e527f"
    text: {@metaperl hello and welcome! ^/^/* Red is in early stage of developement, no support for threads AFAIK. ^/As for type safety - we have optional typing mechanism, perhaps there will be more safety stuff at `1.0` version. (I'm not an expert in these matters, hope that our members will answer your questions in more detail).^/IMO Rust is a way to go for you, since it's both fast/safe, mature and production ready, though Red is really fun to play with even in alpha. And, as you've mentioned it's really concise and expressive. ;)^/* Well, I would say that Red could be very ambiguous, because it has strong emphasis on dialecting (DSLs), hence one language construct could have different meanings, depending on the context. Aside from that, Red/REBOL type system is an unique beast on it's own (I still don't get it and again hope that someone will clarify your questions).}
    sent: "2017-03-18T16:36:50.879Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58cd566aac314c8a1a6228f5"
    text: {oops. I should've been typing in red/welcome as a new person :)}
    sent: "2017-03-18T15:46:50.355Z"
    v: 1
    author: "569281ea16b6c7089cc1eb92"
) #(
    id: "58c688ae7ceae5376aaf8295"
    text: "You're welcome."
    sent: "2017-03-13T11:55:26.581Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c6889a21d548df2cce68fd"
    text: "this should be ok. for time being. thanks"
    sent: "2017-03-13T11:55:06.924Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c68883dd08b4b859c3ab36"
    text: {the  former allows compiler to work in the command prompt}
    sent: "2017-03-13T11:54:43.970Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6885f09e7ba8510bb553b"
    text: {typing red --cli  open in the command window itself}
    sent: "2017-03-13T11:54:07.490Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6884d00c00c3d4ffd5b8e"
    text: "typing red ..open interpreter in separate window"
    sent: "2017-03-13T11:53:49.172Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6883500c00c3d4ffd5b0f"
    text: "it seems to work"
    sent: "2017-03-13T11:53:25.369Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6882f21d548df2cce653f"
    text: "yes"
    sent: "2017-03-13T11:53:19.599Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c687a8dd08b4b859c3a470"
    text: {Feel free to ask any question about Red in this channel.}
    sent: "2017-03-13T11:51:04.018Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c686fd21d548df2cce5ec5"
    text: "@rupipal Ok, so it works fine now?"
    sent: "2017-03-13T11:48:13.461Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c6868a7ceae5376aaf74fd"
    text: "home of red"
    sent: "2017-03-13T11:46:18.467Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6868221d548df2cce5c1d"
    text: {I simply typed red. which is the name of file. in home directory. as, expected, the shell simply executes that}
    sent: "2017-03-13T11:46:10.104Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6860ede50490822832590"
    text: "yes yes. thanks."
    sent: "2017-03-13T11:44:14.866Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c685d500c00c3d4ffd4bb7"
    text: {@rupipal Have you read the ticket #543 as mentioned above?}
    sent: "2017-03-13T11:43:17.297Z"
    editedAt: "2017-03-13T11:43:24.059Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c685a800c00c3d4ffd4b1b"
    text: {I mean. Its basically that PATH can't be given to Red}
    sent: "2017-03-13T11:42:32.463Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6856809e7ba8510bb43b5"
    text: "the compiler too works"
    sent: "2017-03-13T11:41:28.503Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6855200c00c3d4ffd4861"
    text: "also. of course PATH isn't required"
    sent: "2017-03-13T11:41:06.664Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6854009e7ba8510bb4324"
    text: "with that change of name to red.exe"
    sent: "2017-03-13T11:40:48.664Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6853200c00c3d4ffd4800"
    text: "it works"
    sent: "2017-03-13T11:40:34.424Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6846ce961e53c7fdc6483"
    text: {@rupipal What does `red --cli` do when you're in the directory where you put the red.exe file? I'm not sure what you want to do exactly.}
    sent: "2017-03-13T11:37:16.478Z"
    editedAt: "2017-03-13T11:39:14.915Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
)#(
    id: "58c682d321d548df2cce46f5"
    text: {I mean one wouldn't need PATH. If one navigates to home of red}
    sent: "2017-03-13T11:30:27.800Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c682b37ceae5376aaf5c22"
    text: {And I'd tried from the directory itself. I mean.  Without adding to PATH and with adding}
    sent: "2017-03-13T11:29:55.233Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6820021d548df2cce4238"
    text: {So need I add just the directory or or executable as well to PATH}
    sent: "2017-03-13T11:26:56.506Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c68173872fc8ce62f723d9"
    text: "ok. I 'll try that. but"
    sent: "2017-03-13T11:24:35.989Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6812d872fc8ce62f7222f"
    text: {You might also want to rename `red-061.exe` to just `red.exe` if you intend to use it from command-line.}
    sent: "2017-03-13T11:23:25.680Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c680d7dd08b4b859c379f3"
    text: "ok thanks"
    sent: "2017-03-13T11:21:59.786Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c680bd872fc8ce62f72040"
    text: {@rupipal You might want to check the solution at the bottom of this ticket: https://github.com/red/red/issues/543}
    sent: "2017-03-13T11:21:33.775Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58c680a6de5049082283059d"
    text: {D:\ProgramFiles\Python\Scripts\;D:\ProgramFiles\Python\;C:\ProgramData\Oracle\Ja^/va\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\S^/ystem32\WindowsPowerShell\v1.0\;C:\Program Files\Java\jdk1.8.0_91\bin;C:\Program^/ Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Serve^/r\100\DTS\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;%USERPROFI^/LE%\.dnx\bin;C:\Program Files\Microsoft DNX\Dnvm\;E:\ProgramFiles\nodejs\;E:\Pro^/gramFiles\Cloud Foundry;E:\ProgramFiles\Git\cmd;E:\ProgramFiles\Android\sdk\tool^/s;E:\ProgramFiles\Android\sdk\platform-tools;C:\Users\nwe\AppData\Roaming\npm;D:^/\ProgramFiles\maven\bin;D:\Bitnami\rubystack-2.2.6-1\ruby\bin;D:\ProgramFiles\Re^/d\red-061.exe}
    sent: "2017-03-13T11:21:10.593Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c680a100c00c3d4ffd2bc7"
    text: {as I told you. I  just now added the file too. I am copying here.  }
    sent: "2017-03-13T11:21:05.622Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6805ddd08b4b859c3774b"
    text: "well, I only wanted to check if Red dir is there"
    sent: "2017-03-13T11:19:57.741Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c68034de504908228302e5"
    text: {of course. all directores. including the one I added for Red. You wan't me to copy here}
    sent: "2017-03-13T11:19:16.829Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c6801600c00c3d4ffd2925"
    text: "does it have Red dir?"
    sent: "2017-03-13T11:18:46.162Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c6800509e7ba8510bb215a"
    text: "@rupipal so what does `echo %PATH%` show?"
    sent: "2017-03-13T11:18:29.789Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67ff57ceae5376aaf4e6c"
    text: {ok. thanks. google isn't throwing up anything on the top either}
    sent: "2017-03-13T11:18:13.093Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67f7a00c00c3d4ffd2513"
    text: "yes yes. echo %PATH%"
    sent: "2017-03-13T11:16:10.590Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67f4521d548df2cce2f04"
    text: {otherwise you have to wait for any windows Red users, I'm more like a linux guy :D}
    sent: "2017-03-13T11:15:17.676Z"
    editedAt: "2017-03-13T11:15:31.030Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67f1bde5049082282fcc0"
    text: "@rupipal could you print the PATH in the console?"
    sent: "2017-03-13T11:14:35.058Z"
    editedAt: "2017-03-13T11:14:42.503Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67dbb7ceae5376aaf41a0"
    text: "I navigated to the directory too. doesnt work"
    sent: "2017-03-13T11:08:43.115Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67d83872fc8ce62f70b06"
    text: {I first tried with directory. just now tried with exec.}
    sent: "2017-03-13T11:07:47.750Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67d127ceae5376aaf3d47"
    text: {btw, did you add executable itself or it's directory?}
    sent: "2017-03-13T11:05:54.361Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67cea09e7ba8510bb1046"
    text: "yes yes. I  restarted console"
    sent: "2017-03-13T11:05:14.160Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67c447ceae5376aaf36fd"
    text: {is there any way in console to check PATH? does it show your changes?}
    sent: "2017-03-13T11:02:28.689Z"
    editedAt: "2017-03-13T11:02:58.987Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67c3509e7ba8510bb0d14"
    text: "did you restart console after changing PATH?"
    sent: "2017-03-13T11:02:13.518Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67c27dd08b4b859c35c73"
    text: {@rupipal  does it still say that it's not found or any other error?}
    sent: "2017-03-13T11:01:59.350Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67c09dd08b4b859c35b9e"
    text: "I'll chk google. "
    sent: "2017-03-13T11:01:29.389Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67bfb00c00c3d4ffd107e"
    text: {hmm. bcoz there is just one file. I did add to PATH.  half-convinced. it isn't working}
    sent: "2017-03-13T11:01:15.521Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67b8200c00c3d4ffd0b38"
    text: {I'm not an experienced windows user, but I think google will help you easily}
    sent: "2017-03-13T10:59:14.442Z"
    editedAt: "2017-03-13T10:59:28.537Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67b5a872fc8ce62f6fd85"
    text: "it does, of course"
    sent: "2017-03-13T10:58:34.165Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67b4ede5049082282e5f8"
    text: "doesnt it require PATH settings"
    sent: "2017-03-13T10:58:22.150Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67b2bde5049082282e4f5"
    text: "then `--cli` :)"
    sent: "2017-03-13T10:57:47.063Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67b22de5049082282e4d7"
    text: "in windows terminal"
    sent: "2017-03-13T10:57:38.727Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67b1321d548df2cce0feb"
    text: {@rupipal are you asking how to run red or how to run it inside windows terminal?}
    sent: "2017-03-13T10:57:23.477Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67aee00c00c3d4ffd079b"
    text: "@rupipal `red.exe --cli` should work"
    sent: "2017-03-13T10:56:46.389Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58c67aea872fc8ce62f6fb36"
    text: "the red console builds up. of course"
    sent: "2017-03-13T10:56:42.132Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67ad121d548df2cce0d13"
    text: "How do access Red in command prompt on windows"
    sent: "2017-03-13T10:56:17.189Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c67ab8dd08b4b859c354e9"
    text: "I have started with Red an hour or so ago"
    sent: "2017-03-13T10:55:52.571Z"
    v: 1
    author: "58c67a9ad73408ce4f503e72"
) #(
    id: "58c591cae961e53c7fd75116"
    text: "@ZenoArrow you're welcome :)"
    sent: "2017-03-12T18:22:02.219Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c591397ceae5376aaa5ead"
    text: {What you've shown me will make the next step a lot easier, thanks again!}
    sent: "2017-03-12T18:19:37.206Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c5910b00c00c3d4ff85220"
    text: {I thought Red was powerful, but you parsed all that without the aid of a library in 4 lines of code!!}
    sent: "2017-03-12T18:18:51.726Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c590eb872fc8ce62f22177"
    text: "Thank you @rebolek !!"
    sent: "2017-03-12T18:18:19.421Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c590e3e961e53c7fd74b50"
    text: "Holy smokes!! That's incredible!"
    sent: "2017-03-12T18:18:11.236Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c58e59e961e53c7fd73f63"
    text: {Ok, let's look at that data - everything is in quotation mark, which makes it `string!` in Red - so we can `load` that data, which makes things easier. So, here is not universal solution, but something fit your specific data:^/```^/red>> data: load %data.txt^/== ["XMLDir" "XMLPath" "ImgName" "URNField" "URNValue"^/    "C:\Users...^/red>> names: collect [loop 5 [keep to set-word! take data]]^/== [XMLDir: XMLPath: ImgName: URNField: URNValue:]^/red>> objs: copy []^/== []^/red>> until [values: take/part data 5 append objs context collect [repeat i 5 [keep reduce [names/:i values/:i]]] empty? data]^/== true^/red>> probe objs^/[make object! [^/    XMLDir: "C:\Users\User\Desktop\XMLParse\XML\Batch1"^/    XMLPath: {C:\Users\User\Desktop\XMLParse\XML\Batch1\Index2.xml}^/    ImgName: "imagedos.tif"^/    URNField: "URN_1"^/    URNValue: "123"^/] make object! [^/    XMLDir: "C:\Users\User\Desktop\XMLParse\XML\Batch1"^/    XMLPath: {C:\Users\User\Desktop\XMLParse\XML\Batch1\Index2.xml}^/    ImgName: "imagedos.tif"^/    URNField: "URN_4"^/    URNValue: "234"^/] make object! [^/    XMLDir: "C:\Users\User\Desktop\XMLParse\XML\Batch2"^/    XMLPath: {C:\Users\User\Desktop\XMLParse\XML\Batch2\Index2.xml}^/    ImgName: "imagequatro.tif"^/    URNField: "URN_1"^/    URNValue: "345"^/] make object! [^/    XMLDir: "C:\Users\User\Desktop\XMLParse\XML\Batch2"^/    XMLPath: {C:\Users\User\Desktop\XMLParse\XML\Batch2\Index2.xml}^/    ImgName: "imagequatro.tif"^/    URNField: "URN_4"^/    URNValue: "456"^/]^/```}
    sent: "2017-03-12T18:07:21.099Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c58aaa7ceae5376aaa3ae8"
    text: {The end goal is to have a simple GUI that can display the images contained in that TSV file, and back and forward buttons to scroll through them, but trying to break it down into smaller tasks.}
    sent: "2017-03-12T17:51:38.005Z"
    editedAt: "2017-03-12T17:52:15.982Z"
    v: 2
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c58a32872fc8ce62f1facb"
    text: {Thanks @rebolek . Essentially I have this TSV data file, and I'd like to be able to import it into Red as an array of objects, where the object keys match the column headers: http://s000.tinyupload.com/index.php?file_id=00006562233902777140}
    sent: "2017-03-12T17:49:38.904Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c588bade504908227e0e98"
    text: {@ZenoArrow It is always good to provide some example, if you are lost, feel free to ask.}
    sent: "2017-03-12T17:43:22.888Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c586fc7ceae5376aaa214c"
    text: {Next step will be to convert the CSV data into an array of objects, will read up on this to see what I can find out.}
    sent: "2017-03-12T17:35:56.666Z"
    editedAt: "2017-03-12T17:36:14.680Z"
    v: 2
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c586d1e961e53c7fd70cde"
    text: "Okay. Thanks @pekr and @rebolek ."
    sent: "2017-03-12T17:35:13.640Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c585ffde504908227dfe24"
    text: {@ZenoArrow when you use `read/lines` you do not need to `split csv newline` - it does it for you.}
    sent: "2017-03-12T17:31:43.032Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c58299872fc8ce62f1cd52"
    text: {Also - working iwht CSV in the past in Rebol, I sometimes got into trouble, when file contained an empty element or comma was last char of the particular line. But - that was dependant upon Rebol's `parse`functionality. I usually used some loop to check that each line is e.g. 8 elements long ...}
    sent: "2017-03-12T17:17:13.545Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c5820ee961e53c7fd6ef95"
    text: {Haven't tested it, just from my head, so please try to experiment ....}
    sent: "2017-03-12T17:14:54.718Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "58c581fcde504908227de63c"
    text: {the first split was there for the variant without the prior `lines`refinement for the `read`function ....}
    sent: "2017-03-12T17:14:36.846Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c581d5dd08b4b859be4b20"
    text: {try with `foreach line csv [append/only out split line comma]`}
    sent: "2017-03-12T17:13:57.304Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "58c5802f00c00c3d4ff7ef11"
    text: {Do I need to transform the csv input in a different way because I'm using read/lines?}
    sent: "2017-03-12T17:06:55.067Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c5800b1465c46a56219b12"
    text: "Any ideas what I'm doing wrong there?"
    sent: "2017-03-12T17:06:19.859Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c57ff87ceae5376aa9f527"
    text: {Error message with the above was: Script Error: split does not allow block! for its series argument}
    sent: "2017-03-12T17:06:00.155Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c57fbb7ceae5376aa9f430"
    text: {```^/Red [Title: "CSV parse test"]^/^/csv: read/lines %/c/Work/Red/RedTest/examplecsv.csv^/foreach line split csv newline [append/only out split line comma]^/^/print out^/```}
    sent: "2017-03-12T17:04:59.164Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c57e171465c46a56218e6d"
    text: {Guessing I'm missing the part where I assign read/lines to the csv variable, will try that.}
    sent: "2017-03-12T16:57:59.119Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c57dfcde504908227dcf83"
    text: {Tried the above, got told "Error: not a Red program".}
    sent: "2017-03-12T16:57:32.726Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c57dcedd08b4b859be3601"
    text: {```^/read/lines %/c/Work/Red/RedTest/examplecsv.csv^/foreach line split csv newline [append/only out split line comma]^/```}
    sent: "2017-03-12T16:56:46.506Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c578c5872fc8ce62f19017"
    text: {@ZenoArrow for good tutorial take a look at http://www.rebol.com/docs/core23/rebolcore.html . It is for Rebol, but very relevant to Red.}
    sent: "2017-03-12T16:35:17.555Z"
    editedAt: "2017-03-12T16:35:26.645Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c5789e7ceae5376aa9c55e"
    text: "Thank you @rebolek ."
    sent: "2017-03-12T16:34:37.996Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c5786d21d548df2cc8a5a8"
    text: {@ZenoArrow you can use `read %my-csv-file`, or you can use `read/lines %my-csv-file` which is actually better for CSV, because it already splits input on newlines:^/```^/red>> read %csv^/== "1,2,3^^/a,b,c"^/red>> read/lines %csv^/== ["1,2,3" "a,b,c"]^/```}
    sent: "2017-03-12T16:33:49.403Z"
    editedAt: "2017-03-12T16:33:56.279Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c5783ddd08b4b859be190a"
    text: {If there's a good tutorial that covers the fundamentals I'd be glad to see it!}
    sent: "2017-03-12T16:33:01.816Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c577f000c00c3d4ff7bd67"
    text: {Thanks @rebolek , that does get me off to a good start. One more question, how do I read the file into the variable? I've not used Red before today (tried Rebol about 4 years ago, but I've forgotten most of it!).}
    sent: "2017-03-12T16:31:44.305Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c577e1e961e53c7fd6acc9"
    text: {For proper CSV parser take a look at http://www.rebol.org/view-script.r?script=csv-tools.r - it is for Rebol, but with little changes it should work in Red too (maybe directly, I haven't tested it yet).}
    sent: "2017-03-12T16:31:29.249Z"
    editedAt: "2017-03-12T16:31:41.234Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c5773021d548df2cc8a005"
    text: {```^/red>> out: []^/== []^/red>> foreach line split csv newline [append/only out split line comma]^/== [["a" "b" "c"] ["1" "2" "3"]]^/```^/where `csv` is your input data.}
    sent: "2017-03-12T16:28:32.521Z"
    editedAt: "2017-03-12T16:28:58.231Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c577271465c46a56216a3d"
    text: {> ```^/a, b, c^/1, 2, 3^/```^/is a good starting point. :-)}
    sent: "2017-03-12T16:28:23.684Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c576e500c00c3d4ff7b77e"
    text: {But yes, the data I've got in mind is quite simple.}
    sent: "2017-03-12T16:27:17.997Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c576a721d548df2cc89e0b"
    text: {@rebolek Sure, it can be complicated. To be honest I prefer TSV (tab-delimited) files, if that's easier to explain then I'd be happy to use those instead.}
    sent: "2017-03-12T16:26:15.698Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58c576541465c46a5621664a"
    text: {```^/a, b, c^/1, 2, 3^/```^/}
    sent: "2017-03-12T16:24:52.352Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c57645872fc8ce62f1829f"
    text: {@ZenoArrow Hi! Parsing simple CSV is pretty easy, however, CSV can get extremly complicated, so it depends on you input. Anyway, let's say you have some simple input like}
    sent: "2017-03-12T16:24:37.376Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58c57518de504908227d9c3e"
    text: {Hi, I'd like to be able to read data from a CSV file, can anyone explain how I would do that in Red? Alternatively, any good beginners tutorials that might cover this? Thanks!}
    sent: "2017-03-12T16:19:36.131Z"
    v: 1
    author: "58c54d63d73408ce4f500e41"
) #(
    id: "58bf504100c00c3d4fd49793"
    text: {Of course... there should be the _not implemented_ error}
    sent: "2017-03-08T00:28:49.320Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58bf4c7ee961e53c7fb3b639"
    text: {@Oldes Yes, I know.  It was just to show the difference.}
    sent: "2017-03-08T00:12:46.477Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bf156921d548df2ca49e57"
    text: {@lpvm image loading is so far [only on Windows](https://github.com/red/red/blob/master/runtime/platform/image-gdiplus.reds)... 6 is length of your file name}
    sent: "2017-03-07T20:17:45.008Z"
    editedAt: "2017-03-07T20:22:21.208Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58bee4c07ceae5376a84243d"
    text: ">6^/^/lol"
    sent: "2017-03-07T16:50:08.018Z"
    editedAt: "2017-03-07T16:50:10.240Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58bede52872fc8ce62cb7b2b"
    text: {I know that the Linux version for GUI is behind the Windows one.  But shouldn't this be working?}
    sent: "2017-03-07T16:22:42.574Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bede2af1a33b627590efdc"
    text: {red>> about^/Red 0.6.1 - 7-Mar-2017/16:15:07^/red>> cc: load %cc.png^/== %cc.png^/red>> probe length? cc^/6^/== 6}
    sent: "2017-03-07T16:22:02.058Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bede2421d548df2ca31a06"
    text: "Linux version:"
    sent: "2017-03-07T16:21:56.843Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bede12872fc8ce62cb7a0c"
    text: {cc: load %cc.png^/== make image! [147x32 #^{^/FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF^/probe length? cc^/4704^/== 4704}
    sent: "2017-03-07T16:21:38.193Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58bedde7f1a33b627590ee56"
    text: {Windows version (under wine)^/>> about^/Red 0.6.1 - 7-Mar-2017/16:06:52}
    sent: "2017-03-07T16:20:55.541Z"
    editedAt: "2017-03-07T16:21:20.676Z"
    v: 3
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58baba7e7ceae5376a6daf25"
    text: "@geekyi Same thing. Source code on github. "
    sent: "2017-03-04T13:00:46.608Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58bab5431465c46a56e58ec1"
    text: {> There is a compiler switch to output the R/S code!^/^/```red^/-v <level>, --verbose <level>  : Set compilation verbosity level, 1-3 for^/                                     Red, 4-11 for Red/System.^/```^/- from the commandline usage^/fyi, generates quite a lot of code tho!}
    sent: "2017-03-04T12:38:27.741Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bab4ba1465c46a56e58ba0"
    text: {Node-red is "A visual tool for wiring the Internet of Things".. using flow diagrams in the browser, with node as the backend?}
    sent: "2017-03-04T12:36:10.532Z"
    editedAt: "2017-03-04T12:39:20.814Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58bab2027ceae5376a6d8bc2"
    text: {@dsgeyser ^/> I think that Red is a good fit for a Node-red implimentation which uses APIs to IoT devices etc.^/^/By that, do you mean http://nodered.org/ or https://github.com/node-red/node-red by any chance? *Confusing names*}
    sent: "2017-03-04T12:24:34.626Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58bab007872fc8ce62b56acc"
    text: {There is a compiler switch to output the R/S code!}
    sent: "2017-03-04T12:16:07.543Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58ba952a567b0fc8138f55fe"
    text: {Well, Red/System syntax is same as Red syntax. I think it wouldn’t be that hard to get generated RS code from the compiler.}
    sent: "2017-03-04T10:21:30.863Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ba94d500c00c3d4fbad6e5"
    text: {I am thinking of ways to feed my curiosity. Trying to learn Red/ System by using more familiar Red syntax. If only disassembling the compiled script can somehow point to the Red/System equivalent code.}
    sent: "2017-03-04T10:20:05.405Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58ba93404150746b1515b6fa"
    text: {It might, I guess, but isn’t reading R/S compiler sources much easier?}
    sent: "2017-03-04T10:13:20.497Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ba931ae961e53c7f9a358d"
    text: {Using a disassembler on a compiled Red script would reveal the inner workings of the Red System compiler, or not?}
    sent: "2017-03-04T10:12:42.944Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58ba91a400c00c3d4fbac759"
    text: {I think that Red is a good fit for a Node-red implimentation which uses APIs to IoT devices etc. Maybe later Red might be embedded on such devices. I have read somewhere that APIs are actually a bad design.}
    sent: "2017-03-04T10:06:28.041Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58ba90604150746b1515b6ec"
    text: "Gitter itself is based on it."
    sent: "2017-03-04T10:01:04.131Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ba904e567b0fc8138f55cb"
    text: "I don’t know, many I guess. Why?"
    sent: "2017-03-04T10:00:46.411Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ba89dc872fc8ce62b4c115"
    text: {How many APIs out there are based on JSON and RESTful API, do you think?}
    sent: "2017-03-04T09:33:16.578Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58ba87ac00c00c3d4fba94cd"
    text: {Come to think of it: Rebol had such power back in 1997(8).  All this possible with only Rebol. Mind blowing!}
    sent: "2017-03-04T09:23:56.764Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58ba87919eb1bd81481ebaab"
    text: {See this code:^/```^/a: 1^/print a^/```^/When you compile it, everything is compiled. However in this code:^/```^/a: 1^/do [print a]^/```^/`print` will be run by interpreter.}
    sent: "2017-03-04T09:23:29.573Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ba87514150746b1515b6c8"
    text: {Red is written in Red/System and Red/System compiler is written in Rebol (currently). Not a single line of C here.}
    sent: "2017-03-04T09:22:25.542Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ba8735fef1d2de52ac2f01"
    text: "No."
    sent: "2017-03-04T09:21:57.864Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ba87211465c46a56e4c594"
    text: "Nothing in Red was developed in C?"
    sent: "2017-03-04T09:21:37.865Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58ba8705fef1d2de52ac2efd"
    text: "It may, when needed."
    sent: "2017-03-04T09:21:09.041Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "58ba86d121d548df2c8bfc37"
    text: {Never knew the interpreter is also playing a role at execution time (after reading your answer again). }
    sent: "2017-03-04T09:20:17.572Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58ba86c24150746b1515b6c0"
    text: {@dsgeyser For speed you would use Red/System anyway, but only fraction of code really needs full speed. And most of Red can be compiled, it’s just the more dynamic stuff that cannot be compiled. Interpreter is compiled, Red console is exactly this. In your compiled code, everything you pass to `do` is interpreted.}
    sent: "2017-03-04T09:20:02.121Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ba859b872fc8ce62b4af40"
    text: {@rebolek  So compiled Red will never equal the speed of compiled c or c++ code. If Red is compiled to machine code, what role does the interpreter play at execution time? And is the interpreter also compiled?}
    sent: "2017-03-04T09:15:07.804Z"
    editedAt: "2017-03-04T09:15:45.703Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58ba76934150746b1515b663"
    text: {@dsgeyser I think he was right, some things in Red cannot be compiled and are interpreted even in compiled programs. Fortunately using interpreter from compiler is so trivial this is not an issue.}
    sent: "2017-03-04T08:10:59.863Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58ba762ede50490822437052"
    text: {Joe Marshall was saying some time ago:^/^/"Rebol is *extremely* difficult to compile in any meaningful sense. Since the parse tree can change dynamically at runtime, there is a combinatoric explosion of code paths.  You can constrain things a bit by allowing the user to declare procedure arity, though."^/^/Guess his view point was limited. Makes you appreciate the work done by Team Red even more. More surprises awaiting....}
    sent: "2017-03-04T08:09:18.673Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58b6e2f27ceae5376a578390"
    text: {@dockimbel   @greggirwin  Thanks -  And  @Oldes I will post a 'rejoin' version as well as the 'append form' version, as an alternative option . }
    sent: "2017-03-01T15:04:18.436Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "58b686ea00c00c3d4fa2d32c"
    text: {I think it is confusing to have `rejoin` and not `reform`... at least when you come from Rebol land and want to post some example. Like now... I had to try if `reform` is there and it was not.}
    sent: "2017-03-01T08:31:38.712Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b68598de504908222d4aa6"
    text: {Yes.. I should note that it is not in-build in Red by default.}
    sent: "2017-03-01T08:26:00.646Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6856d1465c46a56ccd3e9"
    text: {You can add `reform` easily using Rebol source:^/```^/reform: func [^/    "Forms a reduced block and returns a string."^/    value "Value to reduce and form"^/][^/    form reduce :value^/]^/```}
    sent: "2017-03-01T08:25:17.650Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6856421d548df2c740a1c"
    text: {> In Rebol I would use:^/```reform [name "has" color "eyes."]```^/But that is not in Red... ^/^/`reform [...]` => `form reduce [...]` The `reform` function is just a convenient shortcut, it brings nothing new that is not there already.}
    sent: "2017-03-01T08:25:08.617Z"
    editedAt: "2017-03-01T08:26:30.457Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b684f3de504908222d46d2"
    text: {In Rebol I would use:^/```reform [name "has" color "eyes."]```^/But that is not in Red... @dockimbel has some plans how to simplify formating.}
    sent: "2017-03-01T08:23:15.677Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b6849ce961e53c7f8208fd"
    text: {@justjenny instead of:^/```append append append form name " has " color " eyes."```^/you can use:^/```rejoin [name " has " color " eyes."]```}
    sent: "2017-03-01T08:21:48.841Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "58b65c5ce961e53c7f812aca"
    text: {@justjenny Congrats on the new blog, and thank you for your kind words. Interesting feedbacks, I agree with you that we need to have a different approach for beginners vs experienced developers. IDEs are certainly helpful there, as you suggest. We have plans to go more into that direction. As Gregg says on the ML, we need more resources like your blog. Looking forward to read more blog entries from you! ;-) }
    sent: "2017-03-01T05:30:04.150Z"
    editedAt: "2017-03-01T05:31:26.182Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b650d71465c46a56cbb498"
    text: "I responded on the ML, but Woohoo!"
    sent: "2017-03-01T04:40:55.861Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b633b6f1a33b627562d9fb"
    text: {hi,  I created this blog that might be helpful to those new to Red- I had some good feedback on it and will add more to it soon. ^/It is in its early stages, but Please take a look:    http://jennyk36.blogspot.co.uk/}
    sent: "2017-03-01T02:36:38.851Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "58b295c7e961e53c7f6b8042"
    text: {@cyborhyzm Yes, GTK will need to be preinstalled on the system.^/Please report those mismatching cases between interpreted/compiled code in red/red channel.}
    sent: "2017-02-26T08:45:59.549Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b2955ee961e53c7f6b7f5c"
    text: {@greggirwin A reduced version of `format` while waiting for dates support, would be welcome. ;-)}
    sent: "2017-02-26T08:44:14.922Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b2612ade504908221744f4"
    text: {I haven't pressed forward on `format`,  because dates are such a big part of it and we don't have those yet.  I may have a little more free time for a while, and can dust some things off.}
    sent: "2017-02-26T05:01:30.415Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58b1d20e00c00c3d4f8916c7"
    text: "like #! for example"
    sent: "2017-02-25T18:50:54.039Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58b1d1f4872fc8ce62838f1a"
    text: {I'm definitely looking forward to UI on linux with Red. I run into cases where the interpreter works but the compiled version of a script doesn't and vise versa quite often. Maybe it's better on win32. I've been switching between REBOL, Red and Boron because of differences or features I'm looking for. I'm hoping Red will reliably have most of them at some point.}
    sent: "2017-02-25T18:50:28.868Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58b1d08b1465c46a56b327a1"
    text: {Makes sense. GTK will likely be the most similar implementation with API for win32 and osx compared against xlib as well. It's standard enough in distros as well. How is that expected to work when compiling binary with `red -c`? Will GTK need to reside on the system?}
    sent: "2017-02-25T18:44:27.108Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58b1bfac1465c46a56b2cb02"
    text: {@cyborhyzm [GTK](https://github.com/red/red/tree/GTK), a few features have been implemented already. QT is C++ only (no C API), Xlib/Xaw is too old (lacks many modern features), SDL does not provide graphic components.}
    sent: "2017-02-25T17:32:28.388Z"
    editedAt: "2017-02-25T17:35:26.993Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b1be3bde50490822148766"
    text: {The Linux UI for Red is 'not yet ready for prime time', but has the back-end been decided for it to the best of anyone's knowledge? xlib, xcb, sdl, gtk, qt etc?}
    sent: "2017-02-25T17:26:19.925Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58b1b41c21d548df2c5995bd"
    text: "@cyborhyzm You're welcome."
    sent: "2017-02-25T16:43:08.699Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b1a1fc7ceae5376a3a501a"
    text: {Thanks for covering this little topic with me guys}
    sent: "2017-02-25T15:25:48.679Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58b1a1bc1465c46a56b222ea"
    text: "the rejoin solution is almost perfect though ;)"
    sent: "2017-02-25T15:24:44.571Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58b1a19d21d548df2c59398d"
    text: {That sounds good and is more what I would expect and looked for as soon as I had the problem; i.e, a function (word) that does automatic formatting and one that doesn't}
    sent: "2017-02-25T15:24:13.202Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58b1a151e961e53c7f674b42"
    text: {@cyborhyzm We are cooking a formatting dialect to cover that (and many other text formatting needs), it's just not ready yet (@gregg might have more info about that).}
    sent: "2017-02-25T15:22:57.170Z"
    editedAt: "2017-02-25T15:22:58.658Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58b1a139f1a33b62754ad677"
    text: {If you pass a string to `print` then it prints exactly what you want. However if you pass a block, it does automatic formatting for you.}
    sent: "2017-02-25T15:22:33.692Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b1a0efe961e53c7f6749b0"
    text: {`print rejoin [name ": Hello."]`}
    sent: "2017-02-25T15:21:19.388Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58b19dec00c00c3d4f880c2a"
    text: {Seems like it would match most other popular (for good reason) languages like C, Python, Perl, Awk etc}
    sent: "2017-02-25T15:08:28.522Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58b19db51465c46a56b20fa6"
    text: {Yes, true. Thanks. I still wish for the alternative though..}
    sent: "2017-02-25T15:07:33.647Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58b195ec872fc8ce6282599a"
    text: {Even with the current rule you could achieve your goal by coding `prin name print ": Hello."`}
    sent: "2017-02-25T14:34:20.946Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58b18f3f1465c46a56b1c41a"
    text: {In this instance: `print [ name ": Hello." ]` I don't want a space automatically placed before the colon. It seems like the default behavior of print should be to let the programmer choose where spaces go, no?}
    sent: "2017-02-25T14:05:51.321Z"
    v: 1
    author: "58b18e58d73408ce4f4cd010"
) #(
    id: "58ab4d43de50490822f2338a"
    text: {Correct. Date! values are not in place yet. Time! values are supported, so you can get the current time with `now/time`.}
    sent: "2017-02-20T20:10:43.991Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58ab47d77ceae5376a16bc46"
    text: {using the  red console,  I  did  ^/print  now   and I get an internal error as shown below.  is  date/time not implemented yet ? ^/red>> print  now^/*** Internal Error: reserved for future use (or not yet implemented)^/*** Where: now^/red>>}
    sent: "2017-02-20T19:47:35.765Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "58ab338621d548df2c350619"
    text: {We all started somewhere, sometime. When my Dad was teaching me chess, he would say "Everyone was a beginner once...even if only for 30 minutes" :^^)}
    sent: "2017-02-20T18:20:54.323Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58aa8efafef1d2de52aac6d6"
    text: {@UnknownxKami welcome! that doesn’t matter at all :smile: }
    sent: "2017-02-20T06:38:50.490Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58aa8c55f045df0a226d4076"
    text: "newb here XD no serriusly im an amatuer XDDD"
    sent: "2017-02-20T06:27:33.347Z"
    v: 1
    author: "58aa8c37d73408ce4f4b8897"
) #(
    id: "58aa72f9aa800ee52cba76cf"
    text: "@geekyi I'm only 4/5 of Irwin"
    sent: "2017-02-20T04:39:21.792Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a9e46a872fc8ce6257e701"
    text: {Oh, I got it.  `do/args %red.r "-r %environment/console/console.red"`}
    sent: "2017-02-19T18:31:06.028Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a9ddefde50490822eabc31"
    text: {If i do the the `do/args %red.r` way of compiling, are there any flags or refinements?}
    sent: "2017-02-19T18:03:27.256Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a9a41daa800ee52cb6a65d"
    text: {It would be helpful if all posts were on topic - Welcome to Red.}
    sent: "2017-02-19T13:56:45.280Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a99f6bde50490822e9903b"
    text: {Except Captain Trump , who was made a embittered man by Sledge Hamme.  ha}
    sent: "2017-02-19T13:36:43.254Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "58a98f41de50490822e94a90"
    text: {Keep this thread away from linux flamewars genlemen ;)}
    sent: "2017-02-19T12:27:45.859Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58a975a4f045df0a226851d1"
    text: {Looks like we have too many "Greg"s :smile: }
    sent: "2017-02-19T10:38:28.243Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58a94fa01465c46a56846107"
    text: "Oh. No, I didn't. ^/Thanks"
    sent: "2017-02-19T07:56:16.783Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a94f4400c00c3d4f5aa231"
    text: {@Gregg  Did you specify the ```-r``` compiler option. You now need to do this when compiling the console from source. (The docs will be updated when the 0.6.2 Alpha is released).}
    sent: "2017-02-19T07:54:44.086Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58a94c69aa800ee52cb53b54"
    text: {Kali GNU/Linux Rolling 64-bit^/^/```^/-=== Red Compiler 0.6.1 ===- ^/^/Compiling /root/rebol-core/environment/console/console.red ...^/...using libRedRT for Linux^/...compilation time : 240 ms^/^/Target: Linux ^/^/Compiling to native code...^/*** Compilation Error: undefined symbol: red/unicode/decode-utf8-char ^/*** in file: %/root/rebol-core/environment/console/POSIX.reds ^/*** in function: exec/terminal/fd-read^/*** at line: 235 ^/*** near: [^/    unicode/decode-utf8-char utf-char :len^/]^/^/```}
    sent: "2017-02-19T07:42:33.278Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58a8d2640ad50ac31533ca3d"
    text: {@Mennohexo It's debian based, Void is not based in any.  MX is infected with systemd, Void is not.  Good luck.}
    sent: "2017-02-18T23:01:56.550Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
)#(
    id: "58a8ca9b00c00c3d4f58bc09"
    text: {Trust me , i mosttimes know what i say.   Sledge Hammer}
    sent: "2017-02-18T22:28:43.133Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "58a8c98021d548df2c296a4b"
    text: {Ther is only one linux that is truly "Rockn Roll". Its called MX16 Linux.  Pure POWER. And great forum for support. Give it a try and i am shure you realize. Its a debian style.}
    sent: "2017-02-18T22:24:00.649Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "58a8c90621d548df2c2966be"
    text: "Hi there. Forget voidlinux."
    sent: "2017-02-18T22:21:58.911Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "58a754eb0ad50ac3152d11ae"
    text: {@lpvm and @meijeru , you can do `source save` and see the code, because it's a mezzanine. And, yes, it looks through the codec catalog for a matching extension if you don't provide a format with `/as`.}
    sent: "2017-02-17T19:54:19.134Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a72a57872fc8ce624bae58"
    text: {Void was create by an old NetBSD developer.  So, it's even more BSD like than Slack}
    sent: "2017-02-17T16:52:39.178Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a72a1621d548df2c21cafe"
    text: "yeah, compilation is pain"
    sent: "2017-02-17T16:51:34.709Z"
    editedAt: "2017-02-17T16:52:02.635Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a72a05872fc8ce624bac54"
    text: "Try voidlinux!"
    sent: "2017-02-17T16:51:17.603Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a729eff045df0a225e63c7"
    text: {Yes, I ran Gentoo too, circa 2006, know Funtoo but never went to it.  Don't want to compile everything}
    sent: "2017-02-17T16:50:55.669Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a729d50ad50ac3152c0972"
    text: {well, almost everything is better than Slack I would say :D}
    sent: "2017-02-17T16:50:29.235Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a729bdf045df0a225e627e"
    text: {I used Slackware before, but got tired of not having binaries for third party software, or slackbuilds wouldn't work anymore with current}
    sent: "2017-02-17T16:50:05.377Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a729ab0ad50ac3152c07fc"
    text: {but it was created by the guy who created Gentoo, so he knows what he is doing :)}
    sent: "2017-02-17T16:49:47.766Z"
    editedAt: "2017-02-17T16:49:49.623Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a729930ad50ac3152c06f8"
    text: {for a few years I was using Funtoo, which is kinda similar}
    sent: "2017-02-17T16:49:23.693Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a729701465c46a567acd02"
    text: "Simple, BSD like, no systemd, rolling release"
    sent: "2017-02-17T16:48:48.848Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a7296ff045df0a225e608a"
    text: {@lpvm I can search it, but I'm interested in your opinion}
    sent: "2017-02-17T16:48:47.040Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a72952f045df0a225e6023"
    text: {@maximvl I save you some searching: http://www.voidlinux.eu/}
    sent: "2017-02-17T16:48:18.833Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a729001465c46a567aca9a"
    text: {@lpvm now I wonder what is Void Linux and why are you using it?}
    sent: "2017-02-17T16:46:56.967Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a7286a21d548df2c21bfa6"
    text: "@nc-x I'm using Void Linux"
    sent: "2017-02-17T16:44:26.239Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a724610ad50ac3152be5f1"
    text: {BTW, about this issue, there is discussion here -  [February 17, 2017 1:41 AM](https://gitter.im/red/red?at=58a6078e21d548df2c1baa30) }
    sent: "2017-02-17T16:27:13.344Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58a724461465c46a567aa9d5"
    text: "@lpvm Which linux distro are you using?"
    sent: "2017-02-17T16:26:46.151Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "58a7225dde50490822deb9f2"
    text: "?"
    sent: "2017-02-17T16:18:37.750Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a7225c21d548df2c219512"
    text: "what should I need to install to make it work"
    sent: "2017-02-17T16:18:36.757Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a7225021d548df2c2194e2"
    text: {In Linux 64 bits, when running `$ ./red-16feb17-878e22b` for the first time (compiling) it complains about `~/.red/console-2017-2-16-60339: undefined symbol: dlopen`}
    sent: "2017-02-17T16:18:24.205Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a71e8df045df0a225e1346"
    text: "@meijeru:  Nice, thanks"
    sent: "2017-02-17T16:02:21.308Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a7190000c00c3d4f50a6bd"
    text: {I did some tests, and saving to `.jpg` makes JPEG format. Saving to `.txt` produces a `mold` of the image! I speculate that any other non-picture extension does the same. To be confirmed by @dockimbel. Another candidate for the guru :smile:}
    sent: "2017-02-17T15:38:40.142Z"
    editedAt: "2017-02-17T15:43:25.733Z"
    v: 3
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58a717c021d548df2c214bdb"
    text: {@lpvm Good question! I used to think it was necessary. Perhaps the `.png`extension is enough to indicate the format to the run-time. In other words, `/as` would only be needed if the extension provided no clue. Note that values of  type `image!` contain no indication of any external format, they are "raw" series of pixels.  }
    sent: "2017-02-17T15:33:20.266Z"
    editedAt: "2017-02-17T15:36:04.147Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58a709e921d548df2c20eb26"
    text: {seems to be a png file, so what is the /as png refinement under save for?}
    sent: "2017-02-17T14:34:17.472Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a709bb00c00c3d4f503a44"
    text: "Then to save it, just `save %c1.png` img"
    sent: "2017-02-17T14:33:31.215Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a70981de50490822de162a"
    text: {Is it the way to load it? or use /as png refinement? What type of image is it assumed?}
    sent: "2017-02-17T14:32:33.255Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a709341465c46a5679ebb8"
    text: "true"
    sent: "2017-02-17T14:31:16.571Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a709330ad50ac3152b2fa1"
    text: "probe image?  img"
    sent: "2017-02-17T14:31:15.531Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a7092a0ad50ac3152b2f4d"
    text: {I want to load a png image, modify it with poke and save it under new name.  Tried `img: load %c.png`}
    sent: "2017-02-17T14:31:06.885Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "58a4e84d872fc8ce623f6584"
    text: "thanks  @mikeparr "
    sent: "2017-02-15T23:46:21.829Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "58a419801465c46a56691744"
    text: "@virtualAlan I really like your material!"
    sent: "2017-02-15T09:04:00.474Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58a2453b238b1dae57068fd6"
    text: {Thanks @greggirwin  - Is  @geekyi  really moving, or just not a fan ?    only kidding.}
    sent: "2017-02-13T23:46:03.286Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "58a1b9f4f045df0a22401252"
    text: {@geekyi wants to try out @virtualAlan's editor but is in process of moving :(}
    status: true
    sent: "2017-02-13T13:51:48.493Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58a1462800c00c3d4f2f1a34"
    text: {Thanks @9214 and @virtualAlan!  Keep up the good work in helping others.}
    sent: "2017-02-13T05:37:44.492Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58a10ea5aa800ee52c88e1c7"
    text: "I'll try it later"
    sent: "2017-02-13T01:40:53.194Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a10e94de50490822bdab12"
    text: "thanks  @maximvl   just hope its helpful  "
    sent: "2017-02-13T01:40:36.403Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "58a10b8921d548df2cfec7ba"
    text: "@virtualAlan nice one, thanks for sharing!"
    sent: "2017-02-13T01:27:37.055Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58a1022421d548df2cfea2e6"
    text: {^/Here's a simple 'Red Editor' with 'Interpret and Compile' options built in - Could help if your just starting with Red, no setup needed, Just unzip and your ready to go. Simple, no nonsense .... write, interpret and compile .... http://www.mycode4fun.co.uk/red-apps  I created/compiled this with a Jan2017 automated build.^/Also added more examples here .... http://www.mycode4fun.co.uk/About-Red-Programming^/And lots more here .... http://www.mycode4fun.co.uk/red-beginners-reference-guide^/Also plenty other new Red things ....^/Regards ....  Alan.^/}
    sent: "2017-02-13T00:47:32.161Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "589f5a1600c00c3d4f26bebd"
    text: "@9214 Very nice work!"
    sent: "2017-02-11T18:38:14.777Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "589f544b1465c46a56508d20"
    text: ":O"
    sent: "2017-02-11T18:13:31.554Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "589f543ef045df0a2235761f"
    text: "btw link to `hostilefork` blog is broken :D"
    sent: "2017-02-11T18:13:18.620Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589f5431f045df0a223575a5"
    text: "@9214 Good job! Thanks!"
    sent: "2017-02-11T18:13:05.233Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "589f52f91465c46a565085d8"
    text: {Sup guys, I've gathered all known resources about Red and Rebol into one [.org gist](https://gist.github.com/9214/784e7f7af2342f117bc67a8e2698855b), additions and suggestions are welcomed!}
    sent: "2017-02-11T18:07:53.486Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "589ebccfaa800ee52c7e97ab"
    text: {@gltewalt Homegrown support, though, GMP could be integrated as an extension (requires modules support, so for Red 0.8.0).}
    sent: "2017-02-11T07:27:11.061Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589e13d9aa800ee52c7b9d28"
    text: {@dockimbel my first inclination was to use to-integer to force result back}
    sent: "2017-02-10T19:26:17.298Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589e1285f045df0a222ff1b3"
    text: {It was rumored that you want to stay away from dependencies }
    sent: "2017-02-10T19:20:37.083Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589e0fb921d548df2cf164b1"
    text: "Or homegrown support"
    sent: "2017-02-10T19:08:41.290Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589e0f77aa800ee52c7b7fd3"
    text: {Are you thinking about native support or using the Gnu MP ?}
    sent: "2017-02-10T19:07:35.677Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
)#(
    id: "589d9ab3de50490822adeed9"
    text: {You can use `to integer!` to force the result to be of `integer!` type}
    sent: "2017-02-10T10:49:23.721Z"
    editedAt: "2017-02-10T10:49:29.047Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589d9a3a872fc8ce62193f07"
    text: {@gltewalt `integer!` datatype is an unsigned 32-bit integer value. If you input an out-of-range value, it will be promoted to a 64-bit float. Support for arbitrary long numbers (big-number) is planned but not implemented yet. A contributor started working on it, but I haven't heard any news in a while about it.}
    sent: "2017-02-10T10:47:22.167Z"
    editedAt: "2017-02-10T10:47:35.741Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "589d6013872fc8ce62180f70"
    text: {I realize that integer is supposed to be of a certain range}
    sent: "2017-02-10T06:39:15.525Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d5ff0de50490822accca5"
    text: {Should I just let it throw an error, let it return the correct value (before the decimal place), or try a catch/throw type of thing?}
    sent: "2017-02-10T06:38:40.134Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d5f71872fc8ce62180d1d"
    text: {Normally a digital root is for Integers, but it blows up if too big of a number is given to the function - without allowing for float!}
    sent: "2017-02-10T06:36:33.560Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d5f1f6b2d8dd5522568db"
    text: {```^/Red []^/^/drt: function [^/    "Returns the Digital Root of integer!"^/    n [integer! float!]] [1 + ((n - 1) % 9)]^/^/; 111111111111 should equal 3 with inclusion of float!^/print drt 111111111111^/; 1234567891234 should equal 1 with inclusion of float!^/print drt 1234567891234^/; 12345 should equal 6^/print drt 12345^/```}
    sent: "2017-02-10T06:35:11.501Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589d5f07de50490822acc998"
    text: {Opinions wanted on how to handle integer changing to float}
    sent: "2017-02-10T06:34:47.536Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589aa467aa800ee52c681ea9"
    text: {@gltewalt, as @JacobGood1 said, there is no TCO. Other than that, there is no recursion aversion.}
    sent: "2017-02-08T04:53:59.609Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "589a4d5d1465c46a56360a0f"
    text: {@cloutiy look right below the downloads, http://www.red-lang.org/p/download.html}
    sent: "2017-02-07T22:42:37.443Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "589a4d4d872fc8ce62079547"
    text: "Yeah"
    sent: "2017-02-07T22:42:21.242Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589a4cb96b2d8dd552151e63"
    text: {@gltewalt I don't think there is any tail call optimizations if that is what you are asking}
    sent: "2017-02-07T22:39:53.442Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "589a48bf21d548df2cdcaa07"
    text: {Nevermind!!!! Iguess itwould helpto red the *note* thatIneed to install the 32 bit libcurl library.}
    sent: "2017-02-07T22:22:55.707Z"
    v: 1
    author: "557cd48915522ed4b3e1e09d"
) #(
    id: "589a47cf21d548df2cdca473"
    text: {Where is the best place to for me to post about red issues?  when trying to start red I get: ^/`error while loading shared libraries: libcurl.so.4: cannot open shared object file: No such file or directory`^/ }
    sent: "2017-02-07T22:18:55.203Z"
    v: 1
    author: "557cd48915522ed4b3e1e09d"
) #(
    id: "589a412e1465c46a5635b9ee"
    text: {Is Red/Rebol averse to recursion ?^/I was trying a few things and it was blowing the stack}
    sent: "2017-02-07T21:50:38.798Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5899417aaa800ee52c605db1"
    text: {Saying that I feel the need is to have both a divide which returns a fractional answer and one which returns an integer.}
    sent: "2017-02-07T03:39:38.021Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58994132f045df0a221612f6"
    text: {@Gregg @rebolek I don't think the behaviour is locked down at all. I used the current behaviour in the example because it makes a lot of sense in the context of the question. (I think it feels natural to somebody like me with a background in languages that having strongly typed variables).^/ }
    sent: "2017-02-07T03:38:26.573Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5898b80400c00c3d4f02d991"
    text: "I hope it isn't. ;^^)"
    sent: "2017-02-06T17:53:08.390Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5898b7c4fef1d2de52a93273"
    text: "I hope it is locked."
    sent: "2017-02-06T17:52:04.926Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5898b7381465c46a562cc075"
    text: {@PeterWAWood, is the current behavior of returning an int when dividing 2 ints locked down now, or is it still under discussion whether to return a float/decimal?}
    sent: "2017-02-06T17:49:44.570Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5898158c6018ccd65275f7aa"
    text: {Here I was all thinking about Parse and coverting strings back and forth...  So simple.  Thanks, Peter}
    sent: "2017-02-06T06:19:56.818Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "589814bb6b2d8dd55207afac"
    text: {@gltewalt Integer values are scalar values and cannot be split. You would need to convert the integer to a ```string``` or ```binary``` to split the digits. ^/^/Most people would use simple maths to spilt a two-digit integer and add the two digits^/```i: 21 (i / 10) + (i % 10)```}
    sent: "2017-02-06T06:16:27.359Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5898106af045df0a220f2695"
    text: {are there any unusual functions that would help me along?}
    sent: "2017-02-06T05:58:02.712Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5898103821d548df2ccf427d"
    text: {Suppose I wanted to split an integer of two digits and add the two digits together}
    sent: "2017-02-06T05:57:12.092Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5894f0ab73e8cb0a0912b4e4"
    text: "Me too."
    sent: "2017-02-03T21:05:47.711Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5894ed3aca6c6eb44941611c"
    text: {Had problems signing in: https://twitter.com/gitchat/status/827577653246955520}
    sent: "2017-02-03T20:51:06.643Z"
    editedAt: "2017-02-03T20:52:21.953Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "588d2058dcb66e4f76c20f60"
    text: "👍🏻"
    sent: "2017-01-28T22:51:04.337Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588c3d142ff29dec0647561d"
    text: {@gltewalt  @CodeTortoise & others: if you want to explore together and share the knowledge, let me know. I've downloaded and played with some of the interpreters `Elixir` and `Rust` is on my todo list}
    sent: "2017-01-28T06:41:24.342Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588c268b1e4d4bd962a19f88"
    text: "(End of TMI)"
    sent: "2017-01-28T05:05:15.217Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588c22bfdcb66e4f76bdffb2"
    text: {Though I've never felt very good at programming, I just can't leave it alone. I'm drawn back all the time. }
    sent: "2017-01-28T04:49:03.785Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588c21cde836bf70109f096e"
    text: {Favorite languages to dabble in (as I'm not very talented at programming), have been Ruby, Common Lisp, and recently Rebol. ^/^/On the menu are Elm, Elixir, and maybe... Haskell. ^/^/I've "dithered" to varying degrees with:^/C, smalltalk, python, JavaScript, basic, C#, Visual Basic (vba and vbscript), powershell, AppleScript (cringe), Ruby, Common Lisp, and Rebol.^/^/I like learning concepts. Especially new concepts that are considered stumbling blocks in whichever language I'm trying out. ^/^/My last long term job - I was tasked with maintaining a VBA code base and adding new features where I could. Not my favourite, but better than data entry. }
    sent: "2017-01-28T04:45:01.919Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588be0484c04e9a44e3d02f6"
    text: {As you evaluate languages, look at your needs and make a matrix. Do you need to write server side stuff? GUIs? Mobile apps? System apps? Device drivers? Tests and testing tools? Parsers or text processing? ETL? Glue one thing to another? Shell-type scripting? What OSs or hardware? Integrate with XYZ?^/^/When you fill in a box for a tool/lang, don't just mark X. Instead, give it a grade or 1-10 rating at how effective it is for each of your needs. Add weighting if you care to. Sum up and see where things fall. Add new tools to it when you find them and see if something knocks off your current leaders.}
    sent: "2017-01-28T00:05:28.451Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588bde9d1e4d4bd962a0a416"
    text: {It's a good topic to bring up, because we only have so many hours in the day to choose and learn tools.  Red is a handy language to have around, and complements other tools well. It's excellent for parsing and transforming data, and code generation. I do that a lot.}
    sent: "2017-01-27T23:58:21.892Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588bc90a4c04e9a44e3ca696"
    text: {@greggirwin I find that incredibly reassuring. For awhile I've been exploring a lot of languages, not really going deep into any, except C++, thinking I need to be some kind of polyglot.  Yet, it seems that a lot people spend their career writing a majority of their work in one language, like C, lisp, Ruby... Haskell. I think I am fine no longer dithering. There is a wealth of resources to learn R2, and by the time it becomes really outdated, Red will probably be at 1.0 Okay, no more off topic things from me.}
    sent: "2017-01-27T22:26:18.941Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "588bb1d6dcb66e4f76bc5dc7"
    text: {@CodeTortoise. R2 has been my favorite language for a long time, and Red makes it even better. I keep looking at new things, and will apply them when needed, but Redbol langs are productive and really fun to play with. When I have to work in something else, I feel the loss of datatypes most profoundly I think. ^/^/With my admitted bias, because I use it daily and it is the most natural to me now, I can say that I haven't tired of it in 16 years, nor outgrown it. Everything has limits of course. }
    sent: "2017-01-27T20:47:18.962Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "588b6ebae836bf70109bdc6f"
    text: {I like J. I think it's the mathy language I will eventually need to learn. Probably next to Julia. Yeah, Rebol is hitting all the fun spots in my brain. For now, my "necessarily serious" language that I am learning is Rust. For my own enjoyment, Rebol and Red is what keeps me next to my computer much of the day.}
    sent: "2017-01-27T16:00:58.794Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "588b6dfa4c04e9a44e3aa1d7"
    text: {@geekyi Wow. I remember stumbling on Frink while looking for programming tools on Android. Glad to see the guy behind it is still cranking out updates.}
    sent: "2017-01-27T15:57:46.036Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "588b6652e836bf70109bb1f9"
    text: "Safe to say `Rebol` is my overall fav."
    sent: "2017-01-27T15:25:06.406Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588b660e1e4d4bd9629e00d1"
    text: {@CodeTortoise I have no favourite, but assuming I'm the only one coding (i.e. no collab); for one-off calculations, there is `J`, for unit conversions: `Frink`, the `Rebol` family is my new favorite for parsing and data manipulation (and experimenting with lang construction!). I'm at a language learning phase, so this list would keep increasing probably}
    sent: "2017-01-27T15:23:58.781Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588b004fc0f28dd8624bdc9d"
    text: {My primary languages at work are Rebol 2 and PHP. Currently my favorite language is Rebol 2 (didn't use R3 much) but it will be Red soon when some of its core components ready (like IO, Networking etc.)}
    sent: "2017-01-27T08:09:51.461Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "588ae60cfba5bfea06940c96"
    text: {I am not sure this is appropriate to ask, but I am curious anyways: What is your (aimed at anyone who sees this) favorite language to program in? I am at the moment learning Rust and coming back to Red is like, cooling my brain on ice after frying it with new information.}
    sent: "2017-01-27T06:17:48.381Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5889b1b5e836bf7010938bb9"
    text: {Yeah, NGINX supports FastCGI only but R2/Core requires SDK license for fastcgi. }
    sent: "2017-01-26T08:22:13.436Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5889ad53e836bf70109375c5"
    text: {Something like [OpenResty](https://openresty.org/en/) may be possible though.}
    sent: "2017-01-26T08:03:31.095Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5889ac0bc19662f15390cf78"
    text: {@endo64 ```nginx``` does not support CGI. You can get nginx to forward CGI requests to an upstream server. You can use nginx to serve static files (e.g. html pages, javascript and images) and have it forward cgi requests to Cheyenne (or another lightweight web server). In tests, I have forwarded requests directly to Rebol TCP/IP servers using nginx simple load balancing. }
    sent: "2017-01-26T07:58:03.830Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5889a9a161e516c1579248ed"
    text: {`Lest` is currently R3 only, Red version is planned.}
    sent: "2017-01-26T07:47:45.330Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5889a969e836bf70109362a9"
    text: {You can try Cheyenne web server as a Rebol application platform, it is very cool and fun.^/OTOH, you can add Rebol executable to your web server (IIS, Apache or NGINX) as a CGI then use to generate your web pages.}
    sent: "2017-01-26T07:46:49.625Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58891051e836bf70108fff9d"
    text: {@geekyi Yeah, I need to get off the tutorial train and start doing some real thinking anyways. Thank you for the response.}
    sent: "2017-01-25T20:53:37.813Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "58890e9dc19662f1538d3541"
    text: "You can also try writing your own"
    sent: "2017-01-25T20:46:21.593Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58890e93cbcb281770b6b9ca"
    text: {For something simple like that, (something like `Lest`) should work with Red too, I've not tried}
    sent: "2017-01-25T20:46:11.063Z"
    editedAt: "2017-01-25T20:48:45.302Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58890e5fcbcb281770b6b8c5"
    text: {@CodeTortoise [`Lest`](https://github.com/rebolek/lest) is a static site generator by @rebolek. There are others too}
    sent: "2017-01-25T20:45:18.981Z"
    editedAt: "2017-01-25T20:49:44.299Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "58890e00c0de6f017fefe28f"
    text: {@geekyi Alright, I shall stop asking for things from Red until the big One-Oh. Anyways, R2 has got me hooked, and I am okay with getting to know it for a bit longer.^/^/I think what I am looking for is something along the lines of a static-site generator. I haven't actually done any web development, but I am thinking about starting in probably the least convenient way. Mostly, I just see all the sites that were built with Rebol that are still active, and I hope it might be an easier entrance than some of the other tools.}
    sent: "2017-01-25T20:43:44.583Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
)#(
    id: "58890c69e836bf70108fe241"
    text: {Less layers of abstractions. For example, cheyenne works like a full stack web server and scripting engine based on rebol. Check it out}
    sent: "2017-01-25T20:36:57.134Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58890beddcb66e4f76aee60e"
    text: {One of the goals is to do away with such unneeded abstractions. But you can take a look at things like `Lest`, `Draem`, (thing I don't remember). Also checkout `cheyenne` web server}
    sent: "2017-01-25T20:34:53.551Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58890b8b519afee26bb05e3e"
    text: {@CodeTortoise Red is alpha remember? Nope. I think by "stack" you mean a web framework like you have in other languages?}
    sent: "2017-01-25T20:33:15.412Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588908e7c0de6f017fefbeed"
    text: {If I wanted to create a website, what would be the better tool, Rebel or Red? Also, is there a recommended "stack" for using Red for web development?}
    sent: "2017-01-25T20:21:59.556Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5887bd63c0de6f017fe8137e"
    text: "Probably that one. Haven't looked in awhile "
    sent: "2017-01-24T20:47:31.122Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5887b51e11e7a7f61ddd4500"
    text: {@gltewalt which? I think it's been down since about the beginning of the year. *Or since the ddos attacks*}
    sent: "2017-01-24T20:12:14.545Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5887859ee836bf701086e5f0"
    text: "I think it's outdated, not sure though"
    sent: "2017-01-24T16:49:34.540Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58877c03e836bf7010869aef"
    text: "But, there's Try Red in browser"
    sent: "2017-01-24T16:08:35.313Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58875126074f7be7630f27c6"
    text: {@PeterWAWood  Yes, I understand re uncommitted users.}
    sent: "2017-01-24T13:05:42.801Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58873b03c0de6f017fe4a609"
    text: {Agreed. There is important missing parts. We tend to forget that.}
    sent: "2017-01-24T11:31:15.097Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5887392ac0de6f017fe49c3a"
    text: {I feel that because Red is already so functional  it is easy to forget that Red is still Alpha and has some way to go to be the finished article. It really is too early in Red's evolution to be attracting uncommitted users. }
    sent: "2017-01-24T11:23:22.711Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "588723ffe836bf7010848632"
    text: {@DideC  - you are correct in a way, but asking someone who wants to try Red to configure their editor, from scratch?  Barrier is too high for the uncommitted user.  Could we publish how to configure a particular editor?  (NB textpad is not free, I think)}
    sent: "2017-01-24T09:53:03.567Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "58872038c19662f15381388b"
    text: "luckily there are not much such languages around"
    sent: "2017-01-24T09:36:56.826Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58872017519afee26ba5ae24"
    text: "like Smalltalk, Java"
    sent: "2017-01-24T09:36:23.711Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5887200ec19662f153813253"
    text: {@DideC to me "integrated" is when it's (almost) impossible to use language without it}
    sent: "2017-01-24T09:36:14.449Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58871fb4cbcb281770abc776"
    text: {Sometimes, I just use Windows notepad, if there is nothing else : that's a text editor !^/"Young" people tend to be too accustomated to IDE helpers. But notepad and a Red console could be enough to start.^/}
    sent: "2017-01-24T09:34:44.014Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58871fa5c19662f153812fc7"
    text: {What does "integrated" mean ?^/I use Textpad. It starts in 0.5s (not the 10s of VSCode). I have Rebol syntax coloring that helps, but I could work without. I just configured a few commands to "Interpret" or "Compile" my script. Thats' all.^/I think anybody can do that for it's prefered editor, if he would like to read the its doc and take some time to do it.}
    sent: "2017-01-24T09:34:29.265Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58871dc2dcb66e4f76a3015c"
    text: {you can use your favorite emacs/vim/acme/ed/sam/sed}
    sent: "2017-01-24T09:26:26.251Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58871da4e836bf7010845a92"
    text: {@justjenny language has nothing to do with IDE/Editor}
    sent: "2017-01-24T09:25:56.042Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58871878e836bf7010843b4a"
    text: {It is actually quite hard (IMHO) for beginners to run Red from their favourite editor. (I recall that there was a page about editor integration, but can't find it now).  I know people use Sublime, but strictly, that is not free.  I'm talking about e.g. notepad++, Geany.  Can we publish the instructions to integrate?   (Incidentally, I'm a big fan of VS with VB, for me the main benefits are in interactive debugging, and GUI creation)}
    sent: "2017-01-24T09:03:52.484Z"
    v: 1
    author: "5675402116b6c7089cbf46c6"
) #(
    id: "5887163bcbcb281770ab97d0"
    text: {I'm sure an editor will be integrated to the system (like Rebol2/view has). Seing what is planned for the console in 0.6.3 (syntax coloration), it will probably be more powerfull. Probably more like an IDE, but lightweight ;-)}
    sent: "2017-01-24T08:54:19.551Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5886e33c11e7a7f61dd8014e"
    text: {I left shortly after the explosion. Just revisited it this past summer. }
    sent: "2017-01-24T05:16:44.836Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5886dfefdcb66e4f76a1cf2a"
    text: {The editor in R2 was custom all the way down, because the whole GUI system was. By using native widgets, Red faces different challenges in building a custom editor. From early experiments people are doing with Draw and rich text, it will surely be possible though.}
    sent: "2017-01-24T05:02:39.018Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886df43074f7be7630cc353"
    text: "I watched it happen with VB. "
    sent: "2017-01-24T04:59:47.316Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886b911c19662f1537f4516"
    text: {It can be disturbing to watch a language explode in popularity. I watched it happen when Ruby on Rails was introduced. }
    sent: "2017-01-24T02:16:49.215Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5886b8db11e7a7f61dd75959"
    text: "What does Nenad want?"
    sent: "2017-01-24T02:15:55.785Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5886b8a8cbcb281770aa1868"
    text: {What *may* be controlled is the core, and the fundamental design. Still, always hard to hold the reigns and dig in your heels once the horses smell the hay...or something.}
    sent: "2017-01-24T02:15:04.706Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886b83f074f7be7630c207a"
    text: {But we all want different things, and part of Red's power is that people will "build to suit". }
    sent: "2017-01-24T02:13:19.789Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886b816c0de6f017fe22813"
    text: "of course - got it"
    sent: "2017-01-24T02:12:38.647Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886b7e1c0de6f017fe227aa"
    text: {It needs to grow enough to be sustainable. Once we get there, we can freely draw a harder line on purity. }
    sent: "2017-01-24T02:11:45.848Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886b794519afee26ba3d826"
    text: {I think that the creator wants it to spread. ^/I would say, "Be careful what you wish for", but it's his baby. }
    sent: "2017-01-24T02:10:28.561Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5886b76f519afee26ba3d78e"
    text: "We agree."
    sent: "2017-01-24T02:09:51.824Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886b76c074f7be7630c1dd2"
    text: "ad i get it "
    sent: "2017-01-24T02:09:48.252Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886b763dcb66e4f76a128c1"
    text: {And it does show that other editors can be made to work with Red. }
    sent: "2017-01-24T02:09:39.980Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886b75bcbcb281770aa126c"
    text: {Red is slick, tiny, but fully loaded, this VsCode is just a pimped up text editor, but you said it all }
    sent: "2017-01-24T02:09:31.485Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886b703074f7be7630c1bc5"
    text: "Ask the Red marketing department. :^^)"
    sent: "2017-01-24T02:08:03.145Z"
    editedAt: "2017-01-24T02:10:06.305Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886b6e1c0de6f017fe22410"
    text: {It helps tick up interest I think, because some developers don't see the beauty in small and simple, seeing it only as spartan. They want some kind of shiny, and this might be enough to get them to look at Red, where they would otherwise write it off at a glance.}
    sent: "2017-01-24T02:07:29.112Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886b646c0de6f017fe22202"
    text: {@greggirwin  yes, i know and agree, but why is this VSCode on the Red site - of course its a choice and its up to you. but  what's it got to do with Red ? }
    sent: "2017-01-24T02:04:54.687Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886b619cbcb281770aa0ec1"
    text: {We'll build the tools we need for ourselves. I did an experimental code completion editor for R2 many years ago, and I think Bolek or someone else has done something for Red. For FullStack, it's a harder question, but Red, itself, won't be the roadblock in what tools can be built. Only our vision of what we need, and the time (justified) to do it.^/^/Chatting with my son recently, he noted that "jump to definition" is a useful feature (he never needed before) now that he's in a new place where he has to learn a large, existing code base. I noted that I first used that feature in QB4.5 in 1989. ;^^)}
    sent: "2017-01-24T02:04:09.827Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886b45bc0de6f017fe21b40"
    text: {There is a distinction, as well, in what developers need on their systems, versus what users/servers need for use and deployment. }
    sent: "2017-01-24T01:56:43.022Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5886a7c7d43728124e971deb"
    text: {@gltewalt  yes, i agree 100% about it being a 'lumbering industry' been in it for a lot of years, still using Cobol in my place - its about preferences, i know. i'm just making my point - and apreaciate your point also .}
    sent: "2017-01-24T01:03:03.164Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886a66611e7a7f61dd7088d"
    text: {Work on both. ^/I don't think that the lumbering industry is going to rise up out of its chair to use Reds future tiny-footprint editor, but they might experiment with it if the can use Atom or Lighttable or VSCode. }
    sent: "2017-01-24T00:57:10.655Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5886a662dcb66e4f76a0e0a2"
    text: "but, if it helps some, then its ok."
    sent: "2017-01-24T00:57:06.022Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886a623c0de6f017fe1e0da"
    text: {yes, i worked using 'visual studio' for a few years, so am not a fan - so am a bit biased about VSCode.}
    sent: "2017-01-24T00:56:03.786Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886a443d43728124e970ca6"
    text: {I think it's a pretty valid question actually. It feels like the editor defeats the purpose of having such a lightweight toolchain. But I guess it's just one piece of the puzzle - maybe just the piece that will lead to everything else getting smaller/leaner}
    sent: "2017-01-24T00:48:03.832Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5886a319e836bf7010823790"
    text: {yes, i know,  just, being a bitch - I know it is all about preferences.  and yes its all about getting Red out there.}
    sent: "2017-01-24T00:43:05.871Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "5886a2a9d43728124e970532"
    text: {I probably shouldn't speak for the Red team, but my sense is that the decision to add support to VSCode was based on the ease of implementing a plugin for it, and its level of popularity}
    sent: "2017-01-24T00:41:13.505Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5886a233c0de6f017fe1cf9d"
    text: {There has been a bunch of discussion around building an IDE with Red, where one of the goals would be a lightweight footprint, and I think there is a lot of interest in that. It's just a big project though, and I think that based on the current available editors, people just need to decide for themselves what kind of size / capabilities tradeoff they are willing to make}
    sent: "2017-01-24T00:39:15.316Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5886a159c0de6f017fe1cbb5"
    text: {An editor / ide isn't a dependency, it's a convenience. ^/There are native Red editors?}
    sent: "2017-01-24T00:35:37.693Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58869fb211e7a7f61dd6e661"
    text: {I thought we were trying to get away from the resource hungry  'Visual studio' style stuff - but it seems many really want to be part of it.}
    sent: "2017-01-24T00:28:34.315Z"
    v: 1
    author: "56dd7386e610378809c56852"
)#(
    id: "58869e5dd43728124e96ef4b"
    text: {whats the point of having a portable language like Red, and then encumbering it with an over sized resource hungry text editor}
    sent: "2017-01-24T00:22:53.063Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "58869d4ae836bf7010821ff5"
    text: {yes, i know, have used it  and its very good, does a lot - but my point is:  we have a  'one meg'  - tiny and fully functional language - but then we use this over sized text editor - what is the original Red  dream ?}
    sent: "2017-01-24T00:18:18.589Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "58869c6d074f7be7630b9647"
    text: {https://mobile.twitter.com/red_lang/status/788648326279340032}
    sent: "2017-01-24T00:14:37.974Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58869b7311e7a7f61dd6cf09"
    text: {It isn't just for Red. It has extensions for many languages. It gives syntax highlighting, and depending on the language and extension, code completion and documentation lookup. ^/}
    sent: "2017-01-24T00:10:27.535Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58869a00dcb66e4f76a0a0cd"
    text: "VSCode"
    sent: "2017-01-24T00:04:16.837Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "588699afd43728124e96d505"
    text: "Which text editor?"
    sent: "2017-01-24T00:02:55.557Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588698d4cbcb281770a98838"
    text: {just wondering - The superb and brilliant  'Red' in under one meg in size,  but everyone is dribbling over this pimped up text editor that is what, 32 ish meg and then all  its dependancies on top of that - whats it all about ?}
    sent: "2017-01-23T23:59:16.483Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "58867875dcb66e4f769fd6d0"
    text: {On coupling, you may find that you do things differently in Red. While I do have a lot of libraries that are shared withing a system, I have a *lot* of apps that make up those systems. Rather than a more monolithic approach (maybe coarse grained is a better term), I build systems composed of loosely coupled scripts/programs. Within a given program, I don't worry too much about layering and encapsulation. }
    sent: "2017-01-23T21:41:09.090Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58866d5411e7a7f61dd5c79f"
    text: {I recommend that we newbies try VSCode with its Red extension }
    sent: "2017-01-23T20:53:40.808Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58856c5bcbcb281770a358f4"
    text: {I don't know, but you could tag him or message him}
    sent: "2017-01-23T02:37:15.377Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5885591fdcb66e4f7699ac3a"
    text: {Serious Question: Where can I get the "Take the RED Pill" shirt worn by Nenad Rakocevic in his conference talk? You know, the one with the stylized letters and the E that resembles the stack in the icon?}
    sent: "2017-01-23T01:15:11.321Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "58844e58d43728124e8aa741"
    text: {Reading the other blog articles help. But a **tl;dr** is, *for me personally*:^/*Steal ideas from others*, and^/*No rules set in stone*^/If someone else does it better.. you try to implement that in redbol ;)}
    sent: "2017-01-22T06:16:56.228Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58844d23d43728124e8aa2d4"
    text: {Altho, what I think you want:^/> What's the best way to learn enough to contribute? or explaining the internals - especially Red/System^/^/Is to get quickly upto speed to contribute to the red codebase. Technically For Red/System, it's the official [spec](http://static.red-lang.org/red-system-specs.html). But actually you're looking for an overall guiding principle. And just stating it's about being *simple*, doesn't feel enough?}
    sent: "2017-01-22T06:11:47.900Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58844b6b074f7be763ffd4f8"
    text: {@loganmac and others :point_up: [January 19, 2017 7:29 AM](https://gitter.im/red/red/welcome?at=58802479873d96e16d8802db)^/> 3)  I'd love to see any articles on design philosophy ^/^/On Philosophy, red is about being [simple](http://www.rebol.com/cgi-bin/blog.r?view=0509) ^/}
    sent: "2017-01-22T06:04:27.889Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58844b15074f7be763ffd34f"
    text: {No, I just misunderstood it... ^/I decided to keep quiet and start to read articles}
    sent: "2017-01-22T06:03:01.765Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58844a6ce836bf701076257f"
    text: {@gltewalt I don't understand what you mean, i.e. how reactive programming is strong coupling. If you do feel it is tho.. you can simply not use reactive programming. Also, suggestions of alternatives welcome! :) }
    sent: "2017-01-22T06:00:12.241Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588424a1e836bf7010759f9b"
    text: "I think that I don't understand it yet"
    sent: "2017-01-22T03:18:57.250Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588421d0e836bf701075987b"
    text: "*Strong Coupling"
    sent: "2017-01-22T03:06:56.932Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "588421bae836bf70107597de"
    text: {Isn't Reactive programming the total opposite of what has been preached for at least 20 years? Loose Coupling good. String coupling bad. }
    sent: "2017-01-22T03:06:34.903Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883ec01d43728124e892bdb"
    text: "Thanks for some clarification "
    sent: "2017-01-21T23:17:21.700Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5883ea73074f7be763fe7b8b"
    text: "👍🏻"
    sent: "2017-01-21T23:10:43.674Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58832e1e074f7be763fb16f6"
    text: {@gltewalt here's an example of what you can't do with lisp's lists:^/```^/red>> a: [ 1 2 3 ]^/== [1 2 3]^/red>> a: next a^/== [2 3]^/red>> a^/== [2 3]^/red>> a: back a^/== [1 2 3]^/red>> a^/== [1 2 3]^/red>> a: tail a^/== []^/red>> a^/== []^/red>> index? a^/== 4^/red>> a: head a^/== [1 2 3]^/red>> index? a^/== 1^/```}
    sent: "2017-01-21T09:47:10.744Z"
    editedAt: "2017-01-21T09:47:31.569Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58832d06519afee26b9385e3"
    text: {@gltewalt no, it's not, series is common interface, `block` is most similar thing to lists, however internally it is more like double linked list with additional information (like pointers to `head`, `tail`, current position etc)}
    sent: "2017-01-21T09:42:30.840Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5882cb69cbcb28177098587b"
    text: {Red gives you *enormous* flexibility. Use it wisely. :^^)}
    sent: "2017-01-21T02:46:01.566Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5882cb16d43728124e842ca8"
    text: {Without going too deep right off, since you're new to Red, there are limitations that may not be obvious. For example, `path!`s  (e.g. a/b/c)  support values that aren't legal when used in a path's literal form. For example, you can use a `paren!` in a path (a very handy feature), but you can't currently use an `issue!` in a literal path. You can `make` a path with one though. ^/^/```^/red>> type? second 'a/(b)/c^/== paren!^/red>> type? second 'a/#b/c^/*** Syntax Error: invalid path! at "'a/#b/c"^/*** Where: do^/red>> make path! [a #b c]^/== a/#b/c^/red>> type? second make path! [a #b c]^/== issue!^/```}
    sent: "2017-01-21T02:44:38.820Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5882c966dcb66e4f768e6872"
    text: {@gltewalt, `series!` is a pseudo-type that covers a range of datatypes which can be accessed via a consistent interface. `Block!` is the closest thing to Lisp lists. If you do `? series!` in the console, it will list all the types that can be treated as a series. Some, like `string!` can only contain specific value types (`char!` in the case of `any-string!` types, `integer!` in the case of `binary!`, `tuple!` in the case of `image!`), while `any-block!` types can reference any value. }
    sent: "2017-01-21T02:37:26.229Z"
    editedAt: "2017-01-21T02:38:14.759Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5882c820519afee26b92208a"
    text: {@CodeTortoise  :^^) Just have fun. You will end up making great stuff. }
    sent: "2017-01-21T02:32:00.935Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5882bdd3dcb66e4f768e382a"
    text: {@greggirwin Alright. I am pretty much sold on Red. I only hope to become good enough quick enough to start contributing to it, at least with apps of my own. This feels like a community of proper futurists, and I want to help build the future.}
    sent: "2017-01-21T01:48:03.007Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "5882aa49dcb66e4f768de5da"
    text: {Is Series the same structure, internally, as Lisp Lists?}
    sent: "2017-01-21T00:24:41.036Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5882a127300f220a66135a45"
    text: "@geekyi, that XKCD is *brilliant*!"
    sent: "2017-01-20T23:45:43.541Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5882a094cbcb28177097b2e5"
    text: {@CodeTortoise, anything you can do with R2 will eventually be doable in Red, and a whole lot more. Most datatypes are there, I/O and networking are the next big things to come, as they are very basic in Red right now.  The GUI and Draw systems are there, though a bit different in Red. Already Red is far beyond R2 in having a reactive GUI system. Look at some of the demos. The new things they're doing inside Excel are exciting, and the macro system is very powerful (also something Rebol doesn't have). With Red/System, you can work at the C level and do...anything. And that's all there today. Oh, and cross platform compiling, all built in.}
    sent: "2017-01-20T23:43:16.193Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58828b9dd43728124e83086c"
    text: {@CodeTortoise the [Trello Milestones](https://trello.com/b/FlQ6pzdB/red-tasks-overview) list is a good overview of the remaining things to get to 1.0. Note that there is some basic I/O already, just a bit limited for now.}
    sent: "2017-01-20T22:13:49.656Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5882692ed43728124e823409"
    text: {I know Red has the ambition of being a full-stack language, so it will definitely go beyond that eventually.}
    sent: "2017-01-20T19:46:54.032Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "588268d6d43728124e82320d"
    text: {I am wondering if Red is close to the capabilities of Rebol2?}
    sent: "2017-01-20T19:45:26.095Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "588268c2300f220a661219b6"
    text: {Sooo. I am going through a Rebol2 Tutorial "The Easiest Programming Language" and I find it unreal. The random little things I can do just from the console incredible, at least on Windows. }
    sent: "2017-01-20T19:45:06.514Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "588247dd074f7be763f6f8d7"
    text: "Relevant xkcd :p http://xkcd.com/1782/"
    sent: "2017-01-20T17:24:45.428Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58823cf3cbcb281770958a5a"
    text: "@matrixbot hi?"
    sent: "2017-01-20T16:38:11.730Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58823ce1cbcb281770958a13"
    text: {@gltewalt here in gitter is the place to talk :) ^/> Ok, first question: Why Gitter for newbies and not an IRC channel?^/^/Gitter also has an irc-bridge, which I'm not sure if it works}
    sent: "2017-01-20T16:37:53.002Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58820ea66c1635643c53de81"
    text: {Gitter is enough to follow whole Red development and community. You can see what happens on other channels  (FB, Tw) here as people share them here first (usually).^/In Gitter, welcome, red, doc, help used mostly.}
    sent: "2017-01-20T13:20:38.626Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5881dcad519afee26b8d2b0e"
    text: {I immediately notice too much diffusion (my opinion!) ^/12 different Gitter rooms, twitter, Facebook, mailing list, and I see now a mention of an IRC channel that's probably mostly empty at this point, and not a standalone, slick website. ^/By diffusion I mean scattering the advocacy and community building signal}
    sent: "2017-01-20T09:47:25.128Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5881d52111e7a7f61dbeb045"
    text: {Rebolers used to use Altme (a nice Rebol Chat system), and still do so. I lke it so much (for a 10 years old apps, it's still very powerfull). But it's a bit "darknet" and an opensource project needs something publicly open. If not, you will be not there propably.}
    sent: "2017-01-20T09:15:13.885Z"
    editedAt: "2017-01-20T09:15:42.878Z"
    v: 3
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5881d49511e7a7f61dbeac36"
    text: {Gitter: Probably because it can be link to github project.}
    sent: "2017-01-20T09:12:53.149Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5881b5dedcb66e4f7688301c"
    text: {Ok, first question: Why Gitter for newbies and not an IRC channel?}
    sent: "2017-01-20T07:01:50.293Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5881b5a76c1635643c51faa8"
    text: {Scrolling up just shows an indefinite history of messages. No topic. ^/Tried rejoin, and no topic was shown. ^/Bummer. }
    sent: "2017-01-20T07:00:55.594Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5881b4f1074f7be763f3a6bf"
    text: {Yes. I'm using the iPhone app, and it doesn't show a message upon join. ^/It may be visible if I scroll up a thousand miles, but it shouldn't be that way. ^/Checking...}
    sent: "2017-01-20T06:57:53.456Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "5881b47811e7a7f61dbdff3c"
    text: {I see topic as "New to Red language? Ask any question about it here, move to red/help room for deeper help with your Red code." in this room on top of the page, is that what you mean?}
    sent: "2017-01-20T06:55:52.189Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5881b37adcb66e4f76882579"
    text: {Are room topics set? I've not seen a message upon joining red/welcome or red/red. }
    sent: "2017-01-20T06:51:38.971Z"
    v: 1
    author: "5881a7e2d73408ce4f44c6e5"
) #(
    id: "58812569519afee26b89c781"
    text: {Also, `?`, `??`, `source` and `reflect` are some of the most useful functions}
    sent: "2017-01-19T20:45:29.772Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58812519519afee26b89c638"
    text: {@loganmac Do you know of dependent types? http://red.qyz.cz/dependent-types.html example by @rebolek }
    sent: "2017-01-19T20:44:09.805Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5881222511e7a7f61dbb27d7"
    text: {@geekyi and @dockimbel that's so awesome. Gradual typing is exactly what I want. I'd love to help with this if I can}
    sent: "2017-01-19T20:31:32.991Z"
    v: 1
    author: "55ce61210fc9f982bead6c20"
)#(
    id: "58811e2911e7a7f61dbb0fe5"
    text: {@loganmac, I'll tackle your third question, since nobody else has. ^/^/First, get familiar with using Red. A lot of notes here about that, but Rebol2 references are a fine source while more Red docs are ramped up. Understanding the basics (words and series, everything is data that is sometimes evaluated, etc.) will help. It's always good to question design decisions, but sometimes people will find Red and immediately think it needs to be changed to be more like Blub/X. Also, as a newcomer, you can contribute by pointing out what is unclear from your perspective. Some of us have lost that ability. :^^) And ask questions. That helps everyone.}
    sent: "2017-01-19T20:14:33.037Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5880a28811e7a7f61db79556"
    text: {@loganmac Gradual typing is planned to be supported by Red compiler, probably before 1.0.}
    sent: "2017-01-19T11:27:04.901Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5880975311e7a7f61db742df"
    text: {**tl;dr** Red doesn't sacrifice flexibility for correctness. The general philosophy being.. you add whatever features you need yourself}
    sent: "2017-01-19T10:39:15.377Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "588096a5300f220a6607e3eb"
    text: {Actually, I've used haskell and know what you mean approx. The point being, correctness isn't defined; you can go further than haskell}
    sent: "2017-01-19T10:36:21.952Z"
    editedAt: "2017-01-19T10:40:54.502Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "588096386c1635643c4b69f9"
    text: {@loganmac ^/> 1) Type system -[...] how to get the same level of "correctness" without having to rely on writing automated tests.^/^/What do you mean by "correctness" ?}
    sent: "2017-01-19T10:34:32.868Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58802b22cbcb2817708a2fc3"
    text: {@loganmac 3) :point_up: [January 19, 2017 7:10 AM](https://gitter.im/red/red/welcome?at=587ff5f411e7a7f61db4198e)}
    sent: "2017-01-19T02:57:38.880Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58802adf873d96e16d881e78"
    text: {@loganmac 2) @dockimbel has just written this in the Red channel:^/"See the macGUI branch, the work is almost finished, just needs some polishing and bugfixing."}
    sent: "2017-01-19T02:56:31.603Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "588028a211e7a7f61db50403"
    text: {@loganmac Welcome to Red.^/^/1) Values in Red are strongly typed. References to values are not constrained by datatype. Red function arguments can be typed but, with the current bootstrap compiler and the interpreter, these give runtime errors rather than compile time ones.^/^/It is expected that the self-hosted compiler will provide some level of type checking. }
    sent: "2017-01-19T02:46:58.832Z"
    editedAt: "2017-01-19T02:55:12.807Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "58802479873d96e16d8802db"
    text: {Hey guys, I just discovered Red the other day. Wow. Exciting stuff. I'm also looking for as much information as I can, but I had a few questions: ^/1) Type system - it seems that Red is a dynamic language a la Scheme, is that true? If so, are there any efforts to add gradual typing? My current language of choice is Haskell and I'm wondering how to get the same level of "correctness" without having to rely on writing automated tests.^/2) Is the GUI for mac in a state where it's usable? It seems most of the examples are for GUI but I'm a mac developer primarily.^/3) What's the best way to learn enough to contribute? I'd love to see any articles on design philosophy or explaining the internals - especially Red/System.}
    sent: "2017-01-19T02:29:13.527Z"
    v: 1
    author: "55ce61210fc9f982bead6c20"
) #(
    id: "587ff5f411e7a7f61db4198e"
    text: {@CodeTortoise, learning R2 will not be wasted time. The languages are fundamentally compatible. There will be some differences, but if you get comfortable with the basic concepts of `words`, `series`, and the various datatypes, it will serve you well.^/^/Even if you don't end up writing Red full time, it's a handy language to have around for building tools, generating code, parsing data, scripting, etc. And, as you noted, it's a great language for thinking in, which helps you with all your development.}
    sent: "2017-01-18T23:10:44.677Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "587ff0a8dcb66e4f767e9b22"
    text: "My goal is to replicate all of it in Red one day"
    sent: "2017-01-18T22:48:08.840Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587ff05d6c1635643c484504"
    text: {I'm going to try out [7 languages in 7 weeks](https://www.goodreads.com/book/show/7912517-seven-languages-in-seven-weeks) and it's sequel sometime (next month?). Let me know if you're interested. }
    sent: "2017-01-18T22:46:53.329Z"
    editedAt: "2017-01-18T22:49:51.610Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "587fefff300f220a6604de5f"
    text: {@CodeTortoise learning more is always better I believe. Don't avoid rust I'd say. J may be too steep of a jump if you haven't tried something like haskell before; but I could be wrong}
    sent: "2017-01-18T22:45:19.811Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587fef0a074f7be763ea61e5"
    text: {@geekyi Honestly, I am just trying to build up enough expertise in alternative languages that would mitigate me having to use C++, Java, .NET stuff, Javascript... you the kind of languages I can list. I thought about Rust, but I kind of want to avoid that too. }
    sent: "2017-01-18T22:41:14.651Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fee67300f220a6604d0ed"
    text: {> Guh, J, Red, now Rebol. I may just have to give up Erlang for the month.^/^/Careful.. I may suddenly start suggesting more to add to that list :p}
    sent: "2017-01-18T22:38:31.662Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587fede911e7a7f61db3ebb7"
    text: {@geekyi There is no way to retroactively reply to you. Hah. I shall give Rebol2 to my fullest attention, then return to do some damage with Rd.}
    sent: "2017-01-18T22:36:25.373Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fed8d300f220a6604cdbf"
    text: {I see. Actually, I am curious to try out Rebol2  if only for the little interface that pops up. Yeah, I think I will do that. Guh, J, Red, now Rebol. I may just have to give up Erlang for the month.}
    sent: "2017-01-18T22:34:53.678Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fecfecbcb281770891b53"
    text: {At the *very* least, you'll understand some of the reasons for the design decisions in Red}
    sent: "2017-01-18T22:32:30.491Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587fec806c1635643c4827d0"
    text: {Rebol2 is definitely more featured, mature, and stable than red, but the gap is closing fast}
    sent: "2017-01-18T22:30:24.507Z"
    editedAt: "2017-01-18T22:30:57.256Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "587fec3c300f220a6604c6d5"
    text: {Red may diverge in the future, I don't know, but I don't feel I wasted time by learning it}
    sent: "2017-01-18T22:29:16.556Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587febfecbcb281770891607"
    text: {@CodeTortoise Advantage is rebol2 is very similar to red. Or kind of, the other way around}
    sent: "2017-01-18T22:28:14.836Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587febfc300f220a6604c435"
    text: {I am considering it since 90% combatability is still very high for what are essentially different languages.}
    sent: "2017-01-18T22:28:12.941Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587febbc300f220a6604c2af"
    text: {@geekyi Is there an advantage to learning rebol2?  I mean, aside from R3 only being alpha? I know there is a lot more material for rebol2, but is the language more featured than Red?}
    sent: "2017-01-18T22:27:08.089Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fe847873d96e16d86c83a"
    text: {@CodeTortoise learning and using rebol2 would not be wasted time I believe as a newbie}
    sent: "2017-01-18T22:12:23.381Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587fddb2300f220a66046c66"
    text: {Red is a *great* language of thought. And if you don't like it, you can use it to build the language you want. :^^)}
    sent: "2017-01-18T21:27:14.363Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "587fd6a9e836bf70105f44a2"
    text: {@greggirwin Thanks you! That seems like solid advice. I am interested in well, I don't know. Build things I think I need but aren't readily available or are just a little annoying to use, like a better pomodoro app. Red seems to be a better "language of thought" than a lisp, since it seems that ALL THE BATTERIES are a core part of the language.}
    sent: "2017-01-18T20:57:13.233Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fbf84e836bf70105ea951"
    text: "And welcome to the Red community!"
    sent: "2017-01-18T19:18:28.417Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "587fbf5f6c1635643c46f721"
    text: {GUIs are fun to play with, and learn the VID dialect a bit, to see how easy it is to create GUIs. Then you may want to step back and do some console work. Get the basics down and understand the language fundamentals more, because it can seem quite different at first. Then you can dive into Red/System and see how the whole things works from the ground up.}
    sent: "2017-01-18T19:17:51.102Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "587fabdc96a565f844096592"
    text: {GUI is really easy to do. Look at some examples and feel free to ask in https://gitter.im/red/red/gui-branch}
    sent: "2017-01-18T17:54:36.046Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587fab76873d96e16d853c3a"
    text: {Without learning a library, I typically get stuck making console applications. I guess I don't really need to be so tied back anymore!}
    sent: "2017-01-18T17:52:54.745Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fab3ccbcb2817708775c4"
    text: {Well, the thing I find really interesting is that it is advertised as a full stack language. So, it can be used for systems programming, application programming, and general scripting.  I guess the most satisfying thing would be to explore it's GUI capabilities.}
    sent: "2017-01-18T17:51:56.577Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587faabe61e516c157917283"
    text: {I think it depends what you want to do. Some people are super excited about GUI, other do not care about GUI at all, but find other parts great. }
    sent: "2017-01-18T17:49:50.189Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587faa7cdcb66e4f767cdc34"
    text: {Still, any recommended path? I know that reading a book cover to cover is not the most efficient way to learn a language, and I should spend as much time playing with it before learning everything about it. What can I look at that will make me dangerous?}
    sent: "2017-01-18T17:48:44.367Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587faa43300f220a660336cb"
    text: {The Red website is super interesting because [almost] every blog post is a tutorial. I came to ask about what is the best way to get started and up to speed, but every link a click on I bump into another example.}
    sent: "2017-01-18T17:47:47.475Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fa9ced99b1dd03d308a14"
    text: {"Red" is right.}
    sent: "2017-01-18T17:45:50.587Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587fa9b011e7a7f61db23511"
    text: {I feel like I found out about red/Red/RED? at the perfect time. I was about to dig into the Eve, take a bite into the future, then I realized a more interesting future is actively being worked on.}
    sent: "2017-01-18T17:45:20.498Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fa95196a565f844096529"
    text: "Hi @CodeTortoise, you are welcomed! :smile: "
    sent: "2017-01-18T17:43:45.764Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587fa943e836bf70105e1488"
    text: "Hello peeps."
    sent: "2017-01-18T17:43:31.661Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fa93d074f7be763e8c1e7"
    text: "Actually, that was an uncomfortable entrance."
    sent: "2017-01-18T17:43:25.982Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587fa923300f220a66032ffe"
    text: "Hello. I have come to be welcomed."
    sent: "2017-01-18T17:42:59.390Z"
    v: 1
    author: "57e1f82440f3a6eec06663f2"
) #(
    id: "587b76f7300f220a66edaea3"
    text: {@dockimbel Thank you! That demo is always interesting.}
    sent: "2017-01-15T13:19:51.167Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "587b76c111e7a7f61d9baa01"
    text: {@koba-yu Feel free to ask as many questions as you need. ;)}
    sent: "2017-01-15T13:18:57.946Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587b769fe836bf701047e3f0"
    text: {@koba-yu You can see an example of set-word usage in Draw blocks in the [Eve clock](http://www.red-lang.org/2016/07/eve-style-clock-demo-in-red-livecoded.html) demo.}
    sent: "2017-01-15T13:18:23.840Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587b769511e7a7f61d9ba934"
    text: {@dockimbel I hope so, too. It is obvious that Ruby became popular in Japan because it has many Japanese documents and Web site about it. Please let me ask on gitter when I get a new question!}
    sent: "2017-01-15T13:18:13.811Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "587b754c873d96e16d6e9721"
    text: {@koba-yu You're welcome. Japanese support would be nice to have, I guess many Rubyists in Japan could be interested in Red.}
    sent: "2017-01-15T13:12:44.143Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587b74d3074f7be763d2f8a5"
    text: {I am trying to translate the document into Japanese but it takes some time. It has a lot of pages!}
    sent: "2017-01-15T13:10:43.908Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "587b74a2300f220a66eda4e3"
    text: "@dockimbel Thank you for your reply!"
    sent: "2017-01-15T13:09:54.992Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "587b747be836bf701047db98"
    text: "@dockimbel Oh,  make sense."
    sent: "2017-01-15T13:09:15.170Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "587b740e6c1635643c2fb256"
    text: "@geekyi Thank you for your suggesting example!"
    sent: "2017-01-15T13:07:26.952Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "587b57e3074f7be763d28bd7"
    text: {@koba-yu ^/> What does "current position" mean and what does this section want to tell?^/^/_Draw code_ is a block! series, series have positions (also called _index_ or _offset_ in various documentation). So using a set-word! in Draw will set the word to the _current_ block position (just after the set-word). Such reference can be later used to directly access the content of the Draw block from that specific position.}
    sent: "2017-01-15T11:07:15.529Z"
    editedAt: "2017-01-15T11:09:26.018Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
)#(
    id: "587b3a0ae836bf701047096b"
    text: "@koba-yu "
    sent: "2017-01-15T08:59:54.798Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587b39fb873d96e16d6db043"
    text: {:point_up: [January 15, 2017 11:16 AM](https://gitter.im/red/red/welcome?at=587b13a8e836bf7010467abc) I'm not sure, but possibly refers to `draw` being a dialect.^/```^/draw [^/  position-of-thing: text "thing"^/]^/```^/I agree that it is confusing. Any suggestions for a better wording?}
    sent: "2017-01-15T08:59:39.519Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "587b2819cbcb2817706f9f0a"
    text: "I'm "
    sent: "2017-01-15T07:43:21.037Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "587b13a8e836bf7010467abc"
    text: {I do not see the meaning of the [description in the Red document](https://doc.red-lang.org/en/draw.html#_source_position) below:^/^/```^/== Source position ^/^/Set-words can be used in the Draw code *in-between* commands to record the current position in Draw block and be able to easily access it later.^/```^/^/What does "current position" mean and what does this section want to tell?}
    sent: "2017-01-15T06:16:08.732Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "587828f8873d96e16d5f9ee8"
    text: {might be helpful: I update it weekly:  http://www.mycode4fun.co.uk/red-beginners-reference-guide  -  also adding new examples here:     http://www.mycode4fun.co.uk/About-Red-Programming  -  my site seems to be all about Red just lately.}
    sent: "2017-01-13T01:10:16.067Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "587731dc300f220a66d9c303"
    text: {@endo64 ^/> context? returns system/words for unset! values, is this desirable or just a side effect?^/^/No, `context?` returns system/words for `unset-value` word, the value (or lack of) of that word is irrelevant there, the context is a property of words only.}
    sent: "2017-01-12T07:35:56.272Z"
    editedAt: "2017-01-12T07:36:40.994Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58764e1fcbcb2817705746f2"
    text: {The context is something else than the value, it is a collection of word-value pairs. This collection cannot be `none`, since it also contains other word-value pairs.}
    sent: "2017-01-11T15:24:15.017Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58764b34300f220a66d5115d"
    text: {`unset-word` appears in `system/words` when typed in console, so it is normal `context?` returns `system/words` for that unset! word, but I wonder if `context?` should consider the value is `unset` and returns `none`.^/```^/red>> probe context? 'unset-word^/...^/    caps-lock: unset^/    num-lock: unset^/    unset-word: unset^/]^/```}
    sent: "2017-01-11T15:11:48.766Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "587632b8873d96e16d5457ae"
    text: {The word `unset-value` must be loaded to be evaluated, so it must be bind somewhere !}
    sent: "2017-01-11T13:27:20.582Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "58762986dec171b811d52044"
    text: {In other terms, every word has a binding, even if it is to the unset value...}
    sent: "2017-01-11T12:48:06.639Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58762790e836bf70102c9efb"
    text: {looks like context field should be filled with something and `system/words` is the default}
    sent: "2017-01-11T12:39:44.073Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58761e3d074f7be763b92d70"
    text: {@dockimbel  `context?` returns `system/words` for `unset!` values, is this desirable or just a side effect?^/```^/red>> same? system/words context? 'unset-value^/== true^/```}
    sent: "2017-01-11T11:59:57.437Z"
    editedAt: "2017-01-11T12:00:12.401Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5875f605074f7be763b85b61"
    text: {without making assumptions on what is actually there}
    sent: "2017-01-11T09:08:21.786Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5875f5f3074f7be763b85af6"
    text: {@geekyi I suppose that it is safe to just use what `context?` returns in functions which want context and that's it}
    sent: "2017-01-11T09:08:03.680Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5875f31ddb9cafe9183c24a4"
    text: {@geekyi you may want to read [this](http://red.qyz.cz/safe-and-persistent-locals.html)}
    sent: "2017-01-11T08:55:57.423Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5875f105dec171b811d3e023"
    text: "I see"
    sent: "2017-01-11T08:47:01.917Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5875f0b1d99b1dd03d2fac76"
    text: {No, local words are initialized on each call. There are ways to get closure-like behavior though.}
    sent: "2017-01-11T08:45:37.754Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5875f041873d96e16d52f4e7"
    text: {Is a `/local` word like a closure in other languages?}
    sent: "2017-01-11T08:43:45.888Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5875efbd300f220a66d2f9e3"
    text: {That is something that needs a double look to realize that it is a `function!` which returns a `context!` that references the function itself}
    sent: "2017-01-11T08:41:33.531Z"
    editedAt: "2017-01-11T08:42:39.429Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5875e068cbcb28177054c40b"
    text: "OK that is clear then :smile: "
    sent: "2017-01-11T07:36:08.553Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5875e053873d96e16d529f82"
    text: "@meijeru For all the locally bound words, yes."
    sent: "2017-01-11T07:35:47.303Z"
    editedAt: "2017-01-11T07:35:55.885Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5875e035300f220a66d2ae26"
    text: {Does that also go for the arguments (including refinements) of a function?}
    sent: "2017-01-11T07:35:17.966Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5875db38873d96e16d5288ce"
    text: {@meijeru A local word in a function:^/```lisp^/red>> do has [a][a: 1 probe context? 'a]^/func [/local a][a: 1 probe context? 'a]^/== func [/local a][a: 1 probe context? 'a]^/```}
    sent: "2017-01-11T07:14:00.592Z"
    editedAt: "2017-01-11T07:15:16.017Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5875dafc074f7be763b7df58"
    text: {Yes, but `context?` has an argument of `word!` type, so my question is: which kind of words yield a result of `function!` type?}
    sent: "2017-01-11T07:13:00.387Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5875d504873d96e16d526d5f"
    text: {Thanks. So I guess I answered that above, `context!` type is not a first-class type, so only derived type values can be returned (object! or function!).}
    sent: "2017-01-11T06:47:32.914Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5874b52ecbcb2817704e077e"
    text: {@dockimbel :point_up: [January 9, 2017 8:35 PM](https://gitter.im/red/red/welcome?at=587383a3873d96e16d4572d7)}
    sent: "2017-01-10T10:19:26.200Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5874973fdec171b811cc17da"
    text: {> I wonder, how can `context?` return a value of `function!`type.^/^/@dockimbel his question was ^^}
    sent: "2017-01-10T08:11:43.840Z"
    editedAt: "2017-01-10T08:11:51.743Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58746ad96c1635643c0aa37e"
    text: {@meijeru ^/> However, I don't find an anwer to my own question there...^/^/Could you point me to your question?}
    sent: "2017-01-10T05:02:17.256Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5873fc2061fac5a03db8a324"
    text: "@geekyi feels still a bit new :/"
    status: true
    sent: "2017-01-09T21:09:52.420Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5873fbfacbcb2817704a61ee"
    text: {:point_up: [January 9, 2017 6:39 PM](https://gitter.im/red/red/welcome?at=5873929e074f7be763ab7d18)^/> I'm starting to understand things^/^/Quick! Write newbie notes before you understand it all! ;)}
    sent: "2017-01-09T21:09:14.151Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5873d14adec171b811c7f9b3"
    text: {:point_up: [December 23, 2016 3:09 PM](https://gitter.im/red/red/welcome?at=585cf7d2af6b364a29ea0fcd) :point_up: [December 23, 2016 5:01 PM](https://gitter.im/red/red/welcome?at=585d1235c5a4e0233bbfc361) :point_up: [December 23, 2016 5:47 PM](https://gitter.im/red/red/welcome?at=585d1cf9db9cafe9183a55c7) @maximvl discussion about static contexts for future reference}
    sent: "2017-01-09T18:07:06.621Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5873bdafcbcb28177048da07"
    text: {@maximvl Have a look to **Rebol** `forskip` source ;-)}
    sent: "2017-01-09T16:43:27.591Z"
    editedAt: "2017-01-09T16:43:50.374Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5873b740873d96e16d46c074"
    text: {@maximvl `func` as well as `function` are convenient shortcuts for what could be done with `make function!` [...], i.e. they create values of type `function!`.  The full behaviour of values of type `function!` is indeed described in `runtime/datatypes/function.reds`.}
    sent: "2017-01-09T16:16:00.167Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "58739ac4dec171b811c67c26"
    text: {@meijeru and the real source is in `runtime/datatypes/function.reds`, right?}
    sent: "2017-01-09T14:14:28.209Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58739a7d6c1635643c05cd97"
    text: {@meijeru I see, pretty much a shortcut like `to-` ones, thanks :)}
    sent: "2017-01-09T14:13:17.309Z"
    editedAt: "2017-01-09T14:13:19.715Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58739a3bdec171b811c679a9"
    text: {@maximvl `func` is defined in `%environment/natives.red`. NB it is a `native`in contrast to Rebol 2 and 3, where `func`is defined as a mezzanine as follows:^/```^/func: func [^/    "Defines a user function with given spec and body."^/    [catch]^/    spec [block!] {Help string (opt) followed by arg words (and opt type and string)}^/    body [block!] "The body block of the function"^/][^/    throw-on-error [make function! spec body]^/]^/```^/repectively^/```^/func: make function! [[^/    "Defines a user function with given spec and body."^/    spec [block!] {Help string (opt) followed by arg words (and opt type and string)}^/    body [block!] "The body block of the function"^/][^/    make function! copy/deep reduce [spec body]^/]]^/```^/I leave it to you to consider the differences...^/}
    sent: "2017-01-09T14:12:11.516Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "587399b5074f7be763aba9ca"
    text: {```^/red>> forskip x 2 [ probe x/1 ]^/1^/3^/5^/7^/```}
    sent: "2017-01-09T14:09:57.774Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873991e873d96e16d45fc2a"
    text: "this one works as expected :D"
    sent: "2017-01-09T14:07:26.370Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587399176c1635643c05bf17"
    text: {ok, after playing with contexts seems like `foreach` doesn't bind body to another context, probably it does something like this:^/```^/forskip: func ['series skip body][while [not tail? get series] [do body set series at get series skip + 1]]^/```}
    sent: "2017-01-09T14:07:19.316Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58739881300f220a66c65933"
    text: {so `x` in `body` still points to original one, and it's position doesn't advance}
    sent: "2017-01-09T14:04:49.567Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873985e300f220a66c65839"
    text: {and output is:^/```^/red>> x: [1 2 3 4 5 6 7]^/red>> forskip x 2 [ probe x/1 ]^/1^/1^/1^/1^/```}
    sent: "2017-01-09T14:04:14.579Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58739834300f220a66c6570f"
    text: {small iteration mezz here, but I don't get how should I `bind` body to have an effect similar to `foreach`:^/```^/forskip: func [series skip body] [ while [ not tail? series] [ do body series: at series skip + 1 ]^/```}
    sent: "2017-01-09T14:03:32.173Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587393a2dec171b811c64b7c"
    text: {and `function` is really just a connection between context, which filled with arguments and a body which has words binded to this context}
    sent: "2017-01-09T13:44:02.394Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873932f6c1635643c059a10"
    text: "I'm starting to understand things"
    sent: "2017-01-09T13:42:07.759Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873932761fac5a03db5ee85"
    text: "nice"
    sent: "2017-01-09T13:41:59.577Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58739326dec171b811c648fe"
    text: "and each word has a reference to context"
    sent: "2017-01-09T13:41:58.511Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587392f461fac5a03db5ed02"
    text: {```^/red>> f: func [x] [ x + y ]^/== func [x][x + y]^/red>> bind body-of :f context [y: 10]^/== [x + y]^/red>> bind body-of :f context [x: 5]^/== [x + y]^/red>> do body-of :f^/== 15^/red>> f 1^/== 15^/red>> context? first body-of :f^/== make object! [^/    x: 5^/]^/red>> context? third body-of :f^/== make object! [^/    y: 10^/]^/```}
    sent: "2017-01-09T13:41:08.340Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873929e074f7be763ab7d18"
    text: {hm, so `bind` doesn't really bind block, it binds words inside}
    sent: "2017-01-09T13:39:42.102Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58738f8f61fac5a03db5da42"
    text: {@meijeru do you know by chance where is a definition of `func` ?}
    sent: "2017-01-09T13:26:39.935Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873877664d5fd7e1696b13f"
    text: {@meijeru so function also has context reference, makes sense, it's there but it's hidden and you need to keep it in mind}
    sent: "2017-01-09T12:52:06.894Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "587385facbcb281770477175"
    text: {@maximvl If you look at the source of `%runtime/datatypes/structures.reds` it may become clear how these different items hang together. However, I don't find an anwer to my own question there... }
    sent: "2017-01-09T12:45:46.455Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "587384bf873d96e16d457872"
    text: {to me this part feels messy, all things mixed together instead of clear definition for what is `context`, what is `function`, what is `object` and how they all relate together}
    sent: "2017-01-09T12:40:31.480Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873846a6c1635643c0540b7"
    text: {I would say that `function` has a context, but it doesn't really fit in my mind how `function` itself can be a `context`}
    sent: "2017-01-09T12:39:06.350Z"
    editedAt: "2017-01-09T12:39:15.933Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587383ff61fac5a03db59304"
    text: {so, to me `context` is key-value table which has bindings for particular words}
    sent: "2017-01-09T12:37:19.970Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587383a3873d96e16d4572d7"
    text: {I wonder, how can `context?` return a value of `function!`type.}
    sent: "2017-01-09T12:35:47.363Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "587376e0873d96e16d45282e"
    text: {@maximvl `context!` is an *internal* datatype, from user perspective, it does not exist, so that function will return the derived type (either object! or function! for now).}
    sent: "2017-01-09T11:41:20.709Z"
    editedAt: "2017-01-09T11:41:52.733Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58736ad264d5fd7e169607dd"
    text: {means that `context` is `object` which contradicts saying `object derive from a context`}
    sent: "2017-01-09T10:49:54.175Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58736a9c300f220a66c54879"
    text: {and^/```^/red>> object? context? 'f^/== true^/```}
    sent: "2017-01-09T10:49:00.482Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58736a84dec171b811c56416"
    text: {@dockimbel since you mentioned types I would assume that `context?` checks the type of argument to be a `context!` as with other datatypes}
    sent: "2017-01-09T10:48:36.131Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587362756c1635643c0476c8"
    text: {Right, from a type hierarchy perspective, you can consider that both `function!` and `object!` derive from a `context!` type (which actually exists, but not exposed to users).}
    sent: "2017-01-09T10:14:13.874Z"
    editedAt: "2017-01-09T10:14:50.775Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5873621661fac5a03db4cb92"
    text: "so context can be function itself, interesting"
    sent: "2017-01-09T10:12:38.813Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873620b64d5fd7e1695d3d7"
    text: {@dockimbel nice, I probably missed it^/```^/red>> f: func [x y] [ probe context? 'x ]^/== func [x y][probe context? 'x]^/red>> f 1 2^/func [x y][probe context? 'x]^/== func [x y][probe context? 'x]^/```}
    sent: "2017-01-09T10:12:27.332Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873609d6c1635643c046ecf"
    text: {`bind` already accepts an object! or function! value as second argument, see `help bind`.}
    sent: "2017-01-09T10:06:21.508Z"
    editedAt: "2017-01-09T10:06:43.964Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58736031dec171b811c5246c"
    text: {@maximvl `context-of`already exists, it's named `context?`.}
    sent: "2017-01-09T10:04:33.211Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58735e1cdec171b811c517f5"
    text: {and `context-of` could also allow to inspect word's context and do stuff}
    sent: "2017-01-09T09:55:40.445Z"
    editedAt: "2017-01-09T09:56:49.414Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58735d9c61fac5a03db4b2cf"
    text: {don't you think it would be more clear to have something like this: `bind code context-of word` ?}
    sent: "2017-01-09T09:53:32.054Z"
    editedAt: "2017-01-09T09:56:58.742Z"
    v: 4
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58735d87074f7be763aa5562"
    text: {@dockimbel and one more question - the `bind` with word argument feels confusing because behind the scenes it takes word's context and binds to it}
    sent: "2017-01-09T09:53:11.702Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58735d33300f220a66c4f944"
    text: "ah, I see"
    sent: "2017-01-09T09:51:47.085Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58735cd361fac5a03db4ae27"
    text: "is it something it is possible to take care of?"
    sent: "2017-01-09T09:50:11.102Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58735cc3cbcb28177046754f"
    text: {@dockimbel words can also be set with `set` and maybe other different ways}
    sent: "2017-01-09T09:49:55.458Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58735c7a64d5fd7e1695a03c"
    text: {@maximvl Yes, that is what `make object!` of `function` are doing. We haven't exposed the `collect-words` R/S function at Red level yet, though it's trivial to write using a Parse rule. Though, the semantics of a set-word (or `set` native) is to change the referred value of a word in a context, not to extend that context (which is a different operation).}
    sent: "2017-01-09T09:48:42.850Z"
    editedAt: "2017-01-09T09:49:33.986Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58735b9b64d5fd7e16959ae2"
    text: "instead of global one"
    sent: "2017-01-09T09:44:59.550Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58735b97dec171b811c502fe"
    text: {I wonder if it possible to run code and collect all set-things to specified context}
    sent: "2017-01-09T09:44:55.093Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58735b64dec171b811c50238"
    text: {```^/red>> c: context [x: 5]^/== make object! [^/    x: 5^/]^/red>> code: [x: 6 y: 7]^/== [x: 6 y: 7]^/red>> bind code c^/== [x: 6 y: 7]^/red>> do code^/== 7^/red>> c^/== make object! [^/    x: 6^/]^/red>> y^/== 7^/red>> x^/*** Script Error: x has no value^/*** Where: catch^/```}
    sent: "2017-01-09T09:44:04.313Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58735b28074f7be763aa4312"
    text: {@dockimbel regarding adding words I was thinking about a little bit different scenario}
    sent: "2017-01-09T09:43:04.216Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "587353696c1635643c041c0d"
    text: {Moreover, supporting extending objects in-place with new words is trivial for the interpreter and a challenge for the compiler, that's why it's not implemented in Red yet.}
    sent: "2017-01-09T09:10:01.962Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58734e6b300f220a66c49e52"
    text: {For adding words, you can do that already using `make` and create a new extended object. Though if you need a datastructure where you can freely add/remove key/value pairs, then object! is not the right type, block!, map! or hash! are much better suited for that.}
    sent: "2017-01-09T08:48:43.476Z"
    editedAt: "2017-01-09T08:50:05.325Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58734d61074f7be763a9fae6"
    text: {@maximvl If you can remove words from contexts, then some bound words could refer to contexts where they are not defined anymore:^/```lisp^/obj: context [a: 2 b: [a + 1]]^/```^/If you could remove `a` word from that `obj` context, they `[a + 1]` would not be able to be evaluated anymore (it would just crash badly, unless you manually rebind it to another context).^/^/Moreover, the position of a word in the context symbol table is used pretty much everywhere internally, both in Rebol and Red implementations, so it would not be feasible to remove that "slot", or in other words, you could "delete" the word from the object but the entry in the object's symbol table will need to stay or everything would collapse.}
    sent: "2017-01-09T08:44:17.904Z"
    editedAt: "2017-01-09T08:45:09.115Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5873497864d5fd7e16953482"
    text: "by static I mean inability to add/remove words"
    sent: "2017-01-09T08:27:36.823Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5873495a6c1635643c03e7c3"
    text: {@dockimbel could you explain why contexts are static? we had a little discussion here and it turns out that set-words don't create a binding in current context, but in the global one}
    sent: "2017-01-09T08:27:06.102Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58734038cbcb28177045c7ba"
    text: {@9214 ^/> I don't get why we need `to-type`shortcuts^/^/It's not a big need, but they are helpful for:^/1. Auto-completion support in the console or in an IDE^/2. Discoverability for beginners (using `help` in console)^/3. Faster code reading, as `to-<type>` stands like a single word.^/^/Those are not heavy gains and I have mixed feelings about keeping those wrapper functions or removing them, though, for now, I think the benefits are worth the extra space they take in the runtime library.}
    sent: "2017-01-09T07:48:08.041Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "587026275ffdeea72316aceb"
    text: "It’s always interesting."
    sent: "2017-01-06T23:20:07.238Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58702617c02c1a3959f6b337"
    text: {That’s nice, thanks. I love the stories how people discovered Rebol/Red.}
    sent: "2017-01-06T23:19:51.150Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5870258eaf6b364a293cb610"
    text: {just another .net runtime programming language. it happen to be there was some cross language posting, which brought me to your world.}
    sent: "2017-01-06T23:17:34.001Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "58702555aa6be0472f196eff"
    text: "Thanks"
    sent: "2017-01-06T23:16:37.494Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58702524da229f8d5bf29182"
    text: "https://gitter.im/rsdn/nemerle"
    sent: "2017-01-06T23:15:48.779Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "587025209d4cc4fc5384ff74"
    text: "you have good ideas, BTW."
    sent: "2017-01-06T23:15:44.908Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5870250aaa6be0472f196d51"
    text: "@pr-yemibedu sorry, but what is nemerle chat?"
    sent: "2017-01-06T23:15:22.752Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "587021ef5ffdeea723169627"
    text: {last time I saw Rebol was over a decade ago at university. I just saw red today referenced from a nemerle chat.}
    sent: "2017-01-06T23:02:07.347Z"
    editedAt: "2017-01-06T23:02:40.595Z"
    v: 2
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "5870219caf6b364a293c9dbd"
    text: {@maximvl probably no one disagrees where to source is located. just that it in not as quickly consumeable to first timers as the length of growth and maturiy increases.}
    sent: "2017-01-06T23:00:44.984Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "58702116af6b364a293c9aa8"
    text: {@rebolek the main red page could have a link at the end of the opening paragraph to a wiki. Maybe something on wikibooks.}
    sent: "2017-01-06T22:58:30.137Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "587020d2af6b364a293c99cb"
    text: {@dander that page should be referenced from a nice Red feature list page.}
    sent: "2017-01-06T22:57:22.290Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
) #(
    id: "586ff0499d4cc4fc5384058e"
    text: {@pr-yemibedu @rebolek there is already this page: https://github.com/red/red/wiki/Differences-between-Red-and-Rebol^/I have no idea how comprehensive it is, but it'd probably be good to add any things there}
    sent: "2017-01-06T19:30:17.092Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "586fcc2e9d4cc4fc5383436c"
    text: "@maximvl Absolute truth."
    sent: "2017-01-06T16:56:14.563Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "586fcc129d4cc4fc538342db"
    text: {@9214 Rebol has advantage of being here for much longer :) But IMO Red is now used by more people. The documentation will get better.}
    sent: "2017-01-06T16:55:46.837Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "586fc87b9e6f00e74a040ce3"
    text: "@maximvl sure thing"
    sent: "2017-01-06T16:40:27.974Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586fc79f5ffdeea723145f64"
    text: {Red blog posts are the best source of this information for now}
    sent: "2017-01-06T16:36:47.481Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586fc65faa6be0472f170cca"
    text: {@rebolek Yes please! Rebol is a little bit better in terms of documentation and "maturity", but Red brings to the table lots of new features and I worried that I may lost something if I'll stick to the R2 while learning the very basics (and later transition back to Red will be harder). A comprehensive list of planned and implemented features of Red will be very helpful.}
    sent: "2017-01-06T16:31:27.266Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586fbbc6da229f8d5bf02657"
    text: {@pr-yemibedu good idea. I will try to do some list. Maybe some wiki will be better? }
    sent: "2017-01-06T15:46:14.283Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "586fba0e9e6f00e74a03ba38"
    text: {was it ever planned to have such a list of the current features that set it apart from Rebol? Something like a page with What is new, what breaks, and what is removed. Being new but also being told that I can refer to the Rebol documentation for now is a little confusing to get the lure of not just staying with Rebol. And some posts on red-lang are long to tell about a small set of list points. I do like what you are trying to do.}
    sent: "2017-01-06T15:38:54.737Z"
    v: 1
    author: "57e1579d40f3a6eec0664800"
)#(
    id: "586d4673c02c1a3959e8fd3f"
    text: {What's different in red can be mostly found in the red blog posts}
    sent: "2017-01-04T19:01:07.677Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d46539e6f00e74af80c32"
    text: {Yep, like  @greggirwin  says as an expert and me from my newbie experience ;P}
    sent: "2017-01-04T19:00:35.373Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d462f9d4cc4fc5377650e"
    text: {@9214 In general, it's mostly compatible with rebol 2 and 3}
    sent: "2017-01-04T18:59:59.486Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "586d460b9d4cc4fc537764a2"
    text: {Red is highly compatible with a Rebol mindset and understanding. If you aren't coming from Rebol, you shouldn't need to think in terms of Rebol at all. }
    sent: "2017-01-04T18:59:23.026Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586d2b72af6b364a292e2683"
    text: {Sure. I meant it is impossible to be compatible for new features like reactions etc. because they don't exist in Rebol. }
    sent: "2017-01-04T17:05:54.615Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "586d1e9aaf6b364a292dd95c"
    text: {@endo64 why should we? people who have Rebol experience can easily find their ways in Red}
    sent: "2017-01-04T16:11:06.156Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586d12bb7a3f79ef5dd6223b"
    text: {And VID has many change even the core concept is same. But I think we should consider the compatibility on functions, natives etc. }
    sent: "2017-01-04T15:20:27.821Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "586d04d7aa6be0472f079b17"
    text: {many things changed after Rebol was created, like hashes/maps are a must to have in a language now}
    sent: "2017-01-04T14:21:11.411Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586d04b2d99b1dd03d2edba2"
    text: {There are already improvements that can’t be found in Rebol, like object ownership, reactive programming, macros, ...}
    sent: "2017-01-04T14:20:34.240Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "586d0483af6b364a292d3a8d"
    text: {@9214 we only will know once it's completed, I guess}
    sent: "2017-01-04T14:19:47.561Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586d046bc02c1a3959e777ed"
    text: {Red will be ~90% compatible with Rebol, am I right? In which part it will differ? Parse, R/S, more datatypes, anything else?}
    sent: "2017-01-04T14:19:23.195Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586c8d327a3f79ef5dd389f2"
    text: "Find for block! is in block.reds"
    sent: "2017-01-04T05:50:42.595Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "586c8cd8aa6be0472f053be2"
    text: {For example, find for the string datatype is in string.reds}
    sent: "2017-01-04T05:49:12.269Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "586c8c9faf6b364a292b0118"
    text: {@nicholas42 The code you are probably looking for is distributed amongst the files in runtime/datatypes}
    sent: "2017-01-04T05:48:15.648Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "586baba8058ca96737c1326c"
    text: "@nicolas42 `runtime\actions.reds` ?"
    sent: "2017-01-03T13:48:24.475Z"
    editedAt: "2017-01-03T13:48:29.983Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "586ba1d9aa6be0472f0014e5"
    text: "happy new year , especially to iArnold"
    sent: "2017-01-03T13:06:33.880Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "586ba106aa6be0472f000f3b"
    text: {Could anyone tell me where the red system code is for the find function?}
    sent: "2017-01-03T13:03:02.868Z"
    v: 1
    author: "56e49b9885d51f252ab87ee8"
) #(
    id: "586b927a9e6f00e74aef8806"
    text: "i hate libaries"
    sent: "2017-01-03T12:00:58.387Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "586b81789e6f00e74aef3f78"
    text: "@Pekr Welcome Tobias!"
    sent: "2017-01-03T10:48:24.599Z"
    editedAt: "2017-01-03T10:48:33.920Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "586b8150c02c1a3959e0600d"
    text: {@meijeru :-) Always those custom keyboards! http://cdn0.vox-cdn.com/uploads/chorus_asset/file/2316278/clicky-keyboards-2_2040.0.jpg}
    sent: "2017-01-03T10:47:44.206Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "586b668baf6b364a2925638c"
    text: {@iArnold Except on certain keyboards, mind you -- not every one uses en-UK (I admit that I do).}
    sent: "2017-01-03T08:53:31.520Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "586ae0ba7a3f79ef5dcb89c3"
    text: "Also gives us the option to add refinements."
    sent: "2017-01-02T23:22:34.244Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586acda7c895451b754a5b43"
    text: {[to-integer can be typed without use of the shift key]}
    sent: "2017-01-02T22:01:11.511Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "586ac76d9e6f00e74aec5f03"
    text: {I prefer to keep to-* functions because not all of them should be as simple as `to integer!`, some of them could do more than that in the future (something like to-dir) and we can extend by adding more of them. I also prefer same naming for my `to-something` functions. }
    sent: "2017-01-02T21:34:37.501Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "586ac51e9d4cc4fc536ba1a3"
    text: {The other question is what we gain by removing them.}
    sent: "2017-01-02T21:24:46.372Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586ac504aa6be0472ffc1bcb"
    text: {The `to-*` funcs have often been questioned, as to the value they provide. They are useful if you use `to-` with `help` to find them all. I believe Carl also once said that he thought it would help people, but later decided they really didn't. I use them sometimes, and they are handy as function args for use with HOFs and such.}
    sent: "2017-01-02T21:24:20.000Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58681e88c02c1a3959d2882d"
    text: {> `to-type`shortcuts^/^/ @9214 you mean you'd rather `to integer!`? I'd agree. But if it wasn't for those being auto-completed, I wouldn't have know all the many `to` conversions. Just a small counter point. I agree with you otherwise}
    sent: "2016-12-31T21:09:28.672Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5867a131af6b364a2915e6e7"
    text: {@9214 there are a lot of shortcuts in Redbol and they all are useful:^/```^/red>> off = false^/== true^/red>> no = false^/== true^/```}
    sent: "2016-12-31T12:14:41.580Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58677e057a3f79ef5dbe1247"
    text: "IMO it's too verbose"
    sent: "2016-12-31T09:44:37.195Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58677bfdc02c1a3959d015ff"
    text: "I don't get why we need `to-type`shortcuts"
    sent: "2016-12-31T09:35:57.469Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5866de0f058ca96737ac6340"
    text: {@9214 there is a shortcut ;)^/```^/red>> source to-integer^/to-integer: func ["Convert to integer! value" value][to integer! :value]^/```}
    sent: "2016-12-30T22:22:07.344Z"
    editedAt: "2016-12-30T22:22:27.476Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5866dd9bc02c1a3959cdebfc"
    text: ":+1: "
    sent: "2016-12-30T22:20:11.250Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5866db04c895451b753ad745"
    text: {π ?^/https://github.com/red/red/search?utf8=%E2%9C%93&q=pi%3A^/https://github.com/red/red/pull/1982^/τ !^/https://www.tauday.com/}
    sent: "2016-12-30T22:09:08.632Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5866da339d4cc4fc535c032b"
    text: "And `cntrl shift m` for markdown help ;)"
    sent: "2016-12-30T22:05:39.206Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5866da150730ce693729c35e"
    text: {@MPrieto88011_twitter btw, it should work with the unstable "nightly" build, same page as you probably downloaded (stable 0.6.1) red from}
    sent: "2016-12-30T22:05:09.963Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5866d4dec02c1a3959cdc9f0"
    text: {@MPrieto88011_twitter and it all works from the same binary download! ;)}
    sent: "2016-12-30T21:42:54.530Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5866d2f27a3f79ef5dbbb99c"
    text: {A lot of type casting improvements were added recently Mario. If you build from source, or wait a bit for the 0.6.2 release, it will work.}
    sent: "2016-12-30T21:34:42.445Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5866bb88c02c1a3959cd5702"
    text: {But `make` should also work, did you download Red console earlier and didn't get the latest one?}
    sent: "2016-12-30T19:54:48.567Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5866bb5dc895451b753a507b"
    text: {You can also try `to` for type casting: `pi: make integer! 3.1415926535897932384` }
    sent: "2016-12-30T19:54:05.828Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5866b0e09d4cc4fc535b212f"
    text: {@9214 That didn't work   pi: make integer! 3.141592653589^/I get an error message nternal Error: reserved for future use (or not yet implemented)^/*** Where: make}
    sent: "2016-12-30T19:09:20.858Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "5866afef0730ce693729023e"
    text: "it's ~~turtles~~ dsls all the way down! :turtle: "
    sent: "2016-12-30T19:05:19.886Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5866af9f058ca96737ab86b0"
    text: "Thanks guys!!"
    sent: "2016-12-30T19:03:59.771Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "5866af930730ce693729011d"
    text: {and View (the one you've called red/gui) is just another Red's DSL for graphics and UI}
    sent: "2016-12-30T19:03:47.445Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5866ae950730ce693728fbb5"
    text: {@MPrieto88011_twitter as for typecasting in Red, I think this one will do:^/```^/red>> pi: make integer! 3.1415926535897932384^/== 3^/```}
    sent: "2016-12-30T18:59:33.385Z"
    editedAt: "2016-12-30T19:01:52.247Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5866ae357a3f79ef5dbb04a0"
    text: {http://www.red-lang.org/2011/05/redsystem-compiler-overview.html}
    sent: "2016-12-30T18:57:57.550Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5866ade59e6f00e74adc0812"
    text: {http://www.red-lang.org/2011/03/taking-redsystem-pill.html}
    sent: "2016-12-30T18:56:37.258Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5866adc4058ca96737ab7d85"
    text: {@MPrieto88011_twitter Red/System is Red's DSL (domain specific language) for low level stuff. It's also a target language for Red compilation I believe.}
    sent: "2016-12-30T18:56:04.664Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5866ad2a9d4cc4fc535b0dfa"
    text: {Sorry guys, I am doing my first steps with Red. What is the difference between Red/red, Red/System. Are those different downloads? I downloaded the executable from the Red website. I imagine I have the Red\red system. How do I use the other systems? The red\gui or the red/system? }
    sent: "2016-12-30T18:53:30.515Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "5866abf9af6b364a29125d38"
    text: {@MPrieto88011_twitter I think type-casting is available in Red/System only}
    sent: "2016-12-30T18:48:25.222Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5866ab039d4cc4fc535b0398"
    text: {sorry about the way I wrote the last message ignore the ' at the beginning of the code. I was trying to use the markdown for code but I didn't work. :}
    sent: "2016-12-30T18:44:19.572Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
)#(
    id: "5866aaa0c02c1a3959cd038f"
    text: {I am reading the red language specs and I am looking at the section about casting types [casting section 4.3.2](http://static.red-lang.org/red-system-specs.html#section-2.1) . I tried the casting example:^/'pi: 3.14159265358979^/pi-32: as float32! pi^/print pi-32'^/^/but I get an error message ** Script Error: as has no value *** Where: print^/^/Am I doing something wrong??}
    sent: "2016-12-30T18:42:40.973Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "5864c8857a3f79ef5db275c9"
    text: "You are welcome!^/"
    sent: "2016-12-29T08:25:41.013Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5864bb2bc02c1a3959c45481"
    text: {@endo64 I open the issue [here](https://github.com/red/red/issues/2385).^/Thank you very much for your help!}
    sent: "2016-12-29T07:28:43.904Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "5864b7a6af6b364a2909902b"
    text: "@endo64 Thanks, I do."
    sent: "2016-12-29T07:13:42.992Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "5864b78fc895451b7531727f"
    text: "Sure, please do it.^/"
    sent: "2016-12-29T07:13:19.827Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5864b75b9e6f00e74ad36ea0"
    text: "@endo64 Thank you, may I open it?"
    sent: "2016-12-29T07:12:27.922Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "5864b6a40730ce69371fcbe3"
    text: "Better to raise a ticket for this.^/"
    sent: "2016-12-29T07:09:24.631Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5864b6859d4cc4fc53522f48"
    text: {I think there is a problem in `draw` command & text dialect:^/```^/red>> i: make image! 50x50^/== make image! [50x50 #^{^/FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ;<<< empty white image^/red>> draw i [text 0x0 "test"]^/== make image! [50x50 #^{^/FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  ;<<< no change at all^/red>> draw i [box 0x0 10x10]^/== make image! [50x50 #^{^/30303000000000000000000000000000000000000000000 ;<<< box ok^/```^/}
    sent: "2016-12-29T07:08:53.603Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "586488869e6f00e74ad2b4ae"
    text: {Well, I tried the "Graphics source code" sample on [this page](https://doc.red-lang.org/gui/Draw.html#graphics-source-code).^/Also in this example, text objects seems not to be drawn though lines drawn.^/Something's wrong with text object?}
    sent: "2016-12-29T03:52:38.468Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58647cf90730ce69371edae3"
    text: {Hi, I am trying to make an app to save an image by input characters.^/Now I have the code below. It can show input characters as image on view.^/But when I save it for a file, the saved image is just white and blank.^/Could anyone teach me what I am wrong?^/^/```^/input: ""^/view [  ^/^-text "Input some characters here"^/^-return^/^-editor: field 200x500 input focus^/^-canvas: base 500x500 white react [^-^-^/^-^-input: editor/text^/^-^-face/draw: compose [^-^-^-^/^-^-^-text 10x10 (input)^/^-^-]^-^/^-]^/^-button "save as file..." [    ^-^-^/^-^-save request-file/save draw 500x500 compose [^-^-^-^-^-^-^/^-^-^-text 10x10 (input)^/^-^-]^-^-^-^/  ]  ^/]^/```}
    sent: "2016-12-29T03:03:20.964Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58623574c5a4e0233bd46fac"
    text: {@geekyi yup, I was just wondering if Redbol is suitable for web apps.}
    sent: "2016-12-27T09:33:40.459Z"
    editedAt: "2016-12-27T09:36:29.538Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5861a8a00730ce693711d0a7"
    text: {@MPrieto88011_twitter, Red has no GC yet, and there are a number of things that we still consider alpha, though it is very robust in most areas. You have to evaluate your needs against it to see if it's usable for you. }
    sent: "2016-12-26T23:32:48.586Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5861a752058ca96737947c3a"
    text: {Trello [roadmap](http://www.red-lang.org/p/roadmap.html) is the best place to look}
    sent: "2016-12-26T23:27:14.513Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5861a721e7bdfe4e299f291f"
    text: {@9214 you mean [WebAssembly](https://en.wikipedia.org/wiki/WebAssembly)? Doc talked about it here. So hopefully sometime in the future  }
    sent: "2016-12-26T23:26:25.006Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5861a52ec5a4e0233bd21eaf"
    text: {@MPrieto88011_twitter ^/1. yes^/2. Most people here still use Rebol (version 2 in particular, me included), so there is a community, and it is relatively bug-free (stable, well documented workarounds, etc)^/Red is alpha, but developing rapidly. When I started with it about a year ago, half the functionality it has now wasn't there (such as `read`)}
    sent: "2016-12-26T23:18:06.298Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58619a8a7a3f79ef5da405ba"
    text: {So far this is mi understanding of Red:  ^/1) Documentation: Use Rebol's documentation. 95% is the same as Red.^/ 2) Red's capabilities: I can program almost anything I want, but it is not ready for commercial purposes.  ^/3) Red is fun: I really enjoy the paradigm shift from regular programming languages.^/}
    sent: "2016-12-26T22:32:42.780Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "5861979fc895451b75238575"
    text: {@MPrieto88011_twitter I don't think Red is ready for that, you can probably write what you want, but I wouldn't call it ready}
    sent: "2016-12-26T22:20:15.495Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "586194a4058ca967379427ce"
    text: {@9214 You said to "stick with Rebol for a while". Excuse my ignorance, but I thought Rebol was no longer maintained/Developed? Is Red ready to create simple business programs GUI and to connect to database with multiple users?}
    sent: "2016-12-26T22:07:32.405Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "586174840730ce693710de8a"
    text: {I don't think WASM is on the roadmap at this point.}
    sent: "2016-12-26T19:50:28.809Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58617466c5a4e0233bd12bda"
    text: {On hashes, yes. e.g. given a block with 100'000 elements, where only the last is "test":^/```^/red>> time-it/count [find blk "test"] 1000^/== 0:00:03.639^/```^/And with a hash!^/```^/red>> time-it/count [find hsh "test"] 1000^/== 0:00:00.004000001^/```^/}
    sent: "2016-12-26T19:49:58.700Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586173abaf6b364a29fb63bf"
    text: "will Red target WASM at 1.0?"
    sent: "2016-12-26T19:46:51.202Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58617206058ca96737936ef3"
    text: {every element has an unique key based on the content of that element?}
    sent: "2016-12-26T19:39:50.473Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586171da0730ce693710d105"
    text: "Someone may correct me on that though."
    sent: "2016-12-26T19:39:06.369Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586171cc7a3f79ef5da33598"
    text: {In `hash!` there aren't really keys, or the concept of paired values. i.e. every value is hashed, and can be of any type.}
    sent: "2016-12-26T19:38:52.072Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58617198e7bdfe4e299e2c79"
    text: {:^^) Once you *do* get used to it, you'll probably like it. There are a lot of Aha! moments with Red.}
    sent: "2016-12-26T19:38:00.115Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5861718eaf6b364a29fb57f9"
    text: "but in `hash!` keys can be of any type"
    sent: "2016-12-26T19:37:50.488Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586171840730ce693710cfef"
    text: "@greggirwin yeah, thats what I mean"
    sent: "2016-12-26T19:37:40.417Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58617176c5a4e0233bd11d06"
    text: {Map can refer to any kind of value, but *keys* in maps can't be of every type. }
    sent: "2016-12-26T19:37:26.848Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58617173058ca96737936cf6"
    text: {this type system is bizzare, can't get used to it :smile: }
    sent: "2016-12-26T19:37:23.189Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586171407a3f79ef5da3328d"
    text: {```^/red>> ? any-block!^/any-block! is a typeset! of value: make typeset! [block! paren! path! lit-path! set-path! get-path! hash!] ^/^/red>> ? any-object!^/any-object! is a typeset! of value: make typeset! [object! error!] ^/^/red>> ? any-string!^/any-string! is a typeset! of value: make typeset! [string! file! url! tag! email!] ^/^/red>> ? typeset!^/     any-block!      :  make typeset! [block! paren! path! lit-path! set-path! get-path! hash!] ^/     any-function!   :  make typeset! [native! action! op! function! routine!] ^/     any-list!       :  make typeset! [block! paren! hash!] ^/     any-object!     :  make typeset! [object! error!] ^/     any-path!       :  make typeset! [path! lit-path! set-path! get-path!] ^/     any-string!     :  make typeset! [string! file! url! tag! email!] ^/     any-type!       :  make typeset! [datatype! unset! none! logic! block! paren! string! file! url! char! integer! float! word! set-word! lit-word! get-word! refinement! issue! native! action! op! function! path! lit-path! set-path! get-path! routine! bitset! object! typeset! error! vector! hash! pair! percent! tuple! map! binary! time! tag! email! image! event!] ^/     any-word!       :  make typeset! [word! set-word! lit-word! get-word! refinement! issue!] ^/     default!        :  make typeset! [datatype! none! logic! block! paren! string! file! url! char! integer! float! word! set-word! lit-word! get-word! refinement! issue! native! action! op! function! path! lit-path! set-path! get-path! routine! bitset! object! typeset! error! vector! hash! pair! percent! tuple! map! binary! time! tag! email! image!] ^/     immediate!      :  make typeset! [datatype! none! logic! char! integer! float! word! set-word! lit-word! get-word! refinement! issue! typeset! pair! percent! tuple! time!] ^/     internal!       :  make typeset! [unset! event!] ^/     number!         :  make typeset! [integer! float! percent!] ^/     scalar!         :  make typeset! [char! integer! float! pair! percent! tuple! time!] ^/     series!         :  make typeset! [block! paren! string! file! url! path! lit-path! set-path! get-path! vector! hash! binary! tag! email! image!] ^/typeset! is a datatype! of value: typeset! ^/```}
    sent: "2016-12-26T19:36:32.688Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58617127e7bdfe4e299e2a48"
    text: "@greggirwin `map!` can only store scalar values?"
    sent: "2016-12-26T19:36:07.407Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58617105c5a4e0233bd11b0b"
    text: {Hash! is a block type, map! is not. Hashes are not fixed as key-value pairs, maps are.}
    sent: "2016-12-26T19:35:33.684Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586171000730ce693710cdc3"
    text: {@greggirwin yeah, I want to ask if `hash!` and `map!` are conceptually the same as `block!` wih key-value pairs}
    sent: "2016-12-26T19:35:28.381Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586170d07a3f79ef5da32fb2"
    text: {*But* you can use blocks as dictionaries too, just not quite as conveniently.}
    sent: "2016-12-26T19:34:40.985Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586170cfc5a4e0233bd11a0b"
    text: {@greggirwin but hash is an associative array too, what's the diffrence then? Hash is more effective?}
    sent: "2016-12-26T19:34:39.692Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586170aac02c1a3959b57e7f"
    text: {Map is a dictionary or associative array, correct. }
    sent: "2016-12-26T19:34:02.576Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58617083c5a4e0233bd11887"
    text: {I mainly think of blocks as arrays of values. Rarely do I have to think in terms of value slots/structures.}
    sent: "2016-12-26T19:33:23.370Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58617081c02c1a3959b57e04"
    text: "@greggirwin map is a key-value list?"
    sent: "2016-12-26T19:33:21.498Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58617023c895451b7522b3fd"
    text: {There are a lot of details, because there are a lot of types. One important, clarifying document we need to get out there is a comparison of block!, hash!, map!, and object! so the tradeoffs are clear.}
    sent: "2016-12-26T19:31:47.577Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58616fd6058ca9673793652e"
    text: {@greggirwin yup, data abstraction, I just wanna grasp the lower details, sort of}
    sent: "2016-12-26T19:30:30.943Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58616fc6c5a4e0233bd114b7"
    text: "If you really need to know, look at the source."
    sent: "2016-12-26T19:30:14.264Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58616fb5e7bdfe4e299e22f7"
    text: {I almost never, in many years of Reboling, thought about the internal implementation details. Program against the interface, and be aware that different types have different behaviors and  strengths.}
    sent: "2016-12-26T19:29:57.701Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58616f7fc5a4e0233bd11324"
    text: {yes, and you can go to next/prev/first/last index, while linked list can only go to next}
    sent: "2016-12-26T19:29:03.279Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58616f67af6b364a29fb4c1f"
    text: {Details will vary by exact block type. ^/```^/red>> ? any-block!^/any-block! is a typeset! of value: make typeset! [block! paren! path! lit-path! set-path! get-path! hash!] ^/```^/A "slot" is, effectively, a value. Some types can fit entirely in the slot (e.g. small scalars), while others will point to data elsewhere (e.g. series).}
    sent: "2016-12-26T19:28:39.742Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58616f64c02c1a3959b57795"
    text: "add/remove/append/etc"
    sent: "2016-12-26T19:28:36.798Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58616f577a3f79ef5da328ff"
    text: {and double linked list because we can manipulate it freely?}
    sent: "2016-12-26T19:28:23.221Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58616f310730ce693710c585"
    text: "array because of O(1) access"
    sent: "2016-12-26T19:27:45.935Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58616ee1c5a4e0233bd11054"
    text: {something like array with double linked-list interface and few more features :)}
    sent: "2016-12-26T19:26:25.516Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58616eb8058ca96737935e9d"
    text: "like linked list?"
    sent: "2016-12-26T19:25:44.255Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58616ea5c5a4e0233bd10ec0"
    text: {@greggirwin slot is some allocated memory, correct?}
    sent: "2016-12-26T19:25:25.622Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "58616e880730ce693710c227"
    text: {Blocks don't contain direct pointers. You could think of them as an ordered collection of "value slots".}
    sent: "2016-12-26T19:24:56.782Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58616e1faf6b364a29fb46aa"
    text: {@9214, `any-string!` types will be different than `any-block!` types in what values they can refer to. Strings are a series of `char!` values, but do not store each char as a unique value in a slot, as blocks do with values. That would be unnecessary overhead.}
    sent: "2016-12-26T19:23:11.129Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58616dc7c02c1a3959b56fae"
    text: "it is just data for you"
    sent: "2016-12-26T19:21:43.183Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58616dbac5a4e0233bd10ad8"
    text: {it contains pointers, but you shouldn't see them most of the time}
    sent: "2016-12-26T19:21:30.732Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58616d97c02c1a3959b56e63"
    text: {@9214 ^/>turns out block! (perhaps any series?) is just an orginized pile of pointers?^/^/Any series, series is structure with specific interface: http://www.rebol.com/docs/core23/rebolcore-6.html#section-1 }
    sent: "2016-12-26T19:20:55.228Z"
    editedAt: "2016-12-26T19:21:01.403Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58616d7dc895451b7522a65c"
    text: {People use a variety of editors. No leading choice AFAIK.}
    sent: "2016-12-26T19:20:29.574Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58616c42c5a4e0233bd1020e"
    text: {@MPrieto88011_twitter https://github.com/red/VScode-extension this one looks really good}
    sent: "2016-12-26T19:15:14.638Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58616b2bc5a4e0233bd0fb42"
    text: {AFAIK there should be Rebol package for Emacs and Red plugin for VScode}
    sent: "2016-12-26T19:10:35.363Z"
    editedAt: "2016-12-26T19:14:34.052Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58616b0cc02c1a3959b55f2d"
    text: {@MPrieto88011_twitter whatever floats your boat ;)}
    sent: "2016-12-26T19:10:04.282Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58616ac4c02c1a3959b55d98"
    text: {One more question, preferred IDE to develop on Red??}
    sent: "2016-12-26T19:08:52.566Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "58616a60c5a4e0233bd0f7f9"
    text: "Thanks, already following on twitter. "
    sent: "2016-12-26T19:07:12.193Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "58616a0dc5a4e0233bd0f605"
    text: "red-lang.org blog ofc"
    sent: "2016-12-26T19:05:49.377Z"
    editedAt: "2016-12-26T19:05:59.057Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586169efe7bdfe4e299e05db"
    text: {https://twitter.com/red_lang perhaps this one will do, also google groups, this chat, git}
    sent: "2016-12-26T19:05:19.248Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586169b9c02c1a3959b55820"
    text: {@MPrieto88011_twitter Hello again! You also may want to stick with Rebol for a while, since Red documentation is scarse for now (and Red is heavily influenced by Rebol in a first place).}
    sent: "2016-12-26T19:04:25.316Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5861698be7bdfe4e299e03c8"
    text: {Are there any specific people to follow on twitter for Red news, articles, etc??}
    sent: "2016-12-26T19:03:39.657Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "5861695b7a3f79ef5da30b15"
    text: {Hi guys, I am new to the Red, from what I saw so far it looks very interesting, specially the road map to include iOS. In the next month I will hit all of the tutorials. I will also keep an eye on this forum to continue learning. }
    sent: "2016-12-26T19:02:51.389Z"
    v: 1
    author: "58616600d73408ce4f3f6a6b"
) #(
    id: "5861692c058ca9673793406e"
    text: "and getting element by index is O(1) I suppose?"
    sent: "2016-12-26T19:02:04.007Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586168d1af6b364a29fb291a"
    text: {@greggirwin hm, turns out `block!` (perhaps any series?) is just an orginized pile of pointers?}
    sent: "2016-12-26T19:00:33.924Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "586159950730ce69371060b1"
    text: {@greggirwin @rebolek  -  ok. thanks for the confirmation.   I'll  have to keep this in mind... that  it is a different rule for series.}
    sent: "2016-12-26T17:55:33.832Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "5861591f058ca9673792f747"
    text: {So the block is still referred to by a word, but it can refer to multiple values that you can reference by index.}
    sent: "2016-12-26T17:53:35.509Z"
    editedAt: "2016-12-26T17:54:01.408Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586158f3af6b364a29fae343"
    text: {@9214 ^/> I mean, the only way we can point to this value is to set some word to it?^/^/Almost, you can have a block refer to values and reference them that way as well.}
    sent: "2016-12-26T17:52:51.628Z"
    editedAt: "2016-12-26T17:53:07.300Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "586158af61e516c1578f0b68"
    text: {@redredwine ^/> is there a different rule for series/string and another rule for number^/^/Basically, yes. There are scalar values that fit in one Red memory slot (different numbers, like integer, pair, tuple...) and series that do not fit in that space and they work the way described above.}
    sent: "2016-12-26T17:51:43.477Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58615896c5a4e0233bd098e7"
    text: {@redredwine , yes, the rules are different for `series` values. It takes a little getting used to, then seems perfectly normal.}
    sent: "2016-12-26T17:51:18.515Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58615817e7bdfe4e299db4be"
    text: {@rebolek ^/thanks for your explanation  about it loading the function only once in memory and not reinitialising.   ^/^/This got me to  try a different test - this time using a number instead of a string/series^/^/red>> huh: function [] [^/[    list: 2^/[    list: list + 5^/[    print list^/[     ]^/^/red>> huh^/7^/red>> huh^/7^/red>> huh^/7^/^/However , this time we see it is actually reinitialising the variable list to 2 every time I call the function , even if it loads the function once in memory.  I would have expected it to return me 7,  12, 17   same as it did for the series ? ^/^/so this is where I am more confused, is there a different rule for series/string  and  another rule for number ?  ^/^/this is the same example for series/string.^/red>> huh: function [] [^/[    list: ""^/[    append list "huh"^/[    print list^/[     ]^/^/red>> huh^/huh^/red>> huh^/huhhuh^/red>> huh^/huhhuhhuh^/red>>^/^/I am confused :-(^/^/Happy Holidays & Happy New Year to all .}
    sent: "2016-12-26T17:49:11.019Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "5861178ec02c1a3959b3cd6b"
    text: {Having a literal form for every type would be nice but not essential ... in fact object! doesn't have one.}
    sent: "2016-12-26T13:13:50.464Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "586116af058ca9673791c20f"
    text: {@dander The lack of free lexical space would makes it difficult to introduce new literal types for new datatypes. User defined datatypes might well be supported without a literal equivalent.^/^/Possibly something like this:^/```^/sq: make square! [4]               ^/```}
    sent: "2016-12-26T13:10:07.770Z"
    editedAt: "2016-12-26T13:12:19.532Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5860da27058ca9673790cf61"
    text: {yeah, I'm still somewhat new myself, but I wonder how much can be gained by creating new types anyway. There is so much flexibility with what is available already.}
    sent: "2016-12-26T08:51:51.885Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5860d8a37a3f79ef5da098ca"
    text: {@dander true, though we can just label our objects with fictive types somehow}
    sent: "2016-12-26T08:45:23.928Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5860d81ac5a4e0233bce7dbc"
    text: {I don't believe it's possible now, but I seem to remember Nenad hinting at allowing it in the future. However, it seems like it could be complicated since so much of the lexical space is taken up by the existing datatypes.}
    sent: "2016-12-26T08:43:06.948Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5860d455af6b364a29f8bece"
    text: {and we can't create our own datatypes in Red for now?}
    sent: "2016-12-26T08:27:01.974Z"
    editedAt: "2016-12-26T08:31:20.728Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5860d2fb96a565f84406c945"
    text: {I don’t think there’s any specific reason why it’s `!` and not some other sign.}
    sent: "2016-12-26T08:21:15.561Z"
    editedAt: "2016-12-26T08:21:23.718Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5860d2b80730ce69370e324a"
    text: {btw, why Redol uses `!` postfix convention for datatype words?}
    sent: "2016-12-26T08:20:08.284Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5860c712c5a4e0233bce44ef"
    text: {@9214 You can simple check if your value is series by using `series?` and if it is, as long as you use series functions like `append`, `insert`, `clear` etc. all the words pointing to that value will "see" the changes.^/There are just a few non-series types which supported by "some" series functions, like `port!`.^/And also some non-scalar types such as `map!`, not supported by series functions but can be referenced by words (as @PeterWAWood points)^/```^/red>> m: #(a: 1 b 2)^/red>> n: :m^/red>> ? n^/n is a map! of value: #(^/    a: 3^/    b: 2^/)^/```^/}
    sent: "2016-12-26T07:30:26.389Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585fa8e2c5a4e0233bca3fad"
    text: "@PeterWAWood yes, @rebolek shown that one"
    sent: "2016-12-25T11:09:22.237Z"
    editedAt: "2016-12-25T11:09:34.755Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585fa8a6e7bdfe4e299786ed"
    text: {You can create a self-reference but it appears to be infinite (in R2 & R3 too).^/```text^/red>> b: [1 2 3 4]^/== [1 2 3 4]^/red>> append/only b b^/== [1 2 3 4 [...]]^/red>> last b^/== [1 2 3 4 [...]]^/```}
    sent: "2016-12-25T11:08:22.549Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585fa7237a3f79ef5d9c3f89"
    text: {Here is something similar with ```string!```^/```text^/red>> s: "12345"^/== "12345"^/red>> s2: :s^/== "12345"^/red>> s2: next next s2^/== "345"^/red>> remove s2^/== "45"^/red>> s^/== "1245"^/```}
    sent: "2016-12-25T11:01:55.935Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585fa6cd058ca967378c93e0"
    text: {This sort of thing?^/```text^/red>> b: [1 2 3 4 5]^/== [1 2 3 4 5]^/red>> c: :b^/== [1 2 3 4 5]^/red>> append b 6^/== [1 2 3 4 5 6]^/red>> c^/== [1 2 3 4 5 6]^/red>> c: next next c^/== [3 4 5 6]^/red>> remove c^/== [4 5 6]^/red>> b^/== [1 2 4 5 6]^/```}
    sent: "2016-12-25T11:00:29.812Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585fa6af058ca967378c92c3"
    text: {Strings are not scalar values, they are series! like blocks.}
    sent: "2016-12-25T10:59:59.744Z"
    editedAt: "2016-12-25T11:02:14.867Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585fa6abc5a4e0233bca374a"
    text: {and since `block!` isn't scalar, we can create self-reference?}
    sent: "2016-12-25T10:59:55.135Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585fa6927a3f79ef5d9c3e41"
    text: {@PeterWAWood oooooh... that's why my example with strings didn't worked}
    sent: "2016-12-25T10:59:30.681Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585fa62c7a3f79ef5d9c3d78"
    text: {Yes. Though more than one word can point at the same value ... but only if the values are not ```scalar```.}
    sent: "2016-12-25T10:57:48.888Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585fa5e80730ce693709f766"
    text: {I mean, the only way we can point to this value is to set some word to it?}
    sent: "2016-12-25T10:56:40.587Z"
    editedAt: "2016-12-25T10:56:57.316Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585fa5e4c5a4e0233bca3485"
    text: "That is my understanding."
    sent: "2016-12-25T10:56:36.141Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585fa5c97a3f79ef5d9c3c3f"
    text: "i.e. we can access them only via `words`"
    sent: "2016-12-25T10:56:09.527Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585fa5ad7a3f79ef5d9c3bde"
    text: {@PeterWAWood and we can't "point" to the block of memory where this value is stored?}
    sent: "2016-12-25T10:55:41.983Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585fa596af6b364a29f48962"
    text: {For example, we can think of  ```i: 1``` as setting i to reference the value 1. Then ```i: 2``` sets i to reference the value 2.}
    sent: "2016-12-25T10:55:18.100Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585fa522af6b364a29f48805"
    text: "We can only address them indirectly using words."
    sent: "2016-12-25T10:53:22.747Z"
    editedAt: "2016-12-25T10:53:53.395Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585fa50c058ca967378c8d16"
    text: "got that, ty"
    sent: "2016-12-25T10:53:00.669Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585fa502e7bdfe4e29977b7e"
    text: "yes"
    sent: "2016-12-25T10:52:50.319Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585fa4fbc895451b751bba6e"
    text: {so, `func [x] [x + 1]` and `2` are anonymous values?}
    sent: "2016-12-25T10:52:43.547Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "585fa4a67a3f79ef5d9c390b"
    text: {@PeterWAWood i.e. value ain't "assigned" to any specific name?}
    sent: "2016-12-25T10:51:18.880Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585fa47e7a3f79ef5d9c383e"
    text: {Values, even functions and objects, don't have a name.}
    sent: "2016-12-25T10:50:38.336Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585f9fade7bdfe4e29976807"
    text: "@geekyi what you mean by `anonymous`?"
    sent: "2016-12-25T10:30:05.373Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f9974058ca967378c5f3f"
    text: "Correct me if I'm wrong"
    sent: "2016-12-25T10:03:32.652Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585f996daf6b364a29f45d0b"
    text: {`set-word!` a.k.a. `word1:` only changes what the word points to}
    sent: "2016-12-25T10:03:25.104Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585f99317a3f79ef5d9c111b"
    text: {@9214 Basically what I've understood is, `word!`s point to values, and all values are anonymous}
    sent: "2016-12-25T10:02:25.052Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585f98d1c5a4e0233bca0747"
    text: "@rebolek that thing ~~doesn't~~ points to itself!"
    sent: "2016-12-25T10:00:49.121Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585f8895e7bdfe4e29971d83"
    text: "@rebolek :D"
    sent: "2016-12-25T08:51:33.771Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f880fdb9cafe9183a735c"
    text: {```^/red>> inception: [1 2 3]^/== [1 2 3]^/red>> insert/only tail inception inception^/== []^/red>> inception^/== [1 2 3 [...]]^/```}
    sent: "2016-12-25T08:49:19.963Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f87d2058ca967378c2792"
    text: "@maximvl yup"
    sent: "2016-12-25T08:48:18.822Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f87b9c895451b751b562d"
    text: "it doesn't *contain* itself, it points to itself"
    sent: "2016-12-25T08:47:53.525Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f87997a3f79ef5d9bcfc6"
    text: {well, yes, you assigned pointer to this object to one of the object's fields}
    sent: "2016-12-25T08:47:21.111Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f87757a3f79ef5d9bcf8a"
    text: {> http://inception.davepedu.com/^/```^/red>> inception: context [dicaprio: self]^/== make object! [^/    dicaprio: make object! [...]^/red>> inception/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> inception/dicaprio/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> inception/dicaprio/dicaprio/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> inception/dicaprio/dicaprio/dicaprio/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> inception/dicaprio/dicaprio/dicaprio/dicaprio/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> ^/```^/}
    sent: "2016-12-25T08:46:45.599Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f8761c895451b751b55a1"
    text: "for example?"
    sent: "2016-12-25T08:46:25.320Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f873e058ca967378c2633"
    text: {@maximvl though we can create objects which contain themselves}
    sent: "2016-12-25T08:45:50.542Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f8727058ca967378c258b"
    text: "which is good"
    sent: "2016-12-25T08:45:27.069Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f871c7a3f79ef5d9bce8c"
    text: "so you don't have `car`s and `cdr`s"
    sent: "2016-12-25T08:45:16.959Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f8708058ca967378c24f7"
    text: {because behind `series` is something different than `cons` notation}
    sent: "2016-12-25T08:44:56.943Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f8635e7bdfe4e2997155b"
    text: {```^/red>> x: [1 2 3]^/== [1 2 3]^/red>> t: tail x^/== []^/red>> insert t head x^/== []^/red>> x^/== [1 2 3 1 2 3]^/```}
    sent: "2016-12-25T08:41:25.657Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f85adc895451b751b5096"
    text: "because the way they work is different"
    sent: "2016-12-25T08:39:09.547Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f85a5c895451b751b508c"
    text: {@maximvl hm, they're stored differently in memory?}
    sent: "2016-12-25T08:39:01.227Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f859dc02c1a3959ae06f3"
    text: "I don't think you can make cycle in block"
    sent: "2016-12-25T08:38:53.912Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f855ec895451b751b4fc9"
    text: {yes, but this is different from what you did with strings}
    sent: "2016-12-25T08:37:50.376Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f85557a3f79ef5d9bc763"
    text: "can I do something like that in Redbol?"
    sent: "2016-12-25T08:37:41.641Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f8544058ca967378c1f80"
    text: {now last pair of a list point to its first element and we've got infinite list}
    sent: "2016-12-25T08:37:24.851Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f8519c02c1a3959ae04f9"
    text: {@maximvl ^/```^/(define (last-pair x)^/  (if (null? (cdr x))^/      x^/      (last-pair (cdr x))))^/^/(define (make-cycle x)^/  (set-cdr! (last-pair x) x)^/  x)^/^/(define z (make-cycle (list 'a 'b 'c)))^/; (last-pair z) => infinite recursion^/```}
    sent: "2016-12-25T08:36:41.363Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f8508af6b364a29f41c30"
    text: {```^/red>> a: b: "string"^/== "string"^/red>> a^/== "string"^/red>> b^/== "string"^/red>> change/part a "STR" 3^/== "ing"^/red>> a^/== "STRing"^/red>> b^/== "STRing"^/```}
    sent: "2016-12-25T08:36:24.649Z"
    editedAt: "2016-12-25T08:36:40.010Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f84b8058ca967378c1e07"
    text: "you change things"
    sent: "2016-12-25T08:35:04.451Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f84b40730ce69370987fb"
    text: {I just remember tinkering with SICP and that was funny thing to do}
    sent: "2016-12-25T08:35:00.990Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f84b4c5a4e0233bc9c025"
    text: {you don't change the blocks of memory, since this is low level thing}
    sent: "2016-12-25T08:35:00.397Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f849d0730ce69370987bb"
    text: {@maximvl but how can I change that block of memory to which word points to?}
    sent: "2016-12-25T08:34:36.998Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f847f058ca967378c1d74"
    text: {so assignment doesn't change the block of memory where word points to, but points word to another block}
    sent: "2016-12-25T08:34:07.851Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f843ec02c1a3959ae02bc"
    text: {no, what happens in last assignment is^/```^/word1 --> "other value" word2 --> "some value"^/```}
    sent: "2016-12-25T08:33:01.984Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f840a0730ce693709858b"
    text: "that's what I mean"
    sent: "2016-12-25T08:32:10.409Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f83ff0730ce6937098582"
    text: {`word1 --> "some value" <-- word2`^/`change word1 to "other value" somehow (by refference?)`^/`word1 --> "other value" <-- word2`}
    sent: "2016-12-25T08:31:59.493Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f83bc96a565f84406b400"
    text: "so `word1:` gets that same reference as `word2:` "
    sent: "2016-12-25T08:30:52.302Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f8396db9cafe9183a7357"
    text: {in `word1: word2: "some value"`, `word2:` not only assigns reference to `"some value"` to `word2`, but it also returns that same reference}
    sent: "2016-12-25T08:30:14.564Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f835761e516c1578eee0e"
    text: "no, they can"
    sent: "2016-12-25T08:29:11.112Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f833ec895451b751b4994"
    text: {@rebolek so words cannot "point" to same block of memory?}
    sent: "2016-12-25T08:28:46.676Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f832ad99b1dd03d2dfc98"
    text: {`word2` does not know about `word1`, they are completely unrelated.}
    sent: "2016-12-25T08:28:26.292Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f830c61e516c1578eee0b"
    text: "@9214 that’s not how it works."
    sent: "2016-12-25T08:27:56.008Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f829ac5a4e0233bc9bb63"
    text: {@rebolek ^/```^/red>> word1: word2: "some value"^/== "some value"^/red>> word1^/== "some value"^/red>> word2^/== "some value"^/red>> word1: "other value"^/== "other value"^/red>> word2^/== "some value"^/```^/on last step I want it to be `"other value"` too}
    sent: "2016-12-25T08:26:02.807Z"
    editedAt: "2016-12-25T08:26:18.586Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f821f61e516c1578eee09"
    text: "simply said, when you don’t copy"
    sent: "2016-12-25T08:23:59.283Z"
    editedAt: "2016-12-25T08:24:04.186Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f8213d99b1dd03d2dfc8b"
    text: "or something like this"
    sent: "2016-12-25T08:23:47.456Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f820b96a565f84406b3f1"
    text: {@9214 `word1: word2: word3: "same string"`}
    sent: "2016-12-25T08:23:39.140Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f81e8c5a4e0233bc9b8f4"
    text: {@rebolek how can I "point" multiple words to same content?}
    sent: "2016-12-25T08:23:04.877Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f80e8058ca967378c1395"
    text: {oh, I mean `:` assigns, `copy` just returns new value}
    sent: "2016-12-25T08:18:48.777Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f80d1c895451b751b4144"
    text: "you assign it with `list:`"
    sent: "2016-12-25T08:18:25.221Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f80c87a3f79ef5d9bb763"
    text: {@maximvl well, yeah, it assigns word `list` to value `""`}
    sent: "2016-12-25T08:18:16.007Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f80c4c02c1a3959adf774"
    text: "copy just returns it"
    sent: "2016-12-25T08:18:12.840Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "585f80b20730ce6937097878"
    text: "but `copy` doesn't point `list`"
    sent: "2016-12-25T08:17:54.382Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f80a2c5a4e0233bc9b5c2"
    text: "@9214 yes, this is exactly what happens"
    sent: "2016-12-25T08:17:38.434Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f8085058ca967378c1302"
    text: "empty string is the memory you copy"
    sent: "2016-12-25T08:17:09.659Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f8082af6b364a29f40dd4"
    text: {@maximvl I thought that `copy` may instead create new block of memory with empty string content and point `list` to that new block}
    sent: "2016-12-25T08:17:06.900Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f806dc02c1a3959adf67d"
    text: {@9214 to a different block, it makes little sense to copy to that memory}
    sent: "2016-12-25T08:16:45.641Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f804dc5a4e0233bc9b4eb"
    text: {@maximvl so `copy` just copying empty string to that memory block on every function call?}
    sent: "2016-12-25T08:16:13.347Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f804b61e516c1578eee07"
    text: {On lower level, you have anonymous content, like `block!`, `string!`, `object!`, `function!`, ... and then you have zero or more words pointing to that content.}
    sent: "2016-12-25T08:16:11.109Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f8041af6b364a29f40d43"
    text: {so it will create word list with the same pointer as value}
    sent: "2016-12-25T08:16:01.848Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f8020c5a4e0233bc9b4b9"
    text: {yes, and on each function invocation this line will also be `list: <same memory address>`}
    sent: "2016-12-25T08:15:28.192Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f800cc895451b751b3e46"
    text: "just wonder how it works on lower level"
    sent: "2016-12-25T08:15:08.019Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f7ff8d99b1dd03d2dfc87"
    text: "but basically yes"
    sent: "2016-12-25T08:14:48.297Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f7fea96a565f84406b3e5"
    text: {If you want to be correct, you would say something like `word list has value of ...`. There are no variables in Red.}
    sent: "2016-12-25T08:14:34.033Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f7fa40730ce693709752e"
    text: {is that correct to say `list variable points to some block of memory`?}
    sent: "2016-12-25T08:13:24.365Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f7f4edb9cafe9183a7354"
    text: {@9214 why? don’t be afraid, it’s just a software, you are not going to break anything :)}
    sent: "2016-12-25T08:11:58.651Z"
    editedAt: "2016-12-25T08:12:06.396Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f7ef27a3f79ef5d9bb208"
    text: {@rebolek it's just that I don't feel myself confident enough}
    sent: "2016-12-25T08:10:26.493Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f7ea3d99b1dd03d2dfc78"
    text: {@9214 I don’t think you need to study memory management to understand it. just play with it and you will get it.}
    sent: "2016-12-25T08:09:07.052Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f7e69c895451b751b38b3"
    text: "so you write `do bind copy block context`"
    sent: "2016-12-25T08:08:09.403Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f7e68af6b364a29f407f6"
    text: {though I need to study memory management :worried:}
    sent: "2016-12-25T08:08:08.936Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f7e480730ce693709705e"
    text: {@9214 same with `bind`, you sent article link few days ago, it is common to copy block before binding because bind changes block itself}
    sent: "2016-12-25T08:07:36.177Z"
    editedAt: "2016-12-25T08:07:40.498Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f7dd7db9cafe9183a733f"
    text: {it copies the literal string and returns new copy each time. you then work with the copy, so the original is string is unchanged and remains always empty}
    sent: "2016-12-25T08:05:43.245Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f7dcce7bdfe4e2996fdce"
    text: "`copy` just copies thing and returns new copy"
    sent: "2016-12-25T08:05:32.206Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f7dbc058ca967378c0913"
    text: "there is nothing to do with `list` variable here"
    sent: "2016-12-25T08:05:16.541Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f7d9baf6b364a29f404e9"
    text: "because it's a function"
    sent: "2016-12-25T08:04:43.138Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f7d97058ca967378c08af"
    text: {`hey list variable, please move your pointer to the new freshy allocated memory`?}
    sent: "2016-12-25T08:04:39.675Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f7d8e7a3f79ef5d9bac58"
    text: "means `copy` will be executed each time"
    sent: "2016-12-25T08:04:30.452Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f7d77058ca967378c0862"
    text: {now I see that `list: ""` means `list variable points to some allocated memory block`, then what `list: copy ""` mean?}
    sent: "2016-12-25T08:04:07.162Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f7d74d99b1dd03d2dfc6d"
    text: {so `copy ""` does always return empty string, it is new copy of the initial empty literal string}
    sent: "2016-12-25T08:04:04.303Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f7d4cd99b1dd03d2dfc6a"
    text: {@9214 it creates and return new string with same content as source string}
    sent: "2016-12-25T08:03:24.120Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f7d4ac02c1a3959adec80"
    text: {```^/DESCRIPTION:^/      Returns a copy of a non-scalar value. ^/      copy is of type: action! ^/```^/=)}
    sent: "2016-12-25T08:03:22.095Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f7d210730ce6937096c27"
    text: "@rebolek and how exactly `copy` works?"
    sent: "2016-12-25T08:02:41.766Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585f7cf9d99b1dd03d2dfc67"
    text: {@maximvl yes, it is important to understand how it works}
    sent: "2016-12-25T08:02:01.886Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585f7ce2e7bdfe4e2996fb83"
    text: "not sure if it's bad or good"
    sent: "2016-12-25T08:01:38.081Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f7ccec5a4e0233bc9ad5b"
    text: {@rebolek but I agree that this behavour leaks implementation details to programmer, so one needs to know how literal structures are handled by compiler}
    sent: "2016-12-25T08:01:18.640Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585f773adb9cafe9183a7319"
    text: {@redredwine ^/> the next call basically ignores the reinitialise step on the first line - list: ""^/^/That’s because there is no reinitialize step.^/The important thing here is that the source of your function is loaded into memory once and then you run the function from there - you are not loading the function on each call. `""` is literal string, so it is created **once** when the function is loaded. When you call the function, it always uses that string.^/`copy ""` works, but IMO the more proper way if you want to reinitialize the string on each call is `make string! 12345` where `12345` is some size to pre-alocate. }
    sent: "2016-12-25T07:37:30.179Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585ec6bb7a3f79ef5d991d14"
    text: {We could use alternative strategies. I don't remember where, but I read some discussion somewhere about this}
    sent: "2016-12-24T19:04:27.013Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585ec6747a3f79ef5d991b8e"
    text: {> @redredwine Change list: "" to list: copy "" to get what you want.^/^/**tldr;** Redbol does not copy by default, see [Copy-on-write](https://en.wikipedia.org/wiki/Copy-on-write)^/It's for performance and simplicity.}
    sent: "2016-12-24T19:03:16.493Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585e87ee7a3f79ef5d981e96"
    text: "@Mennohexo :christmas_tree: "
    sent: "2016-12-24T14:36:30.025Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585e87c7c5a4e0233bc632ec"
    text: {@redredwine Change list: "" to list: copy "" to get what you want.}
    sent: "2016-12-24T14:35:51.420Z"
    v: 1
    author: "56fbd33185d51f252abb9b14"
) #(
    id: "585e84610730ce693705e535"
    text: "huuuuuuuuhuuuuuuuuhuuuuuuu - merry christmas"
    sent: "2016-12-24T14:21:21.083Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "585e8034c895451b75178708"
    text: {I am reading  the  red by example page about series at  http://www.red-by-example.org/series.html^/thre is an example  ^/function [] [^/^-^-^-list: ""^/^-^-^-append list "huh"^/^-^-^-print list^/^-^- ]^/^/Now we run this function a few times and see what happens:^/^/^-red>> huh^/^-huh^/^/^-red>> huh^/^-huhhuh^/^/^-red>> huh^/^-huhhuhhuh^/^/This seems a bit counter intuitive to me, although I "get it",   after reading  the explanation on that page.   but I keep asking myself,  why allow it to behave this way, meaning the next call basically ignores the  reinitialise step on the first line -  list: "" ?   ^/^/I think every programmer would want that every line of my program to be executed according to what I want it to do and when I want it to run. ^/^/Do I take it that Series is ALWAYS static although it says in Function, everything is LOCAL?    what else is static apart from  series?^/^/Would it not be better to let the programmer decides when he needs static ?^/^/^/^/^/^/^/^/}
    sent: "2016-12-24T14:03:32.835Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "585e7634e7bdfe4e29933e1e"
    text: "@DideC :O sounds like koan"
    sent: "2016-12-24T13:20:52.118Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d9898e7bdfe4e29901d3a"
    text: {> @maximvl now try `probe context? 'leet`^/^/One thing to mention ! Playing with the console mean : Red load what you type then do it. So `probe context? 'leet` create the `leet` word at loading time, then evaluate. So the word exists because you ask for its existence ;-)}
    sent: "2016-12-23T21:35:20.216Z"
    editedAt: "2016-12-23T21:37:53.818Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "585d856dc5a4e0233bc22f05"
    text: {Online dissambler, could be useful for debugging: https://www.onlinedisassembler.com}
    sent: "2016-12-23T20:13:33.569Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585d83dc7a3f79ef5d94328d"
    text: {I think extending an object in Red will be possible in the future, see `extend` native: `Extend an object or map value with list of key and value pairs.` but when you use it on objects `*** Internal Error: reserved for future use (or not yet implemented)`}
    sent: "2016-12-23T20:06:52.361Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585d2962058ca9673782cd02"
    text: {@greggirwin Though being late, thank you Gregg! I'll try it.}
    sent: "2016-12-23T13:40:50.173Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585d264d058ca9673782c02a"
    text: {if you would like to force default behaviour on block you can always do^/```^/bind block system/words^/```}
    sent: "2016-12-23T13:27:41.394Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d262a058ca9673782bf51"
    text: "and"
    sent: "2016-12-23T13:27:06.578Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d257e058ca9673782bc5b"
    text: {so I wonder why @dockimbel prefers one to another?}
    sent: "2016-12-23T13:24:14.889Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d255d7a3f79ef5d923cbb"
    text: {to me this seems so unnatural compared to having `set` adding words to current context}
    sent: "2016-12-23T13:23:41.950Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d2515058ca9673782baea"
    text: "Yes and Yes, as far as I know."
    sent: "2016-12-23T13:22:29.120Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
)#(
    id: "585d24fae7bdfe4e298de509"
    text: "is it how `function` works, btw?"
    sent: "2016-12-23T13:22:02.814Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d24e90730ce6937001fb8"
    text: {I have to find all `set-words` and `set` usages, create context containing all of them and then run this block in this context}
    sent: "2016-12-23T13:21:45.751Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d2496c5a4e0233bc01bec"
    text: "and I would like to collect all assignments"
    sent: "2016-12-23T13:20:22.709Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d24850730ce6937001dbb"
    text: {@PeterWAWood imagine there is DSL which actually assigns words like `[cmd: "command" send cmd]`}
    sent: "2016-12-23T13:20:05.398Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d245f058ca9673782b560"
    text: {@PeterWAWood ye, but this is not what I'm talking about}
    sent: "2016-12-23T13:19:27.061Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d2423c895451b7511d646"
    text: {It is easy to create an extended a context in Red & Rebol2 which is why the decision was taken to make them immutable:^/```text^/red>> o: make object! [a: 1]^/== make object! [^/    a: 1^/]^/red>> o: make o [b: 2]^/== make object! [^/    a: 1^/    b: 2^/]^/```}
    sent: "2016-12-23T13:18:27.023Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585d23de7a3f79ef5d923522"
    text: {@PeterWAWood let's say I have blocks of commands like `[send "command"]`, kinda DSL, but I want to print all the commands, so I can do^/```^/red>> c: context [ send: :print ]^/== make object! [^/    send: make native! [[^/        "Outputs a value ...^/red>> b: [send "command"]^/== [send "command"]^/red>> do bind b c^/command^/```}
    sent: "2016-12-23T13:17:18.748Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d22f07a3f79ef5d922ddc"
    text: {> ... but lets say I want to change definition of word in block - I can just `bind` it, right? ^/^/I'm not sure that I understand your question. }
    sent: "2016-12-23T13:13:20.199Z"
    editedAt: "2016-12-23T13:15:30.472Z"
    v: 3
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585d21d0d99b1dd03d2ddfcf"
    text: {@maximvl static as in you cannot add or remove words. Why? I am not sure, Carl allowed extending objects in R3 (planned also shrinking them but never implemented it AFAIK), but @dockimbel doesn’t like it and prefers R2 way. I can’t tell you why, I don’t know.}
    sent: "2016-12-23T13:08:32.912Z"
    editedAt: "2016-12-23T13:09:13.139Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585d2145c02c1a3959a44825"
    text: "what are the reasons behind these decisions?"
    sent: "2016-12-23T13:06:13.360Z"
    editedAt: "2016-12-23T13:06:19.547Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d211ec5a4e0233bc00864"
    text: {let me rephrase, if `set` would work in current context it would be possible to not leak words into global one}
    sent: "2016-12-23T13:05:34.148Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d20e47a3f79ef5d921f24"
    text: {so what if I want block to set words for my context?}
    sent: "2016-12-23T13:04:36.437Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d20ce7a3f79ef5d921e75"
    text: {@PeterWAWood interesting, but lets say I want to change definition of word in block - I can just `bind` it, right?}
    sent: "2016-12-23T13:04:14.437Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d207dc895451b7511bc16"
    text: "@rebolek why are they static?"
    sent: "2016-12-23T13:02:53.928Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d206ee7bdfe4e298dcc47"
    text: {@maximvl  > so `set` binds word to the current context if it contains the word or creates a new in global context^/^/You can use ```in```  to specify the context in which you wish to ```set``` the word:^/```text^/red>> b: 1^/== 1^/red>> o: make object! [^/[    b: 2^/[    set in system/words 'b 3^/[    ]^/== make object! [^/    b: 2^/]^/red>> b^/== 3^/red>> set in o 'b 4^/== 4^/red>> o/b^/== 4^/red>> b^/== 3^/```^/}
    sent: "2016-12-23T13:02:37.999Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "585d1dd3c895451b7511af13"
    text: {http://inception.davepedu.com/^/```^/red>> inception: context [dicaprio: self]^/== make object! [^/    dicaprio: make object! [...]^/red>> inception/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> inception/dicaprio/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> inception/dicaprio/dicaprio/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> inception/dicaprio/dicaprio/dicaprio/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> inception/dicaprio/dicaprio/dicaprio/dicaprio/dicaprio^/== make object! [^/    dicaprio: make object! [...]^/]^/red>> ^/```^/}
    sent: "2016-12-23T12:51:31.811Z"
    editedAt: "2016-12-23T12:57:09.577Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d1cf9db9cafe9183a55c7"
    text: {IIRC, in Red, contexts are static. You can’t add or remove words (obviously it is possible to add words to system/words, but with "normal" contexts, Red is not as flexible as R3).}
    sent: "2016-12-23T12:47:53.147Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585d1c25e7bdfe4e298db76b"
    text: {`x: make x [unset 'z]` doesn't actually remove `z`}
    sent: "2016-12-23T12:44:21.205Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d1a427a3f79ef5d91f352"
    text: {one thing left now is to learn how to remove binding from context (or object)}
    sent: "2016-12-23T12:36:18.347Z"
    editedAt: "2016-12-23T12:36:28.876Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d19527a3f79ef5d91ed38"
    text: {@maximvl ^/```^/red>> x: context [y: 1]^/== make object! [^/    y: 1^/]^/red>> x/y: 2^/== 2^/red>> x^/== make object! [^/    y: 2^/]^/red>> x: make x [z: 3]^/== make object! [^/    y: 2^/    z: 3^/]^/red>> x/z: 4^/== 4^/red>> x^/== make object! [^/    y: 2^/    z: 4^/]^/red>> ^/```}
    sent: "2016-12-23T12:32:18.245Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d17f4db9cafe9183a5585"
    text: {Yep. Also, `object` and `context` are mostly interchangeable. }
    sent: "2016-12-23T12:26:28.436Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585d17b8058ca96737826eb1"
    text: {@rebolek yeah, that what I actually mean by saying "global context" - some data structure with all words bindings}
    sent: "2016-12-23T12:25:28.724Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d1784d99b1dd03d2ddeb5"
    text: {It just collects the word. So the word is of type `unset!` and therefore has no value. Also, there is no global context. But you can call `system/words` that, it is most close to a global context.}
    sent: "2016-12-23T12:24:36.087Z"
    editedAt: "2016-12-23T12:25:51.118Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585d177f0730ce6937ffd107"
    text: {@maximvl the thing that `probe context? leet` spits out is `system/words` object (?), as  @rebolek pointed out}
    sent: "2016-12-23T12:24:31.632Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d1763e7bdfe4e298da03d"
    text: {ok, it's global:^/```^/red>> (context? 'print) = (context? 'leet)^/== true^/```}
    sent: "2016-12-23T12:24:03.041Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d1714e7bdfe4e298d9f35"
    text: {@9214 I don't think it's global context:^/```^/red>> value? system/words/leet^/*** Script Error: value? does not allow unset! for its value argument^/*** Where: value?^/```}
    sent: "2016-12-23T12:22:44.030Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d17110730ce6937ffce5d"
    text: {```^/red>> blah: 'bleh^/== bleh^/red>> find system/words 'bleh^/== true^/red>> uh: context [oh: 'huh]^/== make object! [^/    oh: 'huh^/]^/red>> find system/words 'huh^/== true^/red>> system/words/oh ; returns nothing^/red>> system/words/blah^/== bleh^/red>> type? system/words/oh^/== unset!^/red>> ^/```}
    sent: "2016-12-23T12:22:41.141Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d163cdb9cafe9183a5562"
    text: {```^/red>> nonsense: [ratatat]^/== [ratatat]^/red>> find system/words 'ratatat^/== true^/```}
    sent: "2016-12-23T12:19:08.630Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585d15e9af6b364a29eab01a"
    text: "@rebolek yeah, I see that"
    sent: "2016-12-23T12:17:45.071Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d15ddd99b1dd03d2ddea5"
    text: {If you declare a word in a context, it is added to `system/words` as `unset!`.}
    sent: "2016-12-23T12:17:33.883Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585d15ae96a565f8440695ca"
    text: {```^/red>> equal? system/words context? 'leet^/== true^/```}
    sent: "2016-12-23T12:16:46.056Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585d159ce7bdfe4e298d96c6"
    text: {at the very bottom there's^/```^/...^/   my-context: make object! [^/        leet: 1337^/    ]^/    leet: unset^/```}
    sent: "2016-12-23T12:16:28.324Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d156a0730ce6937ffc52b"
    text: "@maximvl idk, looks like global context"
    sent: "2016-12-23T12:15:38.224Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d1544c5a4e0233bbfcdde"
    text: "but what is it?"
    sent: "2016-12-23T12:15:00.819Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d15037a3f79ef5d91da4a"
    text: "@9214 oh wow"
    sent: "2016-12-23T12:13:55.946Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d14b5e7bdfe4e298d8e4a"
    text: "@maximvl now try `probe context? 'leet`"
    sent: "2016-12-23T12:12:37.678Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d14a3c02c1a3959a40651"
    text: {```^/red>> my-context: context [leet: 1337]^/== make object! [^/    leet: 1337^/]^/red>> leet^/*** Script Error: leet has no value^/*** Where: catch^/```}
    sent: "2016-12-23T12:12:19.429Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d1343af6b364a29eaa297"
    text: {```Red^/red>> x: context [y: 1337]^/== make object! [^/    y: 1337^/]^/red>> g: [set 'j y + 5]^/== [set 'j y + 5]^/red>> do g^/*** Script Error: y has no value^/*** Where: +^/red>> bind 'j x^/== j^/red>> x^/== make object! [^/    y: 1337^/]^/red>> do g^/*** Script Error: y has no value^/*** Where: +^/red>> bind g x^/== [set 'j y + 5]^/red>> do g^/== 1342^/red>> x^/== make object! [^/    y: 1337^/]^/red>> x/j^/*** Script Error: cannot access j in path x/j^/*** Where: catch^/red>> j^/== 1342^/```}
    sent: "2016-12-23T12:06:27.233Z"
    editedAt: "2016-12-23T12:06:52.949Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d132fe7bdfe4e298d8757"
    text: {so `set` binds word to the current context if it contains the word or creates a new in global context}
    sent: "2016-12-23T12:06:07.259Z"
    editedAt: "2016-12-23T12:07:41.981Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d12e50730ce6937ffbb5e"
    text: {so context seems to be immutable in terms of adding words}
    sent: "2016-12-23T12:04:53.964Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d12d6af6b364a29eaa0f6"
    text: {interesting:^/```^/red>> x/z: 1^/*** Script Error: cannot access z in path x/z:^/*** Where: catch^/```}
    sent: "2016-12-23T12:04:38.728Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d12910730ce6937ffb973"
    text: "@9214 you are right Oo"
    sent: "2016-12-23T12:03:29.962Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d1289e7bdfe4e298d84b7"
    text: {```^/red>>  x: context [y: 5 j: 0]^/red>> reduce g^/== [10]^/red>> j^/*** Script Error: j has no value^/*** Where: catch^/red>> x^/== make object! [^/    y: 5^/    j: 10^/]^/```}
    sent: "2016-12-23T12:03:21.044Z"
    editedAt: "2016-12-23T12:04:09.338Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d1235c5a4e0233bbfc361"
    text: "good, assumption, let's try it"
    sent: "2016-12-23T12:01:57.374Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d1222c5a4e0233bbfc2ac"
    text: "interesting"
    sent: "2016-12-23T12:01:38.213Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d12207a3f79ef5d91cadf"
    text: {perhaps we should explicitly bind `j` to `x` before setting it}
    sent: "2016-12-23T12:01:36.922Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d11efc5a4e0233bbfc231"
    text: {well, I would expect this, but there could be reasons for current behaviour I'm not aware of}
    sent: "2016-12-23T12:00:47.705Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585d0fe40730ce6937ffac28"
    text: "so you think `j` should be setted in `x` context?"
    sent: "2016-12-23T11:52:04.981Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585d0f6ac5a4e0233bbfb89e"
    text: "@maximvl http://www.pat665.free.fr/doc/bind.html"
    sent: "2016-12-23T11:50:02.470Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cff6d0730ce6937ff4d04"
    text: {there are these two definitions, but both have different spec:^/https://github.com/red/red/blob/362f17627df94ed7b476b1f9e414b8a94a2fb0fd/runtime/datatypes/context.reds#L435^/https://github.com/red/red/blob/c8cf446a90e45ccf68e4a4853a443d4c6395119d/runtime/natives.reds#L1053}
    sent: "2016-12-23T10:41:49.280Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "585cfe18af6b364a29ea3075"
    text: "couldn't find anything further"
    sent: "2016-12-23T10:36:08.493Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cfe0be7bdfe4e298d170d"
    text: "okey, it's defined as `#get-definition NAT_BIND`"
    sent: "2016-12-23T10:35:55.457Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cfc9bc895451b75110a7f"
    text: "@maximvl going to check `bind` source"
    status: true
    sent: "2016-12-23T10:29:47.565Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cfb1daf6b364a29ea1faa"
    text: {so `g` could only be reduced if its words bound to `x`, because there is a binding for `y` in `x`, but at same time `j` is still becomes set only in global context}
    sent: "2016-12-23T10:23:25.323Z"
    editedAt: "2016-12-23T10:24:27.589Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cfab17a3f79ef5d913891"
    text: {one more confusing thing here is words evaluation based on context, but `set` doesn't seem to respect it:^/```^/red>> x: context [y: 5]^/== make object! [^/    y: 5^/]^/red>> g: [set 'j y + 5]^/== [set 'j y + 5]^/red>> reduce g^/*** Script Error: y has no value^/*** Where: +^/red>> bind g x^/== [set 'j y + 5]^/red>> reduce g^/== [10]^/red>> j^/== 10^/red>> x^/== make object! [^/    y: 5^/]^/```}
    sent: "2016-12-23T10:21:37.234Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf873af6b364a29ea1243"
    text: {so this one shows that `set` "binds" word to global context:^/```^/red>> f: func ['x] [probe x]^/== func ['x][probe x]^/red>> z^/*** Script Error: z has no value^/*** Where: catch^/red>> f z^/z^/== z^/red>> z^/*** Script Error: z has no value^/*** Where: catch^/red>> f: func ['x] [set x 5 probe x]^/== func ['x][set x 5 probe x]^/red>> f z^/z^/== z^/red>> z^/== 5^/red>> system/words/z^/== 5^/```}
    sent: "2016-12-23T10:12:03.338Z"
    editedAt: "2016-12-23T10:12:46.919Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf7d40730ce6937ff1d61"
    text: {```^/Red []^/^/my-for-each: function ['word series body] [^/   counter: 1^/   loop length? series [^/      set word first at series counter^/      bind body 'counter^/      do body^/      counter: counter + 1^/   ]  ^/]^/^/my-for-each x [1 2 3] [print x]^/```}
    sent: "2016-12-23T10:09:24.918Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf7d2af6b364a29ea0fcd"
    text: "check this out"
    sent: "2016-12-23T10:09:22.428Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf74bc895451b7510ec9a"
    text: "leaky!"
    sent: "2016-12-23T10:07:07.358Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cf716c895451b7510ebb4"
    text: {```^/red>> map-each z [1 2 3] [z + 1]^/== [2 3 4]^/^/red>> z^/red>> 3^/```}
    sent: "2016-12-23T10:06:14.887Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cf68fc02c1a3959a35b74"
    text: "try it =)"
    sent: "2016-12-23T10:03:59.964Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf66dc895451b7510e804"
    text: {and why this isn't lexical scope, because we can see `z` from any other part of a program (can we?) ?}
    sent: "2016-12-23T10:03:25.108Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cf5f8c5a4e0233bbf29ed"
    text: "and all other words, yes"
    sent: "2016-12-23T10:01:28.970Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf5edc02c1a3959a358f5"
    text: "but `z` is still binded...?"
    sent: "2016-12-23T10:01:17.895Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cf5b0e7bdfe4e298ced9a"
    text: "it works differently"
    sent: "2016-12-23T10:00:16.134Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf5a6c02c1a3959a3579a"
    text: "there is probably no scope at all"
    sent: "2016-12-23T10:00:06.983Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf58dc02c1a3959a356ea"
    text: "@maximvl so there's no scope in `foreach`?"
    sent: "2016-12-23T09:59:41.965Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cf381c895451b7510d728"
    text: {but let's wait for somebody who can clearly explain how things happen :)}
    sent: "2016-12-23T09:50:57.045Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf355c895451b7510d691"
    text: "AFAIK there are no scopes"
    sent: "2016-12-23T09:50:13.801Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf3367a3f79ef5d91131c"
    text: "scopes are something unusual in Redbol world"
    sent: "2016-12-23T09:49:42.983Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cf30ae7bdfe4e298cdf97"
    text: {inside `foreach` `:word` evaluates to `z` and `body` evaluates to `[z + 1]`, therefore `z` is in one scope?}
    sent: "2016-12-23T09:48:58.567Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585ce0dcaf6b364a29e9a322"
    text: {this is actually interesting, so `foreach` binds `word` in this example, is it implemented as recursive search in body block? what if passed block is really big?}
    sent: "2016-12-23T08:31:24.019Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585ce058af6b364a29e9a028"
    text: {the `word` is just something to be binded inside map-each, so your block needs a name to access it}
    sent: "2016-12-23T08:29:12.966Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585ce037af6b364a29e99f99"
    text: "oh, that was stupid question actually :D"
    sent: "2016-12-23T08:28:39.531Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585ce023c02c1a3959a2eea3"
    text: "yeah!"
    sent: "2016-12-23T08:28:19.013Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585ce01dc02c1a3959a2ee70"
    text: "is this what you mean?"
    sent: "2016-12-23T08:28:13.135Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585ce018058ca96737815de8"
    text: {```^/red>> map-each z [1 2 3] [z + 1]^/== [2 3 4]^/```}
    sent: "2016-12-23T08:28:08.011Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585ce0000730ce6937fea58c"
    text: {I should pass `[word + 1]` as argument to `map-each`?}
    sent: "2016-12-23T08:27:44.650Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cdfc30730ce6937fea461"
    text: {```^/map-each: function [^/    "Evaluates body for each value in a series, returning all results."^/    'word [word! block!] "Word, or words, to set on each iteration"^/    data [series!]^/    body [block!]^/][^/    collect [^/        foreach :word data [^/            keep/only do body ; suppose I want do [word + 1]^/        ]^/    ]^/]^/```}
    sent: "2016-12-23T08:26:43.074Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cdf98c895451b7510762c"
    text: {@9214 `word` contains each element, so do what you want with it}
    sent: "2016-12-23T08:26:00.993Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cdee47a3f79ef5d90adb4"
    text: {I.e. , in `map-each`, if I want to perform some transformation with every element in `data`}
    sent: "2016-12-23T08:23:00.208Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cde950730ce6937fe9eb0"
    text: "capture?"
    sent: "2016-12-23T08:21:41.269Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cde5dc5a4e0233bbeafc8"
    text: {but how can I "capture" `word` inside `body`?}
    sent: "2016-12-23T08:20:45.885Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cdccfc02c1a3959a2d670"
    text: "@maximvl oh, I see now, thanks!"
    sent: "2016-12-23T08:14:07.015Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cdcbcc5a4e0233bbea272"
    text: {@9214 ^/```^/red>> collect [loop 5 [ keep [x] ] ]^/== [x x x x x]^/red>> collect [loop 5 [ keep/only [x] ] ]^/== [[x] [x] [x] [x] [x]]^/```}
    sent: "2016-12-23T08:13:48.811Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585cdc3ec02c1a3959a2d33c"
    text: {and what's `keep/only`? I know how `keep` works, but what this refinement do?}
    sent: "2016-12-23T08:11:42.384Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585cdb96c5a4e0233bbe98ba"
    text: {@greggirwin yeah, later I thought that `collect` should be more elegant}
    sent: "2016-12-23T08:08:54.633Z"
    editedAt: "2016-12-23T08:12:56.377Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585c0fb2c895451b750c5d76"
    text: "@geekyi, a newbie guide to R/S would be *great*."
    sent: "2016-12-22T17:38:58.449Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "585c0ec4c02c1a39599ea7b1"
    text: {@koba-yu, and others, Red does not have tail call optimization at this time.^/^/We can write `map` and all other HOFs in Red. I've posted some, and Nenad has said he has thoughts on the overall design for common HOFs. You could try modifying @9214's example to use `collect` rather than allocating and appending to a block. ^/^/Another standard model is to use a body block, rather than a function. e.g.:^/```^/map-each: function [^/^-"Evaluates body for each value in a series, returning all results."^/^-'word [word! block!] "Word, or words, to set on each iteration"^/^-data [series!]^/^-body [block!]^/][^/^-collect [^/^-^-foreach :word data [^/^-^-^-keep/only do body^/^-^-]^/^-]^/]^/```^/This introduces a few new concepts, but shows some techniques for writing control funcs. Feel free to ask questions.}
    sent: "2016-12-22T17:35:00.200Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "585bfcc3c02c1a39599e2989"
    text: " ¯\_( ツ)_/¯"
    sent: "2016-12-22T16:18:11.481Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585bfc90c895451b750bd8b9"
    text: {@9214 also this document was updated like 2 month ago, so}
    sent: "2016-12-22T16:17:20.772Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585bfb0d0730ce6937fa1e17"
    text: "it seems that there's no `macro` directive in R/S"
    sent: "2016-12-22T16:10:53.385Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585bfa8fc02c1a39599e1c99"
    text: {@maximvl http://static.red-lang.org/red-system-specs.html#section-14}
    sent: "2016-12-22T16:08:47.114Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585bf589af6b364a29e4f178"
    text: "nope, same thing"
    sent: "2016-12-22T15:47:21.714Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585bf577e7bdfe4e2987d69b"
    text: "hm, let me try"
    sent: "2016-12-22T15:47:03.785Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585bf569c02c1a39599df952"
    text: {I suppose it's not necessary for the file name to end in .reds ?}
    sent: "2016-12-22T15:46:49.692Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585bf520e7bdfe4e2987d32b"
    text: {@geekyi thanks for links, I don't see usage of `#macro` there though, my script uses the R/S:^/```^/>cat test.red ^/Red/System []^/^/#macro test: func [x] [^/   compose [(:x)]^/]^/^/probe [test z]^/^/```^/}
    sent: "2016-12-22T15:45:36.985Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585bf4af0730ce6937f9ea40"
    text: "Or am I assuming wrong and you already know R/S?"
    sent: "2016-12-22T15:43:43.597Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585bf48fc02c1a39599df171"
    text: {@maximvl http://www.red-lang.org/2011/03/having-fun-with-redsystem.html works for you?}
    sent: "2016-12-22T15:43:11.478Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585bf42ce7bdfe4e2987ccd5"
    text: {IF @rebolek, @greggirwin,  or anyone hasn't got a complete newbie guide to getting started writing r/s .. I'm gonna write one :p}
    sent: "2016-12-22T15:41:32.198Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "585bf371c895451b750b9c28"
    text: "I haven't tried red/system yet either"
    sent: "2016-12-22T15:38:25.007Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585bf2f5c5a4e0233bb9d707"
    text: "@maximvl maybe because it's not red system?"
    sent: "2016-12-22T15:36:21.654Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585bec28e7bdfe4e298796d8"
    text: {for some reason I can't compile code with macros:^/```^/red -r test.red -o test.bin ^/^/-=== Red Compiler 0.6.1 ===- ^/^/Compiling /home/mvelesyuk/tmp/test.red ...^/^/Target: Linux ^/^/Compiling to native code...^/*** Compilation Error: unknown directive macro ^/*** in file: %/home/mvelesyuk/tmp/test.red ^/*** at line: 3 ^/*** near: [^/    #macro test: func [x] [^/        compose [(:x)]^/    ] print-line [test z]^/]^/```}
    sent: "2016-12-22T15:07:20.174Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585bec15c02c1a39599dbae1"
    text: "@rebolek ok, good to know"
    sent: "2016-12-22T15:07:01.831Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585be5b3db9cafe9183a3b6b"
    text: "so R/S programs will always be smaller"
    sent: "2016-12-22T14:39:47.837Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585be5a761e516c1578eb738"
    text: {@maximvl Red compiler currently does not remove unused stuff}
    sent: "2016-12-22T14:39:35.155Z"
    editedAt: "2016-12-22T14:40:00.728Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585be4c17a3f79ef5d8b46e2"
    text: {@rebolek compiled hello world in R/S is 6.6kB, but it's dynamically linked}
    sent: "2016-12-22T14:35:45.860Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585be41dc895451b750b3537"
    text: {@rebolek hm, does that mean that Red/System compiles only direct dependencies of the program?}
    sent: "2016-12-22T14:33:01.238Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585bdddb96a565f844067aba"
    text: {I think that Red runtime is too big for Arduino with its 32kB of memory. But you can sure fit Red/System code in such space.}
    sent: "2016-12-22T14:06:19.263Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585bdda3c5a4e0233bb94f50"
    text: "@rebolek what do you mean by `use Red/System` ?"
    sent: "2016-12-22T14:05:23.713Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585bdb4261e516c1578eb5ed"
    text: {@maximvl for arduino-like machine it would be better to use Red/System.}
    sent: "2016-12-22T13:55:14.049Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585af2aac895451b75067575"
    text: "@maximvl as example, typical PI have ~GB of ram"
    sent: "2016-12-21T21:22:50.498Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585af1d3c895451b750670fa"
    text: "I think arduino is pretty popular"
    sent: "2016-12-21T21:19:15.729Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585aec5d7a3f79ef5d868144"
    text: {@maximvl not yet I guess.. and a few KB is a lot.. too little rather. Especially these days, when even "embedded" systems have MBs of memory What devices do you have in mind?}
    sent: "2016-12-21T20:55:57.130Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585ad726058ca9673776ecef"
    text: {what do you think about embedded Red? is it possible to make it runable on devices with few KB of memory?}
    sent: "2016-12-21T19:25:26.633Z"
    editedAt: "2016-12-21T19:26:19.056Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585a93ae0730ce6937f2a2cc"
    text: "@koba-yu good night! :stars: "
    sent: "2016-12-21T14:37:34.138Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a938f7a3f79ef5d8452b9"
    text: "Thank you very much for your advices!"
    sent: "2016-12-21T14:37:03.112Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a93730730ce6937f2a10d"
    text: {sorry, I should go to bed. It becomes midnight in Japan... :(}
    sent: "2016-12-21T14:36:35.992Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a930ce7bdfe4e29808399"
    text: {@9214 I see. I have checked `? make` and now I seen its argument is any-type! }
    sent: "2016-12-21T14:34:52.368Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a925ec895451b7503fa8f"
    text: {@koba-yu `make` creates a new value with specified type and spec, it may not necessarily be a function.}
    sent: "2016-12-21T14:31:58.275Z"
    editedAt: "2016-12-21T14:32:10.144Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a915fc5a4e0233bb25525"
    text: {@9214 I did not know that way!  0 can be used for make function's spec block?}
    sent: "2016-12-21T14:27:43.671Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a8ecac5a4e0233bb24341"
    text: {@koba-yu perhaps ```xs*: make type? xs 0``` will be more valid}
    sent: "2016-12-21T14:16:42.599Z"
    editedAt: "2016-12-21T14:19:37.793Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a8ebfaf6b364a29dd9120"
    text: {@koba-yu a little from other languages applies to Redbol, so double check things which you think you understand =)}
    sent: "2016-12-21T14:16:31.612Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585a8ce9c02c1a39599638e4"
    text: "@9214 Thanks, I'll check it. :)"
    sent: "2016-12-21T14:08:41.653Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a8b5ee7bdfe4e29804f5b"
    text: {@koba-yu http://www.rebol.com/docs/core23/rebolcore-4.html#section-5.1}
    sent: "2016-12-21T14:02:06.587Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a8ae4c895451b7503cf55"
    text: {@maximvl sure thing^/```^/break-stack: does [^/^-print "we gonna go deeper!"^/^-break-stack^/]^/^/break-stack^/```^/```^/...^/we gonna go deeper!^/we gonna go deeper!^/we gonna go deeper!^/we gonna go deeper!^/*** Internal Error: stack overflow^/*** Where: break-stack^/```^/}
    sent: "2016-12-21T14:00:04.256Z"
    editedAt: "2016-12-21T14:05:03.156Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a8ab1c5a4e0233bb22ddc"
    text: {@maximvl Thank you, I misunderstood it was something like a symbol of pointer like C style language}
    sent: "2016-12-21T13:59:13.914Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a8a8ec02c1a3959962a44"
    text: {@9214 if you know the definition it should not be hard to come up with a script to test it}
    sent: "2016-12-21T13:58:38.554Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585a8a00c02c1a395996261a"
    text: "@9214 you tell us :D"
    sent: "2016-12-21T13:56:16.276Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585a89cec895451b7503c8b9"
    text: {oh, by the way, does Red have tail-call optimization?}
    sent: "2016-12-21T13:55:26.009Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a89c1058ca9673774ffad"
    text: {@koba-yu same as `-` in `mapped-block`, basically red uses `[]` and space as delimiters, pretty much everything else can be used in names}
    sent: "2016-12-21T13:55:13.910Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585a8893c895451b7503c28f"
    text: "@koba-yu you're welcome"
    sent: "2016-12-21T13:50:11.098Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a886b058ca9673774f66a"
    text: {@9214 Thank you very much for your cool example! I was looking for some elegant way for that.}
    sent: "2016-12-21T13:49:31.449Z"
    editedAt: "2016-12-21T13:49:53.333Z"
    v: 2
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a8838c895451b7503bfb7"
    text: "Oh, OK, I see. :)"
    sent: "2016-12-21T13:48:40.743Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a87f6058ca9673774f345"
    text: {@koba-yu ah, no, it's just a valid variable name in Red}
    sent: "2016-12-21T13:47:34.876Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a87e1c02c1a39599617e4"
    text: {@9214 Don't you put asterisk(\*) after xs in your function? I wonder it has some meaning.}
    sent: "2016-12-21T13:47:13.153Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a8750c02c1a39599614a3"
    text: {@koba-yu `xs` is just a naming convention for list-like data in functional languages, or do you mean something else?}
    sent: "2016-12-21T13:44:48.472Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a86b1e7bdfe4e29803151"
    text: {@9214 Thank you for your reply! What does \* of xs\* mean? }
    sent: "2016-12-21T13:42:09.391Z"
    editedAt: "2016-12-21T13:42:43.493Z"
    v: 2
    author: "581dd537d73408ce4f33d029"
) #(
    id: "585a8522c02c1a39599607bd"
    text: {@koba-yu AFAIK, no, but you can easily implement one^/```^/Red []^/^/map: function [^/^-"ad-hoc map implementation"^/^-f  [function!] "a function to map over series" ^/^-xs [series!]   "series, obviously"^/] [^/^-xs*: copy [] ; inner series to store our mapped xs^/^-foreach x xs [^/^-^-append xs* f x^/^-]^/]^/^/; test no. 1^/block: [1 2 3 4 5]^/mapped-block: map func [x] [x + 1337] block^/print mapped-block^/^/; test no. 2^/string: "this is red"^/mapped-string: map func [char] [form reduce ["[" uppercase char "]" newline]] string^/print mapped-string^/```^/```^/1338 1339 1340 1341 1342^/[ T ] ^/[ H ] ^/[ I ] ^/[ S ] ^/[   ] ^/[ I ] ^/[ S ] ^/[   ] ^/[ R ] ^/[ E ] ^/[ D ] ^/```}
    sent: "2016-12-21T13:35:30.201Z"
    editedAt: "2016-12-21T13:38:03.581Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585a7b047a3f79ef5d83b888"
    text: {Hi, does Red have so-called "map function", popular  among functional programming languages?}
    sent: "2016-12-21T12:52:20.555Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "5859ac36c02c1a395991d0be"
    text: {@9214 Great comments. Rebol & Red are the last languages that I really enjoy to learn and having fun, the first one was 6502 Assembly on C64 and the second was 68000 Assembly on A500/A1200.}
    sent: "2016-12-20T22:09:58.844Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5853faea589f411830f148ed"
    text: {What really hooked me as a newbie is that Rebol grown up on top of ideas which I really adore:^/* every possible abstraction could be represented as a simple list (series);^/* every program is just a dialect for a problem it solves (DSL approach);^/* code and data are the same (homoiconity), and I think this somehow resonates with The von Neumann architecture, which lies at the very core of modern computers;^/* expressiveness (free-form syntax, multiparadigm) and extensibility (macros... fullstack-ness, eh?) of programming language is important more than anything else;^/* contexts, environments (can't really tell you what I mean, it just feels like The Right Thing);^/*  language shouldn't bring any accidential complexity with it (no plugin/framework/library crutches, no IDE bells and whistles, nothing being shoved down your throat);^/* it should be fun! (Of course I have no voice in that, but IMO very few languages are actually fun to hack with and worth an emotional/intellectual investment. PL ain't a tool, it's a mindset -> the actual tool is your brain -> PL is a way you think with your brain about problems -> thinking **definetly** should be fun).}
    sent: "2016-12-16T14:32:10.904Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5853b5c1e7bdfe4e295f4f36"
    text: {Same for me. I readed about "LAVA" Carl's project in an Amiga magazine. It was rename Rebol in the end. I think I started playing wih Rebol in 1999 or 2000. Was amazed by what it does an so  powerfull it is for so tiny exe and so few code. I jump on it mostly as a hobby. Since then I use it for my work, but mostly for internal uses.}
    sent: "2016-12-16T09:37:05.471Z"
    editedAt: "2016-12-16T09:37:25.106Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5852c172589f411830eacaa1"
    text: {Most of early Rebolers are coming from the Amiga community (including myself), following Carl's new adventure with Rebol. I knew about Rebol since 1997, but joined only in 1999, when I needed  a language flexible enough to implement a web scraper from scratch, I was seduced mostly by series concept, rich datatypes, built-in/hackable networking protocols and the amazing Parse dialect.}
    sent: "2016-12-15T16:14:42.246Z"
    editedAt: "2016-12-15T16:15:05.318Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5852b2e9af6b364a29b79bf7"
    text: {@pekr http://amigareview.amiga.sk/amiga-review-26/carl-sassenrath-je-cas-se-vratit :)}
    sent: "2016-12-15T15:12:41.372Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5852b056e7bdfe4e2959ec14"
    text: {I found Amiga and followed Carl's footsteps, which leaded to Rebol. After all, if I am not mistaken @dockimbel has an Amiga heritage too :smile: }
    sent: "2016-12-15T15:01:42.615Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5851914e058ca9673747cb3c"
    text: {I found REBOL: The Official Guide at a bookstore in 2001. I was looking for where to go after specializing in VB for 11 years. }
    sent: "2016-12-14T18:37:02.427Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5851859ffb22792b3b62f9c3"
    text: {if anyone is interested, there are some fun puzzles over at: http://adventofcode.com/^/They all seem to involve generated inputs, so these seem to be good for learning parse (which I have been wanting to do)}
    sent: "2016-12-14T17:47:11.639Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5851848a589f411830e3fe8d"
    text: {I found out about Red from an open-source-publicity campaign that was running on Stack Overflow, and it piqued my interest enough to check in every few months, until I was eventually following and learning daily}
    sent: "2016-12-14T17:42:34.823Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5851572ac895451b75d4d22e"
    text: "want until 1.0, it's not the time yet"
    sent: "2016-12-14T14:28:58.901Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "585154d0c5a4e0233b8332cd"
    text: {As for me, I think I've found Rebol by accident, while searching for languages which were inspired by Forth and Lisp. Then I investigated a little bit more, found Red, and almost peed in my pants out of joy. :joy_cat: }
    sent: "2016-12-14T14:18:56.561Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "58513597e7bdfe4e29516c56"
    text: {I read an article on hackernews about red. Then I found about rebol}
    sent: "2016-12-14T12:05:43.536Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5851029bbe9d43bc635baab4"
    text: "But I could start using Rebol at work at 2007."
    sent: "2016-12-14T08:28:11.130Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "585102717a58ca60554ecf3f"
    text: {Rebol released on Amiga at 1998. I saw it there, when I see Carl's name on it (he is very famous in Amiga scene) I start following it.}
    sent: "2016-12-14T08:27:29.066Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5851021528d755bf1402ec66"
    text: {I was using Amiga 1200 until 2000 for everything; internet, php, mysql.}
    sent: "2016-12-14T08:25:57.036Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5850d2d9db9cafe91838f745"
    text: "I’ve read an article by @pekr in Amiga Review"
    sent: "2016-12-14T05:04:25.066Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5850a3e70da034021ba81d83"
    text: "How you guys came to Red and Rebol after all?"
    sent: "2016-12-14T01:44:07.646Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "585089180da034021ba79f7b"
    text: "@endo64 nice example, thanks!"
    sent: "2016-12-13T23:49:44.197Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585058baf666c5a1380b4d7f"
    text: "Right, should be `p: context [a: 2]`"
    sent: "2016-12-13T20:23:22.236Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5850551961e516c1578d6951"
    text: "`p: context [a: 1]` needs a fix"
    sent: "2016-12-13T20:07:53.435Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585054e928d755bf14ff7040"
    text: {"Words carry their context" and here is a good example:^/```^/red>> o: context [a: 1]^/red>> p: context [a: 1]^/red>> b: [ ]^/red>> append b in o 'a^/red>> append b in p 'a^/red>> b^/== [a a]^/red>> reduce b^/== [1 2]^/^/red>> in o 'a^/== a^/red>> bind in o 'a p^/== a^/red>> get bind in o 'a p^/== 2^/```}
    sent: "2016-12-13T20:07:05.816Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5850467096a565f844053195"
    text: "ok, later"
    sent: "2016-12-13T19:05:20.000Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58504661f666c5a1380ad5ff"
    text: "Gtg now tho"
    sent: "2016-12-13T19:05:05.443Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58504641f666c5a1380ad565"
    text: "Altho, I did wonder how to traveerse objects once"
    sent: "2016-12-13T19:04:33.781Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5850462cb4ffd59e3824079a"
    text: {Not yet, I've yet to understand how it is different}
    sent: "2016-12-13T19:04:12.936Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5850461261e516c1578d669d"
    text: {see http://www.rebol.com/docs/core23/rebolcore-10.html and feel free to ask}
    sent: "2016-12-13T19:03:46.460Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585045e9db9cafe91838e4bb"
    text: "@geekyi any questions on object?"
    sent: "2016-12-13T19:03:05.531Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "585045b028d755bf14ff074e"
    text: "TODO: learn how an object works in rebol"
    sent: "2016-12-13T19:02:08.129Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5850455096a565f844053158"
    text: "It is the same."
    sent: "2016-12-13T19:00:32.202Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5850452cbe9d43bc63578804"
    text: {Is a `context` basically an `object!`? Or is the `context` word a completely separate concept to an execution/evaluation context? The reason I ask:^/```^/red>> :context = :object^/== true^/```}
    sent: "2016-12-13T18:59:56.149Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "58502c8b7a58ca605549c84f"
    text: {Going back to the discussion of evaluation and values, words are special in that they can *refer to* other values. We sometimes say the *hold* values or are *set to* values, but (someone please correct me if I'm wrong here) `context`s *hold* values and words are used to look up values in contexts. So, a word is, itself, a value, but contains a reference to a context. Given a word, Red looks in the context it is bound to when evaluating the word.}
    sent: "2016-12-13T17:14:51.068Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "585022597a58ca6055496fb3"
    text: "yep, me too )"
    sent: "2016-12-13T16:31:21.312Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58502222be9d43bc6356906c"
    text: {I think I first heard it in one of bret victor's talks. About being passionate on something}
    sent: "2016-12-13T16:30:26.411Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585021e8b4ffd59e38230e0e"
    text: {Modes are like context-switches.. too much is bad for your health :-p}
    sent: "2016-12-13T16:29:28.218Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5850212628d755bf14fe00be"
    text: "and people still use vi(m)"
    sent: "2016-12-13T16:26:14.674Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585021090da034021ba51218"
    text: "the guy invented modeless editing years ago"
    sent: "2016-12-13T16:25:45.265Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "585020e9bb7d528222f2ec07"
    text: {@maximvl Yes, I've heard of the "nomodes" thing}
    sent: "2016-12-13T16:25:13.009Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585020960da034021ba50ed7"
    text: {or, first paragraph here https://en.wikipedia.org/wiki/Larry_Tesler}
    sent: "2016-12-13T16:23:50.304Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58502051b4ffd59e3823035e"
    text: {@geekyi do you know about this guy? http://www.nomodes.com/Larry_Tesler_Consulting/CV.html}
    sent: "2016-12-13T16:22:41.062Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "58501f360da034021ba50330"
    text: {Going thru editors I found about Kakune, [discussion on reddit](https://www.reddit.com/r/vim/comments/5hzls3/why_kakoune_the_quest_for_a_better_code_editor/), a vim-like editor^/*tl;dr* tries to simplify and rethink the vim editing experience.^/[why kakoune](http://kakoune.org/why-kakoune/why-kakoune.html) has a detailed description of the rationale and philosophy^/>A design goal of Kakoune is to beat vim at its own game, while providing a cleaner editing model^/^/Lots of things I like about his design decisions. Not revolutionary, but tries to simplify a lot of workflows^/*Cons*: Unix only. Terminal only}
    sent: "2016-12-13T16:17:58.599Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5850148d7a58ca605548d91a"
    text: "@iArnold thanks"
    sent: "2016-12-13T15:32:29.826Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "585012bebb7d528222f267da"
    text: {<reminder> Dedicated LISP room https://gitter.im/red/red/lisp </reminder>}
    sent: "2016-12-13T15:24:46.722Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "584ffe5cbe9d43bc63557102"
    text: {ye, it's called "slime-helper", what's why you couldn't find it}
    sent: "2016-12-13T13:57:48.559Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ffe4cf666c5a13808e0d6"
    text: "that should be it"
    sent: "2016-12-13T13:57:32.071Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ffe42f666c5a13808e0b8"
    text: {>sbcl --load quicklisp.lisp^/>(quicklisp-quickstart:install)^/>(ql:add-to-init-file)^/>(ql:quickload "quicklisp-slime-helper")}
    sent: "2016-12-13T13:57:22.113Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ffdff0da034021ba4185f"
    text: "Quicklisp prompt"
    sent: "2016-12-13T13:56:15.181Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ffdedf666c5a13808df39"
    text: "what is this? what are you doing?"
    sent: "2016-12-13T13:55:57.703Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ffdc80da034021ba41731"
    text: {@maximvl ^/```^/* (ql:system-apropos "emacs")^/#<SYSTEM cl-emacs-if / cl-emacs-if-20120305-git / quicklisp 2016-12-08>^/```}
    sent: "2016-12-13T13:55:20.728Z"
    editedAt: "2016-12-13T13:55:31.124Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "584ffb23db9cafe91838d3be"
    text: {@geekyi True, such a doc would be useful. I would try to write something.}
    sent: "2016-12-13T13:44:03.061Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584ffa9228d755bf14fd0470"
    text: {@geekyi yep, that's right, quicklistp is package manager and it also has package to configure connection to Emacs easily}
    sent: "2016-12-13T13:41:38.712Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ff86bbb7d528222f1bceb"
    text: {`source` is such a useful feature, I miss that it doesn't work on some words}
    sent: "2016-12-13T13:32:27.557Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff8627a58ca6055480cab"
    text: {> ```^/red>> value? x^/*** Script Error: x has no value^/*** Where: value?^/```^/is this a bug?^/^/No, it is not, you should `quote` your word to get rid of evaluation:^/```^/value? quote x^/== false^/```}
    sent: "2016-12-13T13:32:18.969Z"
    editedAt: "2016-12-13T13:32:35.121Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "584ff84d7a58ca6055480b99"
    text: {@geekyi I use several disassemblers already for that (IDA Pro mostly).}
    sent: "2016-12-13T13:31:57.131Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584ff824be9d43bc63554f01"
    text: {@dockimbel not for end users, particularly, red/system developers / contributers. And not built in}
    sent: "2016-12-13T13:31:16.255Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff7dd7a58ca60554808fe"
    text: {@geekyi You can have the source code of a native, you just need to write a disassembler for that. ;-) But, what is the need for end-users to have such feature built-in? I would say, only the contributors who work on the compiler itself have a use for that.}
    sent: "2016-12-13T13:30:05.006Z"
    editedAt: "2016-12-13T13:30:16.868Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584ff7047a58ca605547ff8b"
    text: {Ok.. lets step back.. in which order should I do the steps? I have sbcl now. Then Emacs.. quicklisp?}
    sent: "2016-12-13T13:26:28.754Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff628aeb4900804826e75"
    text: "it should work too"
    sent: "2016-12-13T13:22:48.308Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ff61db4ffd59e3821db11"
    text: "To be more precise, I've played with spacemacs"
    sent: "2016-12-13T13:22:37.712Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff5febe9d43bc63553a71"
    text: {The biggest problem with Emacs is.. it's a huge and complex system.. steep learning curve}
    sent: "2016-12-13T13:22:06.735Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff5fbf666c5a13808b0b2"
    text: {@geekyi basically you go here and do what they tell you and you will get working environment right away: https://www.quicklisp.org/beta/}
    sent: "2016-12-13T13:22:03.353Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "584ff5c9bb7d528222f1aca6"
    text: {@maximvl I've used a bit yeah. But I changed my system. Should get started on it again}
    sent: "2016-12-13T13:21:13.975Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff5a8aeb4900804826bd0"
    text: "wait until you see what SLIME can do"
    sent: "2016-12-13T13:20:40.123Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ff586f666c5a13808adb2"
    text: "The disassembly is so cool! Even has comments"
    sent: "2016-12-13T13:20:06.847Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff57d7a58ca605547f810"
    text: "@geekyi do you know Emacs?"
    sent: "2016-12-13T13:19:57.105Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ff3bdaeb4900804825fd8"
    text: "I downloaded SBCL"
    sent: "2016-12-13T13:12:29.323Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff3acbb7d528222f1a2b3"
    text: {Funny how I have to think about size of binary and toolchain for almost everything other than red}
    sent: "2016-12-13T13:12:12.018Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff2c1bb7d528222f19ebb"
    text: ":-)"
    sent: "2016-12-13T13:08:17.836Z"
    editedAt: "2016-12-13T13:09:11.025Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "584ff1f4be9d43bc6355244d"
    text: {racket is nice, but SBCL is way more optimized and more flexible in terms what you can do with running system}
    sent: "2016-12-13T13:04:52.860Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ff1b628d755bf14fcc69e"
    text: "@geekyi http://docs.hylang.org"
    sent: "2016-12-13T13:03:50.701Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ff18228d755bf14fcc59e"
    text: {clojure is mostly s-expressions syntax for java, internals are pretty the same}
    sent: "2016-12-13T13:02:58.324Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ff0dd28d755bf14fcc23f"
    text: "What about racket and clojure?"
    sent: "2016-12-13T13:00:13.197Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584ff0b6b4ffd59e3821b917"
    text: "example above was from it"
    sent: "2016-12-13T12:59:34.073Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ff09d7a58ca605547d687"
    text: {@geekyi SBCL is most featureful and production-ready thing out there}
    sent: "2016-12-13T12:59:09.944Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fef9ab4ffd59e3821b3bd"
    text: {which is your go to lisp? I want to have a stab at some lisp}
    sent: "2016-12-13T12:54:50.631Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584feef9be9d43bc6355122a"
    text: {@geekyi Common Lisp standard function: http://www.lispworks.com/documentation/HyperSpec/Body/f_disass.htm}
    sent: "2016-12-13T12:52:09.633Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fee27f666c5a138088305"
    text: {:point_up: [December 13, 2016 12:40 PM](https://gitter.im/red/red/welcome?at=584fa6007e2af9d1229b6ade) @rebolek I think there should be a hello world doc for this. Would help newbies (myself included :p ) to get started with red/system. I might write this myself. But not sure how to get started}
    sent: "2016-12-13T12:48:39.180Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584fed21bb7d528222f182e9"
    text: {:point_up: [December 13, 2016 3:13 PM](https://gitter.im/red/red/welcome?at=584fc9aff666c5a13807cb27) @maximvl which is that? Julia has a similiar function. I really wish `source` worked on compiled code. I'd been wondering how to go about it, if you have the source of red. . i.e. meaning to write `source/native` for some time. Might be simpler than it looks I think}
    sent: "2016-12-13T12:44:17.465Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584fe3a2be9d43bc6354d3bf"
    text: {libred released :point_left: [December 13, 2016 4:49 PM](https://gitter.im/red/red?at=584fe02e28d755bf14fc64ac) @PavelVozenilek }
    sent: "2016-12-13T12:03:46.387Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584fcfe9b4ffd59e382107df"
    text: "yep, type system is kinda simple in this sense"
    sent: "2016-12-13T10:39:37.478Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fcfe103554185047b6c2e"
    text: "yes, even the types itself have their own type"
    sent: "2016-12-13T10:39:29.126Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcfad9ce5147013cd8a4a"
    text: ";)"
    sent: "2016-12-13T10:38:37.129Z"
    editedAt: "2016-12-13T10:38:42.401Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcf9e7a58ca605547134f"
    text: "and every type has a type of `datatype!` :O"
    sent: "2016-12-13T10:38:22.631Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fcf249ce5147013cd8a3f"
    text: {as you wrote, with the small correction, in Red, everything is a value and every value has a type}
    sent: "2016-12-13T10:36:20.567Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcf049ce5147013cd8a2e"
    text: {so anything that passes the rules for a Red datatype}
    sent: "2016-12-13T10:35:48.473Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fced39ce5147013cd8a28"
    text: "value is anything that can be loaded"
    sent: "2016-12-13T10:34:59.590Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcebd7e2af9d1229b704a"
    text: {or "to get" may be bit more correct.}
    sent: "2016-12-13T10:34:37.847Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fceb2bb7d528222f0d2e5"
    text: "and what's a value, generally speaking?"
    sent: "2016-12-13T10:34:26.993Z"
    editedAt: "2016-12-13T10:34:47.430Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fceab7e2af9d1229b7048"
    text: "Yep."
    sent: "2016-12-13T10:34:19.248Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcea2aeb49008048184c4"
    text: "to evaluate = to find a value"
    sent: "2016-12-13T10:34:10.530Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fce7003554185047b6c06"
    text: {Yes.The wording should be something like `x holds no value`}
    sent: "2016-12-13T10:33:20.145Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fce707a58ca60554709b8"
    text: "I would expect it to not do it, but okey"
    sent: "2016-12-13T10:33:20.141Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fce5abe9d43bc635462f9"
    text: "hm, `value?` does evaluate it's argument"
    sent: "2016-12-13T10:32:58.596Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fce589750c95b4f8acfb6"
    text: "No."
    sent: "2016-12-13T10:32:56.895Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fce2cb4ffd59e3820fd6a"
    text: {```^/red>> value? x^/*** Script Error: x has no value^/*** Where: value?^/```^/is this a bug?}
    sent: "2016-12-13T10:32:12.676Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fce299ce5147013cd8a0f"
    text: "`[x]` is `block!` with one value of type `word!`"
    sent: "2016-12-13T10:32:09.735Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fce0903554185047b6bf2"
    text: "@maximvl depends on context :)"
    sent: "2016-12-13T10:31:37.160Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcdf77a58ca605547075f"
    text: "*generic psyduck pic here*"
    sent: "2016-12-13T10:31:19.301Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fcddcf666c5a13807de98"
    text: "@rebolek `x` is not a value, `'x` is :)"
    sent: "2016-12-13T10:30:52.152Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fcddb9ce5147013cd8a03"
    text: {```^/red>> value? 'x^/== true^/```}
    sent: "2016-12-13T10:30:51.598Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcdc003554185047b6bec"
    text: {@maximvl exactly. `x` has no value, but *is* value.}
    sent: "2016-12-13T10:30:24.004Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcd8f03554185047b6bdb"
    text: {when evaluated it expects another value and sets word to it.}
    sent: "2016-12-13T10:29:35.057Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcd799ce5147013cd89fb"
    text: "`a:`"
    sent: "2016-12-13T10:29:13.703Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcd64be9d43bc63545ebc"
    text: "and `a:` has type `set-word!` and value of ... ?"
    sent: "2016-12-13T10:28:52.537Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fcd5503554185047b6bd9"
    text: {The `word!` in itself *is* a value, but *has not* value.}
    sent: "2016-12-13T10:28:37.563Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcd4bbe9d43bc63545e40"
    text: "everything except `x` )"
    sent: "2016-12-13T10:28:27.965Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fcd4bbb7d528222f0cb81"
    text: "hm, `1` has type `integer!` and value of `1`"
    sent: "2016-12-13T10:28:27.668Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fcd360da034021ba32474"
    text: ":D"
    sent: "2016-12-13T10:28:06.333Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fcd350da034021ba32471"
    text: {>everything has a value^/```^/red>> x^/*** Script Error: x has no value^/*** Where: catch^/```}
    sent: "2016-12-13T10:28:05.167Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fcd289750c95b4f8acfa2"
    text: {But you can have words that have no value: ^/```^/red>> value? first [i-have-no-value]^/== false^/```}
    sent: "2016-12-13T10:27:52.823Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fccef03554185047b6bc7"
    text: {Here, we have two values, `set-word!` and `integer!`. When evaluated, `word!` `a` has value `1`.}
    sent: "2016-12-13T10:26:55.077Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "584fcccd9750c95b4f8acf90"
    text: "```^/a: 1^/```"
    sent: "2016-12-13T10:26:21.460Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcca29750c95b4f8acf84"
    text: {Yes, the second part is right, *every value has a type*.}
    sent: "2016-12-13T10:25:38.257Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fcc68aeb490080481741b"
    text: {``` Red^/blk: [word 'word :word word: 1337]^/foreach i blk [print type? i]^/^/word^/lit-word^/get-word^/set-word^/integer^/```}
    sent: "2016-12-13T10:24:40.673Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fcb909ce5147013cd89b5"
    text: {@9214 you wrote^/> Everything has a value, and every value has a type^/^/I must correct you here, you are almost right, but not everything **has** a value, but everything **is** a value.}
    sent: "2016-12-13T10:21:04.118Z"
    editedAt: "2016-12-13T10:21:10.461Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fca007e2af9d1229b6fbf"
    text: "@maximvl :+1: "
    sent: "2016-12-13T10:14:24.963Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fc9cfbb7d528222f0b873"
    text: ":O"
    sent: "2016-12-13T10:13:35.502Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fc9aff666c5a13807cb27"
    text: {I see, hope we will see something like this in Red:^/```^/* (defun f (x y) (+ x y))^/^/F^/* (disassemble 'f)^/^/; disassembly for F^/; Size: 40 bytes. Origin: #x10058B0F13^/; 13:       498B4C2460       MOV RCX, [R12+96]                ; thread.binding-stack-pointer^/                                                              ; no-arg-parsing entry point^/; 18:       48894DF8         MOV [RBP-8], RCX^/; 1C:       488BD6           MOV RDX, RSI^/; 1F:       488BFB           MOV RDI, RBX^/; 22:       41BBC0010020     MOV R11D, 536871360              ; GENERIC-+^/; 28:       41FFD3           CALL R11^/; 2B:       488B5DE8         MOV RBX, [RBP-24]^/; 2F:       488B75F0         MOV RSI, [RBP-16]^/; 33:       488BE5           MOV RSP, RBP^/; 36:       F8               CLC^/; 37:       5D               POP RBP^/; 38:       C3               RET^/; 39:       CC10             BREAK 16                         ; Invalid argument count trap^/```}
    sent: "2016-12-13T10:13:03.695Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fc9630da034021ba31274"
    text: {@maximvl yeah, I know about body/spec, what I've wanted is to see `native!` value of evaluated `func`}
    sent: "2016-12-13T10:11:47.664Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fc95d9750c95b4f8aceec"
    text: {@maximvl I think that @9214 was more interested in how `func` turns two blocks into `function!` but `source`, `spec-of`, `body-of` are really useful functions, indeed.}
    sent: "2016-12-13T10:11:41.477Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fc91fbe9d43bc63544857"
    text: {@9214 ^/```^/red>> source source^/source: func [^/    "Print the source of a function" ^/    'func-name [any-word!] "The name of the function" ^/    /local type^/][^/    print either function? get/any func-name [[append mold func-name #":" mold get func-name]] [^/        type: mold type? get/any func-name ["Sorry," func-name "is" a-an type type "so no source is available"]^/    ]^/]^/```^/and so on, you can't introspect `native!` values for now, but I thing it will be possible in the future}
    sent: "2016-12-13T10:10:39.766Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fc8d30da034021ba30fe7"
    text: {@9214 ^/>how can I get this "magic" and examine it?^/```^/red>> f: func [x] [x + 1]^/== func [x][x + 1]^/red>> body-of :f^/== [x + 1]^/red>> spec-of :f^/== [x]^/red>> source f^/f: func [x][x + 1]^/```^/}
    sent: "2016-12-13T10:09:23.267Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584fb3fe03554185047b6723"
    text: {@9214 They are mostly the same. Red adds some new features.}
    sent: "2016-12-13T08:40:30.763Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fb3d728d755bf14fb6c75"
    text: "Red parse and Rebol parse are different, right?"
    sent: "2016-12-13T08:39:51.315Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584facac0da034021ba289fa"
    text: "yes, I think GUI is doable"
    sent: "2016-12-13T08:09:16.781Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584faca77e2af9d1229b6ba5"
    text: {That will be probably easier and faster to compile.}
    sent: "2016-12-13T08:09:11.236Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fac977e2af9d1229b6ba3"
    text: "Or maybe add some simple VID GUI?"
    sent: "2016-12-13T08:08:55.140Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fac807e2af9d1229b6ba0"
    text: {@9214 Hm, not sure, I think that the easiest way would be to include you program to console and recompile console?}
    sent: "2016-12-13T08:08:32.297Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584faa89aeb490080480a8a8"
    text: {what should I use for interaction with user in compiled console application then?}
    sent: "2016-12-13T08:00:09.798Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584faa4003554185047b6633"
    text: {Yes, because `ask` is not part of runtime, but defined in the `%console.r` (I think) as part of REPL only.}
    sent: "2016-12-13T07:58:56.924Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa96b28d755bf14fb3907"
    text: {hm, I've got compilation error because of undefined word `ask`, but inside REPL `ask` works perfectly fine}
    sent: "2016-12-13T07:55:23.579Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa8769ce5147013cd84b0"
    text: "Yes, exactly."
    sent: "2016-12-13T07:51:18.901Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa820be9d43bc63539659"
    text: "`Red` -> `Red/System` -> `machine code` ?"
    sent: "2016-12-13T07:49:52.479Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa7fe9750c95b4f8ac9b2"
    text: {You can of course put much complicated R/S code inside routine, not just a + b :)}
    sent: "2016-12-13T07:49:18.094Z"
    editedAt: "2016-12-13T07:49:29.666Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa7e79750c95b4f8ac9b0"
    text: {The code here looks the same, but it is Red/System code.}
    sent: "2016-12-13T07:48:55.612Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa7d59750c95b4f8ac9ae"
    text: {But the point is that printing goes on Red level, while the addition goes on Red/System level.}
    sent: "2016-12-13T07:48:37.611Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa7c103554185047b6606"
    text: "Run this exe and it will print 1337."
    sent: "2016-12-13T07:48:17.968Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa7a9aeb4900804809b7d"
    text: "okay, now I have an exe"
    sent: "2016-12-13T07:47:53.234Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa70b9ce5147013cd849b"
    text: "So compile this like normal Red program."
    sent: "2016-12-13T07:45:15.736Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa6fd9750c95b4f8ac99d"
    text: {This is Red source, but what is inside of `routine` is Red/System code.}
    sent: "2016-12-13T07:45:01.639Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa6e79750c95b4f8ac997"
    text: {```^/Red [^/^-Title: "My first routine"^/]^/^/my-routine: routine [^/^-x [integer!]^-^-^/^-return: [integer!]^-; you have to define return type in Red/System^/] [^/^-x + 1^/]^/^/print my-routine 1336^/```}
    sent: "2016-12-13T07:44:39.129Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa6007e2af9d1229b6ade"
    text: "@9214 wait a bit, I show you a simple example."
    sent: "2016-12-13T07:40:48.233Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa5ee0da034021ba2656d"
    text: {@rebolek then I don't get how to get `.reds` file from `.red` compilation :(}
    sent: "2016-12-13T07:40:30.194Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa5b103554185047b65ef"
    text: "No"
    sent: "2016-12-13T07:39:29.137Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa579c29531ac5d584eb3"
    text: "@rebolek should I use `--red-only` option?"
    sent: "2016-12-13T07:38:33.430Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa3e49750c95b4f8ac95c"
    text: {If you are interested in Red/System, write a simple routine and compile it. It’s really easy.}
    sent: "2016-12-13T07:31:48.168Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa3b20da034021ba25d3d"
    text: "yup, I see that :joy: "
    sent: "2016-12-13T07:30:58.655Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa3837e2af9d1229b6a82"
    text: {But starting with Red/System by looking at the source of `func` may not be the best idea ;)}
    sent: "2016-12-13T07:30:11.134Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa3229750c95b4f8ac948"
    text: {By looking at the source, of course: https://github.com/red/red/blob/master/runtime/natives.reds#L388}
    sent: "2016-12-13T07:28:34.478Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa2ecb4ffd59e38201bc7"
    text: {how can I get this "magic" and examine it?}
    sent: "2016-12-13T07:27:40.849Z"
    editedAt: "2016-12-13T07:27:48.837Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa2cd9750c95b4f8ac938"
    text: "something like `make function! ...`"
    sent: "2016-12-13T07:27:09.298Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa2b8c29531ac5d584166"
    text: "Red/System magic with type `native!`, gee"
    sent: "2016-12-13T07:26:48.074Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa29f7e2af9d1229b6a65"
    text: "Yes, Red/System magic :)"
    sent: "2016-12-13T07:26:23.111Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa29603554185047b65b7"
    text: "`native!`"
    sent: "2016-12-13T07:26:14.823Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa290aeb490080480833b"
    text: "Red/System magic?"
    sent: "2016-12-13T07:26:08.049Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa2870da034021ba257af"
    text: "and what's the value of evaluated `func` then? "
    sent: "2016-12-13T07:25:59.301Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa26403554185047b65b2"
    text: "Exactly!"
    sent: "2016-12-13T07:25:24.490Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa25af666c5a13807077b"
    text: {everything has a value, and every value has a type, am I correct?}
    sent: "2016-12-13T07:25:14.358Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa2087e2af9d1229b6a57"
    text: {See this example:^/```^/red>> block: [x: 1 y: x + 2 y * 3]^/== [x: 1 y: x + 2 y * 3]^/red>> do block^/== 9^/red>> reduce block^/== [1 3 9]^/```}
    sent: "2016-12-13T07:23:52.297Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa1e49750c95b4f8ac912"
    text: {`do` does the same, the only difference is that `do` returns just last value in the block.}
    sent: "2016-12-13T07:23:16.765Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa1c09ce5147013cd83f2"
    text: "@9214 Exactly."
    sent: "2016-12-13T07:22:40.411Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "584fa19cc29531ac5d583c41"
    text: {so, `reduce` sees `func`, evaluates it, gets `native!` that should evalute next two `block!`s and produce a `function!`?}
    sent: "2016-12-13T07:22:04.235Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa18b7e2af9d1229b6a4f"
    text: "@9214 you’re welcome, hope it helps!"
    sent: "2016-12-13T07:21:47.871Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa14d9750c95b4f8ac8fb"
    text: {We are used to say that `func` creates `function!`, but that’s just illusion, all functions are anonymous, it’s just that word `func` usually holds that value.}
    sent: "2016-12-13T07:20:45.992Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa14af666c5a1380703cd"
    text: "@rebolek very interesting, thank you!"
    sent: "2016-12-13T07:20:42.852Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584fa0ef7e2af9d1229b6a3c"
    text: {```^/red>> type? first block^/== word!^/red>> type? get first block^/== native!^/```}
    sent: "2016-12-13T07:19:11.035Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa0de03554185047b6589"
    text: {@9214 But only because first `word!`'s value is `func`. And when you evaluate `func` you get `native!` that turns two `block!`s into `function!`.}
    sent: "2016-12-13T07:18:54.924Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa0940da034021ba24e8c"
    text: {@PavelVozenilek  and other noobs like myself. just found a good, free book: http://www.lulu.com/shop/olivier-auverlot-and-peter-william-alfred-wood/rebol-a-programmers-guide/ebook/product-17515075.html  . Red is a little diff'rent, but this'll help...}
    sent: "2016-12-13T07:17:40.670Z"
    v: 1
    author: "55f4fe460fc9f982beb085d8"
) #(
    id: "584fa0789ce5147013cd83e0"
    text: "Yes."
    sent: "2016-12-13T07:17:12.248Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584fa05b28d755bf14fb0e7d"
    text: {@rebolek and `[word! block! block!]` become a `[function!]` because of `reduce`?}
    sent: "2016-12-13T07:16:43.463Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f9ff903554185047b657d"
    text: {@9214 not a pile of words, but `[word! block! block!]`. Every value in Red has its datatype.}
    sent: "2016-12-13T07:15:05.732Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584f9eaeb4ffd59e382008c0"
    text: {@rebolek before `reduce` `func [n] [n + 1336]` is just a pile of words, but after evaluation with `reduce` it will be a `function!` object?}
    sent: "2016-12-13T07:09:34.594Z"
    editedAt: "2016-12-13T07:10:38.944Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f9ddd9750c95b4f8ac8be"
    text: {Then you just `do` that block, to evaluate it again. Or you can `reduce` it again, if you want (but the output will be bit different):^/```^/red>> reduce reduce [func [n][n + 1336] 1]^/== [1337]^/```}
    sent: "2016-12-13T07:06:05.054Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584f9d797e2af9d1229b69de"
    text: {`reduce` will evaluate each value, so in this case it will turn source of function to `function!`:^/```^/red>> block: [func [n][n + 1336] 1]^/== [func [n] [n + 1336] 1]^/red>> length? block^/== 4^/red>> reduced: reduce block^/== [func [n][n + 1336] 1]^/red>> length? reduced^/== 2^/red>> type? first reduced^/== function!^/```}
    sent: "2016-12-13T07:04:25.338Z"
    editedAt: "2016-12-13T07:04:41.270Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584f9d0c28d755bf14fafef6"
    text: {@rebolek interesting, I should meditate more on `reduce` then}
    sent: "2016-12-13T07:02:36.076Z"
    editedAt: "2016-12-13T07:02:43.593Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f9c7d7e2af9d1229b69be"
    text: {@9214 It’s not something I would use, but here you go:^/```^/red>> do reduce [func [n][n + 1336] 1]^/== 1337^/```}
    sent: "2016-12-13T07:00:13.300Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584f9c0128d755bf14faf9b2"
    text: {How could one use `func` as lambda  in Red? Something like that:^/``` Scheme^/((lambda (n) (+ n 1336) 1)^/^/; => 1337^/```}
    sent: "2016-12-13T06:58:09.485Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f68d00da034021ba15e1d"
    text: {@PeterWAWood  perhaps there should be a refinement, `/count` or something}
    sent: "2016-12-13T03:19:44.782Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f687528d755bf14fa2d15"
    text: {It seems that you are not alone in favouring the Rebol2 approach - [Rebol3 bug report](http://curecode.org/rebol3/ticket.rsp?id=931&cursor=6)}
    sent: "2016-12-13T03:18:13.128Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "584f67b2f666c5a1380611d0"
    text: {@9214 Correct. I'm sure that there is a good reason for the change to returning the count.}
    sent: "2016-12-13T03:14:58.122Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "584f67310da034021ba152af"
    text: {@PeterWAWood so, in Rebol2 it returns series, and in Rebol3 it returns a count, right? In any case it should return something (IMO Rebol2 approach is more suitable)}
    sent: "2016-12-13T03:12:49.696Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f66dbbe9d43bc63527085"
    text: {@9214 No, it returns a count of the number of elements removed. Here is a better example:^/```^/>> remove-each i [1 2 3 4] [even? i]^/== 2^/```}
    sent: "2016-12-13T03:11:23.898Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "584f6699c29531ac5d572244"
    text: {@PavelVozenilek One big difference between languages like C and Red-like languages is typing. Data in C is untyped; variables are typed. Data in Red is strongly typed; words are "untyped"  references to data values.^/}
    sent: "2016-12-13T03:10:17.926Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "584f65f5bb7d528222eee72c"
    text: {@PeterWAWood in your example `remove-each` returns the only element left in a series?}
    sent: "2016-12-13T03:07:33.687Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f65b3aeb49008047f52ce"
    text: "alrighty then"
    sent: "2016-12-13T03:06:27.820Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f659faeb49008047f5231"
    text: {@9214 Yes, It would probably be best to open a ticket.}
    sent: "2016-12-13T03:06:07.169Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "584f658bf666c5a138060017"
    text: {The behaviour of ```remove-each``` is consistent with Rebol3:^/```text^/>> remove-each i [1 2] [even? i]^/== 1^/```^/^/@dockimbel Clearly chose to follow the R3 approach. The rationale of this behaviour is probably documented somewhere in the R3 bug tracker.}
    sent: "2016-12-13T03:05:47.173Z"
    editedAt: "2016-12-13T03:06:28.571Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "584f64e6aeb49008047f509a"
    text: "@PeterWAWood hm, should I fill the ticket?"
    sent: "2016-12-13T03:03:02.635Z"
    editedAt: "2016-12-13T03:03:11.690Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f64abaeb49008047f4fd9"
    text: {@9214 It is a bug. Help states that ```remove-each``` returns the "removal count" but it  doesn't return a value:^/```text^/red>> type? remove-each i [1 2] [even? i]^/== unset!^/```}
    sent: "2016-12-13T03:02:03.198Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "584f5660c29531ac5d56d9e1"
    text: {in `Rebol`^/```^/>> remove-each i [1 2] [even? i]^/== [1]^/```^/in `Red`^/```^/red>> remove-each i [1 2] [even? i]^/red>>^/```^/Is this intended? I think remove-each should return changed series.}
    sent: "2016-12-13T02:01:04.264Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f50da0da034021ba0eee3"
    text: {@PavelVozenilek regarding embedding, that's one of the goals of the recently introduced libred. I remember doc showing some code related to that}
    sent: "2016-12-13T01:37:30.290Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584f429cf666c5a1380566b8"
    text: {When I am here, one more question. Can Red engine be embedded? Naturally any code could be embedded with proper effort, so which description fits more the reality/near plans? (1) "Yes, it can be embedded. There's one big amalgamated C file plus one header, add them anywhere into the project and you are done. Many people did it w/o troubles. " (the SQLite way), or (2) "Yes, it can embedded. You just need to build static library from dozens of source files with a make tool which requires Python 2.6, copy handful of DLLs into system directory, populate several registries, create hidden configuration file in your $HOME, carefully modify localisation files in their proper place and it is ready. Please report the result, nobody had tried yet."}
    sent: "2016-12-13T00:36:44.972Z"
    v: 1
    author: "5658827416b6c7089cbc6ba3"
) #(
    id: "584f3e96aeb49008047e9753"
    text: {@maximvl  Thanks, text like this (  http://static.red-lang.org/red-system-specs-light.html#section-4 ) is what I had in my mind. }
    sent: "2016-12-13T00:19:34.602Z"
    v: 1
    author: "5658827416b6c7089cbc6ba3"
) #(
    id: "584f27b1b4ffd59e381dd78b"
    text: {speaking of data representation, I recently discovered that pair! type doesn't seem to work with float!s. I got the general impression from github issues that it should be supported eventually, but it wasn't clear to me on there.^/If that is not expected to be supported, is there another obvious way of doing it besides using a block or object?}
    sent: "2016-12-12T22:41:53.686Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "584f26e828d755bf14f8f0e8"
    text: "Thanks for all the links!"
    sent: "2016-12-12T22:38:32.932Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "584f1d45c29531ac5d55a330"
    text: {I've had a few big *clicks* in my head through the years, as I understood Red/Rebol in a new way. But I still get little clicks all the time. Seeing Nenad's macro version of a `loop` dialect was one recent example. }
    sent: "2016-12-12T21:57:25.340Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "584f1cc8bb7d528222ed759e"
    text: {And because Red *is* different, some things may not be obvious. Until you see a guru's answer. :^^) }
    sent: "2016-12-12T21:55:20.106Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "584f1c1cf666c5a138049333"
    text: "thanks guys, I appreciate that :)"
    sent: "2016-12-12T21:52:28.940Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f1be5aeb49008047dca3d"
    text: {There are a lot of ways to think in Red. Learning low level guru tricks, details of binding, etc. are *very* important for some people. Others can use Red effectively without knowing deep internals.^/^/All Red users, IMO, need to understand the basics of how series work, how to manipulate them, and when/how/where values are evaluated.^/^/As Bolek said, play and don't be afraid. Don't forget that Red is data and use those datatypes. Learn how to express your data with the most appropriate types.^/^/And don't be afraid to ask questions here. The community is the "Great Redbol Optimizer" and it's really fun to see how different people solve problems or express solutions.}
    sent: "2016-12-12T21:51:33.238Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "584f1b4ef666c5a138048bab"
    text: {These two are also very good:^/http://www.codeconscious.com/rebol/^/http://blog.revolucent.net/}
    sent: "2016-12-12T21:49:02.238Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "584f1ab3bb7d528222ed6698"
    text: {Ah yes, and of course these old but still useful Rebol docs:^/http://www.rebol.net/cookbook/^/http://www.rebol.com/oneliners.html}
    sent: "2016-12-12T21:46:27.463Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "584f1a3b9ce5147013cd7807"
    text: {also, this is great resource with examples and similar functions http://www.rebol.com/docs/dictionary.html}
    sent: "2016-12-12T21:44:27.608Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584f19e0f666c5a138047e2f"
    text: {Most easiest way: open Rebol or Red console type `? function!` pick an interesting function (let's say `last`) then type `?? last` and see the source code:^/```^/last: func ["Returns the last value in a series" s [series!]][pick back tail s 1]^/```}
    sent: "2016-12-12T21:42:56.512Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "584f192db4ffd59e381d7a58"
    text: {Some more `bindology` documents:^/http://blog.revolucent.net/2009/07/deep-rebol-bindology.html^/http://www.pat665.free.fr/doc/bind.html^/^/And see BrianH's answers on SO:^/http://stackoverflow.com/users/2016426/brianh}
    sent: "2016-12-12T21:39:57.505Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "584f158c9ce5147013cd7703"
    text: {This is gives you nice overview http://www.rebol.com/docs/core23/rebolcore.html}
    sent: "2016-12-12T21:24:28.969Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584f15659ce5147013cd76ff"
    text: {https://sourceforge.net/projects/rebol-power-mez/^/https://en.wikibooks.org/wiki/Rebol_programming/Advanced/Bindology^/}
    sent: "2016-12-12T21:23:49.283Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584f145df666c5a138045d86"
    text: {@endo64 it would be great to see links to any of those if you have them}
    sent: "2016-12-12T21:19:25.041Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "584f1339aeb49008047d9038"
    text: {@9214 I think the best way is examining the scripts/functions written by gurus. I learnt a lot from mezz.s in Rebol mostly written by Carl S., Brain H., Ladislav, Gabriele's power-mezz, Henrik's VID Ext., DocKimble's Cheyyene/Uniserve etc.}
    sent: "2016-12-12T21:14:33.079Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "584f09d07e2af9d1229b5b97"
    text: "@9214 Have fun and don’t be afraid =D"
    sent: "2016-12-12T20:34:24.261Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584f08f9f666c5a1380411a7"
    text: "@rebolek any line of wisdom then? :)"
    sent: "2016-12-12T20:30:49.584Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f07c09750c95b4f8aba19"
    text: {That’s hard to tell when most of the code I write is in Red ;)}
    sent: "2016-12-12T20:25:36.691Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "584f0684aeb49008047d3588"
    text: {Can someone experienced share his mindset regarding of writing Rebol/Red code? Since these languages are quite different, I wonder how seasoned Reducers solve problems and think in terms of language semantics.}
    sent: "2016-12-12T20:20:20.282Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584f029c0da034021b9f5187"
    text: {it would be also nice to have other things you are asking, of course ;)}
    sent: "2016-12-12T20:03:40.229Z"
    editedAt: "2016-12-12T20:04:11.246Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584f0229be9d43bc63504489"
    text: {@PavelVozenilek this is the closest thing to what you are asking: http://static.red-lang.org/red-system-specs-light.html#section-4}
    sent: "2016-12-12T20:01:45.783Z"
    editedAt: "2016-12-12T20:01:52.050Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584efca1be9d43bc63501c4f"
    text: "Rustonomicon vs. The Horror at Red Hook :D"
    sent: "2016-12-12T19:38:09.969Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584efc14f666c5a13803b591"
    text: {I also want to see something in the vein of rust-lang docs}
    sent: "2016-12-12T19:35:48.239Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584eded8b4ffd59e381be80c"
    text: {I have question about documentation: is there plan to write down something for the beginners?  Not beginners in programming (I used C family language for 20 years) but for people who never ever heard about Rebol and would like to evaluate the language seriously. I imagine something like: integer is 32 bits/64 bits/unlimited, in memory it is stored natively/boxed/as an object.  Here's compilable example with integers, it should do this and that. And so on and on. Currently I can see either texts filled with jargon for the already initiated or shortest-program-ever tricks which are mystery for me. If the answer is "yes": is it in reality "it would be nice to have someday" or is there real intent and plan to create such documentation?}
    sent: "2016-12-12T17:31:04.919Z"
    v: 1
    author: "5658827416b6c7089cbc6ba3"
) #(
    id: "584e86c19ce5147013cd5979"
    text: ":)"
    sent: "2016-12-12T11:15:13.047Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584e86b5f666c5a13800d01d"
    text: "ah, it's not boolean `or`, no worries"
    sent: "2016-12-12T11:15:01.466Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584e869db4ffd59e3819c150"
    text: {```^/red>> 5 or 6^/== 7^/```}
    sent: "2016-12-12T11:14:37.192Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584e867a0da034021b9c77d4"
    text: "wat?)"
    sent: "2016-12-12T11:14:02.258Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584e8677c29531ac5d51bf69"
    text: {```^/red>> 1 or 2^/== 3^/```}
    sent: "2016-12-12T11:13:59.921Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584d9af028d755bf14f1138c"
    text: "Indeed. Red is really fun to play with. "
    sent: "2016-12-11T18:29:04.804Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "584ceba2aeb49008047252c1"
    text: "@9214  those are both really cool!"
    sent: "2016-12-11T06:01:06.068Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "584cb8f3bb7d528222e20c6d"
    text: {Ha, looks like I've found clever way to `fold` series!^/```^/; first PE problem:^/do collect/into [repeat i 999 [if any [i // 3 = 0 i // 5 = 0] [keep '+ keep i]]] [0]^/```}
    sent: "2016-12-11T02:24:51.503Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584cac560da034021b94b7d1"
    text: "well, if you can call it that :D"
    sent: "2016-12-11T01:31:02.239Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ca5aec29531ac5d49523c"
    text: {Turns out it's really simple to create lazy sequences in Red:^/```^/Red []^/^/fib: [0.0 1.0 [append fib fib/1 + fib/2 fib: next fib]]^/^/force: function [seq] [^/^-promise: last seq^/^-remove back tail seq^/^-do promise^/^-append seq reduce [promise]^/]^/^/loop 10 [force fib] fib: head fib^/; == [0 1 1 2 3 5 8 13 21 34 55 89 promise]^/```}
    sent: "2016-12-11T01:02:38.710Z"
    editedAt: "2016-12-11T01:04:23.663Z"
    v: 3
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584c4bb6b4ffd59e380ffcc6"
    text: "thanks @dockimbel ,  this is cool  :smile: "
    sent: "2016-12-10T18:38:46.513Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "584c28e90da034021b9278db"
    text: {@redredwine You need to move the series offset to the right position first:^/```lisp^/red>> c: "abcdef"^/== "abcdef"^/red>> change at c 2 "ZX"^/== "def"^/red>> c^/== "aZXdef"^/```}
    sent: "2016-12-10T16:10:17.571Z"
    editedAt: "2016-12-10T16:10:47.135Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584c120428d755bf14ea985f"
    text: {sorry I mean how to change "abcdef"  to "aZXdef"  ?}
    sent: "2016-12-10T14:32:36.205Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "584c1190f666c5a138f61f84"
    text: {thanks @DideC .   how would you do change  "abcdef"  to  "abZXef"  with change/part ?^/I tried the following ^/red>> c: "abcdef"^/== "abcdef"^/red>> change/part  c  "ZX" 3^/== "def"^/red>> c^/== "ZXdef"^/^/I lose the "a" in the original "abcdef"^/}
    sent: "2016-12-10T14:30:40.790Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "584c0bc4be9d43bc6342458d"
    text: {If you want to change more than one value, use `change/part`.}
    sent: "2016-12-10T14:05:56.200Z"
    editedAt: "2016-12-10T14:06:14.749Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "584c0b7628d755bf14ea7d11"
    text: {With `poke` you change a value in a serie! so you have to use a value compatible with the serie type. If serie is any-string! you must use char! value (ence the #). For block! you can use any type AFAIK.}
    sent: "2016-12-10T14:04:38.682Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "584c0acac29531ac5d4642e0"
    text: {Good to know: #"C" is a character value. "C" is a string of one character.}
    sent: "2016-12-10T14:01:46.768Z"
    editedAt: "2016-12-10T14:02:05.804Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "584c09caf666c5a138f5fbc1"
    text: {USAGE:^/    poke series index value^/^/DESCRIPTION:^/     Replaces the series value at a given index, and returns the new value.^/     poke is of type: action!^/^/ARGUMENTS:^/     series  [series! bitset! tuple!]^/     index  [scalar! any-string! any-word! block! logic!]^/     value  [any-type!]        <------  this **any-type**  is a bit confusing, if  poke  cannot take a character value as is and need some special  "# "  in front of the character value.}
    sent: "2016-12-10T13:57:30.262Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "584c0788b4ffd59e380eb0a6"
    text: {Question about poke function^/^/red>> s: "abcdefghijklmnop"^/== "abcdefghijklmnop"^/^/red>> poke s 3 #"C"^/== #"C"^/^/why do we need a "#"  in there?   why can we not use  poke 3 "C" ?^/^/}
    sent: "2016-12-10T13:47:52.828Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "584af69e0da034021b8d6515"
    text: "@greggirwin thanks Gregg, I'll take a look at it"
    sent: "2016-12-09T18:23:26.511Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584af651b4ffd59e380a2b37"
    text: "Welcome to Red!"
    sent: "2016-12-09T18:22:09.058Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "584af63228d755bf14e60bc4"
    text: {@9214, there might be an HOF or two in https://gist.github.com/greggirwin/d0412f0c3d8e1ce4dfe26afc643742f1, a fun experiment in https://gist.github.com/greggirwin/9fc085a8b6b2ca38f756e9285c389674, and I have a number of things like `foldr/accumulate` and `filter`. You'll find that Red allows you to think in different ways, and there is a lot of discussion about the design of even simple funcs. Ask away and you'll probably start good discussions.}
    sent: "2016-12-09T18:21:38.337Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "584af30c28d755bf14e5fc1a"
    text: {Great chat. Cool macro @9214. I'm going to keep that one for future reference. And really nice mentoring @maximvl. }
    sent: "2016-12-09T18:08:12.361Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "584af2c5b4ffd59e380a14fc"
    text: {@9214  @maximvl  It would be good to post your explorations as a blog series}
    sent: "2016-12-09T18:07:01.019Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584acd5fb4ffd59e38091424"
    text: {@maximvl Thanks for helping a newcomer find his way through Red, that was an enjoyable reading. :+1: }
    sent: "2016-12-09T15:27:27.656Z"
    editedAt: "2016-12-09T15:27:52.771Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584ac0eab4ffd59e3808c2ac"
    text: "have fun :)"
    sent: "2016-12-09T14:34:18.240Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ac0e0be9d43bc633c3487"
    text: "gotta go, c ya!"
    sent: "2016-12-09T14:34:08.626Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ac0cc28d755bf14e4bffe"
    text: "first day in this chat and tons of joy"
    sent: "2016-12-09T14:33:48.866Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ac0bac29531ac5d401e03"
    text: "so far Redbol community is very nice"
    sent: "2016-12-09T14:33:30.570Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ac0940da034021b8c18e7"
    text: {what's why I'm trying to show how easy and useful it can be}
    sent: "2016-12-09T14:32:52.794Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ac07dbb7d528222d8d9c6"
    text: {you welcome, when I was exploring these fields, I faced a lot of push backs and hatred from people}
    sent: "2016-12-09T14:32:29.957Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abfb1c29531ac5d40169c"
    text: "Sure! Thanks Max, I appreciate your mentoring."
    sent: "2016-12-09T14:29:05.899Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abf5dc29531ac5d4014a0"
    text: {@9214 if you find any complex/interesting macros in LOL feel free to post and discuss them here, it would be rather interesting to see how good the Red macro system is ;)}
    sent: "2016-12-09T14:27:41.839Z"
    editedAt: "2016-12-09T14:28:10.771Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abeb8bb7d528222d8cfad"
    text: "I will"
    sent: "2016-12-09T14:24:56.367Z"
    editedAt: "2016-12-09T14:25:01.997Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abeac0da034021b8c0be9"
    text: {@9214 check the latest post on Red's blog, it explains macros very good with examples etc: http://www.red-lang.org/2016/12/entering-world-of-macros.html}
    sent: "2016-12-09T14:24:44.275Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abe791eb3d6486979f798"
    text: "`add 1 2` => `1 + 2`?"
    sent: "2016-12-09T14:23:53.872Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abe0dbe9d43bc633c242c"
    text: {nope, you've coded a named one, pattern-matching don't have names, they are invoked by the reader when it reads something macros is set to replace =)}
    sent: "2016-12-09T14:22:05.316Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abddaf666c5a138efd1bd"
    text: "this one which I just coded?"
    sent: "2016-12-09T14:21:14.067Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abdae0da034021b8c069a"
    text: {there are so called reader-macros in CL, but Red has equally powerful pattern-matching ones}
    sent: "2016-12-09T14:20:30.956Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abd61c29531ac5d400703"
    text: {hm, I don't know all things they are doing in LOL, but I would say it is possible, and much more important - it must be very exciting!}
    sent: "2016-12-09T14:19:13.800Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abd1abe9d43bc633c1f22"
    text: {is it possible to get through LOL with Red macros?}
    sent: "2016-12-09T14:18:02.356Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abcd028d755bf14e4a948"
    text: "indeed"
    sent: "2016-12-09T14:16:48.149Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abcc90da034021b8c0208"
    text: "I hope everything makes sense now =)"
    sent: "2016-12-09T14:16:41.444Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abc97be9d43bc633c1bc6"
    text: "how could I miss that"
    sent: "2016-12-09T14:15:51.215Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "584abc8fc29531ac5d4000fa"
    text: "jeez!"
    sent: "2016-12-09T14:15:42.981Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abc751eb3d6486979ebb4"
    text: {because block are not evaluated by default, so you can't return `[head spec]`}
    sent: "2016-12-09T14:15:17.075Z"
    editedAt: "2016-12-09T14:15:25.368Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abc5428d755bf14e4a64d"
    text: {evaluates all expressions in a block and return that block}
    sent: "2016-12-09T14:14:44.367Z"
    editedAt: "2016-12-09T14:15:03.454Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abc430da034021b8bff2b"
    text: "@9214 do you know what `reduce` does?"
    sent: "2016-12-09T14:14:27.832Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abc27b4ffd59e3808a2ad"
    text: {which is where you will get an error at some point}
    sent: "2016-12-09T14:13:59.909Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abc14be9d43bc633c18b3"
    text: {yep, it will insert them into top-level block, resulting in something like^/`f: func a [integer!] b [string!] c [integer!] d [string!] e [integer!] []`}
    sent: "2016-12-09T14:13:40.039Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abc01be9d43bc633c1849"
    text: {I get why we need `[head spec]`, I don't get `reduce` purpose. What should be reduced?}
    sent: "2016-12-09T14:13:21.009Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abbcf1eb3d6486979e7bd"
    text: {it will return all arguments and types as-is, not enclosed in block?}
    sent: "2016-12-09T14:12:31.737Z"
    editedAt: "2016-12-09T14:12:42.664Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abba028d755bf14e4a2e9"
    text: "exactly"
    sent: "2016-12-09T14:11:44.863Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abb96b4ffd59e38089f0d"
    text: {and if I want to insert `[1 2 3]` i need to re-define macro with `[[1 2 3]]` ?}
    sent: "2016-12-09T14:11:34.174Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abb8df666c5a138efc3e0"
    text: {and, what will happen if you just return `head spec` in your macro?}
    sent: "2016-12-09T14:11:25.943Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abb74bb7d528222d8bb49"
    text: {it make sence, since whole Red script is just a block}
    sent: "2016-12-09T14:11:00.236Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abb710da034021b8bfaeb"
    text: "@9214 this is just decision made by Red authors"
    sent: "2016-12-09T14:10:57.303Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abb52bb7d528222d8baa9"
    text: {this is why I did mistake in my first try - because in Common Lisp macro would insert whole thing, and you need to tell it specifically to insert inside}
    sent: "2016-12-09T14:10:26.907Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abb4fbe9d43bc633c13fb"
    text: {since code = data, it's just a matter of perspective?}
    sent: "2016-12-09T14:10:23.399Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abb1a28d755bf14e49f8b"
    text: {exactly, this is how it is done in Red - it requires macro function to return a `block!` and then inserts it into parent block}
    sent: "2016-12-09T14:09:30.535Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abae1bb7d528222d8b38c"
    text: "hm, why not `[a b [1 2 3] c]`?"
    sent: "2016-12-09T14:08:33.342Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abacec29531ac5d3ff74f"
    text: "`[a b 1 2 3 c]`"
    sent: "2016-12-09T14:08:14.174Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584abac00da034021b8bf127"
    text: "so, what will be the output?"
    sent: "2016-12-09T14:08:00.857Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584abab40da034021b8bf0f2"
    text: {compiler substitute any occurence of `expand-me` with `[1 2 3]` series at compile-time?}
    sent: "2016-12-09T14:07:48.489Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aba3c0da034021b8bee17"
    text: {@9214 try this code:^/```^/Red []^/^/#macro expand-me: func [] [^/   [1 2 3]^/]^/^/probe [a b expand-me c]^/```}
    sent: "2016-12-09T14:05:48.317Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab9fb28d755bf14e495e5"
    text: "good question, let me show"
    sent: "2016-12-09T14:04:43.650Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab9e8c29531ac5d3febc1"
    text: {Can't get why we need `reduce [head spec]` at the end}
    sent: "2016-12-09T14:04:24.090Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab9c70da034021b8bebc1"
    text: {>but it's quite hard to debug a macro^/^/write few and let things settle in your head, it will be a no-brainer soon}
    sent: "2016-12-09T14:03:51.296Z"
    editedAt: "2016-12-09T14:03:54.651Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab9a6bb7d528222d8ad29"
    text: {and this is something that differs Redbol from many other languages}
    sent: "2016-12-09T14:03:18.493Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab99bbb7d528222d8ad0e"
    text: "indeed, but it's quite hard to debug a macro"
    sent: "2016-12-09T14:03:07.170Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab985be9d43bc633c0846"
    text: {thank you for your mentoring^/now, where's my wizard hat... :tada:}
    sent: "2016-12-09T14:02:45.537Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab967be9d43bc633c07d8"
    text: {be sure to notice what you did - you added completely new feature to the language}
    sent: "2016-12-09T14:02:15.689Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab931f666c5a138efb667"
    text: "now you can return to your loop"
    sent: "2016-12-09T14:01:21.312Z"
    editedAt: "2016-12-09T14:01:29.761Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab90428d755bf14e48f7b"
    text: "very short and nice, congratz :clap: "
    sent: "2016-12-09T14:00:36.369Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab8c7b4ffd59e3808891b"
    text: {```^/Red []^/^/#macro same-type-as: function [spec] [^/^-forall spec [^/^-^-if all [block? spec/1 spec/1/1 = 'same-as!] [^/^-^-^-^-poke spec 1 select head spec spec/1/2^/^-^-]^/^-]^/^-^/^-reduce [head spec]^/]^/^/f: func same-type-as [a [integer!] b [string!] c [same-as! a] d [same-as! b] e [same-as! c]] [^/^-probe [a b c d e]^/]^/^/probe spec-of :f^/^/```}
    sent: "2016-12-09T13:59:35.149Z"
    editedAt: "2016-12-09T14:01:01.310Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab8911eb3d6486979d267"
    text: "you're right"
    sent: "2016-12-09T13:58:41.251Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab8850da034021b8be53c"
    text: {I would say that just moving index around is not mutation}
    sent: "2016-12-09T13:58:29.980Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab8730da034021b8be4d3"
    text: {ah, ok, depends on how you define "mutate"}
    sent: "2016-12-09T13:58:11.682Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab839f666c5a138efb169"
    text: {I remember from Rebol/Core docs that some of `for`-functions mutate series and you need to `head` them}
    sent: "2016-12-09T13:57:13.931Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab8381eb3d6486979cff1"
    text: {@9214 this whole documentation applies to Red: http://www.rebol.com/docs/core23/rebolcore-6.html}
    sent: "2016-12-09T13:57:12.413Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab807c29531ac5d3fe19c"
    text: {to understand how `forall` works you need a good understanding of `series!`}
    sent: "2016-12-09T13:56:23.796Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab7abbe9d43bc633bfd52"
    text: "nope"
    sent: "2016-12-09T13:54:51.067Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab7a4be9d43bc633bfd48"
    text: "`forall` doesn't mutate series?"
    sent: "2016-12-09T13:54:44.347Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab77ff666c5a138efad97"
    text: {@9214 I would check one thing - that `copy`, it feels unnecessary here, since you assign reduced value in the end}
    sent: "2016-12-09T13:54:07.355Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab710f666c5a138efab4a"
    text: {```^/Red []^/^/#macro same-type-as: function [spec] [^/^-forall spec [^/^-^-if all [block? spec/1 spec/1/1 = 'same-as!] [^/^-^-^-^-type: select head copy head spec spec/1/2^/^-^-^-^-poke spec 1 reduce type^/^-^-]^/^-]^/^-^/^-reduce [head spec]^/]^/^/f: func same-type-as [a [integer!] b [string!] c [same-as! a] d [same-as! b] e [same-as! c]] [^/^-probe [a b c d e]^/]^/^/probe spec-of  :f^/^/```}
    sent: "2016-12-09T13:52:16.726Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab6e91eb3d6486979c559"
    text: "great! show us the final version :)"
    sent: "2016-12-09T13:51:37.184Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab6a4bb7d528222d89bcf"
    text: {```[a [integer!] b [string!] c [integer!] d [string!] e [integer!]]``` ta-daaaaa! :confetti_ball: }
    sent: "2016-12-09T13:50:28.032Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab6881eb3d6486979c317"
    text: {good, try to find out where you create block layers}
    sent: "2016-12-09T13:50:00.343Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab6700da034021b8bd5d8"
    text: "can't remember how to get rid out of brackets"
    sent: "2016-12-09T13:49:36.622Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab654be9d43bc633bf443"
    text: {``` [a [integer!] b [string!] c [[integer!]] d [[string!]] e [[[integer!]]]]```}
    sent: "2016-12-09T13:49:08.703Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab5f2c29531ac5d3fd5c9"
    text: "it sets to `none` before `poking`"
    sent: "2016-12-09T13:47:30.800Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab5e9f666c5a138efa532"
    text: "I think the problem is in `type` setting"
    sent: "2016-12-09T13:47:21.209Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab5c7c29531ac5d3fd52b"
    text: {@9214 just to be sure, you can get help for all words/functions in Repl, eg `help poke`}
    sent: "2016-12-09T13:46:47.892Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab581c29531ac5d3fd343"
    text: ":D"
    sent: "2016-12-09T13:45:37.294Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "584ab576b4ffd59e380876ad"
    text: {okey, I can see three things to be improved here ;)}
    sent: "2016-12-09T13:45:26.768Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab573b4ffd59e380876a3"
    text: "indeed! `poking` act unexpected"
    sent: "2016-12-09T13:45:23.250Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab561bb7d528222d8936f"
    text: {```[a [integer!] b [string!] c [none] d [none] e [none]]```}
    sent: "2016-12-09T13:45:05.317Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab543bb7d528222d892fa"
    text: {looks like it works, but outputs something that `func` doesn't like}
    sent: "2016-12-09T13:44:35.051Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab5300da034021b8bcfd9"
    text: {try to run just `same-type-as [a [integer!] b [string!] c [same-as! a] d [same-as! b] e [same-as! c]] `}
    sent: "2016-12-09T13:44:16.270Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab4ffb4ffd59e3808745c"
    text: {sigh^/```^/Red []^/^/#macro same-type-as: function [spec] [^/^-forall spec [^/^-^-if all [block? spec/1 spec/1/1 = 'same-as!] [^/^-^-^-^-type: select (head copy spec) spec/1/2^/^-^-^-^-poke spec 1 reduce [type]^/^-^-]^/^-]^/^-^/^-reduce [head spec]^/]^/^/f: func same-type-as [a [integer!] b [string!] c [same-as! a] d [same-as! b] e [same-as! c]] [^/^-probe [a b c d e]^/]^/^/probe spec-of :f^/```^/```^/*** Script Error: invalid type specifier: none^/*** Where: func^/```}
    sent: "2016-12-09T13:43:26.972Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab4d4be9d43bc633bec46"
    text: "@9214 yep, `all` looks good here"
    sent: "2016-12-09T13:42:44.285Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab4cbbe9d43bc633bec14"
    text: {```^/red>> all [false (print "hi" false)]^/== none^/```}
    sent: "2016-12-09T13:42:35.218Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab4a7c29531ac5d3fce94"
    text: {I didn't run into this problem because I had two separate ifs ;)}
    sent: "2016-12-09T13:41:59.509Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab496be9d43bc633beae9"
    text: "use `all` ?"
    sent: "2016-12-09T13:41:42.649Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584ab482b4ffd59e38087204"
    text: {@9214 it seems Red doesn't have short-circuit evaluation on `and`, `or` words}
    sent: "2016-12-09T13:41:22.333Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab46bb4ffd59e38087147"
    text: {```^/red>> false and (print "hi" false)^/hi^/== false^/```}
    sent: "2016-12-09T13:40:59.615Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab4200da034021b8bc9bf"
    text: "interesting"
    sent: "2016-12-09T13:39:44.605Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584ab32db4ffd59e38086a91"
    text: {@maximvl I'm stuck :(^/``` Red^/Red []^/^/#macro same-type-as: function [spec] [^/^-forall spec [^/^-^-if block? spec/1 and spec/1/1 = 'same-as! [^/^-^-^-^-type: select head copy spec spec/1/2^/^-^-^-^-poke spec 1 reduce [type]^/^-^-]^/^-]^/^-^/^-reduce [head spec]^/]^/^/f: func same-type-as [a [integer!] b [string!] c [same-as! a] d [same-as! b] e [same-as! c]] [^/^-probe [a b c d e]^/]^/^/probe spec-of :f^/```^/```^/*** Script Error: path spec/1/1 is not valid for word! type^/*** Where: =^/```^/}
    sent: "2016-12-09T13:35:41.344Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aa8349ce5147013cd0ae4"
    text: "Also `routine` is special case."
    sent: "2016-12-09T12:48:52.433Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa8259ce5147013cd0ad5"
    text: "BTW, `do` does not belong there. `has` does."
    sent: "2016-12-09T12:48:37.737Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa7fd9ce5147013cd0acf"
    text: {@9214 not just the built-in ones, but custom constructors. See http://red.qyz.cz/dependent-types.html}
    sent: "2016-12-09T12:47:57.894Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa7dbbb7d528222d8461a"
    text: "`func`, `function`, `do`, `does`, `routine` ... ?"
    sent: "2016-12-09T12:47:23.975Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aa7c69750c95b4f8a411c"
    text: "They can make your code more safer."
    sent: "2016-12-09T12:47:02.286Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa7b17e2af9d1229af01f"
    text: {Also, I love function constructors. I think that we should have more of them.}
    sent: "2016-12-09T12:46:41.901Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa7381eb3d648697969e2"
    text: "@rebolek yes, that's usually the case"
    sent: "2016-12-09T12:44:39.998Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aa7259750c95b4f8a410a"
    text: "So `funct(ion)` was a big improvement IMO."
    sent: "2016-12-09T12:44:21.995Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa7157e2af9d1229af016"
    text: {@maximvl I was used to specify all my local words since I started using Rebol. But if I changed something in the code, added some new word, I usually forgot to add it to local words. }
    sent: "2016-12-09T12:44:05.212Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa7021eb3d648697967ce"
    text: {which was confusing, at least for me, in the beginning}
    sent: "2016-12-09T12:43:46.267Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa6d5bb7d528222d84014"
    text: {I would say `function` creates unnecessary illusion of scope}
    sent: "2016-12-09T12:43:01.439Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa69bc29531ac5d3f7dc3"
    text: {@rebolek interesting, I think it's easier and better to use `func` to get used to specify all local words}
    sent: "2016-12-09T12:42:03.677Z"
    editedAt: "2016-12-09T12:42:13.512Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa65d03554185047aea4c"
    text: "It makes things easier."
    sent: "2016-12-09T12:41:01.501Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa65bf666c5a138ef4ee3"
    text: "masaka!"
    sent: "2016-12-09T12:40:59.089Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aa657be9d43bc633b9555"
    text: "C-C-C combo"
    sent: "2016-12-09T12:40:55.802Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584aa65203554185047aea47"
    text: {@maximvl Yes, `function` is good enough IMO in most of cases.}
    sent: "2016-12-09T12:40:50.280Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa63a1eb3d64869796479"
    text: "pretty much clear"
    sent: "2016-12-09T12:40:26.993Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa6361eb3d64869796465"
    text: {```^/red>> f: function [] [a: 1 b: 2]^/== func [/local a b][a: 1 b: 2]^/```}
    sent: "2016-12-09T12:40:22.559Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa62203554185047aea3e"
    text: {Here’s one example:^/```^/red>> f: function [x][parse x [set y string!]]^/== func [x][parse x [set y string!]]^/red>> f ["asdf"]^/== true^/red>> y^/== "asdf"^/```}
    sent: "2016-12-09T12:40:02.299Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa5fc1eb3d64869796366"
    text: {@9214 `function` is just a high level wrapper over `func`; If `func` works for you then no problem there}
    sent: "2016-12-09T12:39:23.946Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "584aa5b2bb7d528222d83b64"
    text: {it's also more verbose, so you know all local words upfront when reading the source code}
    sent: "2016-12-09T12:38:10.432Z"
    editedAt: "2016-12-09T12:38:27.657Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa5b00da034021b8b7a0e"
    text: "use `func` and have `fun`"
    sent: "2016-12-09T12:38:08.146Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aa59128d755bf14e41fd1"
    text: "I see, so just use `func` and don't worry :)"
    sent: "2016-12-09T12:37:37.113Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa57b9750c95b4f8a40d7"
    text: {@maximvl It’s not the cases for both of them, it’s where `function` can leak words.}
    sent: "2016-12-09T12:37:15.015Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa5509750c95b4f8a40d5"
    text: {But there may be some cases where `function` cannot catch all your local words.}
    sent: "2016-12-09T12:36:32.074Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa54cf666c5a138ef4a09"
    text: "@rebolek what are the cases for both of them?"
    sent: "2016-12-09T12:36:28.161Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa540c29531ac5d3f75f6"
    text: {IMO it's too verbose to have two constructs for one thing}
    sent: "2016-12-09T12:36:16.797Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aa5229ce5147013cd0a39"
    text: "`function` is usually good enough."
    sent: "2016-12-09T12:35:46.031Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa51cbb7d528222d83748"
    text: {very good question, I prefer `func` since it's shorter to type, but then typing `/local` doesn't make difference}
    sent: "2016-12-09T12:35:40.116Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa50f03554185047aea26"
    text: "@9214 That depends on you user case."
    sent: "2016-12-09T12:35:27.895Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "584aa4c8be9d43bc633b8d8d"
    text: {is `func` with `/local` preferred over `function`?}
    sent: "2016-12-09T12:34:16.603Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aa3e0bb7d528222d83002"
    text: ":muscle: "
    sent: "2016-12-09T12:30:24.653Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aa3c928d755bf14e417ba"
    text: ":P"
    sent: "2016-12-09T12:30:01.822Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa3c11eb3d648697955ed"
    text: {@9214 exercise for you is to add new type, it should work like this:^/```^/[a [integer!] b [string!] c [same-as a]] ;; => [a [integer!] b [string!] c [integer!]]^/```}
    sent: "2016-12-09T12:29:53.203Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa3061eb3d6486979522a"
    text: ">[a [integer!] b [integer!]]"
    sent: "2016-12-09T12:26:46.875Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa2fbb4ffd59e380808b2"
    text: {then you can use it like this:^/```^/Red []^/^/#macro same-type: func [spec /local tmp] [^/   forall spec [^/      if block? spec/1 [^/         either spec/1/1 = 'same! [^/            ; replace with current spec type^/            spec/1: copy tmp^/            ] [^/            ; save current spec type^/            tmp: spec/1^/         ]^/      ]^/   ]^/   reduce [head spec]^/]^/^/f: func same-type [a [integer!] b [same!]] [^/   probe [a b]^/]^/^/probe spec-of :f^/```}
    sent: "2016-12-09T12:26:35.007Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "584aa2e70da034021b8b6bb0"
    text: {@9214 there is a small bug in my code - in this particular case return should be wrapped into one more block}
    sent: "2016-12-09T12:26:15.589Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa29abb7d528222d8292a"
    text: "got that, ty"
    sent: "2016-12-09T12:24:58.188Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584aa1c4b4ffd59e3807fff4"
    text: {and substitute `same-type` call with it's result, which is called `expansion`}
    sent: "2016-12-09T12:21:24.816Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa1a31eb3d64869794794"
    text: {I think you understand what happens next, so `#macro` just says compiler to run this function before compiling}
    sent: "2016-12-09T12:20:51.685Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa15c0da034021b8b63a2"
    text: {so ,`same-type` just loops over it and looks for special `same!` type}
    sent: "2016-12-09T12:19:40.748Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa13a28d755bf14e40b48"
    text: {since function spec is just a block, as most of things in Redbol are, you can manipulate it at will}
    sent: "2016-12-09T12:19:06.328Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584aa0eb28d755bf14e40978"
    text: {@9214 ^/```^/Red []^/^/#macro same-type: func [spec /local tmp] [^/   forall spec [^/      if block? spec/1 [^/         either spec/1/1 = 'same! [^/            ; replace with current spec type^/            spec/1: copy tmp^/            ] [^/            ; save current spec type^/            tmp: spec/1^/         ]^/      ]^/   ]^/   head spec^/]^/^/probe [same-type [a [integer!] b [same!]]]^/```^/prints:^/>[a [integer!] b [integer!]]}
    sent: "2016-12-09T12:17:47.126Z"
    editedAt: "2016-12-09T12:17:55.911Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9fcf28d755bf14e401fb"
    text: {this makes things a lot easier, yes, but whole idea is not tied to a language, you can do this with any of them, the amount of work is different}
    sent: "2016-12-09T12:13:03.833Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9f7cb4ffd59e3807f3df"
    text: "and since in Red code = data ... *wink-wink*"
    sent: "2016-12-09T12:11:40.272Z"
    editedAt: "2016-12-09T12:19:11.481Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a9f58b4ffd59e3807f387"
    text: {macros are functions which take code and return code}
    sent: "2016-12-09T12:11:04.470Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9f3fb4ffd59e3807f316"
    text: {yes, however usual functions do not "expand", this can lead to confusion}
    sent: "2016-12-09T12:10:39.349Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9f0828d755bf14e3fe3d"
    text: {they're basically functions which "expands" at compilation time?}
    sent: "2016-12-09T12:09:44.117Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a9ef0c29531ac5d3f5103"
    text: {lol is great thing, but it has a lot of overwhelming macro usages}
    sent: "2016-12-09T12:09:20.570Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9ebd1eb3d64869793798"
    text: "[LOL](http://letoverlambda.com/)"
    sent: "2016-12-09T12:08:29.028Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a9e7bbe9d43bc633b5fa0"
    text: {it is not something wild/complex/strange, nothing to be afraid of}
    sent: "2016-12-09T12:07:23.394Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9e550da034021b8b52b6"
    text: {@9214 due to Redbol nature macros are pretty much functions}
    sent: "2016-12-09T12:06:45.600Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9e380da034021b8b5250"
    text: "well, I just didn't used them that much ;)"
    sent: "2016-12-09T12:06:16.515Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a9d86f666c5a138ef199d"
    text: "@9214 do you call macros high-level stuff?"
    sent: "2016-12-09T12:03:18.102Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9d55be9d43bc633b5b33"
    text: "high-level stuff, thank you"
    sent: "2016-12-09T12:02:29.900Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a9d0dc29531ac5d3f4821"
    text: {I would say it's not possible unless you use macros}
    sent: "2016-12-09T12:01:17.554Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9cf628d755bf14e3ee6f"
    text: {from here: http://static.red-lang.org/red-system-specs-light.html#section-6.1^/><datatype>   : integer! | byte! | logic! | pointer! [integer! | byte!] |^/               float! | float32! | c-string! | struct! [<members>]}
    sent: "2016-12-09T12:00:54.051Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9ca5bb7d528222d80623"
    text: {Nice one! But still, is it possible to do such thing in Red?}
    sent: "2016-12-09T11:59:33.109Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a9c0a0da034021b8b414b"
    text: {then you don't need to check same types and you can do all kinds of loops}
    sent: "2016-12-09T11:56:58.614Z"
    editedAt: "2016-12-09T11:57:11.260Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9b9cbb7d528222d800eb"
    text: {then you can do things like^/`for b copy [] [5 < length? b] [] [ ; append things to b ]`}
    sent: "2016-12-09T11:55:08.244Z"
    editedAt: "2016-12-09T11:55:54.206Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a9b62bb7d528222d8007f"
    text: {I would do it differently: abstract comparation and updating steps to give caller control over them:^/`for x 0 [x < 10] [x + 1] [...]`}
    sent: "2016-12-09T11:54:10.574Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "584a98b3bb7d528222d7f220"
    text: {How could one specify that one argument should be of the same type as the other?^/Example:^/```^/for: function [^/    'holder [word!]  ^/^-start [any-type!]^/    bump [same as 'start' type then function is actually in use (could be integer! for example)]^/    step ^-[same as above]^/    block [block!]^/    ] [^/    set holder start^/    while [(get holder) <= bump] [^/        do block^/        set holder (get holder) + step^/^-]^/]^/```}
    sent: "2016-12-09T11:42:43.856Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a8ccf1eb3d6486978dc65"
    text: "ty Nenad"
    sent: "2016-12-09T10:51:59.768Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a8c891eb3d6486978db5c"
    text: {@9214^/> By the way, is it possible to change app icon of compiled Red script?^/^/It is, just provide a `Icon: %<file>.ico` entry in your Red header (you need a new icon in .ICO format).}
    sent: "2016-12-09T10:50:49.906Z"
    editedAt: "2016-12-09T10:51:39.959Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a83a428d755bf14e36c83"
    text: {We all went through the same path, soon you'll make your first PR. ;-)}
    sent: "2016-12-09T10:12:52.969Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a837b28d755bf14e36b00"
    text: {uh-oh, first github ticket, when a boy becames a man :man: }
    sent: "2016-12-09T10:12:11.658Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a8317f666c5a138ee8fee"
    text: "Then, please open a ticket for it."
    sent: "2016-12-09T10:10:31.352Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a830cc29531ac5d3eb983"
    text: "correct"
    sent: "2016-12-09T10:10:20.817Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a82f7be9d43bc633ad226"
    text: {@9214 So you have that code in a file and you run it from the console with a `do %<file>`, right?}
    sent: "2016-12-09T10:09:59.923Z"
    editedAt: "2016-12-09T10:10:04.029Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a7fcdc29531ac5d3ea769"
    text: {@dockimbel I've checked Red preface on automated build from red-lang.org, same thing:^/```^/preface should be here^/^/Red []^/^/14 + (14 * 2)^/```^/```^/*** Script Error: preface has no value^/*** Where: do^/```^/Should I fill the ticket? Any additional information needed?}
    sent: "2016-12-09T09:56:29.575Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a7789b4ffd59e38071e7d"
    text: "neat!"
    sent: "2016-12-09T09:21:13.437Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a7783bb7d528222d7417b"
    text: "Reducers ;-)"
    sent: "2016-12-09T09:21:07.732Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a7765b4ffd59e38071d94"
    text: {No official name yet, you are welcome to propose some (IIRC, @greggirwin offered some good ones).}
    sent: "2016-12-09T09:20:37.665Z"
    editedAt: "2016-12-09T09:20:49.012Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a7748f666c5a138ee5262"
    text: "Redders :-)"
    sent: "2016-12-09T09:20:08.929Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "584a772fb4ffd59e38071c75"
    text: {hm, Rebol users are Rebolers, and Red users are ..?}
    sent: "2016-12-09T09:19:43.906Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a74a1bb7d528222d72f8b"
    text: {Mezzanines: yes, that's the term used in Rebol world. Keep us posted about your progress on solving Project Euler's challenges. Have fun! ;-)}
    sent: "2016-12-09T09:08:49.720Z"
    editedAt: "2016-12-09T09:18:37.834Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a64f4b4ffd59e3806ba09"
    text: {Thank you, Nenad! Rebol/Core updates is a spot-on. Keep it up and cheers for your work. ^/^/Currently I'm solving Project Euler problems in Red, so, I think I'll come up with my own mezzanines (that's what user-defined functions in Rebol are called?) and HOFs... ah, the joy of poking around with lovely language <3}
    sent: "2016-12-09T08:01:56.893Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a640ef666c5a138ede53f"
    text: {Feel free to ask here any question about Red (though we can also answer questions about Rebol).}
    sent: "2016-12-09T07:58:06.279Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a63bef666c5a138ede273"
    text: {@greggirwin has implemented many HOF functions for Rebol, I let him provide you with the link to his library.}
    sent: "2016-12-09T07:56:46.876Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a6396f666c5a138ede1b9"
    text: {> Ah, and one more question about Red/Rebol header - it's free-formatted as far as I know, but which fields are reserved and possibly can be used as metadata for compiled executable (Author, Date, Version, Language, etc)?^/^/From Rebol console: `help system/standard/script`, from Red'one: `help system/standard/header` (though the Red one is not complete yet).}
    sent: "2016-12-09T07:56:06.732Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a636abe9d43bc633a1b4f"
    text: "I'm using 0.6.1, no worries"
    sent: "2016-12-09T07:55:22.498Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a6312be9d43bc633a196a"
    text: {For the text preceeding the Red header, I made a fix recently for that, are you using the stable version or the latest automated build from master branch? If it's still not working properly, please open a ticket about it.}
    sent: "2016-12-09T07:53:54.530Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a62c0b4ffd59e3806b22b"
    text: "Indeed, Red could fit that definition. ;-)"
    sent: "2016-12-09T07:52:32.241Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a61e828d755bf14e2c496"
    text: {> Any suggestions, except for Nick's guides and rebol dot com books/resources?^/^/The [Rebol/Core manual](http://www.rebol.com/docs/core23/rebolcore.html) remains the go-to documentation, even if it's not 100% complete. Don't miss its [updates](http://www.rebol.com/docs/changes.html), and especially [this one](http://www.rebol.com/docs/changes-2-5.html).}
    sent: "2016-12-09T07:48:56.854Z"
    editedAt: "2016-12-09T07:50:39.442Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a6172f666c5a138edd5ef"
    text: {> How can I break from multiple nested loops at one time?^/^/Use exceptions, see`throw`and `catch` in the Rebol docs.}
    sent: "2016-12-09T07:46:58.104Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a6153f666c5a138edd5d0"
    text: "dang!"
    sent: "2016-12-09T07:46:27.102Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
)#(
    id: "584a6135c29531ac5d3df3f2"
    text: {> why for returns none, what I'm missing?^/^/Looks like a bug in Rebol's `for`.}
    sent: "2016-12-09T07:45:57.588Z"
    editedAt: "2016-12-09T07:46:12.267Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a60e8be9d43bc633a0e5d"
    text: {@9214 Welcome! No built-in HOF in Rebol, though, they can be trivially implemented in a couple lines of code (as you figured out yourself). Red will provide common built-in HOF, most probably next year.}
    sent: "2016-12-09T07:44:40.993Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "584a1786be9d43bc6338c577"
    text: {Also, I've found what preface ain't working in Red like it does in Rebol:^/```^/text that appears before the header is called the preface and is ignored during evaluation.^/REBOL []^/1 + 2^/```^/```>>  3```^/^/```^/text that appears before the header is called the preface and is ignored during evaluation.^/Red []^/1 + 2^/```^/```^/*** Script Error: text has no value^/*** Where: do^/```^/Even if I enclose script in square brackets, it still produce this error. Bug or feature? Sure I can enclose preface in quotes or curly braces, but still.^/^/Ah, and one more question about Red/Rebol header - it's free-formatted as far as I know, but which fields are reserved and possibly can be used as metadata for compiled executable (Author, Date, Version, Language, etc)?^/^/By the way, is it possible to change app icon of compiled Red script?^/^/Thanks again!}
    sent: "2016-12-09T02:31:34.735Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a016a0da034021b88839d"
    text: "fixed"
    sent: "2016-12-09T00:57:14.704Z"
    editedAt: "2016-12-09T00:58:50.908Z"
    v: 2
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a00caf666c5a138ec2b18"
    text: "whoops, I'm bad at formatting"
    sent: "2016-12-09T00:54:34.160Z"
    v: 1
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "584a00650da034021b887ed0"
    text: {Howdy guys, I'm poking around with Rebol right now and have a couple of newbie questions:^/^/Is there a better way to "collect" a series of values?^/```^/sum: 0^/foreach  i [1 2 3] [sum: sum + i]^/^/product: 0^/foreach i [1 2 3] [product: product * i]^/```^/and et cetera. What I want basically is something like `foldr + [1 2 3]`. Of course I can build simple function for this, but I wonder if it can be done in some tricky Rebol-way with basic language constructs?^/^/I can't wrap my head around this one here:^/```^/print repeat i 10 [if i = 5 [break/return i]] ; >> 5^/print for i 1 10 1 [if i = 5 [break/return i]] ; >> none^/```^/why `for` returns `none`, what I'm missing?^/^/How can I break from multiple nested loops at one time?^/```^/print for i 1 5 1 [^/    for j 1 5 1 [^/        if "whatever" [break from j-loop AND from i-loop, while returning something to print]^/    ]^/]^/```^/^/I've found Rebol documentation to be really scarse  :( ^/Any suggestions, except for Nick's guides and rebol dot com books/resources?^/^/Finally, some quote by memory:^/> Truly, a holy programming language is a homoiconic one.^/> Whenever God speaks to a man, he uses Lisp with inline Assembly.^/^/And that's what Red is, huh? ;) I'm so excited to find such a gem.^/^/Thanks in advance!}
    sent: "2016-12-09T00:52:53.830Z"
    editedAt: "2016-12-09T01:01:09.413Z"
    v: 4
    author: "57dad69540f3a6eec06570e4"
) #(
    id: "5843ef1af666c5a138ca0e1c"
    text: {@typeless Didn't notice the issue you opened..so it was a missing `Red[]` header}
    sent: "2016-12-04T10:25:30.504Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5843ebf190f847041bf70102"
    text: {@dockimbel thanks, I was going to suggest to add these instructions on website =)}
    sent: "2016-12-04T10:12:01.185Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5843eb7eb4ffd59e38e248c8"
    text: "probably not )"
    sent: "2016-12-04T10:10:06.400Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5843eb6af666c5a138c9fe74"
    text: {@maximvl Have you looked at the bottom of the Download page for instructions?}
    sent: "2016-12-04T10:09:46.684Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5843eb480da034021b6794cf"
    text: {hey guys, how should one install `libcurl.so.4` on linux host to run Red?}
    sent: "2016-12-04T10:09:12.440Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5843e11b6b32e87049836aac"
    text: {@typeless btw, I'm not on unix, so haven't actually tested it out}
    sent: "2016-12-04T09:25:47.172Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5843d8e66b32e87049834aef"
    text: {@typeless  @qtxie was answering another person. Although, I don't find any reason for that to not work. Any details? (platform, code, etc) Is  the red binary in the location you specify?}
    sent: "2016-12-04T08:50:46.350Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5843c124bc32453c2889a4f6"
    text: {@qtxie Hey, maybe I misunderstood you, did you mean I should type "#!/usr/bin/env red -u"?}
    sent: "2016-12-04T07:09:24.299Z"
    v: 1
    author: "57313cc3c43b8c601971ff22"
) #(
    id: "58439731b4ffd59e38e10577"
    text: {Seems this code behaves differently between on GUI console and complied exe:^/^/```^/Red [^/    Title: "main"^/    File: "%main.red"^/]^/^/test-context!: context [^/    inner: context [^/        get-ret: func [return: [integer!]][^/            0^/        ]^/    ]^/    do-test: func [/local ret] [     ^/        ret: inner/get-ret   ^/        unless ret = 0 [^/            throw rejoin ["error. value of ret is " ret] ^/        ]^/    ]^/]^/^/test-con: make test-context! [] ^/test-con/do-test^/```^/^/When I execute it on GUI console, it returns none.(I think this is correct.)^/On compiled, it shows the error: "error. value of ret is 0".^/I feel it's weird because if ret is 0, it should not go into throw block.^/I am afraid compilation is not correct, so may I open the issue?^/(by the way, when I replace "unless" with "if", it also behaves oppositely when compiled.)}
    sent: "2016-12-04T04:10:25.371Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "584391ae9750c95b4f895b43"
    text: "@ludx It should work. I think it's a bug."
    sent: "2016-12-04T03:46:54.646Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58437c69f666c5a138c83207"
    text: {@qtxie how text in `area` could be wrapped? e.g. I use^/```^/view layout [^/    a: area 200x200 "Here's some text, lots and lots of text. Here's some text, lots and lots of text."^/        para[^/^-wrap?: on^/        ]^/    return^/    button "wrap？" [print a/para/wrap?]^/]^/```^/or^/```^/view layout [area 200x200 "Here's some text, lots and lots of text. Here's some text, lots and lots of text." wrap]^/```^/but did not work.}
    sent: "2016-12-04T02:16:08.981Z"
    editedAt: "2016-12-04T02:19:38.518Z"
    v: 3
    author: "58403079d73408ce4f39ffd8"
) #(
    id: "58436d6044f3e83528d49828"
    text: {@qtxie Thanks, I will try it that way too, when I have some kinds of similar problem.}
    sent: "2016-12-04T01:12:00.947Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58436ced03554185047a03e0"
    text: {Another way to check if it's libRedRT's issue, is to use `release mode` (`-r`). If it can be compiled in release mode, then something is wrong in libRedRT.}
    sent: "2016-12-04T01:10:05.443Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58436cc40da034021b65a0b1"
    text: {@qtxie Thank you, I was just trying it now, and seems I could compile it!^/I think I can progress. Thank you very much!}
    sent: "2016-12-04T01:09:24.622Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58436c4c03554185047a03dd"
    text: {@koba-yu Seems `-u` doesn't `clear` the old libRedRT files. :worried: The solution is manually clear it first, then use `-u` to compile it.}
    sent: "2016-12-04T01:07:24.264Z"
    editedAt: "2016-12-04T01:07:48.846Z"
    v: 2
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58436a156b32e87049818731"
    text: {@qtxie I tried it but I get the same error..^/But thank you! I keep in mind about the opition and will try if something seems wrong!}
    sent: "2016-12-04T00:57:57.557Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "5843681c1eb3d648695165c6"
    text: "@qtxie  Thanks."
    sent: "2016-12-04T00:49:32.080Z"
    v: 1
    author: "57313cc3c43b8c601971ff22"
) #(
    id: "584367c57e2af9d12299f9cb"
    text: {@koba-yu Try to add `-u` when compiling it. Check [here](https://github.com/red/red/blob/master/usage.txt) for detail.}
    sent: "2016-12-04T00:48:05.183Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "584365dd90f847041bf4e5a8"
    text: {Hi, is `#!/usr/local/bin/red` scripting not supported currently? }
    sent: "2016-12-04T00:39:57.494Z"
    v: 1
    author: "57313cc3c43b8c601971ff22"
) #(
    id: "584363041eb3d64869514ff8"
    text: {@dockimbel ^/Thank you very much for your reply!^/I tried to use string/load, with this code: [string-conversion-test.red](https://gist.github.com/koba-yu/720400b99b95b20b9a195603f9149219)^/ but compilation error raised:^/^/```^/*** Compilation Error: undefined symbol: red/string/load  ^/*** in file: %/X/temp/tesseract/tesseract-api.red  ^/*** in function: exec/ctx355~get-utf8-text  ^/*** at line: 326  ^/*** near: [string/load ret (length? ret + 1) UTF-8  ^/```^/^/Does it require any #include or do I have any misunderstanding?^/^/Also, I tried to make the code of Red/System version: [string-conversion-test.reds](https://gist.github.com/koba-yu/f07eba2165b6920c1333611ebe65f45d)^/this one raises error : ^/```^/undefined symbol: routine^/```^/For this error, I guess I have some misunderstanding about Red/System and routine.}
    sent: "2016-12-04T00:27:48.527Z"
    editedAt: "2016-12-04T00:32:48.471Z"
    v: 5
    author: "581dd537d73408ce4f33d029"
) #(
    id: "58431637b4ffd59e38deae16"
    text: "@Mennohexo, thanks for posting your solution."
    sent: "2016-12-03T19:00:07.318Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5842f8551eb3d648694f47b0"
    text: {@koba-yu A `c-string!` is just a zero-terminated array of bytes defined in Red/System. A `string!` is a Red series representing an array of Unicode codepoints. To do the conversion (supposing your c-string is UTF-8 encoded, you can use in your Red/System code:^/```lisp^/str: string/load <c-string> <size> UTF-8^/```^/where `<size>` is the size in bytes of your c-string (excluding terminal zero).}
    sent: "2016-12-03T16:52:37.177Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5842dfab1eb3d648694ecce3"
    text: {Hello, may I ask a question here?^/^/How can I convert "c-string!" to "string!"?^/I checked the red repository and found that "red/runtime/datatypes/string.reds" has string/rs-load function.^/I guessed it may be the function I need. However, when I compiled the code with using rs-load function, ^/a compile error reported that function was not found.^/(even though string/rs-head function that is also defined in string.reds can be compiled.)}
    sent: "2016-12-03T15:07:23.020Z"
    v: 1
    author: "581dd537d73408ce4f33d029"
) #(
    id: "5842490f44f3e83528cf42f0"
    text: {@Respectech Hi Bo, serial port will come with IO support, and will support async mode. It should be possible to implement it right now (in sync mode), using Red/System.}
    sent: "2016-12-03T04:24:47.492Z"
    editedAt: "2016-12-03T04:25:22.243Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5841f3d66b32e870497acd94"
    text: {@Respectech https://trello.com/c/BW1SPeOU/48-i-o-support ?}
    sent: "2016-12-02T22:21:10.929Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5841f250b4ffd59e38d99b8e"
    text: {Where would I find out when serial port support is planned for Red?}
    sent: "2016-12-02T22:14:40.871Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "5841c516f666c5a138c01a72"
    text: {Configuration is 10MB per one Minute. Surfing on the desktop computer works normal. If a permanent download occurs itself , the firewall stops ALL traffic.  This information isnt about  programming but useful for everyone who is surfing with a volume limit. See you in programming matters again.  Menno}
    sent: "2016-12-02T19:01:42.101Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5841bbc00da034021b5dbb77"
    text: {I have done the following steps :    installing  networx and have the sterjo firewall portable version on the desktop. In the sterjo firewall i make a new policy file and saved it under BLOCKER. Then the only rule i put in is to block all communication. If you start the exe of this portable program then the firewall blocks ALL.  Now i configure the networx traffic tool that is already normal installed in the option "start external program if an amount of  150 MB is reached". I take here the option more than 5MB in one minute.   Now when you are online in the net and a permanent download is running that you are not  aware of , the Networx starting the firewall ans boooooooomm.   ALL traffic is down.       Yes that works.  Yes the two programs are freeware.  This is a way to make a denied limit of internet consumtion.   Over and out.}
    sent: "2016-12-02T18:21:52.317Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5841b872bc32453c288023f6"
    text: "Hello again Gregg , i got it."
    sent: "2016-12-02T18:07:46.393Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5840842616207f7b0eced596"
    text: {i have a 5GB prepaid surf stick.  Today  i made an espresso during a short break. Looking on my netmeter and have seen  :  1 GB consumption for nothing.  Just  blown in the space.  ha ha}
    sent: "2016-12-01T20:12:22.134Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "584082fe8d65e3830ec63f19"
    text: {Hello Gregg i am working on it.   first : Networx   second: Netlimiter  ,    dont   know  if  they  work  ,  i will  try.    Functions :   if 150MB is reached , close all internet connections.  }
    sent: "2016-12-01T20:07:26.937Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "58405f1a89d179bf4deca577"
    text: {It will be OS specific. I haven't done it, but `ifconfig` on *nix and `netsh` on Windows?}
    sent: "2016-12-01T17:34:18.739Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58405e0516207f7b0ecdde1e"
    text: {Does anyone know a program that can CUT the internet connection automatic IF the 500MB volume is reached ?}
    sent: "2016-12-01T17:29:41.593Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "58405de58255fe6b76f17a2b"
    text: {I have a program here called NetMeter. That is a app to monitor the Internet Volume in MB and GB to see how much GB you have consumed. The limit is configured to 500MB , so every 500MB of alrady consumed internet volume you get a Message on the desktop.}
    sent: "2016-12-01T17:29:09.189Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "58405d58444b3778767e15b1"
    text: "Hi there."
    sent: "2016-12-01T17:26:48.084Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "583c815d381827c24d90b6a6"
    text: "Nice Alan! Thanks for posting."
    sent: "2016-11-28T19:11:25.436Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5837a9b689d179bf4dc08349"
    text: {I did this just for fun, but it could be useful .... http://www.mycode4fun.co.uk/red-apps}
    sent: "2016-11-25T03:02:14.771Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "582d94a1df5ae966456bc8d3"
    text: {and quoted word is analogue to symbol in lisps, as a symbol it may have or have not any `symbol-value`}
    sent: "2016-11-17T11:29:37.022Z"
    editedAt: "2016-11-17T11:30:18.530Z"
    v: 3
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582d944edf5ae966456bc7ce"
    text: {so, you still can quote word as in lisps: `f 'a`, but `f` may already be made to quote it's arguments as it wants}
    sent: "2016-11-17T11:28:14.742Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582d942688fa21d53c3360c6"
    text: {you can't do it in lisps (at least I'm not aware of ways of doing it)}
    sent: "2016-11-17T11:27:34.107Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582d940e88fa21d53c336040"
    text: {@dsgeyser I see a lit-word in function arguments as mandatory quoting on the function side}
    sent: "2016-11-17T11:27:10.871Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "582c2d66715933bd5573a2db"
    text: {Yes, you can use PARSE for natural language processing.}
    sent: "2016-11-16T09:56:54.153Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c2d21c2f2cf727519d718"
    text: "@rebolek  lit-words and parse can be used in NLP?"
    sent: "2016-11-16T09:55:45.100Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "582c2b7b4c9177c45e3166e9"
    text: {@dsgeyser That’s a good idea. And if you have some code in which you think you may use lit-words, just ask, I and others are willing to help.}
    sent: "2016-11-16T09:48:43.322Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "582c2b2631c5cbef43019f54"
    text: {@rebolek Thanks. So a good consideration is to use lit-words sparingly, until fully understood. }
    sent: "2016-11-16T09:47:18.531Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "582c23e64c9177c45e3165f9"
    text: {No, see. Let’s make some simple dialect:^/```^/red>> dialect: func [input] [parse input ['my 'simple 'dialect]]^/== func [input][parse input ['my 'simple 'dialect]]^/red>> dialect [my simple dialect]^/== true^/red>> my^/*** Script Error: my has no value^/*** Where: catch^/red>> simple^/*** Script Error: simple has no value^/*** Where: catch^/red>> dialect^/*** Script Error: dialect is missing its input argument^/*** Where: dialect^/```^/In my simple dialect, words `my`, `simple` and `dialect` are just symbols, they hold no value. But my simple dialect can parse and understand them. Outside of my simple dialect, `my` and `simple` still hold no value, so they throw an error, when I try to evaluate them. OTOH `dialect`has value - function to parse my simple dialect. But not in the dialect itself, there it is just a symbol still.}
    sent: "2016-11-16T09:16:22.320Z"
    editedAt: "2016-11-16T09:16:55.355Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c22a537fbab5354b92e0d"
    text: "How is it syntactic sugar?"
    sent: "2016-11-16T09:11:01.907Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c226831c5cbef43016926"
    text: {@rebolek Example of syntactic sugar?  Doc mentioned this wrt parse, if my recollection is correct.}
    sent: "2016-11-16T09:10:00.581Z"
    editedAt: "2016-11-16T09:12:06.300Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "582c1664d5990a176b99b15a"
    text: "No, `lit-word!` is not a syntactic sugar."
    sent: "2016-11-16T08:18:44.856Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582c0e0fe097df7575b9f1c6"
    text: {With concepts I mean 'Computer Science' terms, like for instance objects in general, all related to Red.}
    sent: "2016-11-16T07:43:11.870Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "582c07b3e097df7575b9d3e8"
    text: {@JacobGood1  I  second that. I tried to understand Rebol by studying Factor, Lisp, Logo, a bit of Self,etc. I picked up something here and there. But its like someone being used to another language and trying to adapt to Red. No need to introduce bad programming habits. Its seems to be easier for me to focus on general concepts. Dividing your attention just limits you. Rather stay focused on Red.}
    sent: "2016-11-16T07:16:03.670Z"
    editedAt: "2016-11-16T07:17:01.970Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "582c0446e462097a30564f0a"
    text: {So 'a (lit-word) like to, thru, are implemented as syntactic sugar?}
    sent: "2016-11-16T07:01:26.584Z"
    editedAt: "2016-11-16T07:03:38.785Z"
    v: 3
    author: "5669246916b6c7089cbe259e"
) #(
    id: "582b730537fbab5354b90682"
    text: {I suggest just programming in red, eventually, things will make sense… It's like speaking in a foreign language, it is best to immerse yourself instead of trying to understand each vocabulary word individually, every concept in a vacuum, every cultural nuance  void of it's implications}
    sent: "2016-11-15T20:41:41.383Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "582b72e6c2f2cf7275161aee"
    text: {Rebol:^/```^/>> collect [foreach thing test [keep type? thing]]^/== [word! set-word! get-word! word!]^/```}
    sent: "2016-11-15T20:41:10.684Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b72a34c9177c45e313c53"
    text: {it can be really hard to think about symbolic programming when most other programming languages  don't have anything like it}
    sent: "2016-11-15T20:40:03.765Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "582b729c88fa21d53c27c26f"
    text: {```^/red>> collect [foreach thing test [keep type? thing]]^/== [word! set-word! get-word! lit-word!]^/```}
    sent: "2016-11-15T20:39:56.364Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b726fe097df7575b6d9bc"
    text: {```^/test: [word word: :word 'word]^/```^/There seems to be a slight difference in the evaluation models of Red and Rebol (REBOL/View 2.7.8.3.1)}
    sent: "2016-11-15T20:39:11.104Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b71a6c2f2cf727516132b"
    text: {```^/red>> ? foreach^/^/USAGE:^/      foreach 'word series body^/```^/there is a `lit-word!`, `'word` which `foreach` does not evaluate, so you can use it in the body without defining it at first^/}
    sent: "2016-11-15T20:35:50.553Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b705831c5cbef43fe002b"
    text: {It might help reading up on quoting in other languages I think. Lisp has the same syntax, Factor uses `[ brackets with code ]`. Redbol seems to use both!}
    sent: "2016-11-15T20:30:16.020Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b6f9d31c5cbef43fdfa62"
    text: {My understanding is that the `symbol` is same as the `'quoted` words in lisp and other languages with similar constructs. Using^/```^/`back-tics`^/```^/..to denote code is another example of *referring to a symbol without evaluating the code* inside gitter itself^/^/Having such a construct makes it easier to do symbolic manipulation.^/A concrete example of symbolic manipulation is differentiation and integration.}
    sent: "2016-11-15T20:27:09.588Z"
    editedAt: "2016-11-15T20:28:27.187Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "582b6d79bd2f135f1a20dd58"
    text: {(all) Just for clarification, a `symbol` is the same as a `lit-word!` right?}
    sent: "2016-11-15T20:18:01.003Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b6d3cc2f2cf727515ebc7"
    text: {@redredwine It's useful for meta-programming and dialects}
    sent: "2016-11-15T20:17:00.626Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "582b30f931c5cbef43fc6fa6"
    text: {@redredwine Word are often used as symbol.^/In parse dialects , `to`, `thru`, `collect`, `keep` and so on are just words, they have no value.^/In VID dialect, `origin`, `title`, `across`, `return` and so on are just words.^/In Draw dialect, `pen`, `box`, `circle`, `translate` are just words too.^/Not only in dialects, ie: `View/flags` optional argument is a word or a block! of words : `view/flags [text "test"] 'resize`.^/Need more examples ?^/}
    sent: "2016-11-15T15:59:53.478Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "582ac815ec698d3d289bb4c2"
    text: {@redredwine ^/You can set word to some value. This word then gets evaluated to that value:^/```^/red>> a: 1^/== 1^/red>> a^/== 1^/```^/But the word does not get evaluated every time, for example in block (unless you want it):^/```^/red>> b: [a]^/== [a]^/red>> first b^/== a^/```^/See? It’s still `a`, not `1`. To get `1`, you need to evaluate that word somehow, i.e. with `do`:^/```^/red>> do first b^/== 1^/```^/`lit-word!` evaluates to `word!`, so it is very similar to above example. See:^/```^/red>> w: 'a^/== a^/red>> do w^/== 1^/```}
    sent: "2016-11-15T08:32:21.336Z"
    editedAt: "2016-11-15T08:32:52.754Z"
    v: 3
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "582a7eec31c5cbef43f8aecc"
    text: {the above comes from chapter 4 in the REbol core docs. I'm clear on the first 3  i.e  word,  word:,   :word  ^/the 'word is the one that seems to be tripping me a little bit.    ^/^/Also n chapter 4 of Rebol core docs it says "Words are used in two ways: as symbols or as variables."            am clear with the variables part. ^/anyway  needs to go look for examples where the 'symbol/literal"  is being used to really understand its full potential. }
    sent: "2016-11-15T03:20:12.729Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "582a7ce1e097df7575b1350c"
    text: {Format    What It Does ^/^/word        Evaluates the word. This is the most natural and common way to write words. If the word holds a function, it will be evaluated. Otherwise, the value of the word will be returned.^/^/word:       Defines or sets the value of a word. It is given a new value. The value can be anything, including a function. See Setting Words below.^/^/:word       Gets the word's value, but doesn't evaluate it. This is useful for referring to functions and other data without evaluating them. See Getting Words below.^/^/'word      Treats the word as a symbol, but does not evaluate it. The word itself is the value.}
    sent: "2016-11-15T03:11:29.759Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "58288c1ee462097a304321c5"
    text: {@endo64 Correct. Saving hasn't been implemented yet, only loading. We plan to make a R/S implementation for it, but in the meantime, it wouldn't be difficult to make a quick implementation in pure Red, if someone is up to it.}
    sent: "2016-11-13T15:51:58.473Z"
    editedAt: "2016-11-13T15:53:37.079Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582889dcdf5ae966454f8cf3"
    text: "EVOLVER 20 Bonus Points"
    sent: "2016-11-13T15:42:20.203Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "582885a9fd9dc2742bbf2b7f"
    text: "@endo64 AFAIK yes."
    sent: "2016-11-13T15:24:25.421Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5828841fec38b45556f5804c"
    text: {@redredwine ^/with time you will understand, it can be hard to learn multiplication before addition}
    sent: "2016-11-13T15:17:51.291Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5828738945c9e3eb43314aae"
    text: {redbin format spec is ready but `save/as redbin` is not I think, right?}
    sent: "2016-11-13T14:07:05.759Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "582844b931c5cbef43ed24bf"
    text: ""
    sent: "2016-11-13T10:47:21.859Z"
    editedAt: "2016-11-13T10:48:05.893Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5828181be462097a30413055"
    text: {@redredwine Word is always a symbol. You need to evaluate it to get its value. And that value depends on context.}
    sent: "2016-11-13T07:36:59.119Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5827ee6165485ebc678a8e08"
    text: {Thanks @rebolek, it would be great if you could write soemthing, that would make it easier for a newbie.  I'm trying to wrap my head around the sample you posted.  I'm trying to understand,  under what circumstances,would I need to use word as a symbol.  what are the benefits of using word as a literal/symbol rather than using a  word as a variable.  }
    sent: "2016-11-13T04:38:57.744Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "58275b2188fa21d53c12a3df"
    text: {I am going to write something about it to help people understand it, but don’t expect it today ;)}
    sent: "2016-11-12T18:10:41.446Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58275a83e462097a303e202c"
    text: {@redredwine  take a look at this:^/```^/red>> a: 1^/== 1^/red>> o: object [a: "one"]^/== make object! [^/    a: "one"^/]^/red>> type? a^/== integer!^/red>> type? first [a]^/== word!^/red>> reduce [a]^/== [1]^/red>> block: [a]^/== [a]^/red>> append block first words-of o^/== [a a]^/red>> block^/== [a a]^/red>> reduce block^/== [1 "one"]^/```}
    sent: "2016-11-12T18:08:03.691Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5827355031c5cbef43e8d23e"
    text: {What is the best doc when it comes to explaining word as a symbol?   I'm a little bit stumped :worried:  on the use of word as a symbol , I  was researching  the rebol site (http://www.rebol.com/r3/docs/guide/code-words.html, http://www.rebol.com/docs/core23/rebolcore-16.html#section-3.10) and reading about it, but still not sure how to use that literal feature. ^/}
    sent: "2016-11-12T15:29:20.607Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "58262708ec38b45556f5456d"
    text: {I find the Red community to be far less cynical than pretty much any other programming community.  I think that is because we are still a small group.  Once it gets larger, I am sure it will normalize with the rest of the programming world =)}
    sent: "2016-11-11T20:16:08.765Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "5825705a818fbb8a63c28ccd"
    text: {I’ve added some basic index for my articles: http://red.qyz.cz/}
    sent: "2016-11-11T07:16:42.856Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "58256d626cb720763061da0a"
    text: {Some other sources:^/http://redprogramming.com/Home.html^/http://www.red-by-example.org/^/}
    sent: "2016-11-11T07:04:02.255Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58251933c2f2cf7275f6ff66"
    text: {Thanks  @justjenny  looks good - great site, really exited about Red, so much to learn.}
    sent: "2016-11-11T01:04:51.161Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "5825118965485ebc677df787"
    text: {Hi  @TomGrey303  This site can seem a bit clinical sometimes - but everyone is always very helpful - If you are into GUI things, you should look at:  http://www.mycode4fun.co.uk/About-Red-Programming - I learned a lot from there and he's always willing to help.}
    sent: "2016-11-11T00:32:09.175Z"
    v: 1
    author: "56dd7386e610378809c56852"
) #(
    id: "582505926cb72076306056c4"
    text: {@qtxie thanks will take a look, and thanks with your help on the 'Call' problem i had the other day, you're answer was one hundred percent perfect.}
    sent: "2016-11-10T23:41:06.446Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "5825049fe097df75759767a9"
    text: {@TomGrey303 Welcome! You can find some good exmaples here: https://github.com/red/code}
    sent: "2016-11-10T23:37:03.028Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "582503ee65485ebc677db94e"
    text: {Just started with Red, everyone is really helpful, where can i get more samples or examples, I find that is the easiest way to learn.       Love it}
    sent: "2016-11-10T23:34:06.998Z"
    v: 1
    author: "5822552ed73408ce4f349d18"
) #(
    id: "58245d32e462097a302ff05e"
    text: {@Rebol2Red oh I see it in my notes, now I have two more examples for my notes! thanks!}
    sent: "2016-11-10T11:42:42.251Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58245cb6e462097a302fed26"
    text: "Sorry, it was related to you by Bolislav"
    sent: "2016-11-10T11:40:38.285Z"
    editedAt: "2016-11-10T11:41:34.104Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58245c4d45c9e3eb431ed1da"
    text: "@Rebol2Red Are you sure that's me?"
    sent: "2016-11-10T11:38:53.093Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58245b9e31c5cbef43db8f74"
    text: {Well, i added some code, this is your original code^/```^/i: make image! 2x2^/repeat width i/size/x [repeat height i/size/y [i/(as-pair width height): random 255.255.255]]^/```}
    sent: "2016-11-10T11:35:58.534Z"
    editedAt: "2016-11-10T11:36:42.368Z"
    v: 2
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58245ac5df5ae966453c0a7b"
    text: {@Rebol2Red What's that from? I don't recognize it :worried: }
    sent: "2016-11-10T11:32:21.545Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58245a086cb72076305c2faf"
    text: "@dockimbel Yes, even better, thanks."
    sent: "2016-11-10T11:29:12.186Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "5824594d6cb72076305c2c28"
    text: {Can be even simpler:^/```lisp^/s: now/time/precise^/^/image: make image! 800x400^/forall image [image/1: random 255.255.255]^/^/probe now/time/precise - s^/view [image image]^/```}
    sent: "2016-11-10T11:26:05.373Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "582458276cb72076305c26bf"
    text: {@Mufferaw ^/I just read your code:^/```^/s: now/time/precise ; added for timing^/^/i: make image! 800x400^/repeat width i/size/x [repeat height i/size/y [i/(as-pair width height): random 255.255.255]]^/^/probe now/time/precise - s ; added for timing^/view [image i] ; just to show the image^/```^/You can do this in one loop (faster):^/```^/s: now/time/precise^/^/image: make image! 800x400^/repeat pixel image/size/x * image/size/y [^/^-image/:pixel: random 255.255.255^/]^/^/probe now/time/precise - s^/view [image image]^/```}
    sent: "2016-11-10T11:21:11.180Z"
    v: 1
    author: "5773c6b7c2f0db084a208d58"
) #(
    id: "58217de5e462097a3020d250"
    text: "@dockimbel Thank you, done. #2308 "
    sent: "2016-11-08T07:25:25.430Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
)#(
    id: "58217a5f45c9e3eb430fa025"
    text: {@endo64 Most probably not yet implemented, you can fill a wish ticket for it.}
    sent: "2016-11-08T07:10:23.469Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5821767331c5cbef43cc9262"
    text: {This is different than R2/R3, is it expected?^/```^/red>> find #{0000000016180300} complement charset "^^@"^/== #{0000000016180300}^/R2/3>> find #{0000000016180300} complement charset "^^@"^/== #{16180300}^/```}
    sent: "2016-11-08T06:53:39.112Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5821005adf5ae966452a27ce"
    text: {```^/red>> x: #{0000000016180300}^/== #{0000000016180300}^/red>> parse x [some [#"^^@" | pos: break] to end]^/== true^/red>> pos^/== #{16180300}^/```}
    sent: "2016-11-07T22:29:46.032Z"
    editedAt: "2016-11-07T22:31:04.481Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5820f2e5e462097a301e55ed"
    text: {How can I find the first non-zero char in a `binary!`?  It didn't work with `charset`^/```^/red>> find x complement charset #"^^@"^/== #{0000000016180300}^/```}
    sent: "2016-11-07T21:32:21.075Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5820da6b6cb720763049f368"
    text: {@greggirwin  Appreciate time taken to answer me. As always, complete and to the point. :-)}
    sent: "2016-11-07T19:47:55.858Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5820c08645c9e3eb430bf0c3"
    text: {Operator overloading is implicit in Red's design. You use it every time you write an `op!`. e.g. `1 < 2`. The op maps to an action (though it can also map to a function) and actions are handled by each datatype. The *overloading* part is yet to be defined, though you can do it today at the Red/System level, or possibly even hack at the mezz level. I don't recommend that. Wait to see that Nenad proposes for UDTs.^/^/For new infix ops, this is Nenad's example of how to write them: https://github.com/red/red/wiki/Guru-Meditations#define-infix-operators}
    sent: "2016-11-07T17:57:26.754Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5820bed878ec59ab05441088"
    text: {*light-weight* and *abstraction* are so subjective and context dependent, that I don't think we can compare against them. Red provides both, of course, and is not like C++ at all. I can't wait to see what kind of tools people build for the lower levels.  Not only what Team Red creates to build Red 2.0, but for hardware driver development, embedded systems, etc.}
    sent: "2016-11-07T17:50:16.407Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58202af8eed0c3125f46ad33"
    text: {What is "operator overloading " in Red terms? An example is most welcome.}
    sent: "2016-11-07T07:19:20.193Z"
    editedAt: "2016-11-07T07:19:42.397Z"
    v: 2
    author: "5669246916b6c7089cbe259e"
) #(
    id: "58202951c2f2cf7275dc7a88"
    text: "@dsgeyser  And accessing the hardware..."
    sent: "2016-11-07T07:12:17.142Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "582028aae462097a30198f9e"
    text: {From Wikipedia:^/^/' Stroustrup describes C++ as "a light-weight^/abstraction programming language [designed] for building and using efficient and^/elegant abstractions"; [5] and "offering both hardware access and abstraction is^/the basis of C++. Doing it efficiently is what distinguishes it from other^/languages"'^/^/Really? Isn't elegant abstractions and being light-weight something more in line with what Red is able to accomplish. C++ is not so. }
    sent: "2016-11-07T07:09:30.330Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "581fa4a14aeee0634dc1de5f"
    text: {@redredwine I agree that the wording may be confusing - previous element does not mean the element preceding the word `below`, but every previous element after the word `below`. }
    sent: "2016-11-06T21:46:09.229Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581fa02831c5cbef43c36026"
    text: {Ok thanks for the explanation @rebolek , I will keep this in mind going forward. ^/I was reading the "red by example" page  - there it  defined  "below" as "The function below is used to position GUI elements following that word below the previous GUI element."    ^/So I was wrong  thinking   that any widget I placed after "below" will be  "below" the previous widget.^/^/}
    sent: "2016-11-06T21:27:04.217Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "581f9f11aa8f8c4b328f5091"
    text: {@redredwine It’s not that it works better, `below` and `across` just set the direction for the placement. `return` starts next row or column, depending on the direction. It may be little unusual, but it’s effective. And you can always enclose faces in panel, when trying to do something more complicated.}
    sent: "2016-11-06T21:22:25.327Z"
    editedAt: "2016-11-06T21:22:45.789Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581f9e6331c5cbef43c358ee"
    text: {thanks @rebolek ,  "return"  works better than "below".  exactly  as what I was trying to do. i.e  to place the next  button following the "return"  word   to a new line. }
    sent: "2016-11-06T21:19:31.615Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "581f98fdb4046d90642c58ab"
    text: {Also change `below` to `across` in that example, to see how it works.}
    sent: "2016-11-06T20:56:29.575Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581f98ccb4046d90642c589f"
    text: {I’m not sure where do you expect "third" and "fourth" to be, but try something like this:^/```^/view [^/^-style btnStyl: button blue 70x20^/^-below^/^-btnStyl "First"^/^-btnStyl "Second"^/^-return^/^-btnStyl "third"^/^-btnStyl " fourth"^/]^/```}
    sent: "2016-11-06T20:55:40.333Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581f98504aeee0634dc1daf5"
    text: {2) `below` and `across` just sets actual direction. What you are looking for is `return`.}
    sent: "2016-11-06T20:53:36.927Z"
    editedAt: "2016-11-06T20:56:51.249Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581f978b0d42ea911cbe9cdd"
    text: "1) That’s not supported (yet)."
    sent: "2016-11-06T20:50:19.372Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581f971b45c9e3eb43064534"
    text: {I am seeing something  weird  with  the UI.   ^/1) button does not take colour. the example below does not give a blue button^/              view [ button blue  70x20]^/^/2)  " below "  works weird,  in the following example , I was expecting to see  "second"  on the next line under "First",   but it is "third"  that goes on the next line.   ^/^/view  [^/              style btnStyl: button  blue  70x20^/              btnStyl "First"^/              below^/              btnStyl "Second"^/              btnStyl "third"^/              btnStyl " fourth"^/ ]^/}
    sent: "2016-11-06T20:48:27.468Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "581f776bdf5ae9664521f5a8"
    text: {@geekyi - it is a small free editor  - same as link provided by @rebolek  - http://www.contexteditor.org/index.php^/@qtxie - ok thanks for the confirmation that vscode does not support debugging for Red. ^/}
    sent: "2016-11-06T18:33:15.314Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "581f5f32e097df7575796033"
    text: {I used ConTEXT for a number of years. Now I use UltraEdit as my main editor. It still surprises me that after so many years in IDEs how I moved to a "plain" editor with only a minor sense of loss at times. The modern  features people speak of are, to me, just minor changes to old ones. Watching a program progress, and inspecting the output, is just step-tracing. Being able to go back in time is the modern twist, which is cool. Nobody is yet (AFAIK) talking about viewing many possible futures or pasts, and comparing them side by side. ^/One thing I thought I couldn't live without is *jump to definition*, having had it available to me from 1989 to 2001 when I changed my focus to Rebol. I still miss at times, though the function list in UE works fairly well in its stead. Haven't missed it enough to configure a CTAGS setup. ^/I am anxious to see the future we'll create with Red in this regard.}
    sent: "2016-11-06T16:49:54.195Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581ee22f0d42ea911cbe77e0"
    text: {Maybe this? http://www.contexteditor.org/index.php}
    sent: "2016-11-06T07:56:31.989Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "581ee044e097df7575775ae0"
    text: {@redredwine what is the "context editor"? I'm using sublimetext3 with red plugin}
    sent: "2016-11-06T07:48:20.189Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "581eaec0e462097a301384e5"
    text: {@redredwine No debugging support in VSCode currently.}
    sent: "2016-11-06T04:17:04.467Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "581ea489c2f2cf7275d5f919"
    text: {I am using the context editor for learning red, it is very light about 4 MB disk space, however it cannot do debug. I can only write a red script,  then run it by calling the console.exe.    ^/Do a lot of people here  use the Visual studio code editor ?    I downloaded it  and find it a bit confusing to setup the debugger.}
    sent: "2016-11-06T03:33:29.144Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "581ea35deed0c3125f403fd4"
    text: "Good to know. Thanks!"
    sent: "2016-11-06T03:28:29.920Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581e2cddeed0c3125f3e7036"
    text: {This is Russian slang expression. It means a request: specify directly on the desired response.^/^/}
    sent: "2016-11-05T19:02:53.444Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "581e212645c9e3eb43008cc0"
    text: {Though I have no idea what "poke my nose" means. :^^\}
    sent: "2016-11-05T18:12:54.289Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581e20e4c2f2cf7275d3e2c5"
    text: {Nevermind, I can just translate and post for you. :^^)^/> Right now (in the current implementation) is it possible to create an application for android on red (the most simple - two buttons and input fields with preservation of the text on flash memory)? If you can not - when to expect? If you can - "poke my nose." Thank you.}
    sent: "2016-11-05T18:11:47.998Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581e205ae462097a30115af5"
    text: {@sergey6661313 Мне очень жаль, что я не читаю по-русски. Не могли бы вы опубликовать на английском языке?}
    sent: "2016-11-05T18:09:30.645Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "581e19c331c5cbef43bd48ff"
    text: {Прямо сейчас (в текущей реализации) возможно ли создать приложение на red под android (самое простое - две кнопочки и поля ввода с сохранением текста на flash память) ? Если нельзя - когда ожидать? Если можно - "ткните меня носом". Спасибо.}
    sent: "2016-11-05T17:41:23.917Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5817ceb6c3569a036e3e0d2a"
    text: "Ah, the reboot. ;^^)"
    sent: "2016-10-31T23:07:34.777Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5817adfa8ed1c0ff5c4c5bbb"
    text: {Thanks Guys for your help. ^/The full control permissions were all there, when I checked yesterday.  I did go in and switched  a couple of times ownership back and forth between  between the 2 users( one with admin rights, and with normal rights) yesterday night, to try the different combinations, and it was still not working .  Somehow this morning, it seems to be working .  I suspect that maybe the relogging in or rebooting may have done something.  I can play with it now.   the 2 files console***.exe  and the gui-console***.exe  have been copied to my F:\red\ folder,  and are running from there.   ^/Thanks again :smile: }
    sent: "2016-10-31T20:47:54.895Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "5816bcb25a1cfa016e64c863"
    text: {Also try, gregg's suggestion, :point_up: [October 30, 2016 11:49 PM](https://gitter.im/red/red/welcome?at=581640c383a2008d22ed1523) more [info](https://support.microsoft.com/en-us/kb/2669244)}
    sent: "2016-10-31T03:38:26.673Z"
    editedAt: "2016-10-31T03:39:09.261Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5816bbf2806316005dd9b515"
    text: {>console-2016-6-30-23134.exe - it gives the red repl console^/^/Oh, ok so it works kinda? What if you type `view [button "hi"]` in the console? It looks like only the gui-console gives error.. which is *really* weird.. either your download is corrupted, you have some strange security setup (antivirus or other) or something else strange going on :worried: }
    sent: "2016-10-31T03:35:14.685Z"
    editedAt: "2016-10-31T03:35:30.377Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "5816bac9482c168b22d2f828"
    text: {@redredwine it *looks* like it is compiling correctly, just not running, which is weird. Does it happen with other `.exe`s?}
    sent: "2016-10-31T03:30:17.755Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5816b9608ed1c0ff5c475041"
    text: {@redredwine ^/>why don't we just download the 3 files from the Red site^/^/:point_left:  [Quoting doc](https://gitter.im/red/red/gui-branch?at=58141efb83a2008d22e5787f)^/> @geekyi The `red.exe` only contains the source code for the gui-console, which gets compiled on first invocation of the REPL.^/^/1. crush.dll is the compressor, based on the *crush* algorithm (to decompress the contents?)^/2. you just need one of `console` and `gui-console`, they are just slightly different implementations (can have the `console` when you don't have a gui^/3. to actually run the red interpreter, you can just double click the `gui-console`, it's the only thing you need afaik^/^/In short, red.exe is a packaging mechanism, it is 1 file for convenience of the newbie (1-click start) :smile:}
    sent: "2016-10-31T03:24:16.185Z"
    editedAt: "2016-10-31T03:27:38.797Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "58169873c3569a036e379095"
    text: {@redredwine  Try deleting the Red folder under c:\ProgramData.  Then  double click on ^/F:\Red-061.exe.      }
    sent: "2016-10-31T01:03:47.062Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "581640c383a2008d22ed1523"
    text: {I keep things off my OS drive when I can as well, including Red. The stuff in ProgramData is (I think) due to Red trying to be compliant with their rules. Tricky stuff there.^/^/If you right click on the exe and look at the Security settings, are you the owner and is it set to allow execition?}
    sent: "2016-10-30T18:49:39.805Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58160e6b7b15d16e55c4df2e"
    text: {@greggirwin -  Yes I unblocked the red-061.exe ,   it says it is coming from another computer . when I doubleclick it just open a command prompt for one second and then closes it.  when I go to command prompt, and type red-061.exe,  it just does nothing, same as in my first post.   @geekyi , weird mine is on windows 10, but it does not work.}
    sent: "2016-10-30T15:14:51.486Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "58160c625a1cfa016e61f099"
    text: {Thanks to all  for your replies.^/^/yes there is a c:\programdata\red hidden folder , there are 3 files,console-2016-6-30-23134.exe, gui-console-2016-6-30-23134.exe, crush-2016-6-30-23134.dll^/^/when I log in as a user with Admin rights:-^/Using windows explorer and I go to c:\programdata\red folder, and click on each of the 2 .exe files, console-2016-6-30-23134.exe, gui-console-2016-6-30-23134.exe^/I get the message - windows cannot access the specified device, path or file. you may nothave the appropriate permissions to access the item.^/^/Using command prompt in the c:\programdata\red folder/directory, when I type each of the .exe and press enter for each command this is what I get^/console-2016-6-30-23134.exe -  it gives the  red repl console.^/redgui-condole-2016-6-30-23134.exe - it gives me access denied.^/^/when I move all 3 files from the c:\programdata\red  to my F:/red drive folder, it does not matter whether I am going to command prompt and typing the command or  using windows explorer and double click, it gives me the following message- "windows cannot access the specified device, path or file. you may not have the appropriate permissions to access the item".  (despite having logged in as an Admin user)^/^/Please note I try to keep only my Windows OS on my c drive. Everything else I want them to be in my F:drive . I want to keep my os files and my own files separate, for easier maintenance. Also for my day to day activities, I log in a NON admin user .  I am kind of wondering, if the the file that we download from the RED site is going to recreate 3 files on our system - why don't we just download the 3 files from the Red site, it will be more obvious to the newbie to understand that he needs 3 files.  instead of  them thinking that the the RED-061.EXE downloaded is the only and actual  red executable needed  to actually run red.   2) why not provide a prompt to select which folder I want to use to " extract"  the 3 files console-2016-6-30-23134.exe, gui-console-2016-6-30-23134.exe, crush-2016-6-30-23134.dll . just my humble suggestions to make it easier on newbies.   Cheers.}
    sent: "2016-10-30T15:06:10.046Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "5815ce71482c168b22cf46ca"
    text: {And try disabling on-demand scan feature of your virus program, many virus programs don't allow generating an executable and block access.}
    sent: "2016-10-30T10:41:53.721Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "58150b7c8ed1c0ff5c415944"
    text: "I thought the same thing @Andrew-College."
    sent: "2016-10-29T20:50:04.025Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5815081a482c168b22ccc7c8"
    text: "actually, nevermind, apologies ^^^^;"
    sent: "2016-10-29T20:35:38.970Z"
    v: 1
    author: "5813c736d73408ce4f318eda"
) #(
    id: "581507d7482c168b22ccc688"
    text: "is this your OS drive by chance?"
    sent: "2016-10-29T20:34:31.283Z"
    v: 1
    author: "5813c736d73408ce4f318eda"
) #(
    id: "581507c07b15d16e55c17eab"
    text: "you're if the f drive"
    sent: "2016-10-29T20:34:08.477Z"
    v: 1
    author: "5813c736d73408ce4f318eda"
) #(
    id: "581507b5806316005dd3ac7b"
    text: "oh"
    sent: "2016-10-29T20:33:57.428Z"
    v: 1
    author: "5813c736d73408ce4f318eda"
) #(
    id: "5815077ec3569a036e31ee3c"
    text: {I believe its less 'locked down' than you root drive would be}
    sent: "2016-10-29T20:33:02.922Z"
    v: 1
    author: "5813c736d73408ce4f318eda"
) #(
    id: "581507645a1cfa016e5e831c"
    text: {Installing to the Documents folder may resolve this.}
    sent: "2016-10-29T20:32:36.532Z"
    v: 1
    author: "5813c736d73408ce4f318eda"
) #(
    id: "5814ffdb0e25dbfa117616c2"
    text: {>also, when you say "maybe your anti virus delete it" , what is it deleting exactly ? the red-061.exe is still in F:/red/ folder. ^/^/My antivirus (avira) deleted the original red.exe and the other files in `C:\ProgramData\Red`, and nothing but disabling and uninstalling it solved the problem}
    sent: "2016-10-29T20:00:27.320Z"
    v: 1
    author: "569c37abe610378809bccdff"
)#(
    id: "5814fe747b15d16e55c153e2"
    text: {[![image.png](https://files.gitter.im/red/red/welcome/3Sns/thumb/image.png)](https://files.gitter.im/red/red/welcome/3Sns/image.png)}
    sent: "2016-10-29T19:54:28.512Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5814fe2b0e25dbfa117610ce"
    text: {@redredwine Do you have access to `C:\ProgramData\Red`? And is there any files?}
    sent: "2016-10-29T19:53:15.367Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5814fde6482c168b22cc9a6a"
    text: {@greggirwin  @redredwine I just followed the same steps on windows 10 and it worked for me, didn't need to unblock even tho it is set to *came from another computer*, also didn't need admin rights}
    sent: "2016-10-29T19:52:06.113Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "5814eeed0e25dbfa1175d67a"
    text: {If you right-click the exe and look at properties, is there a security area at the bottom of the General tab that says it came from the net and is blocked?}
    sent: "2016-10-29T18:48:13.485Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5814ee978ed1c0ff5c40ea89"
    text: {Some locations can be problematic if you have Data Execution Prevention on (Win 7 anyway).}
    sent: "2016-10-29T18:46:47.074Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5814ee4ac3569a036e317721"
    text: {Have you tried just double clicking the exe in Explorer? I don't have Win10, so just looking at what behavior might be different.}
    sent: "2016-10-29T18:45:30.462Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5814ebe85a1cfa016e5e0eab"
    text: {@redredwine^/Hello, I am new to red.  I tried the red/help room - I downloaded the red-061.exe on my windows 10 machine. and ran red-061 -- cli ,  it gave me access denied (although i ran it as an administrator). when I tried running just  red-061.exe  it does nothing, I don't get any red console.^/was wondering if anyone has come across same problem before, and could help me get started.  I must say that my antivirus did not raise any alert while running the command below. ^/Directory of F:\red^/^/10/27/2016  10:38 PM    <DIR>          .^/10/27/2016  10:38 PM    <DIR>          ..^/10/25/2016  09:29 AM           968,539 red-061.exe^/               1 File(s)        968,539 bytes^/               2 Dir(s)  100,930,060,288 bytes free^/^/F:\red>red-061.exe --cli^/Access is denied.^/^/F:\red>  F:\red>red-061.exe^/F:\red>}
    sent: "2016-10-29T18:35:20.327Z"
    v: 1
    author: "58142023d73408ce4f3199a9"
) #(
    id: "5814c9eb482c168b22cbc9f3"
    text: {Cool, I wouldn't need to build the plugin and red locally?}
    sent: "2016-10-29T16:10:19.203Z"
    v: 1
    author: "5813c736d73408ce4f318eda"
) #(
    id: "5814c9c05a1cfa016e5d8e34"
    text: {@Andrew-College Latest VSCode plugin features require the latest auto-build version.}
    sent: "2016-10-29T16:09:36.832Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5814b715482c168b22cb7b7e"
    text: {Hi Dave. ^/I just wanted to check, is the vscode plugin compatible with current Stable of Red or current unstable? I've been looking into using it with current stable which all seems to work well, but the hover seems to crash silently.}
    sent: "2016-10-29T14:49:57.561Z"
    v: 1
    author: "5813c736d73408ce4f318eda"
) #(
    id: "5813cba583a2008d22e450f9"
    text: {Welcome! I'm sure it would be fine to ask about it here}
    sent: "2016-10-28T22:05:25.558Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "5813c78a482c168b22c80c43"
    text: {Hello there. Apologies if this is the wrong channel, but can I ask about the VS-Code plugin?}
    sent: "2016-10-28T21:47:54.472Z"
    v: 1
    author: "5813c736d73408ce4f318eda"
) #(
    id: "580c5446714642af22cca4f9"
    text: ":+1: "
    sent: "2016-10-23T06:10:14.249Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "580c3d0856121b9c7eaf4b2f"
    text: {awesome, just had to register the file type and run with the exe by default}
    sent: "2016-10-23T04:31:04.306Z"
    v: 1
    author: "560119c80fc9f982beb16c0f"
) #(
    id: "580c3cd256121b9c7eaf4adc"
    text: {ok, I can drag and drop a script unto the `red-061.exe`}
    sent: "2016-10-23T04:30:10.592Z"
    v: 1
    author: "560119c80fc9f982beb16c0f"
) #(
    id: "580c3c835af5969e7ef06cd2"
    text: {hi. Using windows 7, can I run a `foo.red` script just by double clicking on it? Ala AHK}
    sent: "2016-10-23T04:28:51.770Z"
    v: 1
    author: "560119c80fc9f982beb16c0f"
) #(
    id: "580482a8614116a2568e1822"
    text: "@dockimbel Ok I've added it. "
    sent: "2016-10-17T07:50:00.100Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "580474261cc4cda456593c04"
    text: {@Mufferaw Please open a ticket about it in the bugtracker on github. We'll fix it at once.}
    sent: "2016-10-17T06:48:06.070Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "58038d8cb68c1ca566be6f1d"
    text: "Looks like a bug..."
    sent: "2016-10-16T14:24:12.089Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "58037fb378bd0d0363ca3a07"
    text: "@Mufferaw BTW, same trouble with `-`."
    sent: "2016-10-16T13:25:07.499Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "58037d0d1cc4cda456562b56"
    text: "@rcqls Thanks! "
    sent: "2016-10-16T13:13:49.983Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "58037c4f30abd799718bbe62"
    text: {```^/Red/System [^/]^/^/^/vector3!: alias struct! [^/    x [float!]^/    y [float!]^/    z [float!]^/]^/vec3-Dfloat: func [^/    vec [vector3!]^/    f [float!]^/    return: [vector3!]^/    /local a vx vy vz^/    ][^/        a: declare vector3!^/        vx: vec/x vy: vec/y vz: vec/z^/        a/x: vx / f a/y: vy / f a/z: vz / f^/        a^/    ]^/^/aa: declare vector3!^/aa/x: 10.0^/aa/y: 5.5^/aa/z: 1.2555^/^/b: 50.0^/^/c: vec3-Dfloat aa b^/print ["C: " c/x " " c/y " " c/z lf]^/```^/^/seems to fix the problem but I am waiting like you the explanation of expert.}
    sent: "2016-10-16T13:10:39.720Z"
    v: 1
    author: "53ecf9f1107e137846baab0c"
) #(
    id: "580375d5b68c1ca566be26de"
    text: {oops, I meant to write -  f / vec/x instead of vec/x /f}
    sent: "2016-10-16T12:43:01.374Z"
    editedAt: "2016-10-16T12:43:50.181Z"
    v: 2
    author: "56ced090e610378809c36532"
) #(
    id: "5803727430abd799718ba31e"
    text: "It's doing f / a/x instead of a/x /f"
    sent: "2016-10-16T12:28:36.718Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "580371ce891a530163147705"
    text: {Hi everyone, I'm trying Red/System and I need some help!^/```^/Red/System [^/]^/^/^/vector3!: alias struct! [^/    x [float!]^/    y [float!]^/    z [float!]^/]^/vec3-Dfloat: func [^/    vec [vector3!]^/    f [float!]^/    return: [vector3!]^/    /local a^/    ][^/        a: declare vector3!^/        a/x: vec/x / f^/        a/y: vec/y / f^/        a/z: vec/z / f^/        a  ^/    ]^/^/aa: declare vector3!^/aa/x: 10.0^/aa/y: 5.5^/aa/z: 1.2555^/^/b: 50.0^/^/c: vec3-Dfloat aa b^/print ["C: " c/x " " c/y " " c/z]^/```^/The output is^/`^/C: 5.0 9.090909090909092 39.8247710075667^/`^/}
    sent: "2016-10-16T12:25:50.393Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "5802b370614116a25688bc61"
    text: {Initial basic needs are what Red needs to bootstrap and become self-hosting.^/^/Red is fully open source. As with all things, someone either does it because they're getting paid or because they want to. If we want it to proceed, we need to help fund it, contribute our time, or both. ^/^/I'm not concerned about a hard 1.0, but am confident they will get it there as soon as they can. So far, they've done very well so far. I have full faith in Team Red.}
    sent: "2016-10-15T22:53:36.418Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58028b25891a5301631222e8"
    text: {Très cool on the GC.  But what defines basic needs? ^/^/Investors? Is Red then at the mercies of investors in the way Rebol was to Rebol Technologies investors? Could Red never be finished if investors pull out? My boss will want to know about this for sure. ^/^/How confident are you guys on the developer team delivering a 1.0 before  the end of June, 2017? That is a lot  of coding time between now and then.}
    sent: "2016-10-15T20:01:41.143Z"
    v: 1
    author: "57ec47d040f3a6eec067e7aa"
) #(
    id: "5801b94e78bd0d0363c52f04"
    text: {A simple GC is planned for the v0.6.4 which will come in a few months and I guess it will be usable for basic needs.^/Advanced GC will come later, probably by the end of next year(?)}
    sent: "2016-10-15T05:06:22.954Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5801a84630abd7997186ae30"
    text: {GC will be here well before 2019. I'm familiar with Delphi. Priorities in Red are defined by investors and what Team Red feels is most important for getting to the next stage. }
    sent: "2016-10-15T03:53:42.851Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580172fa1cc4cda45650664d"
    text: {The old system is in something called Borland Delphi. But the source isn't available  so no LOC count and the old contract coder has died, moved on or retired. The boss says he doesn't want the business stuck that way again. ^/^/He found out about Rebol and Red and said that important stuff could be compiled in Red for any speed needs but much of the system could be interpreted and re-written anytime by high school kids after school if need be because he said that Rebol is too easy compared to other languages like Python or Ruby. He said our only other choice would be Lua though he likes the clean look of Rust, but that is compiled.}
    sent: "2016-10-15T00:06:18.352Z"
    editedAt: "2016-10-15T00:13:33.391Z"
    v: 7
    author: "57ec47d040f3a6eec067e7aa"
) #(
    id: "58017150891a5301630ef74f"
    text: {Cool. You guys have been most helpful.  Red news  and "docs" seem to be spread everywhere (Gitter, Trello, Blogger , etc), but there isn't any clear schedule of milestones attached to dates that is prevalent in the business world. Red started when, way back in what 2011? Does that mean GC might not be implemented until 2019?  ^/^/That is why my boss likes deadlines. Is there a hidden site with a release schedule with firm commitments to dates?^/^/}
    sent: "2016-10-14T23:59:12.668Z"
    editedAt: "2016-10-14T23:59:49.173Z"
    v: 2
    author: "57ec47d040f3a6eec067e7aa"
) #(
    id: "58016fefb68c1ca566b86919"
    text: {Also, make sure your boss knows that you may need to wait for GC in Red as well. }
    sent: "2016-10-14T23:53:19.558Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58016edcb68c1ca566b8664f"
    text: {What is the current system written in, and roughly how large/complex is it?}
    sent: "2016-10-14T23:48:44.966Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58016eae891a5301630ef113"
    text: {i.e. they are both objects with references to defined words. As long as you're not doing funky stuff with binding or trying to redefine things there, you shouldn't have any issues.}
    sent: "2016-10-14T23:47:58.879Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58016e54614116a25684f76a"
    text: "Pretty much."
    sent: "2016-10-14T23:46:28.672Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58016e03614116a25684f690"
    text: {Cool. Thanks guys. ^/^/So system/words in Red is the same as R2? }
    sent: "2016-10-14T23:45:07.870Z"
    v: 1
    author: "57ec47d040f3a6eec067e7aa"
) #(
    id: "58016a598eaaaea366989077"
    text: {Isolate the bits you think will need to change, rather than littering them throughout your code, and porting shouldn't be...any harder than porting between v.N and v.N+1 in any other language.}
    sent: "2016-10-14T23:29:29.720Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58016a1e891a5301630ee64f"
    text: {My current recommendation, like @geekyi, is to use R2. And use vanilla R2 as much as possible. }
    sent: "2016-10-14T23:28:30.160Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580169ea457ae29b71de5aad"
    text: {Assuming you choose R2 to start with, it should be very compatible with Red. Of course, R2 doesn't have a module system, so you can't write your code using it. My first question is what you use things like system/catalog for today?}
    sent: "2016-10-14T23:27:38.404Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580169661cc4cda456504d1e"
    text: {The only module in Red right now is `View`, but the bigger module design isn't done yet.}
    sent: "2016-10-14T23:25:26.218Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58016939b68c1ca566b84d1b"
    text: {There will be differences in all of them, but R3, ironically, changed some fundamental things that Red is going to be R2 compatible with. e.g., R3 defaults to returning binary results, as you would use `read/binary` for in R2.}
    sent: "2016-10-14T23:24:41.678Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5801692e1cc4cda456504c01"
    text: {Hey cool, so R2. But what about the system/words, modularity and context?}
    sent: "2016-10-14T23:24:30.322Z"
    v: 1
    author: "57ec47d040f3a6eec067e7aa"
) #(
    id: "580168ed1cc4cda456504b81"
    text: {@greggirwin agrees with @geekyi. R3 may be an option, but is also missing important pieces. Not all protocols are in place, no way to encap, etc. There are also R3 forks you need to choose from.}
    status: true
    sent: "2016-10-14T23:23:25.409Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "580168b68eaaaea366988c43"
    text: {@geekyi  Yeah, I read this "The high-level language is very similar to Rebol2 (roughly 95% source-compatible), " from an "official" web page, but one sentence  isn't enough for my report to my boss.^/^/I see little things. In R2:^/^/`>> first []^/** Script Error: Out of range or past end^/** Near: first []`^/^/In Red: ^/^/`red>> first []^/== none`^/^/Same in R3:^/`>> first []^/== none`^/^/But the big things have to do with the modules functionality in R3 versus what the Red designer has in mind. It's hard to decide when docs are hard to come by.^/}
    sent: "2016-10-14T23:22:30.268Z"
    editedAt: "2016-10-14T23:23:34.272Z"
    v: 4
    author: "57ec47d040f3a6eec067e7aa"
) #(
    id: "580167c8c5e30d6764378696"
    text: {Red evolved independently from Rebol2. Then rebol2 was opensourced as rebol3, so it is more or less a continuation. After that, red and rebol3 have developped in parallel, sometimes borrowing from each other(?) I'm not familiar with Rebol3 (haven't used yet) others might now more. But I'd chosen R2 for the sole reason that it was stable while Red and Rebol3 are moving targets}
    sent: "2016-10-14T23:18:32.705Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "58016637c5e30d6764378684"
    text: {If that doesn't answer your question, let me know. Also, I'm a bit curious who your boss is and how he found out about rebol :smile: }
    sent: "2016-10-14T23:11:51.558Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "580165ba94b459a576dccc07"
    text: {@JackGritt_twitter Red is alpha. The **tl;dr;** version of things is use R2 for production code.^/If you want things running up quickly, etc. Even though it is somewhat outdated, it has lots of documentation, maturity, stability etc. Most importantly, it still works!}
    sent: "2016-10-14T23:09:46.579Z"
    editedAt: "2016-10-14T23:10:27.282Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "58016392891a5301630ed5b3"
    text: {My boss (regional trucking co) has tasked me with developing our new loads tracking system. He told me to get started coding in one of the Rebols (2 or 3) in code that can be run in Red with the least amount of editing as possible.^/^/Each of the sys objects in Red, Rebol 2 and Rebol 3 have these: `version, build, locale, schemes, options, ports, script, standard, view` ^/^/Unique to Red: `lexer, reactivity`^/Unique to R3: `contexts, dialects`^/Unique to R2: `core, components, user, network, error, stats, user-license`^/^/R2 and R3 share these: product, license. Maybe these are here because both supported commercial products at one time.^/^/Red and R2 share these: `words, console`^/Red and R3 share these: `platform, catalog, modules, codecs, state` ^/^/The Red `system/catalog` seems empty. So too does the Red `system/modules`. The R3 `system/catalog` has all of the built-in function names in blocks and the system/modules has a bunch of code. Also, the `system/state` between Red and R3 don't match at all.^/^/So does that mean Red is more like R3 in the way R3 copied words into `system/context/user` because of supporting `modules` or is Red more like R2 in there being one global `system/words` because R2 lacked modules?^/^/Red seems to have or intends to have the same built-in functions as R3, except Red 'function replacing R2/R3 'funct and ditching 'function. So Red seems to be more like R3 and less like R2 when it comes to available functions. .^/^/My boss said we can't write in Red yet because Red is missing dates and our scheduling app needs dates. He says we will switch to Red as soon as Red adds protocols and dates. ^/^/So given all of that, would it be better to write near production code now in R3 becaues of more overlap in functions or in R2 because of system/words? ^/^/Is there something he could read on Red modules and how modularity going to work in Red? And is there something he could read on Red that compares function to function for every function to R3 and R2?}
    sent: "2016-10-14T23:00:34.482Z"
    editedAt: "2016-10-14T23:05:00.573Z"
    v: 6
    author: "57ec47d040f3a6eec067e7aa"
) #(
    id: "5801022a614116a25683405c"
    text: {That's worth a ticket if there isn't already one there. It should just return the function value.}
    sent: "2016-10-14T16:04:58.749Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "58009488b68c1ca566b4edb5"
    text: {@greggirwin That's very nifty! When I was playing around with this I  got a  crash by trying:^/`^/reduce :append^/`}
    sent: "2016-10-14T08:17:12.102Z"
    v: 1
    author: "56ced090e610378809c36532"
)#(
    id: "57ffc1cf1cc4cda4564a05bb"
    text: {You could also do it by storing references to the actual funcs. Neither way is better, just different. ^/```^/red>> hit-list: reduce [:append]^/== [make action! [[...^/red>> a: pick hit-list 1^/== make action! [[..^/red>> a [] 1^/== [1]^/red>> hit-list/1 [] 2^/== [2]^/```}
    sent: "2016-10-13T17:18:07.601Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ff3367457ae29b71d5ad8f"
    text: "@endo64 Thanks!"
    sent: "2016-10-13T07:10:31.250Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ff32f678bd0d0363bbeba4"
    text: "You can do like this: `do reduce [b r]`"
    sent: "2016-10-13T07:08:38.961Z"
    editedAt: "2016-10-13T07:09:15.501Z"
    v: 2
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57ff32e5614116a2567c3c2f"
    text: {This is different then Rebol, it works as you did in Rebol but not in Red. }
    sent: "2016-10-13T07:08:21.284Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57ff2a42614116a2567c1a3b"
    text: "Am I going about this the wrong way?"
    sent: "2016-10-13T06:31:30.338Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ff2a02b68c1ca566af88cc"
    text: {```^/red>> a:  HIT-LIST/(:i + 1)/6^/== SPHERE-hit^/red>> do a^/*** Script Error: SPHERE-hit is missing its r argument^/*** Where: SPHERE-hit^/red>> do a r^/*** Script Error: SPHERE-hit is missing its r argument^/*** Where: SPHERE-hit^/```^/I am trying to get the name of a function from a block and then do the function but I can't seem to pass the arguments to the function. }
    sent: "2016-10-13T06:30:26.731Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57fa7ea914e9dbfd785762dd"
    text: {@gour based on trello board, 13% :p check qtxie's branch}
    sent: "2016-10-09T17:30:17.189Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57fa7174dfe82a365b0e9ab8"
    text: {@rebolek ok. thank you. how far is gtk for linux? it's hard to estimate based on trelloboard...}
    sent: "2016-10-09T16:33:56.483Z"
    editedAt: "2016-10-09T16:34:26.968Z"
    v: 3
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57fa325b14e9dbfd78575fc3"
    text: {More info about topics: https://gitter.im/gitterHQ/topics/topic/57f378d629de20202ee0d4b1/welcome-to-topics-readme-first}
    sent: "2016-10-09T12:04:43.554Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57fa3241470c6bb20f5dd927"
    text: {The new gitter Topics turned out to be more heavyweight than I expected; was looking for a more lightweight alternative to rooms, i.e. inline/threaded conversations. May turn out to be a feature like forums, etc..}
    sent: "2016-10-09T12:04:17.570Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57fa3166a9a0a33375301911"
    text: {gitter chat FAQs: https://gitter.im/gitterHQ/topics/categories/faqs}
    sent: "2016-10-09T12:00:38.132Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57fa29210aa72e3c5be8962e"
    text: {@gour 0.6.2 will be released when libRed is ready. I can’t say if it takes days or (few) weeks, but it will be Soon™ ;)}
    sent: "2016-10-09T11:25:21.747Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f9fa91a7c618cd26f7007d"
    text: {@PeterWAWood hmm, FreeBSD has linux comp. layer which enables one (under 11.x) to run even 64bit apps, but in  Red-2 everything should be buildable from Red source and therefore possibly running same as tons of other stuff which is otherwise written for Linux...if FreeBSD can use GNOME, KDE...}
    sent: "2016-10-09T08:06:41.592Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57f9f758d6251fd126a39704"
    text: {I'm doubtful that a Linux GTK+3 GUI will run on FreeBSD.}
    sent: "2016-10-09T07:52:56.190Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57f9f713a7c618cd26f6f978"
    text: {I think it is unlikely that the Red team will develop a GUI for BSD. Im}
    sent: "2016-10-09T07:51:47.211Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57f9e812d6251fd126a3739e"
    text: {however, GUI on Linux (FreeBSD) seems to be still far usability for real use}
    sent: "2016-10-09T06:47:46.336Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57f9e7c784f1db061494f9dc"
    text: {@rebolek i have a feeling that 0.6.2 was supposed to be already relased, but possibly progress has been made in parallel on other sides}
    sent: "2016-10-09T06:46:31.439Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57f9e76d68f560d80ced0f1a"
    text: "thank you, all, for your input?"
    sent: "2016-10-09T06:45:01.659Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57f9da66dfe82a365b0cef15"
    text: {No problem. You both made it clear that Red is usable on FreeBSD without a license or SDK, which I muddled a bit.}
    sent: "2016-10-09T05:49:26.371Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f9d981dfe82a365b0cecf8"
    text: {@PeterWAWood I see. I misunderstand him, because I never build Red executable. I build (gui-)console or compile scripts from Rebol. Sorry for the confusion.}
    sent: "2016-10-09T05:45:37.308Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f9d8b268f560d80cece27c"
    text: {@rebolek I think @greggirwin was referring to building a red executable.}
    sent: "2016-10-09T05:42:10.632Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57f9d8a0dfe82a365b0ceb1d"
    text: {I stand corrected, but what I meant was that you can't build Red, not that you can't run it.}
    sent: "2016-10-09T05:41:52.829Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f9d30684f1db061494c14d"
    text: {*is Red on 'planned schedule' as far as progress to 1.0* - it is, just check [Trello](https://trello.com/b/FlQ6pzdB/red-tasks-overview) to see the steps to 1.0.}
    sent: "2016-10-09T05:17:58.713Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f9d24d68f560d80cecd2cf"
    text: {@gour As @PeterWAWood said, @greggirwin is wrong here, you do not need Rebol SDK license. Red’s compiler needs the free version only on all supported platforms. }
    sent: "2016-10-09T05:14:53.024Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f9cefa84f1db061494ba29"
    text: {@greggirwin i see...is Red on 'planned schedule' as far as progress to 1.0 (and eventually 2.0) is concerned?}
    sent: "2016-10-09T05:00:42.633Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57f979c068f560d80cec2103"
    text: {@gour You don't need an R2 SDK to run Red on FreeBSD. A copy of Rebol/Core for FreeBSD from the Rebol downloads page will suffice as you can run Red from source.^/^/There may be some bugs in Red under FreeBSD. I used to run the tests on a FreeBSD VM but since I've upgraded both the OS and Virtual Box on my machine, I cannot get a FreeBSD VM to run on it.^/^/It would be good if you could install Red under FreeBSD and run the tests from time-to-time.}
    sent: "2016-10-08T22:57:04.172Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57f97272dfe82a365b0c0403"
    text: {FreeBSD is a supported target platform, which you can cross-compile to. The current toolchain is in R2, and you'll need a license to build Red with it. That may be a tough. I don't even know if you can get an R2 SDK for FreeBSD. Once Red is self-hosted, that problem will go away.}
    sent: "2016-10-08T22:25:54.704Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f9611868f560d80cebe0d3"
    text: "what is the prospect of running Red on FreeBSD?"
    sent: "2016-10-08T21:11:52.900Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57f91c7568f560d80ceadc6a"
    text: {@greggirwin thanks for that, you've given me more to think about!}
    sent: "2016-10-08T16:19:01.196Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f91753dfe82a365b0acdc9"
    text: "And really nice work on the ray tracer!"
    sent: "2016-10-08T15:57:07.372Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f917180aa72e3c5be5b316"
    text: {:point_up: [October 8, 2016 12:17 AM](https://gitter.im/red/red/welcome?at=57f88f7970fcb5db0c3bf64c) I recently wrote https://gist.github.com/greggirwin/a52f1c9c197b50f7a1b6e80f69828751 just for fun. }
    sent: "2016-10-08T15:56:08.938Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f8fa734fde7203141d5244"
    text: {@dockimbel Thanks. Oddly, when I compiled this, it didn't work.}
    sent: "2016-10-08T13:53:55.074Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f8f95c0aa72e3c5be55049"
    text: {@Mufferaw Very nice! :clap:  You could greatly speed it up by porting some of the Red functions to routines (Red/System).}
    sent: "2016-10-08T13:49:16.650Z"
    editedAt: "2016-10-08T13:50:17.851Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57f8f5d94fde7203141d456e"
    text: {Here is the result, it's a very simple raytracer. It draws a single sphere shaded according to surface normals.^/https://gist.github.com/Mufferaw/e1769736a413a2b5fc47b6b11e655b3d}
    sent: "2016-10-08T13:34:17.782Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f8be2abb20dfad43c41fc5"
    text: {@Mufferaw Also:^/```^/red>> i: make image! 2x2^/== make image! [2x2 #{^/FFFFFFFFFFFFFFFFFFFFFFFF}]^/red>> repeat width i/size/x [repeat height i/size/y [i/(as-pair width height): random 255.255.255]]^/== 212.35.106^/red>> i^/== make image! [2x2 #{^/845176F48F4EDE505AD4236A}]^/```}
    sent: "2016-10-08T09:36:42.786Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f8bc9068f560d80ce9bc47"
    text: "@rebolek thanks again! "
    sent: "2016-10-08T09:29:52.115Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f8b96bbb20dfad43c41fa5"
    text: {```^/red>> i: make image! 2x2^/== make image! [2x2 #{^/FFFFFFFFFFFFFFFFFFFFFFFF}]^/red>> repeat p length? i [i/:p: random 255.255.255]^/== 120.170.151^/red>> i^/== make image! [2x2 #{^/8EDA3A5CE21F7D2F5878AA97}]^/```}
    sent: "2016-10-08T09:16:27.214Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f8b93714e9dbfd785751b6"
    text: "You have to put the values in later."
    sent: "2016-10-08T09:15:35.639Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f8b92dbb20dfad43c41fa0"
    text: {@Mufferaw No, you can’t create image from block of tuples.}
    sent: "2016-10-08T09:15:25.959Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f8b77570fcb5db0c3c51de"
    text: {:worried:  I'm not very good at explaining myself, sorry. I want to take the img block and make an image from the values}
    sent: "2016-10-08T09:08:05.067Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f8b73184f1db061491c4fc"
    text: {```^/img: []^/; some loops here, inside the loop I have this:^/append img make tuple! reduce [ir ig ib 0]^/```^/}
    sent: "2016-10-08T09:06:57.740Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f8b68fd6251fd126a03dbb"
    text: {will i have to loop through the image and change each value one by one?}
    sent: "2016-10-08T09:04:15.123Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f8b6360aa72e3c5be49ffa"
    text: {@rebolek When I make the image! can the spec include a block of  many tuples? I've made block with a bunch of tuples, but when I try to make with that I get an error. }
    sent: "2016-10-08T09:02:46.857Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f8986e470c6bb20f5dc8cf"
    text: {```^/red>> i: make image! reduce [100x100 red]^/== make image! [100x100 #^{^/FF0000FF0000FF0000FF0000FF0000FF0000FF0000FF0000FF0000FF0000^/FF0000FF0000FF0000FF0000FF0000FF0000FF0000FF0000FF0000FF0000^/F^/```}
    sent: "2016-10-08T06:55:42.354Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f89857470c6bb20f5dc8cd"
    text: "However, `spec` can be a `block!`:"
    sent: "2016-10-08T06:55:19.087Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f89846470c6bb20f5dc8ca"
    text: {So `pic: make image! 200x100 img` is same as `(pic: make image! 200x100) (img)`}
    sent: "2016-10-08T06:55:02.827Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f8982e14e9dbfd78575056"
    text: {@Mufferaw `make` takes two arguments, type and spec}
    sent: "2016-10-08T06:54:38.158Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f8978adfe82a365b096f54"
    text: {My other question was about image! I couldn't find much information about it. I've succeed in making totally black image,  but I don't know how the values should be formatted. ^/`pic: make image! 200x100 img`^/img is a block of tuples }
    sent: "2016-10-08T06:51:54.484Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f893694fde7203141c459a"
    text: ":smile:  Thanks, I'll catch on someday"
    sent: "2016-10-08T06:34:17.087Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f89317a9a0a33375300a6e"
    text: {@Mufferaw Of course, just use `reduce`:^/```^/red>> make tuple! reduce [r g b]^/== 1.2.3^/```}
    sent: "2016-10-08T06:32:55.184Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "57f892c984f1db06149173b9"
    text: "` make tuple! [ r g b]`"
    sent: "2016-10-08T06:31:37.270Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f892b568f560d80ce951e3"
    text: {@rebolek  is it possible to use 'variables' ? Like:}
    sent: "2016-10-08T06:31:17.926Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f890e7470c6bb20f5dc89d"
    text: {@Mufferaw `to` is not done yet, but you can use `make`:^/```^/red>> make tuple! [1 2 3]^/== 1.2.3^/```}
    sent: "2016-10-08T06:23:35.591Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f88f7970fcb5db0c3bf64c"
    text: {A couple more questions...first, how can I make tuple? (ex to tuple! [ r g b] ) }
    sent: "2016-10-08T06:17:29.504Z"
    editedAt: "2016-10-08T06:19:21.856Z"
    v: 2
    author: "56ced090e610378809c36532"
) #(
    id: "57f7fe6aa7c618cd26f1a679"
    text: "Nice nudge. :^^)"
    sent: "2016-10-07T19:58:34.826Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7fe5784f1db06148fddf9"
    text: {I admit it, I'm hoping that this will provide a little encouragement.  :-)}
    sent: "2016-10-07T19:58:15.446Z"
    v: 1
    author: "57e0430e40f3a6eec0661e65"
) #(
    id: "57f7fdbe84f1db06148fda94"
    text: {The OS X GUI is *almost* here. Maybe in time for you.}
    sent: "2016-10-07T19:55:42.743Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57f7fd40dfe82a365b07cac2"
    text: {  Hi everybody. I poked my head into this chat a couple of weeks ago; I'm the guy who is teaching a course in programming language paradigms. I don't have a good language to teach to exemplify reactive programming, and I'd love to make Red that language. Most of my students have Macs. Could I get a stable Mac version of View/Vid to try out and see if there's enough of it to make an assignment? The opening I would have for it in my current schedule is October 24.^/}
    sent: "2016-10-07T19:53:36.076Z"
    v: 1
    author: "57e0430e40f3a6eec0661e65"
) #(
    id: "57f7b24d4fde72031419695b"
    text: "origin was roughly [0 0 0]"
    sent: "2016-10-07T14:33:49.397Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f7b1b568f560d80ce67357"
    text: {@rebolek Ooooh! I didn't know that! Thanks!^/ @DideC  I got the correct result, if t is 0.5 then the result would be roughly [12.5 12.5 12.5] }
    sent: "2016-10-07T14:31:17.823Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f7b12ba9a0a333752ff905"
    text: {Also, you do not need to specify `return`, last value is returned automatically.}
    sent: "2016-10-07T14:28:59.166Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7b11714e9dbfd78573f68"
    text: {So you can multiply `vector!` by something, but not something by `vector!`.}
    sent: "2016-10-07T14:28:39.338Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7b0f1470c6bb20f5db720"
    text: {Hi @Mufferaw it is usual that the result of infix function depends on type of first value.}
    sent: "2016-10-07T14:28:01.575Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57f7b0e0d6251fd1269d30c3"
    text: "What result do you expect ?"
    sent: "2016-10-07T14:27:44.698Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57f7af7884f1db06148e7460"
    text: {I used make vector! [float! 32 [25.0 25.0 25.0]] to make the vector!}
    sent: "2016-10-07T14:21:44.609Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f7af07dfe82a365b067796"
    text: "oh and direction is a vector!"
    sent: "2016-10-07T14:19:51.237Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57f7aeef4fde7203141959f2"
    text: {Hello everyone. I have this function : ^/```^/point_at_parameter: function [t[float!]][^/    return origin + (t * direction)^/    ]^/```^/and it gives this error:^/^/```^/*** Script Error: vector! type is not allowed here^/*** Where: *^/```^/^/However, if I switch the t and direction around, like this:^/```^/return origin + (direction * t)^/```^/it works, but what's the difference??}
    sent: "2016-10-07T14:19:27.686Z"
    v: 1
    author: "56ced090e610378809c36532"
) #(
    id: "57ec3ab7857ab70f7d4ccf20"
    text: "K"
    sent: "2016-09-28T21:48:39.069Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ebef73e4e41c6a4aff8852"
    text: {You can introduce new types, but it's very different than having them be part of the language, automatically lexed, etc. For example, a lot of languages have DateTime libs, but how are dates and times represented in code?^/^/I don't know what the plans are for UDTs and how they will fit into the very tight lexical space. As you say, preprocessing may be the way, and Doc has already shown how that can be done.}
    sent: "2016-09-28T16:27:31.082Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ebeb1eca69aeb745ba4957"
    text: {the only similar thing that comes to my mind is Lisps reader macros, they allow you to insert custom code right into parsing algorithm, producing everything you want}
    sent: "2016-09-28T16:09:02.421Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ebeac8ca69aeb745ba475f"
    text: {since Red approach is kind of unique - have a separate syntax representation of every type, I was wondering how will it work with user defined types}
    sent: "2016-09-28T16:07:36.568Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ebea80857ab70f7d4b73d9"
    text: {@greggirwin few builtin, but almost every language has a way to introduce new types}
    sent: "2016-09-28T16:06:24.157Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ebe7ec54302caa6f2828f3"
    text: {@maxim, my point wasn't about user defined types, but about the number of native types a language understands. Most langs have just a few, while Redbol has ~45.}
    sent: "2016-09-28T15:55:24.237Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ebe3feca69aeb745ba27c8"
    text: {@JacobGood1 Custom Syntax: I would like to add such support, though, it won't be easy to use, as one would need to be aware of all the syntactic rules in order to avoid introducing ambiguous syntax. Expanding our core runtime library with more datatypes is in the plans, though, such new datatype really need to be useful to a great number of users in order to make it in. Anyway, you'll be able to load dynamically your own custom datatypes, so this wouldn't be a limitation.}
    sent: "2016-09-28T15:38:38.545Z"
    editedAt: "2016-09-28T15:40:41.172Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ebe2df783fe9b945a44447"
    text: {@dockimbel speaking of custom data-types will we also be able to introduce syntax for these?  If the red users find that a they are using someones data type quite often would it have a chance to become part of the Red standard?}
    sent: "2016-09-28T15:33:51.817Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ebbc3cca69aeb745b96ac6"
    text: {@maximvl See by yourself in the source code from the links I posted. We have several thousands LOCs written in Red in the runtime library.}
    sent: "2016-09-28T12:49:00.479Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57ebb69d35e0f31c6c4cc5b6"
    text: {@dockimbel thanks! I was wondering if Red is already suitable for code with all those issues, but apparently it is}
    sent: "2016-09-28T12:25:01.268Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57eba80f0096141655228990"
    text: {@maximvl The Red toolchain is written in Rebol (+ a compression library written in R/S). The Red runtime library is mostly written in R/S ([red/runtime](https://github.com/red/red/tree/master/runtime)) and partially in Red ([red/environment](https://github.com/red/red/tree/master/environment)).  For [View module](https://github.com/red/red/tree/master/modules/view/), it is written in Red, only the OS-specific backends are in R/S (like Windows [one](https://github.com/red/red/tree/master/modules/view/backends/windows))}
    sent: "2016-09-28T11:22:55.015Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57eb99e6c90661384a6e36dc"
    text: "@maximvl of course"
    sent: "2016-09-28T10:22:30.979Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb997035e0f31c6c4c5e78"
    text: "@rebolek I think most of it is still R/S"
    sent: "2016-09-28T10:20:32.129Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57eb9836d02791686c3fa317"
    text: {According to GitHub, it’s  Red 78.7% and Rebol 21.2% }
    sent: "2016-09-28T10:15:18.278Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb97d4857ab70f7d4a1e7f"
    text: "hm, okey, I see"
    sent: "2016-09-28T10:13:40.070Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57eb97d1e5887b81555d2f40"
    text: "No other language is used."
    sent: "2016-09-28T10:13:37.996Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb97a4e5887b81555d2f3d"
    text: {@maximvl Red is written in Red and Red/System. Only the R/S compiler is written in Rebol (that will change after 1.0 when the compiler will be rewritten in Red).}
    sent: "2016-09-28T10:12:52.289Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb97710096141655224c98"
    text: {There are a lot of bindings on contrib page on official website}
    sent: "2016-09-28T10:12:01.893Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57eb976aca69aeb745b8ebb2"
    text: "@rebolek nope, in Red itself"
    sent: "2016-09-28T10:11:54.818Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57eb975dab9ba81255edcd97"
    text: {since there are still no big numbers and decent IO}
    sent: "2016-09-28T10:11:41.678Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57eb9753c90661384a6e36a7"
    text: {@maximvl you mean in some other project than Red itself?}
    sent: "2016-09-28T10:11:31.654Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb9737857ab70f7d4a1cca"
    text: {@rebolek ye, I want to understand if Red code is already used in a project}
    sent: "2016-09-28T10:11:03.248Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57eb9730e4e41c6a4afe0fd7"
    text: {If you look at the source, you can find lots of Red/System}
    sent: "2016-09-28T10:10:56.343Z"
    editedAt: "2016-09-28T10:11:13.882Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57eb971454302caa6f26d521"
    text: {@maximvl for example, in windows, it links to win32 api, winGDI, which is written in c, (c++?)}
    sent: "2016-09-28T10:10:28.762Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57eb9650d02791686c3fa2f5"
    text: "It uses standard OS GUI libraries."
    sent: "2016-09-28T10:07:12.561Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb9646e045d19955069d89"
    text: {@maximvl I am not sure I understand. Red/View is written in Red(/System).}
    sent: "2016-09-28T10:07:02.438Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb9629ab9ba81255edc91e"
    text: "@rebolek I mean, what Red/View is written in?"
    sent: "2016-09-28T10:06:33.730Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57eb95f5c90661384a6e366f"
    text: "For GUI? Red/View ;)"
    sent: "2016-09-28T10:05:41.280Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb958cab9ba81255edc6d7"
    text: {hm, how much code currently is written in Red? Red/System? what do you use for GUIs?}
    sent: "2016-09-28T10:03:56.943Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57eb8dd7c90661384a6e3577"
    text: "Wow, that’s much sooner than I though :)"
    sent: "2016-09-28T09:31:03.023Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57eb8a0c54302caa6f26a489"
    text: {@maximvl We'll try to add support for it after 0.8.0, once we have modules support.}
    sent: "2016-09-28T09:14:52.016Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57eb801c857ab70f7d49cae6"
    text: "ok, that's all I wanted to know )"
    sent: "2016-09-28T08:32:28.748Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57eb7c89e045d19955069a6e"
    text: {I think yes (I can’t support it with any citation now, sorry), but definitely not before Red reaches 1.0 and even then I think it’s not very high priority.}
    sent: "2016-09-28T08:17:13.722Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
)#(
    id: "57eb78e4ca69aeb745b87fb2"
    text: {@greggirwin ^/>What I don't know, is why people cling to the ~6 datatype model in languages.^/^/This is interesting point, are there any plans to support custom datatypes in Red?}
    sent: "2016-09-28T08:01:40.214Z"
    editedAt: "2016-09-28T08:01:44.811Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e83b1a2d01d3ff191fe5ed"
    text: {Right, and because we're a small team and community, we have to pick targets carefully.}
    sent: "2016-09-25T21:01:14.934Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e838bd16132d3143926bb1"
    text: {Excellent points! It really depends on WHO the developer is( what their primarily interested in coding ) a not necessarily what tool their using to do it. A demoscene hacker will have far different taste in tools than a corporate database developer.}
    sent: "2016-09-25T20:51:09.679Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e83738939bfe3342f91281"
    text: {That's a tough one. Unfortunately, it's not as easy as importing ideas from other languages. You'll find that we argue, er, *discuss* function naming and word choice very heavily, hoping to maintain something like conceptual integrity in the language. People can, and should, try all kinds of things, that they've used elsewhere. We learn from those. The biggest wins come from classic principles in how to create better software, but those have to be updated to match trends we know will come and go.^/^/For example, a module system will come, but what's the best example for how to structure things? There is no one best way. Do we do it like Ada, or do we do it like Linda? Do we do it like Java, or like JS/NPM? The same is true for methodologies and bigger picture tools like orchestration and workflow. Can we push back, hard, to make simplicity a feature? Can we put YAGNI on steroids (which has to be some kind of inversion principle ;^^)?^/^/We can learn from modern efforts in functional languages, and how helpful it can be to be able to inspect systems. Live Coding is all the rage, which is a bit funny to me. ^/^/What I don't know, is why people cling to the *~6 datatype* model in languages. ^/^/To conclude this unintentional mini-essay, I don't know. :^^) We can build things that might aid adoption, for those who think they need *Thing X*, but we run the risk of people not changing their thinking, and limiting their ability to get the most out of Red. Maybe the answer lies in that. We need tools to help people transition to Red, to explore it, to play.^/^/I went to a talk by Andy Hunt not long ago, and he is going post-Agile. Seeing this happen in a lot of areas, my extrapolation is that there is no "one size fits all" solution. *Rebolers* have a long history of rolling their own tools, ad hoc, and we don't push them and try to make them NPM-ish packages (don't get me started). Maybe it's the Forth mindset for some. We build what we need, when we need it. ^/^/To conclude my conclusion (oy), we need to empower people; make them believe that they can do it *themselves*, rather than relying on a huge, generic ecosystem. Let's find things that help us do that, and learn from them. Logo may be the best examplar for that.}
    sent: "2016-09-25T20:44:40.600Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e8304510b1e2e3780f3824"
    text: {Hrrrmmm....since you obviously have more experience with Red, Rebol, and other DSLs than I do...what features from other tools/languages do you think would be a benefit to Red developers?}
    sent: "2016-09-25T20:15:01.913Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e82fb67ee098d615f29e75"
    text: "Absolutely."
    sent: "2016-09-25T20:12:38.529Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e82fa1f254af97786678da"
    text: {Don't get me wrong. I don't think we should be re-inventing Spark in Red. But making a lot of common security flaws at least detectable would be a nice selling point.}
    sent: "2016-09-25T20:12:17.846Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e82ef9f36c42d5182ab43a"
    text: {Agreed. Dialects can tightly constrain what you're allowed to say, for your own good.}
    sent: "2016-09-25T20:09:29.997Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e82ed47ee098d615f29bf6"
    text: {Make certain things statically checkable at compile time, as an option. I think Red  and Rebol are great as is, but  adding these things would be a big boost in the new  "security" conscious internet.  }
    sent: "2016-09-25T20:08:52.456Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e82e44db049da32cc95c3a"
    text: {Yup. And in your field, constraints and controls on values built in.}
    sent: "2016-09-25T20:06:28.216Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e82dabf254af977866733a"
    text: {Agreed. They certainly have a lot of potential. I think Red has a lot of potential in this regard. We could make Red subsettable. i.e. Let the developer optionally select certain features of the runtime/language to turn off so as to facilitate a more streamlined runtime and safer language subset.}
    sent: "2016-09-25T20:03:55.937Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e82cd7f36c42d5182aaef0"
    text: {DSLs, in recent history, have been a lot like 3D in GUIs in the 90s IMO. ;^^)}
    sent: "2016-09-25T20:00:23.945Z"
    editedAt: "2016-09-25T20:00:54.162Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e82c9e7ee098d615f291d7"
    text: {It's a wide topic, and DSLs are far from clearly defined. The risks, then, are in the design and implementation of the DSL, to make things safer and more performant, as well as easier.}
    sent: "2016-09-25T19:59:26.058Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e82bf8db049da32cc9520b"
    text: {DSLs, when used in the correct places, actually contribute to safety and security. But too often people just use them to cut down on the workload without actually considering the consequences.}
    sent: "2016-09-25T19:56:39.913Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e82af810b1e2e3780f2864"
    text: {:^^) I've always told my kids to respect power tools. Limbs don't grow back yet. Safety first. But maybe using DSLs for code generation could still be useful in places. Clearly not telling *you* something you don't already know.}
    sent: "2016-09-25T19:52:24.227Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e82815f254af9778666316"
    text: {Now the boss want's to be able to control some of his machines through his smartphone. Grrrrr....Well those are the challenges we live for, right? ;->}
    sent: "2016-09-25T19:40:05.798Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e827743ce594735ca1c127"
    text: {I wont have one of my co-workers going home without a limb.}
    sent: "2016-09-25T19:37:24.880Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e8274210b1e2e3780f1d15"
    text: {Yeah. But I wouldn't take Red quite as far as they do. The primary system is all written in Spark/VHDL. Everything needs to be proven.(Using Altelier B for that.)}
    sent: "2016-09-25T19:36:34.917Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e826d97ee098d615f27959"
    text: "Keep us posted in any case."
    sent: "2016-09-25T19:34:49.628Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e826c89df4ea9630e6b836"
    text: {Ah. Are you following Atronix's R3 version? That's what they do as well.}
    sent: "2016-09-25T19:34:32.495Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e826a4db049da32cc940cb"
    text: "Or is the better way to set up a RasPi, et al?"
    sent: "2016-09-25T19:33:56.517Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e826929df4ea9630e6b679"
    text: {Not really. The boss says he's going to give me permission to post it up under the GPL. Gotta wait for it though. My "professional" job is doing in-house industrial machine controls.}
    sent: "2016-09-25T19:33:38.625Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e826199df4ea9630e6b40c"
    text: {Is there a quick and easy way to play with your Oberon on Windows?}
    sent: "2016-09-25T19:31:37.575Z"
    editedAt: "2016-09-25T19:33:12.919Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e825eedb049da32cc93f14"
    text: {Really wont know until after the holidays though. Burning the candle at both ends right now.}
    sent: "2016-09-25T19:30:54.527Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e825a2f36c42d5182a8546"
    text: ":^^)"
    sent: "2016-09-25T19:29:38.013Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e825423ce594735ca1b777"
    text: {Right now I have somewhat functional version of ColorForth + Oberon v 7. Red might just be the tool that rounds out my triangle.}
    sent: "2016-09-25T19:28:02.199Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e824403ce594735ca1b3d9"
    text: "Very cool!"
    sent: "2016-09-25T19:23:44.752Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e823ee0a0d295a2c491d70"
    text: {Well, I was actually thinking about integrating Red into the Oberon system so thoroughly that we really dont have to think about where one ends and the other begins. They seem to be a perfect compliment for different programming tasks.  Red excels at a lot of tasks that Oberon doesn't; and vice versa. }
    sent: "2016-09-25T19:22:22.093Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e8235d7ee098d615f267c1"
    text: "To recap my long post: Oberon, yes! Cool. ;^^)"
    sent: "2016-09-25T19:19:57.449Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e823126459dcbc731bda99"
    text: {Shoot. Gitter seems to have lost my message entirely now, once I tried to delete what looked like a dupe post.}
    sent: "2016-09-25T19:18:42.144Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e822e73ce594735ca1b05b"
    text: {Glad to see someone keeping the Oberon flame alive.}
    sent: "2016-09-25T19:17:59.198Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e822b07ee098d615f263c7"
    text: "Gitter having issues here."
    sent: "2016-09-25T19:17:04.048Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e822aef80c11f15caf7430"
    text: {It is surely possible to implement things at different levels in Red, just has to be prioritized, or have someone champion it and do it on their own.}
    sent: "2016-09-25T19:17:02.216Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e8224bcf47cb9071f87521"
    text: ""
    sent: "2016-09-25T19:15:22.770Z"
    editedAt: "2016-09-25T19:18:07.135Z"
    v: 3
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e822377ee098d615f2632f"
    text: {I've always thought Oberon was a cool system. Of course, it was one of the first "from the ground up" system designs I read a book on. I had a Windows install, years ago, but never quite got comfortable enough to use it daily. Toolboxes were a great idea, and I did write an experimental track layout system at one point. Even still have Wirth's Compiler Construction with a 3.5" floppy in the back. :^^)}
    sent: "2016-09-25T19:15:03.449Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e81f15efb670246664ba2a"
    text: "Could even design a Red chip in VHDL."
    sent: "2016-09-25T19:01:41.203Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e81ec24ae02c250fc5f01e"
    text: {Alot of good ideas floating around here. Have you considered going halfway between a "malloc()" model and a full GC system? i.e. A Region Based memory allocation scheme? Been doing this for my own experiments with the other extreme end of the "full stack language" and "simplicity" spectrum.(www.projectoberon.com) Thinking Red should be a good compliment to the rest of the system I'm building on my Spartan 8 board.}
    sent: "2016-09-25T19:00:18.043Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57e32054fa660dd95ffe9990"
    text: {@endo64 ^/> Hi @TimeSeriesLord I think Doc prefer to use `Red` instead of `RED` ^/^/Thanks. Red is a horrible name. It's so commie sounding.^/^/Blox would have been much better. }
    sent: "2016-09-22T00:05:40.943Z"
    editedAt: "2016-09-22T00:07:05.311Z"
    v: 2
    author: "57e063bd40f3a6eec0662315"
) #(
    id: "57e2c9ae90ba43d21736af52"
    text: {Very cool at a glance. There's probably a lot we can learn from that.}
    sent: "2016-09-21T17:55:58.935Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e2c8a927a8458f7f3414a9"
    text: "I haven't seen terra, but I'll check it out."
    sent: "2016-09-21T17:51:37.691Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e2c05d18291e10488eb441"
    text: {there's also SymbolicC (i think that's the name?) as a part of mathematica. it's properietary, though, and also requires a full C compilation step (really slow)}
    sent: "2016-09-21T17:16:13.976Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2c04390ba43d2173688d5"
    text: "it's just fine for scripting, though"
    sent: "2016-09-21T17:15:47.007Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2c03727a8458f7f33f2c0"
    text: {it uses lua as the high-level layer, though, which is considerably less suited for making compact DSLs}
    sent: "2016-09-21T17:15:35.586Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2c029fa660dd95ffd0d83"
    text: {terra is similar, i don't know if you've seen it before}
    sent: "2016-09-21T17:15:21.042Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2c01f27a8458f7f33f27c"
    text: "yeah"
    sent: "2016-09-21T17:15:11.355Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bfc3aabc89857fbfa81e"
    text: {I get really excited thinking about the line *between* Red and Red/System. We tend to think in terms of high level dialects for people, but they are just as applicable when they are, themselves, layers and translation targets.}
    sent: "2016-09-21T17:13:39.083Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e2bf24c8af41d45f34fd18"
    text: {One of the best things, IMO, is that design is given deep thought, so what we learn now has long term leverage. Some things will change, especially when Red is self-hosted.}
    sent: "2016-09-21T17:11:00.151Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e2bed0c8af41d45f34fafd"
    text: "i'm not in any rush"
    sent: "2016-09-21T17:09:36.377Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bec9df21a75730174753"
    text: "yeah"
    sent: "2016-09-21T17:09:29.262Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2beb4aabc89857fbfa47b"
    text: {Correct, but it's still very early days. Nenad has a lot of very interesting ideas for the future.}
    sent: "2016-09-21T17:09:08.549Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57e2bea9fa660dd95ffd07e5"
    text: {it looks like you get a lot of control over alignment already, though}
    sent: "2016-09-21T17:08:57.972Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2be95c8af41d45f34f907"
    text: {e.g. ways to access semi-platform-specific instructions for things like SIMD}
    sent: "2016-09-21T17:08:37.772Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2be7718291e10488eaab0"
    text: {right now, red/system doesn't have anything like LLVM intrinsics, right?}
    sent: "2016-09-21T17:08:07.646Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2be3ec3e7045a306a81a2"
    text: {the first time i saw that trick i thought it was a stupid idea, but it was baffling how much faster it was in practice}
    sent: "2016-09-21T17:07:10.032Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2be27df21a75730174279"
    text: {And then create a new, specialized datatype for your dialects. :^^)}
    sent: "2016-09-21T17:06:47.456Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e2bdfe18291e10488ea884"
    text: "yeah"
    sent: "2016-09-21T17:06:06.182Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bdf1c3e7045a306a8071"
    text: {I imagine we'll see some creative solutions, pooling and others, and it sounds like you'll be one creating them. The nice thing with Red is that you can create those in Red/System, so you can get clean integration and consistent representation between layers.}
    sent: "2016-09-21T17:05:53.090Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e2bdeb18291e10488ea844"
    text: {i might try something like that for red if i get far enough along with playing with it}
    sent: "2016-09-21T17:05:47.548Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bdd218291e10488ea7f0"
    text: {if you need to save vectors between frames you explicitly box them on the heap}
    sent: "2016-09-21T17:05:22.358Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bdc818291e10488ea7ca"
    text: {in game and physics engines this is usually pretty easy, you just reset it at the end of a video frame or simulation tick}
    sent: "2016-09-21T17:05:12.311Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bdaf27a8458f7f33e914"
    text: {the major drawback is that the user in the scripting layer has to occasionally reset the buffer otherwise you'll run out of memory :P}
    sent: "2016-09-21T17:04:47.860Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bd9890ba43d217367d0c"
    text: {you can also do some small optimizations for SIMD in some cases (though not as good as doing it by hand)}
    sent: "2016-09-21T17:04:24.022Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bd61fa660dd95ffd01ac"
    text: {whenever the scripting runtime requests a new vector, you bump a pointer or index into the buffer and hand off that index/pointer to the scripting layer. math ops on the vector types just operate over the buffer. it typically has a lot better cache locality than handling the vectors directly as boxed types in the scripting layer}
    sent: "2016-09-21T17:03:29.746Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bd1ac3e7045a306a7b79"
    text: {where you allocate some large buffer (~ few mb depending on platform) in pages, sort of like an arena or rope, for holding vectors}
    sent: "2016-09-21T17:02:18.765Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bceac8af41d45f34f129"
    text: {for scripting languages, if there's no built-in primitives for handling vectors/matrices as value or stack/register types, there's a trick that some game engines and physics simulations use}
    sent: "2016-09-21T17:01:30.228Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bbe0df21a75730173a02"
    text: "ah ok, that makes more sense"
    sent: "2016-09-21T16:57:04.001Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bba9c8af41d45f34eb52"
    text: "Yes."
    sent: "2016-09-21T16:56:09.457Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e2baf9aabc89857fbf95ab"
    text: "are the vector! types heap allocated?"
    sent: "2016-09-21T16:53:13.754Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2bae6df21a75730173615"
    text: "right"
    sent: "2016-09-21T16:52:54.154Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e2b728c3e7045a306a62d4"
    text: {I'm sure Nenad is open to input from people who work in specific domains, but your last point is a key element in Red's design. If you can *add* functionality/behavior you need, that's good. If you can't *remove* it, that's sometimes a limitation. There are always tradeoffs of course, but the common idiom of series' being modified (`append, insert, change,remove`) and letting the user `copy` first if they don't want that behavior is an important example. }
    sent: "2016-09-21T16:36:56.353Z"
    editedAt: "2016-09-21T16:39:38.374Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e20e0718291e10488bd722"
    text: {i guess it would not be too difficult to just write my own wrapper around the built-in vector!}
    sent: "2016-09-21T04:35:19.724Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e20dc5c3e7045a3067c1fb"
    text: {mutating in place definitely makes sense for lists and things you would treat as an actual sequence though}
    sent: "2016-09-21T04:34:13.620Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e20da1df21a757301481eb"
    text: {when i have to optimize some numerics stuff i almost always flatten it out into buffers and then work over them linearly, one component at a time per SIMD register (e.g. AVX-512, with many x and y components at a time, then write to a third location)}
    sent: "2016-09-21T04:33:37.626Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e20d5fdf21a75730148182"
    text: {i think the argument for mutating in place is efficiency, but i think if you're adding single vectors together, you are really worried about efficiency and instead are going for convenience}
    sent: "2016-09-21T04:32:31.154Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e20d3cfa660dd95ffa3602"
    text: {i saw there's a github issue about this, but is there a plan (or a way) to treat math types like vector! always as values instead of mutable sequences when doing math?}
    sent: "2016-09-21T04:31:56.861Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e20c0caabc89857fbcc37b"
    text: "ah, nice"
    sent: "2016-09-21T04:26:52.649Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e20879df21a757301475b0"
    text: {I believe so. Red will also have decimals which will have a different implementation than `float!`.}
    sent: "2016-09-21T04:11:37.006Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e1d96627a8458f7f30a4e5"
    text: {rebol calls floating point numbers decimal numbers. is that due to its heritage as being marketed towards non-programmers originally?}
    sent: "2016-09-21T00:50:46.779Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57e1b807fa660dd95ff93f35"
    text: {There are a lot of programmers that ask that same question... I have no idea why programmers think we have arrived, it must be the case that they do not even try other languages than their own.}
    sent: "2016-09-20T22:28:23.462Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57e1b6cec8af41d45f312927"
    text: {The benefits will be clear to a small number of people at first. I had an ex-silicon valley sales rep ask me why the world needs another programming language. He doesn't know programming *at all*; it's just a question he's familiar with. }
    sent: "2016-09-20T22:23:10.940Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e1856fdf21a7573012d507"
    text: {Yea, I am not advocating for Red to be hosted, just saying that Red will, and already does, have a harder path to take.  I respect the Red team for their willingness to create a language without it being hosted, it is a very hard thing to do.  }
    sent: "2016-09-20T18:52:31.584Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57e1849dc8af41d45f30570e"
    text: {JVM gave it quick start, but what now? All progress Clojure can make is going up, it can't do anything with a platform, VM, etc}
    sent: "2016-09-20T18:49:01.221Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e1841faabc89857fbb00a6"
    text: {Red will, hopefully, carve out it's own niche but the fact that is not hosted, like so many new languages today, creates a hurdle for it's uptake.  Clojure, for example, would have probably been another lisp that was quickly forgotten, had it not been for the jvm. }
    sent: "2016-09-20T18:46:55.938Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57e16932aabc89857fba8f21"
    text: "Good! But I was referring to the marketplace."
    sent: "2016-09-20T16:52:02.070Z"
    v: 1
    author: "57e0430e40f3a6eec0661e65"
) #(
    id: "57e16902d66f1a7967e1e8b9"
    text: "Come on, Red development is not that slow ;)"
    sent: "2016-09-20T16:51:14.589Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e168cc27a8458f7f2f0095"
    text: "Global warming is faster.  :("
    sent: "2016-09-20T16:50:20.140Z"
    v: 1
    author: "57e0430e40f3a6eec0661e65"
) #(
    id: "57e1689e06bdca3327080a40"
    text: {I just hope that "they wouldn't be able to get internships or jobs with it" will change soon enough :)}
    sent: "2016-09-20T16:49:34.369Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e16868a3c0cb1b6a21c0b2"
    text: ":+1: "
    sent: "2016-09-20T16:48:40.755Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57e1681a27a8458f7f2efe06"
    text: {@geekyi and @dockimbel asked my opinion about teaching REBOL or Red as an introductory course in programming.  Whew!^/Let me first say that in my experience, students who already know Java really appreciate Scala. But in a course where I taught Scala first, then Java, both languages were new and difficult and equally liked/disliked.^/IMNSHO it would be a terrible idea to teach Red as a first language to programmers, because (1) they wouldn't be able to get internships or jobs with it, and (2) they would really hate Java when they got to it. (Maybe Python would be okay...)^/When I first encountered REBOL, it felt to me like a very _personal_ language, one that could be my own "secret weapon." I'm hoping Red will fill that gap.^/In a way, I think Red would be a great only language for casual programmers. OTOH the syntax is (please forgive me!) somewhat unnatural, more akin to Lisp, so probably quite a stumbling block for novices.^/So basically, I don't really know where REBOL/Red would fit in the current programming ecosystem. I've taught REBOL as an object lesson in what languages _ought_ to be like--small, simple syntax, and very, very expressive.}
    sent: "2016-09-20T16:47:22.833Z"
    v: 1
    author: "57e0430e40f3a6eec0661e65"
) #(
    id: "57e164cdfa660dd95ff7c7bf"
    text: {Hi @TimeSeriesLord I think Doc prefer to use `Red` instead of `RED` }
    sent: "2016-09-20T16:33:17.098Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57e15c85aabc89857fba57db"
    text: {Teaching with Rebol may be hard to put in one category. You could use it like schools that focused on Scheme (or Logo in the case of Brian Harvey at Berkeley), which teaches important concepts but doesn't get you a job. Now, a lot of curricula seem to focus on languages that will get you jobs, and teach the concepts those languages support in the process.^/^/Redbol langs won't get you jobs today, but they can be used to teach *so many* important concepts (simplicity not being the least of them), and to teach thinking, as is Logo's goal. Their practicality in the business world comes from using them as support tools. I believe we can change that, and make Red a first-class language in a big way.}
    sent: "2016-09-20T15:57:57.061Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e12ba227a8458f7f2de14c"
    text: "sure, thank you for advice )"
    sent: "2016-09-20T12:29:22.422Z"
    editedAt: "2016-09-20T12:29:27.811Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e12b1627a8458f7f2dde72"
    text: {I've got to go, my system has some problems with it's display}
    sent: "2016-09-20T12:27:02.771Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e12ab1c3e7045a30647e80"
    text: "only the `parse` chapter"
    sent: "2016-09-20T12:25:21.684Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e12a9b18291e1048886a37"
    text: {@maximvl Have you read [wikibooks Advanced Rebol](https://en.wikibooks.org/wiki/Rebol_programming/Advanced) (I've yet to read completely)}
    sent: "2016-09-20T12:24:59.090Z"
    editedAt: "2016-09-20T12:26:14.669Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "57e12a8833c63ba01a19a129"
    text: {now I found Cheyenne as something working and moderately complex I can dig into}
    sent: "2016-09-20T12:24:40.440Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e12a1127a8458f7f2dd99c"
    text: {@maximvl for you then, I suppose you can continue experimenting on your own :wink: }
    sent: "2016-09-20T12:22:41.087Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e129bec3e7045a30647b42"
    text: {but rebol doesn't have macros.. and anyway, I've learned macros from CL}
    sent: "2016-09-20T12:21:18.541Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e12960df21a75730113793"
    text: {Advanced stuff in rebol is harder; I wouldn't teach things like macros (for e.g.) in an introductory course (maube gloss over). Having an open mind and learning about other advanced concepts in other languages might help too, and actually using the language (this being how I learn it mostly, different people learn different ways)}
    sent: "2016-09-20T12:19:44.232Z"
    editedAt: "2016-09-20T12:22:58.645Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57e1282ffa660dd95ff6a334"
    text: {which one should I read if I have programming background and just need to dive into language?}
    sent: "2016-09-20T12:14:39.105Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "57e12807df21a757301132f3"
    text: {@geekyi about nick's tutorials, I tried to read them, but they are not like usual programming books}
    sent: "2016-09-20T12:13:59.147Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e127f0fa660dd95ff6a240"
    text: "@geekyi yep, thats right"
    sent: "2016-09-20T12:13:36.545Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e126deaabc89857fb9621b"
    text: {**tl;dr** Majority just don't like change and non-mainstream; also relevant: Innovator's Dilemma}
    sent: "2016-09-20T12:09:02.713Z"
    editedAt: "2016-09-20T12:09:45.047Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57e1269327a8458f7f2dcd92"
    text: {So what are the hurdles to teaching rebol2 for *me* in particular? In order of priorites:^/- Faculty is not at all happy with non-mainstream langs (mainstream is `java`, `python`, `c`)^/- Vastly different concepts (sometimes it's very similar, but subtly different)^/  * This is a problem with familiarity^/  * Less of a problem for people who haven't programmed before (even in an introductory course)^/- Dispersed documentation (altho, nick's tutorials and wikibooks are pretty good I later found)^/- Not a large community (or a closed one)}
    sent: "2016-09-20T12:07:47.874Z"
    editedAt: "2016-09-20T12:08:07.840Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57e1247227a8458f7f2dc615"
    text: {ye, this is something I've found in python vs java vs c++ many years ago}
    sent: "2016-09-20T11:58:42.064Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e1242b33c63ba01a1985e1"
    text: {I've taught programming before. The main advantage I see over something like `python` is faster time  to results, i.e "hello world" to working prototype.  The only other alternative I've found is `javascript` for fast iteration (reloading) and low setup overhead (web browser and text file). Javascript introduces other complexities tho (html, dom, weirdness in the language itself).^/Actually, I may have been searching for better alternatives when I found out about Rebol (Or was I looking for something to quickly deploy a web server on windows?)^/}
    sent: "2016-09-20T11:57:31.588Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e11f82c8af41d45f2e843b"
    text: "such a nice guides you have there"
    sent: "2016-09-20T11:37:38.218Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e11f77df21a75730111530"
    text: "@geekyi thanks!"
    sent: "2016-09-20T11:37:27.641Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e119eb18291e1048882d83"
    text: {@maximvl it's there on http://www.cis.upenn.edu/~matuszek/cis554-2016/index.html (search for rebol) [also web search](https://duckduckgo.com/?q=site%3Awww.cis.upenn.edu%2F~matuszek%2F+rebol&t=ffab&ia=web)}
    sent: "2016-09-20T11:13:47.767Z"
    editedAt: "2016-09-20T11:15:49.063Z"
    v: 4
    author: "569c37abe610378809bccdff"
) #(
    id: "57e11991c3e7045a306440fa"
    text: {@DavidMatuszek I can't find the course on your page, is there anything available for people outside the university?}
    sent: "2016-09-20T11:12:17.149Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e1189a33c63ba01a195e6a"
    text: {@DavidMatuszek I'm also very curious about that. ;-)}
    sent: "2016-09-20T11:08:10.664Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57e1180f18291e10488827b3"
    text: {@DavidMatuszek that is interesting. What are your opinions on teaching Rebol (or Red) as a full fledged introduction to programming course?}
    sent: "2016-09-20T11:05:51.312Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57e04806c8af41d45f2bb23a"
    text: {(Sttt---Still not here--)(Perhaps @DavidMatuszek will be Just In Time to stop the Red team from finishing up the MacOS GUI branch, as it would make an excellent task for the students! ;-) )}
    sent: "2016-09-19T20:18:14.464Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "57e04601fa660dd95ff38c9c"
    text: {I remember thinking Redbol langs would be a great fit for that kind of class, because you can easily implement toy languages that use different paradigms.}
    sent: "2016-09-19T20:09:37.652Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e045bc27a8458f7f2ad5a9"
    text: {I'm really envy I didn't have this when I was a student}
    sent: "2016-09-19T20:08:28.992Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0456618291e1048856d29"
    text: "wow"
    sent: "2016-09-19T20:07:02.339Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0456318291e1048856d1e"
    text: "Clojure, Prolog, Haskell, Scala, Rebol"
    sent: "2016-09-19T20:06:59.281Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e044f618291e1048856b86"
    text: {University of Pennsylvania: http://www.cis.upenn.edu/~matuszek/}
    sent: "2016-09-19T20:05:10.681Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e044c2c3e7045a30618647"
    text: "what is this place where people learn Rebol?"
    sent: "2016-09-19T20:04:18.654Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e04476c3e7045a30618587"
    text: {Welcome David. I recall seeing Rebol on your syllabus in the past. Can't remember who linked to it, but very cool. ^/^/To answer your question, Team Red is hard at work on the OS X GUI system as we speak.}
    sent: "2016-09-19T20:03:02.213Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57e04459fa660dd95ff3806c"
    text: {there is some :) https://twitter.com/red_lang/status/771268451314696193}
    sent: "2016-09-19T20:02:33.251Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e04451c3e7045a3061849d"
    text: "he he"
    sent: "2016-09-19T20:02:25.098Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57e0440dc8af41d45f2ba323"
    text: {Hi! I became infatuated with REBOL/VIEW a few years back, and have taught it as part of my Programming Paradigms class. I will probably do so again this semester. I'd love to teach Red instead, but most of my students use Macs. Is there any likelihood of getting Red/Draw available soon?}
    sent: "2016-09-19T20:01:17.881Z"
    v: 1
    author: "57e0430e40f3a6eec0661e65"
) #(
    id: "57d84c64b37816b14fb46264"
    text: {and still be open and collaborative with the community}
    sent: "2016-09-13T18:58:44.301Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d84c4bcba69fe7350da92f"
    text: {they received 20M in a second funding round, they are going to focus on everything from project management, tasks, milestones etc up to CI, QA, deployment, automate everything and get a lots of new features}
    sent: "2016-09-13T18:58:19.008Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d84b6483c1556511c32d10"
    text: {@JacobGood1 I'd used it for a private project with a friend a couple of months ago. It had nice features, but was a bit slow at times}
    sent: "2016-09-13T18:54:28.900Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d848a5a0e8dbb04f350587"
    text: {I think gitlab is a lot better than github, been using it for a while now}
    sent: "2016-09-13T18:42:45.729Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57d83d7aa0e8dbb04f34d1ee"
    text: {On a more serious note, gitlab has a host of cool new features, like koding and a kanban issues board. Could be a good idea to have.. at least a mirror there in the future}
    sent: "2016-09-13T17:55:06.175Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d83d15cba69fe7350d631f"
    text: {@maximvl ah the world has gone live. Can you post the summary here? :tongue: }
    sent: "2016-09-13T17:53:25.355Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d83b7783c1556511c2de45"
    text: "have a nice day gregg. over and out.  "
    sent: "2016-09-13T17:46:31.128Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d83b26b37816b14fb40a3f"
    text: "Yes it works."
    sent: "2016-09-13T17:45:10.539Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d83961a0e8dbb04f34c286"
    text: {Its not easy to fix any number from 1 till 1000. Out of range yes , but not every digit  in the range. plus every other keystroke.  Thanks. I will think about that code.}
    sent: "2016-09-13T17:37:37.694Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d838f283c1556511c2d481"
    text: {Hi Gregg , superhacker personal answer again. I will try it. \}
    sent: "2016-09-13T17:35:46.860Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d8382eef19fa3f40808c0f"
    text: {@Mennohexo, I don't think Maxim was answering you. But I am. :^^)^/```^/in-range: func [val][all [val >= 1  val <= 1000]]^/get-num: does [to integer! ask "Give me a number: "]^/until [attempt [in-range n: get-num]]^/```}
    sent: "2016-09-13T17:32:30.842Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d837efd274dbdf3512d9e1"
    text: {My question is about the keystroke error handling.  The user can stroke the false key , or he can stroke out of the custom range. It seems simple. The solutions isn't.}
    sent: "2016-09-13T17:31:27.869Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d83714a0e8dbb04f34b866"
    text: "Hi Maxim , this seems to be a methotology."
    sent: "2016-09-13T17:27:48.876Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d836927b9f81671145f181"
    text: {fyi: gitlab presentation about software development processes of past and future:^/https://youtu.be/KrF7jNfDSnI}
    sent: "2016-09-13T17:25:38.383Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d8362d83c1556511c2c5df"
    text: {only 1 till 1000 is allowed.^/nothing else. No strings or other keystrokes.^/In the case of other keystrokes or out of range 1-1000^/the user is promt to make the input again.}
    sent: "2016-09-13T17:23:57.600Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d8362ab8d4c138408dddd7"
    text: {Hello again ,^/^/if you want the user to make a input only in the custom ^/range of 1 till 1000 and otherwise redirect to the input ^/again ?^/^/How to arrange that ?^/^/code :  value:  ask "Give me a number"                                                                              }
    sent: "2016-09-13T17:23:54.267Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d83516b37816b14fb3f2f4"
    text: "I have a special question ?"
    sent: "2016-09-13T17:19:18.314Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d6ea5b83c1556511be7330"
    text: {He was porting a toolchain, which most probably is ongoing changing target, so he left the effort ...}
    sent: "2016-09-12T17:48:11.817Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57d6bcb68efc3f2006960482"
    text: {@Respectech IIRC he was porting Red to R3, but I’m not sure if he was successful. Weren’t there some R3 bugs that prevented it? But maybe I’m wrong.}
    sent: "2016-09-12T14:33:26.681Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57d6bc5bb37816b14fae97fb"
    text: {As I recall, Hostilefork got Red to build on R3. Does anyone else remember that?}
    sent: "2016-09-12T14:31:55.366Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "57d670decba69fe73507248e"
    text: {@Dimonax especially with things like rebmu demo writing should be fun ;)}
    sent: "2016-09-12T09:09:50.611Z"
    editedAt: "2016-09-12T09:09:52.945Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57d4acd4b8d4c1384083717d"
    text: {@Dimonax "I'd like to port it to 64bit Linux" The current bootstrap compiler written in Rebol hasn't been designed with portability in mind. The self-hosted compiler will be designed to make porting easier. I suspect it will be quite a challenge to port the Rebol-based compiler to 64-bit for anyone who is not very familiar with it.}
    sent: "2016-09-11T01:01:08.355Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d49701b37816b14fa91377"
    text: {I think you're on track. Not being self-hosted yet is a sticking point for OS ports right now. R3 encap is only in the Atronix build I think. The only R2 64-bit was post-SDK.  Porting Red to R3 to use Atronix will likely be a large effort. ^/^/Nenad can give his thoughts, but those porting to other OSs may either need to wait for self-hosting or find someone with an SDK license to work with.}
    sent: "2016-09-10T23:28:01.131Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d483a27b9f8167113afa56"
    text: {@Dimonax some examples of current bindings are on the [Red contributions page](http://www.red-lang.org/p/contributions.html)}
    sent: "2016-09-10T22:05:22.380Z"
    editedAt: "2016-09-10T22:05:31.349Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57d4827eef19fa3f4075af16"
    text: {Actually I shouldn't be the one to answer, best ask a lead dev}
    sent: "2016-09-10T22:00:30.799Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d4821fb37816b14fa8dbc1"
    text: {I *think* the intent is to go as fat free as possible.. whichever works}
    sent: "2016-09-10T21:58:55.896Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d481aaa0e8dbb04f29bbf0"
    text: {Well, I was wondering if the intent was write a complete replacement for the System C library.}
    sent: "2016-09-10T21:56:58.500Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
)#(
    id: "57d4819ab37816b14fa8da70"
    text: "Can write a Red/System binding right?"
    sent: "2016-09-10T21:56:42.736Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d4817e83c1556511b7fb3c"
    text: "Do you mean static linking?"
    sent: "2016-09-10T21:56:14.697Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d48167ef19fa3f4075acdb"
    text: {@Dimonax and the problem we will have in that case is?}
    sent: "2016-09-10T21:55:51.150Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d4813583c1556511b7f9fd"
    text: {Right, but if we want to do graphics programming for example, we will have to link against the native system C library.}
    sent: "2016-09-10T21:55:01.263Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d480bed274dbdf3507e58b"
    text: {I think there's nothing stopping us from borrowing ideas from musl and other tiny c libraries}
    sent: "2016-09-10T21:53:02.036Z"
    editedAt: "2016-09-10T21:53:15.374Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57d480a0a0e8dbb04f29b97d"
    text: {Fundamental difference between Red and Rebol.. Red has a low-level [Red/System](http://static.red-lang.org/red-system-specs.html) dialect, an alternative to c}
    sent: "2016-09-10T21:52:32.311Z"
    editedAt: "2016-09-10T21:54:46.507Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57d48096a0e8dbb04f29b96f"
    text: "Could probably use it to write 64k demos."
    sent: "2016-09-10T21:52:22.632Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d4807fd274dbdf3507e4f9"
    text: {Well, once the "view" extension is working.(on Linux) it wont be.}
    sent: "2016-09-10T21:51:59.435Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d480557b9f8167113af081"
    text: {@Dimonax It's already under a meg, what's the use? :smile: }
    sent: "2016-09-10T21:51:17.351Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d4803aef19fa3f4075a9a6"
    text: {There is a fundamental difference between Red and Rebol tho..}
    sent: "2016-09-10T21:50:50.976Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d48033a0e8dbb04f29b881"
    text: {We could probably get the whole thing down under a meg.}
    sent: "2016-09-10T21:50:43.776Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d48007d274dbdf3507e3dd"
    text: "I'd also like to try linking it against musl-libc"
    sent: "2016-09-10T21:49:59.037Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d48001b37816b14fa8d5e9"
    text: "Should check it out for inspiration :smile: "
    sent: "2016-09-10T21:49:53.423Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d47fe9b8d4c1384083049a"
    text: {I can confirm it works, I tried a static Rebol 3 on NIXOS}
    sent: "2016-09-10T21:49:29.922Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d47fd0ef19fa3f4075a84b"
    text: {Actually there's a bunch of different ways to pack them. Depending on what you want to do with them.}
    sent: "2016-09-10T21:49:04.206Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d47fcca0e8dbb04f29b73b"
    text: {I think rebol 3 doesn't use encap either, and it has 64bit on linux}
    sent: "2016-09-10T21:49:00.020Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d47f74a0e8dbb04f29b699"
    text: {Depends on whether your making a static or dynamically linked executable.}
    sent: "2016-09-10T21:47:32.517Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d47f3783c1556511b7f43a"
    text: {From what I know of linux packaging, you don't need to pack files like a .cab (am I right?)}
    sent: "2016-09-10T21:46:31.506Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d47efad274dbdf3507e142"
    text: {Rebol 2 is interpreted, unlike Red which is compiled}
    sent: "2016-09-10T21:45:30.323Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d47ee9b37816b14fa8ce11"
    text: {as far as I know, all encap does is pack many binary blobs into one file, like a windows .cab, and then encrypt it}
    sent: "2016-09-10T21:45:13.871Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d47e94b8d4c1384082fb28"
    text: {I'd like to port it to 64bit Linux. And make an OpenGL extension.}
    sent: "2016-09-10T21:43:48.080Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d47e69b37816b14fa8cd02"
    text: {and that is needed only if you are trying to build from source}
    sent: "2016-09-10T21:43:05.505Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d47dc3d274dbdf3507de13"
    text: {@Dimonax you don't need it; any rebol 2 implementation would do. Check out the Red README for one}
    sent: "2016-09-10T21:40:19.246Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d4740aef19fa3f4075861e"
    text: {Been checking the Rebol website for the SDK so I can get the Encap lib; but apparently it isn't available anymore. How do I go about rebuilding Red without Encap?}
    sent: "2016-09-10T20:58:50.262Z"
    v: 1
    author: "57d4735040f3a6eec064973a"
) #(
    id: "57d2a3f5c475164703c11736"
    text: "Results oriented rapid programming   RB"
    sent: "2016-09-09T11:58:45.088Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d2a1f2f4360c6818204306"
    text: "Red + Rebol = Redbol  = Red Bull         Hooooooo"
    sent: "2016-09-09T11:50:10.112Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d29f141aacfaf84b03a861"
    text: {@TomConlin by `R` you mean `Rebol`? Or the common subset of Red and Rebol so named Redbol (because there is already another unrelated language called `R` for stats)}
    sent: "2016-09-09T11:37:56.257Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57d29d9bc475164703c100a3"
    text: "R"
    sent: "2016-09-09T11:31:39.047Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d226d477c1b70d7ff81b18"
    text: {I am _very_ rusty  but our R is still the most fun language}
    sent: "2016-09-09T03:04:52.217Z"
    editedAt: "2016-09-09T03:05:07.340Z"
    v: 2
    author: "56ba8f12e610378809c0afe8"
) #(
    id: "57d22537fe284f6c303691f2"
    text: {or handle checking after ... when you can do something about it^/```^/>> foo: 'bar                                                     ^/== bar^/>> either error? err: try [foo: to-integer foo] ['BOO]['YEA] ^/== BOO^/>> foo: 5                                                        ^/== 5^/>> either error? err: try [foo: to-integer foo] ['BOO]['YEA] ^/== YEA^/```}
    sent: "2016-09-09T02:57:59.861Z"
    editedAt: "2016-09-09T03:02:36.297Z"
    v: 4
    author: "56ba8f12e610378809c0afe8"
) #(
    id: "57d223f54d72ea2864eeb141"
    text: {```^/foo: to integer! ask "gimmi an int: "^/```}
    sent: "2016-09-09T02:52:37.561Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57d223eb4d72ea2864eeb13e"
    text: "@TomConlin You  can do it like this:"
    sent: "2016-09-09T02:52:27.483Z"
    v: 1
    author: "55659cf315522ed4b3e10064"
) #(
    id: "57d223d889655972304fd8dd"
    text: {I am new to Red too (a couple hours so far)  but things I use to know from http://www.rebol.com/docs.html  seem to still work .}
    sent: "2016-09-09T02:52:08.305Z"
    v: 1
    author: "56ba8f12e610378809c0afe8"
) #(
    id: "57d2230d68f483b41cb2545a"
    text: {foo: ask  "gimmi an int:  "^/gimmi an int:  5^/== "5"^/^/>> foo^/== "5"^/}
    sent: "2016-09-09T02:48:45.713Z"
    v: 1
    author: "56ba8f12e610378809c0afe8"
) #(
    id: "57d21eb098f8df994d4a36ff"
    text: {I'm still new to progamming in red, can anyone tell me how i can get an integer input from user?}
    sent: "2016-09-09T02:30:08.383Z"
    v: 1
    author: "57d21e8b40f3a6eec0644c30"
) #(
    id: "57d1f5ec68f483b41cb1e293"
    text: {The current version of the Red compiler is written in Rebol and only emits 32 bit code.  It would be difficult to add a 64 bit emitter. It will be much easier to add 64 bit emitters to the self- hosted compiler.}
    sent: "2016-09-08T23:36:12.271Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57d1e514cdbf820f7faa659a"
    text: {we still linking to 32bit libs, is this just legacy bootstrapping  or a limitation throughout?}
    sent: "2016-09-08T22:24:20.872Z"
    v: 1
    author: "56ba8f12e610378809c0afe8"
) #(
    id: "57d1e22598f8df994d499e98"
    text: {The community here is growing, and a number of people seem to arrive with deep skills, which is nice. Certainly a lot of folks waiting for Red to be usable in production, but there's a lot to play with today, while we work to get it there.}
    sent: "2016-09-08T22:11:49.501Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d1e1b5fe284f6c3035e730"
    text: {If you haven't seen the reactive system in Red, check it out. Fun stuff.}
    sent: "2016-09-08T22:09:57.284Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d1e15577c1b70d7ff75ccf"
    text: {Hi Tom! Nice to see you again. You must be well rested. I don't know the status of other projects, so can't comment there. Red is alive, well, and churning forward. The basic Windows GUI is in place, OSX GUI underway, lots of datatypes implemented, with Date coming soon we hope, as well as GC. Trello has the status of various sub elements and a roadmap. }
    sent: "2016-09-08T22:08:21.923Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d1e064cdbf820f7faa5963"
    text: {Hi All,  been away from the R word  the last several years, see it is now mostly a quiscent forest of forks , is this R indeed the last best hope these days? }
    sent: "2016-09-08T22:04:20.525Z"
    v: 1
    author: "56ba8f12e610378809c0afe8"
) #(
    id: "57d1660a68f483b41cafefe0"
    text: {I am just a little lazy too.  Here i have 10 different editors with that option and not done that adjustments ? hooooo}
    sent: "2016-09-08T13:22:18.429Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d16454f33967fc643bae40"
    text: {Hello Ipvm ,  may i give you a tip ?    There are many editors out with individual and personal  syntax highlightning feature. ok , it sometimes cumbersome to insert all the keywords etc..  Thus if you have done it the programmer still use this tool for a longer time.}
    sent: "2016-09-08T13:15:00.617Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57d02aed68f483b41cac6c84"
    text: "I don't know of one for Red yet."
    sent: "2016-09-07T14:57:49.095Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57d0227d1baa312a6bdf3e77"
    text: {Hi, for syntax highlighting in vim, I have a rebol.vim file.  Is there a red.vim file already or should I stick to the rebol syntax highlighting?}
    sent: "2016-09-07T14:21:49.137Z"
    v: 1
    author: "558d2fe015522ed4b3e2d685"
) #(
    id: "57ccdbd36efec7117ca8c63b"
    text: "Agreed."
    sent: "2016-09-05T02:43:31.299Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ccd45c6bf4c26505ce7b0a"
    text: {i was looking at doing GUI things in Red, and that's an area where manual memory management vs. GC is not a winning fight most of the time}
    sent: "2016-09-05T02:11:40.077Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57ccd42d958e6f4729ea193b"
    text: "ah ok, thanks"
    sent: "2016-09-05T02:10:53.625Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc56846efec7117ca784c2"
    text: {Also correct that there is no GC in place yet. Coming soon we hope. In the meantime, you can control memory use somewhat with careful use of block allocations. Of course, that defeats how easy Red makes some things. Since you know C, you could also use Red/System, depending on your needs. Then you're back in charge of memory, basically working at a C level.}
    sent: "2016-09-04T17:14:44.866Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57cc56086efec7117ca78301"
    text: {I think you're all caught up here with correct info. Red still relies on Rebol, and that does still need a license to encap and build Red.exe. @randrew, you're correct on most of us having keys already, and that it looks like there's no way to get one from Rebol Technologies currently.}
    sent: "2016-09-04T17:12:40.301Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57cc4b8a29ee4a67058e829e"
    text: {i'm assuming it's because anyone who has done serious work on red already has a rebol2 license key or had someone give one to them}
    sent: "2016-09-04T16:27:54.224Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc4b616bf4c26505cd1b08"
    text: "oh"
    sent: "2016-09-04T16:27:13.245Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc4b0029ee4a67058e811b"
    text: {I was thinking of the reasons people haven't complained about this before now, and why I hadn't needed to compile it :smile: }
    sent: "2016-09-04T16:25:36.384Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc4a65928ae0e73476febb"
    text: "ok?"
    sent: "2016-09-04T16:23:01.705Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc4a32d52261ec345134bb"
    text: {remember that red is like a lisp, you can easily modify the code}
    sent: "2016-09-04T16:22:10.733Z"
    editedAt: "2016-09-04T16:25:50.445Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc4a1929ee4a67058e7ee7"
    text: {@randrew for the *vast majority* of cases, you don't need to compile from source}
    sent: "2016-09-04T16:21:45.861Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc490c29ee4a67058e7ca8"
    text: {a stable toolchain is more important at the moment}
    sent: "2016-09-04T16:17:16.513Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc48b029ee4a67058e7bdb"
    text: {@randrew I see, red isn't just there yet, not yet completely bootstrapped, but almost all of it works even now}
    sent: "2016-09-04T16:15:44.470Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc485dff95228007ad1797"
    text: {being able to run your compiler without having to use a wrapper script or multiple path-sensitive commandline arguments is kinda important}
    sent: "2016-09-04T16:14:21.465Z"
    editedAt: "2016-09-04T16:14:38.501Z"
    v: 2
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc483a928ae0e73476f699"
    text: {packaging could be done by other means, there was another guy who was able to do it successfully before}
    sent: "2016-09-04T16:13:46.464Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc4790958e6f4729e8bca0"
    text: {@randrew what do you care abbout then? bundling of all the files :tongue: }
    sent: "2016-09-04T16:10:56.881Z"
    editedAt: "2016-09-04T16:11:02.580Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc474fff95228007ad1594"
    text: "i don't really care about the encryption part"
    sent: "2016-09-04T16:09:51.402Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc474e928ae0e73476f4b8"
    text: {This clears it up.. I'd thought something was wrong with the red binary before, I can't open it up as a normal PE executable using any of my programs..}
    sent: "2016-09-04T16:09:50.005Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc4734d52261ec34512e0b"
    text: "that's what it does, yeah"
    sent: "2016-09-04T16:09:24.276Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc46ddd52261ec34512d20"
    text: {From casually reading things, it looks like encap does little more than bundling everything together? (and maybe encrypting)}
    sent: "2016-09-04T16:07:57.175Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc444229ee4a67058e6bd1"
    text: "haha"
    sent: "2016-09-04T15:56:50.325Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc4438ff95228007ad0d28"
    text: {I was being sarcastic of course(well not of course it is hard to tell with text)}
    sent: "2016-09-04T15:56:40.769Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc43d3958e6f4729e8b0c6"
    text: "that is surprising..."
    sent: "2016-09-04T15:54:59.002Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc43c7ff95228007ad0c73"
    text: {I was going to say "lua with love".. pun wasted..}
    sent: "2016-09-04T15:54:47.799Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc43a3ff95228007ad0c33"
    text: "mostly c and c++"
    sent: "2016-09-04T15:54:11.451Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc43766efec7117ca7510a"
    text: {@randrew you said you develop games, what language do you use for that?}
    sent: "2016-09-04T15:53:26.679Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc42e7928ae0e73476e94f"
    text: {it's actually easy to get on the trending list, you only need to get like 10 stars in a day unless it's one of the overcrowded languages like javascript}
    sent: "2016-09-04T15:51:03.001Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc42bdd52261ec34511e61"
    text: {@randrew oh, it was trending? I wonder what happened?}
    sent: "2016-09-04T15:50:21.519Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc42bb928ae0e73476e8c7"
    text: {Hehe, I was hoping for a more objective/technical reason...  I do like the honesty though =)}
    sent: "2016-09-04T15:50:19.974Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc42ba928ae0e73476e8c4"
    text: "some of the short demos looked interesting"
    sent: "2016-09-04T15:50:18.231Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc4286928ae0e73476e7e0"
    text: {oh, i was just killing time today and looking at trending repositories on github}
    sent: "2016-09-04T15:49:26.134Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc426d6bf4c26505cd0323"
    text: {@randrew so what brings you to Red, over a lisp or Haskell?}
    sent: "2016-09-04T15:49:01.586Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc417bff95228007ad071f"
    text: "for some its scoping modes/rules"
    sent: "2016-09-04T15:44:59.832Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc417229ee4a67058e6188"
    text: "mathematica works in a similar way"
    sent: "2016-09-04T15:44:50.715Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc40f96bf4c26505ccff12"
    text: {@randrew sorry for all the jargon btw, here is an actual explanation of those random words I was spewing earlier: http://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red}
    sent: "2016-09-04T15:42:49.183Z"
    editedAt: "2016-09-04T15:42:53.980Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc4099d52261ec345118bf"
    text: "haha"
    sent: "2016-09-04T15:41:13.392Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc408e861faa7f07b67c2c"
    text: {@randrew also, from Haskell to Red, that is a large difference lol.  I programmed for a while in Haskell as well, I do not like it.}
    sent: "2016-09-04T15:41:02.880Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc4037d52261ec345117d9"
    text: {@randrew I've only started with rebol at the beginning of this year, and red pretty recently, you are more qualified to work on the internals than me :tongue: }
    sent: "2016-09-04T15:39:35.308Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc40146efec7117ca7459c"
    text: {@randrew the only difference that I have noticed between rebol and lisp is the contextual data semantics... also known as definitional scoping.}
    sent: "2016-09-04T15:39:00.158Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc3fd7958e6f4729e8a509"
    text: "@JacobGood1 yeah, it seems like a bundler"
    sent: "2016-09-04T15:37:59.591Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc3fa829ee4a67058e5c3e"
    text: {@geekyI I do not know much about anything pertaining to Red's tool chain as that has not been a concern for me.  @randrew already sounds like he is digging a lot more into it than I ever did.  I don't really program too much in Red anyway, I just know that until Red is bootstrapped one cannot build the red.exe themselves.  ^/^/Think of encap as encapsulation, all requirements/ dependencies are wrapped together}
    sent: "2016-09-04T15:37:12.750Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc3f5e6efec7117ca74337"
    text: {i used to do high-frequency trading in haskell but these days i work on game engines}
    sent: "2016-09-04T15:35:58.367Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc3f3b6bf4c26505ccfb4c"
    text: {no, but i've used various lisp and lisp derivatives in the past}
    sent: "2016-09-04T15:35:23.156Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc3f22958e6f4729e8a380"
    text: {@randrew thanks. What's your background? Have you programmed in rebol before?}
    sent: "2016-09-04T15:34:58.168Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc3e7dff95228007acfe3e"
    text: {encap takes all of the resources and scripts that a rebol2 program requires and packages it into a single self-contained executable}
    sent: "2016-09-04T15:32:13.630Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc3e66958e6f4729e8a1a5"
    text: {technically all rebol2 scripts are interpreted. it doesn't have a static compilation phase}
    sent: "2016-09-04T15:31:50.400Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc3e52ff95228007acfdde"
    text: "what does encap do anyway?"
    sent: "2016-09-04T15:31:30.278Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc3e456bf4c26505ccf890"
    text: {@JacobGood1 So the integration tests are interpreted? I'm all confused :satisfied: }
    sent: "2016-09-04T15:31:17.094Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc3c42d52261ec345109f4"
    text: {I'm not sure you'd call that already bootstrapped.. but I've used it to compile the red console which can compile red executable files}
    sent: "2016-09-04T15:22:42.263Z"
    editedAt: "2016-09-04T15:22:53.395Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc3c1b928ae0e73476d215"
    text: "yes"
    sent: "2016-09-04T15:22:03.427Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc3bdf928ae0e73476d11b"
    text: {@JacobGood1  @randrew ok, so it doesn't directly build a red binary, but uses rebol as an interpreter to run.. `red.r` compiler to compile red code}
    sent: "2016-09-04T15:21:03.942Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc3a77958e6f4729e8946b"
    text: "yeah, i think geekyl is misunderstanding"
    sent: "2016-09-04T15:15:03.454Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc3a6929ee4a67058e508b"
    text: {I have not tried to build the(not a) red binary myself but unless something changed, one needed a rebol license to create the red binary.}
    sent: "2016-09-04T15:14:49.912Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc3a21958e6f4729e88ea4"
    text: {:point_up: [September 4, 2016 8:02 PM](https://gitter.im/red/red/welcome?at=57cc37686efec7117ca72f6a) I simply follow the instructions in the top readme, I'll check it again}
    sent: "2016-09-04T15:13:37.206Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc3972861faa7f07b65d27"
    text: "https://github.com/red/red/tree/master/build"
    sent: "2016-09-04T15:10:42.284Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
)#(
    id: "57cc3949958e6f4729e88cdc"
    text: {:point_up: [September 4, 2016 8:01 PM](https://gitter.im/red/red/welcome?at=57cc37516bf4c26505cce0f8) where is this from btw? I remember this, but can't find it now}
    sent: "2016-09-04T15:10:01.734Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc38b9ff95228007aceccb"
    text: {how do you end up with a red.exe if you don't have a rebol2 sdk license? i'm already aware you can run red in rebol2 via calling the interpreter on the red sources}
    sent: "2016-09-04T15:07:37.187Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc385e958e6f4729e889b9"
    text: "then use it to compile red programs"
    sent: "2016-09-04T15:06:06.677Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc3850928ae0e73476c817"
    text: {what I'm trying to say is in practice, there isn't a problem with the license, I can build and run red }
    sent: "2016-09-04T15:05:52.762Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc3814ff95228007aceb2a"
    text: "yeah, i know"
    sent: "2016-09-04T15:04:52.861Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc380d958e6f4729e88914"
    text: {those are the things needed to run red from sources}
    sent: "2016-09-04T15:04:45.330Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc380829ee4a67058e4853"
    text: "i'm not trying to do anything right now"
    sent: "2016-09-04T15:04:40.409Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc37fd29ee4a67058e4846"
    text: {@randrew maybe I am :smile: what are you trying to do?}
    sent: "2016-09-04T15:04:29.431Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc37dfd52261ec3450f324"
    text: "i think you keep misunderstanding"
    sent: "2016-09-04T15:03:59.275Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc37c26efec7117ca72ff1"
    text: {@randrew ^/> Download a Rebol interpreter suitable for your OS:}
    sent: "2016-09-04T15:03:30.490Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc379f958e6f4729e88859"
    text: {See [this](https://github.com/red/red#running-red-from-the-sources)  2nd step}
    sent: "2016-09-04T15:02:55.963Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc37686efec7117ca72f6a"
    text: "Rebol/view is free"
    sent: "2016-09-04T15:02:00.085Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc37516bf4c26505cce0f8"
    text: {Prerequisite^/^/You need a Rebol SDK copy with a valid license file in order to rebuild the Red binary, this is a constraint from using Rebol2 for the bootstrapping. Once selfhosted, Red will not have such constraint.}
    sent: "2016-09-04T15:01:37.783Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc367a29ee4a67058e45ad"
    text: {you should definitely see the [Red/System docs](http://static.red-lang.org/red-system-specs.html) any version of rebol2 should work(it's a bug otherwise); I'm using "REBOL/View 2.7.8.3.1 1-Jan-2011"}
    sent: "2016-09-04T14:58:02.830Z"
    editedAt: "2016-09-04T15:00:13.968Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc36176bf4c26505ccdec2"
    text: {@randrew I mean, nothing should stop you from building red for development purposes :smile: all you need is there in the Red README}
    sent: "2016-09-04T14:56:23.551Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc341a861faa7f07b64e40"
    text: "yeah, in c."
    sent: "2016-09-04T14:47:54.876Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc3388928ae0e73476bd7b"
    text: {> should i ask in red/red about how hard it is to finish getting a basic mark & sweep gc working? ^/^/I think that is a great idea =)}
    sent: "2016-09-04T14:45:28.650Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc332ed52261ec3450e780"
    text: {Have you implemented such a gc in c before?  Red/System is similar to c imo}
    sent: "2016-09-04T14:43:58.284Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc2c89861faa7f07b63c0a"
    text: {it's really fun to play with, i wish i could keep a process running for longer. should i ask in red/red about how hard it is to finish getting a basic mark & sweep gc working? i've implemented gc in the past and simple ones like that are usually not too hard, but i've really only played around with red today with no prior experience}
    sent: "2016-09-04T14:15:37.792Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc2bd4928ae0e73476a9ec"
    text: "Yea, it is a full featured alpha =)"
    sent: "2016-09-04T14:12:36.555Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc2bb2861faa7f07b63aca"
    text: {from what i've seen playing around. it does a ton of stuff}
    sent: "2016-09-04T14:12:02.685Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc2b98861faa7f07b63aab"
    text: "it looks like it's pretty far along already"
    sent: "2016-09-04T14:11:36.376Z"
    editedAt: "2016-09-04T14:12:30.179Z"
    v: 2
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc2b3e29ee4a67058e285c"
    text: {red will be bootstrapped and independent of rebol in the future, for now, it is attached to rebol}
    sent: "2016-09-04T14:10:06.462Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57cc23d1958e6f4729e85975"
    text: "pedantic about what?"
    sent: "2016-09-04T13:38:25.357Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc227fd52261ec3450c1f8"
    text: {@randrew about building red, I think that's a too pedantic view for various reasons; ^/* rebol3 is open source^/* doc and carl (the owners of red and rebol) are on good terms, carl doesn't mind^/* and red can almost compile itself now}
    sent: "2016-09-04T13:32:47.671Z"
    editedAt: "2016-09-04T13:33:41.802Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1ffaff95228007acb25b"
    text: {@randrew should talk on red/red channel about things related to the language itself}
    sent: "2016-09-04T13:22:02.398Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1fb6928ae0e734768e61"
    text: {yeah, i was going to look into seeing how hard it would be to finish a simple mark & sweep GC}
    sent: "2016-09-04T13:20:54.962Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc1f5d29ee4a67058e0c83"
    text: {I see.. it's not really a problem in practice because red daily(?) builds are available}
    sent: "2016-09-04T13:19:25.256Z"
    editedAt: "2016-09-04T13:20:34.818Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1f46928ae0e734768d55"
    text: {the owner of red has obtained the appropriate licenses.. ah yes I think you mean using the rebol sdk right?}
    sent: "2016-09-04T13:19:02.084Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1f0b958e6f4729e84daf"
    text: "yes, since building red requires rebol2"
    sent: "2016-09-04T13:18:03.669Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc1ee76efec7117ca6f15a"
    text: "Oh, you are talking about rebol? @randrew "
    sent: "2016-09-04T13:17:27.953Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1eccd52261ec3450b9ae"
    text: {it's not possible to make your own red.exe because it requires a license for a product that's no longer sold}
    sent: "2016-09-04T13:17:00.717Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc1ebad52261ec3450b990"
    text: {right, that's what i saying. sorry if i communicated it wrong}
    sent: "2016-09-04T13:16:42.182Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc1ea7d52261ec3450b962"
    text: {Also, I don't think you can build red.exe without rebol2 currently}
    sent: "2016-09-04T13:16:23.955Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1e8d928ae0e734768bc1"
    text: {@randrew ^/>Both Red and Red/System are published under BSD license, runtime is under BSL license. BSL is a bit more permissive license than BSD, more suitable for the runtime parts.^/^/That? Pretty permissive I think?}
    sent: "2016-09-04T13:15:57.729Z"
    editedAt: "2016-09-04T13:16:07.556Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1c86d52261ec3450b514"
    text: {i guess that's not such a big deal since effectively it's evaluating the same way}
    sent: "2016-09-04T13:07:18.642Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc1c6b6bf4c26505cc9d5e"
    text: "unless i'm misreading the github docs"
    sent: "2016-09-04T13:06:51.599Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc1c636bf4c26505cc9d52"
    text: {i mean if you want to build your own red.exe, and not run it via rebol2.exe + script sources}
    sent: "2016-09-04T13:06:43.565Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cc1c31958e6f4729e845d2"
    text: {are you trying to build the red tool chain itself, or your own code? Red is really permissively licensed, and your own code is copyright yourself}
    sent: "2016-09-04T13:05:53.270Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc1bd3ff95228007aca86e"
    text: "@randrew what do you mean? You can"
    sent: "2016-09-04T13:04:19.335Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cc19e3928ae0e7347680cb"
    text: {ah, can't build a red binary without a license, that's really too bad :/}
    sent: "2016-09-04T12:56:03.400Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbfc22958e6f4729e7fced"
    text: "still worth playing around with for fun i guess"
    sent: "2016-09-04T10:49:06.280Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbfbfbd52261ec3450695f"
    text: {ah, and you can't dynamically link external shared libraries either}
    sent: "2016-09-04T10:48:27.098Z"
    editedAt: "2016-09-04T10:48:39.566Z"
    v: 2
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbfbc329ee4a67058dbe64"
    text: {apparently it's not possible to make standalone rebol2 programs without a commercial sdk that's now discontinued}
    sent: "2016-09-04T10:47:31.766Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbfbaf6bf4c26505cc5694"
    text: {i didn't realize they were so compatible, i guess that makes sense though}
    sent: "2016-09-04T10:47:11.009Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbf97dd52261ec34506437"
    text: {I suppose so, @dockimbel can probably tell you more; for anything in production I'm using rebol2 until red is ready}
    sent: "2016-09-04T10:37:49.408Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cbec51928ae0e73476254d"
    text: {ah i see. so i guess i should use rebol2 for anything long-running?}
    sent: "2016-09-04T09:41:37.744Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbd911d52261ec345027d2"
    text: {using red for gui programs and experimentation mostly}
    sent: "2016-09-04T08:19:29.725Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cbd911d52261ec345027d0"
    text: "ah ok"
    sent: "2016-09-04T08:19:29.256Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbd8fd29ee4a67058d7906"
    text: {don't know about others, but I'm not using red for any long running programs, using rebol for that}
    sent: "2016-09-04T08:19:09.257Z"
    editedAt: "2016-09-04T08:22:50.779Z"
    v: 2
    author: "569c37abe610378809bccdff"
)#(
    id: "57cbd8bb29ee4a67058d78ac"
    text: {well, there is this on [trello](https://trello.com/c/jcA3eEcs/52-memory-management)}
    sent: "2016-09-04T08:18:03.602Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cbd8b96efec7117ca662ad"
    text: {is there supposed to be some other way to deal with memory right now or is everyone just terminating their processes and restarting them after a while?}
    sent: "2016-09-04T08:18:01.333Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbd853958e6f4729e7b5d8"
    text: {ah, nothing in particular. i was just playing around with it for fun and noticed that memory was never being reclaimed}
    sent: "2016-09-04T08:16:19.878Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbd83f29ee4a67058d780a"
    text: "what are you looking for?"
    sent: "2016-09-04T08:15:59.504Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cbd838958e6f4729e7b5bf"
    text: {still alpha, that's why, but things are improving rapidly; when I started `read` wasn't working}
    sent: "2016-09-04T08:15:52.327Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cbd7a1861faa7f07b588a2"
    text: {yeah i'm looking at it now. but since it's a list of upcoming stuff, i'm having a hard time telling what is actually in Red right now}
    sent: "2016-09-04T08:13:21.806Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57cbd750928ae0e73475fe76"
    text: {yes, it's to be implemeted I think, check the roadmap}
    sent: "2016-09-04T08:12:00.745Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57cbd546861faa7f07b5841f"
    text: {this might be a silly question, but i looked around on the Red site and didn't any mention of it: red doesn't have a working GC? all of the demos i tried grow in memory usage over time}
    sent: "2016-09-04T08:03:18.842Z"
    v: 1
    author: "56e50a4185d51f252ab88626"
) #(
    id: "57caf55e958e6f4729e5db89"
    text: {great to see yet another language doing unicode the right way}
    sent: "2016-09-03T16:07:58.963Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf52c6efec7117ca46105"
    text: "ah, ask does what I wanted"
    sent: "2016-09-03T16:07:08.886Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf4e4958e6f4729e5da55"
    text: {You can use `ask` in the console, for non GUI work.}
    sent: "2016-09-03T16:05:56.861Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caf4da861faa7f07b3a876"
    text: "yes, I got that"
    sent: "2016-09-03T16:05:46.718Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf4cb6bf4c26505ca333d"
    text: {note that red is still aplha, rebol2 works where it doesn't right now, but red is definitely the future!}
    sent: "2016-09-03T16:05:31.792Z"
    editedAt: "2016-09-03T16:06:19.526Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57caf4bfff95228007aa3a29"
    text: "Correct."
    sent: "2016-09-03T16:05:19.025Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caf4bd6efec7117ca46014"
    text: "@oystedal yes"
    sent: "2016-09-03T16:05:17.525Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57caf4b1928ae0e73474034c"
    text: "but view is windows-specific atm, afaict?"
    sent: "2016-09-03T16:05:05.705Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf4756efec7117ca45f5e"
    text: {```^/request-text: function [][^/    view/options [^/        across^/        text "Enter text:" f-fld: field return^/        button "OK" [res: 'ok  unview]^/        button "Cancel" [res: none  unview]^/    ] ['modal]^/^-all [res f-fld/text]^/]^/```}
    sent: "2016-09-03T16:04:05.049Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caf459958e6f4729e5d902"
    text: {between `?` and `source` I hardly need to look at the docs.. I think `source` can be made more useful too}
    sent: "2016-09-03T16:03:37.279Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57caf4276bf4c26505ca31ae"
    text: {why on earth does not other scripting languages do this}
    sent: "2016-09-03T16:02:47.248Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf3ec6efec7117ca45e1b"
    text: "yeah, that's how I found ? function!"
    sent: "2016-09-03T16:01:48.809Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf3d0958e6f4729e5d7bb"
    text: {@oystedal see also just `?` it shows a lot of useful things there, like `source`}
    sent: "2016-09-03T16:01:20.444Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57caf34529ee4a67058b7217"
    text: "10/10 on that one"
    sent: "2016-09-03T15:59:01.759Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf33e861faa7f07b3a3ce"
    text: "Yeah! Help to find all available types is great."
    sent: "2016-09-03T15:58:54.933Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caf3256bf4c26505ca2f63"
    text: {I just found "? function!"}
    sent: "2016-09-03T15:58:29.648Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf2e76bf4c26505ca2e87"
    text: "Not yet..."
    sent: "2016-09-03T15:57:27.342Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caf2ccd52261ec344e555f"
    text: {http://www.rebol.com/docs.html^/http://www.rebol.com/docs/core23/rebolcore.html}
    sent: "2016-09-03T15:57:00.374Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caf2a4ff95228007aa3530"
    text: "is there an equivalent of request-text in red?"
    sent: "2016-09-03T15:56:20.313Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf275861faa7f07b3a187"
    text: {Yes, we're lacking that right now. In the meantime, we refer people to Rebol docs, which provide design thoughts and language fundamentals. @Arie-vw  and Mike Parr are working on Red reference docs as well. }
    sent: "2016-09-03T15:55:33.075Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caf23cff95228007aa33e0"
    text: {it's just a bit of a paper-cut to find that things in the rebol intro doesn't appear to work in red}
    sent: "2016-09-03T15:54:36.124Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf1d0d52261ec344e5265"
    text: {the only thing I'm missing at this point is a concise introduction. I've read http://doc.red-lang.org/reactivity.html and I'm currently reading http://re-bol.com/rebol_quick_start.html }
    sent: "2016-09-03T15:52:48.730Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf13a958e6f4729e5d0dd"
    text: "I've only heard of React, never used it"
    sent: "2016-09-03T15:50:18.634Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caf08e928ae0e73473f53c"
    text: {@oystedal it's also in principle, the same concept as React from facebook I think, but using a simpler, object-oriented implementation}
    sent: "2016-09-03T15:47:26.703Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57caf041958e6f4729e5ce92"
    text: {Welcome to Red!^/^/Systems use the term to mean different things. e.g. the ReactiveX movement has  a very specific API, while "event driven", "dataflow", and "Flow-based" programming are more general terms that are in line with Red's model. }
    sent: "2016-09-03T15:46:09.277Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57caeef7861faa7f07b3979f"
    text: {I've never seen the concept of reactive programming before, but it looks really interesting}
    sent: "2016-09-03T15:40:39.917Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57caeded928ae0e73473ecfc"
    text: "Hi, just stumbled over red lang by accident"
    sent: "2016-09-03T15:36:13.481Z"
    v: 1
    author: "57caed1140f3a6eec0633381"
) #(
    id: "57c2ff99d872312a1e84e567"
    text: {Hi geekyl , i have checked out that editor. It's ok.  For me personal i prefer rj-Editor.   Why ?   Alien Style.}
    sent: "2016-08-28T15:13:29.674Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57c2e6533cdeb6467b78fabe"
    text: {hello geekyl , yesterday it was late and i break the line.   I use only the portable version of the rj Editor. It's another option for a progamming editor.  I will sublime text 3 give a try.  Thanks.}
    sent: "2016-08-28T13:25:39.835Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57c22b24e353af447b36683a"
    text: {Also, if you like lot of features and are not afraid to try a new editor with mostly keyboard commands, emacs / spacemacs might be interesting.. can't beat it for features haha. It also should have highlighting for Red I think}
    sent: "2016-08-28T00:07:00.148Z"
    editedAt: "2016-08-28T00:08:01.206Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c22aaf5b11de7721596d22"
    text: {@Mennohexo you should also try sublime text 3, pretty good editor, relatively fast with large community and lots of addons}
    sent: "2016-08-28T00:05:03.584Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c22a195b11de7721596c21"
    text: "But no highlighter for Red?"
    sent: "2016-08-28T00:02:33.638Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c2297bf6fe00361e069085"
    text: {Reinstalled (overwrite) Initial version and working now}
    sent: "2016-08-27T23:59:55.379Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c229125b11de77215969df"
    text: "Install Version is 32-bit 11.10, updated to 11.12"
    sent: "2016-08-27T23:58:10.336Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c228c78877dae620a0af60"
    text: {So I updated to latest version, and now there is an error, "application is unable to start correctly" :worried: }
    sent: "2016-08-27T23:56:55.502Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c2287c2a7bd0e920577051"
    text: {@Mennohexo I just tried it out, it needed 211 MB space! :worried: After installing, first thing it prompted was that update was available. Ok...}
    sent: "2016-08-27T23:55:40.535Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c225bae353af447b365f28"
    text: {taste the following options in the rj editor     1. Environment-Themes-Charcoal Dark Slate  2. open a red  script from menue  3. open it then in a new folder and maximize to full screen.   Very pretty. Dark Black and full screen style.  My  style.  Black Universe - RED code. ha}
    sent: "2016-08-27T23:43:54.367Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57c223ab2a7bd0e92057673e"
    text: {I don't know. Have unpacked it with 7zip. Definetly one of my Editor with the most functions and options.  Currently i use SYNWRITE.}
    sent: "2016-08-27T23:35:07.825Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57c223903cdeb6467b779735"
    text: {@Mennohexo what are you currently using as editor? I'm using sublime3. It has support for Red and Rebol syntax highlighting}
    sent: "2016-08-27T23:34:40.274Z"
    editedAt: "2016-08-27T23:35:24.147Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57c220958877dae620a0a183"
    text: {@Mennohexo pretty big size for a redboler tho :tongue: is it a node webkit app?}
    sent: "2016-08-27T23:21:57.607Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57c21face353af447b3653b9"
    text: "Give a try for RED coding .   "
    sent: "2016-08-27T23:18:04.933Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57c21eab5b11de77215956ad"
    text: "Found it  today.      See you."
    sent: "2016-08-27T23:13:47.745Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
)#(
    id: "57c21e8e2a7bd0e920575c37"
    text: {http://www.rj-texted.se/index.html^/^/This Editor is interesting.^/Tool link to Rebol works. Many hightning options too.^/^/WBR^/Hans}
    sent: "2016-08-27T23:13:18.859Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57bcc28ced79c5ee4f2ef910"
    text: {Thank you for your help is the coding for the script  The win .exe is running  fantastic  here. Full success on the line.}
    sent: "2016-08-23T21:39:24.497Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57bcc0e2ed79c5ee4f2ef26d"
    text: "Thanks for updating us Hans."
    sent: "2016-08-23T21:32:18.110Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57bcbf5bbb6fad403cfd13de"
    text: {NSIS 3.0 REBOL script is online  at  Rebol Google Group^/^/Trance Techno^/^/WBR  Hans}
    sent: "2016-08-23T21:25:47.306Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57bc19fcb64a3a016f5c1fcf"
    text: {Just right online.  I load it up today here german time at rebol google forum.  https://groups.google.com/forum/#!forum/rebol     Thank you for your attention.  Over and out.}
    sent: "2016-08-23T09:40:12.587Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57bc035ccd00bdff6e70b357"
    text: "@Mennohexo A link maybe ?"
    sent: "2016-08-23T08:03:40.598Z"
    editedAt: "2016-08-23T08:05:21.434Z"
    v: 2
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57bb57296981f5f2690c145a"
    text: {Hello Red Planet ,   i got it.  I make a post with the whole script incl. Version Ressources on Rebol Forum Page.  It is running.  1.  Make the script  2. Make the compiling script.   Rock'n Roll !!!}
    sent: "2016-08-22T19:48:57.424Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57bade36ed79c5ee4f278e6d"
    text: {practically this means you can write any program in Red/Rebol in one line}
    sent: "2016-08-22T11:12:54.657Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57bade286981f5f26909f248"
    text: {@gour the thing with red/rebol syntax is there is no expression separator and line end is not special in any way}
    sent: "2016-08-22T11:12:40.946Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57ba83b1ed79c5ee4f26775e"
    text: {Someone just answered on the mailing list about this. The Rebol SDK was the official way to make exes, but I don't know the status of buying a license now. }
    sent: "2016-08-22T04:46:41.958Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ba838bed79c5ee4f267713"
    text: {@Mennohexo Making Red .exe files are really easy. Rebol on the other hand.. from what I've read, you need the rebol/sdk to make .exes}
    sent: "2016-08-22T04:46:03.758Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57ba05cbbb6fad403cf30bf8"
    text: {ok.  No idea yet.   Nevertheless thanks for attention.      Stay dry.     ECHELON over and out.}
    sent: "2016-08-21T19:49:31.177Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57ba00ed187885ef4f669968"
    text: "Menno"
    sent: "2016-08-21T19:28:45.843Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57b9fea0cd00bdff6e69df5c"
    text: {I am learning Rebol and can't find good instructions how to make a windows executable from rebol script. There are two tools : Xpacker and NSIS. I missed some working scripts for that programs XML or videos on youtube etc.  normally it is no problem to make a .exe file. There must be some real working examples anywhere because thesse tools are in work for many years. Does anyone have an idea for a link to that stuff ?   Menno , i can't find it.}
    sent: "2016-08-21T19:18:56.346Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57b9fd72187885ef4f668e89"
    text: "Menno"
    sent: "2016-08-21T19:13:54.083Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57ae3a23364ad7fc5acec912"
    text: "Agreed."
    sent: "2016-08-12T21:05:39.649Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae3a146cd7d05c37c25804"
    text: {We should switch to red/mezz if this discussion continues.}
    sent: "2016-08-12T21:05:24.956Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae38b4aee33d7241e8fb21"
    text: "Nice Steeve."
    sent: "2016-08-12T20:59:32.907Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ae38484073ee634d25b40e"
    text: {@greggirwin I'changed few things.^/- I use **copy** instead of make because I don't want the series copied by default. Most of the time, we want to deep copy objects but not series.^/- The copied types are always required. If you don't need it, just use copy instead. ^/- I optimized the loop a little.^/```lisp^/clone: function [^/    "Deep copy an object based on types"^/    obj [object!]^/    types [typeset!] "types copied"^/][^/    foreach word words-of obj: copy obj [^/        if find types type? val: get/any :word [^/            set word either object? :val [clone :val types][copy :val]^/        ]^/    ]^/    obj^/]^/```}
    sent: "2016-08-12T20:57:44.889Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ae045346a301fa5a49e1d1"
    text: {Carl's blog entry raises a lot of questions. Nenad will have to weigh in on the big stuff there (e.g. object specs). I imagine this will lead to ideas on Red meta-object protocols as well.}
    sent: "2016-08-12T17:16:03.326Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57adfd69a00c6adb45e15754"
    text: "And +1 on Pekr's amazing memory. :^^)"
    sent: "2016-08-12T16:46:33.575Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57adfc57ae0554d04c9334e7"
    text: {Ah, just looked at WiseGenius's `copy/deep` analysis. Nice.}
    sent: "2016-08-12T16:41:59.084Z"
    editedAt: "2016-08-12T16:42:18.589Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57adfbbbae0554d04c93332e"
    text: {We could almost do it just with `copy/deep`, but that won't catch maps in sub-objects. We couldn't do `/with` either, but that may not be important since you could still `make` the cloned object with your spec. Just a little less efficient, but not much different for the user.}
    sent: "2016-08-12T16:39:23.074Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57adf950a00c6adb45e14ba1"
    text: {I worked that up before seeing your typeset idea Steeve. A refinement for that would be to *exclude* certain types, as you see it? That is, by default it would deep clone everything.}
    sent: "2016-08-12T16:29:04.589Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57adf873625cb3d845418f5e"
    text: {It wasn't in my bag, but here's something we can use for discussion.^/```^/clone: function [^/^-"Deep make an object"^/^-object [object!]^/^-/with^/^-^-spec [block!] "Extra spec to apply"^/][^/^-cloners!: union series! make typeset! [object! map! bitset!]^/^-new: make object any [spec clear []]^/^-foreach word words-of new [^/^-^-val: get in new word^/^-^-if find cloners! type? :val [^/^-^-^-new/:word: either object? val [ clone val ][ copy/deep val ]^/^-^-]^/^-]^/^-new^/]^/^/o1: object [n: 1 a: "A" b: #() sub-o: object [aa: "AA" bb: #()] fn: func [x][x]]^/o2: clone o1^/append o2/a "a"^/append o2/sub-o/aa "aa"^/o2/b/c: #c^/o2/sub-o/bb/c: #cc^/append body-of get in o2 'fn [ensure x]^/?? o1^/?? o2^/```^/I'm all for profiling an R/S version, but this could be very nice to keep as a mezz, to show people how it's done.}
    sent: "2016-08-12T16:25:23.373Z"
    editedAt: "2016-08-12T16:26:11.497Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ad930107d5cea43a271078"
    text: {First we should work on a prototype with Red and then rewrite it with red/system for max speed. Gregg, do you have something in your bag as a starter?}
    sent: "2016-08-12T09:12:33.748Z"
    editedAt: "2016-08-12T09:12:41.795Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ad9262db39cbe0712d6689"
    text: { Moreover, It would be good to have a typeset! as argument  for the **clone** function to have fine control on wich data types are deep copied. }
    sent: "2016-08-12T09:09:54.400Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57ad40cabc688a1339113e99"
    text: "clone would be nice =)"
    sent: "2016-08-12T03:21:46.064Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ad219a16b0696856ae7ac8"
    text: {It's possible, but since that is object specific, it would kind of pollute `make` I think. It's not a big problem since we can easily write a `clone` function at the mezz level.}
    sent: "2016-08-12T01:08:42.134Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57ad17dcf7f11a7936b75da9"
    text: {thanks, is there any plan to add a make/deep that would ensure all inner objects are copied?}
    sent: "2016-08-12T00:27:08.224Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ad15f4f7f11a7936b75933"
    text: {This is one way of creating a new object for b/a to be bound to:^/```text^/red>> a: object [a: object [x: 1]]^/== make object! [^/    a: make object! [^/        x: 1^/    ]^/]^/red>> b: do mold/all a^/== make object! [^/    a: make object! [^/        x: 1^/    ]^/]^/red>> b/a/x: 100^/== 100^/red>> a/a/x^/== 1^/```}
    sent: "2016-08-12T00:19:00.484Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ad14f7ae838f6f5698e778"
    text: {```make``` does not perform a copy so ```a/a``` and ```b/a``` are bound to the same value.}
    sent: "2016-08-12T00:14:47.099Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ad141816b0696856ae62a0"
    text: "ty"
    sent: "2016-08-12T00:11:04.047Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ad13d0f7f11a7936b754f4"
    text: "You need the quotes to be on a separate line"
    sent: "2016-08-12T00:09:52.414Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ad13b9d7087a017fadc2d1"
    text: ""
    sent: "2016-08-12T00:09:29.926Z"
    editedAt: "2016-08-12T00:11:00.135Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ad13b4ae838f6f5698e4ec"
    text: ""
    sent: "2016-08-12T00:09:24.735Z"
    editedAt: "2016-08-12T00:10:57.669Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ad1368ff82b9fc7e76e4aa"
    text: {```^/red>> a: object [a: object [x: 1]]^/== make object! [^/    a: make object! [^/        x: 1^/    ]^/]^/red>> a/a/x^/== 1^/red>> b: make a []^/== make object! [^/    a: make object! [^/        x: 1^/    ]^/]^/red>> b/a/x: 100^/== 100^/red>> b^/== make object! [^/    a: make object! [^/        x: 100^/    ]^/]^/red>> a^/== make object! [^/    a: make object! [^/        x: 100^/    ]^/]^/```}
    sent: "2016-08-12T00:08:08.065Z"
    editedAt: "2016-08-12T00:10:19.795Z"
    v: 5
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57ad1057f7f11a7936b74eae"
    text: {You will need to use ```copy/deep``` if the included object binds to nested  values.}
    sent: "2016-08-11T23:55:03.153Z"
    editedAt: "2016-08-11T23:55:48.379Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ad1004bc688a133910e84c"
    text: {@JacobGood1 Like this:^/```^/red>> o: make object! [a: 1]^/== make object! [^/    a: 1^/]^/red>> oo: make object! [ooo: copy o]^/== make object! [^/    ooo: make object! [^/        a: 1^/    ]^/]^/red>> o/a^/== 1^/red>> oo/ooo/a^/== 1^/red>> o/a: 2^/== 2^/red>> oo/ooo/a^/== 1^/```}
    sent: "2016-08-11T23:53:40.412Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57ad059ff7f11a7936b73a8d"
    text: {@greggirwin  hey gregg, how do you make an object that contains another object without the inner objects being linked?}
    sent: "2016-08-11T23:09:19.274Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a9f7e2613cc1803673ec2c"
    text: {`input` is able to read on stdin, so it should be possible to make it work.}
    sent: "2016-08-09T15:33:54.951Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a9f68346610f17394bed1d"
    text: {But of course later you can. And better, when Doc rewrite his great `Cheyenne web server` in Red you will be able to run your Red scripts directly inside the web server.}
    sent: "2016-08-09T15:28:03.102Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a9f61816b0696856a68ce2"
    text: {You cannot I think, as `port` implementation is not yet ready. So you don't have stdin / stdout yet. I don't know if it is possible with Kaj's bindings.}
    sent: "2016-08-09T15:26:16.351Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57a9e018d7087a017fa597eb"
    text: {Can I use RED in CGI mode as I used to do with Rebol 2?}
    sent: "2016-08-09T13:52:24.434Z"
    v: 1
    author: "57a9de9e40f3a6eec05e9d76"
) #(
    id: "57a8953046610f1739489f89"
    text: "Sir. Yes Sir!"
    sent: "2016-08-08T14:20:32.295Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a8940eae838f6f568da7c5"
    text: {@Mennohexo As a reminder: this chat room and the other ones under the "red/" umbrella are dedicated to discussions about the Red programming language.}
    sent: "2016-08-08T14:15:42.794Z"
    editedAt: "2016-08-08T14:16:24.064Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a89283ff82b9fc7e6bb5cf"
    text: {ok . one more that is really funny for you profs. Then i leave here for normal code conversation.  Question : What is a good programmed application and the API of a operating system standing for ?   Answer : A good application must act as a better moderator than the Os-API itself. When the program .exe is starting it takes all over the whole API of the OS by itself and saying :  You are not the API , I am the API now.  ha}
    sent: "2016-08-08T14:09:07.812Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a84aa6483751d50f32e9b5"
    text: {The best OS is that OS that only displays the data of programmed application , just do display. And the thousands of API programmers are biting on granit. ha ha}
    sent: "2016-08-08T09:02:30.350Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a84989978997001e9fa4db"
    text: "I hate APIs"
    sent: "2016-08-08T08:57:45.867Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a6a402d097eb6b2ccbbcdc"
    text: {You don't have to go through things in that order; all 3 are pretty good as an introduction. You can pick and choose and start with what suits your preferred way of learning best, only the pacing is different in each}
    sent: "2016-08-07T02:59:14.406Z"
    editedAt: "2016-08-07T03:00:29.464Z"
    v: 2
    author: "569c37abe610378809bccdff"
)#(
    id: "57a6a38b857442dc0f59c5d0"
    text: {Then keep going through those 3 websites simultaneous till you are familiar, also checking out the other resources at other sites}
    sent: "2016-08-07T02:57:15.069Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a6a28b2f03cf8749cd766d"
    text: {@Mennohexo This is what I suggest you do:^/Take a look at the resources at http://rebol.info, In particular, start with:^/1. [REBOL in Ten Steps](http://rebol.com/rebolsteps.html)^/2. [Learn Rebol](http://re-bol.com/)^/3. [Rebol programming wikibook](https://en.wikibooks.org/wiki/Rebol_programming)}
    sent: "2016-08-07T02:52:59.981Z"
    editedAt: "2016-08-07T02:55:48.723Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a6a177978997001e9cb9aa"
    text: {For example. What is your experience?  What have you programmed in before?^/I'd looked at your [Google groups question](https://groups.google.com/forum/#!topic/red-lang/01gW1w0IHM4) and it looks like you are a complete beginner? Sorry if I misunderstood^/It is better to ask specific questions in here, preferably, showing your code. And if it isn't red or rebol specific (and perhaps it even is!) I'd suggest you look at stackoverflow.com. Checkout http://rebol.info for resources}
    sent: "2016-08-07T02:48:23.421Z"
    editedAt: "2016-08-07T02:50:39.777Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a69eecd097eb6b2ccbb5cc"
    text: {@Mennohexo so far so good.. I think. Your problem seems to be very generic, you are trying to make a big leap from application programming to network programming? Since your question is very generic and not limited to red, I'd suggest you ask about it on a site like stackoverflow.com ; it will give you a wider audience and more exposure^/Actually, I don't know at what stage of learning you are at?}
    sent: "2016-08-07T02:37:32.653Z"
    editedAt: "2016-08-07T02:38:04.674Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a63659fb162b752ca3db29"
    text: "One socket for every client."
    sent: "2016-08-06T19:11:21.726Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a635c4483751d50f2f284f"
    text: {I have read the information here that there has to be a client server with a forever loop that is scanning the threads from every client computer on the LAN to handle parallel processing TCP/IP.  In fact a case for a networkprogrammer !}
    sent: "2016-08-06T19:08:52.589Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a634f8d097eb6b2ccaf97e"
    text: "ok"
    sent: "2016-08-06T19:05:28.313Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a6162bfb162b752ca3998c"
    text: {@Mennohexo don't have to logout, but if you really want to,  you can leave by clicking the room icon,  then the setting graphic, then leave}
    sent: "2016-08-06T16:54:03.185Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a613abd097eb6b2ccab346"
    text: {i dont know how to logout from this chatroom , so i have to logged in here for the next 20 years . ha ha}
    sent: "2016-08-06T16:43:23.956Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a61031d097eb6b2ccaa5aa"
    text: {Have a nice day.  See you next time on this place too.    WBR  Hans}
    sent: "2016-08-06T16:28:33.752Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a60ffc978997001e9bab96"
    text: {Altogether i only want to program so deep , as it is necessary to reach goal in work. That is enough , if the work is successful done.}
    sent: "2016-08-06T16:27:40.369Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a60f7c483751d50f2ed439"
    text: {Ok, youre right. It is complex and there are many methods. I will do that the network programmer better and concentrate on my application. The background of this questions here are more described on Red Lang Google Group postings.  Mechanical Assembly Information Systems.    Thank you very much for your attention Gregg.}
    sent: "2016-08-06T16:25:32.271Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a60e92483751d50f2ed21b"
    text: {Either way. For a simple app, or to experiment, a simple network share should be enough. So your admin just has to set up a share on a server and then you need to (on Windows) create a network drive mapping.}
    sent: "2016-08-06T16:21:38.589Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a60e13483751d50f2ed0ee"
    text: {Do i have do program that or can that all be done by the networker ?}
    sent: "2016-08-06T16:19:31.276Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a60df3857442dc0f58af88"
    text: {Only if each machine also exposes a share for the server to connect to. You could also use the share on the server and have each machine read from that, so all data is on the server. ^/^/It's really hard to say, because there are so many ways this could be done.}
    sent: "2016-08-06T16:18:59.197Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a60d8348422f8b49746d7d"
    text: {Gregg , does that mean that  a main controlling com puter that is also connected in the network , can send data (pictures etc) to the datafile of my application ?}
    sent: "2016-08-06T16:17:07.740Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a60d47fb162b752ca382f4"
    text: {> In such a way that all the main data files of every application is synchroniced automaticly with everyone else.^/^/This makes it a bit more involved. Now something on the server needs to monitor files for changes, and your file is acting like a messaging system, so your data needs to be designed to support data (e.g. which way is data going). }
    sent: "2016-08-06T16:16:07.509Z"
    editedAt: "2016-08-06T16:17:49.411Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a60d15483751d50f2ecf3e"
    text: {Thats good. Then i only have to program my application and the rest can be done by the network programmer. }
    sent: "2016-08-06T16:15:17.979Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a60ce8978997001e9ba4c1"
    text: "Ah, I see it's more than that in your ML message."
    sent: "2016-08-06T16:14:32.927Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a60c8f2f03cf8749cc624b"
    text: {It has nothing to do with networking, except what the OS does to make shares available.}
    sent: "2016-08-06T16:13:03.516Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a60c64483751d50f2ece1c"
    text: {If you have a network share, your app can just write to a network location. }
    sent: "2016-08-06T16:12:20.253Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a60be5483751d50f2ecd29"
    text: "So every Computer can access the datafile ."
    sent: "2016-08-06T16:10:13.709Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a60b666bf4dff61d38c3b8"
    text: {You have a application and a data file on a computer.  Now a network programmer wants to put that datafile of the application in the LAN network . Not matter what protokoll.   I say to the networker : "Please put my app in the network"}
    sent: "2016-08-06T16:08:06.429Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a60abc48422f8b4974688a"
    text: {I'm not sure what you mean by "bind my complete application in a network." Do you want to write a DLL, or communicate with your app via TCP?}
    sent: "2016-08-06T16:05:16.568Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a608c0857442dc0f58a669"
    text: {In fact i want have nothing to do with networking. Only a application programmer i am. }
    sent: "2016-08-06T15:56:48.520Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a6086b48422f8b4974648a"
    text: {The App is already.   Perhaps i have nothing to prepare because a network programmer can access every application on a computer.}
    sent: "2016-08-06T15:55:23.646Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a607ec2f03cf8749cc594f"
    text: {Hi Gregg , i have posted it on google forum too. What do i have to prepare that a networkprogrammer can bind my complete Application in a network , let us say with TCP/IP ?}
    sent: "2016-08-06T15:53:16.289Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a6077fd097eb6b2cca94a7"
    text: {Red only has a few basic I/O features right now. Not raw TCP yet. But feel free to ask your question.}
    sent: "2016-08-06T15:51:27.577Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a6077ffb162b752ca377f0"
    text: "@Mennohexo ask questions, don't ask to ask"
    sent: "2016-08-06T15:51:27.202Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a6075dd097eb6b2cca9418"
    text: "Can anybody help ?"
    sent: "2016-08-06T15:50:53.690Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a606f02f03cf8749cc57a6"
    text: "Have a simple question about that."
    sent: "2016-08-06T15:49:04.173Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a606a2d097eb6b2cca9286"
    text: "I am no Network Programmer"
    sent: "2016-08-06T15:47:46.216Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a605d2483751d50f2ec222"
    text: "TCP/IP"
    sent: "2016-08-06T15:44:18.118Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57a5e586483751d50f2e8618"
    text: {@dockimbel excellent, the other write up was really good, looking forward to another one.}
    sent: "2016-08-06T13:26:30.458Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a5a76648422f8b4973b847"
    text: {Instead of `? typeset!`try just `typeset!`at the R2 prompt, and you will get `block!`.}
    sent: "2016-08-06T09:01:26.330Z"
    editedAt: "2016-08-06T09:02:01.233Z"
    v: 2
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a5a729483751d50f2e21da"
    text: {@geekyI `typeset!` is a real datatype in R3. In R2, it is identical to `block!` and I presume this is for compatibility with R3. }
    sent: "2016-08-06T09:00:25.422Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57a59989d097eb6b2cc9d672"
    text: {R2:^/```^/>> ? typeset!^/No information on typeset! (word has no value)^/>>^/```^/Red's `help` function feels more helpful in this regard}
    sent: "2016-08-06T08:02:17.760Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a59914d097eb6b2cc9d5da"
    text: {Is there a difference in typeset! between version? Red's seem more complete}
    sent: "2016-08-06T08:00:20.891Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a598e92f03cf8749cb9c88"
    text: {@dockimbel doing metaprogramming in red is fun! :smile: }
    sent: "2016-08-06T07:59:37.960Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a59829483751d50f2e0bf2"
    text: {@geekyI Ah, sorry, I misunderstood what you wanted. Once `to` will be fully implemented, you'll be able to just do a `to block! immediate!`.}
    sent: "2016-08-06T07:56:25.221Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a58224483751d50f2de8f1"
    text: {`load form` looks like a good hack when everything else fails :smile: }
    sent: "2016-08-06T06:22:28.449Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a581e248422f8b4973824b"
    text: {I was able to do this:^/```^/red>> third load form immediate!^/== [datatype! none! logic! char! integer! float! word! set-word! lit-word! get-word! refinement! iss...^/```}
    sent: "2016-08-06T06:21:22.337Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a581b1483751d50f2de86c"
    text: {`probe immediate!` returns a typeset! (only in Red tho, in Rebol it is a block)}
    sent: "2016-08-06T06:20:33.493Z"
    editedAt: "2016-08-06T06:26:18.989Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a56fb26bf4dff61d37cbc1"
    text: {@JacobGood1 I should be able to write an even better explanation now. I've started writing a draft for a Red intro.}
    sent: "2016-08-06T05:03:46.212Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a56c7348422f8b49736371"
    text: {@geekyI `body-of` does not work on immediate! types (typeset! is an immediate!). Just `probe` it, like @PeterWAWood did.}
    sent: "2016-08-06T04:49:55.657Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a5587d6bf4dff61d37a6cb"
    text: "I've found `map-each` works like `map`"
    sent: "2016-08-06T03:24:45.297Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a558672f03cf8749cb3e41"
    text: {I'm used to haskell style functional programs, with `fold`, `zip` and `map`, where the main data type is a list (probably the same for lisp)}
    sent: "2016-08-06T03:24:23.558Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a55788483751d50f2da842"
    text: {Looking for a good reference to understand functional/meta programming}
    sent: "2016-08-06T03:20:40.612Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a5573a48422f8b4973442c"
    text: {Out of curiosity, I was wondering if I could get the list of types^/```^/red>> body-of immediate!^/*** Script Error: reflect does not allow typeset! for its value argument^/*** Where: reflect^/```^/reflect doesn't work on data types in general?}
    sent: "2016-08-06T03:19:22.580Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a556c648422f8b49734392"
    text: {I guess that depends on your definition of primitive. I would say all Red datatype values are primitives to some extent, with objects being the least primitive. e.g. they don't have a lexical form.  We also have a `scalar!` typeset.   }
    sent: "2016-08-06T03:17:26.436Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57a55016d097eb6b2cc96ae1"
    text: {@PeterWAWood so immediate! is the closest thing you have to primites}
    sent: "2016-08-06T02:48:54.877Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a528df483751d50f2d5d5e"
    text: {@geekyI "even the literal values are mutable" - this is not correct in all cases. For example, integers are not mutable, words are not mutable. There is a category of values considered ```immediate``` which are not mutable. You can list them in the console:^/```^/red>> probe immediate!^/make typeset! [datatype! none! logic! char! integer! float! word! set-word! lit-word! get-word! refinement! issue! typeset! pair! percent! tuple! time!]^/```}
    sent: "2016-08-06T00:01:35.316Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "57a4f65d48422f8b497289ec"
    text: {@geekyI , take some time to digest. `:` doesn't "bind" in Red parlance, and it's not like call by reference. Some values, like series types, are mutable, others are not.}
    sent: "2016-08-05T20:26:05.154Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4df1bfb162b752ca16bdc"
    text: {The answer to the question of how do variables/scope/metaprogramming work }
    sent: "2016-08-05T18:46:51.734Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4dec92f03cf8749ca4362"
    text: {Ok, I think I get it now.. perhaps that might be the most important concept to understand, something at the heart of red}
    sent: "2016-08-05T18:45:29.724Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4dcf62f03cf8749ca3e91"
    text: {Red.. even the literal values are mutable :tongue: }
    sent: "2016-08-05T18:37:42.684Z"
    editedAt: "2016-08-05T18:39:14.926Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4dc9c48422f8b497241b3"
    text: {The literal string is getting modified here.. sort of}
    sent: "2016-08-05T18:36:12.748Z"
    editedAt: "2016-08-05T18:37:02.100Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4dc77857442dc0f5686c1"
    text: "Actually, that won't be wrong either"
    sent: "2016-08-05T18:35:35.390Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4dc61857442dc0f568685"
    text: {For the unaware, there is a tendency to think `s: "hello world"` working like assignment}
    sent: "2016-08-05T18:35:13.940Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4dbc8483751d50f2ca4de"
    text: "I'll need a day to contemplate this.."
    sent: "2016-08-05T18:32:40.586Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4dbb0d097eb6b2cc87331"
    text: {So the golden rule is `:` binds, which sorts of works like call by reference. Red has "denotational" semantics, which roughly means it has no scope. Anyway, that's what I've learnt so far.. could be all wrong :neutral_face:}
    sent: "2016-08-05T18:32:16.742Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4da53857442dc0f568110"
    text: "You're right!"
    sent: "2016-08-05T18:26:27.233Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4da26483751d50f2ca0d3"
    text: {`t` and `s` do refer to the same string, but you aren't appending to that. You're appending to "d" which you only see as the result, but don't set a word to refer to it.}
    sent: "2016-08-05T18:25:42.670Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4da0dfb162b752ca15fe5"
    text: {That was by intention^/```^/red>> t: s: "hello "^/== "hello "^/red>> append "w" s^/== "whello "^/red>> t^/== "hello "^/```}
    sent: "2016-08-05T18:25:17.879Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4d9ec2f03cf8749ca3747"
    text: {` t: s: "hello world"` and  `append "d" t`}
    sent: "2016-08-05T18:24:44.376Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d9d0fb162b752ca15f34"
    text: "You have multiple expressions in there."
    sent: "2016-08-05T18:24:16.569Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d9682f03cf8749ca3609"
    text: {Right. Binding is how Red works without scoping like other languages. But you may never need to know that, because it *looks* like it has scoping. }
    sent: "2016-08-05T18:22:32.887Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d960978997001e998899"
    text: {```^/red>> t: s: "hello world" append "d" t^/== "dhello world"^/red>> s^/== "hello world"^/```^/This wasn't what I expected.. so I'm still not sure.. shouldn't both s and t refer to the same string?}
    sent: "2016-08-05T18:22:24.353Z"
    editedAt: "2016-08-05T18:23:16.402Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4d8f46bf4dff61d36a177"
    text: {Even my explanation "exists in the block" isn't quite correct. The block has slots, but that doesn't mean the actual string data is there. But let's not go there right now. :^^)}
    sent: "2016-08-05T18:20:36.186Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d8af978997001e998736"
    text: {Ok, so I might have been using bind in my own meaning, no the way red intends it..}
    sent: "2016-08-05T18:19:27.142Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4d885978997001e9986c0"
    text: "But the string just exists in the block."
    sent: "2016-08-05T18:18:45.429Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d8772f03cf8749ca331a"
    text: {Like I said, it's tricky. Because we also have the binding, real `bind`ing of words and contexts.}
    sent: "2016-08-05T18:18:31.166Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d846d097eb6b2cc86a1a"
    text: {Just don't think that the string *contains* the binding.  Because more than one word can refer to it.}
    sent: "2016-08-05T18:17:42.261Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d845fb162b752ca15b1a"
    text: {I think of bind like `s <- "hello world"` not  `s -> "hello world"`^/Think it is the way rebol/red works yeah?}
    sent: "2016-08-05T18:17:41.071Z"
    editedAt: "2016-08-05T18:18:29.977Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4d7ea857442dc0f567b0e"
    text: {Ugh yeah,  the string is bound to `s`, so `s` refers to the string?}
    sent: "2016-08-05T18:16:10.918Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4d7e4857442dc0f567b07"
    text: {It's a tricky subject when we want to reuse words like "bind". :^^)}
    sent: "2016-08-05T18:16:04.242Z"
    editedAt: "2016-08-05T18:16:15.078Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d7986bf4dff61d369e34"
    text: {Maybe I misread the order of what you meant by "bound".}
    sent: "2016-08-05T18:14:48.634Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d776483751d50f2c9a3a"
    text: {> it binds the word to the result of next expression.}
    sent: "2016-08-05T18:14:14.867Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d73f2f03cf8749ca309d"
    text: {So, I think that's what I missed,^/ > "hello world" is bound to `s`^/^/whenever you use `:`, it is bound to something?}
    sent: "2016-08-05T18:13:19.262Z"
    editedAt: "2016-08-05T18:13:59.300Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4d72b857442dc0f567933"
    text: {"hello world" is not bound to `s`. `S` *refers to* it. Strings don't have bindings, words do.}
    sent: "2016-08-05T18:12:59.458Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4d681d097eb6b2cc865cf"
    text: {Ok, I so `s` is bound to the.. func? Like a closure sort of? No confusion there^/```^/[s: "hello world" append s input]^/```^/but "hello world" is bound to `s`? Still fine..}
    sent: "2016-08-05T18:10:09.249Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4d4e2857442dc0f56737f"
    text: {```^/red>> do code^/== func [input /local s][s: "hello world" append s input]^/red>> test "x"^/== "hello worldx"^/red>> body-of :test^/== [s: "hello worldx" append s input]^/```^/I'm lost at how `body-of :test` changed..}
    sent: "2016-08-05T18:03:14.351Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4d1d16bf4dff61d368faf"
    text: {Wow, this is the best explanation I have seen of the rebol/red way of thinking.^/^/https://github.com/red/red/wiki/Why-do-I-have-to-copy-series-values%3F}
    sent: "2016-08-05T17:50:09.793Z"
    v: 1
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a4cce66bf4dff61d368439"
    text: {> @dockimbel  I should really find time to write an intro to Red, explaining the big picture and foundational concepts.^/^/Please find that time. =)  It can take a lot of time to comprehend the big picture of a language.}
    sent: "2016-08-05T17:29:10.940Z"
    editedAt: "2016-08-05T17:29:52.926Z"
    v: 2
    author: "54ac46d2db8155e6700e6acb"
) #(
    id: "57a4b948978997001e993486"
    text: {@geekyI Just keep in mind that such third-party doc is written from his author own's perspective and is not authoritative.}
    sent: "2016-08-05T16:05:28.350Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a4b76dfb162b752ca104f4"
    text: {> http://www.red-by-example.org/series.html#6^/^/That's the most complete Red guide I've seen so far. Didn't see that before. How did I miss?}
    sent: "2016-08-05T15:57:33.614Z"
    editedAt: "2016-08-05T15:59:15.643Z"
    v: 3
    author: "569c37abe610378809bccdff"
) #(
    id: "57a4b5936bf4dff61d3644f4"
    text: "i'll go through your 'wiki' articles ..."
    sent: "2016-08-05T15:49:39.988Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a4b57dd097eb6b2cc8108b"
    text: {@gour Right, that's closer to how it works. I should really find time to write an intro to Red, explaining the big picture and foundational concepts.}
    sent: "2016-08-05T15:49:17.251Z"
    editedAt: "2016-08-05T15:50:20.344Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a4b5606bf4dff61d364476"
    text: {@dockimbel right, so instead of 'variable' it is better to say 'binding', right?}
    sent: "2016-08-05T15:48:48.625Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a4b42fd097eb6b2cc80cfb"
    text: {@gour There is no "variable" in Rebol/Red, only values, among which are *word* values, having the property to refer to another value in a given context (which you can freely change for each word instance, at runtime). All values are strictly anonymous, functions and objects have no *name*. You can manipulate values directly, or indirectly through words referring to them. That extra indirection level does not exists in most other languages.}
    sent: "2016-08-05T15:43:43.220Z"
    editedAt: "2016-08-05T15:48:40.738Z"
    v: 7
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a4ae022f03cf8749c9c45f"
    text: {@RnBrgn thanks...just reading same chapter in Rebol's UsersGuide :-D}
    sent: "2016-08-05T15:17:22.137Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a4adc648422f8b4971c87f"
    text: {@gour    red-by-example.org  has a good explanation as well.   check out "series" section 3.3   http://www.red-by-example.org/series.html}
    sent: "2016-08-05T15:16:22.679Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "57a4ad156bf4dff61d362e1b"
    text: {There are others out there, too, which go more into the details of `bind`, but Doc wrote a great explanation there.}
    sent: "2016-08-05T15:13:25.997Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4acb8978997001e9912fc"
    text: {@greggirwin ohh, that will explain it, thanks. :thumbsup: }
    sent: "2016-08-05T15:11:52.684Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a4ac34483751d50f2c280e"
    text: {https://github.com/red/red/wiki/Why-do-I-have-to-copy-series-values%3F}
    sent: "2016-08-05T15:09:40.462Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a4abad857442dc0f56036b"
    text: {@RnBrgn hmm, even more confused. :-) so it looks that `str: 'test' is allocated from the other part of memory or simply belong to different 'namespace'...still, curious why it is required to use `str: copy ""` when the variable is declared as `local` for the function?}
    sent: "2016-08-05T15:07:25.148Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a4a7cc48422f8b4971b5da"
    text: {@gour ^/```^/red>> print-it: func [/local str] [^/        str: ""^/        insert str "ha"^/        print str^/    ]^/^/red>> str: "test"^/== "test"^/red>> print-it^/ha^/red>> print-it^/haha^/red>> print str^/test^/```^/^/}
    sent: "2016-08-05T14:50:52.138Z"
    editedAt: "2016-08-05T14:51:32.511Z"
    v: 4
    author: "56fac97685d51f252abb72b4"
) #(
    id: "57a49c9748422f8b4971930b"
    text: {```^/print-it: func [/local str] [^/    str: ""^/    insert str "ha"^/    print str^/]^/```^/showing it as example that one has to use `str: copy ""`^/to avoid side effects when repeatedly invoking the function.  Still, I'd like to hear some explanation of the following: "Although str is a local variable, its string value is global. ", iow.  is such semantic common with some other (popular) langauges?}
    sent: "2016-08-05T14:03:03.042Z"
    editedAt: "2016-08-05T14:03:52.929Z"
    v: 3
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a49b2f48422f8b49718e62"
    text: {i continue reading REBOL's User Guide and the Chapter-6 about 'Series' gives the following example:}
    sent: "2016-08-05T13:57:03.230Z"
    editedAt: "2016-08-05T14:03:34.193Z"
    v: 2
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a34bf5836d2d021163a91b"
    text: {@gour We have the global design for them, though we'll need to do some additional work for the details. Also, since those designs are almost 5 years old now, we'll need to revisit them anyway.}
    sent: "2016-08-04T14:06:45.642Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "57a34bf1c915a0e426bc26ea"
    text: {@dockimbel yep, I though so, thanks for clarification!}
    sent: "2016-08-04T14:06:41.171Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a34afbc915a0e426bc2433"
    text: {iow. concurrency & GC although not coming earlier, are still not after-thought, right?}
    sent: "2016-08-04T14:02:35.447Z"
    editedAt: "2016-08-04T14:02:46.508Z"
    v: 2
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a34a38e2ff9ec76e5635e3"
    text: {@maximvl If the roadmap was purely tech-driven, I would do I/O last, I agree. Then I would have also pushed things like GUI, ARM or even float support at the end too. But as you can guess, we cannot have a purely tech-driven roadmap, otherwise, we wouldn't have been able to fund the work on it, and the community around it would have grown much more slower. So we need to account for growth/marketing, business, funding needs too in setting up a successful roadmap. ^/^/For the technical concerns, here is how we will handle them:^/* Concurrency: I/O will be fully asynchronous, so whatever concurrency abstraction we design for Red, I/O should not be a big concern.^/* For the GC, we will carefully design the I/O memory usage in order to minimize the burden for the GC, and make it flexible enough to adapt to different possible GC strategies (incremental vs stop-the-world).^/}
    sent: "2016-08-04T13:59:20.351Z"
    editedAt: "2016-08-04T14:01:50.112Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a32603c915a0e426bbc2f8"
    text: {guys, why do we have concurrency and GC support in the bottom of milestones list? these things can have great impact on everything else, like I/O, can't they?}
    sent: "2016-08-04T11:24:51.418Z"
    editedAt: "2016-08-04T11:25:03.657Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57a297a48c8b3c3c1e05fba0"
    text: "@WiseGenius finally understands."
    status: true
    sent: "2016-08-04T01:17:24.106Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a291df6085a4026515f3bf"
    text: {@WiseGenius still doesn't how to write that way... or why he should.}
    sent: "2016-08-04T00:52:47.264Z"
    v: 1
    author: "556ae44715522ed4b3e13190"
) #(
    id: "57a2360d0bd017c16e3917b6"
    text: "@geekyI knows now, thanks"
    status: true
    sent: "2016-08-03T18:21:01.314Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a22a7e9e85d3e82683f36f"
    text: "@geekyI to write what?"
    sent: "2016-08-03T17:31:42.563Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a226d547659bfb108bb71f"
    text: "@geekyI thinks again"
    status: true
    sent: "2016-08-03T17:16:05.382Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a21be20bd017c16e38cf03"
    text: {@geekyI is wondering how to write like gour. Guess this doesn't work}
    sent: "2016-08-03T16:29:22.757Z"
    editedAt: "2016-08-03T16:29:44.294Z"
    v: 2
    author: "569c37abe610378809bccdff"
) #(
    id: "57a215f30bd017c16e38baad"
    text: "got it. thanks"
    sent: "2016-08-03T16:04:03.041Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a215cc47659bfb108b885f"
    text: "Correct."
    sent: "2016-08-03T16:03:24.473Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a215c9836d2d021160d16e"
    text: "@gour was recently interested to use Racket..."
    status: true
    sent: "2016-08-03T16:03:21.965Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a215c447659bfb108b884a"
    text: {This was done under R2, because you can't do it under Red this way right now.^/```^/>> if: :either^/>> age: 10^/== 10^/>> if age > 10 [print "Older"] [print "Younger"]^/Younger^/```}
    sent: "2016-08-03T16:03:16.149Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a215a2c915a0e426b94a6e"
    text: {that's power of language meant to create DSL-s, right?}
    sent: "2016-08-03T16:02:42.752Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a21544c915a0e426b94910"
    text: {But also consider that `if` could be redefined in another context, in your example. Suppose (and you should NOT do this in general) that you wanted to always supply a second block to `if` as an `else` block, because you don't like `either`. You can do that. }
    sent: "2016-08-03T16:01:08.087Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a214f79e85d3e82683b0cc"
    text: "ok"
    sent: "2016-08-03T15:59:51.657Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a214ec0bd017c16e38b7bc"
    text: {It calls the function we passed in with the args `1 2 3`, then returns the result of that function call.}
    sent: "2016-08-03T15:59:40.854Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a214c99e85d3e82683b024"
    text: {what does block `res: fn 1 2 3 res]` do? i'm not sure i've got it}
    sent: "2016-08-03T15:59:05.282Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a214c047659bfb108b8501"
    text: {This is a bit advanced, so don't worry if it's confusing. First, we define 2 funcs of different arities (number of args they take). Then we write a wrapper that can be passed any function. It supports functions up to an arity of 3 (because we hardcoded 3 args in the call). Note what happens when we call the two different funcs we defined. No errors occur. They each consume the number of arguments they expect, and the extras are just ignored. Red evaluates them, but they don't "do" anything. }
    sent: "2016-08-03T15:58:56.854Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a21413836d2d021160cc7a"
    text: {```^/red>> fn-1: func [v][print v v]^/== func [v][print v v]^/red>> fn-2: func [v vv][print [v vv] reduce [v vv]]^/== func [v vv][print [v vv] reduce [v vv]]^/red>> caller: func [fn][res: fn 1 2 3  res]^/== func [fn][res: fn 1 2 3 res]^/red>> caller :fn-1^/1^/== 1^/red>> caller :fn-2^/1 2^/== [1 2]^/```}
    sent: "2016-08-03T15:56:03.949Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a213819e85d3e82683ac30"
    text: {in any case, it's good to know about that (possible) gotcha :cool:}
    sent: "2016-08-03T15:53:37.188Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a213619e85d3e82683abdd"
    text: ":-)"
    sent: "2016-08-03T15:53:05.125Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a2135a836d2d021160c9be"
    text: {i accept what you say being ignorant about the mechanisms how Rebol/Red do work}
    sent: "2016-08-03T15:52:58.497Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a2134ee2ff9ec76e535953"
    text: {So you can detect "not enough", but there is no such thing as "too much". :^^)}
    sent: "2016-08-03T15:52:46.313Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a2132100663f5b1b47c920"
    text: {Ahh, big difference. When Red evaluates `either` it knows, by its function signature (as evaluated in the context of `do`) that it needs 2 more values. If it gets less, that it can tell. If there are more, `either` just doesn't care about them. It's called free ranging evaluation and is a very important part of how Red works.}
    sent: "2016-08-03T15:52:01.661Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a212f10bd017c16e38b1d6"
    text: ";)"
    sent: "2016-08-03T15:51:13.773Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a212ee9e85d3e82683aa8c"
    text: "in any case, it's interesting"
    sent: "2016-08-03T15:51:10.348Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a212b700663f5b1b47c7dd"
    text: {```^/red>> if age > 10 [print "Older"] print "Done"^/Older^/Done^/```}
    sent: "2016-08-03T15:50:15.576Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a2129f00663f5b1b47c790"
    text: "similar how _either_ detects missing block?"
    sent: "2016-08-03T15:49:51.641Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a21283836d2d021160c709"
    text: {And it may not be a "second" block, it could be anything.}
    sent: "2016-08-03T15:49:23.369Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a2127700663f5b1b47c6f2"
    text: "parse error? extra block?"
    sent: "2016-08-03T15:49:11.628Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a21254836d2d021160c67a"
    text: {There is more data to evaluate (the second block). Should it stop without doing that?}
    sent: "2016-08-03T15:48:36.394Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a2121d836d2d021160c5e4"
    text: {Red evaluates `if`, sees that it needs a condition, so evaluates enough for that, and then its body block. Now Red is done with `if`. What should it do next? }
    sent: "2016-08-03T15:47:41.155Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a211f747659bfb108b7bb7"
    text: {and reading the Guide brings new light into Rebol/Red which i really like}
    sent: "2016-08-03T15:47:03.913Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a211d01c2bf6621bb8cf20"
    text: {of course, i admit i'm polutted by other langauges :-)}
    sent: "2016-08-03T15:46:24.957Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a211c8836d2d021160c4dd"
    text: {It does know that. And `if` is only consuming one block. My example above isn't good. No coffee yet.}
    sent: "2016-08-03T15:46:16.586Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a2116000663f5b1b47c3ae"
    text: {well, my naive thinking is that it should know that _if_ block should not receive more than one block?}
    sent: "2016-08-03T15:44:32.543Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a211339e85d3e82683a5b0"
    text: {```^/red>> if age > 10 [print "Older"] [print "Younger"]^/Older^/== [print "Younger"]^/red>> if age < 10 [exit] [print "Younger"]^/== [print "Younger"]^/```}
    sent: "2016-08-03T15:43:47.851Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a210de47659bfb108b7903"
    text: {By design, and because it can't know what you're thinking. :smile: ^^)}
    sent: "2016-08-03T15:42:22.125Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a210ce1c2bf6621bb8cc26"
    text: "programmer still has to use his/her brain :-)"
    sent: "2016-08-03T15:42:06.765Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a210980bd017c16e38aaf4"
    text: "ok"
    sent: "2016-08-03T15:41:12.584Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a2109500663f5b1b47c146"
    text: "Yes, by design."
    sent: "2016-08-03T15:41:09.027Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a2108d47659bfb108b7821"
    text: {As far as Red is concerned, `if age > 10 [print "Older"] [print "Younger"]` is perfectly valid.}
    sent: "2016-08-03T15:41:01.309Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a21088c915a0e426b939bb"
    text: "by design?"
    sent: "2016-08-03T15:40:56.957Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a2104bc915a0e426b938e2"
    text: "Short answer: No, it can't. "
    sent: "2016-08-03T15:39:55.522Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a20fc8c915a0e426b93747"
    text: {like in `either age > 10 [print "Older"]` example where it reports: ^/```^/*** Script Error: either is missing its false-blk argument^/*** Where: either^/```^/}
    sent: "2016-08-03T15:37:44.226Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a20f8c9e85d3e82683a10b"
    text: {i see the  code as example where programmer forgot to use _either_ instead of _if_, but wonder if Red compiler could be taught to report something instead of just returning last expression?}
    sent: "2016-08-03T15:36:44.646Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a20e49e2ff9ec76e534ab1"
    text: {For the `if` example, Rebol would give the same result in the console. If `age` is > 10, you should also see "OLder" printed out. ^/The reason you get the second block as the "result" is because Red returns the last evaluated expression, and that block is not consumed by `if`.}
    sent: "2016-08-03T15:31:21.232Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a20dc7836d2d021160b877"
    text: {@gour, not all Rebol words will be ported. Some wont' be needed, and some will be done in such a different way that it wouldn't make sense. For example, while some old VID docs may apply, anything related to View at the lower level will not. Some concepts will be similar, but that's all.}
    sent: "2016-08-03T15:29:11.987Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "57a20caae2ff9ec76e53450b"
    text: {the above-mentioned Guide gives the following example `if age > 10 [print "Older"] [print "Younger"]` for common mistake which is hard to detect. however, for whatever value of _age_  Red gives result of `[print "Younger"]`. is that same one would get from Rebol?^/}
    sent: "2016-08-03T15:24:26.095Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a2092a00663f5b1b47aba7"
    text: {reading/skimming through Rebol's [Core Users Guide](http://www.rebol.com/docs/core23/rebolcore.html) (as recommended by @dockimbel ) and encountering not (yet) defined stuff like `remold`, `protect` etc.  Can one ecpect that all these things are going to be implemented in Red eventually or some stuff is not going to be needed in Red?}
    sent: "2016-08-03T15:09:30.534Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1f790e2ff9ec76e5306b2"
    text: {Hi Nenad. Did you find a good gif editor? i am curious... :)}
    sent: "2016-08-03T13:54:24.286Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57a1bcc70bd017c16e37c86d"
    text: "ok"
    sent: "2016-08-03T09:43:35.566Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1bc7d0bd017c16e37c7c9"
    text: {@Gour You should rather report such issues in red/red room, where more people who are using Wine could help you.}
    sent: "2016-08-03T09:42:21.958Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1ba9c9e85d3e82682c0c1"
    text: "i get similar thing with worm-demo"
    sent: "2016-08-03T09:34:20.673Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1b9969e85d3e82682be51"
    text: "@dockimbel i do not see any log file..."
    sent: "2016-08-03T09:29:58.658Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1b8ea836d2d02115fdff1"
    text: {@gour Thanks. Odd behavior. Do you have any errors in the Wine logs? @qtxie What do you think of that?}
    sent: "2016-08-03T09:27:06.250Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1b7df836d2d02115fdd48"
    text: "for clock demo"
    sent: "2016-08-03T09:22:39.643Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1b7b6c915a0e426b8521e"
    text: {@dockimbel here is the [link](http://pasteboard.co/pCWGx2FB.png)}
    sent: "2016-08-03T09:21:58.624Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1b6ac1c2bf6621bb7de72"
    text: {@gour Can you be more specific about "does not work"? Any screenshot?}
    sent: "2016-08-03T09:17:32.670Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1b67f9e85d3e82682b69c"
    text: {@dockimbel well, i don't have XP, no Windows at all, neither via vbox, but just cross-compiled to WinXP target and/or tried with Wine...spreadsheet demo works, but those Eve-like ones do not}
    sent: "2016-08-03T09:16:47.121Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a1ad110bd017c16e37a5c0"
    text: {@gour IIRC, people reported it working on XP. The spreadsheet demo was working fine on Wine, so I see no reasons the clock wouldn't, unless there's a regression caused by latest commits. Does Wine support SSE3 (or at least the x87 FISTPP instruction)?}
    sent: "2016-08-03T08:36:33.819Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57a1983c0bd017c16e377987"
    text: {does windows in this case means something like >= win7}
    sent: "2016-08-03T07:07:40.121Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a197151c2bf6621bb79858"
    text: {i'm using latest master build...tried also to produce executables  by cross-compiling to win xp target and then run, but same thing. does it mean that linux users still have to be patient with gui stuff?}
    sent: "2016-08-03T07:02:45.138Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a195660bd017c16e3772fb"
    text: "Eve-like demos do not work here with wine?"
    sent: "2016-08-03T06:55:34.738Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a18f86e2ff9ec76e520e68"
    text: {There is no workflow yet, that I know of, unless you're porting things that don't involve I/O. In that case, my workflow is to look for big obvious that can't be ported, or will take a lot of work. Don't try those. Next, copy, change %.r to %.red, find the things I know don't match up, pull from my stock of ported mezzanines for others, try it, throw out old stuff, think more in Red and don't worry about R2 compatibility. }
    sent: "2016-08-03T06:30:30.461Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a181d29e85d3e82682442e"
    text: {What's the current workflow to port from R2 to Red?}
    sent: "2016-08-03T05:32:02.236Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a181a6836d2d02115f7076"
    text: {@greggirwin cool, I see you have listed some in the red wiki}
    sent: "2016-08-03T05:31:18.479Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a1189c1c2bf6621bb6b160"
    text: {We probably need a place where people can list the mezzanines they want, with a way to sort by aggregate need. }
    sent: "2016-08-02T22:03:08.732Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a111ebe2ff9ec76e511c9e"
    text: {R2 compatibility mezzanines would be great because then I could compile a lot of my R2 tools that are used in our businesses}
    sent: "2016-08-02T21:34:35.731Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "57a0c9930bd017c16e35a738"
    text: {@geekyI, we could look at a community repo for R2 compatibility mezzanines, to aid porting. I have a gist up where I'm dumping mezz ideas, but many are new and not just for porting purposes. Let's see what 0.7.0 brings, because I/O is a big piece and may be better to write to match Red's model if it differs from R2.}
    sent: "2016-08-02T16:25:55.595Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57a02b8b1c2bf6621bb46210"
    text: "Thanks Doc and Qtixie"
    sent: "2016-08-02T05:11:39.362Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a02b3f00663f5b1b43598a"
    text: {Red has come such a long way since I started.. it was missing a lot of rebol functions.. so a lot of code wasn't working (you had to rely on rebol docs for most everything)}
    sent: "2016-08-02T05:10:23.797Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a02a4a9e85d3e8267f24ee"
    text: {i believe the current Red can serve me well while learning...i even did try to cross-compile to Linux and running executable via wine worked (dunno about the last version, but i assume no regressions here)}
    sent: "2016-08-02T05:06:18.034Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a029ea00663f5b1b435762"
    text: "np ;)"
    sent: "2016-08-02T05:04:42.184Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a029bde2ff9ec76e4ed47d"
    text: {I see you're already running red.. my bad @gour . Just started with gitter.. not familiar with everything yet}
    sent: "2016-08-02T05:03:57.593Z"
    v: 1
    author: "569c37abe610378809bccdff"
) #(
    id: "57a024c79e85d3e8267f1c50"
    text: "(my Red binary _-- red-lang_ is in `$HOME/bin`)"
    sent: "2016-08-02T04:42:47.416Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a0248a0bd017c16e341f11"
    text: {@dockimbel thank you. on my Linux I use [fish shell](http://fishshell.com/) and here is workaround for fish users:^/```^/cat .config/fish/functions/red.fish ^/function red^/    ~/bin/red-lang $argv^/end^/```^/^/}
    sent: "2016-08-02T04:41:46.595Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57a02028e2ff9ec76e4ec4d2"
    text: {@gour You need to wrap it in a shell script in such case, as a workaround. See https://github.com/red/red/issues/543.}
    sent: "2016-08-02T04:23:04.539Z"
    editedAt: "2016-08-02T04:23:07.044Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579fa193e2ff9ec76e4dcb1e"
    text: {@greggirwin ok, we can live with that, or there are more pressing issued to be done before}
    sent: "2016-08-01T19:22:59.165Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579fa01f00663f5b1b425290"
    text: {I believe that issue is related to Rebol Encap, so will be there until Red is self-hosted.}
    sent: "2016-08-01T19:16:47.398Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "579f9563c915a0e426b3a2bc"
    text: "hmm, it seems it's still the latter"
    sent: "2016-08-01T18:30:59.107Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f954e47659bfb1085f50c"
    text: {iirc, Red binary had to be in the current directory to be properly launched. is it still the same or it can work from the $PATH? }
    sent: "2016-08-01T18:30:38.051Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f7441e2ff9ec76e4d4cf0"
    text: "@dockimbel thank a lot!! looks great"
    sent: "2016-08-01T16:09:37.156Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "579f70fcc915a0e426b33e2f"
    text: {@gour Definitely the [Rebol Core Manual](http://web.archive.org/web/20160322081114/http://www.rebol.com/docs/core23/rebolcore.html), it's the best doc I know for learning the Rebol/Red basics.}
    sent: "2016-08-01T15:55:40.318Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579f6e359e85d3e8267d77c6"
    text: {i read two articles at [Red Programming](http://redprogramming.com/) site, but wonder which docs would you recommend to continue with real learning process? ([Official](http://doc.red-lang.org/) docs looks ok, although more GUI-oriented atm  and therefore not the best resource for someone familiar with neither Rebol nor Red?}
    sent: "2016-08-01T15:43:49.790Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "5799d7bdd155b0294e10e825"
    text: "@dockimbel yep, thanks)"
    sent: "2016-07-28T10:00:29.854Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5799d434ad8f331f4e4f2ffb"
    text: {@maximvl In case you need to access the Rebol docs, they are available through Google cache or Web archive: http://web.archive.org/web/20160604190646/http://www.rebol.com/docs.html}
    sent: "2016-07-28T09:45:24.962Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5799d0e03383eb62214a3309"
    text: "=("
    sent: "2016-07-28T09:31:12.865Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5799d0db3383eb62214a32fe"
    text: {>It's not just you! http://rebol.com looks down from here. }
    sent: "2016-07-28T09:31:07.000Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57996818d155b0294e10060e"
    text: "csnn"
    sent: "2016-07-28T02:04:08.140Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5796445a7c9324e20efd18f3"
    text: {Also posting on /r/programming is a good way to get the attention of the HN crowd too.}
    sent: "2016-07-25T16:54:50.717Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579643f63383eb6221425075"
    text: {@pekr No, the date doesn't matter. Though, it is usually harder to cross the threshold if the poster has a low karma (I guess your karma on HN is not high).}
    sent: "2016-07-25T16:53:10.435Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579643b47c9324e20efd170a"
    text: {@maximvl It's unfortunate, yes. Usually I monitor the new entries on HN after I publish a blog post, so I can alert our community to upvote it enough for it to make it on front page.}
    sent: "2016-07-25T16:52:04.926Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579638da3383eb6221423382"
    text: {We can repost, no? Does the blog article need to be of an recent date?}
    sent: "2016-07-25T16:05:46.474Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "579637698fb4820a4662d1fa"
    text: {a bit sad, though previous red posts did a lot of noise anyway}
    sent: "2016-07-25T15:59:37.786Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "579637487c9324e20efcf683"
    text: "ah"
    sent: "2016-07-25T15:59:04.908Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "579623b7ad8f331f4e46b7e4"
    text: {@maximvl Two guys posted on HN, but at wrong time, so the posts didn't make it on front page.}
    sent: "2016-07-25T14:35:35.348Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "579620cd00c8ebdd0e225828"
    text: {Is there any acceptance process? I think I saw it published (via the SO feed), but it depends how many "likes" it gets ....}
    sent: "2016-07-25T14:23:09.921Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "579620a4ad8f331f4e46af0f"
    text: {@dockimbel do you mean it wasn't accepted or just wasn't published?}
    sent: "2016-07-25T14:22:28.066Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57961542d155b0294e08680b"
    text: {@maximvl Indeed ;-), too bad we didn't make it on HN or Reddit with this article and demo.}
    sent: "2016-07-25T13:33:54.272Z"
    editedAt: "2016-07-25T13:34:04.612Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57960dba93148c6b21dc97df"
    text: "the clock example is simply awesome"
    sent: "2016-07-25T13:01:46.682Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5790e6233d74e5a016837279"
    text: "http://www.rebol.com/docs.html"
    sent: "2016-07-21T15:11:31.492Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5790e61275045f87671d825d"
    text: "http://re-bol.com/rebol.html"
    sent: "2016-07-21T15:11:14.560Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5790e60f0720fd587abbacf9"
    text: "ok cool, Thanks"
    sent: "2016-07-21T15:11:11.834Z"
    v: 1
    author: "5790e551c2f0db084a240ad6"
) #(
    id: "5790e5e116487c5e517394a6"
    text: {Not yet. In the meantime, you could scan some old Rebol docs along those lines. Red is only at 0.6, so not feature complete, but a lot of what you learn will translate.}
    sent: "2016-07-21T15:10:25.908Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5790e5a13d74e5a016836c6a"
    text: {I am new to Programming except some lite PowerShell scripting, are there any e-books or PDF's for newbies?  "Red Programming for Dummies"}
    sent: "2016-07-21T15:09:21.544Z"
    v: 1
    author: "5790e551c2f0db084a240ad6"
) #(
    id: "578f36929f35137e67e53428"
    text: {Github activity of a repo is visible in the chat room which corresponds to that repo.}
    sent: "2016-07-20T08:30:10.773Z"
    editedAt: "2016-07-20T08:30:20.096Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578f366b2d04e0585194d8de"
    text: {btw - activity feed is attached to only a red/red room? Just asking, as I have constant problems with Gitter, sometimes not seeing icons, having to frequently refresh (f5, shift + reload)}
    sent: "2016-07-20T08:29:31.912Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578f35e73d74e5a0166eb2ce"
    text: {@dander I think that if you are posting in a room which is related to a github repo, the right prefix would be automatically prepended to your issue number.}
    sent: "2016-07-20T08:27:19.197Z"
    editedAt: "2016-07-20T08:27:22.961Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578f25d716487c5e515f2fec"
    text: "I proposed another solution to 2128"
    sent: "2016-07-20T07:18:47.210Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578f23ab3d74e5a0166e0b22"
    text: "I guess I needed to include the repo name"
    sent: "2016-07-20T07:09:31.524Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578f23642d04e0585193e978"
    text: {hmm.. I just entered the number. I think gitter picked the wrong url. should be this:^/https://github.com/red/red/issues/2127}
    sent: "2016-07-20T07:08:20.431Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578f21d50720fd587aa678ce"
    text: "page not found"
    sent: "2016-07-20T07:01:41.601Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "578f1ab175045f8767085796"
    text: "@dockimbel created #2127"
    sent: "2016-07-20T06:31:13.986Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578ef65d841e619d1616082e"
    text: "@dander Please open a ticket about it."
    sent: "2016-07-20T03:56:13.811Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578e9c013d74e5a0166891df"
    text: "My exact thought Nenad."
    sent: "2016-07-19T21:30:41.845Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e799716487c5e5157aaf9"
    text: {@dander Agreed that the `help` output format for USAGE is misleading. I think it could be easily fixed by moving every refinement+arguments new lines, indented.}
    sent: "2016-07-19T19:03:51.015Z"
    editedAt: "2016-07-19T19:04:15.190Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578e77da75045f8767019012"
    text: {...*not* suggesting a change to the language (mistyped)}
    sent: "2016-07-19T18:56:26.983Z"
    editedAt: "2016-07-19T18:56:57.157Z"
    v: 2
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e751c16487c5e51576686"
    text: {maybe it's just one of "the things you learn". I'll add it to my list :)}
    sent: "2016-07-19T18:44:44.252Z"
    editedAt: "2016-07-19T18:45:14.111Z"
    v: 2
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e74f13d74e5a01666a437"
    text: { I think it might be worth considering removal of the refinements from the "USING" section... but I don't know if others would be tripped up by this as well}
    sent: "2016-07-19T18:44:01.059Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e740c841e619d160fa1b4"
    text: {Yeah, I'm suggesting a change to the language. Just guessing at the reason that it isn't allowed.}
    sent: "2016-07-19T18:40:12.340Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e70859f35137e67dc70b5"
    text: {Most probably with Red's `do`evaluator ... but who knows, that's a question to language designer :-)}
    sent: "2016-07-19T18:25:09.301Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e703075045f876701219b"
    text: {That would require some deep change and not sure it would be possible.}
    sent: "2016-07-19T18:23:44.193Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e6f7a841e619d160f64a6"
    text: {it seems like it would be nice to allow the refinements to be placed in that way, but I guess there would be no way to know to which word the refinement applies}
    sent: "2016-07-19T18:20:42.451Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e6efc75045f8767010d67"
    text: {Thanks for all the explanation on this! To double back a little bit, it seems like the help format might be a little misleading, as I generally take "usage" to mean "this is an example of how you would use this".^/```^/USAGE:^/    insert series value /part length /only /dup count^/```}
    sent: "2016-07-19T18:18:36.615Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e692f2d04e058518bb704"
    text: {My remark, that refinements might not be considered a path, might not be true. You can have function inside the object, or function inside the function. There's just a trouble with refinement propagation to the lower level. But basically you can do: ^/```^/red>> obj: context [add: func [a b /double][either double [(a + b) * 2][a + b]]]^/== make object! [^/    add: func [a b /double][either double [(a + b) * 2] [a + b]]^/]^/red>> obj/add 1 2^/== 3^/red>> obj/add/double 1 2^/== 6^/```}
    sent: "2016-07-19T17:53:51.929Z"
    editedAt: "2016-07-19T18:02:30.568Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e683d0720fd587a9e99a0"
    text: {> so standard arguments always come first, followed by each refinement and its parameter (if there is one), in the order they are given?^/^/That is exactly right. And refinements can take multiple parameters.}
    sent: "2016-07-19T17:49:49.930Z"
    editedAt: "2016-07-19T17:49:58.861Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e67fa9f35137e67dbe6a8"
    text: {You can think of refinements like named parameters, except that the name is attached to the call, not the argument that goes with it (except when it's consumed).}
    sent: "2016-07-19T17:48:42.433Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e67c275045f876700b5df"
    text: {Coincidentally, I recently wrote https://gist.github.com/greggirwin/53ce7d1228422076e142fa5a061e7649, which may help you visualize things. I'm also working on a design to let you compute function calls with refinements. A nicer `apply` concept.}
    sent: "2016-07-19T17:47:46.509Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e677c75045f876700b22b"
    text: {Your example won't work Dave. Refinements have to be attached to the function call itself.}
    sent: "2016-07-19T17:46:36.020Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e677816487c5e515694fc"
    text: {as for your example - no - you have to type `function/param-x 1 2 x` I can admit, that long Rebol-like language refinement statements, might seem unreadable, especially if you compute parameters inline ... }
    sent: "2016-07-19T17:46:32.273Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e672fac85f2507acf6695"
    text: {It's another aspect of the context-sensitive nature of Redbol. Paths in the context of function calls, can almost be thought of as dialected. That is, rather than thinking of it as nested elements in a tree, they are treated as a top-level element with a list of flags as a second level.}
    sent: "2016-07-19T17:45:19.795Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e66f4ac85f2507acf65c5"
    text: {yes. There's some problem with refinements order in Red still, but in Rebol, you can specify them in whatever order. You just have to keep their eventual parameters properly ordered ...}
    sent: "2016-07-19T17:44:20.527Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e66df16487c5e51568a1f"
    text: {so from your example, you could equally do `function 1 2 /param-x x /param-y y`?}
    sent: "2016-07-19T17:43:59.443Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e66bb841e619d160edbc7"
    text: {yes, so maybe part of what confused me is that there are different forms}
    sent: "2016-07-19T17:43:23.175Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e66b2ac85f2507acf64c8"
    text: {as you can see, `insert` accepts two values, those must be always there. Then it can consume some refinements, and two of them consume their own parameter .... }
    sent: "2016-07-19T17:43:14.563Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e66800720fd587a9e858f"
    text: {```^/red>> help insert^/^/USAGE:^/    insert series value /part length /only /dup count^/^/DESCRIPTION:^/     Inserts value(s) at series index; returns series past the insertion. ^/     insert is of type: action!^/^/ARGUMENTS:^/     series  [series! bitset! map!]^/     value  [any-type!]^/^/REFINEMENTS:^/     /part => Limit the number of values inserted.^/         length  [number! series!]^/     /only => Insert block types as single values (overrides /part).^/     /dup => Duplicate the inserted values.^/         count  [number!]^/```}
    sent: "2016-07-19T17:42:24.236Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e6621ac85f2507acf5fad"
    text: {look at the console help, it might help. Or at the sources of functions, which provide one ...}
    sent: "2016-07-19T17:40:49.835Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e660f9f35137e67dbd410"
    text: "exactly"
    sent: "2016-07-19T17:40:31.757Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e65ff841e619d160ecbe6"
    text: {so standard arguments always come first, followed by each refinement and its parameter (if there is one), in the order they are given?}
    sent: "2016-07-19T17:40:15.170Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e65c40720fd587a9e7262"
    text: {note, that function itself accepts some parameters. Refinements, might accept another ones. Does not look much readable though.}
    sent: "2016-07-19T17:39:16.507Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e658e841e619d160ec06d"
    text: {It just uses different order: `function/param-x/param-y 1 2 x y`}
    sent: "2016-07-19T17:38:22.051Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e654d2d04e058518b7af8"
    text: {It is simply a means to switch the function behaviour. Something like you run some command line tool, using -r param1 -t param2 etc.}
    sent: "2016-07-19T17:37:17.037Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e652675045f8767008fa7"
    text: {Simply put, it is a different concept, which visually looks identical to path, but not sure, it could/should be regarded being one?}
    sent: "2016-07-19T17:36:38.571Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e6509ac85f2507acf54bb"
    text: {While they might be a children of face, you don't access them via path to the face here.}
    sent: "2016-07-19T17:36:09.982Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e61662d04e058518b42e4"
    text: {It makes total sense that you'd want to be able to do something like that, but I don't get what the rules are for it (or if not rules, convention for it?)}
    sent: "2016-07-19T17:20:38.542Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e60fc0720fd587a9e321c"
    text: {I think I should explain a little better. The way I interpret a `path!` is like a directory path or object hierarchy where each successive part is a child of the previous part, but unless I am mistaken, both `options` and `flags` are children of `face!`. I am having trouble reconciling that in my head}
    sent: "2016-07-19T17:18:52.167Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578e586f841e619d160ddcda"
    text: {I still don't quite understand the syntax for specifying multiple refinements. Maybe that is where @sergey6661313 thought it seemed non-intuitive too?}
    sent: "2016-07-19T16:42:23.201Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
)#(
    id: "578e31479f35137e67d89b23"
    text: {It's a still long way towards 1.0, so we can come up with some improvements .... of course based upon practical testing ....}
    sent: "2016-07-19T13:55:19.336Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e312a16487c5e51532148"
    text: {Yes, he studied all Rebol available GUIs .... GUIs are not easy to be done in a big scale, and staying always consistent .... }
    sent: "2016-07-19T13:54:50.178Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e30fa2d04e05851884ab8"
    text: {I imagine Doc has a lot of it in his head from so many years of use, so he will learn lessons from the past.}
    sent: "2016-07-19T13:54:02.171Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e30b7ac85f2507acbe9a4"
    text: {The best things is to probably forget about old GUIs, as it creates only a confusion ..... :-(}
    sent: "2016-07-19T13:52:55.175Z"
    editedAt: "2016-07-19T13:53:05.851Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e309316487c5e51531c14"
    text: {So I was right - options were used to allow user to set them in VID, facets held some values used in the style. Tags were used for what we calll flags and/or options ... http://development.saphirion.com/rebol/r3gui/styles/index.shtml#sect5.4}
    sent: "2016-07-19T13:52:19.395Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e2fbfac85f2507acbdd0c"
    text: "...right now. "
    sent: "2016-07-19T13:48:47.582Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e2fa22d04e0585188327c"
    text: "Except I don't have anything more to add. ;^^)"
    sent: "2016-07-19T13:48:18.141Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e2f800720fd587a9b1fbd"
    text: "we could move as well to gui-branch group"
    sent: "2016-07-19T13:47:44.392Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e2f770720fd587a9b1fa9"
    text: {I think Team Red is on the right track, and will listen if someone posts brilliant improvements.}
    sent: "2016-07-19T13:47:35.918Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e2f4d2d04e058518826fd"
    text: {The R2 model was bad, beyond basic use, because you needed to understand how every style worked. Accessors were great in that regard, so you didn't have to learn and remember which facet did what, or how they interacted.  Not needing to `show` in Red, with every change, is a huge step up.}
    sent: "2016-07-19T13:46:53.051Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e2f1f75045f8767fd1419"
    text: {No suggestions here either. I am not able to mentally embrace it all right now and forgot almost everything re R3 GUI ....}
    sent: "2016-07-19T13:46:07.537Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e2eec9f35137e67d86632"
    text: {I don't have any ideas of how to make it better just now. }
    sent: "2016-07-19T13:45:16.097Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e2ed10720fd587a9b13be"
    text: {I do remember, we wanted to set almost anything and we used direct object access in R2. R3 GUI prohibited that, and introduced set-facet/get-facet wrappers.}
    sent: "2016-07-19T13:44:49.244Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e2e973d74e5a016621048"
    text: {but - maybe options are a bit confusing. Respetively - I do remember R3 GUI, options meant values, you, as a style author exposed to be inlined in VID dialect. Window options are more like direct object field settings, while in docs we can find: "Options facet holds optional facets which are used for specific behaviors" whereas in the face section, options are described as "Extra face properties in a [name: value] format."}
    sent: "2016-07-19T13:43:51.715Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e2e150720fd587a9b0d77"
    text: {It can be a lit-word! if it's only one item.^/^/One downside to blocks as interfaces is that there's no built-in processing for documentation, unless you can fit it all in a very short string. Long doc strings don't work well with `help`.}
    sent: "2016-07-19T13:41:41.702Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e2dd02d04e058518817ed"
    text: {Not sure if flags need to be a block, or can ba a literal value too ...}
    sent: "2016-07-19T13:40:32.538Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e2da69f35137e67d8545d"
    text: {A block is flexible and extensible, as an interface mechanism. For example, if they add options to limit the min and max size of a resiazable window, that wouldn't break existing code. You could also write Petr's example this way:^/```^/view/options [button "ok" [unview]][offset: 0x20 size: 500x200 flags: 'no-border]^/```}
    sent: "2016-07-19T13:39:50.736Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e2cb69f35137e67d845e6"
    text: {Is `options` documented? Maybe that's what is confusing. ^/^/@sergey6661313 , you could use `/size` and `/offset` separately if that's clearer to you.}
    sent: "2016-07-19T13:35:50.749Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578e16670720fd587a99d6f5"
    text: {Well, I am not good at following the proper Red coding rules (should re-read the docs), but you might as well write it not just like a one-liner:^/```^/view/options/flags [^/^-below^/^-base 200x200 red^/^-field "..."^/^-area "..."^/^-button "OK" [unview]^/][^/^-offset: 0x20^/][^/^-no-border^/]^/ ```}
    sent: "2016-07-19T12:00:39.705Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e14d20720fd587a99c7cf"
    text: "Why don't you consider it being non-intuitive?"
    sent: "2016-07-19T11:53:54.034Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578e13929f35137e67d7080a"
    text: "somehow not intuitive... but  it works!"
    sent: "2016-07-19T11:48:34.420Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "578e01139f35137e67d62dfa"
    text: {`view/options/flags [button "ok" [unview]][offset: 0x20 size: 500x200][no-border]`}
    sent: "2016-07-19T10:29:39.078Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578dfe92841e619d1608e522"
    text: {how to write correctly? "View / flags and offset"}
    sent: "2016-07-19T10:18:58.775Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "578dfcf0ac85f2507ac91bf9"
    text: {http://doc.red-lang.org/gui/View.html - see the link to the Window section ....}
    sent: "2016-07-19T10:12:00.528Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578dfb4fac85f2507ac90943"
    text: {And where is possible to see all the flags?^/I want to clock as in the example but without frames and window to appear in the upper right corner.}
    sent: "2016-07-19T10:05:03.249Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "578df3c19f35137e67d5aa09"
    text: {maybe I would welcome the mixture - showing a title-bar, but not border. Not sure it is possible. }
    sent: "2016-07-19T09:32:49.469Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578df3b2841e619d160871c3"
    text: "Thank you so much :)"
    sent: "2016-07-19T09:32:34.208Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "578df3859f35137e67d5a91b"
    text: "another flag is `no-title`"
    sent: "2016-07-19T09:31:49.308Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578df3550720fd587a98553c"
    text: {`view/flags [button "unview" [unview]][no-border]`}
    sent: "2016-07-19T09:31:01.235Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578df31b75045f8767f9e080"
    text: "Hello. How can create windows without frames?"
    sent: "2016-07-19T09:30:03.584Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "578ceedc179b42515e21c63f"
    text: {Also, If your intention is to run scripts without the gui-console, look at the --cli option (not sure about that one). Else, I would compile my own executable working as a launcher for my scripts to bypass the gui console by default. }
    sent: "2016-07-18T14:59:40.505Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578cec4c179b42515e21c47e"
    text: {@DarioX1973_twitter You can use gitter to forrage informations. Sometimes you're lucky. :point_up: [April 9, 2016 6:02 AM](https://gitter.im/red/red?at=57087ee705e328bb386d0525)}
    sent: "2016-07-18T14:48:44.963Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578cc85c8423d084245ae42f"
    text: {@SteeveGit  1) how can i find `on-close` documentation? i haev some difficult (i mean, respect to other well known languages) to find docs on line ... 2) mmmm ... i understand you Steeve, and for same task i am aware of it, but i would like to use Red also, some times, as pure scripting way, and i will run without  console... }
    sent: "2016-07-18T12:15:24.506Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578ca6ed4e0aa786459abd10"
    text: {As a side Note: I think it's a bad idea to hide the console when you do tests or new developpments. You will not be able to catch errors. When your app is stable enough and you are ready to deploy it. You'll want to compile it anyway and so, get rid of the console.}
    sent: "2016-07-18T09:52:45.753Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578ca1e3cb81a7d1426337e6"
    text: {The trick I used to hide the console, is just a temporary trick. There is no official support to terminate the process when the console is hidden. So, you have to code it by yourself. See how to use the `òn-close` event}
    sent: "2016-07-18T09:31:15.575Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578ca0d93c5129720e519d85"
    text: {Yes if i click on my button, but no .. gui-console process remain if i close the X of the window. How avoid it???}
    sent: "2016-07-18T09:26:49.718Z"
    editedAt: "2016-07-18T09:26:59.294Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578ca087e4375c921205c2a6"
    text: {Ah, i didn't notice i had a lot of gui-console- process stil active, but using quit now i have the only one active as process. ^/```^/Red [Needs: 'View]^/console: system/view/screens/1/pane/-1 console/visible?: false^/view [text "ciao dario" button "quit" [quit]]^/```^/So this is good?}
    sent: "2016-07-18T09:25:27.853Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578ca0173c5129720e518b4f"
    text: {[![console-closing.png](https://files.gitter.im/red/red/welcome/Pe4O/thumb/console-closing.png)](https://files.gitter.im/red/red/welcome/Pe4O/console-closing.png)}
    sent: "2016-07-18T09:23:35.593Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578c9f1bdbf44d911d5c5279"
    text: {You need to use the fonction `quit` to terminate the process. Just closing your windows will not suffice.}
    sent: "2016-07-18T09:19:23.971Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578c9ed54e0aa786459ab8c5"
    text: "The console is just  hidden but still running."
    sent: "2016-07-18T09:18:13.538Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578c9eafe4375c921205b2d7"
    text: "I see only the window without console ... "
    sent: "2016-07-18T09:17:35.997Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578c9e938423d08424591784"
    text: {I'm not sure to understand how "don't quit properly your app (with quit)". How to do it??}
    sent: "2016-07-18T09:17:07.862Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578c9dd3e4375c921205a69c"
    text: ""
    sent: "2016-07-18T09:13:55.595Z"
    editedAt: "2016-07-18T09:15:20.045Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578c9d61e4375c9212059b86"
    text: ""
    sent: "2016-07-18T09:12:01.739Z"
    editedAt: "2016-07-18T09:15:33.347Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578c9d2b9f79ee4f2bd8e9c5"
    text: ""
    sent: "2016-07-18T09:11:07.215Z"
    editedAt: "2016-07-18T09:11:27.159Z"
    v: 3
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578c9c18c732138e6b0fec93"
    text: {But be aware of the fact that if you don't quit properly your app (with **quit**). The console is still alive (also the attached  processus)}
    sent: "2016-07-18T09:06:32.785Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578c9ac48423d0842458e7ef"
    text: "Good, it works. Thanks Steeve. "
    sent: "2016-07-18T09:00:52.326Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578c99a6dbf44d911d5c4e68"
    text: {You can use this trick:^/```lisp^/console: system/view/screens/1/pane/-1^/console/visible?: false^/```}
    sent: "2016-07-18T08:56:06.807Z"
    editedAt: "2016-07-18T08:56:28.509Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578c96174e0aa786459ab6ff"
    text: "Ah sorry, I didn't properly read your request"
    sent: "2016-07-18T08:40:55.530Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578c95768423d08424589bf9"
    text: {Are you generating a .exe in that way? it is possible avoid Red Console without generating an exe?}
    sent: "2016-07-18T08:38:14.212Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
)#(
    id: "578c932e4e0aa786459ab687"
    text: {1) To get rid of the console: `red -c -t Windows %my-file.red`^/2) Just drag & drop your local image in gitter}
    sent: "2016-07-18T08:28:30.840Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "578c8afd914c51592b3be724"
    text: {Another question. i use snag.gy,but in gitter is there another way to put images?}
    sent: "2016-07-18T07:53:33.992Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578c8ad9914c51592b3be68d"
    text: {Hello, is there a way to avoid the opening of the Red Console when i double click directly on the .red file of windows?^/https://snag.gy/UBEY4f.jpg^/}
    sent: "2016-07-18T07:52:57.545Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5787aa638423d0842426814f"
    text: {Maybe Doc should put back some bugs into the mainline, so that we know, it is still an alpha software. It is really tricky - I can have the console being opened for ages, and it just refuses to crash :-)}
    sent: "2016-07-14T15:06:11.898Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5787a9fe196179690ecf619c"
    text: {That's right, for every new project I get, I think in this order: 1-Can I do it with Red? 2-with Rebol2 or Cheyenne? 3-PHP or C# :(}
    sent: "2016-07-14T15:04:30.477Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57875a91914c51592b071c5e"
    text: {@dockimbel  "why would you expect a 0.6 software to be as complete as a 1.0 ?" ... because the 0.6 staff seems to be to much good !! :-D as Petr said "you made Red too good to be considered pre 1.0 and naturally ppl are tempted to use it more productively" ... :-D}
    sent: "2016-07-14T09:25:37.926Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5787540dd11cd288120f6e6c"
    text: {@dockimbel with 0.6.0, and especially (apart from cool GUI) with the addition of simple-io, you made Red too good to be considered pre 1.0 and naturally ppl are tempted to use it more productively :-)}
    sent: "2016-07-14T08:57:49.773Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578753ce3c5129720e1ae8f2"
    text: {Anyway, for any DBMS app to be generally useful, you need multi-columnt widget, which is not there yet too, but I am sure will come soon :-)}
    sent: "2016-07-14T08:56:46.673Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578752e9196179690ecab495"
    text: {I also expect, that once CALL is generally available, it allows us to pipe to RDBMS systems. I do remember, one of the R2 SQLite drivers, was just parsing results of sqlite.exe calls ....}
    sent: "2016-07-14T08:52:57.529Z"
    editedAt: "2016-07-14T08:53:14.912Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57875298e4375c9212cffcad"
    text: {btw - there is some SQLite early binding done by Kaj De Vos, IIRC. Not sure, if it is still operable. Look into the contribution section - http://www.red-lang.org/p/contributions.html}
    sent: "2016-07-14T08:51:36.026Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57875290914c51592b06b6c6"
    text: {@DarioX1973_twitter Think of it as constructing a house, you focus first on the infrastructure parts, not the "nice to have" parts. So, using that analogy, you wouldn't install light or care about the furniture in a room which has no ceiling yet. Moreover, why would you expect a 0.6 software to be as complete as a 1.0?}
    sent: "2016-07-14T08:51:28.233Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57875233196179690ecaafbc"
    text: {Each of us have different priorities. DBMS definitely should not be the first feature to support, sorry ...}
    sent: "2016-07-14T08:49:55.939Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578751d83cb52e8b24a9f6f9"
    text: "so, what the Red logo does it means? :smile: "
    sent: "2016-07-14T08:48:24.364Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578751678423d0842421c769"
    text: {it seems to me, not having a function to have currente date, not functions to use DBMS, that Red is not build like a pyramid , but as a puzzle. This is not  a negative criticism. I'm trying parsing for example, and is asbolutely interesting for text elaborations i have in my mind ... :-D}
    sent: "2016-07-14T08:46:31.874Z"
    editedAt: "2016-07-14T08:46:51.919Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578750193c5129720e1acc1e"
    text: {@rebolek This is not a problem because I think I have figured out how Red is being carried out . It's ok for me.^/}
    sent: "2016-07-14T08:40:57.168Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57874a333cb52e8b24a98ec5"
    text: {@dsgeyser as @dockimbel mentioned, here is one example: http://duktape.org/ }
    sent: "2016-07-14T08:15:47.102Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "578749eee4375c9212cf8e52"
    text: {@dsgeyser My old scraper is 16 years old and it was not a public project. You can search online about embeddable JS engines, they usually expose a C API to which you can bind easily from Red/System.}
    sent: "2016-07-14T08:14:38.909Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578746843c5129720e1a4e89"
    text: {But how to execute JS code as engine to use its functionality wrt scraping a webpage? Any way to do it? With Ref to @dockimbel earlier reply.}
    sent: "2016-07-14T08:00:04.457Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "578743da8bd95af005655d9f"
    text: {@DarioX1973_twitter Currently yes, that’s only way.}
    sent: "2016-07-14T07:48:42.623Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5787432c3cb52e8b24a938f1"
    text: {You writed it, sorry.  So to get date i have to do it by calling date from OS ?}
    sent: "2016-07-14T07:45:48.669Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578742178ca92f7d13d91205"
    text: {@DarioX1973_twitter As I wrote, `date!` is not implemented at all yet, that’s the reason why only `now/time` works. Plain `now` and `now/date` etc. should return date also.}
    sent: "2016-07-14T07:41:11.236Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "578741d93c5129720e1a1357"
    text: {but now/time is the only refinements working? how i get date of today? now/date doesn't work}
    sent: "2016-07-14T07:40:09.396Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578740169f79ee4f2ba1665d"
    text: {oh yes, i got that error and i tought  now was not active as command ... ok now, thanks Boleslav}
    sent: "2016-07-14T07:32:38.436Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57873fe34217a988760029ab"
    text: {@DarioX1973_twitter Current `time!` implementation is limited and `date!` is not implemented at all yet. Therefore you can use `now/time` only yet:^/```^/red>> now^/*** Internal Error: reserved for future use (or not yet implemented)^/*** Where: now^/red>> now/time^/== 9:31:24^/```}
    sent: "2016-07-14T07:31:47.964Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57873fdbd11cd288120e779a"
    text: {oh, "now" works only with refinements, ok sorry :-)}
    sent: "2016-07-14T07:31:39.622Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57873f779f79ee4f2ba158a0"
    text: {how compute how much time a .red elaboration has consumed? i'm looking for something like "time" or "now" in the help but i can't find. In Rebol, i see, there is 'now' command ...}
    sent: "2016-07-14T07:29:59.590Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57873e3a8ca92f7d13d911b5"
    text: {@dsgeyser ^/> can I embed JS code in red code?^/^/You can definitely "embed" it as string, if that is what you mean.}
    sent: "2016-07-14T07:24:42.598Z"
    editedAt: "2016-07-14T07:24:48.970Z"
    v: 2
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57873d6dd11cd288120e52c8"
    text: {@dockimbel Many thanks. I will have a look. Anyway possible to have a look at that script of yours? Also, can I embed JS code in red code?}
    sent: "2016-07-14T07:21:17.047Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "578735a0914c51592b0547e6"
    text: {@dsgeyser Thanks. ;-) You can embed a small JS engine for that, not a big deal. Also, writting a JS to Red compiler could also be an option.}
    sent: "2016-07-14T06:48:00.587Z"
    editedAt: "2016-07-14T06:48:32.189Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578732f98423d0842420553e"
    text: {@dsgeyser have a look at Portia https://blog.scrapinghub.com/2016/07/07/scrapely-the-brains-behind-portia-spiders/}
    sent: "2016-07-14T06:36:41.214Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "57872bfad11cd288120d9947"
    text: {@dockimbel If I am not mistaken, reading a page into red will not do. There are elements on a page being updated by Javascript, as well as hidden elements. Also, I am looking at the r3xml.r script by Christopher Ross-Gill. What is your view on this, and where can I start? Great work so far on Red, so addictive!}
    sent: "2016-07-14T06:06:50.468Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "57871faa9f79ee4f2ba0081c"
    text: {@dsgeyser I've built such kind of app a long time ago. I think they are some online services already proposing that.}
    sent: "2016-07-14T05:14:18.423Z"
    editedAt: "2016-07-14T05:14:39.363Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57871e17196179690ec863d6"
    text: {Another suggestion for a killer app. Seeing that the semantic web hasn't been implemented yet on a big scale (anyone with a normal website neds to update it), what if one builds a scraper for unstructured  data  that is easy to use. Just highlight the text needed and it builds an API to this info. This API allows flexible insertion into any app, etc.}
    sent: "2016-07-14T05:07:35.493Z"
    v: 1
    author: "5669246916b6c7089cbe259e"
) #(
    id: "5787176a9f79ee4f2b9fbab7"
    text: {@PeterWAWood @dockimbel great! Thanks for the explanation.}
    sent: "2016-07-14T04:39:06.519Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "578701cb914c51592b0332bc"
    text: {@dander @PeterWAWood is correct, this is our current way to handle modules, and we have only one for now.}
    sent: "2016-07-14T03:06:51.396Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5786f53dd11cd288120b519a"
    text: {@dander Nothing has been announced about how modules will be implemented. However, if you look at the Red source directory structure, you will see that the source for view is in ```red/modules/view```.  You will also see that there are no other folders in ```red/modules``` at the moment. ^/^/That said, there is nothing to suggest that the way ```View``` is currently implemented is how its final implementation will look once modules have been introduced.}
    sent: "2016-07-14T02:13:17.981Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5786d5c6914c51592b017383"
    text: {I have been wondering (perhaps this is peripherally related to referencing external things) what exactly does the `Needs:` header do? Is it related to bare-bones module stuff, or is it something else entirely? Is there anything currently besides `'view` that can be added to `Needs:`?}
    sent: "2016-07-13T23:59:02.591Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "57866682914c51592bfb21ee"
    text: "do, call, run, lanch, i sign on my notebook..."
    sent: "2016-07-13T16:04:18.924Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5786663f8423d08424166502"
    text: {Oh, you remember me that real nighmare of Haskell i studied many months ago, to abandon it after a lot ot time spent on ... but now with Red is another living ... after many months oh haskell, i was able to do ... pratically nothing ... :-( :-( :-( one who leave office and come back home at 19.00 o clock, and two childrens ... can learn haskell at 43 years? ... viva Red! already a minimal operative!  }
    sent: "2016-07-13T16:03:11.196Z"
    editedAt: "2016-07-13T16:03:44.053Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578664b43c5129720e0f850e"
    text: {And, to help with using call `system/options/boot` contains the full path of the current Red exe.}
    sent: "2016-07-13T15:56:36.181Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5786648e8423d0842416400c"
    text: {:point_up: [July 13, 2016 7:45 AM](https://gitter.im/red/red/welcome?at=578645f5bdafd19107857b46) Red has `do` and `call`, which let you load and run things in your current script, or run a system command. You could use `call` if you want. In between those levels, however, Rebol had a `run` command and a `launch` command. `Run` was like a friendly wrapper over call for known file types (at least on Windows), and `launch` would launch a new interpreter session. It was a bit confusing, but useful. ^/I'm sure Team Red has thought about this, because coordinating processes, creating supervision trees, setting up comm channels, etc. are all ways to scale (and we can probably make it easier to understand than Haskell ;^^). }
    sent: "2016-07-13T15:55:58.981Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57864a583cb52e8b249bf618"
    text: {The proof that loaded scipt into a block is just source code:^/```^/red>> do append load %window2.red {print "End of the script"}^/== {print "End of the script"} ;--- appears, once you close the window^/```}
    sent: "2016-07-13T14:04:08.833Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57864a069f79ee4f2b941634"
    text: "exactly!"
    sent: "2016-07-13T14:02:46.740Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57864996196179690ebc7c8d"
    text: {it was like `view [view [text "This is a label" ...]]`}
    sent: "2016-07-13T14:00:54.349Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57864967d11cd2881200c26d"
    text: {@pekr so, @DarioX1973_twitter was doing `view` two times, what's why it didn't work}
    sent: "2016-07-13T14:00:07.576Z"
    editedAt: "2016-07-13T14:00:13.412Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5786492f3cb52e8b249bcf3b"
    text: "@pekr ok, it is clear now, thanks!"
    sent: "2016-07-13T13:59:11.937Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "578648fe9f79ee4f2b94056e"
    text: "note: in above case I removed the Red header ..."
    sent: "2016-07-13T13:58:22.602Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578648e29f79ee4f2b9402fa"
    text: {can you see an outer block there? It is simply a file loaded into a block .... just a source code, nothing more .... you can directly do it, or insert there something, etc.}
    sent: "2016-07-13T13:57:54.649Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578648c03c5129720e0d0b82"
    text: {```^/red>> load %window2.red^/== [view [^/    text "This is a label" ^/    field "This is a field"...^/```^/}
    sent: "2016-07-13T13:57:20.327Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57864881d11cd2881200b72d"
    text: {When you `do`a script, it needs a header. When you just `load`a script, it loads the code and puts it into a block. Then you can `do`it, but not `view`it: `do load %window2.red`- this is first loaded into a block (or you can store it into some word reference), then it is executed by `do`}
    sent: "2016-07-13T13:56:17.906Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "57864838d11cd2881200b1f1"
    text: {btw, from Rebol `load` docs:^/>The text is first searched for a REBOL header, and if a header is found, it os evaluated first. (However, unlike the DO function, LOAD does not require that there be a header.) }
    sent: "2016-07-13T13:55:04.543Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57864823914c51592bf87856"
    text: "`do` and `load`"
    sent: "2016-07-13T13:54:43.271Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57864808196179690ebc6842"
    text: "Difference between what excactly?"
    sent: "2016-07-13T13:54:16.646Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578647fb9f79ee4f2b93fb81"
    text: {Well, I guess (from what I remember seeing my friend doing), that Delphi has an IDE advantage. On the other hand, Red + VID is so much simpler to start with ...}
    sent: "2016-07-13T13:54:03.411Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578647f2196179690ebc67c8"
    text: "@pekr so what is the difference between two?"
    sent: "2016-07-13T13:53:54.285Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "578647c3d11cd2881200a714"
    text: {However, this is an incredible fast way to program GUI windows (i speak as Delphi coder ...) !}
    sent: "2016-07-13T13:53:07.775Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57864784d11cd2881200a5c7"
    text: "exactly ..."
    sent: "2016-07-13T13:52:04.626Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578647803c5129720e0cfd3c"
    text: {Simply put - you either want to store just the UI source in a file, or you want to have separately callable window2.red}
    sent: "2016-07-13T13:52:00.903Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57864767196179690ebc5e35"
    text: {oh, stupid i am!! ... you are right, Petr ... infact it's enought to do ^/^/```^/Red [needs: 'view]^/^/view [^/^-button "Open second window" [^/^-^-;view load %window2.red^/^-^-;x: load %window2.red^/^-^-;view x^/^-^-do %window2.red^/^-]^/]^/```^/}
    sent: "2016-07-13T13:51:35.715Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5786468eb79455146fb2c038"
    text: {If you want to just load it, don't store the source along with the `Red []` header. That's for the direct execution by `do`}
    sent: "2016-07-13T13:47:58.581Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57864650b79455146fb2be83"
    text: {i want load because i want a single gui program "windows2.red", but also i want run it from a GUI menu from other window ...}
    sent: "2016-07-13T13:46:56.924Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57864607c9b49c1d6f257175"
    text: {Or even better - don't load it, just do it ... `do %window2.red`}
    sent: "2016-07-13T13:45:43.535Z"
    editedAt: "2016-07-13T13:46:31.980Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578645f5bdafd19107857b46"
    text: {it seems strange to me. There isn't a way to have a .red running separaterlly and callable from other .red without efforts?}
    sent: "2016-07-13T13:45:25.017Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578645f3064f82870730c1fe"
    text: "try just `do x`"
    sent: "2016-07-13T13:45:23.103Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578645a51ca34a944e0f1290"
    text: {Just type into console: `x: load %window2.red` .... you will see, that the code is going to be loaded into bloc. You can't do that and call `view`directly}
    sent: "2016-07-13T13:44:05.291Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578645723eaf66535e968502"
    text: "I can see the error"
    sent: "2016-07-13T13:43:14.471Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5786454a59cfbd4c5e98f2a2"
    text: "(I don't have Windows to try that)"
    sent: "2016-07-13T13:42:34.709Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57864540c9b49c1d6f25602d"
    text: {@DarioX1973_twitter ye, I just tried myself. What about [needs 'view] ?}
    sent: "2016-07-13T13:42:24.789Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "578644eabdafd19107856dcc"
    text: "Ok, Red instead of RED, but i dont' works ..."
    sent: "2016-07-13T13:40:58.081Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57864318c9b49c1d6f25372b"
    text: "I think the second one is not supported anymore"
    sent: "2016-07-13T13:33:12.493Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "578642f659cfbd4c5e98cf38"
    text: {@DarioX1973_twitter and also write `Red`, not `RED`}
    sent: "2016-07-13T13:32:38.717Z"
    editedAt: "2016-07-13T13:32:47.703Z"
    v: 2
    author: "5634982516b6c7089cb8f428"
) #(
    id: "578642d11ca34a944e0ee728"
    text: {@DarioX1973_twitter shouldn't you use 'view in the second script's header too?}
    sent: "2016-07-13T13:32:01.107Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "578642c07aeb080527c9a59b"
    text: "wait"
    sent: "2016-07-13T13:31:44.673Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "578641d43eaf66535e964e4c"
    text: {i can do ^/```^/view load %window2.red^/```^/from the console, to test separatelly the GUI, ok ... but i would prefer to have Red[] header and so on on it, to be able to double click it with mouse and test it^/^/}
    sent: "2016-07-13T13:27:48.723Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578640c2b79455146fb27305"
    text: {but if i delete the ; in the window2.red, it works. Ok, but i think is good to have a .red with a gui inside that i can run directly or from another gui, without to change nothing ..}
    sent: "2016-07-13T13:23:14.459Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5786404d7aeb080527c9861b"
    text: {```*** Script Error: VID - invalid syntax at: [RED [] view]^/*** Where: do```}
    sent: "2016-07-13T13:21:17.718Z"
    editedAt: "2016-07-13T13:21:46.038Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57863ff2b79455146fb26b52"
    text: "which error?"
    sent: "2016-07-13T13:19:46.862Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57863a061ca34a944e0e7d17"
    text: {Have a question, but probably i have yet request it.^/^/I have two windows made with VID and i would like to program and test them separately. I mean, i have^/^/window1.red^/^/```^/Red [needs: 'view]^/^/view [^/^-button "Open second window" [^/^-^-;view load %window2.red^/^-^-x: load %window2.red^/^-^-view x^/^-]^/]^/```^/^/and window2.red^/^/```^/;RED []    ^/^/;view [^-^/^-text "This is a label"^/^-field "This is a field"^/^-button "Back to first" [unview]^/^-^/;]^/^/```^/^/Well, here i have commented in window2 the lines RED [], view [, ], because i have an error if i don't comment them, while the window2.red is loaded by the window1.red. How can i avoid this behavior? i was thinking to manipolate the block  'x' of window2.red dinamically and delete in it , and after pass it to view function ... but can i do this?^/}
    sent: "2016-07-13T12:54:30.657Z"
    editedAt: "2016-07-13T12:55:36.354Z"
    v: 3
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57862d64b79455146fb17a0b"
    text: "I'm not sure, but isn't Nick italian?"
    sent: "2016-07-13T12:00:36.900Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "57861b0e59cfbd4c5e96cf85"
    text: {@endo64 Many thanks for the links i have saved ...}
    sent: "2016-07-13T10:42:22.948Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57861af47aeb080527c76c8e"
    text: "@pekr Ok, so no italians here. "
    sent: "2016-07-13T10:41:56.246Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57860c531ca34a944e0c3eee"
    text: {And here is a great explanation from BrianH, a must read!^/http://stackoverflow.com/questions/14818324/what-is-the-summary-of-the-differences-in-binding-behaviour-between-rebol-2-and}
    sent: "2016-07-13T09:39:31.254Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57860ad1b79455146fafe4ef"
    text: {@DarioX1973_twitter Also check these documents, they are for R2 but useful for Red too:^/http://blog.revolucent.net/2009/07/deep-rebol-bindology.html^/http://www.pat665.free.fr/doc/bind.html^/http://www.codeconscious.com/rebol/deeper-techniques.html^/http://www.codeconscious.com/rebol/^/About `bind`ing and other useful stuff.}
    sent: "2016-07-13T09:33:05.648Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5786041fc9b49c1d6f21a8c4"
    text: {Not sure. We had a Gabriele Santilli, an excellent reboller, but he's not much active nowadays neither with Rebol nor Red.}
    sent: "2016-07-13T09:04:31.143Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5785fdc5b79455146faf4d7f"
    text: {Good morning. Any italian, here in the Red community?}
    sent: "2016-07-13T08:37:25.462Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578573f7c9b49c1d6f1b85e6"
    text: {I might have just added you. If not, try https://gitter.im/red/help in your address bar.}
    sent: "2016-07-12T22:49:27.960Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5785739759cfbd4c5e8fe1ed"
    text: {Greg, you said about the "Help room" ... but i don't  see it a red/Help room in gitter ...}
    sent: "2016-07-12T22:47:51.897Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5785738d7aeb080527c06dfb"
    text: {Don't forget to join the Help room to see my word distance hack for you.}
    sent: "2016-07-12T22:47:41.501Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5785737abdafd191077c5b44"
    text: {As far as localization, a few different approaches were done in Rebol but I don't know of a way that is "little effort". Localization is not easy, and not always simple string replacement. }
    sent: "2016-07-12T22:47:22.305Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57857375064f82870727d6ec"
    text: {@greggirwin Mmmm ok ... i take your suggestion ... }
    sent: "2016-07-12T22:47:17.690Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578573111ca34a944e060459"
    text: {You're ramping up fast Dario. :^^) Red becomes natural very quickly, but sometimes we all get a little overzealous in condensing our code. Great for writing, but not always good for reading later. Fortunately, it's easy to reformat and unfold (or pretty-print). }
    sent: "2016-07-12T22:45:37.125Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57857246b79455146fa99423"
    text: {Another thing. I have to say that the compact way of putting many command on a single line, is beautifull, and once one is entered in the red style of writing code, is also not so unreadable as it look me the first times ...}
    sent: "2016-07-12T22:42:14.175Z"
    editedAt: "2016-07-12T22:43:10.895Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578571cdc9b49c1d6f1b736a"
    text: {But, i have a question. What can i use to make programs with labels in italian, but also in english with a little effort? is there something specific? some other language have external resource file to traslate labels from a language to another one ... what do you use, if you use a such thing?}
    sent: "2016-07-12T22:40:13.274Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5785711a064f82870727c760"
    text: {```^/Red [needs: 'view]^/^/t: read request-file/title "Select a utf8 pure text file"^/print ["Loaded text in memory, of" length? t "chars."]^/^/give-words: func [t] [^/^-punctation: charset [ #" " #"," #"." #":" #";" #"!" #"?" #"(" #")" #"]" #"[" #"<" #">" #"‹" #"›" #"^^/" #"'" #"^^L" #"«" #"»" #"|"]^/^-s: split t punctation^/]^/^/prin "Extracting words, please wait ... " tw: sort unique give-words t print "OK."^/^/view [^/    origin 4x4 space 2x2^/^-below text "Extracted words (not repeated)"^/^-extracted-words: text-list 300x200 font-size 10 data tw^/^-button "Save" [ save request-file/save/title "Save extracted word list" tw ]^-^/^-text "Show words cointaining" my-search: field  ^/^-button "Find" [ris: copy [] foreach x tw [ if find x my-search/text [append ris x] ] f-find/data: ris ]^- ^/^-text "Searched words" f-find: text-list 300x200 font-size 10 data []^/^-button "Save" [save request-file/save/title "Save searched words" f-find/data]^/]^/```^/https://snag.gy/gj1dGb.jpg^/^/WOW a lot of fun in doing this my first text elaboration (extraction of words an search substring contained)! :-D^/^/Sorry for invading the forum with my enthusiasm! :-D^/}
    sent: "2016-07-12T22:37:14.359Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578568da7aeb080527c0028f"
    text: {I support the idea of having a general `for` in Red, and @greggirwin 's implementation looks versatile. Programmers coming to Red will expect a `for` and complain if one is missing. As they learn and progress, they'll see more real Red code and discover the non-`for` alternatives. Learning materials for non-programmers can stress these non-`for` native approaches to looping from the outset.}
    sent: "2016-07-12T22:02:02.142Z"
    v: 1
    author: "5711ea83187bb6f0eadfb5de"
) #(
    id: "57855836b79455146fa860e4"
    text: {Join the Help room Dario. I'll post a quick hack for you there.}
    sent: "2016-07-12T20:51:02.280Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57854f6f1ca34a944e044fb4"
    text: {@DarioX1973_twitter, probably best to move to Help for more in-depth coding.}
    sent: "2016-07-12T20:13:35.561Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57854eef7aeb080527beb45f"
    text: {@pekr :point_up: [July 12, 2016 9:48 AM](https://gitter.im/red/red/welcome?at=57851166c9b49c1d6f162021): https://github.com/red/red/wiki/REP-FOR-loop-function}
    sent: "2016-07-12T20:11:27.294Z"
    editedAt: "2016-07-12T20:11:45.221Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57854cdc59cfbd4c5e8deaa9"
    text: {ops, here the example of the point to find^/https://snag.gy/MawS7m.jpg^/}
    sent: "2016-07-12T20:02:36.117Z"
    editedAt: "2016-07-12T20:06:06.318Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57854cb27aeb080527be95f2"
    text: {If i have a text, for example this one:^/https://www.dropbox.com/s/ra5maufmi4dq7zz/tucidide-first-3-points.txt?dl=0^/^/How can i use parsing of text to find all points of the text that have the two word "Troia" and "Grecia" that are close to each other , but only within a certain number of words? in my example these two words have 4 words between. Sometimes, when one do textual searching, wants to find all points in a largetext, where some given word (1,2,3 words or any number of words) close to each other, so one express the distance in terms of max numbers of words between the searched words. I do not know if I explained well ... i hope so. So, how can i use parsin gto obtain this? It can be that a single "line" of text can contain an arbirtary numer of words before having a CRLF ... so ho to parse such text? in python i implemented a FSM, now i think if i could do it with Red parsing ...^/}
    sent: "2016-07-12T20:01:54.058Z"
    editedAt: "2016-07-12T20:05:24.620Z"
    v: 5
    author: "57753e0bc2f0db084a20c917"
)#(
    id: "57854233064f8287072546ee"
    text: {yes, you can not edit your entries via the mobile app .... }
    sent: "2016-07-12T19:17:07.699Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5785423259cfbd4c5e8d4fe7"
    text: "i will formulate questions on pc later..."
    sent: "2016-07-12T19:17:06.925Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578542187aeb080527be0022"
    text: "Corrector ... sorry"
    sent: "2016-07-12T19:16:40.692Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5785420eb79455146fa72fdd"
    text: "stupid word auto corec"
    sent: "2016-07-12T19:16:30.620Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578541f41ca34a944e036dc8"
    text: "word"
    sent: "2016-07-12T19:16:04.533Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578541e359cfbd4c5e8d4c2e"
    text: {Ah ah no i can not edit text from tablet or delete it.. i had italian work revision enabled here ... blaaaaa....}
    sent: "2016-07-12T19:15:47.986Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5785418159cfbd4c5e8d4b09"
    text: "eh, mixed up englihs with italian?"
    sent: "2016-07-12T19:14:09.977Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5785415ac9b49c1d6f190b96"
    text: {A question. If i have a test wherei Wang torno extracomunitari poins wherei }
    sent: "2016-07-12T19:13:30.451Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57851b2b064f828707229d12"
    text: {Yes, it is. In fact - I was not able to do any regular expressions, but am able to do some parse. It is readable for me. Once you get into it, you will just love it ....}
    sent: "2016-07-12T16:30:35.869Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57851abeb79455146fa4c009"
    text: {oh ... very powerfull sintax  ... i have understood now, thanks Petr. So it seems to me that Red parsing is perhaps really good to do text elaborations  ...}
    sent: "2016-07-12T16:28:46.944Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578519a559cfbd4c5e8ab8b5"
    text: {It is a bit more advanced example. Simply put, it mentally translates to this: copy to the variable `letters`some occurance of "a" ... then it executes Red code (in parens), setting `n`to 3, which is the length of `letters` ... then it supplies `3 "b"`, which matches the input ... and then it ends with the success ...}
    sent: "2016-07-12T16:24:05.799Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578518af064f8287072267a9"
    text: {mmm, your red link is good Petr ... but i'm on this and i don't understand ...^/```^/parse "aaabbb" [copy letters some "a" (n: length? letters) n "b"]^/```^/the previous examples, instead, are ok ... but t his, what does it mean ?^/^/}
    sent: "2016-07-12T16:19:59.904Z"
    editedAt: "2016-07-12T16:20:49.220Z"
    v: 3
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578516c9bdafd1910776f038"
    text: "ooooooooo sorry, i didnt' see it !"
    sent: "2016-07-12T16:11:53.151Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578516a6bdafd1910776efdb"
    text: {don't use the additional `none`argument, but define a rule}
    sent: "2016-07-12T16:11:18.592Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57851694c9b49c1d6f1663b5"
    text: {you just tried first example. To some 90% it is compatible!}
    sent: "2016-07-12T16:11:00.525Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578516873eaf66535e87d3a6"
    text: "I posted a link to one - introducing parse"
    sent: "2016-07-12T16:10:47.580Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5785166559cfbd4c5e8a8d6d"
    text: {ok ok , but  it is not possible to try parsing from a Rebol documentation if parsing in  Red it is not compatible ...  there is not a Red parsing doc?}
    sent: "2016-07-12T16:10:13.866Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57851648bdafd1910776eca4"
    text: {```^/red>> split "The trip will take 21 days" " "^/== ["The" "trip" "will" "take" "21" "days"]^/```^/}
    sent: "2016-07-12T16:09:44.610Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57851608b79455146fa473bb"
    text: {We might also move to the /help channel later, so that we don't flood general welcome channel ... but so far, so good}
    sent: "2016-07-12T16:08:40.594Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578515d77aeb080527bb2b96"
    text: "In Red, we've got `split`function for that ..."
    sent: "2016-07-12T16:07:51.913Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5785159fb79455146fa46fb1"
    text: {Well, that's the R2 stuff - it breaks the string into a block of words ...}
    sent: "2016-07-12T16:06:55.889Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57851546c9b49c1d6f1652fd"
    text: {```^/red>> probe parse "The trip will take 21 days" none^/*** Script Error: parse does not allow none! for its rules argument^/*** Where: parse^/red>> ^/```^/i was trying the firs things for you link ... :-(^/}
    sent: "2016-07-12T16:05:26.788Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5785151c1ca34a944e00af01"
    text: {Or come with some concrete need and we will try to create some parse rules. That's the best way to learn - first read some docs, then try with the simple examples ...}
    sent: "2016-07-12T16:04:44.597Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578514e53eaf66535e87ba90"
    text: {http://www.red-lang.org/2013/11/041-introducing-parse.html}
    sent: "2016-07-12T16:03:49.835Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578514ad3eaf66535e87b1f5"
    text: {to some extent, yes. Basic principles, syntax. Red uses some parse extensions/improvements, which were also implemented in R3.}
    sent: "2016-07-12T16:02:53.714Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57851465c9b49c1d6f1646f6"
    text: "but is compatible with Red ?"
    sent: "2016-07-12T16:01:41.491Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57851449064f828707221d65"
    text: {You can start with the old Rebol 2 parse docs - http://www.rebol.com/docs/core23/rebolcore-15.html}
    sent: "2016-07-12T16:01:13.071Z"
    editedAt: "2016-07-12T16:01:23.812Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578513fabdafd1910776d345"
    text: {to be honest, i have difficult on understanding  parsing ... but i  would like to use Red for text processing ... where is the simplest ever documentation on parsing  for very-new-bie ?? }
    sent: "2016-07-12T15:59:54.550Z"
    editedAt: "2016-07-12T16:00:34.492Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57851166c9b49c1d6f162021"
    text: "@greggirwin - where's your `for`proposal, please?"
    sent: "2016-07-12T15:48:54.144Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57850eb9bdafd191077688c2"
    text: {My `for` proposal delegates to natives internally when possible.}
    sent: "2016-07-12T15:37:29.922Z"
    editedAt: "2016-07-12T15:38:48.468Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57850e7d59cfbd4c5e8a1c58"
    text: {We don't have a fast native range generator, so that's one thing. I *assume* argument passing overhead is roughly the same for natives and mezz. `Range` has come up a couple times, and may be accepted if we design it well. I have simple, old funcs for it, but it needs more design thought. Anyway, the block overhead may offset any gain, depending on how people use it. e.g. if they don't memoize it, inner loops will do a lot of work, as will the GC. Hence, a DP approach to `range` may be worthwhile.}
    sent: "2016-07-12T15:36:29.696Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57850daa1ca34a944e003fc0"
    text: {I seem to remember that some languages (APL?) use `iota <number>` for the desired sequence.}
    sent: "2016-07-12T15:32:58.599Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57850d5cbdafd19107766b70"
    text: {Rebol used to have an `/else` refinement for `if`, but it was deprecated. It didn't take me long before I completely forgot about it. But you could always create your own `if-else` for comfort while you adjust. :^^)}
    sent: "2016-07-12T15:31:40.309Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57850d1bb79455146fa3fa50"
    text: {I mean is there an overhead in having a mezzanine instead of a native. `foreach` is native, and so is `repeat`. The semi-native solution would be `foreach i [1 2 3 4 ... ][...]`but this begs the question how one generates (on the fly?) the block `[1 2 3 4 ...]` or `[1 3 5 7 ...]` etc.. If that can be done efficiently, then there is no need for `for`.}
    sent: "2016-07-12T15:30:35.227Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57850c957aeb080527ba9eaa"
    text: {So this is the second very strange thing i found in Red: 1) the classic IF doesn'nt have the else part but one must use EITHER ... 2) the classic FOR is not used but one must  use other statements ... it's too much for me ... I'm kidding ... just know that there are not classic IF and FOR ... :-D}
    sent: "2016-07-12T15:28:21.860Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5785098e59cfbd4c5e89cc93"
    text: {I'm not clear on the question. Do you mean is there a lot of overhead the more parameters there are?^/You could certainly do it by generating blocks, but "not too large" may be the issue. My `for` proposal is out there. If people look at it, and reject it, at least we'll know what we *don't* want.}
    sent: "2016-07-12T15:15:26.861Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57850854bdafd191077608fe"
    text: {For not too large sequences of indexes a semi-native solution is possible if one provides a generator for blocks filled with consecutive numbers (with an optional step again). Then one has `foreach i <generated block> [...]`}
    sent: "2016-07-12T15:10:12.994Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "57850795bdafd1910775ff36"
    text: {Is there a great penalty in efficiency if a `function` (mezzanine) is provided that takes what most people expect to be the parameters: start/end/optional step?}
    sent: "2016-07-12T15:07:01.508Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "578505fa1ca34a944effc414"
    text: {not including it in a distro, will cause more harm to Red imo, than the vice versa ...}
    sent: "2016-07-12T15:00:10.745Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578505de3eaf66535e86d9a9"
    text: {`for`might be also usefull, when you need to access series by index, and use a skip value ....}
    sent: "2016-07-12T14:59:42.041Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "578505c41ca34a944effc0b7"
    text: {if we are not going to provide `for`, we are going to get lots of similar questions ...}
    sent: "2016-07-12T14:59:16.594Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5785023dbdafd1910775b4f9"
    text: {use:^/```^/repeat i 5 [print i * 2]^/```}
    sent: "2016-07-12T14:44:13.841Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5785022d59cfbd4c5e895d33"
    text: {`for` has not been implemented in Red, there are still discussions on it..}
    sent: "2016-07-12T14:43:57.046Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5785007d3eaf66535e869c44"
    text: {```^/for i 1 10 2 [ ^/  print i^/]^/```^/doesn't works^/}
    sent: "2016-07-12T14:36:45.675Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5785005c7aeb080527b9d935"
    text: "why there isn't a FOR loop statement?"
    sent: "2016-07-12T14:36:12.582Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5784ffc859cfbd4c5e893dbd"
    text: {ops, sorry stupid i am, was a < 0 at end of block!}
    sent: "2016-07-12T14:33:44.641Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5784fed11ca34a944eff6456"
    text: {however thanks for bindings links Maxim and x8x, i have saved the link (with my Red GUI script i have made exactly for this :-D)}
    sent: "2016-07-12T14:29:37.846Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5784fe907aeb080527b9c218"
    text: {```^/a: 10^/until [^/^-prin "COUNT " ^/^-print a^/^-a: a - 1^/^-a > 0^/] ^/```^/why this doesn't print ^/COUNT 10^/COUNT 9^/COUNT 8^/ans so on ?^/}
    sent: "2016-07-12T14:28:32.137Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5784fe5d1ca34a944eff627c"
    text: {mmm binding is too much for now, i will study later. }
    sent: "2016-07-12T14:27:41.913Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5784fd98c9b49c1d6f151ec1"
    text: {It's a very advanced thing to dive into if you're new. Different from other langs, and powerful, but not always intuitive when you evaluate things in different contexts.}
    sent: "2016-07-12T14:24:24.355Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "5784fd6159cfbd4c5e891d31"
    text: {@DarioX1973_twitter while Red docs are in the works, which will take time, you can read Rebol docs for a lot of things. Not 100% compatible, but a lot of things will be close, and the definitional scoping design should be very similar.}
    sent: "2016-07-12T14:23:29.389Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5784f2bcb79455146fa26a3e"
    text: "Yes ... and no way to enter multiline?"
    sent: "2016-07-12T13:38:04.909Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5784f087c9b49c1d6f1447a5"
    text: "P"
    sent: "2016-07-12T13:28:39.219Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5784ec563eaf66535e856576"
    text: {Sorry. The mobile web interface of Gitter keeps defeating me and there seems to be no way to delete a message from it.}
    sent: "2016-07-12T13:10:46.788Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5784ebab1ca34a944efe2d0d"
    text: "I'm "
    sent: "2016-07-12T13:07:55.337Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "5784d363064f8287071e7511"
    text: {I found this article (and blog) having good explanation of Rebol-related things http://blog.revolucent.net/2009/07/deep-rebol-bindology.html}
    sent: "2016-07-12T11:24:19.334Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
) #(
    id: "5784c0ccb79455146f9fd612"
    text: {@DarioX1973_twitter You may find this one interesting https://en.wikibooks.org/wiki/Rebol_programming/Advanced/Bindology}
    sent: "2016-07-12T10:05:00.116Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5784c031bdafd19107724585"
    text: {I would like to understand ... it's better to look for documentation on Rebol3 or Rebol2 to understand Red? i prefer to have the executable capabilities, so i really prefer the Red way, but there are a lot of documents on Rebol ... what is better?}
    sent: "2016-07-12T10:02:25.321Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5784c02e85418bf56db7ba70"
    text: {@DarioX1973_twitter Red's binding is interesting and funny:^/```^/red>> o1: object [a: 20]^/== make object! [^/    a: 20^/]^/red>> a: 10^/== 10^/red>> b: []^/== []^/red>> append b 'a^/== [a]^/red>> append b in o1 'a^/== [a a]^/red>> reduce b^/== [10 20]^/```}
    sent: "2016-07-12T10:02:22.404Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "5784bf83bdafd19107723e06"
    text: {Thanks Bolesav, it works. Not  really a newbie questionm but it was interesting understand how to solve ...^/^/}
    sent: "2016-07-12T09:59:31.589Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5784909e0a7cb23428a5d6bd"
    text: {There is no global scope. `my-code` is defined in scope where `i` is `10`. However, you can rebind that code to `f` scope:^/`f: func [x /local i] [ i: 30 print ["Local i is" i] do bind my-code 'i]`}
    sent: "2016-07-12T06:39:26.200Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "57848bf93eaf66535e80d324"
    text: {```^/my-code: [print ["i =" i]]^/i: 10^/f: func [x /local i] [ i: 30 print ["Local i is" i] do my-code]^/```^/i was testing the variable scope ... i can't understand why in this case, the variable in the "f" function is not used by my-code, while "i" in my-code seems to be related to global scope ... because the block my-code is defined there?^/}
    sent: "2016-07-12T06:19:37.918Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57848a617aeb080527b3aa94"
    text: {`To` will get there, it just isn't all ready yet. }
    sent: "2016-07-12T06:12:49.051Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5784761d064f8287071a6fc7"
    text: "thanks  :)"
    sent: "2016-07-12T04:46:21.676Z"
    v: 1
    author: "56e49b9885d51f252ab87ee8"
) #(
    id: "578475fb7aeb080527b2dded"
    text: {```^/  make char! 23^/;   #"^^W"^/```^/^/}
    sent: "2016-07-12T04:45:47.780Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "578475b8bdafd191076ec690"
    text: {to char! 23^/Script Error: TO cannot convert char! from: 23^/Where: to}
    sent: "2016-07-12T04:44:40.907Z"
    editedAt: "2016-07-12T04:45:22.325Z"
    v: 2
    author: "56e49b9885d51f252ab87ee8"
) #(
    id: "57847593064f8287071a69c6"
    text: {This might be a stupid question but how do you change an int to a char?}
    sent: "2016-07-12T04:44:03.891Z"
    v: 1
    author: "56e49b9885d51f252ab87ee8"
) #(
    id: "57846812c9b49c1d6f0dadbb"
    text: {@jink For ./hello, the instructions should be clear enough?^/```lisp^/    $ red -c hello.red^/    $ ./hello^/^/    or from DOS:^/    > red -c hello.red^/    > hello^/```}
    sent: "2016-07-12T03:46:26.732Z"
    editedAt: "2016-07-12T03:46:32.042Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578467a7bdafd191076e43a0"
    text: {@jink Welcome! We need to had that information to the GettingStarted page, indeed.}
    sent: "2016-07-12T03:44:39.504Z"
    editedAt: "2016-07-12T03:44:48.569Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57843d233eaf66535e7d8360"
    text: {Also, ./hello had to be changed to .\hello - I thought Windows could handle forward slashes.}
    sent: "2016-07-12T00:43:15.215Z"
    v: 1
    author: "5548001715522ed4b3dfee31"
) #(
    id: "57843ca5c9b49c1d6f0beae5"
    text: {Hi, I'm new to Red, but looked a Rebol a while back. I tried the http://www.red-lang.org/p/getting-started.html page and ran into some minor issues. On Windows 10, I downloaded red-061.exe to a folder and tried the console examples. They worked fine. Then I tried moving the exe to another folder and created the hello.red file. Running from the terminal made me try renaming red-061.exe  to red.exe. Then I realized I had some problem with the path and that led to the message "PROGRAM ERROR: Invalid encapsulated data." Fortunately, Google came the rescue with the forum response https://groups.google.com/forum/#!searchin/red-lang/Invalid$20encapsulated$20data./red-lang/EmPyxe06AWw/6mKn9-VFfwUJ}
    sent: "2016-07-12T00:41:09.810Z"
    v: 1
    author: "5548001715522ed4b3dfee31"
) #(
    id: "5783d4ea064f828707130de9"
    text: "Thanks!"
    sent: "2016-07-11T17:18:34.230Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783d4aeb79455146f957b19"
    text: {Yeah, a lit-word evaluates to a word, so it can never test TRUE with `unset?`. ;-)}
    sent: "2016-07-11T17:17:34.180Z"
    editedAt: "2016-07-11T17:17:38.502Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5783d487c9b49c1d6f06d3ec"
    text: "HA! the colon... 8-P"
    sent: "2016-07-11T17:16:55.796Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783d472c9b49c1d6f06ccd2"
    text: {```lisp^/red>> unset? :not-set^/== true^/```}
    sent: "2016-07-11T17:16:34.098Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5783d3b13eaf66535e787172"
    text: ""
    sent: "2016-07-11T17:13:21.178Z"
    editedAt: "2016-07-11T17:15:30.089Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783d2acb79455146f956980"
    text: {@DarioX1973_twitter, this is a *very* quick hack of some old R2 code. The idea is that you run this before any of your other externals, it will look at the set of system words, then do your stuff and when you call `mark-my-words/dump` it will exclude the originals from the list, and just show yours. ^/```^/mark-my-words: context [^/    std-words: words-of system/words^/    dump: has [val] [^/        print ['Word tab 'Type tab 'Value]^/        foreach word exclude words-of system/words std-words [^/            print [^/^-^-^-^-word tab ^/^-^-^-^-type? set/any 'val get/any word tab ^/^-^-^-^-if value? 'val [^/^-^-^-^-^-either not any [object? :val  function? :val]  [mold :val] [^/^-^-^-^-^-^-copy/part mold first :val 60^/^-^-^-^-^-]^/^-^-^-^-]^/^-^-^-]^/        ]^/    ]^/]^/```}
    sent: "2016-07-11T17:09:00.674Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5783cb1559cfbd4c5e7a999f"
    text: "@x8x Both options are equivalent."
    sent: "2016-07-11T16:36:37.984Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5783caebbdafd1910766b17d"
    text: "@dockimbel  why not `if unset? 'join [...`"
    sent: "2016-07-11T16:35:55.545Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783ca4c7aeb080527ab0207"
    text: {from console, i see the usefull command "what" that display all Red tokens with description ... how can i do my %utils.red and have the same token list extrated from it, to build a little help/documentation of my personal functions? }
    sent: "2016-07-11T16:33:16.434Z"
    editedAt: "2016-07-11T16:33:46.924Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783ca0d3eaf66535e77e326"
    text: "`unless value? 'join [...` should be enough. ;-)"
    sent: "2016-07-11T16:32:13.371Z"
    editedAt: "2016-07-11T16:32:14.943Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5783c834064f828707126b0d"
    text: "WOW ..."
    sent: "2016-07-11T16:24:20.962Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783c5cd59cfbd4c5e7a407f"
    text: {This will set `join` only if it's not already defined}
    sent: "2016-07-11T16:14:05.992Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783c528c9b49c1d6f05ca82"
    text: {humm we have `unset?` but I'm not sure it's working, anyway you could use something like this:^/```^/unless find words-of system/words 'join [^/    set 'join func [a b][append copy a b]^/]^/```}
    sent: "2016-07-11T16:11:20.484Z"
    editedAt: "2016-07-11T16:13:17.049Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783c4d559cfbd4c5e7a3a7d"
    text: "the one set in your `%utils.red`would be used"
    sent: "2016-07-11T16:09:57.296Z"
    editedAt: "2016-07-11T16:13:02.213Z"
    v: 2
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783c456bdafd19107663e03"
    text: {ops, "tutelate" (italianized  was "protect" ... not just  perfect english!) ...}
    sent: "2016-07-11T16:07:50.636Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783c4033eaf66535e778413"
    text: {again question:  if i had "append" function that is in Red built in ... can i , for example, add my /literal refinement to do what your "join" version do?}
    sent: "2016-07-11T16:06:27.710Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783c33a064f828707121428"
    text: {if i add functions to my %utils.red file, for example these two functions you write, what will happened if for example a function "join" will be added to future release of Red? how can i tutelate my utils.red file to avoid conflicts?}
    sent: "2016-07-11T16:03:06.871Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783c250bdafd1910766169d"
    text: {just add it:^/```^/rejoin: func [^/    "Reduces and joins a block of values." ^/    block [block!] "Values to reduce and join"^/][^/    if empty? block: reduce block [return block] ^/    append either series? first block [copy first block] [^/        form first block^/    ] next block^/]^/```}
    sent: "2016-07-11T15:59:12.541Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783c213c9b49c1d6f05a4a6"
    text: "latest red is red-061.exe or another one?"
    sent: "2016-07-11T15:58:11.438Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783c192064f82870711fa20"
    text: {and if you use latest red, `rejoin` has been added^/}
    sent: "2016-07-11T15:56:02.158Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783c1027aeb080527aa6edf"
    text: {@DarioX1973_twitter  use `join`:^/```^/join: func [a b][append copy a b]^/```}
    sent: "2016-07-11T15:53:38.874Z"
    editedAt: "2016-07-11T15:55:02.761Z"
    v: 3
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783c0b5bdafd1910765fd0c"
    text: {I am doing a lot of errors in writing code without the "copy" keyword, for example this is good^/^/```^/append results/data x^/append results/data (append copy "------- from " r)^/append results/data copy " "^/```^/^/but this is not good^/^/```^/append results/data x^/append results/data (append "------- from " r)^/append results/data copy " "^/```^/^/now i understand why ... but it's frustrating ... all the times i append something to a literal string, i must remeber to use copy, isn't it ?^/}
    sent: "2016-07-11T15:52:21.355Z"
    editedAt: "2016-07-11T15:53:03.890Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783bb0a1ca34a944eef71e0"
    text: "@x8x oh perfect, thanks!"
    sent: "2016-07-11T15:28:10.237Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783ba783eaf66535e76f1b0"
    text: {Another question: in the HELP command in console red>> ... there are USAGE, DESCRIPTION, ARGUMENTS, REFINEMENTS .. but i think adding "EXAMPLES" should ve very very usefull for newbie because nothing is better than an exmple to understand..}
    sent: "2016-07-11T15:25:44.329Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783ba211ca34a944eef67fc"
    text: {```^/b: [1 2]^/unless find b v: 1 [append b v]^/```^/or^/```^/b: [1 2]^/b: unique append b v: 1^/```}
    sent: "2016-07-11T15:24:17.619Z"
    v: 1
    author: "55740d7815522ed4b3e18b35"
) #(
    id: "5783b9587aeb080527aa11c8"
    text: "Thanks for previous tips, Nenad and Gregg."
    sent: "2016-07-11T15:20:56.502Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783b93e3eaf66535e76d1dc"
    text: {Is there a refinement to append a value to a series avoiding duplicates? i dont' understand well the HELP APPEND.^/}
    sent: "2016-07-11T15:20:30.452Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783b1671ca34a944eeed323"
    text: {If I can find a way to avoid sleeping, certainly. ;-) Otherwise, it mostly depend on how much time we'll put into adding Android support, we have a working prototype, but adding hundreds of features requires significant and hardly predictable time. Fortunately, the Android API is higher level than the Windows one, so I hope we can reach 80% of planned features in a short amount of time.}
    sent: "2016-07-11T14:47:03.025Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5783b015b79455146f933a9a"
    text: {@dockimbel wow, a lot of plans here for 1.0. Could it be done in this year?}
    sent: "2016-07-11T14:41:25.426Z"
    v: 1
    author: "5634982516b6c7089cb8f428"
)#(
    id: "578397771ca34a944eed4332"
    text: {Adding to what Doc said, and not to contradict him, do some tests with familiar processing and transformations you need. I say, start by writing the clearest code possible. If you need to optimize after that, do what Doc outlined.  Preallocation never hurts, but can also add extra code for not much gain, so you don't need to do it every time. Of course, now that we *do* have Red/System, I'm going to be tempted to use it. }
    sent: "2016-07-11T12:56:23.070Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "578393727aeb080527a7ed12"
    text: {1. Forget about how other languages do, it is irrevelant in Red.^/2. String are series in Red, which means they have an implicit index, rely on it for shorter and faster code.^/3. Preallocate strings, especially when the strings are bigs.^/4. Re-use existing strings instead of creating new ones when possible.^/5. Use `/into` where available (soon to be added to `form` and `mold`).^/6. As last resort, drop to Red/System to speed up some expensive string processing.}
    sent: "2016-07-11T12:39:14.338Z"
    editedAt: "2016-07-11T12:40:00.050Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57839095b79455146f918dbc"
    text: {Working on the string (elaborating them, splitting, slicing, appending ecc) is there some rules to care about,to have an efficient, fast implementation? for example, Delphi has a good way to manipolate them directly as string, but  i know other languages works better if using variuos stringbuilder object of functions (for example appending string with string directly in python3 is not efficient), and only at initial and final stage convert them in strings. In Red is there some tips on string manipolation, to have fast processing? i'm sorry but text processing is one of my important goals ...}
    sent: "2016-07-11T12:27:01.004Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578370d97aeb080527a6544f"
    text: {@dockimbel For unicode, i supposed that, ok. Good news for JS, thanks.}
    sent: "2016-07-11T10:11:37.705Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578369bdb79455146f8fc836"
    text: {@DarioX1973_twitter Unicode categories: looks like a job for an external library, I don't see it a need general enough for that to put it in the standard library. For JS support, it's on our roadmap for 1.0, but not scheduled yet.}
    sent: "2016-07-11T09:41:17.968Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "578368907aeb080527a5dd1d"
    text: {Another question (more important): is there a plan to compile red code to javascript code and the gui, so one convert vid gui in gui working in browser?}
    sent: "2016-07-11T09:36:16.767Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5783681959cfbd4c5e751bc9"
    text: {At today, is there a function in Red that, give it a char, it  returns the unicode classification, as in this list?^/^/http://www.fileformat.info/info/unicode/category/index.htm^/^/I remeber Carl, in the past years, said something on it for Rebol, in the sense that  it was complicated for some reasons (load all unicode tables?), but i dont' remember well ...^/^/^/^/^/}
    sent: "2016-07-11T09:34:17.277Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "578075b97aeb08052787f496"
    text: "will do thnx @dockimbel "
    sent: "2016-07-09T03:55:37.161Z"
    v: 1
    author: "56d393cfe610378809c41e1a"
) #(
    id: "578075adb79455146f72f1a6"
    text: "yeah just saw the code"
    sent: "2016-07-09T03:55:25.188Z"
    v: 1
    author: "56d393cfe610378809c41e1a"
) #(
    id: "57807590064f828707eeebd9"
    text: {@nc-x @hellcoderz Actually, %input.red has many dependencies, so you need most of the files from [this folder](https://github.com/red/red/tree/master/environment/console).}
    sent: "2016-07-09T03:54:56.606Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5780755cb79455146f72f122"
    text: "Your welcome. :smile: "
    sent: "2016-07-09T03:54:04.103Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57807551bdafd1910742b372"
    text: "thanks"
    sent: "2016-07-09T03:53:53.300Z"
    v: 1
    author: "56d393cfe610378809c41e1a"
) #(
    id: "5780754a7aeb08052787f143"
    text: {and then^/```^/Red []^/^/#include %input.red^/^/ask ">"^/```}
    sent: "2016-07-09T03:53:46.872Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "578075481ca34a944ece3733"
    text: "oh ok"
    sent: "2016-07-09T03:53:44.253Z"
    v: 1
    author: "56d393cfe610378809c41e1a"
) #(
    id: "57807540064f828707eeeb55"
    text: "just put `input.red` in the same folder"
    sent: "2016-07-09T03:53:36.658Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "5780751f59cfbd4c5e56e97f"
    text: {this is the required file^/https://github.com/red/red/blob/master/environment/console/input.red}
    sent: "2016-07-09T03:53:03.582Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "578075031ca34a944ece36a1"
    text: {The current I/O in Red is temporary, full I/O will come in 0.7.0 release. ^/Till then, you need to^/```^/#include %input.red^/```^/to use `ask` in compiled code.}
    sent: "2016-07-09T03:52:35.803Z"
    editedAt: "2016-07-09T03:55:31.705Z"
    v: 3
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "578074cfc9b49c1d6fe2f3d2"
    text: "hey"
    sent: "2016-07-09T03:51:43.341Z"
    v: 1
    author: "56d393cfe610378809c41e1a"
) #(
    id: "578074c7c9b49c1d6fe2f3c8"
    text: "@hellcoderz "
    sent: "2016-07-09T03:51:35.528Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "578073c2bdafd19107429b1d"
    text: "am i missing some runtime code?"
    sent: "2016-07-09T03:47:14.510Z"
    v: 1
    author: "56d393cfe610378809c41e1a"
) #(
    id: "578073b6bdafd19107429b16"
    text: {and same script is working  if running without compiling}
    sent: "2016-07-09T03:47:02.333Z"
    v: 1
    author: "56d393cfe610378809c41e1a"
) #(
    id: "57807339bdafd19107429767"
    text: {@hellcoderz^/hi. I am new to Red. I got an error trying to compile a source file in linux/ubuntu^/-=== Red Compiler 0.6.1 ===- ^/^/Compiling /home/hellcoderz/soft/tests/red/read.red ...^/*** Compilation Error: undefined word ask ^/*** in file: %/home/hellcoderz/soft/tests/red/read.red^/*** near: [^/    ask ">"^/]^/code is:^/Red []^/ask ">"^/Does it require any more dependency?^/"ask" is not working otherwise i am able to compile a file}
    sent: "2016-07-09T03:44:57.099Z"
    v: 1
    author: "56d393cfe610378809c41e1a"
) #(
    id: "577fde91064f828707e8c12f"
    text: {@DarioX1973_twitter  When you install the Windows version  .exe file ,it will place the gui-console.exe file in c:\programdata\red. Each time you download the latest build and run the install it will add that versions gui-console to the c:\programdata\red directory. I usually delete the contents of c:\programdata\red before I install the newest release just to keep it clean. Probably not necessary..   Just another place to look if you run into issues...}
    sent: "2016-07-08T17:10:41.048Z"
    editedAt: "2016-07-08T17:17:26.621Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "577fcd4bf9cb022a33ef6623"
    text: {@DarioX1973_twitter I think this is the best room for such questions.}
    sent: "2016-07-08T15:56:59.362Z"
    v: 1
    author: "5565a4bf15522ed4b3e100bc"
) #(
    id: "577fcd1e3eaf66535e4d5e55"
    text: {Ehi @dockimbel ... perhaps red/newbie? can you open so i can strafe without limits?}
    sent: "2016-07-08T15:56:14.872Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577fcc9d1ca34a944ec6f657"
    text: {a question ... this my questions are correct in this /welcome or it is better another char room? is there a Red/newbie ? i dont' see it ... perhaps the case to open it??? }
    sent: "2016-07-08T15:54:05.233Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577fcc537aeb08052780892d"
    text: {OOOOOK all works perfect now! windows was angry and threw me red.exe from a differente folder where I had a copy ... so Red is ok! well i go on ...}
    sent: "2016-07-08T15:52:51.971Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577fc8437aeb0805278043e6"
    text: "and thanks"
    sent: "2016-07-08T15:35:31.605Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577fc83a1ca34a944ec6b17d"
    text: "so the problem is mine petr, sorry ..."
    sent: "2016-07-08T15:35:22.519Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577fc813c9b49c1d6fdb40de"
    text: {i found that i have problems on my machine ... if i click on .red file, it open a red version that is no the latest i am running by DOS ... so i must have a red in some other part of my pc and windows run it and not that in my c:\red directory where i was testing all ... :-/}
    sent: "2016-07-08T15:34:43.345Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577fc7ad064f828707e7410a"
    text: "https://snag.gy/w85Mt0.jpg"
    sent: "2016-07-08T15:33:01.288Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577fa3333eaf66535e4a9ee7"
    text: {I run the script from the gui-console. That is the only way so far, I work with Red.}
    sent: "2016-07-08T12:57:23.182Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "577fa04b1ca34a944ec45efc"
    text: "when i hit in the field it should open browser..."
    sent: "2016-07-08T12:44:59.966Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577fa01b59cfbd4c5e4c32f9"
    text: {Sorry Petr i was wrong, i mean hit return in the field, not duble click on ...}
    sent: "2016-07-08T12:44:11.172Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f8d40c9b49c1d6fd7f8b0"
    text: {what does it mean, to double click? What is that script associated with? Red.exe? }
    sent: "2016-07-08T11:23:44.260Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "577f8c3f59cfbd4c5e4b36fa"
    text: {this is the 3 .red files i am testing to open a browser}
    sent: "2016-07-08T11:19:27.846Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f8c2a59cfbd4c5e4b34b1"
    text: {https://www.dropbox.com/s/7weu9evzfn8k41f/testweb.zip?dl=0}
    sent: "2016-07-08T11:19:06.732Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f8bc7c9b49c1d6fd7e373"
    text: {if i run the window that open another window, from the dos prompt, and in the second window there is the exactly field in witch i hit return to open the web browser, it dont' works again}
    sent: "2016-07-08T11:17:27.889Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f8a603eaf66535e495029"
    text: {so the error came only if i double clicked the .red script ... ??}
    sent: "2016-07-08T11:11:28.407Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f8a397aeb0805277cafc7"
    text: "CMD"
    sent: "2016-07-08T11:10:49.537Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f8a2bb79455146f687331"
    text: {mmm ... if i run the .red file from CMS in windows `red.exe go-to.red` it works}
    sent: "2016-07-08T11:10:35.848Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f89e2c9b49c1d6fd7cda7"
    text: {mmm if i copy and paste in console the script above, it works. if i double cliccked on the file go-to.red ... it gives me that error}
    sent: "2016-07-08T11:09:22.804Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f8975c9b49c1d6fd7cc40"
    text: {but if i write as you suggeted in Red Console, it works Petr ...}
    sent: "2016-07-08T11:07:33.434Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f8940bdafd19107368b57"
    text: "https://snag.gy/jJuxrF.jpg"
    sent: "2016-07-08T11:06:40.043Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f891759cfbd4c5e4b0e76"
    text: {```^/Red [needs: 'view]^/^/view [^/^-text "Go to link"^/^-go-to-link: field 500 [^/^-^-^-go-to: face/text^/^-^-^-print go-to^/^-^-^-browse to url! go-to^/^-]^/]^/```^/don'w works ... where is the erro?}
    sent: "2016-07-08T11:05:59.165Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f7915b79455146f67acec"
    text: {`browse to url! "www.google.com"`}
    sent: "2016-07-08T09:57:41.138Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "577f773c1ca34a944ec26323"
    text: {"www.google.it" to pass to browse, i mean}
    sent: "2016-07-08T09:49:48.588Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f77181ca34a944ec262ca"
    text: {Ops, how to convert  a http in a string to a http type?}
    sent: "2016-07-08T09:49:12.782Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f731e7aeb0805277b73be"
    text: "Thanks Petr, it works. "
    sent: "2016-07-08T09:32:14.941Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f71e6c9b49c1d6fd6b141"
    text: "Try to use `browse`function ..."
    sent: "2016-07-08T09:27:02.592Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
)#(
    id: "577f70b059cfbd4c5e4a00cf"
    text: "https://snag.gy/JPdc86.jpg"
    sent: "2016-07-08T09:21:52.704Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f70afc9b49c1d6fd6a493"
    text: {how can i open a link in a web browser if i click it?}
    sent: "2016-07-08T09:21:51.289Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f6c593eaf66535e47fbb8"
    text: {I just missing something to get to write and read data from firebird database ... perphaps not optimized but something that works ... if i do an executable with Delphi that read the database results of query passed and give back result in csv format, and after read it with Red and manipolate it,  and after a similar way to do modified in csv passed to this executable, i can try to use Red with firebird - at a very basic level, obsviously, but it should works ...}
    sent: "2016-07-08T09:03:21.991Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f6b35b79455146f6717c2"
    text: "WOW"
    sent: "2016-07-08T08:58:29.094Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f6b1b7aeb0805277b0c57"
    text: "Congratulations Dario. :^^)"
    sent: "2016-07-08T08:58:03.424Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577f6b15c9b49c1d6fd65900"
    text: {so few efforts, and while programming the ordinary work at office ... just  fantastic!}
    sent: "2016-07-08T08:57:57.602Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f6ae6064f828707e205f1"
    text: {ops, "so few" i wanted do write !}
    sent: "2016-07-08T08:57:10.290Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f6a3559cfbd4c5e49b7e8"
    text: {WOW ... while programming at my ordinary works at office (Delphi), i write my first Red program: insert a web link classified by tags and notes, and the finder of what i have written ... fantastic!!! with so many efforts!!}
    sent: "2016-07-08T08:54:13.975Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577f69a759cfbd4c5e49ae96"
    text: "https://snag.gy/GKlhwL.jpg"
    sent: "2016-07-08T08:51:51.863Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577edd80bdafd191072f2e4a"
    text: "@dockimbel  Thank you "
    sent: "2016-07-07T22:53:52.210Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "577ebf3e3eaf66535e409afb"
    text: {Even http://www.rebol.com/docs.html is worth your time to explore. }
    sent: "2016-07-07T20:44:46.154Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ebedab79455146f5f4b1b"
    text: {Red *could* dump a lot of things in just to be more compatible, but the designer wants to consider everything, learn from Rebol, and make sure Red is the best it can be So if it seems like some things would be easy, or progress is slow in some areas, don't worry. We can almost always patch in the things we need at the higher level while we wait for them to become standard. Low level stuff we do have to wait for, or contribute ourselves.}
    sent: "2016-07-07T20:43:06.156Z"
    editedAt: "2016-07-07T20:43:23.053Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ebe64064f828707da1d65"
    text: {Nick's stuff is great. He wrote them with a target audience in mind, which might not be you. In any case, you can ask questions here and a lot of Rebol docs will apply. The fundamentals are the same, and if a function is missing, that you need, ask and someone will probably provide one. }
    sent: "2016-07-07T20:41:08.271Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577e87131ca34a944eb71d48"
    text: {@grahamf21 Thanks, I'll follow Nick's tutorials then! :-)}
    sent: "2016-07-07T16:45:07.823Z"
    v: 1
    author: "56ccb27de610378809c31304"
) #(
    id: "577e7b57b79455146f5b5217"
    text: {Hi Ian  - welcome! As a relative newcomer myself I heartily recommend Nick's tutorials. They got me off to a good start with Rebol. And along with a bit more research, particularly on www.rebol.com I was able to create business apps for my local credit union.}
    sent: "2016-07-07T15:55:03.513Z"
    v: 1
    author: "56fcd54d187bb6f0eadd243e"
) #(
    id: "577e69897aeb0805276e8d97"
    text: {Good morning! (it is morning here in Houston, at least) Am I correct to assume that the best place to start learning Red is to learn Rebol2? What materials would you recommend in this case? There is a prolific Rebol teacher on the internet, Nick Antonaccio, are his websites a good start? The reason I ask is that after a cursory look they felt like emphasizing the "copy-paste-and-marvel" approach a little bit too much... I hope my comments do not offend him if he reads this channel...}
    sent: "2016-07-07T14:39:05.284Z"
    v: 1
    author: "56ccb27de610378809c31304"
) #(
    id: "577e3153b79455146f57519a"
    text: "Ok, thanks for now, Peter! :-D"
    sent: "2016-07-07T10:39:15.014Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577e31471ca34a944eb237a6"
    text: "Whereas I know still little ... i mean"
    sent: "2016-07-07T10:39:03.995Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577e31241ca34a944eb23767"
    text: {As a newbie, for sure this is also a risk ... but for what i see now in Red, Red seems to have all the right credentials to smash!}
    sent: "2016-07-07T10:38:28.784Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577e308459cfbd4c5e39c605"
    text: {i know that there are many way to bingd external gui engines, but i think - perhaps it is for my delphi background - that the intergrated GUI, in a language, is a very great  point. Python developers, for examples, didn't understand this ... that  having a decent and simple to write GUI inside a language itself, is a great point ...  the GUI integrated in Red - simple to write and easy to have in a single executable - now is the best point that make me deciding to abandon Python and adopt Red, for example.}
    sent: "2016-07-07T10:35:48.404Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577e2f6b7aeb0805276b55d9"
    text: {also i think, for this kind of device, programmine the VID directly will be fantastic, when VID in raspberry will work ...}
    sent: "2016-07-07T10:31:07.092Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577e2f273eaf66535e3897ea"
    text: "http://eurekanews.altervista.org/archipass-2/"
    sent: "2016-07-07T10:29:59.355Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577e2f26c9b49c1d6fc65997"
    text: {Thanks Peter, these are very good news for me, because I did this craft maker to record jump in and out of personnel. Now i have used Python for the scripting that wait for inserting usb pen and write who is the realtive person ... so, i can convert the script in as a Red executable, and test it. Fantastic ...}
    sent: "2016-07-07T10:29:58.002Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577e22a1bdafd19107245e33"
    text: {Here is how I compiled the command-line console, using the latest Red source:^/```text^/red peter$ rebol -qs red.r -t RPi -o RaspberryRed environment/console/console.red^/-=== Red Compiler 0.6.1 ===- ^/^/Compiling /Users/peter/VMShare/Red/red/environment/console/console.red ...^/...compilation time : 733 ms^/^/Compiling to native code...^/...compilation time : 23862 ms^/...linking time     : 224 ms^/...output file size : 1096728 bytes^/...output file      :~/VMShare/Red/red/RaspberryRed ^/```^/^/And here it is running on a Raspberry Pi Model A:^/```text^/~/Red $ ./RaspberryRed^/--== Red 0.6.1 ==-- ^/Type HELP for starting information. ^/^/red>> system/version^/== "0.6.1"^/red>> system/platform^/== Linux^/red>> system/build^/== "7-Jul-2016/17:32:18+8:00"^/red>> ^/```}
    sent: "2016-07-07T09:36:33.263Z"
    editedAt: "2016-07-07T09:40:46.231Z"
    v: 4
    author: "55659cf115522ed4b3e10062"
) #(
    id: "577e20e53eaf66535e3805bf"
    text: {The second way is to install the experimental Rebol Raspberry Pi version then you can compile any Red program on the Raspberry Pi. (Rebol only runs on Raspberry Pi 2 and 3).}
    sent: "2016-07-07T09:29:09.649Z"
    editedAt: "2016-07-07T09:39:00.394Z"
    v: 2
    author: "55659cf115522ed4b3e10062"
) #(
    id: "577e20883eaf66535e3804d6"
    text: {@DarioX1973_twitter Yes Dario. Rebol works on Raspberry Pi. There is no GUI yet as so far View has only been implemented on Windows. The GTK+ 3 implementation of View will run on Raspberry Pi.^/^/There is not a Red binary for Raspberry Pi yet. That will probably only come with Red 1.x.^/^/There  are two ways to create Red programs for the Raspberry Pi. The first is to take advantage of Red's easy to use cross-compilation features to compile a Red program for Raspberry Pi and then copy the binary executable to a Raspberry Pi. You could compile the Red console (non-GUI version) for Raspberry Pi and then use it on a Raspberry Pi.}
    sent: "2016-07-07T09:27:36.068Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "577e1d10bdafd19107241ad7"
    text: {@DarioX1973_twitter  RED stands for Rebol Enhanced Dialect, or something like that I remember. I am not sure it will be like that in future.}
    sent: "2016-07-07T09:12:48.585Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "577e1cbc064f828707d0d7d2"
    text: "Does Red work on the raspberry? "
    sent: "2016-07-07T09:11:24.618Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577e1981b79455146f562f56"
    text: {@dockimbel What "Red" stand for? what does it means R E D ? }
    sent: "2016-07-07T08:57:37.711Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577dce88bdafd19107205521"
    text: {@virtualAlan Welcome and thank you for your nice Red intro pages! ;-)}
    sent: "2016-07-07T03:37:44.710Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577c50f1ddcdcee623f74162"
    text: "ok thanks, that's works."
    sent: "2016-07-06T00:29:37.396Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c4e0264f940856a17d7ac"
    text: {I'm on Windows, but I don't see them even in hex mode in my editor. Before long we'll probably have `enline/deline` funcs. In the meantime the char for CR is #"^^M", so you can try manually replacing that in the string.}
    sent: "2016-07-06T00:17:06.023Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577c4becc6b33f904a8db45a"
    text: {@virtualAlan Hi alan, thanks, i have downloaded your pdf of Red, i will see it, very interesting.}
    sent: "2016-07-06T00:08:12.495Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c4b8951724d8078be93ba"
    text: {i work on windows, perhaps you are on linux or mac?}
    sent: "2016-07-06T00:06:33.932Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c4b774e50bf894a2116cb"
    text: "perhaps you see the file from notepad?"
    sent: "2016-07-06T00:06:15.157Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c4b6651724d8078be8eb4"
    text: {in notepad, one see all on a single line, but CR is still there ...}
    sent: "2016-07-06T00:05:58.175Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c4b4951724d8078be8e66"
    text: "notepad++ show chars ..."
    sent: "2016-07-06T00:05:29.370Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c4b3e64f940856a17b632"
    text: "@greggirwin https://snag.gy/7IQTPo.jpg"
    sent: "2016-07-06T00:05:18.725Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c496d4e50bf894a20ff04"
    text: "@greggirwin   I need to check for typo's  "
    sent: "2016-07-05T23:57:33.088Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "577c488764f940856a178e75"
    text: "Hi Gregg, thanks "
    sent: "2016-07-05T23:53:43.943Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "577c4840c6b33f904a8d7a4a"
    text: {@DarioX1973_twitter, it seems to work fine here. I enter text with newlines in the area, save it, and the file just has the ||| in their place.}
    sent: "2016-07-05T23:52:32.113Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577c48134e50bf894a20f25c"
    text: "Welcome Alan!"
    sent: "2016-07-05T23:51:47.939Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577c46bb9d3eadd7237021e1"
    text: {Hi, I just joined here .... My site has some Red pages, some examples, a simple reference guide, a few apps created with Red, take a look: http://www.mycode4fun.co.uk/About-Red-Programming}
    sent: "2016-07-05T23:46:03.287Z"
    v: 1
    author: "577c0414c2f0db084a2193c9"
) #(
    id: "577c440151724d8078be28f9"
    text: {and I said " wow!" }
    sent: "2016-07-05T23:34:25.105Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c43bd0c16867678c7fba5"
    text: {http://www.evigneto.com/ProductsResources/549/000627_0_ori.jpeg}
    sent: "2016-07-05T23:33:17.316Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c43af4e50bf894a20b909"
    text: {I do not know if you believe in coincidences , but this morning at the bar I eye fell on this bottle ...}
    sent: "2016-07-05T23:33:03.691Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c41540c16867678c7dfec"
    text: {Gregg ... perfeeeeeeeeeect ... it open a second window, perfect ... :-)}
    sent: "2016-07-05T23:23:00.295Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c3ff1c6b33f904a8d12a6"
    text: {it seems to me that  this kill only the LF but not the CR ...}
    sent: "2016-07-05T23:17:05.679Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c3fb251724d8078bdf453"
    text: {```^/replace/all t-rep "^^/" "|||"^/```^/}
    sent: "2016-07-05T23:16:02.286Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c3f9b0c16867678c7bafc"
    text: ""
    sent: "2016-07-05T23:15:39.471Z"
    editedAt: "2016-07-05T23:16:09.236Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
)#(
    id: "577c3f7ae22c1b816ae1044e"
    text: "'''"
    sent: "2016-07-05T23:15:06.474Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c3f734e50bf894a208048"
    text: ""
    sent: "2016-07-05T23:14:59.500Z"
    editedAt: "2016-07-05T23:16:12.267Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c3f5bc6b33f904a8d0f2a"
    text: {'''^/Red [needs: 'view]^/^/view [^/^- ^/    below^/^-text "Internet link"^/^-internet-link: field 500^/^-^/^-text "Tag list (click on it to add)"^/^-text-list 90x160 data [^/        "home" "work" "important links" "red programming" "telephon calls" "memo" "to see"^/    ] [append append link-tags/text ";" (pick face/data face/selected) ]^/^-^/^-text "Tags (ex: home;interesting;work)"^/^-link-tags: field 500 ""^/^- ^/^-text "Personal note"^/^-link-note: area 500x200 "WRITE_HERE"^/^-^/^-b: button "Save" [^/^-^-t: copy ""^/^-^-append t "LINK: "^/^-^-append t internet-link/text^/^-^-append t "^^/"^/^-^-^/^-^-append t "TAGS: "^/^-^-append t link-tags/text^/^-^-append t "^^/"^/^-^-^/^-^-append t "NOTE: "^/^-^-t-rep: copy link-note/text^/^-^-replace/all t-rep "^^/" "|||" ^/^-^-print t-rep^/^-^-^/^-^-append t t-rep^-^- ^/^-^-append t "^^/"^-^/^-^-write/append %memolink-list.txt t^/^-^-^/^-^-]^/]^/'''^/}
    sent: "2016-07-05T23:14:35.208Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c3f3a51724d8078bdea18"
    text: "'''"
    sent: "2016-07-05T23:14:02.253Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c3f37ddcdcee623f6518e"
    text: "https://snag.gy/gJiIsB.jpg"
    sent: "2016-07-05T23:13:59.874Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c3f3651724d8078bde77b"
    text: {i hope to not abuse of your patience. how do this, eliminate the CRLF?}
    sent: "2016-07-05T23:13:58.252Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c3abcc6b33f904a8cde04"
    text: {@rebol2red has a small example doing just that in https://gitter.im/red/red}
    sent: "2016-07-05T22:54:52.391Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577c39b20c16867678c77a93"
    text: {For now, however, how can i show a second form from a initial form, for example pressing a button?}
    sent: "2016-07-05T22:50:26.762Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577c399d51724d8078bda9ff"
    text: {Ok thanks, i'm reading the gui doc you have linked, Greg. For the DB support, i will wait. }
    sent: "2016-07-05T22:50:05.885Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577be4e39d3eadd72369b692"
    text: {You can control the spacing. See http://doc.red-lang.org/gui/VID.html and the `space` keyword. I'm sure some UI guru will show up and offer suggestions before long.}
    sent: "2016-07-05T16:48:35.025Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577be43c9d3eadd72369b04a"
    text: {Delphi didn't start out as a DB-oriented tool either. :^^)}
    sent: "2016-07-05T16:45:48.873Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577be41d9d3eadd72369a882"
    text: {@DarioX1973_twitter, patience. :^^) Red is young and the things being built in now are what Red needs to show commercial viability and also to become self-hosted. That said, There is a SQLite binding at http://www.red-lang.org/p/contributions.html. So it's not that you won't be able to use any DB you want, you will, but you may not need one all the time.}
    sent: "2016-07-05T16:45:17.823Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577b9fcab7a853a204148d0b"
    text: { @ingdariogiacomelli you can use `write/append`to append data to an existing file. And in case the file doesn't exist, it's created automaticly.^/Don't hesitate to use `help` on functions to discover practical options.}
    sent: "2016-07-05T11:53:46.819Z"
    editedAt: "2016-07-05T11:56:53.156Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "577b9a1f4fd38161099fe8ab"
    text: "ok thanks, i go to lunch. Good lunch!"
    sent: "2016-07-05T11:29:35.960Z"
    v: 1
    author: "577b9820c2f0db084a218160"
) #(
    id: "577b99ddef3990705bb3cff4"
    text: {i think, by default, between the labels and the field, there are vertically too much space. It's normal or i wrong something? }
    sent: "2016-07-05T11:28:29.213Z"
    v: 1
    author: "577b9820c2f0db084a218160"
) #(
    id: "577b996a64638562097ebb9e"
    text: {a problem is also that if memolink-list.txt do not exists, it gives error ... i don't know how to check file exists ... i am starting from some gui instructions, because i like to have something visual from the beginning, because i remember a litte Rebol sintax ..}
    sent: "2016-07-05T11:26:34.635Z"
    v: 1
    author: "577b9820c2f0db084a218160"
) #(
    id: "577b98f6ef3990705bb3c66e"
    text: {i am the same of DarioX1973_twitter, i will use twitter account next time (not confusion ...)}
    sent: "2016-07-05T11:24:38.263Z"
    v: 1
    author: "577b9820c2f0db084a218160"
) #(
    id: "577b98cff06cda5d098d8b81"
    text: {This is a simple my example form to save interesting links i find in internet, associating them some tags, and commenting the link. I just was trying Red ... it's a stupid form. But ... this is an "insert" form. How can i visualize it from a prior form that had a meno "Read links", "Inser new link", ecc ? thanks for help me}
    sent: "2016-07-05T11:23:59.871Z"
    v: 1
    author: "577b9820c2f0db084a218160"
) #(
    id: "577b983f584c2e775be49788"
    text: {```^/Red [needs: 'view]^/^/view [^/    below^/^-text "Internet link"^/^-internet-link: field 500^/^-^/^-text-list 90x160 data [^/        "Home" "Work" "Eurekaweb2" "bugs" "telephon calls"^/    ] [append append link-tags/text ";" (pick face/data face/selected) ]^/^-^/^-text "Tags (ex: home;interesting;work)"^/^-link-tags: field 500 ""^/^- ^/^-text "Personal note"^/^-link-note: area 500x200 "WRITE_HERE"^/^-^/^-b: button "Save" [^/^-^-t: copy ""^/^-^-append t "LINK: "^/^-^-append t internet-link/text^/^-^-append t "^^/"^/^-^-^/^-^-append t "TAGS: "^/^-^-append t link-tags/text^/^-^-append t "^^/"^/^-^-^/^-^-append t "NOTE: "^/^-^-t-rep: copy link-note/text^/^-^-replace/all t-rep "^^/" "|||"^/^-^-^/^-^-append t t-rep^/^-^-append t "^^/"^/^-^-^/^-^-t-new: read %memolink-list.txt ^/^-^-^/^-^-append t-new t^/^-^-write %memolink-list.txt t-new^/^-^-append t "^^/"^/^-^-^/^-^-]^/]^/```^/}
    sent: "2016-07-05T11:21:35.265Z"
    v: 1
    author: "577b9820c2f0db084a218160"
) #(
    id: "577b798a4fd38161099e19f6"
    text: {@DarioX1973_twitter I have no doubt that Red will have SQL database support. Nenad published both MySQL and PostgreSQL schemes for Rebol - [Softinnov schemes](http://softinnov.org).^/^/I ma confident that he will come up with something even better for Red but it will need the full IO support of Red 0.7.0 first.}
    sent: "2016-07-05T09:10:34.242Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "577b72c9ef3990705bb1e375"
    text: {@DarioX1973_twitter You will finds some code examples at https://github.com/red/code}
    sent: "2016-07-05T08:41:45.800Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "577b626e69ed53d81431c9d1"
    text: {Thanks, i go back to my ordinary work. I will return here in the day. }
    sent: "2016-07-05T07:31:58.748Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577b61924bee5c57092a2e06"
    text: "a general Red cookbook, i mean. "
    sent: "2016-07-05T07:28:18.459Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577b61834fd38161099ce0b3"
    text: {Second question, is there a repository with many example?or a Red cookbook? }
    sent: "2016-07-05T07:28:03.147Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577b614af06cda5d098aa0a9"
    text: {A question in my mind. I read that Red users can not use database because of the capabilities of handling data of Red. I try ax example of little address book. Ok, but in case of many clients, in the classic server/client application, how can one can use Red without a classic database to share and modify data in case of concurrency between clients? when you use a database, you have many clients executing query on many tables  ... two clients write data in the same table ... let mi be more clear ...  i dont' understand how Red do this without  using a normal sql database ... can you give me some ideas? i think this because it seems to me the Red is not database oriented ... for example, as the language Delphi is.}
    sent: "2016-07-05T07:27:06.086Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad8924bee5c57092434fc"
    text: "^/I will fall asleep mulling these things ..."
    sent: "2016-07-04T21:43:46.716Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad86a646385620975b757"
    text: {Ok, it's time to go to sleep in Italy. I will return soon. good night Gregg. :smile: }
    sent: "2016-07-04T21:43:06.317Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad7824bee5c570924260f"
    text: {Maybe delete some of them that didn't work. Destroy the evidence.  ;^^)}
    sent: "2016-07-04T21:39:14.537Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad75e646385620975ada8"
    text: "Happy to help."
    sent: "2016-07-04T21:38:38.868Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad756ef3990705baa6ef1"
    text: "Thank you very much, Greg!"
    sent: "2016-07-04T21:38:30.727Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad74f4bee5c570924214d"
    text: "Woohoo! :^^)"
    sent: "2016-07-04T21:38:23.640Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad73c4fd3816109966f4a"
    text: "uau!"
    sent: "2016-07-04T21:38:04.702Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad739f06cda5d09847ea1"
    text: {```^/parse s [                   ; S is our input string^/    any [                   ; Do the following 0 or more times^/        copy t some char    ; Copy 1 or more matched charset values into 't^/        (^/            append r t      ; Append the copied chars to our result (r)^/            append r "|"    ; Then add the pipe to r^/        ) ^/        copy t to char      ; We stopped at the last charset match, so now^/                            ; we use TO to copy *to* where the next charset^/                            ; match starts, so now t contains the things ^/                            ; between the alpha characters.^/        (^/            replace/all t "^^/" " "  ; replace newlines with spaces^/            append r t      ; Append it to our result^/            append r "|^^/"  ; Then add the pipe and newline to r^/        )^/    ]^/]^/```^/}
    sent: "2016-07-04T21:38:01.621Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad7174bee5c5709241e90"
    text: ""
    sent: "2016-07-04T21:37:27.013Z"
    editedAt: "2016-07-04T21:39:54.589Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad71169ed53d8142b1d63"
    text: {There you go. Now, do three in a row, a newline put in some code, then a newline and three more in a row.}
    sent: "2016-07-04T21:37:21.375Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad6fdf06cda5d09847e0f"
    text: ""
    sent: "2016-07-04T21:37:01.993Z"
    editedAt: "2016-07-04T21:40:01.357Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad6e1584c2e775bdbb268"
    text: {`f: "ciao" `}
    sent: "2016-07-04T21:36:33.379Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad6b8f06cda5d0984783e"
    text: "Now add another one at the end."
    sent: "2016-07-04T21:35:52.219Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad6a6f06cda5d09847574"
    text: {`f: "ciao"^/}
    sent: "2016-07-04T21:35:34.171Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad683ef3990705baa5f54"
    text: {Oy. http://superuser.com/questions/667622/italian-keyboard-entering-the-tilde-and-backtick-characters-without-cha}
    sent: "2016-07-04T21:34:59.280Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad630ef3990705baa5c1a"
    text: "Can you see the example in the help?"
    sent: "2016-07-04T21:33:36.314Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad61269ed53d8142b0749"
    text: {I don't know where the backquote is on the Italian keyboard. :^^\ For me it's the unshifted tilde key.}
    sent: "2016-07-04T21:33:06.189Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad5c0584c2e775bdba1b3"
    text: {mmmm ... ^/I did not understand, I can not paste color code^/^/^/^/^/^/^/}
    sent: "2016-07-04T21:31:44.107Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad55eef3990705baa4f5c"
    text: {/f: "prova"}
    sent: "2016-07-04T21:30:06.466Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad533584c2e775bdb9215"
    text: ""
    sent: "2016-07-04T21:29:23.457Z"
    editedAt: "2016-07-04T21:29:34.109Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad51e3ac2a2dc143a60d7"
    text: ""
    sent: "2016-07-04T21:29:02.473Z"
    editedAt: "2016-07-04T21:29:50.150Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad51eef3990705baa4e81"
    text: ""
    sent: "2016-07-04T21:29:02.407Z"
    editedAt: "2016-07-04T21:29:43.060Z"
    v: 2
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad4ac69ed53d8142aef19"
    text: ""
    sent: "2016-07-04T21:27:08.287Z"
    editedAt: "2016-07-04T21:27:43.470Z"
    v: 3
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad3e6ef3990705baa45fe"
    text: {You can also click the ellipsis (...) next to your messages to edit them and fix typos.}
    sent: "2016-07-04T21:23:50.939Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad3b63ac2a2dc143a550c"
    text: "ctrl+shift+M is the syntax help hot key."
    sent: "2016-07-04T21:23:02.435Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
)#(
    id: "577ad3833ac2a2dc143a549f"
    text: {We all slip up sometimes, but it's really nice how often it just works.}
    sent: "2016-07-04T21:22:11.589Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad3634fd3816109963142"
    text: {Yes, one of the key things about the style guide, and how to format code, is to allow that.}
    sent: "2016-07-04T21:21:39.809Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad34a4fd3816109963103"
    text: {Click the little M dn-arrow next to the edit box. single backticks for short code, open/close triple backticks for longer code.}
    sent: "2016-07-04T21:21:14.218Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ad298584c2e775bdb766e"
    text: {However, the great thing is that I copy and paste Red Code, and in spite of how it is formatted (spaces, tabs, trolleys etc.) works perfectly, and even in the shell window!}
    sent: "2016-07-04T21:18:16.506Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad23def3990705baa3680"
    text: "syntax"
    sent: "2016-07-04T21:16:45.117Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad23964638562097562f2"
    text: {how can i paste code here and obtain the same sintax coloring as you, greg?}
    sent: "2016-07-04T21:16:40.999Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ad1f44fd3816109962320"
    text: {It works fine.  At a glance I thought you had written different code, instead I see that it is precisely the same although less concise. Really nice as then becomes concise ...}
    sent: "2016-07-04T21:15:32.592Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ace6a64638562097534eb"
    text: {This breaks apart some of the chaining, to make it easier to explain.^/```^/parse s [                   ; S is our input string^/    any [                   ; Do the following 0 or more times^/        copy t some char    ; Copy 1 or more matched charset values into 't^/        (^/            append r t      ; Append the copied chars to our result (r)^/            append r "|"    ; Then add the pipe to r^/        ) ^/        copy t to char      ; We stopped at the last charset match, so now^/                            ; we use TO to copy *to* where the next charset^/                            ; match starts, so now t contains the things ^/                            ; between the alpha characters.^/        (^/            replace/all t "^^/" " "  ; replace newlines with spaces^/            append r t      ; Append it to our result^/            append r "|^^/"  ; Then add the pipe and newline to r^/        )^/    ]^/]^/```}
    sent: "2016-07-04T21:00:26.572Z"
    editedAt: "2016-07-04T21:02:21.217Z"
    v: 2
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577acc846463856209752816"
    text: "I go to study Red now, thanks for help!"
    sent: "2016-07-04T20:52:20.087Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577acc6f69ed53d8142a705d"
    text: "I imagine it"
    sent: "2016-07-04T20:51:59.472Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577acc5369ed53d8142a7012"
    text: {`parse` takes some time to learn, but then you can't live without it. :^^)}
    sent: "2016-07-04T20:51:31.704Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577acc2c584c2e775bdb16df"
    text: {Thank you! I tried it, it works perfectly Greg. Still I do not understand so well written code, but it impresses me a lot. I sit down with the documentation of Red ...}
    sent: "2016-07-04T20:50:52.642Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577acc1e4bee5c57092399b7"
    text: "Ok for the ODBC. :-/"
    sent: "2016-07-04T20:50:38.399Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577acaa169ed53d8142a5d35"
    text: {It does make that line very dense and hard to read now though. I think `repend` will support strings before long, and we'll probably get `join` too, to help with this kind of thing. You could also break up the `append`s for clarity. Steeve's code packs a lot of power in a small space. }
    sent: "2016-07-04T20:44:17.614Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577aca304fd381610995d093"
    text: {Note that my change doesn't try to do anything fancy with `parse`, but just uses `replace` on what `parse` already extracted.}
    sent: "2016-07-04T20:42:24.243Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577aca03584c2e775bdaf4b5"
    text: {There is no ODBC or other external DB access at this time.}
    sent: "2016-07-04T20:41:39.332Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ac9e5f06cda5d0983cbef"
    text: {I work every day on a management done in Delphi and Firebird database.  I think, red would be perfect for small external small programs to our management main program. Red by random  has something to allow me to use Firebird?}
    sent: "2016-07-04T20:41:09.954Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ac9d84bee5c570923719e"
    text: {Is this what you want @DarioX1973_twitter ?^/```^/s: {Mise subito mano alla stesura ^/dell'opera, dallo scoppio della ^/guerra, che prevedeva sarebbe stata grave, ^/anzi la più degna di memoria tra le precedenti.}^/char: charset [#"a" - #"z" #"A" - #"Z" "012345789" "àèéìòù"]^/r: make string! length? s ^/parse s [^/    any [^/        copy t some char (append append r t "|") ^/        copy t to char (append append r replace/all t "^^/" " " "|^^/")^/    ]^/] ^/print r^/```}
    sent: "2016-07-04T20:40:56.332Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577ac926584c2e775bdae411"
    text: {Thanks for the code you send me Steeve! really interesting Red, and I'm sorry to have abandoned Rebol years ago.  To have an executable with so few lines of code, it is really impressive for me ... so now i will come back in the Rebol style of programming! also the decision to have a GUI based on OS widgets (i'm reading documentation...), i think is a great  point. I didn't liked the Rebol GUI that  some see as a graphics of 80 age ...}
    sent: "2016-07-04T20:37:58.583Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ac6eb646385620974b4ee"
    text: "How can i "
    sent: "2016-07-04T20:28:27.630Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ac6df584c2e775bdad1b1"
    text: {Hello Steeve,  really concise but powerfull. How con i convert  the CRLF into a space char " " with the parse method you write me? to obtain this, i mean: }
    sent: "2016-07-04T20:28:14.919Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577ac6de4fd3816109959192"
    text: "https://snag.gy/TgVcHn.jpg"
    sent: "2016-07-04T20:28:14.692Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a387074aad3585384105a"
    text: {Welcome Dario, as a reward, here a version of your code using parse:^/```lisp^/s: "Mise subito mano alla stesura dell'opera, dallo scoppio della guerra, che prevedeva sarebbe stata grave, anzi la più degna di memoria tra le precedenti."^/char: charset [#"a" - #"z" #"A" - #"Z" "012345789" "àèéìòù"]^/r: make string! length? s ^/parse s [^/^-any [^/^-^-copy t some char (append append r t "|") ^/^-^-copy t to char (append append r t "|^^/")^/^-]^/] ^/print r^/```}
    sent: "2016-07-04T10:20:32.201Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "577a3702d4b6d5012ecc13d5"
    text: "Ciao, alla prossima. :-D"
    sent: "2016-07-04T10:14:26.177Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a3640bdf63af92df83e04"
    text: "You're welcome. ;-)"
    sent: "2016-07-04T10:11:12.635Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577a360b6a8f789e4a210f9e"
    text: {I remember trying it - the piping i mean - with Rebol, many years ago now. i abandoned Rebol as there was version 3 , also if i liked rebol sintax. Ok thanks for all Nenad. I'll come back here after have made some other tests. :-D^/}
    sent: "2016-07-04T10:10:19.311Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a35626a8f789e4a21090f"
    text: {Everything is an expression in Red, so you can pipe them as you want.}
    sent: "2016-07-04T10:07:30.567Z"
    editedAt: "2016-07-04T10:07:37.973Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577a341f6a8f789e4a20f878"
    text: {append wpb either empty? trim x-string [""][x]     ok i understand it, really concise and readable to write}
    sent: "2016-07-04T10:02:07.283Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a3373d4b6d5012ecbeda1"
    text: {@DarioX1973_twitter `empty?` is an alias of `tail?`, returning `true` if the tail of the series is reached (equivalent to  testing for an empty series).}
    sent: "2016-07-04T09:59:15.241Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577a333dcdab7a1f4fe65a02"
    text: "ah ok thanks"
    sent: "2016-07-04T09:58:21.755Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a33255c023e194f77738d"
    text: {@DarioX1973_twitter You should preallocate only when big buffers are used, otherwise you won't see any speed difference (though, memory usage will be lower).}
    sent: "2016-07-04T09:57:57.014Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577a3314d4b6d5012ecbe55a"
    text: "i will try these tips .."
    sent: "2016-07-04T09:57:40.003Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a33055c023e194f7770b2"
    text: "uau ... "
    sent: "2016-07-04T09:57:25.762Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a32c935bfead3797c7aed"
    text: {i will try preallocating string, perhaps it will produce a faster conversion. i will try.}
    sent: "2016-07-04T09:56:25.673Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a329d26ff03984ac870be"
    text: {Also, you can simplify `( (length? trim x-string) = 0)` by using just: `empty? trim x-string`. So instead of:^/```lisp^/either ( (length? trim x-string) = 0) [^/    append wpb " "^/][^/    append wpb x^/]^/```^/you can write it as:^/```lisp^/append wpb either empty? trim x-string [""][x]^/```}
    sent: "2016-07-04T09:55:41.789Z"
    editedAt: "2016-07-04T09:56:51.332Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577a31f55c023e194f775dd0"
    text: {`x: ""` always makes word `x` refer to the same empty string `""`.  If you want a new string each time, you need to use `copy` or build it manually using: `make string! <n>`, where `n` is the number of characters to want to pre-allocate for the string's buffer.}
    sent: "2016-07-04T09:52:53.980Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577a30845c023e194f77425a"
    text: {but x: copy "" is better than x: "" ?}
    sent: "2016-07-04T09:46:44.154Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2fe526ff03984ac84bf3"
    text: {yes, i will study parsing after more important fundamentals}
    sent: "2016-07-04T09:44:05.796Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2f916a8f789e4a20bfaf"
    text: {@DarioX1973_twitter I think that's the right way, learning Parse will be easier then, as you'll be able to relate it to the manual parsing code you wrote before.}
    sent: "2016-07-04T09:42:41.885Z"
    editedAt: "2016-07-04T09:42:48.363Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577a2f7ecdab7a1f4fe627a4"
    text: {really impressed because programming and testing is rapid as in python, or better, but the executable to simply shared is another way to live!}
    sent: "2016-07-04T09:42:22.959Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2f3bbdf63af92df7dd0d"
    text: {i didn't use parsing because i implemented a simple "finite state automaton", walking char after char and producing table as you see}
    sent: "2016-07-04T09:41:15.649Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2f326a8f789e4a20bc84"
    text: {@DarioX1973_twitter Glad you have fun with Red! Yes, it is not optimized yet, expect much faster execution for 1.0.}
    sent: "2016-07-04T09:41:06.599Z"
    editedAt: "2016-07-04T09:41:11.092Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577a2ed101d3c8d8793026d3"
    text: {i love the little executable! using python converted in executable, i had big files ... and i love the speed : i obtain, for example, 3 sec for elaborating a text file of 1,3MByte. The same speed of executable made in python. Bery good i think, because my red code is surely not optimized!}
    sent: "2016-07-04T09:39:29.371Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2e4abdf63af92df7d87a"
    text: {another quaestion: surely my first code is horrible for you ... and I have done a lot of style errors or optimization ... some suggestions? :-D }
    sent: "2016-07-04T09:37:14.432Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2dc65c023e194f771a65"
    text: {why wcb: copy "" works, but if i use wcb: "" it seems to not work ? because "" is an object?}
    sent: "2016-07-04T09:35:02.565Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2d9135bfead3797c21de"
    text: {the time to elaborate great text file, not that in the example, is very good for me. So, i have decided to continue with Red! a question, i have ...}
    sent: "2016-07-04T09:34:09.927Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2d6026ff03984ac825df"
    text: {i didn't use parsing becasue i am too much newbie ...}
    sent: "2016-07-04T09:33:20.216Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2d36cdab7a1f4fe60c70"
    text: "http://pastebin.com/tBraU4QG"
    sent: "2016-07-04T09:32:38.055Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2d1fcdab7a1f4fe60967"
    text: "i paste the red code ... "
    sent: "2016-07-04T09:32:15.473Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577a2d0bbdf63af92df7ca37"
    text: "https://snag.gy/51jeqx.jpg"
    sent: "2016-07-04T09:31:55.959Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
)#(
    id: "577a2d09bdf63af92df7c9aa"
    text: "Hello!"
    sent: "2016-07-04T09:31:53.541Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57764a18a0c12d110fe178e7"
    text: "You need a Red mobile :-)"
    sent: "2016-07-01T10:46:48.971Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "577649daa0c12d110fe175d6"
    text: {I will saw that later : holidays time just right now. Away from the Web for one week. Hmmm.}
    sent: "2016-07-01T10:45:46.166Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "577645128441a8124da868ef"
    text: "@dockimbel It's the weekend here ;-)"
    sent: "2016-07-01T10:25:22.920Z"
    v: 1
    author: "55659cf115522ed4b3e10062"
) #(
    id: "577643b18c9263ba304c6c60"
    text: {@DideC Just wait to see the demo that I'm cooking, which I will release after this weekend. ;-)}
    sent: "2016-07-01T10:19:29.984Z"
    editedAt: "2016-07-01T10:19:48.609Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57763e9bbb1de91c54c61710"
    text: {It's just to help people understand what is it. But Red is not a spreadsheet ;-) Just that reactivity allow to make a spreadsheet like app pretty easilly now.}
    sent: "2016-07-01T09:57:47.343Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "57763da9265214c130be5aa4"
    text: {Saying that reactivity allow things "like Excel formula" does not mean it's the same thing.}
    sent: "2016-07-01T09:53:45.401Z"
    v: 1
    author: "57080f60187bb6f0eade8b26"
) #(
    id: "5776387b9717171554a80ebe"
    text: "Ah, that' what probably `react?`is for ..."
    sent: "2016-07-01T09:31:39.580Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5776380e9717171554a80b7a"
    text: {Yes, basically it works ... until you set some of reactive fields. At first sight, I was surprised (althought it might be an intention), that type? a/total is an integer! I expected, when probing an object, to see the formula. But - that would not work, if one thinks about it as an Excel sheet, wher you want to see a value and don't care about the formula behind. OTOH, I would like to have some way, apart from sources, to see the code block, as I can see it via F2 in Excel. What about some reflector? e.g. `reactor-of object`}
    sent: "2016-07-01T09:29:50.015Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57763740632b75030fc9185f"
    text: {That's an option, though in practive, I'm not sure if it's a good idea or not to block that, users could be willing to set a default value, and even change it later, before triggering any reaction.}
    sent: "2016-07-01T09:26:24.761Z"
    editedAt: "2016-07-01T09:26:32.655Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57763689265214c130bdfbad"
    text: {One observation - I tried to use a reactor example, and the second one, I used object! instead of reactor! ... from probing both, I could not tell the difference. The `total`field is an integer. In that sense, I tried `a/total: 100 b/total: 100`- both allowed that. Both probed the value. Then I used `a/x: 10`and its total was reset .... My feeling is, that reactive object field could return an error, when one tries to set it directly? It would help to see, it's a reactor?}
    sent: "2016-07-01T09:23:21.249Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "577635a78441a8124da7a06b"
    text: {It could, but 1) a reactor in our terminology means a reactive source, we would need another function then for checking for targets, 2) it's too close to `reactor!`, so user would be confused about why it doesn't check if an object is a `reactor!` or not. So it could maybe be used for that last feature instead.}
    sent: "2016-07-01T09:19:35.485Z"
    editedAt: "2016-07-01T09:20:50.607Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5776351ca0c12d110fe071e2"
    text: {Don't want to be picky on details, but will ask anyway - would not `reactor?`, even if longer, sound better? (non an englishman here, just some feeling)}
    sent: "2016-07-01T09:17:16.956Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "577634e19717171554a7e099"
    text: "Thanks ..."
    sent: "2016-07-01T09:16:17.805Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "577634cd1ac8bd1a4db11648"
    text: {@pekr `react?`can only check for reactive sources for now (it's in its docstring), not yet reactive targets. Though, it should be trivial to add support for that. I'm making some improvements right now on the reactive framework, so I'll include that too.}
    sent: "2016-07-01T09:15:57.705Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577634278c9263ba304bb3cf"
    text: "In above referring to the Blog article example"
    sent: "2016-07-01T09:13:11.302Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57763412632b75030fc8ef5b"
    text: {When probing an object, and testing e.g. a/total, it returns integer. It can't be seen it is a reactor at first sight. Could that be improved somehow? I e.g. tried `react? a 'total`, but it returns none}
    sent: "2016-07-01T09:12:50.166Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5776337f632b75030fc8e42a"
    text: {Though, you are raising an interesting question about the reflectivity of reactive objects. That's something we might be able to improve, so that you can get the reactive formulas back using BODY-OF accessor. This is anyway a new territory we are exploring, so feel free to share your findings and issues in red/red channel.}
    sent: "2016-07-01T09:10:23.573Z"
    editedAt: "2016-07-01T09:13:10.738Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5776332e632b75030fc8dec2"
    text: "Thanks, Doc. I'll try again."
    sent: "2016-07-01T09:09:02.685Z"
    v: 1
    author: "56fcd54d187bb6f0eadd243e"
) #(
    id: "577632f6265214c130bdc612"
    text: {@grahamf21 After defining the first object, just PROBE it, what you clone is what you see (just a simple object). `reactor!` is not a new datatype, it's just a template for creating objects, the reactive formulas are not stored into the object itself, so you need to re-apply them in the spec block in MAKE case. COPY cannot work on a reactive object, as it will just copy the "result" of the reactions.}
    sent: "2016-07-01T09:08:06.449Z"
    editedAt: "2016-07-01T09:08:29.967Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5776324fa0c12d110fe05209"
    text: {Hi Doc, yes I did  use 'is'. The original object works fine.}
    sent: "2016-07-01T09:05:19.445Z"
    v: 1
    author: "56fcd54d187bb6f0eadd243e"
) #(
    id: "577631858441a8124da760e5"
    text: {@grahamf21 Did you use `is` operator to set up the reactions?}
    sent: "2016-07-01T09:01:57.902Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577630fc8441a8124da7576b"
    text: {Hi, I tried cloning a reactor! object but the clone doesn't seem to be reactive. I've tried 'make' and 'copy' to clone.}
    sent: "2016-07-01T08:59:40.222Z"
    v: 1
    author: "56fcd54d187bb6f0eadd243e"
) #(
    id: "577554e097171715549d09d8"
    text: "@dockimbel Thanks for the explanation."
    sent: "2016-06-30T17:20:32.253Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "577546f5632b75030fbd74ef"
    text: {Goodbye! i cam back to my daily office work (in Delphi ... great support, thanks. :clap: }
    sent: "2016-06-30T16:21:09.130Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5775468c8441a8124d9bf05d"
    text: "Great! Have fun."
    sent: "2016-06-30T16:19:24.811Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577546781ac8bd1a4da5f298"
    text: {Yes, really enough. Many thanks also to yo, Gregg !}
    sent: "2016-06-30T16:19:04.582Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577545f697171715549c0d8b"
    text: "Is that enough to get you started?"
    sent: "2016-06-30T16:16:54.345Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577545e68441a8124d9bec0b"
    text: {You can also extract data from the input stream, rather than using the current index:^/```^/alpha: charset [#"a" - #"z" #"A" - #"Z"]^/digit: charset "012345789"^/^/task-a: func [ch][print ['alpha ch]]^/task-d: func [ch][print ['digit ch]]^/text: "a1b2cd34"^/parse text [some [copy ch alpha (task-a ch) | copy dg digit (task-d dg)]]^/```}
    sent: "2016-06-30T16:16:38.670Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "5775459e8c9263ba303ff594"
    text: {alpha a^/digit 1^/alpha b^/digit 2^/alpha c^/alpha d^/digit 3^/digit 4}
    sent: "2016-06-30T16:15:26.711Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5775459d8c9263ba303ff590"
    text: "Yes Greg, it give me:"
    sent: "2016-06-30T16:15:25.692Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577545018c9263ba303ff0f7"
    text: "Thanks for Florence :-)"
    sent: "2016-06-30T16:12:49.099Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577545001ac8bd1a4da5e365"
    text: {If you paste that into the gui console, you'll see it step through and print each char it identified.}
    sent: "2016-06-30T16:12:48.756Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577544dc97171715549c008b"
    text: {```^/alpha: charset [#"a" - #"z" #"A" - #"Z"]^/digit: charset "012345789"^/^/task-a: func [ch][print ['alpha ch]]^/task-d: func [ch][print ['digit ch]]^/text: "a1b2cd34"^/parse text [some [s: alpha (task-a s/1) | digit (task-d s/1)]]^/```}
    sent: "2016-06-30T16:12:12.898Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "577544dcf58c9dea732afd9c"
    text: {@DarioX1973_twitter Lucky you, such a beautiful city and delicious food!}
    sent: "2016-06-30T16:12:12.163Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577544cb8c9263ba303fe6ea"
    text: "oh...i wait ...if you are so kind, Gregg"
    sent: "2016-06-30T16:11:55.676Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577544bd8c9263ba303fe6c1"
    text: "Goodbye from Florence :-)"
    sent: "2016-06-30T16:11:41.231Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577544bc1ac8bd1a4da5d89d"
    text: {Split is another function to work with text (dividing it by defined separator). Split is not using PARSE}
    sent: "2016-06-30T16:11:40.885Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "577544b63da1a2ce671ca8f9"
    text: {You'll get it when you'll go through that doc. ;-)}
    sent: "2016-06-30T16:11:34.440Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577544b41ac8bd1a4da5d873"
    text: "I'll have a sample in a sec Dario"
    sent: "2016-06-30T16:11:32.399Z"
    v: 1
    author: "55659ddb15522ed4b3e1006f"
) #(
    id: "57754490a0c12d110fd53089"
    text: {I don't understand, bu i saved the "mention":-)}
    sent: "2016-06-30T16:10:56.391Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57754442186ccb534502d055"
    text: "Have fun! ;-)"
    sent: "2016-06-30T16:09:38.365Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577544323da1a2ce671ca8e2"
    text: {Additional mention: the [splitting](http://www.rebol.com/docs/core23/rebolcore-15.html#section-2) feature of Rebol Parse is implemented as a separate `split` function in Red, it's not supported directly by our Parse.}
    sent: "2016-06-30T16:09:22.657Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5775443297171715549bf29f"
    text: "Goodbye :-)"
    sent: "2016-06-30T16:09:22.543Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5775440e97171715549befa5"
    text: {Ok, thank you very much. I will try and i will inform you on my benckmarks (i have the same algoritm in pascal and python). :-)}
    sent: "2016-06-30T16:08:46.364Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57754384186ccb534502d031"
    text: {That parsing rule will iterate over all the string characters and trigger different tasks depending on the matched charset (you can extend them and add more of them).}
    sent: "2016-06-30T16:06:28.688Z"
    editedAt: "2016-06-30T16:06:43.444Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5775433df58c9dea732afd6b"
    text: {Here is a skeleton code you can start with:^/```lisp^/alpha: charset [#"a" - #"z" #"A" - #"Z"]^/digit: charset "012345789"^/parse text [some [s: alpha (taskA s/1) | digit (taskB s/1)]]^/```}
    sent: "2016-06-30T16:05:17.321Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57754327a0c12d110fd51261"
    text: {Thank you so much Nenad, I saved the page and I will study. :-) }
    sent: "2016-06-30T16:04:55.523Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5775425d632b75030fbd353a"
    text: {where pippo.txt is a utf8 text (italian, french, ecc)}
    sent: "2016-06-30T16:01:33.225Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5775425c186ccb534502cd54"
    text: {Ok, got it. The fastest and simplest way is to use the [Parse](http://www.rebol.com/docs/core23/rebolcore-15.html) dialect for that.}
    sent: "2016-06-30T16:01:32.036Z"
    editedAt: "2016-06-30T16:01:51.681Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
)#(
    id: "57754248a0c12d110fd4fc3a"
    text: "text: read %./pippo.txt"
    sent: "2016-06-30T16:01:12.946Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57754239a0c12d110fd4fc19"
    text: "a string, in memory"
    sent: "2016-06-30T16:00:57.586Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5775422e632b75030fbd31ed"
    text: {mmmmmh ... i explain better: i read an utf8 text in Red. Ok it works! I walk on char after char, and if the char is a letter or a numeric, or a symbol, i have to do different tasks. }
    sent: "2016-06-30T16:00:46.699Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "5775419b186ccb534502cd42"
    text: {So your data in memory is a string or an array of bytes (not the same thing in a Unicode-aware language)?}
    sent: "2016-06-30T15:58:19.807Z"
    editedAt: "2016-06-30T15:58:46.342Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577541928c9263ba303fbdf8"
    text: "i elaborate utf8 texts ..."
    sent: "2016-06-30T15:58:10.185Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577541728c9263ba303fbaf6"
    text: "no asian texts i mean"
    sent: "2016-06-30T15:57:38.700Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57754168632b75030fbd1ea8"
    text: {i have text in italian, french, spanish ...  no other type of texts ... in python i use utf8 ... in pascal , i use utf16 (2 byte for a char, i mean, as you know).}
    sent: "2016-06-30T15:57:28.550Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "577540f6f58c9dea732afcfb"
    text: "Is your alpha range limited to ASCII or Latin?"
    sent: "2016-06-30T15:55:34.225Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5775409c3da1a2ce671ca61a"
    text: {You need to create a bitset! value for alpha and another for numbers. Let me find you some docs pointers.}
    sent: "2016-06-30T15:54:04.308Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "577540808c9263ba303fa28c"
    text: {i tryed rebol many times ago, but today i see Red is becamed really mature and would like to learn it}
    sent: "2016-06-30T15:53:36.215Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57754018265214c130b22337"
    text: "sorry for very stutid question :-/"
    sent: "2016-06-30T15:51:52.412Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57753ffe632b75030fbcfc1b"
    text: "how"
    sent: "2016-06-30T15:51:26.860Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57753fe5632b75030fbcf6ad"
    text: "or i am a dummy :-/"
    sent: "2016-06-30T15:51:01.547Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57753fd9632b75030fbcf1e8"
    text: {ho do i check if a char of a utf8 string i have in memory is a letter or numeic (and not symbol, for example)? i did'nt find it in documentation ...}
    sent: "2016-06-30T15:50:49.645Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57753fa4265214c130b21948"
    text: {mycheck = t.isalpha() or t.isnumeric()   # where t is my char i am poiining now}
    sent: "2016-06-30T15:49:56.595Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57753f7f97171715549b9a17"
    text: {Ok. I thinks Red is amazing and perfect for what i need. I was trying to port a simple algoritm i had in python, to check the Red performance in elaborating text. Very simple algotrm, i only don't understand ho to do this }
    sent: "2016-06-30T15:49:19.823Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57753ee63da1a2ce671ca5ac"
    text: "Welcome! Yes it is. ;-)"
    sent: "2016-06-30T15:46:46.128Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57753eba1ac8bd1a4da57e04"
    text: "is this the channel for newbie?"
    sent: "2016-06-30T15:46:02.027Z"
    v: 1
    author: "57753e0bc2f0db084a20c917"
) #(
    id: "57753693186ccb534502cadf"
    text: {@Phryxe Yes, `comment` is a function, not a syntactic contruction like `;`, so it doesn't get removed. The need for a multiline comment syntax comes from time to time, though, we haven't reached consensus so far on what such syntax should be. Moreover, many code editors support multiline commenting using `;`, so the incentive is not strong to find a suitable solution.}
    sent: "2016-06-30T15:11:15.708Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5775320da0c12d110fd3ba93"
    text: {Is there a limitation to where you can use a `comment { }`? Doesn't seem to work inside a `view` block ...}
    sent: "2016-06-30T14:51:57.771Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "57749323632b75030fb3c032"
    text: {@Respectech Regarding the 25 ball stack limitation -> :point_up: [June 29, 2016 8:42 AM](https://gitter.im/red/red?at=57733c990898e10d2395642a)}
    sent: "2016-06-30T03:33:55.206Z"
    v: 1
    author: "5680c5f416b6c7089cc058a5"
) #(
    id: "57745c938441a8124d8f5641"
    text: {Congrats to the Red team! :clap:  I hope you all will be enjoying some much deserved rest :smile: }
    sent: "2016-06-29T23:41:07.631Z"
    v: 1
    author: "55b8991e0fc9f982beab5f28"
) #(
    id: "577458841ac8bd1a4d9975be"
    text: {I'm impressed by how much faster the worm.red demo is when it is compiled, as compared to interpreted. To be expected, I guess, but nice anyway!}
    sent: "2016-06-29T23:23:48.552Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "577455bea0c12d110fc813ba"
    text: {@dockimbel   Congrads on 0.6.1.  and thanks again for all the help in the Red/Welcome room. }
    sent: "2016-06-29T23:11:58.766Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5774535e632b75030fb0b347"
    text: {Is the 25 ball limit on the follow example a memory or stack limitation?}
    sent: "2016-06-29T23:01:50.590Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "577450e1bb1de91c54ad35bf"
    text: {It's going to be a new trick for my brain to start thinking in reactive programming. I'm very familiar with reactions in spreadsheets, so maybe that will help somewhat. :-)}
    sent: "2016-06-29T22:51:13.760Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "57744923cd7efd7714982393"
    text: {Congratz Nenad (t'as fait ta nuit blanche finalement ;-) )}
    sent: "2016-06-29T22:18:11.498Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57743eefcd7efd77149822de"
    text: "@Respectech Thanks Bo! ;-)"
    sent: "2016-06-29T21:34:39.740Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57743ed28441a8124d8dc2c2"
    text: {Let me be the first to say "congratulations" on the 0.6.1 release!}
    sent: "2016-06-29T21:34:10.084Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "5774214a8441a8124d8bf132"
    text: {I'm expecting that Red will become the primary language for our company infrastructure in the near future!}
    sent: "2016-06-29T19:28:10.772Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "5774210497171715548c067e"
    text: {I have two companies that use software written primarily in Rebol2 and Rebol3 with a bit of Red here and there, plus other languages.}
    sent: "2016-06-29T19:27:00.309Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "577420e597171715548c05dc"
    text: {@dockimbel I understand the frustrations of adding features to an existing codebase and the difficulties that can happen because of it. However, I have no experience with this on a project of the scale of Red. I just wanted to say "good job" and that I am eagerly awaiting the upcoming releases because I'm looking forward to switching most of my development to use Red.}
    sent: "2016-06-29T19:26:29.757Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "5773d49bf52768dc0cae76bc"
    text: {Thanks for the insights. Nice documentation, so Asciidoc is good at math formulas support it seems. Yes, libraries are the great advantage of Python's ecosystem. We'll see how much we can catch up with Python after 1.0. If Red is up to the expectations, maybe we can make a few miracles happen. ;-)}
    sent: "2016-06-29T14:00:59.462Z"
    editedAt: "2016-06-29T14:01:04.904Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5773d3401ac8bd1a4d915953"
    text: {But on the flip side its hard to argue against the amount of awesome libraries Python has :-)}
    sent: "2016-06-29T13:55:12.947Z"
    v: 1
    author: "56ccb27de610378809c31304"
) #(
    id: "5773d2f3bb1de91c54a5a267"
    text: {I am not entirely sure about your use case, I found the pandoc markdown with occasional raw HTML sprinkled here and there to be sufficient, but then again, I just use it to produce stand alone HTML:  [http://elementsofphysics.com/kinematics.html](http://elementsofphysics.com/kinematics.html) Yes, I am very much sold on the fullstack thing. I dislike C++ warts, but the problem with Python is that, despite its "prototyping speed", it actually imposes lots of cognitive load when doing scientific computing, because once you use too many of its niceties, it kills all the performance. So then you have to throw most of it away to work with the subset that is supported by numba or Cython. }
    sent: "2016-06-29T13:53:55.827Z"
    v: 1
    author: "56ccb27de610378809c31304"
) #(
    id: "5773d0e10898e10d2395a5fb"
    text: {@mindv0rtex Hi, thank you for your kind words! Markdown has many limitations with, e.g. tables or even just centering an image horizontally, so I guess I will not escape learning Asciidoc if I want better looking docs. C++ / Python, that's interesting, so I guess you're sold to the "fullstack" approach of Red? ;-) NumPy-like library is certainly something I would be glad to add to the Red basket someday, hopefully, someone would contribute it first. ;-)}
    sent: "2016-06-29T13:45:05.668Z"
    editedAt: "2016-06-29T13:47:36.094Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5773d044971717155486cf23"
    text: {@dockimbel pandoc can convert Markdown to  Asciidoc, FWIW. I'm sure you knew about it already :-) Awesome job with Red, btw. I am a regular corporate coder of scientific applications in C++ and Python, but Red is the only language that made me interested in learning something different! Good luck with the release and don't let the pressure get the best of you!}
    sent: "2016-06-29T13:42:28.583Z"
    v: 1
    author: "56ccb27de610378809c31304"
) #(
    id: "57739b6aa0c12d110fbcbd9b"
    text: "@dockimbel That is great, thanks! :+1: "
    sent: "2016-06-29T09:56:58.331Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "577397b7971717155483e442"
    text: {About the format, the documents are currently using Markdown, though we should switch to Asciidoc format at some point (I just need to find time to learn it). Though, Markdown should be straightforward to convert as IIRC, most of MD syntax is supported by Asciidoc.}
    sent: "2016-06-29T09:41:11.691Z"
    editedAt: "2016-06-29T09:41:25.469Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5773973d8c9263ba30279ae0"
    text: {@mydoghasworms Sure you can, the source code for our Red gitbook is there: https://github.com/red/docs}
    sent: "2016-06-29T09:39:09.154Z"
    editedAt: "2016-06-29T09:39:28.124Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5773883abb1de91c54a164fa"
    text: {@dockimbel Not to worry. I just wanted to ask about documentation. When I get time again, I would like to add a getting started guide to the docs. But GitBook is not like GitHub, is it? You cannot just clone a project and submit pull requests, right?}
    sent: "2016-06-29T08:35:06.837Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "57736eb9fd8a28fd3d37f1da"
    text: "@mydoghasworms Sorry for that."
    sent: "2016-06-29T06:46:17.350Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57736da9a0c12d110fba1f95"
    text: {Hello, I am quickly dropping by because I have not been here for a long time. Work takes up all my time and things are very pressurised.  But it looks like I came at a bad time, sorry :worried:  Will check back later.}
    sent: "2016-06-29T06:41:45.507Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "57736d551ac8bd1a4d8bd800"
    text: {@dockimbel  - I really can't work like that, sorry. The only measure for our intentions is, if the intention was good, or not. And once again - noone here tried to put Red into bad shape .... Enough of that ... from me ...}
    sent: "2016-06-29T06:40:21.647Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57736d26bb1de91c54a00260"
    text: {Really ... I can feel that ppl start to fear to put some questions, to not be accussed of wasting your time. Noone here's really proposing Ren-C or R3 or anything like that. That's why I just said some relax/chatter group might be welcomed, where jokes around the release dates are allowed, as imo, it was just that - a friendly joking ...}
    sent: "2016-06-29T06:39:34.325Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57736ce5bff9f48f6a75baa8"
    text: {@pekr If you think that's a "constructive" feedback, you should check the definition of that word again. Arnold is clearly bashing the Red team or the Red project regularly using passive-aggressive posts, moreover doing it in the channels which we use for newcomers, like here or the ML. As he seems to be a great supporter of Ren-C project, I can see the logic of his behavior.}
    sent: "2016-06-29T06:38:29.508Z"
    editedAt: "2016-06-29T06:40:28.352Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57736ca8bb1de91c549ffe46"
    text: {@dockimbel pardon me, but you really start to be a too picky. I know that this channel is linked to Red lang website. But - I think that most of ppl are capable enough to understand information in context. And the context here is - pre-release waiting, which is mostly a relaxing for us, not a tension. I can notice such rather picky reaction over multiple channels, being it Github comments, Google groups and please consider it as a constructive feedback - NOONE is here to hurt Red project, to put it into bad light or anything like that ...}
    sent: "2016-06-29T06:37:28.190Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57736c238441a8124d8126ce"
    text: {@dockimbel Is that showing your true face on the welcome channel then?}
    sent: "2016-06-29T06:35:15.233Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "57736b3abb1de91c549fec46"
    text: {@Respectech Bit too south for me. Have a good trip.}
    sent: "2016-06-29T06:31:22.515Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "57736b27fd8a28fd3d37f13a"
    text: {>> It was a "couple of days" that became a few weeks, so "a few hours" translates as "end of the week" ;-)^/^/This is how you consider "helping" Red project? And you post that in red/welcome channel? You seem to like the Ren-C project a lot, maybe you should consider joining it for good!}
    sent: "2016-06-29T06:31:03.256Z"
    editedAt: "2016-06-29T06:34:56.649Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
)#(
    id: "57736b03bb1de91c549feba3"
    text: {However, this is welcome channel, I miss a bit general - friends channel, it could be called Red Coffee :-)}
    sent: "2016-06-29T06:30:27.179Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57736ae0bb1de91c549feb61"
    text: {We are still in the middle of the week. Iron Maiden has one song, called - The longest day. Each release date is a longest day :-)}
    sent: "2016-06-29T06:29:52.593Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57736aa99717171554818b79"
    text: {> How much longer before 0.6.1 is announced? ;-p^/^/It was a "couple of days" that became a few weeks, so "a few hours" translates as "end of the week" ;-)}
    sent: "2016-06-29T06:28:57.444Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "57736a8f1ac8bd1a4d8bb6b8"
    text: {Simply put - GUI console is too good to miss - it is a base for all my Red related experiments! }
    sent: "2016-06-29T06:28:31.456Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57736a57bb1de91c549fe53e"
    text: {> Well, I don't like red.exe, dunno why, I am looking forward to when red is self hosted :-)^/^/Same here, GUI-console to test scripts directly and a Rebol/View to compile scripts suffices.}
    sent: "2016-06-29T06:27:35.462Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5772ddf6bb1de91c5498cba4"
    text: {Exactly. And remember - Prague and Brno always get an early access, but - that's only for big boys :-)}
    sent: "2016-06-28T20:28:38.487Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5772ddcb265214c130912ee6"
    text: {I'm going to be in Zurich, Vienna, Munich and L'viv starting in a week, so I'll be able to enjoy those early releases as well, right?}
    sent: "2016-06-28T20:27:55.303Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "5772dcf0a0c12d110fb27d58"
    text: {depends upon your timezone - we europeans are already enjoying the release. Most probably slow connection to US ... just kidding :-)}
    sent: "2016-06-28T20:24:16.278Z"
    editedAt: "2016-06-28T20:24:31.842Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5772dcbaa0c12d110fb27816"
    text: "How much longer before 0.6.1 is announced? ;-p"
    sent: "2016-06-28T20:23:22.531Z"
    v: 1
    author: "5772dca5c2f0db084a206c42"
) #(
    id: "5770e4e78c9263ba3000981e"
    text: {Well, I don't like red.exe, dunno why, I am looking forward to when red is self hosted :-)^/}
    sent: "2016-06-27T08:33:43.814Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5770d8e5632b75030f7c57a4"
    text: {@pekr What @daddie888_twitter needs is just `red --cli hello.red` as given by @RnBrgn.}
    sent: "2016-06-27T07:42:29.820Z"
    editedAt: "2016-06-27T07:44:25.511Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5770c1061ac8bd1a4d64d217"
    text: {Now how to get the console.exe compiled:^/^/1) download rebol/view interpreter and place it into the Red distro root^/2) run rebol^/3) run: do %red.r (with the security requester, select Allow all")^/4) run:  rc %environment/console/console.red^/5) for gui console, run:  rc "-t Windows %environment/console/console.red"^/6) your console.exe and gui-console.exe is going to be created in the Red repo root}
    sent: "2016-06-27T06:00:38.807Z"
    editedAt: "2016-06-27T06:00:59.624Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5770c029265214c13071f0c9"
    text: {@daddie888_twitter Here's my output of what you try to achieve:^/```^/c:\!rebol\!Red\red>console hello.red^/Hello, world!^/Χαῖρε, κόσμε!^/你好, 世界^/Dobrý den světe^/```}
    sent: "2016-06-27T05:56:57.085Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5770bea4bb1de91c54796344"
    text: {Enter/double click in Total Commander. Then I reverted back to cmd exe, typing console.exe (pressing enter) does not launch it here. gui-console.exe works ok ... Win10 here - should we move to Red channel?}
    sent: "2016-06-27T05:50:28.360Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5770be5b86609e810f51bee2"
    text: {@pekr It works fine here. I don't get what you mean by "pressing enter".}
    sent: "2016-06-27T05:49:15.777Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5770bb94a0c12d110f923594"
    text: {@dockimbel should console.exe compiled from sources work? It compiles here, but pressing enter, nothing happens (even when run from cmd.exe)}
    sent: "2016-06-27T05:37:24.390Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5770bb588c9263ba30fe4566"
    text: {@daddie888_twitter "is there no way to execute the script itself from the command line like with ruby and python ?" .... I somehow don't get it. If you execute those script from the command line, you call their interpreter anyway, which surely is not of small size either? Even today you can run `gui-console.exe hello.red`as a parameter. Not sure with console.exe, as it does not work for me ...}
    sent: "2016-06-27T05:36:24.243Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5770bac653cf814d72742d9d"
    text: {@dockimbel ^/> @daddie888_twitter An helloworld in Red/System will just wait a few kilobytes ...^/^/I meant "weight", sorry for the typo.}
    sent: "2016-06-27T05:33:58.866Z"
    editedAt: "2016-06-27T05:34:02.092Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5770ba3597171715545a5f65"
    text: {That is why the GUI-console.red is such a small script and still can handle to run all those scripts you tell it to execute.}
    sent: "2016-06-27T05:31:33.364Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5770951bfd5f24f519be5815"
    text: {@daddie888_twitter The Red runtime is a necessity in order to support all the language semantics. Remember that Red is before all, a rich data format with about 50 datatypes that you can load or create at runtime at will. If final exe footprint is a big concern, you can reduce it drastically using [UPX](http://upx.sourceforge.net/) for example. Also, another approach for very small executables is to use only the [Red/System DSL](http://static.red-lang.org/red-system-specs-light.html), which is for system programming. An helloworld in Red/System will just wait a few kilobytes once compiled (but you'll give up then all the main Red language niceties).}
    sent: "2016-06-27T02:53:15.090Z"
    editedAt: "2016-06-27T02:58:14.907Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57703e938441a8124d548469"
    text: {@daddie888_twitter    from terminal window or dos prompt type:^/red --cli hello.red}
    sent: "2016-06-26T20:44:03.372Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "57703a02632b75030f74e0bb"
    text: {   good link below explaining different ways to run Red.^/https://github.com/red/red/blob/master/README.md^/}
    sent: "2016-06-26T20:24:34.327Z"
    editedAt: "2016-06-26T20:31:13.892Z"
    v: 4
    author: "56fac97685d51f252abb72b4"
) #(
    id: "577032651ac8bd1a4d5eaa78"
    text: {hah, found it: red hello.red, but the console is started and the output displayed in there, not in the CMD console itself like you would suspect for a non-graphical script ..}
    sent: "2016-06-26T19:52:05.636Z"
    v: 1
    author: "57702ce5c2f0db084a200802"
) #(
    id: "577030588441a8124d53d860"
    text: {renamed red-060.exe, what I initially download and that compiled the console to red.exed and now I can compile, but I'm a bit disappointed: 418Kb for hello.red->hello.exe, is there no way to execute the script itself from the command line like with ruby and python ?}
    sent: "2016-06-26T19:43:20.859Z"
    v: 1
    author: "57702ce5c2f0db084a200802"
) #(
    id: "57702f32632b75030f746251"
    text: {Say you put that in program and have red-master in there too. So start Rebol/View push the Console button and type ^/```Red^/cd red-master^/do %red.r^/rc "-t Windows -o %output.exe %inputscript.red"^/```}
    sent: "2016-06-26T19:38:26.875Z"
    editedAt: "2016-06-26T19:39:23.238Z"
    v: 3
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "57702ee8bb1de91c5472ce82"
    text: {(And you compile using the Rebol/View program from http://www.rebol.com/downloads.html )}
    sent: "2016-06-26T19:37:12.377Z"
    editedAt: "2016-06-26T19:37:16.466Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "57702eb0265214c1306b1795"
    text: {Thnx, but how ? I only have gui-console-2016-3-26-9662.exe}
    sent: "2016-06-26T19:36:16.421Z"
    v: 1
    author: "57702ce5c2f0db084a200802"
) #(
    id: "57702e01a0c12d110f8bbf37"
    text: "You need to compile your script first for that."
    sent: "2016-06-26T19:33:21.830Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "57702dd9632b75030f744ff4"
    text: {Can run it from the console with do %hello.red, but how to execute it from the CMD prompt ?}
    sent: "2016-06-26T19:32:41.904Z"
    v: 1
    author: "57702ce5c2f0db084a200802"
) #(
    id: "57702d59bb1de91c5472b530"
    text: {Hello, justy installed and tried Red, nice! One problem, I have only the guid-console-...exe, no red.exe. If I try to execute a .red script with this exe the console starts and shows *** Error: cannot access argument file}
    sent: "2016-06-26T19:30:33.085Z"
    v: 1
    author: "57702ce5c2f0db084a200802"
) #(
    id: "576ca22389c0b3b310dea327"
    text: {@RnBrgn You are appending a block to a string, so `append` will process all the block elements one by one, appending them to the string one after the other. If a value in the block is not a string, `append` will convert it using `form`.}
    sent: "2016-06-24T02:59:47.622Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "576c306cc7594b5f0dd29f68"
    text: {Thanks.    `form` caused an issue for me because Excel  had a hard time with spaces before and after the commas I was inserting to create the csv file so I used  `append ""`  instead.^/I'm not sure how `append ""   [block]`  works . Why appending an empty string to a block removes spaces and converts the block to a string?   ^/```^/foreach [name address phone] users [^/x: reduce [mold name","mold address","mold phone"^^/"]^/y: append copy "" x^/    write/append %users2.csv y ^/^-]^/```^/}
    sent: "2016-06-23T18:54:36.748Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "576bfb9e89c0b3b310de9d82"
    text: {@RnBrgn Another important point with `form` is that it will insert an extra space between values. So, useful feature to remember. ;-)}
    sent: "2016-06-23T15:09:18.915Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "576bf8c40ede04dc49049047"
    text: {that worked fine. Form converts the block contents to a string and reduce evaluates contents of the block.   I wouldn't have thought to try that with the limited experience I have with all the functions/words  Red provides. Thanks.}
    sent: "2016-06-23T14:57:08.391Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "576be42d3b4cb6687034b2c1"
    text: {@RnBrgn One possible way to achieve it:^/```lisp^/foreach [name address phone] users [^/^-write/append %users2.csv form reduce [^/^-^-mold name mold address mold phone "^^/"^/^-]^/]^/```}
    sent: "2016-06-23T13:29:17.658Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "576bd5e0c7061d590d537605"
    text: {Is there a shorter way to write each element of a block to a file? Write/append does not take a block as an argument.^/```^/foreach [name address phone] users [^/ write/append %users.csv mold name ^/ write/append %users.csv mold address^/ write/append %users.csv mold phone^/ write/append %users.csv "^^/"^/]^/```^/}
    sent: "2016-06-23T12:28:16.000Z"
    editedAt: "2016-06-23T12:28:27.867Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5762d1496111a28c047b873b"
    text: "You're welcome. ;-)"
    sent: "2016-06-16T16:18:17.511Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5762d0b952352c840282e50c"
    text: {@dockimbel Thanks for taking the time to look at it.}
    sent: "2016-06-16T16:15:53.805Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5762bf8709a91a8d73d6e847"
    text: {@Phryxe Your initialization code needs to go into a separate `do` section in your VID code:^/```lisp^/Red [title: "Toggle" needs: 'view]^/a1: "Alternative 1"^/a2: "Alternative 2"^/view [^/    title: "Toggle"^/    below^/    t: text 80x20 "Two alternatives"^/    f1: field 80x20^/    f2: field 80x20^/    button 80x20 "Toggle" [^/        either f1/text = a1 [f1/text: a2] [f1/text: a1]^/        either f1/text = a1 [f2/text: a2] [f2/text: a1]^/    ]^/    do [^/    ^-f1/text: get first random [a1 a2]^/    ^-f2/text: get first random [a2 a1]^/    ]^/]^/```}
    sent: "2016-06-16T15:02:31.160Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5762be48ea84f717479b9db4"
    text: {The error is legitimate, but not very helpful, I've opened a ticket to improve that. You are passing a block to the fields, but fields are expecting strings not blocks, so the content of your `data` blocks is never evaluated.}
    sent: "2016-06-16T14:57:12.357Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5762bb2adfb1d8aa45a42208"
    text: {```^/Red [title: "Toggle" needs: 'view]^/a1: "Alternative 1"^/a2: "Alternative 2"^/view [^/^-title: "Toggle"^/    below^/    t: text 80x20 "Two alternatives"^/    f1: field 80x20 data [random [a1 a2]]^/^-f2: field 80x20 data [random [a2 a1]]^/^-button 80x20 "Toggle" [^/        either f1/text = a1 [f1/text: a2] [f1/text: a1]^/^-^-either f1/text = a1 [f2/text: a2] [f2/text: a1]^/^-]^/]^/```}
    sent: "2016-06-16T14:43:54.143Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5762bacc09a91a8d73d6e819"
    text: {@Phryxe Without your code, how can we reproduce it?}
    sent: "2016-06-16T14:42:20.935Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5762a6b0da1c26b04536c3b3"
    text: {I wonder what changed in Red for me to get this in latest build while I didn't get it in 0.6.0 ... I hesitate to show my amateur code ;^^p^/```^/*** Script error: modify does not allow none! for its target argument^/*** Where: modify^/```^/}
    sent: "2016-06-16T13:16:32.140Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "575a5e25814a56807141ac3c"
    text: {The main one, for developers, is - https://gitter.im/red/red}
    sent: "2016-06-10T06:28:53.099Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "575a5e02a1be01c01a7892cc"
    text: {Welcome here and enjoy Red :-) You can ask questions here, but there are also some other channels/rooms available}
    sent: "2016-06-10T06:28:18.841Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "575a5d0c064b9e7266f12a31"
    text: "i am new \"
    sent: "2016-06-10T06:24:12.749Z"
    v: 1
    author: "575a5cfcc2f0db084a1d2016"
) #(
    id: "575a5d041cf76dd64535c7da"
    text: "hi"
    sent: "2016-06-10T06:24:04.865Z"
    v: 1
    author: "575a5cfcc2f0db084a1d2016"
) #(
    id: "5758052a662b042b7e598510"
    text: {Oldtimer! Me! I'm flattered :) I thought that I might missed some simple point hence asked here.}
    sent: "2016-06-08T11:44:42.531Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5757e76a75a601a158b0dc01"
    text: "Booh! Oldtimers! ;-P"
    sent: "2016-06-08T09:37:46.445Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5757e675662b042b7e597be7"
    text: ":-)"
    sent: "2016-06-08T09:33:41.837Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5757e66607e77197794fffcd"
    text: "Welcome to newcomers! :sparkles: "
    sent: "2016-06-08T09:33:26.775Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5757e5ddc2a6e42f7e997082"
    text: {@SteeveGit I know, no problem. I should have answered endo's question in red/red. ;-) }
    sent: "2016-06-08T09:31:09.695Z"
    editedAt: "2016-06-08T09:32:14.934Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5757e5b2c6414c76528c1103"
    text: "I was following the flow :baby_chick: "
    sent: "2016-06-08T09:30:26.514Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5757e58392fc7c915f57d78f"
    text: {@endo64 @SteeveGit Could we keep those discussions in red/red room, this room is really for welcoming newcomers, not for old'timers chats. ;-)}
    sent: "2016-06-08T09:29:39.101Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5757e53ac2a6e42f7e99704b"
    text: {@SteeveGit Yes, that's what we plan to do once we have support for `do/next` (will come this week).}
    sent: "2016-06-08T09:28:26.867Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5757e289c6414c76528c10ed"
    text: "`view [text form 1 + 1]`"
    sent: "2016-06-08T09:16:57.308Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5757e2669b49138f12800ef7"
    text: {I think it's recurrent within VID dialect, (IIRC,  path! didn't work at some point). We could use the same trick than Rebol (a do/next on whatever follows and is not a reserved VID  word or a style). It would also pemit regular code as data without the need to define words first. As in:}
    sent: "2016-06-08T09:16:22.153Z"
    editedAt: "2016-06-08T09:22:40.743Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "5757d2dbb5122bc217788b47"
    text: {Someone can open a ticket for it, and submit a PR if the fix is simple enough.}
    sent: "2016-06-08T08:10:03.305Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5757d23a92fc7c915f57d07c"
    text: {@endo64 No need, I can search the git history. According to VID source code, it should be supported, so it might well be a regression, or it just was broken since the beginning as I don't remember ever testing that.}
    sent: "2016-06-08T08:07:22.716Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5757cfda75a601a158b0d3df"
    text: {But I can checkout an older version and test if you like?}
    sent: "2016-06-08T07:57:14.589Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5757cf2875a601a158b0d3ae"
    text: {I cannot remember if it was working before, probably I'm confused with R2.}
    sent: "2016-06-08T07:54:16.873Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5757cb5917856dc5179b51f4"
    text: {@endo64 Was that working before (I can't remember)? If so, do you know roughly when that changed?}
    sent: "2016-06-08T07:38:01.109Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5757caf517856dc5179b51da"
    text: {@endo64 if you compose, it works: ^/```^/view compose/deep [button "test" [(x)]]^/```}
    sent: "2016-06-08T07:36:21.505Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5757c9f9970521a45839f570"
    text: {Is it a regression or block!s can't be used as below example?^/```^/red>> x: [print "ok"]^/red>> view [button "test" x]^/*** Script error: copy does not allow word! for its value argument^/```}
    sent: "2016-06-08T07:32:09.099Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5757b80a45cf128e5f1d7449"
    text: {@SannInnovations What you are looking for is http://try.rebol.nl}
    sent: "2016-06-08T06:15:38.823Z"
    editedAt: "2016-06-08T06:15:47.303Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5757994f45cf128e5f1d6f4d"
    text: {And `source`to inspect mezzanine (Red level) function source code in console ...}
    sent: "2016-06-08T04:04:31.839Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5757988b9b49138f12800ddf"
    text: {@SannInnovations Welcome! You can start exploring the existing documentations from [here](http://www.red-lang.org/p/documentation.html), maybe [this one](http://www.red-by-example.org/) is what you are looking for? Using the built-in `help` command from the console is also a good way to get a quick look at a word definition or function usage instructions. You can also ask @Arie-vw in [red/red](https://gitter.im/red/red/) channel if you want to contribute to his work on providing an exhaustive dictionary.}
    sent: "2016-06-08T04:01:15.460Z"
    editedAt: "2016-06-08T04:04:45.811Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5757555a662b042b7e595c51"
    text: {Hello all, am new to RED/REBOL and must say I am loving this programming platform like my life depended on it :smile: I have a question on how to get all RED's syntax in one place? It seems the information is scattered all over the internet  (with the exception of Github), but it will make more sense if there is a one go to source to quickly type and look up a RED syntax and how to use it in a block of code. I come from the LiveCode (smallTalk) background and have been spoiled for having every platform syntax in one "Dictionary" (accessed via the IDE of course), so I will volunteer my time to create a companion app/software, acting more like a dictionary, as a companion of RED syntaxes. I will need the raw syntax files to begin with and will appreciate pointed in the right direction. Thanks}
    sent: "2016-06-07T23:14:34.788Z"
    v: 1
    author: "57575426c43b8c6019786af3"
) #(
    id: "57528511cfb72da835efa1a1"
    text: ""
    sent: "2016-06-04T07:36:49.228Z"
    editedAt: "2016-06-04T07:37:23.219Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "57524e7da30177644b997d0f"
    text: {@Mat2 Hi! Red is currently bootstrapped using Rebol language for the toolchain implementation (the runtime library is entirely written in Red) which should hold until 1.0 release. After that, we'll start working on Red 2.0 which is the self-hosted Red (basically re-writting the toolchain in Red). No ETA for 2.0 for now, as reaching 1.0 is our current focus and it's already a big work. Though, more help into getting 1.0 done would speed it up. ;-)}
    sent: "2016-06-04T03:43:57.340Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5751fb20824488852c4ebee0"
    text: {hello, I'd like to ask what's the current status toward self building Red and which time estimation therefor is foreseeable ?}
    sent: "2016-06-03T21:48:16.538Z"
    v: 1
    author: "56896d4f16b6c7089cc0fae2"
) #(
    id: "5751284df44fde236e530f1d"
    text: "Ok, I'll try this way and see how it works. Thx."
    sent: "2016-06-03T06:48:45.454Z"
    v: 1
    author: "57511af3c43b8c6019767e9c"
) #(
    id: "575125f3a78d5a256e3a87c0"
    text: {You can use Rebol manuals to some extent. Red is, syntax wise, mostly compatible with Rebol. Of course consult help system in console to check, if the feature is available and if it shares the same semantics - there might be slight changes or featuress missing, as we are still not at 1.0}
    sent: "2016-06-03T06:38:43.272Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "575124eaec10ddbb09dd5e46"
    text: "thx"
    sent: "2016-06-03T06:34:18.573Z"
    v: 1
    author: "57511af3c43b8c6019767e9c"
) #(
    id: "575124e710f0fed86f4ae54f"
    text: {Hi everybody! I've playing around with red these days and I'd like to ask you, is rebol the place to start? it's exactly te same syntax? are there any other resources?}
    sent: "2016-06-03T06:34:15.731Z"
    v: 1
    author: "57511af3c43b8c6019767e9c"
) #(
    id: "5750ffa6a66904962ebbd964"
    text: {@RonG69 I have pushed a fix for that, please [download](http://www.red-lang.org/p/download.html) the latest build and give it a new try.}
    sent: "2016-06-03T03:55:18.986Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5750fd10a78d5a256e3a8173"
    text: "I can wait for .70. No problem. Thank you."
    sent: "2016-06-03T03:44:16.473Z"
    v: 1
    author: "5750f747c43b8c6019767a30"
) #(
    id: "5750fcdef44fde236e530828"
    text: {Red []^/#include %environment/console/input.red^/name: ask "What is your name? "}
    sent: "2016-06-03T03:43:26.436Z"
    v: 1
    author: "5750f747c43b8c6019767a30"
) #(
    id: "5750fcbf2482004e29f6633c"
    text: "Let me have a look at it..."
    sent: "2016-06-03T03:42:55.107Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5750fc83454cb2be095195ec"
    text: {Compilation error: word limit not defined in system/console/limit}
    sent: "2016-06-03T03:41:55.320Z"
    v: 1
    author: "5750f747c43b8c6019767a30"
) #(
    id: "5750fb41a66904962ebbd95b"
    text: {@RonG69 Welcome! `ask` is not part of the standard runtime library yet (it will be after 0.7.0), so you have to include the `%input.red` file, like this: ^/```lisp^/Red []^/^/#include %environment/console/input.red^/...your code here...^/```}
    sent: "2016-06-03T03:36:33.849Z"
    editedAt: "2016-06-03T03:37:14.370Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5750f80af44fde236e530771"
    text: {New to Red/Rebol. Tried to compile "ask" got "Compilation error: undefined word ask".  Any ideas?}
    sent: "2016-06-03T03:22:50.178Z"
    v: 1
    author: "5750f747c43b8c6019767a30"
) #(
    id: "574c1a486bbc2d1d4def65b9"
    text: {@dockimbel OK. that implies much less modifications.}
    sent: "2016-05-30T10:47:36.761Z"
    v: 1
    author: "574b318ac43b8c6019759842"
) #(
    id: "574c195c6bbc2d1d4def6583"
    text: {@vdsfr Use `(load append b-var #":")` instead of `(to-set-word b-var)` as `to` is only partially implemented for now.}
    sent: "2016-05-30T10:43:40.127Z"
    editedAt: "2016-05-30T10:43:50.027Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "574c176b10f0fed86f496ee8"
    text: {@dockimbel  I have some code from R2/R3 where I use constructs like:    rebol[]^/^-btn-grid: copy [across backdrop forest ]^/^-repeat row 4 [^/^-^-repeat col 7 [^/^-^-   b-var: rejoin ["R" row "C" col]  ^/            append btn-grid compose[( to-set-word  b-var)   btn 40x30 (b-var)]   ^/      ] ^/           append btn-grid 'return^/    ]^/view layout btn-grid ;  I  just missed the to-set-word.  Some modifications and walking the faces  should do. Thanks! }
    sent: "2016-05-30T10:35:23.689Z"
    editedAt: "2016-05-30T10:42:35.141Z"
    v: 3
    author: "574b318ac43b8c6019759842"
) #(
    id: "574bd0a7a0fc3091611b1f78"
    text: {@vdsfr Hi! Do you have a short code example of what you want to achieve? From VID, it is easy to do. If you need to access a face after the layout has been constructed by a VID code, you can navigate the tree of faces (starting from a known face, like the window for example), using `pane` field for accessing children faces, and `parent` to access the parent face.}
    sent: "2016-05-30T05:33:27.197Z"
    editedAt: "2016-05-30T05:35:47.159Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "574b452b10f0fed86f4947fa"
    text: {Hi, How to assign a name to a face? I could not find an equivalent of "to-set-word" thanks.}
    sent: "2016-05-29T19:38:19.614Z"
    v: 1
    author: "574b318ac43b8c6019759842"
) #(
    id: "5748b09c454cb2be094fa7f9"
    text: "everything is working now"
    sent: "2016-05-27T20:39:56.200Z"
    v: 1
    author: "572b191ec43b8c6019714316"
) #(
    id: "5748b0606bbc2d1d4deee14c"
    text: "thank you @endo64 @dockimbel @Zamlox @iArnold "
    sent: "2016-05-27T20:38:56.562Z"
    v: 1
    author: "572b191ec43b8c6019714316"
) #(
    id: "5748af2c10f0fed86f48e6e7"
    text: {http://www.rebol.com/article/0545.html Carl "promised" to fix this and some other things. But like most of us life takes the better part of our efforts. In Carl's case one can argue he has already done enough for all of us :fishing_pole_and_fish: }
    sent: "2016-05-27T20:33:48.245Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5748972af44fde236e510d50"
    text: {@alcavaz for Ubuntu 14.04 you can try following commands with root permissions:^/```^/dpkg --add-architecture i386^/apt-get update^/^/apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386^/apt-get install -y libx11-6:i386^/apt-get install -y libxext6:i386^/apt-get install -y libxt6:i386^/apt-get install -y libxaw7:i386^/apt-get install -y libfreetype6:i386^/^/add-apt-repository "deb http://archive.canonical.com/ $(lsb_release -sc) partner"^/apt-get update^/apt-get install -y xfonts-100dpi^/apt-get install -y xfonts-75dpi^/```^/then reboot your system.}
    sent: "2016-05-27T18:51:22.195Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5748729e454cb2be094f93af"
    text: {Have a look here as well: http://rebol2.blogspot.com.tr/2012/09/linux-packages.html}
    sent: "2016-05-27T16:15:26.906Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "574871a14a49504d6099e88d"
    text: {@alcavaz Rebol/Core runs fine on Linux, Rebol/View requires some extra libs.}
    sent: "2016-05-27T16:11:13.606Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57487187a78d5a256e387b8d"
    text: {@alcavaz You need to install xfonts then you might need to reboot.}
    sent: "2016-05-27T16:10:47.065Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "57486cda10f0fed86f48d10b"
    text: {Hi everybody, I'd like to ask if it's possible to run Rebol on ubuntu. It's installed but I always get ** User Error: Bad face in screen pane!^/** Near: size-text self^/}
    sent: "2016-05-27T15:50:50.909Z"
    v: 1
    author: "572b191ec43b8c6019714316"
) #(
    id: "57471eeda0fc3091611b0aed"
    text: {@SoleSoul Same networking stuff as in 0.6.0, with just some bugfixes.}
    sent: "2016-05-26T16:06:05.134Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "574717b0f44fde236e509ed2"
    text: "Thank you."
    sent: "2016-05-26T15:35:12.734Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "57471769da3f93da6f208bd7"
    text: "You can do basic file and networking read/writes"
    sent: "2016-05-26T15:34:01.699Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57471758454cb2be094f33cd"
    text: {Too early. There's just some basic IO, which is temporary. Full IO implementation will come with 0.7.0 version}
    sent: "2016-05-26T15:33:44.579Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57471489ec10ddbb09daf638"
    text: "*too"
    sent: "2016-05-26T15:21:45.892Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
)#(
    id: "5747146a454cb2be094f327e"
    text: {Hi, is it time already to start playing with networking (is there anything in the nightly yet) or is it still to early?}
    sent: "2016-05-26T15:21:14.326Z"
    v: 1
    author: "55ffec600fc9f982beb1538c"
) #(
    id: "5746d146a78d5a256e37ff08"
    text: "ok, these are good news."
    sent: "2016-05-26T10:34:46.321Z"
    v: 1
    author: "572b191ec43b8c6019714316"
) #(
    id: "5746d102da3f93da6f20716f"
    text: {And once Red ready Doc will rewrite Cheyenne in Red so we will be able to continue using Cheyenne (probably with relatively small changes).}
    sent: "2016-05-26T10:33:38.342Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5746d101454cb2be094f1ad9"
    text: "It's good to know, thank you. "
    sent: "2016-05-26T10:33:37.057Z"
    v: 1
    author: "572b191ec43b8c6019714316"
) #(
    id: "5746d089a78d5a256e37febd"
    text: {Cheyenne is not in active development but it is stable for production use. I'm using it for several years on production.^/}
    sent: "2016-05-26T10:31:37.472Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "5746cf73ec10ddbb09dadd2e"
    text: {well,  it seems all of them aren't in active development. }
    sent: "2016-05-26T10:26:59.668Z"
    v: 1
    author: "572b191ec43b8c6019714316"
) #(
    id: "5746cdf6da3f93da6f207070"
    text: {Ok, thank you so much. Is this a good place for this kind of questions? I mean, I'm a total beginner to Red/Rebol and sometimes it's hard to find good palces to learn and to share opinions.}
    sent: "2016-05-26T10:20:38.586Z"
    v: 1
    author: "572b191ec43b8c6019714316"
) #(
    id: "5746c96ba78d5a256e37fc63"
    text: {Chris Ross Gill has some goodies available too - http://ross-gill.com/page/REBOL}
    sent: "2016-05-26T10:01:15.224Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5746c93880352f204df24a09"
    text: "Rebolek, also available here, has one called Lest"
    sent: "2016-05-26T10:00:24.584Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5746c91da78d5a256e37fc4d"
    text: {Dockimbel (author of Red) is author of Cheyenne app/web server for e.g.}
    sent: "2016-05-26T09:59:57.986Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5746c907da3f93da6f206ec0"
    text: {Hi. Well, there were some, not sure about their state of development though.}
    sent: "2016-05-26T09:59:35.081Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5746c68d6bbc2d1d4dee51bf"
    text: {Hi everybody! I'd like to ask something not directly related to Red, but I think you could help me find an answer. Are there any Rebol/Red web frameworks ready to use?}
    sent: "2016-05-26T09:49:01.784Z"
    v: 1
    author: "572b191ec43b8c6019714316"
) #(
    id: "574664c8a0fc3091611b05df"
    text: {@RnBrgn No purpose in that case, I think that source code of that CRUD example is a bit messed up after been adapted from Rebol to Red. @nickantonaccio should have a look at it. Usually, you use `copy` to create a copy of series (block, string,...) you want to preserve from modifications.}
    sent: "2016-05-26T02:51:51.996Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5745f1296bbc2d1d4dee1d15"
    text: {what purpose does copy names have in the below code? This is  an example from the Red,  getting started docs, building a CRUD . The function clears the names block,^/populates the block again using foreach , appending  from the contacts block and then it has the copy names line. ^/```^/Red [needs: 'view]^/extract-names: func [] [^/    clear names^/    foreach [name address phone] contacts [append names name]^/    copy names^/```^/}
    sent: "2016-05-25T18:38:33.078Z"
    editedAt: "2016-05-25T18:38:48.399Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5743098d08a18f700b82d698"
    text: {Please @sergey6661313 can you use google translate before posting? We are forgiving for your mistakes you make in English. :-)}
    sent: "2016-05-23T13:45:49.410Z"
    editedAt: "2016-05-23T13:45:59.101Z"
    v: 2
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "57430611f240e50046a1811d"
    text: {Спасибо! Простите за то, что пишу на русском языке.^/Получается пример не работает без строки ^/"R: G: B: box: value: none". ^/}
    sent: "2016-05-23T13:30:57.082Z"
    v: 1
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5742f40dd3f431720bb2de36"
    text: {@sergey6661313 After using Google Translate to understand your post, this is my anwser to the point you're raising: the Red compiler is a little bit stricter than the interpreter, so, in order to compile and run the color sliders code properly, you need to add a line with declarations of words used in the VID dialect, here is [a version](https://gist.github.com/dockimbel/05f6f820fbc9c7fde47075cdcacde9bd) which compiles and runs fine. Hope I answered your question accurately.}
    sent: "2016-05-23T12:14:05.446Z"
    editedAt: "2016-05-23T12:15:10.072Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5742ed30d3f431720bb2dbe8"
    text: {@sergey6661313 如果你想要用俄语写，我会用中国回复。;-) Please use English to communicate, these are  international chat rooms.}
    sent: "2016-05-23T11:44:48.841Z"
    editedAt: "2016-05-23T11:47:05.121Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5742eb9ae675315635f9181d"
    text: {На вашем сайте в записи от March 25, 2016 Второй пример под заголовком "Reactive GUI programming", там где написано: "Change the color of a box and a text using 3 sliders: " ^/в gif изображении рядом со слайдерами присутствуют числа. Но при копировании / вставке исходного кода скомпилированная программа получается без чисел. Добавить числа самостоятельно у меня не получилось. Пожалуйста измените  исходный код в указанном примере.}
    sent: "2016-05-23T11:38:02.175Z"
    editedAt: "2016-05-23T11:43:07.434Z"
    v: 4
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "5742eb21d3f431720bb2db3c"
    text: ""
    sent: "2016-05-23T11:36:01.153Z"
    editedAt: "2016-05-23T11:38:08.167Z"
    v: 2
    author: "5742ea88c43b8c60197470a4"
) #(
    id: "573cf45eeea93e5742d335df"
    text: {I use EditPlus (Windows only, commercial) with Rebol syntax file.}
    sent: "2016-05-18T23:01:50.274Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "573b6d23831fd2d97d9f58d6"
    text: {I use [Crimson Editor](http://www.crimsoneditor.com/).}
    sent: "2016-05-17T19:12:35.234Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "573ad3ae0cb634927f7f8af3"
    text: {@nodrygo Wonderful, I am already using Sublime Text 3 and have just installed the package. Looks good. Thanks.}
    sent: "2016-05-17T08:17:50.661Z"
    editedAt: "2016-05-17T08:18:20.836Z"
    v: 2
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "573ace5eae26c1967f9f22b2"
    text: {@mydoghasworms  [SublimeText3](https://www.sublimetext.com/3) with (old) [Red package](https://github.com/Oldes/Sublime-Red)}
    sent: "2016-05-17T07:55:10.166Z"
    editedAt: "2016-05-17T07:56:15.128Z"
    v: 2
    author: "56f66af985d51f252abaec66"
) #(
    id: "573ac2deae26c1967f9f1fdb"
    text: {This is probably a question that comes up from time to time, and one I have no doubt asked myself: What does everyone here use to edit Red code? Do you have syntax highlighting?}
    sent: "2016-05-17T07:06:06.763Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "573a5181c61823687d3c72b1"
    text: "@VEyelets_twitter   ^/ print append http:// img"
    sent: "2016-05-16T23:02:25.928Z"
    editedAt: "2016-05-16T23:04:06.799Z"
    v: 3
    author: "56fac97685d51f252abb72b4"
) #(
    id: "573a2aa3eea93e5742d269a3"
    text: {Try `prin "http://" print url` this will not insert a space, and the first `prin` will avoid an extra newline. If you want the concatenation as a new value (to be used e.g. in a `read`) then use `url: append http:// img` }
    sent: "2016-05-16T20:16:35.708Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "573a2853c61823687d3c665c"
    text: {in Rebol, I would use `rejoin`, but that's not awailable in Red yet}
    sent: "2016-05-16T20:06:43.804Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "573a2839ae26c1967f9eff0c"
    text: {I thought that `form`would do it, but it does not.}
    sent: "2016-05-16T20:06:17.874Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "573a2798ae26c1967f9efede"
    text: "print is a pig"
    sent: "2016-05-16T20:03:36.121Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "573a1f871794136a7d092d7e"
    text: {^/Simple concat question: ^/I have an image location and need to concat http in the front, but when I try^/^/img: "xyz.com/blah.png" ^/url: ["http://" img]^/print url^/^/returns: "http:// xyz.com/blah.png"^/^/there is a space between them.  Join doesn't seem to be working.  How do I get rid of that space?^/}
    sent: "2016-05-16T19:29:11.742Z"
    v: 1
    author: "573a1c61c43b8c6019733fef"
) #(
    id: "573a1d69831fd2d97d9ef783"
    text: ""
    sent: "2016-05-16T19:20:08.999Z"
    editedAt: "2016-05-16T19:20:24.104Z"
    v: 2
    author: "573a1c61c43b8c6019733fef"
) #(
    id: "573602eceea93e5742d1a85b"
    text: {This is for one-off printing. The result will not be available afterwards.}
    sent: "2016-05-13T16:38:04.559Z"
    v: 1
    author: "556b0d0615522ed4b3e132d7"
) #(
    id: "5734a014c61823687d3b3bfd"
    text: {Is there a down side to using brackets to combine strings in place of  append or rejoin?^/```^/a: "test"^/b: "string"^/x: [prin a print b]^/do x^/```^/}
    sent: "2016-05-12T15:24:04.745Z"
    editedAt: "2016-05-12T15:24:52.066Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "573358f07df8adaf347d5c81"
    text: {@dockimbel Thanks for taking the time to clarify. I am looking forward a self-hosted Rebol-dialect with multi-platform support in >1MB ;-). I remember having showed interest to help with a javascript compiler backend back-then but I am still not in a position to be able to dedicate enough time for that. I still have to finish my PhD and find ways of obtaining funding for research that won't tie all my time so I can have many side projects ;-).^/^/I would love to use Red as a full-stack language in combination with Sandstorm.io for deployment and security of web applications. It would be awesome to have the full environment available client-side in the browser and abstract away much of the complexity of the client-side web stack. Anyway, one step at a time and patience will get us there. Keep up the good work. I will continue to come back periodically. :-)}
    sent: "2016-05-11T16:08:16.246Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
) #(
    id: "573347cba410e6902ab2a1d8"
    text: {@dockimbel ok that's not important. it's only a way to use it (between wine and vbox  each having theirs own problems) waiting futur Linux/gtk   ;-) }
    sent: "2016-05-11T14:55:07.774Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "573346302b8be74d22905ad9"
    text: {@nodrygo We have some reports from time to time about weird behaviors of Red GUI code on virtualized Windows under VirtualBox.}
    sent: "2016-05-11T14:48:16.346Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "573345abc5ff2e7e29fdd1db"
    text: {*Red still needs Rebol for bootstrapping?* It does, the whole Red toolchain during the bootstrap phase is written in Rebol2 (~20k LOC), while the runtime library is written in a mix of Red and Red/System (~70k LOC). Once 1.0 is released, we start working on the self-hosted version, which should make Red 2.0 once finished.}
    sent: "2016-05-11T14:46:03.901Z"
    editedAt: "2016-05-11T14:46:42.086Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57334543f6f2bcff2b9c42b3"
    text: {*I just installed Red on OSX and got curious about what is happening the first time the executable is launched*^/1. Red launcher pre-compiles the crush library (< 20KB), which is used by the toolchain to compress some of the compiled data structures (blocks, strings, ...) before linking them to the compiled binary.^/2. Red then pre-compiles in a hidden folder ($HOME/.red/), the console with the runtime.^/3. Once the console is generated, it will start it and the Red launcher will quit. On next Red invocation, the console will be launched at once.}
    sent: "2016-05-11T14:44:19.953Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5733443bf6f2bcff2b9c42a5"
    text: {Red can run on Linux/ARM, though we haven't yet tested the toolchain on such platform, as the Rebol2 port to ARM was very recent, and the SDK is still lacking (so the toolchain can run only from sources on that plafform). Though, you can still cross-compile if that's a more convenient option.}
    sent: "2016-05-11T14:39:55.082Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "573343b3c5ff2e7e29fdd1c4"
    text: {@elavoie Welcome! Glad to see you were patient enough to follow Red since the conference in 2013. Yes, we've made a lot of progress since then, getting closer to a completed version (should be one of the 0.7.x).}
    sent: "2016-05-11T14:37:39.497Z"
    editedAt: "2016-05-11T14:37:49.680Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57333794b51b0e294851400a"
    text: "@nodrygo ;)"
    sent: "2016-05-11T13:45:56.534Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57333784ed393f3409b1d89b"
    text: "@Zamlox thanks for your help "
    sent: "2016-05-11T13:45:40.232Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5733375bb51b0e2948513fe7"
    text: {@nodrygo I suspect also something is not ok with environment}
    sent: "2016-05-11T13:44:59.199Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57333733f9a53a60793dd66b"
    text: {@Zamlox very curious the same EXE work on my Linux with ***wine*** but not on my virtualbox windowsXP. probably specific to environnement ^/}
    sent: "2016-05-11T13:44:19.204Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "57333601a351d83109530922"
    text: {@nodrygo try to debug it by displaying messages using ```probe``` or ```print``` through code. }
    sent: "2016-05-11T13:39:13.403Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57333014f9a53a60793dd344"
    text: {@Zamlox I use the today release .. the exe run but the button start don't launch  the moving ball for me (red 11/05 and windowsXP )}
    sent: "2016-05-11T13:13:56.700Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "57332e87ed393f3409b1d453"
    text: {@nodrygo it worked for me. I have used latest red binary. I was able to start executable and play it. But I have Windows 7 OS}
    sent: "2016-05-11T13:07:19.532Z"
    editedAt: "2016-05-11T13:09:30.536Z"
    v: 3
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57332e1af16c08510662c9e3"
    text: {@Zamlox I had think and tryed to put `playground: none` and yes it compile but doesn't work .. probably the reference used in code not the good one }
    sent: "2016-05-11T13:05:30.012Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "57332c77f16c08510662c942"
    text: "Red still needs Rebol for bootstrapping?"
    sent: "2016-05-11T12:58:31.546Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
)#(
    id: "57332c60f36daf63798ea6d1"
    text: "yes, that must be the console-<date> thing"
    sent: "2016-05-11T12:58:08.537Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
) #(
    id: "57332c0312fa465406ebf6ec"
    text: {well, there should be also a console executable. Next time you run it, it should just skip the compilation phase ....}
    sent: "2016-05-11T12:56:35.373Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57332be7f16c08510662c904"
    text: "just found it"
    sent: "2016-05-11T12:56:07.272Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
) #(
    id: "57332bd6f9a53a60793dd15c"
    text: "the crush library is in ~/.red"
    sent: "2016-05-11T12:55:50.801Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
) #(
    id: "57332bc5f9a53a60793dd156"
    text: {btw - there is experimental Linux/OS-X GUI branch .... https://github.com/qtxie/red/commits/MacOSX-GUI}
    sent: "2016-05-11T12:55:33.407Z"
    editedAt: "2016-05-11T12:55:48.633Z"
    v: 2
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57332bb6b51b0e2948513a66"
    text: "ARM should be supported - no gui though ...."
    sent: "2016-05-11T12:55:18.956Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57332ba2ed393f3409b1d303"
    text: {Also I may want to use Red on the Novena laptop (https://www.crowdsupply.com/sutajio-kosagi/novena), will it work on Arm?}
    sent: "2016-05-11T12:54:58.968Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
) #(
    id: "57332b96ed393f3409b1d2fb"
    text: {It compiles crush.dll and creates a console somewhere else ... under Windows, it is in some Program Data \ Red folder, not sure about OS-X ...}
    sent: "2016-05-11T12:54:46.942Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57332b10b51b0e2948513a2b"
    text: "I did not see any auxiliary file."
    sent: "2016-05-11T12:52:32.749Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
) #(
    id: "57332b033170252648f609f8"
    text: {Is it compiling itself and rewriting the binary executable?}
    sent: "2016-05-11T12:52:19.131Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
) #(
    id: "57332af1a351d831095303f6"
    text: {I just installed Red on OSX and got curious about what is happening the first time the executable is launched}
    sent: "2016-05-11T12:52:01.070Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
) #(
    id: "57332adbf36daf63798ea623"
    text: {Hi @dockimbel! We met briefly in Montreal at the last Rebol conference and I kept following distantly Red ever since. It has come a long way since then :-). It is awesome to witness the evolution of such an ambition project. }
    sent: "2016-05-11T12:51:39.979Z"
    v: 1
    author: "54da1a1e15522ed4b3dbd811"
) #(
    id: "57332864a351d8310953030a"
    text: {@nodrygo as a workaround declare word ```playground``` in global context before using it, like:^/```^/playground: none^/mainwin: layout [^/...^/```}
    sent: "2016-05-11T12:41:08.711Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "57331aeca351d8310952fe78"
    text: {my big hack for a basic ide is now working with still some bugs but I have another problem with compiler^/ this simple demo^/ [BallBounce]( https://gist.github.com/nodrygo/7400c266d177ef923a8d1b8ae92ac5b1 )^/run with interpreted but compiler fail on  `show playground` in the loop ^/seem it do see the word! playground ^/how to do to avid that please ? ^/^/```^/Z:\devygo\red\DemosRed\basicIde>red -c -t Windows ball.red^/-=== Red Compiler 0.6.0 ===-^/Compiling Z:\devygo\red\DemosRed\basicIde\ball.red ...^/*** Compilation Error: undefined word playground^/*** in file: %/Z/devygo/red/DemosRed/basicIde/ball.red^/*** near: [playground]^/``` }
    sent: "2016-05-11T11:43:40.617Z"
    editedAt: "2016-05-11T11:46:43.393Z"
    v: 5
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732fac812fa465406ebe6ef"
    text: "@dockimbel yes that make sens."
    sent: "2016-05-11T09:26:32.469Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732f44ef9a53a60793dbf54"
    text: {`view/no-wait` means it does not run the event loop, so he will not block. It is useful when an event loop is already running (to avoid launch new ones).}
    sent: "2016-05-11T08:58:54.757Z"
    editedAt: "2016-05-11T08:59:27.461Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5732f418f9a53a60793dbf40"
    text: {@dockimbel  found .. it is the no-wait `view/no-wait/flags mainwin [resize]`^/without work fine ^/I have to go now }
    sent: "2016-05-11T08:58:00.620Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732e23f12fa465406ebdeef"
    text: "@dockimbel yes that a good idea will do that "
    sent: "2016-05-11T07:41:51.209Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732e222f9a53a60793dba0c"
    text: {You can also use put some `probe` calls through your starting code to see where it quits.}
    sent: "2016-05-11T07:41:22.425Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5732e1d9f9a53a60793db9fb"
    text: {@dockimbel  yes I have try to do that but a lot of change ... with go back on my modif to find the culprit (unfortunatly no commit to see change and the code is not yet git)}
    sent: "2016-05-11T07:40:09.684Z"
    editedAt: "2016-05-11T07:41:22.019Z"
    v: 3
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732e1933170252648f5f2eb"
    text: {@nodrygo Examine the last changes you made in the source code. Roll them back up to a working version (if you're not using a versioning tool, I strongly suggest you to use one, will save you lot of headaches and time).}
    sent: "2016-05-11T07:38:59.651Z"
    editedAt: "2016-05-11T07:40:32.975Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5732e15a3170252648f5f2e0"
    text: "@dockimbel  same behavior :-( "
    sent: "2016-05-11T07:38:02.081Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732e0f2f16c08510662b179"
    text: "@nodrygo Can you compile it with just `-c -d`?"
    sent: "2016-05-11T07:36:18.835Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5732e0d8ed393f3409b1bab7"
    text: {[![consolecompile.png](https://files.gitter.im/red/red/welcome/FMHh/thumb/consolecompile.png)](https://files.gitter.im/red/red/welcome/FMHh/consolecompile.png)}
    sent: "2016-05-11T07:35:52.064Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732e0be3170252648f5f2ba"
    text: "I alway run it from dos shell .. no output"
    sent: "2016-05-11T07:35:26.020Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732e088ed393f3409b1ba9b"
    text: {@nodrygo Nice progress in your journey through learning Red! ;-)^/1. Use `write/binary` to save the text on disk.^/2. Run it from a DOS shell to see the error output.}
    sent: "2016-05-11T07:34:32.470Z"
    editedAt: "2016-05-11T07:35:23.911Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5732e074f36daf63798e8e43"
    text: {Find myself for question 1 .. seem I need to use `write` instead of `save` }
    sent: "2016-05-11T07:34:12.791Z"
    editedAt: "2016-05-11T07:34:34.963Z"
    v: 2
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732de1212fa465406ebddf1"
    text: {2 more stupid questions^/playing with a naive [IdeEditor](https://gist.github.com/nodrygo/2e95f5d01748e40bc85ad492f1ba8965) ^/1: I need to save content of area/text but formatted as is and not with string encapsulation {} ? *(of course I had tested lot of things before request)*^/^/2: When I compile this code with -c -t windowsXP -d the code compile fine but the .exe start and stop immediately without any clues. How to test that ?  ^/*(a old previous  test was working fine but don't know witch change kill it)* ^/any help will be welcome ^/(work interpreted) }
    sent: "2016-05-11T07:24:02.065Z"
    editedAt: "2016-05-11T07:28:38.724Z"
    v: 5
    author: "56f66af985d51f252abaec66"
) #(
    id: "5732ddf1f16c08510662b0bc"
    text: {[![editide.png](https://files.gitter.im/red/red/welcome/SVrZ/thumb/editide.png)](https://files.gitter.im/red/red/welcome/SVrZ/editide.png)}
    sent: "2016-05-11T07:23:29.966Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "57323755f9a53a60793d9240"
    text: {Thanks Petr. I try it. Also i have uploaded my new GUI example.^/                                            Now with widgets INSIDE the  main.}
    sent: "2016-05-10T19:32:37.273Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5732260e3170252648f5c4bb"
    text: {@Mennohexo - see my answer at the related Google groups thread ...}
    sent: "2016-05-10T18:18:54.800Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5731fdd2f9a53a60793d79d1"
    text: {Hi there ,^/may i ask if someone have an idea to^/make the  "another window" an area  of my posted code^/above appear ^/always in maximum screen resolution that is possible^/on that PC where the .exe is running ?^/I think this is also interesting for other programmers here .^/a base is self resizing here on a smaller PC^/but not the area field.^/What comes after the base in category of GUI flow ?^/Or do i have to make another base instead of an area ?^/--^/I have not given the widgets any size as described in the^/manual VIEW. They make a self arrange.^/-^/One question EVERY Red programmer is thinking of  in starting GUI is ^/why can i not maximize a window ?^/just maximize to full screen.}
    sent: "2016-05-10T15:27:14.301Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5731dc63f36daf63798e3d86"
    text: {Each panel, has a `pane`object field. It is basically a block/container, containing other stuf ... you can use path notation to get access to the inner elements, so you can repeat the process down the way ....}
    sent: "2016-05-10T13:04:35.339Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5731ac00b51b0e294850c017"
    text: {Also complicating things is that I have panels inside the panels. I still haven't figured out a way to get the fields of the inner panel.}
    sent: "2016-05-10T09:38:08.124Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5731abd0f9a53a60793d5661"
    text: {@pekr  That is part of what I want. The second part is to process the values of each field, then set new values in the field with another loop.}
    sent: "2016-05-10T09:37:20.050Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5730cdc33170252648f5564d"
    text: {Red [needs: 'view]^/^/view [^/    ^/^/base  red  "Hello you programmers" font-size 12 bold underline  ^/      image %test.png  return^/      ^/      below  ^/      button "Button" ^/      button "Button2"      ^/      button "Button3"^/      button "wechsel" [unview] ^/            ^/      across  space 50x50   return^/      field "hello"  center ^/      field "hello2" center^/      field "hello3" center^/      field "hello4" center^/^/]^/^/^/ view [  title "another window" ^/           ^/                a: area  font-size 12 bold  "This window wants to be as great as the screen size is"                                              ^/                                                ^/                                                     ^/                below^/                b: field  red  font-size 18 bold^/                ^/                below^/                field  "Test"   font-size 20 bold                                                               ^/                                                           ^/                button "Save" font-size 10 bold          ^/                   ^/                button "Print" font-size 10 bold ^/                                                    ^/                   ^/                button "Exit" font-size 10 bold [quit]  ^/     ^/     ^/                ]^/^/^/         }
    sent: "2016-05-09T17:49:55.827Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5730cd78b51b0e294850855b"
    text: {Hello. I am back again.^/i send you a example code in RED.^/The following case -^/1. i have made a    base  container with widgets.^/2. additional another view if you klick the button^/     WEITER^/The bakcground is simple.^/I want to know to program GUI that automatic resize^/themselfs on the computer screen where it is^/started. ( always portable apps)^/^/i have checked my compiled exe on a smaller PC^/^/YES , the base container with the first main view  ^/is resizing on the smaller screen. ^/But not the other window WEITER.^/^/So my question.  You can run the code.^/^/How can i make the other window to get maximum size on a computer^/depending on the screen datas that Red has from that computer when^/a .exe is started on them.^/automatic  such like the base.^/Notice :^/^/the other view window area is always small. Also on a great screen !^/^/It is not changing itself always.^/^/So i have not programmed it correct such like the VIEW GRAPHIC REFERENCE^/it describes.^/I have not fully understand it.^/It must be possible to make that window of screen size maximum anyhow.^/^/Thanks for your attention.^/^/The code comes with the next posting.^/^/Please be patient for my answer because i am on a hurry here.^/Could take a longer hours. Dont know.^/}
    sent: "2016-05-09T17:48:40.679Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5730cadea351d83109524bbd"
    text: {I wonder if we would be able to get to the words referring to those fields? Here `f1`and `f2`}
    sent: "2016-05-09T17:37:34.097Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5730ca6b3170252648f554fe"
    text: {Not sure if you wanted some Getter functionality, collecting field values, but here's the idea: ^/```^/view [^/    below^/    text "Getter"^/    p: panel [^/       f1: field ^/       f2: field^/    ]^/    button "Get fields" [^/       foreach item p/pane [^/           if item/type == 'field [print item/text]^/       ]^/    ]^/]^/```}
    sent: "2016-05-09T17:35:39.032Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5730c8ac12fa465406eb3dc8"
    text: {Ok, I think I figured it out - convert the 'string to 'word then 'get it?}
    sent: "2016-05-09T17:28:12.777Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5730c243f16c085106620ed0"
    text: {How would I do something like this? I have several fields in a panel. I want to update the fields one by one and put a calculated number in the field. Since I'm doing the same calculations many times, I have a function that returns the value I want, but I don't want to put the same function name as an action in every field. Is there an easy way to get all the names of fields in a panel? Or maybe create a string with the name of the field and treat that name as the field? }
    sent: "2016-05-09T17:00:51.502Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "572e3b21f16c08510661997c"
    text: ""
    sent: "2016-05-07T18:59:45.297Z"
    editedAt: "2016-05-07T18:59:47.992Z"
    v: 2
    author: "54837cf6db8155e6700dc843"
) #(
    id: "572c6b5e72798bd77bea915d"
    text: "@nodrygo Yes, that was it, thanks!"
    sent: "2016-05-06T10:01:02.761Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "572c6b100149d6bb04b94427"
    text: {@ietv_twitter  if I not mistake you are not allowed to put block of code in VID }
    sent: "2016-05-06T09:59:44.093Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "572c6a736871c4a646c24d08"
    text: {Why doesn't this work? ```view [^/^-sh: [ p/visible?: not p/visible? ]^/    button "show/hide" [ do sh ]^/    p: panel [text "hello"]^/]```}
    sent: "2016-05-06T09:57:07.822Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "572c3ce7df1a01ff18fcfd1c"
    text: {@dockimbel oh great, thanks a lot, that's help me to better understand how it work  ^/for the collision this is secondary in my needs, first of all I want to learn better REACT  ^/and in me try for simpleCad I have some start test to know if a point is in a circle or in box side ^/I will add some intersect in future usable here }
    sent: "2016-05-06T06:42:47.332Z"
    editedAt: "2016-05-06T06:46:15.758Z"
    v: 3
    author: "56f66af985d51f252abaec66"
) #(
    id: "572c3ce6474247a946a6b79f"
    text: {Though, the collision detection between the round ball and the rectangles is not accurate anyway, you would need a custom collision detection algorithm for pixel-accurate detection.}
    sent: "2016-05-06T06:42:46.074Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572c3ca472798bd77bea8601"
    text: {You can also try with this alternative reaction: ^/```lisp^/react [^/   [ball/offset]^/   if all [face/visible? overlap? ball face][^/^-   print ["touche" face] ^/^-   face/visible?: false ^/^-]^/]^/```}
    sent: "2016-05-06T06:41:40.232Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572c3c2512cceadb7b1b25d0"
    text: {@nodrygo For your code above to work properly, replace `copy makebrick` by `copy/deep makebrick`. By failing to copy the `react` argument block, you end up having only one reaction bound to the last `base`face only.}
    sent: "2016-05-06T06:39:33.796Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572c39d2474247a946a6b70d"
    text: {@dockimbel  yes you are wright  I know that but it is just for fun and mainly to learn things not to create a real demo (and I am not interested by games développement  in general ;-)  )}
    sent: "2016-05-06T06:29:38.651Z"
    editedAt: "2016-05-06T06:31:04.575Z"
    v: 3
    author: "56f66af985d51f252abaec66"
)#(
    id: "572c396512cceadb7b1b2534"
    text: {@nodrygo Just a general remark about games, you really want to have timers in order to support proper animations. They'll come in one of the 0.6.x releases.}
    sent: "2016-05-06T06:27:49.778Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572c39210149d6bb04b938ce"
    text: {no this was old stupid test .. the react I am speaking about is on *makebrick*^/but only work for the last brick }
    sent: "2016-05-06T06:26:41.506Z"
    editedAt: "2016-05-06T06:27:16.307Z"
    v: 2
    author: "56f66af985d51f252abaec66"
) #(
    id: "572c38c9df1a01ff18fcfc59"
    text: {`react [print "react"]]` doen't react anything. (sorry I'm on mobile app, can't write easily)}
    sent: "2016-05-06T06:25:13.337Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "572c3864d6d0f60219f11010"
    text: {[print "}
    sent: "2016-05-06T06:23:32.342Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "572c385b0149d6bb04b938b1"
    text: {I didn't chechk the whole script, but there is no set-word! and path! in your react block.}
    sent: "2016-05-06T06:23:23.489Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "572c35f5d6d0f60219f10fa1"
    text: {hello. I am trying to test the most simple demo for bricks games but fail. Probably my understanding for both Red, VID and REACT is  bad .Will be grateful if  somebody could point my mistakes [here](https://gist.github.com/nodrygo/a5aced657681946ca4d0b504dee2e845) }
    sent: "2016-05-06T06:13:09.838Z"
    editedAt: "2016-05-06T06:14:24.897Z"
    v: 2
    author: "56f66af985d51f252abaec66"
) #(
    id: "572b3d34c2a86dcf79195aa9"
    text: {You can define any widget as initially invisible in VID using `hidden` keyword.}
    sent: "2016-05-05T12:31:48.695Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572b3ceb682b8fdf3c8c9b66"
    text: {@ietv_twitter Sure, this is how:^/```lisp^/view [^/    button "show/hide" [p/visible?: not p/visible?]^/    p: panel [text "hello"]^/]^/```}
    sent: "2016-05-05T12:30:35.903Z"
    editedAt: "2016-05-05T12:31:02.268Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572b2425d6d0f60219f0c668"
    text: {The idea is similar to a single page app in javascript.}
    sent: "2016-05-05T10:44:53.068Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "572b2418df1a01ff18fcb322"
    text: {Is it possible to hide/show a container? What I'd like to do is have 2 panels. Hide the first panel and show the second panel when a checkmark is checked, then save the data from the fields in the second panel, hide the second panel, show the first panel when you click a button on the second panel.}
    sent: "2016-05-05T10:44:40.368Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5729ea1e474247a946a61c8a"
    text: {@Oldes  thanks for your advice, they certainly dffer, good to know!}
    sent: "2016-05-04T12:25:02.538Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "5729e9f66871c4a646c1a70e"
    text: {so if you need to convert user file name input, you should use @Zamlox 's function}
    sent: "2016-05-04T12:24:22.106Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5729e9b40149d6bb04b89a6f"
    text: {@keesse also note this difference:^/^/```^/red>> to file! "c:/a/b"^/== %c:/a/b^/red>> to-red-file "c:/a/b"^/== %/c/a/b^/```}
    sent: "2016-05-04T12:23:16.438Z"
    editedAt: "2016-05-04T12:23:29.230Z"
    v: 2
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5729e94dd6d0f60219f06fcd"
    text: {@keesse the types after argument name in the func creation block is not making conversion, but checks if the type you are passing in is compatible! It works as expected.}
    sent: "2016-05-04T12:21:33.047Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5729e91c72798bd77be9e552"
    text: "@Oldes   @Zamlox  thank you both!"
    sent: "2016-05-04T12:20:44.871Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "5729e907474247a946a61c32"
    text: "@Zamlox  ```to-red-file``` works as well"
    sent: "2016-05-04T12:20:23.538Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "5729e8dc944fc7ba04ccf0aa"
    text: {@Oldes  ```to file!``` works fine, your last suggestion  ```func [textfile [file!]``` not}
    sent: "2016-05-04T12:19:40.437Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "5729e4dcd6d0f60219f06e7f"
    text: {```^/process_textfile: func [textfile [file!] "file to process"] [^/    print textfile^/    tfile: read/lines textfile^/    foreach line tfile [^/        print line^/    ]^/]^/^/process_textfile %usage.txt^/```}
    sent: "2016-05-04T12:02:36.381Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5729e4d0944fc7ba04ccef4e"
    text: {@ietv_twitter you can use ```to-red-file``` for your purpose:^/```^/ tfile: read/lines to-red-file textfile^/```^/then make the call:^/```^/red>> process_textfile "textfile.txt"^/```}
    sent: "2016-05-04T12:02:24.129Z"
    editedAt: "2016-05-04T12:04:27.440Z"
    v: 2
    author: "56f909e585d51f252abb2f03"
) #(
    id: "5729e42e12cceadb7b1a8158"
    text: {@keesse or don't use ```string!``` type where you expect ```file!```.... so: ```process_textfile %textfile.txt``` and ```tfile: read/lines textfile```}
    sent: "2016-05-04T11:59:42.631Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5729e2b772798bd77be9e364"
    text: {@keesse  use ```to file! textfile``` instead of ```%:textfile```}
    sent: "2016-05-04T11:53:27.532Z"
    v: 1
    author: "556aec4015522ed4b3e131da"
) #(
    id: "5729d80d12cceadb7b1a7e4e"
    text: {Also in the first example, because some of the code is attached to the button, it acts as an implicit `do`?}
    sent: "2016-05-04T11:07:57.544Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5729d684944fc7ba04ccebc7"
    text: {So in the first example above, is there documentation on `do-events` or `no-wait`? I couldn't find it.}
    sent: "2016-05-04T11:01:24.405Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5729d61212cceadb7b1a7db3"
    text: {Ah, I see. I misunderstood the ```do``` documentation.}
    sent: "2016-05-04T10:59:30.735Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5729d598df1a01ff18fc57d3"
    text: {@ietv_twitter The VID DSL does not support regular code directly, but only VID grammar. See the VID document on the wiki for accepted commands with their syntax. In your above case, you could use the `do` command for running that code:^/```lisp^/view [ size 500x200 b: base do [b/offset: b/offset + 175x50 ]]^/```^/}
    sent: "2016-05-04T10:57:28.829Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5729d4da6871c4a646c1a18b"
    text: {Why doesn't this work? ```view [^/    size 500x200^/    b: base ^/    b/offset: b/offset + 175x50  ^/]```}
    sent: "2016-05-04T10:54:18.967Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5729d4946871c4a646c1a173"
    text: {How to access a file by variable name?^/```^/red>> process_textfile: func [textfile] [^/[        print textfile^/[        tfile: read/lines %:textfile^/[        foreach line tfile [^/[            print line^/[        ]^/[    ]^/== func [textfile][print textfile ^/    tfile: read/lines %"" :textfil^/red>> ^/red>> process_textfile "textfile.txt"^/textfile.txt^/*** Access error: cannot open: %""^/*** Where: read^/```}
    sent: "2016-05-04T10:53:08.606Z"
    editedAt: "2016-05-04T10:53:31.637Z"
    v: 2
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "5729a6ad944fc7ba04ccded6"
    text: {@dockimbel thanks for explanations.  In fact I wondered if I should rewrite my CAD demo using faces   and the answer seem no}
    sent: "2016-05-04T07:37:17.511Z"
    editedAt: "2016-05-04T07:38:29.010Z"
    v: 3
    author: "56f66af985d51f252abaec66"
) #(
    id: "5729a6720149d6bb04b8890f"
    text: {@nodrygo You can use as many faces as you want, but they comsume a lot of resources compared to Draw primitives. Also, adding/removing faces from a face tree is much more time-consuming than the similar operation in a Draw block.}
    sent: "2016-05-04T07:36:18.063Z"
    editedAt: "2016-05-04T07:41:46.167Z"
    v: 4
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5729a66ad6d0f60219f05e5d"
    text: "@pekr thanks for that information"
    sent: "2016-05-04T07:36:10.261Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5729a608944fc7ba04ccdeba"
    text: "We need Rebolek to port the demo to Red :-)"
    sent: "2016-05-04T07:34:32.991Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5729a59472798bd77be9d395"
    text: {In the R2 era, lots of faces meant a slow down, as the face object was quite big. There is a 1000cows.r demo somewhere. R3 was IIRC a magnitude faster, as it used gob! on the low level, which was much more streamlined. Maybe it was also related to change, as R3 removed old R2 renderer and used AGG for rendering. While it is not HW accelerated, it was still much faster than original R2 one.}
    sent: "2016-05-04T07:32:36.286Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5729a0ea6871c4a646c1942a"
    text: {@pekr yes I know that but the question is is it possible with lot of faces or not applicable  ? }
    sent: "2016-05-04T07:12:42.518Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "57299de8474247a946a6089c"
    text: {Particles dome in R2? It imo uses just one face and dynamically creates a draw block ...}
    sent: "2016-05-04T06:59:52.958Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "57299c0bdf1a01ff18fc4908"
    text: {@dockimbel I have rewrite 2 demos bouncing ball. One with face offset and other with moving the draw circle. ^/with face the demo is more fluid.^/so just a  question just to have better understand (I have only 2 weeks of Red/Rebol  experiences): ^/Do you thing it is possible to have a lot of creation/deletion of faces in acceptable time/memory usage ? (consider some demos like particles). Is it better to use a lot of faces ? ^/ }
    sent: "2016-05-04T06:51:55.300Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "572967ccc2a86dcf79194dbf"
    text: {@ietv_twitter Draw dialect accepts only commands described [there](https://github.com/red/red/wiki/Draw-dialect), you cannot put regular code in it.}
    sent: "2016-05-04T03:09:00.024Z"
    editedAt: "2016-05-04T03:09:15.781Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57296774c2a86dcf79194dbe"
    text: {Here's a version where the animation is activated by a click on a button as you asked for:^/```lisp^/view [^/^-size 500x100^/^-button "Move" [^/^-^-loop 20 [^/^-^-^-b/offset: b/offset + 10x0^/^-^-^-loop 5 [do-events/no-wait wait 0.02]^-;-- wait 0.1 second^/^-^-^-show b^/^-^-]^/^-]^/^-b: base^/]^/```}
    sent: "2016-05-04T03:07:32.819Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572964c2aa92b14772cb513f"
    text: {@ietv_twitter We don't have support for timer events yet, but that should come very soon (next release). Without timer event, you cannot do animations properly. There is a workaround to achieve simple animations right now, but it is not handy to work with:^/```lisp^/Red []^/ ^/view/no-wait [size 500x100 b: base]^/ ^/loop 20 [^/^-b/offset: b/offset + 10x0^/^-loop 5 [do-events/no-wait wait 0.02]^-;-- wait 0.1 second^/^-show b^/]^/^/do-events^/```}
    sent: "2016-05-04T02:56:02.559Z"
    editedAt: "2016-05-04T03:05:21.647Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572921eddf1a01ff18fc32af"
    text: {Thanks @nodrygo , I got something working. I want to be able to click a button and have it move the circle 1 pixel, update the screen, repeat some arbitrary number of times (starting at, say, 100 loops). But when I do that, it moves too fast to see. I tried slowing the loop down with Wait, but that just made the program wait and then update the screen to the final position. How do I get it to move incrementally across the screen?}
    sent: "2016-05-03T22:10:53.095Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5728f2b3df1a01ff18fc21d0"
    text: {@dockimbel  have certainly a better answer than me ^/but may be you want something like that^/*unfortunately I don't know how to have an infinite  event when nothing is done  so you have to move your mouse in face area*  ^/*and this is probably naive and bad Red idiomatic code *^/^/```^/Red [^/        Title: "ballbounce"^/        Needs: 'view^/]^/^/move: 1x1^/moveball: does [^/   lastpos: ball/4^/   nextpos: lastpos + move ^/   if nextpos/x >= 800  [move: as-pair -1 (move/y)]^/   if nextpos/x <= 0    [move: as-pair 1 (move/y)]^/   if nextpos/y >= 600  [move: as-pair (move/x) -1]^/   if nextpos/y <= 0    [move: as-pair (move/x) 1]^/   ball/4: nextpos^/]^/^/ball: [pen black  circle 20x20 10]^/view/no-wait [^/    title "VID demo : Simple Draw"^/    b: base 800x600 white all-over draw ball on-over[moveball]^/]^/```}
    sent: "2016-05-03T18:49:23.859Z"
    editedAt: "2016-05-03T18:50:57.502Z"
    v: 3
    author: "56f66af985d51f252abaec66"
) #(
    id: "5728ee40474247a946a5e193"
    text: {```cb: base draw [circle 40x40 20 cb/offset: cb/offset + 10x0]```}
    sent: "2016-05-03T18:30:24.356Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5728ee30474247a946a5e18a"
    text: {Something like this: '''cb: base draw [circle 40x40 20 cb/offset: cb/offset + 10x0]'''}
    sent: "2016-05-03T18:30:08.614Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5728edd60149d6bb04b85e01"
    text: {@dockimbel But that only works with VID faces, right? Can I use that to move the Base face if I'm drawing on it?}
    sent: "2016-05-03T18:28:38.245Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5728de2812cceadb7b1a3e9b"
    text: "oh great I don't know that "
    sent: "2016-05-03T17:21:44.567Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5728ddfcc2a86dcf791949f5"
    text: {@ietv_twitter `/offset` is the right facet to modify for that:^/```lisp^/view [b: base button "+10" [b/offset: b/offset + 10x0]]^/```}
    sent: "2016-05-03T17:21:00.334Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5728dae4df1a01ff18fc1911"
    text: {you have to calculate the new position and change the circle coordinates in the draw block.  ^/This is different of your needs but you may look [simpleDraw1](https://github.com/nodrygo/DemosRed) in my  git Red demos code . I draw a list of circle to paint on face at different coord. following the mouse }
    sent: "2016-05-03T17:07:48.666Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5728d7be944fc7ba04ccabe5"
    text: {So this morning I learned a little more about VID, 'View and Draw. Working off of doc's simple example he gave me, how would I move a VID face programmatically? For example, I have my Base that I'm drawing a circle on, now I want to move it across the screen incrementally. I tried /offset and it didn't work.}
    sent: "2016-05-03T16:54:22.405Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "572890fdd6d0f60219f00fc9"
    text: {@ietv_twitter Oops, I overlooked it, sorry. Anyway, that explanation should avoid you to fall into that common trap for newcomers in Red/Rebol world. ;-)}
    sent: "2016-05-03T11:52:29.112Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57288b3f0149d6bb04b83851"
    text: {@dockimbel  thank you for the explanation, I added ```j: ""``` because it looked like it was added to the previous result, but it didn't change the effect, the print statement showed that j was empty (also without making it an empty string) and i what it should be. }
    sent: "2016-05-03T11:27:59.657Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "572874a3474247a946a5b833"
    text: {@dockimbel I have run through some of the examples in red/code. Some of them I understood, some of them I didn't. I'm going to dig through the VID documentation and the examples again, and the test scripts, and see what questions it brings up. Thanks again!}
    sent: "2016-05-03T09:51:31.084Z"
    v: 1
    author: "57242879659847a7aff53d63"
)#(
    id: "5728736d72798bd77be97d29"
    text: {@ietv_twitter Well, we all have been through the same discovering/learning process at some point, so we know how important are the first questions/answers to quickly get the correct picture. I suggest you have a look at the [Overview](https://github.com/red/red/wiki/Red-View-architecture) document for our GUI system, then you can see/try some examples from [red/code](https://github.com/red/code) and our GUI [test scripts](https://github.com/red/red/tree/master/tests).}
    sent: "2016-05-03T09:46:21.912Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5728720cdf1a01ff18fbf4bb"
    text: {@dockimbel Thank you. So far I've found the community very welcoming.}
    sent: "2016-05-03T09:40:28.746Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "572871e66871c4a646c1412a"
    text: {@ietv_twitter You are welcome to ask any question here about Red. We'll do our best to answer asap.}
    sent: "2016-05-03T09:39:50.373Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572870de72798bd77be97c76"
    text: {@dockimbel I would love to contribute, but I don't know enough to even be dangerous yet. If I can start with the basics you gave me above and figure some things out, I'll submit them to github as beginner's examples for VID.}
    sent: "2016-05-03T09:35:26.127Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "572870d0474247a946a5b739"
    text: {@keesse The issue is coming from `j: ""`, where I suppose you assume it does some kind of "resetting", but that's not how assignment works in Red and other Rebol languages. In a nutshell, you make the word `j` refer to the literal string which follows it. Each change on that literal string is persistent, as on each iteration, you are making `j` refer to the *same* string. The solution can be:^/1. Use COPY to ensure you get a new empty string on each iteration: `j: copy ""`.^/2. Use a dynamic allocation: `j: make string! 10` which creates an empty string with 10 slots reserved (will auto-expand if required).^/^/If you want a longer/deeper explanation, you can read this [post](https://www.reddit.com/r/redlang/comments/4ecs9n/insane_behavior_in_rebol_lets_put_an_end_to_this/d2lt4fi) on [/r/redlang](https://www.reddit.com/r/redlang/).}
    sent: "2016-05-03T09:35:12.725Z"
    editedAt: "2016-05-03T09:38:09.564Z"
    v: 5
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57287043d6d0f60219f00760"
    text: {@dockimbel  Yes I saw so, but used the text in the example instead of the ```, better luck next time ;-)}
    sent: "2016-05-03T09:32:51.064Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "57286fd36871c4a646c140d1"
    text: {@keesse You can render nicely the posted source code on Gitter by enclosing it with 3 backquotes on a head line, then 3 backquotes on a bottom line.}
    sent: "2016-05-03T09:30:59.313Z"
    editedAt: "2016-05-03T09:31:34.347Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57286fc512cceadb7b1a1798"
    text: {@mydoghasworms I also found join not to be implemented yet.^/The append copy "" reduce works fine^/Thanx!^/}
    sent: "2016-05-03T09:30:45.229Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "57286fc36871c4a646c140cb"
    text: {@keesse Though even this works for basic string concatenation: `append "" ["a" "b" "c"]`.  Did I understand the problem correctly?}
    sent: "2016-05-03T09:30:43.431Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "57286ef46871c4a646c1409c"
    text: {@ietv_twitter Not yet, though, contributions would be welcome for that. ;-)}
    sent: "2016-05-03T09:27:16.106Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57286ecf474247a946a5b6be"
    text: {Is there a way to use the wonderful HELP command in the console on VID and/or 'view?}
    sent: "2016-05-03T09:26:39.600Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "57286ebe6871c4a646c14090"
    text: {So you can do something like^/```^/red>> append copy "" reduce ["a" "b" "c"]^/== "abc"^/```}
    sent: "2016-05-03T09:26:22.732Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "57286eb272798bd77be97be9"
    text: {@dockimbel Thank you. That gives me the basis to experiment a bit. I misunderstood that 'view was the higher level dialect, not VID, so that was part of the problem!}
    sent: "2016-05-03T09:26:10.718Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "57286e1f6871c4a646c14056"
    text: {@keesse In Rebol there was a `join` function. Not sure what is planned for Red, but if you look here: https://gitter.im/red/red?at=571e90b047b4c6480ffa3240 there is a workaround.}
    sent: "2016-05-03T09:23:43.051Z"
    v: 1
    author: "556d6c4e15522ed4b3e14763"
) #(
    id: "57286d0412cceadb7b1a16f0"
    text: {I'm trying to concatenate strings, append is the only way I found, but doing so in a loop does not give me the result I Expect:^/var code = "formatted";^/Red []^/^/ind: ["one" "two" "three"]^/foreach i ind  [ print i]^/^/foreach i ind  [^/    j: ""^/    print [ "J:" j "I:" i]^/    j: append append "'" i "'"^/    print j^/]^/^/one^/two^/three^/J:  I: one^/'one'^/J:  I: two^/'one'two'^/J:  I: three^/'one'two'three'^/}
    sent: "2016-05-03T09:19:00.050Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "57282738c2a86dcf7919443f"
    text: {That example was using VID, the DSL on top of Red/View. If you want to do it directly by manually constructing the face objects, here is an example:^/```lisp^/view make face! [^/^-type: 'window offset: 100x100 size: 300x300^/^-pane: reduce [^/^-^-make face! [^/^-^-^-type: 'base offset: 20x20 size: 80x80 color: silver^/^-^-^-draw: [circle 40x40 20]^/^-^-^-options: [drag-on: 'down]^/^-^-]^/^-]^/]^/```}
    sent: "2016-05-03T04:21:12.780Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57282713682b8fdf3c8c8544"
    text: {@ietv_twitter You can start from this simple VID example: ^/```lisp^/view [base loose draw [circle 40x40 20]]^/```^/It creates a draggable face object of type `base` which contains a circle.}
    sent: "2016-05-03T04:20:35.699Z"
    editedAt: "2016-05-03T04:20:50.600Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "57282705c2a86dcf7919443a"
    text: {@ietv_twitter Hi Sherman, the so called "reference documentation" is mostly for documentation writers, so we are lacking currently appropriate documentation and tutorials for beginners.}
    sent: "2016-05-03T04:20:21.919Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5727f730df1a01ff18fbde4e"
    text: {I'm trying to learn view, but not making much sense of the documentation. I just want to create an object that draws a circle, then move the circle around. What do I do?}
    sent: "2016-05-03T00:56:16.986Z"
    v: 1
    author: "57242879659847a7aff53d63"
) #(
    id: "5721f20f2cd01bf9764b87eb"
    text: {i do this software because i need that for my own data^/if the main functions are working than ok.^/i appeciate your advice here and will do that^/in the next APP.^/The idea of that APP is already fixed.^/But my energy levels are dropped yet.^/So i make brake and start the new project in time.^/Have a nice day.^/One thing is shure : RED is FUN programming.}
    sent: "2016-04-28T11:20:47.848Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5721f0f34ba1347709b5da41"
    text: "Other than that - apps behaves as expected!"
    sent: "2016-04-28T11:16:03.716Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5721f0e58a90ed791313733c"
    text: {Maybe it's different in a compiled code or there is something other happening, who knows ....}
    sent: "2016-04-28T11:15:49.175Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5721f0b62cd01bf9764b8787"
    text: {It is just strange, as simple: `view [button "ok"]`let's you close the window back to console, when the close button is pressed ...}
    sent: "2016-04-28T11:15:02.570Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5721f0394da16e7d13d99667"
    text: {not important at that state. its ready as it is.^/my statement : nothing is perfect^/but the main function and intention of a tool ^/or system you must rely on.^/as a beginner i have given my best.}
    sent: "2016-04-28T11:12:57.173Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5721ed0e2cd01bf9764b8689"
    text: {@Mennohexo - you should allow to close the app by pressing the close button at the top right section of the screen? }
    sent: "2016-04-28T10:59:26.027Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5721eb21e8a4670f2b5d5220"
    text: {Hello ,^/^/its time to deliver.^/^/You can download my first APP on Homepage http://www.hans-schueren.de^/^/RED brings back the FUN in programming.^/^/For me as a beginner that has come to reality.^/^/See you.....^/^/^/^/Hans^/}
    sent: "2016-04-28T10:51:13.749Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5721c1b18d3a974522a50bcc"
    text: {@dockimbel thanks. i'm going to put all my 'eggs' in Red's 'basket' :)}
    sent: "2016-04-28T07:54:25.582Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "5721c0fb8d3a974522a50bc4"
    text: {@asampal Yes, same as in Rebol, you'll be able to deactivate the GC if you need to.}
    sent: "2016-04-28T07:51:23.431Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5721c0b79c86c12a7f568ac7"
    text: {@dockimbel I'm not sure I remember your thinking on this - once GC is added to Red will you still be able to program with the collector disabled? I'm just thinking of the end of the application spectrum where GC is usually not desired.}
    sent: "2016-04-28T07:50:15.755Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "5721c00849d5aaf16db7f257"
    text: {@gour Red is the first real *fullstack* language, which means its range of application is much wider than any other language around.  Red is the true embodiment of "general programming language". ;-)}
    sent: "2016-04-28T07:47:20.764Z"
    editedAt: "2016-04-28T07:50:31.003Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5721bc339c86c12a7f568aae"
    text: "of course, here i'm thinking about Red-1.0 ?"
    sent: "2016-04-28T07:30:59.657Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "5721bc1f9c86c12a7f568aad"
    text: {is there some specific niche for which Red is recommended to use or it does qualify as 'general programming language' ?}
    sent: "2016-04-28T07:30:39.269Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57218c989c86c12a7f568a62"
    text: {@gour I usually update the roadmap in the 24h after publishing the new article.}
    sent: "2016-04-28T04:07:52.486Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "572104dc4da16e7d13d95e15"
    text: "JIS - Illusions Of Reality [Full Album]"
    sent: "2016-04-27T18:28:44.076Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "57210399e8a4670f2b5d18ac"
    text: {Ladys and Gentlemen there are some good news.^/(Now with shift-enter)^/Deployment is ready yet !^/I have hacked my own Ressources from .exe^/Works fine^/I have inserted the relevant VALUES  manually.^/WHY have i done this ?^/Because you made a phone call !   ha ha ha^/This job is successfully done.^/Now i have deserved a little holiday.^/Make 14 days Break on the Planet Earth.^/See you....^/Hans}
    sent: "2016-04-27T18:23:21.061Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720f57b49d5aaf16db7ef80"
    text: {@dockimbel really? i had feeling that some items got updated after 0.6.0}
    sent: "2016-04-27T17:23:07.010Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "5720d0a42cd01bf9764b388b"
    text: {Thanks. I will sort this information at the right time.  I am a beginner in programming. Just want to deploy one first program. And then make a break to sort all information in a relaxt manner. Because the first work is done.}
    sent: "2016-04-27T14:45:56.262Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720cf7d9c86c12a7f568693"
    text: {@Mennohexo just for your information (FYI), you can enter a new line without submitting the text in gitter using `shift-enter`. In this way, when you have something like the list you had above, it would be easier read.}
    sent: "2016-04-27T14:41:01.467Z"
    v: 1
    author: "55766f7115522ed4b3e19fcb"
) #(
    id: "5720cee339700a780927ab1b"
    text: {One point more :  ressource hacking of the ICON in the compiled .exe is possible , so the .res script is there.}
    sent: "2016-04-27T14:38:27.598Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720ca9e2cd01bf9764b3617"
    text: {Hello again ,  the following report :  1. a complete APP is ready and running  properly   2. The only thing for deployment is to attach the ressources data to the compiler in the script form which is seen above.  3. This is working well on the computers of 3 red programmers.  4. One of them have OS WINXP too.  5. I have 2 computers with WINXP SP3 and have tried on them :  5. Compiling the above seen example code with the 060.exe and the red-27apr16-719aeac.exe also with the parameter -t WindowsXP  6. In every compiled .exe is NO ressources seen in the context menue VERSION - autor and rights.  7. Its strange that the TITLE is also not seen.    My next step:  try it on a WIN7 PC.   Bottomline : i have no idea how to handle this last step for deploy and why this appeared here.  stay dry}
    sent: "2016-04-27T14:20:14.403Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720c50649d5aaf16db7ee0d"
    text: "@gour Only when a new official release is made."
    sent: "2016-04-27T13:56:22.140Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5720c0cf8d3a974522a5070c"
    text: {am i right that [roadmap](http://www.red-lang.org/p/roadmap.html) is regualrly updated?}
    sent: "2016-04-27T13:38:23.850Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "5720b94be8a4670f2b5cf9f5"
    text: {i am working on it.  You know: "The Devil is in the detail"  You think your work is ready in all complete ways. But  in the last  phase of the project the hectic may occur for unbelievable reasons. Not only in programming ....}
    sent: "2016-04-27T13:06:19.617Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720b8682cd01bf9764b2ee0"
    text: {I am not sure if executable resources are properly implemented already. There was even a separate branch for that in the past ...}
    sent: "2016-04-27T13:02:32.146Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "5720b7aa8a90ed7913131b65"
    text: {ha ha haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  ok I have tried the following    1.  compiling with -t  WindowsXP   2. compiling with the night build actual version   red-27apr16-719aeac.exe    There are NO ressources in the .exe to see.    NOW i try another Windows XP Version on a Different Laptop.}
    sent: "2016-04-27T12:59:22.425Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720b16b4ba1347709b57d28"
    text: {Thank you for your kindly support. Have a nice day. See you later.}
    sent: "2016-04-27T12:32:43.050Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720b1264ba1347709b57d0c"
    text: {ok. Everything is ready here. The only point is the RECOURSES Header Script for the APP.  I am working on it. Many times it is not functioning. Now i try another PC, the target XP option , and the nightly build version until finally the exe has the right  data for ICON ,VERSION , AUTHOR  etc in the context menue}
    sent: "2016-04-27T12:31:34.616Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720b04b0f156f102b413604"
    text: {@Mennohexo It should, as long as you don't use the Gesture API which is not supported on XP and Vista.}
    sent: "2016-04-27T12:27:55.237Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5720aff59b4160fa760a49a8"
    text: {Hello Nenad ,  if i do that , is the app aslo running on other windows versions ?}
    sent: "2016-04-27T12:26:29.325Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720af8de8a4670f2b5cf69f"
    text: {@Mennohexo For running a GUI app on WindowsXP, you need to compile with `-t WindowsXP` target.}
    sent: "2016-04-27T12:24:45.209Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5720ae500f156f102b413552"
    text: "ok. i have not think about that.  i will try"
    sent: "2016-04-27T12:19:28.520Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720adece8a4670f2b5cf608"
    text: {you should try with last  Windows ^-red-27apr16-88a43c8.exe}
    sent: "2016-04-27T12:17:48.920Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5720ad6be8a4670f2b5cf5e9"
    text: "I use the actual  060.exe from red page."
    sent: "2016-04-27T12:15:39.969Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720ad3c2cd01bf9764b2aee"
    text: "do you use the last Red nightly build ? "
    sent: "2016-04-27T12:14:52.846Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5720acc50f156f102b4134d6"
    text: "ok. i have to try another PC here.  thanks"
    sent: "2016-04-27T12:12:53.513Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720ac418a90ed791313174f"
    text: {no idea .. it's a very old virtual box on xp . My main working os is Linux :-)^/how to know that ? }
    sent: "2016-04-27T12:10:41.407Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5720abe2e8a4670f2b5cf554"
    text: "May i ask you what Service Pack ?"
    sent: "2016-04-27T12:09:06.831Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720ab158a90ed79131316e4"
    text: {work fine for me on my XP/virtualbox .  see version/description/copyrigth on exe properties ^/but I use that build   *"22-Apr-2016/8:44:45+2:00"*}
    sent: "2016-04-27T12:05:41.883Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5720ab0c4ba1347709b57ae2"
    text: {[![xpproperties.png](https://files.gitter.im/red/red/welcome/9BzG/thumb/xpproperties.png)](https://files.gitter.im/red/red/welcome/9BzG/xpproperties.png)}
    sent: "2016-04-27T12:05:32.082Z"
    v: 1
    author: "56f66af985d51f252abaec66"
) #(
    id: "5720a9544ba1347709b57a54"
    text: {Thanks. That  helps me. Its the OS Version. Nothing else. By. Have a nice day on the RED PLANET>}
    sent: "2016-04-27T11:58:12.538Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720a90f2cd01bf9764b2984"
    text: {Good luck.... sorry i can't help more, but have no XP at hand.}
    sent: "2016-04-27T11:57:03.399Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "5720a8b839700a7809279c7b"
    text: {ok i dont know why it is not functioning here. I have to check out.}
    sent: "2016-04-27T11:55:36.418Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720a87c4da16e7d13d9397f"
    text: {Yes, on Win10. Maybe your issue is only related to WinXP.}
    sent: "2016-04-27T11:54:36.187Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "5720a8482cd01bf9764b2945"
    text: "Seems to work well on your PC^/"
    sent: "2016-04-27T11:53:44.384Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720a81c39700a7809279c44"
    text: {And if i add `version: 1.2.3` in the Red header it shows in the EXE properties as well.}
    sent: "2016-04-27T11:53:00.619Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "5720a77d2cd01bf9764b2901"
    text: {[![red.png](https://files.gitter.im/red/red/welcome/IUXn/thumb/red.png)](https://files.gitter.im/red/red/welcome/IUXn/red.png)}
    sent: "2016-04-27T11:50:21.408Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "5720a77439700a7809279c0f"
    text: {Do you see the right  version and author in the context menue VERSION  ?  Is there a icon ? }
    sent: "2016-04-27T11:50:12.662Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720a71b0f156f102b41330e"
    text: {I compiled this, with the latest Red binay:^/```^/Red [ needs: 'view^/  title: "Basic Red GUI Widgets" ^/  author: "Hans Schueren" ^/  rights: "Hans Schueren" ^/]^/^/view [^/    title "Window title"^/    below^/    t: text "Some text"^/    text 400x30 bold italic blue font-size 16 "Text with properties"^/    button "Click Me" [t/text: "Changed!"]^/    field 400 "Type something into this text entry field"^/    area 400x200^/]^/```}
    sent: "2016-04-27T11:48:43.065Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "5720a6da4ba1347709b5797d"
    text: {Its strange. If you only interpret this code there is also no title. It seems the header is false code. May i ask you for a red example template of a working header with ressources. Also strange is that a red programmer has made that code on his PC and it works well there.}
    sent: "2016-04-27T11:47:38.511Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720a6874da16e7d13d938e4"
    text: {I just tried the compilation. It works, and the program runs fine.}
    sent: "2016-04-27T11:46:15.031Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "5720a5de4da16e7d13d938b0"
    text: {The window title is set by adding `title "The title you want"` in the view block. Red metadata, for now, are just metadata for Red and not used to set a default title.}
    sent: "2016-04-27T11:43:26.966Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "5720a5434da16e7d13d93886"
    text: {also : there is no title in the compiled exe.  Does that example code working on your PC ?}
    sent: "2016-04-27T11:40:51.653Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720a4afe8a4670f2b5cf31c"
    text: {The version and author ressources from the exe context menue only. The program is ok and ready. Only the ressoures in the Red header. author and rights.}
    sent: "2016-04-27T11:38:23.232Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720a3f69b4160fa760a45dc"
    text: {How is it not working? Don't the "Some text" become "Changed!" when you click?}
    sent: "2016-04-27T11:35:18.195Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "5720a3290f156f102b413220"
    text: {This Red example is not working here. I have WinXP. Compiler is the 060 exe. There are no ressource for the version and author etc. in the compiled exe.Here is the code : Red [ needs: 'view ^/^/      title: "Basic Red GUI Widgets" ^/      author: "Hans Schueren" ^/      rights: "Hans Schueren" ^/^/] ^/^/view [^/below^/t: text "Some text"^/text 400x30 bold italic blue font-size 16 "Text with properties"^/button "Click Me" [t/text: "Changed!"]^/field 400 "Type something into this text entry field"^/area 400x200^/]}
    sent: "2016-04-27T11:31:53.603Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "5720a2b00f156f102b4131f9"
    text: "This Red example  is not working here."
    sent: "2016-04-27T11:29:52.992Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "571f78848a90ed791312c3cc"
    text: {I was getting those results using the Windows build 22apr16 . I downloaded  26apr16 and it's working fine now. Should have tried that first.^/Noted about the bug reports. Just not always sure whether a possible bug or lack of experience.   Thanks again }
    sent: "2016-04-26T14:17:40.287Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "571f73bcc388e4fe099a878e"
    text: {For bug reports, I would prefer them to be done in red/red channel rather than red/welcome, which is meant to help with first steps of using Red and answer questions from newcomers. TIA}
    sent: "2016-04-26T13:57:16.422Z"
    editedAt: "2016-04-26T13:58:45.536Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571f73a88d3a974522a50057"
    text: {@RnBrgn It works fine here:^/```lisp^/red>> str: "test one test two test three"^/== "test one test two test three"^/red>> replace/all str "test" "number"^/== "number one number two number three"^/```}
    sent: "2016-04-26T13:56:56.551Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571f638c4da16e7d13d8ded9"
    text: {@dockimbel  Wondering if "replace/all" changed after latest fix. ^/^/red>> str: "test one test two test three"^/== "test one test two test three"^/red>> replace/all str "test" "number"^/*** Script error: invalid argument: "number"^/*** Where: eval-set-path^/red>> replace str "test" "number"^/== "numberest one test two test three"^/red>> print str^/numberest one test two test three}
    sent: "2016-04-26T12:48:12.901Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "571f5bc92cd01bf9764acae1"
    text: {Thanks all!, I also did a foreach loop like in my  python example:^/red>> dict: #()^/== #()^/red>> numbers: ["one" "two" "three"]^/== ["one" "two" "three"]^/red>> foreach n numbers [ dict/:n: 0]^/== 0^/red>> dict^/== #(^/    "one" 0^/    "two" 0^/    "three" 0^/)^/It works fine, I can now go on with converting my python script to red :-)}
    sent: "2016-04-26T12:15:05.802Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "571f5bc64da16e7d13d8dc59"
    text: {@keesse Here are two examples of indexed access in a loop:^/```lisp^/red>> dict: #()^/== #()^/red>> foreach key [one two three][dict/:key: 0]^/== 0^/red>> dict^/== #(^/    one: 0^/    two: 0^/    three: 0^/)^/red>> foreach key [four five six][put dict key 0]^/== 0^/red>> dict^/== #(^/    one: 0^/    two: 0^/    three: 0^/    four: 0^/    five: 0^/ ...^/```}
    sent: "2016-04-26T12:15:02.306Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571f5ad88a90ed791312b8ac"
    text: {My example is wrong. If you want to write D/one later L must be `[one two three]` (words, not strings inside)}
    sent: "2016-04-26T12:11:04.784Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "571f5a814da16e7d13d8dbfb"
    text: {I was thinking at a general example how to use index. }
    sent: "2016-04-26T12:09:37.853Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "571f5a590f156f102b40d583"
    text: "What a trick :-)"
    sent: "2016-04-26T12:08:57.382Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "571f5a2f9b4160fa7609e88f"
    text: {@Zamlox - hence your example above does not apply. Author wanted to have `one`, `two, `three`set,}
    sent: "2016-04-26T12:08:15.635Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "571f5a2d4ba1347709b51a83"
    text: {@keese to do the same as your example, you could write:^/```^/L: ["one" "two" "three"]^/foreach n L [D/:n: 0]^/```^/Then D would be:^/```^/#(^/    "one" 0^/    "two" 0^/    "three" 0^/)^/```^/}
    sent: "2016-04-26T12:08:13.754Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "571f59ea2cd01bf9764aca45"
    text: {Also - we can't use path notation, as doing something like dict/1: 10, will simply not set a word `one`, but will introduce new item in terms of map!}
    sent: "2016-04-26T12:07:06.598Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "571f59728a90ed791312b837"
    text: "yep"
    sent: "2016-04-26T12:05:06.329Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "571f596be8a4670f2b5c9406"
    text: "yes, we don't have `for`yet ..."
    sent: "2016-04-26T12:04:59.629Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "571f59184ba1347709b51a27"
    text: {@keesse ^/```^/red>> i: 1^/== 1^/red>> dict: #()^/== #()^/red>> while [i < 10] [dict/:i: i i: i + 1]^/red>> dict^/== #(^/    1 1^/    2 2^/    3 3^/    4 4^/    5 5^/    6 6^/    7 7^/    8 8^/    9 9^/)^/```}
    sent: "2016-04-26T12:03:36.524Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "571f58bb4da16e7d13d8db57"
    text: "```^/foreach v values-of D [ print v ]^/```"
    sent: "2016-04-26T12:02:03.538Z"
    editedAt: "2016-04-26T12:02:18.400Z"
    v: 2
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "571f587539700a7809273b9f"
    text: {@keesse ^/```^/D: #(one: 1 two: 2)^/foreach k keys-of D [ print D/:k ]^/```}
    sent: "2016-04-26T12:00:53.302Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "571f54950f156f102b40d388"
    text: {@dockimbel, that works fine, but how can I use in in a loop with the index as a variable, like in python:^/>>> numbers = {"one","two","three"}^/>>> dict = {}^/>>> for n in numbers:^/...     dict[n] = 0^/>>> dict^/{'three': 0, 'two': 0, 'one': 0}}
    sent: "2016-04-26T11:44:21.269Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "571f4cfc7469496137b94ac2"
    text: "@dockimbel thanks, I'll give it a try"
    sent: "2016-04-26T11:11:56.148Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "571f4cdc7469496137b94ab7"
    text: {More about `map!` datatype [here](https://github.com/red/red/wiki/Map!-datatype).}
    sent: "2016-04-26T11:11:24.916Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571f4bf94bbb6abf7d5f2604"
    text: {Alternatively, you can create the map filled already:^/```lisp^/ed>> dict: #(one: 1 two: 2)^/== #(^/    one: 1^/    two: 2^/)^/red>> dict/one + dict/two^/== 3^/```}
    sent: "2016-04-26T11:07:37.470Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571f4bc1d47413c07dcd5975"
    text: {@keesse Sure, you can use `map!` type:^/```lisp^/red>> dict: #()^/== #()^/red>> dict/one: 1^/== 1^/red>> dict/two: 2^/== 2^/red>> dict/one + dict/two^/== 3^/```}
    sent: "2016-04-26T11:06:41.170Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571f4ae64bbb6abf7d5f25b7"
    text: {Is there something in Red like what is called a dictionary in Python?^/>>> dict = {}^/>>> dict['one'] = 1^/>>> dict['two'] = 2^/>>> dict['one'] + dict['two']^/3}
    sent: "2016-04-26T11:03:02.944Z"
    v: 1
    author: "56fbb9ad85d51f252abb9675"
) #(
    id: "571ef166ad23942c68599a7a"
    text: {In Red, we have separated *splitting* from *parsing*, as they are really different functions.}
    sent: "2016-04-26T04:41:10.449Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "571e93690eef754b5eaa5b5e"
    text: {I see , that's where I was getting hung up when trying the Rebol examples. The first example splits a string based on delimiter and i could not get it to work.^/parse "this is a string"  none^/The parse function does not take strings as an argument . only blocks. ^/Thanks. }
    sent: "2016-04-25T22:00:09.720Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "571e92430eef754b5eaa5afb"
    text: {@RenaudG true. So parse cannot be used to split strings based on a delimiter. But for this Red has 'split' function.}
    sent: "2016-04-25T21:55:15.105Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "571e91b0f5b6334a5e70d652"
    text: "yeah parse in Red is verry good so far"
    sent: "2016-04-25T21:52:48.388Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "571e919f9689a5440f7b670d"
    text: {The  only obvious difference i know is that in Red the rules argument can only be a block!}
    sent: "2016-04-25T21:52:31.296Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "571e90d7f5b6334a5e70d602"
    text: {I'm using parse function with complex rules and so far it works ok. I use Rebol documentation.}
    sent: "2016-04-25T21:49:11.864Z"
    v: 1
    author: "56f909e585d51f252abb2f03"
) #(
    id: "571e907ed47413c07dcd31eb"
    text: {There is some differences, but i'm using rebol doc as a starting point to learn parsing with Red.}
    sent: "2016-04-25T21:47:42.835Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "571e9040f5b6334a5e70d5cc"
    text: {Parse implementation is well advanced already : http://www.red-lang.org/2013/11/041-introducing-parse.html}
    sent: "2016-04-25T21:46:40.420Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "571e8f867469496137b922c4"
    text: {I've seen some discussions in the Red room regarding the parse function. Is Parse fully implemented in Red ?   If so  , would the Rebol docs be useful for examples or is the Red version too different?}
    sent: "2016-04-25T21:43:34.056Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "571c8361f5b6334a5e705cac"
    text: "@dockimbel Oh, I see, thanks."
    sent: "2016-04-24T08:27:13.799Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "571c82e28910b79b5b65e975"
    text: {@Phryxe There's a [ticket](https://github.com/red/red/issues/1797) about that already.}
    sent: "2016-04-24T08:25:06.806Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571c826f7469496137b8a985"
    text: {Trying to find scrollbar in an `area`.  I don't quite understand *A vertical scroll-bar **can** appear if all lines of text cannot be visible in the area*. Maybe it is on the to-do list?}
    sent: "2016-04-24T08:23:11.162Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "571ba92d01f15fc17a62a820"
    text: {@RenaudG It is not a strict rule, more like a weak convention. There is no need actually for encoding the return type in some ways at the end of a function name, we don't aim at [Hungarian notation](https://en.wikipedia.org/wiki/Hungarian_notation). It is often more like a visual clue when reading a long line of conditional expressions, to more easily separate each expression boundary. It is also used for functions which are not verbs (which is the default convention) as shown by @endo64 , so it looks like asking a question in such case (and does not collide with words used as variables).}
    sent: "2016-04-23T16:56:13.436Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571b8c507469496137b887d1"
    text: {@dockimbel Yes, you are right. I missed that. Next time I'll be sure to also check the VID page.}
    sent: "2016-04-23T14:53:04.237Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "571b510f47b4c6480ff992d4"
    text: {In some rarer cases they return non-logic values, like `length?`, `info?`, `offset?`, `suffix?`, `index?`. But I prefer `length?` instead of `get-length`, or `index?` instead of `get-index` or `position`.}
    sent: "2016-04-23T10:40:15.403Z"
    v: 1
    author: "556ed0ce15522ed4b3e157ed"
) #(
    id: "571b27050eef754b5ea9b44b"
    text: {But one of the inconsistencies of REBOL is that `?` at the end don't allways mean `logic!`... like in `length?` :-1: }
    sent: "2016-04-23T07:40:53.150Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "571b164ef638ed830c7843f9"
    text: {@Phryxe I guess you were thinking about the VID [wrap](https://github.com/red/red/wiki/VID-Reference-Documentation#wrap) keyword.}
    sent: "2016-04-23T06:29:34.546Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571b15969689a5440f7ac1fb"
    text: {@dockimbel  Oh, I confused it with `wrap` (argument to `area`) that I didn't find any documentation about, but it worked.}
    sent: "2016-04-23T06:26:30.749Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "571adbe88910b79b5b65e471"
    text: {@Phryxe Yes, it is a convention from Rebol world that use also in Red when the word is referring to a `logic!` value, same for `visible?`and `enable?`.}
    sent: "2016-04-23T02:20:24.144Z"
    editedAt: "2016-04-23T02:21:04.170Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571a690647b4c6480ff96d51"
    text: {Should there really be a question mark after `wrap` on wiki page **Red View Graphic System**?}
    sent: "2016-04-22T18:10:14.560Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "571a4c6ef5b6334a5e7003da"
    text: "@dockimbel Thanks."
    sent: "2016-04-22T16:08:14.055Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "571a3cbe4bbb6abf7d5e2a3f"
    text: {@dockimbel  "replace"   works great. thank you.}
    sent: "2016-04-22T15:01:18.560Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "571a2f8270a67b20788da87a"
    text: "@RnBrgn  `replace` bug on strings just fixed."
    sent: "2016-04-22T14:04:50.138Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571a2b6eaca916774e0f84fb"
    text: {@Phryxe  Use `to`:^/```lisp^/red>> to url! "http://red-lang.org"^/== http://red-lang.org^/```}
    sent: "2016-04-22T13:47:26.494Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "571a1c791aa9eb495116fdf7"
    text: {Is there yet a function to convert `string!` to `url!`?}
    sent: "2016-04-22T12:43:37.510Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5715cd5882811d2e18b4d180"
    text: {morning. i'd like to hear from some experienced Red/REBOL user which mode to use in Emacs for Red? i've found the two:^/*  [REBOL](http://www.rebol.com/tools/rebol.el) mode and^/* [Red](https://github.com/Skrylar/red.el) mode^/Any advice? (of course, I'm just starting with Red without any prior REBOL experience)^/}
    sent: "2016-04-19T06:16:56.371Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "57112ae5b30cfa0f384bcd5e"
    text: "Hello , Arnold Schwarzenegger. I am back."
    sent: "2016-04-15T17:54:45.323Z"
    v: 1
    author: "571129ed187bb6f0eadfa4c2"
) #(
    id: "571128935ed5a4fd3fe3640e"
    text: {That's a bug, methink :(^/```^/red>> replace ["John" "Smith" "1 Main Street" "Dallas" "texas" "75201" "212-432-5555" ] "Dallas" "123456"^/== ["John" "Smith" "1 Main Street" "123456"]^/red>> replace ["John" "Smith" "1 Main Street" Dallas "texas" "75201" "212-432-5555" ] 'Dallas "123456"^/== ["John" "Smith" "1 Main Street" "123456" "texas" "75201" "212-432-5555"]^/```}
    sent: "2016-04-15T17:44:51.339Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "571127245ed5a4fd3fe36381"
    text: {Why would the replace function remove the data items at the end of the block?^/^/red>> myblock: ["John" "Smith" "1 Main Street" "Dallas" "texas" "75201" "212-432-5555" ]^/== ["John" "Smith" "1 Main Street" "Dallas" "texas" "75201" "212-4...^/red>> print myblock^/John Smith 1 Main Street Dallas texas 75201 212-432-5555^/red>> replace myblock "Dallas" "123456"^/== ["John" "Smith" "1 Main Street" "123456"]^/red>> print myblock^/John Smith 1 Main Street 123456^/red>> }
    sent: "2016-04-15T17:38:44.980Z"
    editedAt: "2016-04-15T17:40:10.769Z"
    v: 2
    author: "56fac97685d51f252abb72b4"
) #(
    id: "570fdb2a4c2125fc3f026c76"
    text: "Too many options ;-)"
    sent: "2016-04-14T18:02:18.594Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "570fdad05ed5a4fd3fe30dbd"
    text: {Or with an enclosing block!. `change my-string ["test"]`}
    sent: "2016-04-14T18:00:48.657Z"
    editedAt: "2016-04-14T18:00:56.374Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "570fda48b30cfa0f384b7420"
    text: {Or with /only: `change/only mystring "test"`}
    sent: "2016-04-14T17:58:32.642Z"
    editedAt: "2016-04-14T17:59:20.185Z"
    v: 2
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "570fd9ea548df1be102cf194"
    text: {@RnBrgn To replace only one char with  /part. `change/part my-string "test" 1`}
    sent: "2016-04-14T17:56:58.695Z"
    editedAt: "2016-04-14T18:01:26.898Z"
    v: 3
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "570fd6595ed5a4fd3fe30c0e"
    text: {@SteeveGit > Tried the “change” function with the new release. It worked. I didn’t expect it to behave like it did. It doesn’t insert the characters into the string. It overwrites the characters based on the length. ^/^/red>> mystring: "12345678"^/== "12345678"^/red>> print change (at mystring 4 ) "four"^/8^/red>> print mystring^/123four8^/^/Thanks for the update.^/}
    sent: "2016-04-14T17:41:45.431Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "570fab5a30a23db340afbb87"
    text: "ok. thanks"
    sent: "2016-04-14T14:38:18.354Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "570fab575cd40114649b42db"
    text: {@RnBrgn change is implemented. (download a fresh red release). There's still some  inconsistencies with Rebol though.}
    sent: "2016-04-14T14:38:15.414Z"
    v: 1
    author: "5648d52a16b6c7089cbace72"
) #(
    id: "570fab444c2125fc3f025b2a"
    text: {The task list is quite long. Doc said, it might be divided into several smaller releases ....}
    sent: "2016-04-14T14:37:56.939Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "570fab1b30a23db340afbb83"
    text: "@pekr is there any ETA for 0.6.1 release?"
    sent: "2016-04-14T14:37:15.203Z"
    v: 1
    author: "5501a3a915522ed4b3dd2b89"
) #(
    id: "570fa6d64c2125fc3f02599e"
    text: {Not yet, as can be seen on the next Trello board. It is scheduled for 0.6.1 - https://trello.com/c/11bblhBn/133-0-6-1-android-gui-support}
    sent: "2016-04-14T14:19:02.306Z"
    v: 1
    author: "556ae86715522ed4b3e131b2"
) #(
    id: "570fa553548df1be102cde36"
    text: {Is the "change" function implemented in Red?^/mystring: "1234"^/change ( at mystring 3 ) "8"^/^/Poke does work for me..}
    sent: "2016-04-14T14:12:35.855Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5705099276b97d2831c8c0f7"
    text: "@dockimbel Yep, that is what I thought ;)"
    sent: "2016-04-06T13:05:22.761Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5704f7f008313f6c11c3105a"
    text: {@Phryxe Ports are not implemented yet, so `open` is not yet available. Please have a look at our detailed [roadmap](https://trello.com/b/FlQ6pzdB/red-tasks-overview).}
    sent: "2016-04-06T11:50:08.866Z"
    editedAt: "2016-04-06T11:50:55.804Z"
    v: 2
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5704f4bbf7d63d897f23c1a0"
    text: "@RenaudG Thnx"
    sent: "2016-04-06T11:36:27.731Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5704f4ac5386a9152533d054"
    text: "Yes, exactly"
    sent: "2016-04-06T11:36:12.269Z"
    v: 1
    author: "56f9907b85d51f252abb45f6"
) #(
    id: "5704f47fdc7a73775697bb01"
    text: {If I want to read a large file line by line I suppose I have to use `open/lines` (ports isn't implemented yet) as `read/lines` loads the entire file at once!?}
    sent: "2016-04-06T11:35:27.951Z"
    v: 1
    author: "558189d215522ed4b3e20ce2"
) #(
    id: "5704b425ad40c3877fa9abe5"
    text: "I added the alert window example by Doc now."
    sent: "2016-04-06T07:00:53.542Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5704b2bef7d63d897f23af5d"
    text: {The rejoin code is also available through the wiki page: https://github.com/red/red/wiki/mezzanines}
    sent: "2016-04-06T06:54:54.093Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "5704b23c8e22137808cc6714"
    text: {To all newcomers wondering what strange datetype is used above. Jan-21-2-16 is a typo, the date started as Jan-21-2016.}
    sent: "2016-04-06T06:52:44.401Z"
    v: 1
    author: "556c0f3e15522ed4b3e1399e"
) #(
    id: "57048a723a2aa3ca5a83192f"
    text: {*Lastly, I have not been able to get the functions "alert" and "rejoin" to work. Are they not implemented in Red yet?*^/^/Not implemented yet, but they are trivial to add to your code if you need them:^/```lisp^/rejoin: function [^/    "Reduces and joins a block of values."^/    block [block!] "Values to reduce and join"^/][^/    if empty? block: reduce block [return block]^/    append either series? block/1 [copy block/1][form block/1] next block^/]^/^/alert: function [^/    "Displays an alert message"^/    msg [string!]  "Message to display"^/][^/^-view/flags [^/^-^-t: text msg center return^/^-^-b: button "ok" [unview]^/^-^-do [b/offset/x: t/offset/x + (t/size/x - b/size/x / 2)]^/^-][modal popup]^/]^/```}
    sent: "2016-04-06T04:02:58.277Z"
    editedAt: "2016-04-06T04:06:00.608Z"
    v: 6
    author: "556597ad15522ed4b3e10020"
) #(
    id: "5704893fab6502a50341b4e7"
    text: {@RnBrgn For processing a block of values and changing each of them to a string, you can do:^/```lisp^/red>> list: [Bob 500 Jan-21-2-16]^/== [Bob 500 Jan-21-2-16]^/red>> forall list [list/1: form list/1]^/== "Jan-21-2-16"^/red>> list^/== ["Bob" "500" "Jan-21-2-16"]^/```}
    sent: "2016-04-06T03:57:51.048Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
) #(
    id: "570488d53a2aa3ca5a831926"
    text: {@RnBrgn For your second question: you cannot input values with invalid or unsupported syntax, so `[ Bob $500.00 Jan-21-2-16]` will generate a syntax error on input.}
    sent: "2016-04-06T03:56:05.212Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)#(
    id: "5704880f488f66e00debe71c"
    text: {@RnBrgn That tutorial you linked is specific to Rebol, not all the features used in those scripts are implemented *yet* in Red, like the `money!` datatype.}
    sent: "2016-04-06T03:52:47.251Z"
    editedAt: "2016-04-06T03:57:03.763Z"
    v: 3
    author: "556597ad15522ed4b3e10020"
) #(
    id: "570456098e22137808cc577a"
    text: {Hello, couple of questions..  ^/^/ Going through some the examples at  http://business-programming.com/^/I had an issue creating a block of data when an item in my list had a dollar sign and it wasn't quoted.   accounts: [ "Bob" $500.00 Jan-21-2016]   The error red "get does not allow integer."  The fix was easy, removing dollar sign or putting quotes around "$500.00". The error did not point out which item in the list was incorrect, which would have been nice.^/Is the example wrong for this tutorial, which didn't have the dollar value quoted or is Red different from Rebol that it needs to have it quoted?^/^/Second question:  After seeing this error, is there a way to automatically quote all items in a list at creation time for you?  Accounts: [ Bob $500.00 Jan-21-2-16]^/^/Lastly, I  have not been able to get the functions  "alert" and "rejoin"  to work. Are they not implemented in Red yet?^/^/Taking advantage of the new Red Welcome Room :)   Thanks^/}
    sent: "2016-04-06T00:19:21.535Z"
    v: 1
    author: "56fac97685d51f252abb72b4"
) #(
    id: "5703889fd39de41b4960a8c0"
    text: {Welcome to Red programming language chat room for newcomers. Feel free to ask any question related to Red here.}
    sent: "2016-04-05T09:42:55.694Z"
    v: 1
    author: "556597ad15522ed4b3e10020"
)